import{S as lyt,i as iyt,s as dyt,e as a,k as l,w as v,t as o,M as cyt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as myt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as INr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function fyt(L){let g,F,u,f,p,d,h,Mo,li,mm,et,ii,di,W0,fm,qe,Xe,ci,An,H0,yn,Ln,U0,mi,xn,J0,fi,gm,Ma;return{c(){g=a("p"),F=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),li=a("code"),mm=o("model_type"),et=o(" attribute is set to the same key you use when registering the config (here "),ii=a("code"),di=o('"new-model"'),W0=o(")."),fm=l(),qe=a("p"),Xe=o("Likewise, if your "),ci=a("code"),An=o("NewModel"),H0=o(" is a subclass of "),yn=a("a"),Ln=o("PreTrainedModel"),U0=o(`, make sure its
`),mi=a("code"),xn=o("config_class"),J0=o(` attribute is set to the same class you use when registering the model (here
`),fi=a("code"),gm=o("NewModelConfig"),Ma=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);F=r(Ae,"If your "),u=n(Ae,"CODE",{});var h$=s(u);f=r(h$,"NewModelConfig"),h$.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var gi=s(d);h=r(gi,"PretrainedConfig"),gi.forEach(t),Mo=r(Ae,`, make sure its
`),li=n(Ae,"CODE",{});var u$=s(li);mm=r(u$,"model_type"),u$.forEach(t),et=r(Ae," attribute is set to the same key you use when registering the config (here "),ii=n(Ae,"CODE",{});var p$=s(ii);di=r(p$,'"new-model"'),p$.forEach(t),W0=r(Ae,")."),Ae.forEach(t),fm=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),ci=n(Eo,"CODE",{});var Ea=s(ci);An=r(Ea,"NewModel"),Ea.forEach(t),H0=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var _$=s(yn);Ln=r(_$,"PreTrainedModel"),_$.forEach(t),U0=r(Eo,`, make sure its
`),mi=n(Eo,"CODE",{});var hm=s(mi);xn=r(hm,"config_class"),hm.forEach(t),J0=r(Eo,` attribute is set to the same class you use when registering the model (here
`),fi=n(Eo,"CODE",{});var b$=s(fi);gm=r(b$,"NewModelConfig"),b$.forEach(t),Ma=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,F),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,Mo),e(g,li),e(li,mm),e(g,et),e(g,ii),e(ii,di),e(g,W0),b(ze,fm,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,ci),e(ci,An),e(qe,H0),e(qe,yn),e(yn,Ln),e(qe,U0),e(qe,mi),e(mi,xn),e(qe,J0),e(qe,fi),e(fi,gm),e(qe,Ma)},d(ze){ze&&t(g),ze&&t(fm),ze&&t(qe)}}}function gyt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hyt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uyt(L){let g,F,u,f,p;return{c(){g=a("p"),F=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Passing "),u=n(h,"CODE",{});var Mo=s(u);f=r(Mo,"use_auth_token=True"),Mo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,F),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function pyt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _yt(L){let g,F,u,f,p;return{c(){g=a("p"),F=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Passing "),u=n(h,"CODE",{});var Mo=s(u);f=r(Mo,"use_auth_token=True"),Mo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,F),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function byt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Fyt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vyt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Tyt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Myt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Eyt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Cyt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wyt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ayt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yyt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Lyt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xyt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $yt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kyt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Syt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ryt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Byt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Pyt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Iyt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qyt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Nyt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jyt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Dyt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Gyt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Oyt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Vyt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Xyt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zyt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Qyt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Wyt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Hyt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Uyt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Jyt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Yyt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Kyt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Zyt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _Lt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function FLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function TLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function MLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ELt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function CLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ALt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function LLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $Lt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function SLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function RLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function BLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function PLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ILt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function NLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function DLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function GLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function OLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function VLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function XLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function QLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function WLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function HLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ULt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function JLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function YLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function KLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ZLt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function e8t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function o8t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function r8t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function t8t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function a8t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function n8t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function s8t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function l8t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function i8t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function d8t(L){let g,F,u,f,p,d,h,Mo,li,mm,et,ii,di,W0,fm,qe,Xe,ci,An,H0,yn,Ln,U0,mi,xn,J0,fi,gm,Ma,ze,Ae,h$,gi,u$,p$,Eo,Ea,_$,hm,b$,eDe,VPe,hi,um,eee,Y0,oDe,oee,rDe,XPe,$n,tDe,ree,aDe,nDe,tee,sDe,lDe,zPe,K0,QPe,F$,iDe,WPe,pm,HPe,ui,_m,aee,Z0,dDe,nee,cDe,UPe,Co,ey,mDe,oy,fDe,v$,gDe,hDe,uDe,ry,pDe,see,_De,bDe,FDe,Er,ty,vDe,lee,TDe,MDe,pi,EDe,iee,CDe,wDe,dee,ADe,yDe,LDe,A,bm,cee,xDe,$De,T$,kDe,SDe,RDe,Fm,mee,BDe,PDe,M$,IDe,qDe,NDe,vm,fee,jDe,DDe,E$,GDe,ODe,VDe,Tm,gee,XDe,zDe,C$,QDe,WDe,HDe,Mm,hee,UDe,JDe,w$,YDe,KDe,ZDe,Em,uee,eGe,oGe,A$,rGe,tGe,aGe,Cm,pee,nGe,sGe,y$,lGe,iGe,dGe,wm,_ee,cGe,mGe,L$,fGe,gGe,hGe,Am,bee,uGe,pGe,x$,_Ge,bGe,FGe,ym,Fee,vGe,TGe,$$,MGe,EGe,CGe,Lm,vee,wGe,AGe,k$,yGe,LGe,xGe,xm,Tee,$Ge,kGe,S$,SGe,RGe,BGe,$m,Mee,PGe,IGe,R$,qGe,NGe,jGe,km,Eee,DGe,GGe,B$,OGe,VGe,XGe,Sm,Cee,zGe,QGe,P$,WGe,HGe,UGe,Rm,wee,JGe,YGe,I$,KGe,ZGe,eOe,Bm,Aee,oOe,rOe,q$,tOe,aOe,nOe,Pm,yee,sOe,lOe,N$,iOe,dOe,cOe,Im,Lee,mOe,fOe,j$,gOe,hOe,uOe,qm,xee,pOe,_Oe,D$,bOe,FOe,vOe,Nm,$ee,TOe,MOe,G$,EOe,COe,wOe,jm,kee,AOe,yOe,O$,LOe,xOe,$Oe,Dm,See,kOe,SOe,V$,ROe,BOe,POe,Gm,Ree,IOe,qOe,X$,NOe,jOe,DOe,Om,Bee,GOe,OOe,z$,VOe,XOe,zOe,Vm,Pee,QOe,WOe,Q$,HOe,UOe,JOe,Xm,Iee,YOe,KOe,W$,ZOe,eVe,oVe,zm,qee,rVe,tVe,H$,aVe,nVe,sVe,Qm,Nee,lVe,iVe,U$,dVe,cVe,mVe,Wm,jee,fVe,gVe,J$,hVe,uVe,pVe,Hm,Dee,_Ve,bVe,Y$,FVe,vVe,TVe,Um,Gee,MVe,EVe,K$,CVe,wVe,AVe,Jm,Oee,yVe,LVe,Z$,xVe,$Ve,kVe,Ym,Vee,SVe,RVe,ek,BVe,PVe,IVe,Km,Xee,qVe,NVe,ok,jVe,DVe,GVe,Zm,zee,OVe,VVe,rk,XVe,zVe,QVe,ef,Qee,WVe,HVe,tk,UVe,JVe,YVe,of,Wee,KVe,ZVe,ak,eXe,oXe,rXe,rf,Hee,tXe,aXe,nk,nXe,sXe,lXe,tf,Uee,iXe,dXe,sk,cXe,mXe,fXe,af,Jee,gXe,hXe,lk,uXe,pXe,_Xe,nf,Yee,bXe,FXe,ik,vXe,TXe,MXe,sf,Kee,EXe,CXe,dk,wXe,AXe,yXe,lf,Zee,LXe,xXe,ck,$Xe,kXe,SXe,df,eoe,RXe,BXe,mk,PXe,IXe,qXe,cf,ooe,NXe,jXe,fk,DXe,GXe,OXe,mf,roe,VXe,XXe,gk,zXe,QXe,WXe,ff,toe,HXe,UXe,hk,JXe,YXe,KXe,gf,aoe,ZXe,eze,uk,oze,rze,tze,hf,noe,aze,nze,pk,sze,lze,ize,uf,soe,dze,cze,_k,mze,fze,gze,pf,loe,hze,uze,bk,pze,_ze,bze,_f,ioe,Fze,vze,Fk,Tze,Mze,Eze,bf,doe,Cze,wze,vk,Aze,yze,Lze,Ff,coe,xze,$ze,Tk,kze,Sze,Rze,vf,moe,Bze,Pze,Mk,Ize,qze,Nze,Tf,foe,jze,Dze,Ek,Gze,Oze,Vze,Mf,goe,Xze,zze,Ck,Qze,Wze,Hze,Ef,hoe,Uze,Jze,wk,Yze,Kze,Zze,Cf,uoe,eQe,oQe,Ak,rQe,tQe,aQe,wf,poe,nQe,sQe,yk,lQe,iQe,dQe,Af,_oe,cQe,mQe,Lk,fQe,gQe,hQe,yf,boe,uQe,pQe,xk,_Qe,bQe,FQe,Lf,Foe,vQe,TQe,$k,MQe,EQe,CQe,xf,voe,wQe,AQe,kk,yQe,LQe,xQe,$f,Toe,$Qe,kQe,Sk,SQe,RQe,BQe,kf,Moe,PQe,IQe,Rk,qQe,NQe,jQe,Sf,Eoe,DQe,GQe,Bk,OQe,VQe,XQe,Rf,Coe,zQe,QQe,Pk,WQe,HQe,UQe,Bf,woe,JQe,YQe,Ik,KQe,ZQe,eWe,Pf,Aoe,oWe,rWe,qk,tWe,aWe,nWe,If,yoe,sWe,lWe,Nk,iWe,dWe,cWe,qf,Loe,mWe,fWe,jk,gWe,hWe,uWe,Nf,xoe,pWe,_We,Dk,bWe,FWe,vWe,jf,$oe,TWe,MWe,Gk,EWe,CWe,wWe,Df,koe,AWe,yWe,Ok,LWe,xWe,$We,Gf,Soe,kWe,SWe,Vk,RWe,BWe,PWe,Of,Roe,IWe,qWe,Xk,NWe,jWe,DWe,Vf,Boe,GWe,OWe,zk,VWe,XWe,zWe,Xf,Poe,QWe,WWe,Qk,HWe,UWe,JWe,zf,Ioe,YWe,KWe,Wk,ZWe,eHe,oHe,Qf,qoe,rHe,tHe,Hk,aHe,nHe,sHe,Wf,Noe,lHe,iHe,Uk,dHe,cHe,mHe,Hf,joe,fHe,gHe,Jk,hHe,uHe,pHe,Uf,Doe,_He,bHe,Yk,FHe,vHe,THe,Jf,Goe,MHe,EHe,Kk,CHe,wHe,AHe,Yf,Ooe,yHe,LHe,Zk,xHe,$He,kHe,Kf,Voe,SHe,RHe,eS,BHe,PHe,IHe,Zf,Xoe,qHe,NHe,oS,jHe,DHe,GHe,eg,zoe,OHe,VHe,rS,XHe,zHe,QHe,og,Qoe,WHe,HHe,tS,UHe,JHe,YHe,rg,Woe,KHe,ZHe,aS,eUe,oUe,rUe,tg,Hoe,tUe,aUe,nS,nUe,sUe,lUe,ag,Uoe,iUe,dUe,sS,cUe,mUe,fUe,ng,Joe,gUe,hUe,lS,uUe,pUe,_Ue,sg,Yoe,bUe,FUe,iS,vUe,TUe,MUe,lg,Koe,EUe,CUe,dS,wUe,AUe,yUe,ig,Zoe,LUe,xUe,cS,$Ue,kUe,SUe,dg,ere,RUe,BUe,mS,PUe,IUe,qUe,cg,ore,NUe,jUe,fS,DUe,GUe,OUe,mg,rre,VUe,XUe,gS,zUe,QUe,WUe,fg,tre,HUe,UUe,hS,JUe,YUe,KUe,gg,are,ZUe,eJe,uS,oJe,rJe,tJe,hg,nre,aJe,nJe,pS,sJe,lJe,iJe,ug,sre,dJe,cJe,_S,mJe,fJe,gJe,pg,hJe,_g,ay,uJe,lre,pJe,JPe,_i,bg,ire,ny,_Je,dre,bJe,YPe,wo,sy,FJe,ly,vJe,bS,TJe,MJe,EJe,iy,CJe,cre,wJe,AJe,yJe,Cr,dy,LJe,mre,xJe,$Je,Ca,kJe,fre,SJe,RJe,gre,BJe,PJe,hre,IJe,qJe,NJe,k,kn,ure,jJe,DJe,FS,GJe,OJe,vS,VJe,XJe,zJe,Sn,pre,QJe,WJe,TS,HJe,UJe,MS,JJe,YJe,KJe,Rn,_re,ZJe,eYe,ES,oYe,rYe,CS,tYe,aYe,nYe,Fg,bre,sYe,lYe,wS,iYe,dYe,cYe,Bn,Fre,mYe,fYe,AS,gYe,hYe,yS,uYe,pYe,_Ye,vg,vre,bYe,FYe,LS,vYe,TYe,MYe,Tg,Tre,EYe,CYe,xS,wYe,AYe,yYe,Mg,Mre,LYe,xYe,$S,$Ye,kYe,SYe,Pn,Ere,RYe,BYe,kS,PYe,IYe,SS,qYe,NYe,jYe,In,Cre,DYe,GYe,RS,OYe,VYe,BS,XYe,zYe,QYe,qn,wre,WYe,HYe,PS,UYe,JYe,IS,YYe,KYe,ZYe,Eg,Are,eKe,oKe,qS,rKe,tKe,aKe,Cg,yre,nKe,sKe,NS,lKe,iKe,dKe,Nn,Lre,cKe,mKe,jS,fKe,gKe,DS,hKe,uKe,pKe,wg,xre,_Ke,bKe,GS,FKe,vKe,TKe,jn,$re,MKe,EKe,OS,CKe,wKe,VS,AKe,yKe,LKe,Dn,kre,xKe,$Ke,XS,kKe,SKe,zS,RKe,BKe,PKe,Gn,Sre,IKe,qKe,QS,NKe,jKe,WS,DKe,GKe,OKe,Ag,Rre,VKe,XKe,HS,zKe,QKe,WKe,On,Bre,HKe,UKe,US,JKe,YKe,JS,KKe,ZKe,eZe,Vn,Pre,oZe,rZe,YS,tZe,aZe,KS,nZe,sZe,lZe,Xn,Ire,iZe,dZe,ZS,cZe,mZe,eR,fZe,gZe,hZe,zn,qre,uZe,pZe,oR,_Ze,bZe,rR,FZe,vZe,TZe,Qn,Nre,MZe,EZe,tR,CZe,wZe,aR,AZe,yZe,LZe,Wn,jre,xZe,$Ze,nR,kZe,SZe,sR,RZe,BZe,PZe,yg,Dre,IZe,qZe,lR,NZe,jZe,DZe,Hn,Gre,GZe,OZe,iR,VZe,XZe,dR,zZe,QZe,WZe,Lg,Ore,HZe,UZe,cR,JZe,YZe,KZe,Un,Vre,ZZe,eeo,mR,oeo,reo,fR,teo,aeo,neo,Jn,Xre,seo,leo,gR,ieo,deo,hR,ceo,meo,feo,Yn,zre,geo,heo,uR,ueo,peo,pR,_eo,beo,Feo,Kn,Qre,veo,Teo,_R,Meo,Eeo,bR,Ceo,weo,Aeo,Zn,Wre,yeo,Leo,FR,xeo,$eo,vR,keo,Seo,Reo,xg,Hre,Beo,Peo,TR,Ieo,qeo,Neo,es,Ure,jeo,Deo,MR,Geo,Oeo,ER,Veo,Xeo,zeo,os,Jre,Qeo,Weo,CR,Heo,Ueo,wR,Jeo,Yeo,Keo,rs,Yre,Zeo,eoo,AR,ooo,roo,yR,too,aoo,noo,ts,Kre,soo,loo,LR,ioo,doo,xR,coo,moo,foo,as,Zre,goo,hoo,$R,uoo,poo,kR,_oo,boo,Foo,ns,ete,voo,Too,SR,Moo,Eoo,RR,Coo,woo,Aoo,$g,ote,yoo,Loo,BR,xoo,$oo,koo,ss,rte,Soo,Roo,PR,Boo,Poo,IR,Ioo,qoo,Noo,kg,tte,joo,Doo,qR,Goo,Ooo,Voo,Sg,ate,Xoo,zoo,NR,Qoo,Woo,Hoo,ls,nte,Uoo,Joo,jR,Yoo,Koo,DR,Zoo,ero,oro,is,ste,rro,tro,GR,aro,nro,OR,sro,lro,iro,ds,lte,dro,cro,VR,mro,fro,XR,gro,hro,uro,Rg,ite,pro,_ro,zR,bro,Fro,vro,cs,dte,Tro,Mro,QR,Ero,Cro,WR,wro,Aro,yro,ms,cte,Lro,xro,HR,$ro,kro,UR,Sro,Rro,Bro,fs,mte,Pro,Iro,JR,qro,Nro,YR,jro,Dro,Gro,gs,fte,Oro,Vro,KR,Xro,zro,ZR,Qro,Wro,Hro,hs,gte,Uro,Jro,eB,Yro,Kro,oB,Zro,eto,oto,Bg,hte,rto,tto,rB,ato,nto,sto,us,ute,lto,ito,tB,dto,cto,aB,mto,fto,gto,Pg,pte,hto,uto,nB,pto,_to,bto,Ig,_te,Fto,vto,sB,Tto,Mto,Eto,qg,bte,Cto,wto,lB,Ato,yto,Lto,Ng,Fte,xto,$to,iB,kto,Sto,Rto,ps,vte,Bto,Pto,dB,Ito,qto,cB,Nto,jto,Dto,jg,Tte,Gto,Oto,mB,Vto,Xto,zto,_s,Mte,Qto,Wto,fB,Hto,Uto,gB,Jto,Yto,Kto,bs,Ete,Zto,eao,hB,oao,rao,uB,tao,aao,nao,Fs,Cte,sao,lao,pB,iao,dao,_B,cao,mao,fao,vs,wte,gao,hao,bB,uao,pao,FB,_ao,bao,Fao,Ts,Ate,vao,Tao,vB,Mao,Eao,TB,Cao,wao,Aao,Ms,yte,yao,Lao,MB,xao,$ao,EB,kao,Sao,Rao,Dg,Lte,Bao,Pao,CB,Iao,qao,Nao,Gg,xte,jao,Dao,wB,Gao,Oao,Vao,Es,$te,Xao,zao,AB,Qao,Wao,yB,Hao,Uao,Jao,Cs,kte,Yao,Kao,LB,Zao,eno,xB,ono,rno,tno,ws,Ste,ano,nno,$B,sno,lno,kB,ino,dno,cno,Og,Rte,mno,fno,SB,gno,hno,uno,Vg,Bte,pno,_no,RB,bno,Fno,vno,Xg,Pte,Tno,Mno,BB,Eno,Cno,wno,As,Ite,Ano,yno,PB,Lno,xno,IB,$no,kno,Sno,zg,qte,Rno,Bno,qB,Pno,Ino,qno,Qg,Nte,Nno,jno,NB,Dno,Gno,Ono,ys,jte,Vno,Xno,jB,zno,Qno,DB,Wno,Hno,Uno,Wg,Dte,Jno,Yno,GB,Kno,Zno,eso,Hg,Gte,oso,rso,OB,tso,aso,nso,Ls,Ote,sso,lso,VB,iso,dso,XB,cso,mso,fso,xs,Vte,gso,hso,zB,uso,pso,QB,_so,bso,Fso,$s,Xte,vso,Tso,WB,Mso,Eso,HB,Cso,wso,Aso,ks,zte,yso,Lso,UB,xso,$so,JB,kso,Sso,Rso,Ug,Bso,Jg,cy,Pso,Qte,Iso,KPe,bi,Yg,Wte,my,qso,Hte,Nso,ZPe,Ao,fy,jso,gy,Dso,YB,Gso,Oso,Vso,hy,Xso,Ute,zso,Qso,Wso,Qe,uy,Hso,Jte,Uso,Jso,wa,Yso,Yte,Kso,Zso,Kte,elo,olo,Zte,rlo,tlo,alo,oe,Kg,eae,nlo,slo,KB,llo,ilo,dlo,Zg,oae,clo,mlo,ZB,flo,glo,hlo,eh,rae,ulo,plo,eP,_lo,blo,Flo,oh,tae,vlo,Tlo,oP,Mlo,Elo,Clo,rh,aae,wlo,Alo,rP,ylo,Llo,xlo,th,nae,$lo,klo,tP,Slo,Rlo,Blo,ah,sae,Plo,Ilo,aP,qlo,Nlo,jlo,nh,lae,Dlo,Glo,nP,Olo,Vlo,Xlo,sh,iae,zlo,Qlo,sP,Wlo,Hlo,Ulo,lh,dae,Jlo,Ylo,lP,Klo,Zlo,eio,ih,cae,oio,rio,iP,tio,aio,nio,dh,mae,sio,lio,dP,iio,dio,cio,ch,fae,mio,fio,cP,gio,hio,uio,mh,gae,pio,_io,mP,bio,Fio,vio,fh,hae,Tio,Mio,fP,Eio,Cio,wio,gh,uae,Aio,yio,gP,Lio,xio,$io,hh,pae,kio,Sio,hP,Rio,Bio,Pio,uh,_ae,Iio,qio,uP,Nio,jio,Dio,ph,bae,Gio,Oio,pP,Vio,Xio,zio,_h,Fae,Qio,Wio,_P,Hio,Uio,Jio,bh,vae,Yio,Kio,bP,Zio,edo,odo,Fh,Tae,rdo,tdo,FP,ado,ndo,sdo,vh,Mae,ldo,ido,vP,ddo,cdo,mdo,Th,Eae,fdo,gdo,TP,hdo,udo,pdo,Mh,Cae,_do,bdo,MP,Fdo,vdo,Tdo,Eh,Mdo,Ch,Edo,wh,py,Cdo,wae,wdo,eIe,Fi,Ah,Aae,_y,Ado,yae,ydo,oIe,yo,by,Ldo,Fy,xdo,EP,$do,kdo,Sdo,vy,Rdo,Lae,Bdo,Pdo,Ido,We,Ty,qdo,xae,Ndo,jdo,vi,Ddo,$ae,Gdo,Odo,kae,Vdo,Xdo,zdo,be,yh,Sae,Qdo,Wdo,CP,Hdo,Udo,Jdo,Lh,Rae,Ydo,Kdo,Bae,Zdo,eco,oco,xh,Pae,rco,tco,wP,aco,nco,sco,$h,Iae,lco,ico,AP,dco,cco,mco,kh,qae,fco,gco,yP,hco,uco,pco,Sh,Nae,_co,bco,LP,Fco,vco,Tco,Rh,jae,Mco,Eco,xP,Cco,wco,Aco,Bh,Dae,yco,Lco,$P,xco,$co,kco,Ph,Gae,Sco,Rco,kP,Bco,Pco,Ico,Ih,Oae,qco,Nco,SP,jco,Dco,Gco,qh,Vae,Oco,Vco,RP,Xco,zco,Qco,Nh,Xae,Wco,Hco,BP,Uco,Jco,Yco,jh,zae,Kco,Zco,PP,emo,omo,rmo,Dh,Qae,tmo,amo,IP,nmo,smo,lmo,Gh,Wae,imo,dmo,qP,cmo,mmo,fmo,Oh,gmo,Vh,hmo,Xh,My,umo,Hae,pmo,rIe,Ti,zh,Uae,Ey,_mo,Jae,bmo,tIe,Lo,Cy,Fmo,Mi,vmo,NP,Tmo,Mmo,jP,Emo,Cmo,wmo,wy,Amo,Yae,ymo,Lmo,xmo,ot,Ay,$mo,Kae,kmo,Smo,Ei,Rmo,Zae,Bmo,Pmo,DP,Imo,qmo,Nmo,Qh,jmo,He,yy,Dmo,ene,Gmo,Omo,Aa,Vmo,one,Xmo,zmo,rne,Qmo,Wmo,tne,Hmo,Umo,Jmo,x,Wh,ane,Ymo,Kmo,GP,Zmo,efo,ofo,Hh,nne,rfo,tfo,OP,afo,nfo,sfo,Uh,sne,lfo,ifo,VP,dfo,cfo,mfo,Jh,lne,ffo,gfo,XP,hfo,ufo,pfo,Yh,ine,_fo,bfo,zP,Ffo,vfo,Tfo,Kh,dne,Mfo,Efo,QP,Cfo,wfo,Afo,Zh,cne,yfo,Lfo,WP,xfo,$fo,kfo,eu,mne,Sfo,Rfo,HP,Bfo,Pfo,Ifo,ou,fne,qfo,Nfo,UP,jfo,Dfo,Gfo,ru,gne,Ofo,Vfo,JP,Xfo,zfo,Qfo,tu,hne,Wfo,Hfo,YP,Ufo,Jfo,Yfo,au,une,Kfo,Zfo,KP,ego,ogo,rgo,nu,pne,tgo,ago,ZP,ngo,sgo,lgo,su,_ne,igo,dgo,eI,cgo,mgo,fgo,lu,bne,ggo,hgo,oI,ugo,pgo,_go,iu,Fne,bgo,Fgo,rI,vgo,Tgo,Mgo,du,vne,Ego,Cgo,tI,wgo,Ago,ygo,cu,Tne,Lgo,xgo,aI,$go,kgo,Sgo,mu,Mne,Rgo,Bgo,nI,Pgo,Igo,qgo,fu,Ene,Ngo,jgo,sI,Dgo,Ggo,Ogo,gu,Cne,Vgo,Xgo,lI,zgo,Qgo,Wgo,hu,wne,Hgo,Ugo,iI,Jgo,Ygo,Kgo,uu,Ane,Zgo,eho,dI,oho,rho,tho,pu,yne,aho,nho,cI,sho,lho,iho,_u,Lne,dho,cho,mI,mho,fho,gho,bu,xne,hho,uho,fI,pho,_ho,bho,Fu,$ne,Fho,vho,gI,Tho,Mho,Eho,vu,kne,Cho,who,hI,Aho,yho,Lho,Tu,Sne,xho,$ho,uI,kho,Sho,Rho,Mu,Rne,Bho,Pho,pI,Iho,qho,Nho,Eu,Bne,jho,Dho,_I,Gho,Oho,Vho,Ss,Pne,Xho,zho,bI,Qho,Who,FI,Hho,Uho,Jho,Cu,Ine,Yho,Kho,vI,Zho,euo,ouo,wu,qne,ruo,tuo,TI,auo,nuo,suo,Au,Nne,luo,iuo,MI,duo,cuo,muo,yu,jne,fuo,guo,EI,huo,uuo,puo,Lu,Dne,_uo,buo,CI,Fuo,vuo,Tuo,xu,Gne,Muo,Euo,wI,Cuo,wuo,Auo,$u,One,yuo,Luo,AI,xuo,$uo,kuo,ku,Vne,Suo,Ruo,yI,Buo,Puo,Iuo,Su,Xne,quo,Nuo,LI,juo,Duo,Guo,Ru,zne,Ouo,Vuo,xI,Xuo,zuo,Quo,Bu,Qne,Wuo,Huo,$I,Uuo,Juo,Yuo,Pu,Wne,Kuo,Zuo,kI,epo,opo,rpo,Iu,Hne,tpo,apo,SI,npo,spo,lpo,qu,Une,ipo,dpo,RI,cpo,mpo,fpo,Nu,Jne,gpo,hpo,BI,upo,ppo,_po,ju,Yne,bpo,Fpo,PI,vpo,Tpo,Mpo,Du,Kne,Epo,Cpo,II,wpo,Apo,ypo,Gu,Zne,Lpo,xpo,qI,$po,kpo,Spo,Ou,ese,Rpo,Bpo,NI,Ppo,Ipo,qpo,Vu,ose,Npo,jpo,jI,Dpo,Gpo,Opo,Xu,rse,Vpo,Xpo,DI,zpo,Qpo,Wpo,zu,tse,Hpo,Upo,GI,Jpo,Ypo,Kpo,Qu,ase,Zpo,e_o,OI,o_o,r_o,t_o,Wu,nse,a_o,n_o,VI,s_o,l_o,i_o,Hu,sse,d_o,c_o,XI,m_o,f_o,g_o,Uu,lse,h_o,u_o,zI,p_o,__o,b_o,Ju,ise,F_o,v_o,QI,T_o,M_o,E_o,Yu,dse,C_o,w_o,WI,A_o,y_o,L_o,Ku,cse,x_o,$_o,HI,k_o,S_o,R_o,Zu,mse,B_o,P_o,UI,I_o,q_o,N_o,ep,fse,j_o,D_o,JI,G_o,O_o,V_o,op,gse,X_o,z_o,YI,Q_o,W_o,H_o,rp,hse,U_o,J_o,KI,Y_o,K_o,Z_o,tp,use,ebo,obo,ZI,rbo,tbo,abo,ap,pse,nbo,sbo,eq,lbo,ibo,dbo,np,_se,cbo,mbo,oq,fbo,gbo,hbo,sp,bse,ubo,pbo,rq,_bo,bbo,Fbo,lp,Fse,vbo,Tbo,tq,Mbo,Ebo,Cbo,ip,vse,wbo,Abo,aq,ybo,Lbo,xbo,dp,Tse,$bo,kbo,nq,Sbo,Rbo,Bbo,cp,Mse,Pbo,Ibo,sq,qbo,Nbo,jbo,mp,Ese,Dbo,Gbo,lq,Obo,Vbo,Xbo,fp,Cse,zbo,Qbo,iq,Wbo,Hbo,Ubo,gp,wse,Jbo,Ybo,dq,Kbo,Zbo,e2o,hp,Ase,o2o,r2o,cq,t2o,a2o,n2o,up,yse,s2o,l2o,mq,i2o,d2o,c2o,pp,Lse,m2o,f2o,fq,g2o,h2o,u2o,_p,xse,p2o,_2o,gq,b2o,F2o,v2o,bp,$se,T2o,M2o,hq,E2o,C2o,w2o,Fp,kse,A2o,y2o,uq,L2o,x2o,$2o,vp,Sse,k2o,S2o,pq,R2o,B2o,P2o,Tp,Rse,I2o,q2o,_q,N2o,j2o,D2o,Mp,Bse,G2o,O2o,bq,V2o,X2o,z2o,Ep,Pse,Q2o,W2o,Fq,H2o,U2o,J2o,Cp,Ise,Y2o,K2o,vq,Z2o,eFo,oFo,wp,qse,rFo,tFo,Tq,aFo,nFo,sFo,Ap,Nse,lFo,iFo,Mq,dFo,cFo,mFo,yp,jse,fFo,gFo,Eq,hFo,uFo,pFo,Lp,Dse,_Fo,bFo,Cq,FFo,vFo,TFo,xp,Gse,MFo,EFo,wq,CFo,wFo,AFo,$p,Ose,yFo,LFo,Aq,xFo,$Fo,kFo,kp,Vse,SFo,RFo,yq,BFo,PFo,IFo,Sp,Xse,qFo,NFo,Lq,jFo,DFo,GFo,Rp,zse,OFo,VFo,xq,XFo,zFo,QFo,Bp,Qse,WFo,HFo,$q,UFo,JFo,YFo,Pp,KFo,Wse,ZFo,evo,Hse,ovo,rvo,Ip,aIe,Ci,qp,Use,Ly,tvo,Jse,avo,nIe,xo,xy,nvo,wi,svo,kq,lvo,ivo,Sq,dvo,cvo,mvo,$y,fvo,Yse,gvo,hvo,uvo,rt,ky,pvo,Kse,_vo,bvo,Ai,Fvo,Zse,vvo,Tvo,Rq,Mvo,Evo,Cvo,Np,wvo,Ue,Sy,Avo,ele,yvo,Lvo,ya,xvo,ole,$vo,kvo,rle,Svo,Rvo,tle,Bvo,Pvo,Ivo,G,jp,ale,qvo,Nvo,Bq,jvo,Dvo,Gvo,Dp,nle,Ovo,Vvo,Pq,Xvo,zvo,Qvo,Gp,sle,Wvo,Hvo,Iq,Uvo,Jvo,Yvo,Op,lle,Kvo,Zvo,qq,e1o,o1o,r1o,Vp,ile,t1o,a1o,Nq,n1o,s1o,l1o,Xp,dle,i1o,d1o,jq,c1o,m1o,f1o,zp,cle,g1o,h1o,Dq,u1o,p1o,_1o,Qp,mle,b1o,F1o,Gq,v1o,T1o,M1o,Wp,fle,E1o,C1o,Oq,w1o,A1o,y1o,Hp,gle,L1o,x1o,Vq,$1o,k1o,S1o,Up,hle,R1o,B1o,Xq,P1o,I1o,q1o,Jp,ule,N1o,j1o,zq,D1o,G1o,O1o,Yp,ple,V1o,X1o,Qq,z1o,Q1o,W1o,Kp,_le,H1o,U1o,Wq,J1o,Y1o,K1o,Zp,ble,Z1o,eTo,Hq,oTo,rTo,tTo,e_,Fle,aTo,nTo,Uq,sTo,lTo,iTo,o_,vle,dTo,cTo,Jq,mTo,fTo,gTo,r_,Tle,hTo,uTo,Yq,pTo,_To,bTo,t_,Mle,FTo,vTo,Kq,TTo,MTo,ETo,a_,Ele,CTo,wTo,Zq,ATo,yTo,LTo,n_,Cle,xTo,$To,eN,kTo,STo,RTo,s_,wle,BTo,PTo,oN,ITo,qTo,NTo,l_,Ale,jTo,DTo,rN,GTo,OTo,VTo,i_,yle,XTo,zTo,tN,QTo,WTo,HTo,d_,Lle,UTo,JTo,aN,YTo,KTo,ZTo,c_,xle,eMo,oMo,nN,rMo,tMo,aMo,m_,$le,nMo,sMo,sN,lMo,iMo,dMo,f_,kle,cMo,mMo,lN,fMo,gMo,hMo,g_,Sle,uMo,pMo,iN,_Mo,bMo,FMo,h_,Rle,vMo,TMo,dN,MMo,EMo,CMo,u_,Ble,wMo,AMo,cN,yMo,LMo,xMo,p_,Ple,$Mo,kMo,mN,SMo,RMo,BMo,__,Ile,PMo,IMo,fN,qMo,NMo,jMo,b_,qle,DMo,GMo,gN,OMo,VMo,XMo,F_,Nle,zMo,QMo,hN,WMo,HMo,UMo,v_,jle,JMo,YMo,uN,KMo,ZMo,e4o,T_,Dle,o4o,r4o,pN,t4o,a4o,n4o,M_,Gle,s4o,l4o,_N,i4o,d4o,c4o,E_,Ole,m4o,f4o,bN,g4o,h4o,u4o,C_,Vle,p4o,_4o,FN,b4o,F4o,v4o,w_,T4o,Xle,M4o,E4o,zle,C4o,w4o,A_,sIe,yi,y_,Qle,Ry,A4o,Wle,y4o,lIe,$o,By,L4o,Li,x4o,vN,$4o,k4o,TN,S4o,R4o,B4o,Py,P4o,Hle,I4o,q4o,N4o,tt,Iy,j4o,Ule,D4o,G4o,xi,O4o,Jle,V4o,X4o,MN,z4o,Q4o,W4o,L_,H4o,Je,qy,U4o,Yle,J4o,Y4o,La,K4o,Kle,Z4o,eEo,Zle,oEo,rEo,eie,tEo,aEo,nEo,z,x_,oie,sEo,lEo,EN,iEo,dEo,cEo,$_,rie,mEo,fEo,CN,gEo,hEo,uEo,k_,tie,pEo,_Eo,wN,bEo,FEo,vEo,S_,aie,TEo,MEo,AN,EEo,CEo,wEo,R_,nie,AEo,yEo,yN,LEo,xEo,$Eo,B_,sie,kEo,SEo,LN,REo,BEo,PEo,P_,lie,IEo,qEo,xN,NEo,jEo,DEo,I_,iie,GEo,OEo,$N,VEo,XEo,zEo,q_,die,QEo,WEo,kN,HEo,UEo,JEo,N_,cie,YEo,KEo,SN,ZEo,e5o,o5o,j_,mie,r5o,t5o,RN,a5o,n5o,s5o,D_,fie,l5o,i5o,BN,d5o,c5o,m5o,G_,gie,f5o,g5o,PN,h5o,u5o,p5o,O_,hie,_5o,b5o,IN,F5o,v5o,T5o,V_,uie,M5o,E5o,qN,C5o,w5o,A5o,X_,pie,y5o,L5o,NN,x5o,$5o,k5o,z_,_ie,S5o,R5o,jN,B5o,P5o,I5o,Q_,bie,q5o,N5o,DN,j5o,D5o,G5o,W_,Fie,O5o,V5o,GN,X5o,z5o,Q5o,H_,vie,W5o,H5o,ON,U5o,J5o,Y5o,U_,Tie,K5o,Z5o,VN,eCo,oCo,rCo,J_,Mie,tCo,aCo,XN,nCo,sCo,lCo,Y_,Eie,iCo,dCo,zN,cCo,mCo,fCo,K_,Cie,gCo,hCo,QN,uCo,pCo,_Co,Z_,wie,bCo,FCo,WN,vCo,TCo,MCo,eb,Aie,ECo,CCo,HN,wCo,ACo,yCo,ob,yie,LCo,xCo,UN,$Co,kCo,SCo,rb,Lie,RCo,BCo,JN,PCo,ICo,qCo,tb,xie,NCo,jCo,YN,DCo,GCo,OCo,ab,$ie,VCo,XCo,KN,zCo,QCo,WCo,nb,kie,HCo,UCo,ZN,JCo,YCo,KCo,sb,Sie,ZCo,e3o,ej,o3o,r3o,t3o,lb,Rie,a3o,n3o,oj,s3o,l3o,i3o,ib,Bie,d3o,c3o,rj,m3o,f3o,g3o,db,Pie,h3o,u3o,tj,p3o,_3o,b3o,cb,Iie,F3o,v3o,aj,T3o,M3o,E3o,mb,C3o,qie,w3o,A3o,Nie,y3o,L3o,fb,iIe,$i,gb,jie,Ny,x3o,Die,$3o,dIe,ko,jy,k3o,ki,S3o,nj,R3o,B3o,sj,P3o,I3o,q3o,Dy,N3o,Gie,j3o,D3o,G3o,at,Gy,O3o,Oie,V3o,X3o,Si,z3o,Vie,Q3o,W3o,lj,H3o,U3o,J3o,hb,Y3o,Ye,Oy,K3o,Xie,Z3o,ewo,xa,owo,zie,rwo,two,Qie,awo,nwo,Wie,swo,lwo,iwo,Q,ub,Hie,dwo,cwo,ij,mwo,fwo,gwo,pb,Uie,hwo,uwo,dj,pwo,_wo,bwo,_b,Jie,Fwo,vwo,cj,Two,Mwo,Ewo,bb,Yie,Cwo,wwo,mj,Awo,ywo,Lwo,Fb,Kie,xwo,$wo,fj,kwo,Swo,Rwo,vb,Zie,Bwo,Pwo,gj,Iwo,qwo,Nwo,Tb,ede,jwo,Dwo,hj,Gwo,Owo,Vwo,Mb,ode,Xwo,zwo,uj,Qwo,Wwo,Hwo,Eb,rde,Uwo,Jwo,pj,Ywo,Kwo,Zwo,Cb,tde,eAo,oAo,_j,rAo,tAo,aAo,wb,ade,nAo,sAo,bj,lAo,iAo,dAo,Ab,nde,cAo,mAo,Fj,fAo,gAo,hAo,yb,sde,uAo,pAo,vj,_Ao,bAo,FAo,Lb,lde,vAo,TAo,Tj,MAo,EAo,CAo,xb,ide,wAo,AAo,Mj,yAo,LAo,xAo,$b,dde,$Ao,kAo,Ej,SAo,RAo,BAo,kb,cde,PAo,IAo,Cj,qAo,NAo,jAo,Sb,mde,DAo,GAo,wj,OAo,VAo,XAo,Rb,fde,zAo,QAo,Aj,WAo,HAo,UAo,Bb,gde,JAo,YAo,yj,KAo,ZAo,e6o,Pb,hde,o6o,r6o,Lj,t6o,a6o,n6o,Ib,ude,s6o,l6o,xj,i6o,d6o,c6o,qb,pde,m6o,f6o,$j,g6o,h6o,u6o,Nb,_de,p6o,_6o,kj,b6o,F6o,v6o,jb,bde,T6o,M6o,Sj,E6o,C6o,w6o,Db,Fde,A6o,y6o,Rj,L6o,x6o,$6o,Gb,vde,k6o,S6o,Bj,R6o,B6o,P6o,Ob,Tde,I6o,q6o,Pj,N6o,j6o,D6o,Vb,Mde,G6o,O6o,Ij,V6o,X6o,z6o,Xb,Ede,Q6o,W6o,qj,H6o,U6o,J6o,zb,Cde,Y6o,K6o,wde,Z6o,e0o,o0o,Qb,Ade,r0o,t0o,Nj,a0o,n0o,s0o,Wb,yde,l0o,i0o,jj,d0o,c0o,m0o,Hb,Lde,f0o,g0o,Dj,h0o,u0o,p0o,Ub,xde,_0o,b0o,Gj,F0o,v0o,T0o,Jb,M0o,$de,E0o,C0o,kde,w0o,A0o,Yb,cIe,Ri,Kb,Sde,Vy,y0o,Rde,L0o,mIe,So,Xy,x0o,Bi,$0o,Oj,k0o,S0o,Vj,R0o,B0o,P0o,zy,I0o,Bde,q0o,N0o,j0o,nt,Qy,D0o,Pde,G0o,O0o,Pi,V0o,Ide,X0o,z0o,Xj,Q0o,W0o,H0o,Zb,U0o,Ke,Wy,J0o,qde,Y0o,K0o,$a,Z0o,Nde,eyo,oyo,jde,ryo,tyo,Dde,ayo,nyo,syo,he,e2,Gde,lyo,iyo,zj,dyo,cyo,myo,o2,Ode,fyo,gyo,Qj,hyo,uyo,pyo,r2,Vde,_yo,byo,Wj,Fyo,vyo,Tyo,t2,Xde,Myo,Eyo,Hj,Cyo,wyo,Ayo,a2,zde,yyo,Lyo,Uj,xyo,$yo,kyo,n2,Qde,Syo,Ryo,Jj,Byo,Pyo,Iyo,s2,Wde,qyo,Nyo,Yj,jyo,Dyo,Gyo,l2,Hde,Oyo,Vyo,Kj,Xyo,zyo,Qyo,i2,Ude,Wyo,Hyo,Zj,Uyo,Jyo,Yyo,d2,Jde,Kyo,Zyo,eD,eLo,oLo,rLo,c2,Yde,tLo,aLo,oD,nLo,sLo,lLo,m2,Kde,iLo,dLo,rD,cLo,mLo,fLo,f2,Zde,gLo,hLo,tD,uLo,pLo,_Lo,g2,ece,bLo,FLo,aD,vLo,TLo,MLo,h2,oce,ELo,CLo,nD,wLo,ALo,yLo,u2,rce,LLo,xLo,sD,$Lo,kLo,SLo,p2,tce,RLo,BLo,lD,PLo,ILo,qLo,_2,NLo,ace,jLo,DLo,nce,GLo,OLo,b2,fIe,Ii,F2,sce,Hy,VLo,lce,XLo,gIe,Ro,Uy,zLo,qi,QLo,iD,WLo,HLo,dD,ULo,JLo,YLo,Jy,KLo,ice,ZLo,e8o,o8o,st,Yy,r8o,dce,t8o,a8o,Ni,n8o,cce,s8o,l8o,cD,i8o,d8o,c8o,v2,m8o,Ze,Ky,f8o,mce,g8o,h8o,ka,u8o,fce,p8o,_8o,gce,b8o,F8o,hce,v8o,T8o,M8o,q,T2,uce,E8o,C8o,mD,w8o,A8o,y8o,M2,pce,L8o,x8o,fD,$8o,k8o,S8o,E2,_ce,R8o,B8o,gD,P8o,I8o,q8o,C2,bce,N8o,j8o,hD,D8o,G8o,O8o,w2,Fce,V8o,X8o,uD,z8o,Q8o,W8o,A2,vce,H8o,U8o,pD,J8o,Y8o,K8o,y2,Tce,Z8o,exo,_D,oxo,rxo,txo,L2,Mce,axo,nxo,bD,sxo,lxo,ixo,x2,Ece,dxo,cxo,FD,mxo,fxo,gxo,$2,Cce,hxo,uxo,vD,pxo,_xo,bxo,k2,wce,Fxo,vxo,TD,Txo,Mxo,Exo,S2,Ace,Cxo,wxo,MD,Axo,yxo,Lxo,R2,yce,xxo,$xo,ED,kxo,Sxo,Rxo,B2,Lce,Bxo,Pxo,CD,Ixo,qxo,Nxo,P2,xce,jxo,Dxo,wD,Gxo,Oxo,Vxo,I2,$ce,Xxo,zxo,AD,Qxo,Wxo,Hxo,q2,kce,Uxo,Jxo,yD,Yxo,Kxo,Zxo,N2,Sce,e7o,o7o,LD,r7o,t7o,a7o,j2,Rce,n7o,s7o,xD,l7o,i7o,d7o,D2,Bce,c7o,m7o,$D,f7o,g7o,h7o,G2,Pce,u7o,p7o,kD,_7o,b7o,F7o,O2,Ice,v7o,T7o,SD,M7o,E7o,C7o,V2,qce,w7o,A7o,RD,y7o,L7o,x7o,X2,Nce,$7o,k7o,BD,S7o,R7o,B7o,z2,jce,P7o,I7o,PD,q7o,N7o,j7o,Q2,Dce,D7o,G7o,ID,O7o,V7o,X7o,W2,Gce,z7o,Q7o,qD,W7o,H7o,U7o,H2,Oce,J7o,Y7o,ND,K7o,Z7o,e9o,U2,Vce,o9o,r9o,jD,t9o,a9o,n9o,J2,Xce,s9o,l9o,DD,i9o,d9o,c9o,Y2,zce,m9o,f9o,GD,g9o,h9o,u9o,K2,Qce,p9o,_9o,OD,b9o,F9o,v9o,Z2,Wce,T9o,M9o,VD,E9o,C9o,w9o,eF,Hce,A9o,y9o,XD,L9o,x9o,$9o,oF,Uce,k9o,S9o,zD,R9o,B9o,P9o,rF,Jce,I9o,q9o,QD,N9o,j9o,D9o,tF,Yce,G9o,O9o,WD,V9o,X9o,z9o,aF,Kce,Q9o,W9o,HD,H9o,U9o,J9o,nF,Zce,Y9o,K9o,UD,Z9o,e$o,o$o,sF,eme,r$o,t$o,JD,a$o,n$o,s$o,lF,ome,l$o,i$o,YD,d$o,c$o,m$o,iF,rme,f$o,g$o,KD,h$o,u$o,p$o,dF,tme,_$o,b$o,ZD,F$o,v$o,T$o,cF,ame,M$o,E$o,eG,C$o,w$o,A$o,mF,nme,y$o,L$o,oG,x$o,$$o,k$o,fF,sme,S$o,R$o,rG,B$o,P$o,I$o,gF,lme,q$o,N$o,tG,j$o,D$o,G$o,hF,O$o,ime,V$o,X$o,dme,z$o,Q$o,uF,hIe,ji,pF,cme,Zy,W$o,mme,H$o,uIe,Bo,eL,U$o,Di,J$o,aG,Y$o,K$o,nG,Z$o,eko,oko,oL,rko,fme,tko,ako,nko,lt,rL,sko,gme,lko,iko,Gi,dko,hme,cko,mko,sG,fko,gko,hko,_F,uko,eo,tL,pko,ume,_ko,bko,Sa,Fko,pme,vko,Tko,_me,Mko,Eko,bme,Cko,wko,Ako,Y,bF,Fme,yko,Lko,lG,xko,$ko,kko,FF,vme,Sko,Rko,iG,Bko,Pko,Iko,vF,Tme,qko,Nko,dG,jko,Dko,Gko,TF,Mme,Oko,Vko,cG,Xko,zko,Qko,MF,Eme,Wko,Hko,mG,Uko,Jko,Yko,EF,Cme,Kko,Zko,fG,eSo,oSo,rSo,CF,wme,tSo,aSo,gG,nSo,sSo,lSo,wF,Ame,iSo,dSo,hG,cSo,mSo,fSo,AF,yme,gSo,hSo,uG,uSo,pSo,_So,yF,Lme,bSo,FSo,pG,vSo,TSo,MSo,LF,xme,ESo,CSo,_G,wSo,ASo,ySo,xF,$me,LSo,xSo,bG,$So,kSo,SSo,$F,kme,RSo,BSo,FG,PSo,ISo,qSo,kF,Sme,NSo,jSo,vG,DSo,GSo,OSo,SF,Rme,VSo,XSo,TG,zSo,QSo,WSo,RF,Bme,HSo,USo,MG,JSo,YSo,KSo,BF,Pme,ZSo,eRo,EG,oRo,rRo,tRo,PF,Ime,aRo,nRo,CG,sRo,lRo,iRo,IF,qme,dRo,cRo,wG,mRo,fRo,gRo,qF,Nme,hRo,uRo,AG,pRo,_Ro,bRo,NF,jme,FRo,vRo,yG,TRo,MRo,ERo,jF,Dme,CRo,wRo,LG,ARo,yRo,LRo,DF,Gme,xRo,$Ro,xG,kRo,SRo,RRo,GF,Ome,BRo,PRo,$G,IRo,qRo,NRo,OF,Vme,jRo,DRo,kG,GRo,ORo,VRo,VF,Xme,XRo,zRo,SG,QRo,WRo,HRo,XF,zme,URo,JRo,RG,YRo,KRo,ZRo,zF,Qme,eBo,oBo,BG,rBo,tBo,aBo,QF,Wme,nBo,sBo,PG,lBo,iBo,dBo,WF,cBo,Hme,mBo,fBo,Ume,gBo,hBo,HF,pIe,Oi,UF,Jme,aL,uBo,Yme,pBo,_Ie,Po,nL,_Bo,Vi,bBo,IG,FBo,vBo,qG,TBo,MBo,EBo,sL,CBo,Kme,wBo,ABo,yBo,it,lL,LBo,Zme,xBo,$Bo,Xi,kBo,efe,SBo,RBo,NG,BBo,PBo,IBo,JF,qBo,oo,iL,NBo,ofe,jBo,DBo,Ra,GBo,rfe,OBo,VBo,tfe,XBo,zBo,afe,QBo,WBo,HBo,Yr,YF,nfe,UBo,JBo,jG,YBo,KBo,ZBo,KF,sfe,ePo,oPo,DG,rPo,tPo,aPo,ZF,lfe,nPo,sPo,GG,lPo,iPo,dPo,ev,ife,cPo,mPo,OG,fPo,gPo,hPo,ov,dfe,uPo,pPo,VG,_Po,bPo,FPo,rv,vPo,cfe,TPo,MPo,mfe,EPo,CPo,tv,bIe,zi,av,ffe,dL,wPo,gfe,APo,FIe,Io,cL,yPo,Qi,LPo,XG,xPo,$Po,zG,kPo,SPo,RPo,mL,BPo,hfe,PPo,IPo,qPo,dt,fL,NPo,ufe,jPo,DPo,Wi,GPo,pfe,OPo,VPo,QG,XPo,zPo,QPo,nv,WPo,ro,gL,HPo,_fe,UPo,JPo,Ba,YPo,bfe,KPo,ZPo,Ffe,eIo,oIo,vfe,rIo,tIo,aIo,U,sv,Tfe,nIo,sIo,WG,lIo,iIo,dIo,lv,Mfe,cIo,mIo,HG,fIo,gIo,hIo,iv,Efe,uIo,pIo,UG,_Io,bIo,FIo,dv,Cfe,vIo,TIo,JG,MIo,EIo,CIo,cv,wfe,wIo,AIo,YG,yIo,LIo,xIo,mv,Afe,$Io,kIo,KG,SIo,RIo,BIo,fv,yfe,PIo,IIo,ZG,qIo,NIo,jIo,gv,Lfe,DIo,GIo,eO,OIo,VIo,XIo,hv,xfe,zIo,QIo,oO,WIo,HIo,UIo,uv,$fe,JIo,YIo,rO,KIo,ZIo,eqo,pv,kfe,oqo,rqo,tO,tqo,aqo,nqo,_v,Sfe,sqo,lqo,aO,iqo,dqo,cqo,bv,Rfe,mqo,fqo,nO,gqo,hqo,uqo,Fv,Bfe,pqo,_qo,sO,bqo,Fqo,vqo,vv,Pfe,Tqo,Mqo,lO,Eqo,Cqo,wqo,Tv,Ife,Aqo,yqo,iO,Lqo,xqo,$qo,Mv,qfe,kqo,Sqo,dO,Rqo,Bqo,Pqo,Ev,Nfe,Iqo,qqo,cO,Nqo,jqo,Dqo,Cv,jfe,Gqo,Oqo,mO,Vqo,Xqo,zqo,wv,Dfe,Qqo,Wqo,fO,Hqo,Uqo,Jqo,Av,Gfe,Yqo,Kqo,gO,Zqo,eNo,oNo,yv,Ofe,rNo,tNo,hO,aNo,nNo,sNo,Lv,Vfe,lNo,iNo,uO,dNo,cNo,mNo,xv,Xfe,fNo,gNo,pO,hNo,uNo,pNo,$v,zfe,_No,bNo,_O,FNo,vNo,TNo,kv,Qfe,MNo,ENo,bO,CNo,wNo,ANo,Sv,Wfe,yNo,LNo,FO,xNo,$No,kNo,Rv,Hfe,SNo,RNo,vO,BNo,PNo,INo,Bv,Ufe,qNo,NNo,TO,jNo,DNo,GNo,Pv,Jfe,ONo,VNo,MO,XNo,zNo,QNo,Iv,Yfe,WNo,HNo,EO,UNo,JNo,YNo,qv,Kfe,KNo,ZNo,CO,ejo,ojo,rjo,Nv,Zfe,tjo,ajo,wO,njo,sjo,ljo,jv,ijo,ege,djo,cjo,oge,mjo,fjo,Dv,vIe,Hi,Gv,rge,hL,gjo,tge,hjo,TIe,qo,uL,ujo,Ui,pjo,AO,_jo,bjo,yO,Fjo,vjo,Tjo,pL,Mjo,age,Ejo,Cjo,wjo,ct,_L,Ajo,nge,yjo,Ljo,Ji,xjo,sge,$jo,kjo,LO,Sjo,Rjo,Bjo,Ov,Pjo,to,bL,Ijo,lge,qjo,Njo,Pa,jjo,ige,Djo,Gjo,dge,Ojo,Vjo,cge,Xjo,zjo,Qjo,O,Vv,mge,Wjo,Hjo,xO,Ujo,Jjo,Yjo,Xv,fge,Kjo,Zjo,$O,eDo,oDo,rDo,zv,gge,tDo,aDo,kO,nDo,sDo,lDo,Qv,hge,iDo,dDo,SO,cDo,mDo,fDo,Wv,uge,gDo,hDo,RO,uDo,pDo,_Do,Hv,pge,bDo,FDo,BO,vDo,TDo,MDo,Uv,_ge,EDo,CDo,PO,wDo,ADo,yDo,Jv,bge,LDo,xDo,IO,$Do,kDo,SDo,Yv,Fge,RDo,BDo,qO,PDo,IDo,qDo,Kv,vge,NDo,jDo,NO,DDo,GDo,ODo,Zv,Tge,VDo,XDo,jO,zDo,QDo,WDo,e1,Mge,HDo,UDo,DO,JDo,YDo,KDo,o1,Ege,ZDo,eGo,GO,oGo,rGo,tGo,r1,Cge,aGo,nGo,OO,sGo,lGo,iGo,t1,wge,dGo,cGo,VO,mGo,fGo,gGo,a1,Age,hGo,uGo,XO,pGo,_Go,bGo,n1,yge,FGo,vGo,zO,TGo,MGo,EGo,s1,Lge,CGo,wGo,QO,AGo,yGo,LGo,l1,xge,xGo,$Go,WO,kGo,SGo,RGo,i1,$ge,BGo,PGo,HO,IGo,qGo,NGo,d1,kge,jGo,DGo,UO,GGo,OGo,VGo,c1,Sge,XGo,zGo,JO,QGo,WGo,HGo,m1,Rge,UGo,JGo,YO,YGo,KGo,ZGo,f1,Bge,eOo,oOo,KO,rOo,tOo,aOo,g1,Pge,nOo,sOo,ZO,lOo,iOo,dOo,h1,Ige,cOo,mOo,eV,fOo,gOo,hOo,u1,qge,uOo,pOo,oV,_Oo,bOo,FOo,p1,Nge,vOo,TOo,rV,MOo,EOo,COo,_1,jge,wOo,AOo,tV,yOo,LOo,xOo,b1,Dge,$Oo,kOo,aV,SOo,ROo,BOo,F1,Gge,POo,IOo,nV,qOo,NOo,jOo,v1,Oge,DOo,GOo,sV,OOo,VOo,XOo,T1,Vge,zOo,QOo,lV,WOo,HOo,UOo,M1,Xge,JOo,YOo,iV,KOo,ZOo,eVo,E1,zge,oVo,rVo,dV,tVo,aVo,nVo,C1,Qge,sVo,lVo,cV,iVo,dVo,cVo,w1,Wge,mVo,fVo,mV,gVo,hVo,uVo,A1,Hge,pVo,_Vo,fV,bVo,FVo,vVo,y1,Uge,TVo,MVo,gV,EVo,CVo,wVo,L1,AVo,Jge,yVo,LVo,Yge,xVo,$Vo,x1,MIe,Yi,$1,Kge,FL,kVo,Zge,SVo,EIe,No,vL,RVo,Ki,BVo,hV,PVo,IVo,uV,qVo,NVo,jVo,TL,DVo,ehe,GVo,OVo,VVo,mt,ML,XVo,ohe,zVo,QVo,Zi,WVo,rhe,HVo,UVo,pV,JVo,YVo,KVo,k1,ZVo,ao,EL,eXo,the,oXo,rXo,Ia,tXo,ahe,aXo,nXo,nhe,sXo,lXo,she,iXo,dXo,cXo,lhe,S1,ihe,mXo,fXo,_V,gXo,hXo,uXo,R1,pXo,dhe,_Xo,bXo,che,FXo,vXo,B1,CIe,ed,P1,mhe,CL,TXo,fhe,MXo,wIe,jo,wL,EXo,od,CXo,bV,wXo,AXo,FV,yXo,LXo,xXo,AL,$Xo,ghe,kXo,SXo,RXo,ft,yL,BXo,hhe,PXo,IXo,rd,qXo,uhe,NXo,jXo,vV,DXo,GXo,OXo,I1,VXo,no,LL,XXo,phe,zXo,QXo,qa,WXo,_he,HXo,UXo,bhe,JXo,YXo,Fhe,KXo,ZXo,ezo,ve,q1,vhe,ozo,rzo,TV,tzo,azo,nzo,N1,The,szo,lzo,MV,izo,dzo,czo,j1,Mhe,mzo,fzo,EV,gzo,hzo,uzo,Rs,Ehe,pzo,_zo,CV,bzo,Fzo,wV,vzo,Tzo,Mzo,D1,Che,Ezo,Czo,AV,wzo,Azo,yzo,gt,whe,Lzo,xzo,yV,$zo,kzo,LV,Szo,Rzo,xV,Bzo,Pzo,Izo,G1,Ahe,qzo,Nzo,$V,jzo,Dzo,Gzo,O1,yhe,Ozo,Vzo,kV,Xzo,zzo,Qzo,V1,Lhe,Wzo,Hzo,SV,Uzo,Jzo,Yzo,X1,xhe,Kzo,Zzo,RV,eQo,oQo,rQo,z1,$he,tQo,aQo,BV,nQo,sQo,lQo,Q1,khe,iQo,dQo,PV,cQo,mQo,fQo,W1,She,gQo,hQo,IV,uQo,pQo,_Qo,H1,bQo,Rhe,FQo,vQo,Bhe,TQo,MQo,U1,AIe,td,J1,Phe,xL,EQo,Ihe,CQo,yIe,Do,$L,wQo,ad,AQo,qV,yQo,LQo,NV,xQo,$Qo,kQo,kL,SQo,qhe,RQo,BQo,PQo,ht,SL,IQo,Nhe,qQo,NQo,nd,jQo,jhe,DQo,GQo,jV,OQo,VQo,XQo,Y1,zQo,so,RL,QQo,Dhe,WQo,HQo,Na,UQo,Ghe,JQo,YQo,Ohe,KQo,ZQo,Vhe,eWo,oWo,rWo,Xhe,K1,zhe,tWo,aWo,DV,nWo,sWo,lWo,Z1,iWo,Qhe,dWo,cWo,Whe,mWo,fWo,eT,LIe,sd,oT,Hhe,BL,gWo,Uhe,hWo,xIe,Go,PL,uWo,ld,pWo,GV,_Wo,bWo,OV,FWo,vWo,TWo,IL,MWo,Jhe,EWo,CWo,wWo,ut,qL,AWo,Yhe,yWo,LWo,id,xWo,Khe,$Wo,kWo,VV,SWo,RWo,BWo,rT,PWo,lo,NL,IWo,Zhe,qWo,NWo,ja,jWo,eue,DWo,GWo,oue,OWo,VWo,rue,XWo,zWo,QWo,Ne,tT,tue,WWo,HWo,XV,UWo,JWo,YWo,aT,aue,KWo,ZWo,zV,eHo,oHo,rHo,nT,nue,tHo,aHo,QV,nHo,sHo,lHo,sT,sue,iHo,dHo,WV,cHo,mHo,fHo,lT,lue,gHo,hHo,HV,uHo,pHo,_Ho,iT,iue,bHo,FHo,UV,vHo,THo,MHo,dT,due,EHo,CHo,JV,wHo,AHo,yHo,cT,cue,LHo,xHo,YV,$Ho,kHo,SHo,mT,RHo,mue,BHo,PHo,fue,IHo,qHo,fT,$Ie,dd,gT,gue,jL,NHo,hue,jHo,kIe,Oo,DL,DHo,cd,GHo,KV,OHo,VHo,ZV,XHo,zHo,QHo,GL,WHo,uue,HHo,UHo,JHo,pt,OL,YHo,pue,KHo,ZHo,md,eUo,_ue,oUo,rUo,eX,tUo,aUo,nUo,hT,sUo,io,VL,lUo,bue,iUo,dUo,Da,cUo,Fue,mUo,fUo,vue,gUo,hUo,Tue,uUo,pUo,_Uo,Ga,uT,Mue,bUo,FUo,oX,vUo,TUo,MUo,pT,Eue,EUo,CUo,rX,wUo,AUo,yUo,_T,Cue,LUo,xUo,tX,$Uo,kUo,SUo,bT,wue,RUo,BUo,aX,PUo,IUo,qUo,FT,NUo,Aue,jUo,DUo,yue,GUo,OUo,vT,SIe,fd,TT,Lue,XL,VUo,xue,XUo,RIe,Vo,zL,zUo,gd,QUo,nX,WUo,HUo,sX,UUo,JUo,YUo,QL,KUo,$ue,ZUo,eJo,oJo,_t,WL,rJo,kue,tJo,aJo,hd,nJo,Sue,sJo,lJo,lX,iJo,dJo,cJo,MT,mJo,co,HL,fJo,Rue,gJo,hJo,Oa,uJo,Bue,pJo,_Jo,Pue,bJo,FJo,Iue,vJo,TJo,MJo,je,ET,que,EJo,CJo,iX,wJo,AJo,yJo,CT,Nue,LJo,xJo,dX,$Jo,kJo,SJo,wT,jue,RJo,BJo,cX,PJo,IJo,qJo,AT,Due,NJo,jJo,mX,DJo,GJo,OJo,yT,Gue,VJo,XJo,fX,zJo,QJo,WJo,LT,Oue,HJo,UJo,gX,JJo,YJo,KJo,xT,Vue,ZJo,eYo,hX,oYo,rYo,tYo,$T,Xue,aYo,nYo,uX,sYo,lYo,iYo,kT,dYo,zue,cYo,mYo,Que,fYo,gYo,ST,BIe,ud,RT,Wue,UL,hYo,Hue,uYo,PIe,Xo,JL,pYo,pd,_Yo,pX,bYo,FYo,_X,vYo,TYo,MYo,YL,EYo,Uue,CYo,wYo,AYo,bt,KL,yYo,Jue,LYo,xYo,_d,$Yo,Yue,kYo,SYo,bX,RYo,BYo,PYo,BT,IYo,mo,ZL,qYo,Kue,NYo,jYo,Va,DYo,Zue,GYo,OYo,epe,VYo,XYo,ope,zYo,QYo,WYo,e8,PT,rpe,HYo,UYo,FX,JYo,YYo,KYo,IT,tpe,ZYo,eKo,vX,oKo,rKo,tKo,qT,aKo,ape,nKo,sKo,npe,lKo,iKo,NT,IIe,bd,jT,spe,o8,dKo,lpe,cKo,qIe,zo,r8,mKo,Fd,fKo,TX,gKo,hKo,MX,uKo,pKo,_Ko,t8,bKo,ipe,FKo,vKo,TKo,Ft,a8,MKo,dpe,EKo,CKo,vd,wKo,cpe,AKo,yKo,EX,LKo,xKo,$Ko,DT,kKo,fo,n8,SKo,mpe,RKo,BKo,Xa,PKo,fpe,IKo,qKo,gpe,NKo,jKo,hpe,DKo,GKo,OKo,za,GT,upe,VKo,XKo,CX,zKo,QKo,WKo,OT,ppe,HKo,UKo,wX,JKo,YKo,KKo,VT,_pe,ZKo,eZo,AX,oZo,rZo,tZo,XT,bpe,aZo,nZo,yX,sZo,lZo,iZo,zT,dZo,Fpe,cZo,mZo,vpe,fZo,gZo,QT,NIe,Td,WT,Tpe,s8,hZo,Mpe,uZo,jIe,Qo,l8,pZo,Md,_Zo,LX,bZo,FZo,xX,vZo,TZo,MZo,i8,EZo,Epe,CZo,wZo,AZo,vt,d8,yZo,Cpe,LZo,xZo,Ed,$Zo,wpe,kZo,SZo,$X,RZo,BZo,PZo,HT,IZo,go,c8,qZo,Ape,NZo,jZo,Qa,DZo,ype,GZo,OZo,Lpe,VZo,XZo,xpe,zZo,QZo,WZo,Cd,UT,$pe,HZo,UZo,kX,JZo,YZo,KZo,JT,kpe,ZZo,eer,SX,oer,rer,ter,YT,Spe,aer,ner,RX,ser,ler,ier,KT,der,Rpe,cer,mer,Bpe,fer,ger,ZT,DIe,wd,eM,Ppe,m8,her,Ipe,uer,GIe,Wo,f8,per,Ad,_er,BX,ber,Fer,PX,ver,Ter,Mer,g8,Eer,qpe,Cer,wer,Aer,Tt,h8,yer,Npe,Ler,xer,yd,$er,jpe,ker,Ser,IX,Rer,Ber,Per,oM,Ier,ho,u8,qer,Dpe,Ner,jer,Wa,Der,Gpe,Ger,Oer,Ope,Ver,Xer,Vpe,zer,Qer,Wer,p8,rM,Xpe,Her,Uer,qX,Jer,Yer,Ker,tM,zpe,Zer,eor,NX,oor,ror,tor,aM,aor,Qpe,nor,sor,Wpe,lor,ior,nM,OIe,Ld,sM,Hpe,_8,dor,Upe,cor,VIe,Ho,b8,mor,xd,gor,jX,hor,uor,DX,por,_or,bor,F8,For,Jpe,vor,Tor,Mor,Mt,v8,Eor,Ype,Cor,wor,$d,Aor,Kpe,yor,Lor,GX,xor,$or,kor,lM,Sor,uo,T8,Ror,Zpe,Bor,Por,Ha,Ior,e_e,qor,Nor,o_e,jor,Dor,r_e,Gor,Oor,Vor,t_e,iM,a_e,Xor,zor,OX,Qor,Wor,Hor,dM,Uor,n_e,Jor,Yor,s_e,Kor,Zor,cM,XIe,kd,mM,l_e,M8,err,i_e,orr,zIe,Uo,E8,rrr,Sd,trr,VX,arr,nrr,XX,srr,lrr,irr,C8,drr,d_e,crr,mrr,frr,Et,w8,grr,c_e,hrr,urr,Rd,prr,m_e,_rr,brr,zX,Frr,vrr,Trr,fM,Mrr,po,A8,Err,f_e,Crr,wrr,Ua,Arr,g_e,yrr,Lrr,h_e,xrr,$rr,u_e,krr,Srr,Rrr,Ja,gM,p_e,Brr,Prr,QX,Irr,qrr,Nrr,hM,__e,jrr,Drr,WX,Grr,Orr,Vrr,uM,b_e,Xrr,zrr,HX,Qrr,Wrr,Hrr,pM,F_e,Urr,Jrr,UX,Yrr,Krr,Zrr,_M,etr,v_e,otr,rtr,T_e,ttr,atr,bM,QIe,Bd,FM,M_e,y8,ntr,E_e,str,WIe,Jo,L8,ltr,Pd,itr,JX,dtr,ctr,YX,mtr,ftr,gtr,x8,htr,C_e,utr,ptr,_tr,Ct,$8,btr,w_e,Ftr,vtr,Id,Ttr,A_e,Mtr,Etr,KX,Ctr,wtr,Atr,vM,ytr,_o,k8,Ltr,y_e,xtr,$tr,Ya,ktr,L_e,Str,Rtr,x_e,Btr,Ptr,$_e,Itr,qtr,Ntr,k_e,TM,S_e,jtr,Dtr,ZX,Gtr,Otr,Vtr,MM,Xtr,R_e,ztr,Qtr,B_e,Wtr,Htr,EM,HIe,qd,CM,P_e,S8,Utr,I_e,Jtr,UIe,Yo,R8,Ytr,Nd,Ktr,ez,Ztr,ear,oz,oar,rar,tar,B8,aar,q_e,nar,sar,lar,wt,P8,iar,N_e,dar,car,jd,mar,j_e,far,gar,rz,har,uar,par,wM,_ar,wr,I8,bar,D_e,Far,Tar,Ka,Mar,G_e,Ear,Car,O_e,war,Aar,V_e,yar,Lar,xar,j,AM,X_e,$ar,kar,tz,Sar,Rar,Bar,yM,z_e,Par,Iar,az,qar,Nar,jar,LM,Q_e,Dar,Gar,nz,Oar,Var,Xar,xM,W_e,zar,Qar,sz,War,Har,Uar,$M,H_e,Jar,Yar,lz,Kar,Zar,enr,kM,U_e,onr,rnr,iz,tnr,anr,nnr,SM,J_e,snr,lnr,dz,inr,dnr,cnr,RM,Y_e,mnr,fnr,cz,gnr,hnr,unr,BM,K_e,pnr,_nr,mz,bnr,Fnr,vnr,PM,Z_e,Tnr,Mnr,fz,Enr,Cnr,wnr,IM,ebe,Anr,ynr,gz,Lnr,xnr,$nr,qM,obe,knr,Snr,hz,Rnr,Bnr,Pnr,NM,rbe,Inr,qnr,uz,Nnr,jnr,Dnr,jM,tbe,Gnr,Onr,pz,Vnr,Xnr,znr,DM,abe,Qnr,Wnr,_z,Hnr,Unr,Jnr,GM,nbe,Ynr,Knr,bz,Znr,esr,osr,OM,sbe,rsr,tsr,Fz,asr,nsr,ssr,Bs,lbe,lsr,isr,vz,dsr,csr,Tz,msr,fsr,gsr,VM,ibe,hsr,usr,Mz,psr,_sr,bsr,XM,dbe,Fsr,vsr,Ez,Tsr,Msr,Esr,zM,cbe,Csr,wsr,Cz,Asr,ysr,Lsr,QM,mbe,xsr,$sr,wz,ksr,Ssr,Rsr,WM,fbe,Bsr,Psr,Az,Isr,qsr,Nsr,HM,gbe,jsr,Dsr,yz,Gsr,Osr,Vsr,UM,hbe,Xsr,zsr,Lz,Qsr,Wsr,Hsr,JM,ube,Usr,Jsr,xz,Ysr,Ksr,Zsr,YM,pbe,elr,olr,$z,rlr,tlr,alr,KM,_be,nlr,slr,kz,llr,ilr,dlr,ZM,bbe,clr,mlr,Sz,flr,glr,hlr,e4,Fbe,ulr,plr,Rz,_lr,blr,Flr,o4,vbe,vlr,Tlr,Bz,Mlr,Elr,Clr,r4,Tbe,wlr,Alr,Pz,ylr,Llr,xlr,t4,Mbe,$lr,klr,Iz,Slr,Rlr,Blr,a4,Ebe,Plr,Ilr,qz,qlr,Nlr,jlr,n4,Cbe,Dlr,Glr,Nz,Olr,Vlr,Xlr,s4,wbe,zlr,Qlr,jz,Wlr,Hlr,Ulr,l4,Abe,Jlr,Ylr,Dz,Klr,Zlr,eir,i4,ybe,oir,rir,Gz,tir,air,nir,d4,Lbe,sir,lir,Oz,iir,dir,cir,c4,xbe,mir,fir,Vz,gir,hir,uir,m4,$be,pir,_ir,Xz,bir,Fir,vir,f4,kbe,Tir,Mir,zz,Eir,Cir,wir,g4,Sbe,Air,yir,Qz,Lir,xir,$ir,h4,Rbe,kir,Sir,Wz,Rir,Bir,Pir,u4,Bbe,Iir,qir,Hz,Nir,jir,Dir,p4,JIe,Dd,_4,Pbe,q8,Gir,Ibe,Oir,YIe,Ko,N8,Vir,Gd,Xir,Uz,zir,Qir,Jz,Wir,Hir,Uir,j8,Jir,qbe,Yir,Kir,Zir,At,D8,edr,Nbe,odr,rdr,Od,tdr,jbe,adr,ndr,Yz,sdr,ldr,idr,b4,ddr,Ar,G8,cdr,Dbe,mdr,fdr,Za,gdr,Gbe,hdr,udr,Obe,pdr,_dr,Vbe,bdr,Fdr,vdr,se,F4,Xbe,Tdr,Mdr,Kz,Edr,Cdr,wdr,v4,zbe,Adr,ydr,Zz,Ldr,xdr,$dr,T4,Qbe,kdr,Sdr,eQ,Rdr,Bdr,Pdr,M4,Wbe,Idr,qdr,oQ,Ndr,jdr,Ddr,E4,Hbe,Gdr,Odr,rQ,Vdr,Xdr,zdr,C4,Ube,Qdr,Wdr,tQ,Hdr,Udr,Jdr,w4,Jbe,Ydr,Kdr,aQ,Zdr,ecr,ocr,A4,Ybe,rcr,tcr,nQ,acr,ncr,scr,y4,Kbe,lcr,icr,sQ,dcr,ccr,mcr,L4,Zbe,fcr,gcr,lQ,hcr,ucr,pcr,x4,e2e,_cr,bcr,iQ,Fcr,vcr,Tcr,$4,o2e,Mcr,Ecr,dQ,Ccr,wcr,Acr,k4,r2e,ycr,Lcr,cQ,xcr,$cr,kcr,S4,t2e,Scr,Rcr,mQ,Bcr,Pcr,Icr,R4,a2e,qcr,Ncr,fQ,jcr,Dcr,Gcr,B4,n2e,Ocr,Vcr,gQ,Xcr,zcr,Qcr,P4,s2e,Wcr,Hcr,hQ,Ucr,Jcr,Ycr,I4,l2e,Kcr,Zcr,uQ,emr,omr,rmr,q4,i2e,tmr,amr,pQ,nmr,smr,lmr,N4,d2e,imr,dmr,_Q,cmr,mmr,fmr,j4,c2e,gmr,hmr,bQ,umr,pmr,_mr,D4,m2e,bmr,Fmr,FQ,vmr,Tmr,Mmr,G4,f2e,Emr,Cmr,vQ,wmr,Amr,ymr,O4,KIe,Vd,V4,g2e,O8,Lmr,h2e,xmr,ZIe,Zo,V8,$mr,Xd,kmr,TQ,Smr,Rmr,MQ,Bmr,Pmr,Imr,X8,qmr,u2e,Nmr,jmr,Dmr,yt,z8,Gmr,p2e,Omr,Vmr,zd,Xmr,_2e,zmr,Qmr,EQ,Wmr,Hmr,Umr,X4,Jmr,yr,Q8,Ymr,b2e,Kmr,Zmr,en,efr,F2e,ofr,rfr,v2e,tfr,afr,T2e,nfr,sfr,lfr,Te,z4,M2e,ifr,dfr,CQ,cfr,mfr,ffr,Q4,E2e,gfr,hfr,wQ,ufr,pfr,_fr,W4,C2e,bfr,Ffr,AQ,vfr,Tfr,Mfr,H4,w2e,Efr,Cfr,yQ,wfr,Afr,yfr,U4,A2e,Lfr,xfr,LQ,$fr,kfr,Sfr,J4,y2e,Rfr,Bfr,xQ,Pfr,Ifr,qfr,Y4,L2e,Nfr,jfr,$Q,Dfr,Gfr,Ofr,K4,x2e,Vfr,Xfr,kQ,zfr,Qfr,Wfr,Z4,$2e,Hfr,Ufr,SQ,Jfr,Yfr,Kfr,eE,k2e,Zfr,egr,RQ,ogr,rgr,tgr,oE,S2e,agr,ngr,BQ,sgr,lgr,igr,rE,R2e,dgr,cgr,PQ,mgr,fgr,ggr,tE,eqe,Qd,aE,B2e,W8,hgr,P2e,ugr,oqe,er,H8,pgr,Wd,_gr,IQ,bgr,Fgr,qQ,vgr,Tgr,Mgr,U8,Egr,I2e,Cgr,wgr,Agr,Lt,J8,ygr,q2e,Lgr,xgr,Hd,$gr,N2e,kgr,Sgr,NQ,Rgr,Bgr,Pgr,nE,Igr,Lr,Y8,qgr,j2e,Ngr,jgr,on,Dgr,D2e,Ggr,Ogr,G2e,Vgr,Xgr,O2e,zgr,Qgr,Wgr,Ud,sE,V2e,Hgr,Ugr,jQ,Jgr,Ygr,Kgr,lE,X2e,Zgr,ehr,DQ,ohr,rhr,thr,iE,z2e,ahr,nhr,GQ,shr,lhr,ihr,dE,rqe,Jd,cE,Q2e,K8,dhr,W2e,chr,tqe,or,Z8,mhr,Yd,fhr,OQ,ghr,hhr,VQ,uhr,phr,_hr,ex,bhr,H2e,Fhr,vhr,Thr,xt,ox,Mhr,U2e,Ehr,Chr,Kd,whr,J2e,Ahr,yhr,XQ,Lhr,xhr,$hr,mE,khr,xr,rx,Shr,Y2e,Rhr,Bhr,rn,Phr,K2e,Ihr,qhr,Z2e,Nhr,jhr,eFe,Dhr,Ghr,Ohr,ie,fE,oFe,Vhr,Xhr,zQ,zhr,Qhr,Whr,gE,rFe,Hhr,Uhr,QQ,Jhr,Yhr,Khr,hE,tFe,Zhr,eur,WQ,our,rur,tur,uE,aFe,aur,nur,HQ,sur,lur,iur,pE,nFe,dur,cur,UQ,mur,fur,gur,_E,sFe,hur,uur,JQ,pur,_ur,bur,bE,lFe,Fur,vur,YQ,Tur,Mur,Eur,FE,iFe,Cur,wur,KQ,Aur,yur,Lur,vE,dFe,xur,$ur,ZQ,kur,Sur,Rur,TE,cFe,Bur,Pur,eW,Iur,qur,Nur,ME,mFe,jur,Dur,oW,Gur,Our,Vur,EE,fFe,Xur,zur,rW,Qur,Wur,Hur,CE,gFe,Uur,Jur,tW,Yur,Kur,Zur,wE,hFe,epr,opr,aW,rpr,tpr,apr,AE,uFe,npr,spr,nW,lpr,ipr,dpr,yE,pFe,cpr,mpr,sW,fpr,gpr,hpr,LE,_Fe,upr,ppr,lW,_pr,bpr,Fpr,xE,bFe,vpr,Tpr,iW,Mpr,Epr,Cpr,$E,FFe,wpr,Apr,dW,ypr,Lpr,xpr,kE,vFe,$pr,kpr,cW,Spr,Rpr,Bpr,SE,aqe,Zd,RE,TFe,tx,Ppr,MFe,Ipr,nqe,rr,ax,qpr,ec,Npr,mW,jpr,Dpr,fW,Gpr,Opr,Vpr,nx,Xpr,EFe,zpr,Qpr,Wpr,$t,sx,Hpr,CFe,Upr,Jpr,oc,Ypr,wFe,Kpr,Zpr,gW,e_r,o_r,r_r,BE,t_r,$r,lx,a_r,AFe,n_r,s_r,tn,l_r,yFe,i_r,d_r,LFe,c_r,m_r,xFe,f_r,g_r,h_r,ye,PE,$Fe,u_r,p_r,hW,__r,b_r,F_r,IE,kFe,v_r,T_r,uW,M_r,E_r,C_r,qE,SFe,w_r,A_r,pW,y_r,L_r,x_r,NE,RFe,$_r,k_r,_W,S_r,R_r,B_r,jE,BFe,P_r,I_r,bW,q_r,N_r,j_r,DE,PFe,D_r,G_r,FW,O_r,V_r,X_r,GE,IFe,z_r,Q_r,vW,W_r,H_r,U_r,OE,qFe,J_r,Y_r,TW,K_r,Z_r,ebr,VE,NFe,obr,rbr,MW,tbr,abr,nbr,XE,jFe,sbr,lbr,EW,ibr,dbr,cbr,zE,sqe,rc,QE,DFe,ix,mbr,GFe,fbr,lqe,tr,dx,gbr,tc,hbr,CW,ubr,pbr,wW,_br,bbr,Fbr,cx,vbr,OFe,Tbr,Mbr,Ebr,kt,mx,Cbr,VFe,wbr,Abr,ac,ybr,XFe,Lbr,xbr,AW,$br,kbr,Sbr,WE,Rbr,kr,fx,Bbr,zFe,Pbr,Ibr,an,qbr,QFe,Nbr,jbr,WFe,Dbr,Gbr,HFe,Obr,Vbr,Xbr,Z,HE,UFe,zbr,Qbr,yW,Wbr,Hbr,Ubr,UE,JFe,Jbr,Ybr,LW,Kbr,Zbr,e2r,JE,YFe,o2r,r2r,xW,t2r,a2r,n2r,YE,KFe,s2r,l2r,$W,i2r,d2r,c2r,KE,ZFe,m2r,f2r,kW,g2r,h2r,u2r,ZE,eve,p2r,_2r,SW,b2r,F2r,v2r,e5,ove,T2r,M2r,RW,E2r,C2r,w2r,o5,rve,A2r,y2r,BW,L2r,x2r,$2r,r5,tve,k2r,S2r,PW,R2r,B2r,P2r,t5,ave,I2r,q2r,IW,N2r,j2r,D2r,a5,nve,G2r,O2r,qW,V2r,X2r,z2r,n5,sve,Q2r,W2r,NW,H2r,U2r,J2r,s5,lve,Y2r,K2r,jW,Z2r,eFr,oFr,l5,ive,rFr,tFr,DW,aFr,nFr,sFr,i5,dve,lFr,iFr,GW,dFr,cFr,mFr,d5,cve,fFr,gFr,OW,hFr,uFr,pFr,c5,mve,_Fr,bFr,VW,FFr,vFr,TFr,m5,fve,MFr,EFr,XW,CFr,wFr,AFr,f5,gve,yFr,LFr,zW,xFr,$Fr,kFr,g5,hve,SFr,RFr,QW,BFr,PFr,IFr,h5,uve,qFr,NFr,WW,jFr,DFr,GFr,u5,pve,OFr,VFr,HW,XFr,zFr,QFr,p5,_ve,WFr,HFr,UW,UFr,JFr,YFr,_5,bve,KFr,ZFr,JW,evr,ovr,rvr,b5,Fve,tvr,avr,YW,nvr,svr,lvr,F5,vve,ivr,dvr,KW,cvr,mvr,fvr,v5,iqe,nc,T5,Tve,gx,gvr,Mve,hvr,dqe,ar,hx,uvr,sc,pvr,ZW,_vr,bvr,eH,Fvr,vvr,Tvr,ux,Mvr,Eve,Evr,Cvr,wvr,St,px,Avr,Cve,yvr,Lvr,lc,xvr,wve,$vr,kvr,oH,Svr,Rvr,Bvr,M5,Pvr,Sr,_x,Ivr,Ave,qvr,Nvr,nn,jvr,yve,Dvr,Gvr,Lve,Ovr,Vvr,xve,Xvr,zvr,Qvr,ue,E5,$ve,Wvr,Hvr,rH,Uvr,Jvr,Yvr,C5,kve,Kvr,Zvr,tH,e1r,o1r,r1r,w5,Sve,t1r,a1r,aH,n1r,s1r,l1r,A5,Rve,i1r,d1r,nH,c1r,m1r,f1r,y5,Bve,g1r,h1r,sH,u1r,p1r,_1r,L5,Pve,b1r,F1r,lH,v1r,T1r,M1r,x5,Ive,E1r,C1r,iH,w1r,A1r,y1r,$5,qve,L1r,x1r,dH,$1r,k1r,S1r,k5,Nve,R1r,B1r,cH,P1r,I1r,q1r,S5,jve,N1r,j1r,mH,D1r,G1r,O1r,R5,Dve,V1r,X1r,fH,z1r,Q1r,W1r,B5,Gve,H1r,U1r,gH,J1r,Y1r,K1r,P5,Ove,Z1r,eTr,hH,oTr,rTr,tTr,I5,Vve,aTr,nTr,uH,sTr,lTr,iTr,q5,Xve,dTr,cTr,pH,mTr,fTr,gTr,N5,zve,hTr,uTr,_H,pTr,_Tr,bTr,j5,Qve,FTr,vTr,bH,TTr,MTr,ETr,D5,cqe,ic,G5,Wve,bx,CTr,Hve,wTr,mqe,nr,Fx,ATr,dc,yTr,FH,LTr,xTr,vH,$Tr,kTr,STr,vx,RTr,Uve,BTr,PTr,ITr,Rt,Tx,qTr,Jve,NTr,jTr,cc,DTr,Yve,GTr,OTr,TH,VTr,XTr,zTr,O5,QTr,Rr,Mx,WTr,Kve,HTr,UTr,sn,JTr,Zve,YTr,KTr,e1e,ZTr,eMr,o1e,oMr,rMr,tMr,Ex,V5,r1e,aMr,nMr,MH,sMr,lMr,iMr,X5,t1e,dMr,cMr,EH,mMr,fMr,gMr,z5,fqe,mc,Q5,a1e,Cx,hMr,n1e,uMr,gqe,sr,wx,pMr,fc,_Mr,CH,bMr,FMr,wH,vMr,TMr,MMr,Ax,EMr,s1e,CMr,wMr,AMr,Bt,yx,yMr,l1e,LMr,xMr,gc,$Mr,i1e,kMr,SMr,AH,RMr,BMr,PMr,W5,IMr,Br,Lx,qMr,d1e,NMr,jMr,ln,DMr,c1e,GMr,OMr,m1e,VMr,XMr,f1e,zMr,QMr,WMr,g1e,H5,h1e,HMr,UMr,yH,JMr,YMr,KMr,U5,hqe,hc,J5,u1e,xx,ZMr,p1e,e4r,uqe,lr,$x,o4r,uc,r4r,LH,t4r,a4r,xH,n4r,s4r,l4r,kx,i4r,_1e,d4r,c4r,m4r,Pt,Sx,f4r,b1e,g4r,h4r,pc,u4r,F1e,p4r,_4r,$H,b4r,F4r,v4r,Y5,T4r,Pr,Rx,M4r,v1e,E4r,C4r,dn,w4r,T1e,A4r,y4r,M1e,L4r,x4r,E1e,$4r,k4r,S4r,de,K5,C1e,R4r,B4r,kH,P4r,I4r,q4r,Z5,w1e,N4r,j4r,SH,D4r,G4r,O4r,eC,A1e,V4r,X4r,RH,z4r,Q4r,W4r,oC,y1e,H4r,U4r,BH,J4r,Y4r,K4r,rC,L1e,Z4r,eEr,PH,oEr,rEr,tEr,tC,x1e,aEr,nEr,IH,sEr,lEr,iEr,aC,$1e,dEr,cEr,qH,mEr,fEr,gEr,nC,k1e,hEr,uEr,NH,pEr,_Er,bEr,sC,S1e,FEr,vEr,jH,TEr,MEr,EEr,lC,R1e,CEr,wEr,DH,AEr,yEr,LEr,iC,B1e,xEr,$Er,GH,kEr,SEr,REr,dC,P1e,BEr,PEr,OH,IEr,qEr,NEr,cC,I1e,jEr,DEr,VH,GEr,OEr,VEr,mC,q1e,XEr,zEr,XH,QEr,WEr,HEr,fC,N1e,UEr,JEr,zH,YEr,KEr,ZEr,gC,j1e,e5r,o5r,QH,r5r,t5r,a5r,hC,D1e,n5r,s5r,WH,l5r,i5r,d5r,uC,G1e,c5r,m5r,HH,f5r,g5r,h5r,pC,O1e,u5r,p5r,UH,_5r,b5r,F5r,_C,V1e,v5r,T5r,JH,M5r,E5r,C5r,bC,pqe,_c,FC,X1e,Bx,w5r,z1e,A5r,_qe,ir,Px,y5r,bc,L5r,YH,x5r,$5r,KH,k5r,S5r,R5r,Ix,B5r,Q1e,P5r,I5r,q5r,It,qx,N5r,W1e,j5r,D5r,Fc,G5r,H1e,O5r,V5r,ZH,X5r,z5r,Q5r,vC,W5r,Ir,Nx,H5r,U1e,U5r,J5r,cn,Y5r,J1e,K5r,Z5r,Y1e,eCr,oCr,K1e,rCr,tCr,aCr,ce,TC,Z1e,nCr,sCr,eU,lCr,iCr,dCr,MC,eTe,cCr,mCr,oU,fCr,gCr,hCr,EC,oTe,uCr,pCr,rU,_Cr,bCr,FCr,CC,rTe,vCr,TCr,tU,MCr,ECr,CCr,wC,tTe,wCr,ACr,aU,yCr,LCr,xCr,AC,aTe,$Cr,kCr,nU,SCr,RCr,BCr,yC,nTe,PCr,ICr,sU,qCr,NCr,jCr,LC,sTe,DCr,GCr,lU,OCr,VCr,XCr,xC,lTe,zCr,QCr,iU,WCr,HCr,UCr,$C,iTe,JCr,YCr,dU,KCr,ZCr,e3r,kC,dTe,o3r,r3r,cU,t3r,a3r,n3r,SC,cTe,s3r,l3r,mU,i3r,d3r,c3r,RC,mTe,m3r,f3r,fU,g3r,h3r,u3r,BC,fTe,p3r,_3r,gU,b3r,F3r,v3r,PC,gTe,T3r,M3r,hU,E3r,C3r,w3r,IC,hTe,A3r,y3r,uU,L3r,x3r,$3r,qC,uTe,k3r,S3r,pU,R3r,B3r,P3r,NC,pTe,I3r,q3r,_U,N3r,j3r,D3r,jC,_Te,G3r,O3r,bU,V3r,X3r,z3r,DC,bTe,Q3r,W3r,FU,H3r,U3r,J3r,GC,bqe,vc,OC,FTe,jx,Y3r,vTe,K3r,Fqe,dr,Dx,Z3r,Tc,ewr,vU,owr,rwr,TU,twr,awr,nwr,Gx,swr,TTe,lwr,iwr,dwr,qt,Ox,cwr,MTe,mwr,fwr,Mc,gwr,ETe,hwr,uwr,MU,pwr,_wr,bwr,VC,Fwr,qr,Vx,vwr,CTe,Twr,Mwr,mn,Ewr,wTe,Cwr,wwr,ATe,Awr,ywr,yTe,Lwr,xwr,$wr,LTe,XC,xTe,kwr,Swr,EU,Rwr,Bwr,Pwr,zC,vqe,Ec,QC,$Te,Xx,Iwr,kTe,qwr,Tqe,cr,zx,Nwr,Cc,jwr,CU,Dwr,Gwr,wU,Owr,Vwr,Xwr,Qx,zwr,STe,Qwr,Wwr,Hwr,Nt,Wx,Uwr,RTe,Jwr,Ywr,wc,Kwr,BTe,Zwr,eAr,AU,oAr,rAr,tAr,WC,aAr,Nr,Hx,nAr,PTe,sAr,lAr,fn,iAr,ITe,dAr,cAr,qTe,mAr,fAr,NTe,gAr,hAr,uAr,jTe,HC,DTe,pAr,_Ar,yU,bAr,FAr,vAr,UC,Mqe,Ac,JC,GTe,Ux,TAr,OTe,MAr,Eqe,mr,Jx,EAr,yc,CAr,LU,wAr,AAr,xU,yAr,LAr,xAr,Yx,$Ar,VTe,kAr,SAr,RAr,jt,Kx,BAr,XTe,PAr,IAr,Lc,qAr,zTe,NAr,jAr,$U,DAr,GAr,OAr,YC,VAr,jr,Zx,XAr,QTe,zAr,QAr,gn,WAr,WTe,HAr,UAr,HTe,JAr,YAr,UTe,KAr,ZAr,e6r,re,KC,JTe,o6r,r6r,kU,t6r,a6r,n6r,ZC,YTe,s6r,l6r,SU,i6r,d6r,c6r,e3,KTe,m6r,f6r,RU,g6r,h6r,u6r,o3,ZTe,p6r,_6r,BU,b6r,F6r,v6r,r3,eMe,T6r,M6r,PU,E6r,C6r,w6r,t3,oMe,A6r,y6r,IU,L6r,x6r,$6r,a3,rMe,k6r,S6r,qU,R6r,B6r,P6r,n3,tMe,I6r,q6r,NU,N6r,j6r,D6r,s3,aMe,G6r,O6r,jU,V6r,X6r,z6r,l3,nMe,Q6r,W6r,DU,H6r,U6r,J6r,i3,sMe,Y6r,K6r,GU,Z6r,e0r,o0r,d3,lMe,r0r,t0r,OU,a0r,n0r,s0r,c3,iMe,l0r,i0r,VU,d0r,c0r,m0r,m3,dMe,f0r,g0r,XU,h0r,u0r,p0r,f3,cMe,_0r,b0r,zU,F0r,v0r,T0r,g3,mMe,M0r,E0r,QU,C0r,w0r,A0r,h3,fMe,y0r,L0r,WU,x0r,$0r,k0r,u3,gMe,S0r,R0r,HU,B0r,P0r,I0r,p3,hMe,q0r,N0r,UU,j0r,D0r,G0r,_3,uMe,O0r,V0r,JU,X0r,z0r,Q0r,b3,pMe,W0r,H0r,YU,U0r,J0r,Y0r,F3,_Me,K0r,Z0r,KU,eyr,oyr,ryr,v3,bMe,tyr,ayr,ZU,nyr,syr,lyr,T3,FMe,iyr,dyr,eJ,cyr,myr,fyr,M3,vMe,gyr,hyr,oJ,uyr,pyr,_yr,E3,Cqe,xc,C3,TMe,e7,byr,MMe,Fyr,wqe,fr,o7,vyr,$c,Tyr,rJ,Myr,Eyr,tJ,Cyr,wyr,Ayr,r7,yyr,EMe,Lyr,xyr,$yr,Dt,t7,kyr,CMe,Syr,Ryr,kc,Byr,wMe,Pyr,Iyr,aJ,qyr,Nyr,jyr,w3,Dyr,Dr,a7,Gyr,AMe,Oyr,Vyr,hn,Xyr,yMe,zyr,Qyr,LMe,Wyr,Hyr,xMe,Uyr,Jyr,Yyr,ke,A3,$Me,Kyr,Zyr,nJ,eLr,oLr,rLr,y3,kMe,tLr,aLr,sJ,nLr,sLr,lLr,L3,SMe,iLr,dLr,lJ,cLr,mLr,fLr,x3,RMe,gLr,hLr,iJ,uLr,pLr,_Lr,$3,BMe,bLr,FLr,dJ,vLr,TLr,MLr,k3,PMe,ELr,CLr,cJ,wLr,ALr,yLr,S3,IMe,LLr,xLr,mJ,$Lr,kLr,SLr,R3,qMe,RLr,BLr,fJ,PLr,ILr,qLr,B3,NMe,NLr,jLr,gJ,DLr,GLr,OLr,P3,Aqe,Sc,I3,jMe,n7,VLr,DMe,XLr,yqe,gr,s7,zLr,Rc,QLr,hJ,WLr,HLr,uJ,ULr,JLr,YLr,l7,KLr,GMe,ZLr,e8r,o8r,Gt,i7,r8r,OMe,t8r,a8r,Bc,n8r,VMe,s8r,l8r,pJ,i8r,d8r,c8r,q3,m8r,Gr,d7,f8r,XMe,g8r,h8r,un,u8r,zMe,p8r,_8r,QMe,b8r,F8r,WMe,v8r,T8r,M8r,Me,N3,HMe,E8r,C8r,_J,w8r,A8r,y8r,j3,UMe,L8r,x8r,bJ,$8r,k8r,S8r,D3,JMe,R8r,B8r,FJ,P8r,I8r,q8r,G3,YMe,N8r,j8r,vJ,D8r,G8r,O8r,O3,KMe,V8r,X8r,TJ,z8r,Q8r,W8r,V3,ZMe,H8r,U8r,MJ,J8r,Y8r,K8r,X3,e4e,Z8r,exr,EJ,oxr,rxr,txr,z3,o4e,axr,nxr,CJ,sxr,lxr,ixr,Q3,r4e,dxr,cxr,wJ,mxr,fxr,gxr,W3,t4e,hxr,uxr,AJ,pxr,_xr,bxr,H3,a4e,Fxr,vxr,yJ,Txr,Mxr,Exr,U3,n4e,Cxr,wxr,LJ,Axr,yxr,Lxr,J3,Lqe,Pc,Y3,s4e,c7,xxr,l4e,$xr,xqe,hr,m7,kxr,Ic,Sxr,xJ,Rxr,Bxr,$J,Pxr,Ixr,qxr,f7,Nxr,i4e,jxr,Dxr,Gxr,Ot,g7,Oxr,d4e,Vxr,Xxr,qc,zxr,c4e,Qxr,Wxr,kJ,Hxr,Uxr,Jxr,K3,Yxr,Or,h7,Kxr,m4e,Zxr,e7r,pn,o7r,f4e,r7r,t7r,g4e,a7r,n7r,h4e,s7r,l7r,i7r,Le,Z3,u4e,d7r,c7r,SJ,m7r,f7r,g7r,ew,p4e,h7r,u7r,RJ,p7r,_7r,b7r,ow,_4e,F7r,v7r,BJ,T7r,M7r,E7r,rw,b4e,C7r,w7r,PJ,A7r,y7r,L7r,tw,F4e,x7r,$7r,IJ,k7r,S7r,R7r,aw,v4e,B7r,P7r,qJ,I7r,q7r,N7r,nw,T4e,j7r,D7r,NJ,G7r,O7r,V7r,sw,M4e,X7r,z7r,jJ,Q7r,W7r,H7r,lw,E4e,U7r,J7r,DJ,Y7r,K7r,Z7r,iw,C4e,e9r,o9r,GJ,r9r,t9r,a9r,dw,$qe,Nc,cw,w4e,u7,n9r,A4e,s9r,kqe,ur,p7,l9r,jc,i9r,OJ,d9r,c9r,VJ,m9r,f9r,g9r,_7,h9r,y4e,u9r,p9r,_9r,Vt,b7,b9r,L4e,F9r,v9r,Dc,T9r,x4e,M9r,E9r,XJ,C9r,w9r,A9r,mw,y9r,Vr,F7,L9r,$4e,x9r,$9r,_n,k9r,k4e,S9r,R9r,S4e,B9r,P9r,R4e,I9r,q9r,N9r,Se,fw,B4e,j9r,D9r,zJ,G9r,O9r,V9r,gw,P4e,X9r,z9r,QJ,Q9r,W9r,H9r,hw,I4e,U9r,J9r,WJ,Y9r,K9r,Z9r,uw,q4e,e$r,o$r,HJ,r$r,t$r,a$r,pw,N4e,n$r,s$r,UJ,l$r,i$r,d$r,_w,j4e,c$r,m$r,JJ,f$r,g$r,h$r,bw,D4e,u$r,p$r,YJ,_$r,b$r,F$r,Fw,G4e,v$r,T$r,KJ,M$r,E$r,C$r,vw,O4e,w$r,A$r,ZJ,y$r,L$r,x$r,Tw,Sqe,Gc,Mw,V4e,v7,$$r,X4e,k$r,Rqe,pr,T7,S$r,Oc,R$r,eY,B$r,P$r,oY,I$r,q$r,N$r,M7,j$r,z4e,D$r,G$r,O$r,Xt,E7,V$r,Q4e,X$r,z$r,Vc,Q$r,W4e,W$r,H$r,rY,U$r,J$r,Y$r,Ew,K$r,Xr,C7,Z$r,H4e,ekr,okr,bn,rkr,U4e,tkr,akr,J4e,nkr,skr,Y4e,lkr,ikr,dkr,xe,Cw,K4e,ckr,mkr,tY,fkr,gkr,hkr,ww,Z4e,ukr,pkr,aY,_kr,bkr,Fkr,Aw,eEe,vkr,Tkr,nY,Mkr,Ekr,Ckr,yw,oEe,wkr,Akr,sY,ykr,Lkr,xkr,Lw,rEe,$kr,kkr,lY,Skr,Rkr,Bkr,xw,tEe,Pkr,Ikr,iY,qkr,Nkr,jkr,$w,aEe,Dkr,Gkr,dY,Okr,Vkr,Xkr,kw,nEe,zkr,Qkr,cY,Wkr,Hkr,Ukr,Sw,sEe,Jkr,Ykr,mY,Kkr,Zkr,eSr,Rw,lEe,oSr,rSr,fY,tSr,aSr,nSr,Bw,Bqe,Xc,Pw,iEe,w7,sSr,dEe,lSr,Pqe,_r,A7,iSr,zc,dSr,gY,cSr,mSr,hY,fSr,gSr,hSr,y7,uSr,cEe,pSr,_Sr,bSr,zt,L7,FSr,mEe,vSr,TSr,Qc,MSr,fEe,ESr,CSr,uY,wSr,ASr,ySr,Iw,LSr,zr,x7,xSr,gEe,$Sr,kSr,Fn,SSr,hEe,RSr,BSr,uEe,PSr,ISr,pEe,qSr,NSr,jSr,$e,qw,_Ee,DSr,GSr,pY,OSr,VSr,XSr,Nw,bEe,zSr,QSr,_Y,WSr,HSr,USr,jw,FEe,JSr,YSr,bY,KSr,ZSr,eRr,Dw,vEe,oRr,rRr,FY,tRr,aRr,nRr,Gw,TEe,sRr,lRr,vY,iRr,dRr,cRr,Ow,MEe,mRr,fRr,TY,gRr,hRr,uRr,Vw,EEe,pRr,_Rr,MY,bRr,FRr,vRr,Xw,CEe,TRr,MRr,EY,ERr,CRr,wRr,zw,wEe,ARr,yRr,CY,LRr,xRr,$Rr,Qw,AEe,kRr,SRr,wY,RRr,BRr,PRr,Ww,Iqe,Wc,Hw,yEe,$7,IRr,LEe,qRr,qqe,br,k7,NRr,Hc,jRr,AY,DRr,GRr,yY,ORr,VRr,XRr,S7,zRr,xEe,QRr,WRr,HRr,Qt,R7,URr,$Ee,JRr,YRr,Uc,KRr,kEe,ZRr,eBr,LY,oBr,rBr,tBr,Uw,aBr,Qr,B7,nBr,SEe,sBr,lBr,vn,iBr,REe,dBr,cBr,BEe,mBr,fBr,PEe,gBr,hBr,uBr,De,Jw,IEe,pBr,_Br,xY,bBr,FBr,vBr,Yw,qEe,TBr,MBr,$Y,EBr,CBr,wBr,Kw,NEe,ABr,yBr,kY,LBr,xBr,$Br,Zw,jEe,kBr,SBr,SY,RBr,BBr,PBr,eA,DEe,IBr,qBr,RY,NBr,jBr,DBr,oA,GEe,GBr,OBr,BY,VBr,XBr,zBr,rA,OEe,QBr,WBr,PY,HBr,UBr,JBr,tA,VEe,YBr,KBr,IY,ZBr,ePr,oPr,aA,Nqe,Jc,nA,XEe,P7,rPr,zEe,tPr,jqe,Fr,I7,aPr,Yc,nPr,qY,sPr,lPr,NY,iPr,dPr,cPr,q7,mPr,QEe,fPr,gPr,hPr,Wt,N7,uPr,WEe,pPr,_Pr,Kc,bPr,HEe,FPr,vPr,jY,TPr,MPr,EPr,sA,CPr,Wr,j7,wPr,UEe,APr,yPr,Tn,LPr,JEe,xPr,$Pr,YEe,kPr,SPr,KEe,RPr,BPr,PPr,Ge,lA,ZEe,IPr,qPr,DY,NPr,jPr,DPr,iA,e5e,GPr,OPr,GY,VPr,XPr,zPr,dA,o5e,QPr,WPr,OY,HPr,UPr,JPr,cA,r5e,YPr,KPr,VY,ZPr,eIr,oIr,mA,t5e,rIr,tIr,XY,aIr,nIr,sIr,fA,a5e,lIr,iIr,zY,dIr,cIr,mIr,gA,n5e,fIr,gIr,QY,hIr,uIr,pIr,hA,s5e,_Ir,bIr,WY,FIr,vIr,TIr,uA,Dqe,Zc,pA,l5e,D7,MIr,i5e,EIr,Gqe,vr,G7,CIr,em,wIr,HY,AIr,yIr,UY,LIr,xIr,$Ir,O7,kIr,d5e,SIr,RIr,BIr,Ht,V7,PIr,c5e,IIr,qIr,om,NIr,m5e,jIr,DIr,JY,GIr,OIr,VIr,_A,XIr,Hr,X7,zIr,f5e,QIr,WIr,Mn,HIr,g5e,UIr,JIr,h5e,YIr,KIr,u5e,ZIr,eqr,oqr,p5e,bA,_5e,rqr,tqr,YY,aqr,nqr,sqr,FA,Oqe,rm,vA,b5e,z7,lqr,F5e,iqr,Vqe,Tr,Q7,dqr,tm,cqr,KY,mqr,fqr,ZY,gqr,hqr,uqr,W7,pqr,v5e,_qr,bqr,Fqr,Ut,H7,vqr,T5e,Tqr,Mqr,am,Eqr,M5e,Cqr,wqr,eK,Aqr,yqr,Lqr,TA,xqr,Ur,U7,$qr,E5e,kqr,Sqr,En,Rqr,C5e,Bqr,Pqr,w5e,Iqr,qqr,A5e,Nqr,jqr,Dqr,J7,MA,y5e,Gqr,Oqr,oK,Vqr,Xqr,zqr,EA,L5e,Qqr,Wqr,rK,Hqr,Uqr,Jqr,CA,Xqe,nm,wA,x5e,Y7,Yqr,$5e,Kqr,zqe,Mr,K7,Zqr,sm,eNr,tK,oNr,rNr,aK,tNr,aNr,nNr,Z7,sNr,k5e,lNr,iNr,dNr,Jt,e9,cNr,S5e,mNr,fNr,lm,gNr,R5e,hNr,uNr,nK,pNr,_Nr,bNr,AA,FNr,Jr,o9,vNr,B5e,TNr,MNr,Cn,ENr,P5e,CNr,wNr,I5e,ANr,yNr,q5e,LNr,xNr,$Nr,N5e,yA,j5e,kNr,SNr,sK,RNr,BNr,PNr,LA,Qqe;return d=new ee({}),Ma=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Y0=new ee({}),K0=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),pm=new INr({props:{warning:!0,$$slots:{default:[fyt]},$$scope:{ctx:L}}}),Z0=new ee({}),ey=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L571"}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L594"}}),pg=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[gyt]},$$scope:{ctx:L}}}),ay=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L716"}}),ny=new ee({}),sy=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L378"}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L392"}}),Ug=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[hyt]},$$scope:{ctx:L}}}),cy=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L588"}}),my=new ee({}),fy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L178"}}),uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L192"}}),Eh=new INr({props:{$$slots:{default:[uyt]},$$scope:{ctx:L}}}),Ch=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[pyt]},$$scope:{ctx:L}}}),py=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L319"}}),_y=new ee({}),by=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L77"}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L91"}}),Oh=new INr({props:{$$slots:{default:[_yt]},$$scope:{ctx:L}}}),Vh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[byt]},$$scope:{ctx:L}}}),My=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L244"}}),Ey=new ee({}),Cy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L721"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Qh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[Fyt]},$$scope:{ctx:L}}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Ip=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[vyt]},$$scope:{ctx:L}}}),Ly=new ee({}),xy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L728"}}),ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Np=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Tyt]},$$scope:{ctx:L}}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),A_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Myt]},$$scope:{ctx:L}}}),Ry=new ee({}),By=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L743"}}),Iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),L_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Eyt]},$$scope:{ctx:L}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),fb=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Cyt]},$$scope:{ctx:L}}}),Ny=new ee({}),jy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L750"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),hb=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[wyt]},$$scope:{ctx:L}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Yb=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Ayt]},$$scope:{ctx:L}}}),Vy=new ee({}),Xy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L757"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Zb=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[yyt]},$$scope:{ctx:L}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),b2=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Lyt]},$$scope:{ctx:L}}}),Hy=new ee({}),Uy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L766"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),v2=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[xyt]},$$scope:{ctx:L}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),uF=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[$yt]},$$scope:{ctx:L}}}),Zy=new ee({}),eL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L800"}}),rL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_F=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[kyt]},$$scope:{ctx:L}}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),HF=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Syt]},$$scope:{ctx:L}}}),aL=new ee({}),nL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L807"}}),lL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),JF=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Ryt]},$$scope:{ctx:L}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),tv=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Byt]},$$scope:{ctx:L}}}),dL=new ee({}),cL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L793"}}),fL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),nv=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Pyt]},$$scope:{ctx:L}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Dv=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Iyt]},$$scope:{ctx:L}}}),hL=new ee({}),uL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L775"}}),_L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Ov=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[qyt]},$$scope:{ctx:L}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),x1=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Nyt]},$$scope:{ctx:L}}}),FL=new ee({}),vL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L782"}}),ML=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),k1=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[jyt]},$$scope:{ctx:L}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),B1=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Dyt]},$$scope:{ctx:L}}}),CL=new ee({}),wL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L816"}}),yL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),I1=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Gyt]},$$scope:{ctx:L}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),U1=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Oyt]},$$scope:{ctx:L}}}),xL=new ee({}),$L=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L855"}}),SL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Y1=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Vyt]},$$scope:{ctx:L}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),eT=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Xyt]},$$scope:{ctx:L}}}),BL=new ee({}),PL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L862"}}),qL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),rT=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[zyt]},$$scope:{ctx:L}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),fT=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Qyt]},$$scope:{ctx:L}}}),jL=new ee({}),DL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L885"}}),OL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),hT=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Wyt]},$$scope:{ctx:L}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),vT=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Hyt]},$$scope:{ctx:L}}}),XL=new ee({}),zL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L869"}}),WL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),MT=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Uyt]},$$scope:{ctx:L}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ST=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Jyt]},$$scope:{ctx:L}}}),UL=new ee({}),JL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L876"}}),KL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),BT=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Yyt]},$$scope:{ctx:L}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),NT=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Kyt]},$$scope:{ctx:L}}}),o8=new ee({}),r8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L894"}}),a8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),DT=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Zyt]},$$scope:{ctx:L}}}),n8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),QT=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[eLt]},$$scope:{ctx:L}}}),s8=new ee({}),l8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L901"}}),d8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),HT=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[oLt]},$$scope:{ctx:L}}}),c8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ZT=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[rLt]},$$scope:{ctx:L}}}),m8=new ee({}),f8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L848"}}),h8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),oM=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[tLt]},$$scope:{ctx:L}}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),nM=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[aLt]},$$scope:{ctx:L}}}),_8=new ee({}),b8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L823"}}),v8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),lM=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[nLt]},$$scope:{ctx:L}}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),cM=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[sLt]},$$scope:{ctx:L}}}),M8=new ee({}),E8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L830"}}),w8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),fM=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[lLt]},$$scope:{ctx:L}}}),A8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),bM=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[iLt]},$$scope:{ctx:L}}}),y8=new ee({}),L8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L839"}}),$8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),vM=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[dLt]},$$scope:{ctx:L}}}),k8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),EM=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[cLt]},$$scope:{ctx:L}}}),S8=new ee({}),R8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),P8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),wM=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[mLt]},$$scope:{ctx:L}}}),I8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),p4=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[fLt]},$$scope:{ctx:L}}}),q8=new ee({}),N8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L390"}}),D8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),b4=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[gLt]},$$scope:{ctx:L}}}),G8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),O4=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[hLt]},$$scope:{ctx:L}}}),O8=new ee({}),V8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),z8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),X4=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[uLt]},$$scope:{ctx:L}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),tE=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[pLt]},$$scope:{ctx:L}}}),W8=new ee({}),H8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),J8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),nE=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[_Lt]},$$scope:{ctx:L}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),dE=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[bLt]},$$scope:{ctx:L}}}),K8=new ee({}),Z8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),ox=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),mE=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[FLt]},$$scope:{ctx:L}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),SE=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[vLt]},$$scope:{ctx:L}}}),tx=new ee({}),ax=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),BE=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[TLt]},$$scope:{ctx:L}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),zE=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[MLt]},$$scope:{ctx:L}}}),ix=new ee({}),dx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),mx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),WE=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[ELt]},$$scope:{ctx:L}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),v5=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[CLt]},$$scope:{ctx:L}}}),gx=new ee({}),hx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),M5=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[wLt]},$$scope:{ctx:L}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),D5=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[ALt]},$$scope:{ctx:L}}}),bx=new ee({}),Fx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),O5=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[yLt]},$$scope:{ctx:L}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),z5=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[LLt]},$$scope:{ctx:L}}}),Cx=new ee({}),wx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),yx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),W5=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[xLt]},$$scope:{ctx:L}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),U5=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[$Lt]},$$scope:{ctx:L}}}),xx=new ee({}),$x=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Y5=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[kLt]},$$scope:{ctx:L}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),bC=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[SLt]},$$scope:{ctx:L}}}),Bx=new ee({}),Px=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L453"}}),qx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),vC=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[RLt]},$$scope:{ctx:L}}}),Nx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),GC=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[BLt]},$$scope:{ctx:L}}}),jx=new ee({}),Dx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),VC=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[PLt]},$$scope:{ctx:L}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),zC=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[ILt]},$$scope:{ctx:L}}}),Xx=new ee({}),zx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),WC=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[qLt]},$$scope:{ctx:L}}}),Hx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),UC=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[NLt]},$$scope:{ctx:L}}}),Ux=new ee({}),Jx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),Kx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),YC=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[jLt]},$$scope:{ctx:L}}}),Zx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),E3=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[DLt]},$$scope:{ctx:L}}}),e7=new ee({}),o7=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),t7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),w3=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[GLt]},$$scope:{ctx:L}}}),a7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),P3=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[OLt]},$$scope:{ctx:L}}}),n7=new ee({}),s7=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),i7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),q3=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[VLt]},$$scope:{ctx:L}}}),d7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),J3=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[XLt]},$$scope:{ctx:L}}}),c7=new ee({}),m7=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),g7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),K3=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[zLt]},$$scope:{ctx:L}}}),h7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),dw=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[QLt]},$$scope:{ctx:L}}}),u7=new ee({}),p7=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),b7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),mw=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[WLt]},$$scope:{ctx:L}}}),F7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Tw=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[HLt]},$$scope:{ctx:L}}}),v7=new ee({}),T7=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),E7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Ew=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[ULt]},$$scope:{ctx:L}}}),C7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Bw=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[JLt]},$$scope:{ctx:L}}}),w7=new ee({}),A7=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),L7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Iw=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[YLt]},$$scope:{ctx:L}}}),x7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Ww=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[KLt]},$$scope:{ctx:L}}}),$7=new ee({}),k7=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),R7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Uw=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[ZLt]},$$scope:{ctx:L}}}),B7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),aA=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[e8t]},$$scope:{ctx:L}}}),P7=new ee({}),I7=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),N7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),sA=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[o8t]},$$scope:{ctx:L}}}),j7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),uA=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[r8t]},$$scope:{ctx:L}}}),D7=new ee({}),G7=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),V7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_A=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[t8t]},$$scope:{ctx:L}}}),X7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),FA=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[a8t]},$$scope:{ctx:L}}}),z7=new ee({}),Q7=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),H7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),TA=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[n8t]},$$scope:{ctx:L}}}),U7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),CA=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[s8t]},$$scope:{ctx:L}}}),Y7=new ee({}),K7=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),e9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),AA=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[l8t]},$$scope:{ctx:L}}}),o9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),LA=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[i8t]},$$scope:{ctx:L}}}),{c(){g=a("meta"),F=l(),u=a("h1"),f=a("a"),p=a("span"),v(d.$$.fragment),h=l(),Mo=a("span"),li=o("Auto Classes"),mm=l(),et=a("p"),ii=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=a("code"),W0=o("from_pretrained()"),fm=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),ci=o("Instantiating one of "),An=a("a"),H0=o("AutoConfig"),yn=o(", "),Ln=a("a"),U0=o("AutoModel"),mi=o(`, and
`),xn=a("a"),J0=o("AutoTokenizer"),fi=o(" will directly create a class of the relevant architecture. For instance"),gm=l(),v(Ma.$$.fragment),ze=l(),Ae=a("p"),h$=o("will create a model that is an instance of "),gi=a("a"),u$=o("BertModel"),p$=o("."),Eo=l(),Ea=a("p"),_$=o("There is one class of "),hm=a("code"),b$=o("AutoModel"),eDe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),VPe=l(),hi=a("h2"),um=a("a"),eee=a("span"),v(Y0.$$.fragment),oDe=l(),oee=a("span"),rDe=o("Extending the Auto Classes"),XPe=l(),$n=a("p"),tDe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),ree=a("code"),aDe=o("NewModel"),nDe=o(", make sure you have a "),tee=a("code"),sDe=o("NewModelConfig"),lDe=o(` then you can add those to the auto
classes like this:`),zPe=l(),v(K0.$$.fragment),QPe=l(),F$=a("p"),iDe=o("You will then be able to use the auto classes like you would usually do!"),WPe=l(),v(pm.$$.fragment),HPe=l(),ui=a("h2"),_m=a("a"),aee=a("span"),v(Z0.$$.fragment),dDe=l(),nee=a("span"),cDe=o("AutoConfig"),UPe=l(),Co=a("div"),v(ey.$$.fragment),mDe=l(),oy=a("p"),fDe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),v$=a("a"),gDe=o("from_pretrained()"),hDe=o(" class method."),uDe=l(),ry=a("p"),pDe=o("This class cannot be instantiated directly using "),see=a("code"),_De=o("__init__()"),bDe=o(" (throws an error)."),FDe=l(),Er=a("div"),v(ty.$$.fragment),vDe=l(),lee=a("p"),TDe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),MDe=l(),pi=a("p"),EDe=o("The configuration class to instantiate is selected based on the "),iee=a("code"),CDe=o("model_type"),wDe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),dee=a("code"),ADe=o("pretrained_model_name_or_path"),yDe=o(":"),LDe=l(),A=a("ul"),bm=a("li"),cee=a("strong"),xDe=o("albert"),$De=o(" \u2014 "),T$=a("a"),kDe=o("AlbertConfig"),SDe=o(" (ALBERT model)"),RDe=l(),Fm=a("li"),mee=a("strong"),BDe=o("bart"),PDe=o(" \u2014 "),M$=a("a"),IDe=o("BartConfig"),qDe=o(" (BART model)"),NDe=l(),vm=a("li"),fee=a("strong"),jDe=o("beit"),DDe=o(" \u2014 "),E$=a("a"),GDe=o("BeitConfig"),ODe=o(" (BEiT model)"),VDe=l(),Tm=a("li"),gee=a("strong"),XDe=o("bert"),zDe=o(" \u2014 "),C$=a("a"),QDe=o("BertConfig"),WDe=o(" (BERT model)"),HDe=l(),Mm=a("li"),hee=a("strong"),UDe=o("bert-generation"),JDe=o(" \u2014 "),w$=a("a"),YDe=o("BertGenerationConfig"),KDe=o(" (Bert Generation model)"),ZDe=l(),Em=a("li"),uee=a("strong"),eGe=o("big_bird"),oGe=o(" \u2014 "),A$=a("a"),rGe=o("BigBirdConfig"),tGe=o(" (BigBird model)"),aGe=l(),Cm=a("li"),pee=a("strong"),nGe=o("bigbird_pegasus"),sGe=o(" \u2014 "),y$=a("a"),lGe=o("BigBirdPegasusConfig"),iGe=o(" (BigBirdPegasus model)"),dGe=l(),wm=a("li"),_ee=a("strong"),cGe=o("blenderbot"),mGe=o(" \u2014 "),L$=a("a"),fGe=o("BlenderbotConfig"),gGe=o(" (Blenderbot model)"),hGe=l(),Am=a("li"),bee=a("strong"),uGe=o("blenderbot-small"),pGe=o(" \u2014 "),x$=a("a"),_Ge=o("BlenderbotSmallConfig"),bGe=o(" (BlenderbotSmall model)"),FGe=l(),ym=a("li"),Fee=a("strong"),vGe=o("camembert"),TGe=o(" \u2014 "),$$=a("a"),MGe=o("CamembertConfig"),EGe=o(" (CamemBERT model)"),CGe=l(),Lm=a("li"),vee=a("strong"),wGe=o("canine"),AGe=o(" \u2014 "),k$=a("a"),yGe=o("CanineConfig"),LGe=o(" (Canine model)"),xGe=l(),xm=a("li"),Tee=a("strong"),$Ge=o("clip"),kGe=o(" \u2014 "),S$=a("a"),SGe=o("CLIPConfig"),RGe=o(" (CLIP model)"),BGe=l(),$m=a("li"),Mee=a("strong"),PGe=o("convbert"),IGe=o(" \u2014 "),R$=a("a"),qGe=o("ConvBertConfig"),NGe=o(" (ConvBERT model)"),jGe=l(),km=a("li"),Eee=a("strong"),DGe=o("convnext"),GGe=o(" \u2014 "),B$=a("a"),OGe=o("ConvNextConfig"),VGe=o(" (ConvNext model)"),XGe=l(),Sm=a("li"),Cee=a("strong"),zGe=o("ctrl"),QGe=o(" \u2014 "),P$=a("a"),WGe=o("CTRLConfig"),HGe=o(" (CTRL model)"),UGe=l(),Rm=a("li"),wee=a("strong"),JGe=o("data2vec-audio"),YGe=o(" \u2014 "),I$=a("a"),KGe=o("Data2VecAudioConfig"),ZGe=o(" (Data2VecAudio model)"),eOe=l(),Bm=a("li"),Aee=a("strong"),oOe=o("data2vec-text"),rOe=o(" \u2014 "),q$=a("a"),tOe=o("Data2VecTextConfig"),aOe=o(" (Data2VecText model)"),nOe=l(),Pm=a("li"),yee=a("strong"),sOe=o("data2vec-vision"),lOe=o(" \u2014 "),N$=a("a"),iOe=o("Data2VecVisionConfig"),dOe=o(" (Data2VecVision model)"),cOe=l(),Im=a("li"),Lee=a("strong"),mOe=o("deberta"),fOe=o(" \u2014 "),j$=a("a"),gOe=o("DebertaConfig"),hOe=o(" (DeBERTa model)"),uOe=l(),qm=a("li"),xee=a("strong"),pOe=o("deberta-v2"),_Oe=o(" \u2014 "),D$=a("a"),bOe=o("DebertaV2Config"),FOe=o(" (DeBERTa-v2 model)"),vOe=l(),Nm=a("li"),$ee=a("strong"),TOe=o("decision_transformer"),MOe=o(" \u2014 "),G$=a("a"),EOe=o("DecisionTransformerConfig"),COe=o(" (Decision Transformer model)"),wOe=l(),jm=a("li"),kee=a("strong"),AOe=o("deit"),yOe=o(" \u2014 "),O$=a("a"),LOe=o("DeiTConfig"),xOe=o(" (DeiT model)"),$Oe=l(),Dm=a("li"),See=a("strong"),kOe=o("detr"),SOe=o(" \u2014 "),V$=a("a"),ROe=o("DetrConfig"),BOe=o(" (DETR model)"),POe=l(),Gm=a("li"),Ree=a("strong"),IOe=o("distilbert"),qOe=o(" \u2014 "),X$=a("a"),NOe=o("DistilBertConfig"),jOe=o(" (DistilBERT model)"),DOe=l(),Om=a("li"),Bee=a("strong"),GOe=o("dpr"),OOe=o(" \u2014 "),z$=a("a"),VOe=o("DPRConfig"),XOe=o(" (DPR model)"),zOe=l(),Vm=a("li"),Pee=a("strong"),QOe=o("dpt"),WOe=o(" \u2014 "),Q$=a("a"),HOe=o("DPTConfig"),UOe=o(" (DPT model)"),JOe=l(),Xm=a("li"),Iee=a("strong"),YOe=o("electra"),KOe=o(" \u2014 "),W$=a("a"),ZOe=o("ElectraConfig"),eVe=o(" (ELECTRA model)"),oVe=l(),zm=a("li"),qee=a("strong"),rVe=o("encoder-decoder"),tVe=o(" \u2014 "),H$=a("a"),aVe=o("EncoderDecoderConfig"),nVe=o(" (Encoder decoder model)"),sVe=l(),Qm=a("li"),Nee=a("strong"),lVe=o("flaubert"),iVe=o(" \u2014 "),U$=a("a"),dVe=o("FlaubertConfig"),cVe=o(" (FlauBERT model)"),mVe=l(),Wm=a("li"),jee=a("strong"),fVe=o("flava"),gVe=o(" \u2014 "),J$=a("a"),hVe=o("FlavaConfig"),uVe=o(" (Flava model)"),pVe=l(),Hm=a("li"),Dee=a("strong"),_Ve=o("fnet"),bVe=o(" \u2014 "),Y$=a("a"),FVe=o("FNetConfig"),vVe=o(" (FNet model)"),TVe=l(),Um=a("li"),Gee=a("strong"),MVe=o("fsmt"),EVe=o(" \u2014 "),K$=a("a"),CVe=o("FSMTConfig"),wVe=o(" (FairSeq Machine-Translation model)"),AVe=l(),Jm=a("li"),Oee=a("strong"),yVe=o("funnel"),LVe=o(" \u2014 "),Z$=a("a"),xVe=o("FunnelConfig"),$Ve=o(" (Funnel Transformer model)"),kVe=l(),Ym=a("li"),Vee=a("strong"),SVe=o("glpn"),RVe=o(" \u2014 "),ek=a("a"),BVe=o("GLPNConfig"),PVe=o(" (GLPN model)"),IVe=l(),Km=a("li"),Xee=a("strong"),qVe=o("gpt2"),NVe=o(" \u2014 "),ok=a("a"),jVe=o("GPT2Config"),DVe=o(" (OpenAI GPT-2 model)"),GVe=l(),Zm=a("li"),zee=a("strong"),OVe=o("gpt_neo"),VVe=o(" \u2014 "),rk=a("a"),XVe=o("GPTNeoConfig"),zVe=o(" (GPT Neo model)"),QVe=l(),ef=a("li"),Qee=a("strong"),WVe=o("gptj"),HVe=o(" \u2014 "),tk=a("a"),UVe=o("GPTJConfig"),JVe=o(" (GPT-J model)"),YVe=l(),of=a("li"),Wee=a("strong"),KVe=o("hubert"),ZVe=o(" \u2014 "),ak=a("a"),eXe=o("HubertConfig"),oXe=o(" (Hubert model)"),rXe=l(),rf=a("li"),Hee=a("strong"),tXe=o("ibert"),aXe=o(" \u2014 "),nk=a("a"),nXe=o("IBertConfig"),sXe=o(" (I-BERT model)"),lXe=l(),tf=a("li"),Uee=a("strong"),iXe=o("imagegpt"),dXe=o(" \u2014 "),sk=a("a"),cXe=o("ImageGPTConfig"),mXe=o(" (ImageGPT model)"),fXe=l(),af=a("li"),Jee=a("strong"),gXe=o("layoutlm"),hXe=o(" \u2014 "),lk=a("a"),uXe=o("LayoutLMConfig"),pXe=o(" (LayoutLM model)"),_Xe=l(),nf=a("li"),Yee=a("strong"),bXe=o("layoutlmv2"),FXe=o(" \u2014 "),ik=a("a"),vXe=o("LayoutLMv2Config"),TXe=o(" (LayoutLMv2 model)"),MXe=l(),sf=a("li"),Kee=a("strong"),EXe=o("led"),CXe=o(" \u2014 "),dk=a("a"),wXe=o("LEDConfig"),AXe=o(" (LED model)"),yXe=l(),lf=a("li"),Zee=a("strong"),LXe=o("longformer"),xXe=o(" \u2014 "),ck=a("a"),$Xe=o("LongformerConfig"),kXe=o(" (Longformer model)"),SXe=l(),df=a("li"),eoe=a("strong"),RXe=o("luke"),BXe=o(" \u2014 "),mk=a("a"),PXe=o("LukeConfig"),IXe=o(" (LUKE model)"),qXe=l(),cf=a("li"),ooe=a("strong"),NXe=o("lxmert"),jXe=o(" \u2014 "),fk=a("a"),DXe=o("LxmertConfig"),GXe=o(" (LXMERT model)"),OXe=l(),mf=a("li"),roe=a("strong"),VXe=o("m2m_100"),XXe=o(" \u2014 "),gk=a("a"),zXe=o("M2M100Config"),QXe=o(" (M2M100 model)"),WXe=l(),ff=a("li"),toe=a("strong"),HXe=o("marian"),UXe=o(" \u2014 "),hk=a("a"),JXe=o("MarianConfig"),YXe=o(" (Marian model)"),KXe=l(),gf=a("li"),aoe=a("strong"),ZXe=o("maskformer"),eze=o(" \u2014 "),uk=a("a"),oze=o("MaskFormerConfig"),rze=o(" (MaskFormer model)"),tze=l(),hf=a("li"),noe=a("strong"),aze=o("mbart"),nze=o(" \u2014 "),pk=a("a"),sze=o("MBartConfig"),lze=o(" (mBART model)"),ize=l(),uf=a("li"),soe=a("strong"),dze=o("megatron-bert"),cze=o(" \u2014 "),_k=a("a"),mze=o("MegatronBertConfig"),fze=o(" (MegatronBert model)"),gze=l(),pf=a("li"),loe=a("strong"),hze=o("mobilebert"),uze=o(" \u2014 "),bk=a("a"),pze=o("MobileBertConfig"),_ze=o(" (MobileBERT model)"),bze=l(),_f=a("li"),ioe=a("strong"),Fze=o("mpnet"),vze=o(" \u2014 "),Fk=a("a"),Tze=o("MPNetConfig"),Mze=o(" (MPNet model)"),Eze=l(),bf=a("li"),doe=a("strong"),Cze=o("mt5"),wze=o(" \u2014 "),vk=a("a"),Aze=o("MT5Config"),yze=o(" (mT5 model)"),Lze=l(),Ff=a("li"),coe=a("strong"),xze=o("nystromformer"),$ze=o(" \u2014 "),Tk=a("a"),kze=o("NystromformerConfig"),Sze=o(" (Nystromformer model)"),Rze=l(),vf=a("li"),moe=a("strong"),Bze=o("openai-gpt"),Pze=o(" \u2014 "),Mk=a("a"),Ize=o("OpenAIGPTConfig"),qze=o(" (OpenAI GPT model)"),Nze=l(),Tf=a("li"),foe=a("strong"),jze=o("opt"),Dze=o(" \u2014 "),Ek=a("a"),Gze=o("OPTConfig"),Oze=o(" (OPT model)"),Vze=l(),Mf=a("li"),goe=a("strong"),Xze=o("pegasus"),zze=o(" \u2014 "),Ck=a("a"),Qze=o("PegasusConfig"),Wze=o(" (Pegasus model)"),Hze=l(),Ef=a("li"),hoe=a("strong"),Uze=o("perceiver"),Jze=o(" \u2014 "),wk=a("a"),Yze=o("PerceiverConfig"),Kze=o(" (Perceiver model)"),Zze=l(),Cf=a("li"),uoe=a("strong"),eQe=o("plbart"),oQe=o(" \u2014 "),Ak=a("a"),rQe=o("PLBartConfig"),tQe=o(" (PLBart model)"),aQe=l(),wf=a("li"),poe=a("strong"),nQe=o("poolformer"),sQe=o(" \u2014 "),yk=a("a"),lQe=o("PoolFormerConfig"),iQe=o(" (PoolFormer model)"),dQe=l(),Af=a("li"),_oe=a("strong"),cQe=o("prophetnet"),mQe=o(" \u2014 "),Lk=a("a"),fQe=o("ProphetNetConfig"),gQe=o(" (ProphetNet model)"),hQe=l(),yf=a("li"),boe=a("strong"),uQe=o("qdqbert"),pQe=o(" \u2014 "),xk=a("a"),_Qe=o("QDQBertConfig"),bQe=o(" (QDQBert model)"),FQe=l(),Lf=a("li"),Foe=a("strong"),vQe=o("rag"),TQe=o(" \u2014 "),$k=a("a"),MQe=o("RagConfig"),EQe=o(" (RAG model)"),CQe=l(),xf=a("li"),voe=a("strong"),wQe=o("realm"),AQe=o(" \u2014 "),kk=a("a"),yQe=o("RealmConfig"),LQe=o(" (Realm model)"),xQe=l(),$f=a("li"),Toe=a("strong"),$Qe=o("reformer"),kQe=o(" \u2014 "),Sk=a("a"),SQe=o("ReformerConfig"),RQe=o(" (Reformer model)"),BQe=l(),kf=a("li"),Moe=a("strong"),PQe=o("regnet"),IQe=o(" \u2014 "),Rk=a("a"),qQe=o("RegNetConfig"),NQe=o(" (RegNet model)"),jQe=l(),Sf=a("li"),Eoe=a("strong"),DQe=o("rembert"),GQe=o(" \u2014 "),Bk=a("a"),OQe=o("RemBertConfig"),VQe=o(" (RemBERT model)"),XQe=l(),Rf=a("li"),Coe=a("strong"),zQe=o("resnet"),QQe=o(" \u2014 "),Pk=a("a"),WQe=o("ResNetConfig"),HQe=o(" (ResNet model)"),UQe=l(),Bf=a("li"),woe=a("strong"),JQe=o("retribert"),YQe=o(" \u2014 "),Ik=a("a"),KQe=o("RetriBertConfig"),ZQe=o(" (RetriBERT model)"),eWe=l(),Pf=a("li"),Aoe=a("strong"),oWe=o("roberta"),rWe=o(" \u2014 "),qk=a("a"),tWe=o("RobertaConfig"),aWe=o(" (RoBERTa model)"),nWe=l(),If=a("li"),yoe=a("strong"),sWe=o("roformer"),lWe=o(" \u2014 "),Nk=a("a"),iWe=o("RoFormerConfig"),dWe=o(" (RoFormer model)"),cWe=l(),qf=a("li"),Loe=a("strong"),mWe=o("segformer"),fWe=o(" \u2014 "),jk=a("a"),gWe=o("SegformerConfig"),hWe=o(" (SegFormer model)"),uWe=l(),Nf=a("li"),xoe=a("strong"),pWe=o("sew"),_We=o(" \u2014 "),Dk=a("a"),bWe=o("SEWConfig"),FWe=o(" (SEW model)"),vWe=l(),jf=a("li"),$oe=a("strong"),TWe=o("sew-d"),MWe=o(" \u2014 "),Gk=a("a"),EWe=o("SEWDConfig"),CWe=o(" (SEW-D model)"),wWe=l(),Df=a("li"),koe=a("strong"),AWe=o("speech-encoder-decoder"),yWe=o(" \u2014 "),Ok=a("a"),LWe=o("SpeechEncoderDecoderConfig"),xWe=o(" (Speech Encoder decoder model)"),$We=l(),Gf=a("li"),Soe=a("strong"),kWe=o("speech_to_text"),SWe=o(" \u2014 "),Vk=a("a"),RWe=o("Speech2TextConfig"),BWe=o(" (Speech2Text model)"),PWe=l(),Of=a("li"),Roe=a("strong"),IWe=o("speech_to_text_2"),qWe=o(" \u2014 "),Xk=a("a"),NWe=o("Speech2Text2Config"),jWe=o(" (Speech2Text2 model)"),DWe=l(),Vf=a("li"),Boe=a("strong"),GWe=o("splinter"),OWe=o(" \u2014 "),zk=a("a"),VWe=o("SplinterConfig"),XWe=o(" (Splinter model)"),zWe=l(),Xf=a("li"),Poe=a("strong"),QWe=o("squeezebert"),WWe=o(" \u2014 "),Qk=a("a"),HWe=o("SqueezeBertConfig"),UWe=o(" (SqueezeBERT model)"),JWe=l(),zf=a("li"),Ioe=a("strong"),YWe=o("swin"),KWe=o(" \u2014 "),Wk=a("a"),ZWe=o("SwinConfig"),eHe=o(" (Swin model)"),oHe=l(),Qf=a("li"),qoe=a("strong"),rHe=o("t5"),tHe=o(" \u2014 "),Hk=a("a"),aHe=o("T5Config"),nHe=o(" (T5 model)"),sHe=l(),Wf=a("li"),Noe=a("strong"),lHe=o("tapas"),iHe=o(" \u2014 "),Uk=a("a"),dHe=o("TapasConfig"),cHe=o(" (TAPAS model)"),mHe=l(),Hf=a("li"),joe=a("strong"),fHe=o("tapex"),gHe=o(" \u2014 "),Jk=a("a"),hHe=o("BartConfig"),uHe=o(" (TAPEX model)"),pHe=l(),Uf=a("li"),Doe=a("strong"),_He=o("transfo-xl"),bHe=o(" \u2014 "),Yk=a("a"),FHe=o("TransfoXLConfig"),vHe=o(" (Transformer-XL model)"),THe=l(),Jf=a("li"),Goe=a("strong"),MHe=o("trocr"),EHe=o(" \u2014 "),Kk=a("a"),CHe=o("TrOCRConfig"),wHe=o(" (TrOCR model)"),AHe=l(),Yf=a("li"),Ooe=a("strong"),yHe=o("unispeech"),LHe=o(" \u2014 "),Zk=a("a"),xHe=o("UniSpeechConfig"),$He=o(" (UniSpeech model)"),kHe=l(),Kf=a("li"),Voe=a("strong"),SHe=o("unispeech-sat"),RHe=o(" \u2014 "),eS=a("a"),BHe=o("UniSpeechSatConfig"),PHe=o(" (UniSpeechSat model)"),IHe=l(),Zf=a("li"),Xoe=a("strong"),qHe=o("van"),NHe=o(" \u2014 "),oS=a("a"),jHe=o("VanConfig"),DHe=o(" (VAN model)"),GHe=l(),eg=a("li"),zoe=a("strong"),OHe=o("vilt"),VHe=o(" \u2014 "),rS=a("a"),XHe=o("ViltConfig"),zHe=o(" (ViLT model)"),QHe=l(),og=a("li"),Qoe=a("strong"),WHe=o("vision-encoder-decoder"),HHe=o(" \u2014 "),tS=a("a"),UHe=o("VisionEncoderDecoderConfig"),JHe=o(" (Vision Encoder decoder model)"),YHe=l(),rg=a("li"),Woe=a("strong"),KHe=o("vision-text-dual-encoder"),ZHe=o(" \u2014 "),aS=a("a"),eUe=o("VisionTextDualEncoderConfig"),oUe=o(" (VisionTextDualEncoder model)"),rUe=l(),tg=a("li"),Hoe=a("strong"),tUe=o("visual_bert"),aUe=o(" \u2014 "),nS=a("a"),nUe=o("VisualBertConfig"),sUe=o(" (VisualBert model)"),lUe=l(),ag=a("li"),Uoe=a("strong"),iUe=o("vit"),dUe=o(" \u2014 "),sS=a("a"),cUe=o("ViTConfig"),mUe=o(" (ViT model)"),fUe=l(),ng=a("li"),Joe=a("strong"),gUe=o("vit_mae"),hUe=o(" \u2014 "),lS=a("a"),uUe=o("ViTMAEConfig"),pUe=o(" (ViTMAE model)"),_Ue=l(),sg=a("li"),Yoe=a("strong"),bUe=o("wav2vec2"),FUe=o(" \u2014 "),iS=a("a"),vUe=o("Wav2Vec2Config"),TUe=o(" (Wav2Vec2 model)"),MUe=l(),lg=a("li"),Koe=a("strong"),EUe=o("wavlm"),CUe=o(" \u2014 "),dS=a("a"),wUe=o("WavLMConfig"),AUe=o(" (WavLM model)"),yUe=l(),ig=a("li"),Zoe=a("strong"),LUe=o("xglm"),xUe=o(" \u2014 "),cS=a("a"),$Ue=o("XGLMConfig"),kUe=o(" (XGLM model)"),SUe=l(),dg=a("li"),ere=a("strong"),RUe=o("xlm"),BUe=o(" \u2014 "),mS=a("a"),PUe=o("XLMConfig"),IUe=o(" (XLM model)"),qUe=l(),cg=a("li"),ore=a("strong"),NUe=o("xlm-prophetnet"),jUe=o(" \u2014 "),fS=a("a"),DUe=o("XLMProphetNetConfig"),GUe=o(" (XLMProphetNet model)"),OUe=l(),mg=a("li"),rre=a("strong"),VUe=o("xlm-roberta"),XUe=o(" \u2014 "),gS=a("a"),zUe=o("XLMRobertaConfig"),QUe=o(" (XLM-RoBERTa model)"),WUe=l(),fg=a("li"),tre=a("strong"),HUe=o("xlm-roberta-xl"),UUe=o(" \u2014 "),hS=a("a"),JUe=o("XLMRobertaXLConfig"),YUe=o(" (XLM-RoBERTa-XL model)"),KUe=l(),gg=a("li"),are=a("strong"),ZUe=o("xlnet"),eJe=o(" \u2014 "),uS=a("a"),oJe=o("XLNetConfig"),rJe=o(" (XLNet model)"),tJe=l(),hg=a("li"),nre=a("strong"),aJe=o("yolos"),nJe=o(" \u2014 "),pS=a("a"),sJe=o("YolosConfig"),lJe=o(" (YOLOS model)"),iJe=l(),ug=a("li"),sre=a("strong"),dJe=o("yoso"),cJe=o(" \u2014 "),_S=a("a"),mJe=o("YosoConfig"),fJe=o(" (YOSO model)"),gJe=l(),v(pg.$$.fragment),hJe=l(),_g=a("div"),v(ay.$$.fragment),uJe=l(),lre=a("p"),pJe=o("Register a new configuration for this class."),JPe=l(),_i=a("h2"),bg=a("a"),ire=a("span"),v(ny.$$.fragment),_Je=l(),dre=a("span"),bJe=o("AutoTokenizer"),YPe=l(),wo=a("div"),v(sy.$$.fragment),FJe=l(),ly=a("p"),vJe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),bS=a("a"),TJe=o("AutoTokenizer.from_pretrained()"),MJe=o(" class method."),EJe=l(),iy=a("p"),CJe=o("This class cannot be instantiated directly using "),cre=a("code"),wJe=o("__init__()"),AJe=o(" (throws an error)."),yJe=l(),Cr=a("div"),v(dy.$$.fragment),LJe=l(),mre=a("p"),xJe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),$Je=l(),Ca=a("p"),kJe=o("The tokenizer class to instantiate is selected based on the "),fre=a("code"),SJe=o("model_type"),RJe=o(` property of the config object (either
passed as an argument or loaded from `),gre=a("code"),BJe=o("pretrained_model_name_or_path"),PJe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hre=a("code"),IJe=o("pretrained_model_name_or_path"),qJe=o(":"),NJe=l(),k=a("ul"),kn=a("li"),ure=a("strong"),jJe=o("albert"),DJe=o(" \u2014 "),FS=a("a"),GJe=o("AlbertTokenizer"),OJe=o(" or "),vS=a("a"),VJe=o("AlbertTokenizerFast"),XJe=o(" (ALBERT model)"),zJe=l(),Sn=a("li"),pre=a("strong"),QJe=o("bart"),WJe=o(" \u2014 "),TS=a("a"),HJe=o("BartTokenizer"),UJe=o(" or "),MS=a("a"),JJe=o("BartTokenizerFast"),YJe=o(" (BART model)"),KJe=l(),Rn=a("li"),_re=a("strong"),ZJe=o("barthez"),eYe=o(" \u2014 "),ES=a("a"),oYe=o("BarthezTokenizer"),rYe=o(" or "),CS=a("a"),tYe=o("BarthezTokenizerFast"),aYe=o(" (BARThez model)"),nYe=l(),Fg=a("li"),bre=a("strong"),sYe=o("bartpho"),lYe=o(" \u2014 "),wS=a("a"),iYe=o("BartphoTokenizer"),dYe=o(" (BARTpho model)"),cYe=l(),Bn=a("li"),Fre=a("strong"),mYe=o("bert"),fYe=o(" \u2014 "),AS=a("a"),gYe=o("BertTokenizer"),hYe=o(" or "),yS=a("a"),uYe=o("BertTokenizerFast"),pYe=o(" (BERT model)"),_Ye=l(),vg=a("li"),vre=a("strong"),bYe=o("bert-generation"),FYe=o(" \u2014 "),LS=a("a"),vYe=o("BertGenerationTokenizer"),TYe=o(" (Bert Generation model)"),MYe=l(),Tg=a("li"),Tre=a("strong"),EYe=o("bert-japanese"),CYe=o(" \u2014 "),xS=a("a"),wYe=o("BertJapaneseTokenizer"),AYe=o(" (BertJapanese model)"),yYe=l(),Mg=a("li"),Mre=a("strong"),LYe=o("bertweet"),xYe=o(" \u2014 "),$S=a("a"),$Ye=o("BertweetTokenizer"),kYe=o(" (Bertweet model)"),SYe=l(),Pn=a("li"),Ere=a("strong"),RYe=o("big_bird"),BYe=o(" \u2014 "),kS=a("a"),PYe=o("BigBirdTokenizer"),IYe=o(" or "),SS=a("a"),qYe=o("BigBirdTokenizerFast"),NYe=o(" (BigBird model)"),jYe=l(),In=a("li"),Cre=a("strong"),DYe=o("bigbird_pegasus"),GYe=o(" \u2014 "),RS=a("a"),OYe=o("PegasusTokenizer"),VYe=o(" or "),BS=a("a"),XYe=o("PegasusTokenizerFast"),zYe=o(" (BigBirdPegasus model)"),QYe=l(),qn=a("li"),wre=a("strong"),WYe=o("blenderbot"),HYe=o(" \u2014 "),PS=a("a"),UYe=o("BlenderbotTokenizer"),JYe=o(" or "),IS=a("a"),YYe=o("BlenderbotTokenizerFast"),KYe=o(" (Blenderbot model)"),ZYe=l(),Eg=a("li"),Are=a("strong"),eKe=o("blenderbot-small"),oKe=o(" \u2014 "),qS=a("a"),rKe=o("BlenderbotSmallTokenizer"),tKe=o(" (BlenderbotSmall model)"),aKe=l(),Cg=a("li"),yre=a("strong"),nKe=o("byt5"),sKe=o(" \u2014 "),NS=a("a"),lKe=o("ByT5Tokenizer"),iKe=o(" (ByT5 model)"),dKe=l(),Nn=a("li"),Lre=a("strong"),cKe=o("camembert"),mKe=o(" \u2014 "),jS=a("a"),fKe=o("CamembertTokenizer"),gKe=o(" or "),DS=a("a"),hKe=o("CamembertTokenizerFast"),uKe=o(" (CamemBERT model)"),pKe=l(),wg=a("li"),xre=a("strong"),_Ke=o("canine"),bKe=o(" \u2014 "),GS=a("a"),FKe=o("CanineTokenizer"),vKe=o(" (Canine model)"),TKe=l(),jn=a("li"),$re=a("strong"),MKe=o("clip"),EKe=o(" \u2014 "),OS=a("a"),CKe=o("CLIPTokenizer"),wKe=o(" or "),VS=a("a"),AKe=o("CLIPTokenizerFast"),yKe=o(" (CLIP model)"),LKe=l(),Dn=a("li"),kre=a("strong"),xKe=o("convbert"),$Ke=o(" \u2014 "),XS=a("a"),kKe=o("ConvBertTokenizer"),SKe=o(" or "),zS=a("a"),RKe=o("ConvBertTokenizerFast"),BKe=o(" (ConvBERT model)"),PKe=l(),Gn=a("li"),Sre=a("strong"),IKe=o("cpm"),qKe=o(" \u2014 "),QS=a("a"),NKe=o("CpmTokenizer"),jKe=o(" or "),WS=a("a"),DKe=o("CpmTokenizerFast"),GKe=o(" (CPM model)"),OKe=l(),Ag=a("li"),Rre=a("strong"),VKe=o("ctrl"),XKe=o(" \u2014 "),HS=a("a"),zKe=o("CTRLTokenizer"),QKe=o(" (CTRL model)"),WKe=l(),On=a("li"),Bre=a("strong"),HKe=o("data2vec-text"),UKe=o(" \u2014 "),US=a("a"),JKe=o("RobertaTokenizer"),YKe=o(" or "),JS=a("a"),KKe=o("RobertaTokenizerFast"),ZKe=o(" (Data2VecText model)"),eZe=l(),Vn=a("li"),Pre=a("strong"),oZe=o("deberta"),rZe=o(" \u2014 "),YS=a("a"),tZe=o("DebertaTokenizer"),aZe=o(" or "),KS=a("a"),nZe=o("DebertaTokenizerFast"),sZe=o(" (DeBERTa model)"),lZe=l(),Xn=a("li"),Ire=a("strong"),iZe=o("deberta-v2"),dZe=o(" \u2014 "),ZS=a("a"),cZe=o("DebertaV2Tokenizer"),mZe=o(" or "),eR=a("a"),fZe=o("DebertaV2TokenizerFast"),gZe=o(" (DeBERTa-v2 model)"),hZe=l(),zn=a("li"),qre=a("strong"),uZe=o("distilbert"),pZe=o(" \u2014 "),oR=a("a"),_Ze=o("DistilBertTokenizer"),bZe=o(" or "),rR=a("a"),FZe=o("DistilBertTokenizerFast"),vZe=o(" (DistilBERT model)"),TZe=l(),Qn=a("li"),Nre=a("strong"),MZe=o("dpr"),EZe=o(" \u2014 "),tR=a("a"),CZe=o("DPRQuestionEncoderTokenizer"),wZe=o(" or "),aR=a("a"),AZe=o("DPRQuestionEncoderTokenizerFast"),yZe=o(" (DPR model)"),LZe=l(),Wn=a("li"),jre=a("strong"),xZe=o("electra"),$Ze=o(" \u2014 "),nR=a("a"),kZe=o("ElectraTokenizer"),SZe=o(" or "),sR=a("a"),RZe=o("ElectraTokenizerFast"),BZe=o(" (ELECTRA model)"),PZe=l(),yg=a("li"),Dre=a("strong"),IZe=o("flaubert"),qZe=o(" \u2014 "),lR=a("a"),NZe=o("FlaubertTokenizer"),jZe=o(" (FlauBERT model)"),DZe=l(),Hn=a("li"),Gre=a("strong"),GZe=o("fnet"),OZe=o(" \u2014 "),iR=a("a"),VZe=o("FNetTokenizer"),XZe=o(" or "),dR=a("a"),zZe=o("FNetTokenizerFast"),QZe=o(" (FNet model)"),WZe=l(),Lg=a("li"),Ore=a("strong"),HZe=o("fsmt"),UZe=o(" \u2014 "),cR=a("a"),JZe=o("FSMTTokenizer"),YZe=o(" (FairSeq Machine-Translation model)"),KZe=l(),Un=a("li"),Vre=a("strong"),ZZe=o("funnel"),eeo=o(" \u2014 "),mR=a("a"),oeo=o("FunnelTokenizer"),reo=o(" or "),fR=a("a"),teo=o("FunnelTokenizerFast"),aeo=o(" (Funnel Transformer model)"),neo=l(),Jn=a("li"),Xre=a("strong"),seo=o("gpt2"),leo=o(" \u2014 "),gR=a("a"),ieo=o("GPT2Tokenizer"),deo=o(" or "),hR=a("a"),ceo=o("GPT2TokenizerFast"),meo=o(" (OpenAI GPT-2 model)"),feo=l(),Yn=a("li"),zre=a("strong"),geo=o("gpt_neo"),heo=o(" \u2014 "),uR=a("a"),ueo=o("GPT2Tokenizer"),peo=o(" or "),pR=a("a"),_eo=o("GPT2TokenizerFast"),beo=o(" (GPT Neo model)"),Feo=l(),Kn=a("li"),Qre=a("strong"),veo=o("gptj"),Teo=o(" \u2014 "),_R=a("a"),Meo=o("GPT2Tokenizer"),Eeo=o(" or "),bR=a("a"),Ceo=o("GPT2TokenizerFast"),weo=o(" (GPT-J model)"),Aeo=l(),Zn=a("li"),Wre=a("strong"),yeo=o("herbert"),Leo=o(" \u2014 "),FR=a("a"),xeo=o("HerbertTokenizer"),$eo=o(" or "),vR=a("a"),keo=o("HerbertTokenizerFast"),Seo=o(" (HerBERT model)"),Reo=l(),xg=a("li"),Hre=a("strong"),Beo=o("hubert"),Peo=o(" \u2014 "),TR=a("a"),Ieo=o("Wav2Vec2CTCTokenizer"),qeo=o(" (Hubert model)"),Neo=l(),es=a("li"),Ure=a("strong"),jeo=o("ibert"),Deo=o(" \u2014 "),MR=a("a"),Geo=o("RobertaTokenizer"),Oeo=o(" or "),ER=a("a"),Veo=o("RobertaTokenizerFast"),Xeo=o(" (I-BERT model)"),zeo=l(),os=a("li"),Jre=a("strong"),Qeo=o("layoutlm"),Weo=o(" \u2014 "),CR=a("a"),Heo=o("LayoutLMTokenizer"),Ueo=o(" or "),wR=a("a"),Jeo=o("LayoutLMTokenizerFast"),Yeo=o(" (LayoutLM model)"),Keo=l(),rs=a("li"),Yre=a("strong"),Zeo=o("layoutlmv2"),eoo=o(" \u2014 "),AR=a("a"),ooo=o("LayoutLMv2Tokenizer"),roo=o(" or "),yR=a("a"),too=o("LayoutLMv2TokenizerFast"),aoo=o(" (LayoutLMv2 model)"),noo=l(),ts=a("li"),Kre=a("strong"),soo=o("layoutxlm"),loo=o(" \u2014 "),LR=a("a"),ioo=o("LayoutXLMTokenizer"),doo=o(" or "),xR=a("a"),coo=o("LayoutXLMTokenizerFast"),moo=o(" (LayoutXLM model)"),foo=l(),as=a("li"),Zre=a("strong"),goo=o("led"),hoo=o(" \u2014 "),$R=a("a"),uoo=o("LEDTokenizer"),poo=o(" or "),kR=a("a"),_oo=o("LEDTokenizerFast"),boo=o(" (LED model)"),Foo=l(),ns=a("li"),ete=a("strong"),voo=o("longformer"),Too=o(" \u2014 "),SR=a("a"),Moo=o("LongformerTokenizer"),Eoo=o(" or "),RR=a("a"),Coo=o("LongformerTokenizerFast"),woo=o(" (Longformer model)"),Aoo=l(),$g=a("li"),ote=a("strong"),yoo=o("luke"),Loo=o(" \u2014 "),BR=a("a"),xoo=o("LukeTokenizer"),$oo=o(" (LUKE model)"),koo=l(),ss=a("li"),rte=a("strong"),Soo=o("lxmert"),Roo=o(" \u2014 "),PR=a("a"),Boo=o("LxmertTokenizer"),Poo=o(" or "),IR=a("a"),Ioo=o("LxmertTokenizerFast"),qoo=o(" (LXMERT model)"),Noo=l(),kg=a("li"),tte=a("strong"),joo=o("m2m_100"),Doo=o(" \u2014 "),qR=a("a"),Goo=o("M2M100Tokenizer"),Ooo=o(" (M2M100 model)"),Voo=l(),Sg=a("li"),ate=a("strong"),Xoo=o("marian"),zoo=o(" \u2014 "),NR=a("a"),Qoo=o("MarianTokenizer"),Woo=o(" (Marian model)"),Hoo=l(),ls=a("li"),nte=a("strong"),Uoo=o("mbart"),Joo=o(" \u2014 "),jR=a("a"),Yoo=o("MBartTokenizer"),Koo=o(" or "),DR=a("a"),Zoo=o("MBartTokenizerFast"),ero=o(" (mBART model)"),oro=l(),is=a("li"),ste=a("strong"),rro=o("mbart50"),tro=o(" \u2014 "),GR=a("a"),aro=o("MBart50Tokenizer"),nro=o(" or "),OR=a("a"),sro=o("MBart50TokenizerFast"),lro=o(" (mBART-50 model)"),iro=l(),ds=a("li"),lte=a("strong"),dro=o("megatron-bert"),cro=o(" \u2014 "),VR=a("a"),mro=o("BertTokenizer"),fro=o(" or "),XR=a("a"),gro=o("BertTokenizerFast"),hro=o(" (MegatronBert model)"),uro=l(),Rg=a("li"),ite=a("strong"),pro=o("mluke"),_ro=o(" \u2014 "),zR=a("a"),bro=o("MLukeTokenizer"),Fro=o(" (mLUKE model)"),vro=l(),cs=a("li"),dte=a("strong"),Tro=o("mobilebert"),Mro=o(" \u2014 "),QR=a("a"),Ero=o("MobileBertTokenizer"),Cro=o(" or "),WR=a("a"),wro=o("MobileBertTokenizerFast"),Aro=o(" (MobileBERT model)"),yro=l(),ms=a("li"),cte=a("strong"),Lro=o("mpnet"),xro=o(" \u2014 "),HR=a("a"),$ro=o("MPNetTokenizer"),kro=o(" or "),UR=a("a"),Sro=o("MPNetTokenizerFast"),Rro=o(" (MPNet model)"),Bro=l(),fs=a("li"),mte=a("strong"),Pro=o("mt5"),Iro=o(" \u2014 "),JR=a("a"),qro=o("MT5Tokenizer"),Nro=o(" or "),YR=a("a"),jro=o("MT5TokenizerFast"),Dro=o(" (mT5 model)"),Gro=l(),gs=a("li"),fte=a("strong"),Oro=o("nystromformer"),Vro=o(" \u2014 "),KR=a("a"),Xro=o("AlbertTokenizer"),zro=o(" or "),ZR=a("a"),Qro=o("AlbertTokenizerFast"),Wro=o(" (Nystromformer model)"),Hro=l(),hs=a("li"),gte=a("strong"),Uro=o("openai-gpt"),Jro=o(" \u2014 "),eB=a("a"),Yro=o("OpenAIGPTTokenizer"),Kro=o(" or "),oB=a("a"),Zro=o("OpenAIGPTTokenizerFast"),eto=o(" (OpenAI GPT model)"),oto=l(),Bg=a("li"),hte=a("strong"),rto=o("opt"),tto=o(" \u2014 "),rB=a("a"),ato=o("GPT2Tokenizer"),nto=o(" (OPT model)"),sto=l(),us=a("li"),ute=a("strong"),lto=o("pegasus"),ito=o(" \u2014 "),tB=a("a"),dto=o("PegasusTokenizer"),cto=o(" or "),aB=a("a"),mto=o("PegasusTokenizerFast"),fto=o(" (Pegasus model)"),gto=l(),Pg=a("li"),pte=a("strong"),hto=o("perceiver"),uto=o(" \u2014 "),nB=a("a"),pto=o("PerceiverTokenizer"),_to=o(" (Perceiver model)"),bto=l(),Ig=a("li"),_te=a("strong"),Fto=o("phobert"),vto=o(" \u2014 "),sB=a("a"),Tto=o("PhobertTokenizer"),Mto=o(" (PhoBERT model)"),Eto=l(),qg=a("li"),bte=a("strong"),Cto=o("plbart"),wto=o(" \u2014 "),lB=a("a"),Ato=o("PLBartTokenizer"),yto=o(" (PLBart model)"),Lto=l(),Ng=a("li"),Fte=a("strong"),xto=o("prophetnet"),$to=o(" \u2014 "),iB=a("a"),kto=o("ProphetNetTokenizer"),Sto=o(" (ProphetNet model)"),Rto=l(),ps=a("li"),vte=a("strong"),Bto=o("qdqbert"),Pto=o(" \u2014 "),dB=a("a"),Ito=o("BertTokenizer"),qto=o(" or "),cB=a("a"),Nto=o("BertTokenizerFast"),jto=o(" (QDQBert model)"),Dto=l(),jg=a("li"),Tte=a("strong"),Gto=o("rag"),Oto=o(" \u2014 "),mB=a("a"),Vto=o("RagTokenizer"),Xto=o(" (RAG model)"),zto=l(),_s=a("li"),Mte=a("strong"),Qto=o("realm"),Wto=o(" \u2014 "),fB=a("a"),Hto=o("RealmTokenizer"),Uto=o(" or "),gB=a("a"),Jto=o("RealmTokenizerFast"),Yto=o(" (Realm model)"),Kto=l(),bs=a("li"),Ete=a("strong"),Zto=o("reformer"),eao=o(" \u2014 "),hB=a("a"),oao=o("ReformerTokenizer"),rao=o(" or "),uB=a("a"),tao=o("ReformerTokenizerFast"),aao=o(" (Reformer model)"),nao=l(),Fs=a("li"),Cte=a("strong"),sao=o("rembert"),lao=o(" \u2014 "),pB=a("a"),iao=o("RemBertTokenizer"),dao=o(" or "),_B=a("a"),cao=o("RemBertTokenizerFast"),mao=o(" (RemBERT model)"),fao=l(),vs=a("li"),wte=a("strong"),gao=o("retribert"),hao=o(" \u2014 "),bB=a("a"),uao=o("RetriBertTokenizer"),pao=o(" or "),FB=a("a"),_ao=o("RetriBertTokenizerFast"),bao=o(" (RetriBERT model)"),Fao=l(),Ts=a("li"),Ate=a("strong"),vao=o("roberta"),Tao=o(" \u2014 "),vB=a("a"),Mao=o("RobertaTokenizer"),Eao=o(" or "),TB=a("a"),Cao=o("RobertaTokenizerFast"),wao=o(" (RoBERTa model)"),Aao=l(),Ms=a("li"),yte=a("strong"),yao=o("roformer"),Lao=o(" \u2014 "),MB=a("a"),xao=o("RoFormerTokenizer"),$ao=o(" or "),EB=a("a"),kao=o("RoFormerTokenizerFast"),Sao=o(" (RoFormer model)"),Rao=l(),Dg=a("li"),Lte=a("strong"),Bao=o("speech_to_text"),Pao=o(" \u2014 "),CB=a("a"),Iao=o("Speech2TextTokenizer"),qao=o(" (Speech2Text model)"),Nao=l(),Gg=a("li"),xte=a("strong"),jao=o("speech_to_text_2"),Dao=o(" \u2014 "),wB=a("a"),Gao=o("Speech2Text2Tokenizer"),Oao=o(" (Speech2Text2 model)"),Vao=l(),Es=a("li"),$te=a("strong"),Xao=o("splinter"),zao=o(" \u2014 "),AB=a("a"),Qao=o("SplinterTokenizer"),Wao=o(" or "),yB=a("a"),Hao=o("SplinterTokenizerFast"),Uao=o(" (Splinter model)"),Jao=l(),Cs=a("li"),kte=a("strong"),Yao=o("squeezebert"),Kao=o(" \u2014 "),LB=a("a"),Zao=o("SqueezeBertTokenizer"),eno=o(" or "),xB=a("a"),ono=o("SqueezeBertTokenizerFast"),rno=o(" (SqueezeBERT model)"),tno=l(),ws=a("li"),Ste=a("strong"),ano=o("t5"),nno=o(" \u2014 "),$B=a("a"),sno=o("T5Tokenizer"),lno=o(" or "),kB=a("a"),ino=o("T5TokenizerFast"),dno=o(" (T5 model)"),cno=l(),Og=a("li"),Rte=a("strong"),mno=o("tapas"),fno=o(" \u2014 "),SB=a("a"),gno=o("TapasTokenizer"),hno=o(" (TAPAS model)"),uno=l(),Vg=a("li"),Bte=a("strong"),pno=o("tapex"),_no=o(" \u2014 "),RB=a("a"),bno=o("TapexTokenizer"),Fno=o(" (TAPEX model)"),vno=l(),Xg=a("li"),Pte=a("strong"),Tno=o("transfo-xl"),Mno=o(" \u2014 "),BB=a("a"),Eno=o("TransfoXLTokenizer"),Cno=o(" (Transformer-XL model)"),wno=l(),As=a("li"),Ite=a("strong"),Ano=o("visual_bert"),yno=o(" \u2014 "),PB=a("a"),Lno=o("BertTokenizer"),xno=o(" or "),IB=a("a"),$no=o("BertTokenizerFast"),kno=o(" (VisualBert model)"),Sno=l(),zg=a("li"),qte=a("strong"),Rno=o("wav2vec2"),Bno=o(" \u2014 "),qB=a("a"),Pno=o("Wav2Vec2CTCTokenizer"),Ino=o(" (Wav2Vec2 model)"),qno=l(),Qg=a("li"),Nte=a("strong"),Nno=o("wav2vec2_phoneme"),jno=o(" \u2014 "),NB=a("a"),Dno=o("Wav2Vec2PhonemeCTCTokenizer"),Gno=o(" (Wav2Vec2Phoneme model)"),Ono=l(),ys=a("li"),jte=a("strong"),Vno=o("xglm"),Xno=o(" \u2014 "),jB=a("a"),zno=o("XGLMTokenizer"),Qno=o(" or "),DB=a("a"),Wno=o("XGLMTokenizerFast"),Hno=o(" (XGLM model)"),Uno=l(),Wg=a("li"),Dte=a("strong"),Jno=o("xlm"),Yno=o(" \u2014 "),GB=a("a"),Kno=o("XLMTokenizer"),Zno=o(" (XLM model)"),eso=l(),Hg=a("li"),Gte=a("strong"),oso=o("xlm-prophetnet"),rso=o(" \u2014 "),OB=a("a"),tso=o("XLMProphetNetTokenizer"),aso=o(" (XLMProphetNet model)"),nso=l(),Ls=a("li"),Ote=a("strong"),sso=o("xlm-roberta"),lso=o(" \u2014 "),VB=a("a"),iso=o("XLMRobertaTokenizer"),dso=o(" or "),XB=a("a"),cso=o("XLMRobertaTokenizerFast"),mso=o(" (XLM-RoBERTa model)"),fso=l(),xs=a("li"),Vte=a("strong"),gso=o("xlm-roberta-xl"),hso=o(" \u2014 "),zB=a("a"),uso=o("RobertaTokenizer"),pso=o(" or "),QB=a("a"),_so=o("RobertaTokenizerFast"),bso=o(" (XLM-RoBERTa-XL model)"),Fso=l(),$s=a("li"),Xte=a("strong"),vso=o("xlnet"),Tso=o(" \u2014 "),WB=a("a"),Mso=o("XLNetTokenizer"),Eso=o(" or "),HB=a("a"),Cso=o("XLNetTokenizerFast"),wso=o(" (XLNet model)"),Aso=l(),ks=a("li"),zte=a("strong"),yso=o("yoso"),Lso=o(" \u2014 "),UB=a("a"),xso=o("AlbertTokenizer"),$so=o(" or "),JB=a("a"),kso=o("AlbertTokenizerFast"),Sso=o(" (YOSO model)"),Rso=l(),v(Ug.$$.fragment),Bso=l(),Jg=a("div"),v(cy.$$.fragment),Pso=l(),Qte=a("p"),Iso=o("Register a new tokenizer in this mapping."),KPe=l(),bi=a("h2"),Yg=a("a"),Wte=a("span"),v(my.$$.fragment),qso=l(),Hte=a("span"),Nso=o("AutoFeatureExtractor"),ZPe=l(),Ao=a("div"),v(fy.$$.fragment),jso=l(),gy=a("p"),Dso=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),YB=a("a"),Gso=o("AutoFeatureExtractor.from_pretrained()"),Oso=o(" class method."),Vso=l(),hy=a("p"),Xso=o("This class cannot be instantiated directly using "),Ute=a("code"),zso=o("__init__()"),Qso=o(" (throws an error)."),Wso=l(),Qe=a("div"),v(uy.$$.fragment),Hso=l(),Jte=a("p"),Uso=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Jso=l(),wa=a("p"),Yso=o("The feature extractor class to instantiate is selected based on the "),Yte=a("code"),Kso=o("model_type"),Zso=o(` property of the config object
(either passed as an argument or loaded from `),Kte=a("code"),elo=o("pretrained_model_name_or_path"),olo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Zte=a("code"),rlo=o("pretrained_model_name_or_path"),tlo=o(":"),alo=l(),oe=a("ul"),Kg=a("li"),eae=a("strong"),nlo=o("beit"),slo=o(" \u2014 "),KB=a("a"),llo=o("BeitFeatureExtractor"),ilo=o(" (BEiT model)"),dlo=l(),Zg=a("li"),oae=a("strong"),clo=o("clip"),mlo=o(" \u2014 "),ZB=a("a"),flo=o("CLIPFeatureExtractor"),glo=o(" (CLIP model)"),hlo=l(),eh=a("li"),rae=a("strong"),ulo=o("convnext"),plo=o(" \u2014 "),eP=a("a"),_lo=o("ConvNextFeatureExtractor"),blo=o(" (ConvNext model)"),Flo=l(),oh=a("li"),tae=a("strong"),vlo=o("data2vec-audio"),Tlo=o(" \u2014 "),oP=a("a"),Mlo=o("Wav2Vec2FeatureExtractor"),Elo=o(" (Data2VecAudio model)"),Clo=l(),rh=a("li"),aae=a("strong"),wlo=o("data2vec-vision"),Alo=o(" \u2014 "),rP=a("a"),ylo=o("BeitFeatureExtractor"),Llo=o(" (Data2VecVision model)"),xlo=l(),th=a("li"),nae=a("strong"),$lo=o("deit"),klo=o(" \u2014 "),tP=a("a"),Slo=o("DeiTFeatureExtractor"),Rlo=o(" (DeiT model)"),Blo=l(),ah=a("li"),sae=a("strong"),Plo=o("detr"),Ilo=o(" \u2014 "),aP=a("a"),qlo=o("DetrFeatureExtractor"),Nlo=o(" (DETR model)"),jlo=l(),nh=a("li"),lae=a("strong"),Dlo=o("dpt"),Glo=o(" \u2014 "),nP=a("a"),Olo=o("DPTFeatureExtractor"),Vlo=o(" (DPT model)"),Xlo=l(),sh=a("li"),iae=a("strong"),zlo=o("flava"),Qlo=o(" \u2014 "),sP=a("a"),Wlo=o("FlavaFeatureExtractor"),Hlo=o(" (Flava model)"),Ulo=l(),lh=a("li"),dae=a("strong"),Jlo=o("glpn"),Ylo=o(" \u2014 "),lP=a("a"),Klo=o("GLPNFeatureExtractor"),Zlo=o(" (GLPN model)"),eio=l(),ih=a("li"),cae=a("strong"),oio=o("hubert"),rio=o(" \u2014 "),iP=a("a"),tio=o("Wav2Vec2FeatureExtractor"),aio=o(" (Hubert model)"),nio=l(),dh=a("li"),mae=a("strong"),sio=o("layoutlmv2"),lio=o(" \u2014 "),dP=a("a"),iio=o("LayoutLMv2FeatureExtractor"),dio=o(" (LayoutLMv2 model)"),cio=l(),ch=a("li"),fae=a("strong"),mio=o("maskformer"),fio=o(" \u2014 "),cP=a("a"),gio=o("MaskFormerFeatureExtractor"),hio=o(" (MaskFormer model)"),uio=l(),mh=a("li"),gae=a("strong"),pio=o("perceiver"),_io=o(" \u2014 "),mP=a("a"),bio=o("PerceiverFeatureExtractor"),Fio=o(" (Perceiver model)"),vio=l(),fh=a("li"),hae=a("strong"),Tio=o("poolformer"),Mio=o(" \u2014 "),fP=a("a"),Eio=o("PoolFormerFeatureExtractor"),Cio=o(" (PoolFormer model)"),wio=l(),gh=a("li"),uae=a("strong"),Aio=o("regnet"),yio=o(" \u2014 "),gP=a("a"),Lio=o("ConvNextFeatureExtractor"),xio=o(" (RegNet model)"),$io=l(),hh=a("li"),pae=a("strong"),kio=o("resnet"),Sio=o(" \u2014 "),hP=a("a"),Rio=o("ConvNextFeatureExtractor"),Bio=o(" (ResNet model)"),Pio=l(),uh=a("li"),_ae=a("strong"),Iio=o("segformer"),qio=o(" \u2014 "),uP=a("a"),Nio=o("SegformerFeatureExtractor"),jio=o(" (SegFormer model)"),Dio=l(),ph=a("li"),bae=a("strong"),Gio=o("speech_to_text"),Oio=o(" \u2014 "),pP=a("a"),Vio=o("Speech2TextFeatureExtractor"),Xio=o(" (Speech2Text model)"),zio=l(),_h=a("li"),Fae=a("strong"),Qio=o("swin"),Wio=o(" \u2014 "),_P=a("a"),Hio=o("ViTFeatureExtractor"),Uio=o(" (Swin model)"),Jio=l(),bh=a("li"),vae=a("strong"),Yio=o("van"),Kio=o(" \u2014 "),bP=a("a"),Zio=o("ConvNextFeatureExtractor"),edo=o(" (VAN model)"),odo=l(),Fh=a("li"),Tae=a("strong"),rdo=o("vit"),tdo=o(" \u2014 "),FP=a("a"),ado=o("ViTFeatureExtractor"),ndo=o(" (ViT model)"),sdo=l(),vh=a("li"),Mae=a("strong"),ldo=o("vit_mae"),ido=o(" \u2014 "),vP=a("a"),ddo=o("ViTFeatureExtractor"),cdo=o(" (ViTMAE model)"),mdo=l(),Th=a("li"),Eae=a("strong"),fdo=o("wav2vec2"),gdo=o(" \u2014 "),TP=a("a"),hdo=o("Wav2Vec2FeatureExtractor"),udo=o(" (Wav2Vec2 model)"),pdo=l(),Mh=a("li"),Cae=a("strong"),_do=o("yolos"),bdo=o(" \u2014 "),MP=a("a"),Fdo=o("YolosFeatureExtractor"),vdo=o(" (YOLOS model)"),Tdo=l(),v(Eh.$$.fragment),Mdo=l(),v(Ch.$$.fragment),Edo=l(),wh=a("div"),v(py.$$.fragment),Cdo=l(),wae=a("p"),wdo=o("Register a new feature extractor for this class."),eIe=l(),Fi=a("h2"),Ah=a("a"),Aae=a("span"),v(_y.$$.fragment),Ado=l(),yae=a("span"),ydo=o("AutoProcessor"),oIe=l(),yo=a("div"),v(by.$$.fragment),Ldo=l(),Fy=a("p"),xdo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),EP=a("a"),$do=o("AutoProcessor.from_pretrained()"),kdo=o(" class method."),Sdo=l(),vy=a("p"),Rdo=o("This class cannot be instantiated directly using "),Lae=a("code"),Bdo=o("__init__()"),Pdo=o(" (throws an error)."),Ido=l(),We=a("div"),v(Ty.$$.fragment),qdo=l(),xae=a("p"),Ndo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),jdo=l(),vi=a("p"),Ddo=o("The processor class to instantiate is selected based on the "),$ae=a("code"),Gdo=o("model_type"),Odo=o(` property of the config object (either
passed as an argument or loaded from `),kae=a("code"),Vdo=o("pretrained_model_name_or_path"),Xdo=o(" if possible):"),zdo=l(),be=a("ul"),yh=a("li"),Sae=a("strong"),Qdo=o("clip"),Wdo=o(" \u2014 "),CP=a("a"),Hdo=o("CLIPProcessor"),Udo=o(" (CLIP model)"),Jdo=l(),Lh=a("li"),Rae=a("strong"),Ydo=o("flava"),Kdo=o(" \u2014 "),Bae=a("code"),Zdo=o("FLAVAProcessor"),eco=o(" (Flava model)"),oco=l(),xh=a("li"),Pae=a("strong"),rco=o("layoutlmv2"),tco=o(" \u2014 "),wP=a("a"),aco=o("LayoutLMv2Processor"),nco=o(" (LayoutLMv2 model)"),sco=l(),$h=a("li"),Iae=a("strong"),lco=o("layoutxlm"),ico=o(" \u2014 "),AP=a("a"),dco=o("LayoutXLMProcessor"),cco=o(" (LayoutXLM model)"),mco=l(),kh=a("li"),qae=a("strong"),fco=o("sew"),gco=o(" \u2014 "),yP=a("a"),hco=o("Wav2Vec2Processor"),uco=o(" (SEW model)"),pco=l(),Sh=a("li"),Nae=a("strong"),_co=o("sew-d"),bco=o(" \u2014 "),LP=a("a"),Fco=o("Wav2Vec2Processor"),vco=o(" (SEW-D model)"),Tco=l(),Rh=a("li"),jae=a("strong"),Mco=o("speech_to_text"),Eco=o(" \u2014 "),xP=a("a"),Cco=o("Speech2TextProcessor"),wco=o(" (Speech2Text model)"),Aco=l(),Bh=a("li"),Dae=a("strong"),yco=o("speech_to_text_2"),Lco=o(" \u2014 "),$P=a("a"),xco=o("Speech2Text2Processor"),$co=o(" (Speech2Text2 model)"),kco=l(),Ph=a("li"),Gae=a("strong"),Sco=o("trocr"),Rco=o(" \u2014 "),kP=a("a"),Bco=o("TrOCRProcessor"),Pco=o(" (TrOCR model)"),Ico=l(),Ih=a("li"),Oae=a("strong"),qco=o("unispeech"),Nco=o(" \u2014 "),SP=a("a"),jco=o("Wav2Vec2Processor"),Dco=o(" (UniSpeech model)"),Gco=l(),qh=a("li"),Vae=a("strong"),Oco=o("unispeech-sat"),Vco=o(" \u2014 "),RP=a("a"),Xco=o("Wav2Vec2Processor"),zco=o(" (UniSpeechSat model)"),Qco=l(),Nh=a("li"),Xae=a("strong"),Wco=o("vilt"),Hco=o(" \u2014 "),BP=a("a"),Uco=o("ViltProcessor"),Jco=o(" (ViLT model)"),Yco=l(),jh=a("li"),zae=a("strong"),Kco=o("vision-text-dual-encoder"),Zco=o(" \u2014 "),PP=a("a"),emo=o("VisionTextDualEncoderProcessor"),omo=o(" (VisionTextDualEncoder model)"),rmo=l(),Dh=a("li"),Qae=a("strong"),tmo=o("wav2vec2"),amo=o(" \u2014 "),IP=a("a"),nmo=o("Wav2Vec2Processor"),smo=o(" (Wav2Vec2 model)"),lmo=l(),Gh=a("li"),Wae=a("strong"),imo=o("wavlm"),dmo=o(" \u2014 "),qP=a("a"),cmo=o("Wav2Vec2Processor"),mmo=o(" (WavLM model)"),fmo=l(),v(Oh.$$.fragment),gmo=l(),v(Vh.$$.fragment),hmo=l(),Xh=a("div"),v(My.$$.fragment),umo=l(),Hae=a("p"),pmo=o("Register a new processor for this class."),rIe=l(),Ti=a("h2"),zh=a("a"),Uae=a("span"),v(Ey.$$.fragment),_mo=l(),Jae=a("span"),bmo=o("AutoModel"),tIe=l(),Lo=a("div"),v(Cy.$$.fragment),Fmo=l(),Mi=a("p"),vmo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),NP=a("a"),Tmo=o("from_pretrained()"),Mmo=o(" class method or the "),jP=a("a"),Emo=o("from_config()"),Cmo=o(` class
method.`),wmo=l(),wy=a("p"),Amo=o("This class cannot be instantiated directly using "),Yae=a("code"),ymo=o("__init__()"),Lmo=o(" (throws an error)."),xmo=l(),ot=a("div"),v(Ay.$$.fragment),$mo=l(),Kae=a("p"),kmo=o("Instantiates one of the base model classes of the library from a configuration."),Smo=l(),Ei=a("p"),Rmo=o(`Note:
Loading a model from its configuration file does `),Zae=a("strong"),Bmo=o("not"),Pmo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DP=a("a"),Imo=o("from_pretrained()"),qmo=o(" to load the model weights."),Nmo=l(),v(Qh.$$.fragment),jmo=l(),He=a("div"),v(yy.$$.fragment),Dmo=l(),ene=a("p"),Gmo=o("Instantiate one of the base model classes of the library from a pretrained model."),Omo=l(),Aa=a("p"),Vmo=o("The model class to instantiate is selected based on the "),one=a("code"),Xmo=o("model_type"),zmo=o(` property of the config object (either
passed as an argument or loaded from `),rne=a("code"),Qmo=o("pretrained_model_name_or_path"),Wmo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tne=a("code"),Hmo=o("pretrained_model_name_or_path"),Umo=o(":"),Jmo=l(),x=a("ul"),Wh=a("li"),ane=a("strong"),Ymo=o("albert"),Kmo=o(" \u2014 "),GP=a("a"),Zmo=o("AlbertModel"),efo=o(" (ALBERT model)"),ofo=l(),Hh=a("li"),nne=a("strong"),rfo=o("bart"),tfo=o(" \u2014 "),OP=a("a"),afo=o("BartModel"),nfo=o(" (BART model)"),sfo=l(),Uh=a("li"),sne=a("strong"),lfo=o("beit"),ifo=o(" \u2014 "),VP=a("a"),dfo=o("BeitModel"),cfo=o(" (BEiT model)"),mfo=l(),Jh=a("li"),lne=a("strong"),ffo=o("bert"),gfo=o(" \u2014 "),XP=a("a"),hfo=o("BertModel"),ufo=o(" (BERT model)"),pfo=l(),Yh=a("li"),ine=a("strong"),_fo=o("bert-generation"),bfo=o(" \u2014 "),zP=a("a"),Ffo=o("BertGenerationEncoder"),vfo=o(" (Bert Generation model)"),Tfo=l(),Kh=a("li"),dne=a("strong"),Mfo=o("big_bird"),Efo=o(" \u2014 "),QP=a("a"),Cfo=o("BigBirdModel"),wfo=o(" (BigBird model)"),Afo=l(),Zh=a("li"),cne=a("strong"),yfo=o("bigbird_pegasus"),Lfo=o(" \u2014 "),WP=a("a"),xfo=o("BigBirdPegasusModel"),$fo=o(" (BigBirdPegasus model)"),kfo=l(),eu=a("li"),mne=a("strong"),Sfo=o("blenderbot"),Rfo=o(" \u2014 "),HP=a("a"),Bfo=o("BlenderbotModel"),Pfo=o(" (Blenderbot model)"),Ifo=l(),ou=a("li"),fne=a("strong"),qfo=o("blenderbot-small"),Nfo=o(" \u2014 "),UP=a("a"),jfo=o("BlenderbotSmallModel"),Dfo=o(" (BlenderbotSmall model)"),Gfo=l(),ru=a("li"),gne=a("strong"),Ofo=o("camembert"),Vfo=o(" \u2014 "),JP=a("a"),Xfo=o("CamembertModel"),zfo=o(" (CamemBERT model)"),Qfo=l(),tu=a("li"),hne=a("strong"),Wfo=o("canine"),Hfo=o(" \u2014 "),YP=a("a"),Ufo=o("CanineModel"),Jfo=o(" (Canine model)"),Yfo=l(),au=a("li"),une=a("strong"),Kfo=o("clip"),Zfo=o(" \u2014 "),KP=a("a"),ego=o("CLIPModel"),ogo=o(" (CLIP model)"),rgo=l(),nu=a("li"),pne=a("strong"),tgo=o("convbert"),ago=o(" \u2014 "),ZP=a("a"),ngo=o("ConvBertModel"),sgo=o(" (ConvBERT model)"),lgo=l(),su=a("li"),_ne=a("strong"),igo=o("convnext"),dgo=o(" \u2014 "),eI=a("a"),cgo=o("ConvNextModel"),mgo=o(" (ConvNext model)"),fgo=l(),lu=a("li"),bne=a("strong"),ggo=o("ctrl"),hgo=o(" \u2014 "),oI=a("a"),ugo=o("CTRLModel"),pgo=o(" (CTRL model)"),_go=l(),iu=a("li"),Fne=a("strong"),bgo=o("data2vec-audio"),Fgo=o(" \u2014 "),rI=a("a"),vgo=o("Data2VecAudioModel"),Tgo=o(" (Data2VecAudio model)"),Mgo=l(),du=a("li"),vne=a("strong"),Ego=o("data2vec-text"),Cgo=o(" \u2014 "),tI=a("a"),wgo=o("Data2VecTextModel"),Ago=o(" (Data2VecText model)"),ygo=l(),cu=a("li"),Tne=a("strong"),Lgo=o("data2vec-vision"),xgo=o(" \u2014 "),aI=a("a"),$go=o("Data2VecVisionModel"),kgo=o(" (Data2VecVision model)"),Sgo=l(),mu=a("li"),Mne=a("strong"),Rgo=o("deberta"),Bgo=o(" \u2014 "),nI=a("a"),Pgo=o("DebertaModel"),Igo=o(" (DeBERTa model)"),qgo=l(),fu=a("li"),Ene=a("strong"),Ngo=o("deberta-v2"),jgo=o(" \u2014 "),sI=a("a"),Dgo=o("DebertaV2Model"),Ggo=o(" (DeBERTa-v2 model)"),Ogo=l(),gu=a("li"),Cne=a("strong"),Vgo=o("decision_transformer"),Xgo=o(" \u2014 "),lI=a("a"),zgo=o("DecisionTransformerModel"),Qgo=o(" (Decision Transformer model)"),Wgo=l(),hu=a("li"),wne=a("strong"),Hgo=o("deit"),Ugo=o(" \u2014 "),iI=a("a"),Jgo=o("DeiTModel"),Ygo=o(" (DeiT model)"),Kgo=l(),uu=a("li"),Ane=a("strong"),Zgo=o("detr"),eho=o(" \u2014 "),dI=a("a"),oho=o("DetrModel"),rho=o(" (DETR model)"),tho=l(),pu=a("li"),yne=a("strong"),aho=o("distilbert"),nho=o(" \u2014 "),cI=a("a"),sho=o("DistilBertModel"),lho=o(" (DistilBERT model)"),iho=l(),_u=a("li"),Lne=a("strong"),dho=o("dpr"),cho=o(" \u2014 "),mI=a("a"),mho=o("DPRQuestionEncoder"),fho=o(" (DPR model)"),gho=l(),bu=a("li"),xne=a("strong"),hho=o("dpt"),uho=o(" \u2014 "),fI=a("a"),pho=o("DPTModel"),_ho=o(" (DPT model)"),bho=l(),Fu=a("li"),$ne=a("strong"),Fho=o("electra"),vho=o(" \u2014 "),gI=a("a"),Tho=o("ElectraModel"),Mho=o(" (ELECTRA model)"),Eho=l(),vu=a("li"),kne=a("strong"),Cho=o("flaubert"),who=o(" \u2014 "),hI=a("a"),Aho=o("FlaubertModel"),yho=o(" (FlauBERT model)"),Lho=l(),Tu=a("li"),Sne=a("strong"),xho=o("flava"),$ho=o(" \u2014 "),uI=a("a"),kho=o("FlavaModel"),Sho=o(" (Flava model)"),Rho=l(),Mu=a("li"),Rne=a("strong"),Bho=o("fnet"),Pho=o(" \u2014 "),pI=a("a"),Iho=o("FNetModel"),qho=o(" (FNet model)"),Nho=l(),Eu=a("li"),Bne=a("strong"),jho=o("fsmt"),Dho=o(" \u2014 "),_I=a("a"),Gho=o("FSMTModel"),Oho=o(" (FairSeq Machine-Translation model)"),Vho=l(),Ss=a("li"),Pne=a("strong"),Xho=o("funnel"),zho=o(" \u2014 "),bI=a("a"),Qho=o("FunnelModel"),Who=o(" or "),FI=a("a"),Hho=o("FunnelBaseModel"),Uho=o(" (Funnel Transformer model)"),Jho=l(),Cu=a("li"),Ine=a("strong"),Yho=o("glpn"),Kho=o(" \u2014 "),vI=a("a"),Zho=o("GLPNModel"),euo=o(" (GLPN model)"),ouo=l(),wu=a("li"),qne=a("strong"),ruo=o("gpt2"),tuo=o(" \u2014 "),TI=a("a"),auo=o("GPT2Model"),nuo=o(" (OpenAI GPT-2 model)"),suo=l(),Au=a("li"),Nne=a("strong"),luo=o("gpt_neo"),iuo=o(" \u2014 "),MI=a("a"),duo=o("GPTNeoModel"),cuo=o(" (GPT Neo model)"),muo=l(),yu=a("li"),jne=a("strong"),fuo=o("gptj"),guo=o(" \u2014 "),EI=a("a"),huo=o("GPTJModel"),uuo=o(" (GPT-J model)"),puo=l(),Lu=a("li"),Dne=a("strong"),_uo=o("hubert"),buo=o(" \u2014 "),CI=a("a"),Fuo=o("HubertModel"),vuo=o(" (Hubert model)"),Tuo=l(),xu=a("li"),Gne=a("strong"),Muo=o("ibert"),Euo=o(" \u2014 "),wI=a("a"),Cuo=o("IBertModel"),wuo=o(" (I-BERT model)"),Auo=l(),$u=a("li"),One=a("strong"),yuo=o("imagegpt"),Luo=o(" \u2014 "),AI=a("a"),xuo=o("ImageGPTModel"),$uo=o(" (ImageGPT model)"),kuo=l(),ku=a("li"),Vne=a("strong"),Suo=o("layoutlm"),Ruo=o(" \u2014 "),yI=a("a"),Buo=o("LayoutLMModel"),Puo=o(" (LayoutLM model)"),Iuo=l(),Su=a("li"),Xne=a("strong"),quo=o("layoutlmv2"),Nuo=o(" \u2014 "),LI=a("a"),juo=o("LayoutLMv2Model"),Duo=o(" (LayoutLMv2 model)"),Guo=l(),Ru=a("li"),zne=a("strong"),Ouo=o("led"),Vuo=o(" \u2014 "),xI=a("a"),Xuo=o("LEDModel"),zuo=o(" (LED model)"),Quo=l(),Bu=a("li"),Qne=a("strong"),Wuo=o("longformer"),Huo=o(" \u2014 "),$I=a("a"),Uuo=o("LongformerModel"),Juo=o(" (Longformer model)"),Yuo=l(),Pu=a("li"),Wne=a("strong"),Kuo=o("luke"),Zuo=o(" \u2014 "),kI=a("a"),epo=o("LukeModel"),opo=o(" (LUKE model)"),rpo=l(),Iu=a("li"),Hne=a("strong"),tpo=o("lxmert"),apo=o(" \u2014 "),SI=a("a"),npo=o("LxmertModel"),spo=o(" (LXMERT model)"),lpo=l(),qu=a("li"),Une=a("strong"),ipo=o("m2m_100"),dpo=o(" \u2014 "),RI=a("a"),cpo=o("M2M100Model"),mpo=o(" (M2M100 model)"),fpo=l(),Nu=a("li"),Jne=a("strong"),gpo=o("marian"),hpo=o(" \u2014 "),BI=a("a"),upo=o("MarianModel"),ppo=o(" (Marian model)"),_po=l(),ju=a("li"),Yne=a("strong"),bpo=o("maskformer"),Fpo=o(" \u2014 "),PI=a("a"),vpo=o("MaskFormerModel"),Tpo=o(" (MaskFormer model)"),Mpo=l(),Du=a("li"),Kne=a("strong"),Epo=o("mbart"),Cpo=o(" \u2014 "),II=a("a"),wpo=o("MBartModel"),Apo=o(" (mBART model)"),ypo=l(),Gu=a("li"),Zne=a("strong"),Lpo=o("megatron-bert"),xpo=o(" \u2014 "),qI=a("a"),$po=o("MegatronBertModel"),kpo=o(" (MegatronBert model)"),Spo=l(),Ou=a("li"),ese=a("strong"),Rpo=o("mobilebert"),Bpo=o(" \u2014 "),NI=a("a"),Ppo=o("MobileBertModel"),Ipo=o(" (MobileBERT model)"),qpo=l(),Vu=a("li"),ose=a("strong"),Npo=o("mpnet"),jpo=o(" \u2014 "),jI=a("a"),Dpo=o("MPNetModel"),Gpo=o(" (MPNet model)"),Opo=l(),Xu=a("li"),rse=a("strong"),Vpo=o("mt5"),Xpo=o(" \u2014 "),DI=a("a"),zpo=o("MT5Model"),Qpo=o(" (mT5 model)"),Wpo=l(),zu=a("li"),tse=a("strong"),Hpo=o("nystromformer"),Upo=o(" \u2014 "),GI=a("a"),Jpo=o("NystromformerModel"),Ypo=o(" (Nystromformer model)"),Kpo=l(),Qu=a("li"),ase=a("strong"),Zpo=o("openai-gpt"),e_o=o(" \u2014 "),OI=a("a"),o_o=o("OpenAIGPTModel"),r_o=o(" (OpenAI GPT model)"),t_o=l(),Wu=a("li"),nse=a("strong"),a_o=o("opt"),n_o=o(" \u2014 "),VI=a("a"),s_o=o("OPTModel"),l_o=o(" (OPT model)"),i_o=l(),Hu=a("li"),sse=a("strong"),d_o=o("pegasus"),c_o=o(" \u2014 "),XI=a("a"),m_o=o("PegasusModel"),f_o=o(" (Pegasus model)"),g_o=l(),Uu=a("li"),lse=a("strong"),h_o=o("perceiver"),u_o=o(" \u2014 "),zI=a("a"),p_o=o("PerceiverModel"),__o=o(" (Perceiver model)"),b_o=l(),Ju=a("li"),ise=a("strong"),F_o=o("plbart"),v_o=o(" \u2014 "),QI=a("a"),T_o=o("PLBartModel"),M_o=o(" (PLBart model)"),E_o=l(),Yu=a("li"),dse=a("strong"),C_o=o("poolformer"),w_o=o(" \u2014 "),WI=a("a"),A_o=o("PoolFormerModel"),y_o=o(" (PoolFormer model)"),L_o=l(),Ku=a("li"),cse=a("strong"),x_o=o("prophetnet"),$_o=o(" \u2014 "),HI=a("a"),k_o=o("ProphetNetModel"),S_o=o(" (ProphetNet model)"),R_o=l(),Zu=a("li"),mse=a("strong"),B_o=o("qdqbert"),P_o=o(" \u2014 "),UI=a("a"),I_o=o("QDQBertModel"),q_o=o(" (QDQBert model)"),N_o=l(),ep=a("li"),fse=a("strong"),j_o=o("reformer"),D_o=o(" \u2014 "),JI=a("a"),G_o=o("ReformerModel"),O_o=o(" (Reformer model)"),V_o=l(),op=a("li"),gse=a("strong"),X_o=o("regnet"),z_o=o(" \u2014 "),YI=a("a"),Q_o=o("RegNetModel"),W_o=o(" (RegNet model)"),H_o=l(),rp=a("li"),hse=a("strong"),U_o=o("rembert"),J_o=o(" \u2014 "),KI=a("a"),Y_o=o("RemBertModel"),K_o=o(" (RemBERT model)"),Z_o=l(),tp=a("li"),use=a("strong"),ebo=o("resnet"),obo=o(" \u2014 "),ZI=a("a"),rbo=o("ResNetModel"),tbo=o(" (ResNet model)"),abo=l(),ap=a("li"),pse=a("strong"),nbo=o("retribert"),sbo=o(" \u2014 "),eq=a("a"),lbo=o("RetriBertModel"),ibo=o(" (RetriBERT model)"),dbo=l(),np=a("li"),_se=a("strong"),cbo=o("roberta"),mbo=o(" \u2014 "),oq=a("a"),fbo=o("RobertaModel"),gbo=o(" (RoBERTa model)"),hbo=l(),sp=a("li"),bse=a("strong"),ubo=o("roformer"),pbo=o(" \u2014 "),rq=a("a"),_bo=o("RoFormerModel"),bbo=o(" (RoFormer model)"),Fbo=l(),lp=a("li"),Fse=a("strong"),vbo=o("segformer"),Tbo=o(" \u2014 "),tq=a("a"),Mbo=o("SegformerModel"),Ebo=o(" (SegFormer model)"),Cbo=l(),ip=a("li"),vse=a("strong"),wbo=o("sew"),Abo=o(" \u2014 "),aq=a("a"),ybo=o("SEWModel"),Lbo=o(" (SEW model)"),xbo=l(),dp=a("li"),Tse=a("strong"),$bo=o("sew-d"),kbo=o(" \u2014 "),nq=a("a"),Sbo=o("SEWDModel"),Rbo=o(" (SEW-D model)"),Bbo=l(),cp=a("li"),Mse=a("strong"),Pbo=o("speech_to_text"),Ibo=o(" \u2014 "),sq=a("a"),qbo=o("Speech2TextModel"),Nbo=o(" (Speech2Text model)"),jbo=l(),mp=a("li"),Ese=a("strong"),Dbo=o("splinter"),Gbo=o(" \u2014 "),lq=a("a"),Obo=o("SplinterModel"),Vbo=o(" (Splinter model)"),Xbo=l(),fp=a("li"),Cse=a("strong"),zbo=o("squeezebert"),Qbo=o(" \u2014 "),iq=a("a"),Wbo=o("SqueezeBertModel"),Hbo=o(" (SqueezeBERT model)"),Ubo=l(),gp=a("li"),wse=a("strong"),Jbo=o("swin"),Ybo=o(" \u2014 "),dq=a("a"),Kbo=o("SwinModel"),Zbo=o(" (Swin model)"),e2o=l(),hp=a("li"),Ase=a("strong"),o2o=o("t5"),r2o=o(" \u2014 "),cq=a("a"),t2o=o("T5Model"),a2o=o(" (T5 model)"),n2o=l(),up=a("li"),yse=a("strong"),s2o=o("tapas"),l2o=o(" \u2014 "),mq=a("a"),i2o=o("TapasModel"),d2o=o(" (TAPAS model)"),c2o=l(),pp=a("li"),Lse=a("strong"),m2o=o("transfo-xl"),f2o=o(" \u2014 "),fq=a("a"),g2o=o("TransfoXLModel"),h2o=o(" (Transformer-XL model)"),u2o=l(),_p=a("li"),xse=a("strong"),p2o=o("unispeech"),_2o=o(" \u2014 "),gq=a("a"),b2o=o("UniSpeechModel"),F2o=o(" (UniSpeech model)"),v2o=l(),bp=a("li"),$se=a("strong"),T2o=o("unispeech-sat"),M2o=o(" \u2014 "),hq=a("a"),E2o=o("UniSpeechSatModel"),C2o=o(" (UniSpeechSat model)"),w2o=l(),Fp=a("li"),kse=a("strong"),A2o=o("van"),y2o=o(" \u2014 "),uq=a("a"),L2o=o("VanModel"),x2o=o(" (VAN model)"),$2o=l(),vp=a("li"),Sse=a("strong"),k2o=o("vilt"),S2o=o(" \u2014 "),pq=a("a"),R2o=o("ViltModel"),B2o=o(" (ViLT model)"),P2o=l(),Tp=a("li"),Rse=a("strong"),I2o=o("vision-text-dual-encoder"),q2o=o(" \u2014 "),_q=a("a"),N2o=o("VisionTextDualEncoderModel"),j2o=o(" (VisionTextDualEncoder model)"),D2o=l(),Mp=a("li"),Bse=a("strong"),G2o=o("visual_bert"),O2o=o(" \u2014 "),bq=a("a"),V2o=o("VisualBertModel"),X2o=o(" (VisualBert model)"),z2o=l(),Ep=a("li"),Pse=a("strong"),Q2o=o("vit"),W2o=o(" \u2014 "),Fq=a("a"),H2o=o("ViTModel"),U2o=o(" (ViT model)"),J2o=l(),Cp=a("li"),Ise=a("strong"),Y2o=o("vit_mae"),K2o=o(" \u2014 "),vq=a("a"),Z2o=o("ViTMAEModel"),eFo=o(" (ViTMAE model)"),oFo=l(),wp=a("li"),qse=a("strong"),rFo=o("wav2vec2"),tFo=o(" \u2014 "),Tq=a("a"),aFo=o("Wav2Vec2Model"),nFo=o(" (Wav2Vec2 model)"),sFo=l(),Ap=a("li"),Nse=a("strong"),lFo=o("wavlm"),iFo=o(" \u2014 "),Mq=a("a"),dFo=o("WavLMModel"),cFo=o(" (WavLM model)"),mFo=l(),yp=a("li"),jse=a("strong"),fFo=o("xglm"),gFo=o(" \u2014 "),Eq=a("a"),hFo=o("XGLMModel"),uFo=o(" (XGLM model)"),pFo=l(),Lp=a("li"),Dse=a("strong"),_Fo=o("xlm"),bFo=o(" \u2014 "),Cq=a("a"),FFo=o("XLMModel"),vFo=o(" (XLM model)"),TFo=l(),xp=a("li"),Gse=a("strong"),MFo=o("xlm-prophetnet"),EFo=o(" \u2014 "),wq=a("a"),CFo=o("XLMProphetNetModel"),wFo=o(" (XLMProphetNet model)"),AFo=l(),$p=a("li"),Ose=a("strong"),yFo=o("xlm-roberta"),LFo=o(" \u2014 "),Aq=a("a"),xFo=o("XLMRobertaModel"),$Fo=o(" (XLM-RoBERTa model)"),kFo=l(),kp=a("li"),Vse=a("strong"),SFo=o("xlm-roberta-xl"),RFo=o(" \u2014 "),yq=a("a"),BFo=o("XLMRobertaXLModel"),PFo=o(" (XLM-RoBERTa-XL model)"),IFo=l(),Sp=a("li"),Xse=a("strong"),qFo=o("xlnet"),NFo=o(" \u2014 "),Lq=a("a"),jFo=o("XLNetModel"),DFo=o(" (XLNet model)"),GFo=l(),Rp=a("li"),zse=a("strong"),OFo=o("yolos"),VFo=o(" \u2014 "),xq=a("a"),XFo=o("YolosModel"),zFo=o(" (YOLOS model)"),QFo=l(),Bp=a("li"),Qse=a("strong"),WFo=o("yoso"),HFo=o(" \u2014 "),$q=a("a"),UFo=o("YosoModel"),JFo=o(" (YOSO model)"),YFo=l(),Pp=a("p"),KFo=o("The model is set in evaluation mode by default using "),Wse=a("code"),ZFo=o("model.eval()"),evo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hse=a("code"),ovo=o("model.train()"),rvo=l(),v(Ip.$$.fragment),aIe=l(),Ci=a("h2"),qp=a("a"),Use=a("span"),v(Ly.$$.fragment),tvo=l(),Jse=a("span"),avo=o("AutoModelForPreTraining"),nIe=l(),xo=a("div"),v(xy.$$.fragment),nvo=l(),wi=a("p"),svo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kq=a("a"),lvo=o("from_pretrained()"),ivo=o(" class method or the "),Sq=a("a"),dvo=o("from_config()"),cvo=o(` class
method.`),mvo=l(),$y=a("p"),fvo=o("This class cannot be instantiated directly using "),Yse=a("code"),gvo=o("__init__()"),hvo=o(" (throws an error)."),uvo=l(),rt=a("div"),v(ky.$$.fragment),pvo=l(),Kse=a("p"),_vo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),bvo=l(),Ai=a("p"),Fvo=o(`Note:
Loading a model from its configuration file does `),Zse=a("strong"),vvo=o("not"),Tvo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rq=a("a"),Mvo=o("from_pretrained()"),Evo=o(" to load the model weights."),Cvo=l(),v(Np.$$.fragment),wvo=l(),Ue=a("div"),v(Sy.$$.fragment),Avo=l(),ele=a("p"),yvo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Lvo=l(),ya=a("p"),xvo=o("The model class to instantiate is selected based on the "),ole=a("code"),$vo=o("model_type"),kvo=o(` property of the config object (either
passed as an argument or loaded from `),rle=a("code"),Svo=o("pretrained_model_name_or_path"),Rvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tle=a("code"),Bvo=o("pretrained_model_name_or_path"),Pvo=o(":"),Ivo=l(),G=a("ul"),jp=a("li"),ale=a("strong"),qvo=o("albert"),Nvo=o(" \u2014 "),Bq=a("a"),jvo=o("AlbertForPreTraining"),Dvo=o(" (ALBERT model)"),Gvo=l(),Dp=a("li"),nle=a("strong"),Ovo=o("bart"),Vvo=o(" \u2014 "),Pq=a("a"),Xvo=o("BartForConditionalGeneration"),zvo=o(" (BART model)"),Qvo=l(),Gp=a("li"),sle=a("strong"),Wvo=o("bert"),Hvo=o(" \u2014 "),Iq=a("a"),Uvo=o("BertForPreTraining"),Jvo=o(" (BERT model)"),Yvo=l(),Op=a("li"),lle=a("strong"),Kvo=o("big_bird"),Zvo=o(" \u2014 "),qq=a("a"),e1o=o("BigBirdForPreTraining"),o1o=o(" (BigBird model)"),r1o=l(),Vp=a("li"),ile=a("strong"),t1o=o("camembert"),a1o=o(" \u2014 "),Nq=a("a"),n1o=o("CamembertForMaskedLM"),s1o=o(" (CamemBERT model)"),l1o=l(),Xp=a("li"),dle=a("strong"),i1o=o("ctrl"),d1o=o(" \u2014 "),jq=a("a"),c1o=o("CTRLLMHeadModel"),m1o=o(" (CTRL model)"),f1o=l(),zp=a("li"),cle=a("strong"),g1o=o("data2vec-text"),h1o=o(" \u2014 "),Dq=a("a"),u1o=o("Data2VecTextForMaskedLM"),p1o=o(" (Data2VecText model)"),_1o=l(),Qp=a("li"),mle=a("strong"),b1o=o("deberta"),F1o=o(" \u2014 "),Gq=a("a"),v1o=o("DebertaForMaskedLM"),T1o=o(" (DeBERTa model)"),M1o=l(),Wp=a("li"),fle=a("strong"),E1o=o("deberta-v2"),C1o=o(" \u2014 "),Oq=a("a"),w1o=o("DebertaV2ForMaskedLM"),A1o=o(" (DeBERTa-v2 model)"),y1o=l(),Hp=a("li"),gle=a("strong"),L1o=o("distilbert"),x1o=o(" \u2014 "),Vq=a("a"),$1o=o("DistilBertForMaskedLM"),k1o=o(" (DistilBERT model)"),S1o=l(),Up=a("li"),hle=a("strong"),R1o=o("electra"),B1o=o(" \u2014 "),Xq=a("a"),P1o=o("ElectraForPreTraining"),I1o=o(" (ELECTRA model)"),q1o=l(),Jp=a("li"),ule=a("strong"),N1o=o("flaubert"),j1o=o(" \u2014 "),zq=a("a"),D1o=o("FlaubertWithLMHeadModel"),G1o=o(" (FlauBERT model)"),O1o=l(),Yp=a("li"),ple=a("strong"),V1o=o("flava"),X1o=o(" \u2014 "),Qq=a("a"),z1o=o("FlavaForPreTraining"),Q1o=o(" (Flava model)"),W1o=l(),Kp=a("li"),_le=a("strong"),H1o=o("fnet"),U1o=o(" \u2014 "),Wq=a("a"),J1o=o("FNetForPreTraining"),Y1o=o(" (FNet model)"),K1o=l(),Zp=a("li"),ble=a("strong"),Z1o=o("fsmt"),eTo=o(" \u2014 "),Hq=a("a"),oTo=o("FSMTForConditionalGeneration"),rTo=o(" (FairSeq Machine-Translation model)"),tTo=l(),e_=a("li"),Fle=a("strong"),aTo=o("funnel"),nTo=o(" \u2014 "),Uq=a("a"),sTo=o("FunnelForPreTraining"),lTo=o(" (Funnel Transformer model)"),iTo=l(),o_=a("li"),vle=a("strong"),dTo=o("gpt2"),cTo=o(" \u2014 "),Jq=a("a"),mTo=o("GPT2LMHeadModel"),fTo=o(" (OpenAI GPT-2 model)"),gTo=l(),r_=a("li"),Tle=a("strong"),hTo=o("ibert"),uTo=o(" \u2014 "),Yq=a("a"),pTo=o("IBertForMaskedLM"),_To=o(" (I-BERT model)"),bTo=l(),t_=a("li"),Mle=a("strong"),FTo=o("layoutlm"),vTo=o(" \u2014 "),Kq=a("a"),TTo=o("LayoutLMForMaskedLM"),MTo=o(" (LayoutLM model)"),ETo=l(),a_=a("li"),Ele=a("strong"),CTo=o("longformer"),wTo=o(" \u2014 "),Zq=a("a"),ATo=o("LongformerForMaskedLM"),yTo=o(" (Longformer model)"),LTo=l(),n_=a("li"),Cle=a("strong"),xTo=o("lxmert"),$To=o(" \u2014 "),eN=a("a"),kTo=o("LxmertForPreTraining"),STo=o(" (LXMERT model)"),RTo=l(),s_=a("li"),wle=a("strong"),BTo=o("megatron-bert"),PTo=o(" \u2014 "),oN=a("a"),ITo=o("MegatronBertForPreTraining"),qTo=o(" (MegatronBert model)"),NTo=l(),l_=a("li"),Ale=a("strong"),jTo=o("mobilebert"),DTo=o(" \u2014 "),rN=a("a"),GTo=o("MobileBertForPreTraining"),OTo=o(" (MobileBERT model)"),VTo=l(),i_=a("li"),yle=a("strong"),XTo=o("mpnet"),zTo=o(" \u2014 "),tN=a("a"),QTo=o("MPNetForMaskedLM"),WTo=o(" (MPNet model)"),HTo=l(),d_=a("li"),Lle=a("strong"),UTo=o("openai-gpt"),JTo=o(" \u2014 "),aN=a("a"),YTo=o("OpenAIGPTLMHeadModel"),KTo=o(" (OpenAI GPT model)"),ZTo=l(),c_=a("li"),xle=a("strong"),eMo=o("retribert"),oMo=o(" \u2014 "),nN=a("a"),rMo=o("RetriBertModel"),tMo=o(" (RetriBERT model)"),aMo=l(),m_=a("li"),$le=a("strong"),nMo=o("roberta"),sMo=o(" \u2014 "),sN=a("a"),lMo=o("RobertaForMaskedLM"),iMo=o(" (RoBERTa model)"),dMo=l(),f_=a("li"),kle=a("strong"),cMo=o("squeezebert"),mMo=o(" \u2014 "),lN=a("a"),fMo=o("SqueezeBertForMaskedLM"),gMo=o(" (SqueezeBERT model)"),hMo=l(),g_=a("li"),Sle=a("strong"),uMo=o("t5"),pMo=o(" \u2014 "),iN=a("a"),_Mo=o("T5ForConditionalGeneration"),bMo=o(" (T5 model)"),FMo=l(),h_=a("li"),Rle=a("strong"),vMo=o("tapas"),TMo=o(" \u2014 "),dN=a("a"),MMo=o("TapasForMaskedLM"),EMo=o(" (TAPAS model)"),CMo=l(),u_=a("li"),Ble=a("strong"),wMo=o("transfo-xl"),AMo=o(" \u2014 "),cN=a("a"),yMo=o("TransfoXLLMHeadModel"),LMo=o(" (Transformer-XL model)"),xMo=l(),p_=a("li"),Ple=a("strong"),$Mo=o("unispeech"),kMo=o(" \u2014 "),mN=a("a"),SMo=o("UniSpeechForPreTraining"),RMo=o(" (UniSpeech model)"),BMo=l(),__=a("li"),Ile=a("strong"),PMo=o("unispeech-sat"),IMo=o(" \u2014 "),fN=a("a"),qMo=o("UniSpeechSatForPreTraining"),NMo=o(" (UniSpeechSat model)"),jMo=l(),b_=a("li"),qle=a("strong"),DMo=o("visual_bert"),GMo=o(" \u2014 "),gN=a("a"),OMo=o("VisualBertForPreTraining"),VMo=o(" (VisualBert model)"),XMo=l(),F_=a("li"),Nle=a("strong"),zMo=o("vit_mae"),QMo=o(" \u2014 "),hN=a("a"),WMo=o("ViTMAEForPreTraining"),HMo=o(" (ViTMAE model)"),UMo=l(),v_=a("li"),jle=a("strong"),JMo=o("wav2vec2"),YMo=o(" \u2014 "),uN=a("a"),KMo=o("Wav2Vec2ForPreTraining"),ZMo=o(" (Wav2Vec2 model)"),e4o=l(),T_=a("li"),Dle=a("strong"),o4o=o("xlm"),r4o=o(" \u2014 "),pN=a("a"),t4o=o("XLMWithLMHeadModel"),a4o=o(" (XLM model)"),n4o=l(),M_=a("li"),Gle=a("strong"),s4o=o("xlm-roberta"),l4o=o(" \u2014 "),_N=a("a"),i4o=o("XLMRobertaForMaskedLM"),d4o=o(" (XLM-RoBERTa model)"),c4o=l(),E_=a("li"),Ole=a("strong"),m4o=o("xlm-roberta-xl"),f4o=o(" \u2014 "),bN=a("a"),g4o=o("XLMRobertaXLForMaskedLM"),h4o=o(" (XLM-RoBERTa-XL model)"),u4o=l(),C_=a("li"),Vle=a("strong"),p4o=o("xlnet"),_4o=o(" \u2014 "),FN=a("a"),b4o=o("XLNetLMHeadModel"),F4o=o(" (XLNet model)"),v4o=l(),w_=a("p"),T4o=o("The model is set in evaluation mode by default using "),Xle=a("code"),M4o=o("model.eval()"),E4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zle=a("code"),C4o=o("model.train()"),w4o=l(),v(A_.$$.fragment),sIe=l(),yi=a("h2"),y_=a("a"),Qle=a("span"),v(Ry.$$.fragment),A4o=l(),Wle=a("span"),y4o=o("AutoModelForCausalLM"),lIe=l(),$o=a("div"),v(By.$$.fragment),L4o=l(),Li=a("p"),x4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vN=a("a"),$4o=o("from_pretrained()"),k4o=o(" class method or the "),TN=a("a"),S4o=o("from_config()"),R4o=o(` class
method.`),B4o=l(),Py=a("p"),P4o=o("This class cannot be instantiated directly using "),Hle=a("code"),I4o=o("__init__()"),q4o=o(" (throws an error)."),N4o=l(),tt=a("div"),v(Iy.$$.fragment),j4o=l(),Ule=a("p"),D4o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),G4o=l(),xi=a("p"),O4o=o(`Note:
Loading a model from its configuration file does `),Jle=a("strong"),V4o=o("not"),X4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MN=a("a"),z4o=o("from_pretrained()"),Q4o=o(" to load the model weights."),W4o=l(),v(L_.$$.fragment),H4o=l(),Je=a("div"),v(qy.$$.fragment),U4o=l(),Yle=a("p"),J4o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Y4o=l(),La=a("p"),K4o=o("The model class to instantiate is selected based on the "),Kle=a("code"),Z4o=o("model_type"),eEo=o(` property of the config object (either
passed as an argument or loaded from `),Zle=a("code"),oEo=o("pretrained_model_name_or_path"),rEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eie=a("code"),tEo=o("pretrained_model_name_or_path"),aEo=o(":"),nEo=l(),z=a("ul"),x_=a("li"),oie=a("strong"),sEo=o("bart"),lEo=o(" \u2014 "),EN=a("a"),iEo=o("BartForCausalLM"),dEo=o(" (BART model)"),cEo=l(),$_=a("li"),rie=a("strong"),mEo=o("bert"),fEo=o(" \u2014 "),CN=a("a"),gEo=o("BertLMHeadModel"),hEo=o(" (BERT model)"),uEo=l(),k_=a("li"),tie=a("strong"),pEo=o("bert-generation"),_Eo=o(" \u2014 "),wN=a("a"),bEo=o("BertGenerationDecoder"),FEo=o(" (Bert Generation model)"),vEo=l(),S_=a("li"),aie=a("strong"),TEo=o("big_bird"),MEo=o(" \u2014 "),AN=a("a"),EEo=o("BigBirdForCausalLM"),CEo=o(" (BigBird model)"),wEo=l(),R_=a("li"),nie=a("strong"),AEo=o("bigbird_pegasus"),yEo=o(" \u2014 "),yN=a("a"),LEo=o("BigBirdPegasusForCausalLM"),xEo=o(" (BigBirdPegasus model)"),$Eo=l(),B_=a("li"),sie=a("strong"),kEo=o("blenderbot"),SEo=o(" \u2014 "),LN=a("a"),REo=o("BlenderbotForCausalLM"),BEo=o(" (Blenderbot model)"),PEo=l(),P_=a("li"),lie=a("strong"),IEo=o("blenderbot-small"),qEo=o(" \u2014 "),xN=a("a"),NEo=o("BlenderbotSmallForCausalLM"),jEo=o(" (BlenderbotSmall model)"),DEo=l(),I_=a("li"),iie=a("strong"),GEo=o("camembert"),OEo=o(" \u2014 "),$N=a("a"),VEo=o("CamembertForCausalLM"),XEo=o(" (CamemBERT model)"),zEo=l(),q_=a("li"),die=a("strong"),QEo=o("ctrl"),WEo=o(" \u2014 "),kN=a("a"),HEo=o("CTRLLMHeadModel"),UEo=o(" (CTRL model)"),JEo=l(),N_=a("li"),cie=a("strong"),YEo=o("data2vec-text"),KEo=o(" \u2014 "),SN=a("a"),ZEo=o("Data2VecTextForCausalLM"),e5o=o(" (Data2VecText model)"),o5o=l(),j_=a("li"),mie=a("strong"),r5o=o("electra"),t5o=o(" \u2014 "),RN=a("a"),a5o=o("ElectraForCausalLM"),n5o=o(" (ELECTRA model)"),s5o=l(),D_=a("li"),fie=a("strong"),l5o=o("gpt2"),i5o=o(" \u2014 "),BN=a("a"),d5o=o("GPT2LMHeadModel"),c5o=o(" (OpenAI GPT-2 model)"),m5o=l(),G_=a("li"),gie=a("strong"),f5o=o("gpt_neo"),g5o=o(" \u2014 "),PN=a("a"),h5o=o("GPTNeoForCausalLM"),u5o=o(" (GPT Neo model)"),p5o=l(),O_=a("li"),hie=a("strong"),_5o=o("gptj"),b5o=o(" \u2014 "),IN=a("a"),F5o=o("GPTJForCausalLM"),v5o=o(" (GPT-J model)"),T5o=l(),V_=a("li"),uie=a("strong"),M5o=o("marian"),E5o=o(" \u2014 "),qN=a("a"),C5o=o("MarianForCausalLM"),w5o=o(" (Marian model)"),A5o=l(),X_=a("li"),pie=a("strong"),y5o=o("mbart"),L5o=o(" \u2014 "),NN=a("a"),x5o=o("MBartForCausalLM"),$5o=o(" (mBART model)"),k5o=l(),z_=a("li"),_ie=a("strong"),S5o=o("megatron-bert"),R5o=o(" \u2014 "),jN=a("a"),B5o=o("MegatronBertForCausalLM"),P5o=o(" (MegatronBert model)"),I5o=l(),Q_=a("li"),bie=a("strong"),q5o=o("openai-gpt"),N5o=o(" \u2014 "),DN=a("a"),j5o=o("OpenAIGPTLMHeadModel"),D5o=o(" (OpenAI GPT model)"),G5o=l(),W_=a("li"),Fie=a("strong"),O5o=o("opt"),V5o=o(" \u2014 "),GN=a("a"),X5o=o("OPTForCausalLM"),z5o=o(" (OPT model)"),Q5o=l(),H_=a("li"),vie=a("strong"),W5o=o("pegasus"),H5o=o(" \u2014 "),ON=a("a"),U5o=o("PegasusForCausalLM"),J5o=o(" (Pegasus model)"),Y5o=l(),U_=a("li"),Tie=a("strong"),K5o=o("plbart"),Z5o=o(" \u2014 "),VN=a("a"),eCo=o("PLBartForCausalLM"),oCo=o(" (PLBart model)"),rCo=l(),J_=a("li"),Mie=a("strong"),tCo=o("prophetnet"),aCo=o(" \u2014 "),XN=a("a"),nCo=o("ProphetNetForCausalLM"),sCo=o(" (ProphetNet model)"),lCo=l(),Y_=a("li"),Eie=a("strong"),iCo=o("qdqbert"),dCo=o(" \u2014 "),zN=a("a"),cCo=o("QDQBertLMHeadModel"),mCo=o(" (QDQBert model)"),fCo=l(),K_=a("li"),Cie=a("strong"),gCo=o("reformer"),hCo=o(" \u2014 "),QN=a("a"),uCo=o("ReformerModelWithLMHead"),pCo=o(" (Reformer model)"),_Co=l(),Z_=a("li"),wie=a("strong"),bCo=o("rembert"),FCo=o(" \u2014 "),WN=a("a"),vCo=o("RemBertForCausalLM"),TCo=o(" (RemBERT model)"),MCo=l(),eb=a("li"),Aie=a("strong"),ECo=o("roberta"),CCo=o(" \u2014 "),HN=a("a"),wCo=o("RobertaForCausalLM"),ACo=o(" (RoBERTa model)"),yCo=l(),ob=a("li"),yie=a("strong"),LCo=o("roformer"),xCo=o(" \u2014 "),UN=a("a"),$Co=o("RoFormerForCausalLM"),kCo=o(" (RoFormer model)"),SCo=l(),rb=a("li"),Lie=a("strong"),RCo=o("speech_to_text_2"),BCo=o(" \u2014 "),JN=a("a"),PCo=o("Speech2Text2ForCausalLM"),ICo=o(" (Speech2Text2 model)"),qCo=l(),tb=a("li"),xie=a("strong"),NCo=o("transfo-xl"),jCo=o(" \u2014 "),YN=a("a"),DCo=o("TransfoXLLMHeadModel"),GCo=o(" (Transformer-XL model)"),OCo=l(),ab=a("li"),$ie=a("strong"),VCo=o("trocr"),XCo=o(" \u2014 "),KN=a("a"),zCo=o("TrOCRForCausalLM"),QCo=o(" (TrOCR model)"),WCo=l(),nb=a("li"),kie=a("strong"),HCo=o("xglm"),UCo=o(" \u2014 "),ZN=a("a"),JCo=o("XGLMForCausalLM"),YCo=o(" (XGLM model)"),KCo=l(),sb=a("li"),Sie=a("strong"),ZCo=o("xlm"),e3o=o(" \u2014 "),ej=a("a"),o3o=o("XLMWithLMHeadModel"),r3o=o(" (XLM model)"),t3o=l(),lb=a("li"),Rie=a("strong"),a3o=o("xlm-prophetnet"),n3o=o(" \u2014 "),oj=a("a"),s3o=o("XLMProphetNetForCausalLM"),l3o=o(" (XLMProphetNet model)"),i3o=l(),ib=a("li"),Bie=a("strong"),d3o=o("xlm-roberta"),c3o=o(" \u2014 "),rj=a("a"),m3o=o("XLMRobertaForCausalLM"),f3o=o(" (XLM-RoBERTa model)"),g3o=l(),db=a("li"),Pie=a("strong"),h3o=o("xlm-roberta-xl"),u3o=o(" \u2014 "),tj=a("a"),p3o=o("XLMRobertaXLForCausalLM"),_3o=o(" (XLM-RoBERTa-XL model)"),b3o=l(),cb=a("li"),Iie=a("strong"),F3o=o("xlnet"),v3o=o(" \u2014 "),aj=a("a"),T3o=o("XLNetLMHeadModel"),M3o=o(" (XLNet model)"),E3o=l(),mb=a("p"),C3o=o("The model is set in evaluation mode by default using "),qie=a("code"),w3o=o("model.eval()"),A3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nie=a("code"),y3o=o("model.train()"),L3o=l(),v(fb.$$.fragment),iIe=l(),$i=a("h2"),gb=a("a"),jie=a("span"),v(Ny.$$.fragment),x3o=l(),Die=a("span"),$3o=o("AutoModelForMaskedLM"),dIe=l(),ko=a("div"),v(jy.$$.fragment),k3o=l(),ki=a("p"),S3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),nj=a("a"),R3o=o("from_pretrained()"),B3o=o(" class method or the "),sj=a("a"),P3o=o("from_config()"),I3o=o(` class
method.`),q3o=l(),Dy=a("p"),N3o=o("This class cannot be instantiated directly using "),Gie=a("code"),j3o=o("__init__()"),D3o=o(" (throws an error)."),G3o=l(),at=a("div"),v(Gy.$$.fragment),O3o=l(),Oie=a("p"),V3o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),X3o=l(),Si=a("p"),z3o=o(`Note:
Loading a model from its configuration file does `),Vie=a("strong"),Q3o=o("not"),W3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lj=a("a"),H3o=o("from_pretrained()"),U3o=o(" to load the model weights."),J3o=l(),v(hb.$$.fragment),Y3o=l(),Ye=a("div"),v(Oy.$$.fragment),K3o=l(),Xie=a("p"),Z3o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ewo=l(),xa=a("p"),owo=o("The model class to instantiate is selected based on the "),zie=a("code"),rwo=o("model_type"),two=o(` property of the config object (either
passed as an argument or loaded from `),Qie=a("code"),awo=o("pretrained_model_name_or_path"),nwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wie=a("code"),swo=o("pretrained_model_name_or_path"),lwo=o(":"),iwo=l(),Q=a("ul"),ub=a("li"),Hie=a("strong"),dwo=o("albert"),cwo=o(" \u2014 "),ij=a("a"),mwo=o("AlbertForMaskedLM"),fwo=o(" (ALBERT model)"),gwo=l(),pb=a("li"),Uie=a("strong"),hwo=o("bart"),uwo=o(" \u2014 "),dj=a("a"),pwo=o("BartForConditionalGeneration"),_wo=o(" (BART model)"),bwo=l(),_b=a("li"),Jie=a("strong"),Fwo=o("bert"),vwo=o(" \u2014 "),cj=a("a"),Two=o("BertForMaskedLM"),Mwo=o(" (BERT model)"),Ewo=l(),bb=a("li"),Yie=a("strong"),Cwo=o("big_bird"),wwo=o(" \u2014 "),mj=a("a"),Awo=o("BigBirdForMaskedLM"),ywo=o(" (BigBird model)"),Lwo=l(),Fb=a("li"),Kie=a("strong"),xwo=o("camembert"),$wo=o(" \u2014 "),fj=a("a"),kwo=o("CamembertForMaskedLM"),Swo=o(" (CamemBERT model)"),Rwo=l(),vb=a("li"),Zie=a("strong"),Bwo=o("convbert"),Pwo=o(" \u2014 "),gj=a("a"),Iwo=o("ConvBertForMaskedLM"),qwo=o(" (ConvBERT model)"),Nwo=l(),Tb=a("li"),ede=a("strong"),jwo=o("data2vec-text"),Dwo=o(" \u2014 "),hj=a("a"),Gwo=o("Data2VecTextForMaskedLM"),Owo=o(" (Data2VecText model)"),Vwo=l(),Mb=a("li"),ode=a("strong"),Xwo=o("deberta"),zwo=o(" \u2014 "),uj=a("a"),Qwo=o("DebertaForMaskedLM"),Wwo=o(" (DeBERTa model)"),Hwo=l(),Eb=a("li"),rde=a("strong"),Uwo=o("deberta-v2"),Jwo=o(" \u2014 "),pj=a("a"),Ywo=o("DebertaV2ForMaskedLM"),Kwo=o(" (DeBERTa-v2 model)"),Zwo=l(),Cb=a("li"),tde=a("strong"),eAo=o("distilbert"),oAo=o(" \u2014 "),_j=a("a"),rAo=o("DistilBertForMaskedLM"),tAo=o(" (DistilBERT model)"),aAo=l(),wb=a("li"),ade=a("strong"),nAo=o("electra"),sAo=o(" \u2014 "),bj=a("a"),lAo=o("ElectraForMaskedLM"),iAo=o(" (ELECTRA model)"),dAo=l(),Ab=a("li"),nde=a("strong"),cAo=o("flaubert"),mAo=o(" \u2014 "),Fj=a("a"),fAo=o("FlaubertWithLMHeadModel"),gAo=o(" (FlauBERT model)"),hAo=l(),yb=a("li"),sde=a("strong"),uAo=o("fnet"),pAo=o(" \u2014 "),vj=a("a"),_Ao=o("FNetForMaskedLM"),bAo=o(" (FNet model)"),FAo=l(),Lb=a("li"),lde=a("strong"),vAo=o("funnel"),TAo=o(" \u2014 "),Tj=a("a"),MAo=o("FunnelForMaskedLM"),EAo=o(" (Funnel Transformer model)"),CAo=l(),xb=a("li"),ide=a("strong"),wAo=o("ibert"),AAo=o(" \u2014 "),Mj=a("a"),yAo=o("IBertForMaskedLM"),LAo=o(" (I-BERT model)"),xAo=l(),$b=a("li"),dde=a("strong"),$Ao=o("layoutlm"),kAo=o(" \u2014 "),Ej=a("a"),SAo=o("LayoutLMForMaskedLM"),RAo=o(" (LayoutLM model)"),BAo=l(),kb=a("li"),cde=a("strong"),PAo=o("longformer"),IAo=o(" \u2014 "),Cj=a("a"),qAo=o("LongformerForMaskedLM"),NAo=o(" (Longformer model)"),jAo=l(),Sb=a("li"),mde=a("strong"),DAo=o("mbart"),GAo=o(" \u2014 "),wj=a("a"),OAo=o("MBartForConditionalGeneration"),VAo=o(" (mBART model)"),XAo=l(),Rb=a("li"),fde=a("strong"),zAo=o("megatron-bert"),QAo=o(" \u2014 "),Aj=a("a"),WAo=o("MegatronBertForMaskedLM"),HAo=o(" (MegatronBert model)"),UAo=l(),Bb=a("li"),gde=a("strong"),JAo=o("mobilebert"),YAo=o(" \u2014 "),yj=a("a"),KAo=o("MobileBertForMaskedLM"),ZAo=o(" (MobileBERT model)"),e6o=l(),Pb=a("li"),hde=a("strong"),o6o=o("mpnet"),r6o=o(" \u2014 "),Lj=a("a"),t6o=o("MPNetForMaskedLM"),a6o=o(" (MPNet model)"),n6o=l(),Ib=a("li"),ude=a("strong"),s6o=o("nystromformer"),l6o=o(" \u2014 "),xj=a("a"),i6o=o("NystromformerForMaskedLM"),d6o=o(" (Nystromformer model)"),c6o=l(),qb=a("li"),pde=a("strong"),m6o=o("perceiver"),f6o=o(" \u2014 "),$j=a("a"),g6o=o("PerceiverForMaskedLM"),h6o=o(" (Perceiver model)"),u6o=l(),Nb=a("li"),_de=a("strong"),p6o=o("qdqbert"),_6o=o(" \u2014 "),kj=a("a"),b6o=o("QDQBertForMaskedLM"),F6o=o(" (QDQBert model)"),v6o=l(),jb=a("li"),bde=a("strong"),T6o=o("reformer"),M6o=o(" \u2014 "),Sj=a("a"),E6o=o("ReformerForMaskedLM"),C6o=o(" (Reformer model)"),w6o=l(),Db=a("li"),Fde=a("strong"),A6o=o("rembert"),y6o=o(" \u2014 "),Rj=a("a"),L6o=o("RemBertForMaskedLM"),x6o=o(" (RemBERT model)"),$6o=l(),Gb=a("li"),vde=a("strong"),k6o=o("roberta"),S6o=o(" \u2014 "),Bj=a("a"),R6o=o("RobertaForMaskedLM"),B6o=o(" (RoBERTa model)"),P6o=l(),Ob=a("li"),Tde=a("strong"),I6o=o("roformer"),q6o=o(" \u2014 "),Pj=a("a"),N6o=o("RoFormerForMaskedLM"),j6o=o(" (RoFormer model)"),D6o=l(),Vb=a("li"),Mde=a("strong"),G6o=o("squeezebert"),O6o=o(" \u2014 "),Ij=a("a"),V6o=o("SqueezeBertForMaskedLM"),X6o=o(" (SqueezeBERT model)"),z6o=l(),Xb=a("li"),Ede=a("strong"),Q6o=o("tapas"),W6o=o(" \u2014 "),qj=a("a"),H6o=o("TapasForMaskedLM"),U6o=o(" (TAPAS model)"),J6o=l(),zb=a("li"),Cde=a("strong"),Y6o=o("wav2vec2"),K6o=o(" \u2014 "),wde=a("code"),Z6o=o("Wav2Vec2ForMaskedLM"),e0o=o(" (Wav2Vec2 model)"),o0o=l(),Qb=a("li"),Ade=a("strong"),r0o=o("xlm"),t0o=o(" \u2014 "),Nj=a("a"),a0o=o("XLMWithLMHeadModel"),n0o=o(" (XLM model)"),s0o=l(),Wb=a("li"),yde=a("strong"),l0o=o("xlm-roberta"),i0o=o(" \u2014 "),jj=a("a"),d0o=o("XLMRobertaForMaskedLM"),c0o=o(" (XLM-RoBERTa model)"),m0o=l(),Hb=a("li"),Lde=a("strong"),f0o=o("xlm-roberta-xl"),g0o=o(" \u2014 "),Dj=a("a"),h0o=o("XLMRobertaXLForMaskedLM"),u0o=o(" (XLM-RoBERTa-XL model)"),p0o=l(),Ub=a("li"),xde=a("strong"),_0o=o("yoso"),b0o=o(" \u2014 "),Gj=a("a"),F0o=o("YosoForMaskedLM"),v0o=o(" (YOSO model)"),T0o=l(),Jb=a("p"),M0o=o("The model is set in evaluation mode by default using "),$de=a("code"),E0o=o("model.eval()"),C0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kde=a("code"),w0o=o("model.train()"),A0o=l(),v(Yb.$$.fragment),cIe=l(),Ri=a("h2"),Kb=a("a"),Sde=a("span"),v(Vy.$$.fragment),y0o=l(),Rde=a("span"),L0o=o("AutoModelForSeq2SeqLM"),mIe=l(),So=a("div"),v(Xy.$$.fragment),x0o=l(),Bi=a("p"),$0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Oj=a("a"),k0o=o("from_pretrained()"),S0o=o(" class method or the "),Vj=a("a"),R0o=o("from_config()"),B0o=o(` class
method.`),P0o=l(),zy=a("p"),I0o=o("This class cannot be instantiated directly using "),Bde=a("code"),q0o=o("__init__()"),N0o=o(" (throws an error)."),j0o=l(),nt=a("div"),v(Qy.$$.fragment),D0o=l(),Pde=a("p"),G0o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),O0o=l(),Pi=a("p"),V0o=o(`Note:
Loading a model from its configuration file does `),Ide=a("strong"),X0o=o("not"),z0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xj=a("a"),Q0o=o("from_pretrained()"),W0o=o(" to load the model weights."),H0o=l(),v(Zb.$$.fragment),U0o=l(),Ke=a("div"),v(Wy.$$.fragment),J0o=l(),qde=a("p"),Y0o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),K0o=l(),$a=a("p"),Z0o=o("The model class to instantiate is selected based on the "),Nde=a("code"),eyo=o("model_type"),oyo=o(` property of the config object (either
passed as an argument or loaded from `),jde=a("code"),ryo=o("pretrained_model_name_or_path"),tyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dde=a("code"),ayo=o("pretrained_model_name_or_path"),nyo=o(":"),syo=l(),he=a("ul"),e2=a("li"),Gde=a("strong"),lyo=o("bart"),iyo=o(" \u2014 "),zj=a("a"),dyo=o("BartForConditionalGeneration"),cyo=o(" (BART model)"),myo=l(),o2=a("li"),Ode=a("strong"),fyo=o("bigbird_pegasus"),gyo=o(" \u2014 "),Qj=a("a"),hyo=o("BigBirdPegasusForConditionalGeneration"),uyo=o(" (BigBirdPegasus model)"),pyo=l(),r2=a("li"),Vde=a("strong"),_yo=o("blenderbot"),byo=o(" \u2014 "),Wj=a("a"),Fyo=o("BlenderbotForConditionalGeneration"),vyo=o(" (Blenderbot model)"),Tyo=l(),t2=a("li"),Xde=a("strong"),Myo=o("blenderbot-small"),Eyo=o(" \u2014 "),Hj=a("a"),Cyo=o("BlenderbotSmallForConditionalGeneration"),wyo=o(" (BlenderbotSmall model)"),Ayo=l(),a2=a("li"),zde=a("strong"),yyo=o("encoder-decoder"),Lyo=o(" \u2014 "),Uj=a("a"),xyo=o("EncoderDecoderModel"),$yo=o(" (Encoder decoder model)"),kyo=l(),n2=a("li"),Qde=a("strong"),Syo=o("fsmt"),Ryo=o(" \u2014 "),Jj=a("a"),Byo=o("FSMTForConditionalGeneration"),Pyo=o(" (FairSeq Machine-Translation model)"),Iyo=l(),s2=a("li"),Wde=a("strong"),qyo=o("led"),Nyo=o(" \u2014 "),Yj=a("a"),jyo=o("LEDForConditionalGeneration"),Dyo=o(" (LED model)"),Gyo=l(),l2=a("li"),Hde=a("strong"),Oyo=o("m2m_100"),Vyo=o(" \u2014 "),Kj=a("a"),Xyo=o("M2M100ForConditionalGeneration"),zyo=o(" (M2M100 model)"),Qyo=l(),i2=a("li"),Ude=a("strong"),Wyo=o("marian"),Hyo=o(" \u2014 "),Zj=a("a"),Uyo=o("MarianMTModel"),Jyo=o(" (Marian model)"),Yyo=l(),d2=a("li"),Jde=a("strong"),Kyo=o("mbart"),Zyo=o(" \u2014 "),eD=a("a"),eLo=o("MBartForConditionalGeneration"),oLo=o(" (mBART model)"),rLo=l(),c2=a("li"),Yde=a("strong"),tLo=o("mt5"),aLo=o(" \u2014 "),oD=a("a"),nLo=o("MT5ForConditionalGeneration"),sLo=o(" (mT5 model)"),lLo=l(),m2=a("li"),Kde=a("strong"),iLo=o("pegasus"),dLo=o(" \u2014 "),rD=a("a"),cLo=o("PegasusForConditionalGeneration"),mLo=o(" (Pegasus model)"),fLo=l(),f2=a("li"),Zde=a("strong"),gLo=o("plbart"),hLo=o(" \u2014 "),tD=a("a"),uLo=o("PLBartForConditionalGeneration"),pLo=o(" (PLBart model)"),_Lo=l(),g2=a("li"),ece=a("strong"),bLo=o("prophetnet"),FLo=o(" \u2014 "),aD=a("a"),vLo=o("ProphetNetForConditionalGeneration"),TLo=o(" (ProphetNet model)"),MLo=l(),h2=a("li"),oce=a("strong"),ELo=o("t5"),CLo=o(" \u2014 "),nD=a("a"),wLo=o("T5ForConditionalGeneration"),ALo=o(" (T5 model)"),yLo=l(),u2=a("li"),rce=a("strong"),LLo=o("tapex"),xLo=o(" \u2014 "),sD=a("a"),$Lo=o("BartForConditionalGeneration"),kLo=o(" (TAPEX model)"),SLo=l(),p2=a("li"),tce=a("strong"),RLo=o("xlm-prophetnet"),BLo=o(" \u2014 "),lD=a("a"),PLo=o("XLMProphetNetForConditionalGeneration"),ILo=o(" (XLMProphetNet model)"),qLo=l(),_2=a("p"),NLo=o("The model is set in evaluation mode by default using "),ace=a("code"),jLo=o("model.eval()"),DLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nce=a("code"),GLo=o("model.train()"),OLo=l(),v(b2.$$.fragment),fIe=l(),Ii=a("h2"),F2=a("a"),sce=a("span"),v(Hy.$$.fragment),VLo=l(),lce=a("span"),XLo=o("AutoModelForSequenceClassification"),gIe=l(),Ro=a("div"),v(Uy.$$.fragment),zLo=l(),qi=a("p"),QLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iD=a("a"),WLo=o("from_pretrained()"),HLo=o(" class method or the "),dD=a("a"),ULo=o("from_config()"),JLo=o(` class
method.`),YLo=l(),Jy=a("p"),KLo=o("This class cannot be instantiated directly using "),ice=a("code"),ZLo=o("__init__()"),e8o=o(" (throws an error)."),o8o=l(),st=a("div"),v(Yy.$$.fragment),r8o=l(),dce=a("p"),t8o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),a8o=l(),Ni=a("p"),n8o=o(`Note:
Loading a model from its configuration file does `),cce=a("strong"),s8o=o("not"),l8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cD=a("a"),i8o=o("from_pretrained()"),d8o=o(" to load the model weights."),c8o=l(),v(v2.$$.fragment),m8o=l(),Ze=a("div"),v(Ky.$$.fragment),f8o=l(),mce=a("p"),g8o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),h8o=l(),ka=a("p"),u8o=o("The model class to instantiate is selected based on the "),fce=a("code"),p8o=o("model_type"),_8o=o(` property of the config object (either
passed as an argument or loaded from `),gce=a("code"),b8o=o("pretrained_model_name_or_path"),F8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hce=a("code"),v8o=o("pretrained_model_name_or_path"),T8o=o(":"),M8o=l(),q=a("ul"),T2=a("li"),uce=a("strong"),E8o=o("albert"),C8o=o(" \u2014 "),mD=a("a"),w8o=o("AlbertForSequenceClassification"),A8o=o(" (ALBERT model)"),y8o=l(),M2=a("li"),pce=a("strong"),L8o=o("bart"),x8o=o(" \u2014 "),fD=a("a"),$8o=o("BartForSequenceClassification"),k8o=o(" (BART model)"),S8o=l(),E2=a("li"),_ce=a("strong"),R8o=o("bert"),B8o=o(" \u2014 "),gD=a("a"),P8o=o("BertForSequenceClassification"),I8o=o(" (BERT model)"),q8o=l(),C2=a("li"),bce=a("strong"),N8o=o("big_bird"),j8o=o(" \u2014 "),hD=a("a"),D8o=o("BigBirdForSequenceClassification"),G8o=o(" (BigBird model)"),O8o=l(),w2=a("li"),Fce=a("strong"),V8o=o("bigbird_pegasus"),X8o=o(" \u2014 "),uD=a("a"),z8o=o("BigBirdPegasusForSequenceClassification"),Q8o=o(" (BigBirdPegasus model)"),W8o=l(),A2=a("li"),vce=a("strong"),H8o=o("camembert"),U8o=o(" \u2014 "),pD=a("a"),J8o=o("CamembertForSequenceClassification"),Y8o=o(" (CamemBERT model)"),K8o=l(),y2=a("li"),Tce=a("strong"),Z8o=o("canine"),exo=o(" \u2014 "),_D=a("a"),oxo=o("CanineForSequenceClassification"),rxo=o(" (Canine model)"),txo=l(),L2=a("li"),Mce=a("strong"),axo=o("convbert"),nxo=o(" \u2014 "),bD=a("a"),sxo=o("ConvBertForSequenceClassification"),lxo=o(" (ConvBERT model)"),ixo=l(),x2=a("li"),Ece=a("strong"),dxo=o("ctrl"),cxo=o(" \u2014 "),FD=a("a"),mxo=o("CTRLForSequenceClassification"),fxo=o(" (CTRL model)"),gxo=l(),$2=a("li"),Cce=a("strong"),hxo=o("data2vec-text"),uxo=o(" \u2014 "),vD=a("a"),pxo=o("Data2VecTextForSequenceClassification"),_xo=o(" (Data2VecText model)"),bxo=l(),k2=a("li"),wce=a("strong"),Fxo=o("deberta"),vxo=o(" \u2014 "),TD=a("a"),Txo=o("DebertaForSequenceClassification"),Mxo=o(" (DeBERTa model)"),Exo=l(),S2=a("li"),Ace=a("strong"),Cxo=o("deberta-v2"),wxo=o(" \u2014 "),MD=a("a"),Axo=o("DebertaV2ForSequenceClassification"),yxo=o(" (DeBERTa-v2 model)"),Lxo=l(),R2=a("li"),yce=a("strong"),xxo=o("distilbert"),$xo=o(" \u2014 "),ED=a("a"),kxo=o("DistilBertForSequenceClassification"),Sxo=o(" (DistilBERT model)"),Rxo=l(),B2=a("li"),Lce=a("strong"),Bxo=o("electra"),Pxo=o(" \u2014 "),CD=a("a"),Ixo=o("ElectraForSequenceClassification"),qxo=o(" (ELECTRA model)"),Nxo=l(),P2=a("li"),xce=a("strong"),jxo=o("flaubert"),Dxo=o(" \u2014 "),wD=a("a"),Gxo=o("FlaubertForSequenceClassification"),Oxo=o(" (FlauBERT model)"),Vxo=l(),I2=a("li"),$ce=a("strong"),Xxo=o("fnet"),zxo=o(" \u2014 "),AD=a("a"),Qxo=o("FNetForSequenceClassification"),Wxo=o(" (FNet model)"),Hxo=l(),q2=a("li"),kce=a("strong"),Uxo=o("funnel"),Jxo=o(" \u2014 "),yD=a("a"),Yxo=o("FunnelForSequenceClassification"),Kxo=o(" (Funnel Transformer model)"),Zxo=l(),N2=a("li"),Sce=a("strong"),e7o=o("gpt2"),o7o=o(" \u2014 "),LD=a("a"),r7o=o("GPT2ForSequenceClassification"),t7o=o(" (OpenAI GPT-2 model)"),a7o=l(),j2=a("li"),Rce=a("strong"),n7o=o("gpt_neo"),s7o=o(" \u2014 "),xD=a("a"),l7o=o("GPTNeoForSequenceClassification"),i7o=o(" (GPT Neo model)"),d7o=l(),D2=a("li"),Bce=a("strong"),c7o=o("gptj"),m7o=o(" \u2014 "),$D=a("a"),f7o=o("GPTJForSequenceClassification"),g7o=o(" (GPT-J model)"),h7o=l(),G2=a("li"),Pce=a("strong"),u7o=o("ibert"),p7o=o(" \u2014 "),kD=a("a"),_7o=o("IBertForSequenceClassification"),b7o=o(" (I-BERT model)"),F7o=l(),O2=a("li"),Ice=a("strong"),v7o=o("layoutlm"),T7o=o(" \u2014 "),SD=a("a"),M7o=o("LayoutLMForSequenceClassification"),E7o=o(" (LayoutLM model)"),C7o=l(),V2=a("li"),qce=a("strong"),w7o=o("layoutlmv2"),A7o=o(" \u2014 "),RD=a("a"),y7o=o("LayoutLMv2ForSequenceClassification"),L7o=o(" (LayoutLMv2 model)"),x7o=l(),X2=a("li"),Nce=a("strong"),$7o=o("led"),k7o=o(" \u2014 "),BD=a("a"),S7o=o("LEDForSequenceClassification"),R7o=o(" (LED model)"),B7o=l(),z2=a("li"),jce=a("strong"),P7o=o("longformer"),I7o=o(" \u2014 "),PD=a("a"),q7o=o("LongformerForSequenceClassification"),N7o=o(" (Longformer model)"),j7o=l(),Q2=a("li"),Dce=a("strong"),D7o=o("mbart"),G7o=o(" \u2014 "),ID=a("a"),O7o=o("MBartForSequenceClassification"),V7o=o(" (mBART model)"),X7o=l(),W2=a("li"),Gce=a("strong"),z7o=o("megatron-bert"),Q7o=o(" \u2014 "),qD=a("a"),W7o=o("MegatronBertForSequenceClassification"),H7o=o(" (MegatronBert model)"),U7o=l(),H2=a("li"),Oce=a("strong"),J7o=o("mobilebert"),Y7o=o(" \u2014 "),ND=a("a"),K7o=o("MobileBertForSequenceClassification"),Z7o=o(" (MobileBERT model)"),e9o=l(),U2=a("li"),Vce=a("strong"),o9o=o("mpnet"),r9o=o(" \u2014 "),jD=a("a"),t9o=o("MPNetForSequenceClassification"),a9o=o(" (MPNet model)"),n9o=l(),J2=a("li"),Xce=a("strong"),s9o=o("nystromformer"),l9o=o(" \u2014 "),DD=a("a"),i9o=o("NystromformerForSequenceClassification"),d9o=o(" (Nystromformer model)"),c9o=l(),Y2=a("li"),zce=a("strong"),m9o=o("openai-gpt"),f9o=o(" \u2014 "),GD=a("a"),g9o=o("OpenAIGPTForSequenceClassification"),h9o=o(" (OpenAI GPT model)"),u9o=l(),K2=a("li"),Qce=a("strong"),p9o=o("perceiver"),_9o=o(" \u2014 "),OD=a("a"),b9o=o("PerceiverForSequenceClassification"),F9o=o(" (Perceiver model)"),v9o=l(),Z2=a("li"),Wce=a("strong"),T9o=o("plbart"),M9o=o(" \u2014 "),VD=a("a"),E9o=o("PLBartForSequenceClassification"),C9o=o(" (PLBart model)"),w9o=l(),eF=a("li"),Hce=a("strong"),A9o=o("qdqbert"),y9o=o(" \u2014 "),XD=a("a"),L9o=o("QDQBertForSequenceClassification"),x9o=o(" (QDQBert model)"),$9o=l(),oF=a("li"),Uce=a("strong"),k9o=o("reformer"),S9o=o(" \u2014 "),zD=a("a"),R9o=o("ReformerForSequenceClassification"),B9o=o(" (Reformer model)"),P9o=l(),rF=a("li"),Jce=a("strong"),I9o=o("rembert"),q9o=o(" \u2014 "),QD=a("a"),N9o=o("RemBertForSequenceClassification"),j9o=o(" (RemBERT model)"),D9o=l(),tF=a("li"),Yce=a("strong"),G9o=o("roberta"),O9o=o(" \u2014 "),WD=a("a"),V9o=o("RobertaForSequenceClassification"),X9o=o(" (RoBERTa model)"),z9o=l(),aF=a("li"),Kce=a("strong"),Q9o=o("roformer"),W9o=o(" \u2014 "),HD=a("a"),H9o=o("RoFormerForSequenceClassification"),U9o=o(" (RoFormer model)"),J9o=l(),nF=a("li"),Zce=a("strong"),Y9o=o("squeezebert"),K9o=o(" \u2014 "),UD=a("a"),Z9o=o("SqueezeBertForSequenceClassification"),e$o=o(" (SqueezeBERT model)"),o$o=l(),sF=a("li"),eme=a("strong"),r$o=o("tapas"),t$o=o(" \u2014 "),JD=a("a"),a$o=o("TapasForSequenceClassification"),n$o=o(" (TAPAS model)"),s$o=l(),lF=a("li"),ome=a("strong"),l$o=o("tapex"),i$o=o(" \u2014 "),YD=a("a"),d$o=o("BartForSequenceClassification"),c$o=o(" (TAPEX model)"),m$o=l(),iF=a("li"),rme=a("strong"),f$o=o("transfo-xl"),g$o=o(" \u2014 "),KD=a("a"),h$o=o("TransfoXLForSequenceClassification"),u$o=o(" (Transformer-XL model)"),p$o=l(),dF=a("li"),tme=a("strong"),_$o=o("xlm"),b$o=o(" \u2014 "),ZD=a("a"),F$o=o("XLMForSequenceClassification"),v$o=o(" (XLM model)"),T$o=l(),cF=a("li"),ame=a("strong"),M$o=o("xlm-roberta"),E$o=o(" \u2014 "),eG=a("a"),C$o=o("XLMRobertaForSequenceClassification"),w$o=o(" (XLM-RoBERTa model)"),A$o=l(),mF=a("li"),nme=a("strong"),y$o=o("xlm-roberta-xl"),L$o=o(" \u2014 "),oG=a("a"),x$o=o("XLMRobertaXLForSequenceClassification"),$$o=o(" (XLM-RoBERTa-XL model)"),k$o=l(),fF=a("li"),sme=a("strong"),S$o=o("xlnet"),R$o=o(" \u2014 "),rG=a("a"),B$o=o("XLNetForSequenceClassification"),P$o=o(" (XLNet model)"),I$o=l(),gF=a("li"),lme=a("strong"),q$o=o("yoso"),N$o=o(" \u2014 "),tG=a("a"),j$o=o("YosoForSequenceClassification"),D$o=o(" (YOSO model)"),G$o=l(),hF=a("p"),O$o=o("The model is set in evaluation mode by default using "),ime=a("code"),V$o=o("model.eval()"),X$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dme=a("code"),z$o=o("model.train()"),Q$o=l(),v(uF.$$.fragment),hIe=l(),ji=a("h2"),pF=a("a"),cme=a("span"),v(Zy.$$.fragment),W$o=l(),mme=a("span"),H$o=o("AutoModelForMultipleChoice"),uIe=l(),Bo=a("div"),v(eL.$$.fragment),U$o=l(),Di=a("p"),J$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aG=a("a"),Y$o=o("from_pretrained()"),K$o=o(" class method or the "),nG=a("a"),Z$o=o("from_config()"),eko=o(` class
method.`),oko=l(),oL=a("p"),rko=o("This class cannot be instantiated directly using "),fme=a("code"),tko=o("__init__()"),ako=o(" (throws an error)."),nko=l(),lt=a("div"),v(rL.$$.fragment),sko=l(),gme=a("p"),lko=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),iko=l(),Gi=a("p"),dko=o(`Note:
Loading a model from its configuration file does `),hme=a("strong"),cko=o("not"),mko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sG=a("a"),fko=o("from_pretrained()"),gko=o(" to load the model weights."),hko=l(),v(_F.$$.fragment),uko=l(),eo=a("div"),v(tL.$$.fragment),pko=l(),ume=a("p"),_ko=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),bko=l(),Sa=a("p"),Fko=o("The model class to instantiate is selected based on the "),pme=a("code"),vko=o("model_type"),Tko=o(` property of the config object (either
passed as an argument or loaded from `),_me=a("code"),Mko=o("pretrained_model_name_or_path"),Eko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bme=a("code"),Cko=o("pretrained_model_name_or_path"),wko=o(":"),Ako=l(),Y=a("ul"),bF=a("li"),Fme=a("strong"),yko=o("albert"),Lko=o(" \u2014 "),lG=a("a"),xko=o("AlbertForMultipleChoice"),$ko=o(" (ALBERT model)"),kko=l(),FF=a("li"),vme=a("strong"),Sko=o("bert"),Rko=o(" \u2014 "),iG=a("a"),Bko=o("BertForMultipleChoice"),Pko=o(" (BERT model)"),Iko=l(),vF=a("li"),Tme=a("strong"),qko=o("big_bird"),Nko=o(" \u2014 "),dG=a("a"),jko=o("BigBirdForMultipleChoice"),Dko=o(" (BigBird model)"),Gko=l(),TF=a("li"),Mme=a("strong"),Oko=o("camembert"),Vko=o(" \u2014 "),cG=a("a"),Xko=o("CamembertForMultipleChoice"),zko=o(" (CamemBERT model)"),Qko=l(),MF=a("li"),Eme=a("strong"),Wko=o("canine"),Hko=o(" \u2014 "),mG=a("a"),Uko=o("CanineForMultipleChoice"),Jko=o(" (Canine model)"),Yko=l(),EF=a("li"),Cme=a("strong"),Kko=o("convbert"),Zko=o(" \u2014 "),fG=a("a"),eSo=o("ConvBertForMultipleChoice"),oSo=o(" (ConvBERT model)"),rSo=l(),CF=a("li"),wme=a("strong"),tSo=o("data2vec-text"),aSo=o(" \u2014 "),gG=a("a"),nSo=o("Data2VecTextForMultipleChoice"),sSo=o(" (Data2VecText model)"),lSo=l(),wF=a("li"),Ame=a("strong"),iSo=o("deberta-v2"),dSo=o(" \u2014 "),hG=a("a"),cSo=o("DebertaV2ForMultipleChoice"),mSo=o(" (DeBERTa-v2 model)"),fSo=l(),AF=a("li"),yme=a("strong"),gSo=o("distilbert"),hSo=o(" \u2014 "),uG=a("a"),uSo=o("DistilBertForMultipleChoice"),pSo=o(" (DistilBERT model)"),_So=l(),yF=a("li"),Lme=a("strong"),bSo=o("electra"),FSo=o(" \u2014 "),pG=a("a"),vSo=o("ElectraForMultipleChoice"),TSo=o(" (ELECTRA model)"),MSo=l(),LF=a("li"),xme=a("strong"),ESo=o("flaubert"),CSo=o(" \u2014 "),_G=a("a"),wSo=o("FlaubertForMultipleChoice"),ASo=o(" (FlauBERT model)"),ySo=l(),xF=a("li"),$me=a("strong"),LSo=o("fnet"),xSo=o(" \u2014 "),bG=a("a"),$So=o("FNetForMultipleChoice"),kSo=o(" (FNet model)"),SSo=l(),$F=a("li"),kme=a("strong"),RSo=o("funnel"),BSo=o(" \u2014 "),FG=a("a"),PSo=o("FunnelForMultipleChoice"),ISo=o(" (Funnel Transformer model)"),qSo=l(),kF=a("li"),Sme=a("strong"),NSo=o("ibert"),jSo=o(" \u2014 "),vG=a("a"),DSo=o("IBertForMultipleChoice"),GSo=o(" (I-BERT model)"),OSo=l(),SF=a("li"),Rme=a("strong"),VSo=o("longformer"),XSo=o(" \u2014 "),TG=a("a"),zSo=o("LongformerForMultipleChoice"),QSo=o(" (Longformer model)"),WSo=l(),RF=a("li"),Bme=a("strong"),HSo=o("megatron-bert"),USo=o(" \u2014 "),MG=a("a"),JSo=o("MegatronBertForMultipleChoice"),YSo=o(" (MegatronBert model)"),KSo=l(),BF=a("li"),Pme=a("strong"),ZSo=o("mobilebert"),eRo=o(" \u2014 "),EG=a("a"),oRo=o("MobileBertForMultipleChoice"),rRo=o(" (MobileBERT model)"),tRo=l(),PF=a("li"),Ime=a("strong"),aRo=o("mpnet"),nRo=o(" \u2014 "),CG=a("a"),sRo=o("MPNetForMultipleChoice"),lRo=o(" (MPNet model)"),iRo=l(),IF=a("li"),qme=a("strong"),dRo=o("nystromformer"),cRo=o(" \u2014 "),wG=a("a"),mRo=o("NystromformerForMultipleChoice"),fRo=o(" (Nystromformer model)"),gRo=l(),qF=a("li"),Nme=a("strong"),hRo=o("qdqbert"),uRo=o(" \u2014 "),AG=a("a"),pRo=o("QDQBertForMultipleChoice"),_Ro=o(" (QDQBert model)"),bRo=l(),NF=a("li"),jme=a("strong"),FRo=o("rembert"),vRo=o(" \u2014 "),yG=a("a"),TRo=o("RemBertForMultipleChoice"),MRo=o(" (RemBERT model)"),ERo=l(),jF=a("li"),Dme=a("strong"),CRo=o("roberta"),wRo=o(" \u2014 "),LG=a("a"),ARo=o("RobertaForMultipleChoice"),yRo=o(" (RoBERTa model)"),LRo=l(),DF=a("li"),Gme=a("strong"),xRo=o("roformer"),$Ro=o(" \u2014 "),xG=a("a"),kRo=o("RoFormerForMultipleChoice"),SRo=o(" (RoFormer model)"),RRo=l(),GF=a("li"),Ome=a("strong"),BRo=o("squeezebert"),PRo=o(" \u2014 "),$G=a("a"),IRo=o("SqueezeBertForMultipleChoice"),qRo=o(" (SqueezeBERT model)"),NRo=l(),OF=a("li"),Vme=a("strong"),jRo=o("xlm"),DRo=o(" \u2014 "),kG=a("a"),GRo=o("XLMForMultipleChoice"),ORo=o(" (XLM model)"),VRo=l(),VF=a("li"),Xme=a("strong"),XRo=o("xlm-roberta"),zRo=o(" \u2014 "),SG=a("a"),QRo=o("XLMRobertaForMultipleChoice"),WRo=o(" (XLM-RoBERTa model)"),HRo=l(),XF=a("li"),zme=a("strong"),URo=o("xlm-roberta-xl"),JRo=o(" \u2014 "),RG=a("a"),YRo=o("XLMRobertaXLForMultipleChoice"),KRo=o(" (XLM-RoBERTa-XL model)"),ZRo=l(),zF=a("li"),Qme=a("strong"),eBo=o("xlnet"),oBo=o(" \u2014 "),BG=a("a"),rBo=o("XLNetForMultipleChoice"),tBo=o(" (XLNet model)"),aBo=l(),QF=a("li"),Wme=a("strong"),nBo=o("yoso"),sBo=o(" \u2014 "),PG=a("a"),lBo=o("YosoForMultipleChoice"),iBo=o(" (YOSO model)"),dBo=l(),WF=a("p"),cBo=o("The model is set in evaluation mode by default using "),Hme=a("code"),mBo=o("model.eval()"),fBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ume=a("code"),gBo=o("model.train()"),hBo=l(),v(HF.$$.fragment),pIe=l(),Oi=a("h2"),UF=a("a"),Jme=a("span"),v(aL.$$.fragment),uBo=l(),Yme=a("span"),pBo=o("AutoModelForNextSentencePrediction"),_Ie=l(),Po=a("div"),v(nL.$$.fragment),_Bo=l(),Vi=a("p"),bBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IG=a("a"),FBo=o("from_pretrained()"),vBo=o(" class method or the "),qG=a("a"),TBo=o("from_config()"),MBo=o(` class
method.`),EBo=l(),sL=a("p"),CBo=o("This class cannot be instantiated directly using "),Kme=a("code"),wBo=o("__init__()"),ABo=o(" (throws an error)."),yBo=l(),it=a("div"),v(lL.$$.fragment),LBo=l(),Zme=a("p"),xBo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$Bo=l(),Xi=a("p"),kBo=o(`Note:
Loading a model from its configuration file does `),efe=a("strong"),SBo=o("not"),RBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NG=a("a"),BBo=o("from_pretrained()"),PBo=o(" to load the model weights."),IBo=l(),v(JF.$$.fragment),qBo=l(),oo=a("div"),v(iL.$$.fragment),NBo=l(),ofe=a("p"),jBo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),DBo=l(),Ra=a("p"),GBo=o("The model class to instantiate is selected based on the "),rfe=a("code"),OBo=o("model_type"),VBo=o(` property of the config object (either
passed as an argument or loaded from `),tfe=a("code"),XBo=o("pretrained_model_name_or_path"),zBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),afe=a("code"),QBo=o("pretrained_model_name_or_path"),WBo=o(":"),HBo=l(),Yr=a("ul"),YF=a("li"),nfe=a("strong"),UBo=o("bert"),JBo=o(" \u2014 "),jG=a("a"),YBo=o("BertForNextSentencePrediction"),KBo=o(" (BERT model)"),ZBo=l(),KF=a("li"),sfe=a("strong"),ePo=o("fnet"),oPo=o(" \u2014 "),DG=a("a"),rPo=o("FNetForNextSentencePrediction"),tPo=o(" (FNet model)"),aPo=l(),ZF=a("li"),lfe=a("strong"),nPo=o("megatron-bert"),sPo=o(" \u2014 "),GG=a("a"),lPo=o("MegatronBertForNextSentencePrediction"),iPo=o(" (MegatronBert model)"),dPo=l(),ev=a("li"),ife=a("strong"),cPo=o("mobilebert"),mPo=o(" \u2014 "),OG=a("a"),fPo=o("MobileBertForNextSentencePrediction"),gPo=o(" (MobileBERT model)"),hPo=l(),ov=a("li"),dfe=a("strong"),uPo=o("qdqbert"),pPo=o(" \u2014 "),VG=a("a"),_Po=o("QDQBertForNextSentencePrediction"),bPo=o(" (QDQBert model)"),FPo=l(),rv=a("p"),vPo=o("The model is set in evaluation mode by default using "),cfe=a("code"),TPo=o("model.eval()"),MPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mfe=a("code"),EPo=o("model.train()"),CPo=l(),v(tv.$$.fragment),bIe=l(),zi=a("h2"),av=a("a"),ffe=a("span"),v(dL.$$.fragment),wPo=l(),gfe=a("span"),APo=o("AutoModelForTokenClassification"),FIe=l(),Io=a("div"),v(cL.$$.fragment),yPo=l(),Qi=a("p"),LPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XG=a("a"),xPo=o("from_pretrained()"),$Po=o(" class method or the "),zG=a("a"),kPo=o("from_config()"),SPo=o(` class
method.`),RPo=l(),mL=a("p"),BPo=o("This class cannot be instantiated directly using "),hfe=a("code"),PPo=o("__init__()"),IPo=o(" (throws an error)."),qPo=l(),dt=a("div"),v(fL.$$.fragment),NPo=l(),ufe=a("p"),jPo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),DPo=l(),Wi=a("p"),GPo=o(`Note:
Loading a model from its configuration file does `),pfe=a("strong"),OPo=o("not"),VPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QG=a("a"),XPo=o("from_pretrained()"),zPo=o(" to load the model weights."),QPo=l(),v(nv.$$.fragment),WPo=l(),ro=a("div"),v(gL.$$.fragment),HPo=l(),_fe=a("p"),UPo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),JPo=l(),Ba=a("p"),YPo=o("The model class to instantiate is selected based on the "),bfe=a("code"),KPo=o("model_type"),ZPo=o(` property of the config object (either
passed as an argument or loaded from `),Ffe=a("code"),eIo=o("pretrained_model_name_or_path"),oIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vfe=a("code"),rIo=o("pretrained_model_name_or_path"),tIo=o(":"),aIo=l(),U=a("ul"),sv=a("li"),Tfe=a("strong"),nIo=o("albert"),sIo=o(" \u2014 "),WG=a("a"),lIo=o("AlbertForTokenClassification"),iIo=o(" (ALBERT model)"),dIo=l(),lv=a("li"),Mfe=a("strong"),cIo=o("bert"),mIo=o(" \u2014 "),HG=a("a"),fIo=o("BertForTokenClassification"),gIo=o(" (BERT model)"),hIo=l(),iv=a("li"),Efe=a("strong"),uIo=o("big_bird"),pIo=o(" \u2014 "),UG=a("a"),_Io=o("BigBirdForTokenClassification"),bIo=o(" (BigBird model)"),FIo=l(),dv=a("li"),Cfe=a("strong"),vIo=o("camembert"),TIo=o(" \u2014 "),JG=a("a"),MIo=o("CamembertForTokenClassification"),EIo=o(" (CamemBERT model)"),CIo=l(),cv=a("li"),wfe=a("strong"),wIo=o("canine"),AIo=o(" \u2014 "),YG=a("a"),yIo=o("CanineForTokenClassification"),LIo=o(" (Canine model)"),xIo=l(),mv=a("li"),Afe=a("strong"),$Io=o("convbert"),kIo=o(" \u2014 "),KG=a("a"),SIo=o("ConvBertForTokenClassification"),RIo=o(" (ConvBERT model)"),BIo=l(),fv=a("li"),yfe=a("strong"),PIo=o("data2vec-text"),IIo=o(" \u2014 "),ZG=a("a"),qIo=o("Data2VecTextForTokenClassification"),NIo=o(" (Data2VecText model)"),jIo=l(),gv=a("li"),Lfe=a("strong"),DIo=o("deberta"),GIo=o(" \u2014 "),eO=a("a"),OIo=o("DebertaForTokenClassification"),VIo=o(" (DeBERTa model)"),XIo=l(),hv=a("li"),xfe=a("strong"),zIo=o("deberta-v2"),QIo=o(" \u2014 "),oO=a("a"),WIo=o("DebertaV2ForTokenClassification"),HIo=o(" (DeBERTa-v2 model)"),UIo=l(),uv=a("li"),$fe=a("strong"),JIo=o("distilbert"),YIo=o(" \u2014 "),rO=a("a"),KIo=o("DistilBertForTokenClassification"),ZIo=o(" (DistilBERT model)"),eqo=l(),pv=a("li"),kfe=a("strong"),oqo=o("electra"),rqo=o(" \u2014 "),tO=a("a"),tqo=o("ElectraForTokenClassification"),aqo=o(" (ELECTRA model)"),nqo=l(),_v=a("li"),Sfe=a("strong"),sqo=o("flaubert"),lqo=o(" \u2014 "),aO=a("a"),iqo=o("FlaubertForTokenClassification"),dqo=o(" (FlauBERT model)"),cqo=l(),bv=a("li"),Rfe=a("strong"),mqo=o("fnet"),fqo=o(" \u2014 "),nO=a("a"),gqo=o("FNetForTokenClassification"),hqo=o(" (FNet model)"),uqo=l(),Fv=a("li"),Bfe=a("strong"),pqo=o("funnel"),_qo=o(" \u2014 "),sO=a("a"),bqo=o("FunnelForTokenClassification"),Fqo=o(" (Funnel Transformer model)"),vqo=l(),vv=a("li"),Pfe=a("strong"),Tqo=o("gpt2"),Mqo=o(" \u2014 "),lO=a("a"),Eqo=o("GPT2ForTokenClassification"),Cqo=o(" (OpenAI GPT-2 model)"),wqo=l(),Tv=a("li"),Ife=a("strong"),Aqo=o("ibert"),yqo=o(" \u2014 "),iO=a("a"),Lqo=o("IBertForTokenClassification"),xqo=o(" (I-BERT model)"),$qo=l(),Mv=a("li"),qfe=a("strong"),kqo=o("layoutlm"),Sqo=o(" \u2014 "),dO=a("a"),Rqo=o("LayoutLMForTokenClassification"),Bqo=o(" (LayoutLM model)"),Pqo=l(),Ev=a("li"),Nfe=a("strong"),Iqo=o("layoutlmv2"),qqo=o(" \u2014 "),cO=a("a"),Nqo=o("LayoutLMv2ForTokenClassification"),jqo=o(" (LayoutLMv2 model)"),Dqo=l(),Cv=a("li"),jfe=a("strong"),Gqo=o("longformer"),Oqo=o(" \u2014 "),mO=a("a"),Vqo=o("LongformerForTokenClassification"),Xqo=o(" (Longformer model)"),zqo=l(),wv=a("li"),Dfe=a("strong"),Qqo=o("megatron-bert"),Wqo=o(" \u2014 "),fO=a("a"),Hqo=o("MegatronBertForTokenClassification"),Uqo=o(" (MegatronBert model)"),Jqo=l(),Av=a("li"),Gfe=a("strong"),Yqo=o("mobilebert"),Kqo=o(" \u2014 "),gO=a("a"),Zqo=o("MobileBertForTokenClassification"),eNo=o(" (MobileBERT model)"),oNo=l(),yv=a("li"),Ofe=a("strong"),rNo=o("mpnet"),tNo=o(" \u2014 "),hO=a("a"),aNo=o("MPNetForTokenClassification"),nNo=o(" (MPNet model)"),sNo=l(),Lv=a("li"),Vfe=a("strong"),lNo=o("nystromformer"),iNo=o(" \u2014 "),uO=a("a"),dNo=o("NystromformerForTokenClassification"),cNo=o(" (Nystromformer model)"),mNo=l(),xv=a("li"),Xfe=a("strong"),fNo=o("qdqbert"),gNo=o(" \u2014 "),pO=a("a"),hNo=o("QDQBertForTokenClassification"),uNo=o(" (QDQBert model)"),pNo=l(),$v=a("li"),zfe=a("strong"),_No=o("rembert"),bNo=o(" \u2014 "),_O=a("a"),FNo=o("RemBertForTokenClassification"),vNo=o(" (RemBERT model)"),TNo=l(),kv=a("li"),Qfe=a("strong"),MNo=o("roberta"),ENo=o(" \u2014 "),bO=a("a"),CNo=o("RobertaForTokenClassification"),wNo=o(" (RoBERTa model)"),ANo=l(),Sv=a("li"),Wfe=a("strong"),yNo=o("roformer"),LNo=o(" \u2014 "),FO=a("a"),xNo=o("RoFormerForTokenClassification"),$No=o(" (RoFormer model)"),kNo=l(),Rv=a("li"),Hfe=a("strong"),SNo=o("squeezebert"),RNo=o(" \u2014 "),vO=a("a"),BNo=o("SqueezeBertForTokenClassification"),PNo=o(" (SqueezeBERT model)"),INo=l(),Bv=a("li"),Ufe=a("strong"),qNo=o("xlm"),NNo=o(" \u2014 "),TO=a("a"),jNo=o("XLMForTokenClassification"),DNo=o(" (XLM model)"),GNo=l(),Pv=a("li"),Jfe=a("strong"),ONo=o("xlm-roberta"),VNo=o(" \u2014 "),MO=a("a"),XNo=o("XLMRobertaForTokenClassification"),zNo=o(" (XLM-RoBERTa model)"),QNo=l(),Iv=a("li"),Yfe=a("strong"),WNo=o("xlm-roberta-xl"),HNo=o(" \u2014 "),EO=a("a"),UNo=o("XLMRobertaXLForTokenClassification"),JNo=o(" (XLM-RoBERTa-XL model)"),YNo=l(),qv=a("li"),Kfe=a("strong"),KNo=o("xlnet"),ZNo=o(" \u2014 "),CO=a("a"),ejo=o("XLNetForTokenClassification"),ojo=o(" (XLNet model)"),rjo=l(),Nv=a("li"),Zfe=a("strong"),tjo=o("yoso"),ajo=o(" \u2014 "),wO=a("a"),njo=o("YosoForTokenClassification"),sjo=o(" (YOSO model)"),ljo=l(),jv=a("p"),ijo=o("The model is set in evaluation mode by default using "),ege=a("code"),djo=o("model.eval()"),cjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oge=a("code"),mjo=o("model.train()"),fjo=l(),v(Dv.$$.fragment),vIe=l(),Hi=a("h2"),Gv=a("a"),rge=a("span"),v(hL.$$.fragment),gjo=l(),tge=a("span"),hjo=o("AutoModelForQuestionAnswering"),TIe=l(),qo=a("div"),v(uL.$$.fragment),ujo=l(),Ui=a("p"),pjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),AO=a("a"),_jo=o("from_pretrained()"),bjo=o(" class method or the "),yO=a("a"),Fjo=o("from_config()"),vjo=o(` class
method.`),Tjo=l(),pL=a("p"),Mjo=o("This class cannot be instantiated directly using "),age=a("code"),Ejo=o("__init__()"),Cjo=o(" (throws an error)."),wjo=l(),ct=a("div"),v(_L.$$.fragment),Ajo=l(),nge=a("p"),yjo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ljo=l(),Ji=a("p"),xjo=o(`Note:
Loading a model from its configuration file does `),sge=a("strong"),$jo=o("not"),kjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LO=a("a"),Sjo=o("from_pretrained()"),Rjo=o(" to load the model weights."),Bjo=l(),v(Ov.$$.fragment),Pjo=l(),to=a("div"),v(bL.$$.fragment),Ijo=l(),lge=a("p"),qjo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Njo=l(),Pa=a("p"),jjo=o("The model class to instantiate is selected based on the "),ige=a("code"),Djo=o("model_type"),Gjo=o(` property of the config object (either
passed as an argument or loaded from `),dge=a("code"),Ojo=o("pretrained_model_name_or_path"),Vjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cge=a("code"),Xjo=o("pretrained_model_name_or_path"),zjo=o(":"),Qjo=l(),O=a("ul"),Vv=a("li"),mge=a("strong"),Wjo=o("albert"),Hjo=o(" \u2014 "),xO=a("a"),Ujo=o("AlbertForQuestionAnswering"),Jjo=o(" (ALBERT model)"),Yjo=l(),Xv=a("li"),fge=a("strong"),Kjo=o("bart"),Zjo=o(" \u2014 "),$O=a("a"),eDo=o("BartForQuestionAnswering"),oDo=o(" (BART model)"),rDo=l(),zv=a("li"),gge=a("strong"),tDo=o("bert"),aDo=o(" \u2014 "),kO=a("a"),nDo=o("BertForQuestionAnswering"),sDo=o(" (BERT model)"),lDo=l(),Qv=a("li"),hge=a("strong"),iDo=o("big_bird"),dDo=o(" \u2014 "),SO=a("a"),cDo=o("BigBirdForQuestionAnswering"),mDo=o(" (BigBird model)"),fDo=l(),Wv=a("li"),uge=a("strong"),gDo=o("bigbird_pegasus"),hDo=o(" \u2014 "),RO=a("a"),uDo=o("BigBirdPegasusForQuestionAnswering"),pDo=o(" (BigBirdPegasus model)"),_Do=l(),Hv=a("li"),pge=a("strong"),bDo=o("camembert"),FDo=o(" \u2014 "),BO=a("a"),vDo=o("CamembertForQuestionAnswering"),TDo=o(" (CamemBERT model)"),MDo=l(),Uv=a("li"),_ge=a("strong"),EDo=o("canine"),CDo=o(" \u2014 "),PO=a("a"),wDo=o("CanineForQuestionAnswering"),ADo=o(" (Canine model)"),yDo=l(),Jv=a("li"),bge=a("strong"),LDo=o("convbert"),xDo=o(" \u2014 "),IO=a("a"),$Do=o("ConvBertForQuestionAnswering"),kDo=o(" (ConvBERT model)"),SDo=l(),Yv=a("li"),Fge=a("strong"),RDo=o("data2vec-text"),BDo=o(" \u2014 "),qO=a("a"),PDo=o("Data2VecTextForQuestionAnswering"),IDo=o(" (Data2VecText model)"),qDo=l(),Kv=a("li"),vge=a("strong"),NDo=o("deberta"),jDo=o(" \u2014 "),NO=a("a"),DDo=o("DebertaForQuestionAnswering"),GDo=o(" (DeBERTa model)"),ODo=l(),Zv=a("li"),Tge=a("strong"),VDo=o("deberta-v2"),XDo=o(" \u2014 "),jO=a("a"),zDo=o("DebertaV2ForQuestionAnswering"),QDo=o(" (DeBERTa-v2 model)"),WDo=l(),e1=a("li"),Mge=a("strong"),HDo=o("distilbert"),UDo=o(" \u2014 "),DO=a("a"),JDo=o("DistilBertForQuestionAnswering"),YDo=o(" (DistilBERT model)"),KDo=l(),o1=a("li"),Ege=a("strong"),ZDo=o("electra"),eGo=o(" \u2014 "),GO=a("a"),oGo=o("ElectraForQuestionAnswering"),rGo=o(" (ELECTRA model)"),tGo=l(),r1=a("li"),Cge=a("strong"),aGo=o("flaubert"),nGo=o(" \u2014 "),OO=a("a"),sGo=o("FlaubertForQuestionAnsweringSimple"),lGo=o(" (FlauBERT model)"),iGo=l(),t1=a("li"),wge=a("strong"),dGo=o("fnet"),cGo=o(" \u2014 "),VO=a("a"),mGo=o("FNetForQuestionAnswering"),fGo=o(" (FNet model)"),gGo=l(),a1=a("li"),Age=a("strong"),hGo=o("funnel"),uGo=o(" \u2014 "),XO=a("a"),pGo=o("FunnelForQuestionAnswering"),_Go=o(" (Funnel Transformer model)"),bGo=l(),n1=a("li"),yge=a("strong"),FGo=o("gptj"),vGo=o(" \u2014 "),zO=a("a"),TGo=o("GPTJForQuestionAnswering"),MGo=o(" (GPT-J model)"),EGo=l(),s1=a("li"),Lge=a("strong"),CGo=o("ibert"),wGo=o(" \u2014 "),QO=a("a"),AGo=o("IBertForQuestionAnswering"),yGo=o(" (I-BERT model)"),LGo=l(),l1=a("li"),xge=a("strong"),xGo=o("layoutlmv2"),$Go=o(" \u2014 "),WO=a("a"),kGo=o("LayoutLMv2ForQuestionAnswering"),SGo=o(" (LayoutLMv2 model)"),RGo=l(),i1=a("li"),$ge=a("strong"),BGo=o("led"),PGo=o(" \u2014 "),HO=a("a"),IGo=o("LEDForQuestionAnswering"),qGo=o(" (LED model)"),NGo=l(),d1=a("li"),kge=a("strong"),jGo=o("longformer"),DGo=o(" \u2014 "),UO=a("a"),GGo=o("LongformerForQuestionAnswering"),OGo=o(" (Longformer model)"),VGo=l(),c1=a("li"),Sge=a("strong"),XGo=o("lxmert"),zGo=o(" \u2014 "),JO=a("a"),QGo=o("LxmertForQuestionAnswering"),WGo=o(" (LXMERT model)"),HGo=l(),m1=a("li"),Rge=a("strong"),UGo=o("mbart"),JGo=o(" \u2014 "),YO=a("a"),YGo=o("MBartForQuestionAnswering"),KGo=o(" (mBART model)"),ZGo=l(),f1=a("li"),Bge=a("strong"),eOo=o("megatron-bert"),oOo=o(" \u2014 "),KO=a("a"),rOo=o("MegatronBertForQuestionAnswering"),tOo=o(" (MegatronBert model)"),aOo=l(),g1=a("li"),Pge=a("strong"),nOo=o("mobilebert"),sOo=o(" \u2014 "),ZO=a("a"),lOo=o("MobileBertForQuestionAnswering"),iOo=o(" (MobileBERT model)"),dOo=l(),h1=a("li"),Ige=a("strong"),cOo=o("mpnet"),mOo=o(" \u2014 "),eV=a("a"),fOo=o("MPNetForQuestionAnswering"),gOo=o(" (MPNet model)"),hOo=l(),u1=a("li"),qge=a("strong"),uOo=o("nystromformer"),pOo=o(" \u2014 "),oV=a("a"),_Oo=o("NystromformerForQuestionAnswering"),bOo=o(" (Nystromformer model)"),FOo=l(),p1=a("li"),Nge=a("strong"),vOo=o("qdqbert"),TOo=o(" \u2014 "),rV=a("a"),MOo=o("QDQBertForQuestionAnswering"),EOo=o(" (QDQBert model)"),COo=l(),_1=a("li"),jge=a("strong"),wOo=o("reformer"),AOo=o(" \u2014 "),tV=a("a"),yOo=o("ReformerForQuestionAnswering"),LOo=o(" (Reformer model)"),xOo=l(),b1=a("li"),Dge=a("strong"),$Oo=o("rembert"),kOo=o(" \u2014 "),aV=a("a"),SOo=o("RemBertForQuestionAnswering"),ROo=o(" (RemBERT model)"),BOo=l(),F1=a("li"),Gge=a("strong"),POo=o("roberta"),IOo=o(" \u2014 "),nV=a("a"),qOo=o("RobertaForQuestionAnswering"),NOo=o(" (RoBERTa model)"),jOo=l(),v1=a("li"),Oge=a("strong"),DOo=o("roformer"),GOo=o(" \u2014 "),sV=a("a"),OOo=o("RoFormerForQuestionAnswering"),VOo=o(" (RoFormer model)"),XOo=l(),T1=a("li"),Vge=a("strong"),zOo=o("splinter"),QOo=o(" \u2014 "),lV=a("a"),WOo=o("SplinterForQuestionAnswering"),HOo=o(" (Splinter model)"),UOo=l(),M1=a("li"),Xge=a("strong"),JOo=o("squeezebert"),YOo=o(" \u2014 "),iV=a("a"),KOo=o("SqueezeBertForQuestionAnswering"),ZOo=o(" (SqueezeBERT model)"),eVo=l(),E1=a("li"),zge=a("strong"),oVo=o("xlm"),rVo=o(" \u2014 "),dV=a("a"),tVo=o("XLMForQuestionAnsweringSimple"),aVo=o(" (XLM model)"),nVo=l(),C1=a("li"),Qge=a("strong"),sVo=o("xlm-roberta"),lVo=o(" \u2014 "),cV=a("a"),iVo=o("XLMRobertaForQuestionAnswering"),dVo=o(" (XLM-RoBERTa model)"),cVo=l(),w1=a("li"),Wge=a("strong"),mVo=o("xlm-roberta-xl"),fVo=o(" \u2014 "),mV=a("a"),gVo=o("XLMRobertaXLForQuestionAnswering"),hVo=o(" (XLM-RoBERTa-XL model)"),uVo=l(),A1=a("li"),Hge=a("strong"),pVo=o("xlnet"),_Vo=o(" \u2014 "),fV=a("a"),bVo=o("XLNetForQuestionAnsweringSimple"),FVo=o(" (XLNet model)"),vVo=l(),y1=a("li"),Uge=a("strong"),TVo=o("yoso"),MVo=o(" \u2014 "),gV=a("a"),EVo=o("YosoForQuestionAnswering"),CVo=o(" (YOSO model)"),wVo=l(),L1=a("p"),AVo=o("The model is set in evaluation mode by default using "),Jge=a("code"),yVo=o("model.eval()"),LVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yge=a("code"),xVo=o("model.train()"),$Vo=l(),v(x1.$$.fragment),MIe=l(),Yi=a("h2"),$1=a("a"),Kge=a("span"),v(FL.$$.fragment),kVo=l(),Zge=a("span"),SVo=o("AutoModelForTableQuestionAnswering"),EIe=l(),No=a("div"),v(vL.$$.fragment),RVo=l(),Ki=a("p"),BVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hV=a("a"),PVo=o("from_pretrained()"),IVo=o(" class method or the "),uV=a("a"),qVo=o("from_config()"),NVo=o(` class
method.`),jVo=l(),TL=a("p"),DVo=o("This class cannot be instantiated directly using "),ehe=a("code"),GVo=o("__init__()"),OVo=o(" (throws an error)."),VVo=l(),mt=a("div"),v(ML.$$.fragment),XVo=l(),ohe=a("p"),zVo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),QVo=l(),Zi=a("p"),WVo=o(`Note:
Loading a model from its configuration file does `),rhe=a("strong"),HVo=o("not"),UVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pV=a("a"),JVo=o("from_pretrained()"),YVo=o(" to load the model weights."),KVo=l(),v(k1.$$.fragment),ZVo=l(),ao=a("div"),v(EL.$$.fragment),eXo=l(),the=a("p"),oXo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),rXo=l(),Ia=a("p"),tXo=o("The model class to instantiate is selected based on the "),ahe=a("code"),aXo=o("model_type"),nXo=o(` property of the config object (either
passed as an argument or loaded from `),nhe=a("code"),sXo=o("pretrained_model_name_or_path"),lXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),she=a("code"),iXo=o("pretrained_model_name_or_path"),dXo=o(":"),cXo=l(),lhe=a("ul"),S1=a("li"),ihe=a("strong"),mXo=o("tapas"),fXo=o(" \u2014 "),_V=a("a"),gXo=o("TapasForQuestionAnswering"),hXo=o(" (TAPAS model)"),uXo=l(),R1=a("p"),pXo=o("The model is set in evaluation mode by default using "),dhe=a("code"),_Xo=o("model.eval()"),bXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),che=a("code"),FXo=o("model.train()"),vXo=l(),v(B1.$$.fragment),CIe=l(),ed=a("h2"),P1=a("a"),mhe=a("span"),v(CL.$$.fragment),TXo=l(),fhe=a("span"),MXo=o("AutoModelForImageClassification"),wIe=l(),jo=a("div"),v(wL.$$.fragment),EXo=l(),od=a("p"),CXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bV=a("a"),wXo=o("from_pretrained()"),AXo=o(" class method or the "),FV=a("a"),yXo=o("from_config()"),LXo=o(` class
method.`),xXo=l(),AL=a("p"),$Xo=o("This class cannot be instantiated directly using "),ghe=a("code"),kXo=o("__init__()"),SXo=o(" (throws an error)."),RXo=l(),ft=a("div"),v(yL.$$.fragment),BXo=l(),hhe=a("p"),PXo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),IXo=l(),rd=a("p"),qXo=o(`Note:
Loading a model from its configuration file does `),uhe=a("strong"),NXo=o("not"),jXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vV=a("a"),DXo=o("from_pretrained()"),GXo=o(" to load the model weights."),OXo=l(),v(I1.$$.fragment),VXo=l(),no=a("div"),v(LL.$$.fragment),XXo=l(),phe=a("p"),zXo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),QXo=l(),qa=a("p"),WXo=o("The model class to instantiate is selected based on the "),_he=a("code"),HXo=o("model_type"),UXo=o(` property of the config object (either
passed as an argument or loaded from `),bhe=a("code"),JXo=o("pretrained_model_name_or_path"),YXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fhe=a("code"),KXo=o("pretrained_model_name_or_path"),ZXo=o(":"),ezo=l(),ve=a("ul"),q1=a("li"),vhe=a("strong"),ozo=o("beit"),rzo=o(" \u2014 "),TV=a("a"),tzo=o("BeitForImageClassification"),azo=o(" (BEiT model)"),nzo=l(),N1=a("li"),The=a("strong"),szo=o("convnext"),lzo=o(" \u2014 "),MV=a("a"),izo=o("ConvNextForImageClassification"),dzo=o(" (ConvNext model)"),czo=l(),j1=a("li"),Mhe=a("strong"),mzo=o("data2vec-vision"),fzo=o(" \u2014 "),EV=a("a"),gzo=o("Data2VecVisionForImageClassification"),hzo=o(" (Data2VecVision model)"),uzo=l(),Rs=a("li"),Ehe=a("strong"),pzo=o("deit"),_zo=o(" \u2014 "),CV=a("a"),bzo=o("DeiTForImageClassification"),Fzo=o(" or "),wV=a("a"),vzo=o("DeiTForImageClassificationWithTeacher"),Tzo=o(" (DeiT model)"),Mzo=l(),D1=a("li"),Che=a("strong"),Ezo=o("imagegpt"),Czo=o(" \u2014 "),AV=a("a"),wzo=o("ImageGPTForImageClassification"),Azo=o(" (ImageGPT model)"),yzo=l(),gt=a("li"),whe=a("strong"),Lzo=o("perceiver"),xzo=o(" \u2014 "),yV=a("a"),$zo=o("PerceiverForImageClassificationLearned"),kzo=o(" or "),LV=a("a"),Szo=o("PerceiverForImageClassificationFourier"),Rzo=o(" or "),xV=a("a"),Bzo=o("PerceiverForImageClassificationConvProcessing"),Pzo=o(" (Perceiver model)"),Izo=l(),G1=a("li"),Ahe=a("strong"),qzo=o("poolformer"),Nzo=o(" \u2014 "),$V=a("a"),jzo=o("PoolFormerForImageClassification"),Dzo=o(" (PoolFormer model)"),Gzo=l(),O1=a("li"),yhe=a("strong"),Ozo=o("regnet"),Vzo=o(" \u2014 "),kV=a("a"),Xzo=o("RegNetForImageClassification"),zzo=o(" (RegNet model)"),Qzo=l(),V1=a("li"),Lhe=a("strong"),Wzo=o("resnet"),Hzo=o(" \u2014 "),SV=a("a"),Uzo=o("ResNetForImageClassification"),Jzo=o(" (ResNet model)"),Yzo=l(),X1=a("li"),xhe=a("strong"),Kzo=o("segformer"),Zzo=o(" \u2014 "),RV=a("a"),eQo=o("SegformerForImageClassification"),oQo=o(" (SegFormer model)"),rQo=l(),z1=a("li"),$he=a("strong"),tQo=o("swin"),aQo=o(" \u2014 "),BV=a("a"),nQo=o("SwinForImageClassification"),sQo=o(" (Swin model)"),lQo=l(),Q1=a("li"),khe=a("strong"),iQo=o("van"),dQo=o(" \u2014 "),PV=a("a"),cQo=o("VanForImageClassification"),mQo=o(" (VAN model)"),fQo=l(),W1=a("li"),She=a("strong"),gQo=o("vit"),hQo=o(" \u2014 "),IV=a("a"),uQo=o("ViTForImageClassification"),pQo=o(" (ViT model)"),_Qo=l(),H1=a("p"),bQo=o("The model is set in evaluation mode by default using "),Rhe=a("code"),FQo=o("model.eval()"),vQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bhe=a("code"),TQo=o("model.train()"),MQo=l(),v(U1.$$.fragment),AIe=l(),td=a("h2"),J1=a("a"),Phe=a("span"),v(xL.$$.fragment),EQo=l(),Ihe=a("span"),CQo=o("AutoModelForVision2Seq"),yIe=l(),Do=a("div"),v($L.$$.fragment),wQo=l(),ad=a("p"),AQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qV=a("a"),yQo=o("from_pretrained()"),LQo=o(" class method or the "),NV=a("a"),xQo=o("from_config()"),$Qo=o(` class
method.`),kQo=l(),kL=a("p"),SQo=o("This class cannot be instantiated directly using "),qhe=a("code"),RQo=o("__init__()"),BQo=o(" (throws an error)."),PQo=l(),ht=a("div"),v(SL.$$.fragment),IQo=l(),Nhe=a("p"),qQo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),NQo=l(),nd=a("p"),jQo=o(`Note:
Loading a model from its configuration file does `),jhe=a("strong"),DQo=o("not"),GQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=a("a"),OQo=o("from_pretrained()"),VQo=o(" to load the model weights."),XQo=l(),v(Y1.$$.fragment),zQo=l(),so=a("div"),v(RL.$$.fragment),QQo=l(),Dhe=a("p"),WQo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),HQo=l(),Na=a("p"),UQo=o("The model class to instantiate is selected based on the "),Ghe=a("code"),JQo=o("model_type"),YQo=o(` property of the config object (either
passed as an argument or loaded from `),Ohe=a("code"),KQo=o("pretrained_model_name_or_path"),ZQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vhe=a("code"),eWo=o("pretrained_model_name_or_path"),oWo=o(":"),rWo=l(),Xhe=a("ul"),K1=a("li"),zhe=a("strong"),tWo=o("vision-encoder-decoder"),aWo=o(" \u2014 "),DV=a("a"),nWo=o("VisionEncoderDecoderModel"),sWo=o(" (Vision Encoder decoder model)"),lWo=l(),Z1=a("p"),iWo=o("The model is set in evaluation mode by default using "),Qhe=a("code"),dWo=o("model.eval()"),cWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Whe=a("code"),mWo=o("model.train()"),fWo=l(),v(eT.$$.fragment),LIe=l(),sd=a("h2"),oT=a("a"),Hhe=a("span"),v(BL.$$.fragment),gWo=l(),Uhe=a("span"),hWo=o("AutoModelForAudioClassification"),xIe=l(),Go=a("div"),v(PL.$$.fragment),uWo=l(),ld=a("p"),pWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),GV=a("a"),_Wo=o("from_pretrained()"),bWo=o(" class method or the "),OV=a("a"),FWo=o("from_config()"),vWo=o(` class
method.`),TWo=l(),IL=a("p"),MWo=o("This class cannot be instantiated directly using "),Jhe=a("code"),EWo=o("__init__()"),CWo=o(" (throws an error)."),wWo=l(),ut=a("div"),v(qL.$$.fragment),AWo=l(),Yhe=a("p"),yWo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),LWo=l(),id=a("p"),xWo=o(`Note:
Loading a model from its configuration file does `),Khe=a("strong"),$Wo=o("not"),kWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=a("a"),SWo=o("from_pretrained()"),RWo=o(" to load the model weights."),BWo=l(),v(rT.$$.fragment),PWo=l(),lo=a("div"),v(NL.$$.fragment),IWo=l(),Zhe=a("p"),qWo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),NWo=l(),ja=a("p"),jWo=o("The model class to instantiate is selected based on the "),eue=a("code"),DWo=o("model_type"),GWo=o(` property of the config object (either
passed as an argument or loaded from `),oue=a("code"),OWo=o("pretrained_model_name_or_path"),VWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rue=a("code"),XWo=o("pretrained_model_name_or_path"),zWo=o(":"),QWo=l(),Ne=a("ul"),tT=a("li"),tue=a("strong"),WWo=o("data2vec-audio"),HWo=o(" \u2014 "),XV=a("a"),UWo=o("Data2VecAudioForSequenceClassification"),JWo=o(" (Data2VecAudio model)"),YWo=l(),aT=a("li"),aue=a("strong"),KWo=o("hubert"),ZWo=o(" \u2014 "),zV=a("a"),eHo=o("HubertForSequenceClassification"),oHo=o(" (Hubert model)"),rHo=l(),nT=a("li"),nue=a("strong"),tHo=o("sew"),aHo=o(" \u2014 "),QV=a("a"),nHo=o("SEWForSequenceClassification"),sHo=o(" (SEW model)"),lHo=l(),sT=a("li"),sue=a("strong"),iHo=o("sew-d"),dHo=o(" \u2014 "),WV=a("a"),cHo=o("SEWDForSequenceClassification"),mHo=o(" (SEW-D model)"),fHo=l(),lT=a("li"),lue=a("strong"),gHo=o("unispeech"),hHo=o(" \u2014 "),HV=a("a"),uHo=o("UniSpeechForSequenceClassification"),pHo=o(" (UniSpeech model)"),_Ho=l(),iT=a("li"),iue=a("strong"),bHo=o("unispeech-sat"),FHo=o(" \u2014 "),UV=a("a"),vHo=o("UniSpeechSatForSequenceClassification"),THo=o(" (UniSpeechSat model)"),MHo=l(),dT=a("li"),due=a("strong"),EHo=o("wav2vec2"),CHo=o(" \u2014 "),JV=a("a"),wHo=o("Wav2Vec2ForSequenceClassification"),AHo=o(" (Wav2Vec2 model)"),yHo=l(),cT=a("li"),cue=a("strong"),LHo=o("wavlm"),xHo=o(" \u2014 "),YV=a("a"),$Ho=o("WavLMForSequenceClassification"),kHo=o(" (WavLM model)"),SHo=l(),mT=a("p"),RHo=o("The model is set in evaluation mode by default using "),mue=a("code"),BHo=o("model.eval()"),PHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fue=a("code"),IHo=o("model.train()"),qHo=l(),v(fT.$$.fragment),$Ie=l(),dd=a("h2"),gT=a("a"),gue=a("span"),v(jL.$$.fragment),NHo=l(),hue=a("span"),jHo=o("AutoModelForAudioFrameClassification"),kIe=l(),Oo=a("div"),v(DL.$$.fragment),DHo=l(),cd=a("p"),GHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),KV=a("a"),OHo=o("from_pretrained()"),VHo=o(" class method or the "),ZV=a("a"),XHo=o("from_config()"),zHo=o(` class
method.`),QHo=l(),GL=a("p"),WHo=o("This class cannot be instantiated directly using "),uue=a("code"),HHo=o("__init__()"),UHo=o(" (throws an error)."),JHo=l(),pt=a("div"),v(OL.$$.fragment),YHo=l(),pue=a("p"),KHo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),ZHo=l(),md=a("p"),eUo=o(`Note:
Loading a model from its configuration file does `),_ue=a("strong"),oUo=o("not"),rUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=a("a"),tUo=o("from_pretrained()"),aUo=o(" to load the model weights."),nUo=l(),v(hT.$$.fragment),sUo=l(),io=a("div"),v(VL.$$.fragment),lUo=l(),bue=a("p"),iUo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),dUo=l(),Da=a("p"),cUo=o("The model class to instantiate is selected based on the "),Fue=a("code"),mUo=o("model_type"),fUo=o(` property of the config object (either
passed as an argument or loaded from `),vue=a("code"),gUo=o("pretrained_model_name_or_path"),hUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tue=a("code"),uUo=o("pretrained_model_name_or_path"),pUo=o(":"),_Uo=l(),Ga=a("ul"),uT=a("li"),Mue=a("strong"),bUo=o("data2vec-audio"),FUo=o(" \u2014 "),oX=a("a"),vUo=o("Data2VecAudioForAudioFrameClassification"),TUo=o(" (Data2VecAudio model)"),MUo=l(),pT=a("li"),Eue=a("strong"),EUo=o("unispeech-sat"),CUo=o(" \u2014 "),rX=a("a"),wUo=o("UniSpeechSatForAudioFrameClassification"),AUo=o(" (UniSpeechSat model)"),yUo=l(),_T=a("li"),Cue=a("strong"),LUo=o("wav2vec2"),xUo=o(" \u2014 "),tX=a("a"),$Uo=o("Wav2Vec2ForAudioFrameClassification"),kUo=o(" (Wav2Vec2 model)"),SUo=l(),bT=a("li"),wue=a("strong"),RUo=o("wavlm"),BUo=o(" \u2014 "),aX=a("a"),PUo=o("WavLMForAudioFrameClassification"),IUo=o(" (WavLM model)"),qUo=l(),FT=a("p"),NUo=o("The model is set in evaluation mode by default using "),Aue=a("code"),jUo=o("model.eval()"),DUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yue=a("code"),GUo=o("model.train()"),OUo=l(),v(vT.$$.fragment),SIe=l(),fd=a("h2"),TT=a("a"),Lue=a("span"),v(XL.$$.fragment),VUo=l(),xue=a("span"),XUo=o("AutoModelForCTC"),RIe=l(),Vo=a("div"),v(zL.$$.fragment),zUo=l(),gd=a("p"),QUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),nX=a("a"),WUo=o("from_pretrained()"),HUo=o(" class method or the "),sX=a("a"),UUo=o("from_config()"),JUo=o(` class
method.`),YUo=l(),QL=a("p"),KUo=o("This class cannot be instantiated directly using "),$ue=a("code"),ZUo=o("__init__()"),eJo=o(" (throws an error)."),oJo=l(),_t=a("div"),v(WL.$$.fragment),rJo=l(),kue=a("p"),tJo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),aJo=l(),hd=a("p"),nJo=o(`Note:
Loading a model from its configuration file does `),Sue=a("strong"),sJo=o("not"),lJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lX=a("a"),iJo=o("from_pretrained()"),dJo=o(" to load the model weights."),cJo=l(),v(MT.$$.fragment),mJo=l(),co=a("div"),v(HL.$$.fragment),fJo=l(),Rue=a("p"),gJo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),hJo=l(),Oa=a("p"),uJo=o("The model class to instantiate is selected based on the "),Bue=a("code"),pJo=o("model_type"),_Jo=o(` property of the config object (either
passed as an argument or loaded from `),Pue=a("code"),bJo=o("pretrained_model_name_or_path"),FJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=a("code"),vJo=o("pretrained_model_name_or_path"),TJo=o(":"),MJo=l(),je=a("ul"),ET=a("li"),que=a("strong"),EJo=o("data2vec-audio"),CJo=o(" \u2014 "),iX=a("a"),wJo=o("Data2VecAudioForCTC"),AJo=o(" (Data2VecAudio model)"),yJo=l(),CT=a("li"),Nue=a("strong"),LJo=o("hubert"),xJo=o(" \u2014 "),dX=a("a"),$Jo=o("HubertForCTC"),kJo=o(" (Hubert model)"),SJo=l(),wT=a("li"),jue=a("strong"),RJo=o("sew"),BJo=o(" \u2014 "),cX=a("a"),PJo=o("SEWForCTC"),IJo=o(" (SEW model)"),qJo=l(),AT=a("li"),Due=a("strong"),NJo=o("sew-d"),jJo=o(" \u2014 "),mX=a("a"),DJo=o("SEWDForCTC"),GJo=o(" (SEW-D model)"),OJo=l(),yT=a("li"),Gue=a("strong"),VJo=o("unispeech"),XJo=o(" \u2014 "),fX=a("a"),zJo=o("UniSpeechForCTC"),QJo=o(" (UniSpeech model)"),WJo=l(),LT=a("li"),Oue=a("strong"),HJo=o("unispeech-sat"),UJo=o(" \u2014 "),gX=a("a"),JJo=o("UniSpeechSatForCTC"),YJo=o(" (UniSpeechSat model)"),KJo=l(),xT=a("li"),Vue=a("strong"),ZJo=o("wav2vec2"),eYo=o(" \u2014 "),hX=a("a"),oYo=o("Wav2Vec2ForCTC"),rYo=o(" (Wav2Vec2 model)"),tYo=l(),$T=a("li"),Xue=a("strong"),aYo=o("wavlm"),nYo=o(" \u2014 "),uX=a("a"),sYo=o("WavLMForCTC"),lYo=o(" (WavLM model)"),iYo=l(),kT=a("p"),dYo=o("The model is set in evaluation mode by default using "),zue=a("code"),cYo=o("model.eval()"),mYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Que=a("code"),fYo=o("model.train()"),gYo=l(),v(ST.$$.fragment),BIe=l(),ud=a("h2"),RT=a("a"),Wue=a("span"),v(UL.$$.fragment),hYo=l(),Hue=a("span"),uYo=o("AutoModelForSpeechSeq2Seq"),PIe=l(),Xo=a("div"),v(JL.$$.fragment),pYo=l(),pd=a("p"),_Yo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),pX=a("a"),bYo=o("from_pretrained()"),FYo=o(" class method or the "),_X=a("a"),vYo=o("from_config()"),TYo=o(` class
method.`),MYo=l(),YL=a("p"),EYo=o("This class cannot be instantiated directly using "),Uue=a("code"),CYo=o("__init__()"),wYo=o(" (throws an error)."),AYo=l(),bt=a("div"),v(KL.$$.fragment),yYo=l(),Jue=a("p"),LYo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),xYo=l(),_d=a("p"),$Yo=o(`Note:
Loading a model from its configuration file does `),Yue=a("strong"),kYo=o("not"),SYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=a("a"),RYo=o("from_pretrained()"),BYo=o(" to load the model weights."),PYo=l(),v(BT.$$.fragment),IYo=l(),mo=a("div"),v(ZL.$$.fragment),qYo=l(),Kue=a("p"),NYo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),jYo=l(),Va=a("p"),DYo=o("The model class to instantiate is selected based on the "),Zue=a("code"),GYo=o("model_type"),OYo=o(` property of the config object (either
passed as an argument or loaded from `),epe=a("code"),VYo=o("pretrained_model_name_or_path"),XYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ope=a("code"),zYo=o("pretrained_model_name_or_path"),QYo=o(":"),WYo=l(),e8=a("ul"),PT=a("li"),rpe=a("strong"),HYo=o("speech-encoder-decoder"),UYo=o(" \u2014 "),FX=a("a"),JYo=o("SpeechEncoderDecoderModel"),YYo=o(" (Speech Encoder decoder model)"),KYo=l(),IT=a("li"),tpe=a("strong"),ZYo=o("speech_to_text"),eKo=o(" \u2014 "),vX=a("a"),oKo=o("Speech2TextForConditionalGeneration"),rKo=o(" (Speech2Text model)"),tKo=l(),qT=a("p"),aKo=o("The model is set in evaluation mode by default using "),ape=a("code"),nKo=o("model.eval()"),sKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),npe=a("code"),lKo=o("model.train()"),iKo=l(),v(NT.$$.fragment),IIe=l(),bd=a("h2"),jT=a("a"),spe=a("span"),v(o8.$$.fragment),dKo=l(),lpe=a("span"),cKo=o("AutoModelForAudioXVector"),qIe=l(),zo=a("div"),v(r8.$$.fragment),mKo=l(),Fd=a("p"),fKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),TX=a("a"),gKo=o("from_pretrained()"),hKo=o(" class method or the "),MX=a("a"),uKo=o("from_config()"),pKo=o(` class
method.`),_Ko=l(),t8=a("p"),bKo=o("This class cannot be instantiated directly using "),ipe=a("code"),FKo=o("__init__()"),vKo=o(" (throws an error)."),TKo=l(),Ft=a("div"),v(a8.$$.fragment),MKo=l(),dpe=a("p"),EKo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),CKo=l(),vd=a("p"),wKo=o(`Note:
Loading a model from its configuration file does `),cpe=a("strong"),AKo=o("not"),yKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EX=a("a"),LKo=o("from_pretrained()"),xKo=o(" to load the model weights."),$Ko=l(),v(DT.$$.fragment),kKo=l(),fo=a("div"),v(n8.$$.fragment),SKo=l(),mpe=a("p"),RKo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),BKo=l(),Xa=a("p"),PKo=o("The model class to instantiate is selected based on the "),fpe=a("code"),IKo=o("model_type"),qKo=o(` property of the config object (either
passed as an argument or loaded from `),gpe=a("code"),NKo=o("pretrained_model_name_or_path"),jKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hpe=a("code"),DKo=o("pretrained_model_name_or_path"),GKo=o(":"),OKo=l(),za=a("ul"),GT=a("li"),upe=a("strong"),VKo=o("data2vec-audio"),XKo=o(" \u2014 "),CX=a("a"),zKo=o("Data2VecAudioForXVector"),QKo=o(" (Data2VecAudio model)"),WKo=l(),OT=a("li"),ppe=a("strong"),HKo=o("unispeech-sat"),UKo=o(" \u2014 "),wX=a("a"),JKo=o("UniSpeechSatForXVector"),YKo=o(" (UniSpeechSat model)"),KKo=l(),VT=a("li"),_pe=a("strong"),ZKo=o("wav2vec2"),eZo=o(" \u2014 "),AX=a("a"),oZo=o("Wav2Vec2ForXVector"),rZo=o(" (Wav2Vec2 model)"),tZo=l(),XT=a("li"),bpe=a("strong"),aZo=o("wavlm"),nZo=o(" \u2014 "),yX=a("a"),sZo=o("WavLMForXVector"),lZo=o(" (WavLM model)"),iZo=l(),zT=a("p"),dZo=o("The model is set in evaluation mode by default using "),Fpe=a("code"),cZo=o("model.eval()"),mZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vpe=a("code"),fZo=o("model.train()"),gZo=l(),v(QT.$$.fragment),NIe=l(),Td=a("h2"),WT=a("a"),Tpe=a("span"),v(s8.$$.fragment),hZo=l(),Mpe=a("span"),uZo=o("AutoModelForMaskedImageModeling"),jIe=l(),Qo=a("div"),v(l8.$$.fragment),pZo=l(),Md=a("p"),_Zo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),LX=a("a"),bZo=o("from_pretrained()"),FZo=o(" class method or the "),xX=a("a"),vZo=o("from_config()"),TZo=o(` class
method.`),MZo=l(),i8=a("p"),EZo=o("This class cannot be instantiated directly using "),Epe=a("code"),CZo=o("__init__()"),wZo=o(" (throws an error)."),AZo=l(),vt=a("div"),v(d8.$$.fragment),yZo=l(),Cpe=a("p"),LZo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),xZo=l(),Ed=a("p"),$Zo=o(`Note:
Loading a model from its configuration file does `),wpe=a("strong"),kZo=o("not"),SZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=a("a"),RZo=o("from_pretrained()"),BZo=o(" to load the model weights."),PZo=l(),v(HT.$$.fragment),IZo=l(),go=a("div"),v(c8.$$.fragment),qZo=l(),Ape=a("p"),NZo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),jZo=l(),Qa=a("p"),DZo=o("The model class to instantiate is selected based on the "),ype=a("code"),GZo=o("model_type"),OZo=o(` property of the config object (either
passed as an argument or loaded from `),Lpe=a("code"),VZo=o("pretrained_model_name_or_path"),XZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xpe=a("code"),zZo=o("pretrained_model_name_or_path"),QZo=o(":"),WZo=l(),Cd=a("ul"),UT=a("li"),$pe=a("strong"),HZo=o("deit"),UZo=o(" \u2014 "),kX=a("a"),JZo=o("DeiTForMaskedImageModeling"),YZo=o(" (DeiT model)"),KZo=l(),JT=a("li"),kpe=a("strong"),ZZo=o("swin"),eer=o(" \u2014 "),SX=a("a"),oer=o("SwinForMaskedImageModeling"),rer=o(" (Swin model)"),ter=l(),YT=a("li"),Spe=a("strong"),aer=o("vit"),ner=o(" \u2014 "),RX=a("a"),ser=o("ViTForMaskedImageModeling"),ler=o(" (ViT model)"),ier=l(),KT=a("p"),der=o("The model is set in evaluation mode by default using "),Rpe=a("code"),cer=o("model.eval()"),mer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bpe=a("code"),fer=o("model.train()"),ger=l(),v(ZT.$$.fragment),DIe=l(),wd=a("h2"),eM=a("a"),Ppe=a("span"),v(m8.$$.fragment),her=l(),Ipe=a("span"),uer=o("AutoModelForObjectDetection"),GIe=l(),Wo=a("div"),v(f8.$$.fragment),per=l(),Ad=a("p"),_er=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),BX=a("a"),ber=o("from_pretrained()"),Fer=o(" class method or the "),PX=a("a"),ver=o("from_config()"),Ter=o(` class
method.`),Mer=l(),g8=a("p"),Eer=o("This class cannot be instantiated directly using "),qpe=a("code"),Cer=o("__init__()"),wer=o(" (throws an error)."),Aer=l(),Tt=a("div"),v(h8.$$.fragment),yer=l(),Npe=a("p"),Ler=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),xer=l(),yd=a("p"),$er=o(`Note:
Loading a model from its configuration file does `),jpe=a("strong"),ker=o("not"),Ser=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=a("a"),Rer=o("from_pretrained()"),Ber=o(" to load the model weights."),Per=l(),v(oM.$$.fragment),Ier=l(),ho=a("div"),v(u8.$$.fragment),qer=l(),Dpe=a("p"),Ner=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),jer=l(),Wa=a("p"),Der=o("The model class to instantiate is selected based on the "),Gpe=a("code"),Ger=o("model_type"),Oer=o(` property of the config object (either
passed as an argument or loaded from `),Ope=a("code"),Ver=o("pretrained_model_name_or_path"),Xer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vpe=a("code"),zer=o("pretrained_model_name_or_path"),Qer=o(":"),Wer=l(),p8=a("ul"),rM=a("li"),Xpe=a("strong"),Her=o("detr"),Uer=o(" \u2014 "),qX=a("a"),Jer=o("DetrForObjectDetection"),Yer=o(" (DETR model)"),Ker=l(),tM=a("li"),zpe=a("strong"),Zer=o("yolos"),eor=o(" \u2014 "),NX=a("a"),oor=o("YolosForObjectDetection"),ror=o(" (YOLOS model)"),tor=l(),aM=a("p"),aor=o("The model is set in evaluation mode by default using "),Qpe=a("code"),nor=o("model.eval()"),sor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wpe=a("code"),lor=o("model.train()"),ior=l(),v(nM.$$.fragment),OIe=l(),Ld=a("h2"),sM=a("a"),Hpe=a("span"),v(_8.$$.fragment),dor=l(),Upe=a("span"),cor=o("AutoModelForImageSegmentation"),VIe=l(),Ho=a("div"),v(b8.$$.fragment),mor=l(),xd=a("p"),gor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),jX=a("a"),hor=o("from_pretrained()"),uor=o(" class method or the "),DX=a("a"),por=o("from_config()"),_or=o(` class
method.`),bor=l(),F8=a("p"),For=o("This class cannot be instantiated directly using "),Jpe=a("code"),vor=o("__init__()"),Tor=o(" (throws an error)."),Mor=l(),Mt=a("div"),v(v8.$$.fragment),Eor=l(),Ype=a("p"),Cor=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),wor=l(),$d=a("p"),Aor=o(`Note:
Loading a model from its configuration file does `),Kpe=a("strong"),yor=o("not"),Lor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GX=a("a"),xor=o("from_pretrained()"),$or=o(" to load the model weights."),kor=l(),v(lM.$$.fragment),Sor=l(),uo=a("div"),v(T8.$$.fragment),Ror=l(),Zpe=a("p"),Bor=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Por=l(),Ha=a("p"),Ior=o("The model class to instantiate is selected based on the "),e_e=a("code"),qor=o("model_type"),Nor=o(` property of the config object (either
passed as an argument or loaded from `),o_e=a("code"),jor=o("pretrained_model_name_or_path"),Dor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r_e=a("code"),Gor=o("pretrained_model_name_or_path"),Oor=o(":"),Vor=l(),t_e=a("ul"),iM=a("li"),a_e=a("strong"),Xor=o("detr"),zor=o(" \u2014 "),OX=a("a"),Qor=o("DetrForSegmentation"),Wor=o(" (DETR model)"),Hor=l(),dM=a("p"),Uor=o("The model is set in evaluation mode by default using "),n_e=a("code"),Jor=o("model.eval()"),Yor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s_e=a("code"),Kor=o("model.train()"),Zor=l(),v(cM.$$.fragment),XIe=l(),kd=a("h2"),mM=a("a"),l_e=a("span"),v(M8.$$.fragment),err=l(),i_e=a("span"),orr=o("AutoModelForSemanticSegmentation"),zIe=l(),Uo=a("div"),v(E8.$$.fragment),rrr=l(),Sd=a("p"),trr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),VX=a("a"),arr=o("from_pretrained()"),nrr=o(" class method or the "),XX=a("a"),srr=o("from_config()"),lrr=o(` class
method.`),irr=l(),C8=a("p"),drr=o("This class cannot be instantiated directly using "),d_e=a("code"),crr=o("__init__()"),mrr=o(" (throws an error)."),frr=l(),Et=a("div"),v(w8.$$.fragment),grr=l(),c_e=a("p"),hrr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),urr=l(),Rd=a("p"),prr=o(`Note:
Loading a model from its configuration file does `),m_e=a("strong"),_rr=o("not"),brr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=a("a"),Frr=o("from_pretrained()"),vrr=o(" to load the model weights."),Trr=l(),v(fM.$$.fragment),Mrr=l(),po=a("div"),v(A8.$$.fragment),Err=l(),f_e=a("p"),Crr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),wrr=l(),Ua=a("p"),Arr=o("The model class to instantiate is selected based on the "),g_e=a("code"),yrr=o("model_type"),Lrr=o(` property of the config object (either
passed as an argument or loaded from `),h_e=a("code"),xrr=o("pretrained_model_name_or_path"),$rr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u_e=a("code"),krr=o("pretrained_model_name_or_path"),Srr=o(":"),Rrr=l(),Ja=a("ul"),gM=a("li"),p_e=a("strong"),Brr=o("beit"),Prr=o(" \u2014 "),QX=a("a"),Irr=o("BeitForSemanticSegmentation"),qrr=o(" (BEiT model)"),Nrr=l(),hM=a("li"),__e=a("strong"),jrr=o("data2vec-vision"),Drr=o(" \u2014 "),WX=a("a"),Grr=o("Data2VecVisionForSemanticSegmentation"),Orr=o(" (Data2VecVision model)"),Vrr=l(),uM=a("li"),b_e=a("strong"),Xrr=o("dpt"),zrr=o(" \u2014 "),HX=a("a"),Qrr=o("DPTForSemanticSegmentation"),Wrr=o(" (DPT model)"),Hrr=l(),pM=a("li"),F_e=a("strong"),Urr=o("segformer"),Jrr=o(" \u2014 "),UX=a("a"),Yrr=o("SegformerForSemanticSegmentation"),Krr=o(" (SegFormer model)"),Zrr=l(),_M=a("p"),etr=o("The model is set in evaluation mode by default using "),v_e=a("code"),otr=o("model.eval()"),rtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T_e=a("code"),ttr=o("model.train()"),atr=l(),v(bM.$$.fragment),QIe=l(),Bd=a("h2"),FM=a("a"),M_e=a("span"),v(y8.$$.fragment),ntr=l(),E_e=a("span"),str=o("AutoModelForInstanceSegmentation"),WIe=l(),Jo=a("div"),v(L8.$$.fragment),ltr=l(),Pd=a("p"),itr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),JX=a("a"),dtr=o("from_pretrained()"),ctr=o(" class method or the "),YX=a("a"),mtr=o("from_config()"),ftr=o(` class
method.`),gtr=l(),x8=a("p"),htr=o("This class cannot be instantiated directly using "),C_e=a("code"),utr=o("__init__()"),ptr=o(" (throws an error)."),_tr=l(),Ct=a("div"),v($8.$$.fragment),btr=l(),w_e=a("p"),Ftr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),vtr=l(),Id=a("p"),Ttr=o(`Note:
Loading a model from its configuration file does `),A_e=a("strong"),Mtr=o("not"),Etr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KX=a("a"),Ctr=o("from_pretrained()"),wtr=o(" to load the model weights."),Atr=l(),v(vM.$$.fragment),ytr=l(),_o=a("div"),v(k8.$$.fragment),Ltr=l(),y_e=a("p"),xtr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),$tr=l(),Ya=a("p"),ktr=o("The model class to instantiate is selected based on the "),L_e=a("code"),Str=o("model_type"),Rtr=o(` property of the config object (either
passed as an argument or loaded from `),x_e=a("code"),Btr=o("pretrained_model_name_or_path"),Ptr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$_e=a("code"),Itr=o("pretrained_model_name_or_path"),qtr=o(":"),Ntr=l(),k_e=a("ul"),TM=a("li"),S_e=a("strong"),jtr=o("maskformer"),Dtr=o(" \u2014 "),ZX=a("a"),Gtr=o("MaskFormerForInstanceSegmentation"),Otr=o(" (MaskFormer model)"),Vtr=l(),MM=a("p"),Xtr=o("The model is set in evaluation mode by default using "),R_e=a("code"),ztr=o("model.eval()"),Qtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B_e=a("code"),Wtr=o("model.train()"),Htr=l(),v(EM.$$.fragment),HIe=l(),qd=a("h2"),CM=a("a"),P_e=a("span"),v(S8.$$.fragment),Utr=l(),I_e=a("span"),Jtr=o("TFAutoModel"),UIe=l(),Yo=a("div"),v(R8.$$.fragment),Ytr=l(),Nd=a("p"),Ktr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ez=a("a"),Ztr=o("from_pretrained()"),ear=o(" class method or the "),oz=a("a"),oar=o("from_config()"),rar=o(` class
method.`),tar=l(),B8=a("p"),aar=o("This class cannot be instantiated directly using "),q_e=a("code"),nar=o("__init__()"),sar=o(" (throws an error)."),lar=l(),wt=a("div"),v(P8.$$.fragment),iar=l(),N_e=a("p"),dar=o("Instantiates one of the base model classes of the library from a configuration."),car=l(),jd=a("p"),mar=o(`Note:
Loading a model from its configuration file does `),j_e=a("strong"),far=o("not"),gar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=a("a"),har=o("from_pretrained()"),uar=o(" to load the model weights."),par=l(),v(wM.$$.fragment),_ar=l(),wr=a("div"),v(I8.$$.fragment),bar=l(),D_e=a("p"),Far=o("Instantiate one of the base model classes of the library from a pretrained model."),Tar=l(),Ka=a("p"),Mar=o("The model class to instantiate is selected based on the "),G_e=a("code"),Ear=o("model_type"),Car=o(` property of the config object (either
passed as an argument or loaded from `),O_e=a("code"),war=o("pretrained_model_name_or_path"),Aar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=a("code"),yar=o("pretrained_model_name_or_path"),Lar=o(":"),xar=l(),j=a("ul"),AM=a("li"),X_e=a("strong"),$ar=o("albert"),kar=o(" \u2014 "),tz=a("a"),Sar=o("TFAlbertModel"),Rar=o(" (ALBERT model)"),Bar=l(),yM=a("li"),z_e=a("strong"),Par=o("bart"),Iar=o(" \u2014 "),az=a("a"),qar=o("TFBartModel"),Nar=o(" (BART model)"),jar=l(),LM=a("li"),Q_e=a("strong"),Dar=o("bert"),Gar=o(" \u2014 "),nz=a("a"),Oar=o("TFBertModel"),Var=o(" (BERT model)"),Xar=l(),xM=a("li"),W_e=a("strong"),zar=o("blenderbot"),Qar=o(" \u2014 "),sz=a("a"),War=o("TFBlenderbotModel"),Har=o(" (Blenderbot model)"),Uar=l(),$M=a("li"),H_e=a("strong"),Jar=o("blenderbot-small"),Yar=o(" \u2014 "),lz=a("a"),Kar=o("TFBlenderbotSmallModel"),Zar=o(" (BlenderbotSmall model)"),enr=l(),kM=a("li"),U_e=a("strong"),onr=o("camembert"),rnr=o(" \u2014 "),iz=a("a"),tnr=o("TFCamembertModel"),anr=o(" (CamemBERT model)"),nnr=l(),SM=a("li"),J_e=a("strong"),snr=o("clip"),lnr=o(" \u2014 "),dz=a("a"),inr=o("TFCLIPModel"),dnr=o(" (CLIP model)"),cnr=l(),RM=a("li"),Y_e=a("strong"),mnr=o("convbert"),fnr=o(" \u2014 "),cz=a("a"),gnr=o("TFConvBertModel"),hnr=o(" (ConvBERT model)"),unr=l(),BM=a("li"),K_e=a("strong"),pnr=o("convnext"),_nr=o(" \u2014 "),mz=a("a"),bnr=o("TFConvNextModel"),Fnr=o(" (ConvNext model)"),vnr=l(),PM=a("li"),Z_e=a("strong"),Tnr=o("ctrl"),Mnr=o(" \u2014 "),fz=a("a"),Enr=o("TFCTRLModel"),Cnr=o(" (CTRL model)"),wnr=l(),IM=a("li"),ebe=a("strong"),Anr=o("data2vec-vision"),ynr=o(" \u2014 "),gz=a("a"),Lnr=o("TFData2VecVisionModel"),xnr=o(" (Data2VecVision model)"),$nr=l(),qM=a("li"),obe=a("strong"),knr=o("deberta"),Snr=o(" \u2014 "),hz=a("a"),Rnr=o("TFDebertaModel"),Bnr=o(" (DeBERTa model)"),Pnr=l(),NM=a("li"),rbe=a("strong"),Inr=o("deberta-v2"),qnr=o(" \u2014 "),uz=a("a"),Nnr=o("TFDebertaV2Model"),jnr=o(" (DeBERTa-v2 model)"),Dnr=l(),jM=a("li"),tbe=a("strong"),Gnr=o("distilbert"),Onr=o(" \u2014 "),pz=a("a"),Vnr=o("TFDistilBertModel"),Xnr=o(" (DistilBERT model)"),znr=l(),DM=a("li"),abe=a("strong"),Qnr=o("dpr"),Wnr=o(" \u2014 "),_z=a("a"),Hnr=o("TFDPRQuestionEncoder"),Unr=o(" (DPR model)"),Jnr=l(),GM=a("li"),nbe=a("strong"),Ynr=o("electra"),Knr=o(" \u2014 "),bz=a("a"),Znr=o("TFElectraModel"),esr=o(" (ELECTRA model)"),osr=l(),OM=a("li"),sbe=a("strong"),rsr=o("flaubert"),tsr=o(" \u2014 "),Fz=a("a"),asr=o("TFFlaubertModel"),nsr=o(" (FlauBERT model)"),ssr=l(),Bs=a("li"),lbe=a("strong"),lsr=o("funnel"),isr=o(" \u2014 "),vz=a("a"),dsr=o("TFFunnelModel"),csr=o(" or "),Tz=a("a"),msr=o("TFFunnelBaseModel"),fsr=o(" (Funnel Transformer model)"),gsr=l(),VM=a("li"),ibe=a("strong"),hsr=o("gpt2"),usr=o(" \u2014 "),Mz=a("a"),psr=o("TFGPT2Model"),_sr=o(" (OpenAI GPT-2 model)"),bsr=l(),XM=a("li"),dbe=a("strong"),Fsr=o("gptj"),vsr=o(" \u2014 "),Ez=a("a"),Tsr=o("TFGPTJModel"),Msr=o(" (GPT-J model)"),Esr=l(),zM=a("li"),cbe=a("strong"),Csr=o("hubert"),wsr=o(" \u2014 "),Cz=a("a"),Asr=o("TFHubertModel"),ysr=o(" (Hubert model)"),Lsr=l(),QM=a("li"),mbe=a("strong"),xsr=o("layoutlm"),$sr=o(" \u2014 "),wz=a("a"),ksr=o("TFLayoutLMModel"),Ssr=o(" (LayoutLM model)"),Rsr=l(),WM=a("li"),fbe=a("strong"),Bsr=o("led"),Psr=o(" \u2014 "),Az=a("a"),Isr=o("TFLEDModel"),qsr=o(" (LED model)"),Nsr=l(),HM=a("li"),gbe=a("strong"),jsr=o("longformer"),Dsr=o(" \u2014 "),yz=a("a"),Gsr=o("TFLongformerModel"),Osr=o(" (Longformer model)"),Vsr=l(),UM=a("li"),hbe=a("strong"),Xsr=o("lxmert"),zsr=o(" \u2014 "),Lz=a("a"),Qsr=o("TFLxmertModel"),Wsr=o(" (LXMERT model)"),Hsr=l(),JM=a("li"),ube=a("strong"),Usr=o("marian"),Jsr=o(" \u2014 "),xz=a("a"),Ysr=o("TFMarianModel"),Ksr=o(" (Marian model)"),Zsr=l(),YM=a("li"),pbe=a("strong"),elr=o("mbart"),olr=o(" \u2014 "),$z=a("a"),rlr=o("TFMBartModel"),tlr=o(" (mBART model)"),alr=l(),KM=a("li"),_be=a("strong"),nlr=o("mobilebert"),slr=o(" \u2014 "),kz=a("a"),llr=o("TFMobileBertModel"),ilr=o(" (MobileBERT model)"),dlr=l(),ZM=a("li"),bbe=a("strong"),clr=o("mpnet"),mlr=o(" \u2014 "),Sz=a("a"),flr=o("TFMPNetModel"),glr=o(" (MPNet model)"),hlr=l(),e4=a("li"),Fbe=a("strong"),ulr=o("mt5"),plr=o(" \u2014 "),Rz=a("a"),_lr=o("TFMT5Model"),blr=o(" (mT5 model)"),Flr=l(),o4=a("li"),vbe=a("strong"),vlr=o("openai-gpt"),Tlr=o(" \u2014 "),Bz=a("a"),Mlr=o("TFOpenAIGPTModel"),Elr=o(" (OpenAI GPT model)"),Clr=l(),r4=a("li"),Tbe=a("strong"),wlr=o("pegasus"),Alr=o(" \u2014 "),Pz=a("a"),ylr=o("TFPegasusModel"),Llr=o(" (Pegasus model)"),xlr=l(),t4=a("li"),Mbe=a("strong"),$lr=o("rembert"),klr=o(" \u2014 "),Iz=a("a"),Slr=o("TFRemBertModel"),Rlr=o(" (RemBERT model)"),Blr=l(),a4=a("li"),Ebe=a("strong"),Plr=o("roberta"),Ilr=o(" \u2014 "),qz=a("a"),qlr=o("TFRobertaModel"),Nlr=o(" (RoBERTa model)"),jlr=l(),n4=a("li"),Cbe=a("strong"),Dlr=o("roformer"),Glr=o(" \u2014 "),Nz=a("a"),Olr=o("TFRoFormerModel"),Vlr=o(" (RoFormer model)"),Xlr=l(),s4=a("li"),wbe=a("strong"),zlr=o("speech_to_text"),Qlr=o(" \u2014 "),jz=a("a"),Wlr=o("TFSpeech2TextModel"),Hlr=o(" (Speech2Text model)"),Ulr=l(),l4=a("li"),Abe=a("strong"),Jlr=o("t5"),Ylr=o(" \u2014 "),Dz=a("a"),Klr=o("TFT5Model"),Zlr=o(" (T5 model)"),eir=l(),i4=a("li"),ybe=a("strong"),oir=o("tapas"),rir=o(" \u2014 "),Gz=a("a"),tir=o("TFTapasModel"),air=o(" (TAPAS model)"),nir=l(),d4=a("li"),Lbe=a("strong"),sir=o("transfo-xl"),lir=o(" \u2014 "),Oz=a("a"),iir=o("TFTransfoXLModel"),dir=o(" (Transformer-XL model)"),cir=l(),c4=a("li"),xbe=a("strong"),mir=o("vit"),fir=o(" \u2014 "),Vz=a("a"),gir=o("TFViTModel"),hir=o(" (ViT model)"),uir=l(),m4=a("li"),$be=a("strong"),pir=o("vit_mae"),_ir=o(" \u2014 "),Xz=a("a"),bir=o("TFViTMAEModel"),Fir=o(" (ViTMAE model)"),vir=l(),f4=a("li"),kbe=a("strong"),Tir=o("wav2vec2"),Mir=o(" \u2014 "),zz=a("a"),Eir=o("TFWav2Vec2Model"),Cir=o(" (Wav2Vec2 model)"),wir=l(),g4=a("li"),Sbe=a("strong"),Air=o("xlm"),yir=o(" \u2014 "),Qz=a("a"),Lir=o("TFXLMModel"),xir=o(" (XLM model)"),$ir=l(),h4=a("li"),Rbe=a("strong"),kir=o("xlm-roberta"),Sir=o(" \u2014 "),Wz=a("a"),Rir=o("TFXLMRobertaModel"),Bir=o(" (XLM-RoBERTa model)"),Pir=l(),u4=a("li"),Bbe=a("strong"),Iir=o("xlnet"),qir=o(" \u2014 "),Hz=a("a"),Nir=o("TFXLNetModel"),jir=o(" (XLNet model)"),Dir=l(),v(p4.$$.fragment),JIe=l(),Dd=a("h2"),_4=a("a"),Pbe=a("span"),v(q8.$$.fragment),Gir=l(),Ibe=a("span"),Oir=o("TFAutoModelForPreTraining"),YIe=l(),Ko=a("div"),v(N8.$$.fragment),Vir=l(),Gd=a("p"),Xir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Uz=a("a"),zir=o("from_pretrained()"),Qir=o(" class method or the "),Jz=a("a"),Wir=o("from_config()"),Hir=o(` class
method.`),Uir=l(),j8=a("p"),Jir=o("This class cannot be instantiated directly using "),qbe=a("code"),Yir=o("__init__()"),Kir=o(" (throws an error)."),Zir=l(),At=a("div"),v(D8.$$.fragment),edr=l(),Nbe=a("p"),odr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),rdr=l(),Od=a("p"),tdr=o(`Note:
Loading a model from its configuration file does `),jbe=a("strong"),adr=o("not"),ndr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yz=a("a"),sdr=o("from_pretrained()"),ldr=o(" to load the model weights."),idr=l(),v(b4.$$.fragment),ddr=l(),Ar=a("div"),v(G8.$$.fragment),cdr=l(),Dbe=a("p"),mdr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fdr=l(),Za=a("p"),gdr=o("The model class to instantiate is selected based on the "),Gbe=a("code"),hdr=o("model_type"),udr=o(` property of the config object (either
passed as an argument or loaded from `),Obe=a("code"),pdr=o("pretrained_model_name_or_path"),_dr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vbe=a("code"),bdr=o("pretrained_model_name_or_path"),Fdr=o(":"),vdr=l(),se=a("ul"),F4=a("li"),Xbe=a("strong"),Tdr=o("albert"),Mdr=o(" \u2014 "),Kz=a("a"),Edr=o("TFAlbertForPreTraining"),Cdr=o(" (ALBERT model)"),wdr=l(),v4=a("li"),zbe=a("strong"),Adr=o("bart"),ydr=o(" \u2014 "),Zz=a("a"),Ldr=o("TFBartForConditionalGeneration"),xdr=o(" (BART model)"),$dr=l(),T4=a("li"),Qbe=a("strong"),kdr=o("bert"),Sdr=o(" \u2014 "),eQ=a("a"),Rdr=o("TFBertForPreTraining"),Bdr=o(" (BERT model)"),Pdr=l(),M4=a("li"),Wbe=a("strong"),Idr=o("camembert"),qdr=o(" \u2014 "),oQ=a("a"),Ndr=o("TFCamembertForMaskedLM"),jdr=o(" (CamemBERT model)"),Ddr=l(),E4=a("li"),Hbe=a("strong"),Gdr=o("ctrl"),Odr=o(" \u2014 "),rQ=a("a"),Vdr=o("TFCTRLLMHeadModel"),Xdr=o(" (CTRL model)"),zdr=l(),C4=a("li"),Ube=a("strong"),Qdr=o("distilbert"),Wdr=o(" \u2014 "),tQ=a("a"),Hdr=o("TFDistilBertForMaskedLM"),Udr=o(" (DistilBERT model)"),Jdr=l(),w4=a("li"),Jbe=a("strong"),Ydr=o("electra"),Kdr=o(" \u2014 "),aQ=a("a"),Zdr=o("TFElectraForPreTraining"),ecr=o(" (ELECTRA model)"),ocr=l(),A4=a("li"),Ybe=a("strong"),rcr=o("flaubert"),tcr=o(" \u2014 "),nQ=a("a"),acr=o("TFFlaubertWithLMHeadModel"),ncr=o(" (FlauBERT model)"),scr=l(),y4=a("li"),Kbe=a("strong"),lcr=o("funnel"),icr=o(" \u2014 "),sQ=a("a"),dcr=o("TFFunnelForPreTraining"),ccr=o(" (Funnel Transformer model)"),mcr=l(),L4=a("li"),Zbe=a("strong"),fcr=o("gpt2"),gcr=o(" \u2014 "),lQ=a("a"),hcr=o("TFGPT2LMHeadModel"),ucr=o(" (OpenAI GPT-2 model)"),pcr=l(),x4=a("li"),e2e=a("strong"),_cr=o("layoutlm"),bcr=o(" \u2014 "),iQ=a("a"),Fcr=o("TFLayoutLMForMaskedLM"),vcr=o(" (LayoutLM model)"),Tcr=l(),$4=a("li"),o2e=a("strong"),Mcr=o("lxmert"),Ecr=o(" \u2014 "),dQ=a("a"),Ccr=o("TFLxmertForPreTraining"),wcr=o(" (LXMERT model)"),Acr=l(),k4=a("li"),r2e=a("strong"),ycr=o("mobilebert"),Lcr=o(" \u2014 "),cQ=a("a"),xcr=o("TFMobileBertForPreTraining"),$cr=o(" (MobileBERT model)"),kcr=l(),S4=a("li"),t2e=a("strong"),Scr=o("mpnet"),Rcr=o(" \u2014 "),mQ=a("a"),Bcr=o("TFMPNetForMaskedLM"),Pcr=o(" (MPNet model)"),Icr=l(),R4=a("li"),a2e=a("strong"),qcr=o("openai-gpt"),Ncr=o(" \u2014 "),fQ=a("a"),jcr=o("TFOpenAIGPTLMHeadModel"),Dcr=o(" (OpenAI GPT model)"),Gcr=l(),B4=a("li"),n2e=a("strong"),Ocr=o("roberta"),Vcr=o(" \u2014 "),gQ=a("a"),Xcr=o("TFRobertaForMaskedLM"),zcr=o(" (RoBERTa model)"),Qcr=l(),P4=a("li"),s2e=a("strong"),Wcr=o("t5"),Hcr=o(" \u2014 "),hQ=a("a"),Ucr=o("TFT5ForConditionalGeneration"),Jcr=o(" (T5 model)"),Ycr=l(),I4=a("li"),l2e=a("strong"),Kcr=o("tapas"),Zcr=o(" \u2014 "),uQ=a("a"),emr=o("TFTapasForMaskedLM"),omr=o(" (TAPAS model)"),rmr=l(),q4=a("li"),i2e=a("strong"),tmr=o("transfo-xl"),amr=o(" \u2014 "),pQ=a("a"),nmr=o("TFTransfoXLLMHeadModel"),smr=o(" (Transformer-XL model)"),lmr=l(),N4=a("li"),d2e=a("strong"),imr=o("vit_mae"),dmr=o(" \u2014 "),_Q=a("a"),cmr=o("TFViTMAEForPreTraining"),mmr=o(" (ViTMAE model)"),fmr=l(),j4=a("li"),c2e=a("strong"),gmr=o("xlm"),hmr=o(" \u2014 "),bQ=a("a"),umr=o("TFXLMWithLMHeadModel"),pmr=o(" (XLM model)"),_mr=l(),D4=a("li"),m2e=a("strong"),bmr=o("xlm-roberta"),Fmr=o(" \u2014 "),FQ=a("a"),vmr=o("TFXLMRobertaForMaskedLM"),Tmr=o(" (XLM-RoBERTa model)"),Mmr=l(),G4=a("li"),f2e=a("strong"),Emr=o("xlnet"),Cmr=o(" \u2014 "),vQ=a("a"),wmr=o("TFXLNetLMHeadModel"),Amr=o(" (XLNet model)"),ymr=l(),v(O4.$$.fragment),KIe=l(),Vd=a("h2"),V4=a("a"),g2e=a("span"),v(O8.$$.fragment),Lmr=l(),h2e=a("span"),xmr=o("TFAutoModelForCausalLM"),ZIe=l(),Zo=a("div"),v(V8.$$.fragment),$mr=l(),Xd=a("p"),kmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),TQ=a("a"),Smr=o("from_pretrained()"),Rmr=o(" class method or the "),MQ=a("a"),Bmr=o("from_config()"),Pmr=o(` class
method.`),Imr=l(),X8=a("p"),qmr=o("This class cannot be instantiated directly using "),u2e=a("code"),Nmr=o("__init__()"),jmr=o(" (throws an error)."),Dmr=l(),yt=a("div"),v(z8.$$.fragment),Gmr=l(),p2e=a("p"),Omr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Vmr=l(),zd=a("p"),Xmr=o(`Note:
Loading a model from its configuration file does `),_2e=a("strong"),zmr=o("not"),Qmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EQ=a("a"),Wmr=o("from_pretrained()"),Hmr=o(" to load the model weights."),Umr=l(),v(X4.$$.fragment),Jmr=l(),yr=a("div"),v(Q8.$$.fragment),Ymr=l(),b2e=a("p"),Kmr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Zmr=l(),en=a("p"),efr=o("The model class to instantiate is selected based on the "),F2e=a("code"),ofr=o("model_type"),rfr=o(` property of the config object (either
passed as an argument or loaded from `),v2e=a("code"),tfr=o("pretrained_model_name_or_path"),afr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T2e=a("code"),nfr=o("pretrained_model_name_or_path"),sfr=o(":"),lfr=l(),Te=a("ul"),z4=a("li"),M2e=a("strong"),ifr=o("bert"),dfr=o(" \u2014 "),CQ=a("a"),cfr=o("TFBertLMHeadModel"),mfr=o(" (BERT model)"),ffr=l(),Q4=a("li"),E2e=a("strong"),gfr=o("camembert"),hfr=o(" \u2014 "),wQ=a("a"),ufr=o("TFCamembertForCausalLM"),pfr=o(" (CamemBERT model)"),_fr=l(),W4=a("li"),C2e=a("strong"),bfr=o("ctrl"),Ffr=o(" \u2014 "),AQ=a("a"),vfr=o("TFCTRLLMHeadModel"),Tfr=o(" (CTRL model)"),Mfr=l(),H4=a("li"),w2e=a("strong"),Efr=o("gpt2"),Cfr=o(" \u2014 "),yQ=a("a"),wfr=o("TFGPT2LMHeadModel"),Afr=o(" (OpenAI GPT-2 model)"),yfr=l(),U4=a("li"),A2e=a("strong"),Lfr=o("gptj"),xfr=o(" \u2014 "),LQ=a("a"),$fr=o("TFGPTJForCausalLM"),kfr=o(" (GPT-J model)"),Sfr=l(),J4=a("li"),y2e=a("strong"),Rfr=o("openai-gpt"),Bfr=o(" \u2014 "),xQ=a("a"),Pfr=o("TFOpenAIGPTLMHeadModel"),Ifr=o(" (OpenAI GPT model)"),qfr=l(),Y4=a("li"),L2e=a("strong"),Nfr=o("rembert"),jfr=o(" \u2014 "),$Q=a("a"),Dfr=o("TFRemBertForCausalLM"),Gfr=o(" (RemBERT model)"),Ofr=l(),K4=a("li"),x2e=a("strong"),Vfr=o("roberta"),Xfr=o(" \u2014 "),kQ=a("a"),zfr=o("TFRobertaForCausalLM"),Qfr=o(" (RoBERTa model)"),Wfr=l(),Z4=a("li"),$2e=a("strong"),Hfr=o("roformer"),Ufr=o(" \u2014 "),SQ=a("a"),Jfr=o("TFRoFormerForCausalLM"),Yfr=o(" (RoFormer model)"),Kfr=l(),eE=a("li"),k2e=a("strong"),Zfr=o("transfo-xl"),egr=o(" \u2014 "),RQ=a("a"),ogr=o("TFTransfoXLLMHeadModel"),rgr=o(" (Transformer-XL model)"),tgr=l(),oE=a("li"),S2e=a("strong"),agr=o("xlm"),ngr=o(" \u2014 "),BQ=a("a"),sgr=o("TFXLMWithLMHeadModel"),lgr=o(" (XLM model)"),igr=l(),rE=a("li"),R2e=a("strong"),dgr=o("xlnet"),cgr=o(" \u2014 "),PQ=a("a"),mgr=o("TFXLNetLMHeadModel"),fgr=o(" (XLNet model)"),ggr=l(),v(tE.$$.fragment),eqe=l(),Qd=a("h2"),aE=a("a"),B2e=a("span"),v(W8.$$.fragment),hgr=l(),P2e=a("span"),ugr=o("TFAutoModelForImageClassification"),oqe=l(),er=a("div"),v(H8.$$.fragment),pgr=l(),Wd=a("p"),_gr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),IQ=a("a"),bgr=o("from_pretrained()"),Fgr=o(" class method or the "),qQ=a("a"),vgr=o("from_config()"),Tgr=o(` class
method.`),Mgr=l(),U8=a("p"),Egr=o("This class cannot be instantiated directly using "),I2e=a("code"),Cgr=o("__init__()"),wgr=o(" (throws an error)."),Agr=l(),Lt=a("div"),v(J8.$$.fragment),ygr=l(),q2e=a("p"),Lgr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),xgr=l(),Hd=a("p"),$gr=o(`Note:
Loading a model from its configuration file does `),N2e=a("strong"),kgr=o("not"),Sgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NQ=a("a"),Rgr=o("from_pretrained()"),Bgr=o(" to load the model weights."),Pgr=l(),v(nE.$$.fragment),Igr=l(),Lr=a("div"),v(Y8.$$.fragment),qgr=l(),j2e=a("p"),Ngr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),jgr=l(),on=a("p"),Dgr=o("The model class to instantiate is selected based on the "),D2e=a("code"),Ggr=o("model_type"),Ogr=o(` property of the config object (either
passed as an argument or loaded from `),G2e=a("code"),Vgr=o("pretrained_model_name_or_path"),Xgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O2e=a("code"),zgr=o("pretrained_model_name_or_path"),Qgr=o(":"),Wgr=l(),Ud=a("ul"),sE=a("li"),V2e=a("strong"),Hgr=o("convnext"),Ugr=o(" \u2014 "),jQ=a("a"),Jgr=o("TFConvNextForImageClassification"),Ygr=o(" (ConvNext model)"),Kgr=l(),lE=a("li"),X2e=a("strong"),Zgr=o("data2vec-vision"),ehr=o(" \u2014 "),DQ=a("a"),ohr=o("TFData2VecVisionForImageClassification"),rhr=o(" (Data2VecVision model)"),thr=l(),iE=a("li"),z2e=a("strong"),ahr=o("vit"),nhr=o(" \u2014 "),GQ=a("a"),shr=o("TFViTForImageClassification"),lhr=o(" (ViT model)"),ihr=l(),v(dE.$$.fragment),rqe=l(),Jd=a("h2"),cE=a("a"),Q2e=a("span"),v(K8.$$.fragment),dhr=l(),W2e=a("span"),chr=o("TFAutoModelForMaskedLM"),tqe=l(),or=a("div"),v(Z8.$$.fragment),mhr=l(),Yd=a("p"),fhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),OQ=a("a"),ghr=o("from_pretrained()"),hhr=o(" class method or the "),VQ=a("a"),uhr=o("from_config()"),phr=o(` class
method.`),_hr=l(),ex=a("p"),bhr=o("This class cannot be instantiated directly using "),H2e=a("code"),Fhr=o("__init__()"),vhr=o(" (throws an error)."),Thr=l(),xt=a("div"),v(ox.$$.fragment),Mhr=l(),U2e=a("p"),Ehr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Chr=l(),Kd=a("p"),whr=o(`Note:
Loading a model from its configuration file does `),J2e=a("strong"),Ahr=o("not"),yhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=a("a"),Lhr=o("from_pretrained()"),xhr=o(" to load the model weights."),$hr=l(),v(mE.$$.fragment),khr=l(),xr=a("div"),v(rx.$$.fragment),Shr=l(),Y2e=a("p"),Rhr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Bhr=l(),rn=a("p"),Phr=o("The model class to instantiate is selected based on the "),K2e=a("code"),Ihr=o("model_type"),qhr=o(` property of the config object (either
passed as an argument or loaded from `),Z2e=a("code"),Nhr=o("pretrained_model_name_or_path"),jhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eFe=a("code"),Dhr=o("pretrained_model_name_or_path"),Ghr=o(":"),Ohr=l(),ie=a("ul"),fE=a("li"),oFe=a("strong"),Vhr=o("albert"),Xhr=o(" \u2014 "),zQ=a("a"),zhr=o("TFAlbertForMaskedLM"),Qhr=o(" (ALBERT model)"),Whr=l(),gE=a("li"),rFe=a("strong"),Hhr=o("bert"),Uhr=o(" \u2014 "),QQ=a("a"),Jhr=o("TFBertForMaskedLM"),Yhr=o(" (BERT model)"),Khr=l(),hE=a("li"),tFe=a("strong"),Zhr=o("camembert"),eur=o(" \u2014 "),WQ=a("a"),our=o("TFCamembertForMaskedLM"),rur=o(" (CamemBERT model)"),tur=l(),uE=a("li"),aFe=a("strong"),aur=o("convbert"),nur=o(" \u2014 "),HQ=a("a"),sur=o("TFConvBertForMaskedLM"),lur=o(" (ConvBERT model)"),iur=l(),pE=a("li"),nFe=a("strong"),dur=o("deberta"),cur=o(" \u2014 "),UQ=a("a"),mur=o("TFDebertaForMaskedLM"),fur=o(" (DeBERTa model)"),gur=l(),_E=a("li"),sFe=a("strong"),hur=o("deberta-v2"),uur=o(" \u2014 "),JQ=a("a"),pur=o("TFDebertaV2ForMaskedLM"),_ur=o(" (DeBERTa-v2 model)"),bur=l(),bE=a("li"),lFe=a("strong"),Fur=o("distilbert"),vur=o(" \u2014 "),YQ=a("a"),Tur=o("TFDistilBertForMaskedLM"),Mur=o(" (DistilBERT model)"),Eur=l(),FE=a("li"),iFe=a("strong"),Cur=o("electra"),wur=o(" \u2014 "),KQ=a("a"),Aur=o("TFElectraForMaskedLM"),yur=o(" (ELECTRA model)"),Lur=l(),vE=a("li"),dFe=a("strong"),xur=o("flaubert"),$ur=o(" \u2014 "),ZQ=a("a"),kur=o("TFFlaubertWithLMHeadModel"),Sur=o(" (FlauBERT model)"),Rur=l(),TE=a("li"),cFe=a("strong"),Bur=o("funnel"),Pur=o(" \u2014 "),eW=a("a"),Iur=o("TFFunnelForMaskedLM"),qur=o(" (Funnel Transformer model)"),Nur=l(),ME=a("li"),mFe=a("strong"),jur=o("layoutlm"),Dur=o(" \u2014 "),oW=a("a"),Gur=o("TFLayoutLMForMaskedLM"),Our=o(" (LayoutLM model)"),Vur=l(),EE=a("li"),fFe=a("strong"),Xur=o("longformer"),zur=o(" \u2014 "),rW=a("a"),Qur=o("TFLongformerForMaskedLM"),Wur=o(" (Longformer model)"),Hur=l(),CE=a("li"),gFe=a("strong"),Uur=o("mobilebert"),Jur=o(" \u2014 "),tW=a("a"),Yur=o("TFMobileBertForMaskedLM"),Kur=o(" (MobileBERT model)"),Zur=l(),wE=a("li"),hFe=a("strong"),epr=o("mpnet"),opr=o(" \u2014 "),aW=a("a"),rpr=o("TFMPNetForMaskedLM"),tpr=o(" (MPNet model)"),apr=l(),AE=a("li"),uFe=a("strong"),npr=o("rembert"),spr=o(" \u2014 "),nW=a("a"),lpr=o("TFRemBertForMaskedLM"),ipr=o(" (RemBERT model)"),dpr=l(),yE=a("li"),pFe=a("strong"),cpr=o("roberta"),mpr=o(" \u2014 "),sW=a("a"),fpr=o("TFRobertaForMaskedLM"),gpr=o(" (RoBERTa model)"),hpr=l(),LE=a("li"),_Fe=a("strong"),upr=o("roformer"),ppr=o(" \u2014 "),lW=a("a"),_pr=o("TFRoFormerForMaskedLM"),bpr=o(" (RoFormer model)"),Fpr=l(),xE=a("li"),bFe=a("strong"),vpr=o("tapas"),Tpr=o(" \u2014 "),iW=a("a"),Mpr=o("TFTapasForMaskedLM"),Epr=o(" (TAPAS model)"),Cpr=l(),$E=a("li"),FFe=a("strong"),wpr=o("xlm"),Apr=o(" \u2014 "),dW=a("a"),ypr=o("TFXLMWithLMHeadModel"),Lpr=o(" (XLM model)"),xpr=l(),kE=a("li"),vFe=a("strong"),$pr=o("xlm-roberta"),kpr=o(" \u2014 "),cW=a("a"),Spr=o("TFXLMRobertaForMaskedLM"),Rpr=o(" (XLM-RoBERTa model)"),Bpr=l(),v(SE.$$.fragment),aqe=l(),Zd=a("h2"),RE=a("a"),TFe=a("span"),v(tx.$$.fragment),Ppr=l(),MFe=a("span"),Ipr=o("TFAutoModelForSeq2SeqLM"),nqe=l(),rr=a("div"),v(ax.$$.fragment),qpr=l(),ec=a("p"),Npr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),mW=a("a"),jpr=o("from_pretrained()"),Dpr=o(" class method or the "),fW=a("a"),Gpr=o("from_config()"),Opr=o(` class
method.`),Vpr=l(),nx=a("p"),Xpr=o("This class cannot be instantiated directly using "),EFe=a("code"),zpr=o("__init__()"),Qpr=o(" (throws an error)."),Wpr=l(),$t=a("div"),v(sx.$$.fragment),Hpr=l(),CFe=a("p"),Upr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Jpr=l(),oc=a("p"),Ypr=o(`Note:
Loading a model from its configuration file does `),wFe=a("strong"),Kpr=o("not"),Zpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=a("a"),e_r=o("from_pretrained()"),o_r=o(" to load the model weights."),r_r=l(),v(BE.$$.fragment),t_r=l(),$r=a("div"),v(lx.$$.fragment),a_r=l(),AFe=a("p"),n_r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),s_r=l(),tn=a("p"),l_r=o("The model class to instantiate is selected based on the "),yFe=a("code"),i_r=o("model_type"),d_r=o(` property of the config object (either
passed as an argument or loaded from `),LFe=a("code"),c_r=o("pretrained_model_name_or_path"),m_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xFe=a("code"),f_r=o("pretrained_model_name_or_path"),g_r=o(":"),h_r=l(),ye=a("ul"),PE=a("li"),$Fe=a("strong"),u_r=o("bart"),p_r=o(" \u2014 "),hW=a("a"),__r=o("TFBartForConditionalGeneration"),b_r=o(" (BART model)"),F_r=l(),IE=a("li"),kFe=a("strong"),v_r=o("blenderbot"),T_r=o(" \u2014 "),uW=a("a"),M_r=o("TFBlenderbotForConditionalGeneration"),E_r=o(" (Blenderbot model)"),C_r=l(),qE=a("li"),SFe=a("strong"),w_r=o("blenderbot-small"),A_r=o(" \u2014 "),pW=a("a"),y_r=o("TFBlenderbotSmallForConditionalGeneration"),L_r=o(" (BlenderbotSmall model)"),x_r=l(),NE=a("li"),RFe=a("strong"),$_r=o("encoder-decoder"),k_r=o(" \u2014 "),_W=a("a"),S_r=o("TFEncoderDecoderModel"),R_r=o(" (Encoder decoder model)"),B_r=l(),jE=a("li"),BFe=a("strong"),P_r=o("led"),I_r=o(" \u2014 "),bW=a("a"),q_r=o("TFLEDForConditionalGeneration"),N_r=o(" (LED model)"),j_r=l(),DE=a("li"),PFe=a("strong"),D_r=o("marian"),G_r=o(" \u2014 "),FW=a("a"),O_r=o("TFMarianMTModel"),V_r=o(" (Marian model)"),X_r=l(),GE=a("li"),IFe=a("strong"),z_r=o("mbart"),Q_r=o(" \u2014 "),vW=a("a"),W_r=o("TFMBartForConditionalGeneration"),H_r=o(" (mBART model)"),U_r=l(),OE=a("li"),qFe=a("strong"),J_r=o("mt5"),Y_r=o(" \u2014 "),TW=a("a"),K_r=o("TFMT5ForConditionalGeneration"),Z_r=o(" (mT5 model)"),ebr=l(),VE=a("li"),NFe=a("strong"),obr=o("pegasus"),rbr=o(" \u2014 "),MW=a("a"),tbr=o("TFPegasusForConditionalGeneration"),abr=o(" (Pegasus model)"),nbr=l(),XE=a("li"),jFe=a("strong"),sbr=o("t5"),lbr=o(" \u2014 "),EW=a("a"),ibr=o("TFT5ForConditionalGeneration"),dbr=o(" (T5 model)"),cbr=l(),v(zE.$$.fragment),sqe=l(),rc=a("h2"),QE=a("a"),DFe=a("span"),v(ix.$$.fragment),mbr=l(),GFe=a("span"),fbr=o("TFAutoModelForSequenceClassification"),lqe=l(),tr=a("div"),v(dx.$$.fragment),gbr=l(),tc=a("p"),hbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),CW=a("a"),ubr=o("from_pretrained()"),pbr=o(" class method or the "),wW=a("a"),_br=o("from_config()"),bbr=o(` class
method.`),Fbr=l(),cx=a("p"),vbr=o("This class cannot be instantiated directly using "),OFe=a("code"),Tbr=o("__init__()"),Mbr=o(" (throws an error)."),Ebr=l(),kt=a("div"),v(mx.$$.fragment),Cbr=l(),VFe=a("p"),wbr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Abr=l(),ac=a("p"),ybr=o(`Note:
Loading a model from its configuration file does `),XFe=a("strong"),Lbr=o("not"),xbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=a("a"),$br=o("from_pretrained()"),kbr=o(" to load the model weights."),Sbr=l(),v(WE.$$.fragment),Rbr=l(),kr=a("div"),v(fx.$$.fragment),Bbr=l(),zFe=a("p"),Pbr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Ibr=l(),an=a("p"),qbr=o("The model class to instantiate is selected based on the "),QFe=a("code"),Nbr=o("model_type"),jbr=o(` property of the config object (either
passed as an argument or loaded from `),WFe=a("code"),Dbr=o("pretrained_model_name_or_path"),Gbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HFe=a("code"),Obr=o("pretrained_model_name_or_path"),Vbr=o(":"),Xbr=l(),Z=a("ul"),HE=a("li"),UFe=a("strong"),zbr=o("albert"),Qbr=o(" \u2014 "),yW=a("a"),Wbr=o("TFAlbertForSequenceClassification"),Hbr=o(" (ALBERT model)"),Ubr=l(),UE=a("li"),JFe=a("strong"),Jbr=o("bert"),Ybr=o(" \u2014 "),LW=a("a"),Kbr=o("TFBertForSequenceClassification"),Zbr=o(" (BERT model)"),e2r=l(),JE=a("li"),YFe=a("strong"),o2r=o("camembert"),r2r=o(" \u2014 "),xW=a("a"),t2r=o("TFCamembertForSequenceClassification"),a2r=o(" (CamemBERT model)"),n2r=l(),YE=a("li"),KFe=a("strong"),s2r=o("convbert"),l2r=o(" \u2014 "),$W=a("a"),i2r=o("TFConvBertForSequenceClassification"),d2r=o(" (ConvBERT model)"),c2r=l(),KE=a("li"),ZFe=a("strong"),m2r=o("ctrl"),f2r=o(" \u2014 "),kW=a("a"),g2r=o("TFCTRLForSequenceClassification"),h2r=o(" (CTRL model)"),u2r=l(),ZE=a("li"),eve=a("strong"),p2r=o("deberta"),_2r=o(" \u2014 "),SW=a("a"),b2r=o("TFDebertaForSequenceClassification"),F2r=o(" (DeBERTa model)"),v2r=l(),e5=a("li"),ove=a("strong"),T2r=o("deberta-v2"),M2r=o(" \u2014 "),RW=a("a"),E2r=o("TFDebertaV2ForSequenceClassification"),C2r=o(" (DeBERTa-v2 model)"),w2r=l(),o5=a("li"),rve=a("strong"),A2r=o("distilbert"),y2r=o(" \u2014 "),BW=a("a"),L2r=o("TFDistilBertForSequenceClassification"),x2r=o(" (DistilBERT model)"),$2r=l(),r5=a("li"),tve=a("strong"),k2r=o("electra"),S2r=o(" \u2014 "),PW=a("a"),R2r=o("TFElectraForSequenceClassification"),B2r=o(" (ELECTRA model)"),P2r=l(),t5=a("li"),ave=a("strong"),I2r=o("flaubert"),q2r=o(" \u2014 "),IW=a("a"),N2r=o("TFFlaubertForSequenceClassification"),j2r=o(" (FlauBERT model)"),D2r=l(),a5=a("li"),nve=a("strong"),G2r=o("funnel"),O2r=o(" \u2014 "),qW=a("a"),V2r=o("TFFunnelForSequenceClassification"),X2r=o(" (Funnel Transformer model)"),z2r=l(),n5=a("li"),sve=a("strong"),Q2r=o("gpt2"),W2r=o(" \u2014 "),NW=a("a"),H2r=o("TFGPT2ForSequenceClassification"),U2r=o(" (OpenAI GPT-2 model)"),J2r=l(),s5=a("li"),lve=a("strong"),Y2r=o("gptj"),K2r=o(" \u2014 "),jW=a("a"),Z2r=o("TFGPTJForSequenceClassification"),eFr=o(" (GPT-J model)"),oFr=l(),l5=a("li"),ive=a("strong"),rFr=o("layoutlm"),tFr=o(" \u2014 "),DW=a("a"),aFr=o("TFLayoutLMForSequenceClassification"),nFr=o(" (LayoutLM model)"),sFr=l(),i5=a("li"),dve=a("strong"),lFr=o("longformer"),iFr=o(" \u2014 "),GW=a("a"),dFr=o("TFLongformerForSequenceClassification"),cFr=o(" (Longformer model)"),mFr=l(),d5=a("li"),cve=a("strong"),fFr=o("mobilebert"),gFr=o(" \u2014 "),OW=a("a"),hFr=o("TFMobileBertForSequenceClassification"),uFr=o(" (MobileBERT model)"),pFr=l(),c5=a("li"),mve=a("strong"),_Fr=o("mpnet"),bFr=o(" \u2014 "),VW=a("a"),FFr=o("TFMPNetForSequenceClassification"),vFr=o(" (MPNet model)"),TFr=l(),m5=a("li"),fve=a("strong"),MFr=o("openai-gpt"),EFr=o(" \u2014 "),XW=a("a"),CFr=o("TFOpenAIGPTForSequenceClassification"),wFr=o(" (OpenAI GPT model)"),AFr=l(),f5=a("li"),gve=a("strong"),yFr=o("rembert"),LFr=o(" \u2014 "),zW=a("a"),xFr=o("TFRemBertForSequenceClassification"),$Fr=o(" (RemBERT model)"),kFr=l(),g5=a("li"),hve=a("strong"),SFr=o("roberta"),RFr=o(" \u2014 "),QW=a("a"),BFr=o("TFRobertaForSequenceClassification"),PFr=o(" (RoBERTa model)"),IFr=l(),h5=a("li"),uve=a("strong"),qFr=o("roformer"),NFr=o(" \u2014 "),WW=a("a"),jFr=o("TFRoFormerForSequenceClassification"),DFr=o(" (RoFormer model)"),GFr=l(),u5=a("li"),pve=a("strong"),OFr=o("tapas"),VFr=o(" \u2014 "),HW=a("a"),XFr=o("TFTapasForSequenceClassification"),zFr=o(" (TAPAS model)"),QFr=l(),p5=a("li"),_ve=a("strong"),WFr=o("transfo-xl"),HFr=o(" \u2014 "),UW=a("a"),UFr=o("TFTransfoXLForSequenceClassification"),JFr=o(" (Transformer-XL model)"),YFr=l(),_5=a("li"),bve=a("strong"),KFr=o("xlm"),ZFr=o(" \u2014 "),JW=a("a"),evr=o("TFXLMForSequenceClassification"),ovr=o(" (XLM model)"),rvr=l(),b5=a("li"),Fve=a("strong"),tvr=o("xlm-roberta"),avr=o(" \u2014 "),YW=a("a"),nvr=o("TFXLMRobertaForSequenceClassification"),svr=o(" (XLM-RoBERTa model)"),lvr=l(),F5=a("li"),vve=a("strong"),ivr=o("xlnet"),dvr=o(" \u2014 "),KW=a("a"),cvr=o("TFXLNetForSequenceClassification"),mvr=o(" (XLNet model)"),fvr=l(),v(v5.$$.fragment),iqe=l(),nc=a("h2"),T5=a("a"),Tve=a("span"),v(gx.$$.fragment),gvr=l(),Mve=a("span"),hvr=o("TFAutoModelForMultipleChoice"),dqe=l(),ar=a("div"),v(hx.$$.fragment),uvr=l(),sc=a("p"),pvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ZW=a("a"),_vr=o("from_pretrained()"),bvr=o(" class method or the "),eH=a("a"),Fvr=o("from_config()"),vvr=o(` class
method.`),Tvr=l(),ux=a("p"),Mvr=o("This class cannot be instantiated directly using "),Eve=a("code"),Evr=o("__init__()"),Cvr=o(" (throws an error)."),wvr=l(),St=a("div"),v(px.$$.fragment),Avr=l(),Cve=a("p"),yvr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Lvr=l(),lc=a("p"),xvr=o(`Note:
Loading a model from its configuration file does `),wve=a("strong"),$vr=o("not"),kvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oH=a("a"),Svr=o("from_pretrained()"),Rvr=o(" to load the model weights."),Bvr=l(),v(M5.$$.fragment),Pvr=l(),Sr=a("div"),v(_x.$$.fragment),Ivr=l(),Ave=a("p"),qvr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Nvr=l(),nn=a("p"),jvr=o("The model class to instantiate is selected based on the "),yve=a("code"),Dvr=o("model_type"),Gvr=o(` property of the config object (either
passed as an argument or loaded from `),Lve=a("code"),Ovr=o("pretrained_model_name_or_path"),Vvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=a("code"),Xvr=o("pretrained_model_name_or_path"),zvr=o(":"),Qvr=l(),ue=a("ul"),E5=a("li"),$ve=a("strong"),Wvr=o("albert"),Hvr=o(" \u2014 "),rH=a("a"),Uvr=o("TFAlbertForMultipleChoice"),Jvr=o(" (ALBERT model)"),Yvr=l(),C5=a("li"),kve=a("strong"),Kvr=o("bert"),Zvr=o(" \u2014 "),tH=a("a"),e1r=o("TFBertForMultipleChoice"),o1r=o(" (BERT model)"),r1r=l(),w5=a("li"),Sve=a("strong"),t1r=o("camembert"),a1r=o(" \u2014 "),aH=a("a"),n1r=o("TFCamembertForMultipleChoice"),s1r=o(" (CamemBERT model)"),l1r=l(),A5=a("li"),Rve=a("strong"),i1r=o("convbert"),d1r=o(" \u2014 "),nH=a("a"),c1r=o("TFConvBertForMultipleChoice"),m1r=o(" (ConvBERT model)"),f1r=l(),y5=a("li"),Bve=a("strong"),g1r=o("distilbert"),h1r=o(" \u2014 "),sH=a("a"),u1r=o("TFDistilBertForMultipleChoice"),p1r=o(" (DistilBERT model)"),_1r=l(),L5=a("li"),Pve=a("strong"),b1r=o("electra"),F1r=o(" \u2014 "),lH=a("a"),v1r=o("TFElectraForMultipleChoice"),T1r=o(" (ELECTRA model)"),M1r=l(),x5=a("li"),Ive=a("strong"),E1r=o("flaubert"),C1r=o(" \u2014 "),iH=a("a"),w1r=o("TFFlaubertForMultipleChoice"),A1r=o(" (FlauBERT model)"),y1r=l(),$5=a("li"),qve=a("strong"),L1r=o("funnel"),x1r=o(" \u2014 "),dH=a("a"),$1r=o("TFFunnelForMultipleChoice"),k1r=o(" (Funnel Transformer model)"),S1r=l(),k5=a("li"),Nve=a("strong"),R1r=o("longformer"),B1r=o(" \u2014 "),cH=a("a"),P1r=o("TFLongformerForMultipleChoice"),I1r=o(" (Longformer model)"),q1r=l(),S5=a("li"),jve=a("strong"),N1r=o("mobilebert"),j1r=o(" \u2014 "),mH=a("a"),D1r=o("TFMobileBertForMultipleChoice"),G1r=o(" (MobileBERT model)"),O1r=l(),R5=a("li"),Dve=a("strong"),V1r=o("mpnet"),X1r=o(" \u2014 "),fH=a("a"),z1r=o("TFMPNetForMultipleChoice"),Q1r=o(" (MPNet model)"),W1r=l(),B5=a("li"),Gve=a("strong"),H1r=o("rembert"),U1r=o(" \u2014 "),gH=a("a"),J1r=o("TFRemBertForMultipleChoice"),Y1r=o(" (RemBERT model)"),K1r=l(),P5=a("li"),Ove=a("strong"),Z1r=o("roberta"),eTr=o(" \u2014 "),hH=a("a"),oTr=o("TFRobertaForMultipleChoice"),rTr=o(" (RoBERTa model)"),tTr=l(),I5=a("li"),Vve=a("strong"),aTr=o("roformer"),nTr=o(" \u2014 "),uH=a("a"),sTr=o("TFRoFormerForMultipleChoice"),lTr=o(" (RoFormer model)"),iTr=l(),q5=a("li"),Xve=a("strong"),dTr=o("xlm"),cTr=o(" \u2014 "),pH=a("a"),mTr=o("TFXLMForMultipleChoice"),fTr=o(" (XLM model)"),gTr=l(),N5=a("li"),zve=a("strong"),hTr=o("xlm-roberta"),uTr=o(" \u2014 "),_H=a("a"),pTr=o("TFXLMRobertaForMultipleChoice"),_Tr=o(" (XLM-RoBERTa model)"),bTr=l(),j5=a("li"),Qve=a("strong"),FTr=o("xlnet"),vTr=o(" \u2014 "),bH=a("a"),TTr=o("TFXLNetForMultipleChoice"),MTr=o(" (XLNet model)"),ETr=l(),v(D5.$$.fragment),cqe=l(),ic=a("h2"),G5=a("a"),Wve=a("span"),v(bx.$$.fragment),CTr=l(),Hve=a("span"),wTr=o("TFAutoModelForNextSentencePrediction"),mqe=l(),nr=a("div"),v(Fx.$$.fragment),ATr=l(),dc=a("p"),yTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),FH=a("a"),LTr=o("from_pretrained()"),xTr=o(" class method or the "),vH=a("a"),$Tr=o("from_config()"),kTr=o(` class
method.`),STr=l(),vx=a("p"),RTr=o("This class cannot be instantiated directly using "),Uve=a("code"),BTr=o("__init__()"),PTr=o(" (throws an error)."),ITr=l(),Rt=a("div"),v(Tx.$$.fragment),qTr=l(),Jve=a("p"),NTr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),jTr=l(),cc=a("p"),DTr=o(`Note:
Loading a model from its configuration file does `),Yve=a("strong"),GTr=o("not"),OTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TH=a("a"),VTr=o("from_pretrained()"),XTr=o(" to load the model weights."),zTr=l(),v(O5.$$.fragment),QTr=l(),Rr=a("div"),v(Mx.$$.fragment),WTr=l(),Kve=a("p"),HTr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),UTr=l(),sn=a("p"),JTr=o("The model class to instantiate is selected based on the "),Zve=a("code"),YTr=o("model_type"),KTr=o(` property of the config object (either
passed as an argument or loaded from `),e1e=a("code"),ZTr=o("pretrained_model_name_or_path"),eMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o1e=a("code"),oMr=o("pretrained_model_name_or_path"),rMr=o(":"),tMr=l(),Ex=a("ul"),V5=a("li"),r1e=a("strong"),aMr=o("bert"),nMr=o(" \u2014 "),MH=a("a"),sMr=o("TFBertForNextSentencePrediction"),lMr=o(" (BERT model)"),iMr=l(),X5=a("li"),t1e=a("strong"),dMr=o("mobilebert"),cMr=o(" \u2014 "),EH=a("a"),mMr=o("TFMobileBertForNextSentencePrediction"),fMr=o(" (MobileBERT model)"),gMr=l(),v(z5.$$.fragment),fqe=l(),mc=a("h2"),Q5=a("a"),a1e=a("span"),v(Cx.$$.fragment),hMr=l(),n1e=a("span"),uMr=o("TFAutoModelForTableQuestionAnswering"),gqe=l(),sr=a("div"),v(wx.$$.fragment),pMr=l(),fc=a("p"),_Mr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),CH=a("a"),bMr=o("from_pretrained()"),FMr=o(" class method or the "),wH=a("a"),vMr=o("from_config()"),TMr=o(` class
method.`),MMr=l(),Ax=a("p"),EMr=o("This class cannot be instantiated directly using "),s1e=a("code"),CMr=o("__init__()"),wMr=o(" (throws an error)."),AMr=l(),Bt=a("div"),v(yx.$$.fragment),yMr=l(),l1e=a("p"),LMr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),xMr=l(),gc=a("p"),$Mr=o(`Note:
Loading a model from its configuration file does `),i1e=a("strong"),kMr=o("not"),SMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AH=a("a"),RMr=o("from_pretrained()"),BMr=o(" to load the model weights."),PMr=l(),v(W5.$$.fragment),IMr=l(),Br=a("div"),v(Lx.$$.fragment),qMr=l(),d1e=a("p"),NMr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),jMr=l(),ln=a("p"),DMr=o("The model class to instantiate is selected based on the "),c1e=a("code"),GMr=o("model_type"),OMr=o(` property of the config object (either
passed as an argument or loaded from `),m1e=a("code"),VMr=o("pretrained_model_name_or_path"),XMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f1e=a("code"),zMr=o("pretrained_model_name_or_path"),QMr=o(":"),WMr=l(),g1e=a("ul"),H5=a("li"),h1e=a("strong"),HMr=o("tapas"),UMr=o(" \u2014 "),yH=a("a"),JMr=o("TFTapasForQuestionAnswering"),YMr=o(" (TAPAS model)"),KMr=l(),v(U5.$$.fragment),hqe=l(),hc=a("h2"),J5=a("a"),u1e=a("span"),v(xx.$$.fragment),ZMr=l(),p1e=a("span"),e4r=o("TFAutoModelForTokenClassification"),uqe=l(),lr=a("div"),v($x.$$.fragment),o4r=l(),uc=a("p"),r4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),LH=a("a"),t4r=o("from_pretrained()"),a4r=o(" class method or the "),xH=a("a"),n4r=o("from_config()"),s4r=o(` class
method.`),l4r=l(),kx=a("p"),i4r=o("This class cannot be instantiated directly using "),_1e=a("code"),d4r=o("__init__()"),c4r=o(" (throws an error)."),m4r=l(),Pt=a("div"),v(Sx.$$.fragment),f4r=l(),b1e=a("p"),g4r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),h4r=l(),pc=a("p"),u4r=o(`Note:
Loading a model from its configuration file does `),F1e=a("strong"),p4r=o("not"),_4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=a("a"),b4r=o("from_pretrained()"),F4r=o(" to load the model weights."),v4r=l(),v(Y5.$$.fragment),T4r=l(),Pr=a("div"),v(Rx.$$.fragment),M4r=l(),v1e=a("p"),E4r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),C4r=l(),dn=a("p"),w4r=o("The model class to instantiate is selected based on the "),T1e=a("code"),A4r=o("model_type"),y4r=o(` property of the config object (either
passed as an argument or loaded from `),M1e=a("code"),L4r=o("pretrained_model_name_or_path"),x4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E1e=a("code"),$4r=o("pretrained_model_name_or_path"),k4r=o(":"),S4r=l(),de=a("ul"),K5=a("li"),C1e=a("strong"),R4r=o("albert"),B4r=o(" \u2014 "),kH=a("a"),P4r=o("TFAlbertForTokenClassification"),I4r=o(" (ALBERT model)"),q4r=l(),Z5=a("li"),w1e=a("strong"),N4r=o("bert"),j4r=o(" \u2014 "),SH=a("a"),D4r=o("TFBertForTokenClassification"),G4r=o(" (BERT model)"),O4r=l(),eC=a("li"),A1e=a("strong"),V4r=o("camembert"),X4r=o(" \u2014 "),RH=a("a"),z4r=o("TFCamembertForTokenClassification"),Q4r=o(" (CamemBERT model)"),W4r=l(),oC=a("li"),y1e=a("strong"),H4r=o("convbert"),U4r=o(" \u2014 "),BH=a("a"),J4r=o("TFConvBertForTokenClassification"),Y4r=o(" (ConvBERT model)"),K4r=l(),rC=a("li"),L1e=a("strong"),Z4r=o("deberta"),eEr=o(" \u2014 "),PH=a("a"),oEr=o("TFDebertaForTokenClassification"),rEr=o(" (DeBERTa model)"),tEr=l(),tC=a("li"),x1e=a("strong"),aEr=o("deberta-v2"),nEr=o(" \u2014 "),IH=a("a"),sEr=o("TFDebertaV2ForTokenClassification"),lEr=o(" (DeBERTa-v2 model)"),iEr=l(),aC=a("li"),$1e=a("strong"),dEr=o("distilbert"),cEr=o(" \u2014 "),qH=a("a"),mEr=o("TFDistilBertForTokenClassification"),fEr=o(" (DistilBERT model)"),gEr=l(),nC=a("li"),k1e=a("strong"),hEr=o("electra"),uEr=o(" \u2014 "),NH=a("a"),pEr=o("TFElectraForTokenClassification"),_Er=o(" (ELECTRA model)"),bEr=l(),sC=a("li"),S1e=a("strong"),FEr=o("flaubert"),vEr=o(" \u2014 "),jH=a("a"),TEr=o("TFFlaubertForTokenClassification"),MEr=o(" (FlauBERT model)"),EEr=l(),lC=a("li"),R1e=a("strong"),CEr=o("funnel"),wEr=o(" \u2014 "),DH=a("a"),AEr=o("TFFunnelForTokenClassification"),yEr=o(" (Funnel Transformer model)"),LEr=l(),iC=a("li"),B1e=a("strong"),xEr=o("layoutlm"),$Er=o(" \u2014 "),GH=a("a"),kEr=o("TFLayoutLMForTokenClassification"),SEr=o(" (LayoutLM model)"),REr=l(),dC=a("li"),P1e=a("strong"),BEr=o("longformer"),PEr=o(" \u2014 "),OH=a("a"),IEr=o("TFLongformerForTokenClassification"),qEr=o(" (Longformer model)"),NEr=l(),cC=a("li"),I1e=a("strong"),jEr=o("mobilebert"),DEr=o(" \u2014 "),VH=a("a"),GEr=o("TFMobileBertForTokenClassification"),OEr=o(" (MobileBERT model)"),VEr=l(),mC=a("li"),q1e=a("strong"),XEr=o("mpnet"),zEr=o(" \u2014 "),XH=a("a"),QEr=o("TFMPNetForTokenClassification"),WEr=o(" (MPNet model)"),HEr=l(),fC=a("li"),N1e=a("strong"),UEr=o("rembert"),JEr=o(" \u2014 "),zH=a("a"),YEr=o("TFRemBertForTokenClassification"),KEr=o(" (RemBERT model)"),ZEr=l(),gC=a("li"),j1e=a("strong"),e5r=o("roberta"),o5r=o(" \u2014 "),QH=a("a"),r5r=o("TFRobertaForTokenClassification"),t5r=o(" (RoBERTa model)"),a5r=l(),hC=a("li"),D1e=a("strong"),n5r=o("roformer"),s5r=o(" \u2014 "),WH=a("a"),l5r=o("TFRoFormerForTokenClassification"),i5r=o(" (RoFormer model)"),d5r=l(),uC=a("li"),G1e=a("strong"),c5r=o("xlm"),m5r=o(" \u2014 "),HH=a("a"),f5r=o("TFXLMForTokenClassification"),g5r=o(" (XLM model)"),h5r=l(),pC=a("li"),O1e=a("strong"),u5r=o("xlm-roberta"),p5r=o(" \u2014 "),UH=a("a"),_5r=o("TFXLMRobertaForTokenClassification"),b5r=o(" (XLM-RoBERTa model)"),F5r=l(),_C=a("li"),V1e=a("strong"),v5r=o("xlnet"),T5r=o(" \u2014 "),JH=a("a"),M5r=o("TFXLNetForTokenClassification"),E5r=o(" (XLNet model)"),C5r=l(),v(bC.$$.fragment),pqe=l(),_c=a("h2"),FC=a("a"),X1e=a("span"),v(Bx.$$.fragment),w5r=l(),z1e=a("span"),A5r=o("TFAutoModelForQuestionAnswering"),_qe=l(),ir=a("div"),v(Px.$$.fragment),y5r=l(),bc=a("p"),L5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),YH=a("a"),x5r=o("from_pretrained()"),$5r=o(" class method or the "),KH=a("a"),k5r=o("from_config()"),S5r=o(` class
method.`),R5r=l(),Ix=a("p"),B5r=o("This class cannot be instantiated directly using "),Q1e=a("code"),P5r=o("__init__()"),I5r=o(" (throws an error)."),q5r=l(),It=a("div"),v(qx.$$.fragment),N5r=l(),W1e=a("p"),j5r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),D5r=l(),Fc=a("p"),G5r=o(`Note:
Loading a model from its configuration file does `),H1e=a("strong"),O5r=o("not"),V5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZH=a("a"),X5r=o("from_pretrained()"),z5r=o(" to load the model weights."),Q5r=l(),v(vC.$$.fragment),W5r=l(),Ir=a("div"),v(Nx.$$.fragment),H5r=l(),U1e=a("p"),U5r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),J5r=l(),cn=a("p"),Y5r=o("The model class to instantiate is selected based on the "),J1e=a("code"),K5r=o("model_type"),Z5r=o(` property of the config object (either
passed as an argument or loaded from `),Y1e=a("code"),eCr=o("pretrained_model_name_or_path"),oCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K1e=a("code"),rCr=o("pretrained_model_name_or_path"),tCr=o(":"),aCr=l(),ce=a("ul"),TC=a("li"),Z1e=a("strong"),nCr=o("albert"),sCr=o(" \u2014 "),eU=a("a"),lCr=o("TFAlbertForQuestionAnswering"),iCr=o(" (ALBERT model)"),dCr=l(),MC=a("li"),eTe=a("strong"),cCr=o("bert"),mCr=o(" \u2014 "),oU=a("a"),fCr=o("TFBertForQuestionAnswering"),gCr=o(" (BERT model)"),hCr=l(),EC=a("li"),oTe=a("strong"),uCr=o("camembert"),pCr=o(" \u2014 "),rU=a("a"),_Cr=o("TFCamembertForQuestionAnswering"),bCr=o(" (CamemBERT model)"),FCr=l(),CC=a("li"),rTe=a("strong"),vCr=o("convbert"),TCr=o(" \u2014 "),tU=a("a"),MCr=o("TFConvBertForQuestionAnswering"),ECr=o(" (ConvBERT model)"),CCr=l(),wC=a("li"),tTe=a("strong"),wCr=o("deberta"),ACr=o(" \u2014 "),aU=a("a"),yCr=o("TFDebertaForQuestionAnswering"),LCr=o(" (DeBERTa model)"),xCr=l(),AC=a("li"),aTe=a("strong"),$Cr=o("deberta-v2"),kCr=o(" \u2014 "),nU=a("a"),SCr=o("TFDebertaV2ForQuestionAnswering"),RCr=o(" (DeBERTa-v2 model)"),BCr=l(),yC=a("li"),nTe=a("strong"),PCr=o("distilbert"),ICr=o(" \u2014 "),sU=a("a"),qCr=o("TFDistilBertForQuestionAnswering"),NCr=o(" (DistilBERT model)"),jCr=l(),LC=a("li"),sTe=a("strong"),DCr=o("electra"),GCr=o(" \u2014 "),lU=a("a"),OCr=o("TFElectraForQuestionAnswering"),VCr=o(" (ELECTRA model)"),XCr=l(),xC=a("li"),lTe=a("strong"),zCr=o("flaubert"),QCr=o(" \u2014 "),iU=a("a"),WCr=o("TFFlaubertForQuestionAnsweringSimple"),HCr=o(" (FlauBERT model)"),UCr=l(),$C=a("li"),iTe=a("strong"),JCr=o("funnel"),YCr=o(" \u2014 "),dU=a("a"),KCr=o("TFFunnelForQuestionAnswering"),ZCr=o(" (Funnel Transformer model)"),e3r=l(),kC=a("li"),dTe=a("strong"),o3r=o("gptj"),r3r=o(" \u2014 "),cU=a("a"),t3r=o("TFGPTJForQuestionAnswering"),a3r=o(" (GPT-J model)"),n3r=l(),SC=a("li"),cTe=a("strong"),s3r=o("longformer"),l3r=o(" \u2014 "),mU=a("a"),i3r=o("TFLongformerForQuestionAnswering"),d3r=o(" (Longformer model)"),c3r=l(),RC=a("li"),mTe=a("strong"),m3r=o("mobilebert"),f3r=o(" \u2014 "),fU=a("a"),g3r=o("TFMobileBertForQuestionAnswering"),h3r=o(" (MobileBERT model)"),u3r=l(),BC=a("li"),fTe=a("strong"),p3r=o("mpnet"),_3r=o(" \u2014 "),gU=a("a"),b3r=o("TFMPNetForQuestionAnswering"),F3r=o(" (MPNet model)"),v3r=l(),PC=a("li"),gTe=a("strong"),T3r=o("rembert"),M3r=o(" \u2014 "),hU=a("a"),E3r=o("TFRemBertForQuestionAnswering"),C3r=o(" (RemBERT model)"),w3r=l(),IC=a("li"),hTe=a("strong"),A3r=o("roberta"),y3r=o(" \u2014 "),uU=a("a"),L3r=o("TFRobertaForQuestionAnswering"),x3r=o(" (RoBERTa model)"),$3r=l(),qC=a("li"),uTe=a("strong"),k3r=o("roformer"),S3r=o(" \u2014 "),pU=a("a"),R3r=o("TFRoFormerForQuestionAnswering"),B3r=o(" (RoFormer model)"),P3r=l(),NC=a("li"),pTe=a("strong"),I3r=o("xlm"),q3r=o(" \u2014 "),_U=a("a"),N3r=o("TFXLMForQuestionAnsweringSimple"),j3r=o(" (XLM model)"),D3r=l(),jC=a("li"),_Te=a("strong"),G3r=o("xlm-roberta"),O3r=o(" \u2014 "),bU=a("a"),V3r=o("TFXLMRobertaForQuestionAnswering"),X3r=o(" (XLM-RoBERTa model)"),z3r=l(),DC=a("li"),bTe=a("strong"),Q3r=o("xlnet"),W3r=o(" \u2014 "),FU=a("a"),H3r=o("TFXLNetForQuestionAnsweringSimple"),U3r=o(" (XLNet model)"),J3r=l(),v(GC.$$.fragment),bqe=l(),vc=a("h2"),OC=a("a"),FTe=a("span"),v(jx.$$.fragment),Y3r=l(),vTe=a("span"),K3r=o("TFAutoModelForVision2Seq"),Fqe=l(),dr=a("div"),v(Dx.$$.fragment),Z3r=l(),Tc=a("p"),ewr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vU=a("a"),owr=o("from_pretrained()"),rwr=o(" class method or the "),TU=a("a"),twr=o("from_config()"),awr=o(` class
method.`),nwr=l(),Gx=a("p"),swr=o("This class cannot be instantiated directly using "),TTe=a("code"),lwr=o("__init__()"),iwr=o(" (throws an error)."),dwr=l(),qt=a("div"),v(Ox.$$.fragment),cwr=l(),MTe=a("p"),mwr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),fwr=l(),Mc=a("p"),gwr=o(`Note:
Loading a model from its configuration file does `),ETe=a("strong"),hwr=o("not"),uwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MU=a("a"),pwr=o("from_pretrained()"),_wr=o(" to load the model weights."),bwr=l(),v(VC.$$.fragment),Fwr=l(),qr=a("div"),v(Vx.$$.fragment),vwr=l(),CTe=a("p"),Twr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Mwr=l(),mn=a("p"),Ewr=o("The model class to instantiate is selected based on the "),wTe=a("code"),Cwr=o("model_type"),wwr=o(` property of the config object (either
passed as an argument or loaded from `),ATe=a("code"),Awr=o("pretrained_model_name_or_path"),ywr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yTe=a("code"),Lwr=o("pretrained_model_name_or_path"),xwr=o(":"),$wr=l(),LTe=a("ul"),XC=a("li"),xTe=a("strong"),kwr=o("vision-encoder-decoder"),Swr=o(" \u2014 "),EU=a("a"),Rwr=o("TFVisionEncoderDecoderModel"),Bwr=o(" (Vision Encoder decoder model)"),Pwr=l(),v(zC.$$.fragment),vqe=l(),Ec=a("h2"),QC=a("a"),$Te=a("span"),v(Xx.$$.fragment),Iwr=l(),kTe=a("span"),qwr=o("TFAutoModelForSpeechSeq2Seq"),Tqe=l(),cr=a("div"),v(zx.$$.fragment),Nwr=l(),Cc=a("p"),jwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),CU=a("a"),Dwr=o("from_pretrained()"),Gwr=o(" class method or the "),wU=a("a"),Owr=o("from_config()"),Vwr=o(` class
method.`),Xwr=l(),Qx=a("p"),zwr=o("This class cannot be instantiated directly using "),STe=a("code"),Qwr=o("__init__()"),Wwr=o(" (throws an error)."),Hwr=l(),Nt=a("div"),v(Wx.$$.fragment),Uwr=l(),RTe=a("p"),Jwr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Ywr=l(),wc=a("p"),Kwr=o(`Note:
Loading a model from its configuration file does `),BTe=a("strong"),Zwr=o("not"),eAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=a("a"),oAr=o("from_pretrained()"),rAr=o(" to load the model weights."),tAr=l(),v(WC.$$.fragment),aAr=l(),Nr=a("div"),v(Hx.$$.fragment),nAr=l(),PTe=a("p"),sAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),lAr=l(),fn=a("p"),iAr=o("The model class to instantiate is selected based on the "),ITe=a("code"),dAr=o("model_type"),cAr=o(` property of the config object (either
passed as an argument or loaded from `),qTe=a("code"),mAr=o("pretrained_model_name_or_path"),fAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NTe=a("code"),gAr=o("pretrained_model_name_or_path"),hAr=o(":"),uAr=l(),jTe=a("ul"),HC=a("li"),DTe=a("strong"),pAr=o("speech_to_text"),_Ar=o(" \u2014 "),yU=a("a"),bAr=o("TFSpeech2TextForConditionalGeneration"),FAr=o(" (Speech2Text model)"),vAr=l(),v(UC.$$.fragment),Mqe=l(),Ac=a("h2"),JC=a("a"),GTe=a("span"),v(Ux.$$.fragment),TAr=l(),OTe=a("span"),MAr=o("FlaxAutoModel"),Eqe=l(),mr=a("div"),v(Jx.$$.fragment),EAr=l(),yc=a("p"),CAr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),LU=a("a"),wAr=o("from_pretrained()"),AAr=o(" class method or the "),xU=a("a"),yAr=o("from_config()"),LAr=o(` class
method.`),xAr=l(),Yx=a("p"),$Ar=o("This class cannot be instantiated directly using "),VTe=a("code"),kAr=o("__init__()"),SAr=o(" (throws an error)."),RAr=l(),jt=a("div"),v(Kx.$$.fragment),BAr=l(),XTe=a("p"),PAr=o("Instantiates one of the base model classes of the library from a configuration."),IAr=l(),Lc=a("p"),qAr=o(`Note:
Loading a model from its configuration file does `),zTe=a("strong"),NAr=o("not"),jAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$U=a("a"),DAr=o("from_pretrained()"),GAr=o(" to load the model weights."),OAr=l(),v(YC.$$.fragment),VAr=l(),jr=a("div"),v(Zx.$$.fragment),XAr=l(),QTe=a("p"),zAr=o("Instantiate one of the base model classes of the library from a pretrained model."),QAr=l(),gn=a("p"),WAr=o("The model class to instantiate is selected based on the "),WTe=a("code"),HAr=o("model_type"),UAr=o(` property of the config object (either
passed as an argument or loaded from `),HTe=a("code"),JAr=o("pretrained_model_name_or_path"),YAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UTe=a("code"),KAr=o("pretrained_model_name_or_path"),ZAr=o(":"),e6r=l(),re=a("ul"),KC=a("li"),JTe=a("strong"),o6r=o("albert"),r6r=o(" \u2014 "),kU=a("a"),t6r=o("FlaxAlbertModel"),a6r=o(" (ALBERT model)"),n6r=l(),ZC=a("li"),YTe=a("strong"),s6r=o("bart"),l6r=o(" \u2014 "),SU=a("a"),i6r=o("FlaxBartModel"),d6r=o(" (BART model)"),c6r=l(),e3=a("li"),KTe=a("strong"),m6r=o("beit"),f6r=o(" \u2014 "),RU=a("a"),g6r=o("FlaxBeitModel"),h6r=o(" (BEiT model)"),u6r=l(),o3=a("li"),ZTe=a("strong"),p6r=o("bert"),_6r=o(" \u2014 "),BU=a("a"),b6r=o("FlaxBertModel"),F6r=o(" (BERT model)"),v6r=l(),r3=a("li"),eMe=a("strong"),T6r=o("big_bird"),M6r=o(" \u2014 "),PU=a("a"),E6r=o("FlaxBigBirdModel"),C6r=o(" (BigBird model)"),w6r=l(),t3=a("li"),oMe=a("strong"),A6r=o("blenderbot"),y6r=o(" \u2014 "),IU=a("a"),L6r=o("FlaxBlenderbotModel"),x6r=o(" (Blenderbot model)"),$6r=l(),a3=a("li"),rMe=a("strong"),k6r=o("blenderbot-small"),S6r=o(" \u2014 "),qU=a("a"),R6r=o("FlaxBlenderbotSmallModel"),B6r=o(" (BlenderbotSmall model)"),P6r=l(),n3=a("li"),tMe=a("strong"),I6r=o("clip"),q6r=o(" \u2014 "),NU=a("a"),N6r=o("FlaxCLIPModel"),j6r=o(" (CLIP model)"),D6r=l(),s3=a("li"),aMe=a("strong"),G6r=o("distilbert"),O6r=o(" \u2014 "),jU=a("a"),V6r=o("FlaxDistilBertModel"),X6r=o(" (DistilBERT model)"),z6r=l(),l3=a("li"),nMe=a("strong"),Q6r=o("electra"),W6r=o(" \u2014 "),DU=a("a"),H6r=o("FlaxElectraModel"),U6r=o(" (ELECTRA model)"),J6r=l(),i3=a("li"),sMe=a("strong"),Y6r=o("gpt2"),K6r=o(" \u2014 "),GU=a("a"),Z6r=o("FlaxGPT2Model"),e0r=o(" (OpenAI GPT-2 model)"),o0r=l(),d3=a("li"),lMe=a("strong"),r0r=o("gpt_neo"),t0r=o(" \u2014 "),OU=a("a"),a0r=o("FlaxGPTNeoModel"),n0r=o(" (GPT Neo model)"),s0r=l(),c3=a("li"),iMe=a("strong"),l0r=o("gptj"),i0r=o(" \u2014 "),VU=a("a"),d0r=o("FlaxGPTJModel"),c0r=o(" (GPT-J model)"),m0r=l(),m3=a("li"),dMe=a("strong"),f0r=o("marian"),g0r=o(" \u2014 "),XU=a("a"),h0r=o("FlaxMarianModel"),u0r=o(" (Marian model)"),p0r=l(),f3=a("li"),cMe=a("strong"),_0r=o("mbart"),b0r=o(" \u2014 "),zU=a("a"),F0r=o("FlaxMBartModel"),v0r=o(" (mBART model)"),T0r=l(),g3=a("li"),mMe=a("strong"),M0r=o("mt5"),E0r=o(" \u2014 "),QU=a("a"),C0r=o("FlaxMT5Model"),w0r=o(" (mT5 model)"),A0r=l(),h3=a("li"),fMe=a("strong"),y0r=o("pegasus"),L0r=o(" \u2014 "),WU=a("a"),x0r=o("FlaxPegasusModel"),$0r=o(" (Pegasus model)"),k0r=l(),u3=a("li"),gMe=a("strong"),S0r=o("roberta"),R0r=o(" \u2014 "),HU=a("a"),B0r=o("FlaxRobertaModel"),P0r=o(" (RoBERTa model)"),I0r=l(),p3=a("li"),hMe=a("strong"),q0r=o("roformer"),N0r=o(" \u2014 "),UU=a("a"),j0r=o("FlaxRoFormerModel"),D0r=o(" (RoFormer model)"),G0r=l(),_3=a("li"),uMe=a("strong"),O0r=o("t5"),V0r=o(" \u2014 "),JU=a("a"),X0r=o("FlaxT5Model"),z0r=o(" (T5 model)"),Q0r=l(),b3=a("li"),pMe=a("strong"),W0r=o("vision-text-dual-encoder"),H0r=o(" \u2014 "),YU=a("a"),U0r=o("FlaxVisionTextDualEncoderModel"),J0r=o(" (VisionTextDualEncoder model)"),Y0r=l(),F3=a("li"),_Me=a("strong"),K0r=o("vit"),Z0r=o(" \u2014 "),KU=a("a"),eyr=o("FlaxViTModel"),oyr=o(" (ViT model)"),ryr=l(),v3=a("li"),bMe=a("strong"),tyr=o("wav2vec2"),ayr=o(" \u2014 "),ZU=a("a"),nyr=o("FlaxWav2Vec2Model"),syr=o(" (Wav2Vec2 model)"),lyr=l(),T3=a("li"),FMe=a("strong"),iyr=o("xglm"),dyr=o(" \u2014 "),eJ=a("a"),cyr=o("FlaxXGLMModel"),myr=o(" (XGLM model)"),fyr=l(),M3=a("li"),vMe=a("strong"),gyr=o("xlm-roberta"),hyr=o(" \u2014 "),oJ=a("a"),uyr=o("FlaxXLMRobertaModel"),pyr=o(" (XLM-RoBERTa model)"),_yr=l(),v(E3.$$.fragment),Cqe=l(),xc=a("h2"),C3=a("a"),TMe=a("span"),v(e7.$$.fragment),byr=l(),MMe=a("span"),Fyr=o("FlaxAutoModelForCausalLM"),wqe=l(),fr=a("div"),v(o7.$$.fragment),vyr=l(),$c=a("p"),Tyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),rJ=a("a"),Myr=o("from_pretrained()"),Eyr=o(" class method or the "),tJ=a("a"),Cyr=o("from_config()"),wyr=o(` class
method.`),Ayr=l(),r7=a("p"),yyr=o("This class cannot be instantiated directly using "),EMe=a("code"),Lyr=o("__init__()"),xyr=o(" (throws an error)."),$yr=l(),Dt=a("div"),v(t7.$$.fragment),kyr=l(),CMe=a("p"),Syr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Ryr=l(),kc=a("p"),Byr=o(`Note:
Loading a model from its configuration file does `),wMe=a("strong"),Pyr=o("not"),Iyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aJ=a("a"),qyr=o("from_pretrained()"),Nyr=o(" to load the model weights."),jyr=l(),v(w3.$$.fragment),Dyr=l(),Dr=a("div"),v(a7.$$.fragment),Gyr=l(),AMe=a("p"),Oyr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Vyr=l(),hn=a("p"),Xyr=o("The model class to instantiate is selected based on the "),yMe=a("code"),zyr=o("model_type"),Qyr=o(` property of the config object (either
passed as an argument or loaded from `),LMe=a("code"),Wyr=o("pretrained_model_name_or_path"),Hyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xMe=a("code"),Uyr=o("pretrained_model_name_or_path"),Jyr=o(":"),Yyr=l(),ke=a("ul"),A3=a("li"),$Me=a("strong"),Kyr=o("bart"),Zyr=o(" \u2014 "),nJ=a("a"),eLr=o("FlaxBartForCausalLM"),oLr=o(" (BART model)"),rLr=l(),y3=a("li"),kMe=a("strong"),tLr=o("bert"),aLr=o(" \u2014 "),sJ=a("a"),nLr=o("FlaxBertForCausalLM"),sLr=o(" (BERT model)"),lLr=l(),L3=a("li"),SMe=a("strong"),iLr=o("big_bird"),dLr=o(" \u2014 "),lJ=a("a"),cLr=o("FlaxBigBirdForCausalLM"),mLr=o(" (BigBird model)"),fLr=l(),x3=a("li"),RMe=a("strong"),gLr=o("electra"),hLr=o(" \u2014 "),iJ=a("a"),uLr=o("FlaxElectraForCausalLM"),pLr=o(" (ELECTRA model)"),_Lr=l(),$3=a("li"),BMe=a("strong"),bLr=o("gpt2"),FLr=o(" \u2014 "),dJ=a("a"),vLr=o("FlaxGPT2LMHeadModel"),TLr=o(" (OpenAI GPT-2 model)"),MLr=l(),k3=a("li"),PMe=a("strong"),ELr=o("gpt_neo"),CLr=o(" \u2014 "),cJ=a("a"),wLr=o("FlaxGPTNeoForCausalLM"),ALr=o(" (GPT Neo model)"),yLr=l(),S3=a("li"),IMe=a("strong"),LLr=o("gptj"),xLr=o(" \u2014 "),mJ=a("a"),$Lr=o("FlaxGPTJForCausalLM"),kLr=o(" (GPT-J model)"),SLr=l(),R3=a("li"),qMe=a("strong"),RLr=o("roberta"),BLr=o(" \u2014 "),fJ=a("a"),PLr=o("FlaxRobertaForCausalLM"),ILr=o(" (RoBERTa model)"),qLr=l(),B3=a("li"),NMe=a("strong"),NLr=o("xglm"),jLr=o(" \u2014 "),gJ=a("a"),DLr=o("FlaxXGLMForCausalLM"),GLr=o(" (XGLM model)"),OLr=l(),v(P3.$$.fragment),Aqe=l(),Sc=a("h2"),I3=a("a"),jMe=a("span"),v(n7.$$.fragment),VLr=l(),DMe=a("span"),XLr=o("FlaxAutoModelForPreTraining"),yqe=l(),gr=a("div"),v(s7.$$.fragment),zLr=l(),Rc=a("p"),QLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),hJ=a("a"),WLr=o("from_pretrained()"),HLr=o(" class method or the "),uJ=a("a"),ULr=o("from_config()"),JLr=o(` class
method.`),YLr=l(),l7=a("p"),KLr=o("This class cannot be instantiated directly using "),GMe=a("code"),ZLr=o("__init__()"),e8r=o(" (throws an error)."),o8r=l(),Gt=a("div"),v(i7.$$.fragment),r8r=l(),OMe=a("p"),t8r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),a8r=l(),Bc=a("p"),n8r=o(`Note:
Loading a model from its configuration file does `),VMe=a("strong"),s8r=o("not"),l8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pJ=a("a"),i8r=o("from_pretrained()"),d8r=o(" to load the model weights."),c8r=l(),v(q3.$$.fragment),m8r=l(),Gr=a("div"),v(d7.$$.fragment),f8r=l(),XMe=a("p"),g8r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),h8r=l(),un=a("p"),u8r=o("The model class to instantiate is selected based on the "),zMe=a("code"),p8r=o("model_type"),_8r=o(` property of the config object (either
passed as an argument or loaded from `),QMe=a("code"),b8r=o("pretrained_model_name_or_path"),F8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WMe=a("code"),v8r=o("pretrained_model_name_or_path"),T8r=o(":"),M8r=l(),Me=a("ul"),N3=a("li"),HMe=a("strong"),E8r=o("albert"),C8r=o(" \u2014 "),_J=a("a"),w8r=o("FlaxAlbertForPreTraining"),A8r=o(" (ALBERT model)"),y8r=l(),j3=a("li"),UMe=a("strong"),L8r=o("bart"),x8r=o(" \u2014 "),bJ=a("a"),$8r=o("FlaxBartForConditionalGeneration"),k8r=o(" (BART model)"),S8r=l(),D3=a("li"),JMe=a("strong"),R8r=o("bert"),B8r=o(" \u2014 "),FJ=a("a"),P8r=o("FlaxBertForPreTraining"),I8r=o(" (BERT model)"),q8r=l(),G3=a("li"),YMe=a("strong"),N8r=o("big_bird"),j8r=o(" \u2014 "),vJ=a("a"),D8r=o("FlaxBigBirdForPreTraining"),G8r=o(" (BigBird model)"),O8r=l(),O3=a("li"),KMe=a("strong"),V8r=o("electra"),X8r=o(" \u2014 "),TJ=a("a"),z8r=o("FlaxElectraForPreTraining"),Q8r=o(" (ELECTRA model)"),W8r=l(),V3=a("li"),ZMe=a("strong"),H8r=o("mbart"),U8r=o(" \u2014 "),MJ=a("a"),J8r=o("FlaxMBartForConditionalGeneration"),Y8r=o(" (mBART model)"),K8r=l(),X3=a("li"),e4e=a("strong"),Z8r=o("mt5"),exr=o(" \u2014 "),EJ=a("a"),oxr=o("FlaxMT5ForConditionalGeneration"),rxr=o(" (mT5 model)"),txr=l(),z3=a("li"),o4e=a("strong"),axr=o("roberta"),nxr=o(" \u2014 "),CJ=a("a"),sxr=o("FlaxRobertaForMaskedLM"),lxr=o(" (RoBERTa model)"),ixr=l(),Q3=a("li"),r4e=a("strong"),dxr=o("roformer"),cxr=o(" \u2014 "),wJ=a("a"),mxr=o("FlaxRoFormerForMaskedLM"),fxr=o(" (RoFormer model)"),gxr=l(),W3=a("li"),t4e=a("strong"),hxr=o("t5"),uxr=o(" \u2014 "),AJ=a("a"),pxr=o("FlaxT5ForConditionalGeneration"),_xr=o(" (T5 model)"),bxr=l(),H3=a("li"),a4e=a("strong"),Fxr=o("wav2vec2"),vxr=o(" \u2014 "),yJ=a("a"),Txr=o("FlaxWav2Vec2ForPreTraining"),Mxr=o(" (Wav2Vec2 model)"),Exr=l(),U3=a("li"),n4e=a("strong"),Cxr=o("xlm-roberta"),wxr=o(" \u2014 "),LJ=a("a"),Axr=o("FlaxXLMRobertaForMaskedLM"),yxr=o(" (XLM-RoBERTa model)"),Lxr=l(),v(J3.$$.fragment),Lqe=l(),Pc=a("h2"),Y3=a("a"),s4e=a("span"),v(c7.$$.fragment),xxr=l(),l4e=a("span"),$xr=o("FlaxAutoModelForMaskedLM"),xqe=l(),hr=a("div"),v(m7.$$.fragment),kxr=l(),Ic=a("p"),Sxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),xJ=a("a"),Rxr=o("from_pretrained()"),Bxr=o(" class method or the "),$J=a("a"),Pxr=o("from_config()"),Ixr=o(` class
method.`),qxr=l(),f7=a("p"),Nxr=o("This class cannot be instantiated directly using "),i4e=a("code"),jxr=o("__init__()"),Dxr=o(" (throws an error)."),Gxr=l(),Ot=a("div"),v(g7.$$.fragment),Oxr=l(),d4e=a("p"),Vxr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Xxr=l(),qc=a("p"),zxr=o(`Note:
Loading a model from its configuration file does `),c4e=a("strong"),Qxr=o("not"),Wxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=a("a"),Hxr=o("from_pretrained()"),Uxr=o(" to load the model weights."),Jxr=l(),v(K3.$$.fragment),Yxr=l(),Or=a("div"),v(h7.$$.fragment),Kxr=l(),m4e=a("p"),Zxr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),e7r=l(),pn=a("p"),o7r=o("The model class to instantiate is selected based on the "),f4e=a("code"),r7r=o("model_type"),t7r=o(` property of the config object (either
passed as an argument or loaded from `),g4e=a("code"),a7r=o("pretrained_model_name_or_path"),n7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h4e=a("code"),s7r=o("pretrained_model_name_or_path"),l7r=o(":"),i7r=l(),Le=a("ul"),Z3=a("li"),u4e=a("strong"),d7r=o("albert"),c7r=o(" \u2014 "),SJ=a("a"),m7r=o("FlaxAlbertForMaskedLM"),f7r=o(" (ALBERT model)"),g7r=l(),ew=a("li"),p4e=a("strong"),h7r=o("bart"),u7r=o(" \u2014 "),RJ=a("a"),p7r=o("FlaxBartForConditionalGeneration"),_7r=o(" (BART model)"),b7r=l(),ow=a("li"),_4e=a("strong"),F7r=o("bert"),v7r=o(" \u2014 "),BJ=a("a"),T7r=o("FlaxBertForMaskedLM"),M7r=o(" (BERT model)"),E7r=l(),rw=a("li"),b4e=a("strong"),C7r=o("big_bird"),w7r=o(" \u2014 "),PJ=a("a"),A7r=o("FlaxBigBirdForMaskedLM"),y7r=o(" (BigBird model)"),L7r=l(),tw=a("li"),F4e=a("strong"),x7r=o("distilbert"),$7r=o(" \u2014 "),IJ=a("a"),k7r=o("FlaxDistilBertForMaskedLM"),S7r=o(" (DistilBERT model)"),R7r=l(),aw=a("li"),v4e=a("strong"),B7r=o("electra"),P7r=o(" \u2014 "),qJ=a("a"),I7r=o("FlaxElectraForMaskedLM"),q7r=o(" (ELECTRA model)"),N7r=l(),nw=a("li"),T4e=a("strong"),j7r=o("mbart"),D7r=o(" \u2014 "),NJ=a("a"),G7r=o("FlaxMBartForConditionalGeneration"),O7r=o(" (mBART model)"),V7r=l(),sw=a("li"),M4e=a("strong"),X7r=o("roberta"),z7r=o(" \u2014 "),jJ=a("a"),Q7r=o("FlaxRobertaForMaskedLM"),W7r=o(" (RoBERTa model)"),H7r=l(),lw=a("li"),E4e=a("strong"),U7r=o("roformer"),J7r=o(" \u2014 "),DJ=a("a"),Y7r=o("FlaxRoFormerForMaskedLM"),K7r=o(" (RoFormer model)"),Z7r=l(),iw=a("li"),C4e=a("strong"),e9r=o("xlm-roberta"),o9r=o(" \u2014 "),GJ=a("a"),r9r=o("FlaxXLMRobertaForMaskedLM"),t9r=o(" (XLM-RoBERTa model)"),a9r=l(),v(dw.$$.fragment),$qe=l(),Nc=a("h2"),cw=a("a"),w4e=a("span"),v(u7.$$.fragment),n9r=l(),A4e=a("span"),s9r=o("FlaxAutoModelForSeq2SeqLM"),kqe=l(),ur=a("div"),v(p7.$$.fragment),l9r=l(),jc=a("p"),i9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),OJ=a("a"),d9r=o("from_pretrained()"),c9r=o(" class method or the "),VJ=a("a"),m9r=o("from_config()"),f9r=o(` class
method.`),g9r=l(),_7=a("p"),h9r=o("This class cannot be instantiated directly using "),y4e=a("code"),u9r=o("__init__()"),p9r=o(" (throws an error)."),_9r=l(),Vt=a("div"),v(b7.$$.fragment),b9r=l(),L4e=a("p"),F9r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),v9r=l(),Dc=a("p"),T9r=o(`Note:
Loading a model from its configuration file does `),x4e=a("strong"),M9r=o("not"),E9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XJ=a("a"),C9r=o("from_pretrained()"),w9r=o(" to load the model weights."),A9r=l(),v(mw.$$.fragment),y9r=l(),Vr=a("div"),v(F7.$$.fragment),L9r=l(),$4e=a("p"),x9r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$9r=l(),_n=a("p"),k9r=o("The model class to instantiate is selected based on the "),k4e=a("code"),S9r=o("model_type"),R9r=o(` property of the config object (either
passed as an argument or loaded from `),S4e=a("code"),B9r=o("pretrained_model_name_or_path"),P9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R4e=a("code"),I9r=o("pretrained_model_name_or_path"),q9r=o(":"),N9r=l(),Se=a("ul"),fw=a("li"),B4e=a("strong"),j9r=o("bart"),D9r=o(" \u2014 "),zJ=a("a"),G9r=o("FlaxBartForConditionalGeneration"),O9r=o(" (BART model)"),V9r=l(),gw=a("li"),P4e=a("strong"),X9r=o("blenderbot"),z9r=o(" \u2014 "),QJ=a("a"),Q9r=o("FlaxBlenderbotForConditionalGeneration"),W9r=o(" (Blenderbot model)"),H9r=l(),hw=a("li"),I4e=a("strong"),U9r=o("blenderbot-small"),J9r=o(" \u2014 "),WJ=a("a"),Y9r=o("FlaxBlenderbotSmallForConditionalGeneration"),K9r=o(" (BlenderbotSmall model)"),Z9r=l(),uw=a("li"),q4e=a("strong"),e$r=o("encoder-decoder"),o$r=o(" \u2014 "),HJ=a("a"),r$r=o("FlaxEncoderDecoderModel"),t$r=o(" (Encoder decoder model)"),a$r=l(),pw=a("li"),N4e=a("strong"),n$r=o("marian"),s$r=o(" \u2014 "),UJ=a("a"),l$r=o("FlaxMarianMTModel"),i$r=o(" (Marian model)"),d$r=l(),_w=a("li"),j4e=a("strong"),c$r=o("mbart"),m$r=o(" \u2014 "),JJ=a("a"),f$r=o("FlaxMBartForConditionalGeneration"),g$r=o(" (mBART model)"),h$r=l(),bw=a("li"),D4e=a("strong"),u$r=o("mt5"),p$r=o(" \u2014 "),YJ=a("a"),_$r=o("FlaxMT5ForConditionalGeneration"),b$r=o(" (mT5 model)"),F$r=l(),Fw=a("li"),G4e=a("strong"),v$r=o("pegasus"),T$r=o(" \u2014 "),KJ=a("a"),M$r=o("FlaxPegasusForConditionalGeneration"),E$r=o(" (Pegasus model)"),C$r=l(),vw=a("li"),O4e=a("strong"),w$r=o("t5"),A$r=o(" \u2014 "),ZJ=a("a"),y$r=o("FlaxT5ForConditionalGeneration"),L$r=o(" (T5 model)"),x$r=l(),v(Tw.$$.fragment),Sqe=l(),Gc=a("h2"),Mw=a("a"),V4e=a("span"),v(v7.$$.fragment),$$r=l(),X4e=a("span"),k$r=o("FlaxAutoModelForSequenceClassification"),Rqe=l(),pr=a("div"),v(T7.$$.fragment),S$r=l(),Oc=a("p"),R$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),eY=a("a"),B$r=o("from_pretrained()"),P$r=o(" class method or the "),oY=a("a"),I$r=o("from_config()"),q$r=o(` class
method.`),N$r=l(),M7=a("p"),j$r=o("This class cannot be instantiated directly using "),z4e=a("code"),D$r=o("__init__()"),G$r=o(" (throws an error)."),O$r=l(),Xt=a("div"),v(E7.$$.fragment),V$r=l(),Q4e=a("p"),X$r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),z$r=l(),Vc=a("p"),Q$r=o(`Note:
Loading a model from its configuration file does `),W4e=a("strong"),W$r=o("not"),H$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rY=a("a"),U$r=o("from_pretrained()"),J$r=o(" to load the model weights."),Y$r=l(),v(Ew.$$.fragment),K$r=l(),Xr=a("div"),v(C7.$$.fragment),Z$r=l(),H4e=a("p"),ekr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),okr=l(),bn=a("p"),rkr=o("The model class to instantiate is selected based on the "),U4e=a("code"),tkr=o("model_type"),akr=o(` property of the config object (either
passed as an argument or loaded from `),J4e=a("code"),nkr=o("pretrained_model_name_or_path"),skr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y4e=a("code"),lkr=o("pretrained_model_name_or_path"),ikr=o(":"),dkr=l(),xe=a("ul"),Cw=a("li"),K4e=a("strong"),ckr=o("albert"),mkr=o(" \u2014 "),tY=a("a"),fkr=o("FlaxAlbertForSequenceClassification"),gkr=o(" (ALBERT model)"),hkr=l(),ww=a("li"),Z4e=a("strong"),ukr=o("bart"),pkr=o(" \u2014 "),aY=a("a"),_kr=o("FlaxBartForSequenceClassification"),bkr=o(" (BART model)"),Fkr=l(),Aw=a("li"),eEe=a("strong"),vkr=o("bert"),Tkr=o(" \u2014 "),nY=a("a"),Mkr=o("FlaxBertForSequenceClassification"),Ekr=o(" (BERT model)"),Ckr=l(),yw=a("li"),oEe=a("strong"),wkr=o("big_bird"),Akr=o(" \u2014 "),sY=a("a"),ykr=o("FlaxBigBirdForSequenceClassification"),Lkr=o(" (BigBird model)"),xkr=l(),Lw=a("li"),rEe=a("strong"),$kr=o("distilbert"),kkr=o(" \u2014 "),lY=a("a"),Skr=o("FlaxDistilBertForSequenceClassification"),Rkr=o(" (DistilBERT model)"),Bkr=l(),xw=a("li"),tEe=a("strong"),Pkr=o("electra"),Ikr=o(" \u2014 "),iY=a("a"),qkr=o("FlaxElectraForSequenceClassification"),Nkr=o(" (ELECTRA model)"),jkr=l(),$w=a("li"),aEe=a("strong"),Dkr=o("mbart"),Gkr=o(" \u2014 "),dY=a("a"),Okr=o("FlaxMBartForSequenceClassification"),Vkr=o(" (mBART model)"),Xkr=l(),kw=a("li"),nEe=a("strong"),zkr=o("roberta"),Qkr=o(" \u2014 "),cY=a("a"),Wkr=o("FlaxRobertaForSequenceClassification"),Hkr=o(" (RoBERTa model)"),Ukr=l(),Sw=a("li"),sEe=a("strong"),Jkr=o("roformer"),Ykr=o(" \u2014 "),mY=a("a"),Kkr=o("FlaxRoFormerForSequenceClassification"),Zkr=o(" (RoFormer model)"),eSr=l(),Rw=a("li"),lEe=a("strong"),oSr=o("xlm-roberta"),rSr=o(" \u2014 "),fY=a("a"),tSr=o("FlaxXLMRobertaForSequenceClassification"),aSr=o(" (XLM-RoBERTa model)"),nSr=l(),v(Bw.$$.fragment),Bqe=l(),Xc=a("h2"),Pw=a("a"),iEe=a("span"),v(w7.$$.fragment),sSr=l(),dEe=a("span"),lSr=o("FlaxAutoModelForQuestionAnswering"),Pqe=l(),_r=a("div"),v(A7.$$.fragment),iSr=l(),zc=a("p"),dSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gY=a("a"),cSr=o("from_pretrained()"),mSr=o(" class method or the "),hY=a("a"),fSr=o("from_config()"),gSr=o(` class
method.`),hSr=l(),y7=a("p"),uSr=o("This class cannot be instantiated directly using "),cEe=a("code"),pSr=o("__init__()"),_Sr=o(" (throws an error)."),bSr=l(),zt=a("div"),v(L7.$$.fragment),FSr=l(),mEe=a("p"),vSr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),TSr=l(),Qc=a("p"),MSr=o(`Note:
Loading a model from its configuration file does `),fEe=a("strong"),ESr=o("not"),CSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=a("a"),wSr=o("from_pretrained()"),ASr=o(" to load the model weights."),ySr=l(),v(Iw.$$.fragment),LSr=l(),zr=a("div"),v(x7.$$.fragment),xSr=l(),gEe=a("p"),$Sr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),kSr=l(),Fn=a("p"),SSr=o("The model class to instantiate is selected based on the "),hEe=a("code"),RSr=o("model_type"),BSr=o(` property of the config object (either
passed as an argument or loaded from `),uEe=a("code"),PSr=o("pretrained_model_name_or_path"),ISr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pEe=a("code"),qSr=o("pretrained_model_name_or_path"),NSr=o(":"),jSr=l(),$e=a("ul"),qw=a("li"),_Ee=a("strong"),DSr=o("albert"),GSr=o(" \u2014 "),pY=a("a"),OSr=o("FlaxAlbertForQuestionAnswering"),VSr=o(" (ALBERT model)"),XSr=l(),Nw=a("li"),bEe=a("strong"),zSr=o("bart"),QSr=o(" \u2014 "),_Y=a("a"),WSr=o("FlaxBartForQuestionAnswering"),HSr=o(" (BART model)"),USr=l(),jw=a("li"),FEe=a("strong"),JSr=o("bert"),YSr=o(" \u2014 "),bY=a("a"),KSr=o("FlaxBertForQuestionAnswering"),ZSr=o(" (BERT model)"),eRr=l(),Dw=a("li"),vEe=a("strong"),oRr=o("big_bird"),rRr=o(" \u2014 "),FY=a("a"),tRr=o("FlaxBigBirdForQuestionAnswering"),aRr=o(" (BigBird model)"),nRr=l(),Gw=a("li"),TEe=a("strong"),sRr=o("distilbert"),lRr=o(" \u2014 "),vY=a("a"),iRr=o("FlaxDistilBertForQuestionAnswering"),dRr=o(" (DistilBERT model)"),cRr=l(),Ow=a("li"),MEe=a("strong"),mRr=o("electra"),fRr=o(" \u2014 "),TY=a("a"),gRr=o("FlaxElectraForQuestionAnswering"),hRr=o(" (ELECTRA model)"),uRr=l(),Vw=a("li"),EEe=a("strong"),pRr=o("mbart"),_Rr=o(" \u2014 "),MY=a("a"),bRr=o("FlaxMBartForQuestionAnswering"),FRr=o(" (mBART model)"),vRr=l(),Xw=a("li"),CEe=a("strong"),TRr=o("roberta"),MRr=o(" \u2014 "),EY=a("a"),ERr=o("FlaxRobertaForQuestionAnswering"),CRr=o(" (RoBERTa model)"),wRr=l(),zw=a("li"),wEe=a("strong"),ARr=o("roformer"),yRr=o(" \u2014 "),CY=a("a"),LRr=o("FlaxRoFormerForQuestionAnswering"),xRr=o(" (RoFormer model)"),$Rr=l(),Qw=a("li"),AEe=a("strong"),kRr=o("xlm-roberta"),SRr=o(" \u2014 "),wY=a("a"),RRr=o("FlaxXLMRobertaForQuestionAnswering"),BRr=o(" (XLM-RoBERTa model)"),PRr=l(),v(Ww.$$.fragment),Iqe=l(),Wc=a("h2"),Hw=a("a"),yEe=a("span"),v($7.$$.fragment),IRr=l(),LEe=a("span"),qRr=o("FlaxAutoModelForTokenClassification"),qqe=l(),br=a("div"),v(k7.$$.fragment),NRr=l(),Hc=a("p"),jRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),AY=a("a"),DRr=o("from_pretrained()"),GRr=o(" class method or the "),yY=a("a"),ORr=o("from_config()"),VRr=o(` class
method.`),XRr=l(),S7=a("p"),zRr=o("This class cannot be instantiated directly using "),xEe=a("code"),QRr=o("__init__()"),WRr=o(" (throws an error)."),HRr=l(),Qt=a("div"),v(R7.$$.fragment),URr=l(),$Ee=a("p"),JRr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),YRr=l(),Uc=a("p"),KRr=o(`Note:
Loading a model from its configuration file does `),kEe=a("strong"),ZRr=o("not"),eBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LY=a("a"),oBr=o("from_pretrained()"),rBr=o(" to load the model weights."),tBr=l(),v(Uw.$$.fragment),aBr=l(),Qr=a("div"),v(B7.$$.fragment),nBr=l(),SEe=a("p"),sBr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),lBr=l(),vn=a("p"),iBr=o("The model class to instantiate is selected based on the "),REe=a("code"),dBr=o("model_type"),cBr=o(` property of the config object (either
passed as an argument or loaded from `),BEe=a("code"),mBr=o("pretrained_model_name_or_path"),fBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PEe=a("code"),gBr=o("pretrained_model_name_or_path"),hBr=o(":"),uBr=l(),De=a("ul"),Jw=a("li"),IEe=a("strong"),pBr=o("albert"),_Br=o(" \u2014 "),xY=a("a"),bBr=o("FlaxAlbertForTokenClassification"),FBr=o(" (ALBERT model)"),vBr=l(),Yw=a("li"),qEe=a("strong"),TBr=o("bert"),MBr=o(" \u2014 "),$Y=a("a"),EBr=o("FlaxBertForTokenClassification"),CBr=o(" (BERT model)"),wBr=l(),Kw=a("li"),NEe=a("strong"),ABr=o("big_bird"),yBr=o(" \u2014 "),kY=a("a"),LBr=o("FlaxBigBirdForTokenClassification"),xBr=o(" (BigBird model)"),$Br=l(),Zw=a("li"),jEe=a("strong"),kBr=o("distilbert"),SBr=o(" \u2014 "),SY=a("a"),RBr=o("FlaxDistilBertForTokenClassification"),BBr=o(" (DistilBERT model)"),PBr=l(),eA=a("li"),DEe=a("strong"),IBr=o("electra"),qBr=o(" \u2014 "),RY=a("a"),NBr=o("FlaxElectraForTokenClassification"),jBr=o(" (ELECTRA model)"),DBr=l(),oA=a("li"),GEe=a("strong"),GBr=o("roberta"),OBr=o(" \u2014 "),BY=a("a"),VBr=o("FlaxRobertaForTokenClassification"),XBr=o(" (RoBERTa model)"),zBr=l(),rA=a("li"),OEe=a("strong"),QBr=o("roformer"),WBr=o(" \u2014 "),PY=a("a"),HBr=o("FlaxRoFormerForTokenClassification"),UBr=o(" (RoFormer model)"),JBr=l(),tA=a("li"),VEe=a("strong"),YBr=o("xlm-roberta"),KBr=o(" \u2014 "),IY=a("a"),ZBr=o("FlaxXLMRobertaForTokenClassification"),ePr=o(" (XLM-RoBERTa model)"),oPr=l(),v(aA.$$.fragment),Nqe=l(),Jc=a("h2"),nA=a("a"),XEe=a("span"),v(P7.$$.fragment),rPr=l(),zEe=a("span"),tPr=o("FlaxAutoModelForMultipleChoice"),jqe=l(),Fr=a("div"),v(I7.$$.fragment),aPr=l(),Yc=a("p"),nPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),qY=a("a"),sPr=o("from_pretrained()"),lPr=o(" class method or the "),NY=a("a"),iPr=o("from_config()"),dPr=o(` class
method.`),cPr=l(),q7=a("p"),mPr=o("This class cannot be instantiated directly using "),QEe=a("code"),fPr=o("__init__()"),gPr=o(" (throws an error)."),hPr=l(),Wt=a("div"),v(N7.$$.fragment),uPr=l(),WEe=a("p"),pPr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),_Pr=l(),Kc=a("p"),bPr=o(`Note:
Loading a model from its configuration file does `),HEe=a("strong"),FPr=o("not"),vPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jY=a("a"),TPr=o("from_pretrained()"),MPr=o(" to load the model weights."),EPr=l(),v(sA.$$.fragment),CPr=l(),Wr=a("div"),v(j7.$$.fragment),wPr=l(),UEe=a("p"),APr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),yPr=l(),Tn=a("p"),LPr=o("The model class to instantiate is selected based on the "),JEe=a("code"),xPr=o("model_type"),$Pr=o(` property of the config object (either
passed as an argument or loaded from `),YEe=a("code"),kPr=o("pretrained_model_name_or_path"),SPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KEe=a("code"),RPr=o("pretrained_model_name_or_path"),BPr=o(":"),PPr=l(),Ge=a("ul"),lA=a("li"),ZEe=a("strong"),IPr=o("albert"),qPr=o(" \u2014 "),DY=a("a"),NPr=o("FlaxAlbertForMultipleChoice"),jPr=o(" (ALBERT model)"),DPr=l(),iA=a("li"),e5e=a("strong"),GPr=o("bert"),OPr=o(" \u2014 "),GY=a("a"),VPr=o("FlaxBertForMultipleChoice"),XPr=o(" (BERT model)"),zPr=l(),dA=a("li"),o5e=a("strong"),QPr=o("big_bird"),WPr=o(" \u2014 "),OY=a("a"),HPr=o("FlaxBigBirdForMultipleChoice"),UPr=o(" (BigBird model)"),JPr=l(),cA=a("li"),r5e=a("strong"),YPr=o("distilbert"),KPr=o(" \u2014 "),VY=a("a"),ZPr=o("FlaxDistilBertForMultipleChoice"),eIr=o(" (DistilBERT model)"),oIr=l(),mA=a("li"),t5e=a("strong"),rIr=o("electra"),tIr=o(" \u2014 "),XY=a("a"),aIr=o("FlaxElectraForMultipleChoice"),nIr=o(" (ELECTRA model)"),sIr=l(),fA=a("li"),a5e=a("strong"),lIr=o("roberta"),iIr=o(" \u2014 "),zY=a("a"),dIr=o("FlaxRobertaForMultipleChoice"),cIr=o(" (RoBERTa model)"),mIr=l(),gA=a("li"),n5e=a("strong"),fIr=o("roformer"),gIr=o(" \u2014 "),QY=a("a"),hIr=o("FlaxRoFormerForMultipleChoice"),uIr=o(" (RoFormer model)"),pIr=l(),hA=a("li"),s5e=a("strong"),_Ir=o("xlm-roberta"),bIr=o(" \u2014 "),WY=a("a"),FIr=o("FlaxXLMRobertaForMultipleChoice"),vIr=o(" (XLM-RoBERTa model)"),TIr=l(),v(uA.$$.fragment),Dqe=l(),Zc=a("h2"),pA=a("a"),l5e=a("span"),v(D7.$$.fragment),MIr=l(),i5e=a("span"),EIr=o("FlaxAutoModelForNextSentencePrediction"),Gqe=l(),vr=a("div"),v(G7.$$.fragment),CIr=l(),em=a("p"),wIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),HY=a("a"),AIr=o("from_pretrained()"),yIr=o(" class method or the "),UY=a("a"),LIr=o("from_config()"),xIr=o(` class
method.`),$Ir=l(),O7=a("p"),kIr=o("This class cannot be instantiated directly using "),d5e=a("code"),SIr=o("__init__()"),RIr=o(" (throws an error)."),BIr=l(),Ht=a("div"),v(V7.$$.fragment),PIr=l(),c5e=a("p"),IIr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),qIr=l(),om=a("p"),NIr=o(`Note:
Loading a model from its configuration file does `),m5e=a("strong"),jIr=o("not"),DIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JY=a("a"),GIr=o("from_pretrained()"),OIr=o(" to load the model weights."),VIr=l(),v(_A.$$.fragment),XIr=l(),Hr=a("div"),v(X7.$$.fragment),zIr=l(),f5e=a("p"),QIr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),WIr=l(),Mn=a("p"),HIr=o("The model class to instantiate is selected based on the "),g5e=a("code"),UIr=o("model_type"),JIr=o(` property of the config object (either
passed as an argument or loaded from `),h5e=a("code"),YIr=o("pretrained_model_name_or_path"),KIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u5e=a("code"),ZIr=o("pretrained_model_name_or_path"),eqr=o(":"),oqr=l(),p5e=a("ul"),bA=a("li"),_5e=a("strong"),rqr=o("bert"),tqr=o(" \u2014 "),YY=a("a"),aqr=o("FlaxBertForNextSentencePrediction"),nqr=o(" (BERT model)"),sqr=l(),v(FA.$$.fragment),Oqe=l(),rm=a("h2"),vA=a("a"),b5e=a("span"),v(z7.$$.fragment),lqr=l(),F5e=a("span"),iqr=o("FlaxAutoModelForImageClassification"),Vqe=l(),Tr=a("div"),v(Q7.$$.fragment),dqr=l(),tm=a("p"),cqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),KY=a("a"),mqr=o("from_pretrained()"),fqr=o(" class method or the "),ZY=a("a"),gqr=o("from_config()"),hqr=o(` class
method.`),uqr=l(),W7=a("p"),pqr=o("This class cannot be instantiated directly using "),v5e=a("code"),_qr=o("__init__()"),bqr=o(" (throws an error)."),Fqr=l(),Ut=a("div"),v(H7.$$.fragment),vqr=l(),T5e=a("p"),Tqr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Mqr=l(),am=a("p"),Eqr=o(`Note:
Loading a model from its configuration file does `),M5e=a("strong"),Cqr=o("not"),wqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eK=a("a"),Aqr=o("from_pretrained()"),yqr=o(" to load the model weights."),Lqr=l(),v(TA.$$.fragment),xqr=l(),Ur=a("div"),v(U7.$$.fragment),$qr=l(),E5e=a("p"),kqr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Sqr=l(),En=a("p"),Rqr=o("The model class to instantiate is selected based on the "),C5e=a("code"),Bqr=o("model_type"),Pqr=o(` property of the config object (either
passed as an argument or loaded from `),w5e=a("code"),Iqr=o("pretrained_model_name_or_path"),qqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A5e=a("code"),Nqr=o("pretrained_model_name_or_path"),jqr=o(":"),Dqr=l(),J7=a("ul"),MA=a("li"),y5e=a("strong"),Gqr=o("beit"),Oqr=o(" \u2014 "),oK=a("a"),Vqr=o("FlaxBeitForImageClassification"),Xqr=o(" (BEiT model)"),zqr=l(),EA=a("li"),L5e=a("strong"),Qqr=o("vit"),Wqr=o(" \u2014 "),rK=a("a"),Hqr=o("FlaxViTForImageClassification"),Uqr=o(" (ViT model)"),Jqr=l(),v(CA.$$.fragment),Xqe=l(),nm=a("h2"),wA=a("a"),x5e=a("span"),v(Y7.$$.fragment),Yqr=l(),$5e=a("span"),Kqr=o("FlaxAutoModelForVision2Seq"),zqe=l(),Mr=a("div"),v(K7.$$.fragment),Zqr=l(),sm=a("p"),eNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tK=a("a"),oNr=o("from_pretrained()"),rNr=o(" class method or the "),aK=a("a"),tNr=o("from_config()"),aNr=o(` class
method.`),nNr=l(),Z7=a("p"),sNr=o("This class cannot be instantiated directly using "),k5e=a("code"),lNr=o("__init__()"),iNr=o(" (throws an error)."),dNr=l(),Jt=a("div"),v(e9.$$.fragment),cNr=l(),S5e=a("p"),mNr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),fNr=l(),lm=a("p"),gNr=o(`Note:
Loading a model from its configuration file does `),R5e=a("strong"),hNr=o("not"),uNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nK=a("a"),pNr=o("from_pretrained()"),_Nr=o(" to load the model weights."),bNr=l(),v(AA.$$.fragment),FNr=l(),Jr=a("div"),v(o9.$$.fragment),vNr=l(),B5e=a("p"),TNr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),MNr=l(),Cn=a("p"),ENr=o("The model class to instantiate is selected based on the "),P5e=a("code"),CNr=o("model_type"),wNr=o(` property of the config object (either
passed as an argument or loaded from `),I5e=a("code"),ANr=o("pretrained_model_name_or_path"),yNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q5e=a("code"),LNr=o("pretrained_model_name_or_path"),xNr=o(":"),$Nr=l(),N5e=a("ul"),yA=a("li"),j5e=a("strong"),kNr=o("vision-encoder-decoder"),SNr=o(" \u2014 "),sK=a("a"),RNr=o("FlaxVisionEncoderDecoderModel"),BNr=o(" (Vision Encoder decoder model)"),PNr=l(),v(LA.$$.fragment),this.h()},l(m){const _=cyt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),F=i(m),u=n(m,"H1",{class:!0});var r9=s(u);f=n(r9,"A",{id:!0,class:!0,href:!0});var D5e=s(f);p=n(D5e,"SPAN",{});var G5e=s(p);T(d.$$.fragment,G5e),G5e.forEach(t),D5e.forEach(t),h=i(r9),Mo=n(r9,"SPAN",{});var O5e=s(Mo);li=r(O5e,"Auto Classes"),O5e.forEach(t),r9.forEach(t),mm=i(m),et=n(m,"P",{});var t9=s(et);ii=r(t9,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=n(t9,"CODE",{});var V5e=s(di);W0=r(V5e,"from_pretrained()"),V5e.forEach(t),fm=r(t9,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),t9.forEach(t),qe=i(m),Xe=n(m,"P",{});var wn=s(Xe);ci=r(wn,"Instantiating one of "),An=n(wn,"A",{href:!0});var X5e=s(An);H0=r(X5e,"AutoConfig"),X5e.forEach(t),yn=r(wn,", "),Ln=n(wn,"A",{href:!0});var z5e=s(Ln);U0=r(z5e,"AutoModel"),z5e.forEach(t),mi=r(wn,`, and
`),xn=n(wn,"A",{href:!0});var Q5e=s(xn);J0=r(Q5e,"AutoTokenizer"),Q5e.forEach(t),fi=r(wn," will directly create a class of the relevant architecture. For instance"),wn.forEach(t),gm=i(m),T(Ma.$$.fragment,m),ze=i(m),Ae=n(m,"P",{});var a9=s(Ae);h$=r(a9,"will create a model that is an instance of "),gi=n(a9,"A",{href:!0});var W5e=s(gi);u$=r(W5e,"BertModel"),W5e.forEach(t),p$=r(a9,"."),a9.forEach(t),Eo=i(m),Ea=n(m,"P",{});var n9=s(Ea);_$=r(n9,"There is one class of "),hm=n(n9,"CODE",{});var H5e=s(hm);b$=r(H5e,"AutoModel"),H5e.forEach(t),eDe=r(n9," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),n9.forEach(t),VPe=i(m),hi=n(m,"H2",{class:!0});var s9=s(hi);um=n(s9,"A",{id:!0,class:!0,href:!0});var U5e=s(um);eee=n(U5e,"SPAN",{});var J5e=s(eee);T(Y0.$$.fragment,J5e),J5e.forEach(t),U5e.forEach(t),oDe=i(s9),oee=n(s9,"SPAN",{});var Y5e=s(oee);rDe=r(Y5e,"Extending the Auto Classes"),Y5e.forEach(t),s9.forEach(t),XPe=i(m),$n=n(m,"P",{});var im=s($n);tDe=r(im,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),ree=n(im,"CODE",{});var K5e=s(ree);aDe=r(K5e,"NewModel"),K5e.forEach(t),nDe=r(im,", make sure you have a "),tee=n(im,"CODE",{});var Z5e=s(tee);sDe=r(Z5e,"NewModelConfig"),Z5e.forEach(t),lDe=r(im,` then you can add those to the auto
classes like this:`),im.forEach(t),zPe=i(m),T(K0.$$.fragment,m),QPe=i(m),F$=n(m,"P",{});var eCe=s(F$);iDe=r(eCe,"You will then be able to use the auto classes like you would usually do!"),eCe.forEach(t),WPe=i(m),T(pm.$$.fragment,m),HPe=i(m),ui=n(m,"H2",{class:!0});var l9=s(ui);_m=n(l9,"A",{id:!0,class:!0,href:!0});var oCe=s(_m);aee=n(oCe,"SPAN",{});var rCe=s(aee);T(Z0.$$.fragment,rCe),rCe.forEach(t),oCe.forEach(t),dDe=i(l9),nee=n(l9,"SPAN",{});var tCe=s(nee);cDe=r(tCe,"AutoConfig"),tCe.forEach(t),l9.forEach(t),UPe=i(m),Co=n(m,"DIV",{class:!0});var Kr=s(Co);T(ey.$$.fragment,Kr),mDe=i(Kr),oy=n(Kr,"P",{});var i9=s(oy);fDe=r(i9,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),v$=n(i9,"A",{href:!0});var aCe=s(v$);gDe=r(aCe,"from_pretrained()"),aCe.forEach(t),hDe=r(i9," class method."),i9.forEach(t),uDe=i(Kr),ry=n(Kr,"P",{});var d9=s(ry);pDe=r(d9,"This class cannot be instantiated directly using "),see=n(d9,"CODE",{});var nCe=s(see);_De=r(nCe,"__init__()"),nCe.forEach(t),bDe=r(d9," (throws an error)."),d9.forEach(t),FDe=i(Kr),Er=n(Kr,"DIV",{class:!0});var Zr=s(Er);T(ty.$$.fragment,Zr),vDe=i(Zr),lee=n(Zr,"P",{});var sCe=s(lee);TDe=r(sCe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),sCe.forEach(t),MDe=i(Zr),pi=n(Zr,"P",{});var dm=s(pi);EDe=r(dm,"The configuration class to instantiate is selected based on the "),iee=n(dm,"CODE",{});var lCe=s(iee);CDe=r(lCe,"model_type"),lCe.forEach(t),wDe=r(dm,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),dee=n(dm,"CODE",{});var iCe=s(dee);ADe=r(iCe,"pretrained_model_name_or_path"),iCe.forEach(t),yDe=r(dm,":"),dm.forEach(t),LDe=i(Zr),A=n(Zr,"UL",{});var y=s(A);bm=n(y,"LI",{});var xA=s(bm);cee=n(xA,"STRONG",{});var dCe=s(cee);xDe=r(dCe,"albert"),dCe.forEach(t),$De=r(xA," \u2014 "),T$=n(xA,"A",{href:!0});var cCe=s(T$);kDe=r(cCe,"AlbertConfig"),cCe.forEach(t),SDe=r(xA," (ALBERT model)"),xA.forEach(t),RDe=i(y),Fm=n(y,"LI",{});var $A=s(Fm);mee=n($A,"STRONG",{});var mCe=s(mee);BDe=r(mCe,"bart"),mCe.forEach(t),PDe=r($A," \u2014 "),M$=n($A,"A",{href:!0});var fCe=s(M$);IDe=r(fCe,"BartConfig"),fCe.forEach(t),qDe=r($A," (BART model)"),$A.forEach(t),NDe=i(y),vm=n(y,"LI",{});var kA=s(vm);fee=n(kA,"STRONG",{});var gCe=s(fee);jDe=r(gCe,"beit"),gCe.forEach(t),DDe=r(kA," \u2014 "),E$=n(kA,"A",{href:!0});var hCe=s(E$);GDe=r(hCe,"BeitConfig"),hCe.forEach(t),ODe=r(kA," (BEiT model)"),kA.forEach(t),VDe=i(y),Tm=n(y,"LI",{});var SA=s(Tm);gee=n(SA,"STRONG",{});var uCe=s(gee);XDe=r(uCe,"bert"),uCe.forEach(t),zDe=r(SA," \u2014 "),C$=n(SA,"A",{href:!0});var pCe=s(C$);QDe=r(pCe,"BertConfig"),pCe.forEach(t),WDe=r(SA," (BERT model)"),SA.forEach(t),HDe=i(y),Mm=n(y,"LI",{});var RA=s(Mm);hee=n(RA,"STRONG",{});var _Ce=s(hee);UDe=r(_Ce,"bert-generation"),_Ce.forEach(t),JDe=r(RA," \u2014 "),w$=n(RA,"A",{href:!0});var bCe=s(w$);YDe=r(bCe,"BertGenerationConfig"),bCe.forEach(t),KDe=r(RA," (Bert Generation model)"),RA.forEach(t),ZDe=i(y),Em=n(y,"LI",{});var BA=s(Em);uee=n(BA,"STRONG",{});var FCe=s(uee);eGe=r(FCe,"big_bird"),FCe.forEach(t),oGe=r(BA," \u2014 "),A$=n(BA,"A",{href:!0});var vCe=s(A$);rGe=r(vCe,"BigBirdConfig"),vCe.forEach(t),tGe=r(BA," (BigBird model)"),BA.forEach(t),aGe=i(y),Cm=n(y,"LI",{});var PA=s(Cm);pee=n(PA,"STRONG",{});var TCe=s(pee);nGe=r(TCe,"bigbird_pegasus"),TCe.forEach(t),sGe=r(PA," \u2014 "),y$=n(PA,"A",{href:!0});var MCe=s(y$);lGe=r(MCe,"BigBirdPegasusConfig"),MCe.forEach(t),iGe=r(PA," (BigBirdPegasus model)"),PA.forEach(t),dGe=i(y),wm=n(y,"LI",{});var IA=s(wm);_ee=n(IA,"STRONG",{});var ECe=s(_ee);cGe=r(ECe,"blenderbot"),ECe.forEach(t),mGe=r(IA," \u2014 "),L$=n(IA,"A",{href:!0});var CCe=s(L$);fGe=r(CCe,"BlenderbotConfig"),CCe.forEach(t),gGe=r(IA," (Blenderbot model)"),IA.forEach(t),hGe=i(y),Am=n(y,"LI",{});var qA=s(Am);bee=n(qA,"STRONG",{});var wCe=s(bee);uGe=r(wCe,"blenderbot-small"),wCe.forEach(t),pGe=r(qA," \u2014 "),x$=n(qA,"A",{href:!0});var ACe=s(x$);_Ge=r(ACe,"BlenderbotSmallConfig"),ACe.forEach(t),bGe=r(qA," (BlenderbotSmall model)"),qA.forEach(t),FGe=i(y),ym=n(y,"LI",{});var NA=s(ym);Fee=n(NA,"STRONG",{});var yCe=s(Fee);vGe=r(yCe,"camembert"),yCe.forEach(t),TGe=r(NA," \u2014 "),$$=n(NA,"A",{href:!0});var LCe=s($$);MGe=r(LCe,"CamembertConfig"),LCe.forEach(t),EGe=r(NA," (CamemBERT model)"),NA.forEach(t),CGe=i(y),Lm=n(y,"LI",{});var jA=s(Lm);vee=n(jA,"STRONG",{});var xCe=s(vee);wGe=r(xCe,"canine"),xCe.forEach(t),AGe=r(jA," \u2014 "),k$=n(jA,"A",{href:!0});var $Ce=s(k$);yGe=r($Ce,"CanineConfig"),$Ce.forEach(t),LGe=r(jA," (Canine model)"),jA.forEach(t),xGe=i(y),xm=n(y,"LI",{});var DA=s(xm);Tee=n(DA,"STRONG",{});var kCe=s(Tee);$Ge=r(kCe,"clip"),kCe.forEach(t),kGe=r(DA," \u2014 "),S$=n(DA,"A",{href:!0});var SCe=s(S$);SGe=r(SCe,"CLIPConfig"),SCe.forEach(t),RGe=r(DA," (CLIP model)"),DA.forEach(t),BGe=i(y),$m=n(y,"LI",{});var GA=s($m);Mee=n(GA,"STRONG",{});var RCe=s(Mee);PGe=r(RCe,"convbert"),RCe.forEach(t),IGe=r(GA," \u2014 "),R$=n(GA,"A",{href:!0});var BCe=s(R$);qGe=r(BCe,"ConvBertConfig"),BCe.forEach(t),NGe=r(GA," (ConvBERT model)"),GA.forEach(t),jGe=i(y),km=n(y,"LI",{});var OA=s(km);Eee=n(OA,"STRONG",{});var PCe=s(Eee);DGe=r(PCe,"convnext"),PCe.forEach(t),GGe=r(OA," \u2014 "),B$=n(OA,"A",{href:!0});var ICe=s(B$);OGe=r(ICe,"ConvNextConfig"),ICe.forEach(t),VGe=r(OA," (ConvNext model)"),OA.forEach(t),XGe=i(y),Sm=n(y,"LI",{});var VA=s(Sm);Cee=n(VA,"STRONG",{});var qCe=s(Cee);zGe=r(qCe,"ctrl"),qCe.forEach(t),QGe=r(VA," \u2014 "),P$=n(VA,"A",{href:!0});var NCe=s(P$);WGe=r(NCe,"CTRLConfig"),NCe.forEach(t),HGe=r(VA," (CTRL model)"),VA.forEach(t),UGe=i(y),Rm=n(y,"LI",{});var XA=s(Rm);wee=n(XA,"STRONG",{});var jCe=s(wee);JGe=r(jCe,"data2vec-audio"),jCe.forEach(t),YGe=r(XA," \u2014 "),I$=n(XA,"A",{href:!0});var DCe=s(I$);KGe=r(DCe,"Data2VecAudioConfig"),DCe.forEach(t),ZGe=r(XA," (Data2VecAudio model)"),XA.forEach(t),eOe=i(y),Bm=n(y,"LI",{});var zA=s(Bm);Aee=n(zA,"STRONG",{});var GCe=s(Aee);oOe=r(GCe,"data2vec-text"),GCe.forEach(t),rOe=r(zA," \u2014 "),q$=n(zA,"A",{href:!0});var OCe=s(q$);tOe=r(OCe,"Data2VecTextConfig"),OCe.forEach(t),aOe=r(zA," (Data2VecText model)"),zA.forEach(t),nOe=i(y),Pm=n(y,"LI",{});var QA=s(Pm);yee=n(QA,"STRONG",{});var VCe=s(yee);sOe=r(VCe,"data2vec-vision"),VCe.forEach(t),lOe=r(QA," \u2014 "),N$=n(QA,"A",{href:!0});var XCe=s(N$);iOe=r(XCe,"Data2VecVisionConfig"),XCe.forEach(t),dOe=r(QA," (Data2VecVision model)"),QA.forEach(t),cOe=i(y),Im=n(y,"LI",{});var WA=s(Im);Lee=n(WA,"STRONG",{});var zCe=s(Lee);mOe=r(zCe,"deberta"),zCe.forEach(t),fOe=r(WA," \u2014 "),j$=n(WA,"A",{href:!0});var QCe=s(j$);gOe=r(QCe,"DebertaConfig"),QCe.forEach(t),hOe=r(WA," (DeBERTa model)"),WA.forEach(t),uOe=i(y),qm=n(y,"LI",{});var HA=s(qm);xee=n(HA,"STRONG",{});var WCe=s(xee);pOe=r(WCe,"deberta-v2"),WCe.forEach(t),_Oe=r(HA," \u2014 "),D$=n(HA,"A",{href:!0});var HCe=s(D$);bOe=r(HCe,"DebertaV2Config"),HCe.forEach(t),FOe=r(HA," (DeBERTa-v2 model)"),HA.forEach(t),vOe=i(y),Nm=n(y,"LI",{});var UA=s(Nm);$ee=n(UA,"STRONG",{});var UCe=s($ee);TOe=r(UCe,"decision_transformer"),UCe.forEach(t),MOe=r(UA," \u2014 "),G$=n(UA,"A",{href:!0});var JCe=s(G$);EOe=r(JCe,"DecisionTransformerConfig"),JCe.forEach(t),COe=r(UA," (Decision Transformer model)"),UA.forEach(t),wOe=i(y),jm=n(y,"LI",{});var JA=s(jm);kee=n(JA,"STRONG",{});var YCe=s(kee);AOe=r(YCe,"deit"),YCe.forEach(t),yOe=r(JA," \u2014 "),O$=n(JA,"A",{href:!0});var KCe=s(O$);LOe=r(KCe,"DeiTConfig"),KCe.forEach(t),xOe=r(JA," (DeiT model)"),JA.forEach(t),$Oe=i(y),Dm=n(y,"LI",{});var YA=s(Dm);See=n(YA,"STRONG",{});var ZCe=s(See);kOe=r(ZCe,"detr"),ZCe.forEach(t),SOe=r(YA," \u2014 "),V$=n(YA,"A",{href:!0});var qNr=s(V$);ROe=r(qNr,"DetrConfig"),qNr.forEach(t),BOe=r(YA," (DETR model)"),YA.forEach(t),POe=i(y),Gm=n(y,"LI",{});var e3e=s(Gm);Ree=n(e3e,"STRONG",{});var NNr=s(Ree);IOe=r(NNr,"distilbert"),NNr.forEach(t),qOe=r(e3e," \u2014 "),X$=n(e3e,"A",{href:!0});var jNr=s(X$);NOe=r(jNr,"DistilBertConfig"),jNr.forEach(t),jOe=r(e3e," (DistilBERT model)"),e3e.forEach(t),DOe=i(y),Om=n(y,"LI",{});var o3e=s(Om);Bee=n(o3e,"STRONG",{});var DNr=s(Bee);GOe=r(DNr,"dpr"),DNr.forEach(t),OOe=r(o3e," \u2014 "),z$=n(o3e,"A",{href:!0});var GNr=s(z$);VOe=r(GNr,"DPRConfig"),GNr.forEach(t),XOe=r(o3e," (DPR model)"),o3e.forEach(t),zOe=i(y),Vm=n(y,"LI",{});var r3e=s(Vm);Pee=n(r3e,"STRONG",{});var ONr=s(Pee);QOe=r(ONr,"dpt"),ONr.forEach(t),WOe=r(r3e," \u2014 "),Q$=n(r3e,"A",{href:!0});var VNr=s(Q$);HOe=r(VNr,"DPTConfig"),VNr.forEach(t),UOe=r(r3e," (DPT model)"),r3e.forEach(t),JOe=i(y),Xm=n(y,"LI",{});var t3e=s(Xm);Iee=n(t3e,"STRONG",{});var XNr=s(Iee);YOe=r(XNr,"electra"),XNr.forEach(t),KOe=r(t3e," \u2014 "),W$=n(t3e,"A",{href:!0});var zNr=s(W$);ZOe=r(zNr,"ElectraConfig"),zNr.forEach(t),eVe=r(t3e," (ELECTRA model)"),t3e.forEach(t),oVe=i(y),zm=n(y,"LI",{});var a3e=s(zm);qee=n(a3e,"STRONG",{});var QNr=s(qee);rVe=r(QNr,"encoder-decoder"),QNr.forEach(t),tVe=r(a3e," \u2014 "),H$=n(a3e,"A",{href:!0});var WNr=s(H$);aVe=r(WNr,"EncoderDecoderConfig"),WNr.forEach(t),nVe=r(a3e," (Encoder decoder model)"),a3e.forEach(t),sVe=i(y),Qm=n(y,"LI",{});var n3e=s(Qm);Nee=n(n3e,"STRONG",{});var HNr=s(Nee);lVe=r(HNr,"flaubert"),HNr.forEach(t),iVe=r(n3e," \u2014 "),U$=n(n3e,"A",{href:!0});var UNr=s(U$);dVe=r(UNr,"FlaubertConfig"),UNr.forEach(t),cVe=r(n3e," (FlauBERT model)"),n3e.forEach(t),mVe=i(y),Wm=n(y,"LI",{});var s3e=s(Wm);jee=n(s3e,"STRONG",{});var JNr=s(jee);fVe=r(JNr,"flava"),JNr.forEach(t),gVe=r(s3e," \u2014 "),J$=n(s3e,"A",{href:!0});var YNr=s(J$);hVe=r(YNr,"FlavaConfig"),YNr.forEach(t),uVe=r(s3e," (Flava model)"),s3e.forEach(t),pVe=i(y),Hm=n(y,"LI",{});var l3e=s(Hm);Dee=n(l3e,"STRONG",{});var KNr=s(Dee);_Ve=r(KNr,"fnet"),KNr.forEach(t),bVe=r(l3e," \u2014 "),Y$=n(l3e,"A",{href:!0});var ZNr=s(Y$);FVe=r(ZNr,"FNetConfig"),ZNr.forEach(t),vVe=r(l3e," (FNet model)"),l3e.forEach(t),TVe=i(y),Um=n(y,"LI",{});var i3e=s(Um);Gee=n(i3e,"STRONG",{});var ejr=s(Gee);MVe=r(ejr,"fsmt"),ejr.forEach(t),EVe=r(i3e," \u2014 "),K$=n(i3e,"A",{href:!0});var ojr=s(K$);CVe=r(ojr,"FSMTConfig"),ojr.forEach(t),wVe=r(i3e," (FairSeq Machine-Translation model)"),i3e.forEach(t),AVe=i(y),Jm=n(y,"LI",{});var d3e=s(Jm);Oee=n(d3e,"STRONG",{});var rjr=s(Oee);yVe=r(rjr,"funnel"),rjr.forEach(t),LVe=r(d3e," \u2014 "),Z$=n(d3e,"A",{href:!0});var tjr=s(Z$);xVe=r(tjr,"FunnelConfig"),tjr.forEach(t),$Ve=r(d3e," (Funnel Transformer model)"),d3e.forEach(t),kVe=i(y),Ym=n(y,"LI",{});var c3e=s(Ym);Vee=n(c3e,"STRONG",{});var ajr=s(Vee);SVe=r(ajr,"glpn"),ajr.forEach(t),RVe=r(c3e," \u2014 "),ek=n(c3e,"A",{href:!0});var njr=s(ek);BVe=r(njr,"GLPNConfig"),njr.forEach(t),PVe=r(c3e," (GLPN model)"),c3e.forEach(t),IVe=i(y),Km=n(y,"LI",{});var m3e=s(Km);Xee=n(m3e,"STRONG",{});var sjr=s(Xee);qVe=r(sjr,"gpt2"),sjr.forEach(t),NVe=r(m3e," \u2014 "),ok=n(m3e,"A",{href:!0});var ljr=s(ok);jVe=r(ljr,"GPT2Config"),ljr.forEach(t),DVe=r(m3e," (OpenAI GPT-2 model)"),m3e.forEach(t),GVe=i(y),Zm=n(y,"LI",{});var f3e=s(Zm);zee=n(f3e,"STRONG",{});var ijr=s(zee);OVe=r(ijr,"gpt_neo"),ijr.forEach(t),VVe=r(f3e," \u2014 "),rk=n(f3e,"A",{href:!0});var djr=s(rk);XVe=r(djr,"GPTNeoConfig"),djr.forEach(t),zVe=r(f3e," (GPT Neo model)"),f3e.forEach(t),QVe=i(y),ef=n(y,"LI",{});var g3e=s(ef);Qee=n(g3e,"STRONG",{});var cjr=s(Qee);WVe=r(cjr,"gptj"),cjr.forEach(t),HVe=r(g3e," \u2014 "),tk=n(g3e,"A",{href:!0});var mjr=s(tk);UVe=r(mjr,"GPTJConfig"),mjr.forEach(t),JVe=r(g3e," (GPT-J model)"),g3e.forEach(t),YVe=i(y),of=n(y,"LI",{});var h3e=s(of);Wee=n(h3e,"STRONG",{});var fjr=s(Wee);KVe=r(fjr,"hubert"),fjr.forEach(t),ZVe=r(h3e," \u2014 "),ak=n(h3e,"A",{href:!0});var gjr=s(ak);eXe=r(gjr,"HubertConfig"),gjr.forEach(t),oXe=r(h3e," (Hubert model)"),h3e.forEach(t),rXe=i(y),rf=n(y,"LI",{});var u3e=s(rf);Hee=n(u3e,"STRONG",{});var hjr=s(Hee);tXe=r(hjr,"ibert"),hjr.forEach(t),aXe=r(u3e," \u2014 "),nk=n(u3e,"A",{href:!0});var ujr=s(nk);nXe=r(ujr,"IBertConfig"),ujr.forEach(t),sXe=r(u3e," (I-BERT model)"),u3e.forEach(t),lXe=i(y),tf=n(y,"LI",{});var p3e=s(tf);Uee=n(p3e,"STRONG",{});var pjr=s(Uee);iXe=r(pjr,"imagegpt"),pjr.forEach(t),dXe=r(p3e," \u2014 "),sk=n(p3e,"A",{href:!0});var _jr=s(sk);cXe=r(_jr,"ImageGPTConfig"),_jr.forEach(t),mXe=r(p3e," (ImageGPT model)"),p3e.forEach(t),fXe=i(y),af=n(y,"LI",{});var _3e=s(af);Jee=n(_3e,"STRONG",{});var bjr=s(Jee);gXe=r(bjr,"layoutlm"),bjr.forEach(t),hXe=r(_3e," \u2014 "),lk=n(_3e,"A",{href:!0});var Fjr=s(lk);uXe=r(Fjr,"LayoutLMConfig"),Fjr.forEach(t),pXe=r(_3e," (LayoutLM model)"),_3e.forEach(t),_Xe=i(y),nf=n(y,"LI",{});var b3e=s(nf);Yee=n(b3e,"STRONG",{});var vjr=s(Yee);bXe=r(vjr,"layoutlmv2"),vjr.forEach(t),FXe=r(b3e," \u2014 "),ik=n(b3e,"A",{href:!0});var Tjr=s(ik);vXe=r(Tjr,"LayoutLMv2Config"),Tjr.forEach(t),TXe=r(b3e," (LayoutLMv2 model)"),b3e.forEach(t),MXe=i(y),sf=n(y,"LI",{});var F3e=s(sf);Kee=n(F3e,"STRONG",{});var Mjr=s(Kee);EXe=r(Mjr,"led"),Mjr.forEach(t),CXe=r(F3e," \u2014 "),dk=n(F3e,"A",{href:!0});var Ejr=s(dk);wXe=r(Ejr,"LEDConfig"),Ejr.forEach(t),AXe=r(F3e," (LED model)"),F3e.forEach(t),yXe=i(y),lf=n(y,"LI",{});var v3e=s(lf);Zee=n(v3e,"STRONG",{});var Cjr=s(Zee);LXe=r(Cjr,"longformer"),Cjr.forEach(t),xXe=r(v3e," \u2014 "),ck=n(v3e,"A",{href:!0});var wjr=s(ck);$Xe=r(wjr,"LongformerConfig"),wjr.forEach(t),kXe=r(v3e," (Longformer model)"),v3e.forEach(t),SXe=i(y),df=n(y,"LI",{});var T3e=s(df);eoe=n(T3e,"STRONG",{});var Ajr=s(eoe);RXe=r(Ajr,"luke"),Ajr.forEach(t),BXe=r(T3e," \u2014 "),mk=n(T3e,"A",{href:!0});var yjr=s(mk);PXe=r(yjr,"LukeConfig"),yjr.forEach(t),IXe=r(T3e," (LUKE model)"),T3e.forEach(t),qXe=i(y),cf=n(y,"LI",{});var M3e=s(cf);ooe=n(M3e,"STRONG",{});var Ljr=s(ooe);NXe=r(Ljr,"lxmert"),Ljr.forEach(t),jXe=r(M3e," \u2014 "),fk=n(M3e,"A",{href:!0});var xjr=s(fk);DXe=r(xjr,"LxmertConfig"),xjr.forEach(t),GXe=r(M3e," (LXMERT model)"),M3e.forEach(t),OXe=i(y),mf=n(y,"LI",{});var E3e=s(mf);roe=n(E3e,"STRONG",{});var $jr=s(roe);VXe=r($jr,"m2m_100"),$jr.forEach(t),XXe=r(E3e," \u2014 "),gk=n(E3e,"A",{href:!0});var kjr=s(gk);zXe=r(kjr,"M2M100Config"),kjr.forEach(t),QXe=r(E3e," (M2M100 model)"),E3e.forEach(t),WXe=i(y),ff=n(y,"LI",{});var C3e=s(ff);toe=n(C3e,"STRONG",{});var Sjr=s(toe);HXe=r(Sjr,"marian"),Sjr.forEach(t),UXe=r(C3e," \u2014 "),hk=n(C3e,"A",{href:!0});var Rjr=s(hk);JXe=r(Rjr,"MarianConfig"),Rjr.forEach(t),YXe=r(C3e," (Marian model)"),C3e.forEach(t),KXe=i(y),gf=n(y,"LI",{});var w3e=s(gf);aoe=n(w3e,"STRONG",{});var Bjr=s(aoe);ZXe=r(Bjr,"maskformer"),Bjr.forEach(t),eze=r(w3e," \u2014 "),uk=n(w3e,"A",{href:!0});var Pjr=s(uk);oze=r(Pjr,"MaskFormerConfig"),Pjr.forEach(t),rze=r(w3e," (MaskFormer model)"),w3e.forEach(t),tze=i(y),hf=n(y,"LI",{});var A3e=s(hf);noe=n(A3e,"STRONG",{});var Ijr=s(noe);aze=r(Ijr,"mbart"),Ijr.forEach(t),nze=r(A3e," \u2014 "),pk=n(A3e,"A",{href:!0});var qjr=s(pk);sze=r(qjr,"MBartConfig"),qjr.forEach(t),lze=r(A3e," (mBART model)"),A3e.forEach(t),ize=i(y),uf=n(y,"LI",{});var y3e=s(uf);soe=n(y3e,"STRONG",{});var Njr=s(soe);dze=r(Njr,"megatron-bert"),Njr.forEach(t),cze=r(y3e," \u2014 "),_k=n(y3e,"A",{href:!0});var jjr=s(_k);mze=r(jjr,"MegatronBertConfig"),jjr.forEach(t),fze=r(y3e," (MegatronBert model)"),y3e.forEach(t),gze=i(y),pf=n(y,"LI",{});var L3e=s(pf);loe=n(L3e,"STRONG",{});var Djr=s(loe);hze=r(Djr,"mobilebert"),Djr.forEach(t),uze=r(L3e," \u2014 "),bk=n(L3e,"A",{href:!0});var Gjr=s(bk);pze=r(Gjr,"MobileBertConfig"),Gjr.forEach(t),_ze=r(L3e," (MobileBERT model)"),L3e.forEach(t),bze=i(y),_f=n(y,"LI",{});var x3e=s(_f);ioe=n(x3e,"STRONG",{});var Ojr=s(ioe);Fze=r(Ojr,"mpnet"),Ojr.forEach(t),vze=r(x3e," \u2014 "),Fk=n(x3e,"A",{href:!0});var Vjr=s(Fk);Tze=r(Vjr,"MPNetConfig"),Vjr.forEach(t),Mze=r(x3e," (MPNet model)"),x3e.forEach(t),Eze=i(y),bf=n(y,"LI",{});var $3e=s(bf);doe=n($3e,"STRONG",{});var Xjr=s(doe);Cze=r(Xjr,"mt5"),Xjr.forEach(t),wze=r($3e," \u2014 "),vk=n($3e,"A",{href:!0});var zjr=s(vk);Aze=r(zjr,"MT5Config"),zjr.forEach(t),yze=r($3e," (mT5 model)"),$3e.forEach(t),Lze=i(y),Ff=n(y,"LI",{});var k3e=s(Ff);coe=n(k3e,"STRONG",{});var Qjr=s(coe);xze=r(Qjr,"nystromformer"),Qjr.forEach(t),$ze=r(k3e," \u2014 "),Tk=n(k3e,"A",{href:!0});var Wjr=s(Tk);kze=r(Wjr,"NystromformerConfig"),Wjr.forEach(t),Sze=r(k3e," (Nystromformer model)"),k3e.forEach(t),Rze=i(y),vf=n(y,"LI",{});var S3e=s(vf);moe=n(S3e,"STRONG",{});var Hjr=s(moe);Bze=r(Hjr,"openai-gpt"),Hjr.forEach(t),Pze=r(S3e," \u2014 "),Mk=n(S3e,"A",{href:!0});var Ujr=s(Mk);Ize=r(Ujr,"OpenAIGPTConfig"),Ujr.forEach(t),qze=r(S3e," (OpenAI GPT model)"),S3e.forEach(t),Nze=i(y),Tf=n(y,"LI",{});var R3e=s(Tf);foe=n(R3e,"STRONG",{});var Jjr=s(foe);jze=r(Jjr,"opt"),Jjr.forEach(t),Dze=r(R3e," \u2014 "),Ek=n(R3e,"A",{href:!0});var Yjr=s(Ek);Gze=r(Yjr,"OPTConfig"),Yjr.forEach(t),Oze=r(R3e," (OPT model)"),R3e.forEach(t),Vze=i(y),Mf=n(y,"LI",{});var B3e=s(Mf);goe=n(B3e,"STRONG",{});var Kjr=s(goe);Xze=r(Kjr,"pegasus"),Kjr.forEach(t),zze=r(B3e," \u2014 "),Ck=n(B3e,"A",{href:!0});var Zjr=s(Ck);Qze=r(Zjr,"PegasusConfig"),Zjr.forEach(t),Wze=r(B3e," (Pegasus model)"),B3e.forEach(t),Hze=i(y),Ef=n(y,"LI",{});var P3e=s(Ef);hoe=n(P3e,"STRONG",{});var eDr=s(hoe);Uze=r(eDr,"perceiver"),eDr.forEach(t),Jze=r(P3e," \u2014 "),wk=n(P3e,"A",{href:!0});var oDr=s(wk);Yze=r(oDr,"PerceiverConfig"),oDr.forEach(t),Kze=r(P3e," (Perceiver model)"),P3e.forEach(t),Zze=i(y),Cf=n(y,"LI",{});var I3e=s(Cf);uoe=n(I3e,"STRONG",{});var rDr=s(uoe);eQe=r(rDr,"plbart"),rDr.forEach(t),oQe=r(I3e," \u2014 "),Ak=n(I3e,"A",{href:!0});var tDr=s(Ak);rQe=r(tDr,"PLBartConfig"),tDr.forEach(t),tQe=r(I3e," (PLBart model)"),I3e.forEach(t),aQe=i(y),wf=n(y,"LI",{});var q3e=s(wf);poe=n(q3e,"STRONG",{});var aDr=s(poe);nQe=r(aDr,"poolformer"),aDr.forEach(t),sQe=r(q3e," \u2014 "),yk=n(q3e,"A",{href:!0});var nDr=s(yk);lQe=r(nDr,"PoolFormerConfig"),nDr.forEach(t),iQe=r(q3e," (PoolFormer model)"),q3e.forEach(t),dQe=i(y),Af=n(y,"LI",{});var N3e=s(Af);_oe=n(N3e,"STRONG",{});var sDr=s(_oe);cQe=r(sDr,"prophetnet"),sDr.forEach(t),mQe=r(N3e," \u2014 "),Lk=n(N3e,"A",{href:!0});var lDr=s(Lk);fQe=r(lDr,"ProphetNetConfig"),lDr.forEach(t),gQe=r(N3e," (ProphetNet model)"),N3e.forEach(t),hQe=i(y),yf=n(y,"LI",{});var j3e=s(yf);boe=n(j3e,"STRONG",{});var iDr=s(boe);uQe=r(iDr,"qdqbert"),iDr.forEach(t),pQe=r(j3e," \u2014 "),xk=n(j3e,"A",{href:!0});var dDr=s(xk);_Qe=r(dDr,"QDQBertConfig"),dDr.forEach(t),bQe=r(j3e," (QDQBert model)"),j3e.forEach(t),FQe=i(y),Lf=n(y,"LI",{});var D3e=s(Lf);Foe=n(D3e,"STRONG",{});var cDr=s(Foe);vQe=r(cDr,"rag"),cDr.forEach(t),TQe=r(D3e," \u2014 "),$k=n(D3e,"A",{href:!0});var mDr=s($k);MQe=r(mDr,"RagConfig"),mDr.forEach(t),EQe=r(D3e," (RAG model)"),D3e.forEach(t),CQe=i(y),xf=n(y,"LI",{});var G3e=s(xf);voe=n(G3e,"STRONG",{});var fDr=s(voe);wQe=r(fDr,"realm"),fDr.forEach(t),AQe=r(G3e," \u2014 "),kk=n(G3e,"A",{href:!0});var gDr=s(kk);yQe=r(gDr,"RealmConfig"),gDr.forEach(t),LQe=r(G3e," (Realm model)"),G3e.forEach(t),xQe=i(y),$f=n(y,"LI",{});var O3e=s($f);Toe=n(O3e,"STRONG",{});var hDr=s(Toe);$Qe=r(hDr,"reformer"),hDr.forEach(t),kQe=r(O3e," \u2014 "),Sk=n(O3e,"A",{href:!0});var uDr=s(Sk);SQe=r(uDr,"ReformerConfig"),uDr.forEach(t),RQe=r(O3e," (Reformer model)"),O3e.forEach(t),BQe=i(y),kf=n(y,"LI",{});var V3e=s(kf);Moe=n(V3e,"STRONG",{});var pDr=s(Moe);PQe=r(pDr,"regnet"),pDr.forEach(t),IQe=r(V3e," \u2014 "),Rk=n(V3e,"A",{href:!0});var _Dr=s(Rk);qQe=r(_Dr,"RegNetConfig"),_Dr.forEach(t),NQe=r(V3e," (RegNet model)"),V3e.forEach(t),jQe=i(y),Sf=n(y,"LI",{});var X3e=s(Sf);Eoe=n(X3e,"STRONG",{});var bDr=s(Eoe);DQe=r(bDr,"rembert"),bDr.forEach(t),GQe=r(X3e," \u2014 "),Bk=n(X3e,"A",{href:!0});var FDr=s(Bk);OQe=r(FDr,"RemBertConfig"),FDr.forEach(t),VQe=r(X3e," (RemBERT model)"),X3e.forEach(t),XQe=i(y),Rf=n(y,"LI",{});var z3e=s(Rf);Coe=n(z3e,"STRONG",{});var vDr=s(Coe);zQe=r(vDr,"resnet"),vDr.forEach(t),QQe=r(z3e," \u2014 "),Pk=n(z3e,"A",{href:!0});var TDr=s(Pk);WQe=r(TDr,"ResNetConfig"),TDr.forEach(t),HQe=r(z3e," (ResNet model)"),z3e.forEach(t),UQe=i(y),Bf=n(y,"LI",{});var Q3e=s(Bf);woe=n(Q3e,"STRONG",{});var MDr=s(woe);JQe=r(MDr,"retribert"),MDr.forEach(t),YQe=r(Q3e," \u2014 "),Ik=n(Q3e,"A",{href:!0});var EDr=s(Ik);KQe=r(EDr,"RetriBertConfig"),EDr.forEach(t),ZQe=r(Q3e," (RetriBERT model)"),Q3e.forEach(t),eWe=i(y),Pf=n(y,"LI",{});var W3e=s(Pf);Aoe=n(W3e,"STRONG",{});var CDr=s(Aoe);oWe=r(CDr,"roberta"),CDr.forEach(t),rWe=r(W3e," \u2014 "),qk=n(W3e,"A",{href:!0});var wDr=s(qk);tWe=r(wDr,"RobertaConfig"),wDr.forEach(t),aWe=r(W3e," (RoBERTa model)"),W3e.forEach(t),nWe=i(y),If=n(y,"LI",{});var H3e=s(If);yoe=n(H3e,"STRONG",{});var ADr=s(yoe);sWe=r(ADr,"roformer"),ADr.forEach(t),lWe=r(H3e," \u2014 "),Nk=n(H3e,"A",{href:!0});var yDr=s(Nk);iWe=r(yDr,"RoFormerConfig"),yDr.forEach(t),dWe=r(H3e," (RoFormer model)"),H3e.forEach(t),cWe=i(y),qf=n(y,"LI",{});var U3e=s(qf);Loe=n(U3e,"STRONG",{});var LDr=s(Loe);mWe=r(LDr,"segformer"),LDr.forEach(t),fWe=r(U3e," \u2014 "),jk=n(U3e,"A",{href:!0});var xDr=s(jk);gWe=r(xDr,"SegformerConfig"),xDr.forEach(t),hWe=r(U3e," (SegFormer model)"),U3e.forEach(t),uWe=i(y),Nf=n(y,"LI",{});var J3e=s(Nf);xoe=n(J3e,"STRONG",{});var $Dr=s(xoe);pWe=r($Dr,"sew"),$Dr.forEach(t),_We=r(J3e," \u2014 "),Dk=n(J3e,"A",{href:!0});var kDr=s(Dk);bWe=r(kDr,"SEWConfig"),kDr.forEach(t),FWe=r(J3e," (SEW model)"),J3e.forEach(t),vWe=i(y),jf=n(y,"LI",{});var Y3e=s(jf);$oe=n(Y3e,"STRONG",{});var SDr=s($oe);TWe=r(SDr,"sew-d"),SDr.forEach(t),MWe=r(Y3e," \u2014 "),Gk=n(Y3e,"A",{href:!0});var RDr=s(Gk);EWe=r(RDr,"SEWDConfig"),RDr.forEach(t),CWe=r(Y3e," (SEW-D model)"),Y3e.forEach(t),wWe=i(y),Df=n(y,"LI",{});var K3e=s(Df);koe=n(K3e,"STRONG",{});var BDr=s(koe);AWe=r(BDr,"speech-encoder-decoder"),BDr.forEach(t),yWe=r(K3e," \u2014 "),Ok=n(K3e,"A",{href:!0});var PDr=s(Ok);LWe=r(PDr,"SpeechEncoderDecoderConfig"),PDr.forEach(t),xWe=r(K3e," (Speech Encoder decoder model)"),K3e.forEach(t),$We=i(y),Gf=n(y,"LI",{});var Z3e=s(Gf);Soe=n(Z3e,"STRONG",{});var IDr=s(Soe);kWe=r(IDr,"speech_to_text"),IDr.forEach(t),SWe=r(Z3e," \u2014 "),Vk=n(Z3e,"A",{href:!0});var qDr=s(Vk);RWe=r(qDr,"Speech2TextConfig"),qDr.forEach(t),BWe=r(Z3e," (Speech2Text model)"),Z3e.forEach(t),PWe=i(y),Of=n(y,"LI",{});var ewe=s(Of);Roe=n(ewe,"STRONG",{});var NDr=s(Roe);IWe=r(NDr,"speech_to_text_2"),NDr.forEach(t),qWe=r(ewe," \u2014 "),Xk=n(ewe,"A",{href:!0});var jDr=s(Xk);NWe=r(jDr,"Speech2Text2Config"),jDr.forEach(t),jWe=r(ewe," (Speech2Text2 model)"),ewe.forEach(t),DWe=i(y),Vf=n(y,"LI",{});var owe=s(Vf);Boe=n(owe,"STRONG",{});var DDr=s(Boe);GWe=r(DDr,"splinter"),DDr.forEach(t),OWe=r(owe," \u2014 "),zk=n(owe,"A",{href:!0});var GDr=s(zk);VWe=r(GDr,"SplinterConfig"),GDr.forEach(t),XWe=r(owe," (Splinter model)"),owe.forEach(t),zWe=i(y),Xf=n(y,"LI",{});var rwe=s(Xf);Poe=n(rwe,"STRONG",{});var ODr=s(Poe);QWe=r(ODr,"squeezebert"),ODr.forEach(t),WWe=r(rwe," \u2014 "),Qk=n(rwe,"A",{href:!0});var VDr=s(Qk);HWe=r(VDr,"SqueezeBertConfig"),VDr.forEach(t),UWe=r(rwe," (SqueezeBERT model)"),rwe.forEach(t),JWe=i(y),zf=n(y,"LI",{});var twe=s(zf);Ioe=n(twe,"STRONG",{});var XDr=s(Ioe);YWe=r(XDr,"swin"),XDr.forEach(t),KWe=r(twe," \u2014 "),Wk=n(twe,"A",{href:!0});var zDr=s(Wk);ZWe=r(zDr,"SwinConfig"),zDr.forEach(t),eHe=r(twe," (Swin model)"),twe.forEach(t),oHe=i(y),Qf=n(y,"LI",{});var awe=s(Qf);qoe=n(awe,"STRONG",{});var QDr=s(qoe);rHe=r(QDr,"t5"),QDr.forEach(t),tHe=r(awe," \u2014 "),Hk=n(awe,"A",{href:!0});var WDr=s(Hk);aHe=r(WDr,"T5Config"),WDr.forEach(t),nHe=r(awe," (T5 model)"),awe.forEach(t),sHe=i(y),Wf=n(y,"LI",{});var nwe=s(Wf);Noe=n(nwe,"STRONG",{});var HDr=s(Noe);lHe=r(HDr,"tapas"),HDr.forEach(t),iHe=r(nwe," \u2014 "),Uk=n(nwe,"A",{href:!0});var UDr=s(Uk);dHe=r(UDr,"TapasConfig"),UDr.forEach(t),cHe=r(nwe," (TAPAS model)"),nwe.forEach(t),mHe=i(y),Hf=n(y,"LI",{});var swe=s(Hf);joe=n(swe,"STRONG",{});var JDr=s(joe);fHe=r(JDr,"tapex"),JDr.forEach(t),gHe=r(swe," \u2014 "),Jk=n(swe,"A",{href:!0});var YDr=s(Jk);hHe=r(YDr,"BartConfig"),YDr.forEach(t),uHe=r(swe," (TAPEX model)"),swe.forEach(t),pHe=i(y),Uf=n(y,"LI",{});var lwe=s(Uf);Doe=n(lwe,"STRONG",{});var KDr=s(Doe);_He=r(KDr,"transfo-xl"),KDr.forEach(t),bHe=r(lwe," \u2014 "),Yk=n(lwe,"A",{href:!0});var ZDr=s(Yk);FHe=r(ZDr,"TransfoXLConfig"),ZDr.forEach(t),vHe=r(lwe," (Transformer-XL model)"),lwe.forEach(t),THe=i(y),Jf=n(y,"LI",{});var iwe=s(Jf);Goe=n(iwe,"STRONG",{});var eGr=s(Goe);MHe=r(eGr,"trocr"),eGr.forEach(t),EHe=r(iwe," \u2014 "),Kk=n(iwe,"A",{href:!0});var oGr=s(Kk);CHe=r(oGr,"TrOCRConfig"),oGr.forEach(t),wHe=r(iwe," (TrOCR model)"),iwe.forEach(t),AHe=i(y),Yf=n(y,"LI",{});var dwe=s(Yf);Ooe=n(dwe,"STRONG",{});var rGr=s(Ooe);yHe=r(rGr,"unispeech"),rGr.forEach(t),LHe=r(dwe," \u2014 "),Zk=n(dwe,"A",{href:!0});var tGr=s(Zk);xHe=r(tGr,"UniSpeechConfig"),tGr.forEach(t),$He=r(dwe," (UniSpeech model)"),dwe.forEach(t),kHe=i(y),Kf=n(y,"LI",{});var cwe=s(Kf);Voe=n(cwe,"STRONG",{});var aGr=s(Voe);SHe=r(aGr,"unispeech-sat"),aGr.forEach(t),RHe=r(cwe," \u2014 "),eS=n(cwe,"A",{href:!0});var nGr=s(eS);BHe=r(nGr,"UniSpeechSatConfig"),nGr.forEach(t),PHe=r(cwe," (UniSpeechSat model)"),cwe.forEach(t),IHe=i(y),Zf=n(y,"LI",{});var mwe=s(Zf);Xoe=n(mwe,"STRONG",{});var sGr=s(Xoe);qHe=r(sGr,"van"),sGr.forEach(t),NHe=r(mwe," \u2014 "),oS=n(mwe,"A",{href:!0});var lGr=s(oS);jHe=r(lGr,"VanConfig"),lGr.forEach(t),DHe=r(mwe," (VAN model)"),mwe.forEach(t),GHe=i(y),eg=n(y,"LI",{});var fwe=s(eg);zoe=n(fwe,"STRONG",{});var iGr=s(zoe);OHe=r(iGr,"vilt"),iGr.forEach(t),VHe=r(fwe," \u2014 "),rS=n(fwe,"A",{href:!0});var dGr=s(rS);XHe=r(dGr,"ViltConfig"),dGr.forEach(t),zHe=r(fwe," (ViLT model)"),fwe.forEach(t),QHe=i(y),og=n(y,"LI",{});var gwe=s(og);Qoe=n(gwe,"STRONG",{});var cGr=s(Qoe);WHe=r(cGr,"vision-encoder-decoder"),cGr.forEach(t),HHe=r(gwe," \u2014 "),tS=n(gwe,"A",{href:!0});var mGr=s(tS);UHe=r(mGr,"VisionEncoderDecoderConfig"),mGr.forEach(t),JHe=r(gwe," (Vision Encoder decoder model)"),gwe.forEach(t),YHe=i(y),rg=n(y,"LI",{});var hwe=s(rg);Woe=n(hwe,"STRONG",{});var fGr=s(Woe);KHe=r(fGr,"vision-text-dual-encoder"),fGr.forEach(t),ZHe=r(hwe," \u2014 "),aS=n(hwe,"A",{href:!0});var gGr=s(aS);eUe=r(gGr,"VisionTextDualEncoderConfig"),gGr.forEach(t),oUe=r(hwe," (VisionTextDualEncoder model)"),hwe.forEach(t),rUe=i(y),tg=n(y,"LI",{});var uwe=s(tg);Hoe=n(uwe,"STRONG",{});var hGr=s(Hoe);tUe=r(hGr,"visual_bert"),hGr.forEach(t),aUe=r(uwe," \u2014 "),nS=n(uwe,"A",{href:!0});var uGr=s(nS);nUe=r(uGr,"VisualBertConfig"),uGr.forEach(t),sUe=r(uwe," (VisualBert model)"),uwe.forEach(t),lUe=i(y),ag=n(y,"LI",{});var pwe=s(ag);Uoe=n(pwe,"STRONG",{});var pGr=s(Uoe);iUe=r(pGr,"vit"),pGr.forEach(t),dUe=r(pwe," \u2014 "),sS=n(pwe,"A",{href:!0});var _Gr=s(sS);cUe=r(_Gr,"ViTConfig"),_Gr.forEach(t),mUe=r(pwe," (ViT model)"),pwe.forEach(t),fUe=i(y),ng=n(y,"LI",{});var _we=s(ng);Joe=n(_we,"STRONG",{});var bGr=s(Joe);gUe=r(bGr,"vit_mae"),bGr.forEach(t),hUe=r(_we," \u2014 "),lS=n(_we,"A",{href:!0});var FGr=s(lS);uUe=r(FGr,"ViTMAEConfig"),FGr.forEach(t),pUe=r(_we," (ViTMAE model)"),_we.forEach(t),_Ue=i(y),sg=n(y,"LI",{});var bwe=s(sg);Yoe=n(bwe,"STRONG",{});var vGr=s(Yoe);bUe=r(vGr,"wav2vec2"),vGr.forEach(t),FUe=r(bwe," \u2014 "),iS=n(bwe,"A",{href:!0});var TGr=s(iS);vUe=r(TGr,"Wav2Vec2Config"),TGr.forEach(t),TUe=r(bwe," (Wav2Vec2 model)"),bwe.forEach(t),MUe=i(y),lg=n(y,"LI",{});var Fwe=s(lg);Koe=n(Fwe,"STRONG",{});var MGr=s(Koe);EUe=r(MGr,"wavlm"),MGr.forEach(t),CUe=r(Fwe," \u2014 "),dS=n(Fwe,"A",{href:!0});var EGr=s(dS);wUe=r(EGr,"WavLMConfig"),EGr.forEach(t),AUe=r(Fwe," (WavLM model)"),Fwe.forEach(t),yUe=i(y),ig=n(y,"LI",{});var vwe=s(ig);Zoe=n(vwe,"STRONG",{});var CGr=s(Zoe);LUe=r(CGr,"xglm"),CGr.forEach(t),xUe=r(vwe," \u2014 "),cS=n(vwe,"A",{href:!0});var wGr=s(cS);$Ue=r(wGr,"XGLMConfig"),wGr.forEach(t),kUe=r(vwe," (XGLM model)"),vwe.forEach(t),SUe=i(y),dg=n(y,"LI",{});var Twe=s(dg);ere=n(Twe,"STRONG",{});var AGr=s(ere);RUe=r(AGr,"xlm"),AGr.forEach(t),BUe=r(Twe," \u2014 "),mS=n(Twe,"A",{href:!0});var yGr=s(mS);PUe=r(yGr,"XLMConfig"),yGr.forEach(t),IUe=r(Twe," (XLM model)"),Twe.forEach(t),qUe=i(y),cg=n(y,"LI",{});var Mwe=s(cg);ore=n(Mwe,"STRONG",{});var LGr=s(ore);NUe=r(LGr,"xlm-prophetnet"),LGr.forEach(t),jUe=r(Mwe," \u2014 "),fS=n(Mwe,"A",{href:!0});var xGr=s(fS);DUe=r(xGr,"XLMProphetNetConfig"),xGr.forEach(t),GUe=r(Mwe," (XLMProphetNet model)"),Mwe.forEach(t),OUe=i(y),mg=n(y,"LI",{});var Ewe=s(mg);rre=n(Ewe,"STRONG",{});var $Gr=s(rre);VUe=r($Gr,"xlm-roberta"),$Gr.forEach(t),XUe=r(Ewe," \u2014 "),gS=n(Ewe,"A",{href:!0});var kGr=s(gS);zUe=r(kGr,"XLMRobertaConfig"),kGr.forEach(t),QUe=r(Ewe," (XLM-RoBERTa model)"),Ewe.forEach(t),WUe=i(y),fg=n(y,"LI",{});var Cwe=s(fg);tre=n(Cwe,"STRONG",{});var SGr=s(tre);HUe=r(SGr,"xlm-roberta-xl"),SGr.forEach(t),UUe=r(Cwe," \u2014 "),hS=n(Cwe,"A",{href:!0});var RGr=s(hS);JUe=r(RGr,"XLMRobertaXLConfig"),RGr.forEach(t),YUe=r(Cwe," (XLM-RoBERTa-XL model)"),Cwe.forEach(t),KUe=i(y),gg=n(y,"LI",{});var wwe=s(gg);are=n(wwe,"STRONG",{});var BGr=s(are);ZUe=r(BGr,"xlnet"),BGr.forEach(t),eJe=r(wwe," \u2014 "),uS=n(wwe,"A",{href:!0});var PGr=s(uS);oJe=r(PGr,"XLNetConfig"),PGr.forEach(t),rJe=r(wwe," (XLNet model)"),wwe.forEach(t),tJe=i(y),hg=n(y,"LI",{});var Awe=s(hg);nre=n(Awe,"STRONG",{});var IGr=s(nre);aJe=r(IGr,"yolos"),IGr.forEach(t),nJe=r(Awe," \u2014 "),pS=n(Awe,"A",{href:!0});var qGr=s(pS);sJe=r(qGr,"YolosConfig"),qGr.forEach(t),lJe=r(Awe," (YOLOS model)"),Awe.forEach(t),iJe=i(y),ug=n(y,"LI",{});var ywe=s(ug);sre=n(ywe,"STRONG",{});var NGr=s(sre);dJe=r(NGr,"yoso"),NGr.forEach(t),cJe=r(ywe," \u2014 "),_S=n(ywe,"A",{href:!0});var jGr=s(_S);mJe=r(jGr,"YosoConfig"),jGr.forEach(t),fJe=r(ywe," (YOSO model)"),ywe.forEach(t),y.forEach(t),gJe=i(Zr),T(pg.$$.fragment,Zr),Zr.forEach(t),hJe=i(Kr),_g=n(Kr,"DIV",{class:!0});var Wqe=s(_g);T(ay.$$.fragment,Wqe),uJe=i(Wqe),lre=n(Wqe,"P",{});var DGr=s(lre);pJe=r(DGr,"Register a new configuration for this class."),DGr.forEach(t),Wqe.forEach(t),Kr.forEach(t),JPe=i(m),_i=n(m,"H2",{class:!0});var Hqe=s(_i);bg=n(Hqe,"A",{id:!0,class:!0,href:!0});var GGr=s(bg);ire=n(GGr,"SPAN",{});var OGr=s(ire);T(ny.$$.fragment,OGr),OGr.forEach(t),GGr.forEach(t),_Je=i(Hqe),dre=n(Hqe,"SPAN",{});var VGr=s(dre);bJe=r(VGr,"AutoTokenizer"),VGr.forEach(t),Hqe.forEach(t),YPe=i(m),wo=n(m,"DIV",{class:!0});var Ps=s(wo);T(sy.$$.fragment,Ps),FJe=i(Ps),ly=n(Ps,"P",{});var Uqe=s(ly);vJe=r(Uqe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),bS=n(Uqe,"A",{href:!0});var XGr=s(bS);TJe=r(XGr,"AutoTokenizer.from_pretrained()"),XGr.forEach(t),MJe=r(Uqe," class method."),Uqe.forEach(t),EJe=i(Ps),iy=n(Ps,"P",{});var Jqe=s(iy);CJe=r(Jqe,"This class cannot be instantiated directly using "),cre=n(Jqe,"CODE",{});var zGr=s(cre);wJe=r(zGr,"__init__()"),zGr.forEach(t),AJe=r(Jqe," (throws an error)."),Jqe.forEach(t),yJe=i(Ps),Cr=n(Ps,"DIV",{class:!0});var Is=s(Cr);T(dy.$$.fragment,Is),LJe=i(Is),mre=n(Is,"P",{});var QGr=s(mre);xJe=r(QGr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),QGr.forEach(t),$Je=i(Is),Ca=n(Is,"P",{});var KA=s(Ca);kJe=r(KA,"The tokenizer class to instantiate is selected based on the "),fre=n(KA,"CODE",{});var WGr=s(fre);SJe=r(WGr,"model_type"),WGr.forEach(t),RJe=r(KA,` property of the config object (either
passed as an argument or loaded from `),gre=n(KA,"CODE",{});var HGr=s(gre);BJe=r(HGr,"pretrained_model_name_or_path"),HGr.forEach(t),PJe=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hre=n(KA,"CODE",{});var UGr=s(hre);IJe=r(UGr,"pretrained_model_name_or_path"),UGr.forEach(t),qJe=r(KA,":"),KA.forEach(t),NJe=i(Is),k=n(Is,"UL",{});var S=s(k);kn=n(S,"LI",{});var c9=s(kn);ure=n(c9,"STRONG",{});var JGr=s(ure);jJe=r(JGr,"albert"),JGr.forEach(t),DJe=r(c9," \u2014 "),FS=n(c9,"A",{href:!0});var YGr=s(FS);GJe=r(YGr,"AlbertTokenizer"),YGr.forEach(t),OJe=r(c9," or "),vS=n(c9,"A",{href:!0});var KGr=s(vS);VJe=r(KGr,"AlbertTokenizerFast"),KGr.forEach(t),XJe=r(c9," (ALBERT model)"),c9.forEach(t),zJe=i(S),Sn=n(S,"LI",{});var m9=s(Sn);pre=n(m9,"STRONG",{});var ZGr=s(pre);QJe=r(ZGr,"bart"),ZGr.forEach(t),WJe=r(m9," \u2014 "),TS=n(m9,"A",{href:!0});var eOr=s(TS);HJe=r(eOr,"BartTokenizer"),eOr.forEach(t),UJe=r(m9," or "),MS=n(m9,"A",{href:!0});var oOr=s(MS);JJe=r(oOr,"BartTokenizerFast"),oOr.forEach(t),YJe=r(m9," (BART model)"),m9.forEach(t),KJe=i(S),Rn=n(S,"LI",{});var f9=s(Rn);_re=n(f9,"STRONG",{});var rOr=s(_re);ZJe=r(rOr,"barthez"),rOr.forEach(t),eYe=r(f9," \u2014 "),ES=n(f9,"A",{href:!0});var tOr=s(ES);oYe=r(tOr,"BarthezTokenizer"),tOr.forEach(t),rYe=r(f9," or "),CS=n(f9,"A",{href:!0});var aOr=s(CS);tYe=r(aOr,"BarthezTokenizerFast"),aOr.forEach(t),aYe=r(f9," (BARThez model)"),f9.forEach(t),nYe=i(S),Fg=n(S,"LI",{});var Lwe=s(Fg);bre=n(Lwe,"STRONG",{});var nOr=s(bre);sYe=r(nOr,"bartpho"),nOr.forEach(t),lYe=r(Lwe," \u2014 "),wS=n(Lwe,"A",{href:!0});var sOr=s(wS);iYe=r(sOr,"BartphoTokenizer"),sOr.forEach(t),dYe=r(Lwe," (BARTpho model)"),Lwe.forEach(t),cYe=i(S),Bn=n(S,"LI",{});var g9=s(Bn);Fre=n(g9,"STRONG",{});var lOr=s(Fre);mYe=r(lOr,"bert"),lOr.forEach(t),fYe=r(g9," \u2014 "),AS=n(g9,"A",{href:!0});var iOr=s(AS);gYe=r(iOr,"BertTokenizer"),iOr.forEach(t),hYe=r(g9," or "),yS=n(g9,"A",{href:!0});var dOr=s(yS);uYe=r(dOr,"BertTokenizerFast"),dOr.forEach(t),pYe=r(g9," (BERT model)"),g9.forEach(t),_Ye=i(S),vg=n(S,"LI",{});var xwe=s(vg);vre=n(xwe,"STRONG",{});var cOr=s(vre);bYe=r(cOr,"bert-generation"),cOr.forEach(t),FYe=r(xwe," \u2014 "),LS=n(xwe,"A",{href:!0});var mOr=s(LS);vYe=r(mOr,"BertGenerationTokenizer"),mOr.forEach(t),TYe=r(xwe," (Bert Generation model)"),xwe.forEach(t),MYe=i(S),Tg=n(S,"LI",{});var $we=s(Tg);Tre=n($we,"STRONG",{});var fOr=s(Tre);EYe=r(fOr,"bert-japanese"),fOr.forEach(t),CYe=r($we," \u2014 "),xS=n($we,"A",{href:!0});var gOr=s(xS);wYe=r(gOr,"BertJapaneseTokenizer"),gOr.forEach(t),AYe=r($we," (BertJapanese model)"),$we.forEach(t),yYe=i(S),Mg=n(S,"LI",{});var kwe=s(Mg);Mre=n(kwe,"STRONG",{});var hOr=s(Mre);LYe=r(hOr,"bertweet"),hOr.forEach(t),xYe=r(kwe," \u2014 "),$S=n(kwe,"A",{href:!0});var uOr=s($S);$Ye=r(uOr,"BertweetTokenizer"),uOr.forEach(t),kYe=r(kwe," (Bertweet model)"),kwe.forEach(t),SYe=i(S),Pn=n(S,"LI",{});var h9=s(Pn);Ere=n(h9,"STRONG",{});var pOr=s(Ere);RYe=r(pOr,"big_bird"),pOr.forEach(t),BYe=r(h9," \u2014 "),kS=n(h9,"A",{href:!0});var _Or=s(kS);PYe=r(_Or,"BigBirdTokenizer"),_Or.forEach(t),IYe=r(h9," or "),SS=n(h9,"A",{href:!0});var bOr=s(SS);qYe=r(bOr,"BigBirdTokenizerFast"),bOr.forEach(t),NYe=r(h9," (BigBird model)"),h9.forEach(t),jYe=i(S),In=n(S,"LI",{});var u9=s(In);Cre=n(u9,"STRONG",{});var FOr=s(Cre);DYe=r(FOr,"bigbird_pegasus"),FOr.forEach(t),GYe=r(u9," \u2014 "),RS=n(u9,"A",{href:!0});var vOr=s(RS);OYe=r(vOr,"PegasusTokenizer"),vOr.forEach(t),VYe=r(u9," or "),BS=n(u9,"A",{href:!0});var TOr=s(BS);XYe=r(TOr,"PegasusTokenizerFast"),TOr.forEach(t),zYe=r(u9," (BigBirdPegasus model)"),u9.forEach(t),QYe=i(S),qn=n(S,"LI",{});var p9=s(qn);wre=n(p9,"STRONG",{});var MOr=s(wre);WYe=r(MOr,"blenderbot"),MOr.forEach(t),HYe=r(p9," \u2014 "),PS=n(p9,"A",{href:!0});var EOr=s(PS);UYe=r(EOr,"BlenderbotTokenizer"),EOr.forEach(t),JYe=r(p9," or "),IS=n(p9,"A",{href:!0});var COr=s(IS);YYe=r(COr,"BlenderbotTokenizerFast"),COr.forEach(t),KYe=r(p9," (Blenderbot model)"),p9.forEach(t),ZYe=i(S),Eg=n(S,"LI",{});var Swe=s(Eg);Are=n(Swe,"STRONG",{});var wOr=s(Are);eKe=r(wOr,"blenderbot-small"),wOr.forEach(t),oKe=r(Swe," \u2014 "),qS=n(Swe,"A",{href:!0});var AOr=s(qS);rKe=r(AOr,"BlenderbotSmallTokenizer"),AOr.forEach(t),tKe=r(Swe," (BlenderbotSmall model)"),Swe.forEach(t),aKe=i(S),Cg=n(S,"LI",{});var Rwe=s(Cg);yre=n(Rwe,"STRONG",{});var yOr=s(yre);nKe=r(yOr,"byt5"),yOr.forEach(t),sKe=r(Rwe," \u2014 "),NS=n(Rwe,"A",{href:!0});var LOr=s(NS);lKe=r(LOr,"ByT5Tokenizer"),LOr.forEach(t),iKe=r(Rwe," (ByT5 model)"),Rwe.forEach(t),dKe=i(S),Nn=n(S,"LI",{});var _9=s(Nn);Lre=n(_9,"STRONG",{});var xOr=s(Lre);cKe=r(xOr,"camembert"),xOr.forEach(t),mKe=r(_9," \u2014 "),jS=n(_9,"A",{href:!0});var $Or=s(jS);fKe=r($Or,"CamembertTokenizer"),$Or.forEach(t),gKe=r(_9," or "),DS=n(_9,"A",{href:!0});var kOr=s(DS);hKe=r(kOr,"CamembertTokenizerFast"),kOr.forEach(t),uKe=r(_9," (CamemBERT model)"),_9.forEach(t),pKe=i(S),wg=n(S,"LI",{});var Bwe=s(wg);xre=n(Bwe,"STRONG",{});var SOr=s(xre);_Ke=r(SOr,"canine"),SOr.forEach(t),bKe=r(Bwe," \u2014 "),GS=n(Bwe,"A",{href:!0});var ROr=s(GS);FKe=r(ROr,"CanineTokenizer"),ROr.forEach(t),vKe=r(Bwe," (Canine model)"),Bwe.forEach(t),TKe=i(S),jn=n(S,"LI",{});var b9=s(jn);$re=n(b9,"STRONG",{});var BOr=s($re);MKe=r(BOr,"clip"),BOr.forEach(t),EKe=r(b9," \u2014 "),OS=n(b9,"A",{href:!0});var POr=s(OS);CKe=r(POr,"CLIPTokenizer"),POr.forEach(t),wKe=r(b9," or "),VS=n(b9,"A",{href:!0});var IOr=s(VS);AKe=r(IOr,"CLIPTokenizerFast"),IOr.forEach(t),yKe=r(b9," (CLIP model)"),b9.forEach(t),LKe=i(S),Dn=n(S,"LI",{});var F9=s(Dn);kre=n(F9,"STRONG",{});var qOr=s(kre);xKe=r(qOr,"convbert"),qOr.forEach(t),$Ke=r(F9," \u2014 "),XS=n(F9,"A",{href:!0});var NOr=s(XS);kKe=r(NOr,"ConvBertTokenizer"),NOr.forEach(t),SKe=r(F9," or "),zS=n(F9,"A",{href:!0});var jOr=s(zS);RKe=r(jOr,"ConvBertTokenizerFast"),jOr.forEach(t),BKe=r(F9," (ConvBERT model)"),F9.forEach(t),PKe=i(S),Gn=n(S,"LI",{});var v9=s(Gn);Sre=n(v9,"STRONG",{});var DOr=s(Sre);IKe=r(DOr,"cpm"),DOr.forEach(t),qKe=r(v9," \u2014 "),QS=n(v9,"A",{href:!0});var GOr=s(QS);NKe=r(GOr,"CpmTokenizer"),GOr.forEach(t),jKe=r(v9," or "),WS=n(v9,"A",{href:!0});var OOr=s(WS);DKe=r(OOr,"CpmTokenizerFast"),OOr.forEach(t),GKe=r(v9," (CPM model)"),v9.forEach(t),OKe=i(S),Ag=n(S,"LI",{});var Pwe=s(Ag);Rre=n(Pwe,"STRONG",{});var VOr=s(Rre);VKe=r(VOr,"ctrl"),VOr.forEach(t),XKe=r(Pwe," \u2014 "),HS=n(Pwe,"A",{href:!0});var XOr=s(HS);zKe=r(XOr,"CTRLTokenizer"),XOr.forEach(t),QKe=r(Pwe," (CTRL model)"),Pwe.forEach(t),WKe=i(S),On=n(S,"LI",{});var T9=s(On);Bre=n(T9,"STRONG",{});var zOr=s(Bre);HKe=r(zOr,"data2vec-text"),zOr.forEach(t),UKe=r(T9," \u2014 "),US=n(T9,"A",{href:!0});var QOr=s(US);JKe=r(QOr,"RobertaTokenizer"),QOr.forEach(t),YKe=r(T9," or "),JS=n(T9,"A",{href:!0});var WOr=s(JS);KKe=r(WOr,"RobertaTokenizerFast"),WOr.forEach(t),ZKe=r(T9," (Data2VecText model)"),T9.forEach(t),eZe=i(S),Vn=n(S,"LI",{});var M9=s(Vn);Pre=n(M9,"STRONG",{});var HOr=s(Pre);oZe=r(HOr,"deberta"),HOr.forEach(t),rZe=r(M9," \u2014 "),YS=n(M9,"A",{href:!0});var UOr=s(YS);tZe=r(UOr,"DebertaTokenizer"),UOr.forEach(t),aZe=r(M9," or "),KS=n(M9,"A",{href:!0});var JOr=s(KS);nZe=r(JOr,"DebertaTokenizerFast"),JOr.forEach(t),sZe=r(M9," (DeBERTa model)"),M9.forEach(t),lZe=i(S),Xn=n(S,"LI",{});var E9=s(Xn);Ire=n(E9,"STRONG",{});var YOr=s(Ire);iZe=r(YOr,"deberta-v2"),YOr.forEach(t),dZe=r(E9," \u2014 "),ZS=n(E9,"A",{href:!0});var KOr=s(ZS);cZe=r(KOr,"DebertaV2Tokenizer"),KOr.forEach(t),mZe=r(E9," or "),eR=n(E9,"A",{href:!0});var ZOr=s(eR);fZe=r(ZOr,"DebertaV2TokenizerFast"),ZOr.forEach(t),gZe=r(E9," (DeBERTa-v2 model)"),E9.forEach(t),hZe=i(S),zn=n(S,"LI",{});var C9=s(zn);qre=n(C9,"STRONG",{});var eVr=s(qre);uZe=r(eVr,"distilbert"),eVr.forEach(t),pZe=r(C9," \u2014 "),oR=n(C9,"A",{href:!0});var oVr=s(oR);_Ze=r(oVr,"DistilBertTokenizer"),oVr.forEach(t),bZe=r(C9," or "),rR=n(C9,"A",{href:!0});var rVr=s(rR);FZe=r(rVr,"DistilBertTokenizerFast"),rVr.forEach(t),vZe=r(C9," (DistilBERT model)"),C9.forEach(t),TZe=i(S),Qn=n(S,"LI",{});var w9=s(Qn);Nre=n(w9,"STRONG",{});var tVr=s(Nre);MZe=r(tVr,"dpr"),tVr.forEach(t),EZe=r(w9," \u2014 "),tR=n(w9,"A",{href:!0});var aVr=s(tR);CZe=r(aVr,"DPRQuestionEncoderTokenizer"),aVr.forEach(t),wZe=r(w9," or "),aR=n(w9,"A",{href:!0});var nVr=s(aR);AZe=r(nVr,"DPRQuestionEncoderTokenizerFast"),nVr.forEach(t),yZe=r(w9," (DPR model)"),w9.forEach(t),LZe=i(S),Wn=n(S,"LI",{});var A9=s(Wn);jre=n(A9,"STRONG",{});var sVr=s(jre);xZe=r(sVr,"electra"),sVr.forEach(t),$Ze=r(A9," \u2014 "),nR=n(A9,"A",{href:!0});var lVr=s(nR);kZe=r(lVr,"ElectraTokenizer"),lVr.forEach(t),SZe=r(A9," or "),sR=n(A9,"A",{href:!0});var iVr=s(sR);RZe=r(iVr,"ElectraTokenizerFast"),iVr.forEach(t),BZe=r(A9," (ELECTRA model)"),A9.forEach(t),PZe=i(S),yg=n(S,"LI",{});var Iwe=s(yg);Dre=n(Iwe,"STRONG",{});var dVr=s(Dre);IZe=r(dVr,"flaubert"),dVr.forEach(t),qZe=r(Iwe," \u2014 "),lR=n(Iwe,"A",{href:!0});var cVr=s(lR);NZe=r(cVr,"FlaubertTokenizer"),cVr.forEach(t),jZe=r(Iwe," (FlauBERT model)"),Iwe.forEach(t),DZe=i(S),Hn=n(S,"LI",{});var y9=s(Hn);Gre=n(y9,"STRONG",{});var mVr=s(Gre);GZe=r(mVr,"fnet"),mVr.forEach(t),OZe=r(y9," \u2014 "),iR=n(y9,"A",{href:!0});var fVr=s(iR);VZe=r(fVr,"FNetTokenizer"),fVr.forEach(t),XZe=r(y9," or "),dR=n(y9,"A",{href:!0});var gVr=s(dR);zZe=r(gVr,"FNetTokenizerFast"),gVr.forEach(t),QZe=r(y9," (FNet model)"),y9.forEach(t),WZe=i(S),Lg=n(S,"LI",{});var qwe=s(Lg);Ore=n(qwe,"STRONG",{});var hVr=s(Ore);HZe=r(hVr,"fsmt"),hVr.forEach(t),UZe=r(qwe," \u2014 "),cR=n(qwe,"A",{href:!0});var uVr=s(cR);JZe=r(uVr,"FSMTTokenizer"),uVr.forEach(t),YZe=r(qwe," (FairSeq Machine-Translation model)"),qwe.forEach(t),KZe=i(S),Un=n(S,"LI",{});var L9=s(Un);Vre=n(L9,"STRONG",{});var pVr=s(Vre);ZZe=r(pVr,"funnel"),pVr.forEach(t),eeo=r(L9," \u2014 "),mR=n(L9,"A",{href:!0});var _Vr=s(mR);oeo=r(_Vr,"FunnelTokenizer"),_Vr.forEach(t),reo=r(L9," or "),fR=n(L9,"A",{href:!0});var bVr=s(fR);teo=r(bVr,"FunnelTokenizerFast"),bVr.forEach(t),aeo=r(L9," (Funnel Transformer model)"),L9.forEach(t),neo=i(S),Jn=n(S,"LI",{});var x9=s(Jn);Xre=n(x9,"STRONG",{});var FVr=s(Xre);seo=r(FVr,"gpt2"),FVr.forEach(t),leo=r(x9," \u2014 "),gR=n(x9,"A",{href:!0});var vVr=s(gR);ieo=r(vVr,"GPT2Tokenizer"),vVr.forEach(t),deo=r(x9," or "),hR=n(x9,"A",{href:!0});var TVr=s(hR);ceo=r(TVr,"GPT2TokenizerFast"),TVr.forEach(t),meo=r(x9," (OpenAI GPT-2 model)"),x9.forEach(t),feo=i(S),Yn=n(S,"LI",{});var $9=s(Yn);zre=n($9,"STRONG",{});var MVr=s(zre);geo=r(MVr,"gpt_neo"),MVr.forEach(t),heo=r($9," \u2014 "),uR=n($9,"A",{href:!0});var EVr=s(uR);ueo=r(EVr,"GPT2Tokenizer"),EVr.forEach(t),peo=r($9," or "),pR=n($9,"A",{href:!0});var CVr=s(pR);_eo=r(CVr,"GPT2TokenizerFast"),CVr.forEach(t),beo=r($9," (GPT Neo model)"),$9.forEach(t),Feo=i(S),Kn=n(S,"LI",{});var k9=s(Kn);Qre=n(k9,"STRONG",{});var wVr=s(Qre);veo=r(wVr,"gptj"),wVr.forEach(t),Teo=r(k9," \u2014 "),_R=n(k9,"A",{href:!0});var AVr=s(_R);Meo=r(AVr,"GPT2Tokenizer"),AVr.forEach(t),Eeo=r(k9," or "),bR=n(k9,"A",{href:!0});var yVr=s(bR);Ceo=r(yVr,"GPT2TokenizerFast"),yVr.forEach(t),weo=r(k9," (GPT-J model)"),k9.forEach(t),Aeo=i(S),Zn=n(S,"LI",{});var S9=s(Zn);Wre=n(S9,"STRONG",{});var LVr=s(Wre);yeo=r(LVr,"herbert"),LVr.forEach(t),Leo=r(S9," \u2014 "),FR=n(S9,"A",{href:!0});var xVr=s(FR);xeo=r(xVr,"HerbertTokenizer"),xVr.forEach(t),$eo=r(S9," or "),vR=n(S9,"A",{href:!0});var $Vr=s(vR);keo=r($Vr,"HerbertTokenizerFast"),$Vr.forEach(t),Seo=r(S9," (HerBERT model)"),S9.forEach(t),Reo=i(S),xg=n(S,"LI",{});var Nwe=s(xg);Hre=n(Nwe,"STRONG",{});var kVr=s(Hre);Beo=r(kVr,"hubert"),kVr.forEach(t),Peo=r(Nwe," \u2014 "),TR=n(Nwe,"A",{href:!0});var SVr=s(TR);Ieo=r(SVr,"Wav2Vec2CTCTokenizer"),SVr.forEach(t),qeo=r(Nwe," (Hubert model)"),Nwe.forEach(t),Neo=i(S),es=n(S,"LI",{});var R9=s(es);Ure=n(R9,"STRONG",{});var RVr=s(Ure);jeo=r(RVr,"ibert"),RVr.forEach(t),Deo=r(R9," \u2014 "),MR=n(R9,"A",{href:!0});var BVr=s(MR);Geo=r(BVr,"RobertaTokenizer"),BVr.forEach(t),Oeo=r(R9," or "),ER=n(R9,"A",{href:!0});var PVr=s(ER);Veo=r(PVr,"RobertaTokenizerFast"),PVr.forEach(t),Xeo=r(R9," (I-BERT model)"),R9.forEach(t),zeo=i(S),os=n(S,"LI",{});var B9=s(os);Jre=n(B9,"STRONG",{});var IVr=s(Jre);Qeo=r(IVr,"layoutlm"),IVr.forEach(t),Weo=r(B9," \u2014 "),CR=n(B9,"A",{href:!0});var qVr=s(CR);Heo=r(qVr,"LayoutLMTokenizer"),qVr.forEach(t),Ueo=r(B9," or "),wR=n(B9,"A",{href:!0});var NVr=s(wR);Jeo=r(NVr,"LayoutLMTokenizerFast"),NVr.forEach(t),Yeo=r(B9," (LayoutLM model)"),B9.forEach(t),Keo=i(S),rs=n(S,"LI",{});var P9=s(rs);Yre=n(P9,"STRONG",{});var jVr=s(Yre);Zeo=r(jVr,"layoutlmv2"),jVr.forEach(t),eoo=r(P9," \u2014 "),AR=n(P9,"A",{href:!0});var DVr=s(AR);ooo=r(DVr,"LayoutLMv2Tokenizer"),DVr.forEach(t),roo=r(P9," or "),yR=n(P9,"A",{href:!0});var GVr=s(yR);too=r(GVr,"LayoutLMv2TokenizerFast"),GVr.forEach(t),aoo=r(P9," (LayoutLMv2 model)"),P9.forEach(t),noo=i(S),ts=n(S,"LI",{});var I9=s(ts);Kre=n(I9,"STRONG",{});var OVr=s(Kre);soo=r(OVr,"layoutxlm"),OVr.forEach(t),loo=r(I9," \u2014 "),LR=n(I9,"A",{href:!0});var VVr=s(LR);ioo=r(VVr,"LayoutXLMTokenizer"),VVr.forEach(t),doo=r(I9," or "),xR=n(I9,"A",{href:!0});var XVr=s(xR);coo=r(XVr,"LayoutXLMTokenizerFast"),XVr.forEach(t),moo=r(I9," (LayoutXLM model)"),I9.forEach(t),foo=i(S),as=n(S,"LI",{});var q9=s(as);Zre=n(q9,"STRONG",{});var zVr=s(Zre);goo=r(zVr,"led"),zVr.forEach(t),hoo=r(q9," \u2014 "),$R=n(q9,"A",{href:!0});var QVr=s($R);uoo=r(QVr,"LEDTokenizer"),QVr.forEach(t),poo=r(q9," or "),kR=n(q9,"A",{href:!0});var WVr=s(kR);_oo=r(WVr,"LEDTokenizerFast"),WVr.forEach(t),boo=r(q9," (LED model)"),q9.forEach(t),Foo=i(S),ns=n(S,"LI",{});var N9=s(ns);ete=n(N9,"STRONG",{});var HVr=s(ete);voo=r(HVr,"longformer"),HVr.forEach(t),Too=r(N9," \u2014 "),SR=n(N9,"A",{href:!0});var UVr=s(SR);Moo=r(UVr,"LongformerTokenizer"),UVr.forEach(t),Eoo=r(N9," or "),RR=n(N9,"A",{href:!0});var JVr=s(RR);Coo=r(JVr,"LongformerTokenizerFast"),JVr.forEach(t),woo=r(N9," (Longformer model)"),N9.forEach(t),Aoo=i(S),$g=n(S,"LI",{});var jwe=s($g);ote=n(jwe,"STRONG",{});var YVr=s(ote);yoo=r(YVr,"luke"),YVr.forEach(t),Loo=r(jwe," \u2014 "),BR=n(jwe,"A",{href:!0});var KVr=s(BR);xoo=r(KVr,"LukeTokenizer"),KVr.forEach(t),$oo=r(jwe," (LUKE model)"),jwe.forEach(t),koo=i(S),ss=n(S,"LI",{});var j9=s(ss);rte=n(j9,"STRONG",{});var ZVr=s(rte);Soo=r(ZVr,"lxmert"),ZVr.forEach(t),Roo=r(j9," \u2014 "),PR=n(j9,"A",{href:!0});var eXr=s(PR);Boo=r(eXr,"LxmertTokenizer"),eXr.forEach(t),Poo=r(j9," or "),IR=n(j9,"A",{href:!0});var oXr=s(IR);Ioo=r(oXr,"LxmertTokenizerFast"),oXr.forEach(t),qoo=r(j9," (LXMERT model)"),j9.forEach(t),Noo=i(S),kg=n(S,"LI",{});var Dwe=s(kg);tte=n(Dwe,"STRONG",{});var rXr=s(tte);joo=r(rXr,"m2m_100"),rXr.forEach(t),Doo=r(Dwe," \u2014 "),qR=n(Dwe,"A",{href:!0});var tXr=s(qR);Goo=r(tXr,"M2M100Tokenizer"),tXr.forEach(t),Ooo=r(Dwe," (M2M100 model)"),Dwe.forEach(t),Voo=i(S),Sg=n(S,"LI",{});var Gwe=s(Sg);ate=n(Gwe,"STRONG",{});var aXr=s(ate);Xoo=r(aXr,"marian"),aXr.forEach(t),zoo=r(Gwe," \u2014 "),NR=n(Gwe,"A",{href:!0});var nXr=s(NR);Qoo=r(nXr,"MarianTokenizer"),nXr.forEach(t),Woo=r(Gwe," (Marian model)"),Gwe.forEach(t),Hoo=i(S),ls=n(S,"LI",{});var D9=s(ls);nte=n(D9,"STRONG",{});var sXr=s(nte);Uoo=r(sXr,"mbart"),sXr.forEach(t),Joo=r(D9," \u2014 "),jR=n(D9,"A",{href:!0});var lXr=s(jR);Yoo=r(lXr,"MBartTokenizer"),lXr.forEach(t),Koo=r(D9," or "),DR=n(D9,"A",{href:!0});var iXr=s(DR);Zoo=r(iXr,"MBartTokenizerFast"),iXr.forEach(t),ero=r(D9," (mBART model)"),D9.forEach(t),oro=i(S),is=n(S,"LI",{});var G9=s(is);ste=n(G9,"STRONG",{});var dXr=s(ste);rro=r(dXr,"mbart50"),dXr.forEach(t),tro=r(G9," \u2014 "),GR=n(G9,"A",{href:!0});var cXr=s(GR);aro=r(cXr,"MBart50Tokenizer"),cXr.forEach(t),nro=r(G9," or "),OR=n(G9,"A",{href:!0});var mXr=s(OR);sro=r(mXr,"MBart50TokenizerFast"),mXr.forEach(t),lro=r(G9," (mBART-50 model)"),G9.forEach(t),iro=i(S),ds=n(S,"LI",{});var O9=s(ds);lte=n(O9,"STRONG",{});var fXr=s(lte);dro=r(fXr,"megatron-bert"),fXr.forEach(t),cro=r(O9," \u2014 "),VR=n(O9,"A",{href:!0});var gXr=s(VR);mro=r(gXr,"BertTokenizer"),gXr.forEach(t),fro=r(O9," or "),XR=n(O9,"A",{href:!0});var hXr=s(XR);gro=r(hXr,"BertTokenizerFast"),hXr.forEach(t),hro=r(O9," (MegatronBert model)"),O9.forEach(t),uro=i(S),Rg=n(S,"LI",{});var Owe=s(Rg);ite=n(Owe,"STRONG",{});var uXr=s(ite);pro=r(uXr,"mluke"),uXr.forEach(t),_ro=r(Owe," \u2014 "),zR=n(Owe,"A",{href:!0});var pXr=s(zR);bro=r(pXr,"MLukeTokenizer"),pXr.forEach(t),Fro=r(Owe," (mLUKE model)"),Owe.forEach(t),vro=i(S),cs=n(S,"LI",{});var V9=s(cs);dte=n(V9,"STRONG",{});var _Xr=s(dte);Tro=r(_Xr,"mobilebert"),_Xr.forEach(t),Mro=r(V9," \u2014 "),QR=n(V9,"A",{href:!0});var bXr=s(QR);Ero=r(bXr,"MobileBertTokenizer"),bXr.forEach(t),Cro=r(V9," or "),WR=n(V9,"A",{href:!0});var FXr=s(WR);wro=r(FXr,"MobileBertTokenizerFast"),FXr.forEach(t),Aro=r(V9," (MobileBERT model)"),V9.forEach(t),yro=i(S),ms=n(S,"LI",{});var X9=s(ms);cte=n(X9,"STRONG",{});var vXr=s(cte);Lro=r(vXr,"mpnet"),vXr.forEach(t),xro=r(X9," \u2014 "),HR=n(X9,"A",{href:!0});var TXr=s(HR);$ro=r(TXr,"MPNetTokenizer"),TXr.forEach(t),kro=r(X9," or "),UR=n(X9,"A",{href:!0});var MXr=s(UR);Sro=r(MXr,"MPNetTokenizerFast"),MXr.forEach(t),Rro=r(X9," (MPNet model)"),X9.forEach(t),Bro=i(S),fs=n(S,"LI",{});var z9=s(fs);mte=n(z9,"STRONG",{});var EXr=s(mte);Pro=r(EXr,"mt5"),EXr.forEach(t),Iro=r(z9," \u2014 "),JR=n(z9,"A",{href:!0});var CXr=s(JR);qro=r(CXr,"MT5Tokenizer"),CXr.forEach(t),Nro=r(z9," or "),YR=n(z9,"A",{href:!0});var wXr=s(YR);jro=r(wXr,"MT5TokenizerFast"),wXr.forEach(t),Dro=r(z9," (mT5 model)"),z9.forEach(t),Gro=i(S),gs=n(S,"LI",{});var Q9=s(gs);fte=n(Q9,"STRONG",{});var AXr=s(fte);Oro=r(AXr,"nystromformer"),AXr.forEach(t),Vro=r(Q9," \u2014 "),KR=n(Q9,"A",{href:!0});var yXr=s(KR);Xro=r(yXr,"AlbertTokenizer"),yXr.forEach(t),zro=r(Q9," or "),ZR=n(Q9,"A",{href:!0});var LXr=s(ZR);Qro=r(LXr,"AlbertTokenizerFast"),LXr.forEach(t),Wro=r(Q9," (Nystromformer model)"),Q9.forEach(t),Hro=i(S),hs=n(S,"LI",{});var W9=s(hs);gte=n(W9,"STRONG",{});var xXr=s(gte);Uro=r(xXr,"openai-gpt"),xXr.forEach(t),Jro=r(W9," \u2014 "),eB=n(W9,"A",{href:!0});var $Xr=s(eB);Yro=r($Xr,"OpenAIGPTTokenizer"),$Xr.forEach(t),Kro=r(W9," or "),oB=n(W9,"A",{href:!0});var kXr=s(oB);Zro=r(kXr,"OpenAIGPTTokenizerFast"),kXr.forEach(t),eto=r(W9," (OpenAI GPT model)"),W9.forEach(t),oto=i(S),Bg=n(S,"LI",{});var Vwe=s(Bg);hte=n(Vwe,"STRONG",{});var SXr=s(hte);rto=r(SXr,"opt"),SXr.forEach(t),tto=r(Vwe," \u2014 "),rB=n(Vwe,"A",{href:!0});var RXr=s(rB);ato=r(RXr,"GPT2Tokenizer"),RXr.forEach(t),nto=r(Vwe," (OPT model)"),Vwe.forEach(t),sto=i(S),us=n(S,"LI",{});var H9=s(us);ute=n(H9,"STRONG",{});var BXr=s(ute);lto=r(BXr,"pegasus"),BXr.forEach(t),ito=r(H9," \u2014 "),tB=n(H9,"A",{href:!0});var PXr=s(tB);dto=r(PXr,"PegasusTokenizer"),PXr.forEach(t),cto=r(H9," or "),aB=n(H9,"A",{href:!0});var IXr=s(aB);mto=r(IXr,"PegasusTokenizerFast"),IXr.forEach(t),fto=r(H9," (Pegasus model)"),H9.forEach(t),gto=i(S),Pg=n(S,"LI",{});var Xwe=s(Pg);pte=n(Xwe,"STRONG",{});var qXr=s(pte);hto=r(qXr,"perceiver"),qXr.forEach(t),uto=r(Xwe," \u2014 "),nB=n(Xwe,"A",{href:!0});var NXr=s(nB);pto=r(NXr,"PerceiverTokenizer"),NXr.forEach(t),_to=r(Xwe," (Perceiver model)"),Xwe.forEach(t),bto=i(S),Ig=n(S,"LI",{});var zwe=s(Ig);_te=n(zwe,"STRONG",{});var jXr=s(_te);Fto=r(jXr,"phobert"),jXr.forEach(t),vto=r(zwe," \u2014 "),sB=n(zwe,"A",{href:!0});var DXr=s(sB);Tto=r(DXr,"PhobertTokenizer"),DXr.forEach(t),Mto=r(zwe," (PhoBERT model)"),zwe.forEach(t),Eto=i(S),qg=n(S,"LI",{});var Qwe=s(qg);bte=n(Qwe,"STRONG",{});var GXr=s(bte);Cto=r(GXr,"plbart"),GXr.forEach(t),wto=r(Qwe," \u2014 "),lB=n(Qwe,"A",{href:!0});var OXr=s(lB);Ato=r(OXr,"PLBartTokenizer"),OXr.forEach(t),yto=r(Qwe," (PLBart model)"),Qwe.forEach(t),Lto=i(S),Ng=n(S,"LI",{});var Wwe=s(Ng);Fte=n(Wwe,"STRONG",{});var VXr=s(Fte);xto=r(VXr,"prophetnet"),VXr.forEach(t),$to=r(Wwe," \u2014 "),iB=n(Wwe,"A",{href:!0});var XXr=s(iB);kto=r(XXr,"ProphetNetTokenizer"),XXr.forEach(t),Sto=r(Wwe," (ProphetNet model)"),Wwe.forEach(t),Rto=i(S),ps=n(S,"LI",{});var U9=s(ps);vte=n(U9,"STRONG",{});var zXr=s(vte);Bto=r(zXr,"qdqbert"),zXr.forEach(t),Pto=r(U9," \u2014 "),dB=n(U9,"A",{href:!0});var QXr=s(dB);Ito=r(QXr,"BertTokenizer"),QXr.forEach(t),qto=r(U9," or "),cB=n(U9,"A",{href:!0});var WXr=s(cB);Nto=r(WXr,"BertTokenizerFast"),WXr.forEach(t),jto=r(U9," (QDQBert model)"),U9.forEach(t),Dto=i(S),jg=n(S,"LI",{});var Hwe=s(jg);Tte=n(Hwe,"STRONG",{});var HXr=s(Tte);Gto=r(HXr,"rag"),HXr.forEach(t),Oto=r(Hwe," \u2014 "),mB=n(Hwe,"A",{href:!0});var UXr=s(mB);Vto=r(UXr,"RagTokenizer"),UXr.forEach(t),Xto=r(Hwe," (RAG model)"),Hwe.forEach(t),zto=i(S),_s=n(S,"LI",{});var J9=s(_s);Mte=n(J9,"STRONG",{});var JXr=s(Mte);Qto=r(JXr,"realm"),JXr.forEach(t),Wto=r(J9," \u2014 "),fB=n(J9,"A",{href:!0});var YXr=s(fB);Hto=r(YXr,"RealmTokenizer"),YXr.forEach(t),Uto=r(J9," or "),gB=n(J9,"A",{href:!0});var KXr=s(gB);Jto=r(KXr,"RealmTokenizerFast"),KXr.forEach(t),Yto=r(J9," (Realm model)"),J9.forEach(t),Kto=i(S),bs=n(S,"LI",{});var Y9=s(bs);Ete=n(Y9,"STRONG",{});var ZXr=s(Ete);Zto=r(ZXr,"reformer"),ZXr.forEach(t),eao=r(Y9," \u2014 "),hB=n(Y9,"A",{href:!0});var ezr=s(hB);oao=r(ezr,"ReformerTokenizer"),ezr.forEach(t),rao=r(Y9," or "),uB=n(Y9,"A",{href:!0});var ozr=s(uB);tao=r(ozr,"ReformerTokenizerFast"),ozr.forEach(t),aao=r(Y9," (Reformer model)"),Y9.forEach(t),nao=i(S),Fs=n(S,"LI",{});var K9=s(Fs);Cte=n(K9,"STRONG",{});var rzr=s(Cte);sao=r(rzr,"rembert"),rzr.forEach(t),lao=r(K9," \u2014 "),pB=n(K9,"A",{href:!0});var tzr=s(pB);iao=r(tzr,"RemBertTokenizer"),tzr.forEach(t),dao=r(K9," or "),_B=n(K9,"A",{href:!0});var azr=s(_B);cao=r(azr,"RemBertTokenizerFast"),azr.forEach(t),mao=r(K9," (RemBERT model)"),K9.forEach(t),fao=i(S),vs=n(S,"LI",{});var Z9=s(vs);wte=n(Z9,"STRONG",{});var nzr=s(wte);gao=r(nzr,"retribert"),nzr.forEach(t),hao=r(Z9," \u2014 "),bB=n(Z9,"A",{href:!0});var szr=s(bB);uao=r(szr,"RetriBertTokenizer"),szr.forEach(t),pao=r(Z9," or "),FB=n(Z9,"A",{href:!0});var lzr=s(FB);_ao=r(lzr,"RetriBertTokenizerFast"),lzr.forEach(t),bao=r(Z9," (RetriBERT model)"),Z9.forEach(t),Fao=i(S),Ts=n(S,"LI",{});var e$=s(Ts);Ate=n(e$,"STRONG",{});var izr=s(Ate);vao=r(izr,"roberta"),izr.forEach(t),Tao=r(e$," \u2014 "),vB=n(e$,"A",{href:!0});var dzr=s(vB);Mao=r(dzr,"RobertaTokenizer"),dzr.forEach(t),Eao=r(e$," or "),TB=n(e$,"A",{href:!0});var czr=s(TB);Cao=r(czr,"RobertaTokenizerFast"),czr.forEach(t),wao=r(e$," (RoBERTa model)"),e$.forEach(t),Aao=i(S),Ms=n(S,"LI",{});var o$=s(Ms);yte=n(o$,"STRONG",{});var mzr=s(yte);yao=r(mzr,"roformer"),mzr.forEach(t),Lao=r(o$," \u2014 "),MB=n(o$,"A",{href:!0});var fzr=s(MB);xao=r(fzr,"RoFormerTokenizer"),fzr.forEach(t),$ao=r(o$," or "),EB=n(o$,"A",{href:!0});var gzr=s(EB);kao=r(gzr,"RoFormerTokenizerFast"),gzr.forEach(t),Sao=r(o$," (RoFormer model)"),o$.forEach(t),Rao=i(S),Dg=n(S,"LI",{});var Uwe=s(Dg);Lte=n(Uwe,"STRONG",{});var hzr=s(Lte);Bao=r(hzr,"speech_to_text"),hzr.forEach(t),Pao=r(Uwe," \u2014 "),CB=n(Uwe,"A",{href:!0});var uzr=s(CB);Iao=r(uzr,"Speech2TextTokenizer"),uzr.forEach(t),qao=r(Uwe," (Speech2Text model)"),Uwe.forEach(t),Nao=i(S),Gg=n(S,"LI",{});var Jwe=s(Gg);xte=n(Jwe,"STRONG",{});var pzr=s(xte);jao=r(pzr,"speech_to_text_2"),pzr.forEach(t),Dao=r(Jwe," \u2014 "),wB=n(Jwe,"A",{href:!0});var _zr=s(wB);Gao=r(_zr,"Speech2Text2Tokenizer"),_zr.forEach(t),Oao=r(Jwe," (Speech2Text2 model)"),Jwe.forEach(t),Vao=i(S),Es=n(S,"LI",{});var r$=s(Es);$te=n(r$,"STRONG",{});var bzr=s($te);Xao=r(bzr,"splinter"),bzr.forEach(t),zao=r(r$," \u2014 "),AB=n(r$,"A",{href:!0});var Fzr=s(AB);Qao=r(Fzr,"SplinterTokenizer"),Fzr.forEach(t),Wao=r(r$," or "),yB=n(r$,"A",{href:!0});var vzr=s(yB);Hao=r(vzr,"SplinterTokenizerFast"),vzr.forEach(t),Uao=r(r$," (Splinter model)"),r$.forEach(t),Jao=i(S),Cs=n(S,"LI",{});var t$=s(Cs);kte=n(t$,"STRONG",{});var Tzr=s(kte);Yao=r(Tzr,"squeezebert"),Tzr.forEach(t),Kao=r(t$," \u2014 "),LB=n(t$,"A",{href:!0});var Mzr=s(LB);Zao=r(Mzr,"SqueezeBertTokenizer"),Mzr.forEach(t),eno=r(t$," or "),xB=n(t$,"A",{href:!0});var Ezr=s(xB);ono=r(Ezr,"SqueezeBertTokenizerFast"),Ezr.forEach(t),rno=r(t$," (SqueezeBERT model)"),t$.forEach(t),tno=i(S),ws=n(S,"LI",{});var a$=s(ws);Ste=n(a$,"STRONG",{});var Czr=s(Ste);ano=r(Czr,"t5"),Czr.forEach(t),nno=r(a$," \u2014 "),$B=n(a$,"A",{href:!0});var wzr=s($B);sno=r(wzr,"T5Tokenizer"),wzr.forEach(t),lno=r(a$," or "),kB=n(a$,"A",{href:!0});var Azr=s(kB);ino=r(Azr,"T5TokenizerFast"),Azr.forEach(t),dno=r(a$," (T5 model)"),a$.forEach(t),cno=i(S),Og=n(S,"LI",{});var Ywe=s(Og);Rte=n(Ywe,"STRONG",{});var yzr=s(Rte);mno=r(yzr,"tapas"),yzr.forEach(t),fno=r(Ywe," \u2014 "),SB=n(Ywe,"A",{href:!0});var Lzr=s(SB);gno=r(Lzr,"TapasTokenizer"),Lzr.forEach(t),hno=r(Ywe," (TAPAS model)"),Ywe.forEach(t),uno=i(S),Vg=n(S,"LI",{});var Kwe=s(Vg);Bte=n(Kwe,"STRONG",{});var xzr=s(Bte);pno=r(xzr,"tapex"),xzr.forEach(t),_no=r(Kwe," \u2014 "),RB=n(Kwe,"A",{href:!0});var $zr=s(RB);bno=r($zr,"TapexTokenizer"),$zr.forEach(t),Fno=r(Kwe," (TAPEX model)"),Kwe.forEach(t),vno=i(S),Xg=n(S,"LI",{});var Zwe=s(Xg);Pte=n(Zwe,"STRONG",{});var kzr=s(Pte);Tno=r(kzr,"transfo-xl"),kzr.forEach(t),Mno=r(Zwe," \u2014 "),BB=n(Zwe,"A",{href:!0});var Szr=s(BB);Eno=r(Szr,"TransfoXLTokenizer"),Szr.forEach(t),Cno=r(Zwe," (Transformer-XL model)"),Zwe.forEach(t),wno=i(S),As=n(S,"LI",{});var n$=s(As);Ite=n(n$,"STRONG",{});var Rzr=s(Ite);Ano=r(Rzr,"visual_bert"),Rzr.forEach(t),yno=r(n$," \u2014 "),PB=n(n$,"A",{href:!0});var Bzr=s(PB);Lno=r(Bzr,"BertTokenizer"),Bzr.forEach(t),xno=r(n$," or "),IB=n(n$,"A",{href:!0});var Pzr=s(IB);$no=r(Pzr,"BertTokenizerFast"),Pzr.forEach(t),kno=r(n$," (VisualBert model)"),n$.forEach(t),Sno=i(S),zg=n(S,"LI",{});var eAe=s(zg);qte=n(eAe,"STRONG",{});var Izr=s(qte);Rno=r(Izr,"wav2vec2"),Izr.forEach(t),Bno=r(eAe," \u2014 "),qB=n(eAe,"A",{href:!0});var qzr=s(qB);Pno=r(qzr,"Wav2Vec2CTCTokenizer"),qzr.forEach(t),Ino=r(eAe," (Wav2Vec2 model)"),eAe.forEach(t),qno=i(S),Qg=n(S,"LI",{});var oAe=s(Qg);Nte=n(oAe,"STRONG",{});var Nzr=s(Nte);Nno=r(Nzr,"wav2vec2_phoneme"),Nzr.forEach(t),jno=r(oAe," \u2014 "),NB=n(oAe,"A",{href:!0});var jzr=s(NB);Dno=r(jzr,"Wav2Vec2PhonemeCTCTokenizer"),jzr.forEach(t),Gno=r(oAe," (Wav2Vec2Phoneme model)"),oAe.forEach(t),Ono=i(S),ys=n(S,"LI",{});var s$=s(ys);jte=n(s$,"STRONG",{});var Dzr=s(jte);Vno=r(Dzr,"xglm"),Dzr.forEach(t),Xno=r(s$," \u2014 "),jB=n(s$,"A",{href:!0});var Gzr=s(jB);zno=r(Gzr,"XGLMTokenizer"),Gzr.forEach(t),Qno=r(s$," or "),DB=n(s$,"A",{href:!0});var Ozr=s(DB);Wno=r(Ozr,"XGLMTokenizerFast"),Ozr.forEach(t),Hno=r(s$," (XGLM model)"),s$.forEach(t),Uno=i(S),Wg=n(S,"LI",{});var rAe=s(Wg);Dte=n(rAe,"STRONG",{});var Vzr=s(Dte);Jno=r(Vzr,"xlm"),Vzr.forEach(t),Yno=r(rAe," \u2014 "),GB=n(rAe,"A",{href:!0});var Xzr=s(GB);Kno=r(Xzr,"XLMTokenizer"),Xzr.forEach(t),Zno=r(rAe," (XLM model)"),rAe.forEach(t),eso=i(S),Hg=n(S,"LI",{});var tAe=s(Hg);Gte=n(tAe,"STRONG",{});var zzr=s(Gte);oso=r(zzr,"xlm-prophetnet"),zzr.forEach(t),rso=r(tAe," \u2014 "),OB=n(tAe,"A",{href:!0});var Qzr=s(OB);tso=r(Qzr,"XLMProphetNetTokenizer"),Qzr.forEach(t),aso=r(tAe," (XLMProphetNet model)"),tAe.forEach(t),nso=i(S),Ls=n(S,"LI",{});var l$=s(Ls);Ote=n(l$,"STRONG",{});var Wzr=s(Ote);sso=r(Wzr,"xlm-roberta"),Wzr.forEach(t),lso=r(l$," \u2014 "),VB=n(l$,"A",{href:!0});var Hzr=s(VB);iso=r(Hzr,"XLMRobertaTokenizer"),Hzr.forEach(t),dso=r(l$," or "),XB=n(l$,"A",{href:!0});var Uzr=s(XB);cso=r(Uzr,"XLMRobertaTokenizerFast"),Uzr.forEach(t),mso=r(l$," (XLM-RoBERTa model)"),l$.forEach(t),fso=i(S),xs=n(S,"LI",{});var i$=s(xs);Vte=n(i$,"STRONG",{});var Jzr=s(Vte);gso=r(Jzr,"xlm-roberta-xl"),Jzr.forEach(t),hso=r(i$," \u2014 "),zB=n(i$,"A",{href:!0});var Yzr=s(zB);uso=r(Yzr,"RobertaTokenizer"),Yzr.forEach(t),pso=r(i$," or "),QB=n(i$,"A",{href:!0});var Kzr=s(QB);_so=r(Kzr,"RobertaTokenizerFast"),Kzr.forEach(t),bso=r(i$," (XLM-RoBERTa-XL model)"),i$.forEach(t),Fso=i(S),$s=n(S,"LI",{});var d$=s($s);Xte=n(d$,"STRONG",{});var Zzr=s(Xte);vso=r(Zzr,"xlnet"),Zzr.forEach(t),Tso=r(d$," \u2014 "),WB=n(d$,"A",{href:!0});var eQr=s(WB);Mso=r(eQr,"XLNetTokenizer"),eQr.forEach(t),Eso=r(d$," or "),HB=n(d$,"A",{href:!0});var oQr=s(HB);Cso=r(oQr,"XLNetTokenizerFast"),oQr.forEach(t),wso=r(d$," (XLNet model)"),d$.forEach(t),Aso=i(S),ks=n(S,"LI",{});var c$=s(ks);zte=n(c$,"STRONG",{});var rQr=s(zte);yso=r(rQr,"yoso"),rQr.forEach(t),Lso=r(c$," \u2014 "),UB=n(c$,"A",{href:!0});var tQr=s(UB);xso=r(tQr,"AlbertTokenizer"),tQr.forEach(t),$so=r(c$," or "),JB=n(c$,"A",{href:!0});var aQr=s(JB);kso=r(aQr,"AlbertTokenizerFast"),aQr.forEach(t),Sso=r(c$," (YOSO model)"),c$.forEach(t),S.forEach(t),Rso=i(Is),T(Ug.$$.fragment,Is),Is.forEach(t),Bso=i(Ps),Jg=n(Ps,"DIV",{class:!0});var Yqe=s(Jg);T(cy.$$.fragment,Yqe),Pso=i(Yqe),Qte=n(Yqe,"P",{});var nQr=s(Qte);Iso=r(nQr,"Register a new tokenizer in this mapping."),nQr.forEach(t),Yqe.forEach(t),Ps.forEach(t),KPe=i(m),bi=n(m,"H2",{class:!0});var Kqe=s(bi);Yg=n(Kqe,"A",{id:!0,class:!0,href:!0});var sQr=s(Yg);Wte=n(sQr,"SPAN",{});var lQr=s(Wte);T(my.$$.fragment,lQr),lQr.forEach(t),sQr.forEach(t),qso=i(Kqe),Hte=n(Kqe,"SPAN",{});var iQr=s(Hte);Nso=r(iQr,"AutoFeatureExtractor"),iQr.forEach(t),Kqe.forEach(t),ZPe=i(m),Ao=n(m,"DIV",{class:!0});var qs=s(Ao);T(fy.$$.fragment,qs),jso=i(qs),gy=n(qs,"P",{});var Zqe=s(gy);Dso=r(Zqe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),YB=n(Zqe,"A",{href:!0});var dQr=s(YB);Gso=r(dQr,"AutoFeatureExtractor.from_pretrained()"),dQr.forEach(t),Oso=r(Zqe," class method."),Zqe.forEach(t),Vso=i(qs),hy=n(qs,"P",{});var eNe=s(hy);Xso=r(eNe,"This class cannot be instantiated directly using "),Ute=n(eNe,"CODE",{});var cQr=s(Ute);zso=r(cQr,"__init__()"),cQr.forEach(t),Qso=r(eNe," (throws an error)."),eNe.forEach(t),Wso=i(qs),Qe=n(qs,"DIV",{class:!0});var Yt=s(Qe);T(uy.$$.fragment,Yt),Hso=i(Yt),Jte=n(Yt,"P",{});var mQr=s(Jte);Uso=r(mQr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),mQr.forEach(t),Jso=i(Yt),wa=n(Yt,"P",{});var ZA=s(wa);Yso=r(ZA,"The feature extractor class to instantiate is selected based on the "),Yte=n(ZA,"CODE",{});var fQr=s(Yte);Kso=r(fQr,"model_type"),fQr.forEach(t),Zso=r(ZA,` property of the config object
(either passed as an argument or loaded from `),Kte=n(ZA,"CODE",{});var gQr=s(Kte);elo=r(gQr,"pretrained_model_name_or_path"),gQr.forEach(t),olo=r(ZA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Zte=n(ZA,"CODE",{});var hQr=s(Zte);rlo=r(hQr,"pretrained_model_name_or_path"),hQr.forEach(t),tlo=r(ZA,":"),ZA.forEach(t),alo=i(Yt),oe=n(Yt,"UL",{});var ae=s(oe);Kg=n(ae,"LI",{});var aAe=s(Kg);eae=n(aAe,"STRONG",{});var uQr=s(eae);nlo=r(uQr,"beit"),uQr.forEach(t),slo=r(aAe," \u2014 "),KB=n(aAe,"A",{href:!0});var pQr=s(KB);llo=r(pQr,"BeitFeatureExtractor"),pQr.forEach(t),ilo=r(aAe," (BEiT model)"),aAe.forEach(t),dlo=i(ae),Zg=n(ae,"LI",{});var nAe=s(Zg);oae=n(nAe,"STRONG",{});var _Qr=s(oae);clo=r(_Qr,"clip"),_Qr.forEach(t),mlo=r(nAe," \u2014 "),ZB=n(nAe,"A",{href:!0});var bQr=s(ZB);flo=r(bQr,"CLIPFeatureExtractor"),bQr.forEach(t),glo=r(nAe," (CLIP model)"),nAe.forEach(t),hlo=i(ae),eh=n(ae,"LI",{});var sAe=s(eh);rae=n(sAe,"STRONG",{});var FQr=s(rae);ulo=r(FQr,"convnext"),FQr.forEach(t),plo=r(sAe," \u2014 "),eP=n(sAe,"A",{href:!0});var vQr=s(eP);_lo=r(vQr,"ConvNextFeatureExtractor"),vQr.forEach(t),blo=r(sAe," (ConvNext model)"),sAe.forEach(t),Flo=i(ae),oh=n(ae,"LI",{});var lAe=s(oh);tae=n(lAe,"STRONG",{});var TQr=s(tae);vlo=r(TQr,"data2vec-audio"),TQr.forEach(t),Tlo=r(lAe," \u2014 "),oP=n(lAe,"A",{href:!0});var MQr=s(oP);Mlo=r(MQr,"Wav2Vec2FeatureExtractor"),MQr.forEach(t),Elo=r(lAe," (Data2VecAudio model)"),lAe.forEach(t),Clo=i(ae),rh=n(ae,"LI",{});var iAe=s(rh);aae=n(iAe,"STRONG",{});var EQr=s(aae);wlo=r(EQr,"data2vec-vision"),EQr.forEach(t),Alo=r(iAe," \u2014 "),rP=n(iAe,"A",{href:!0});var CQr=s(rP);ylo=r(CQr,"BeitFeatureExtractor"),CQr.forEach(t),Llo=r(iAe," (Data2VecVision model)"),iAe.forEach(t),xlo=i(ae),th=n(ae,"LI",{});var dAe=s(th);nae=n(dAe,"STRONG",{});var wQr=s(nae);$lo=r(wQr,"deit"),wQr.forEach(t),klo=r(dAe," \u2014 "),tP=n(dAe,"A",{href:!0});var AQr=s(tP);Slo=r(AQr,"DeiTFeatureExtractor"),AQr.forEach(t),Rlo=r(dAe," (DeiT model)"),dAe.forEach(t),Blo=i(ae),ah=n(ae,"LI",{});var cAe=s(ah);sae=n(cAe,"STRONG",{});var yQr=s(sae);Plo=r(yQr,"detr"),yQr.forEach(t),Ilo=r(cAe," \u2014 "),aP=n(cAe,"A",{href:!0});var LQr=s(aP);qlo=r(LQr,"DetrFeatureExtractor"),LQr.forEach(t),Nlo=r(cAe," (DETR model)"),cAe.forEach(t),jlo=i(ae),nh=n(ae,"LI",{});var mAe=s(nh);lae=n(mAe,"STRONG",{});var xQr=s(lae);Dlo=r(xQr,"dpt"),xQr.forEach(t),Glo=r(mAe," \u2014 "),nP=n(mAe,"A",{href:!0});var $Qr=s(nP);Olo=r($Qr,"DPTFeatureExtractor"),$Qr.forEach(t),Vlo=r(mAe," (DPT model)"),mAe.forEach(t),Xlo=i(ae),sh=n(ae,"LI",{});var fAe=s(sh);iae=n(fAe,"STRONG",{});var kQr=s(iae);zlo=r(kQr,"flava"),kQr.forEach(t),Qlo=r(fAe," \u2014 "),sP=n(fAe,"A",{href:!0});var SQr=s(sP);Wlo=r(SQr,"FlavaFeatureExtractor"),SQr.forEach(t),Hlo=r(fAe," (Flava model)"),fAe.forEach(t),Ulo=i(ae),lh=n(ae,"LI",{});var gAe=s(lh);dae=n(gAe,"STRONG",{});var RQr=s(dae);Jlo=r(RQr,"glpn"),RQr.forEach(t),Ylo=r(gAe," \u2014 "),lP=n(gAe,"A",{href:!0});var BQr=s(lP);Klo=r(BQr,"GLPNFeatureExtractor"),BQr.forEach(t),Zlo=r(gAe," (GLPN model)"),gAe.forEach(t),eio=i(ae),ih=n(ae,"LI",{});var hAe=s(ih);cae=n(hAe,"STRONG",{});var PQr=s(cae);oio=r(PQr,"hubert"),PQr.forEach(t),rio=r(hAe," \u2014 "),iP=n(hAe,"A",{href:!0});var IQr=s(iP);tio=r(IQr,"Wav2Vec2FeatureExtractor"),IQr.forEach(t),aio=r(hAe," (Hubert model)"),hAe.forEach(t),nio=i(ae),dh=n(ae,"LI",{});var uAe=s(dh);mae=n(uAe,"STRONG",{});var qQr=s(mae);sio=r(qQr,"layoutlmv2"),qQr.forEach(t),lio=r(uAe," \u2014 "),dP=n(uAe,"A",{href:!0});var NQr=s(dP);iio=r(NQr,"LayoutLMv2FeatureExtractor"),NQr.forEach(t),dio=r(uAe," (LayoutLMv2 model)"),uAe.forEach(t),cio=i(ae),ch=n(ae,"LI",{});var pAe=s(ch);fae=n(pAe,"STRONG",{});var jQr=s(fae);mio=r(jQr,"maskformer"),jQr.forEach(t),fio=r(pAe," \u2014 "),cP=n(pAe,"A",{href:!0});var DQr=s(cP);gio=r(DQr,"MaskFormerFeatureExtractor"),DQr.forEach(t),hio=r(pAe," (MaskFormer model)"),pAe.forEach(t),uio=i(ae),mh=n(ae,"LI",{});var _Ae=s(mh);gae=n(_Ae,"STRONG",{});var GQr=s(gae);pio=r(GQr,"perceiver"),GQr.forEach(t),_io=r(_Ae," \u2014 "),mP=n(_Ae,"A",{href:!0});var OQr=s(mP);bio=r(OQr,"PerceiverFeatureExtractor"),OQr.forEach(t),Fio=r(_Ae," (Perceiver model)"),_Ae.forEach(t),vio=i(ae),fh=n(ae,"LI",{});var bAe=s(fh);hae=n(bAe,"STRONG",{});var VQr=s(hae);Tio=r(VQr,"poolformer"),VQr.forEach(t),Mio=r(bAe," \u2014 "),fP=n(bAe,"A",{href:!0});var XQr=s(fP);Eio=r(XQr,"PoolFormerFeatureExtractor"),XQr.forEach(t),Cio=r(bAe," (PoolFormer model)"),bAe.forEach(t),wio=i(ae),gh=n(ae,"LI",{});var FAe=s(gh);uae=n(FAe,"STRONG",{});var zQr=s(uae);Aio=r(zQr,"regnet"),zQr.forEach(t),yio=r(FAe," \u2014 "),gP=n(FAe,"A",{href:!0});var QQr=s(gP);Lio=r(QQr,"ConvNextFeatureExtractor"),QQr.forEach(t),xio=r(FAe," (RegNet model)"),FAe.forEach(t),$io=i(ae),hh=n(ae,"LI",{});var vAe=s(hh);pae=n(vAe,"STRONG",{});var WQr=s(pae);kio=r(WQr,"resnet"),WQr.forEach(t),Sio=r(vAe," \u2014 "),hP=n(vAe,"A",{href:!0});var HQr=s(hP);Rio=r(HQr,"ConvNextFeatureExtractor"),HQr.forEach(t),Bio=r(vAe," (ResNet model)"),vAe.forEach(t),Pio=i(ae),uh=n(ae,"LI",{});var TAe=s(uh);_ae=n(TAe,"STRONG",{});var UQr=s(_ae);Iio=r(UQr,"segformer"),UQr.forEach(t),qio=r(TAe," \u2014 "),uP=n(TAe,"A",{href:!0});var JQr=s(uP);Nio=r(JQr,"SegformerFeatureExtractor"),JQr.forEach(t),jio=r(TAe," (SegFormer model)"),TAe.forEach(t),Dio=i(ae),ph=n(ae,"LI",{});var MAe=s(ph);bae=n(MAe,"STRONG",{});var YQr=s(bae);Gio=r(YQr,"speech_to_text"),YQr.forEach(t),Oio=r(MAe," \u2014 "),pP=n(MAe,"A",{href:!0});var KQr=s(pP);Vio=r(KQr,"Speech2TextFeatureExtractor"),KQr.forEach(t),Xio=r(MAe," (Speech2Text model)"),MAe.forEach(t),zio=i(ae),_h=n(ae,"LI",{});var EAe=s(_h);Fae=n(EAe,"STRONG",{});var ZQr=s(Fae);Qio=r(ZQr,"swin"),ZQr.forEach(t),Wio=r(EAe," \u2014 "),_P=n(EAe,"A",{href:!0});var eWr=s(_P);Hio=r(eWr,"ViTFeatureExtractor"),eWr.forEach(t),Uio=r(EAe," (Swin model)"),EAe.forEach(t),Jio=i(ae),bh=n(ae,"LI",{});var CAe=s(bh);vae=n(CAe,"STRONG",{});var oWr=s(vae);Yio=r(oWr,"van"),oWr.forEach(t),Kio=r(CAe," \u2014 "),bP=n(CAe,"A",{href:!0});var rWr=s(bP);Zio=r(rWr,"ConvNextFeatureExtractor"),rWr.forEach(t),edo=r(CAe," (VAN model)"),CAe.forEach(t),odo=i(ae),Fh=n(ae,"LI",{});var wAe=s(Fh);Tae=n(wAe,"STRONG",{});var tWr=s(Tae);rdo=r(tWr,"vit"),tWr.forEach(t),tdo=r(wAe," \u2014 "),FP=n(wAe,"A",{href:!0});var aWr=s(FP);ado=r(aWr,"ViTFeatureExtractor"),aWr.forEach(t),ndo=r(wAe," (ViT model)"),wAe.forEach(t),sdo=i(ae),vh=n(ae,"LI",{});var AAe=s(vh);Mae=n(AAe,"STRONG",{});var nWr=s(Mae);ldo=r(nWr,"vit_mae"),nWr.forEach(t),ido=r(AAe," \u2014 "),vP=n(AAe,"A",{href:!0});var sWr=s(vP);ddo=r(sWr,"ViTFeatureExtractor"),sWr.forEach(t),cdo=r(AAe," (ViTMAE model)"),AAe.forEach(t),mdo=i(ae),Th=n(ae,"LI",{});var yAe=s(Th);Eae=n(yAe,"STRONG",{});var lWr=s(Eae);fdo=r(lWr,"wav2vec2"),lWr.forEach(t),gdo=r(yAe," \u2014 "),TP=n(yAe,"A",{href:!0});var iWr=s(TP);hdo=r(iWr,"Wav2Vec2FeatureExtractor"),iWr.forEach(t),udo=r(yAe," (Wav2Vec2 model)"),yAe.forEach(t),pdo=i(ae),Mh=n(ae,"LI",{});var LAe=s(Mh);Cae=n(LAe,"STRONG",{});var dWr=s(Cae);_do=r(dWr,"yolos"),dWr.forEach(t),bdo=r(LAe," \u2014 "),MP=n(LAe,"A",{href:!0});var cWr=s(MP);Fdo=r(cWr,"YolosFeatureExtractor"),cWr.forEach(t),vdo=r(LAe," (YOLOS model)"),LAe.forEach(t),ae.forEach(t),Tdo=i(Yt),T(Eh.$$.fragment,Yt),Mdo=i(Yt),T(Ch.$$.fragment,Yt),Yt.forEach(t),Edo=i(qs),wh=n(qs,"DIV",{class:!0});var oNe=s(wh);T(py.$$.fragment,oNe),Cdo=i(oNe),wae=n(oNe,"P",{});var mWr=s(wae);wdo=r(mWr,"Register a new feature extractor for this class."),mWr.forEach(t),oNe.forEach(t),qs.forEach(t),eIe=i(m),Fi=n(m,"H2",{class:!0});var rNe=s(Fi);Ah=n(rNe,"A",{id:!0,class:!0,href:!0});var fWr=s(Ah);Aae=n(fWr,"SPAN",{});var gWr=s(Aae);T(_y.$$.fragment,gWr),gWr.forEach(t),fWr.forEach(t),Ado=i(rNe),yae=n(rNe,"SPAN",{});var hWr=s(yae);ydo=r(hWr,"AutoProcessor"),hWr.forEach(t),rNe.forEach(t),oIe=i(m),yo=n(m,"DIV",{class:!0});var Ns=s(yo);T(by.$$.fragment,Ns),Ldo=i(Ns),Fy=n(Ns,"P",{});var tNe=s(Fy);xdo=r(tNe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),EP=n(tNe,"A",{href:!0});var uWr=s(EP);$do=r(uWr,"AutoProcessor.from_pretrained()"),uWr.forEach(t),kdo=r(tNe," class method."),tNe.forEach(t),Sdo=i(Ns),vy=n(Ns,"P",{});var aNe=s(vy);Rdo=r(aNe,"This class cannot be instantiated directly using "),Lae=n(aNe,"CODE",{});var pWr=s(Lae);Bdo=r(pWr,"__init__()"),pWr.forEach(t),Pdo=r(aNe," (throws an error)."),aNe.forEach(t),Ido=i(Ns),We=n(Ns,"DIV",{class:!0});var Kt=s(We);T(Ty.$$.fragment,Kt),qdo=i(Kt),xae=n(Kt,"P",{});var _Wr=s(xae);Ndo=r(_Wr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),_Wr.forEach(t),jdo=i(Kt),vi=n(Kt,"P",{});var lK=s(vi);Ddo=r(lK,"The processor class to instantiate is selected based on the "),$ae=n(lK,"CODE",{});var bWr=s($ae);Gdo=r(bWr,"model_type"),bWr.forEach(t),Odo=r(lK,` property of the config object (either
passed as an argument or loaded from `),kae=n(lK,"CODE",{});var FWr=s(kae);Vdo=r(FWr,"pretrained_model_name_or_path"),FWr.forEach(t),Xdo=r(lK," if possible):"),lK.forEach(t),zdo=i(Kt),be=n(Kt,"UL",{});var Fe=s(be);yh=n(Fe,"LI",{});var xAe=s(yh);Sae=n(xAe,"STRONG",{});var vWr=s(Sae);Qdo=r(vWr,"clip"),vWr.forEach(t),Wdo=r(xAe," \u2014 "),CP=n(xAe,"A",{href:!0});var TWr=s(CP);Hdo=r(TWr,"CLIPProcessor"),TWr.forEach(t),Udo=r(xAe," (CLIP model)"),xAe.forEach(t),Jdo=i(Fe),Lh=n(Fe,"LI",{});var $Ae=s(Lh);Rae=n($Ae,"STRONG",{});var MWr=s(Rae);Ydo=r(MWr,"flava"),MWr.forEach(t),Kdo=r($Ae," \u2014 "),Bae=n($Ae,"CODE",{});var EWr=s(Bae);Zdo=r(EWr,"FLAVAProcessor"),EWr.forEach(t),eco=r($Ae," (Flava model)"),$Ae.forEach(t),oco=i(Fe),xh=n(Fe,"LI",{});var kAe=s(xh);Pae=n(kAe,"STRONG",{});var CWr=s(Pae);rco=r(CWr,"layoutlmv2"),CWr.forEach(t),tco=r(kAe," \u2014 "),wP=n(kAe,"A",{href:!0});var wWr=s(wP);aco=r(wWr,"LayoutLMv2Processor"),wWr.forEach(t),nco=r(kAe," (LayoutLMv2 model)"),kAe.forEach(t),sco=i(Fe),$h=n(Fe,"LI",{});var SAe=s($h);Iae=n(SAe,"STRONG",{});var AWr=s(Iae);lco=r(AWr,"layoutxlm"),AWr.forEach(t),ico=r(SAe," \u2014 "),AP=n(SAe,"A",{href:!0});var yWr=s(AP);dco=r(yWr,"LayoutXLMProcessor"),yWr.forEach(t),cco=r(SAe," (LayoutXLM model)"),SAe.forEach(t),mco=i(Fe),kh=n(Fe,"LI",{});var RAe=s(kh);qae=n(RAe,"STRONG",{});var LWr=s(qae);fco=r(LWr,"sew"),LWr.forEach(t),gco=r(RAe," \u2014 "),yP=n(RAe,"A",{href:!0});var xWr=s(yP);hco=r(xWr,"Wav2Vec2Processor"),xWr.forEach(t),uco=r(RAe," (SEW model)"),RAe.forEach(t),pco=i(Fe),Sh=n(Fe,"LI",{});var BAe=s(Sh);Nae=n(BAe,"STRONG",{});var $Wr=s(Nae);_co=r($Wr,"sew-d"),$Wr.forEach(t),bco=r(BAe," \u2014 "),LP=n(BAe,"A",{href:!0});var kWr=s(LP);Fco=r(kWr,"Wav2Vec2Processor"),kWr.forEach(t),vco=r(BAe," (SEW-D model)"),BAe.forEach(t),Tco=i(Fe),Rh=n(Fe,"LI",{});var PAe=s(Rh);jae=n(PAe,"STRONG",{});var SWr=s(jae);Mco=r(SWr,"speech_to_text"),SWr.forEach(t),Eco=r(PAe," \u2014 "),xP=n(PAe,"A",{href:!0});var RWr=s(xP);Cco=r(RWr,"Speech2TextProcessor"),RWr.forEach(t),wco=r(PAe," (Speech2Text model)"),PAe.forEach(t),Aco=i(Fe),Bh=n(Fe,"LI",{});var IAe=s(Bh);Dae=n(IAe,"STRONG",{});var BWr=s(Dae);yco=r(BWr,"speech_to_text_2"),BWr.forEach(t),Lco=r(IAe," \u2014 "),$P=n(IAe,"A",{href:!0});var PWr=s($P);xco=r(PWr,"Speech2Text2Processor"),PWr.forEach(t),$co=r(IAe," (Speech2Text2 model)"),IAe.forEach(t),kco=i(Fe),Ph=n(Fe,"LI",{});var qAe=s(Ph);Gae=n(qAe,"STRONG",{});var IWr=s(Gae);Sco=r(IWr,"trocr"),IWr.forEach(t),Rco=r(qAe," \u2014 "),kP=n(qAe,"A",{href:!0});var qWr=s(kP);Bco=r(qWr,"TrOCRProcessor"),qWr.forEach(t),Pco=r(qAe," (TrOCR model)"),qAe.forEach(t),Ico=i(Fe),Ih=n(Fe,"LI",{});var NAe=s(Ih);Oae=n(NAe,"STRONG",{});var NWr=s(Oae);qco=r(NWr,"unispeech"),NWr.forEach(t),Nco=r(NAe," \u2014 "),SP=n(NAe,"A",{href:!0});var jWr=s(SP);jco=r(jWr,"Wav2Vec2Processor"),jWr.forEach(t),Dco=r(NAe," (UniSpeech model)"),NAe.forEach(t),Gco=i(Fe),qh=n(Fe,"LI",{});var jAe=s(qh);Vae=n(jAe,"STRONG",{});var DWr=s(Vae);Oco=r(DWr,"unispeech-sat"),DWr.forEach(t),Vco=r(jAe," \u2014 "),RP=n(jAe,"A",{href:!0});var GWr=s(RP);Xco=r(GWr,"Wav2Vec2Processor"),GWr.forEach(t),zco=r(jAe," (UniSpeechSat model)"),jAe.forEach(t),Qco=i(Fe),Nh=n(Fe,"LI",{});var DAe=s(Nh);Xae=n(DAe,"STRONG",{});var OWr=s(Xae);Wco=r(OWr,"vilt"),OWr.forEach(t),Hco=r(DAe," \u2014 "),BP=n(DAe,"A",{href:!0});var VWr=s(BP);Uco=r(VWr,"ViltProcessor"),VWr.forEach(t),Jco=r(DAe," (ViLT model)"),DAe.forEach(t),Yco=i(Fe),jh=n(Fe,"LI",{});var GAe=s(jh);zae=n(GAe,"STRONG",{});var XWr=s(zae);Kco=r(XWr,"vision-text-dual-encoder"),XWr.forEach(t),Zco=r(GAe," \u2014 "),PP=n(GAe,"A",{href:!0});var zWr=s(PP);emo=r(zWr,"VisionTextDualEncoderProcessor"),zWr.forEach(t),omo=r(GAe," (VisionTextDualEncoder model)"),GAe.forEach(t),rmo=i(Fe),Dh=n(Fe,"LI",{});var OAe=s(Dh);Qae=n(OAe,"STRONG",{});var QWr=s(Qae);tmo=r(QWr,"wav2vec2"),QWr.forEach(t),amo=r(OAe," \u2014 "),IP=n(OAe,"A",{href:!0});var WWr=s(IP);nmo=r(WWr,"Wav2Vec2Processor"),WWr.forEach(t),smo=r(OAe," (Wav2Vec2 model)"),OAe.forEach(t),lmo=i(Fe),Gh=n(Fe,"LI",{});var VAe=s(Gh);Wae=n(VAe,"STRONG",{});var HWr=s(Wae);imo=r(HWr,"wavlm"),HWr.forEach(t),dmo=r(VAe," \u2014 "),qP=n(VAe,"A",{href:!0});var UWr=s(qP);cmo=r(UWr,"Wav2Vec2Processor"),UWr.forEach(t),mmo=r(VAe," (WavLM model)"),VAe.forEach(t),Fe.forEach(t),fmo=i(Kt),T(Oh.$$.fragment,Kt),gmo=i(Kt),T(Vh.$$.fragment,Kt),Kt.forEach(t),hmo=i(Ns),Xh=n(Ns,"DIV",{class:!0});var nNe=s(Xh);T(My.$$.fragment,nNe),umo=i(nNe),Hae=n(nNe,"P",{});var JWr=s(Hae);pmo=r(JWr,"Register a new processor for this class."),JWr.forEach(t),nNe.forEach(t),Ns.forEach(t),rIe=i(m),Ti=n(m,"H2",{class:!0});var sNe=s(Ti);zh=n(sNe,"A",{id:!0,class:!0,href:!0});var YWr=s(zh);Uae=n(YWr,"SPAN",{});var KWr=s(Uae);T(Ey.$$.fragment,KWr),KWr.forEach(t),YWr.forEach(t),_mo=i(sNe),Jae=n(sNe,"SPAN",{});var ZWr=s(Jae);bmo=r(ZWr,"AutoModel"),ZWr.forEach(t),sNe.forEach(t),tIe=i(m),Lo=n(m,"DIV",{class:!0});var js=s(Lo);T(Cy.$$.fragment,js),Fmo=i(js),Mi=n(js,"P",{});var iK=s(Mi);vmo=r(iK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),NP=n(iK,"A",{href:!0});var eHr=s(NP);Tmo=r(eHr,"from_pretrained()"),eHr.forEach(t),Mmo=r(iK," class method or the "),jP=n(iK,"A",{href:!0});var oHr=s(jP);Emo=r(oHr,"from_config()"),oHr.forEach(t),Cmo=r(iK,` class
method.`),iK.forEach(t),wmo=i(js),wy=n(js,"P",{});var lNe=s(wy);Amo=r(lNe,"This class cannot be instantiated directly using "),Yae=n(lNe,"CODE",{});var rHr=s(Yae);ymo=r(rHr,"__init__()"),rHr.forEach(t),Lmo=r(lNe," (throws an error)."),lNe.forEach(t),xmo=i(js),ot=n(js,"DIV",{class:!0});var e6=s(ot);T(Ay.$$.fragment,e6),$mo=i(e6),Kae=n(e6,"P",{});var tHr=s(Kae);kmo=r(tHr,"Instantiates one of the base model classes of the library from a configuration."),tHr.forEach(t),Smo=i(e6),Ei=n(e6,"P",{});var dK=s(Ei);Rmo=r(dK,`Note:
Loading a model from its configuration file does `),Zae=n(dK,"STRONG",{});var aHr=s(Zae);Bmo=r(aHr,"not"),aHr.forEach(t),Pmo=r(dK,` load the model weights. It only affects the
model\u2019s configuration. Use `),DP=n(dK,"A",{href:!0});var nHr=s(DP);Imo=r(nHr,"from_pretrained()"),nHr.forEach(t),qmo=r(dK," to load the model weights."),dK.forEach(t),Nmo=i(e6),T(Qh.$$.fragment,e6),e6.forEach(t),jmo=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(yy.$$.fragment,Zt),Dmo=i(Zt),ene=n(Zt,"P",{});var sHr=s(ene);Gmo=r(sHr,"Instantiate one of the base model classes of the library from a pretrained model."),sHr.forEach(t),Omo=i(Zt),Aa=n(Zt,"P",{});var o6=s(Aa);Vmo=r(o6,"The model class to instantiate is selected based on the "),one=n(o6,"CODE",{});var lHr=s(one);Xmo=r(lHr,"model_type"),lHr.forEach(t),zmo=r(o6,` property of the config object (either
passed as an argument or loaded from `),rne=n(o6,"CODE",{});var iHr=s(rne);Qmo=r(iHr,"pretrained_model_name_or_path"),iHr.forEach(t),Wmo=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tne=n(o6,"CODE",{});var dHr=s(tne);Hmo=r(dHr,"pretrained_model_name_or_path"),dHr.forEach(t),Umo=r(o6,":"),o6.forEach(t),Jmo=i(Zt),x=n(Zt,"UL",{});var $=s(x);Wh=n($,"LI",{});var XAe=s(Wh);ane=n(XAe,"STRONG",{});var cHr=s(ane);Ymo=r(cHr,"albert"),cHr.forEach(t),Kmo=r(XAe," \u2014 "),GP=n(XAe,"A",{href:!0});var mHr=s(GP);Zmo=r(mHr,"AlbertModel"),mHr.forEach(t),efo=r(XAe," (ALBERT model)"),XAe.forEach(t),ofo=i($),Hh=n($,"LI",{});var zAe=s(Hh);nne=n(zAe,"STRONG",{});var fHr=s(nne);rfo=r(fHr,"bart"),fHr.forEach(t),tfo=r(zAe," \u2014 "),OP=n(zAe,"A",{href:!0});var gHr=s(OP);afo=r(gHr,"BartModel"),gHr.forEach(t),nfo=r(zAe," (BART model)"),zAe.forEach(t),sfo=i($),Uh=n($,"LI",{});var QAe=s(Uh);sne=n(QAe,"STRONG",{});var hHr=s(sne);lfo=r(hHr,"beit"),hHr.forEach(t),ifo=r(QAe," \u2014 "),VP=n(QAe,"A",{href:!0});var uHr=s(VP);dfo=r(uHr,"BeitModel"),uHr.forEach(t),cfo=r(QAe," (BEiT model)"),QAe.forEach(t),mfo=i($),Jh=n($,"LI",{});var WAe=s(Jh);lne=n(WAe,"STRONG",{});var pHr=s(lne);ffo=r(pHr,"bert"),pHr.forEach(t),gfo=r(WAe," \u2014 "),XP=n(WAe,"A",{href:!0});var _Hr=s(XP);hfo=r(_Hr,"BertModel"),_Hr.forEach(t),ufo=r(WAe," (BERT model)"),WAe.forEach(t),pfo=i($),Yh=n($,"LI",{});var HAe=s(Yh);ine=n(HAe,"STRONG",{});var bHr=s(ine);_fo=r(bHr,"bert-generation"),bHr.forEach(t),bfo=r(HAe," \u2014 "),zP=n(HAe,"A",{href:!0});var FHr=s(zP);Ffo=r(FHr,"BertGenerationEncoder"),FHr.forEach(t),vfo=r(HAe," (Bert Generation model)"),HAe.forEach(t),Tfo=i($),Kh=n($,"LI",{});var UAe=s(Kh);dne=n(UAe,"STRONG",{});var vHr=s(dne);Mfo=r(vHr,"big_bird"),vHr.forEach(t),Efo=r(UAe," \u2014 "),QP=n(UAe,"A",{href:!0});var THr=s(QP);Cfo=r(THr,"BigBirdModel"),THr.forEach(t),wfo=r(UAe," (BigBird model)"),UAe.forEach(t),Afo=i($),Zh=n($,"LI",{});var JAe=s(Zh);cne=n(JAe,"STRONG",{});var MHr=s(cne);yfo=r(MHr,"bigbird_pegasus"),MHr.forEach(t),Lfo=r(JAe," \u2014 "),WP=n(JAe,"A",{href:!0});var EHr=s(WP);xfo=r(EHr,"BigBirdPegasusModel"),EHr.forEach(t),$fo=r(JAe," (BigBirdPegasus model)"),JAe.forEach(t),kfo=i($),eu=n($,"LI",{});var YAe=s(eu);mne=n(YAe,"STRONG",{});var CHr=s(mne);Sfo=r(CHr,"blenderbot"),CHr.forEach(t),Rfo=r(YAe," \u2014 "),HP=n(YAe,"A",{href:!0});var wHr=s(HP);Bfo=r(wHr,"BlenderbotModel"),wHr.forEach(t),Pfo=r(YAe," (Blenderbot model)"),YAe.forEach(t),Ifo=i($),ou=n($,"LI",{});var KAe=s(ou);fne=n(KAe,"STRONG",{});var AHr=s(fne);qfo=r(AHr,"blenderbot-small"),AHr.forEach(t),Nfo=r(KAe," \u2014 "),UP=n(KAe,"A",{href:!0});var yHr=s(UP);jfo=r(yHr,"BlenderbotSmallModel"),yHr.forEach(t),Dfo=r(KAe," (BlenderbotSmall model)"),KAe.forEach(t),Gfo=i($),ru=n($,"LI",{});var ZAe=s(ru);gne=n(ZAe,"STRONG",{});var LHr=s(gne);Ofo=r(LHr,"camembert"),LHr.forEach(t),Vfo=r(ZAe," \u2014 "),JP=n(ZAe,"A",{href:!0});var xHr=s(JP);Xfo=r(xHr,"CamembertModel"),xHr.forEach(t),zfo=r(ZAe," (CamemBERT model)"),ZAe.forEach(t),Qfo=i($),tu=n($,"LI",{});var e6e=s(tu);hne=n(e6e,"STRONG",{});var $Hr=s(hne);Wfo=r($Hr,"canine"),$Hr.forEach(t),Hfo=r(e6e," \u2014 "),YP=n(e6e,"A",{href:!0});var kHr=s(YP);Ufo=r(kHr,"CanineModel"),kHr.forEach(t),Jfo=r(e6e," (Canine model)"),e6e.forEach(t),Yfo=i($),au=n($,"LI",{});var o6e=s(au);une=n(o6e,"STRONG",{});var SHr=s(une);Kfo=r(SHr,"clip"),SHr.forEach(t),Zfo=r(o6e," \u2014 "),KP=n(o6e,"A",{href:!0});var RHr=s(KP);ego=r(RHr,"CLIPModel"),RHr.forEach(t),ogo=r(o6e," (CLIP model)"),o6e.forEach(t),rgo=i($),nu=n($,"LI",{});var r6e=s(nu);pne=n(r6e,"STRONG",{});var BHr=s(pne);tgo=r(BHr,"convbert"),BHr.forEach(t),ago=r(r6e," \u2014 "),ZP=n(r6e,"A",{href:!0});var PHr=s(ZP);ngo=r(PHr,"ConvBertModel"),PHr.forEach(t),sgo=r(r6e," (ConvBERT model)"),r6e.forEach(t),lgo=i($),su=n($,"LI",{});var t6e=s(su);_ne=n(t6e,"STRONG",{});var IHr=s(_ne);igo=r(IHr,"convnext"),IHr.forEach(t),dgo=r(t6e," \u2014 "),eI=n(t6e,"A",{href:!0});var qHr=s(eI);cgo=r(qHr,"ConvNextModel"),qHr.forEach(t),mgo=r(t6e," (ConvNext model)"),t6e.forEach(t),fgo=i($),lu=n($,"LI",{});var a6e=s(lu);bne=n(a6e,"STRONG",{});var NHr=s(bne);ggo=r(NHr,"ctrl"),NHr.forEach(t),hgo=r(a6e," \u2014 "),oI=n(a6e,"A",{href:!0});var jHr=s(oI);ugo=r(jHr,"CTRLModel"),jHr.forEach(t),pgo=r(a6e," (CTRL model)"),a6e.forEach(t),_go=i($),iu=n($,"LI",{});var n6e=s(iu);Fne=n(n6e,"STRONG",{});var DHr=s(Fne);bgo=r(DHr,"data2vec-audio"),DHr.forEach(t),Fgo=r(n6e," \u2014 "),rI=n(n6e,"A",{href:!0});var GHr=s(rI);vgo=r(GHr,"Data2VecAudioModel"),GHr.forEach(t),Tgo=r(n6e," (Data2VecAudio model)"),n6e.forEach(t),Mgo=i($),du=n($,"LI",{});var s6e=s(du);vne=n(s6e,"STRONG",{});var OHr=s(vne);Ego=r(OHr,"data2vec-text"),OHr.forEach(t),Cgo=r(s6e," \u2014 "),tI=n(s6e,"A",{href:!0});var VHr=s(tI);wgo=r(VHr,"Data2VecTextModel"),VHr.forEach(t),Ago=r(s6e," (Data2VecText model)"),s6e.forEach(t),ygo=i($),cu=n($,"LI",{});var l6e=s(cu);Tne=n(l6e,"STRONG",{});var XHr=s(Tne);Lgo=r(XHr,"data2vec-vision"),XHr.forEach(t),xgo=r(l6e," \u2014 "),aI=n(l6e,"A",{href:!0});var zHr=s(aI);$go=r(zHr,"Data2VecVisionModel"),zHr.forEach(t),kgo=r(l6e," (Data2VecVision model)"),l6e.forEach(t),Sgo=i($),mu=n($,"LI",{});var i6e=s(mu);Mne=n(i6e,"STRONG",{});var QHr=s(Mne);Rgo=r(QHr,"deberta"),QHr.forEach(t),Bgo=r(i6e," \u2014 "),nI=n(i6e,"A",{href:!0});var WHr=s(nI);Pgo=r(WHr,"DebertaModel"),WHr.forEach(t),Igo=r(i6e," (DeBERTa model)"),i6e.forEach(t),qgo=i($),fu=n($,"LI",{});var d6e=s(fu);Ene=n(d6e,"STRONG",{});var HHr=s(Ene);Ngo=r(HHr,"deberta-v2"),HHr.forEach(t),jgo=r(d6e," \u2014 "),sI=n(d6e,"A",{href:!0});var UHr=s(sI);Dgo=r(UHr,"DebertaV2Model"),UHr.forEach(t),Ggo=r(d6e," (DeBERTa-v2 model)"),d6e.forEach(t),Ogo=i($),gu=n($,"LI",{});var c6e=s(gu);Cne=n(c6e,"STRONG",{});var JHr=s(Cne);Vgo=r(JHr,"decision_transformer"),JHr.forEach(t),Xgo=r(c6e," \u2014 "),lI=n(c6e,"A",{href:!0});var YHr=s(lI);zgo=r(YHr,"DecisionTransformerModel"),YHr.forEach(t),Qgo=r(c6e," (Decision Transformer model)"),c6e.forEach(t),Wgo=i($),hu=n($,"LI",{});var m6e=s(hu);wne=n(m6e,"STRONG",{});var KHr=s(wne);Hgo=r(KHr,"deit"),KHr.forEach(t),Ugo=r(m6e," \u2014 "),iI=n(m6e,"A",{href:!0});var ZHr=s(iI);Jgo=r(ZHr,"DeiTModel"),ZHr.forEach(t),Ygo=r(m6e," (DeiT model)"),m6e.forEach(t),Kgo=i($),uu=n($,"LI",{});var f6e=s(uu);Ane=n(f6e,"STRONG",{});var eUr=s(Ane);Zgo=r(eUr,"detr"),eUr.forEach(t),eho=r(f6e," \u2014 "),dI=n(f6e,"A",{href:!0});var oUr=s(dI);oho=r(oUr,"DetrModel"),oUr.forEach(t),rho=r(f6e," (DETR model)"),f6e.forEach(t),tho=i($),pu=n($,"LI",{});var g6e=s(pu);yne=n(g6e,"STRONG",{});var rUr=s(yne);aho=r(rUr,"distilbert"),rUr.forEach(t),nho=r(g6e," \u2014 "),cI=n(g6e,"A",{href:!0});var tUr=s(cI);sho=r(tUr,"DistilBertModel"),tUr.forEach(t),lho=r(g6e," (DistilBERT model)"),g6e.forEach(t),iho=i($),_u=n($,"LI",{});var h6e=s(_u);Lne=n(h6e,"STRONG",{});var aUr=s(Lne);dho=r(aUr,"dpr"),aUr.forEach(t),cho=r(h6e," \u2014 "),mI=n(h6e,"A",{href:!0});var nUr=s(mI);mho=r(nUr,"DPRQuestionEncoder"),nUr.forEach(t),fho=r(h6e," (DPR model)"),h6e.forEach(t),gho=i($),bu=n($,"LI",{});var u6e=s(bu);xne=n(u6e,"STRONG",{});var sUr=s(xne);hho=r(sUr,"dpt"),sUr.forEach(t),uho=r(u6e," \u2014 "),fI=n(u6e,"A",{href:!0});var lUr=s(fI);pho=r(lUr,"DPTModel"),lUr.forEach(t),_ho=r(u6e," (DPT model)"),u6e.forEach(t),bho=i($),Fu=n($,"LI",{});var p6e=s(Fu);$ne=n(p6e,"STRONG",{});var iUr=s($ne);Fho=r(iUr,"electra"),iUr.forEach(t),vho=r(p6e," \u2014 "),gI=n(p6e,"A",{href:!0});var dUr=s(gI);Tho=r(dUr,"ElectraModel"),dUr.forEach(t),Mho=r(p6e," (ELECTRA model)"),p6e.forEach(t),Eho=i($),vu=n($,"LI",{});var _6e=s(vu);kne=n(_6e,"STRONG",{});var cUr=s(kne);Cho=r(cUr,"flaubert"),cUr.forEach(t),who=r(_6e," \u2014 "),hI=n(_6e,"A",{href:!0});var mUr=s(hI);Aho=r(mUr,"FlaubertModel"),mUr.forEach(t),yho=r(_6e," (FlauBERT model)"),_6e.forEach(t),Lho=i($),Tu=n($,"LI",{});var b6e=s(Tu);Sne=n(b6e,"STRONG",{});var fUr=s(Sne);xho=r(fUr,"flava"),fUr.forEach(t),$ho=r(b6e," \u2014 "),uI=n(b6e,"A",{href:!0});var gUr=s(uI);kho=r(gUr,"FlavaModel"),gUr.forEach(t),Sho=r(b6e," (Flava model)"),b6e.forEach(t),Rho=i($),Mu=n($,"LI",{});var F6e=s(Mu);Rne=n(F6e,"STRONG",{});var hUr=s(Rne);Bho=r(hUr,"fnet"),hUr.forEach(t),Pho=r(F6e," \u2014 "),pI=n(F6e,"A",{href:!0});var uUr=s(pI);Iho=r(uUr,"FNetModel"),uUr.forEach(t),qho=r(F6e," (FNet model)"),F6e.forEach(t),Nho=i($),Eu=n($,"LI",{});var v6e=s(Eu);Bne=n(v6e,"STRONG",{});var pUr=s(Bne);jho=r(pUr,"fsmt"),pUr.forEach(t),Dho=r(v6e," \u2014 "),_I=n(v6e,"A",{href:!0});var _Ur=s(_I);Gho=r(_Ur,"FSMTModel"),_Ur.forEach(t),Oho=r(v6e," (FairSeq Machine-Translation model)"),v6e.forEach(t),Vho=i($),Ss=n($,"LI",{});var m$=s(Ss);Pne=n(m$,"STRONG",{});var bUr=s(Pne);Xho=r(bUr,"funnel"),bUr.forEach(t),zho=r(m$," \u2014 "),bI=n(m$,"A",{href:!0});var FUr=s(bI);Qho=r(FUr,"FunnelModel"),FUr.forEach(t),Who=r(m$," or "),FI=n(m$,"A",{href:!0});var vUr=s(FI);Hho=r(vUr,"FunnelBaseModel"),vUr.forEach(t),Uho=r(m$," (Funnel Transformer model)"),m$.forEach(t),Jho=i($),Cu=n($,"LI",{});var T6e=s(Cu);Ine=n(T6e,"STRONG",{});var TUr=s(Ine);Yho=r(TUr,"glpn"),TUr.forEach(t),Kho=r(T6e," \u2014 "),vI=n(T6e,"A",{href:!0});var MUr=s(vI);Zho=r(MUr,"GLPNModel"),MUr.forEach(t),euo=r(T6e," (GLPN model)"),T6e.forEach(t),ouo=i($),wu=n($,"LI",{});var M6e=s(wu);qne=n(M6e,"STRONG",{});var EUr=s(qne);ruo=r(EUr,"gpt2"),EUr.forEach(t),tuo=r(M6e," \u2014 "),TI=n(M6e,"A",{href:!0});var CUr=s(TI);auo=r(CUr,"GPT2Model"),CUr.forEach(t),nuo=r(M6e," (OpenAI GPT-2 model)"),M6e.forEach(t),suo=i($),Au=n($,"LI",{});var E6e=s(Au);Nne=n(E6e,"STRONG",{});var wUr=s(Nne);luo=r(wUr,"gpt_neo"),wUr.forEach(t),iuo=r(E6e," \u2014 "),MI=n(E6e,"A",{href:!0});var AUr=s(MI);duo=r(AUr,"GPTNeoModel"),AUr.forEach(t),cuo=r(E6e," (GPT Neo model)"),E6e.forEach(t),muo=i($),yu=n($,"LI",{});var C6e=s(yu);jne=n(C6e,"STRONG",{});var yUr=s(jne);fuo=r(yUr,"gptj"),yUr.forEach(t),guo=r(C6e," \u2014 "),EI=n(C6e,"A",{href:!0});var LUr=s(EI);huo=r(LUr,"GPTJModel"),LUr.forEach(t),uuo=r(C6e," (GPT-J model)"),C6e.forEach(t),puo=i($),Lu=n($,"LI",{});var w6e=s(Lu);Dne=n(w6e,"STRONG",{});var xUr=s(Dne);_uo=r(xUr,"hubert"),xUr.forEach(t),buo=r(w6e," \u2014 "),CI=n(w6e,"A",{href:!0});var $Ur=s(CI);Fuo=r($Ur,"HubertModel"),$Ur.forEach(t),vuo=r(w6e," (Hubert model)"),w6e.forEach(t),Tuo=i($),xu=n($,"LI",{});var A6e=s(xu);Gne=n(A6e,"STRONG",{});var kUr=s(Gne);Muo=r(kUr,"ibert"),kUr.forEach(t),Euo=r(A6e," \u2014 "),wI=n(A6e,"A",{href:!0});var SUr=s(wI);Cuo=r(SUr,"IBertModel"),SUr.forEach(t),wuo=r(A6e," (I-BERT model)"),A6e.forEach(t),Auo=i($),$u=n($,"LI",{});var y6e=s($u);One=n(y6e,"STRONG",{});var RUr=s(One);yuo=r(RUr,"imagegpt"),RUr.forEach(t),Luo=r(y6e," \u2014 "),AI=n(y6e,"A",{href:!0});var BUr=s(AI);xuo=r(BUr,"ImageGPTModel"),BUr.forEach(t),$uo=r(y6e," (ImageGPT model)"),y6e.forEach(t),kuo=i($),ku=n($,"LI",{});var L6e=s(ku);Vne=n(L6e,"STRONG",{});var PUr=s(Vne);Suo=r(PUr,"layoutlm"),PUr.forEach(t),Ruo=r(L6e," \u2014 "),yI=n(L6e,"A",{href:!0});var IUr=s(yI);Buo=r(IUr,"LayoutLMModel"),IUr.forEach(t),Puo=r(L6e," (LayoutLM model)"),L6e.forEach(t),Iuo=i($),Su=n($,"LI",{});var x6e=s(Su);Xne=n(x6e,"STRONG",{});var qUr=s(Xne);quo=r(qUr,"layoutlmv2"),qUr.forEach(t),Nuo=r(x6e," \u2014 "),LI=n(x6e,"A",{href:!0});var NUr=s(LI);juo=r(NUr,"LayoutLMv2Model"),NUr.forEach(t),Duo=r(x6e," (LayoutLMv2 model)"),x6e.forEach(t),Guo=i($),Ru=n($,"LI",{});var $6e=s(Ru);zne=n($6e,"STRONG",{});var jUr=s(zne);Ouo=r(jUr,"led"),jUr.forEach(t),Vuo=r($6e," \u2014 "),xI=n($6e,"A",{href:!0});var DUr=s(xI);Xuo=r(DUr,"LEDModel"),DUr.forEach(t),zuo=r($6e," (LED model)"),$6e.forEach(t),Quo=i($),Bu=n($,"LI",{});var k6e=s(Bu);Qne=n(k6e,"STRONG",{});var GUr=s(Qne);Wuo=r(GUr,"longformer"),GUr.forEach(t),Huo=r(k6e," \u2014 "),$I=n(k6e,"A",{href:!0});var OUr=s($I);Uuo=r(OUr,"LongformerModel"),OUr.forEach(t),Juo=r(k6e," (Longformer model)"),k6e.forEach(t),Yuo=i($),Pu=n($,"LI",{});var S6e=s(Pu);Wne=n(S6e,"STRONG",{});var VUr=s(Wne);Kuo=r(VUr,"luke"),VUr.forEach(t),Zuo=r(S6e," \u2014 "),kI=n(S6e,"A",{href:!0});var XUr=s(kI);epo=r(XUr,"LukeModel"),XUr.forEach(t),opo=r(S6e," (LUKE model)"),S6e.forEach(t),rpo=i($),Iu=n($,"LI",{});var R6e=s(Iu);Hne=n(R6e,"STRONG",{});var zUr=s(Hne);tpo=r(zUr,"lxmert"),zUr.forEach(t),apo=r(R6e," \u2014 "),SI=n(R6e,"A",{href:!0});var QUr=s(SI);npo=r(QUr,"LxmertModel"),QUr.forEach(t),spo=r(R6e," (LXMERT model)"),R6e.forEach(t),lpo=i($),qu=n($,"LI",{});var B6e=s(qu);Une=n(B6e,"STRONG",{});var WUr=s(Une);ipo=r(WUr,"m2m_100"),WUr.forEach(t),dpo=r(B6e," \u2014 "),RI=n(B6e,"A",{href:!0});var HUr=s(RI);cpo=r(HUr,"M2M100Model"),HUr.forEach(t),mpo=r(B6e," (M2M100 model)"),B6e.forEach(t),fpo=i($),Nu=n($,"LI",{});var P6e=s(Nu);Jne=n(P6e,"STRONG",{});var UUr=s(Jne);gpo=r(UUr,"marian"),UUr.forEach(t),hpo=r(P6e," \u2014 "),BI=n(P6e,"A",{href:!0});var JUr=s(BI);upo=r(JUr,"MarianModel"),JUr.forEach(t),ppo=r(P6e," (Marian model)"),P6e.forEach(t),_po=i($),ju=n($,"LI",{});var I6e=s(ju);Yne=n(I6e,"STRONG",{});var YUr=s(Yne);bpo=r(YUr,"maskformer"),YUr.forEach(t),Fpo=r(I6e," \u2014 "),PI=n(I6e,"A",{href:!0});var KUr=s(PI);vpo=r(KUr,"MaskFormerModel"),KUr.forEach(t),Tpo=r(I6e," (MaskFormer model)"),I6e.forEach(t),Mpo=i($),Du=n($,"LI",{});var q6e=s(Du);Kne=n(q6e,"STRONG",{});var ZUr=s(Kne);Epo=r(ZUr,"mbart"),ZUr.forEach(t),Cpo=r(q6e," \u2014 "),II=n(q6e,"A",{href:!0});var eJr=s(II);wpo=r(eJr,"MBartModel"),eJr.forEach(t),Apo=r(q6e," (mBART model)"),q6e.forEach(t),ypo=i($),Gu=n($,"LI",{});var N6e=s(Gu);Zne=n(N6e,"STRONG",{});var oJr=s(Zne);Lpo=r(oJr,"megatron-bert"),oJr.forEach(t),xpo=r(N6e," \u2014 "),qI=n(N6e,"A",{href:!0});var rJr=s(qI);$po=r(rJr,"MegatronBertModel"),rJr.forEach(t),kpo=r(N6e," (MegatronBert model)"),N6e.forEach(t),Spo=i($),Ou=n($,"LI",{});var j6e=s(Ou);ese=n(j6e,"STRONG",{});var tJr=s(ese);Rpo=r(tJr,"mobilebert"),tJr.forEach(t),Bpo=r(j6e," \u2014 "),NI=n(j6e,"A",{href:!0});var aJr=s(NI);Ppo=r(aJr,"MobileBertModel"),aJr.forEach(t),Ipo=r(j6e," (MobileBERT model)"),j6e.forEach(t),qpo=i($),Vu=n($,"LI",{});var D6e=s(Vu);ose=n(D6e,"STRONG",{});var nJr=s(ose);Npo=r(nJr,"mpnet"),nJr.forEach(t),jpo=r(D6e," \u2014 "),jI=n(D6e,"A",{href:!0});var sJr=s(jI);Dpo=r(sJr,"MPNetModel"),sJr.forEach(t),Gpo=r(D6e," (MPNet model)"),D6e.forEach(t),Opo=i($),Xu=n($,"LI",{});var G6e=s(Xu);rse=n(G6e,"STRONG",{});var lJr=s(rse);Vpo=r(lJr,"mt5"),lJr.forEach(t),Xpo=r(G6e," \u2014 "),DI=n(G6e,"A",{href:!0});var iJr=s(DI);zpo=r(iJr,"MT5Model"),iJr.forEach(t),Qpo=r(G6e," (mT5 model)"),G6e.forEach(t),Wpo=i($),zu=n($,"LI",{});var O6e=s(zu);tse=n(O6e,"STRONG",{});var dJr=s(tse);Hpo=r(dJr,"nystromformer"),dJr.forEach(t),Upo=r(O6e," \u2014 "),GI=n(O6e,"A",{href:!0});var cJr=s(GI);Jpo=r(cJr,"NystromformerModel"),cJr.forEach(t),Ypo=r(O6e," (Nystromformer model)"),O6e.forEach(t),Kpo=i($),Qu=n($,"LI",{});var V6e=s(Qu);ase=n(V6e,"STRONG",{});var mJr=s(ase);Zpo=r(mJr,"openai-gpt"),mJr.forEach(t),e_o=r(V6e," \u2014 "),OI=n(V6e,"A",{href:!0});var fJr=s(OI);o_o=r(fJr,"OpenAIGPTModel"),fJr.forEach(t),r_o=r(V6e," (OpenAI GPT model)"),V6e.forEach(t),t_o=i($),Wu=n($,"LI",{});var X6e=s(Wu);nse=n(X6e,"STRONG",{});var gJr=s(nse);a_o=r(gJr,"opt"),gJr.forEach(t),n_o=r(X6e," \u2014 "),VI=n(X6e,"A",{href:!0});var hJr=s(VI);s_o=r(hJr,"OPTModel"),hJr.forEach(t),l_o=r(X6e," (OPT model)"),X6e.forEach(t),i_o=i($),Hu=n($,"LI",{});var z6e=s(Hu);sse=n(z6e,"STRONG",{});var uJr=s(sse);d_o=r(uJr,"pegasus"),uJr.forEach(t),c_o=r(z6e," \u2014 "),XI=n(z6e,"A",{href:!0});var pJr=s(XI);m_o=r(pJr,"PegasusModel"),pJr.forEach(t),f_o=r(z6e," (Pegasus model)"),z6e.forEach(t),g_o=i($),Uu=n($,"LI",{});var Q6e=s(Uu);lse=n(Q6e,"STRONG",{});var _Jr=s(lse);h_o=r(_Jr,"perceiver"),_Jr.forEach(t),u_o=r(Q6e," \u2014 "),zI=n(Q6e,"A",{href:!0});var bJr=s(zI);p_o=r(bJr,"PerceiverModel"),bJr.forEach(t),__o=r(Q6e," (Perceiver model)"),Q6e.forEach(t),b_o=i($),Ju=n($,"LI",{});var W6e=s(Ju);ise=n(W6e,"STRONG",{});var FJr=s(ise);F_o=r(FJr,"plbart"),FJr.forEach(t),v_o=r(W6e," \u2014 "),QI=n(W6e,"A",{href:!0});var vJr=s(QI);T_o=r(vJr,"PLBartModel"),vJr.forEach(t),M_o=r(W6e," (PLBart model)"),W6e.forEach(t),E_o=i($),Yu=n($,"LI",{});var H6e=s(Yu);dse=n(H6e,"STRONG",{});var TJr=s(dse);C_o=r(TJr,"poolformer"),TJr.forEach(t),w_o=r(H6e," \u2014 "),WI=n(H6e,"A",{href:!0});var MJr=s(WI);A_o=r(MJr,"PoolFormerModel"),MJr.forEach(t),y_o=r(H6e," (PoolFormer model)"),H6e.forEach(t),L_o=i($),Ku=n($,"LI",{});var U6e=s(Ku);cse=n(U6e,"STRONG",{});var EJr=s(cse);x_o=r(EJr,"prophetnet"),EJr.forEach(t),$_o=r(U6e," \u2014 "),HI=n(U6e,"A",{href:!0});var CJr=s(HI);k_o=r(CJr,"ProphetNetModel"),CJr.forEach(t),S_o=r(U6e," (ProphetNet model)"),U6e.forEach(t),R_o=i($),Zu=n($,"LI",{});var J6e=s(Zu);mse=n(J6e,"STRONG",{});var wJr=s(mse);B_o=r(wJr,"qdqbert"),wJr.forEach(t),P_o=r(J6e," \u2014 "),UI=n(J6e,"A",{href:!0});var AJr=s(UI);I_o=r(AJr,"QDQBertModel"),AJr.forEach(t),q_o=r(J6e," (QDQBert model)"),J6e.forEach(t),N_o=i($),ep=n($,"LI",{});var Y6e=s(ep);fse=n(Y6e,"STRONG",{});var yJr=s(fse);j_o=r(yJr,"reformer"),yJr.forEach(t),D_o=r(Y6e," \u2014 "),JI=n(Y6e,"A",{href:!0});var LJr=s(JI);G_o=r(LJr,"ReformerModel"),LJr.forEach(t),O_o=r(Y6e," (Reformer model)"),Y6e.forEach(t),V_o=i($),op=n($,"LI",{});var K6e=s(op);gse=n(K6e,"STRONG",{});var xJr=s(gse);X_o=r(xJr,"regnet"),xJr.forEach(t),z_o=r(K6e," \u2014 "),YI=n(K6e,"A",{href:!0});var $Jr=s(YI);Q_o=r($Jr,"RegNetModel"),$Jr.forEach(t),W_o=r(K6e," (RegNet model)"),K6e.forEach(t),H_o=i($),rp=n($,"LI",{});var Z6e=s(rp);hse=n(Z6e,"STRONG",{});var kJr=s(hse);U_o=r(kJr,"rembert"),kJr.forEach(t),J_o=r(Z6e," \u2014 "),KI=n(Z6e,"A",{href:!0});var SJr=s(KI);Y_o=r(SJr,"RemBertModel"),SJr.forEach(t),K_o=r(Z6e," (RemBERT model)"),Z6e.forEach(t),Z_o=i($),tp=n($,"LI",{});var e0e=s(tp);use=n(e0e,"STRONG",{});var RJr=s(use);ebo=r(RJr,"resnet"),RJr.forEach(t),obo=r(e0e," \u2014 "),ZI=n(e0e,"A",{href:!0});var BJr=s(ZI);rbo=r(BJr,"ResNetModel"),BJr.forEach(t),tbo=r(e0e," (ResNet model)"),e0e.forEach(t),abo=i($),ap=n($,"LI",{});var o0e=s(ap);pse=n(o0e,"STRONG",{});var PJr=s(pse);nbo=r(PJr,"retribert"),PJr.forEach(t),sbo=r(o0e," \u2014 "),eq=n(o0e,"A",{href:!0});var IJr=s(eq);lbo=r(IJr,"RetriBertModel"),IJr.forEach(t),ibo=r(o0e," (RetriBERT model)"),o0e.forEach(t),dbo=i($),np=n($,"LI",{});var r0e=s(np);_se=n(r0e,"STRONG",{});var qJr=s(_se);cbo=r(qJr,"roberta"),qJr.forEach(t),mbo=r(r0e," \u2014 "),oq=n(r0e,"A",{href:!0});var NJr=s(oq);fbo=r(NJr,"RobertaModel"),NJr.forEach(t),gbo=r(r0e," (RoBERTa model)"),r0e.forEach(t),hbo=i($),sp=n($,"LI",{});var t0e=s(sp);bse=n(t0e,"STRONG",{});var jJr=s(bse);ubo=r(jJr,"roformer"),jJr.forEach(t),pbo=r(t0e," \u2014 "),rq=n(t0e,"A",{href:!0});var DJr=s(rq);_bo=r(DJr,"RoFormerModel"),DJr.forEach(t),bbo=r(t0e," (RoFormer model)"),t0e.forEach(t),Fbo=i($),lp=n($,"LI",{});var a0e=s(lp);Fse=n(a0e,"STRONG",{});var GJr=s(Fse);vbo=r(GJr,"segformer"),GJr.forEach(t),Tbo=r(a0e," \u2014 "),tq=n(a0e,"A",{href:!0});var OJr=s(tq);Mbo=r(OJr,"SegformerModel"),OJr.forEach(t),Ebo=r(a0e," (SegFormer model)"),a0e.forEach(t),Cbo=i($),ip=n($,"LI",{});var n0e=s(ip);vse=n(n0e,"STRONG",{});var VJr=s(vse);wbo=r(VJr,"sew"),VJr.forEach(t),Abo=r(n0e," \u2014 "),aq=n(n0e,"A",{href:!0});var XJr=s(aq);ybo=r(XJr,"SEWModel"),XJr.forEach(t),Lbo=r(n0e," (SEW model)"),n0e.forEach(t),xbo=i($),dp=n($,"LI",{});var s0e=s(dp);Tse=n(s0e,"STRONG",{});var zJr=s(Tse);$bo=r(zJr,"sew-d"),zJr.forEach(t),kbo=r(s0e," \u2014 "),nq=n(s0e,"A",{href:!0});var QJr=s(nq);Sbo=r(QJr,"SEWDModel"),QJr.forEach(t),Rbo=r(s0e," (SEW-D model)"),s0e.forEach(t),Bbo=i($),cp=n($,"LI",{});var l0e=s(cp);Mse=n(l0e,"STRONG",{});var WJr=s(Mse);Pbo=r(WJr,"speech_to_text"),WJr.forEach(t),Ibo=r(l0e," \u2014 "),sq=n(l0e,"A",{href:!0});var HJr=s(sq);qbo=r(HJr,"Speech2TextModel"),HJr.forEach(t),Nbo=r(l0e," (Speech2Text model)"),l0e.forEach(t),jbo=i($),mp=n($,"LI",{});var i0e=s(mp);Ese=n(i0e,"STRONG",{});var UJr=s(Ese);Dbo=r(UJr,"splinter"),UJr.forEach(t),Gbo=r(i0e," \u2014 "),lq=n(i0e,"A",{href:!0});var JJr=s(lq);Obo=r(JJr,"SplinterModel"),JJr.forEach(t),Vbo=r(i0e," (Splinter model)"),i0e.forEach(t),Xbo=i($),fp=n($,"LI",{});var d0e=s(fp);Cse=n(d0e,"STRONG",{});var YJr=s(Cse);zbo=r(YJr,"squeezebert"),YJr.forEach(t),Qbo=r(d0e," \u2014 "),iq=n(d0e,"A",{href:!0});var KJr=s(iq);Wbo=r(KJr,"SqueezeBertModel"),KJr.forEach(t),Hbo=r(d0e," (SqueezeBERT model)"),d0e.forEach(t),Ubo=i($),gp=n($,"LI",{});var c0e=s(gp);wse=n(c0e,"STRONG",{});var ZJr=s(wse);Jbo=r(ZJr,"swin"),ZJr.forEach(t),Ybo=r(c0e," \u2014 "),dq=n(c0e,"A",{href:!0});var eYr=s(dq);Kbo=r(eYr,"SwinModel"),eYr.forEach(t),Zbo=r(c0e," (Swin model)"),c0e.forEach(t),e2o=i($),hp=n($,"LI",{});var m0e=s(hp);Ase=n(m0e,"STRONG",{});var oYr=s(Ase);o2o=r(oYr,"t5"),oYr.forEach(t),r2o=r(m0e," \u2014 "),cq=n(m0e,"A",{href:!0});var rYr=s(cq);t2o=r(rYr,"T5Model"),rYr.forEach(t),a2o=r(m0e," (T5 model)"),m0e.forEach(t),n2o=i($),up=n($,"LI",{});var f0e=s(up);yse=n(f0e,"STRONG",{});var tYr=s(yse);s2o=r(tYr,"tapas"),tYr.forEach(t),l2o=r(f0e," \u2014 "),mq=n(f0e,"A",{href:!0});var aYr=s(mq);i2o=r(aYr,"TapasModel"),aYr.forEach(t),d2o=r(f0e," (TAPAS model)"),f0e.forEach(t),c2o=i($),pp=n($,"LI",{});var g0e=s(pp);Lse=n(g0e,"STRONG",{});var nYr=s(Lse);m2o=r(nYr,"transfo-xl"),nYr.forEach(t),f2o=r(g0e," \u2014 "),fq=n(g0e,"A",{href:!0});var sYr=s(fq);g2o=r(sYr,"TransfoXLModel"),sYr.forEach(t),h2o=r(g0e," (Transformer-XL model)"),g0e.forEach(t),u2o=i($),_p=n($,"LI",{});var h0e=s(_p);xse=n(h0e,"STRONG",{});var lYr=s(xse);p2o=r(lYr,"unispeech"),lYr.forEach(t),_2o=r(h0e," \u2014 "),gq=n(h0e,"A",{href:!0});var iYr=s(gq);b2o=r(iYr,"UniSpeechModel"),iYr.forEach(t),F2o=r(h0e," (UniSpeech model)"),h0e.forEach(t),v2o=i($),bp=n($,"LI",{});var u0e=s(bp);$se=n(u0e,"STRONG",{});var dYr=s($se);T2o=r(dYr,"unispeech-sat"),dYr.forEach(t),M2o=r(u0e," \u2014 "),hq=n(u0e,"A",{href:!0});var cYr=s(hq);E2o=r(cYr,"UniSpeechSatModel"),cYr.forEach(t),C2o=r(u0e," (UniSpeechSat model)"),u0e.forEach(t),w2o=i($),Fp=n($,"LI",{});var p0e=s(Fp);kse=n(p0e,"STRONG",{});var mYr=s(kse);A2o=r(mYr,"van"),mYr.forEach(t),y2o=r(p0e," \u2014 "),uq=n(p0e,"A",{href:!0});var fYr=s(uq);L2o=r(fYr,"VanModel"),fYr.forEach(t),x2o=r(p0e," (VAN model)"),p0e.forEach(t),$2o=i($),vp=n($,"LI",{});var _0e=s(vp);Sse=n(_0e,"STRONG",{});var gYr=s(Sse);k2o=r(gYr,"vilt"),gYr.forEach(t),S2o=r(_0e," \u2014 "),pq=n(_0e,"A",{href:!0});var hYr=s(pq);R2o=r(hYr,"ViltModel"),hYr.forEach(t),B2o=r(_0e," (ViLT model)"),_0e.forEach(t),P2o=i($),Tp=n($,"LI",{});var b0e=s(Tp);Rse=n(b0e,"STRONG",{});var uYr=s(Rse);I2o=r(uYr,"vision-text-dual-encoder"),uYr.forEach(t),q2o=r(b0e," \u2014 "),_q=n(b0e,"A",{href:!0});var pYr=s(_q);N2o=r(pYr,"VisionTextDualEncoderModel"),pYr.forEach(t),j2o=r(b0e," (VisionTextDualEncoder model)"),b0e.forEach(t),D2o=i($),Mp=n($,"LI",{});var F0e=s(Mp);Bse=n(F0e,"STRONG",{});var _Yr=s(Bse);G2o=r(_Yr,"visual_bert"),_Yr.forEach(t),O2o=r(F0e," \u2014 "),bq=n(F0e,"A",{href:!0});var bYr=s(bq);V2o=r(bYr,"VisualBertModel"),bYr.forEach(t),X2o=r(F0e," (VisualBert model)"),F0e.forEach(t),z2o=i($),Ep=n($,"LI",{});var v0e=s(Ep);Pse=n(v0e,"STRONG",{});var FYr=s(Pse);Q2o=r(FYr,"vit"),FYr.forEach(t),W2o=r(v0e," \u2014 "),Fq=n(v0e,"A",{href:!0});var vYr=s(Fq);H2o=r(vYr,"ViTModel"),vYr.forEach(t),U2o=r(v0e," (ViT model)"),v0e.forEach(t),J2o=i($),Cp=n($,"LI",{});var T0e=s(Cp);Ise=n(T0e,"STRONG",{});var TYr=s(Ise);Y2o=r(TYr,"vit_mae"),TYr.forEach(t),K2o=r(T0e," \u2014 "),vq=n(T0e,"A",{href:!0});var MYr=s(vq);Z2o=r(MYr,"ViTMAEModel"),MYr.forEach(t),eFo=r(T0e," (ViTMAE model)"),T0e.forEach(t),oFo=i($),wp=n($,"LI",{});var M0e=s(wp);qse=n(M0e,"STRONG",{});var EYr=s(qse);rFo=r(EYr,"wav2vec2"),EYr.forEach(t),tFo=r(M0e," \u2014 "),Tq=n(M0e,"A",{href:!0});var CYr=s(Tq);aFo=r(CYr,"Wav2Vec2Model"),CYr.forEach(t),nFo=r(M0e," (Wav2Vec2 model)"),M0e.forEach(t),sFo=i($),Ap=n($,"LI",{});var E0e=s(Ap);Nse=n(E0e,"STRONG",{});var wYr=s(Nse);lFo=r(wYr,"wavlm"),wYr.forEach(t),iFo=r(E0e," \u2014 "),Mq=n(E0e,"A",{href:!0});var AYr=s(Mq);dFo=r(AYr,"WavLMModel"),AYr.forEach(t),cFo=r(E0e," (WavLM model)"),E0e.forEach(t),mFo=i($),yp=n($,"LI",{});var C0e=s(yp);jse=n(C0e,"STRONG",{});var yYr=s(jse);fFo=r(yYr,"xglm"),yYr.forEach(t),gFo=r(C0e," \u2014 "),Eq=n(C0e,"A",{href:!0});var LYr=s(Eq);hFo=r(LYr,"XGLMModel"),LYr.forEach(t),uFo=r(C0e," (XGLM model)"),C0e.forEach(t),pFo=i($),Lp=n($,"LI",{});var w0e=s(Lp);Dse=n(w0e,"STRONG",{});var xYr=s(Dse);_Fo=r(xYr,"xlm"),xYr.forEach(t),bFo=r(w0e," \u2014 "),Cq=n(w0e,"A",{href:!0});var $Yr=s(Cq);FFo=r($Yr,"XLMModel"),$Yr.forEach(t),vFo=r(w0e," (XLM model)"),w0e.forEach(t),TFo=i($),xp=n($,"LI",{});var A0e=s(xp);Gse=n(A0e,"STRONG",{});var kYr=s(Gse);MFo=r(kYr,"xlm-prophetnet"),kYr.forEach(t),EFo=r(A0e," \u2014 "),wq=n(A0e,"A",{href:!0});var SYr=s(wq);CFo=r(SYr,"XLMProphetNetModel"),SYr.forEach(t),wFo=r(A0e," (XLMProphetNet model)"),A0e.forEach(t),AFo=i($),$p=n($,"LI",{});var y0e=s($p);Ose=n(y0e,"STRONG",{});var RYr=s(Ose);yFo=r(RYr,"xlm-roberta"),RYr.forEach(t),LFo=r(y0e," \u2014 "),Aq=n(y0e,"A",{href:!0});var BYr=s(Aq);xFo=r(BYr,"XLMRobertaModel"),BYr.forEach(t),$Fo=r(y0e," (XLM-RoBERTa model)"),y0e.forEach(t),kFo=i($),kp=n($,"LI",{});var L0e=s(kp);Vse=n(L0e,"STRONG",{});var PYr=s(Vse);SFo=r(PYr,"xlm-roberta-xl"),PYr.forEach(t),RFo=r(L0e," \u2014 "),yq=n(L0e,"A",{href:!0});var IYr=s(yq);BFo=r(IYr,"XLMRobertaXLModel"),IYr.forEach(t),PFo=r(L0e," (XLM-RoBERTa-XL model)"),L0e.forEach(t),IFo=i($),Sp=n($,"LI",{});var x0e=s(Sp);Xse=n(x0e,"STRONG",{});var qYr=s(Xse);qFo=r(qYr,"xlnet"),qYr.forEach(t),NFo=r(x0e," \u2014 "),Lq=n(x0e,"A",{href:!0});var NYr=s(Lq);jFo=r(NYr,"XLNetModel"),NYr.forEach(t),DFo=r(x0e," (XLNet model)"),x0e.forEach(t),GFo=i($),Rp=n($,"LI",{});var $0e=s(Rp);zse=n($0e,"STRONG",{});var jYr=s(zse);OFo=r(jYr,"yolos"),jYr.forEach(t),VFo=r($0e," \u2014 "),xq=n($0e,"A",{href:!0});var DYr=s(xq);XFo=r(DYr,"YolosModel"),DYr.forEach(t),zFo=r($0e," (YOLOS model)"),$0e.forEach(t),QFo=i($),Bp=n($,"LI",{});var k0e=s(Bp);Qse=n(k0e,"STRONG",{});var GYr=s(Qse);WFo=r(GYr,"yoso"),GYr.forEach(t),HFo=r(k0e," \u2014 "),$q=n(k0e,"A",{href:!0});var OYr=s($q);UFo=r(OYr,"YosoModel"),OYr.forEach(t),JFo=r(k0e," (YOSO model)"),k0e.forEach(t),$.forEach(t),YFo=i(Zt),Pp=n(Zt,"P",{});var S0e=s(Pp);KFo=r(S0e,"The model is set in evaluation mode by default using "),Wse=n(S0e,"CODE",{});var VYr=s(Wse);ZFo=r(VYr,"model.eval()"),VYr.forEach(t),evo=r(S0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hse=n(S0e,"CODE",{});var XYr=s(Hse);ovo=r(XYr,"model.train()"),XYr.forEach(t),S0e.forEach(t),rvo=i(Zt),T(Ip.$$.fragment,Zt),Zt.forEach(t),js.forEach(t),aIe=i(m),Ci=n(m,"H2",{class:!0});var iNe=s(Ci);qp=n(iNe,"A",{id:!0,class:!0,href:!0});var zYr=s(qp);Use=n(zYr,"SPAN",{});var QYr=s(Use);T(Ly.$$.fragment,QYr),QYr.forEach(t),zYr.forEach(t),tvo=i(iNe),Jse=n(iNe,"SPAN",{});var WYr=s(Jse);avo=r(WYr,"AutoModelForPreTraining"),WYr.forEach(t),iNe.forEach(t),nIe=i(m),xo=n(m,"DIV",{class:!0});var Ds=s(xo);T(xy.$$.fragment,Ds),nvo=i(Ds),wi=n(Ds,"P",{});var cK=s(wi);svo=r(cK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kq=n(cK,"A",{href:!0});var HYr=s(kq);lvo=r(HYr,"from_pretrained()"),HYr.forEach(t),ivo=r(cK," class method or the "),Sq=n(cK,"A",{href:!0});var UYr=s(Sq);dvo=r(UYr,"from_config()"),UYr.forEach(t),cvo=r(cK,` class
method.`),cK.forEach(t),mvo=i(Ds),$y=n(Ds,"P",{});var dNe=s($y);fvo=r(dNe,"This class cannot be instantiated directly using "),Yse=n(dNe,"CODE",{});var JYr=s(Yse);gvo=r(JYr,"__init__()"),JYr.forEach(t),hvo=r(dNe," (throws an error)."),dNe.forEach(t),uvo=i(Ds),rt=n(Ds,"DIV",{class:!0});var r6=s(rt);T(ky.$$.fragment,r6),pvo=i(r6),Kse=n(r6,"P",{});var YYr=s(Kse);_vo=r(YYr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),YYr.forEach(t),bvo=i(r6),Ai=n(r6,"P",{});var mK=s(Ai);Fvo=r(mK,`Note:
Loading a model from its configuration file does `),Zse=n(mK,"STRONG",{});var KYr=s(Zse);vvo=r(KYr,"not"),KYr.forEach(t),Tvo=r(mK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rq=n(mK,"A",{href:!0});var ZYr=s(Rq);Mvo=r(ZYr,"from_pretrained()"),ZYr.forEach(t),Evo=r(mK," to load the model weights."),mK.forEach(t),Cvo=i(r6),T(Np.$$.fragment,r6),r6.forEach(t),wvo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(Sy.$$.fragment,ea),Avo=i(ea),ele=n(ea,"P",{});var eKr=s(ele);yvo=r(eKr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),eKr.forEach(t),Lvo=i(ea),ya=n(ea,"P",{});var t6=s(ya);xvo=r(t6,"The model class to instantiate is selected based on the "),ole=n(t6,"CODE",{});var oKr=s(ole);$vo=r(oKr,"model_type"),oKr.forEach(t),kvo=r(t6,` property of the config object (either
passed as an argument or loaded from `),rle=n(t6,"CODE",{});var rKr=s(rle);Svo=r(rKr,"pretrained_model_name_or_path"),rKr.forEach(t),Rvo=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tle=n(t6,"CODE",{});var tKr=s(tle);Bvo=r(tKr,"pretrained_model_name_or_path"),tKr.forEach(t),Pvo=r(t6,":"),t6.forEach(t),Ivo=i(ea),G=n(ea,"UL",{});var V=s(G);jp=n(V,"LI",{});var R0e=s(jp);ale=n(R0e,"STRONG",{});var aKr=s(ale);qvo=r(aKr,"albert"),aKr.forEach(t),Nvo=r(R0e," \u2014 "),Bq=n(R0e,"A",{href:!0});var nKr=s(Bq);jvo=r(nKr,"AlbertForPreTraining"),nKr.forEach(t),Dvo=r(R0e," (ALBERT model)"),R0e.forEach(t),Gvo=i(V),Dp=n(V,"LI",{});var B0e=s(Dp);nle=n(B0e,"STRONG",{});var sKr=s(nle);Ovo=r(sKr,"bart"),sKr.forEach(t),Vvo=r(B0e," \u2014 "),Pq=n(B0e,"A",{href:!0});var lKr=s(Pq);Xvo=r(lKr,"BartForConditionalGeneration"),lKr.forEach(t),zvo=r(B0e," (BART model)"),B0e.forEach(t),Qvo=i(V),Gp=n(V,"LI",{});var P0e=s(Gp);sle=n(P0e,"STRONG",{});var iKr=s(sle);Wvo=r(iKr,"bert"),iKr.forEach(t),Hvo=r(P0e," \u2014 "),Iq=n(P0e,"A",{href:!0});var dKr=s(Iq);Uvo=r(dKr,"BertForPreTraining"),dKr.forEach(t),Jvo=r(P0e," (BERT model)"),P0e.forEach(t),Yvo=i(V),Op=n(V,"LI",{});var I0e=s(Op);lle=n(I0e,"STRONG",{});var cKr=s(lle);Kvo=r(cKr,"big_bird"),cKr.forEach(t),Zvo=r(I0e," \u2014 "),qq=n(I0e,"A",{href:!0});var mKr=s(qq);e1o=r(mKr,"BigBirdForPreTraining"),mKr.forEach(t),o1o=r(I0e," (BigBird model)"),I0e.forEach(t),r1o=i(V),Vp=n(V,"LI",{});var q0e=s(Vp);ile=n(q0e,"STRONG",{});var fKr=s(ile);t1o=r(fKr,"camembert"),fKr.forEach(t),a1o=r(q0e," \u2014 "),Nq=n(q0e,"A",{href:!0});var gKr=s(Nq);n1o=r(gKr,"CamembertForMaskedLM"),gKr.forEach(t),s1o=r(q0e," (CamemBERT model)"),q0e.forEach(t),l1o=i(V),Xp=n(V,"LI",{});var N0e=s(Xp);dle=n(N0e,"STRONG",{});var hKr=s(dle);i1o=r(hKr,"ctrl"),hKr.forEach(t),d1o=r(N0e," \u2014 "),jq=n(N0e,"A",{href:!0});var uKr=s(jq);c1o=r(uKr,"CTRLLMHeadModel"),uKr.forEach(t),m1o=r(N0e," (CTRL model)"),N0e.forEach(t),f1o=i(V),zp=n(V,"LI",{});var j0e=s(zp);cle=n(j0e,"STRONG",{});var pKr=s(cle);g1o=r(pKr,"data2vec-text"),pKr.forEach(t),h1o=r(j0e," \u2014 "),Dq=n(j0e,"A",{href:!0});var _Kr=s(Dq);u1o=r(_Kr,"Data2VecTextForMaskedLM"),_Kr.forEach(t),p1o=r(j0e," (Data2VecText model)"),j0e.forEach(t),_1o=i(V),Qp=n(V,"LI",{});var D0e=s(Qp);mle=n(D0e,"STRONG",{});var bKr=s(mle);b1o=r(bKr,"deberta"),bKr.forEach(t),F1o=r(D0e," \u2014 "),Gq=n(D0e,"A",{href:!0});var FKr=s(Gq);v1o=r(FKr,"DebertaForMaskedLM"),FKr.forEach(t),T1o=r(D0e," (DeBERTa model)"),D0e.forEach(t),M1o=i(V),Wp=n(V,"LI",{});var G0e=s(Wp);fle=n(G0e,"STRONG",{});var vKr=s(fle);E1o=r(vKr,"deberta-v2"),vKr.forEach(t),C1o=r(G0e," \u2014 "),Oq=n(G0e,"A",{href:!0});var TKr=s(Oq);w1o=r(TKr,"DebertaV2ForMaskedLM"),TKr.forEach(t),A1o=r(G0e," (DeBERTa-v2 model)"),G0e.forEach(t),y1o=i(V),Hp=n(V,"LI",{});var O0e=s(Hp);gle=n(O0e,"STRONG",{});var MKr=s(gle);L1o=r(MKr,"distilbert"),MKr.forEach(t),x1o=r(O0e," \u2014 "),Vq=n(O0e,"A",{href:!0});var EKr=s(Vq);$1o=r(EKr,"DistilBertForMaskedLM"),EKr.forEach(t),k1o=r(O0e," (DistilBERT model)"),O0e.forEach(t),S1o=i(V),Up=n(V,"LI",{});var V0e=s(Up);hle=n(V0e,"STRONG",{});var CKr=s(hle);R1o=r(CKr,"electra"),CKr.forEach(t),B1o=r(V0e," \u2014 "),Xq=n(V0e,"A",{href:!0});var wKr=s(Xq);P1o=r(wKr,"ElectraForPreTraining"),wKr.forEach(t),I1o=r(V0e," (ELECTRA model)"),V0e.forEach(t),q1o=i(V),Jp=n(V,"LI",{});var X0e=s(Jp);ule=n(X0e,"STRONG",{});var AKr=s(ule);N1o=r(AKr,"flaubert"),AKr.forEach(t),j1o=r(X0e," \u2014 "),zq=n(X0e,"A",{href:!0});var yKr=s(zq);D1o=r(yKr,"FlaubertWithLMHeadModel"),yKr.forEach(t),G1o=r(X0e," (FlauBERT model)"),X0e.forEach(t),O1o=i(V),Yp=n(V,"LI",{});var z0e=s(Yp);ple=n(z0e,"STRONG",{});var LKr=s(ple);V1o=r(LKr,"flava"),LKr.forEach(t),X1o=r(z0e," \u2014 "),Qq=n(z0e,"A",{href:!0});var xKr=s(Qq);z1o=r(xKr,"FlavaForPreTraining"),xKr.forEach(t),Q1o=r(z0e," (Flava model)"),z0e.forEach(t),W1o=i(V),Kp=n(V,"LI",{});var Q0e=s(Kp);_le=n(Q0e,"STRONG",{});var $Kr=s(_le);H1o=r($Kr,"fnet"),$Kr.forEach(t),U1o=r(Q0e," \u2014 "),Wq=n(Q0e,"A",{href:!0});var kKr=s(Wq);J1o=r(kKr,"FNetForPreTraining"),kKr.forEach(t),Y1o=r(Q0e," (FNet model)"),Q0e.forEach(t),K1o=i(V),Zp=n(V,"LI",{});var W0e=s(Zp);ble=n(W0e,"STRONG",{});var SKr=s(ble);Z1o=r(SKr,"fsmt"),SKr.forEach(t),eTo=r(W0e," \u2014 "),Hq=n(W0e,"A",{href:!0});var RKr=s(Hq);oTo=r(RKr,"FSMTForConditionalGeneration"),RKr.forEach(t),rTo=r(W0e," (FairSeq Machine-Translation model)"),W0e.forEach(t),tTo=i(V),e_=n(V,"LI",{});var H0e=s(e_);Fle=n(H0e,"STRONG",{});var BKr=s(Fle);aTo=r(BKr,"funnel"),BKr.forEach(t),nTo=r(H0e," \u2014 "),Uq=n(H0e,"A",{href:!0});var PKr=s(Uq);sTo=r(PKr,"FunnelForPreTraining"),PKr.forEach(t),lTo=r(H0e," (Funnel Transformer model)"),H0e.forEach(t),iTo=i(V),o_=n(V,"LI",{});var U0e=s(o_);vle=n(U0e,"STRONG",{});var IKr=s(vle);dTo=r(IKr,"gpt2"),IKr.forEach(t),cTo=r(U0e," \u2014 "),Jq=n(U0e,"A",{href:!0});var qKr=s(Jq);mTo=r(qKr,"GPT2LMHeadModel"),qKr.forEach(t),fTo=r(U0e," (OpenAI GPT-2 model)"),U0e.forEach(t),gTo=i(V),r_=n(V,"LI",{});var J0e=s(r_);Tle=n(J0e,"STRONG",{});var NKr=s(Tle);hTo=r(NKr,"ibert"),NKr.forEach(t),uTo=r(J0e," \u2014 "),Yq=n(J0e,"A",{href:!0});var jKr=s(Yq);pTo=r(jKr,"IBertForMaskedLM"),jKr.forEach(t),_To=r(J0e," (I-BERT model)"),J0e.forEach(t),bTo=i(V),t_=n(V,"LI",{});var Y0e=s(t_);Mle=n(Y0e,"STRONG",{});var DKr=s(Mle);FTo=r(DKr,"layoutlm"),DKr.forEach(t),vTo=r(Y0e," \u2014 "),Kq=n(Y0e,"A",{href:!0});var GKr=s(Kq);TTo=r(GKr,"LayoutLMForMaskedLM"),GKr.forEach(t),MTo=r(Y0e," (LayoutLM model)"),Y0e.forEach(t),ETo=i(V),a_=n(V,"LI",{});var K0e=s(a_);Ele=n(K0e,"STRONG",{});var OKr=s(Ele);CTo=r(OKr,"longformer"),OKr.forEach(t),wTo=r(K0e," \u2014 "),Zq=n(K0e,"A",{href:!0});var VKr=s(Zq);ATo=r(VKr,"LongformerForMaskedLM"),VKr.forEach(t),yTo=r(K0e," (Longformer model)"),K0e.forEach(t),LTo=i(V),n_=n(V,"LI",{});var Z0e=s(n_);Cle=n(Z0e,"STRONG",{});var XKr=s(Cle);xTo=r(XKr,"lxmert"),XKr.forEach(t),$To=r(Z0e," \u2014 "),eN=n(Z0e,"A",{href:!0});var zKr=s(eN);kTo=r(zKr,"LxmertForPreTraining"),zKr.forEach(t),STo=r(Z0e," (LXMERT model)"),Z0e.forEach(t),RTo=i(V),s_=n(V,"LI",{});var eye=s(s_);wle=n(eye,"STRONG",{});var QKr=s(wle);BTo=r(QKr,"megatron-bert"),QKr.forEach(t),PTo=r(eye," \u2014 "),oN=n(eye,"A",{href:!0});var WKr=s(oN);ITo=r(WKr,"MegatronBertForPreTraining"),WKr.forEach(t),qTo=r(eye," (MegatronBert model)"),eye.forEach(t),NTo=i(V),l_=n(V,"LI",{});var oye=s(l_);Ale=n(oye,"STRONG",{});var HKr=s(Ale);jTo=r(HKr,"mobilebert"),HKr.forEach(t),DTo=r(oye," \u2014 "),rN=n(oye,"A",{href:!0});var UKr=s(rN);GTo=r(UKr,"MobileBertForPreTraining"),UKr.forEach(t),OTo=r(oye," (MobileBERT model)"),oye.forEach(t),VTo=i(V),i_=n(V,"LI",{});var rye=s(i_);yle=n(rye,"STRONG",{});var JKr=s(yle);XTo=r(JKr,"mpnet"),JKr.forEach(t),zTo=r(rye," \u2014 "),tN=n(rye,"A",{href:!0});var YKr=s(tN);QTo=r(YKr,"MPNetForMaskedLM"),YKr.forEach(t),WTo=r(rye," (MPNet model)"),rye.forEach(t),HTo=i(V),d_=n(V,"LI",{});var tye=s(d_);Lle=n(tye,"STRONG",{});var KKr=s(Lle);UTo=r(KKr,"openai-gpt"),KKr.forEach(t),JTo=r(tye," \u2014 "),aN=n(tye,"A",{href:!0});var ZKr=s(aN);YTo=r(ZKr,"OpenAIGPTLMHeadModel"),ZKr.forEach(t),KTo=r(tye," (OpenAI GPT model)"),tye.forEach(t),ZTo=i(V),c_=n(V,"LI",{});var aye=s(c_);xle=n(aye,"STRONG",{});var eZr=s(xle);eMo=r(eZr,"retribert"),eZr.forEach(t),oMo=r(aye," \u2014 "),nN=n(aye,"A",{href:!0});var oZr=s(nN);rMo=r(oZr,"RetriBertModel"),oZr.forEach(t),tMo=r(aye," (RetriBERT model)"),aye.forEach(t),aMo=i(V),m_=n(V,"LI",{});var nye=s(m_);$le=n(nye,"STRONG",{});var rZr=s($le);nMo=r(rZr,"roberta"),rZr.forEach(t),sMo=r(nye," \u2014 "),sN=n(nye,"A",{href:!0});var tZr=s(sN);lMo=r(tZr,"RobertaForMaskedLM"),tZr.forEach(t),iMo=r(nye," (RoBERTa model)"),nye.forEach(t),dMo=i(V),f_=n(V,"LI",{});var sye=s(f_);kle=n(sye,"STRONG",{});var aZr=s(kle);cMo=r(aZr,"squeezebert"),aZr.forEach(t),mMo=r(sye," \u2014 "),lN=n(sye,"A",{href:!0});var nZr=s(lN);fMo=r(nZr,"SqueezeBertForMaskedLM"),nZr.forEach(t),gMo=r(sye," (SqueezeBERT model)"),sye.forEach(t),hMo=i(V),g_=n(V,"LI",{});var lye=s(g_);Sle=n(lye,"STRONG",{});var sZr=s(Sle);uMo=r(sZr,"t5"),sZr.forEach(t),pMo=r(lye," \u2014 "),iN=n(lye,"A",{href:!0});var lZr=s(iN);_Mo=r(lZr,"T5ForConditionalGeneration"),lZr.forEach(t),bMo=r(lye," (T5 model)"),lye.forEach(t),FMo=i(V),h_=n(V,"LI",{});var iye=s(h_);Rle=n(iye,"STRONG",{});var iZr=s(Rle);vMo=r(iZr,"tapas"),iZr.forEach(t),TMo=r(iye," \u2014 "),dN=n(iye,"A",{href:!0});var dZr=s(dN);MMo=r(dZr,"TapasForMaskedLM"),dZr.forEach(t),EMo=r(iye," (TAPAS model)"),iye.forEach(t),CMo=i(V),u_=n(V,"LI",{});var dye=s(u_);Ble=n(dye,"STRONG",{});var cZr=s(Ble);wMo=r(cZr,"transfo-xl"),cZr.forEach(t),AMo=r(dye," \u2014 "),cN=n(dye,"A",{href:!0});var mZr=s(cN);yMo=r(mZr,"TransfoXLLMHeadModel"),mZr.forEach(t),LMo=r(dye," (Transformer-XL model)"),dye.forEach(t),xMo=i(V),p_=n(V,"LI",{});var cye=s(p_);Ple=n(cye,"STRONG",{});var fZr=s(Ple);$Mo=r(fZr,"unispeech"),fZr.forEach(t),kMo=r(cye," \u2014 "),mN=n(cye,"A",{href:!0});var gZr=s(mN);SMo=r(gZr,"UniSpeechForPreTraining"),gZr.forEach(t),RMo=r(cye," (UniSpeech model)"),cye.forEach(t),BMo=i(V),__=n(V,"LI",{});var mye=s(__);Ile=n(mye,"STRONG",{});var hZr=s(Ile);PMo=r(hZr,"unispeech-sat"),hZr.forEach(t),IMo=r(mye," \u2014 "),fN=n(mye,"A",{href:!0});var uZr=s(fN);qMo=r(uZr,"UniSpeechSatForPreTraining"),uZr.forEach(t),NMo=r(mye," (UniSpeechSat model)"),mye.forEach(t),jMo=i(V),b_=n(V,"LI",{});var fye=s(b_);qle=n(fye,"STRONG",{});var pZr=s(qle);DMo=r(pZr,"visual_bert"),pZr.forEach(t),GMo=r(fye," \u2014 "),gN=n(fye,"A",{href:!0});var _Zr=s(gN);OMo=r(_Zr,"VisualBertForPreTraining"),_Zr.forEach(t),VMo=r(fye," (VisualBert model)"),fye.forEach(t),XMo=i(V),F_=n(V,"LI",{});var gye=s(F_);Nle=n(gye,"STRONG",{});var bZr=s(Nle);zMo=r(bZr,"vit_mae"),bZr.forEach(t),QMo=r(gye," \u2014 "),hN=n(gye,"A",{href:!0});var FZr=s(hN);WMo=r(FZr,"ViTMAEForPreTraining"),FZr.forEach(t),HMo=r(gye," (ViTMAE model)"),gye.forEach(t),UMo=i(V),v_=n(V,"LI",{});var hye=s(v_);jle=n(hye,"STRONG",{});var vZr=s(jle);JMo=r(vZr,"wav2vec2"),vZr.forEach(t),YMo=r(hye," \u2014 "),uN=n(hye,"A",{href:!0});var TZr=s(uN);KMo=r(TZr,"Wav2Vec2ForPreTraining"),TZr.forEach(t),ZMo=r(hye," (Wav2Vec2 model)"),hye.forEach(t),e4o=i(V),T_=n(V,"LI",{});var uye=s(T_);Dle=n(uye,"STRONG",{});var MZr=s(Dle);o4o=r(MZr,"xlm"),MZr.forEach(t),r4o=r(uye," \u2014 "),pN=n(uye,"A",{href:!0});var EZr=s(pN);t4o=r(EZr,"XLMWithLMHeadModel"),EZr.forEach(t),a4o=r(uye," (XLM model)"),uye.forEach(t),n4o=i(V),M_=n(V,"LI",{});var pye=s(M_);Gle=n(pye,"STRONG",{});var CZr=s(Gle);s4o=r(CZr,"xlm-roberta"),CZr.forEach(t),l4o=r(pye," \u2014 "),_N=n(pye,"A",{href:!0});var wZr=s(_N);i4o=r(wZr,"XLMRobertaForMaskedLM"),wZr.forEach(t),d4o=r(pye," (XLM-RoBERTa model)"),pye.forEach(t),c4o=i(V),E_=n(V,"LI",{});var _ye=s(E_);Ole=n(_ye,"STRONG",{});var AZr=s(Ole);m4o=r(AZr,"xlm-roberta-xl"),AZr.forEach(t),f4o=r(_ye," \u2014 "),bN=n(_ye,"A",{href:!0});var yZr=s(bN);g4o=r(yZr,"XLMRobertaXLForMaskedLM"),yZr.forEach(t),h4o=r(_ye," (XLM-RoBERTa-XL model)"),_ye.forEach(t),u4o=i(V),C_=n(V,"LI",{});var bye=s(C_);Vle=n(bye,"STRONG",{});var LZr=s(Vle);p4o=r(LZr,"xlnet"),LZr.forEach(t),_4o=r(bye," \u2014 "),FN=n(bye,"A",{href:!0});var xZr=s(FN);b4o=r(xZr,"XLNetLMHeadModel"),xZr.forEach(t),F4o=r(bye," (XLNet model)"),bye.forEach(t),V.forEach(t),v4o=i(ea),w_=n(ea,"P",{});var Fye=s(w_);T4o=r(Fye,"The model is set in evaluation mode by default using "),Xle=n(Fye,"CODE",{});var $Zr=s(Xle);M4o=r($Zr,"model.eval()"),$Zr.forEach(t),E4o=r(Fye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zle=n(Fye,"CODE",{});var kZr=s(zle);C4o=r(kZr,"model.train()"),kZr.forEach(t),Fye.forEach(t),w4o=i(ea),T(A_.$$.fragment,ea),ea.forEach(t),Ds.forEach(t),sIe=i(m),yi=n(m,"H2",{class:!0});var cNe=s(yi);y_=n(cNe,"A",{id:!0,class:!0,href:!0});var SZr=s(y_);Qle=n(SZr,"SPAN",{});var RZr=s(Qle);T(Ry.$$.fragment,RZr),RZr.forEach(t),SZr.forEach(t),A4o=i(cNe),Wle=n(cNe,"SPAN",{});var BZr=s(Wle);y4o=r(BZr,"AutoModelForCausalLM"),BZr.forEach(t),cNe.forEach(t),lIe=i(m),$o=n(m,"DIV",{class:!0});var Gs=s($o);T(By.$$.fragment,Gs),L4o=i(Gs),Li=n(Gs,"P",{});var fK=s(Li);x4o=r(fK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vN=n(fK,"A",{href:!0});var PZr=s(vN);$4o=r(PZr,"from_pretrained()"),PZr.forEach(t),k4o=r(fK," class method or the "),TN=n(fK,"A",{href:!0});var IZr=s(TN);S4o=r(IZr,"from_config()"),IZr.forEach(t),R4o=r(fK,` class
method.`),fK.forEach(t),B4o=i(Gs),Py=n(Gs,"P",{});var mNe=s(Py);P4o=r(mNe,"This class cannot be instantiated directly using "),Hle=n(mNe,"CODE",{});var qZr=s(Hle);I4o=r(qZr,"__init__()"),qZr.forEach(t),q4o=r(mNe," (throws an error)."),mNe.forEach(t),N4o=i(Gs),tt=n(Gs,"DIV",{class:!0});var a6=s(tt);T(Iy.$$.fragment,a6),j4o=i(a6),Ule=n(a6,"P",{});var NZr=s(Ule);D4o=r(NZr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),NZr.forEach(t),G4o=i(a6),xi=n(a6,"P",{});var gK=s(xi);O4o=r(gK,`Note:
Loading a model from its configuration file does `),Jle=n(gK,"STRONG",{});var jZr=s(Jle);V4o=r(jZr,"not"),jZr.forEach(t),X4o=r(gK,` load the model weights. It only affects the
model\u2019s configuration. Use `),MN=n(gK,"A",{href:!0});var DZr=s(MN);z4o=r(DZr,"from_pretrained()"),DZr.forEach(t),Q4o=r(gK," to load the model weights."),gK.forEach(t),W4o=i(a6),T(L_.$$.fragment,a6),a6.forEach(t),H4o=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(qy.$$.fragment,oa),U4o=i(oa),Yle=n(oa,"P",{});var GZr=s(Yle);J4o=r(GZr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),GZr.forEach(t),Y4o=i(oa),La=n(oa,"P",{});var n6=s(La);K4o=r(n6,"The model class to instantiate is selected based on the "),Kle=n(n6,"CODE",{});var OZr=s(Kle);Z4o=r(OZr,"model_type"),OZr.forEach(t),eEo=r(n6,` property of the config object (either
passed as an argument or loaded from `),Zle=n(n6,"CODE",{});var VZr=s(Zle);oEo=r(VZr,"pretrained_model_name_or_path"),VZr.forEach(t),rEo=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eie=n(n6,"CODE",{});var XZr=s(eie);tEo=r(XZr,"pretrained_model_name_or_path"),XZr.forEach(t),aEo=r(n6,":"),n6.forEach(t),nEo=i(oa),z=n(oa,"UL",{});var W=s(z);x_=n(W,"LI",{});var vye=s(x_);oie=n(vye,"STRONG",{});var zZr=s(oie);sEo=r(zZr,"bart"),zZr.forEach(t),lEo=r(vye," \u2014 "),EN=n(vye,"A",{href:!0});var QZr=s(EN);iEo=r(QZr,"BartForCausalLM"),QZr.forEach(t),dEo=r(vye," (BART model)"),vye.forEach(t),cEo=i(W),$_=n(W,"LI",{});var Tye=s($_);rie=n(Tye,"STRONG",{});var WZr=s(rie);mEo=r(WZr,"bert"),WZr.forEach(t),fEo=r(Tye," \u2014 "),CN=n(Tye,"A",{href:!0});var HZr=s(CN);gEo=r(HZr,"BertLMHeadModel"),HZr.forEach(t),hEo=r(Tye," (BERT model)"),Tye.forEach(t),uEo=i(W),k_=n(W,"LI",{});var Mye=s(k_);tie=n(Mye,"STRONG",{});var UZr=s(tie);pEo=r(UZr,"bert-generation"),UZr.forEach(t),_Eo=r(Mye," \u2014 "),wN=n(Mye,"A",{href:!0});var JZr=s(wN);bEo=r(JZr,"BertGenerationDecoder"),JZr.forEach(t),FEo=r(Mye," (Bert Generation model)"),Mye.forEach(t),vEo=i(W),S_=n(W,"LI",{});var Eye=s(S_);aie=n(Eye,"STRONG",{});var YZr=s(aie);TEo=r(YZr,"big_bird"),YZr.forEach(t),MEo=r(Eye," \u2014 "),AN=n(Eye,"A",{href:!0});var KZr=s(AN);EEo=r(KZr,"BigBirdForCausalLM"),KZr.forEach(t),CEo=r(Eye," (BigBird model)"),Eye.forEach(t),wEo=i(W),R_=n(W,"LI",{});var Cye=s(R_);nie=n(Cye,"STRONG",{});var ZZr=s(nie);AEo=r(ZZr,"bigbird_pegasus"),ZZr.forEach(t),yEo=r(Cye," \u2014 "),yN=n(Cye,"A",{href:!0});var eet=s(yN);LEo=r(eet,"BigBirdPegasusForCausalLM"),eet.forEach(t),xEo=r(Cye," (BigBirdPegasus model)"),Cye.forEach(t),$Eo=i(W),B_=n(W,"LI",{});var wye=s(B_);sie=n(wye,"STRONG",{});var oet=s(sie);kEo=r(oet,"blenderbot"),oet.forEach(t),SEo=r(wye," \u2014 "),LN=n(wye,"A",{href:!0});var ret=s(LN);REo=r(ret,"BlenderbotForCausalLM"),ret.forEach(t),BEo=r(wye," (Blenderbot model)"),wye.forEach(t),PEo=i(W),P_=n(W,"LI",{});var Aye=s(P_);lie=n(Aye,"STRONG",{});var tet=s(lie);IEo=r(tet,"blenderbot-small"),tet.forEach(t),qEo=r(Aye," \u2014 "),xN=n(Aye,"A",{href:!0});var aet=s(xN);NEo=r(aet,"BlenderbotSmallForCausalLM"),aet.forEach(t),jEo=r(Aye," (BlenderbotSmall model)"),Aye.forEach(t),DEo=i(W),I_=n(W,"LI",{});var yye=s(I_);iie=n(yye,"STRONG",{});var net=s(iie);GEo=r(net,"camembert"),net.forEach(t),OEo=r(yye," \u2014 "),$N=n(yye,"A",{href:!0});var set=s($N);VEo=r(set,"CamembertForCausalLM"),set.forEach(t),XEo=r(yye," (CamemBERT model)"),yye.forEach(t),zEo=i(W),q_=n(W,"LI",{});var Lye=s(q_);die=n(Lye,"STRONG",{});var iet=s(die);QEo=r(iet,"ctrl"),iet.forEach(t),WEo=r(Lye," \u2014 "),kN=n(Lye,"A",{href:!0});var det=s(kN);HEo=r(det,"CTRLLMHeadModel"),det.forEach(t),UEo=r(Lye," (CTRL model)"),Lye.forEach(t),JEo=i(W),N_=n(W,"LI",{});var xye=s(N_);cie=n(xye,"STRONG",{});var cet=s(cie);YEo=r(cet,"data2vec-text"),cet.forEach(t),KEo=r(xye," \u2014 "),SN=n(xye,"A",{href:!0});var met=s(SN);ZEo=r(met,"Data2VecTextForCausalLM"),met.forEach(t),e5o=r(xye," (Data2VecText model)"),xye.forEach(t),o5o=i(W),j_=n(W,"LI",{});var $ye=s(j_);mie=n($ye,"STRONG",{});var fet=s(mie);r5o=r(fet,"electra"),fet.forEach(t),t5o=r($ye," \u2014 "),RN=n($ye,"A",{href:!0});var get=s(RN);a5o=r(get,"ElectraForCausalLM"),get.forEach(t),n5o=r($ye," (ELECTRA model)"),$ye.forEach(t),s5o=i(W),D_=n(W,"LI",{});var kye=s(D_);fie=n(kye,"STRONG",{});var het=s(fie);l5o=r(het,"gpt2"),het.forEach(t),i5o=r(kye," \u2014 "),BN=n(kye,"A",{href:!0});var uet=s(BN);d5o=r(uet,"GPT2LMHeadModel"),uet.forEach(t),c5o=r(kye," (OpenAI GPT-2 model)"),kye.forEach(t),m5o=i(W),G_=n(W,"LI",{});var Sye=s(G_);gie=n(Sye,"STRONG",{});var pet=s(gie);f5o=r(pet,"gpt_neo"),pet.forEach(t),g5o=r(Sye," \u2014 "),PN=n(Sye,"A",{href:!0});var _et=s(PN);h5o=r(_et,"GPTNeoForCausalLM"),_et.forEach(t),u5o=r(Sye," (GPT Neo model)"),Sye.forEach(t),p5o=i(W),O_=n(W,"LI",{});var Rye=s(O_);hie=n(Rye,"STRONG",{});var bet=s(hie);_5o=r(bet,"gptj"),bet.forEach(t),b5o=r(Rye," \u2014 "),IN=n(Rye,"A",{href:!0});var Fet=s(IN);F5o=r(Fet,"GPTJForCausalLM"),Fet.forEach(t),v5o=r(Rye," (GPT-J model)"),Rye.forEach(t),T5o=i(W),V_=n(W,"LI",{});var Bye=s(V_);uie=n(Bye,"STRONG",{});var vet=s(uie);M5o=r(vet,"marian"),vet.forEach(t),E5o=r(Bye," \u2014 "),qN=n(Bye,"A",{href:!0});var Tet=s(qN);C5o=r(Tet,"MarianForCausalLM"),Tet.forEach(t),w5o=r(Bye," (Marian model)"),Bye.forEach(t),A5o=i(W),X_=n(W,"LI",{});var Pye=s(X_);pie=n(Pye,"STRONG",{});var Met=s(pie);y5o=r(Met,"mbart"),Met.forEach(t),L5o=r(Pye," \u2014 "),NN=n(Pye,"A",{href:!0});var Eet=s(NN);x5o=r(Eet,"MBartForCausalLM"),Eet.forEach(t),$5o=r(Pye," (mBART model)"),Pye.forEach(t),k5o=i(W),z_=n(W,"LI",{});var Iye=s(z_);_ie=n(Iye,"STRONG",{});var Cet=s(_ie);S5o=r(Cet,"megatron-bert"),Cet.forEach(t),R5o=r(Iye," \u2014 "),jN=n(Iye,"A",{href:!0});var wet=s(jN);B5o=r(wet,"MegatronBertForCausalLM"),wet.forEach(t),P5o=r(Iye," (MegatronBert model)"),Iye.forEach(t),I5o=i(W),Q_=n(W,"LI",{});var qye=s(Q_);bie=n(qye,"STRONG",{});var Aet=s(bie);q5o=r(Aet,"openai-gpt"),Aet.forEach(t),N5o=r(qye," \u2014 "),DN=n(qye,"A",{href:!0});var yet=s(DN);j5o=r(yet,"OpenAIGPTLMHeadModel"),yet.forEach(t),D5o=r(qye," (OpenAI GPT model)"),qye.forEach(t),G5o=i(W),W_=n(W,"LI",{});var Nye=s(W_);Fie=n(Nye,"STRONG",{});var Let=s(Fie);O5o=r(Let,"opt"),Let.forEach(t),V5o=r(Nye," \u2014 "),GN=n(Nye,"A",{href:!0});var xet=s(GN);X5o=r(xet,"OPTForCausalLM"),xet.forEach(t),z5o=r(Nye," (OPT model)"),Nye.forEach(t),Q5o=i(W),H_=n(W,"LI",{});var jye=s(H_);vie=n(jye,"STRONG",{});var $et=s(vie);W5o=r($et,"pegasus"),$et.forEach(t),H5o=r(jye," \u2014 "),ON=n(jye,"A",{href:!0});var ket=s(ON);U5o=r(ket,"PegasusForCausalLM"),ket.forEach(t),J5o=r(jye," (Pegasus model)"),jye.forEach(t),Y5o=i(W),U_=n(W,"LI",{});var Dye=s(U_);Tie=n(Dye,"STRONG",{});var Set=s(Tie);K5o=r(Set,"plbart"),Set.forEach(t),Z5o=r(Dye," \u2014 "),VN=n(Dye,"A",{href:!0});var Ret=s(VN);eCo=r(Ret,"PLBartForCausalLM"),Ret.forEach(t),oCo=r(Dye," (PLBart model)"),Dye.forEach(t),rCo=i(W),J_=n(W,"LI",{});var Gye=s(J_);Mie=n(Gye,"STRONG",{});var Bet=s(Mie);tCo=r(Bet,"prophetnet"),Bet.forEach(t),aCo=r(Gye," \u2014 "),XN=n(Gye,"A",{href:!0});var Pet=s(XN);nCo=r(Pet,"ProphetNetForCausalLM"),Pet.forEach(t),sCo=r(Gye," (ProphetNet model)"),Gye.forEach(t),lCo=i(W),Y_=n(W,"LI",{});var Oye=s(Y_);Eie=n(Oye,"STRONG",{});var Iet=s(Eie);iCo=r(Iet,"qdqbert"),Iet.forEach(t),dCo=r(Oye," \u2014 "),zN=n(Oye,"A",{href:!0});var qet=s(zN);cCo=r(qet,"QDQBertLMHeadModel"),qet.forEach(t),mCo=r(Oye," (QDQBert model)"),Oye.forEach(t),fCo=i(W),K_=n(W,"LI",{});var Vye=s(K_);Cie=n(Vye,"STRONG",{});var Net=s(Cie);gCo=r(Net,"reformer"),Net.forEach(t),hCo=r(Vye," \u2014 "),QN=n(Vye,"A",{href:!0});var jet=s(QN);uCo=r(jet,"ReformerModelWithLMHead"),jet.forEach(t),pCo=r(Vye," (Reformer model)"),Vye.forEach(t),_Co=i(W),Z_=n(W,"LI",{});var Xye=s(Z_);wie=n(Xye,"STRONG",{});var Det=s(wie);bCo=r(Det,"rembert"),Det.forEach(t),FCo=r(Xye," \u2014 "),WN=n(Xye,"A",{href:!0});var Get=s(WN);vCo=r(Get,"RemBertForCausalLM"),Get.forEach(t),TCo=r(Xye," (RemBERT model)"),Xye.forEach(t),MCo=i(W),eb=n(W,"LI",{});var zye=s(eb);Aie=n(zye,"STRONG",{});var Oet=s(Aie);ECo=r(Oet,"roberta"),Oet.forEach(t),CCo=r(zye," \u2014 "),HN=n(zye,"A",{href:!0});var Vet=s(HN);wCo=r(Vet,"RobertaForCausalLM"),Vet.forEach(t),ACo=r(zye," (RoBERTa model)"),zye.forEach(t),yCo=i(W),ob=n(W,"LI",{});var Qye=s(ob);yie=n(Qye,"STRONG",{});var Xet=s(yie);LCo=r(Xet,"roformer"),Xet.forEach(t),xCo=r(Qye," \u2014 "),UN=n(Qye,"A",{href:!0});var zet=s(UN);$Co=r(zet,"RoFormerForCausalLM"),zet.forEach(t),kCo=r(Qye," (RoFormer model)"),Qye.forEach(t),SCo=i(W),rb=n(W,"LI",{});var Wye=s(rb);Lie=n(Wye,"STRONG",{});var Qet=s(Lie);RCo=r(Qet,"speech_to_text_2"),Qet.forEach(t),BCo=r(Wye," \u2014 "),JN=n(Wye,"A",{href:!0});var Wet=s(JN);PCo=r(Wet,"Speech2Text2ForCausalLM"),Wet.forEach(t),ICo=r(Wye," (Speech2Text2 model)"),Wye.forEach(t),qCo=i(W),tb=n(W,"LI",{});var Hye=s(tb);xie=n(Hye,"STRONG",{});var Het=s(xie);NCo=r(Het,"transfo-xl"),Het.forEach(t),jCo=r(Hye," \u2014 "),YN=n(Hye,"A",{href:!0});var Uet=s(YN);DCo=r(Uet,"TransfoXLLMHeadModel"),Uet.forEach(t),GCo=r(Hye," (Transformer-XL model)"),Hye.forEach(t),OCo=i(W),ab=n(W,"LI",{});var Uye=s(ab);$ie=n(Uye,"STRONG",{});var Jet=s($ie);VCo=r(Jet,"trocr"),Jet.forEach(t),XCo=r(Uye," \u2014 "),KN=n(Uye,"A",{href:!0});var Yet=s(KN);zCo=r(Yet,"TrOCRForCausalLM"),Yet.forEach(t),QCo=r(Uye," (TrOCR model)"),Uye.forEach(t),WCo=i(W),nb=n(W,"LI",{});var Jye=s(nb);kie=n(Jye,"STRONG",{});var Ket=s(kie);HCo=r(Ket,"xglm"),Ket.forEach(t),UCo=r(Jye," \u2014 "),ZN=n(Jye,"A",{href:!0});var Zet=s(ZN);JCo=r(Zet,"XGLMForCausalLM"),Zet.forEach(t),YCo=r(Jye," (XGLM model)"),Jye.forEach(t),KCo=i(W),sb=n(W,"LI",{});var Yye=s(sb);Sie=n(Yye,"STRONG",{});var eot=s(Sie);ZCo=r(eot,"xlm"),eot.forEach(t),e3o=r(Yye," \u2014 "),ej=n(Yye,"A",{href:!0});var oot=s(ej);o3o=r(oot,"XLMWithLMHeadModel"),oot.forEach(t),r3o=r(Yye," (XLM model)"),Yye.forEach(t),t3o=i(W),lb=n(W,"LI",{});var Kye=s(lb);Rie=n(Kye,"STRONG",{});var rot=s(Rie);a3o=r(rot,"xlm-prophetnet"),rot.forEach(t),n3o=r(Kye," \u2014 "),oj=n(Kye,"A",{href:!0});var tot=s(oj);s3o=r(tot,"XLMProphetNetForCausalLM"),tot.forEach(t),l3o=r(Kye," (XLMProphetNet model)"),Kye.forEach(t),i3o=i(W),ib=n(W,"LI",{});var Zye=s(ib);Bie=n(Zye,"STRONG",{});var aot=s(Bie);d3o=r(aot,"xlm-roberta"),aot.forEach(t),c3o=r(Zye," \u2014 "),rj=n(Zye,"A",{href:!0});var not=s(rj);m3o=r(not,"XLMRobertaForCausalLM"),not.forEach(t),f3o=r(Zye," (XLM-RoBERTa model)"),Zye.forEach(t),g3o=i(W),db=n(W,"LI",{});var eLe=s(db);Pie=n(eLe,"STRONG",{});var sot=s(Pie);h3o=r(sot,"xlm-roberta-xl"),sot.forEach(t),u3o=r(eLe," \u2014 "),tj=n(eLe,"A",{href:!0});var lot=s(tj);p3o=r(lot,"XLMRobertaXLForCausalLM"),lot.forEach(t),_3o=r(eLe," (XLM-RoBERTa-XL model)"),eLe.forEach(t),b3o=i(W),cb=n(W,"LI",{});var oLe=s(cb);Iie=n(oLe,"STRONG",{});var iot=s(Iie);F3o=r(iot,"xlnet"),iot.forEach(t),v3o=r(oLe," \u2014 "),aj=n(oLe,"A",{href:!0});var dot=s(aj);T3o=r(dot,"XLNetLMHeadModel"),dot.forEach(t),M3o=r(oLe," (XLNet model)"),oLe.forEach(t),W.forEach(t),E3o=i(oa),mb=n(oa,"P",{});var rLe=s(mb);C3o=r(rLe,"The model is set in evaluation mode by default using "),qie=n(rLe,"CODE",{});var cot=s(qie);w3o=r(cot,"model.eval()"),cot.forEach(t),A3o=r(rLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nie=n(rLe,"CODE",{});var mot=s(Nie);y3o=r(mot,"model.train()"),mot.forEach(t),rLe.forEach(t),L3o=i(oa),T(fb.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),iIe=i(m),$i=n(m,"H2",{class:!0});var fNe=s($i);gb=n(fNe,"A",{id:!0,class:!0,href:!0});var fot=s(gb);jie=n(fot,"SPAN",{});var got=s(jie);T(Ny.$$.fragment,got),got.forEach(t),fot.forEach(t),x3o=i(fNe),Die=n(fNe,"SPAN",{});var hot=s(Die);$3o=r(hot,"AutoModelForMaskedLM"),hot.forEach(t),fNe.forEach(t),dIe=i(m),ko=n(m,"DIV",{class:!0});var Os=s(ko);T(jy.$$.fragment,Os),k3o=i(Os),ki=n(Os,"P",{});var hK=s(ki);S3o=r(hK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),nj=n(hK,"A",{href:!0});var uot=s(nj);R3o=r(uot,"from_pretrained()"),uot.forEach(t),B3o=r(hK," class method or the "),sj=n(hK,"A",{href:!0});var pot=s(sj);P3o=r(pot,"from_config()"),pot.forEach(t),I3o=r(hK,` class
method.`),hK.forEach(t),q3o=i(Os),Dy=n(Os,"P",{});var gNe=s(Dy);N3o=r(gNe,"This class cannot be instantiated directly using "),Gie=n(gNe,"CODE",{});var _ot=s(Gie);j3o=r(_ot,"__init__()"),_ot.forEach(t),D3o=r(gNe," (throws an error)."),gNe.forEach(t),G3o=i(Os),at=n(Os,"DIV",{class:!0});var s6=s(at);T(Gy.$$.fragment,s6),O3o=i(s6),Oie=n(s6,"P",{});var bot=s(Oie);V3o=r(bot,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),bot.forEach(t),X3o=i(s6),Si=n(s6,"P",{});var uK=s(Si);z3o=r(uK,`Note:
Loading a model from its configuration file does `),Vie=n(uK,"STRONG",{});var Fot=s(Vie);Q3o=r(Fot,"not"),Fot.forEach(t),W3o=r(uK,` load the model weights. It only affects the
model\u2019s configuration. Use `),lj=n(uK,"A",{href:!0});var vot=s(lj);H3o=r(vot,"from_pretrained()"),vot.forEach(t),U3o=r(uK," to load the model weights."),uK.forEach(t),J3o=i(s6),T(hb.$$.fragment,s6),s6.forEach(t),Y3o=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(Oy.$$.fragment,ra),K3o=i(ra),Xie=n(ra,"P",{});var Tot=s(Xie);Z3o=r(Tot,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Tot.forEach(t),ewo=i(ra),xa=n(ra,"P",{});var l6=s(xa);owo=r(l6,"The model class to instantiate is selected based on the "),zie=n(l6,"CODE",{});var Mot=s(zie);rwo=r(Mot,"model_type"),Mot.forEach(t),two=r(l6,` property of the config object (either
passed as an argument or loaded from `),Qie=n(l6,"CODE",{});var Eot=s(Qie);awo=r(Eot,"pretrained_model_name_or_path"),Eot.forEach(t),nwo=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wie=n(l6,"CODE",{});var Cot=s(Wie);swo=r(Cot,"pretrained_model_name_or_path"),Cot.forEach(t),lwo=r(l6,":"),l6.forEach(t),iwo=i(ra),Q=n(ra,"UL",{});var H=s(Q);ub=n(H,"LI",{});var tLe=s(ub);Hie=n(tLe,"STRONG",{});var wot=s(Hie);dwo=r(wot,"albert"),wot.forEach(t),cwo=r(tLe," \u2014 "),ij=n(tLe,"A",{href:!0});var Aot=s(ij);mwo=r(Aot,"AlbertForMaskedLM"),Aot.forEach(t),fwo=r(tLe," (ALBERT model)"),tLe.forEach(t),gwo=i(H),pb=n(H,"LI",{});var aLe=s(pb);Uie=n(aLe,"STRONG",{});var yot=s(Uie);hwo=r(yot,"bart"),yot.forEach(t),uwo=r(aLe," \u2014 "),dj=n(aLe,"A",{href:!0});var Lot=s(dj);pwo=r(Lot,"BartForConditionalGeneration"),Lot.forEach(t),_wo=r(aLe," (BART model)"),aLe.forEach(t),bwo=i(H),_b=n(H,"LI",{});var nLe=s(_b);Jie=n(nLe,"STRONG",{});var xot=s(Jie);Fwo=r(xot,"bert"),xot.forEach(t),vwo=r(nLe," \u2014 "),cj=n(nLe,"A",{href:!0});var $ot=s(cj);Two=r($ot,"BertForMaskedLM"),$ot.forEach(t),Mwo=r(nLe," (BERT model)"),nLe.forEach(t),Ewo=i(H),bb=n(H,"LI",{});var sLe=s(bb);Yie=n(sLe,"STRONG",{});var kot=s(Yie);Cwo=r(kot,"big_bird"),kot.forEach(t),wwo=r(sLe," \u2014 "),mj=n(sLe,"A",{href:!0});var Sot=s(mj);Awo=r(Sot,"BigBirdForMaskedLM"),Sot.forEach(t),ywo=r(sLe," (BigBird model)"),sLe.forEach(t),Lwo=i(H),Fb=n(H,"LI",{});var lLe=s(Fb);Kie=n(lLe,"STRONG",{});var Rot=s(Kie);xwo=r(Rot,"camembert"),Rot.forEach(t),$wo=r(lLe," \u2014 "),fj=n(lLe,"A",{href:!0});var Bot=s(fj);kwo=r(Bot,"CamembertForMaskedLM"),Bot.forEach(t),Swo=r(lLe," (CamemBERT model)"),lLe.forEach(t),Rwo=i(H),vb=n(H,"LI",{});var iLe=s(vb);Zie=n(iLe,"STRONG",{});var Pot=s(Zie);Bwo=r(Pot,"convbert"),Pot.forEach(t),Pwo=r(iLe," \u2014 "),gj=n(iLe,"A",{href:!0});var Iot=s(gj);Iwo=r(Iot,"ConvBertForMaskedLM"),Iot.forEach(t),qwo=r(iLe," (ConvBERT model)"),iLe.forEach(t),Nwo=i(H),Tb=n(H,"LI",{});var dLe=s(Tb);ede=n(dLe,"STRONG",{});var qot=s(ede);jwo=r(qot,"data2vec-text"),qot.forEach(t),Dwo=r(dLe," \u2014 "),hj=n(dLe,"A",{href:!0});var Not=s(hj);Gwo=r(Not,"Data2VecTextForMaskedLM"),Not.forEach(t),Owo=r(dLe," (Data2VecText model)"),dLe.forEach(t),Vwo=i(H),Mb=n(H,"LI",{});var cLe=s(Mb);ode=n(cLe,"STRONG",{});var jot=s(ode);Xwo=r(jot,"deberta"),jot.forEach(t),zwo=r(cLe," \u2014 "),uj=n(cLe,"A",{href:!0});var Dot=s(uj);Qwo=r(Dot,"DebertaForMaskedLM"),Dot.forEach(t),Wwo=r(cLe," (DeBERTa model)"),cLe.forEach(t),Hwo=i(H),Eb=n(H,"LI",{});var mLe=s(Eb);rde=n(mLe,"STRONG",{});var Got=s(rde);Uwo=r(Got,"deberta-v2"),Got.forEach(t),Jwo=r(mLe," \u2014 "),pj=n(mLe,"A",{href:!0});var Oot=s(pj);Ywo=r(Oot,"DebertaV2ForMaskedLM"),Oot.forEach(t),Kwo=r(mLe," (DeBERTa-v2 model)"),mLe.forEach(t),Zwo=i(H),Cb=n(H,"LI",{});var fLe=s(Cb);tde=n(fLe,"STRONG",{});var Vot=s(tde);eAo=r(Vot,"distilbert"),Vot.forEach(t),oAo=r(fLe," \u2014 "),_j=n(fLe,"A",{href:!0});var Xot=s(_j);rAo=r(Xot,"DistilBertForMaskedLM"),Xot.forEach(t),tAo=r(fLe," (DistilBERT model)"),fLe.forEach(t),aAo=i(H),wb=n(H,"LI",{});var gLe=s(wb);ade=n(gLe,"STRONG",{});var zot=s(ade);nAo=r(zot,"electra"),zot.forEach(t),sAo=r(gLe," \u2014 "),bj=n(gLe,"A",{href:!0});var Qot=s(bj);lAo=r(Qot,"ElectraForMaskedLM"),Qot.forEach(t),iAo=r(gLe," (ELECTRA model)"),gLe.forEach(t),dAo=i(H),Ab=n(H,"LI",{});var hLe=s(Ab);nde=n(hLe,"STRONG",{});var Wot=s(nde);cAo=r(Wot,"flaubert"),Wot.forEach(t),mAo=r(hLe," \u2014 "),Fj=n(hLe,"A",{href:!0});var Hot=s(Fj);fAo=r(Hot,"FlaubertWithLMHeadModel"),Hot.forEach(t),gAo=r(hLe," (FlauBERT model)"),hLe.forEach(t),hAo=i(H),yb=n(H,"LI",{});var uLe=s(yb);sde=n(uLe,"STRONG",{});var Uot=s(sde);uAo=r(Uot,"fnet"),Uot.forEach(t),pAo=r(uLe," \u2014 "),vj=n(uLe,"A",{href:!0});var Jot=s(vj);_Ao=r(Jot,"FNetForMaskedLM"),Jot.forEach(t),bAo=r(uLe," (FNet model)"),uLe.forEach(t),FAo=i(H),Lb=n(H,"LI",{});var pLe=s(Lb);lde=n(pLe,"STRONG",{});var Yot=s(lde);vAo=r(Yot,"funnel"),Yot.forEach(t),TAo=r(pLe," \u2014 "),Tj=n(pLe,"A",{href:!0});var Kot=s(Tj);MAo=r(Kot,"FunnelForMaskedLM"),Kot.forEach(t),EAo=r(pLe," (Funnel Transformer model)"),pLe.forEach(t),CAo=i(H),xb=n(H,"LI",{});var _Le=s(xb);ide=n(_Le,"STRONG",{});var Zot=s(ide);wAo=r(Zot,"ibert"),Zot.forEach(t),AAo=r(_Le," \u2014 "),Mj=n(_Le,"A",{href:!0});var ert=s(Mj);yAo=r(ert,"IBertForMaskedLM"),ert.forEach(t),LAo=r(_Le," (I-BERT model)"),_Le.forEach(t),xAo=i(H),$b=n(H,"LI",{});var bLe=s($b);dde=n(bLe,"STRONG",{});var ort=s(dde);$Ao=r(ort,"layoutlm"),ort.forEach(t),kAo=r(bLe," \u2014 "),Ej=n(bLe,"A",{href:!0});var rrt=s(Ej);SAo=r(rrt,"LayoutLMForMaskedLM"),rrt.forEach(t),RAo=r(bLe," (LayoutLM model)"),bLe.forEach(t),BAo=i(H),kb=n(H,"LI",{});var FLe=s(kb);cde=n(FLe,"STRONG",{});var trt=s(cde);PAo=r(trt,"longformer"),trt.forEach(t),IAo=r(FLe," \u2014 "),Cj=n(FLe,"A",{href:!0});var art=s(Cj);qAo=r(art,"LongformerForMaskedLM"),art.forEach(t),NAo=r(FLe," (Longformer model)"),FLe.forEach(t),jAo=i(H),Sb=n(H,"LI",{});var vLe=s(Sb);mde=n(vLe,"STRONG",{});var nrt=s(mde);DAo=r(nrt,"mbart"),nrt.forEach(t),GAo=r(vLe," \u2014 "),wj=n(vLe,"A",{href:!0});var srt=s(wj);OAo=r(srt,"MBartForConditionalGeneration"),srt.forEach(t),VAo=r(vLe," (mBART model)"),vLe.forEach(t),XAo=i(H),Rb=n(H,"LI",{});var TLe=s(Rb);fde=n(TLe,"STRONG",{});var lrt=s(fde);zAo=r(lrt,"megatron-bert"),lrt.forEach(t),QAo=r(TLe," \u2014 "),Aj=n(TLe,"A",{href:!0});var irt=s(Aj);WAo=r(irt,"MegatronBertForMaskedLM"),irt.forEach(t),HAo=r(TLe," (MegatronBert model)"),TLe.forEach(t),UAo=i(H),Bb=n(H,"LI",{});var MLe=s(Bb);gde=n(MLe,"STRONG",{});var drt=s(gde);JAo=r(drt,"mobilebert"),drt.forEach(t),YAo=r(MLe," \u2014 "),yj=n(MLe,"A",{href:!0});var crt=s(yj);KAo=r(crt,"MobileBertForMaskedLM"),crt.forEach(t),ZAo=r(MLe," (MobileBERT model)"),MLe.forEach(t),e6o=i(H),Pb=n(H,"LI",{});var ELe=s(Pb);hde=n(ELe,"STRONG",{});var mrt=s(hde);o6o=r(mrt,"mpnet"),mrt.forEach(t),r6o=r(ELe," \u2014 "),Lj=n(ELe,"A",{href:!0});var frt=s(Lj);t6o=r(frt,"MPNetForMaskedLM"),frt.forEach(t),a6o=r(ELe," (MPNet model)"),ELe.forEach(t),n6o=i(H),Ib=n(H,"LI",{});var CLe=s(Ib);ude=n(CLe,"STRONG",{});var grt=s(ude);s6o=r(grt,"nystromformer"),grt.forEach(t),l6o=r(CLe," \u2014 "),xj=n(CLe,"A",{href:!0});var hrt=s(xj);i6o=r(hrt,"NystromformerForMaskedLM"),hrt.forEach(t),d6o=r(CLe," (Nystromformer model)"),CLe.forEach(t),c6o=i(H),qb=n(H,"LI",{});var wLe=s(qb);pde=n(wLe,"STRONG",{});var urt=s(pde);m6o=r(urt,"perceiver"),urt.forEach(t),f6o=r(wLe," \u2014 "),$j=n(wLe,"A",{href:!0});var prt=s($j);g6o=r(prt,"PerceiverForMaskedLM"),prt.forEach(t),h6o=r(wLe," (Perceiver model)"),wLe.forEach(t),u6o=i(H),Nb=n(H,"LI",{});var ALe=s(Nb);_de=n(ALe,"STRONG",{});var _rt=s(_de);p6o=r(_rt,"qdqbert"),_rt.forEach(t),_6o=r(ALe," \u2014 "),kj=n(ALe,"A",{href:!0});var brt=s(kj);b6o=r(brt,"QDQBertForMaskedLM"),brt.forEach(t),F6o=r(ALe," (QDQBert model)"),ALe.forEach(t),v6o=i(H),jb=n(H,"LI",{});var yLe=s(jb);bde=n(yLe,"STRONG",{});var Frt=s(bde);T6o=r(Frt,"reformer"),Frt.forEach(t),M6o=r(yLe," \u2014 "),Sj=n(yLe,"A",{href:!0});var vrt=s(Sj);E6o=r(vrt,"ReformerForMaskedLM"),vrt.forEach(t),C6o=r(yLe," (Reformer model)"),yLe.forEach(t),w6o=i(H),Db=n(H,"LI",{});var LLe=s(Db);Fde=n(LLe,"STRONG",{});var Trt=s(Fde);A6o=r(Trt,"rembert"),Trt.forEach(t),y6o=r(LLe," \u2014 "),Rj=n(LLe,"A",{href:!0});var Mrt=s(Rj);L6o=r(Mrt,"RemBertForMaskedLM"),Mrt.forEach(t),x6o=r(LLe," (RemBERT model)"),LLe.forEach(t),$6o=i(H),Gb=n(H,"LI",{});var xLe=s(Gb);vde=n(xLe,"STRONG",{});var Ert=s(vde);k6o=r(Ert,"roberta"),Ert.forEach(t),S6o=r(xLe," \u2014 "),Bj=n(xLe,"A",{href:!0});var Crt=s(Bj);R6o=r(Crt,"RobertaForMaskedLM"),Crt.forEach(t),B6o=r(xLe," (RoBERTa model)"),xLe.forEach(t),P6o=i(H),Ob=n(H,"LI",{});var $Le=s(Ob);Tde=n($Le,"STRONG",{});var wrt=s(Tde);I6o=r(wrt,"roformer"),wrt.forEach(t),q6o=r($Le," \u2014 "),Pj=n($Le,"A",{href:!0});var Art=s(Pj);N6o=r(Art,"RoFormerForMaskedLM"),Art.forEach(t),j6o=r($Le," (RoFormer model)"),$Le.forEach(t),D6o=i(H),Vb=n(H,"LI",{});var kLe=s(Vb);Mde=n(kLe,"STRONG",{});var yrt=s(Mde);G6o=r(yrt,"squeezebert"),yrt.forEach(t),O6o=r(kLe," \u2014 "),Ij=n(kLe,"A",{href:!0});var Lrt=s(Ij);V6o=r(Lrt,"SqueezeBertForMaskedLM"),Lrt.forEach(t),X6o=r(kLe," (SqueezeBERT model)"),kLe.forEach(t),z6o=i(H),Xb=n(H,"LI",{});var SLe=s(Xb);Ede=n(SLe,"STRONG",{});var xrt=s(Ede);Q6o=r(xrt,"tapas"),xrt.forEach(t),W6o=r(SLe," \u2014 "),qj=n(SLe,"A",{href:!0});var $rt=s(qj);H6o=r($rt,"TapasForMaskedLM"),$rt.forEach(t),U6o=r(SLe," (TAPAS model)"),SLe.forEach(t),J6o=i(H),zb=n(H,"LI",{});var RLe=s(zb);Cde=n(RLe,"STRONG",{});var krt=s(Cde);Y6o=r(krt,"wav2vec2"),krt.forEach(t),K6o=r(RLe," \u2014 "),wde=n(RLe,"CODE",{});var Srt=s(wde);Z6o=r(Srt,"Wav2Vec2ForMaskedLM"),Srt.forEach(t),e0o=r(RLe," (Wav2Vec2 model)"),RLe.forEach(t),o0o=i(H),Qb=n(H,"LI",{});var BLe=s(Qb);Ade=n(BLe,"STRONG",{});var Rrt=s(Ade);r0o=r(Rrt,"xlm"),Rrt.forEach(t),t0o=r(BLe," \u2014 "),Nj=n(BLe,"A",{href:!0});var Brt=s(Nj);a0o=r(Brt,"XLMWithLMHeadModel"),Brt.forEach(t),n0o=r(BLe," (XLM model)"),BLe.forEach(t),s0o=i(H),Wb=n(H,"LI",{});var PLe=s(Wb);yde=n(PLe,"STRONG",{});var Prt=s(yde);l0o=r(Prt,"xlm-roberta"),Prt.forEach(t),i0o=r(PLe," \u2014 "),jj=n(PLe,"A",{href:!0});var Irt=s(jj);d0o=r(Irt,"XLMRobertaForMaskedLM"),Irt.forEach(t),c0o=r(PLe," (XLM-RoBERTa model)"),PLe.forEach(t),m0o=i(H),Hb=n(H,"LI",{});var ILe=s(Hb);Lde=n(ILe,"STRONG",{});var qrt=s(Lde);f0o=r(qrt,"xlm-roberta-xl"),qrt.forEach(t),g0o=r(ILe," \u2014 "),Dj=n(ILe,"A",{href:!0});var Nrt=s(Dj);h0o=r(Nrt,"XLMRobertaXLForMaskedLM"),Nrt.forEach(t),u0o=r(ILe," (XLM-RoBERTa-XL model)"),ILe.forEach(t),p0o=i(H),Ub=n(H,"LI",{});var qLe=s(Ub);xde=n(qLe,"STRONG",{});var jrt=s(xde);_0o=r(jrt,"yoso"),jrt.forEach(t),b0o=r(qLe," \u2014 "),Gj=n(qLe,"A",{href:!0});var Drt=s(Gj);F0o=r(Drt,"YosoForMaskedLM"),Drt.forEach(t),v0o=r(qLe," (YOSO model)"),qLe.forEach(t),H.forEach(t),T0o=i(ra),Jb=n(ra,"P",{});var NLe=s(Jb);M0o=r(NLe,"The model is set in evaluation mode by default using "),$de=n(NLe,"CODE",{});var Grt=s($de);E0o=r(Grt,"model.eval()"),Grt.forEach(t),C0o=r(NLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kde=n(NLe,"CODE",{});var Ort=s(kde);w0o=r(Ort,"model.train()"),Ort.forEach(t),NLe.forEach(t),A0o=i(ra),T(Yb.$$.fragment,ra),ra.forEach(t),Os.forEach(t),cIe=i(m),Ri=n(m,"H2",{class:!0});var hNe=s(Ri);Kb=n(hNe,"A",{id:!0,class:!0,href:!0});var Vrt=s(Kb);Sde=n(Vrt,"SPAN",{});var Xrt=s(Sde);T(Vy.$$.fragment,Xrt),Xrt.forEach(t),Vrt.forEach(t),y0o=i(hNe),Rde=n(hNe,"SPAN",{});var zrt=s(Rde);L0o=r(zrt,"AutoModelForSeq2SeqLM"),zrt.forEach(t),hNe.forEach(t),mIe=i(m),So=n(m,"DIV",{class:!0});var Vs=s(So);T(Xy.$$.fragment,Vs),x0o=i(Vs),Bi=n(Vs,"P",{});var pK=s(Bi);$0o=r(pK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Oj=n(pK,"A",{href:!0});var Qrt=s(Oj);k0o=r(Qrt,"from_pretrained()"),Qrt.forEach(t),S0o=r(pK," class method or the "),Vj=n(pK,"A",{href:!0});var Wrt=s(Vj);R0o=r(Wrt,"from_config()"),Wrt.forEach(t),B0o=r(pK,` class
method.`),pK.forEach(t),P0o=i(Vs),zy=n(Vs,"P",{});var uNe=s(zy);I0o=r(uNe,"This class cannot be instantiated directly using "),Bde=n(uNe,"CODE",{});var Hrt=s(Bde);q0o=r(Hrt,"__init__()"),Hrt.forEach(t),N0o=r(uNe," (throws an error)."),uNe.forEach(t),j0o=i(Vs),nt=n(Vs,"DIV",{class:!0});var i6=s(nt);T(Qy.$$.fragment,i6),D0o=i(i6),Pde=n(i6,"P",{});var Urt=s(Pde);G0o=r(Urt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Urt.forEach(t),O0o=i(i6),Pi=n(i6,"P",{});var _K=s(Pi);V0o=r(_K,`Note:
Loading a model from its configuration file does `),Ide=n(_K,"STRONG",{});var Jrt=s(Ide);X0o=r(Jrt,"not"),Jrt.forEach(t),z0o=r(_K,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xj=n(_K,"A",{href:!0});var Yrt=s(Xj);Q0o=r(Yrt,"from_pretrained()"),Yrt.forEach(t),W0o=r(_K," to load the model weights."),_K.forEach(t),H0o=i(i6),T(Zb.$$.fragment,i6),i6.forEach(t),U0o=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(Wy.$$.fragment,ta),J0o=i(ta),qde=n(ta,"P",{});var Krt=s(qde);Y0o=r(Krt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Krt.forEach(t),K0o=i(ta),$a=n(ta,"P",{});var d6=s($a);Z0o=r(d6,"The model class to instantiate is selected based on the "),Nde=n(d6,"CODE",{});var Zrt=s(Nde);eyo=r(Zrt,"model_type"),Zrt.forEach(t),oyo=r(d6,` property of the config object (either
passed as an argument or loaded from `),jde=n(d6,"CODE",{});var ett=s(jde);ryo=r(ett,"pretrained_model_name_or_path"),ett.forEach(t),tyo=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dde=n(d6,"CODE",{});var ott=s(Dde);ayo=r(ott,"pretrained_model_name_or_path"),ott.forEach(t),nyo=r(d6,":"),d6.forEach(t),syo=i(ta),he=n(ta,"UL",{});var pe=s(he);e2=n(pe,"LI",{});var jLe=s(e2);Gde=n(jLe,"STRONG",{});var rtt=s(Gde);lyo=r(rtt,"bart"),rtt.forEach(t),iyo=r(jLe," \u2014 "),zj=n(jLe,"A",{href:!0});var ttt=s(zj);dyo=r(ttt,"BartForConditionalGeneration"),ttt.forEach(t),cyo=r(jLe," (BART model)"),jLe.forEach(t),myo=i(pe),o2=n(pe,"LI",{});var DLe=s(o2);Ode=n(DLe,"STRONG",{});var att=s(Ode);fyo=r(att,"bigbird_pegasus"),att.forEach(t),gyo=r(DLe," \u2014 "),Qj=n(DLe,"A",{href:!0});var ntt=s(Qj);hyo=r(ntt,"BigBirdPegasusForConditionalGeneration"),ntt.forEach(t),uyo=r(DLe," (BigBirdPegasus model)"),DLe.forEach(t),pyo=i(pe),r2=n(pe,"LI",{});var GLe=s(r2);Vde=n(GLe,"STRONG",{});var stt=s(Vde);_yo=r(stt,"blenderbot"),stt.forEach(t),byo=r(GLe," \u2014 "),Wj=n(GLe,"A",{href:!0});var ltt=s(Wj);Fyo=r(ltt,"BlenderbotForConditionalGeneration"),ltt.forEach(t),vyo=r(GLe," (Blenderbot model)"),GLe.forEach(t),Tyo=i(pe),t2=n(pe,"LI",{});var OLe=s(t2);Xde=n(OLe,"STRONG",{});var itt=s(Xde);Myo=r(itt,"blenderbot-small"),itt.forEach(t),Eyo=r(OLe," \u2014 "),Hj=n(OLe,"A",{href:!0});var dtt=s(Hj);Cyo=r(dtt,"BlenderbotSmallForConditionalGeneration"),dtt.forEach(t),wyo=r(OLe," (BlenderbotSmall model)"),OLe.forEach(t),Ayo=i(pe),a2=n(pe,"LI",{});var VLe=s(a2);zde=n(VLe,"STRONG",{});var ctt=s(zde);yyo=r(ctt,"encoder-decoder"),ctt.forEach(t),Lyo=r(VLe," \u2014 "),Uj=n(VLe,"A",{href:!0});var mtt=s(Uj);xyo=r(mtt,"EncoderDecoderModel"),mtt.forEach(t),$yo=r(VLe," (Encoder decoder model)"),VLe.forEach(t),kyo=i(pe),n2=n(pe,"LI",{});var XLe=s(n2);Qde=n(XLe,"STRONG",{});var ftt=s(Qde);Syo=r(ftt,"fsmt"),ftt.forEach(t),Ryo=r(XLe," \u2014 "),Jj=n(XLe,"A",{href:!0});var gtt=s(Jj);Byo=r(gtt,"FSMTForConditionalGeneration"),gtt.forEach(t),Pyo=r(XLe," (FairSeq Machine-Translation model)"),XLe.forEach(t),Iyo=i(pe),s2=n(pe,"LI",{});var zLe=s(s2);Wde=n(zLe,"STRONG",{});var htt=s(Wde);qyo=r(htt,"led"),htt.forEach(t),Nyo=r(zLe," \u2014 "),Yj=n(zLe,"A",{href:!0});var utt=s(Yj);jyo=r(utt,"LEDForConditionalGeneration"),utt.forEach(t),Dyo=r(zLe," (LED model)"),zLe.forEach(t),Gyo=i(pe),l2=n(pe,"LI",{});var QLe=s(l2);Hde=n(QLe,"STRONG",{});var ptt=s(Hde);Oyo=r(ptt,"m2m_100"),ptt.forEach(t),Vyo=r(QLe," \u2014 "),Kj=n(QLe,"A",{href:!0});var _tt=s(Kj);Xyo=r(_tt,"M2M100ForConditionalGeneration"),_tt.forEach(t),zyo=r(QLe," (M2M100 model)"),QLe.forEach(t),Qyo=i(pe),i2=n(pe,"LI",{});var WLe=s(i2);Ude=n(WLe,"STRONG",{});var btt=s(Ude);Wyo=r(btt,"marian"),btt.forEach(t),Hyo=r(WLe," \u2014 "),Zj=n(WLe,"A",{href:!0});var Ftt=s(Zj);Uyo=r(Ftt,"MarianMTModel"),Ftt.forEach(t),Jyo=r(WLe," (Marian model)"),WLe.forEach(t),Yyo=i(pe),d2=n(pe,"LI",{});var HLe=s(d2);Jde=n(HLe,"STRONG",{});var vtt=s(Jde);Kyo=r(vtt,"mbart"),vtt.forEach(t),Zyo=r(HLe," \u2014 "),eD=n(HLe,"A",{href:!0});var Ttt=s(eD);eLo=r(Ttt,"MBartForConditionalGeneration"),Ttt.forEach(t),oLo=r(HLe," (mBART model)"),HLe.forEach(t),rLo=i(pe),c2=n(pe,"LI",{});var ULe=s(c2);Yde=n(ULe,"STRONG",{});var Mtt=s(Yde);tLo=r(Mtt,"mt5"),Mtt.forEach(t),aLo=r(ULe," \u2014 "),oD=n(ULe,"A",{href:!0});var Ett=s(oD);nLo=r(Ett,"MT5ForConditionalGeneration"),Ett.forEach(t),sLo=r(ULe," (mT5 model)"),ULe.forEach(t),lLo=i(pe),m2=n(pe,"LI",{});var JLe=s(m2);Kde=n(JLe,"STRONG",{});var Ctt=s(Kde);iLo=r(Ctt,"pegasus"),Ctt.forEach(t),dLo=r(JLe," \u2014 "),rD=n(JLe,"A",{href:!0});var wtt=s(rD);cLo=r(wtt,"PegasusForConditionalGeneration"),wtt.forEach(t),mLo=r(JLe," (Pegasus model)"),JLe.forEach(t),fLo=i(pe),f2=n(pe,"LI",{});var YLe=s(f2);Zde=n(YLe,"STRONG",{});var Att=s(Zde);gLo=r(Att,"plbart"),Att.forEach(t),hLo=r(YLe," \u2014 "),tD=n(YLe,"A",{href:!0});var ytt=s(tD);uLo=r(ytt,"PLBartForConditionalGeneration"),ytt.forEach(t),pLo=r(YLe," (PLBart model)"),YLe.forEach(t),_Lo=i(pe),g2=n(pe,"LI",{});var KLe=s(g2);ece=n(KLe,"STRONG",{});var Ltt=s(ece);bLo=r(Ltt,"prophetnet"),Ltt.forEach(t),FLo=r(KLe," \u2014 "),aD=n(KLe,"A",{href:!0});var xtt=s(aD);vLo=r(xtt,"ProphetNetForConditionalGeneration"),xtt.forEach(t),TLo=r(KLe," (ProphetNet model)"),KLe.forEach(t),MLo=i(pe),h2=n(pe,"LI",{});var ZLe=s(h2);oce=n(ZLe,"STRONG",{});var $tt=s(oce);ELo=r($tt,"t5"),$tt.forEach(t),CLo=r(ZLe," \u2014 "),nD=n(ZLe,"A",{href:!0});var ktt=s(nD);wLo=r(ktt,"T5ForConditionalGeneration"),ktt.forEach(t),ALo=r(ZLe," (T5 model)"),ZLe.forEach(t),yLo=i(pe),u2=n(pe,"LI",{});var e8e=s(u2);rce=n(e8e,"STRONG",{});var Stt=s(rce);LLo=r(Stt,"tapex"),Stt.forEach(t),xLo=r(e8e," \u2014 "),sD=n(e8e,"A",{href:!0});var Rtt=s(sD);$Lo=r(Rtt,"BartForConditionalGeneration"),Rtt.forEach(t),kLo=r(e8e," (TAPEX model)"),e8e.forEach(t),SLo=i(pe),p2=n(pe,"LI",{});var o8e=s(p2);tce=n(o8e,"STRONG",{});var Btt=s(tce);RLo=r(Btt,"xlm-prophetnet"),Btt.forEach(t),BLo=r(o8e," \u2014 "),lD=n(o8e,"A",{href:!0});var Ptt=s(lD);PLo=r(Ptt,"XLMProphetNetForConditionalGeneration"),Ptt.forEach(t),ILo=r(o8e," (XLMProphetNet model)"),o8e.forEach(t),pe.forEach(t),qLo=i(ta),_2=n(ta,"P",{});var r8e=s(_2);NLo=r(r8e,"The model is set in evaluation mode by default using "),ace=n(r8e,"CODE",{});var Itt=s(ace);jLo=r(Itt,"model.eval()"),Itt.forEach(t),DLo=r(r8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nce=n(r8e,"CODE",{});var qtt=s(nce);GLo=r(qtt,"model.train()"),qtt.forEach(t),r8e.forEach(t),OLo=i(ta),T(b2.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),fIe=i(m),Ii=n(m,"H2",{class:!0});var pNe=s(Ii);F2=n(pNe,"A",{id:!0,class:!0,href:!0});var Ntt=s(F2);sce=n(Ntt,"SPAN",{});var jtt=s(sce);T(Hy.$$.fragment,jtt),jtt.forEach(t),Ntt.forEach(t),VLo=i(pNe),lce=n(pNe,"SPAN",{});var Dtt=s(lce);XLo=r(Dtt,"AutoModelForSequenceClassification"),Dtt.forEach(t),pNe.forEach(t),gIe=i(m),Ro=n(m,"DIV",{class:!0});var Xs=s(Ro);T(Uy.$$.fragment,Xs),zLo=i(Xs),qi=n(Xs,"P",{});var bK=s(qi);QLo=r(bK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iD=n(bK,"A",{href:!0});var Gtt=s(iD);WLo=r(Gtt,"from_pretrained()"),Gtt.forEach(t),HLo=r(bK," class method or the "),dD=n(bK,"A",{href:!0});var Ott=s(dD);ULo=r(Ott,"from_config()"),Ott.forEach(t),JLo=r(bK,` class
method.`),bK.forEach(t),YLo=i(Xs),Jy=n(Xs,"P",{});var _Ne=s(Jy);KLo=r(_Ne,"This class cannot be instantiated directly using "),ice=n(_Ne,"CODE",{});var Vtt=s(ice);ZLo=r(Vtt,"__init__()"),Vtt.forEach(t),e8o=r(_Ne," (throws an error)."),_Ne.forEach(t),o8o=i(Xs),st=n(Xs,"DIV",{class:!0});var c6=s(st);T(Yy.$$.fragment,c6),r8o=i(c6),dce=n(c6,"P",{});var Xtt=s(dce);t8o=r(Xtt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Xtt.forEach(t),a8o=i(c6),Ni=n(c6,"P",{});var FK=s(Ni);n8o=r(FK,`Note:
Loading a model from its configuration file does `),cce=n(FK,"STRONG",{});var ztt=s(cce);s8o=r(ztt,"not"),ztt.forEach(t),l8o=r(FK,` load the model weights. It only affects the
model\u2019s configuration. Use `),cD=n(FK,"A",{href:!0});var Qtt=s(cD);i8o=r(Qtt,"from_pretrained()"),Qtt.forEach(t),d8o=r(FK," to load the model weights."),FK.forEach(t),c8o=i(c6),T(v2.$$.fragment,c6),c6.forEach(t),m8o=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(Ky.$$.fragment,aa),f8o=i(aa),mce=n(aa,"P",{});var Wtt=s(mce);g8o=r(Wtt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Wtt.forEach(t),h8o=i(aa),ka=n(aa,"P",{});var m6=s(ka);u8o=r(m6,"The model class to instantiate is selected based on the "),fce=n(m6,"CODE",{});var Htt=s(fce);p8o=r(Htt,"model_type"),Htt.forEach(t),_8o=r(m6,` property of the config object (either
passed as an argument or loaded from `),gce=n(m6,"CODE",{});var Utt=s(gce);b8o=r(Utt,"pretrained_model_name_or_path"),Utt.forEach(t),F8o=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hce=n(m6,"CODE",{});var Jtt=s(hce);v8o=r(Jtt,"pretrained_model_name_or_path"),Jtt.forEach(t),T8o=r(m6,":"),m6.forEach(t),M8o=i(aa),q=n(aa,"UL",{});var N=s(q);T2=n(N,"LI",{});var t8e=s(T2);uce=n(t8e,"STRONG",{});var Ytt=s(uce);E8o=r(Ytt,"albert"),Ytt.forEach(t),C8o=r(t8e," \u2014 "),mD=n(t8e,"A",{href:!0});var Ktt=s(mD);w8o=r(Ktt,"AlbertForSequenceClassification"),Ktt.forEach(t),A8o=r(t8e," (ALBERT model)"),t8e.forEach(t),y8o=i(N),M2=n(N,"LI",{});var a8e=s(M2);pce=n(a8e,"STRONG",{});var Ztt=s(pce);L8o=r(Ztt,"bart"),Ztt.forEach(t),x8o=r(a8e," \u2014 "),fD=n(a8e,"A",{href:!0});var eat=s(fD);$8o=r(eat,"BartForSequenceClassification"),eat.forEach(t),k8o=r(a8e," (BART model)"),a8e.forEach(t),S8o=i(N),E2=n(N,"LI",{});var n8e=s(E2);_ce=n(n8e,"STRONG",{});var oat=s(_ce);R8o=r(oat,"bert"),oat.forEach(t),B8o=r(n8e," \u2014 "),gD=n(n8e,"A",{href:!0});var rat=s(gD);P8o=r(rat,"BertForSequenceClassification"),rat.forEach(t),I8o=r(n8e," (BERT model)"),n8e.forEach(t),q8o=i(N),C2=n(N,"LI",{});var s8e=s(C2);bce=n(s8e,"STRONG",{});var tat=s(bce);N8o=r(tat,"big_bird"),tat.forEach(t),j8o=r(s8e," \u2014 "),hD=n(s8e,"A",{href:!0});var aat=s(hD);D8o=r(aat,"BigBirdForSequenceClassification"),aat.forEach(t),G8o=r(s8e," (BigBird model)"),s8e.forEach(t),O8o=i(N),w2=n(N,"LI",{});var l8e=s(w2);Fce=n(l8e,"STRONG",{});var nat=s(Fce);V8o=r(nat,"bigbird_pegasus"),nat.forEach(t),X8o=r(l8e," \u2014 "),uD=n(l8e,"A",{href:!0});var sat=s(uD);z8o=r(sat,"BigBirdPegasusForSequenceClassification"),sat.forEach(t),Q8o=r(l8e," (BigBirdPegasus model)"),l8e.forEach(t),W8o=i(N),A2=n(N,"LI",{});var i8e=s(A2);vce=n(i8e,"STRONG",{});var lat=s(vce);H8o=r(lat,"camembert"),lat.forEach(t),U8o=r(i8e," \u2014 "),pD=n(i8e,"A",{href:!0});var iat=s(pD);J8o=r(iat,"CamembertForSequenceClassification"),iat.forEach(t),Y8o=r(i8e," (CamemBERT model)"),i8e.forEach(t),K8o=i(N),y2=n(N,"LI",{});var d8e=s(y2);Tce=n(d8e,"STRONG",{});var dat=s(Tce);Z8o=r(dat,"canine"),dat.forEach(t),exo=r(d8e," \u2014 "),_D=n(d8e,"A",{href:!0});var cat=s(_D);oxo=r(cat,"CanineForSequenceClassification"),cat.forEach(t),rxo=r(d8e," (Canine model)"),d8e.forEach(t),txo=i(N),L2=n(N,"LI",{});var c8e=s(L2);Mce=n(c8e,"STRONG",{});var mat=s(Mce);axo=r(mat,"convbert"),mat.forEach(t),nxo=r(c8e," \u2014 "),bD=n(c8e,"A",{href:!0});var fat=s(bD);sxo=r(fat,"ConvBertForSequenceClassification"),fat.forEach(t),lxo=r(c8e," (ConvBERT model)"),c8e.forEach(t),ixo=i(N),x2=n(N,"LI",{});var m8e=s(x2);Ece=n(m8e,"STRONG",{});var gat=s(Ece);dxo=r(gat,"ctrl"),gat.forEach(t),cxo=r(m8e," \u2014 "),FD=n(m8e,"A",{href:!0});var hat=s(FD);mxo=r(hat,"CTRLForSequenceClassification"),hat.forEach(t),fxo=r(m8e," (CTRL model)"),m8e.forEach(t),gxo=i(N),$2=n(N,"LI",{});var f8e=s($2);Cce=n(f8e,"STRONG",{});var uat=s(Cce);hxo=r(uat,"data2vec-text"),uat.forEach(t),uxo=r(f8e," \u2014 "),vD=n(f8e,"A",{href:!0});var pat=s(vD);pxo=r(pat,"Data2VecTextForSequenceClassification"),pat.forEach(t),_xo=r(f8e," (Data2VecText model)"),f8e.forEach(t),bxo=i(N),k2=n(N,"LI",{});var g8e=s(k2);wce=n(g8e,"STRONG",{});var _at=s(wce);Fxo=r(_at,"deberta"),_at.forEach(t),vxo=r(g8e," \u2014 "),TD=n(g8e,"A",{href:!0});var bat=s(TD);Txo=r(bat,"DebertaForSequenceClassification"),bat.forEach(t),Mxo=r(g8e," (DeBERTa model)"),g8e.forEach(t),Exo=i(N),S2=n(N,"LI",{});var h8e=s(S2);Ace=n(h8e,"STRONG",{});var Fat=s(Ace);Cxo=r(Fat,"deberta-v2"),Fat.forEach(t),wxo=r(h8e," \u2014 "),MD=n(h8e,"A",{href:!0});var vat=s(MD);Axo=r(vat,"DebertaV2ForSequenceClassification"),vat.forEach(t),yxo=r(h8e," (DeBERTa-v2 model)"),h8e.forEach(t),Lxo=i(N),R2=n(N,"LI",{});var u8e=s(R2);yce=n(u8e,"STRONG",{});var Tat=s(yce);xxo=r(Tat,"distilbert"),Tat.forEach(t),$xo=r(u8e," \u2014 "),ED=n(u8e,"A",{href:!0});var Mat=s(ED);kxo=r(Mat,"DistilBertForSequenceClassification"),Mat.forEach(t),Sxo=r(u8e," (DistilBERT model)"),u8e.forEach(t),Rxo=i(N),B2=n(N,"LI",{});var p8e=s(B2);Lce=n(p8e,"STRONG",{});var Eat=s(Lce);Bxo=r(Eat,"electra"),Eat.forEach(t),Pxo=r(p8e," \u2014 "),CD=n(p8e,"A",{href:!0});var Cat=s(CD);Ixo=r(Cat,"ElectraForSequenceClassification"),Cat.forEach(t),qxo=r(p8e," (ELECTRA model)"),p8e.forEach(t),Nxo=i(N),P2=n(N,"LI",{});var _8e=s(P2);xce=n(_8e,"STRONG",{});var wat=s(xce);jxo=r(wat,"flaubert"),wat.forEach(t),Dxo=r(_8e," \u2014 "),wD=n(_8e,"A",{href:!0});var Aat=s(wD);Gxo=r(Aat,"FlaubertForSequenceClassification"),Aat.forEach(t),Oxo=r(_8e," (FlauBERT model)"),_8e.forEach(t),Vxo=i(N),I2=n(N,"LI",{});var b8e=s(I2);$ce=n(b8e,"STRONG",{});var yat=s($ce);Xxo=r(yat,"fnet"),yat.forEach(t),zxo=r(b8e," \u2014 "),AD=n(b8e,"A",{href:!0});var Lat=s(AD);Qxo=r(Lat,"FNetForSequenceClassification"),Lat.forEach(t),Wxo=r(b8e," (FNet model)"),b8e.forEach(t),Hxo=i(N),q2=n(N,"LI",{});var F8e=s(q2);kce=n(F8e,"STRONG",{});var xat=s(kce);Uxo=r(xat,"funnel"),xat.forEach(t),Jxo=r(F8e," \u2014 "),yD=n(F8e,"A",{href:!0});var $at=s(yD);Yxo=r($at,"FunnelForSequenceClassification"),$at.forEach(t),Kxo=r(F8e," (Funnel Transformer model)"),F8e.forEach(t),Zxo=i(N),N2=n(N,"LI",{});var v8e=s(N2);Sce=n(v8e,"STRONG",{});var kat=s(Sce);e7o=r(kat,"gpt2"),kat.forEach(t),o7o=r(v8e," \u2014 "),LD=n(v8e,"A",{href:!0});var Sat=s(LD);r7o=r(Sat,"GPT2ForSequenceClassification"),Sat.forEach(t),t7o=r(v8e," (OpenAI GPT-2 model)"),v8e.forEach(t),a7o=i(N),j2=n(N,"LI",{});var T8e=s(j2);Rce=n(T8e,"STRONG",{});var Rat=s(Rce);n7o=r(Rat,"gpt_neo"),Rat.forEach(t),s7o=r(T8e," \u2014 "),xD=n(T8e,"A",{href:!0});var Bat=s(xD);l7o=r(Bat,"GPTNeoForSequenceClassification"),Bat.forEach(t),i7o=r(T8e," (GPT Neo model)"),T8e.forEach(t),d7o=i(N),D2=n(N,"LI",{});var M8e=s(D2);Bce=n(M8e,"STRONG",{});var Pat=s(Bce);c7o=r(Pat,"gptj"),Pat.forEach(t),m7o=r(M8e," \u2014 "),$D=n(M8e,"A",{href:!0});var Iat=s($D);f7o=r(Iat,"GPTJForSequenceClassification"),Iat.forEach(t),g7o=r(M8e," (GPT-J model)"),M8e.forEach(t),h7o=i(N),G2=n(N,"LI",{});var E8e=s(G2);Pce=n(E8e,"STRONG",{});var qat=s(Pce);u7o=r(qat,"ibert"),qat.forEach(t),p7o=r(E8e," \u2014 "),kD=n(E8e,"A",{href:!0});var Nat=s(kD);_7o=r(Nat,"IBertForSequenceClassification"),Nat.forEach(t),b7o=r(E8e," (I-BERT model)"),E8e.forEach(t),F7o=i(N),O2=n(N,"LI",{});var C8e=s(O2);Ice=n(C8e,"STRONG",{});var jat=s(Ice);v7o=r(jat,"layoutlm"),jat.forEach(t),T7o=r(C8e," \u2014 "),SD=n(C8e,"A",{href:!0});var Dat=s(SD);M7o=r(Dat,"LayoutLMForSequenceClassification"),Dat.forEach(t),E7o=r(C8e," (LayoutLM model)"),C8e.forEach(t),C7o=i(N),V2=n(N,"LI",{});var w8e=s(V2);qce=n(w8e,"STRONG",{});var Gat=s(qce);w7o=r(Gat,"layoutlmv2"),Gat.forEach(t),A7o=r(w8e," \u2014 "),RD=n(w8e,"A",{href:!0});var Oat=s(RD);y7o=r(Oat,"LayoutLMv2ForSequenceClassification"),Oat.forEach(t),L7o=r(w8e," (LayoutLMv2 model)"),w8e.forEach(t),x7o=i(N),X2=n(N,"LI",{});var A8e=s(X2);Nce=n(A8e,"STRONG",{});var Vat=s(Nce);$7o=r(Vat,"led"),Vat.forEach(t),k7o=r(A8e," \u2014 "),BD=n(A8e,"A",{href:!0});var Xat=s(BD);S7o=r(Xat,"LEDForSequenceClassification"),Xat.forEach(t),R7o=r(A8e," (LED model)"),A8e.forEach(t),B7o=i(N),z2=n(N,"LI",{});var y8e=s(z2);jce=n(y8e,"STRONG",{});var zat=s(jce);P7o=r(zat,"longformer"),zat.forEach(t),I7o=r(y8e," \u2014 "),PD=n(y8e,"A",{href:!0});var Qat=s(PD);q7o=r(Qat,"LongformerForSequenceClassification"),Qat.forEach(t),N7o=r(y8e," (Longformer model)"),y8e.forEach(t),j7o=i(N),Q2=n(N,"LI",{});var L8e=s(Q2);Dce=n(L8e,"STRONG",{});var Wat=s(Dce);D7o=r(Wat,"mbart"),Wat.forEach(t),G7o=r(L8e," \u2014 "),ID=n(L8e,"A",{href:!0});var Hat=s(ID);O7o=r(Hat,"MBartForSequenceClassification"),Hat.forEach(t),V7o=r(L8e," (mBART model)"),L8e.forEach(t),X7o=i(N),W2=n(N,"LI",{});var x8e=s(W2);Gce=n(x8e,"STRONG",{});var Uat=s(Gce);z7o=r(Uat,"megatron-bert"),Uat.forEach(t),Q7o=r(x8e," \u2014 "),qD=n(x8e,"A",{href:!0});var Jat=s(qD);W7o=r(Jat,"MegatronBertForSequenceClassification"),Jat.forEach(t),H7o=r(x8e," (MegatronBert model)"),x8e.forEach(t),U7o=i(N),H2=n(N,"LI",{});var $8e=s(H2);Oce=n($8e,"STRONG",{});var Yat=s(Oce);J7o=r(Yat,"mobilebert"),Yat.forEach(t),Y7o=r($8e," \u2014 "),ND=n($8e,"A",{href:!0});var Kat=s(ND);K7o=r(Kat,"MobileBertForSequenceClassification"),Kat.forEach(t),Z7o=r($8e," (MobileBERT model)"),$8e.forEach(t),e9o=i(N),U2=n(N,"LI",{});var k8e=s(U2);Vce=n(k8e,"STRONG",{});var Zat=s(Vce);o9o=r(Zat,"mpnet"),Zat.forEach(t),r9o=r(k8e," \u2014 "),jD=n(k8e,"A",{href:!0});var ent=s(jD);t9o=r(ent,"MPNetForSequenceClassification"),ent.forEach(t),a9o=r(k8e," (MPNet model)"),k8e.forEach(t),n9o=i(N),J2=n(N,"LI",{});var S8e=s(J2);Xce=n(S8e,"STRONG",{});var ont=s(Xce);s9o=r(ont,"nystromformer"),ont.forEach(t),l9o=r(S8e," \u2014 "),DD=n(S8e,"A",{href:!0});var rnt=s(DD);i9o=r(rnt,"NystromformerForSequenceClassification"),rnt.forEach(t),d9o=r(S8e," (Nystromformer model)"),S8e.forEach(t),c9o=i(N),Y2=n(N,"LI",{});var R8e=s(Y2);zce=n(R8e,"STRONG",{});var tnt=s(zce);m9o=r(tnt,"openai-gpt"),tnt.forEach(t),f9o=r(R8e," \u2014 "),GD=n(R8e,"A",{href:!0});var ant=s(GD);g9o=r(ant,"OpenAIGPTForSequenceClassification"),ant.forEach(t),h9o=r(R8e," (OpenAI GPT model)"),R8e.forEach(t),u9o=i(N),K2=n(N,"LI",{});var B8e=s(K2);Qce=n(B8e,"STRONG",{});var nnt=s(Qce);p9o=r(nnt,"perceiver"),nnt.forEach(t),_9o=r(B8e," \u2014 "),OD=n(B8e,"A",{href:!0});var snt=s(OD);b9o=r(snt,"PerceiverForSequenceClassification"),snt.forEach(t),F9o=r(B8e," (Perceiver model)"),B8e.forEach(t),v9o=i(N),Z2=n(N,"LI",{});var P8e=s(Z2);Wce=n(P8e,"STRONG",{});var lnt=s(Wce);T9o=r(lnt,"plbart"),lnt.forEach(t),M9o=r(P8e," \u2014 "),VD=n(P8e,"A",{href:!0});var int=s(VD);E9o=r(int,"PLBartForSequenceClassification"),int.forEach(t),C9o=r(P8e," (PLBart model)"),P8e.forEach(t),w9o=i(N),eF=n(N,"LI",{});var I8e=s(eF);Hce=n(I8e,"STRONG",{});var dnt=s(Hce);A9o=r(dnt,"qdqbert"),dnt.forEach(t),y9o=r(I8e," \u2014 "),XD=n(I8e,"A",{href:!0});var cnt=s(XD);L9o=r(cnt,"QDQBertForSequenceClassification"),cnt.forEach(t),x9o=r(I8e," (QDQBert model)"),I8e.forEach(t),$9o=i(N),oF=n(N,"LI",{});var q8e=s(oF);Uce=n(q8e,"STRONG",{});var mnt=s(Uce);k9o=r(mnt,"reformer"),mnt.forEach(t),S9o=r(q8e," \u2014 "),zD=n(q8e,"A",{href:!0});var fnt=s(zD);R9o=r(fnt,"ReformerForSequenceClassification"),fnt.forEach(t),B9o=r(q8e," (Reformer model)"),q8e.forEach(t),P9o=i(N),rF=n(N,"LI",{});var N8e=s(rF);Jce=n(N8e,"STRONG",{});var gnt=s(Jce);I9o=r(gnt,"rembert"),gnt.forEach(t),q9o=r(N8e," \u2014 "),QD=n(N8e,"A",{href:!0});var hnt=s(QD);N9o=r(hnt,"RemBertForSequenceClassification"),hnt.forEach(t),j9o=r(N8e," (RemBERT model)"),N8e.forEach(t),D9o=i(N),tF=n(N,"LI",{});var j8e=s(tF);Yce=n(j8e,"STRONG",{});var unt=s(Yce);G9o=r(unt,"roberta"),unt.forEach(t),O9o=r(j8e," \u2014 "),WD=n(j8e,"A",{href:!0});var pnt=s(WD);V9o=r(pnt,"RobertaForSequenceClassification"),pnt.forEach(t),X9o=r(j8e," (RoBERTa model)"),j8e.forEach(t),z9o=i(N),aF=n(N,"LI",{});var D8e=s(aF);Kce=n(D8e,"STRONG",{});var _nt=s(Kce);Q9o=r(_nt,"roformer"),_nt.forEach(t),W9o=r(D8e," \u2014 "),HD=n(D8e,"A",{href:!0});var bnt=s(HD);H9o=r(bnt,"RoFormerForSequenceClassification"),bnt.forEach(t),U9o=r(D8e," (RoFormer model)"),D8e.forEach(t),J9o=i(N),nF=n(N,"LI",{});var G8e=s(nF);Zce=n(G8e,"STRONG",{});var Fnt=s(Zce);Y9o=r(Fnt,"squeezebert"),Fnt.forEach(t),K9o=r(G8e," \u2014 "),UD=n(G8e,"A",{href:!0});var vnt=s(UD);Z9o=r(vnt,"SqueezeBertForSequenceClassification"),vnt.forEach(t),e$o=r(G8e," (SqueezeBERT model)"),G8e.forEach(t),o$o=i(N),sF=n(N,"LI",{});var O8e=s(sF);eme=n(O8e,"STRONG",{});var Tnt=s(eme);r$o=r(Tnt,"tapas"),Tnt.forEach(t),t$o=r(O8e," \u2014 "),JD=n(O8e,"A",{href:!0});var Mnt=s(JD);a$o=r(Mnt,"TapasForSequenceClassification"),Mnt.forEach(t),n$o=r(O8e," (TAPAS model)"),O8e.forEach(t),s$o=i(N),lF=n(N,"LI",{});var V8e=s(lF);ome=n(V8e,"STRONG",{});var Ent=s(ome);l$o=r(Ent,"tapex"),Ent.forEach(t),i$o=r(V8e," \u2014 "),YD=n(V8e,"A",{href:!0});var Cnt=s(YD);d$o=r(Cnt,"BartForSequenceClassification"),Cnt.forEach(t),c$o=r(V8e," (TAPEX model)"),V8e.forEach(t),m$o=i(N),iF=n(N,"LI",{});var X8e=s(iF);rme=n(X8e,"STRONG",{});var wnt=s(rme);f$o=r(wnt,"transfo-xl"),wnt.forEach(t),g$o=r(X8e," \u2014 "),KD=n(X8e,"A",{href:!0});var Ant=s(KD);h$o=r(Ant,"TransfoXLForSequenceClassification"),Ant.forEach(t),u$o=r(X8e," (Transformer-XL model)"),X8e.forEach(t),p$o=i(N),dF=n(N,"LI",{});var z8e=s(dF);tme=n(z8e,"STRONG",{});var ynt=s(tme);_$o=r(ynt,"xlm"),ynt.forEach(t),b$o=r(z8e," \u2014 "),ZD=n(z8e,"A",{href:!0});var Lnt=s(ZD);F$o=r(Lnt,"XLMForSequenceClassification"),Lnt.forEach(t),v$o=r(z8e," (XLM model)"),z8e.forEach(t),T$o=i(N),cF=n(N,"LI",{});var Q8e=s(cF);ame=n(Q8e,"STRONG",{});var xnt=s(ame);M$o=r(xnt,"xlm-roberta"),xnt.forEach(t),E$o=r(Q8e," \u2014 "),eG=n(Q8e,"A",{href:!0});var $nt=s(eG);C$o=r($nt,"XLMRobertaForSequenceClassification"),$nt.forEach(t),w$o=r(Q8e," (XLM-RoBERTa model)"),Q8e.forEach(t),A$o=i(N),mF=n(N,"LI",{});var W8e=s(mF);nme=n(W8e,"STRONG",{});var knt=s(nme);y$o=r(knt,"xlm-roberta-xl"),knt.forEach(t),L$o=r(W8e," \u2014 "),oG=n(W8e,"A",{href:!0});var Snt=s(oG);x$o=r(Snt,"XLMRobertaXLForSequenceClassification"),Snt.forEach(t),$$o=r(W8e," (XLM-RoBERTa-XL model)"),W8e.forEach(t),k$o=i(N),fF=n(N,"LI",{});var H8e=s(fF);sme=n(H8e,"STRONG",{});var Rnt=s(sme);S$o=r(Rnt,"xlnet"),Rnt.forEach(t),R$o=r(H8e," \u2014 "),rG=n(H8e,"A",{href:!0});var Bnt=s(rG);B$o=r(Bnt,"XLNetForSequenceClassification"),Bnt.forEach(t),P$o=r(H8e," (XLNet model)"),H8e.forEach(t),I$o=i(N),gF=n(N,"LI",{});var U8e=s(gF);lme=n(U8e,"STRONG",{});var Pnt=s(lme);q$o=r(Pnt,"yoso"),Pnt.forEach(t),N$o=r(U8e," \u2014 "),tG=n(U8e,"A",{href:!0});var Int=s(tG);j$o=r(Int,"YosoForSequenceClassification"),Int.forEach(t),D$o=r(U8e," (YOSO model)"),U8e.forEach(t),N.forEach(t),G$o=i(aa),hF=n(aa,"P",{});var J8e=s(hF);O$o=r(J8e,"The model is set in evaluation mode by default using "),ime=n(J8e,"CODE",{});var qnt=s(ime);V$o=r(qnt,"model.eval()"),qnt.forEach(t),X$o=r(J8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dme=n(J8e,"CODE",{});var Nnt=s(dme);z$o=r(Nnt,"model.train()"),Nnt.forEach(t),J8e.forEach(t),Q$o=i(aa),T(uF.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),hIe=i(m),ji=n(m,"H2",{class:!0});var bNe=s(ji);pF=n(bNe,"A",{id:!0,class:!0,href:!0});var jnt=s(pF);cme=n(jnt,"SPAN",{});var Dnt=s(cme);T(Zy.$$.fragment,Dnt),Dnt.forEach(t),jnt.forEach(t),W$o=i(bNe),mme=n(bNe,"SPAN",{});var Gnt=s(mme);H$o=r(Gnt,"AutoModelForMultipleChoice"),Gnt.forEach(t),bNe.forEach(t),uIe=i(m),Bo=n(m,"DIV",{class:!0});var zs=s(Bo);T(eL.$$.fragment,zs),U$o=i(zs),Di=n(zs,"P",{});var vK=s(Di);J$o=r(vK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aG=n(vK,"A",{href:!0});var Ont=s(aG);Y$o=r(Ont,"from_pretrained()"),Ont.forEach(t),K$o=r(vK," class method or the "),nG=n(vK,"A",{href:!0});var Vnt=s(nG);Z$o=r(Vnt,"from_config()"),Vnt.forEach(t),eko=r(vK,` class
method.`),vK.forEach(t),oko=i(zs),oL=n(zs,"P",{});var FNe=s(oL);rko=r(FNe,"This class cannot be instantiated directly using "),fme=n(FNe,"CODE",{});var Xnt=s(fme);tko=r(Xnt,"__init__()"),Xnt.forEach(t),ako=r(FNe," (throws an error)."),FNe.forEach(t),nko=i(zs),lt=n(zs,"DIV",{class:!0});var f6=s(lt);T(rL.$$.fragment,f6),sko=i(f6),gme=n(f6,"P",{});var znt=s(gme);lko=r(znt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),znt.forEach(t),iko=i(f6),Gi=n(f6,"P",{});var TK=s(Gi);dko=r(TK,`Note:
Loading a model from its configuration file does `),hme=n(TK,"STRONG",{});var Qnt=s(hme);cko=r(Qnt,"not"),Qnt.forEach(t),mko=r(TK,` load the model weights. It only affects the
model\u2019s configuration. Use `),sG=n(TK,"A",{href:!0});var Wnt=s(sG);fko=r(Wnt,"from_pretrained()"),Wnt.forEach(t),gko=r(TK," to load the model weights."),TK.forEach(t),hko=i(f6),T(_F.$$.fragment,f6),f6.forEach(t),uko=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(tL.$$.fragment,na),pko=i(na),ume=n(na,"P",{});var Hnt=s(ume);_ko=r(Hnt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Hnt.forEach(t),bko=i(na),Sa=n(na,"P",{});var g6=s(Sa);Fko=r(g6,"The model class to instantiate is selected based on the "),pme=n(g6,"CODE",{});var Unt=s(pme);vko=r(Unt,"model_type"),Unt.forEach(t),Tko=r(g6,` property of the config object (either
passed as an argument or loaded from `),_me=n(g6,"CODE",{});var Jnt=s(_me);Mko=r(Jnt,"pretrained_model_name_or_path"),Jnt.forEach(t),Eko=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bme=n(g6,"CODE",{});var Ynt=s(bme);Cko=r(Ynt,"pretrained_model_name_or_path"),Ynt.forEach(t),wko=r(g6,":"),g6.forEach(t),Ako=i(na),Y=n(na,"UL",{});var K=s(Y);bF=n(K,"LI",{});var Y8e=s(bF);Fme=n(Y8e,"STRONG",{});var Knt=s(Fme);yko=r(Knt,"albert"),Knt.forEach(t),Lko=r(Y8e," \u2014 "),lG=n(Y8e,"A",{href:!0});var Znt=s(lG);xko=r(Znt,"AlbertForMultipleChoice"),Znt.forEach(t),$ko=r(Y8e," (ALBERT model)"),Y8e.forEach(t),kko=i(K),FF=n(K,"LI",{});var K8e=s(FF);vme=n(K8e,"STRONG",{});var est=s(vme);Sko=r(est,"bert"),est.forEach(t),Rko=r(K8e," \u2014 "),iG=n(K8e,"A",{href:!0});var ost=s(iG);Bko=r(ost,"BertForMultipleChoice"),ost.forEach(t),Pko=r(K8e," (BERT model)"),K8e.forEach(t),Iko=i(K),vF=n(K,"LI",{});var Z8e=s(vF);Tme=n(Z8e,"STRONG",{});var rst=s(Tme);qko=r(rst,"big_bird"),rst.forEach(t),Nko=r(Z8e," \u2014 "),dG=n(Z8e,"A",{href:!0});var tst=s(dG);jko=r(tst,"BigBirdForMultipleChoice"),tst.forEach(t),Dko=r(Z8e," (BigBird model)"),Z8e.forEach(t),Gko=i(K),TF=n(K,"LI",{});var exe=s(TF);Mme=n(exe,"STRONG",{});var ast=s(Mme);Oko=r(ast,"camembert"),ast.forEach(t),Vko=r(exe," \u2014 "),cG=n(exe,"A",{href:!0});var nst=s(cG);Xko=r(nst,"CamembertForMultipleChoice"),nst.forEach(t),zko=r(exe," (CamemBERT model)"),exe.forEach(t),Qko=i(K),MF=n(K,"LI",{});var oxe=s(MF);Eme=n(oxe,"STRONG",{});var sst=s(Eme);Wko=r(sst,"canine"),sst.forEach(t),Hko=r(oxe," \u2014 "),mG=n(oxe,"A",{href:!0});var lst=s(mG);Uko=r(lst,"CanineForMultipleChoice"),lst.forEach(t),Jko=r(oxe," (Canine model)"),oxe.forEach(t),Yko=i(K),EF=n(K,"LI",{});var rxe=s(EF);Cme=n(rxe,"STRONG",{});var ist=s(Cme);Kko=r(ist,"convbert"),ist.forEach(t),Zko=r(rxe," \u2014 "),fG=n(rxe,"A",{href:!0});var dst=s(fG);eSo=r(dst,"ConvBertForMultipleChoice"),dst.forEach(t),oSo=r(rxe," (ConvBERT model)"),rxe.forEach(t),rSo=i(K),CF=n(K,"LI",{});var txe=s(CF);wme=n(txe,"STRONG",{});var cst=s(wme);tSo=r(cst,"data2vec-text"),cst.forEach(t),aSo=r(txe," \u2014 "),gG=n(txe,"A",{href:!0});var mst=s(gG);nSo=r(mst,"Data2VecTextForMultipleChoice"),mst.forEach(t),sSo=r(txe," (Data2VecText model)"),txe.forEach(t),lSo=i(K),wF=n(K,"LI",{});var axe=s(wF);Ame=n(axe,"STRONG",{});var fst=s(Ame);iSo=r(fst,"deberta-v2"),fst.forEach(t),dSo=r(axe," \u2014 "),hG=n(axe,"A",{href:!0});var gst=s(hG);cSo=r(gst,"DebertaV2ForMultipleChoice"),gst.forEach(t),mSo=r(axe," (DeBERTa-v2 model)"),axe.forEach(t),fSo=i(K),AF=n(K,"LI",{});var nxe=s(AF);yme=n(nxe,"STRONG",{});var hst=s(yme);gSo=r(hst,"distilbert"),hst.forEach(t),hSo=r(nxe," \u2014 "),uG=n(nxe,"A",{href:!0});var ust=s(uG);uSo=r(ust,"DistilBertForMultipleChoice"),ust.forEach(t),pSo=r(nxe," (DistilBERT model)"),nxe.forEach(t),_So=i(K),yF=n(K,"LI",{});var sxe=s(yF);Lme=n(sxe,"STRONG",{});var pst=s(Lme);bSo=r(pst,"electra"),pst.forEach(t),FSo=r(sxe," \u2014 "),pG=n(sxe,"A",{href:!0});var _st=s(pG);vSo=r(_st,"ElectraForMultipleChoice"),_st.forEach(t),TSo=r(sxe," (ELECTRA model)"),sxe.forEach(t),MSo=i(K),LF=n(K,"LI",{});var lxe=s(LF);xme=n(lxe,"STRONG",{});var bst=s(xme);ESo=r(bst,"flaubert"),bst.forEach(t),CSo=r(lxe," \u2014 "),_G=n(lxe,"A",{href:!0});var Fst=s(_G);wSo=r(Fst,"FlaubertForMultipleChoice"),Fst.forEach(t),ASo=r(lxe," (FlauBERT model)"),lxe.forEach(t),ySo=i(K),xF=n(K,"LI",{});var ixe=s(xF);$me=n(ixe,"STRONG",{});var vst=s($me);LSo=r(vst,"fnet"),vst.forEach(t),xSo=r(ixe," \u2014 "),bG=n(ixe,"A",{href:!0});var Tst=s(bG);$So=r(Tst,"FNetForMultipleChoice"),Tst.forEach(t),kSo=r(ixe," (FNet model)"),ixe.forEach(t),SSo=i(K),$F=n(K,"LI",{});var dxe=s($F);kme=n(dxe,"STRONG",{});var Mst=s(kme);RSo=r(Mst,"funnel"),Mst.forEach(t),BSo=r(dxe," \u2014 "),FG=n(dxe,"A",{href:!0});var Est=s(FG);PSo=r(Est,"FunnelForMultipleChoice"),Est.forEach(t),ISo=r(dxe," (Funnel Transformer model)"),dxe.forEach(t),qSo=i(K),kF=n(K,"LI",{});var cxe=s(kF);Sme=n(cxe,"STRONG",{});var Cst=s(Sme);NSo=r(Cst,"ibert"),Cst.forEach(t),jSo=r(cxe," \u2014 "),vG=n(cxe,"A",{href:!0});var wst=s(vG);DSo=r(wst,"IBertForMultipleChoice"),wst.forEach(t),GSo=r(cxe," (I-BERT model)"),cxe.forEach(t),OSo=i(K),SF=n(K,"LI",{});var mxe=s(SF);Rme=n(mxe,"STRONG",{});var Ast=s(Rme);VSo=r(Ast,"longformer"),Ast.forEach(t),XSo=r(mxe," \u2014 "),TG=n(mxe,"A",{href:!0});var yst=s(TG);zSo=r(yst,"LongformerForMultipleChoice"),yst.forEach(t),QSo=r(mxe," (Longformer model)"),mxe.forEach(t),WSo=i(K),RF=n(K,"LI",{});var fxe=s(RF);Bme=n(fxe,"STRONG",{});var Lst=s(Bme);HSo=r(Lst,"megatron-bert"),Lst.forEach(t),USo=r(fxe," \u2014 "),MG=n(fxe,"A",{href:!0});var xst=s(MG);JSo=r(xst,"MegatronBertForMultipleChoice"),xst.forEach(t),YSo=r(fxe," (MegatronBert model)"),fxe.forEach(t),KSo=i(K),BF=n(K,"LI",{});var gxe=s(BF);Pme=n(gxe,"STRONG",{});var $st=s(Pme);ZSo=r($st,"mobilebert"),$st.forEach(t),eRo=r(gxe," \u2014 "),EG=n(gxe,"A",{href:!0});var kst=s(EG);oRo=r(kst,"MobileBertForMultipleChoice"),kst.forEach(t),rRo=r(gxe," (MobileBERT model)"),gxe.forEach(t),tRo=i(K),PF=n(K,"LI",{});var hxe=s(PF);Ime=n(hxe,"STRONG",{});var Sst=s(Ime);aRo=r(Sst,"mpnet"),Sst.forEach(t),nRo=r(hxe," \u2014 "),CG=n(hxe,"A",{href:!0});var Rst=s(CG);sRo=r(Rst,"MPNetForMultipleChoice"),Rst.forEach(t),lRo=r(hxe," (MPNet model)"),hxe.forEach(t),iRo=i(K),IF=n(K,"LI",{});var uxe=s(IF);qme=n(uxe,"STRONG",{});var Bst=s(qme);dRo=r(Bst,"nystromformer"),Bst.forEach(t),cRo=r(uxe," \u2014 "),wG=n(uxe,"A",{href:!0});var Pst=s(wG);mRo=r(Pst,"NystromformerForMultipleChoice"),Pst.forEach(t),fRo=r(uxe," (Nystromformer model)"),uxe.forEach(t),gRo=i(K),qF=n(K,"LI",{});var pxe=s(qF);Nme=n(pxe,"STRONG",{});var Ist=s(Nme);hRo=r(Ist,"qdqbert"),Ist.forEach(t),uRo=r(pxe," \u2014 "),AG=n(pxe,"A",{href:!0});var qst=s(AG);pRo=r(qst,"QDQBertForMultipleChoice"),qst.forEach(t),_Ro=r(pxe," (QDQBert model)"),pxe.forEach(t),bRo=i(K),NF=n(K,"LI",{});var _xe=s(NF);jme=n(_xe,"STRONG",{});var Nst=s(jme);FRo=r(Nst,"rembert"),Nst.forEach(t),vRo=r(_xe," \u2014 "),yG=n(_xe,"A",{href:!0});var jst=s(yG);TRo=r(jst,"RemBertForMultipleChoice"),jst.forEach(t),MRo=r(_xe," (RemBERT model)"),_xe.forEach(t),ERo=i(K),jF=n(K,"LI",{});var bxe=s(jF);Dme=n(bxe,"STRONG",{});var Dst=s(Dme);CRo=r(Dst,"roberta"),Dst.forEach(t),wRo=r(bxe," \u2014 "),LG=n(bxe,"A",{href:!0});var Gst=s(LG);ARo=r(Gst,"RobertaForMultipleChoice"),Gst.forEach(t),yRo=r(bxe," (RoBERTa model)"),bxe.forEach(t),LRo=i(K),DF=n(K,"LI",{});var Fxe=s(DF);Gme=n(Fxe,"STRONG",{});var Ost=s(Gme);xRo=r(Ost,"roformer"),Ost.forEach(t),$Ro=r(Fxe," \u2014 "),xG=n(Fxe,"A",{href:!0});var Vst=s(xG);kRo=r(Vst,"RoFormerForMultipleChoice"),Vst.forEach(t),SRo=r(Fxe," (RoFormer model)"),Fxe.forEach(t),RRo=i(K),GF=n(K,"LI",{});var vxe=s(GF);Ome=n(vxe,"STRONG",{});var Xst=s(Ome);BRo=r(Xst,"squeezebert"),Xst.forEach(t),PRo=r(vxe," \u2014 "),$G=n(vxe,"A",{href:!0});var zst=s($G);IRo=r(zst,"SqueezeBertForMultipleChoice"),zst.forEach(t),qRo=r(vxe," (SqueezeBERT model)"),vxe.forEach(t),NRo=i(K),OF=n(K,"LI",{});var Txe=s(OF);Vme=n(Txe,"STRONG",{});var Qst=s(Vme);jRo=r(Qst,"xlm"),Qst.forEach(t),DRo=r(Txe," \u2014 "),kG=n(Txe,"A",{href:!0});var Wst=s(kG);GRo=r(Wst,"XLMForMultipleChoice"),Wst.forEach(t),ORo=r(Txe," (XLM model)"),Txe.forEach(t),VRo=i(K),VF=n(K,"LI",{});var Mxe=s(VF);Xme=n(Mxe,"STRONG",{});var Hst=s(Xme);XRo=r(Hst,"xlm-roberta"),Hst.forEach(t),zRo=r(Mxe," \u2014 "),SG=n(Mxe,"A",{href:!0});var Ust=s(SG);QRo=r(Ust,"XLMRobertaForMultipleChoice"),Ust.forEach(t),WRo=r(Mxe," (XLM-RoBERTa model)"),Mxe.forEach(t),HRo=i(K),XF=n(K,"LI",{});var Exe=s(XF);zme=n(Exe,"STRONG",{});var Jst=s(zme);URo=r(Jst,"xlm-roberta-xl"),Jst.forEach(t),JRo=r(Exe," \u2014 "),RG=n(Exe,"A",{href:!0});var Yst=s(RG);YRo=r(Yst,"XLMRobertaXLForMultipleChoice"),Yst.forEach(t),KRo=r(Exe," (XLM-RoBERTa-XL model)"),Exe.forEach(t),ZRo=i(K),zF=n(K,"LI",{});var Cxe=s(zF);Qme=n(Cxe,"STRONG",{});var Kst=s(Qme);eBo=r(Kst,"xlnet"),Kst.forEach(t),oBo=r(Cxe," \u2014 "),BG=n(Cxe,"A",{href:!0});var Zst=s(BG);rBo=r(Zst,"XLNetForMultipleChoice"),Zst.forEach(t),tBo=r(Cxe," (XLNet model)"),Cxe.forEach(t),aBo=i(K),QF=n(K,"LI",{});var wxe=s(QF);Wme=n(wxe,"STRONG",{});var elt=s(Wme);nBo=r(elt,"yoso"),elt.forEach(t),sBo=r(wxe," \u2014 "),PG=n(wxe,"A",{href:!0});var olt=s(PG);lBo=r(olt,"YosoForMultipleChoice"),olt.forEach(t),iBo=r(wxe," (YOSO model)"),wxe.forEach(t),K.forEach(t),dBo=i(na),WF=n(na,"P",{});var Axe=s(WF);cBo=r(Axe,"The model is set in evaluation mode by default using "),Hme=n(Axe,"CODE",{});var rlt=s(Hme);mBo=r(rlt,"model.eval()"),rlt.forEach(t),fBo=r(Axe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ume=n(Axe,"CODE",{});var tlt=s(Ume);gBo=r(tlt,"model.train()"),tlt.forEach(t),Axe.forEach(t),hBo=i(na),T(HF.$$.fragment,na),na.forEach(t),zs.forEach(t),pIe=i(m),Oi=n(m,"H2",{class:!0});var vNe=s(Oi);UF=n(vNe,"A",{id:!0,class:!0,href:!0});var alt=s(UF);Jme=n(alt,"SPAN",{});var nlt=s(Jme);T(aL.$$.fragment,nlt),nlt.forEach(t),alt.forEach(t),uBo=i(vNe),Yme=n(vNe,"SPAN",{});var slt=s(Yme);pBo=r(slt,"AutoModelForNextSentencePrediction"),slt.forEach(t),vNe.forEach(t),_Ie=i(m),Po=n(m,"DIV",{class:!0});var Qs=s(Po);T(nL.$$.fragment,Qs),_Bo=i(Qs),Vi=n(Qs,"P",{});var MK=s(Vi);bBo=r(MK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IG=n(MK,"A",{href:!0});var llt=s(IG);FBo=r(llt,"from_pretrained()"),llt.forEach(t),vBo=r(MK," class method or the "),qG=n(MK,"A",{href:!0});var ilt=s(qG);TBo=r(ilt,"from_config()"),ilt.forEach(t),MBo=r(MK,` class
method.`),MK.forEach(t),EBo=i(Qs),sL=n(Qs,"P",{});var TNe=s(sL);CBo=r(TNe,"This class cannot be instantiated directly using "),Kme=n(TNe,"CODE",{});var dlt=s(Kme);wBo=r(dlt,"__init__()"),dlt.forEach(t),ABo=r(TNe," (throws an error)."),TNe.forEach(t),yBo=i(Qs),it=n(Qs,"DIV",{class:!0});var h6=s(it);T(lL.$$.fragment,h6),LBo=i(h6),Zme=n(h6,"P",{});var clt=s(Zme);xBo=r(clt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),clt.forEach(t),$Bo=i(h6),Xi=n(h6,"P",{});var EK=s(Xi);kBo=r(EK,`Note:
Loading a model from its configuration file does `),efe=n(EK,"STRONG",{});var mlt=s(efe);SBo=r(mlt,"not"),mlt.forEach(t),RBo=r(EK,` load the model weights. It only affects the
model\u2019s configuration. Use `),NG=n(EK,"A",{href:!0});var flt=s(NG);BBo=r(flt,"from_pretrained()"),flt.forEach(t),PBo=r(EK," to load the model weights."),EK.forEach(t),IBo=i(h6),T(JF.$$.fragment,h6),h6.forEach(t),qBo=i(Qs),oo=n(Qs,"DIV",{class:!0});var sa=s(oo);T(iL.$$.fragment,sa),NBo=i(sa),ofe=n(sa,"P",{});var glt=s(ofe);jBo=r(glt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),glt.forEach(t),DBo=i(sa),Ra=n(sa,"P",{});var u6=s(Ra);GBo=r(u6,"The model class to instantiate is selected based on the "),rfe=n(u6,"CODE",{});var hlt=s(rfe);OBo=r(hlt,"model_type"),hlt.forEach(t),VBo=r(u6,` property of the config object (either
passed as an argument or loaded from `),tfe=n(u6,"CODE",{});var ult=s(tfe);XBo=r(ult,"pretrained_model_name_or_path"),ult.forEach(t),zBo=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),afe=n(u6,"CODE",{});var plt=s(afe);QBo=r(plt,"pretrained_model_name_or_path"),plt.forEach(t),WBo=r(u6,":"),u6.forEach(t),HBo=i(sa),Yr=n(sa,"UL",{});var Ws=s(Yr);YF=n(Ws,"LI",{});var yxe=s(YF);nfe=n(yxe,"STRONG",{});var _lt=s(nfe);UBo=r(_lt,"bert"),_lt.forEach(t),JBo=r(yxe," \u2014 "),jG=n(yxe,"A",{href:!0});var blt=s(jG);YBo=r(blt,"BertForNextSentencePrediction"),blt.forEach(t),KBo=r(yxe," (BERT model)"),yxe.forEach(t),ZBo=i(Ws),KF=n(Ws,"LI",{});var Lxe=s(KF);sfe=n(Lxe,"STRONG",{});var Flt=s(sfe);ePo=r(Flt,"fnet"),Flt.forEach(t),oPo=r(Lxe," \u2014 "),DG=n(Lxe,"A",{href:!0});var vlt=s(DG);rPo=r(vlt,"FNetForNextSentencePrediction"),vlt.forEach(t),tPo=r(Lxe," (FNet model)"),Lxe.forEach(t),aPo=i(Ws),ZF=n(Ws,"LI",{});var xxe=s(ZF);lfe=n(xxe,"STRONG",{});var Tlt=s(lfe);nPo=r(Tlt,"megatron-bert"),Tlt.forEach(t),sPo=r(xxe," \u2014 "),GG=n(xxe,"A",{href:!0});var Mlt=s(GG);lPo=r(Mlt,"MegatronBertForNextSentencePrediction"),Mlt.forEach(t),iPo=r(xxe," (MegatronBert model)"),xxe.forEach(t),dPo=i(Ws),ev=n(Ws,"LI",{});var $xe=s(ev);ife=n($xe,"STRONG",{});var Elt=s(ife);cPo=r(Elt,"mobilebert"),Elt.forEach(t),mPo=r($xe," \u2014 "),OG=n($xe,"A",{href:!0});var Clt=s(OG);fPo=r(Clt,"MobileBertForNextSentencePrediction"),Clt.forEach(t),gPo=r($xe," (MobileBERT model)"),$xe.forEach(t),hPo=i(Ws),ov=n(Ws,"LI",{});var kxe=s(ov);dfe=n(kxe,"STRONG",{});var wlt=s(dfe);uPo=r(wlt,"qdqbert"),wlt.forEach(t),pPo=r(kxe," \u2014 "),VG=n(kxe,"A",{href:!0});var Alt=s(VG);_Po=r(Alt,"QDQBertForNextSentencePrediction"),Alt.forEach(t),bPo=r(kxe," (QDQBert model)"),kxe.forEach(t),Ws.forEach(t),FPo=i(sa),rv=n(sa,"P",{});var Sxe=s(rv);vPo=r(Sxe,"The model is set in evaluation mode by default using "),cfe=n(Sxe,"CODE",{});var ylt=s(cfe);TPo=r(ylt,"model.eval()"),ylt.forEach(t),MPo=r(Sxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mfe=n(Sxe,"CODE",{});var Llt=s(mfe);EPo=r(Llt,"model.train()"),Llt.forEach(t),Sxe.forEach(t),CPo=i(sa),T(tv.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),bIe=i(m),zi=n(m,"H2",{class:!0});var MNe=s(zi);av=n(MNe,"A",{id:!0,class:!0,href:!0});var xlt=s(av);ffe=n(xlt,"SPAN",{});var $lt=s(ffe);T(dL.$$.fragment,$lt),$lt.forEach(t),xlt.forEach(t),wPo=i(MNe),gfe=n(MNe,"SPAN",{});var klt=s(gfe);APo=r(klt,"AutoModelForTokenClassification"),klt.forEach(t),MNe.forEach(t),FIe=i(m),Io=n(m,"DIV",{class:!0});var Hs=s(Io);T(cL.$$.fragment,Hs),yPo=i(Hs),Qi=n(Hs,"P",{});var CK=s(Qi);LPo=r(CK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XG=n(CK,"A",{href:!0});var Slt=s(XG);xPo=r(Slt,"from_pretrained()"),Slt.forEach(t),$Po=r(CK," class method or the "),zG=n(CK,"A",{href:!0});var Rlt=s(zG);kPo=r(Rlt,"from_config()"),Rlt.forEach(t),SPo=r(CK,` class
method.`),CK.forEach(t),RPo=i(Hs),mL=n(Hs,"P",{});var ENe=s(mL);BPo=r(ENe,"This class cannot be instantiated directly using "),hfe=n(ENe,"CODE",{});var Blt=s(hfe);PPo=r(Blt,"__init__()"),Blt.forEach(t),IPo=r(ENe," (throws an error)."),ENe.forEach(t),qPo=i(Hs),dt=n(Hs,"DIV",{class:!0});var p6=s(dt);T(fL.$$.fragment,p6),NPo=i(p6),ufe=n(p6,"P",{});var Plt=s(ufe);jPo=r(Plt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Plt.forEach(t),DPo=i(p6),Wi=n(p6,"P",{});var wK=s(Wi);GPo=r(wK,`Note:
Loading a model from its configuration file does `),pfe=n(wK,"STRONG",{});var Ilt=s(pfe);OPo=r(Ilt,"not"),Ilt.forEach(t),VPo=r(wK,` load the model weights. It only affects the
model\u2019s configuration. Use `),QG=n(wK,"A",{href:!0});var qlt=s(QG);XPo=r(qlt,"from_pretrained()"),qlt.forEach(t),zPo=r(wK," to load the model weights."),wK.forEach(t),QPo=i(p6),T(nv.$$.fragment,p6),p6.forEach(t),WPo=i(Hs),ro=n(Hs,"DIV",{class:!0});var la=s(ro);T(gL.$$.fragment,la),HPo=i(la),_fe=n(la,"P",{});var Nlt=s(_fe);UPo=r(Nlt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Nlt.forEach(t),JPo=i(la),Ba=n(la,"P",{});var _6=s(Ba);YPo=r(_6,"The model class to instantiate is selected based on the "),bfe=n(_6,"CODE",{});var jlt=s(bfe);KPo=r(jlt,"model_type"),jlt.forEach(t),ZPo=r(_6,` property of the config object (either
passed as an argument or loaded from `),Ffe=n(_6,"CODE",{});var Dlt=s(Ffe);eIo=r(Dlt,"pretrained_model_name_or_path"),Dlt.forEach(t),oIo=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vfe=n(_6,"CODE",{});var Glt=s(vfe);rIo=r(Glt,"pretrained_model_name_or_path"),Glt.forEach(t),tIo=r(_6,":"),_6.forEach(t),aIo=i(la),U=n(la,"UL",{});var J=s(U);sv=n(J,"LI",{});var Rxe=s(sv);Tfe=n(Rxe,"STRONG",{});var Olt=s(Tfe);nIo=r(Olt,"albert"),Olt.forEach(t),sIo=r(Rxe," \u2014 "),WG=n(Rxe,"A",{href:!0});var Vlt=s(WG);lIo=r(Vlt,"AlbertForTokenClassification"),Vlt.forEach(t),iIo=r(Rxe," (ALBERT model)"),Rxe.forEach(t),dIo=i(J),lv=n(J,"LI",{});var Bxe=s(lv);Mfe=n(Bxe,"STRONG",{});var Xlt=s(Mfe);cIo=r(Xlt,"bert"),Xlt.forEach(t),mIo=r(Bxe," \u2014 "),HG=n(Bxe,"A",{href:!0});var zlt=s(HG);fIo=r(zlt,"BertForTokenClassification"),zlt.forEach(t),gIo=r(Bxe," (BERT model)"),Bxe.forEach(t),hIo=i(J),iv=n(J,"LI",{});var Pxe=s(iv);Efe=n(Pxe,"STRONG",{});var Qlt=s(Efe);uIo=r(Qlt,"big_bird"),Qlt.forEach(t),pIo=r(Pxe," \u2014 "),UG=n(Pxe,"A",{href:!0});var Wlt=s(UG);_Io=r(Wlt,"BigBirdForTokenClassification"),Wlt.forEach(t),bIo=r(Pxe," (BigBird model)"),Pxe.forEach(t),FIo=i(J),dv=n(J,"LI",{});var Ixe=s(dv);Cfe=n(Ixe,"STRONG",{});var Hlt=s(Cfe);vIo=r(Hlt,"camembert"),Hlt.forEach(t),TIo=r(Ixe," \u2014 "),JG=n(Ixe,"A",{href:!0});var Ult=s(JG);MIo=r(Ult,"CamembertForTokenClassification"),Ult.forEach(t),EIo=r(Ixe," (CamemBERT model)"),Ixe.forEach(t),CIo=i(J),cv=n(J,"LI",{});var qxe=s(cv);wfe=n(qxe,"STRONG",{});var Jlt=s(wfe);wIo=r(Jlt,"canine"),Jlt.forEach(t),AIo=r(qxe," \u2014 "),YG=n(qxe,"A",{href:!0});var Ylt=s(YG);yIo=r(Ylt,"CanineForTokenClassification"),Ylt.forEach(t),LIo=r(qxe," (Canine model)"),qxe.forEach(t),xIo=i(J),mv=n(J,"LI",{});var Nxe=s(mv);Afe=n(Nxe,"STRONG",{});var Klt=s(Afe);$Io=r(Klt,"convbert"),Klt.forEach(t),kIo=r(Nxe," \u2014 "),KG=n(Nxe,"A",{href:!0});var Zlt=s(KG);SIo=r(Zlt,"ConvBertForTokenClassification"),Zlt.forEach(t),RIo=r(Nxe," (ConvBERT model)"),Nxe.forEach(t),BIo=i(J),fv=n(J,"LI",{});var jxe=s(fv);yfe=n(jxe,"STRONG",{});var eit=s(yfe);PIo=r(eit,"data2vec-text"),eit.forEach(t),IIo=r(jxe," \u2014 "),ZG=n(jxe,"A",{href:!0});var oit=s(ZG);qIo=r(oit,"Data2VecTextForTokenClassification"),oit.forEach(t),NIo=r(jxe," (Data2VecText model)"),jxe.forEach(t),jIo=i(J),gv=n(J,"LI",{});var Dxe=s(gv);Lfe=n(Dxe,"STRONG",{});var rit=s(Lfe);DIo=r(rit,"deberta"),rit.forEach(t),GIo=r(Dxe," \u2014 "),eO=n(Dxe,"A",{href:!0});var tit=s(eO);OIo=r(tit,"DebertaForTokenClassification"),tit.forEach(t),VIo=r(Dxe," (DeBERTa model)"),Dxe.forEach(t),XIo=i(J),hv=n(J,"LI",{});var Gxe=s(hv);xfe=n(Gxe,"STRONG",{});var ait=s(xfe);zIo=r(ait,"deberta-v2"),ait.forEach(t),QIo=r(Gxe," \u2014 "),oO=n(Gxe,"A",{href:!0});var nit=s(oO);WIo=r(nit,"DebertaV2ForTokenClassification"),nit.forEach(t),HIo=r(Gxe," (DeBERTa-v2 model)"),Gxe.forEach(t),UIo=i(J),uv=n(J,"LI",{});var Oxe=s(uv);$fe=n(Oxe,"STRONG",{});var sit=s($fe);JIo=r(sit,"distilbert"),sit.forEach(t),YIo=r(Oxe," \u2014 "),rO=n(Oxe,"A",{href:!0});var lit=s(rO);KIo=r(lit,"DistilBertForTokenClassification"),lit.forEach(t),ZIo=r(Oxe," (DistilBERT model)"),Oxe.forEach(t),eqo=i(J),pv=n(J,"LI",{});var Vxe=s(pv);kfe=n(Vxe,"STRONG",{});var iit=s(kfe);oqo=r(iit,"electra"),iit.forEach(t),rqo=r(Vxe," \u2014 "),tO=n(Vxe,"A",{href:!0});var dit=s(tO);tqo=r(dit,"ElectraForTokenClassification"),dit.forEach(t),aqo=r(Vxe," (ELECTRA model)"),Vxe.forEach(t),nqo=i(J),_v=n(J,"LI",{});var Xxe=s(_v);Sfe=n(Xxe,"STRONG",{});var cit=s(Sfe);sqo=r(cit,"flaubert"),cit.forEach(t),lqo=r(Xxe," \u2014 "),aO=n(Xxe,"A",{href:!0});var mit=s(aO);iqo=r(mit,"FlaubertForTokenClassification"),mit.forEach(t),dqo=r(Xxe," (FlauBERT model)"),Xxe.forEach(t),cqo=i(J),bv=n(J,"LI",{});var zxe=s(bv);Rfe=n(zxe,"STRONG",{});var fit=s(Rfe);mqo=r(fit,"fnet"),fit.forEach(t),fqo=r(zxe," \u2014 "),nO=n(zxe,"A",{href:!0});var git=s(nO);gqo=r(git,"FNetForTokenClassification"),git.forEach(t),hqo=r(zxe," (FNet model)"),zxe.forEach(t),uqo=i(J),Fv=n(J,"LI",{});var Qxe=s(Fv);Bfe=n(Qxe,"STRONG",{});var hit=s(Bfe);pqo=r(hit,"funnel"),hit.forEach(t),_qo=r(Qxe," \u2014 "),sO=n(Qxe,"A",{href:!0});var uit=s(sO);bqo=r(uit,"FunnelForTokenClassification"),uit.forEach(t),Fqo=r(Qxe," (Funnel Transformer model)"),Qxe.forEach(t),vqo=i(J),vv=n(J,"LI",{});var Wxe=s(vv);Pfe=n(Wxe,"STRONG",{});var pit=s(Pfe);Tqo=r(pit,"gpt2"),pit.forEach(t),Mqo=r(Wxe," \u2014 "),lO=n(Wxe,"A",{href:!0});var _it=s(lO);Eqo=r(_it,"GPT2ForTokenClassification"),_it.forEach(t),Cqo=r(Wxe," (OpenAI GPT-2 model)"),Wxe.forEach(t),wqo=i(J),Tv=n(J,"LI",{});var Hxe=s(Tv);Ife=n(Hxe,"STRONG",{});var bit=s(Ife);Aqo=r(bit,"ibert"),bit.forEach(t),yqo=r(Hxe," \u2014 "),iO=n(Hxe,"A",{href:!0});var Fit=s(iO);Lqo=r(Fit,"IBertForTokenClassification"),Fit.forEach(t),xqo=r(Hxe," (I-BERT model)"),Hxe.forEach(t),$qo=i(J),Mv=n(J,"LI",{});var Uxe=s(Mv);qfe=n(Uxe,"STRONG",{});var vit=s(qfe);kqo=r(vit,"layoutlm"),vit.forEach(t),Sqo=r(Uxe," \u2014 "),dO=n(Uxe,"A",{href:!0});var Tit=s(dO);Rqo=r(Tit,"LayoutLMForTokenClassification"),Tit.forEach(t),Bqo=r(Uxe," (LayoutLM model)"),Uxe.forEach(t),Pqo=i(J),Ev=n(J,"LI",{});var Jxe=s(Ev);Nfe=n(Jxe,"STRONG",{});var Mit=s(Nfe);Iqo=r(Mit,"layoutlmv2"),Mit.forEach(t),qqo=r(Jxe," \u2014 "),cO=n(Jxe,"A",{href:!0});var Eit=s(cO);Nqo=r(Eit,"LayoutLMv2ForTokenClassification"),Eit.forEach(t),jqo=r(Jxe," (LayoutLMv2 model)"),Jxe.forEach(t),Dqo=i(J),Cv=n(J,"LI",{});var Yxe=s(Cv);jfe=n(Yxe,"STRONG",{});var Cit=s(jfe);Gqo=r(Cit,"longformer"),Cit.forEach(t),Oqo=r(Yxe," \u2014 "),mO=n(Yxe,"A",{href:!0});var wit=s(mO);Vqo=r(wit,"LongformerForTokenClassification"),wit.forEach(t),Xqo=r(Yxe," (Longformer model)"),Yxe.forEach(t),zqo=i(J),wv=n(J,"LI",{});var Kxe=s(wv);Dfe=n(Kxe,"STRONG",{});var Ait=s(Dfe);Qqo=r(Ait,"megatron-bert"),Ait.forEach(t),Wqo=r(Kxe," \u2014 "),fO=n(Kxe,"A",{href:!0});var yit=s(fO);Hqo=r(yit,"MegatronBertForTokenClassification"),yit.forEach(t),Uqo=r(Kxe," (MegatronBert model)"),Kxe.forEach(t),Jqo=i(J),Av=n(J,"LI",{});var Zxe=s(Av);Gfe=n(Zxe,"STRONG",{});var Lit=s(Gfe);Yqo=r(Lit,"mobilebert"),Lit.forEach(t),Kqo=r(Zxe," \u2014 "),gO=n(Zxe,"A",{href:!0});var xit=s(gO);Zqo=r(xit,"MobileBertForTokenClassification"),xit.forEach(t),eNo=r(Zxe," (MobileBERT model)"),Zxe.forEach(t),oNo=i(J),yv=n(J,"LI",{});var e7e=s(yv);Ofe=n(e7e,"STRONG",{});var $it=s(Ofe);rNo=r($it,"mpnet"),$it.forEach(t),tNo=r(e7e," \u2014 "),hO=n(e7e,"A",{href:!0});var kit=s(hO);aNo=r(kit,"MPNetForTokenClassification"),kit.forEach(t),nNo=r(e7e," (MPNet model)"),e7e.forEach(t),sNo=i(J),Lv=n(J,"LI",{});var o7e=s(Lv);Vfe=n(o7e,"STRONG",{});var Sit=s(Vfe);lNo=r(Sit,"nystromformer"),Sit.forEach(t),iNo=r(o7e," \u2014 "),uO=n(o7e,"A",{href:!0});var Rit=s(uO);dNo=r(Rit,"NystromformerForTokenClassification"),Rit.forEach(t),cNo=r(o7e," (Nystromformer model)"),o7e.forEach(t),mNo=i(J),xv=n(J,"LI",{});var r7e=s(xv);Xfe=n(r7e,"STRONG",{});var Bit=s(Xfe);fNo=r(Bit,"qdqbert"),Bit.forEach(t),gNo=r(r7e," \u2014 "),pO=n(r7e,"A",{href:!0});var Pit=s(pO);hNo=r(Pit,"QDQBertForTokenClassification"),Pit.forEach(t),uNo=r(r7e," (QDQBert model)"),r7e.forEach(t),pNo=i(J),$v=n(J,"LI",{});var t7e=s($v);zfe=n(t7e,"STRONG",{});var Iit=s(zfe);_No=r(Iit,"rembert"),Iit.forEach(t),bNo=r(t7e," \u2014 "),_O=n(t7e,"A",{href:!0});var qit=s(_O);FNo=r(qit,"RemBertForTokenClassification"),qit.forEach(t),vNo=r(t7e," (RemBERT model)"),t7e.forEach(t),TNo=i(J),kv=n(J,"LI",{});var a7e=s(kv);Qfe=n(a7e,"STRONG",{});var Nit=s(Qfe);MNo=r(Nit,"roberta"),Nit.forEach(t),ENo=r(a7e," \u2014 "),bO=n(a7e,"A",{href:!0});var jit=s(bO);CNo=r(jit,"RobertaForTokenClassification"),jit.forEach(t),wNo=r(a7e," (RoBERTa model)"),a7e.forEach(t),ANo=i(J),Sv=n(J,"LI",{});var n7e=s(Sv);Wfe=n(n7e,"STRONG",{});var Dit=s(Wfe);yNo=r(Dit,"roformer"),Dit.forEach(t),LNo=r(n7e," \u2014 "),FO=n(n7e,"A",{href:!0});var Git=s(FO);xNo=r(Git,"RoFormerForTokenClassification"),Git.forEach(t),$No=r(n7e," (RoFormer model)"),n7e.forEach(t),kNo=i(J),Rv=n(J,"LI",{});var s7e=s(Rv);Hfe=n(s7e,"STRONG",{});var Oit=s(Hfe);SNo=r(Oit,"squeezebert"),Oit.forEach(t),RNo=r(s7e," \u2014 "),vO=n(s7e,"A",{href:!0});var Vit=s(vO);BNo=r(Vit,"SqueezeBertForTokenClassification"),Vit.forEach(t),PNo=r(s7e," (SqueezeBERT model)"),s7e.forEach(t),INo=i(J),Bv=n(J,"LI",{});var l7e=s(Bv);Ufe=n(l7e,"STRONG",{});var Xit=s(Ufe);qNo=r(Xit,"xlm"),Xit.forEach(t),NNo=r(l7e," \u2014 "),TO=n(l7e,"A",{href:!0});var zit=s(TO);jNo=r(zit,"XLMForTokenClassification"),zit.forEach(t),DNo=r(l7e," (XLM model)"),l7e.forEach(t),GNo=i(J),Pv=n(J,"LI",{});var i7e=s(Pv);Jfe=n(i7e,"STRONG",{});var Qit=s(Jfe);ONo=r(Qit,"xlm-roberta"),Qit.forEach(t),VNo=r(i7e," \u2014 "),MO=n(i7e,"A",{href:!0});var Wit=s(MO);XNo=r(Wit,"XLMRobertaForTokenClassification"),Wit.forEach(t),zNo=r(i7e," (XLM-RoBERTa model)"),i7e.forEach(t),QNo=i(J),Iv=n(J,"LI",{});var d7e=s(Iv);Yfe=n(d7e,"STRONG",{});var Hit=s(Yfe);WNo=r(Hit,"xlm-roberta-xl"),Hit.forEach(t),HNo=r(d7e," \u2014 "),EO=n(d7e,"A",{href:!0});var Uit=s(EO);UNo=r(Uit,"XLMRobertaXLForTokenClassification"),Uit.forEach(t),JNo=r(d7e," (XLM-RoBERTa-XL model)"),d7e.forEach(t),YNo=i(J),qv=n(J,"LI",{});var c7e=s(qv);Kfe=n(c7e,"STRONG",{});var Jit=s(Kfe);KNo=r(Jit,"xlnet"),Jit.forEach(t),ZNo=r(c7e," \u2014 "),CO=n(c7e,"A",{href:!0});var Yit=s(CO);ejo=r(Yit,"XLNetForTokenClassification"),Yit.forEach(t),ojo=r(c7e," (XLNet model)"),c7e.forEach(t),rjo=i(J),Nv=n(J,"LI",{});var m7e=s(Nv);Zfe=n(m7e,"STRONG",{});var Kit=s(Zfe);tjo=r(Kit,"yoso"),Kit.forEach(t),ajo=r(m7e," \u2014 "),wO=n(m7e,"A",{href:!0});var Zit=s(wO);njo=r(Zit,"YosoForTokenClassification"),Zit.forEach(t),sjo=r(m7e," (YOSO model)"),m7e.forEach(t),J.forEach(t),ljo=i(la),jv=n(la,"P",{});var f7e=s(jv);ijo=r(f7e,"The model is set in evaluation mode by default using "),ege=n(f7e,"CODE",{});var edt=s(ege);djo=r(edt,"model.eval()"),edt.forEach(t),cjo=r(f7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oge=n(f7e,"CODE",{});var odt=s(oge);mjo=r(odt,"model.train()"),odt.forEach(t),f7e.forEach(t),fjo=i(la),T(Dv.$$.fragment,la),la.forEach(t),Hs.forEach(t),vIe=i(m),Hi=n(m,"H2",{class:!0});var CNe=s(Hi);Gv=n(CNe,"A",{id:!0,class:!0,href:!0});var rdt=s(Gv);rge=n(rdt,"SPAN",{});var tdt=s(rge);T(hL.$$.fragment,tdt),tdt.forEach(t),rdt.forEach(t),gjo=i(CNe),tge=n(CNe,"SPAN",{});var adt=s(tge);hjo=r(adt,"AutoModelForQuestionAnswering"),adt.forEach(t),CNe.forEach(t),TIe=i(m),qo=n(m,"DIV",{class:!0});var Us=s(qo);T(uL.$$.fragment,Us),ujo=i(Us),Ui=n(Us,"P",{});var AK=s(Ui);pjo=r(AK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),AO=n(AK,"A",{href:!0});var ndt=s(AO);_jo=r(ndt,"from_pretrained()"),ndt.forEach(t),bjo=r(AK," class method or the "),yO=n(AK,"A",{href:!0});var sdt=s(yO);Fjo=r(sdt,"from_config()"),sdt.forEach(t),vjo=r(AK,` class
method.`),AK.forEach(t),Tjo=i(Us),pL=n(Us,"P",{});var wNe=s(pL);Mjo=r(wNe,"This class cannot be instantiated directly using "),age=n(wNe,"CODE",{});var ldt=s(age);Ejo=r(ldt,"__init__()"),ldt.forEach(t),Cjo=r(wNe," (throws an error)."),wNe.forEach(t),wjo=i(Us),ct=n(Us,"DIV",{class:!0});var b6=s(ct);T(_L.$$.fragment,b6),Ajo=i(b6),nge=n(b6,"P",{});var idt=s(nge);yjo=r(idt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),idt.forEach(t),Ljo=i(b6),Ji=n(b6,"P",{});var yK=s(Ji);xjo=r(yK,`Note:
Loading a model from its configuration file does `),sge=n(yK,"STRONG",{});var ddt=s(sge);$jo=r(ddt,"not"),ddt.forEach(t),kjo=r(yK,` load the model weights. It only affects the
model\u2019s configuration. Use `),LO=n(yK,"A",{href:!0});var cdt=s(LO);Sjo=r(cdt,"from_pretrained()"),cdt.forEach(t),Rjo=r(yK," to load the model weights."),yK.forEach(t),Bjo=i(b6),T(Ov.$$.fragment,b6),b6.forEach(t),Pjo=i(Us),to=n(Us,"DIV",{class:!0});var ia=s(to);T(bL.$$.fragment,ia),Ijo=i(ia),lge=n(ia,"P",{});var mdt=s(lge);qjo=r(mdt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),mdt.forEach(t),Njo=i(ia),Pa=n(ia,"P",{});var F6=s(Pa);jjo=r(F6,"The model class to instantiate is selected based on the "),ige=n(F6,"CODE",{});var fdt=s(ige);Djo=r(fdt,"model_type"),fdt.forEach(t),Gjo=r(F6,` property of the config object (either
passed as an argument or loaded from `),dge=n(F6,"CODE",{});var gdt=s(dge);Ojo=r(gdt,"pretrained_model_name_or_path"),gdt.forEach(t),Vjo=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cge=n(F6,"CODE",{});var hdt=s(cge);Xjo=r(hdt,"pretrained_model_name_or_path"),hdt.forEach(t),zjo=r(F6,":"),F6.forEach(t),Qjo=i(ia),O=n(ia,"UL",{});var X=s(O);Vv=n(X,"LI",{});var g7e=s(Vv);mge=n(g7e,"STRONG",{});var udt=s(mge);Wjo=r(udt,"albert"),udt.forEach(t),Hjo=r(g7e," \u2014 "),xO=n(g7e,"A",{href:!0});var pdt=s(xO);Ujo=r(pdt,"AlbertForQuestionAnswering"),pdt.forEach(t),Jjo=r(g7e," (ALBERT model)"),g7e.forEach(t),Yjo=i(X),Xv=n(X,"LI",{});var h7e=s(Xv);fge=n(h7e,"STRONG",{});var _dt=s(fge);Kjo=r(_dt,"bart"),_dt.forEach(t),Zjo=r(h7e," \u2014 "),$O=n(h7e,"A",{href:!0});var bdt=s($O);eDo=r(bdt,"BartForQuestionAnswering"),bdt.forEach(t),oDo=r(h7e," (BART model)"),h7e.forEach(t),rDo=i(X),zv=n(X,"LI",{});var u7e=s(zv);gge=n(u7e,"STRONG",{});var Fdt=s(gge);tDo=r(Fdt,"bert"),Fdt.forEach(t),aDo=r(u7e," \u2014 "),kO=n(u7e,"A",{href:!0});var vdt=s(kO);nDo=r(vdt,"BertForQuestionAnswering"),vdt.forEach(t),sDo=r(u7e," (BERT model)"),u7e.forEach(t),lDo=i(X),Qv=n(X,"LI",{});var p7e=s(Qv);hge=n(p7e,"STRONG",{});var Tdt=s(hge);iDo=r(Tdt,"big_bird"),Tdt.forEach(t),dDo=r(p7e," \u2014 "),SO=n(p7e,"A",{href:!0});var Mdt=s(SO);cDo=r(Mdt,"BigBirdForQuestionAnswering"),Mdt.forEach(t),mDo=r(p7e," (BigBird model)"),p7e.forEach(t),fDo=i(X),Wv=n(X,"LI",{});var _7e=s(Wv);uge=n(_7e,"STRONG",{});var Edt=s(uge);gDo=r(Edt,"bigbird_pegasus"),Edt.forEach(t),hDo=r(_7e," \u2014 "),RO=n(_7e,"A",{href:!0});var Cdt=s(RO);uDo=r(Cdt,"BigBirdPegasusForQuestionAnswering"),Cdt.forEach(t),pDo=r(_7e," (BigBirdPegasus model)"),_7e.forEach(t),_Do=i(X),Hv=n(X,"LI",{});var b7e=s(Hv);pge=n(b7e,"STRONG",{});var wdt=s(pge);bDo=r(wdt,"camembert"),wdt.forEach(t),FDo=r(b7e," \u2014 "),BO=n(b7e,"A",{href:!0});var Adt=s(BO);vDo=r(Adt,"CamembertForQuestionAnswering"),Adt.forEach(t),TDo=r(b7e," (CamemBERT model)"),b7e.forEach(t),MDo=i(X),Uv=n(X,"LI",{});var F7e=s(Uv);_ge=n(F7e,"STRONG",{});var ydt=s(_ge);EDo=r(ydt,"canine"),ydt.forEach(t),CDo=r(F7e," \u2014 "),PO=n(F7e,"A",{href:!0});var Ldt=s(PO);wDo=r(Ldt,"CanineForQuestionAnswering"),Ldt.forEach(t),ADo=r(F7e," (Canine model)"),F7e.forEach(t),yDo=i(X),Jv=n(X,"LI",{});var v7e=s(Jv);bge=n(v7e,"STRONG",{});var xdt=s(bge);LDo=r(xdt,"convbert"),xdt.forEach(t),xDo=r(v7e," \u2014 "),IO=n(v7e,"A",{href:!0});var $dt=s(IO);$Do=r($dt,"ConvBertForQuestionAnswering"),$dt.forEach(t),kDo=r(v7e," (ConvBERT model)"),v7e.forEach(t),SDo=i(X),Yv=n(X,"LI",{});var T7e=s(Yv);Fge=n(T7e,"STRONG",{});var kdt=s(Fge);RDo=r(kdt,"data2vec-text"),kdt.forEach(t),BDo=r(T7e," \u2014 "),qO=n(T7e,"A",{href:!0});var Sdt=s(qO);PDo=r(Sdt,"Data2VecTextForQuestionAnswering"),Sdt.forEach(t),IDo=r(T7e," (Data2VecText model)"),T7e.forEach(t),qDo=i(X),Kv=n(X,"LI",{});var M7e=s(Kv);vge=n(M7e,"STRONG",{});var Rdt=s(vge);NDo=r(Rdt,"deberta"),Rdt.forEach(t),jDo=r(M7e," \u2014 "),NO=n(M7e,"A",{href:!0});var Bdt=s(NO);DDo=r(Bdt,"DebertaForQuestionAnswering"),Bdt.forEach(t),GDo=r(M7e," (DeBERTa model)"),M7e.forEach(t),ODo=i(X),Zv=n(X,"LI",{});var E7e=s(Zv);Tge=n(E7e,"STRONG",{});var Pdt=s(Tge);VDo=r(Pdt,"deberta-v2"),Pdt.forEach(t),XDo=r(E7e," \u2014 "),jO=n(E7e,"A",{href:!0});var Idt=s(jO);zDo=r(Idt,"DebertaV2ForQuestionAnswering"),Idt.forEach(t),QDo=r(E7e," (DeBERTa-v2 model)"),E7e.forEach(t),WDo=i(X),e1=n(X,"LI",{});var C7e=s(e1);Mge=n(C7e,"STRONG",{});var qdt=s(Mge);HDo=r(qdt,"distilbert"),qdt.forEach(t),UDo=r(C7e," \u2014 "),DO=n(C7e,"A",{href:!0});var Ndt=s(DO);JDo=r(Ndt,"DistilBertForQuestionAnswering"),Ndt.forEach(t),YDo=r(C7e," (DistilBERT model)"),C7e.forEach(t),KDo=i(X),o1=n(X,"LI",{});var w7e=s(o1);Ege=n(w7e,"STRONG",{});var jdt=s(Ege);ZDo=r(jdt,"electra"),jdt.forEach(t),eGo=r(w7e," \u2014 "),GO=n(w7e,"A",{href:!0});var Ddt=s(GO);oGo=r(Ddt,"ElectraForQuestionAnswering"),Ddt.forEach(t),rGo=r(w7e," (ELECTRA model)"),w7e.forEach(t),tGo=i(X),r1=n(X,"LI",{});var A7e=s(r1);Cge=n(A7e,"STRONG",{});var Gdt=s(Cge);aGo=r(Gdt,"flaubert"),Gdt.forEach(t),nGo=r(A7e," \u2014 "),OO=n(A7e,"A",{href:!0});var Odt=s(OO);sGo=r(Odt,"FlaubertForQuestionAnsweringSimple"),Odt.forEach(t),lGo=r(A7e," (FlauBERT model)"),A7e.forEach(t),iGo=i(X),t1=n(X,"LI",{});var y7e=s(t1);wge=n(y7e,"STRONG",{});var Vdt=s(wge);dGo=r(Vdt,"fnet"),Vdt.forEach(t),cGo=r(y7e," \u2014 "),VO=n(y7e,"A",{href:!0});var Xdt=s(VO);mGo=r(Xdt,"FNetForQuestionAnswering"),Xdt.forEach(t),fGo=r(y7e," (FNet model)"),y7e.forEach(t),gGo=i(X),a1=n(X,"LI",{});var L7e=s(a1);Age=n(L7e,"STRONG",{});var zdt=s(Age);hGo=r(zdt,"funnel"),zdt.forEach(t),uGo=r(L7e," \u2014 "),XO=n(L7e,"A",{href:!0});var Qdt=s(XO);pGo=r(Qdt,"FunnelForQuestionAnswering"),Qdt.forEach(t),_Go=r(L7e," (Funnel Transformer model)"),L7e.forEach(t),bGo=i(X),n1=n(X,"LI",{});var x7e=s(n1);yge=n(x7e,"STRONG",{});var Wdt=s(yge);FGo=r(Wdt,"gptj"),Wdt.forEach(t),vGo=r(x7e," \u2014 "),zO=n(x7e,"A",{href:!0});var Hdt=s(zO);TGo=r(Hdt,"GPTJForQuestionAnswering"),Hdt.forEach(t),MGo=r(x7e," (GPT-J model)"),x7e.forEach(t),EGo=i(X),s1=n(X,"LI",{});var $7e=s(s1);Lge=n($7e,"STRONG",{});var Udt=s(Lge);CGo=r(Udt,"ibert"),Udt.forEach(t),wGo=r($7e," \u2014 "),QO=n($7e,"A",{href:!0});var Jdt=s(QO);AGo=r(Jdt,"IBertForQuestionAnswering"),Jdt.forEach(t),yGo=r($7e," (I-BERT model)"),$7e.forEach(t),LGo=i(X),l1=n(X,"LI",{});var k7e=s(l1);xge=n(k7e,"STRONG",{});var Ydt=s(xge);xGo=r(Ydt,"layoutlmv2"),Ydt.forEach(t),$Go=r(k7e," \u2014 "),WO=n(k7e,"A",{href:!0});var Kdt=s(WO);kGo=r(Kdt,"LayoutLMv2ForQuestionAnswering"),Kdt.forEach(t),SGo=r(k7e," (LayoutLMv2 model)"),k7e.forEach(t),RGo=i(X),i1=n(X,"LI",{});var S7e=s(i1);$ge=n(S7e,"STRONG",{});var Zdt=s($ge);BGo=r(Zdt,"led"),Zdt.forEach(t),PGo=r(S7e," \u2014 "),HO=n(S7e,"A",{href:!0});var ect=s(HO);IGo=r(ect,"LEDForQuestionAnswering"),ect.forEach(t),qGo=r(S7e," (LED model)"),S7e.forEach(t),NGo=i(X),d1=n(X,"LI",{});var R7e=s(d1);kge=n(R7e,"STRONG",{});var oct=s(kge);jGo=r(oct,"longformer"),oct.forEach(t),DGo=r(R7e," \u2014 "),UO=n(R7e,"A",{href:!0});var rct=s(UO);GGo=r(rct,"LongformerForQuestionAnswering"),rct.forEach(t),OGo=r(R7e," (Longformer model)"),R7e.forEach(t),VGo=i(X),c1=n(X,"LI",{});var B7e=s(c1);Sge=n(B7e,"STRONG",{});var tct=s(Sge);XGo=r(tct,"lxmert"),tct.forEach(t),zGo=r(B7e," \u2014 "),JO=n(B7e,"A",{href:!0});var act=s(JO);QGo=r(act,"LxmertForQuestionAnswering"),act.forEach(t),WGo=r(B7e," (LXMERT model)"),B7e.forEach(t),HGo=i(X),m1=n(X,"LI",{});var P7e=s(m1);Rge=n(P7e,"STRONG",{});var nct=s(Rge);UGo=r(nct,"mbart"),nct.forEach(t),JGo=r(P7e," \u2014 "),YO=n(P7e,"A",{href:!0});var sct=s(YO);YGo=r(sct,"MBartForQuestionAnswering"),sct.forEach(t),KGo=r(P7e," (mBART model)"),P7e.forEach(t),ZGo=i(X),f1=n(X,"LI",{});var I7e=s(f1);Bge=n(I7e,"STRONG",{});var lct=s(Bge);eOo=r(lct,"megatron-bert"),lct.forEach(t),oOo=r(I7e," \u2014 "),KO=n(I7e,"A",{href:!0});var ict=s(KO);rOo=r(ict,"MegatronBertForQuestionAnswering"),ict.forEach(t),tOo=r(I7e," (MegatronBert model)"),I7e.forEach(t),aOo=i(X),g1=n(X,"LI",{});var q7e=s(g1);Pge=n(q7e,"STRONG",{});var dct=s(Pge);nOo=r(dct,"mobilebert"),dct.forEach(t),sOo=r(q7e," \u2014 "),ZO=n(q7e,"A",{href:!0});var cct=s(ZO);lOo=r(cct,"MobileBertForQuestionAnswering"),cct.forEach(t),iOo=r(q7e," (MobileBERT model)"),q7e.forEach(t),dOo=i(X),h1=n(X,"LI",{});var N7e=s(h1);Ige=n(N7e,"STRONG",{});var mct=s(Ige);cOo=r(mct,"mpnet"),mct.forEach(t),mOo=r(N7e," \u2014 "),eV=n(N7e,"A",{href:!0});var fct=s(eV);fOo=r(fct,"MPNetForQuestionAnswering"),fct.forEach(t),gOo=r(N7e," (MPNet model)"),N7e.forEach(t),hOo=i(X),u1=n(X,"LI",{});var j7e=s(u1);qge=n(j7e,"STRONG",{});var gct=s(qge);uOo=r(gct,"nystromformer"),gct.forEach(t),pOo=r(j7e," \u2014 "),oV=n(j7e,"A",{href:!0});var hct=s(oV);_Oo=r(hct,"NystromformerForQuestionAnswering"),hct.forEach(t),bOo=r(j7e," (Nystromformer model)"),j7e.forEach(t),FOo=i(X),p1=n(X,"LI",{});var D7e=s(p1);Nge=n(D7e,"STRONG",{});var uct=s(Nge);vOo=r(uct,"qdqbert"),uct.forEach(t),TOo=r(D7e," \u2014 "),rV=n(D7e,"A",{href:!0});var pct=s(rV);MOo=r(pct,"QDQBertForQuestionAnswering"),pct.forEach(t),EOo=r(D7e," (QDQBert model)"),D7e.forEach(t),COo=i(X),_1=n(X,"LI",{});var G7e=s(_1);jge=n(G7e,"STRONG",{});var _ct=s(jge);wOo=r(_ct,"reformer"),_ct.forEach(t),AOo=r(G7e," \u2014 "),tV=n(G7e,"A",{href:!0});var bct=s(tV);yOo=r(bct,"ReformerForQuestionAnswering"),bct.forEach(t),LOo=r(G7e," (Reformer model)"),G7e.forEach(t),xOo=i(X),b1=n(X,"LI",{});var O7e=s(b1);Dge=n(O7e,"STRONG",{});var Fct=s(Dge);$Oo=r(Fct,"rembert"),Fct.forEach(t),kOo=r(O7e," \u2014 "),aV=n(O7e,"A",{href:!0});var vct=s(aV);SOo=r(vct,"RemBertForQuestionAnswering"),vct.forEach(t),ROo=r(O7e," (RemBERT model)"),O7e.forEach(t),BOo=i(X),F1=n(X,"LI",{});var V7e=s(F1);Gge=n(V7e,"STRONG",{});var Tct=s(Gge);POo=r(Tct,"roberta"),Tct.forEach(t),IOo=r(V7e," \u2014 "),nV=n(V7e,"A",{href:!0});var Mct=s(nV);qOo=r(Mct,"RobertaForQuestionAnswering"),Mct.forEach(t),NOo=r(V7e," (RoBERTa model)"),V7e.forEach(t),jOo=i(X),v1=n(X,"LI",{});var X7e=s(v1);Oge=n(X7e,"STRONG",{});var Ect=s(Oge);DOo=r(Ect,"roformer"),Ect.forEach(t),GOo=r(X7e," \u2014 "),sV=n(X7e,"A",{href:!0});var Cct=s(sV);OOo=r(Cct,"RoFormerForQuestionAnswering"),Cct.forEach(t),VOo=r(X7e," (RoFormer model)"),X7e.forEach(t),XOo=i(X),T1=n(X,"LI",{});var z7e=s(T1);Vge=n(z7e,"STRONG",{});var wct=s(Vge);zOo=r(wct,"splinter"),wct.forEach(t),QOo=r(z7e," \u2014 "),lV=n(z7e,"A",{href:!0});var Act=s(lV);WOo=r(Act,"SplinterForQuestionAnswering"),Act.forEach(t),HOo=r(z7e," (Splinter model)"),z7e.forEach(t),UOo=i(X),M1=n(X,"LI",{});var Q7e=s(M1);Xge=n(Q7e,"STRONG",{});var yct=s(Xge);JOo=r(yct,"squeezebert"),yct.forEach(t),YOo=r(Q7e," \u2014 "),iV=n(Q7e,"A",{href:!0});var Lct=s(iV);KOo=r(Lct,"SqueezeBertForQuestionAnswering"),Lct.forEach(t),ZOo=r(Q7e," (SqueezeBERT model)"),Q7e.forEach(t),eVo=i(X),E1=n(X,"LI",{});var W7e=s(E1);zge=n(W7e,"STRONG",{});var xct=s(zge);oVo=r(xct,"xlm"),xct.forEach(t),rVo=r(W7e," \u2014 "),dV=n(W7e,"A",{href:!0});var $ct=s(dV);tVo=r($ct,"XLMForQuestionAnsweringSimple"),$ct.forEach(t),aVo=r(W7e," (XLM model)"),W7e.forEach(t),nVo=i(X),C1=n(X,"LI",{});var H7e=s(C1);Qge=n(H7e,"STRONG",{});var kct=s(Qge);sVo=r(kct,"xlm-roberta"),kct.forEach(t),lVo=r(H7e," \u2014 "),cV=n(H7e,"A",{href:!0});var Sct=s(cV);iVo=r(Sct,"XLMRobertaForQuestionAnswering"),Sct.forEach(t),dVo=r(H7e," (XLM-RoBERTa model)"),H7e.forEach(t),cVo=i(X),w1=n(X,"LI",{});var U7e=s(w1);Wge=n(U7e,"STRONG",{});var Rct=s(Wge);mVo=r(Rct,"xlm-roberta-xl"),Rct.forEach(t),fVo=r(U7e," \u2014 "),mV=n(U7e,"A",{href:!0});var Bct=s(mV);gVo=r(Bct,"XLMRobertaXLForQuestionAnswering"),Bct.forEach(t),hVo=r(U7e," (XLM-RoBERTa-XL model)"),U7e.forEach(t),uVo=i(X),A1=n(X,"LI",{});var J7e=s(A1);Hge=n(J7e,"STRONG",{});var Pct=s(Hge);pVo=r(Pct,"xlnet"),Pct.forEach(t),_Vo=r(J7e," \u2014 "),fV=n(J7e,"A",{href:!0});var Ict=s(fV);bVo=r(Ict,"XLNetForQuestionAnsweringSimple"),Ict.forEach(t),FVo=r(J7e," (XLNet model)"),J7e.forEach(t),vVo=i(X),y1=n(X,"LI",{});var Y7e=s(y1);Uge=n(Y7e,"STRONG",{});var qct=s(Uge);TVo=r(qct,"yoso"),qct.forEach(t),MVo=r(Y7e," \u2014 "),gV=n(Y7e,"A",{href:!0});var Nct=s(gV);EVo=r(Nct,"YosoForQuestionAnswering"),Nct.forEach(t),CVo=r(Y7e," (YOSO model)"),Y7e.forEach(t),X.forEach(t),wVo=i(ia),L1=n(ia,"P",{});var K7e=s(L1);AVo=r(K7e,"The model is set in evaluation mode by default using "),Jge=n(K7e,"CODE",{});var jct=s(Jge);yVo=r(jct,"model.eval()"),jct.forEach(t),LVo=r(K7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yge=n(K7e,"CODE",{});var Dct=s(Yge);xVo=r(Dct,"model.train()"),Dct.forEach(t),K7e.forEach(t),$Vo=i(ia),T(x1.$$.fragment,ia),ia.forEach(t),Us.forEach(t),MIe=i(m),Yi=n(m,"H2",{class:!0});var ANe=s(Yi);$1=n(ANe,"A",{id:!0,class:!0,href:!0});var Gct=s($1);Kge=n(Gct,"SPAN",{});var Oct=s(Kge);T(FL.$$.fragment,Oct),Oct.forEach(t),Gct.forEach(t),kVo=i(ANe),Zge=n(ANe,"SPAN",{});var Vct=s(Zge);SVo=r(Vct,"AutoModelForTableQuestionAnswering"),Vct.forEach(t),ANe.forEach(t),EIe=i(m),No=n(m,"DIV",{class:!0});var Js=s(No);T(vL.$$.fragment,Js),RVo=i(Js),Ki=n(Js,"P",{});var LK=s(Ki);BVo=r(LK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hV=n(LK,"A",{href:!0});var Xct=s(hV);PVo=r(Xct,"from_pretrained()"),Xct.forEach(t),IVo=r(LK," class method or the "),uV=n(LK,"A",{href:!0});var zct=s(uV);qVo=r(zct,"from_config()"),zct.forEach(t),NVo=r(LK,` class
method.`),LK.forEach(t),jVo=i(Js),TL=n(Js,"P",{});var yNe=s(TL);DVo=r(yNe,"This class cannot be instantiated directly using "),ehe=n(yNe,"CODE",{});var Qct=s(ehe);GVo=r(Qct,"__init__()"),Qct.forEach(t),OVo=r(yNe," (throws an error)."),yNe.forEach(t),VVo=i(Js),mt=n(Js,"DIV",{class:!0});var v6=s(mt);T(ML.$$.fragment,v6),XVo=i(v6),ohe=n(v6,"P",{});var Wct=s(ohe);zVo=r(Wct,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Wct.forEach(t),QVo=i(v6),Zi=n(v6,"P",{});var xK=s(Zi);WVo=r(xK,`Note:
Loading a model from its configuration file does `),rhe=n(xK,"STRONG",{});var Hct=s(rhe);HVo=r(Hct,"not"),Hct.forEach(t),UVo=r(xK,` load the model weights. It only affects the
model\u2019s configuration. Use `),pV=n(xK,"A",{href:!0});var Uct=s(pV);JVo=r(Uct,"from_pretrained()"),Uct.forEach(t),YVo=r(xK," to load the model weights."),xK.forEach(t),KVo=i(v6),T(k1.$$.fragment,v6),v6.forEach(t),ZVo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(EL.$$.fragment,da),eXo=i(da),the=n(da,"P",{});var Jct=s(the);oXo=r(Jct,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Jct.forEach(t),rXo=i(da),Ia=n(da,"P",{});var T6=s(Ia);tXo=r(T6,"The model class to instantiate is selected based on the "),ahe=n(T6,"CODE",{});var Yct=s(ahe);aXo=r(Yct,"model_type"),Yct.forEach(t),nXo=r(T6,` property of the config object (either
passed as an argument or loaded from `),nhe=n(T6,"CODE",{});var Kct=s(nhe);sXo=r(Kct,"pretrained_model_name_or_path"),Kct.forEach(t),lXo=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),she=n(T6,"CODE",{});var Zct=s(she);iXo=r(Zct,"pretrained_model_name_or_path"),Zct.forEach(t),dXo=r(T6,":"),T6.forEach(t),cXo=i(da),lhe=n(da,"UL",{});var emt=s(lhe);S1=n(emt,"LI",{});var Z7e=s(S1);ihe=n(Z7e,"STRONG",{});var omt=s(ihe);mXo=r(omt,"tapas"),omt.forEach(t),fXo=r(Z7e," \u2014 "),_V=n(Z7e,"A",{href:!0});var rmt=s(_V);gXo=r(rmt,"TapasForQuestionAnswering"),rmt.forEach(t),hXo=r(Z7e," (TAPAS model)"),Z7e.forEach(t),emt.forEach(t),uXo=i(da),R1=n(da,"P",{});var e9e=s(R1);pXo=r(e9e,"The model is set in evaluation mode by default using "),dhe=n(e9e,"CODE",{});var tmt=s(dhe);_Xo=r(tmt,"model.eval()"),tmt.forEach(t),bXo=r(e9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),che=n(e9e,"CODE",{});var amt=s(che);FXo=r(amt,"model.train()"),amt.forEach(t),e9e.forEach(t),vXo=i(da),T(B1.$$.fragment,da),da.forEach(t),Js.forEach(t),CIe=i(m),ed=n(m,"H2",{class:!0});var LNe=s(ed);P1=n(LNe,"A",{id:!0,class:!0,href:!0});var nmt=s(P1);mhe=n(nmt,"SPAN",{});var smt=s(mhe);T(CL.$$.fragment,smt),smt.forEach(t),nmt.forEach(t),TXo=i(LNe),fhe=n(LNe,"SPAN",{});var lmt=s(fhe);MXo=r(lmt,"AutoModelForImageClassification"),lmt.forEach(t),LNe.forEach(t),wIe=i(m),jo=n(m,"DIV",{class:!0});var Ys=s(jo);T(wL.$$.fragment,Ys),EXo=i(Ys),od=n(Ys,"P",{});var $K=s(od);CXo=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bV=n($K,"A",{href:!0});var imt=s(bV);wXo=r(imt,"from_pretrained()"),imt.forEach(t),AXo=r($K," class method or the "),FV=n($K,"A",{href:!0});var dmt=s(FV);yXo=r(dmt,"from_config()"),dmt.forEach(t),LXo=r($K,` class
method.`),$K.forEach(t),xXo=i(Ys),AL=n(Ys,"P",{});var xNe=s(AL);$Xo=r(xNe,"This class cannot be instantiated directly using "),ghe=n(xNe,"CODE",{});var cmt=s(ghe);kXo=r(cmt,"__init__()"),cmt.forEach(t),SXo=r(xNe," (throws an error)."),xNe.forEach(t),RXo=i(Ys),ft=n(Ys,"DIV",{class:!0});var M6=s(ft);T(yL.$$.fragment,M6),BXo=i(M6),hhe=n(M6,"P",{});var mmt=s(hhe);PXo=r(mmt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mmt.forEach(t),IXo=i(M6),rd=n(M6,"P",{});var kK=s(rd);qXo=r(kK,`Note:
Loading a model from its configuration file does `),uhe=n(kK,"STRONG",{});var fmt=s(uhe);NXo=r(fmt,"not"),fmt.forEach(t),jXo=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),vV=n(kK,"A",{href:!0});var gmt=s(vV);DXo=r(gmt,"from_pretrained()"),gmt.forEach(t),GXo=r(kK," to load the model weights."),kK.forEach(t),OXo=i(M6),T(I1.$$.fragment,M6),M6.forEach(t),VXo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(LL.$$.fragment,ca),XXo=i(ca),phe=n(ca,"P",{});var hmt=s(phe);zXo=r(hmt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hmt.forEach(t),QXo=i(ca),qa=n(ca,"P",{});var E6=s(qa);WXo=r(E6,"The model class to instantiate is selected based on the "),_he=n(E6,"CODE",{});var umt=s(_he);HXo=r(umt,"model_type"),umt.forEach(t),UXo=r(E6,` property of the config object (either
passed as an argument or loaded from `),bhe=n(E6,"CODE",{});var pmt=s(bhe);JXo=r(pmt,"pretrained_model_name_or_path"),pmt.forEach(t),YXo=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fhe=n(E6,"CODE",{});var _mt=s(Fhe);KXo=r(_mt,"pretrained_model_name_or_path"),_mt.forEach(t),ZXo=r(E6,":"),E6.forEach(t),ezo=i(ca),ve=n(ca,"UL",{});var Ee=s(ve);q1=n(Ee,"LI",{});var o9e=s(q1);vhe=n(o9e,"STRONG",{});var bmt=s(vhe);ozo=r(bmt,"beit"),bmt.forEach(t),rzo=r(o9e," \u2014 "),TV=n(o9e,"A",{href:!0});var Fmt=s(TV);tzo=r(Fmt,"BeitForImageClassification"),Fmt.forEach(t),azo=r(o9e," (BEiT model)"),o9e.forEach(t),nzo=i(Ee),N1=n(Ee,"LI",{});var r9e=s(N1);The=n(r9e,"STRONG",{});var vmt=s(The);szo=r(vmt,"convnext"),vmt.forEach(t),lzo=r(r9e," \u2014 "),MV=n(r9e,"A",{href:!0});var Tmt=s(MV);izo=r(Tmt,"ConvNextForImageClassification"),Tmt.forEach(t),dzo=r(r9e," (ConvNext model)"),r9e.forEach(t),czo=i(Ee),j1=n(Ee,"LI",{});var t9e=s(j1);Mhe=n(t9e,"STRONG",{});var Mmt=s(Mhe);mzo=r(Mmt,"data2vec-vision"),Mmt.forEach(t),fzo=r(t9e," \u2014 "),EV=n(t9e,"A",{href:!0});var Emt=s(EV);gzo=r(Emt,"Data2VecVisionForImageClassification"),Emt.forEach(t),hzo=r(t9e," (Data2VecVision model)"),t9e.forEach(t),uzo=i(Ee),Rs=n(Ee,"LI",{});var f$=s(Rs);Ehe=n(f$,"STRONG",{});var Cmt=s(Ehe);pzo=r(Cmt,"deit"),Cmt.forEach(t),_zo=r(f$," \u2014 "),CV=n(f$,"A",{href:!0});var wmt=s(CV);bzo=r(wmt,"DeiTForImageClassification"),wmt.forEach(t),Fzo=r(f$," or "),wV=n(f$,"A",{href:!0});var Amt=s(wV);vzo=r(Amt,"DeiTForImageClassificationWithTeacher"),Amt.forEach(t),Tzo=r(f$," (DeiT model)"),f$.forEach(t),Mzo=i(Ee),D1=n(Ee,"LI",{});var a9e=s(D1);Che=n(a9e,"STRONG",{});var ymt=s(Che);Ezo=r(ymt,"imagegpt"),ymt.forEach(t),Czo=r(a9e," \u2014 "),AV=n(a9e,"A",{href:!0});var Lmt=s(AV);wzo=r(Lmt,"ImageGPTForImageClassification"),Lmt.forEach(t),Azo=r(a9e," (ImageGPT model)"),a9e.forEach(t),yzo=i(Ee),gt=n(Ee,"LI",{});var cm=s(gt);whe=n(cm,"STRONG",{});var xmt=s(whe);Lzo=r(xmt,"perceiver"),xmt.forEach(t),xzo=r(cm," \u2014 "),yV=n(cm,"A",{href:!0});var $mt=s(yV);$zo=r($mt,"PerceiverForImageClassificationLearned"),$mt.forEach(t),kzo=r(cm," or "),LV=n(cm,"A",{href:!0});var kmt=s(LV);Szo=r(kmt,"PerceiverForImageClassificationFourier"),kmt.forEach(t),Rzo=r(cm," or "),xV=n(cm,"A",{href:!0});var Smt=s(xV);Bzo=r(Smt,"PerceiverForImageClassificationConvProcessing"),Smt.forEach(t),Pzo=r(cm," (Perceiver model)"),cm.forEach(t),Izo=i(Ee),G1=n(Ee,"LI",{});var n9e=s(G1);Ahe=n(n9e,"STRONG",{});var Rmt=s(Ahe);qzo=r(Rmt,"poolformer"),Rmt.forEach(t),Nzo=r(n9e," \u2014 "),$V=n(n9e,"A",{href:!0});var Bmt=s($V);jzo=r(Bmt,"PoolFormerForImageClassification"),Bmt.forEach(t),Dzo=r(n9e," (PoolFormer model)"),n9e.forEach(t),Gzo=i(Ee),O1=n(Ee,"LI",{});var s9e=s(O1);yhe=n(s9e,"STRONG",{});var Pmt=s(yhe);Ozo=r(Pmt,"regnet"),Pmt.forEach(t),Vzo=r(s9e," \u2014 "),kV=n(s9e,"A",{href:!0});var Imt=s(kV);Xzo=r(Imt,"RegNetForImageClassification"),Imt.forEach(t),zzo=r(s9e," (RegNet model)"),s9e.forEach(t),Qzo=i(Ee),V1=n(Ee,"LI",{});var l9e=s(V1);Lhe=n(l9e,"STRONG",{});var qmt=s(Lhe);Wzo=r(qmt,"resnet"),qmt.forEach(t),Hzo=r(l9e," \u2014 "),SV=n(l9e,"A",{href:!0});var Nmt=s(SV);Uzo=r(Nmt,"ResNetForImageClassification"),Nmt.forEach(t),Jzo=r(l9e," (ResNet model)"),l9e.forEach(t),Yzo=i(Ee),X1=n(Ee,"LI",{});var i9e=s(X1);xhe=n(i9e,"STRONG",{});var jmt=s(xhe);Kzo=r(jmt,"segformer"),jmt.forEach(t),Zzo=r(i9e," \u2014 "),RV=n(i9e,"A",{href:!0});var Dmt=s(RV);eQo=r(Dmt,"SegformerForImageClassification"),Dmt.forEach(t),oQo=r(i9e," (SegFormer model)"),i9e.forEach(t),rQo=i(Ee),z1=n(Ee,"LI",{});var d9e=s(z1);$he=n(d9e,"STRONG",{});var Gmt=s($he);tQo=r(Gmt,"swin"),Gmt.forEach(t),aQo=r(d9e," \u2014 "),BV=n(d9e,"A",{href:!0});var Omt=s(BV);nQo=r(Omt,"SwinForImageClassification"),Omt.forEach(t),sQo=r(d9e," (Swin model)"),d9e.forEach(t),lQo=i(Ee),Q1=n(Ee,"LI",{});var c9e=s(Q1);khe=n(c9e,"STRONG",{});var Vmt=s(khe);iQo=r(Vmt,"van"),Vmt.forEach(t),dQo=r(c9e," \u2014 "),PV=n(c9e,"A",{href:!0});var Xmt=s(PV);cQo=r(Xmt,"VanForImageClassification"),Xmt.forEach(t),mQo=r(c9e," (VAN model)"),c9e.forEach(t),fQo=i(Ee),W1=n(Ee,"LI",{});var m9e=s(W1);She=n(m9e,"STRONG",{});var zmt=s(She);gQo=r(zmt,"vit"),zmt.forEach(t),hQo=r(m9e," \u2014 "),IV=n(m9e,"A",{href:!0});var Qmt=s(IV);uQo=r(Qmt,"ViTForImageClassification"),Qmt.forEach(t),pQo=r(m9e," (ViT model)"),m9e.forEach(t),Ee.forEach(t),_Qo=i(ca),H1=n(ca,"P",{});var f9e=s(H1);bQo=r(f9e,"The model is set in evaluation mode by default using "),Rhe=n(f9e,"CODE",{});var Wmt=s(Rhe);FQo=r(Wmt,"model.eval()"),Wmt.forEach(t),vQo=r(f9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bhe=n(f9e,"CODE",{});var Hmt=s(Bhe);TQo=r(Hmt,"model.train()"),Hmt.forEach(t),f9e.forEach(t),MQo=i(ca),T(U1.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),AIe=i(m),td=n(m,"H2",{class:!0});var $Ne=s(td);J1=n($Ne,"A",{id:!0,class:!0,href:!0});var Umt=s(J1);Phe=n(Umt,"SPAN",{});var Jmt=s(Phe);T(xL.$$.fragment,Jmt),Jmt.forEach(t),Umt.forEach(t),EQo=i($Ne),Ihe=n($Ne,"SPAN",{});var Ymt=s(Ihe);CQo=r(Ymt,"AutoModelForVision2Seq"),Ymt.forEach(t),$Ne.forEach(t),yIe=i(m),Do=n(m,"DIV",{class:!0});var Ks=s(Do);T($L.$$.fragment,Ks),wQo=i(Ks),ad=n(Ks,"P",{});var SK=s(ad);AQo=r(SK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qV=n(SK,"A",{href:!0});var Kmt=s(qV);yQo=r(Kmt,"from_pretrained()"),Kmt.forEach(t),LQo=r(SK," class method or the "),NV=n(SK,"A",{href:!0});var Zmt=s(NV);xQo=r(Zmt,"from_config()"),Zmt.forEach(t),$Qo=r(SK,` class
method.`),SK.forEach(t),kQo=i(Ks),kL=n(Ks,"P",{});var kNe=s(kL);SQo=r(kNe,"This class cannot be instantiated directly using "),qhe=n(kNe,"CODE",{});var eft=s(qhe);RQo=r(eft,"__init__()"),eft.forEach(t),BQo=r(kNe," (throws an error)."),kNe.forEach(t),PQo=i(Ks),ht=n(Ks,"DIV",{class:!0});var C6=s(ht);T(SL.$$.fragment,C6),IQo=i(C6),Nhe=n(C6,"P",{});var oft=s(Nhe);qQo=r(oft,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),oft.forEach(t),NQo=i(C6),nd=n(C6,"P",{});var RK=s(nd);jQo=r(RK,`Note:
Loading a model from its configuration file does `),jhe=n(RK,"STRONG",{});var rft=s(jhe);DQo=r(rft,"not"),rft.forEach(t),GQo=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=n(RK,"A",{href:!0});var tft=s(jV);OQo=r(tft,"from_pretrained()"),tft.forEach(t),VQo=r(RK," to load the model weights."),RK.forEach(t),XQo=i(C6),T(Y1.$$.fragment,C6),C6.forEach(t),zQo=i(Ks),so=n(Ks,"DIV",{class:!0});var ma=s(so);T(RL.$$.fragment,ma),QQo=i(ma),Dhe=n(ma,"P",{});var aft=s(Dhe);WQo=r(aft,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),aft.forEach(t),HQo=i(ma),Na=n(ma,"P",{});var w6=s(Na);UQo=r(w6,"The model class to instantiate is selected based on the "),Ghe=n(w6,"CODE",{});var nft=s(Ghe);JQo=r(nft,"model_type"),nft.forEach(t),YQo=r(w6,` property of the config object (either
passed as an argument or loaded from `),Ohe=n(w6,"CODE",{});var sft=s(Ohe);KQo=r(sft,"pretrained_model_name_or_path"),sft.forEach(t),ZQo=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vhe=n(w6,"CODE",{});var lft=s(Vhe);eWo=r(lft,"pretrained_model_name_or_path"),lft.forEach(t),oWo=r(w6,":"),w6.forEach(t),rWo=i(ma),Xhe=n(ma,"UL",{});var ift=s(Xhe);K1=n(ift,"LI",{});var g9e=s(K1);zhe=n(g9e,"STRONG",{});var dft=s(zhe);tWo=r(dft,"vision-encoder-decoder"),dft.forEach(t),aWo=r(g9e," \u2014 "),DV=n(g9e,"A",{href:!0});var cft=s(DV);nWo=r(cft,"VisionEncoderDecoderModel"),cft.forEach(t),sWo=r(g9e," (Vision Encoder decoder model)"),g9e.forEach(t),ift.forEach(t),lWo=i(ma),Z1=n(ma,"P",{});var h9e=s(Z1);iWo=r(h9e,"The model is set in evaluation mode by default using "),Qhe=n(h9e,"CODE",{});var mft=s(Qhe);dWo=r(mft,"model.eval()"),mft.forEach(t),cWo=r(h9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Whe=n(h9e,"CODE",{});var fft=s(Whe);mWo=r(fft,"model.train()"),fft.forEach(t),h9e.forEach(t),fWo=i(ma),T(eT.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),LIe=i(m),sd=n(m,"H2",{class:!0});var SNe=s(sd);oT=n(SNe,"A",{id:!0,class:!0,href:!0});var gft=s(oT);Hhe=n(gft,"SPAN",{});var hft=s(Hhe);T(BL.$$.fragment,hft),hft.forEach(t),gft.forEach(t),gWo=i(SNe),Uhe=n(SNe,"SPAN",{});var uft=s(Uhe);hWo=r(uft,"AutoModelForAudioClassification"),uft.forEach(t),SNe.forEach(t),xIe=i(m),Go=n(m,"DIV",{class:!0});var Zs=s(Go);T(PL.$$.fragment,Zs),uWo=i(Zs),ld=n(Zs,"P",{});var BK=s(ld);pWo=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),GV=n(BK,"A",{href:!0});var pft=s(GV);_Wo=r(pft,"from_pretrained()"),pft.forEach(t),bWo=r(BK," class method or the "),OV=n(BK,"A",{href:!0});var _ft=s(OV);FWo=r(_ft,"from_config()"),_ft.forEach(t),vWo=r(BK,` class
method.`),BK.forEach(t),TWo=i(Zs),IL=n(Zs,"P",{});var RNe=s(IL);MWo=r(RNe,"This class cannot be instantiated directly using "),Jhe=n(RNe,"CODE",{});var bft=s(Jhe);EWo=r(bft,"__init__()"),bft.forEach(t),CWo=r(RNe," (throws an error)."),RNe.forEach(t),wWo=i(Zs),ut=n(Zs,"DIV",{class:!0});var A6=s(ut);T(qL.$$.fragment,A6),AWo=i(A6),Yhe=n(A6,"P",{});var Fft=s(Yhe);yWo=r(Fft,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Fft.forEach(t),LWo=i(A6),id=n(A6,"P",{});var PK=s(id);xWo=r(PK,`Note:
Loading a model from its configuration file does `),Khe=n(PK,"STRONG",{});var vft=s(Khe);$Wo=r(vft,"not"),vft.forEach(t),kWo=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=n(PK,"A",{href:!0});var Tft=s(VV);SWo=r(Tft,"from_pretrained()"),Tft.forEach(t),RWo=r(PK," to load the model weights."),PK.forEach(t),BWo=i(A6),T(rT.$$.fragment,A6),A6.forEach(t),PWo=i(Zs),lo=n(Zs,"DIV",{class:!0});var fa=s(lo);T(NL.$$.fragment,fa),IWo=i(fa),Zhe=n(fa,"P",{});var Mft=s(Zhe);qWo=r(Mft,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Mft.forEach(t),NWo=i(fa),ja=n(fa,"P",{});var y6=s(ja);jWo=r(y6,"The model class to instantiate is selected based on the "),eue=n(y6,"CODE",{});var Eft=s(eue);DWo=r(Eft,"model_type"),Eft.forEach(t),GWo=r(y6,` property of the config object (either
passed as an argument or loaded from `),oue=n(y6,"CODE",{});var Cft=s(oue);OWo=r(Cft,"pretrained_model_name_or_path"),Cft.forEach(t),VWo=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rue=n(y6,"CODE",{});var wft=s(rue);XWo=r(wft,"pretrained_model_name_or_path"),wft.forEach(t),zWo=r(y6,":"),y6.forEach(t),QWo=i(fa),Ne=n(fa,"UL",{});var bo=s(Ne);tT=n(bo,"LI",{});var u9e=s(tT);tue=n(u9e,"STRONG",{});var Aft=s(tue);WWo=r(Aft,"data2vec-audio"),Aft.forEach(t),HWo=r(u9e," \u2014 "),XV=n(u9e,"A",{href:!0});var yft=s(XV);UWo=r(yft,"Data2VecAudioForSequenceClassification"),yft.forEach(t),JWo=r(u9e," (Data2VecAudio model)"),u9e.forEach(t),YWo=i(bo),aT=n(bo,"LI",{});var p9e=s(aT);aue=n(p9e,"STRONG",{});var Lft=s(aue);KWo=r(Lft,"hubert"),Lft.forEach(t),ZWo=r(p9e," \u2014 "),zV=n(p9e,"A",{href:!0});var xft=s(zV);eHo=r(xft,"HubertForSequenceClassification"),xft.forEach(t),oHo=r(p9e," (Hubert model)"),p9e.forEach(t),rHo=i(bo),nT=n(bo,"LI",{});var _9e=s(nT);nue=n(_9e,"STRONG",{});var $ft=s(nue);tHo=r($ft,"sew"),$ft.forEach(t),aHo=r(_9e," \u2014 "),QV=n(_9e,"A",{href:!0});var kft=s(QV);nHo=r(kft,"SEWForSequenceClassification"),kft.forEach(t),sHo=r(_9e," (SEW model)"),_9e.forEach(t),lHo=i(bo),sT=n(bo,"LI",{});var b9e=s(sT);sue=n(b9e,"STRONG",{});var Sft=s(sue);iHo=r(Sft,"sew-d"),Sft.forEach(t),dHo=r(b9e," \u2014 "),WV=n(b9e,"A",{href:!0});var Rft=s(WV);cHo=r(Rft,"SEWDForSequenceClassification"),Rft.forEach(t),mHo=r(b9e," (SEW-D model)"),b9e.forEach(t),fHo=i(bo),lT=n(bo,"LI",{});var F9e=s(lT);lue=n(F9e,"STRONG",{});var Bft=s(lue);gHo=r(Bft,"unispeech"),Bft.forEach(t),hHo=r(F9e," \u2014 "),HV=n(F9e,"A",{href:!0});var Pft=s(HV);uHo=r(Pft,"UniSpeechForSequenceClassification"),Pft.forEach(t),pHo=r(F9e," (UniSpeech model)"),F9e.forEach(t),_Ho=i(bo),iT=n(bo,"LI",{});var v9e=s(iT);iue=n(v9e,"STRONG",{});var Ift=s(iue);bHo=r(Ift,"unispeech-sat"),Ift.forEach(t),FHo=r(v9e," \u2014 "),UV=n(v9e,"A",{href:!0});var qft=s(UV);vHo=r(qft,"UniSpeechSatForSequenceClassification"),qft.forEach(t),THo=r(v9e," (UniSpeechSat model)"),v9e.forEach(t),MHo=i(bo),dT=n(bo,"LI",{});var T9e=s(dT);due=n(T9e,"STRONG",{});var Nft=s(due);EHo=r(Nft,"wav2vec2"),Nft.forEach(t),CHo=r(T9e," \u2014 "),JV=n(T9e,"A",{href:!0});var jft=s(JV);wHo=r(jft,"Wav2Vec2ForSequenceClassification"),jft.forEach(t),AHo=r(T9e," (Wav2Vec2 model)"),T9e.forEach(t),yHo=i(bo),cT=n(bo,"LI",{});var M9e=s(cT);cue=n(M9e,"STRONG",{});var Dft=s(cue);LHo=r(Dft,"wavlm"),Dft.forEach(t),xHo=r(M9e," \u2014 "),YV=n(M9e,"A",{href:!0});var Gft=s(YV);$Ho=r(Gft,"WavLMForSequenceClassification"),Gft.forEach(t),kHo=r(M9e," (WavLM model)"),M9e.forEach(t),bo.forEach(t),SHo=i(fa),mT=n(fa,"P",{});var E9e=s(mT);RHo=r(E9e,"The model is set in evaluation mode by default using "),mue=n(E9e,"CODE",{});var Oft=s(mue);BHo=r(Oft,"model.eval()"),Oft.forEach(t),PHo=r(E9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fue=n(E9e,"CODE",{});var Vft=s(fue);IHo=r(Vft,"model.train()"),Vft.forEach(t),E9e.forEach(t),qHo=i(fa),T(fT.$$.fragment,fa),fa.forEach(t),Zs.forEach(t),$Ie=i(m),dd=n(m,"H2",{class:!0});var BNe=s(dd);gT=n(BNe,"A",{id:!0,class:!0,href:!0});var Xft=s(gT);gue=n(Xft,"SPAN",{});var zft=s(gue);T(jL.$$.fragment,zft),zft.forEach(t),Xft.forEach(t),NHo=i(BNe),hue=n(BNe,"SPAN",{});var Qft=s(hue);jHo=r(Qft,"AutoModelForAudioFrameClassification"),Qft.forEach(t),BNe.forEach(t),kIe=i(m),Oo=n(m,"DIV",{class:!0});var el=s(Oo);T(DL.$$.fragment,el),DHo=i(el),cd=n(el,"P",{});var IK=s(cd);GHo=r(IK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),KV=n(IK,"A",{href:!0});var Wft=s(KV);OHo=r(Wft,"from_pretrained()"),Wft.forEach(t),VHo=r(IK," class method or the "),ZV=n(IK,"A",{href:!0});var Hft=s(ZV);XHo=r(Hft,"from_config()"),Hft.forEach(t),zHo=r(IK,` class
method.`),IK.forEach(t),QHo=i(el),GL=n(el,"P",{});var PNe=s(GL);WHo=r(PNe,"This class cannot be instantiated directly using "),uue=n(PNe,"CODE",{});var Uft=s(uue);HHo=r(Uft,"__init__()"),Uft.forEach(t),UHo=r(PNe," (throws an error)."),PNe.forEach(t),JHo=i(el),pt=n(el,"DIV",{class:!0});var L6=s(pt);T(OL.$$.fragment,L6),YHo=i(L6),pue=n(L6,"P",{});var Jft=s(pue);KHo=r(Jft,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Jft.forEach(t),ZHo=i(L6),md=n(L6,"P",{});var qK=s(md);eUo=r(qK,`Note:
Loading a model from its configuration file does `),_ue=n(qK,"STRONG",{});var Yft=s(_ue);oUo=r(Yft,"not"),Yft.forEach(t),rUo=r(qK,` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=n(qK,"A",{href:!0});var Kft=s(eX);tUo=r(Kft,"from_pretrained()"),Kft.forEach(t),aUo=r(qK," to load the model weights."),qK.forEach(t),nUo=i(L6),T(hT.$$.fragment,L6),L6.forEach(t),sUo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(VL.$$.fragment,ga),lUo=i(ga),bue=n(ga,"P",{});var Zft=s(bue);iUo=r(Zft,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Zft.forEach(t),dUo=i(ga),Da=n(ga,"P",{});var x6=s(Da);cUo=r(x6,"The model class to instantiate is selected based on the "),Fue=n(x6,"CODE",{});var egt=s(Fue);mUo=r(egt,"model_type"),egt.forEach(t),fUo=r(x6,` property of the config object (either
passed as an argument or loaded from `),vue=n(x6,"CODE",{});var ogt=s(vue);gUo=r(ogt,"pretrained_model_name_or_path"),ogt.forEach(t),hUo=r(x6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tue=n(x6,"CODE",{});var rgt=s(Tue);uUo=r(rgt,"pretrained_model_name_or_path"),rgt.forEach(t),pUo=r(x6,":"),x6.forEach(t),_Uo=i(ga),Ga=n(ga,"UL",{});var $6=s(Ga);uT=n($6,"LI",{});var C9e=s(uT);Mue=n(C9e,"STRONG",{});var tgt=s(Mue);bUo=r(tgt,"data2vec-audio"),tgt.forEach(t),FUo=r(C9e," \u2014 "),oX=n(C9e,"A",{href:!0});var agt=s(oX);vUo=r(agt,"Data2VecAudioForAudioFrameClassification"),agt.forEach(t),TUo=r(C9e," (Data2VecAudio model)"),C9e.forEach(t),MUo=i($6),pT=n($6,"LI",{});var w9e=s(pT);Eue=n(w9e,"STRONG",{});var ngt=s(Eue);EUo=r(ngt,"unispeech-sat"),ngt.forEach(t),CUo=r(w9e," \u2014 "),rX=n(w9e,"A",{href:!0});var sgt=s(rX);wUo=r(sgt,"UniSpeechSatForAudioFrameClassification"),sgt.forEach(t),AUo=r(w9e," (UniSpeechSat model)"),w9e.forEach(t),yUo=i($6),_T=n($6,"LI",{});var A9e=s(_T);Cue=n(A9e,"STRONG",{});var lgt=s(Cue);LUo=r(lgt,"wav2vec2"),lgt.forEach(t),xUo=r(A9e," \u2014 "),tX=n(A9e,"A",{href:!0});var igt=s(tX);$Uo=r(igt,"Wav2Vec2ForAudioFrameClassification"),igt.forEach(t),kUo=r(A9e," (Wav2Vec2 model)"),A9e.forEach(t),SUo=i($6),bT=n($6,"LI",{});var y9e=s(bT);wue=n(y9e,"STRONG",{});var dgt=s(wue);RUo=r(dgt,"wavlm"),dgt.forEach(t),BUo=r(y9e," \u2014 "),aX=n(y9e,"A",{href:!0});var cgt=s(aX);PUo=r(cgt,"WavLMForAudioFrameClassification"),cgt.forEach(t),IUo=r(y9e," (WavLM model)"),y9e.forEach(t),$6.forEach(t),qUo=i(ga),FT=n(ga,"P",{});var L9e=s(FT);NUo=r(L9e,"The model is set in evaluation mode by default using "),Aue=n(L9e,"CODE",{});var mgt=s(Aue);jUo=r(mgt,"model.eval()"),mgt.forEach(t),DUo=r(L9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yue=n(L9e,"CODE",{});var fgt=s(yue);GUo=r(fgt,"model.train()"),fgt.forEach(t),L9e.forEach(t),OUo=i(ga),T(vT.$$.fragment,ga),ga.forEach(t),el.forEach(t),SIe=i(m),fd=n(m,"H2",{class:!0});var INe=s(fd);TT=n(INe,"A",{id:!0,class:!0,href:!0});var ggt=s(TT);Lue=n(ggt,"SPAN",{});var hgt=s(Lue);T(XL.$$.fragment,hgt),hgt.forEach(t),ggt.forEach(t),VUo=i(INe),xue=n(INe,"SPAN",{});var ugt=s(xue);XUo=r(ugt,"AutoModelForCTC"),ugt.forEach(t),INe.forEach(t),RIe=i(m),Vo=n(m,"DIV",{class:!0});var ol=s(Vo);T(zL.$$.fragment,ol),zUo=i(ol),gd=n(ol,"P",{});var NK=s(gd);QUo=r(NK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),nX=n(NK,"A",{href:!0});var pgt=s(nX);WUo=r(pgt,"from_pretrained()"),pgt.forEach(t),HUo=r(NK," class method or the "),sX=n(NK,"A",{href:!0});var _gt=s(sX);UUo=r(_gt,"from_config()"),_gt.forEach(t),JUo=r(NK,` class
method.`),NK.forEach(t),YUo=i(ol),QL=n(ol,"P",{});var qNe=s(QL);KUo=r(qNe,"This class cannot be instantiated directly using "),$ue=n(qNe,"CODE",{});var bgt=s($ue);ZUo=r(bgt,"__init__()"),bgt.forEach(t),eJo=r(qNe," (throws an error)."),qNe.forEach(t),oJo=i(ol),_t=n(ol,"DIV",{class:!0});var k6=s(_t);T(WL.$$.fragment,k6),rJo=i(k6),kue=n(k6,"P",{});var Fgt=s(kue);tJo=r(Fgt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Fgt.forEach(t),aJo=i(k6),hd=n(k6,"P",{});var jK=s(hd);nJo=r(jK,`Note:
Loading a model from its configuration file does `),Sue=n(jK,"STRONG",{});var vgt=s(Sue);sJo=r(vgt,"not"),vgt.forEach(t),lJo=r(jK,` load the model weights. It only affects the
model\u2019s configuration. Use `),lX=n(jK,"A",{href:!0});var Tgt=s(lX);iJo=r(Tgt,"from_pretrained()"),Tgt.forEach(t),dJo=r(jK," to load the model weights."),jK.forEach(t),cJo=i(k6),T(MT.$$.fragment,k6),k6.forEach(t),mJo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(HL.$$.fragment,ha),fJo=i(ha),Rue=n(ha,"P",{});var Mgt=s(Rue);gJo=r(Mgt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Mgt.forEach(t),hJo=i(ha),Oa=n(ha,"P",{});var S6=s(Oa);uJo=r(S6,"The model class to instantiate is selected based on the "),Bue=n(S6,"CODE",{});var Egt=s(Bue);pJo=r(Egt,"model_type"),Egt.forEach(t),_Jo=r(S6,` property of the config object (either
passed as an argument or loaded from `),Pue=n(S6,"CODE",{});var Cgt=s(Pue);bJo=r(Cgt,"pretrained_model_name_or_path"),Cgt.forEach(t),FJo=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=n(S6,"CODE",{});var wgt=s(Iue);vJo=r(wgt,"pretrained_model_name_or_path"),wgt.forEach(t),TJo=r(S6,":"),S6.forEach(t),MJo=i(ha),je=n(ha,"UL",{});var Fo=s(je);ET=n(Fo,"LI",{});var x9e=s(ET);que=n(x9e,"STRONG",{});var Agt=s(que);EJo=r(Agt,"data2vec-audio"),Agt.forEach(t),CJo=r(x9e," \u2014 "),iX=n(x9e,"A",{href:!0});var ygt=s(iX);wJo=r(ygt,"Data2VecAudioForCTC"),ygt.forEach(t),AJo=r(x9e," (Data2VecAudio model)"),x9e.forEach(t),yJo=i(Fo),CT=n(Fo,"LI",{});var $9e=s(CT);Nue=n($9e,"STRONG",{});var Lgt=s(Nue);LJo=r(Lgt,"hubert"),Lgt.forEach(t),xJo=r($9e," \u2014 "),dX=n($9e,"A",{href:!0});var xgt=s(dX);$Jo=r(xgt,"HubertForCTC"),xgt.forEach(t),kJo=r($9e," (Hubert model)"),$9e.forEach(t),SJo=i(Fo),wT=n(Fo,"LI",{});var k9e=s(wT);jue=n(k9e,"STRONG",{});var $gt=s(jue);RJo=r($gt,"sew"),$gt.forEach(t),BJo=r(k9e," \u2014 "),cX=n(k9e,"A",{href:!0});var kgt=s(cX);PJo=r(kgt,"SEWForCTC"),kgt.forEach(t),IJo=r(k9e," (SEW model)"),k9e.forEach(t),qJo=i(Fo),AT=n(Fo,"LI",{});var S9e=s(AT);Due=n(S9e,"STRONG",{});var Sgt=s(Due);NJo=r(Sgt,"sew-d"),Sgt.forEach(t),jJo=r(S9e," \u2014 "),mX=n(S9e,"A",{href:!0});var Rgt=s(mX);DJo=r(Rgt,"SEWDForCTC"),Rgt.forEach(t),GJo=r(S9e," (SEW-D model)"),S9e.forEach(t),OJo=i(Fo),yT=n(Fo,"LI",{});var R9e=s(yT);Gue=n(R9e,"STRONG",{});var Bgt=s(Gue);VJo=r(Bgt,"unispeech"),Bgt.forEach(t),XJo=r(R9e," \u2014 "),fX=n(R9e,"A",{href:!0});var Pgt=s(fX);zJo=r(Pgt,"UniSpeechForCTC"),Pgt.forEach(t),QJo=r(R9e," (UniSpeech model)"),R9e.forEach(t),WJo=i(Fo),LT=n(Fo,"LI",{});var B9e=s(LT);Oue=n(B9e,"STRONG",{});var Igt=s(Oue);HJo=r(Igt,"unispeech-sat"),Igt.forEach(t),UJo=r(B9e," \u2014 "),gX=n(B9e,"A",{href:!0});var qgt=s(gX);JJo=r(qgt,"UniSpeechSatForCTC"),qgt.forEach(t),YJo=r(B9e," (UniSpeechSat model)"),B9e.forEach(t),KJo=i(Fo),xT=n(Fo,"LI",{});var P9e=s(xT);Vue=n(P9e,"STRONG",{});var Ngt=s(Vue);ZJo=r(Ngt,"wav2vec2"),Ngt.forEach(t),eYo=r(P9e," \u2014 "),hX=n(P9e,"A",{href:!0});var jgt=s(hX);oYo=r(jgt,"Wav2Vec2ForCTC"),jgt.forEach(t),rYo=r(P9e," (Wav2Vec2 model)"),P9e.forEach(t),tYo=i(Fo),$T=n(Fo,"LI",{});var I9e=s($T);Xue=n(I9e,"STRONG",{});var Dgt=s(Xue);aYo=r(Dgt,"wavlm"),Dgt.forEach(t),nYo=r(I9e," \u2014 "),uX=n(I9e,"A",{href:!0});var Ggt=s(uX);sYo=r(Ggt,"WavLMForCTC"),Ggt.forEach(t),lYo=r(I9e," (WavLM model)"),I9e.forEach(t),Fo.forEach(t),iYo=i(ha),kT=n(ha,"P",{});var q9e=s(kT);dYo=r(q9e,"The model is set in evaluation mode by default using "),zue=n(q9e,"CODE",{});var Ogt=s(zue);cYo=r(Ogt,"model.eval()"),Ogt.forEach(t),mYo=r(q9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Que=n(q9e,"CODE",{});var Vgt=s(Que);fYo=r(Vgt,"model.train()"),Vgt.forEach(t),q9e.forEach(t),gYo=i(ha),T(ST.$$.fragment,ha),ha.forEach(t),ol.forEach(t),BIe=i(m),ud=n(m,"H2",{class:!0});var NNe=s(ud);RT=n(NNe,"A",{id:!0,class:!0,href:!0});var Xgt=s(RT);Wue=n(Xgt,"SPAN",{});var zgt=s(Wue);T(UL.$$.fragment,zgt),zgt.forEach(t),Xgt.forEach(t),hYo=i(NNe),Hue=n(NNe,"SPAN",{});var Qgt=s(Hue);uYo=r(Qgt,"AutoModelForSpeechSeq2Seq"),Qgt.forEach(t),NNe.forEach(t),PIe=i(m),Xo=n(m,"DIV",{class:!0});var rl=s(Xo);T(JL.$$.fragment,rl),pYo=i(rl),pd=n(rl,"P",{});var DK=s(pd);_Yo=r(DK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),pX=n(DK,"A",{href:!0});var Wgt=s(pX);bYo=r(Wgt,"from_pretrained()"),Wgt.forEach(t),FYo=r(DK," class method or the "),_X=n(DK,"A",{href:!0});var Hgt=s(_X);vYo=r(Hgt,"from_config()"),Hgt.forEach(t),TYo=r(DK,` class
method.`),DK.forEach(t),MYo=i(rl),YL=n(rl,"P",{});var jNe=s(YL);EYo=r(jNe,"This class cannot be instantiated directly using "),Uue=n(jNe,"CODE",{});var Ugt=s(Uue);CYo=r(Ugt,"__init__()"),Ugt.forEach(t),wYo=r(jNe," (throws an error)."),jNe.forEach(t),AYo=i(rl),bt=n(rl,"DIV",{class:!0});var R6=s(bt);T(KL.$$.fragment,R6),yYo=i(R6),Jue=n(R6,"P",{});var Jgt=s(Jue);LYo=r(Jgt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Jgt.forEach(t),xYo=i(R6),_d=n(R6,"P",{});var GK=s(_d);$Yo=r(GK,`Note:
Loading a model from its configuration file does `),Yue=n(GK,"STRONG",{});var Ygt=s(Yue);kYo=r(Ygt,"not"),Ygt.forEach(t),SYo=r(GK,` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=n(GK,"A",{href:!0});var Kgt=s(bX);RYo=r(Kgt,"from_pretrained()"),Kgt.forEach(t),BYo=r(GK," to load the model weights."),GK.forEach(t),PYo=i(R6),T(BT.$$.fragment,R6),R6.forEach(t),IYo=i(rl),mo=n(rl,"DIV",{class:!0});var ua=s(mo);T(ZL.$$.fragment,ua),qYo=i(ua),Kue=n(ua,"P",{});var Zgt=s(Kue);NYo=r(Zgt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Zgt.forEach(t),jYo=i(ua),Va=n(ua,"P",{});var B6=s(Va);DYo=r(B6,"The model class to instantiate is selected based on the "),Zue=n(B6,"CODE",{});var eht=s(Zue);GYo=r(eht,"model_type"),eht.forEach(t),OYo=r(B6,` property of the config object (either
passed as an argument or loaded from `),epe=n(B6,"CODE",{});var oht=s(epe);VYo=r(oht,"pretrained_model_name_or_path"),oht.forEach(t),XYo=r(B6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ope=n(B6,"CODE",{});var rht=s(ope);zYo=r(rht,"pretrained_model_name_or_path"),rht.forEach(t),QYo=r(B6,":"),B6.forEach(t),WYo=i(ua),e8=n(ua,"UL",{});var DNe=s(e8);PT=n(DNe,"LI",{});var N9e=s(PT);rpe=n(N9e,"STRONG",{});var tht=s(rpe);HYo=r(tht,"speech-encoder-decoder"),tht.forEach(t),UYo=r(N9e," \u2014 "),FX=n(N9e,"A",{href:!0});var aht=s(FX);JYo=r(aht,"SpeechEncoderDecoderModel"),aht.forEach(t),YYo=r(N9e," (Speech Encoder decoder model)"),N9e.forEach(t),KYo=i(DNe),IT=n(DNe,"LI",{});var j9e=s(IT);tpe=n(j9e,"STRONG",{});var nht=s(tpe);ZYo=r(nht,"speech_to_text"),nht.forEach(t),eKo=r(j9e," \u2014 "),vX=n(j9e,"A",{href:!0});var sht=s(vX);oKo=r(sht,"Speech2TextForConditionalGeneration"),sht.forEach(t),rKo=r(j9e," (Speech2Text model)"),j9e.forEach(t),DNe.forEach(t),tKo=i(ua),qT=n(ua,"P",{});var D9e=s(qT);aKo=r(D9e,"The model is set in evaluation mode by default using "),ape=n(D9e,"CODE",{});var lht=s(ape);nKo=r(lht,"model.eval()"),lht.forEach(t),sKo=r(D9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),npe=n(D9e,"CODE",{});var iht=s(npe);lKo=r(iht,"model.train()"),iht.forEach(t),D9e.forEach(t),iKo=i(ua),T(NT.$$.fragment,ua),ua.forEach(t),rl.forEach(t),IIe=i(m),bd=n(m,"H2",{class:!0});var GNe=s(bd);jT=n(GNe,"A",{id:!0,class:!0,href:!0});var dht=s(jT);spe=n(dht,"SPAN",{});var cht=s(spe);T(o8.$$.fragment,cht),cht.forEach(t),dht.forEach(t),dKo=i(GNe),lpe=n(GNe,"SPAN",{});var mht=s(lpe);cKo=r(mht,"AutoModelForAudioXVector"),mht.forEach(t),GNe.forEach(t),qIe=i(m),zo=n(m,"DIV",{class:!0});var tl=s(zo);T(r8.$$.fragment,tl),mKo=i(tl),Fd=n(tl,"P",{});var OK=s(Fd);fKo=r(OK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),TX=n(OK,"A",{href:!0});var fht=s(TX);gKo=r(fht,"from_pretrained()"),fht.forEach(t),hKo=r(OK," class method or the "),MX=n(OK,"A",{href:!0});var ght=s(MX);uKo=r(ght,"from_config()"),ght.forEach(t),pKo=r(OK,` class
method.`),OK.forEach(t),_Ko=i(tl),t8=n(tl,"P",{});var ONe=s(t8);bKo=r(ONe,"This class cannot be instantiated directly using "),ipe=n(ONe,"CODE",{});var hht=s(ipe);FKo=r(hht,"__init__()"),hht.forEach(t),vKo=r(ONe," (throws an error)."),ONe.forEach(t),TKo=i(tl),Ft=n(tl,"DIV",{class:!0});var P6=s(Ft);T(a8.$$.fragment,P6),MKo=i(P6),dpe=n(P6,"P",{});var uht=s(dpe);EKo=r(uht,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),uht.forEach(t),CKo=i(P6),vd=n(P6,"P",{});var VK=s(vd);wKo=r(VK,`Note:
Loading a model from its configuration file does `),cpe=n(VK,"STRONG",{});var pht=s(cpe);AKo=r(pht,"not"),pht.forEach(t),yKo=r(VK,` load the model weights. It only affects the
model\u2019s configuration. Use `),EX=n(VK,"A",{href:!0});var _ht=s(EX);LKo=r(_ht,"from_pretrained()"),_ht.forEach(t),xKo=r(VK," to load the model weights."),VK.forEach(t),$Ko=i(P6),T(DT.$$.fragment,P6),P6.forEach(t),kKo=i(tl),fo=n(tl,"DIV",{class:!0});var pa=s(fo);T(n8.$$.fragment,pa),SKo=i(pa),mpe=n(pa,"P",{});var bht=s(mpe);RKo=r(bht,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),bht.forEach(t),BKo=i(pa),Xa=n(pa,"P",{});var I6=s(Xa);PKo=r(I6,"The model class to instantiate is selected based on the "),fpe=n(I6,"CODE",{});var Fht=s(fpe);IKo=r(Fht,"model_type"),Fht.forEach(t),qKo=r(I6,` property of the config object (either
passed as an argument or loaded from `),gpe=n(I6,"CODE",{});var vht=s(gpe);NKo=r(vht,"pretrained_model_name_or_path"),vht.forEach(t),jKo=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hpe=n(I6,"CODE",{});var Tht=s(hpe);DKo=r(Tht,"pretrained_model_name_or_path"),Tht.forEach(t),GKo=r(I6,":"),I6.forEach(t),OKo=i(pa),za=n(pa,"UL",{});var q6=s(za);GT=n(q6,"LI",{});var G9e=s(GT);upe=n(G9e,"STRONG",{});var Mht=s(upe);VKo=r(Mht,"data2vec-audio"),Mht.forEach(t),XKo=r(G9e," \u2014 "),CX=n(G9e,"A",{href:!0});var Eht=s(CX);zKo=r(Eht,"Data2VecAudioForXVector"),Eht.forEach(t),QKo=r(G9e," (Data2VecAudio model)"),G9e.forEach(t),WKo=i(q6),OT=n(q6,"LI",{});var O9e=s(OT);ppe=n(O9e,"STRONG",{});var Cht=s(ppe);HKo=r(Cht,"unispeech-sat"),Cht.forEach(t),UKo=r(O9e," \u2014 "),wX=n(O9e,"A",{href:!0});var wht=s(wX);JKo=r(wht,"UniSpeechSatForXVector"),wht.forEach(t),YKo=r(O9e," (UniSpeechSat model)"),O9e.forEach(t),KKo=i(q6),VT=n(q6,"LI",{});var V9e=s(VT);_pe=n(V9e,"STRONG",{});var Aht=s(_pe);ZKo=r(Aht,"wav2vec2"),Aht.forEach(t),eZo=r(V9e," \u2014 "),AX=n(V9e,"A",{href:!0});var yht=s(AX);oZo=r(yht,"Wav2Vec2ForXVector"),yht.forEach(t),rZo=r(V9e," (Wav2Vec2 model)"),V9e.forEach(t),tZo=i(q6),XT=n(q6,"LI",{});var X9e=s(XT);bpe=n(X9e,"STRONG",{});var Lht=s(bpe);aZo=r(Lht,"wavlm"),Lht.forEach(t),nZo=r(X9e," \u2014 "),yX=n(X9e,"A",{href:!0});var xht=s(yX);sZo=r(xht,"WavLMForXVector"),xht.forEach(t),lZo=r(X9e," (WavLM model)"),X9e.forEach(t),q6.forEach(t),iZo=i(pa),zT=n(pa,"P",{});var z9e=s(zT);dZo=r(z9e,"The model is set in evaluation mode by default using "),Fpe=n(z9e,"CODE",{});var $ht=s(Fpe);cZo=r($ht,"model.eval()"),$ht.forEach(t),mZo=r(z9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vpe=n(z9e,"CODE",{});var kht=s(vpe);fZo=r(kht,"model.train()"),kht.forEach(t),z9e.forEach(t),gZo=i(pa),T(QT.$$.fragment,pa),pa.forEach(t),tl.forEach(t),NIe=i(m),Td=n(m,"H2",{class:!0});var VNe=s(Td);WT=n(VNe,"A",{id:!0,class:!0,href:!0});var Sht=s(WT);Tpe=n(Sht,"SPAN",{});var Rht=s(Tpe);T(s8.$$.fragment,Rht),Rht.forEach(t),Sht.forEach(t),hZo=i(VNe),Mpe=n(VNe,"SPAN",{});var Bht=s(Mpe);uZo=r(Bht,"AutoModelForMaskedImageModeling"),Bht.forEach(t),VNe.forEach(t),jIe=i(m),Qo=n(m,"DIV",{class:!0});var al=s(Qo);T(l8.$$.fragment,al),pZo=i(al),Md=n(al,"P",{});var XK=s(Md);_Zo=r(XK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),LX=n(XK,"A",{href:!0});var Pht=s(LX);bZo=r(Pht,"from_pretrained()"),Pht.forEach(t),FZo=r(XK," class method or the "),xX=n(XK,"A",{href:!0});var Iht=s(xX);vZo=r(Iht,"from_config()"),Iht.forEach(t),TZo=r(XK,` class
method.`),XK.forEach(t),MZo=i(al),i8=n(al,"P",{});var XNe=s(i8);EZo=r(XNe,"This class cannot be instantiated directly using "),Epe=n(XNe,"CODE",{});var qht=s(Epe);CZo=r(qht,"__init__()"),qht.forEach(t),wZo=r(XNe," (throws an error)."),XNe.forEach(t),AZo=i(al),vt=n(al,"DIV",{class:!0});var N6=s(vt);T(d8.$$.fragment,N6),yZo=i(N6),Cpe=n(N6,"P",{});var Nht=s(Cpe);LZo=r(Nht,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Nht.forEach(t),xZo=i(N6),Ed=n(N6,"P",{});var zK=s(Ed);$Zo=r(zK,`Note:
Loading a model from its configuration file does `),wpe=n(zK,"STRONG",{});var jht=s(wpe);kZo=r(jht,"not"),jht.forEach(t),SZo=r(zK,` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=n(zK,"A",{href:!0});var Dht=s($X);RZo=r(Dht,"from_pretrained()"),Dht.forEach(t),BZo=r(zK," to load the model weights."),zK.forEach(t),PZo=i(N6),T(HT.$$.fragment,N6),N6.forEach(t),IZo=i(al),go=n(al,"DIV",{class:!0});var _a=s(go);T(c8.$$.fragment,_a),qZo=i(_a),Ape=n(_a,"P",{});var Ght=s(Ape);NZo=r(Ght,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Ght.forEach(t),jZo=i(_a),Qa=n(_a,"P",{});var j6=s(Qa);DZo=r(j6,"The model class to instantiate is selected based on the "),ype=n(j6,"CODE",{});var Oht=s(ype);GZo=r(Oht,"model_type"),Oht.forEach(t),OZo=r(j6,` property of the config object (either
passed as an argument or loaded from `),Lpe=n(j6,"CODE",{});var Vht=s(Lpe);VZo=r(Vht,"pretrained_model_name_or_path"),Vht.forEach(t),XZo=r(j6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xpe=n(j6,"CODE",{});var Xht=s(xpe);zZo=r(Xht,"pretrained_model_name_or_path"),Xht.forEach(t),QZo=r(j6,":"),j6.forEach(t),WZo=i(_a),Cd=n(_a,"UL",{});var QK=s(Cd);UT=n(QK,"LI",{});var Q9e=s(UT);$pe=n(Q9e,"STRONG",{});var zht=s($pe);HZo=r(zht,"deit"),zht.forEach(t),UZo=r(Q9e," \u2014 "),kX=n(Q9e,"A",{href:!0});var Qht=s(kX);JZo=r(Qht,"DeiTForMaskedImageModeling"),Qht.forEach(t),YZo=r(Q9e," (DeiT model)"),Q9e.forEach(t),KZo=i(QK),JT=n(QK,"LI",{});var W9e=s(JT);kpe=n(W9e,"STRONG",{});var Wht=s(kpe);ZZo=r(Wht,"swin"),Wht.forEach(t),eer=r(W9e," \u2014 "),SX=n(W9e,"A",{href:!0});var Hht=s(SX);oer=r(Hht,"SwinForMaskedImageModeling"),Hht.forEach(t),rer=r(W9e," (Swin model)"),W9e.forEach(t),ter=i(QK),YT=n(QK,"LI",{});var H9e=s(YT);Spe=n(H9e,"STRONG",{});var Uht=s(Spe);aer=r(Uht,"vit"),Uht.forEach(t),ner=r(H9e," \u2014 "),RX=n(H9e,"A",{href:!0});var Jht=s(RX);ser=r(Jht,"ViTForMaskedImageModeling"),Jht.forEach(t),ler=r(H9e," (ViT model)"),H9e.forEach(t),QK.forEach(t),ier=i(_a),KT=n(_a,"P",{});var U9e=s(KT);der=r(U9e,"The model is set in evaluation mode by default using "),Rpe=n(U9e,"CODE",{});var Yht=s(Rpe);cer=r(Yht,"model.eval()"),Yht.forEach(t),mer=r(U9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bpe=n(U9e,"CODE",{});var Kht=s(Bpe);fer=r(Kht,"model.train()"),Kht.forEach(t),U9e.forEach(t),ger=i(_a),T(ZT.$$.fragment,_a),_a.forEach(t),al.forEach(t),DIe=i(m),wd=n(m,"H2",{class:!0});var zNe=s(wd);eM=n(zNe,"A",{id:!0,class:!0,href:!0});var Zht=s(eM);Ppe=n(Zht,"SPAN",{});var eut=s(Ppe);T(m8.$$.fragment,eut),eut.forEach(t),Zht.forEach(t),her=i(zNe),Ipe=n(zNe,"SPAN",{});var out=s(Ipe);uer=r(out,"AutoModelForObjectDetection"),out.forEach(t),zNe.forEach(t),GIe=i(m),Wo=n(m,"DIV",{class:!0});var nl=s(Wo);T(f8.$$.fragment,nl),per=i(nl),Ad=n(nl,"P",{});var WK=s(Ad);_er=r(WK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),BX=n(WK,"A",{href:!0});var rut=s(BX);ber=r(rut,"from_pretrained()"),rut.forEach(t),Fer=r(WK," class method or the "),PX=n(WK,"A",{href:!0});var tut=s(PX);ver=r(tut,"from_config()"),tut.forEach(t),Ter=r(WK,` class
method.`),WK.forEach(t),Mer=i(nl),g8=n(nl,"P",{});var QNe=s(g8);Eer=r(QNe,"This class cannot be instantiated directly using "),qpe=n(QNe,"CODE",{});var aut=s(qpe);Cer=r(aut,"__init__()"),aut.forEach(t),wer=r(QNe," (throws an error)."),QNe.forEach(t),Aer=i(nl),Tt=n(nl,"DIV",{class:!0});var D6=s(Tt);T(h8.$$.fragment,D6),yer=i(D6),Npe=n(D6,"P",{});var nut=s(Npe);Ler=r(nut,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),nut.forEach(t),xer=i(D6),yd=n(D6,"P",{});var HK=s(yd);$er=r(HK,`Note:
Loading a model from its configuration file does `),jpe=n(HK,"STRONG",{});var sut=s(jpe);ker=r(sut,"not"),sut.forEach(t),Ser=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=n(HK,"A",{href:!0});var lut=s(IX);Rer=r(lut,"from_pretrained()"),lut.forEach(t),Ber=r(HK," to load the model weights."),HK.forEach(t),Per=i(D6),T(oM.$$.fragment,D6),D6.forEach(t),Ier=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(u8.$$.fragment,ba),qer=i(ba),Dpe=n(ba,"P",{});var iut=s(Dpe);Ner=r(iut,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),iut.forEach(t),jer=i(ba),Wa=n(ba,"P",{});var G6=s(Wa);Der=r(G6,"The model class to instantiate is selected based on the "),Gpe=n(G6,"CODE",{});var dut=s(Gpe);Ger=r(dut,"model_type"),dut.forEach(t),Oer=r(G6,` property of the config object (either
passed as an argument or loaded from `),Ope=n(G6,"CODE",{});var cut=s(Ope);Ver=r(cut,"pretrained_model_name_or_path"),cut.forEach(t),Xer=r(G6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vpe=n(G6,"CODE",{});var mut=s(Vpe);zer=r(mut,"pretrained_model_name_or_path"),mut.forEach(t),Qer=r(G6,":"),G6.forEach(t),Wer=i(ba),p8=n(ba,"UL",{});var WNe=s(p8);rM=n(WNe,"LI",{});var J9e=s(rM);Xpe=n(J9e,"STRONG",{});var fut=s(Xpe);Her=r(fut,"detr"),fut.forEach(t),Uer=r(J9e," \u2014 "),qX=n(J9e,"A",{href:!0});var gut=s(qX);Jer=r(gut,"DetrForObjectDetection"),gut.forEach(t),Yer=r(J9e," (DETR model)"),J9e.forEach(t),Ker=i(WNe),tM=n(WNe,"LI",{});var Y9e=s(tM);zpe=n(Y9e,"STRONG",{});var hut=s(zpe);Zer=r(hut,"yolos"),hut.forEach(t),eor=r(Y9e," \u2014 "),NX=n(Y9e,"A",{href:!0});var uut=s(NX);oor=r(uut,"YolosForObjectDetection"),uut.forEach(t),ror=r(Y9e," (YOLOS model)"),Y9e.forEach(t),WNe.forEach(t),tor=i(ba),aM=n(ba,"P",{});var K9e=s(aM);aor=r(K9e,"The model is set in evaluation mode by default using "),Qpe=n(K9e,"CODE",{});var put=s(Qpe);nor=r(put,"model.eval()"),put.forEach(t),sor=r(K9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wpe=n(K9e,"CODE",{});var _ut=s(Wpe);lor=r(_ut,"model.train()"),_ut.forEach(t),K9e.forEach(t),ior=i(ba),T(nM.$$.fragment,ba),ba.forEach(t),nl.forEach(t),OIe=i(m),Ld=n(m,"H2",{class:!0});var HNe=s(Ld);sM=n(HNe,"A",{id:!0,class:!0,href:!0});var but=s(sM);Hpe=n(but,"SPAN",{});var Fut=s(Hpe);T(_8.$$.fragment,Fut),Fut.forEach(t),but.forEach(t),dor=i(HNe),Upe=n(HNe,"SPAN",{});var vut=s(Upe);cor=r(vut,"AutoModelForImageSegmentation"),vut.forEach(t),HNe.forEach(t),VIe=i(m),Ho=n(m,"DIV",{class:!0});var sl=s(Ho);T(b8.$$.fragment,sl),mor=i(sl),xd=n(sl,"P",{});var UK=s(xd);gor=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),jX=n(UK,"A",{href:!0});var Tut=s(jX);hor=r(Tut,"from_pretrained()"),Tut.forEach(t),uor=r(UK," class method or the "),DX=n(UK,"A",{href:!0});var Mut=s(DX);por=r(Mut,"from_config()"),Mut.forEach(t),_or=r(UK,` class
method.`),UK.forEach(t),bor=i(sl),F8=n(sl,"P",{});var UNe=s(F8);For=r(UNe,"This class cannot be instantiated directly using "),Jpe=n(UNe,"CODE",{});var Eut=s(Jpe);vor=r(Eut,"__init__()"),Eut.forEach(t),Tor=r(UNe," (throws an error)."),UNe.forEach(t),Mor=i(sl),Mt=n(sl,"DIV",{class:!0});var O6=s(Mt);T(v8.$$.fragment,O6),Eor=i(O6),Ype=n(O6,"P",{});var Cut=s(Ype);Cor=r(Cut,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Cut.forEach(t),wor=i(O6),$d=n(O6,"P",{});var JK=s($d);Aor=r(JK,`Note:
Loading a model from its configuration file does `),Kpe=n(JK,"STRONG",{});var wut=s(Kpe);yor=r(wut,"not"),wut.forEach(t),Lor=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),GX=n(JK,"A",{href:!0});var Aut=s(GX);xor=r(Aut,"from_pretrained()"),Aut.forEach(t),$or=r(JK," to load the model weights."),JK.forEach(t),kor=i(O6),T(lM.$$.fragment,O6),O6.forEach(t),Sor=i(sl),uo=n(sl,"DIV",{class:!0});var Fa=s(uo);T(T8.$$.fragment,Fa),Ror=i(Fa),Zpe=n(Fa,"P",{});var yut=s(Zpe);Bor=r(yut,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),yut.forEach(t),Por=i(Fa),Ha=n(Fa,"P",{});var V6=s(Ha);Ior=r(V6,"The model class to instantiate is selected based on the "),e_e=n(V6,"CODE",{});var Lut=s(e_e);qor=r(Lut,"model_type"),Lut.forEach(t),Nor=r(V6,` property of the config object (either
passed as an argument or loaded from `),o_e=n(V6,"CODE",{});var xut=s(o_e);jor=r(xut,"pretrained_model_name_or_path"),xut.forEach(t),Dor=r(V6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r_e=n(V6,"CODE",{});var $ut=s(r_e);Gor=r($ut,"pretrained_model_name_or_path"),$ut.forEach(t),Oor=r(V6,":"),V6.forEach(t),Vor=i(Fa),t_e=n(Fa,"UL",{});var kut=s(t_e);iM=n(kut,"LI",{});var Z9e=s(iM);a_e=n(Z9e,"STRONG",{});var Sut=s(a_e);Xor=r(Sut,"detr"),Sut.forEach(t),zor=r(Z9e," \u2014 "),OX=n(Z9e,"A",{href:!0});var Rut=s(OX);Qor=r(Rut,"DetrForSegmentation"),Rut.forEach(t),Wor=r(Z9e," (DETR model)"),Z9e.forEach(t),kut.forEach(t),Hor=i(Fa),dM=n(Fa,"P",{});var e$e=s(dM);Uor=r(e$e,"The model is set in evaluation mode by default using "),n_e=n(e$e,"CODE",{});var But=s(n_e);Jor=r(But,"model.eval()"),But.forEach(t),Yor=r(e$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s_e=n(e$e,"CODE",{});var Put=s(s_e);Kor=r(Put,"model.train()"),Put.forEach(t),e$e.forEach(t),Zor=i(Fa),T(cM.$$.fragment,Fa),Fa.forEach(t),sl.forEach(t),XIe=i(m),kd=n(m,"H2",{class:!0});var JNe=s(kd);mM=n(JNe,"A",{id:!0,class:!0,href:!0});var Iut=s(mM);l_e=n(Iut,"SPAN",{});var qut=s(l_e);T(M8.$$.fragment,qut),qut.forEach(t),Iut.forEach(t),err=i(JNe),i_e=n(JNe,"SPAN",{});var Nut=s(i_e);orr=r(Nut,"AutoModelForSemanticSegmentation"),Nut.forEach(t),JNe.forEach(t),zIe=i(m),Uo=n(m,"DIV",{class:!0});var ll=s(Uo);T(E8.$$.fragment,ll),rrr=i(ll),Sd=n(ll,"P",{});var YK=s(Sd);trr=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),VX=n(YK,"A",{href:!0});var jut=s(VX);arr=r(jut,"from_pretrained()"),jut.forEach(t),nrr=r(YK," class method or the "),XX=n(YK,"A",{href:!0});var Dut=s(XX);srr=r(Dut,"from_config()"),Dut.forEach(t),lrr=r(YK,` class
method.`),YK.forEach(t),irr=i(ll),C8=n(ll,"P",{});var YNe=s(C8);drr=r(YNe,"This class cannot be instantiated directly using "),d_e=n(YNe,"CODE",{});var Gut=s(d_e);crr=r(Gut,"__init__()"),Gut.forEach(t),mrr=r(YNe," (throws an error)."),YNe.forEach(t),frr=i(ll),Et=n(ll,"DIV",{class:!0});var X6=s(Et);T(w8.$$.fragment,X6),grr=i(X6),c_e=n(X6,"P",{});var Out=s(c_e);hrr=r(Out,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Out.forEach(t),urr=i(X6),Rd=n(X6,"P",{});var KK=s(Rd);prr=r(KK,`Note:
Loading a model from its configuration file does `),m_e=n(KK,"STRONG",{});var Vut=s(m_e);_rr=r(Vut,"not"),Vut.forEach(t),brr=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=n(KK,"A",{href:!0});var Xut=s(zX);Frr=r(Xut,"from_pretrained()"),Xut.forEach(t),vrr=r(KK," to load the model weights."),KK.forEach(t),Trr=i(X6),T(fM.$$.fragment,X6),X6.forEach(t),Mrr=i(ll),po=n(ll,"DIV",{class:!0});var va=s(po);T(A8.$$.fragment,va),Err=i(va),f_e=n(va,"P",{});var zut=s(f_e);Crr=r(zut,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),zut.forEach(t),wrr=i(va),Ua=n(va,"P",{});var z6=s(Ua);Arr=r(z6,"The model class to instantiate is selected based on the "),g_e=n(z6,"CODE",{});var Qut=s(g_e);yrr=r(Qut,"model_type"),Qut.forEach(t),Lrr=r(z6,` property of the config object (either
passed as an argument or loaded from `),h_e=n(z6,"CODE",{});var Wut=s(h_e);xrr=r(Wut,"pretrained_model_name_or_path"),Wut.forEach(t),$rr=r(z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u_e=n(z6,"CODE",{});var Hut=s(u_e);krr=r(Hut,"pretrained_model_name_or_path"),Hut.forEach(t),Srr=r(z6,":"),z6.forEach(t),Rrr=i(va),Ja=n(va,"UL",{});var Q6=s(Ja);gM=n(Q6,"LI",{});var o$e=s(gM);p_e=n(o$e,"STRONG",{});var Uut=s(p_e);Brr=r(Uut,"beit"),Uut.forEach(t),Prr=r(o$e," \u2014 "),QX=n(o$e,"A",{href:!0});var Jut=s(QX);Irr=r(Jut,"BeitForSemanticSegmentation"),Jut.forEach(t),qrr=r(o$e," (BEiT model)"),o$e.forEach(t),Nrr=i(Q6),hM=n(Q6,"LI",{});var r$e=s(hM);__e=n(r$e,"STRONG",{});var Yut=s(__e);jrr=r(Yut,"data2vec-vision"),Yut.forEach(t),Drr=r(r$e," \u2014 "),WX=n(r$e,"A",{href:!0});var Kut=s(WX);Grr=r(Kut,"Data2VecVisionForSemanticSegmentation"),Kut.forEach(t),Orr=r(r$e," (Data2VecVision model)"),r$e.forEach(t),Vrr=i(Q6),uM=n(Q6,"LI",{});var t$e=s(uM);b_e=n(t$e,"STRONG",{});var Zut=s(b_e);Xrr=r(Zut,"dpt"),Zut.forEach(t),zrr=r(t$e," \u2014 "),HX=n(t$e,"A",{href:!0});var ept=s(HX);Qrr=r(ept,"DPTForSemanticSegmentation"),ept.forEach(t),Wrr=r(t$e," (DPT model)"),t$e.forEach(t),Hrr=i(Q6),pM=n(Q6,"LI",{});var a$e=s(pM);F_e=n(a$e,"STRONG",{});var opt=s(F_e);Urr=r(opt,"segformer"),opt.forEach(t),Jrr=r(a$e," \u2014 "),UX=n(a$e,"A",{href:!0});var rpt=s(UX);Yrr=r(rpt,"SegformerForSemanticSegmentation"),rpt.forEach(t),Krr=r(a$e," (SegFormer model)"),a$e.forEach(t),Q6.forEach(t),Zrr=i(va),_M=n(va,"P",{});var n$e=s(_M);etr=r(n$e,"The model is set in evaluation mode by default using "),v_e=n(n$e,"CODE",{});var tpt=s(v_e);otr=r(tpt,"model.eval()"),tpt.forEach(t),rtr=r(n$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T_e=n(n$e,"CODE",{});var apt=s(T_e);ttr=r(apt,"model.train()"),apt.forEach(t),n$e.forEach(t),atr=i(va),T(bM.$$.fragment,va),va.forEach(t),ll.forEach(t),QIe=i(m),Bd=n(m,"H2",{class:!0});var KNe=s(Bd);FM=n(KNe,"A",{id:!0,class:!0,href:!0});var npt=s(FM);M_e=n(npt,"SPAN",{});var spt=s(M_e);T(y8.$$.fragment,spt),spt.forEach(t),npt.forEach(t),ntr=i(KNe),E_e=n(KNe,"SPAN",{});var lpt=s(E_e);str=r(lpt,"AutoModelForInstanceSegmentation"),lpt.forEach(t),KNe.forEach(t),WIe=i(m),Jo=n(m,"DIV",{class:!0});var il=s(Jo);T(L8.$$.fragment,il),ltr=i(il),Pd=n(il,"P",{});var ZK=s(Pd);itr=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),JX=n(ZK,"A",{href:!0});var ipt=s(JX);dtr=r(ipt,"from_pretrained()"),ipt.forEach(t),ctr=r(ZK," class method or the "),YX=n(ZK,"A",{href:!0});var dpt=s(YX);mtr=r(dpt,"from_config()"),dpt.forEach(t),ftr=r(ZK,` class
method.`),ZK.forEach(t),gtr=i(il),x8=n(il,"P",{});var ZNe=s(x8);htr=r(ZNe,"This class cannot be instantiated directly using "),C_e=n(ZNe,"CODE",{});var cpt=s(C_e);utr=r(cpt,"__init__()"),cpt.forEach(t),ptr=r(ZNe," (throws an error)."),ZNe.forEach(t),_tr=i(il),Ct=n(il,"DIV",{class:!0});var W6=s(Ct);T($8.$$.fragment,W6),btr=i(W6),w_e=n(W6,"P",{});var mpt=s(w_e);Ftr=r(mpt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),mpt.forEach(t),vtr=i(W6),Id=n(W6,"P",{});var eZ=s(Id);Ttr=r(eZ,`Note:
Loading a model from its configuration file does `),A_e=n(eZ,"STRONG",{});var fpt=s(A_e);Mtr=r(fpt,"not"),fpt.forEach(t),Etr=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KX=n(eZ,"A",{href:!0});var gpt=s(KX);Ctr=r(gpt,"from_pretrained()"),gpt.forEach(t),wtr=r(eZ," to load the model weights."),eZ.forEach(t),Atr=i(W6),T(vM.$$.fragment,W6),W6.forEach(t),ytr=i(il),_o=n(il,"DIV",{class:!0});var Ta=s(_o);T(k8.$$.fragment,Ta),Ltr=i(Ta),y_e=n(Ta,"P",{});var hpt=s(y_e);xtr=r(hpt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),hpt.forEach(t),$tr=i(Ta),Ya=n(Ta,"P",{});var H6=s(Ya);ktr=r(H6,"The model class to instantiate is selected based on the "),L_e=n(H6,"CODE",{});var upt=s(L_e);Str=r(upt,"model_type"),upt.forEach(t),Rtr=r(H6,` property of the config object (either
passed as an argument or loaded from `),x_e=n(H6,"CODE",{});var ppt=s(x_e);Btr=r(ppt,"pretrained_model_name_or_path"),ppt.forEach(t),Ptr=r(H6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$_e=n(H6,"CODE",{});var _pt=s($_e);Itr=r(_pt,"pretrained_model_name_or_path"),_pt.forEach(t),qtr=r(H6,":"),H6.forEach(t),Ntr=i(Ta),k_e=n(Ta,"UL",{});var bpt=s(k_e);TM=n(bpt,"LI",{});var s$e=s(TM);S_e=n(s$e,"STRONG",{});var Fpt=s(S_e);jtr=r(Fpt,"maskformer"),Fpt.forEach(t),Dtr=r(s$e," \u2014 "),ZX=n(s$e,"A",{href:!0});var vpt=s(ZX);Gtr=r(vpt,"MaskFormerForInstanceSegmentation"),vpt.forEach(t),Otr=r(s$e," (MaskFormer model)"),s$e.forEach(t),bpt.forEach(t),Vtr=i(Ta),MM=n(Ta,"P",{});var l$e=s(MM);Xtr=r(l$e,"The model is set in evaluation mode by default using "),R_e=n(l$e,"CODE",{});var Tpt=s(R_e);ztr=r(Tpt,"model.eval()"),Tpt.forEach(t),Qtr=r(l$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B_e=n(l$e,"CODE",{});var Mpt=s(B_e);Wtr=r(Mpt,"model.train()"),Mpt.forEach(t),l$e.forEach(t),Htr=i(Ta),T(EM.$$.fragment,Ta),Ta.forEach(t),il.forEach(t),HIe=i(m),qd=n(m,"H2",{class:!0});var eje=s(qd);CM=n(eje,"A",{id:!0,class:!0,href:!0});var Ept=s(CM);P_e=n(Ept,"SPAN",{});var Cpt=s(P_e);T(S8.$$.fragment,Cpt),Cpt.forEach(t),Ept.forEach(t),Utr=i(eje),I_e=n(eje,"SPAN",{});var wpt=s(I_e);Jtr=r(wpt,"TFAutoModel"),wpt.forEach(t),eje.forEach(t),UIe=i(m),Yo=n(m,"DIV",{class:!0});var dl=s(Yo);T(R8.$$.fragment,dl),Ytr=i(dl),Nd=n(dl,"P",{});var oZ=s(Nd);Ktr=r(oZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ez=n(oZ,"A",{href:!0});var Apt=s(ez);Ztr=r(Apt,"from_pretrained()"),Apt.forEach(t),ear=r(oZ," class method or the "),oz=n(oZ,"A",{href:!0});var ypt=s(oz);oar=r(ypt,"from_config()"),ypt.forEach(t),rar=r(oZ,` class
method.`),oZ.forEach(t),tar=i(dl),B8=n(dl,"P",{});var oje=s(B8);aar=r(oje,"This class cannot be instantiated directly using "),q_e=n(oje,"CODE",{});var Lpt=s(q_e);nar=r(Lpt,"__init__()"),Lpt.forEach(t),sar=r(oje," (throws an error)."),oje.forEach(t),lar=i(dl),wt=n(dl,"DIV",{class:!0});var U6=s(wt);T(P8.$$.fragment,U6),iar=i(U6),N_e=n(U6,"P",{});var xpt=s(N_e);dar=r(xpt,"Instantiates one of the base model classes of the library from a configuration."),xpt.forEach(t),car=i(U6),jd=n(U6,"P",{});var rZ=s(jd);mar=r(rZ,`Note:
Loading a model from its configuration file does `),j_e=n(rZ,"STRONG",{});var $pt=s(j_e);far=r($pt,"not"),$pt.forEach(t),gar=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=n(rZ,"A",{href:!0});var kpt=s(rz);har=r(kpt,"from_pretrained()"),kpt.forEach(t),uar=r(rZ," to load the model weights."),rZ.forEach(t),par=i(U6),T(wM.$$.fragment,U6),U6.forEach(t),_ar=i(dl),wr=n(dl,"DIV",{class:!0});var cl=s(wr);T(I8.$$.fragment,cl),bar=i(cl),D_e=n(cl,"P",{});var Spt=s(D_e);Far=r(Spt,"Instantiate one of the base model classes of the library from a pretrained model."),Spt.forEach(t),Tar=i(cl),Ka=n(cl,"P",{});var J6=s(Ka);Mar=r(J6,"The model class to instantiate is selected based on the "),G_e=n(J6,"CODE",{});var Rpt=s(G_e);Ear=r(Rpt,"model_type"),Rpt.forEach(t),Car=r(J6,` property of the config object (either
passed as an argument or loaded from `),O_e=n(J6,"CODE",{});var Bpt=s(O_e);war=r(Bpt,"pretrained_model_name_or_path"),Bpt.forEach(t),Aar=r(J6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=n(J6,"CODE",{});var Ppt=s(V_e);yar=r(Ppt,"pretrained_model_name_or_path"),Ppt.forEach(t),Lar=r(J6,":"),J6.forEach(t),xar=i(cl),j=n(cl,"UL",{});var D=s(j);AM=n(D,"LI",{});var i$e=s(AM);X_e=n(i$e,"STRONG",{});var Ipt=s(X_e);$ar=r(Ipt,"albert"),Ipt.forEach(t),kar=r(i$e," \u2014 "),tz=n(i$e,"A",{href:!0});var qpt=s(tz);Sar=r(qpt,"TFAlbertModel"),qpt.forEach(t),Rar=r(i$e," (ALBERT model)"),i$e.forEach(t),Bar=i(D),yM=n(D,"LI",{});var d$e=s(yM);z_e=n(d$e,"STRONG",{});var Npt=s(z_e);Par=r(Npt,"bart"),Npt.forEach(t),Iar=r(d$e," \u2014 "),az=n(d$e,"A",{href:!0});var jpt=s(az);qar=r(jpt,"TFBartModel"),jpt.forEach(t),Nar=r(d$e," (BART model)"),d$e.forEach(t),jar=i(D),LM=n(D,"LI",{});var c$e=s(LM);Q_e=n(c$e,"STRONG",{});var Dpt=s(Q_e);Dar=r(Dpt,"bert"),Dpt.forEach(t),Gar=r(c$e," \u2014 "),nz=n(c$e,"A",{href:!0});var Gpt=s(nz);Oar=r(Gpt,"TFBertModel"),Gpt.forEach(t),Var=r(c$e," (BERT model)"),c$e.forEach(t),Xar=i(D),xM=n(D,"LI",{});var m$e=s(xM);W_e=n(m$e,"STRONG",{});var Opt=s(W_e);zar=r(Opt,"blenderbot"),Opt.forEach(t),Qar=r(m$e," \u2014 "),sz=n(m$e,"A",{href:!0});var Vpt=s(sz);War=r(Vpt,"TFBlenderbotModel"),Vpt.forEach(t),Har=r(m$e," (Blenderbot model)"),m$e.forEach(t),Uar=i(D),$M=n(D,"LI",{});var f$e=s($M);H_e=n(f$e,"STRONG",{});var Xpt=s(H_e);Jar=r(Xpt,"blenderbot-small"),Xpt.forEach(t),Yar=r(f$e," \u2014 "),lz=n(f$e,"A",{href:!0});var zpt=s(lz);Kar=r(zpt,"TFBlenderbotSmallModel"),zpt.forEach(t),Zar=r(f$e," (BlenderbotSmall model)"),f$e.forEach(t),enr=i(D),kM=n(D,"LI",{});var g$e=s(kM);U_e=n(g$e,"STRONG",{});var Qpt=s(U_e);onr=r(Qpt,"camembert"),Qpt.forEach(t),rnr=r(g$e," \u2014 "),iz=n(g$e,"A",{href:!0});var Wpt=s(iz);tnr=r(Wpt,"TFCamembertModel"),Wpt.forEach(t),anr=r(g$e," (CamemBERT model)"),g$e.forEach(t),nnr=i(D),SM=n(D,"LI",{});var h$e=s(SM);J_e=n(h$e,"STRONG",{});var Hpt=s(J_e);snr=r(Hpt,"clip"),Hpt.forEach(t),lnr=r(h$e," \u2014 "),dz=n(h$e,"A",{href:!0});var Upt=s(dz);inr=r(Upt,"TFCLIPModel"),Upt.forEach(t),dnr=r(h$e," (CLIP model)"),h$e.forEach(t),cnr=i(D),RM=n(D,"LI",{});var u$e=s(RM);Y_e=n(u$e,"STRONG",{});var Jpt=s(Y_e);mnr=r(Jpt,"convbert"),Jpt.forEach(t),fnr=r(u$e," \u2014 "),cz=n(u$e,"A",{href:!0});var Ypt=s(cz);gnr=r(Ypt,"TFConvBertModel"),Ypt.forEach(t),hnr=r(u$e," (ConvBERT model)"),u$e.forEach(t),unr=i(D),BM=n(D,"LI",{});var p$e=s(BM);K_e=n(p$e,"STRONG",{});var Kpt=s(K_e);pnr=r(Kpt,"convnext"),Kpt.forEach(t),_nr=r(p$e," \u2014 "),mz=n(p$e,"A",{href:!0});var Zpt=s(mz);bnr=r(Zpt,"TFConvNextModel"),Zpt.forEach(t),Fnr=r(p$e," (ConvNext model)"),p$e.forEach(t),vnr=i(D),PM=n(D,"LI",{});var _$e=s(PM);Z_e=n(_$e,"STRONG",{});var e_t=s(Z_e);Tnr=r(e_t,"ctrl"),e_t.forEach(t),Mnr=r(_$e," \u2014 "),fz=n(_$e,"A",{href:!0});var o_t=s(fz);Enr=r(o_t,"TFCTRLModel"),o_t.forEach(t),Cnr=r(_$e," (CTRL model)"),_$e.forEach(t),wnr=i(D),IM=n(D,"LI",{});var b$e=s(IM);ebe=n(b$e,"STRONG",{});var r_t=s(ebe);Anr=r(r_t,"data2vec-vision"),r_t.forEach(t),ynr=r(b$e," \u2014 "),gz=n(b$e,"A",{href:!0});var t_t=s(gz);Lnr=r(t_t,"TFData2VecVisionModel"),t_t.forEach(t),xnr=r(b$e," (Data2VecVision model)"),b$e.forEach(t),$nr=i(D),qM=n(D,"LI",{});var F$e=s(qM);obe=n(F$e,"STRONG",{});var a_t=s(obe);knr=r(a_t,"deberta"),a_t.forEach(t),Snr=r(F$e," \u2014 "),hz=n(F$e,"A",{href:!0});var n_t=s(hz);Rnr=r(n_t,"TFDebertaModel"),n_t.forEach(t),Bnr=r(F$e," (DeBERTa model)"),F$e.forEach(t),Pnr=i(D),NM=n(D,"LI",{});var v$e=s(NM);rbe=n(v$e,"STRONG",{});var s_t=s(rbe);Inr=r(s_t,"deberta-v2"),s_t.forEach(t),qnr=r(v$e," \u2014 "),uz=n(v$e,"A",{href:!0});var l_t=s(uz);Nnr=r(l_t,"TFDebertaV2Model"),l_t.forEach(t),jnr=r(v$e," (DeBERTa-v2 model)"),v$e.forEach(t),Dnr=i(D),jM=n(D,"LI",{});var T$e=s(jM);tbe=n(T$e,"STRONG",{});var i_t=s(tbe);Gnr=r(i_t,"distilbert"),i_t.forEach(t),Onr=r(T$e," \u2014 "),pz=n(T$e,"A",{href:!0});var d_t=s(pz);Vnr=r(d_t,"TFDistilBertModel"),d_t.forEach(t),Xnr=r(T$e," (DistilBERT model)"),T$e.forEach(t),znr=i(D),DM=n(D,"LI",{});var M$e=s(DM);abe=n(M$e,"STRONG",{});var c_t=s(abe);Qnr=r(c_t,"dpr"),c_t.forEach(t),Wnr=r(M$e," \u2014 "),_z=n(M$e,"A",{href:!0});var m_t=s(_z);Hnr=r(m_t,"TFDPRQuestionEncoder"),m_t.forEach(t),Unr=r(M$e," (DPR model)"),M$e.forEach(t),Jnr=i(D),GM=n(D,"LI",{});var E$e=s(GM);nbe=n(E$e,"STRONG",{});var f_t=s(nbe);Ynr=r(f_t,"electra"),f_t.forEach(t),Knr=r(E$e," \u2014 "),bz=n(E$e,"A",{href:!0});var g_t=s(bz);Znr=r(g_t,"TFElectraModel"),g_t.forEach(t),esr=r(E$e," (ELECTRA model)"),E$e.forEach(t),osr=i(D),OM=n(D,"LI",{});var C$e=s(OM);sbe=n(C$e,"STRONG",{});var h_t=s(sbe);rsr=r(h_t,"flaubert"),h_t.forEach(t),tsr=r(C$e," \u2014 "),Fz=n(C$e,"A",{href:!0});var u_t=s(Fz);asr=r(u_t,"TFFlaubertModel"),u_t.forEach(t),nsr=r(C$e," (FlauBERT model)"),C$e.forEach(t),ssr=i(D),Bs=n(D,"LI",{});var g$=s(Bs);lbe=n(g$,"STRONG",{});var p_t=s(lbe);lsr=r(p_t,"funnel"),p_t.forEach(t),isr=r(g$," \u2014 "),vz=n(g$,"A",{href:!0});var __t=s(vz);dsr=r(__t,"TFFunnelModel"),__t.forEach(t),csr=r(g$," or "),Tz=n(g$,"A",{href:!0});var b_t=s(Tz);msr=r(b_t,"TFFunnelBaseModel"),b_t.forEach(t),fsr=r(g$," (Funnel Transformer model)"),g$.forEach(t),gsr=i(D),VM=n(D,"LI",{});var w$e=s(VM);ibe=n(w$e,"STRONG",{});var F_t=s(ibe);hsr=r(F_t,"gpt2"),F_t.forEach(t),usr=r(w$e," \u2014 "),Mz=n(w$e,"A",{href:!0});var v_t=s(Mz);psr=r(v_t,"TFGPT2Model"),v_t.forEach(t),_sr=r(w$e," (OpenAI GPT-2 model)"),w$e.forEach(t),bsr=i(D),XM=n(D,"LI",{});var A$e=s(XM);dbe=n(A$e,"STRONG",{});var T_t=s(dbe);Fsr=r(T_t,"gptj"),T_t.forEach(t),vsr=r(A$e," \u2014 "),Ez=n(A$e,"A",{href:!0});var M_t=s(Ez);Tsr=r(M_t,"TFGPTJModel"),M_t.forEach(t),Msr=r(A$e," (GPT-J model)"),A$e.forEach(t),Esr=i(D),zM=n(D,"LI",{});var y$e=s(zM);cbe=n(y$e,"STRONG",{});var E_t=s(cbe);Csr=r(E_t,"hubert"),E_t.forEach(t),wsr=r(y$e," \u2014 "),Cz=n(y$e,"A",{href:!0});var C_t=s(Cz);Asr=r(C_t,"TFHubertModel"),C_t.forEach(t),ysr=r(y$e," (Hubert model)"),y$e.forEach(t),Lsr=i(D),QM=n(D,"LI",{});var L$e=s(QM);mbe=n(L$e,"STRONG",{});var w_t=s(mbe);xsr=r(w_t,"layoutlm"),w_t.forEach(t),$sr=r(L$e," \u2014 "),wz=n(L$e,"A",{href:!0});var A_t=s(wz);ksr=r(A_t,"TFLayoutLMModel"),A_t.forEach(t),Ssr=r(L$e," (LayoutLM model)"),L$e.forEach(t),Rsr=i(D),WM=n(D,"LI",{});var x$e=s(WM);fbe=n(x$e,"STRONG",{});var y_t=s(fbe);Bsr=r(y_t,"led"),y_t.forEach(t),Psr=r(x$e," \u2014 "),Az=n(x$e,"A",{href:!0});var L_t=s(Az);Isr=r(L_t,"TFLEDModel"),L_t.forEach(t),qsr=r(x$e," (LED model)"),x$e.forEach(t),Nsr=i(D),HM=n(D,"LI",{});var $$e=s(HM);gbe=n($$e,"STRONG",{});var x_t=s(gbe);jsr=r(x_t,"longformer"),x_t.forEach(t),Dsr=r($$e," \u2014 "),yz=n($$e,"A",{href:!0});var $_t=s(yz);Gsr=r($_t,"TFLongformerModel"),$_t.forEach(t),Osr=r($$e," (Longformer model)"),$$e.forEach(t),Vsr=i(D),UM=n(D,"LI",{});var k$e=s(UM);hbe=n(k$e,"STRONG",{});var k_t=s(hbe);Xsr=r(k_t,"lxmert"),k_t.forEach(t),zsr=r(k$e," \u2014 "),Lz=n(k$e,"A",{href:!0});var S_t=s(Lz);Qsr=r(S_t,"TFLxmertModel"),S_t.forEach(t),Wsr=r(k$e," (LXMERT model)"),k$e.forEach(t),Hsr=i(D),JM=n(D,"LI",{});var S$e=s(JM);ube=n(S$e,"STRONG",{});var R_t=s(ube);Usr=r(R_t,"marian"),R_t.forEach(t),Jsr=r(S$e," \u2014 "),xz=n(S$e,"A",{href:!0});var B_t=s(xz);Ysr=r(B_t,"TFMarianModel"),B_t.forEach(t),Ksr=r(S$e," (Marian model)"),S$e.forEach(t),Zsr=i(D),YM=n(D,"LI",{});var R$e=s(YM);pbe=n(R$e,"STRONG",{});var P_t=s(pbe);elr=r(P_t,"mbart"),P_t.forEach(t),olr=r(R$e," \u2014 "),$z=n(R$e,"A",{href:!0});var I_t=s($z);rlr=r(I_t,"TFMBartModel"),I_t.forEach(t),tlr=r(R$e," (mBART model)"),R$e.forEach(t),alr=i(D),KM=n(D,"LI",{});var B$e=s(KM);_be=n(B$e,"STRONG",{});var q_t=s(_be);nlr=r(q_t,"mobilebert"),q_t.forEach(t),slr=r(B$e," \u2014 "),kz=n(B$e,"A",{href:!0});var N_t=s(kz);llr=r(N_t,"TFMobileBertModel"),N_t.forEach(t),ilr=r(B$e," (MobileBERT model)"),B$e.forEach(t),dlr=i(D),ZM=n(D,"LI",{});var P$e=s(ZM);bbe=n(P$e,"STRONG",{});var j_t=s(bbe);clr=r(j_t,"mpnet"),j_t.forEach(t),mlr=r(P$e," \u2014 "),Sz=n(P$e,"A",{href:!0});var D_t=s(Sz);flr=r(D_t,"TFMPNetModel"),D_t.forEach(t),glr=r(P$e," (MPNet model)"),P$e.forEach(t),hlr=i(D),e4=n(D,"LI",{});var I$e=s(e4);Fbe=n(I$e,"STRONG",{});var G_t=s(Fbe);ulr=r(G_t,"mt5"),G_t.forEach(t),plr=r(I$e," \u2014 "),Rz=n(I$e,"A",{href:!0});var O_t=s(Rz);_lr=r(O_t,"TFMT5Model"),O_t.forEach(t),blr=r(I$e," (mT5 model)"),I$e.forEach(t),Flr=i(D),o4=n(D,"LI",{});var q$e=s(o4);vbe=n(q$e,"STRONG",{});var V_t=s(vbe);vlr=r(V_t,"openai-gpt"),V_t.forEach(t),Tlr=r(q$e," \u2014 "),Bz=n(q$e,"A",{href:!0});var X_t=s(Bz);Mlr=r(X_t,"TFOpenAIGPTModel"),X_t.forEach(t),Elr=r(q$e," (OpenAI GPT model)"),q$e.forEach(t),Clr=i(D),r4=n(D,"LI",{});var N$e=s(r4);Tbe=n(N$e,"STRONG",{});var z_t=s(Tbe);wlr=r(z_t,"pegasus"),z_t.forEach(t),Alr=r(N$e," \u2014 "),Pz=n(N$e,"A",{href:!0});var Q_t=s(Pz);ylr=r(Q_t,"TFPegasusModel"),Q_t.forEach(t),Llr=r(N$e," (Pegasus model)"),N$e.forEach(t),xlr=i(D),t4=n(D,"LI",{});var j$e=s(t4);Mbe=n(j$e,"STRONG",{});var W_t=s(Mbe);$lr=r(W_t,"rembert"),W_t.forEach(t),klr=r(j$e," \u2014 "),Iz=n(j$e,"A",{href:!0});var H_t=s(Iz);Slr=r(H_t,"TFRemBertModel"),H_t.forEach(t),Rlr=r(j$e," (RemBERT model)"),j$e.forEach(t),Blr=i(D),a4=n(D,"LI",{});var D$e=s(a4);Ebe=n(D$e,"STRONG",{});var U_t=s(Ebe);Plr=r(U_t,"roberta"),U_t.forEach(t),Ilr=r(D$e," \u2014 "),qz=n(D$e,"A",{href:!0});var J_t=s(qz);qlr=r(J_t,"TFRobertaModel"),J_t.forEach(t),Nlr=r(D$e," (RoBERTa model)"),D$e.forEach(t),jlr=i(D),n4=n(D,"LI",{});var G$e=s(n4);Cbe=n(G$e,"STRONG",{});var Y_t=s(Cbe);Dlr=r(Y_t,"roformer"),Y_t.forEach(t),Glr=r(G$e," \u2014 "),Nz=n(G$e,"A",{href:!0});var K_t=s(Nz);Olr=r(K_t,"TFRoFormerModel"),K_t.forEach(t),Vlr=r(G$e," (RoFormer model)"),G$e.forEach(t),Xlr=i(D),s4=n(D,"LI",{});var O$e=s(s4);wbe=n(O$e,"STRONG",{});var Z_t=s(wbe);zlr=r(Z_t,"speech_to_text"),Z_t.forEach(t),Qlr=r(O$e," \u2014 "),jz=n(O$e,"A",{href:!0});var ebt=s(jz);Wlr=r(ebt,"TFSpeech2TextModel"),ebt.forEach(t),Hlr=r(O$e," (Speech2Text model)"),O$e.forEach(t),Ulr=i(D),l4=n(D,"LI",{});var V$e=s(l4);Abe=n(V$e,"STRONG",{});var obt=s(Abe);Jlr=r(obt,"t5"),obt.forEach(t),Ylr=r(V$e," \u2014 "),Dz=n(V$e,"A",{href:!0});var rbt=s(Dz);Klr=r(rbt,"TFT5Model"),rbt.forEach(t),Zlr=r(V$e," (T5 model)"),V$e.forEach(t),eir=i(D),i4=n(D,"LI",{});var X$e=s(i4);ybe=n(X$e,"STRONG",{});var tbt=s(ybe);oir=r(tbt,"tapas"),tbt.forEach(t),rir=r(X$e," \u2014 "),Gz=n(X$e,"A",{href:!0});var abt=s(Gz);tir=r(abt,"TFTapasModel"),abt.forEach(t),air=r(X$e," (TAPAS model)"),X$e.forEach(t),nir=i(D),d4=n(D,"LI",{});var z$e=s(d4);Lbe=n(z$e,"STRONG",{});var nbt=s(Lbe);sir=r(nbt,"transfo-xl"),nbt.forEach(t),lir=r(z$e," \u2014 "),Oz=n(z$e,"A",{href:!0});var sbt=s(Oz);iir=r(sbt,"TFTransfoXLModel"),sbt.forEach(t),dir=r(z$e," (Transformer-XL model)"),z$e.forEach(t),cir=i(D),c4=n(D,"LI",{});var Q$e=s(c4);xbe=n(Q$e,"STRONG",{});var lbt=s(xbe);mir=r(lbt,"vit"),lbt.forEach(t),fir=r(Q$e," \u2014 "),Vz=n(Q$e,"A",{href:!0});var ibt=s(Vz);gir=r(ibt,"TFViTModel"),ibt.forEach(t),hir=r(Q$e," (ViT model)"),Q$e.forEach(t),uir=i(D),m4=n(D,"LI",{});var W$e=s(m4);$be=n(W$e,"STRONG",{});var dbt=s($be);pir=r(dbt,"vit_mae"),dbt.forEach(t),_ir=r(W$e," \u2014 "),Xz=n(W$e,"A",{href:!0});var cbt=s(Xz);bir=r(cbt,"TFViTMAEModel"),cbt.forEach(t),Fir=r(W$e," (ViTMAE model)"),W$e.forEach(t),vir=i(D),f4=n(D,"LI",{});var H$e=s(f4);kbe=n(H$e,"STRONG",{});var mbt=s(kbe);Tir=r(mbt,"wav2vec2"),mbt.forEach(t),Mir=r(H$e," \u2014 "),zz=n(H$e,"A",{href:!0});var fbt=s(zz);Eir=r(fbt,"TFWav2Vec2Model"),fbt.forEach(t),Cir=r(H$e," (Wav2Vec2 model)"),H$e.forEach(t),wir=i(D),g4=n(D,"LI",{});var U$e=s(g4);Sbe=n(U$e,"STRONG",{});var gbt=s(Sbe);Air=r(gbt,"xlm"),gbt.forEach(t),yir=r(U$e," \u2014 "),Qz=n(U$e,"A",{href:!0});var hbt=s(Qz);Lir=r(hbt,"TFXLMModel"),hbt.forEach(t),xir=r(U$e," (XLM model)"),U$e.forEach(t),$ir=i(D),h4=n(D,"LI",{});var J$e=s(h4);Rbe=n(J$e,"STRONG",{});var ubt=s(Rbe);kir=r(ubt,"xlm-roberta"),ubt.forEach(t),Sir=r(J$e," \u2014 "),Wz=n(J$e,"A",{href:!0});var pbt=s(Wz);Rir=r(pbt,"TFXLMRobertaModel"),pbt.forEach(t),Bir=r(J$e," (XLM-RoBERTa model)"),J$e.forEach(t),Pir=i(D),u4=n(D,"LI",{});var Y$e=s(u4);Bbe=n(Y$e,"STRONG",{});var _bt=s(Bbe);Iir=r(_bt,"xlnet"),_bt.forEach(t),qir=r(Y$e," \u2014 "),Hz=n(Y$e,"A",{href:!0});var bbt=s(Hz);Nir=r(bbt,"TFXLNetModel"),bbt.forEach(t),jir=r(Y$e," (XLNet model)"),Y$e.forEach(t),D.forEach(t),Dir=i(cl),T(p4.$$.fragment,cl),cl.forEach(t),dl.forEach(t),JIe=i(m),Dd=n(m,"H2",{class:!0});var rje=s(Dd);_4=n(rje,"A",{id:!0,class:!0,href:!0});var Fbt=s(_4);Pbe=n(Fbt,"SPAN",{});var vbt=s(Pbe);T(q8.$$.fragment,vbt),vbt.forEach(t),Fbt.forEach(t),Gir=i(rje),Ibe=n(rje,"SPAN",{});var Tbt=s(Ibe);Oir=r(Tbt,"TFAutoModelForPreTraining"),Tbt.forEach(t),rje.forEach(t),YIe=i(m),Ko=n(m,"DIV",{class:!0});var ml=s(Ko);T(N8.$$.fragment,ml),Vir=i(ml),Gd=n(ml,"P",{});var tZ=s(Gd);Xir=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Uz=n(tZ,"A",{href:!0});var Mbt=s(Uz);zir=r(Mbt,"from_pretrained()"),Mbt.forEach(t),Qir=r(tZ," class method or the "),Jz=n(tZ,"A",{href:!0});var Ebt=s(Jz);Wir=r(Ebt,"from_config()"),Ebt.forEach(t),Hir=r(tZ,` class
method.`),tZ.forEach(t),Uir=i(ml),j8=n(ml,"P",{});var tje=s(j8);Jir=r(tje,"This class cannot be instantiated directly using "),qbe=n(tje,"CODE",{});var Cbt=s(qbe);Yir=r(Cbt,"__init__()"),Cbt.forEach(t),Kir=r(tje," (throws an error)."),tje.forEach(t),Zir=i(ml),At=n(ml,"DIV",{class:!0});var Y6=s(At);T(D8.$$.fragment,Y6),edr=i(Y6),Nbe=n(Y6,"P",{});var wbt=s(Nbe);odr=r(wbt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wbt.forEach(t),rdr=i(Y6),Od=n(Y6,"P",{});var aZ=s(Od);tdr=r(aZ,`Note:
Loading a model from its configuration file does `),jbe=n(aZ,"STRONG",{});var Abt=s(jbe);adr=r(Abt,"not"),Abt.forEach(t),ndr=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yz=n(aZ,"A",{href:!0});var ybt=s(Yz);sdr=r(ybt,"from_pretrained()"),ybt.forEach(t),ldr=r(aZ," to load the model weights."),aZ.forEach(t),idr=i(Y6),T(b4.$$.fragment,Y6),Y6.forEach(t),ddr=i(ml),Ar=n(ml,"DIV",{class:!0});var fl=s(Ar);T(G8.$$.fragment,fl),cdr=i(fl),Dbe=n(fl,"P",{});var Lbt=s(Dbe);mdr=r(Lbt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Lbt.forEach(t),fdr=i(fl),Za=n(fl,"P",{});var K6=s(Za);gdr=r(K6,"The model class to instantiate is selected based on the "),Gbe=n(K6,"CODE",{});var xbt=s(Gbe);hdr=r(xbt,"model_type"),xbt.forEach(t),udr=r(K6,` property of the config object (either
passed as an argument or loaded from `),Obe=n(K6,"CODE",{});var $bt=s(Obe);pdr=r($bt,"pretrained_model_name_or_path"),$bt.forEach(t),_dr=r(K6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vbe=n(K6,"CODE",{});var kbt=s(Vbe);bdr=r(kbt,"pretrained_model_name_or_path"),kbt.forEach(t),Fdr=r(K6,":"),K6.forEach(t),vdr=i(fl),se=n(fl,"UL",{});var le=s(se);F4=n(le,"LI",{});var K$e=s(F4);Xbe=n(K$e,"STRONG",{});var Sbt=s(Xbe);Tdr=r(Sbt,"albert"),Sbt.forEach(t),Mdr=r(K$e," \u2014 "),Kz=n(K$e,"A",{href:!0});var Rbt=s(Kz);Edr=r(Rbt,"TFAlbertForPreTraining"),Rbt.forEach(t),Cdr=r(K$e," (ALBERT model)"),K$e.forEach(t),wdr=i(le),v4=n(le,"LI",{});var Z$e=s(v4);zbe=n(Z$e,"STRONG",{});var Bbt=s(zbe);Adr=r(Bbt,"bart"),Bbt.forEach(t),ydr=r(Z$e," \u2014 "),Zz=n(Z$e,"A",{href:!0});var Pbt=s(Zz);Ldr=r(Pbt,"TFBartForConditionalGeneration"),Pbt.forEach(t),xdr=r(Z$e," (BART model)"),Z$e.forEach(t),$dr=i(le),T4=n(le,"LI",{});var eke=s(T4);Qbe=n(eke,"STRONG",{});var Ibt=s(Qbe);kdr=r(Ibt,"bert"),Ibt.forEach(t),Sdr=r(eke," \u2014 "),eQ=n(eke,"A",{href:!0});var qbt=s(eQ);Rdr=r(qbt,"TFBertForPreTraining"),qbt.forEach(t),Bdr=r(eke," (BERT model)"),eke.forEach(t),Pdr=i(le),M4=n(le,"LI",{});var oke=s(M4);Wbe=n(oke,"STRONG",{});var Nbt=s(Wbe);Idr=r(Nbt,"camembert"),Nbt.forEach(t),qdr=r(oke," \u2014 "),oQ=n(oke,"A",{href:!0});var jbt=s(oQ);Ndr=r(jbt,"TFCamembertForMaskedLM"),jbt.forEach(t),jdr=r(oke," (CamemBERT model)"),oke.forEach(t),Ddr=i(le),E4=n(le,"LI",{});var rke=s(E4);Hbe=n(rke,"STRONG",{});var Dbt=s(Hbe);Gdr=r(Dbt,"ctrl"),Dbt.forEach(t),Odr=r(rke," \u2014 "),rQ=n(rke,"A",{href:!0});var Gbt=s(rQ);Vdr=r(Gbt,"TFCTRLLMHeadModel"),Gbt.forEach(t),Xdr=r(rke," (CTRL model)"),rke.forEach(t),zdr=i(le),C4=n(le,"LI",{});var tke=s(C4);Ube=n(tke,"STRONG",{});var Obt=s(Ube);Qdr=r(Obt,"distilbert"),Obt.forEach(t),Wdr=r(tke," \u2014 "),tQ=n(tke,"A",{href:!0});var Vbt=s(tQ);Hdr=r(Vbt,"TFDistilBertForMaskedLM"),Vbt.forEach(t),Udr=r(tke," (DistilBERT model)"),tke.forEach(t),Jdr=i(le),w4=n(le,"LI",{});var ake=s(w4);Jbe=n(ake,"STRONG",{});var Xbt=s(Jbe);Ydr=r(Xbt,"electra"),Xbt.forEach(t),Kdr=r(ake," \u2014 "),aQ=n(ake,"A",{href:!0});var zbt=s(aQ);Zdr=r(zbt,"TFElectraForPreTraining"),zbt.forEach(t),ecr=r(ake," (ELECTRA model)"),ake.forEach(t),ocr=i(le),A4=n(le,"LI",{});var nke=s(A4);Ybe=n(nke,"STRONG",{});var Qbt=s(Ybe);rcr=r(Qbt,"flaubert"),Qbt.forEach(t),tcr=r(nke," \u2014 "),nQ=n(nke,"A",{href:!0});var Wbt=s(nQ);acr=r(Wbt,"TFFlaubertWithLMHeadModel"),Wbt.forEach(t),ncr=r(nke," (FlauBERT model)"),nke.forEach(t),scr=i(le),y4=n(le,"LI",{});var ske=s(y4);Kbe=n(ske,"STRONG",{});var Hbt=s(Kbe);lcr=r(Hbt,"funnel"),Hbt.forEach(t),icr=r(ske," \u2014 "),sQ=n(ske,"A",{href:!0});var Ubt=s(sQ);dcr=r(Ubt,"TFFunnelForPreTraining"),Ubt.forEach(t),ccr=r(ske," (Funnel Transformer model)"),ske.forEach(t),mcr=i(le),L4=n(le,"LI",{});var lke=s(L4);Zbe=n(lke,"STRONG",{});var Jbt=s(Zbe);fcr=r(Jbt,"gpt2"),Jbt.forEach(t),gcr=r(lke," \u2014 "),lQ=n(lke,"A",{href:!0});var Ybt=s(lQ);hcr=r(Ybt,"TFGPT2LMHeadModel"),Ybt.forEach(t),ucr=r(lke," (OpenAI GPT-2 model)"),lke.forEach(t),pcr=i(le),x4=n(le,"LI",{});var ike=s(x4);e2e=n(ike,"STRONG",{});var Kbt=s(e2e);_cr=r(Kbt,"layoutlm"),Kbt.forEach(t),bcr=r(ike," \u2014 "),iQ=n(ike,"A",{href:!0});var Zbt=s(iQ);Fcr=r(Zbt,"TFLayoutLMForMaskedLM"),Zbt.forEach(t),vcr=r(ike," (LayoutLM model)"),ike.forEach(t),Tcr=i(le),$4=n(le,"LI",{});var dke=s($4);o2e=n(dke,"STRONG",{});var e2t=s(o2e);Mcr=r(e2t,"lxmert"),e2t.forEach(t),Ecr=r(dke," \u2014 "),dQ=n(dke,"A",{href:!0});var o2t=s(dQ);Ccr=r(o2t,"TFLxmertForPreTraining"),o2t.forEach(t),wcr=r(dke," (LXMERT model)"),dke.forEach(t),Acr=i(le),k4=n(le,"LI",{});var cke=s(k4);r2e=n(cke,"STRONG",{});var r2t=s(r2e);ycr=r(r2t,"mobilebert"),r2t.forEach(t),Lcr=r(cke," \u2014 "),cQ=n(cke,"A",{href:!0});var t2t=s(cQ);xcr=r(t2t,"TFMobileBertForPreTraining"),t2t.forEach(t),$cr=r(cke," (MobileBERT model)"),cke.forEach(t),kcr=i(le),S4=n(le,"LI",{});var mke=s(S4);t2e=n(mke,"STRONG",{});var a2t=s(t2e);Scr=r(a2t,"mpnet"),a2t.forEach(t),Rcr=r(mke," \u2014 "),mQ=n(mke,"A",{href:!0});var n2t=s(mQ);Bcr=r(n2t,"TFMPNetForMaskedLM"),n2t.forEach(t),Pcr=r(mke," (MPNet model)"),mke.forEach(t),Icr=i(le),R4=n(le,"LI",{});var fke=s(R4);a2e=n(fke,"STRONG",{});var s2t=s(a2e);qcr=r(s2t,"openai-gpt"),s2t.forEach(t),Ncr=r(fke," \u2014 "),fQ=n(fke,"A",{href:!0});var l2t=s(fQ);jcr=r(l2t,"TFOpenAIGPTLMHeadModel"),l2t.forEach(t),Dcr=r(fke," (OpenAI GPT model)"),fke.forEach(t),Gcr=i(le),B4=n(le,"LI",{});var gke=s(B4);n2e=n(gke,"STRONG",{});var i2t=s(n2e);Ocr=r(i2t,"roberta"),i2t.forEach(t),Vcr=r(gke," \u2014 "),gQ=n(gke,"A",{href:!0});var d2t=s(gQ);Xcr=r(d2t,"TFRobertaForMaskedLM"),d2t.forEach(t),zcr=r(gke," (RoBERTa model)"),gke.forEach(t),Qcr=i(le),P4=n(le,"LI",{});var hke=s(P4);s2e=n(hke,"STRONG",{});var c2t=s(s2e);Wcr=r(c2t,"t5"),c2t.forEach(t),Hcr=r(hke," \u2014 "),hQ=n(hke,"A",{href:!0});var m2t=s(hQ);Ucr=r(m2t,"TFT5ForConditionalGeneration"),m2t.forEach(t),Jcr=r(hke," (T5 model)"),hke.forEach(t),Ycr=i(le),I4=n(le,"LI",{});var uke=s(I4);l2e=n(uke,"STRONG",{});var f2t=s(l2e);Kcr=r(f2t,"tapas"),f2t.forEach(t),Zcr=r(uke," \u2014 "),uQ=n(uke,"A",{href:!0});var g2t=s(uQ);emr=r(g2t,"TFTapasForMaskedLM"),g2t.forEach(t),omr=r(uke," (TAPAS model)"),uke.forEach(t),rmr=i(le),q4=n(le,"LI",{});var pke=s(q4);i2e=n(pke,"STRONG",{});var h2t=s(i2e);tmr=r(h2t,"transfo-xl"),h2t.forEach(t),amr=r(pke," \u2014 "),pQ=n(pke,"A",{href:!0});var u2t=s(pQ);nmr=r(u2t,"TFTransfoXLLMHeadModel"),u2t.forEach(t),smr=r(pke," (Transformer-XL model)"),pke.forEach(t),lmr=i(le),N4=n(le,"LI",{});var _ke=s(N4);d2e=n(_ke,"STRONG",{});var p2t=s(d2e);imr=r(p2t,"vit_mae"),p2t.forEach(t),dmr=r(_ke," \u2014 "),_Q=n(_ke,"A",{href:!0});var _2t=s(_Q);cmr=r(_2t,"TFViTMAEForPreTraining"),_2t.forEach(t),mmr=r(_ke," (ViTMAE model)"),_ke.forEach(t),fmr=i(le),j4=n(le,"LI",{});var bke=s(j4);c2e=n(bke,"STRONG",{});var b2t=s(c2e);gmr=r(b2t,"xlm"),b2t.forEach(t),hmr=r(bke," \u2014 "),bQ=n(bke,"A",{href:!0});var F2t=s(bQ);umr=r(F2t,"TFXLMWithLMHeadModel"),F2t.forEach(t),pmr=r(bke," (XLM model)"),bke.forEach(t),_mr=i(le),D4=n(le,"LI",{});var Fke=s(D4);m2e=n(Fke,"STRONG",{});var v2t=s(m2e);bmr=r(v2t,"xlm-roberta"),v2t.forEach(t),Fmr=r(Fke," \u2014 "),FQ=n(Fke,"A",{href:!0});var T2t=s(FQ);vmr=r(T2t,"TFXLMRobertaForMaskedLM"),T2t.forEach(t),Tmr=r(Fke," (XLM-RoBERTa model)"),Fke.forEach(t),Mmr=i(le),G4=n(le,"LI",{});var vke=s(G4);f2e=n(vke,"STRONG",{});var M2t=s(f2e);Emr=r(M2t,"xlnet"),M2t.forEach(t),Cmr=r(vke," \u2014 "),vQ=n(vke,"A",{href:!0});var E2t=s(vQ);wmr=r(E2t,"TFXLNetLMHeadModel"),E2t.forEach(t),Amr=r(vke," (XLNet model)"),vke.forEach(t),le.forEach(t),ymr=i(fl),T(O4.$$.fragment,fl),fl.forEach(t),ml.forEach(t),KIe=i(m),Vd=n(m,"H2",{class:!0});var aje=s(Vd);V4=n(aje,"A",{id:!0,class:!0,href:!0});var C2t=s(V4);g2e=n(C2t,"SPAN",{});var w2t=s(g2e);T(O8.$$.fragment,w2t),w2t.forEach(t),C2t.forEach(t),Lmr=i(aje),h2e=n(aje,"SPAN",{});var A2t=s(h2e);xmr=r(A2t,"TFAutoModelForCausalLM"),A2t.forEach(t),aje.forEach(t),ZIe=i(m),Zo=n(m,"DIV",{class:!0});var gl=s(Zo);T(V8.$$.fragment,gl),$mr=i(gl),Xd=n(gl,"P",{});var nZ=s(Xd);kmr=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),TQ=n(nZ,"A",{href:!0});var y2t=s(TQ);Smr=r(y2t,"from_pretrained()"),y2t.forEach(t),Rmr=r(nZ," class method or the "),MQ=n(nZ,"A",{href:!0});var L2t=s(MQ);Bmr=r(L2t,"from_config()"),L2t.forEach(t),Pmr=r(nZ,` class
method.`),nZ.forEach(t),Imr=i(gl),X8=n(gl,"P",{});var nje=s(X8);qmr=r(nje,"This class cannot be instantiated directly using "),u2e=n(nje,"CODE",{});var x2t=s(u2e);Nmr=r(x2t,"__init__()"),x2t.forEach(t),jmr=r(nje," (throws an error)."),nje.forEach(t),Dmr=i(gl),yt=n(gl,"DIV",{class:!0});var Z6=s(yt);T(z8.$$.fragment,Z6),Gmr=i(Z6),p2e=n(Z6,"P",{});var $2t=s(p2e);Omr=r($2t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$2t.forEach(t),Vmr=i(Z6),zd=n(Z6,"P",{});var sZ=s(zd);Xmr=r(sZ,`Note:
Loading a model from its configuration file does `),_2e=n(sZ,"STRONG",{});var k2t=s(_2e);zmr=r(k2t,"not"),k2t.forEach(t),Qmr=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EQ=n(sZ,"A",{href:!0});var S2t=s(EQ);Wmr=r(S2t,"from_pretrained()"),S2t.forEach(t),Hmr=r(sZ," to load the model weights."),sZ.forEach(t),Umr=i(Z6),T(X4.$$.fragment,Z6),Z6.forEach(t),Jmr=i(gl),yr=n(gl,"DIV",{class:!0});var hl=s(yr);T(Q8.$$.fragment,hl),Ymr=i(hl),b2e=n(hl,"P",{});var R2t=s(b2e);Kmr=r(R2t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),R2t.forEach(t),Zmr=i(hl),en=n(hl,"P",{});var e0=s(en);efr=r(e0,"The model class to instantiate is selected based on the "),F2e=n(e0,"CODE",{});var B2t=s(F2e);ofr=r(B2t,"model_type"),B2t.forEach(t),rfr=r(e0,` property of the config object (either
passed as an argument or loaded from `),v2e=n(e0,"CODE",{});var P2t=s(v2e);tfr=r(P2t,"pretrained_model_name_or_path"),P2t.forEach(t),afr=r(e0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T2e=n(e0,"CODE",{});var I2t=s(T2e);nfr=r(I2t,"pretrained_model_name_or_path"),I2t.forEach(t),sfr=r(e0,":"),e0.forEach(t),lfr=i(hl),Te=n(hl,"UL",{});var Ce=s(Te);z4=n(Ce,"LI",{});var Tke=s(z4);M2e=n(Tke,"STRONG",{});var q2t=s(M2e);ifr=r(q2t,"bert"),q2t.forEach(t),dfr=r(Tke," \u2014 "),CQ=n(Tke,"A",{href:!0});var N2t=s(CQ);cfr=r(N2t,"TFBertLMHeadModel"),N2t.forEach(t),mfr=r(Tke," (BERT model)"),Tke.forEach(t),ffr=i(Ce),Q4=n(Ce,"LI",{});var Mke=s(Q4);E2e=n(Mke,"STRONG",{});var j2t=s(E2e);gfr=r(j2t,"camembert"),j2t.forEach(t),hfr=r(Mke," \u2014 "),wQ=n(Mke,"A",{href:!0});var D2t=s(wQ);ufr=r(D2t,"TFCamembertForCausalLM"),D2t.forEach(t),pfr=r(Mke," (CamemBERT model)"),Mke.forEach(t),_fr=i(Ce),W4=n(Ce,"LI",{});var Eke=s(W4);C2e=n(Eke,"STRONG",{});var G2t=s(C2e);bfr=r(G2t,"ctrl"),G2t.forEach(t),Ffr=r(Eke," \u2014 "),AQ=n(Eke,"A",{href:!0});var O2t=s(AQ);vfr=r(O2t,"TFCTRLLMHeadModel"),O2t.forEach(t),Tfr=r(Eke," (CTRL model)"),Eke.forEach(t),Mfr=i(Ce),H4=n(Ce,"LI",{});var Cke=s(H4);w2e=n(Cke,"STRONG",{});var V2t=s(w2e);Efr=r(V2t,"gpt2"),V2t.forEach(t),Cfr=r(Cke," \u2014 "),yQ=n(Cke,"A",{href:!0});var X2t=s(yQ);wfr=r(X2t,"TFGPT2LMHeadModel"),X2t.forEach(t),Afr=r(Cke," (OpenAI GPT-2 model)"),Cke.forEach(t),yfr=i(Ce),U4=n(Ce,"LI",{});var wke=s(U4);A2e=n(wke,"STRONG",{});var z2t=s(A2e);Lfr=r(z2t,"gptj"),z2t.forEach(t),xfr=r(wke," \u2014 "),LQ=n(wke,"A",{href:!0});var Q2t=s(LQ);$fr=r(Q2t,"TFGPTJForCausalLM"),Q2t.forEach(t),kfr=r(wke," (GPT-J model)"),wke.forEach(t),Sfr=i(Ce),J4=n(Ce,"LI",{});var Ake=s(J4);y2e=n(Ake,"STRONG",{});var W2t=s(y2e);Rfr=r(W2t,"openai-gpt"),W2t.forEach(t),Bfr=r(Ake," \u2014 "),xQ=n(Ake,"A",{href:!0});var H2t=s(xQ);Pfr=r(H2t,"TFOpenAIGPTLMHeadModel"),H2t.forEach(t),Ifr=r(Ake," (OpenAI GPT model)"),Ake.forEach(t),qfr=i(Ce),Y4=n(Ce,"LI",{});var yke=s(Y4);L2e=n(yke,"STRONG",{});var U2t=s(L2e);Nfr=r(U2t,"rembert"),U2t.forEach(t),jfr=r(yke," \u2014 "),$Q=n(yke,"A",{href:!0});var J2t=s($Q);Dfr=r(J2t,"TFRemBertForCausalLM"),J2t.forEach(t),Gfr=r(yke," (RemBERT model)"),yke.forEach(t),Ofr=i(Ce),K4=n(Ce,"LI",{});var Lke=s(K4);x2e=n(Lke,"STRONG",{});var Y2t=s(x2e);Vfr=r(Y2t,"roberta"),Y2t.forEach(t),Xfr=r(Lke," \u2014 "),kQ=n(Lke,"A",{href:!0});var K2t=s(kQ);zfr=r(K2t,"TFRobertaForCausalLM"),K2t.forEach(t),Qfr=r(Lke," (RoBERTa model)"),Lke.forEach(t),Wfr=i(Ce),Z4=n(Ce,"LI",{});var xke=s(Z4);$2e=n(xke,"STRONG",{});var Z2t=s($2e);Hfr=r(Z2t,"roformer"),Z2t.forEach(t),Ufr=r(xke," \u2014 "),SQ=n(xke,"A",{href:!0});var eFt=s(SQ);Jfr=r(eFt,"TFRoFormerForCausalLM"),eFt.forEach(t),Yfr=r(xke," (RoFormer model)"),xke.forEach(t),Kfr=i(Ce),eE=n(Ce,"LI",{});var $ke=s(eE);k2e=n($ke,"STRONG",{});var oFt=s(k2e);Zfr=r(oFt,"transfo-xl"),oFt.forEach(t),egr=r($ke," \u2014 "),RQ=n($ke,"A",{href:!0});var rFt=s(RQ);ogr=r(rFt,"TFTransfoXLLMHeadModel"),rFt.forEach(t),rgr=r($ke," (Transformer-XL model)"),$ke.forEach(t),tgr=i(Ce),oE=n(Ce,"LI",{});var kke=s(oE);S2e=n(kke,"STRONG",{});var tFt=s(S2e);agr=r(tFt,"xlm"),tFt.forEach(t),ngr=r(kke," \u2014 "),BQ=n(kke,"A",{href:!0});var aFt=s(BQ);sgr=r(aFt,"TFXLMWithLMHeadModel"),aFt.forEach(t),lgr=r(kke," (XLM model)"),kke.forEach(t),igr=i(Ce),rE=n(Ce,"LI",{});var Ske=s(rE);R2e=n(Ske,"STRONG",{});var nFt=s(R2e);dgr=r(nFt,"xlnet"),nFt.forEach(t),cgr=r(Ske," \u2014 "),PQ=n(Ske,"A",{href:!0});var sFt=s(PQ);mgr=r(sFt,"TFXLNetLMHeadModel"),sFt.forEach(t),fgr=r(Ske," (XLNet model)"),Ske.forEach(t),Ce.forEach(t),ggr=i(hl),T(tE.$$.fragment,hl),hl.forEach(t),gl.forEach(t),eqe=i(m),Qd=n(m,"H2",{class:!0});var sje=s(Qd);aE=n(sje,"A",{id:!0,class:!0,href:!0});var lFt=s(aE);B2e=n(lFt,"SPAN",{});var iFt=s(B2e);T(W8.$$.fragment,iFt),iFt.forEach(t),lFt.forEach(t),hgr=i(sje),P2e=n(sje,"SPAN",{});var dFt=s(P2e);ugr=r(dFt,"TFAutoModelForImageClassification"),dFt.forEach(t),sje.forEach(t),oqe=i(m),er=n(m,"DIV",{class:!0});var ul=s(er);T(H8.$$.fragment,ul),pgr=i(ul),Wd=n(ul,"P",{});var lZ=s(Wd);_gr=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),IQ=n(lZ,"A",{href:!0});var cFt=s(IQ);bgr=r(cFt,"from_pretrained()"),cFt.forEach(t),Fgr=r(lZ," class method or the "),qQ=n(lZ,"A",{href:!0});var mFt=s(qQ);vgr=r(mFt,"from_config()"),mFt.forEach(t),Tgr=r(lZ,` class
method.`),lZ.forEach(t),Mgr=i(ul),U8=n(ul,"P",{});var lje=s(U8);Egr=r(lje,"This class cannot be instantiated directly using "),I2e=n(lje,"CODE",{});var fFt=s(I2e);Cgr=r(fFt,"__init__()"),fFt.forEach(t),wgr=r(lje," (throws an error)."),lje.forEach(t),Agr=i(ul),Lt=n(ul,"DIV",{class:!0});var o0=s(Lt);T(J8.$$.fragment,o0),ygr=i(o0),q2e=n(o0,"P",{});var gFt=s(q2e);Lgr=r(gFt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),gFt.forEach(t),xgr=i(o0),Hd=n(o0,"P",{});var iZ=s(Hd);$gr=r(iZ,`Note:
Loading a model from its configuration file does `),N2e=n(iZ,"STRONG",{});var hFt=s(N2e);kgr=r(hFt,"not"),hFt.forEach(t),Sgr=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NQ=n(iZ,"A",{href:!0});var uFt=s(NQ);Rgr=r(uFt,"from_pretrained()"),uFt.forEach(t),Bgr=r(iZ," to load the model weights."),iZ.forEach(t),Pgr=i(o0),T(nE.$$.fragment,o0),o0.forEach(t),Igr=i(ul),Lr=n(ul,"DIV",{class:!0});var pl=s(Lr);T(Y8.$$.fragment,pl),qgr=i(pl),j2e=n(pl,"P",{});var pFt=s(j2e);Ngr=r(pFt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),pFt.forEach(t),jgr=i(pl),on=n(pl,"P",{});var r0=s(on);Dgr=r(r0,"The model class to instantiate is selected based on the "),D2e=n(r0,"CODE",{});var _Ft=s(D2e);Ggr=r(_Ft,"model_type"),_Ft.forEach(t),Ogr=r(r0,` property of the config object (either
passed as an argument or loaded from `),G2e=n(r0,"CODE",{});var bFt=s(G2e);Vgr=r(bFt,"pretrained_model_name_or_path"),bFt.forEach(t),Xgr=r(r0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O2e=n(r0,"CODE",{});var FFt=s(O2e);zgr=r(FFt,"pretrained_model_name_or_path"),FFt.forEach(t),Qgr=r(r0,":"),r0.forEach(t),Wgr=i(pl),Ud=n(pl,"UL",{});var dZ=s(Ud);sE=n(dZ,"LI",{});var Rke=s(sE);V2e=n(Rke,"STRONG",{});var vFt=s(V2e);Hgr=r(vFt,"convnext"),vFt.forEach(t),Ugr=r(Rke," \u2014 "),jQ=n(Rke,"A",{href:!0});var TFt=s(jQ);Jgr=r(TFt,"TFConvNextForImageClassification"),TFt.forEach(t),Ygr=r(Rke," (ConvNext model)"),Rke.forEach(t),Kgr=i(dZ),lE=n(dZ,"LI",{});var Bke=s(lE);X2e=n(Bke,"STRONG",{});var MFt=s(X2e);Zgr=r(MFt,"data2vec-vision"),MFt.forEach(t),ehr=r(Bke," \u2014 "),DQ=n(Bke,"A",{href:!0});var EFt=s(DQ);ohr=r(EFt,"TFData2VecVisionForImageClassification"),EFt.forEach(t),rhr=r(Bke," (Data2VecVision model)"),Bke.forEach(t),thr=i(dZ),iE=n(dZ,"LI",{});var Pke=s(iE);z2e=n(Pke,"STRONG",{});var CFt=s(z2e);ahr=r(CFt,"vit"),CFt.forEach(t),nhr=r(Pke," \u2014 "),GQ=n(Pke,"A",{href:!0});var wFt=s(GQ);shr=r(wFt,"TFViTForImageClassification"),wFt.forEach(t),lhr=r(Pke," (ViT model)"),Pke.forEach(t),dZ.forEach(t),ihr=i(pl),T(dE.$$.fragment,pl),pl.forEach(t),ul.forEach(t),rqe=i(m),Jd=n(m,"H2",{class:!0});var ije=s(Jd);cE=n(ije,"A",{id:!0,class:!0,href:!0});var AFt=s(cE);Q2e=n(AFt,"SPAN",{});var yFt=s(Q2e);T(K8.$$.fragment,yFt),yFt.forEach(t),AFt.forEach(t),dhr=i(ije),W2e=n(ije,"SPAN",{});var LFt=s(W2e);chr=r(LFt,"TFAutoModelForMaskedLM"),LFt.forEach(t),ije.forEach(t),tqe=i(m),or=n(m,"DIV",{class:!0});var _l=s(or);T(Z8.$$.fragment,_l),mhr=i(_l),Yd=n(_l,"P",{});var cZ=s(Yd);fhr=r(cZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),OQ=n(cZ,"A",{href:!0});var xFt=s(OQ);ghr=r(xFt,"from_pretrained()"),xFt.forEach(t),hhr=r(cZ," class method or the "),VQ=n(cZ,"A",{href:!0});var $Ft=s(VQ);uhr=r($Ft,"from_config()"),$Ft.forEach(t),phr=r(cZ,` class
method.`),cZ.forEach(t),_hr=i(_l),ex=n(_l,"P",{});var dje=s(ex);bhr=r(dje,"This class cannot be instantiated directly using "),H2e=n(dje,"CODE",{});var kFt=s(H2e);Fhr=r(kFt,"__init__()"),kFt.forEach(t),vhr=r(dje," (throws an error)."),dje.forEach(t),Thr=i(_l),xt=n(_l,"DIV",{class:!0});var t0=s(xt);T(ox.$$.fragment,t0),Mhr=i(t0),U2e=n(t0,"P",{});var SFt=s(U2e);Ehr=r(SFt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),SFt.forEach(t),Chr=i(t0),Kd=n(t0,"P",{});var mZ=s(Kd);whr=r(mZ,`Note:
Loading a model from its configuration file does `),J2e=n(mZ,"STRONG",{});var RFt=s(J2e);Ahr=r(RFt,"not"),RFt.forEach(t),yhr=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=n(mZ,"A",{href:!0});var BFt=s(XQ);Lhr=r(BFt,"from_pretrained()"),BFt.forEach(t),xhr=r(mZ," to load the model weights."),mZ.forEach(t),$hr=i(t0),T(mE.$$.fragment,t0),t0.forEach(t),khr=i(_l),xr=n(_l,"DIV",{class:!0});var bl=s(xr);T(rx.$$.fragment,bl),Shr=i(bl),Y2e=n(bl,"P",{});var PFt=s(Y2e);Rhr=r(PFt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),PFt.forEach(t),Bhr=i(bl),rn=n(bl,"P",{});var a0=s(rn);Phr=r(a0,"The model class to instantiate is selected based on the "),K2e=n(a0,"CODE",{});var IFt=s(K2e);Ihr=r(IFt,"model_type"),IFt.forEach(t),qhr=r(a0,` property of the config object (either
passed as an argument or loaded from `),Z2e=n(a0,"CODE",{});var qFt=s(Z2e);Nhr=r(qFt,"pretrained_model_name_or_path"),qFt.forEach(t),jhr=r(a0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eFe=n(a0,"CODE",{});var NFt=s(eFe);Dhr=r(NFt,"pretrained_model_name_or_path"),NFt.forEach(t),Ghr=r(a0,":"),a0.forEach(t),Ohr=i(bl),ie=n(bl,"UL",{});var me=s(ie);fE=n(me,"LI",{});var Ike=s(fE);oFe=n(Ike,"STRONG",{});var jFt=s(oFe);Vhr=r(jFt,"albert"),jFt.forEach(t),Xhr=r(Ike," \u2014 "),zQ=n(Ike,"A",{href:!0});var DFt=s(zQ);zhr=r(DFt,"TFAlbertForMaskedLM"),DFt.forEach(t),Qhr=r(Ike," (ALBERT model)"),Ike.forEach(t),Whr=i(me),gE=n(me,"LI",{});var qke=s(gE);rFe=n(qke,"STRONG",{});var GFt=s(rFe);Hhr=r(GFt,"bert"),GFt.forEach(t),Uhr=r(qke," \u2014 "),QQ=n(qke,"A",{href:!0});var OFt=s(QQ);Jhr=r(OFt,"TFBertForMaskedLM"),OFt.forEach(t),Yhr=r(qke," (BERT model)"),qke.forEach(t),Khr=i(me),hE=n(me,"LI",{});var Nke=s(hE);tFe=n(Nke,"STRONG",{});var VFt=s(tFe);Zhr=r(VFt,"camembert"),VFt.forEach(t),eur=r(Nke," \u2014 "),WQ=n(Nke,"A",{href:!0});var XFt=s(WQ);our=r(XFt,"TFCamembertForMaskedLM"),XFt.forEach(t),rur=r(Nke," (CamemBERT model)"),Nke.forEach(t),tur=i(me),uE=n(me,"LI",{});var jke=s(uE);aFe=n(jke,"STRONG",{});var zFt=s(aFe);aur=r(zFt,"convbert"),zFt.forEach(t),nur=r(jke," \u2014 "),HQ=n(jke,"A",{href:!0});var QFt=s(HQ);sur=r(QFt,"TFConvBertForMaskedLM"),QFt.forEach(t),lur=r(jke," (ConvBERT model)"),jke.forEach(t),iur=i(me),pE=n(me,"LI",{});var Dke=s(pE);nFe=n(Dke,"STRONG",{});var WFt=s(nFe);dur=r(WFt,"deberta"),WFt.forEach(t),cur=r(Dke," \u2014 "),UQ=n(Dke,"A",{href:!0});var HFt=s(UQ);mur=r(HFt,"TFDebertaForMaskedLM"),HFt.forEach(t),fur=r(Dke," (DeBERTa model)"),Dke.forEach(t),gur=i(me),_E=n(me,"LI",{});var Gke=s(_E);sFe=n(Gke,"STRONG",{});var UFt=s(sFe);hur=r(UFt,"deberta-v2"),UFt.forEach(t),uur=r(Gke," \u2014 "),JQ=n(Gke,"A",{href:!0});var JFt=s(JQ);pur=r(JFt,"TFDebertaV2ForMaskedLM"),JFt.forEach(t),_ur=r(Gke," (DeBERTa-v2 model)"),Gke.forEach(t),bur=i(me),bE=n(me,"LI",{});var Oke=s(bE);lFe=n(Oke,"STRONG",{});var YFt=s(lFe);Fur=r(YFt,"distilbert"),YFt.forEach(t),vur=r(Oke," \u2014 "),YQ=n(Oke,"A",{href:!0});var KFt=s(YQ);Tur=r(KFt,"TFDistilBertForMaskedLM"),KFt.forEach(t),Mur=r(Oke," (DistilBERT model)"),Oke.forEach(t),Eur=i(me),FE=n(me,"LI",{});var Vke=s(FE);iFe=n(Vke,"STRONG",{});var ZFt=s(iFe);Cur=r(ZFt,"electra"),ZFt.forEach(t),wur=r(Vke," \u2014 "),KQ=n(Vke,"A",{href:!0});var evt=s(KQ);Aur=r(evt,"TFElectraForMaskedLM"),evt.forEach(t),yur=r(Vke," (ELECTRA model)"),Vke.forEach(t),Lur=i(me),vE=n(me,"LI",{});var Xke=s(vE);dFe=n(Xke,"STRONG",{});var ovt=s(dFe);xur=r(ovt,"flaubert"),ovt.forEach(t),$ur=r(Xke," \u2014 "),ZQ=n(Xke,"A",{href:!0});var rvt=s(ZQ);kur=r(rvt,"TFFlaubertWithLMHeadModel"),rvt.forEach(t),Sur=r(Xke," (FlauBERT model)"),Xke.forEach(t),Rur=i(me),TE=n(me,"LI",{});var zke=s(TE);cFe=n(zke,"STRONG",{});var tvt=s(cFe);Bur=r(tvt,"funnel"),tvt.forEach(t),Pur=r(zke," \u2014 "),eW=n(zke,"A",{href:!0});var avt=s(eW);Iur=r(avt,"TFFunnelForMaskedLM"),avt.forEach(t),qur=r(zke," (Funnel Transformer model)"),zke.forEach(t),Nur=i(me),ME=n(me,"LI",{});var Qke=s(ME);mFe=n(Qke,"STRONG",{});var nvt=s(mFe);jur=r(nvt,"layoutlm"),nvt.forEach(t),Dur=r(Qke," \u2014 "),oW=n(Qke,"A",{href:!0});var svt=s(oW);Gur=r(svt,"TFLayoutLMForMaskedLM"),svt.forEach(t),Our=r(Qke," (LayoutLM model)"),Qke.forEach(t),Vur=i(me),EE=n(me,"LI",{});var Wke=s(EE);fFe=n(Wke,"STRONG",{});var lvt=s(fFe);Xur=r(lvt,"longformer"),lvt.forEach(t),zur=r(Wke," \u2014 "),rW=n(Wke,"A",{href:!0});var ivt=s(rW);Qur=r(ivt,"TFLongformerForMaskedLM"),ivt.forEach(t),Wur=r(Wke," (Longformer model)"),Wke.forEach(t),Hur=i(me),CE=n(me,"LI",{});var Hke=s(CE);gFe=n(Hke,"STRONG",{});var dvt=s(gFe);Uur=r(dvt,"mobilebert"),dvt.forEach(t),Jur=r(Hke," \u2014 "),tW=n(Hke,"A",{href:!0});var cvt=s(tW);Yur=r(cvt,"TFMobileBertForMaskedLM"),cvt.forEach(t),Kur=r(Hke," (MobileBERT model)"),Hke.forEach(t),Zur=i(me),wE=n(me,"LI",{});var Uke=s(wE);hFe=n(Uke,"STRONG",{});var mvt=s(hFe);epr=r(mvt,"mpnet"),mvt.forEach(t),opr=r(Uke," \u2014 "),aW=n(Uke,"A",{href:!0});var fvt=s(aW);rpr=r(fvt,"TFMPNetForMaskedLM"),fvt.forEach(t),tpr=r(Uke," (MPNet model)"),Uke.forEach(t),apr=i(me),AE=n(me,"LI",{});var Jke=s(AE);uFe=n(Jke,"STRONG",{});var gvt=s(uFe);npr=r(gvt,"rembert"),gvt.forEach(t),spr=r(Jke," \u2014 "),nW=n(Jke,"A",{href:!0});var hvt=s(nW);lpr=r(hvt,"TFRemBertForMaskedLM"),hvt.forEach(t),ipr=r(Jke," (RemBERT model)"),Jke.forEach(t),dpr=i(me),yE=n(me,"LI",{});var Yke=s(yE);pFe=n(Yke,"STRONG",{});var uvt=s(pFe);cpr=r(uvt,"roberta"),uvt.forEach(t),mpr=r(Yke," \u2014 "),sW=n(Yke,"A",{href:!0});var pvt=s(sW);fpr=r(pvt,"TFRobertaForMaskedLM"),pvt.forEach(t),gpr=r(Yke," (RoBERTa model)"),Yke.forEach(t),hpr=i(me),LE=n(me,"LI",{});var Kke=s(LE);_Fe=n(Kke,"STRONG",{});var _vt=s(_Fe);upr=r(_vt,"roformer"),_vt.forEach(t),ppr=r(Kke," \u2014 "),lW=n(Kke,"A",{href:!0});var bvt=s(lW);_pr=r(bvt,"TFRoFormerForMaskedLM"),bvt.forEach(t),bpr=r(Kke," (RoFormer model)"),Kke.forEach(t),Fpr=i(me),xE=n(me,"LI",{});var Zke=s(xE);bFe=n(Zke,"STRONG",{});var Fvt=s(bFe);vpr=r(Fvt,"tapas"),Fvt.forEach(t),Tpr=r(Zke," \u2014 "),iW=n(Zke,"A",{href:!0});var vvt=s(iW);Mpr=r(vvt,"TFTapasForMaskedLM"),vvt.forEach(t),Epr=r(Zke," (TAPAS model)"),Zke.forEach(t),Cpr=i(me),$E=n(me,"LI",{});var eSe=s($E);FFe=n(eSe,"STRONG",{});var Tvt=s(FFe);wpr=r(Tvt,"xlm"),Tvt.forEach(t),Apr=r(eSe," \u2014 "),dW=n(eSe,"A",{href:!0});var Mvt=s(dW);ypr=r(Mvt,"TFXLMWithLMHeadModel"),Mvt.forEach(t),Lpr=r(eSe," (XLM model)"),eSe.forEach(t),xpr=i(me),kE=n(me,"LI",{});var oSe=s(kE);vFe=n(oSe,"STRONG",{});var Evt=s(vFe);$pr=r(Evt,"xlm-roberta"),Evt.forEach(t),kpr=r(oSe," \u2014 "),cW=n(oSe,"A",{href:!0});var Cvt=s(cW);Spr=r(Cvt,"TFXLMRobertaForMaskedLM"),Cvt.forEach(t),Rpr=r(oSe," (XLM-RoBERTa model)"),oSe.forEach(t),me.forEach(t),Bpr=i(bl),T(SE.$$.fragment,bl),bl.forEach(t),_l.forEach(t),aqe=i(m),Zd=n(m,"H2",{class:!0});var cje=s(Zd);RE=n(cje,"A",{id:!0,class:!0,href:!0});var wvt=s(RE);TFe=n(wvt,"SPAN",{});var Avt=s(TFe);T(tx.$$.fragment,Avt),Avt.forEach(t),wvt.forEach(t),Ppr=i(cje),MFe=n(cje,"SPAN",{});var yvt=s(MFe);Ipr=r(yvt,"TFAutoModelForSeq2SeqLM"),yvt.forEach(t),cje.forEach(t),nqe=i(m),rr=n(m,"DIV",{class:!0});var Fl=s(rr);T(ax.$$.fragment,Fl),qpr=i(Fl),ec=n(Fl,"P",{});var fZ=s(ec);Npr=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),mW=n(fZ,"A",{href:!0});var Lvt=s(mW);jpr=r(Lvt,"from_pretrained()"),Lvt.forEach(t),Dpr=r(fZ," class method or the "),fW=n(fZ,"A",{href:!0});var xvt=s(fW);Gpr=r(xvt,"from_config()"),xvt.forEach(t),Opr=r(fZ,` class
method.`),fZ.forEach(t),Vpr=i(Fl),nx=n(Fl,"P",{});var mje=s(nx);Xpr=r(mje,"This class cannot be instantiated directly using "),EFe=n(mje,"CODE",{});var $vt=s(EFe);zpr=r($vt,"__init__()"),$vt.forEach(t),Qpr=r(mje," (throws an error)."),mje.forEach(t),Wpr=i(Fl),$t=n(Fl,"DIV",{class:!0});var n0=s($t);T(sx.$$.fragment,n0),Hpr=i(n0),CFe=n(n0,"P",{});var kvt=s(CFe);Upr=r(kvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),kvt.forEach(t),Jpr=i(n0),oc=n(n0,"P",{});var gZ=s(oc);Ypr=r(gZ,`Note:
Loading a model from its configuration file does `),wFe=n(gZ,"STRONG",{});var Svt=s(wFe);Kpr=r(Svt,"not"),Svt.forEach(t),Zpr=r(gZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=n(gZ,"A",{href:!0});var Rvt=s(gW);e_r=r(Rvt,"from_pretrained()"),Rvt.forEach(t),o_r=r(gZ," to load the model weights."),gZ.forEach(t),r_r=i(n0),T(BE.$$.fragment,n0),n0.forEach(t),t_r=i(Fl),$r=n(Fl,"DIV",{class:!0});var vl=s($r);T(lx.$$.fragment,vl),a_r=i(vl),AFe=n(vl,"P",{});var Bvt=s(AFe);n_r=r(Bvt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Bvt.forEach(t),s_r=i(vl),tn=n(vl,"P",{});var s0=s(tn);l_r=r(s0,"The model class to instantiate is selected based on the "),yFe=n(s0,"CODE",{});var Pvt=s(yFe);i_r=r(Pvt,"model_type"),Pvt.forEach(t),d_r=r(s0,` property of the config object (either
passed as an argument or loaded from `),LFe=n(s0,"CODE",{});var Ivt=s(LFe);c_r=r(Ivt,"pretrained_model_name_or_path"),Ivt.forEach(t),m_r=r(s0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xFe=n(s0,"CODE",{});var qvt=s(xFe);f_r=r(qvt,"pretrained_model_name_or_path"),qvt.forEach(t),g_r=r(s0,":"),s0.forEach(t),h_r=i(vl),ye=n(vl,"UL",{});var Re=s(ye);PE=n(Re,"LI",{});var rSe=s(PE);$Fe=n(rSe,"STRONG",{});var Nvt=s($Fe);u_r=r(Nvt,"bart"),Nvt.forEach(t),p_r=r(rSe," \u2014 "),hW=n(rSe,"A",{href:!0});var jvt=s(hW);__r=r(jvt,"TFBartForConditionalGeneration"),jvt.forEach(t),b_r=r(rSe," (BART model)"),rSe.forEach(t),F_r=i(Re),IE=n(Re,"LI",{});var tSe=s(IE);kFe=n(tSe,"STRONG",{});var Dvt=s(kFe);v_r=r(Dvt,"blenderbot"),Dvt.forEach(t),T_r=r(tSe," \u2014 "),uW=n(tSe,"A",{href:!0});var Gvt=s(uW);M_r=r(Gvt,"TFBlenderbotForConditionalGeneration"),Gvt.forEach(t),E_r=r(tSe," (Blenderbot model)"),tSe.forEach(t),C_r=i(Re),qE=n(Re,"LI",{});var aSe=s(qE);SFe=n(aSe,"STRONG",{});var Ovt=s(SFe);w_r=r(Ovt,"blenderbot-small"),Ovt.forEach(t),A_r=r(aSe," \u2014 "),pW=n(aSe,"A",{href:!0});var Vvt=s(pW);y_r=r(Vvt,"TFBlenderbotSmallForConditionalGeneration"),Vvt.forEach(t),L_r=r(aSe," (BlenderbotSmall model)"),aSe.forEach(t),x_r=i(Re),NE=n(Re,"LI",{});var nSe=s(NE);RFe=n(nSe,"STRONG",{});var Xvt=s(RFe);$_r=r(Xvt,"encoder-decoder"),Xvt.forEach(t),k_r=r(nSe," \u2014 "),_W=n(nSe,"A",{href:!0});var zvt=s(_W);S_r=r(zvt,"TFEncoderDecoderModel"),zvt.forEach(t),R_r=r(nSe," (Encoder decoder model)"),nSe.forEach(t),B_r=i(Re),jE=n(Re,"LI",{});var sSe=s(jE);BFe=n(sSe,"STRONG",{});var Qvt=s(BFe);P_r=r(Qvt,"led"),Qvt.forEach(t),I_r=r(sSe," \u2014 "),bW=n(sSe,"A",{href:!0});var Wvt=s(bW);q_r=r(Wvt,"TFLEDForConditionalGeneration"),Wvt.forEach(t),N_r=r(sSe," (LED model)"),sSe.forEach(t),j_r=i(Re),DE=n(Re,"LI",{});var lSe=s(DE);PFe=n(lSe,"STRONG",{});var Hvt=s(PFe);D_r=r(Hvt,"marian"),Hvt.forEach(t),G_r=r(lSe," \u2014 "),FW=n(lSe,"A",{href:!0});var Uvt=s(FW);O_r=r(Uvt,"TFMarianMTModel"),Uvt.forEach(t),V_r=r(lSe," (Marian model)"),lSe.forEach(t),X_r=i(Re),GE=n(Re,"LI",{});var iSe=s(GE);IFe=n(iSe,"STRONG",{});var Jvt=s(IFe);z_r=r(Jvt,"mbart"),Jvt.forEach(t),Q_r=r(iSe," \u2014 "),vW=n(iSe,"A",{href:!0});var Yvt=s(vW);W_r=r(Yvt,"TFMBartForConditionalGeneration"),Yvt.forEach(t),H_r=r(iSe," (mBART model)"),iSe.forEach(t),U_r=i(Re),OE=n(Re,"LI",{});var dSe=s(OE);qFe=n(dSe,"STRONG",{});var Kvt=s(qFe);J_r=r(Kvt,"mt5"),Kvt.forEach(t),Y_r=r(dSe," \u2014 "),TW=n(dSe,"A",{href:!0});var Zvt=s(TW);K_r=r(Zvt,"TFMT5ForConditionalGeneration"),Zvt.forEach(t),Z_r=r(dSe," (mT5 model)"),dSe.forEach(t),ebr=i(Re),VE=n(Re,"LI",{});var cSe=s(VE);NFe=n(cSe,"STRONG",{});var e1t=s(NFe);obr=r(e1t,"pegasus"),e1t.forEach(t),rbr=r(cSe," \u2014 "),MW=n(cSe,"A",{href:!0});var o1t=s(MW);tbr=r(o1t,"TFPegasusForConditionalGeneration"),o1t.forEach(t),abr=r(cSe," (Pegasus model)"),cSe.forEach(t),nbr=i(Re),XE=n(Re,"LI",{});var mSe=s(XE);jFe=n(mSe,"STRONG",{});var r1t=s(jFe);sbr=r(r1t,"t5"),r1t.forEach(t),lbr=r(mSe," \u2014 "),EW=n(mSe,"A",{href:!0});var t1t=s(EW);ibr=r(t1t,"TFT5ForConditionalGeneration"),t1t.forEach(t),dbr=r(mSe," (T5 model)"),mSe.forEach(t),Re.forEach(t),cbr=i(vl),T(zE.$$.fragment,vl),vl.forEach(t),Fl.forEach(t),sqe=i(m),rc=n(m,"H2",{class:!0});var fje=s(rc);QE=n(fje,"A",{id:!0,class:!0,href:!0});var a1t=s(QE);DFe=n(a1t,"SPAN",{});var n1t=s(DFe);T(ix.$$.fragment,n1t),n1t.forEach(t),a1t.forEach(t),mbr=i(fje),GFe=n(fje,"SPAN",{});var s1t=s(GFe);fbr=r(s1t,"TFAutoModelForSequenceClassification"),s1t.forEach(t),fje.forEach(t),lqe=i(m),tr=n(m,"DIV",{class:!0});var Tl=s(tr);T(dx.$$.fragment,Tl),gbr=i(Tl),tc=n(Tl,"P",{});var hZ=s(tc);hbr=r(hZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),CW=n(hZ,"A",{href:!0});var l1t=s(CW);ubr=r(l1t,"from_pretrained()"),l1t.forEach(t),pbr=r(hZ," class method or the "),wW=n(hZ,"A",{href:!0});var i1t=s(wW);_br=r(i1t,"from_config()"),i1t.forEach(t),bbr=r(hZ,` class
method.`),hZ.forEach(t),Fbr=i(Tl),cx=n(Tl,"P",{});var gje=s(cx);vbr=r(gje,"This class cannot be instantiated directly using "),OFe=n(gje,"CODE",{});var d1t=s(OFe);Tbr=r(d1t,"__init__()"),d1t.forEach(t),Mbr=r(gje," (throws an error)."),gje.forEach(t),Ebr=i(Tl),kt=n(Tl,"DIV",{class:!0});var l0=s(kt);T(mx.$$.fragment,l0),Cbr=i(l0),VFe=n(l0,"P",{});var c1t=s(VFe);wbr=r(c1t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),c1t.forEach(t),Abr=i(l0),ac=n(l0,"P",{});var uZ=s(ac);ybr=r(uZ,`Note:
Loading a model from its configuration file does `),XFe=n(uZ,"STRONG",{});var m1t=s(XFe);Lbr=r(m1t,"not"),m1t.forEach(t),xbr=r(uZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=n(uZ,"A",{href:!0});var f1t=s(AW);$br=r(f1t,"from_pretrained()"),f1t.forEach(t),kbr=r(uZ," to load the model weights."),uZ.forEach(t),Sbr=i(l0),T(WE.$$.fragment,l0),l0.forEach(t),Rbr=i(Tl),kr=n(Tl,"DIV",{class:!0});var Ml=s(kr);T(fx.$$.fragment,Ml),Bbr=i(Ml),zFe=n(Ml,"P",{});var g1t=s(zFe);Pbr=r(g1t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),g1t.forEach(t),Ibr=i(Ml),an=n(Ml,"P",{});var i0=s(an);qbr=r(i0,"The model class to instantiate is selected based on the "),QFe=n(i0,"CODE",{});var h1t=s(QFe);Nbr=r(h1t,"model_type"),h1t.forEach(t),jbr=r(i0,` property of the config object (either
passed as an argument or loaded from `),WFe=n(i0,"CODE",{});var u1t=s(WFe);Dbr=r(u1t,"pretrained_model_name_or_path"),u1t.forEach(t),Gbr=r(i0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HFe=n(i0,"CODE",{});var p1t=s(HFe);Obr=r(p1t,"pretrained_model_name_or_path"),p1t.forEach(t),Vbr=r(i0,":"),i0.forEach(t),Xbr=i(Ml),Z=n(Ml,"UL",{});var te=s(Z);HE=n(te,"LI",{});var fSe=s(HE);UFe=n(fSe,"STRONG",{});var _1t=s(UFe);zbr=r(_1t,"albert"),_1t.forEach(t),Qbr=r(fSe," \u2014 "),yW=n(fSe,"A",{href:!0});var b1t=s(yW);Wbr=r(b1t,"TFAlbertForSequenceClassification"),b1t.forEach(t),Hbr=r(fSe," (ALBERT model)"),fSe.forEach(t),Ubr=i(te),UE=n(te,"LI",{});var gSe=s(UE);JFe=n(gSe,"STRONG",{});var F1t=s(JFe);Jbr=r(F1t,"bert"),F1t.forEach(t),Ybr=r(gSe," \u2014 "),LW=n(gSe,"A",{href:!0});var v1t=s(LW);Kbr=r(v1t,"TFBertForSequenceClassification"),v1t.forEach(t),Zbr=r(gSe," (BERT model)"),gSe.forEach(t),e2r=i(te),JE=n(te,"LI",{});var hSe=s(JE);YFe=n(hSe,"STRONG",{});var T1t=s(YFe);o2r=r(T1t,"camembert"),T1t.forEach(t),r2r=r(hSe," \u2014 "),xW=n(hSe,"A",{href:!0});var M1t=s(xW);t2r=r(M1t,"TFCamembertForSequenceClassification"),M1t.forEach(t),a2r=r(hSe," (CamemBERT model)"),hSe.forEach(t),n2r=i(te),YE=n(te,"LI",{});var uSe=s(YE);KFe=n(uSe,"STRONG",{});var E1t=s(KFe);s2r=r(E1t,"convbert"),E1t.forEach(t),l2r=r(uSe," \u2014 "),$W=n(uSe,"A",{href:!0});var C1t=s($W);i2r=r(C1t,"TFConvBertForSequenceClassification"),C1t.forEach(t),d2r=r(uSe," (ConvBERT model)"),uSe.forEach(t),c2r=i(te),KE=n(te,"LI",{});var pSe=s(KE);ZFe=n(pSe,"STRONG",{});var w1t=s(ZFe);m2r=r(w1t,"ctrl"),w1t.forEach(t),f2r=r(pSe," \u2014 "),kW=n(pSe,"A",{href:!0});var A1t=s(kW);g2r=r(A1t,"TFCTRLForSequenceClassification"),A1t.forEach(t),h2r=r(pSe," (CTRL model)"),pSe.forEach(t),u2r=i(te),ZE=n(te,"LI",{});var _Se=s(ZE);eve=n(_Se,"STRONG",{});var y1t=s(eve);p2r=r(y1t,"deberta"),y1t.forEach(t),_2r=r(_Se," \u2014 "),SW=n(_Se,"A",{href:!0});var L1t=s(SW);b2r=r(L1t,"TFDebertaForSequenceClassification"),L1t.forEach(t),F2r=r(_Se," (DeBERTa model)"),_Se.forEach(t),v2r=i(te),e5=n(te,"LI",{});var bSe=s(e5);ove=n(bSe,"STRONG",{});var x1t=s(ove);T2r=r(x1t,"deberta-v2"),x1t.forEach(t),M2r=r(bSe," \u2014 "),RW=n(bSe,"A",{href:!0});var $1t=s(RW);E2r=r($1t,"TFDebertaV2ForSequenceClassification"),$1t.forEach(t),C2r=r(bSe," (DeBERTa-v2 model)"),bSe.forEach(t),w2r=i(te),o5=n(te,"LI",{});var FSe=s(o5);rve=n(FSe,"STRONG",{});var k1t=s(rve);A2r=r(k1t,"distilbert"),k1t.forEach(t),y2r=r(FSe," \u2014 "),BW=n(FSe,"A",{href:!0});var S1t=s(BW);L2r=r(S1t,"TFDistilBertForSequenceClassification"),S1t.forEach(t),x2r=r(FSe," (DistilBERT model)"),FSe.forEach(t),$2r=i(te),r5=n(te,"LI",{});var vSe=s(r5);tve=n(vSe,"STRONG",{});var R1t=s(tve);k2r=r(R1t,"electra"),R1t.forEach(t),S2r=r(vSe," \u2014 "),PW=n(vSe,"A",{href:!0});var B1t=s(PW);R2r=r(B1t,"TFElectraForSequenceClassification"),B1t.forEach(t),B2r=r(vSe," (ELECTRA model)"),vSe.forEach(t),P2r=i(te),t5=n(te,"LI",{});var TSe=s(t5);ave=n(TSe,"STRONG",{});var P1t=s(ave);I2r=r(P1t,"flaubert"),P1t.forEach(t),q2r=r(TSe," \u2014 "),IW=n(TSe,"A",{href:!0});var I1t=s(IW);N2r=r(I1t,"TFFlaubertForSequenceClassification"),I1t.forEach(t),j2r=r(TSe," (FlauBERT model)"),TSe.forEach(t),D2r=i(te),a5=n(te,"LI",{});var MSe=s(a5);nve=n(MSe,"STRONG",{});var q1t=s(nve);G2r=r(q1t,"funnel"),q1t.forEach(t),O2r=r(MSe," \u2014 "),qW=n(MSe,"A",{href:!0});var N1t=s(qW);V2r=r(N1t,"TFFunnelForSequenceClassification"),N1t.forEach(t),X2r=r(MSe," (Funnel Transformer model)"),MSe.forEach(t),z2r=i(te),n5=n(te,"LI",{});var ESe=s(n5);sve=n(ESe,"STRONG",{});var j1t=s(sve);Q2r=r(j1t,"gpt2"),j1t.forEach(t),W2r=r(ESe," \u2014 "),NW=n(ESe,"A",{href:!0});var D1t=s(NW);H2r=r(D1t,"TFGPT2ForSequenceClassification"),D1t.forEach(t),U2r=r(ESe," (OpenAI GPT-2 model)"),ESe.forEach(t),J2r=i(te),s5=n(te,"LI",{});var CSe=s(s5);lve=n(CSe,"STRONG",{});var G1t=s(lve);Y2r=r(G1t,"gptj"),G1t.forEach(t),K2r=r(CSe," \u2014 "),jW=n(CSe,"A",{href:!0});var O1t=s(jW);Z2r=r(O1t,"TFGPTJForSequenceClassification"),O1t.forEach(t),eFr=r(CSe," (GPT-J model)"),CSe.forEach(t),oFr=i(te),l5=n(te,"LI",{});var wSe=s(l5);ive=n(wSe,"STRONG",{});var V1t=s(ive);rFr=r(V1t,"layoutlm"),V1t.forEach(t),tFr=r(wSe," \u2014 "),DW=n(wSe,"A",{href:!0});var X1t=s(DW);aFr=r(X1t,"TFLayoutLMForSequenceClassification"),X1t.forEach(t),nFr=r(wSe," (LayoutLM model)"),wSe.forEach(t),sFr=i(te),i5=n(te,"LI",{});var ASe=s(i5);dve=n(ASe,"STRONG",{});var z1t=s(dve);lFr=r(z1t,"longformer"),z1t.forEach(t),iFr=r(ASe," \u2014 "),GW=n(ASe,"A",{href:!0});var Q1t=s(GW);dFr=r(Q1t,"TFLongformerForSequenceClassification"),Q1t.forEach(t),cFr=r(ASe," (Longformer model)"),ASe.forEach(t),mFr=i(te),d5=n(te,"LI",{});var ySe=s(d5);cve=n(ySe,"STRONG",{});var W1t=s(cve);fFr=r(W1t,"mobilebert"),W1t.forEach(t),gFr=r(ySe," \u2014 "),OW=n(ySe,"A",{href:!0});var H1t=s(OW);hFr=r(H1t,"TFMobileBertForSequenceClassification"),H1t.forEach(t),uFr=r(ySe," (MobileBERT model)"),ySe.forEach(t),pFr=i(te),c5=n(te,"LI",{});var LSe=s(c5);mve=n(LSe,"STRONG",{});var U1t=s(mve);_Fr=r(U1t,"mpnet"),U1t.forEach(t),bFr=r(LSe," \u2014 "),VW=n(LSe,"A",{href:!0});var J1t=s(VW);FFr=r(J1t,"TFMPNetForSequenceClassification"),J1t.forEach(t),vFr=r(LSe," (MPNet model)"),LSe.forEach(t),TFr=i(te),m5=n(te,"LI",{});var xSe=s(m5);fve=n(xSe,"STRONG",{});var Y1t=s(fve);MFr=r(Y1t,"openai-gpt"),Y1t.forEach(t),EFr=r(xSe," \u2014 "),XW=n(xSe,"A",{href:!0});var K1t=s(XW);CFr=r(K1t,"TFOpenAIGPTForSequenceClassification"),K1t.forEach(t),wFr=r(xSe," (OpenAI GPT model)"),xSe.forEach(t),AFr=i(te),f5=n(te,"LI",{});var $Se=s(f5);gve=n($Se,"STRONG",{});var Z1t=s(gve);yFr=r(Z1t,"rembert"),Z1t.forEach(t),LFr=r($Se," \u2014 "),zW=n($Se,"A",{href:!0});var eTt=s(zW);xFr=r(eTt,"TFRemBertForSequenceClassification"),eTt.forEach(t),$Fr=r($Se," (RemBERT model)"),$Se.forEach(t),kFr=i(te),g5=n(te,"LI",{});var kSe=s(g5);hve=n(kSe,"STRONG",{});var oTt=s(hve);SFr=r(oTt,"roberta"),oTt.forEach(t),RFr=r(kSe," \u2014 "),QW=n(kSe,"A",{href:!0});var rTt=s(QW);BFr=r(rTt,"TFRobertaForSequenceClassification"),rTt.forEach(t),PFr=r(kSe," (RoBERTa model)"),kSe.forEach(t),IFr=i(te),h5=n(te,"LI",{});var SSe=s(h5);uve=n(SSe,"STRONG",{});var tTt=s(uve);qFr=r(tTt,"roformer"),tTt.forEach(t),NFr=r(SSe," \u2014 "),WW=n(SSe,"A",{href:!0});var aTt=s(WW);jFr=r(aTt,"TFRoFormerForSequenceClassification"),aTt.forEach(t),DFr=r(SSe," (RoFormer model)"),SSe.forEach(t),GFr=i(te),u5=n(te,"LI",{});var RSe=s(u5);pve=n(RSe,"STRONG",{});var nTt=s(pve);OFr=r(nTt,"tapas"),nTt.forEach(t),VFr=r(RSe," \u2014 "),HW=n(RSe,"A",{href:!0});var sTt=s(HW);XFr=r(sTt,"TFTapasForSequenceClassification"),sTt.forEach(t),zFr=r(RSe," (TAPAS model)"),RSe.forEach(t),QFr=i(te),p5=n(te,"LI",{});var BSe=s(p5);_ve=n(BSe,"STRONG",{});var lTt=s(_ve);WFr=r(lTt,"transfo-xl"),lTt.forEach(t),HFr=r(BSe," \u2014 "),UW=n(BSe,"A",{href:!0});var iTt=s(UW);UFr=r(iTt,"TFTransfoXLForSequenceClassification"),iTt.forEach(t),JFr=r(BSe," (Transformer-XL model)"),BSe.forEach(t),YFr=i(te),_5=n(te,"LI",{});var PSe=s(_5);bve=n(PSe,"STRONG",{});var dTt=s(bve);KFr=r(dTt,"xlm"),dTt.forEach(t),ZFr=r(PSe," \u2014 "),JW=n(PSe,"A",{href:!0});var cTt=s(JW);evr=r(cTt,"TFXLMForSequenceClassification"),cTt.forEach(t),ovr=r(PSe," (XLM model)"),PSe.forEach(t),rvr=i(te),b5=n(te,"LI",{});var ISe=s(b5);Fve=n(ISe,"STRONG",{});var mTt=s(Fve);tvr=r(mTt,"xlm-roberta"),mTt.forEach(t),avr=r(ISe," \u2014 "),YW=n(ISe,"A",{href:!0});var fTt=s(YW);nvr=r(fTt,"TFXLMRobertaForSequenceClassification"),fTt.forEach(t),svr=r(ISe," (XLM-RoBERTa model)"),ISe.forEach(t),lvr=i(te),F5=n(te,"LI",{});var qSe=s(F5);vve=n(qSe,"STRONG",{});var gTt=s(vve);ivr=r(gTt,"xlnet"),gTt.forEach(t),dvr=r(qSe," \u2014 "),KW=n(qSe,"A",{href:!0});var hTt=s(KW);cvr=r(hTt,"TFXLNetForSequenceClassification"),hTt.forEach(t),mvr=r(qSe," (XLNet model)"),qSe.forEach(t),te.forEach(t),fvr=i(Ml),T(v5.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),iqe=i(m),nc=n(m,"H2",{class:!0});var hje=s(nc);T5=n(hje,"A",{id:!0,class:!0,href:!0});var uTt=s(T5);Tve=n(uTt,"SPAN",{});var pTt=s(Tve);T(gx.$$.fragment,pTt),pTt.forEach(t),uTt.forEach(t),gvr=i(hje),Mve=n(hje,"SPAN",{});var _Tt=s(Mve);hvr=r(_Tt,"TFAutoModelForMultipleChoice"),_Tt.forEach(t),hje.forEach(t),dqe=i(m),ar=n(m,"DIV",{class:!0});var El=s(ar);T(hx.$$.fragment,El),uvr=i(El),sc=n(El,"P",{});var pZ=s(sc);pvr=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ZW=n(pZ,"A",{href:!0});var bTt=s(ZW);_vr=r(bTt,"from_pretrained()"),bTt.forEach(t),bvr=r(pZ," class method or the "),eH=n(pZ,"A",{href:!0});var FTt=s(eH);Fvr=r(FTt,"from_config()"),FTt.forEach(t),vvr=r(pZ,` class
method.`),pZ.forEach(t),Tvr=i(El),ux=n(El,"P",{});var uje=s(ux);Mvr=r(uje,"This class cannot be instantiated directly using "),Eve=n(uje,"CODE",{});var vTt=s(Eve);Evr=r(vTt,"__init__()"),vTt.forEach(t),Cvr=r(uje," (throws an error)."),uje.forEach(t),wvr=i(El),St=n(El,"DIV",{class:!0});var d0=s(St);T(px.$$.fragment,d0),Avr=i(d0),Cve=n(d0,"P",{});var TTt=s(Cve);yvr=r(TTt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),TTt.forEach(t),Lvr=i(d0),lc=n(d0,"P",{});var _Z=s(lc);xvr=r(_Z,`Note:
Loading a model from its configuration file does `),wve=n(_Z,"STRONG",{});var MTt=s(wve);$vr=r(MTt,"not"),MTt.forEach(t),kvr=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),oH=n(_Z,"A",{href:!0});var ETt=s(oH);Svr=r(ETt,"from_pretrained()"),ETt.forEach(t),Rvr=r(_Z," to load the model weights."),_Z.forEach(t),Bvr=i(d0),T(M5.$$.fragment,d0),d0.forEach(t),Pvr=i(El),Sr=n(El,"DIV",{class:!0});var Cl=s(Sr);T(_x.$$.fragment,Cl),Ivr=i(Cl),Ave=n(Cl,"P",{});var CTt=s(Ave);qvr=r(CTt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),CTt.forEach(t),Nvr=i(Cl),nn=n(Cl,"P",{});var c0=s(nn);jvr=r(c0,"The model class to instantiate is selected based on the "),yve=n(c0,"CODE",{});var wTt=s(yve);Dvr=r(wTt,"model_type"),wTt.forEach(t),Gvr=r(c0,` property of the config object (either
passed as an argument or loaded from `),Lve=n(c0,"CODE",{});var ATt=s(Lve);Ovr=r(ATt,"pretrained_model_name_or_path"),ATt.forEach(t),Vvr=r(c0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=n(c0,"CODE",{});var yTt=s(xve);Xvr=r(yTt,"pretrained_model_name_or_path"),yTt.forEach(t),zvr=r(c0,":"),c0.forEach(t),Qvr=i(Cl),ue=n(Cl,"UL",{});var _e=s(ue);E5=n(_e,"LI",{});var NSe=s(E5);$ve=n(NSe,"STRONG",{});var LTt=s($ve);Wvr=r(LTt,"albert"),LTt.forEach(t),Hvr=r(NSe," \u2014 "),rH=n(NSe,"A",{href:!0});var xTt=s(rH);Uvr=r(xTt,"TFAlbertForMultipleChoice"),xTt.forEach(t),Jvr=r(NSe," (ALBERT model)"),NSe.forEach(t),Yvr=i(_e),C5=n(_e,"LI",{});var jSe=s(C5);kve=n(jSe,"STRONG",{});var $Tt=s(kve);Kvr=r($Tt,"bert"),$Tt.forEach(t),Zvr=r(jSe," \u2014 "),tH=n(jSe,"A",{href:!0});var kTt=s(tH);e1r=r(kTt,"TFBertForMultipleChoice"),kTt.forEach(t),o1r=r(jSe," (BERT model)"),jSe.forEach(t),r1r=i(_e),w5=n(_e,"LI",{});var DSe=s(w5);Sve=n(DSe,"STRONG",{});var STt=s(Sve);t1r=r(STt,"camembert"),STt.forEach(t),a1r=r(DSe," \u2014 "),aH=n(DSe,"A",{href:!0});var RTt=s(aH);n1r=r(RTt,"TFCamembertForMultipleChoice"),RTt.forEach(t),s1r=r(DSe," (CamemBERT model)"),DSe.forEach(t),l1r=i(_e),A5=n(_e,"LI",{});var GSe=s(A5);Rve=n(GSe,"STRONG",{});var BTt=s(Rve);i1r=r(BTt,"convbert"),BTt.forEach(t),d1r=r(GSe," \u2014 "),nH=n(GSe,"A",{href:!0});var PTt=s(nH);c1r=r(PTt,"TFConvBertForMultipleChoice"),PTt.forEach(t),m1r=r(GSe," (ConvBERT model)"),GSe.forEach(t),f1r=i(_e),y5=n(_e,"LI",{});var OSe=s(y5);Bve=n(OSe,"STRONG",{});var ITt=s(Bve);g1r=r(ITt,"distilbert"),ITt.forEach(t),h1r=r(OSe," \u2014 "),sH=n(OSe,"A",{href:!0});var qTt=s(sH);u1r=r(qTt,"TFDistilBertForMultipleChoice"),qTt.forEach(t),p1r=r(OSe," (DistilBERT model)"),OSe.forEach(t),_1r=i(_e),L5=n(_e,"LI",{});var VSe=s(L5);Pve=n(VSe,"STRONG",{});var NTt=s(Pve);b1r=r(NTt,"electra"),NTt.forEach(t),F1r=r(VSe," \u2014 "),lH=n(VSe,"A",{href:!0});var jTt=s(lH);v1r=r(jTt,"TFElectraForMultipleChoice"),jTt.forEach(t),T1r=r(VSe," (ELECTRA model)"),VSe.forEach(t),M1r=i(_e),x5=n(_e,"LI",{});var XSe=s(x5);Ive=n(XSe,"STRONG",{});var DTt=s(Ive);E1r=r(DTt,"flaubert"),DTt.forEach(t),C1r=r(XSe," \u2014 "),iH=n(XSe,"A",{href:!0});var GTt=s(iH);w1r=r(GTt,"TFFlaubertForMultipleChoice"),GTt.forEach(t),A1r=r(XSe," (FlauBERT model)"),XSe.forEach(t),y1r=i(_e),$5=n(_e,"LI",{});var zSe=s($5);qve=n(zSe,"STRONG",{});var OTt=s(qve);L1r=r(OTt,"funnel"),OTt.forEach(t),x1r=r(zSe," \u2014 "),dH=n(zSe,"A",{href:!0});var VTt=s(dH);$1r=r(VTt,"TFFunnelForMultipleChoice"),VTt.forEach(t),k1r=r(zSe," (Funnel Transformer model)"),zSe.forEach(t),S1r=i(_e),k5=n(_e,"LI",{});var QSe=s(k5);Nve=n(QSe,"STRONG",{});var XTt=s(Nve);R1r=r(XTt,"longformer"),XTt.forEach(t),B1r=r(QSe," \u2014 "),cH=n(QSe,"A",{href:!0});var zTt=s(cH);P1r=r(zTt,"TFLongformerForMultipleChoice"),zTt.forEach(t),I1r=r(QSe," (Longformer model)"),QSe.forEach(t),q1r=i(_e),S5=n(_e,"LI",{});var WSe=s(S5);jve=n(WSe,"STRONG",{});var QTt=s(jve);N1r=r(QTt,"mobilebert"),QTt.forEach(t),j1r=r(WSe," \u2014 "),mH=n(WSe,"A",{href:!0});var WTt=s(mH);D1r=r(WTt,"TFMobileBertForMultipleChoice"),WTt.forEach(t),G1r=r(WSe," (MobileBERT model)"),WSe.forEach(t),O1r=i(_e),R5=n(_e,"LI",{});var HSe=s(R5);Dve=n(HSe,"STRONG",{});var HTt=s(Dve);V1r=r(HTt,"mpnet"),HTt.forEach(t),X1r=r(HSe," \u2014 "),fH=n(HSe,"A",{href:!0});var UTt=s(fH);z1r=r(UTt,"TFMPNetForMultipleChoice"),UTt.forEach(t),Q1r=r(HSe," (MPNet model)"),HSe.forEach(t),W1r=i(_e),B5=n(_e,"LI",{});var USe=s(B5);Gve=n(USe,"STRONG",{});var JTt=s(Gve);H1r=r(JTt,"rembert"),JTt.forEach(t),U1r=r(USe," \u2014 "),gH=n(USe,"A",{href:!0});var YTt=s(gH);J1r=r(YTt,"TFRemBertForMultipleChoice"),YTt.forEach(t),Y1r=r(USe," (RemBERT model)"),USe.forEach(t),K1r=i(_e),P5=n(_e,"LI",{});var JSe=s(P5);Ove=n(JSe,"STRONG",{});var KTt=s(Ove);Z1r=r(KTt,"roberta"),KTt.forEach(t),eTr=r(JSe," \u2014 "),hH=n(JSe,"A",{href:!0});var ZTt=s(hH);oTr=r(ZTt,"TFRobertaForMultipleChoice"),ZTt.forEach(t),rTr=r(JSe," (RoBERTa model)"),JSe.forEach(t),tTr=i(_e),I5=n(_e,"LI",{});var YSe=s(I5);Vve=n(YSe,"STRONG",{});var eMt=s(Vve);aTr=r(eMt,"roformer"),eMt.forEach(t),nTr=r(YSe," \u2014 "),uH=n(YSe,"A",{href:!0});var oMt=s(uH);sTr=r(oMt,"TFRoFormerForMultipleChoice"),oMt.forEach(t),lTr=r(YSe," (RoFormer model)"),YSe.forEach(t),iTr=i(_e),q5=n(_e,"LI",{});var KSe=s(q5);Xve=n(KSe,"STRONG",{});var rMt=s(Xve);dTr=r(rMt,"xlm"),rMt.forEach(t),cTr=r(KSe," \u2014 "),pH=n(KSe,"A",{href:!0});var tMt=s(pH);mTr=r(tMt,"TFXLMForMultipleChoice"),tMt.forEach(t),fTr=r(KSe," (XLM model)"),KSe.forEach(t),gTr=i(_e),N5=n(_e,"LI",{});var ZSe=s(N5);zve=n(ZSe,"STRONG",{});var aMt=s(zve);hTr=r(aMt,"xlm-roberta"),aMt.forEach(t),uTr=r(ZSe," \u2014 "),_H=n(ZSe,"A",{href:!0});var nMt=s(_H);pTr=r(nMt,"TFXLMRobertaForMultipleChoice"),nMt.forEach(t),_Tr=r(ZSe," (XLM-RoBERTa model)"),ZSe.forEach(t),bTr=i(_e),j5=n(_e,"LI",{});var eRe=s(j5);Qve=n(eRe,"STRONG",{});var sMt=s(Qve);FTr=r(sMt,"xlnet"),sMt.forEach(t),vTr=r(eRe," \u2014 "),bH=n(eRe,"A",{href:!0});var lMt=s(bH);TTr=r(lMt,"TFXLNetForMultipleChoice"),lMt.forEach(t),MTr=r(eRe," (XLNet model)"),eRe.forEach(t),_e.forEach(t),ETr=i(Cl),T(D5.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),cqe=i(m),ic=n(m,"H2",{class:!0});var pje=s(ic);G5=n(pje,"A",{id:!0,class:!0,href:!0});var iMt=s(G5);Wve=n(iMt,"SPAN",{});var dMt=s(Wve);T(bx.$$.fragment,dMt),dMt.forEach(t),iMt.forEach(t),CTr=i(pje),Hve=n(pje,"SPAN",{});var cMt=s(Hve);wTr=r(cMt,"TFAutoModelForNextSentencePrediction"),cMt.forEach(t),pje.forEach(t),mqe=i(m),nr=n(m,"DIV",{class:!0});var wl=s(nr);T(Fx.$$.fragment,wl),ATr=i(wl),dc=n(wl,"P",{});var bZ=s(dc);yTr=r(bZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),FH=n(bZ,"A",{href:!0});var mMt=s(FH);LTr=r(mMt,"from_pretrained()"),mMt.forEach(t),xTr=r(bZ," class method or the "),vH=n(bZ,"A",{href:!0});var fMt=s(vH);$Tr=r(fMt,"from_config()"),fMt.forEach(t),kTr=r(bZ,` class
method.`),bZ.forEach(t),STr=i(wl),vx=n(wl,"P",{});var _je=s(vx);RTr=r(_je,"This class cannot be instantiated directly using "),Uve=n(_je,"CODE",{});var gMt=s(Uve);BTr=r(gMt,"__init__()"),gMt.forEach(t),PTr=r(_je," (throws an error)."),_je.forEach(t),ITr=i(wl),Rt=n(wl,"DIV",{class:!0});var m0=s(Rt);T(Tx.$$.fragment,m0),qTr=i(m0),Jve=n(m0,"P",{});var hMt=s(Jve);NTr=r(hMt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),hMt.forEach(t),jTr=i(m0),cc=n(m0,"P",{});var FZ=s(cc);DTr=r(FZ,`Note:
Loading a model from its configuration file does `),Yve=n(FZ,"STRONG",{});var uMt=s(Yve);GTr=r(uMt,"not"),uMt.forEach(t),OTr=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TH=n(FZ,"A",{href:!0});var pMt=s(TH);VTr=r(pMt,"from_pretrained()"),pMt.forEach(t),XTr=r(FZ," to load the model weights."),FZ.forEach(t),zTr=i(m0),T(O5.$$.fragment,m0),m0.forEach(t),QTr=i(wl),Rr=n(wl,"DIV",{class:!0});var Al=s(Rr);T(Mx.$$.fragment,Al),WTr=i(Al),Kve=n(Al,"P",{});var _Mt=s(Kve);HTr=r(_Mt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),_Mt.forEach(t),UTr=i(Al),sn=n(Al,"P",{});var f0=s(sn);JTr=r(f0,"The model class to instantiate is selected based on the "),Zve=n(f0,"CODE",{});var bMt=s(Zve);YTr=r(bMt,"model_type"),bMt.forEach(t),KTr=r(f0,` property of the config object (either
passed as an argument or loaded from `),e1e=n(f0,"CODE",{});var FMt=s(e1e);ZTr=r(FMt,"pretrained_model_name_or_path"),FMt.forEach(t),eMr=r(f0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o1e=n(f0,"CODE",{});var vMt=s(o1e);oMr=r(vMt,"pretrained_model_name_or_path"),vMt.forEach(t),rMr=r(f0,":"),f0.forEach(t),tMr=i(Al),Ex=n(Al,"UL",{});var bje=s(Ex);V5=n(bje,"LI",{});var oRe=s(V5);r1e=n(oRe,"STRONG",{});var TMt=s(r1e);aMr=r(TMt,"bert"),TMt.forEach(t),nMr=r(oRe," \u2014 "),MH=n(oRe,"A",{href:!0});var MMt=s(MH);sMr=r(MMt,"TFBertForNextSentencePrediction"),MMt.forEach(t),lMr=r(oRe," (BERT model)"),oRe.forEach(t),iMr=i(bje),X5=n(bje,"LI",{});var rRe=s(X5);t1e=n(rRe,"STRONG",{});var EMt=s(t1e);dMr=r(EMt,"mobilebert"),EMt.forEach(t),cMr=r(rRe," \u2014 "),EH=n(rRe,"A",{href:!0});var CMt=s(EH);mMr=r(CMt,"TFMobileBertForNextSentencePrediction"),CMt.forEach(t),fMr=r(rRe," (MobileBERT model)"),rRe.forEach(t),bje.forEach(t),gMr=i(Al),T(z5.$$.fragment,Al),Al.forEach(t),wl.forEach(t),fqe=i(m),mc=n(m,"H2",{class:!0});var Fje=s(mc);Q5=n(Fje,"A",{id:!0,class:!0,href:!0});var wMt=s(Q5);a1e=n(wMt,"SPAN",{});var AMt=s(a1e);T(Cx.$$.fragment,AMt),AMt.forEach(t),wMt.forEach(t),hMr=i(Fje),n1e=n(Fje,"SPAN",{});var yMt=s(n1e);uMr=r(yMt,"TFAutoModelForTableQuestionAnswering"),yMt.forEach(t),Fje.forEach(t),gqe=i(m),sr=n(m,"DIV",{class:!0});var yl=s(sr);T(wx.$$.fragment,yl),pMr=i(yl),fc=n(yl,"P",{});var vZ=s(fc);_Mr=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),CH=n(vZ,"A",{href:!0});var LMt=s(CH);bMr=r(LMt,"from_pretrained()"),LMt.forEach(t),FMr=r(vZ," class method or the "),wH=n(vZ,"A",{href:!0});var xMt=s(wH);vMr=r(xMt,"from_config()"),xMt.forEach(t),TMr=r(vZ,` class
method.`),vZ.forEach(t),MMr=i(yl),Ax=n(yl,"P",{});var vje=s(Ax);EMr=r(vje,"This class cannot be instantiated directly using "),s1e=n(vje,"CODE",{});var $Mt=s(s1e);CMr=r($Mt,"__init__()"),$Mt.forEach(t),wMr=r(vje," (throws an error)."),vje.forEach(t),AMr=i(yl),Bt=n(yl,"DIV",{class:!0});var g0=s(Bt);T(yx.$$.fragment,g0),yMr=i(g0),l1e=n(g0,"P",{});var kMt=s(l1e);LMr=r(kMt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),kMt.forEach(t),xMr=i(g0),gc=n(g0,"P",{});var TZ=s(gc);$Mr=r(TZ,`Note:
Loading a model from its configuration file does `),i1e=n(TZ,"STRONG",{});var SMt=s(i1e);kMr=r(SMt,"not"),SMt.forEach(t),SMr=r(TZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AH=n(TZ,"A",{href:!0});var RMt=s(AH);RMr=r(RMt,"from_pretrained()"),RMt.forEach(t),BMr=r(TZ," to load the model weights."),TZ.forEach(t),PMr=i(g0),T(W5.$$.fragment,g0),g0.forEach(t),IMr=i(yl),Br=n(yl,"DIV",{class:!0});var Ll=s(Br);T(Lx.$$.fragment,Ll),qMr=i(Ll),d1e=n(Ll,"P",{});var BMt=s(d1e);NMr=r(BMt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),BMt.forEach(t),jMr=i(Ll),ln=n(Ll,"P",{});var h0=s(ln);DMr=r(h0,"The model class to instantiate is selected based on the "),c1e=n(h0,"CODE",{});var PMt=s(c1e);GMr=r(PMt,"model_type"),PMt.forEach(t),OMr=r(h0,` property of the config object (either
passed as an argument or loaded from `),m1e=n(h0,"CODE",{});var IMt=s(m1e);VMr=r(IMt,"pretrained_model_name_or_path"),IMt.forEach(t),XMr=r(h0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f1e=n(h0,"CODE",{});var qMt=s(f1e);zMr=r(qMt,"pretrained_model_name_or_path"),qMt.forEach(t),QMr=r(h0,":"),h0.forEach(t),WMr=i(Ll),g1e=n(Ll,"UL",{});var NMt=s(g1e);H5=n(NMt,"LI",{});var tRe=s(H5);h1e=n(tRe,"STRONG",{});var jMt=s(h1e);HMr=r(jMt,"tapas"),jMt.forEach(t),UMr=r(tRe," \u2014 "),yH=n(tRe,"A",{href:!0});var DMt=s(yH);JMr=r(DMt,"TFTapasForQuestionAnswering"),DMt.forEach(t),YMr=r(tRe," (TAPAS model)"),tRe.forEach(t),NMt.forEach(t),KMr=i(Ll),T(U5.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),hqe=i(m),hc=n(m,"H2",{class:!0});var Tje=s(hc);J5=n(Tje,"A",{id:!0,class:!0,href:!0});var GMt=s(J5);u1e=n(GMt,"SPAN",{});var OMt=s(u1e);T(xx.$$.fragment,OMt),OMt.forEach(t),GMt.forEach(t),ZMr=i(Tje),p1e=n(Tje,"SPAN",{});var VMt=s(p1e);e4r=r(VMt,"TFAutoModelForTokenClassification"),VMt.forEach(t),Tje.forEach(t),uqe=i(m),lr=n(m,"DIV",{class:!0});var xl=s(lr);T($x.$$.fragment,xl),o4r=i(xl),uc=n(xl,"P",{});var MZ=s(uc);r4r=r(MZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),LH=n(MZ,"A",{href:!0});var XMt=s(LH);t4r=r(XMt,"from_pretrained()"),XMt.forEach(t),a4r=r(MZ," class method or the "),xH=n(MZ,"A",{href:!0});var zMt=s(xH);n4r=r(zMt,"from_config()"),zMt.forEach(t),s4r=r(MZ,` class
method.`),MZ.forEach(t),l4r=i(xl),kx=n(xl,"P",{});var Mje=s(kx);i4r=r(Mje,"This class cannot be instantiated directly using "),_1e=n(Mje,"CODE",{});var QMt=s(_1e);d4r=r(QMt,"__init__()"),QMt.forEach(t),c4r=r(Mje," (throws an error)."),Mje.forEach(t),m4r=i(xl),Pt=n(xl,"DIV",{class:!0});var u0=s(Pt);T(Sx.$$.fragment,u0),f4r=i(u0),b1e=n(u0,"P",{});var WMt=s(b1e);g4r=r(WMt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),WMt.forEach(t),h4r=i(u0),pc=n(u0,"P",{});var EZ=s(pc);u4r=r(EZ,`Note:
Loading a model from its configuration file does `),F1e=n(EZ,"STRONG",{});var HMt=s(F1e);p4r=r(HMt,"not"),HMt.forEach(t),_4r=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=n(EZ,"A",{href:!0});var UMt=s($H);b4r=r(UMt,"from_pretrained()"),UMt.forEach(t),F4r=r(EZ," to load the model weights."),EZ.forEach(t),v4r=i(u0),T(Y5.$$.fragment,u0),u0.forEach(t),T4r=i(xl),Pr=n(xl,"DIV",{class:!0});var $l=s(Pr);T(Rx.$$.fragment,$l),M4r=i($l),v1e=n($l,"P",{});var JMt=s(v1e);E4r=r(JMt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),JMt.forEach(t),C4r=i($l),dn=n($l,"P",{});var p0=s(dn);w4r=r(p0,"The model class to instantiate is selected based on the "),T1e=n(p0,"CODE",{});var YMt=s(T1e);A4r=r(YMt,"model_type"),YMt.forEach(t),y4r=r(p0,` property of the config object (either
passed as an argument or loaded from `),M1e=n(p0,"CODE",{});var KMt=s(M1e);L4r=r(KMt,"pretrained_model_name_or_path"),KMt.forEach(t),x4r=r(p0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E1e=n(p0,"CODE",{});var ZMt=s(E1e);$4r=r(ZMt,"pretrained_model_name_or_path"),ZMt.forEach(t),k4r=r(p0,":"),p0.forEach(t),S4r=i($l),de=n($l,"UL",{});var fe=s(de);K5=n(fe,"LI",{});var aRe=s(K5);C1e=n(aRe,"STRONG",{});var e4t=s(C1e);R4r=r(e4t,"albert"),e4t.forEach(t),B4r=r(aRe," \u2014 "),kH=n(aRe,"A",{href:!0});var o4t=s(kH);P4r=r(o4t,"TFAlbertForTokenClassification"),o4t.forEach(t),I4r=r(aRe," (ALBERT model)"),aRe.forEach(t),q4r=i(fe),Z5=n(fe,"LI",{});var nRe=s(Z5);w1e=n(nRe,"STRONG",{});var r4t=s(w1e);N4r=r(r4t,"bert"),r4t.forEach(t),j4r=r(nRe," \u2014 "),SH=n(nRe,"A",{href:!0});var t4t=s(SH);D4r=r(t4t,"TFBertForTokenClassification"),t4t.forEach(t),G4r=r(nRe," (BERT model)"),nRe.forEach(t),O4r=i(fe),eC=n(fe,"LI",{});var sRe=s(eC);A1e=n(sRe,"STRONG",{});var a4t=s(A1e);V4r=r(a4t,"camembert"),a4t.forEach(t),X4r=r(sRe," \u2014 "),RH=n(sRe,"A",{href:!0});var n4t=s(RH);z4r=r(n4t,"TFCamembertForTokenClassification"),n4t.forEach(t),Q4r=r(sRe," (CamemBERT model)"),sRe.forEach(t),W4r=i(fe),oC=n(fe,"LI",{});var lRe=s(oC);y1e=n(lRe,"STRONG",{});var s4t=s(y1e);H4r=r(s4t,"convbert"),s4t.forEach(t),U4r=r(lRe," \u2014 "),BH=n(lRe,"A",{href:!0});var l4t=s(BH);J4r=r(l4t,"TFConvBertForTokenClassification"),l4t.forEach(t),Y4r=r(lRe," (ConvBERT model)"),lRe.forEach(t),K4r=i(fe),rC=n(fe,"LI",{});var iRe=s(rC);L1e=n(iRe,"STRONG",{});var i4t=s(L1e);Z4r=r(i4t,"deberta"),i4t.forEach(t),eEr=r(iRe," \u2014 "),PH=n(iRe,"A",{href:!0});var d4t=s(PH);oEr=r(d4t,"TFDebertaForTokenClassification"),d4t.forEach(t),rEr=r(iRe," (DeBERTa model)"),iRe.forEach(t),tEr=i(fe),tC=n(fe,"LI",{});var dRe=s(tC);x1e=n(dRe,"STRONG",{});var c4t=s(x1e);aEr=r(c4t,"deberta-v2"),c4t.forEach(t),nEr=r(dRe," \u2014 "),IH=n(dRe,"A",{href:!0});var m4t=s(IH);sEr=r(m4t,"TFDebertaV2ForTokenClassification"),m4t.forEach(t),lEr=r(dRe," (DeBERTa-v2 model)"),dRe.forEach(t),iEr=i(fe),aC=n(fe,"LI",{});var cRe=s(aC);$1e=n(cRe,"STRONG",{});var f4t=s($1e);dEr=r(f4t,"distilbert"),f4t.forEach(t),cEr=r(cRe," \u2014 "),qH=n(cRe,"A",{href:!0});var g4t=s(qH);mEr=r(g4t,"TFDistilBertForTokenClassification"),g4t.forEach(t),fEr=r(cRe," (DistilBERT model)"),cRe.forEach(t),gEr=i(fe),nC=n(fe,"LI",{});var mRe=s(nC);k1e=n(mRe,"STRONG",{});var h4t=s(k1e);hEr=r(h4t,"electra"),h4t.forEach(t),uEr=r(mRe," \u2014 "),NH=n(mRe,"A",{href:!0});var u4t=s(NH);pEr=r(u4t,"TFElectraForTokenClassification"),u4t.forEach(t),_Er=r(mRe," (ELECTRA model)"),mRe.forEach(t),bEr=i(fe),sC=n(fe,"LI",{});var fRe=s(sC);S1e=n(fRe,"STRONG",{});var p4t=s(S1e);FEr=r(p4t,"flaubert"),p4t.forEach(t),vEr=r(fRe," \u2014 "),jH=n(fRe,"A",{href:!0});var _4t=s(jH);TEr=r(_4t,"TFFlaubertForTokenClassification"),_4t.forEach(t),MEr=r(fRe," (FlauBERT model)"),fRe.forEach(t),EEr=i(fe),lC=n(fe,"LI",{});var gRe=s(lC);R1e=n(gRe,"STRONG",{});var b4t=s(R1e);CEr=r(b4t,"funnel"),b4t.forEach(t),wEr=r(gRe," \u2014 "),DH=n(gRe,"A",{href:!0});var F4t=s(DH);AEr=r(F4t,"TFFunnelForTokenClassification"),F4t.forEach(t),yEr=r(gRe," (Funnel Transformer model)"),gRe.forEach(t),LEr=i(fe),iC=n(fe,"LI",{});var hRe=s(iC);B1e=n(hRe,"STRONG",{});var v4t=s(B1e);xEr=r(v4t,"layoutlm"),v4t.forEach(t),$Er=r(hRe," \u2014 "),GH=n(hRe,"A",{href:!0});var T4t=s(GH);kEr=r(T4t,"TFLayoutLMForTokenClassification"),T4t.forEach(t),SEr=r(hRe," (LayoutLM model)"),hRe.forEach(t),REr=i(fe),dC=n(fe,"LI",{});var uRe=s(dC);P1e=n(uRe,"STRONG",{});var M4t=s(P1e);BEr=r(M4t,"longformer"),M4t.forEach(t),PEr=r(uRe," \u2014 "),OH=n(uRe,"A",{href:!0});var E4t=s(OH);IEr=r(E4t,"TFLongformerForTokenClassification"),E4t.forEach(t),qEr=r(uRe," (Longformer model)"),uRe.forEach(t),NEr=i(fe),cC=n(fe,"LI",{});var pRe=s(cC);I1e=n(pRe,"STRONG",{});var C4t=s(I1e);jEr=r(C4t,"mobilebert"),C4t.forEach(t),DEr=r(pRe," \u2014 "),VH=n(pRe,"A",{href:!0});var w4t=s(VH);GEr=r(w4t,"TFMobileBertForTokenClassification"),w4t.forEach(t),OEr=r(pRe," (MobileBERT model)"),pRe.forEach(t),VEr=i(fe),mC=n(fe,"LI",{});var _Re=s(mC);q1e=n(_Re,"STRONG",{});var A4t=s(q1e);XEr=r(A4t,"mpnet"),A4t.forEach(t),zEr=r(_Re," \u2014 "),XH=n(_Re,"A",{href:!0});var y4t=s(XH);QEr=r(y4t,"TFMPNetForTokenClassification"),y4t.forEach(t),WEr=r(_Re," (MPNet model)"),_Re.forEach(t),HEr=i(fe),fC=n(fe,"LI",{});var bRe=s(fC);N1e=n(bRe,"STRONG",{});var L4t=s(N1e);UEr=r(L4t,"rembert"),L4t.forEach(t),JEr=r(bRe," \u2014 "),zH=n(bRe,"A",{href:!0});var x4t=s(zH);YEr=r(x4t,"TFRemBertForTokenClassification"),x4t.forEach(t),KEr=r(bRe," (RemBERT model)"),bRe.forEach(t),ZEr=i(fe),gC=n(fe,"LI",{});var FRe=s(gC);j1e=n(FRe,"STRONG",{});var $4t=s(j1e);e5r=r($4t,"roberta"),$4t.forEach(t),o5r=r(FRe," \u2014 "),QH=n(FRe,"A",{href:!0});var k4t=s(QH);r5r=r(k4t,"TFRobertaForTokenClassification"),k4t.forEach(t),t5r=r(FRe," (RoBERTa model)"),FRe.forEach(t),a5r=i(fe),hC=n(fe,"LI",{});var vRe=s(hC);D1e=n(vRe,"STRONG",{});var S4t=s(D1e);n5r=r(S4t,"roformer"),S4t.forEach(t),s5r=r(vRe," \u2014 "),WH=n(vRe,"A",{href:!0});var R4t=s(WH);l5r=r(R4t,"TFRoFormerForTokenClassification"),R4t.forEach(t),i5r=r(vRe," (RoFormer model)"),vRe.forEach(t),d5r=i(fe),uC=n(fe,"LI",{});var TRe=s(uC);G1e=n(TRe,"STRONG",{});var B4t=s(G1e);c5r=r(B4t,"xlm"),B4t.forEach(t),m5r=r(TRe," \u2014 "),HH=n(TRe,"A",{href:!0});var P4t=s(HH);f5r=r(P4t,"TFXLMForTokenClassification"),P4t.forEach(t),g5r=r(TRe," (XLM model)"),TRe.forEach(t),h5r=i(fe),pC=n(fe,"LI",{});var MRe=s(pC);O1e=n(MRe,"STRONG",{});var I4t=s(O1e);u5r=r(I4t,"xlm-roberta"),I4t.forEach(t),p5r=r(MRe," \u2014 "),UH=n(MRe,"A",{href:!0});var q4t=s(UH);_5r=r(q4t,"TFXLMRobertaForTokenClassification"),q4t.forEach(t),b5r=r(MRe," (XLM-RoBERTa model)"),MRe.forEach(t),F5r=i(fe),_C=n(fe,"LI",{});var ERe=s(_C);V1e=n(ERe,"STRONG",{});var N4t=s(V1e);v5r=r(N4t,"xlnet"),N4t.forEach(t),T5r=r(ERe," \u2014 "),JH=n(ERe,"A",{href:!0});var j4t=s(JH);M5r=r(j4t,"TFXLNetForTokenClassification"),j4t.forEach(t),E5r=r(ERe," (XLNet model)"),ERe.forEach(t),fe.forEach(t),C5r=i($l),T(bC.$$.fragment,$l),$l.forEach(t),xl.forEach(t),pqe=i(m),_c=n(m,"H2",{class:!0});var Eje=s(_c);FC=n(Eje,"A",{id:!0,class:!0,href:!0});var D4t=s(FC);X1e=n(D4t,"SPAN",{});var G4t=s(X1e);T(Bx.$$.fragment,G4t),G4t.forEach(t),D4t.forEach(t),w5r=i(Eje),z1e=n(Eje,"SPAN",{});var O4t=s(z1e);A5r=r(O4t,"TFAutoModelForQuestionAnswering"),O4t.forEach(t),Eje.forEach(t),_qe=i(m),ir=n(m,"DIV",{class:!0});var kl=s(ir);T(Px.$$.fragment,kl),y5r=i(kl),bc=n(kl,"P",{});var CZ=s(bc);L5r=r(CZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),YH=n(CZ,"A",{href:!0});var V4t=s(YH);x5r=r(V4t,"from_pretrained()"),V4t.forEach(t),$5r=r(CZ," class method or the "),KH=n(CZ,"A",{href:!0});var X4t=s(KH);k5r=r(X4t,"from_config()"),X4t.forEach(t),S5r=r(CZ,` class
method.`),CZ.forEach(t),R5r=i(kl),Ix=n(kl,"P",{});var Cje=s(Ix);B5r=r(Cje,"This class cannot be instantiated directly using "),Q1e=n(Cje,"CODE",{});var z4t=s(Q1e);P5r=r(z4t,"__init__()"),z4t.forEach(t),I5r=r(Cje," (throws an error)."),Cje.forEach(t),q5r=i(kl),It=n(kl,"DIV",{class:!0});var _0=s(It);T(qx.$$.fragment,_0),N5r=i(_0),W1e=n(_0,"P",{});var Q4t=s(W1e);j5r=r(Q4t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Q4t.forEach(t),D5r=i(_0),Fc=n(_0,"P",{});var wZ=s(Fc);G5r=r(wZ,`Note:
Loading a model from its configuration file does `),H1e=n(wZ,"STRONG",{});var W4t=s(H1e);O5r=r(W4t,"not"),W4t.forEach(t),V5r=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZH=n(wZ,"A",{href:!0});var H4t=s(ZH);X5r=r(H4t,"from_pretrained()"),H4t.forEach(t),z5r=r(wZ," to load the model weights."),wZ.forEach(t),Q5r=i(_0),T(vC.$$.fragment,_0),_0.forEach(t),W5r=i(kl),Ir=n(kl,"DIV",{class:!0});var Sl=s(Ir);T(Nx.$$.fragment,Sl),H5r=i(Sl),U1e=n(Sl,"P",{});var U4t=s(U1e);U5r=r(U4t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),U4t.forEach(t),J5r=i(Sl),cn=n(Sl,"P",{});var b0=s(cn);Y5r=r(b0,"The model class to instantiate is selected based on the "),J1e=n(b0,"CODE",{});var J4t=s(J1e);K5r=r(J4t,"model_type"),J4t.forEach(t),Z5r=r(b0,` property of the config object (either
passed as an argument or loaded from `),Y1e=n(b0,"CODE",{});var Y4t=s(Y1e);eCr=r(Y4t,"pretrained_model_name_or_path"),Y4t.forEach(t),oCr=r(b0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K1e=n(b0,"CODE",{});var K4t=s(K1e);rCr=r(K4t,"pretrained_model_name_or_path"),K4t.forEach(t),tCr=r(b0,":"),b0.forEach(t),aCr=i(Sl),ce=n(Sl,"UL",{});var ge=s(ce);TC=n(ge,"LI",{});var CRe=s(TC);Z1e=n(CRe,"STRONG",{});var Z4t=s(Z1e);nCr=r(Z4t,"albert"),Z4t.forEach(t),sCr=r(CRe," \u2014 "),eU=n(CRe,"A",{href:!0});var eEt=s(eU);lCr=r(eEt,"TFAlbertForQuestionAnswering"),eEt.forEach(t),iCr=r(CRe," (ALBERT model)"),CRe.forEach(t),dCr=i(ge),MC=n(ge,"LI",{});var wRe=s(MC);eTe=n(wRe,"STRONG",{});var oEt=s(eTe);cCr=r(oEt,"bert"),oEt.forEach(t),mCr=r(wRe," \u2014 "),oU=n(wRe,"A",{href:!0});var rEt=s(oU);fCr=r(rEt,"TFBertForQuestionAnswering"),rEt.forEach(t),gCr=r(wRe," (BERT model)"),wRe.forEach(t),hCr=i(ge),EC=n(ge,"LI",{});var ARe=s(EC);oTe=n(ARe,"STRONG",{});var tEt=s(oTe);uCr=r(tEt,"camembert"),tEt.forEach(t),pCr=r(ARe," \u2014 "),rU=n(ARe,"A",{href:!0});var aEt=s(rU);_Cr=r(aEt,"TFCamembertForQuestionAnswering"),aEt.forEach(t),bCr=r(ARe," (CamemBERT model)"),ARe.forEach(t),FCr=i(ge),CC=n(ge,"LI",{});var yRe=s(CC);rTe=n(yRe,"STRONG",{});var nEt=s(rTe);vCr=r(nEt,"convbert"),nEt.forEach(t),TCr=r(yRe," \u2014 "),tU=n(yRe,"A",{href:!0});var sEt=s(tU);MCr=r(sEt,"TFConvBertForQuestionAnswering"),sEt.forEach(t),ECr=r(yRe," (ConvBERT model)"),yRe.forEach(t),CCr=i(ge),wC=n(ge,"LI",{});var LRe=s(wC);tTe=n(LRe,"STRONG",{});var lEt=s(tTe);wCr=r(lEt,"deberta"),lEt.forEach(t),ACr=r(LRe," \u2014 "),aU=n(LRe,"A",{href:!0});var iEt=s(aU);yCr=r(iEt,"TFDebertaForQuestionAnswering"),iEt.forEach(t),LCr=r(LRe," (DeBERTa model)"),LRe.forEach(t),xCr=i(ge),AC=n(ge,"LI",{});var xRe=s(AC);aTe=n(xRe,"STRONG",{});var dEt=s(aTe);$Cr=r(dEt,"deberta-v2"),dEt.forEach(t),kCr=r(xRe," \u2014 "),nU=n(xRe,"A",{href:!0});var cEt=s(nU);SCr=r(cEt,"TFDebertaV2ForQuestionAnswering"),cEt.forEach(t),RCr=r(xRe," (DeBERTa-v2 model)"),xRe.forEach(t),BCr=i(ge),yC=n(ge,"LI",{});var $Re=s(yC);nTe=n($Re,"STRONG",{});var mEt=s(nTe);PCr=r(mEt,"distilbert"),mEt.forEach(t),ICr=r($Re," \u2014 "),sU=n($Re,"A",{href:!0});var fEt=s(sU);qCr=r(fEt,"TFDistilBertForQuestionAnswering"),fEt.forEach(t),NCr=r($Re," (DistilBERT model)"),$Re.forEach(t),jCr=i(ge),LC=n(ge,"LI",{});var kRe=s(LC);sTe=n(kRe,"STRONG",{});var gEt=s(sTe);DCr=r(gEt,"electra"),gEt.forEach(t),GCr=r(kRe," \u2014 "),lU=n(kRe,"A",{href:!0});var hEt=s(lU);OCr=r(hEt,"TFElectraForQuestionAnswering"),hEt.forEach(t),VCr=r(kRe," (ELECTRA model)"),kRe.forEach(t),XCr=i(ge),xC=n(ge,"LI",{});var SRe=s(xC);lTe=n(SRe,"STRONG",{});var uEt=s(lTe);zCr=r(uEt,"flaubert"),uEt.forEach(t),QCr=r(SRe," \u2014 "),iU=n(SRe,"A",{href:!0});var pEt=s(iU);WCr=r(pEt,"TFFlaubertForQuestionAnsweringSimple"),pEt.forEach(t),HCr=r(SRe," (FlauBERT model)"),SRe.forEach(t),UCr=i(ge),$C=n(ge,"LI",{});var RRe=s($C);iTe=n(RRe,"STRONG",{});var _Et=s(iTe);JCr=r(_Et,"funnel"),_Et.forEach(t),YCr=r(RRe," \u2014 "),dU=n(RRe,"A",{href:!0});var bEt=s(dU);KCr=r(bEt,"TFFunnelForQuestionAnswering"),bEt.forEach(t),ZCr=r(RRe," (Funnel Transformer model)"),RRe.forEach(t),e3r=i(ge),kC=n(ge,"LI",{});var BRe=s(kC);dTe=n(BRe,"STRONG",{});var FEt=s(dTe);o3r=r(FEt,"gptj"),FEt.forEach(t),r3r=r(BRe," \u2014 "),cU=n(BRe,"A",{href:!0});var vEt=s(cU);t3r=r(vEt,"TFGPTJForQuestionAnswering"),vEt.forEach(t),a3r=r(BRe," (GPT-J model)"),BRe.forEach(t),n3r=i(ge),SC=n(ge,"LI",{});var PRe=s(SC);cTe=n(PRe,"STRONG",{});var TEt=s(cTe);s3r=r(TEt,"longformer"),TEt.forEach(t),l3r=r(PRe," \u2014 "),mU=n(PRe,"A",{href:!0});var MEt=s(mU);i3r=r(MEt,"TFLongformerForQuestionAnswering"),MEt.forEach(t),d3r=r(PRe," (Longformer model)"),PRe.forEach(t),c3r=i(ge),RC=n(ge,"LI",{});var IRe=s(RC);mTe=n(IRe,"STRONG",{});var EEt=s(mTe);m3r=r(EEt,"mobilebert"),EEt.forEach(t),f3r=r(IRe," \u2014 "),fU=n(IRe,"A",{href:!0});var CEt=s(fU);g3r=r(CEt,"TFMobileBertForQuestionAnswering"),CEt.forEach(t),h3r=r(IRe," (MobileBERT model)"),IRe.forEach(t),u3r=i(ge),BC=n(ge,"LI",{});var qRe=s(BC);fTe=n(qRe,"STRONG",{});var wEt=s(fTe);p3r=r(wEt,"mpnet"),wEt.forEach(t),_3r=r(qRe," \u2014 "),gU=n(qRe,"A",{href:!0});var AEt=s(gU);b3r=r(AEt,"TFMPNetForQuestionAnswering"),AEt.forEach(t),F3r=r(qRe," (MPNet model)"),qRe.forEach(t),v3r=i(ge),PC=n(ge,"LI",{});var NRe=s(PC);gTe=n(NRe,"STRONG",{});var yEt=s(gTe);T3r=r(yEt,"rembert"),yEt.forEach(t),M3r=r(NRe," \u2014 "),hU=n(NRe,"A",{href:!0});var LEt=s(hU);E3r=r(LEt,"TFRemBertForQuestionAnswering"),LEt.forEach(t),C3r=r(NRe," (RemBERT model)"),NRe.forEach(t),w3r=i(ge),IC=n(ge,"LI",{});var jRe=s(IC);hTe=n(jRe,"STRONG",{});var xEt=s(hTe);A3r=r(xEt,"roberta"),xEt.forEach(t),y3r=r(jRe," \u2014 "),uU=n(jRe,"A",{href:!0});var $Et=s(uU);L3r=r($Et,"TFRobertaForQuestionAnswering"),$Et.forEach(t),x3r=r(jRe," (RoBERTa model)"),jRe.forEach(t),$3r=i(ge),qC=n(ge,"LI",{});var DRe=s(qC);uTe=n(DRe,"STRONG",{});var kEt=s(uTe);k3r=r(kEt,"roformer"),kEt.forEach(t),S3r=r(DRe," \u2014 "),pU=n(DRe,"A",{href:!0});var SEt=s(pU);R3r=r(SEt,"TFRoFormerForQuestionAnswering"),SEt.forEach(t),B3r=r(DRe," (RoFormer model)"),DRe.forEach(t),P3r=i(ge),NC=n(ge,"LI",{});var GRe=s(NC);pTe=n(GRe,"STRONG",{});var REt=s(pTe);I3r=r(REt,"xlm"),REt.forEach(t),q3r=r(GRe," \u2014 "),_U=n(GRe,"A",{href:!0});var BEt=s(_U);N3r=r(BEt,"TFXLMForQuestionAnsweringSimple"),BEt.forEach(t),j3r=r(GRe," (XLM model)"),GRe.forEach(t),D3r=i(ge),jC=n(ge,"LI",{});var ORe=s(jC);_Te=n(ORe,"STRONG",{});var PEt=s(_Te);G3r=r(PEt,"xlm-roberta"),PEt.forEach(t),O3r=r(ORe," \u2014 "),bU=n(ORe,"A",{href:!0});var IEt=s(bU);V3r=r(IEt,"TFXLMRobertaForQuestionAnswering"),IEt.forEach(t),X3r=r(ORe," (XLM-RoBERTa model)"),ORe.forEach(t),z3r=i(ge),DC=n(ge,"LI",{});var VRe=s(DC);bTe=n(VRe,"STRONG",{});var qEt=s(bTe);Q3r=r(qEt,"xlnet"),qEt.forEach(t),W3r=r(VRe," \u2014 "),FU=n(VRe,"A",{href:!0});var NEt=s(FU);H3r=r(NEt,"TFXLNetForQuestionAnsweringSimple"),NEt.forEach(t),U3r=r(VRe," (XLNet model)"),VRe.forEach(t),ge.forEach(t),J3r=i(Sl),T(GC.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),bqe=i(m),vc=n(m,"H2",{class:!0});var wje=s(vc);OC=n(wje,"A",{id:!0,class:!0,href:!0});var jEt=s(OC);FTe=n(jEt,"SPAN",{});var DEt=s(FTe);T(jx.$$.fragment,DEt),DEt.forEach(t),jEt.forEach(t),Y3r=i(wje),vTe=n(wje,"SPAN",{});var GEt=s(vTe);K3r=r(GEt,"TFAutoModelForVision2Seq"),GEt.forEach(t),wje.forEach(t),Fqe=i(m),dr=n(m,"DIV",{class:!0});var Rl=s(dr);T(Dx.$$.fragment,Rl),Z3r=i(Rl),Tc=n(Rl,"P",{});var AZ=s(Tc);ewr=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vU=n(AZ,"A",{href:!0});var OEt=s(vU);owr=r(OEt,"from_pretrained()"),OEt.forEach(t),rwr=r(AZ," class method or the "),TU=n(AZ,"A",{href:!0});var VEt=s(TU);twr=r(VEt,"from_config()"),VEt.forEach(t),awr=r(AZ,` class
method.`),AZ.forEach(t),nwr=i(Rl),Gx=n(Rl,"P",{});var Aje=s(Gx);swr=r(Aje,"This class cannot be instantiated directly using "),TTe=n(Aje,"CODE",{});var XEt=s(TTe);lwr=r(XEt,"__init__()"),XEt.forEach(t),iwr=r(Aje," (throws an error)."),Aje.forEach(t),dwr=i(Rl),qt=n(Rl,"DIV",{class:!0});var F0=s(qt);T(Ox.$$.fragment,F0),cwr=i(F0),MTe=n(F0,"P",{});var zEt=s(MTe);mwr=r(zEt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),zEt.forEach(t),fwr=i(F0),Mc=n(F0,"P",{});var yZ=s(Mc);gwr=r(yZ,`Note:
Loading a model from its configuration file does `),ETe=n(yZ,"STRONG",{});var QEt=s(ETe);hwr=r(QEt,"not"),QEt.forEach(t),uwr=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MU=n(yZ,"A",{href:!0});var WEt=s(MU);pwr=r(WEt,"from_pretrained()"),WEt.forEach(t),_wr=r(yZ," to load the model weights."),yZ.forEach(t),bwr=i(F0),T(VC.$$.fragment,F0),F0.forEach(t),Fwr=i(Rl),qr=n(Rl,"DIV",{class:!0});var Bl=s(qr);T(Vx.$$.fragment,Bl),vwr=i(Bl),CTe=n(Bl,"P",{});var HEt=s(CTe);Twr=r(HEt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),HEt.forEach(t),Mwr=i(Bl),mn=n(Bl,"P",{});var v0=s(mn);Ewr=r(v0,"The model class to instantiate is selected based on the "),wTe=n(v0,"CODE",{});var UEt=s(wTe);Cwr=r(UEt,"model_type"),UEt.forEach(t),wwr=r(v0,` property of the config object (either
passed as an argument or loaded from `),ATe=n(v0,"CODE",{});var JEt=s(ATe);Awr=r(JEt,"pretrained_model_name_or_path"),JEt.forEach(t),ywr=r(v0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yTe=n(v0,"CODE",{});var YEt=s(yTe);Lwr=r(YEt,"pretrained_model_name_or_path"),YEt.forEach(t),xwr=r(v0,":"),v0.forEach(t),$wr=i(Bl),LTe=n(Bl,"UL",{});var KEt=s(LTe);XC=n(KEt,"LI",{});var XRe=s(XC);xTe=n(XRe,"STRONG",{});var ZEt=s(xTe);kwr=r(ZEt,"vision-encoder-decoder"),ZEt.forEach(t),Swr=r(XRe," \u2014 "),EU=n(XRe,"A",{href:!0});var e5t=s(EU);Rwr=r(e5t,"TFVisionEncoderDecoderModel"),e5t.forEach(t),Bwr=r(XRe," (Vision Encoder decoder model)"),XRe.forEach(t),KEt.forEach(t),Pwr=i(Bl),T(zC.$$.fragment,Bl),Bl.forEach(t),Rl.forEach(t),vqe=i(m),Ec=n(m,"H2",{class:!0});var yje=s(Ec);QC=n(yje,"A",{id:!0,class:!0,href:!0});var o5t=s(QC);$Te=n(o5t,"SPAN",{});var r5t=s($Te);T(Xx.$$.fragment,r5t),r5t.forEach(t),o5t.forEach(t),Iwr=i(yje),kTe=n(yje,"SPAN",{});var t5t=s(kTe);qwr=r(t5t,"TFAutoModelForSpeechSeq2Seq"),t5t.forEach(t),yje.forEach(t),Tqe=i(m),cr=n(m,"DIV",{class:!0});var Pl=s(cr);T(zx.$$.fragment,Pl),Nwr=i(Pl),Cc=n(Pl,"P",{});var LZ=s(Cc);jwr=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),CU=n(LZ,"A",{href:!0});var a5t=s(CU);Dwr=r(a5t,"from_pretrained()"),a5t.forEach(t),Gwr=r(LZ," class method or the "),wU=n(LZ,"A",{href:!0});var n5t=s(wU);Owr=r(n5t,"from_config()"),n5t.forEach(t),Vwr=r(LZ,` class
method.`),LZ.forEach(t),Xwr=i(Pl),Qx=n(Pl,"P",{});var Lje=s(Qx);zwr=r(Lje,"This class cannot be instantiated directly using "),STe=n(Lje,"CODE",{});var s5t=s(STe);Qwr=r(s5t,"__init__()"),s5t.forEach(t),Wwr=r(Lje," (throws an error)."),Lje.forEach(t),Hwr=i(Pl),Nt=n(Pl,"DIV",{class:!0});var T0=s(Nt);T(Wx.$$.fragment,T0),Uwr=i(T0),RTe=n(T0,"P",{});var l5t=s(RTe);Jwr=r(l5t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),l5t.forEach(t),Ywr=i(T0),wc=n(T0,"P",{});var xZ=s(wc);Kwr=r(xZ,`Note:
Loading a model from its configuration file does `),BTe=n(xZ,"STRONG",{});var i5t=s(BTe);Zwr=r(i5t,"not"),i5t.forEach(t),eAr=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=n(xZ,"A",{href:!0});var d5t=s(AU);oAr=r(d5t,"from_pretrained()"),d5t.forEach(t),rAr=r(xZ," to load the model weights."),xZ.forEach(t),tAr=i(T0),T(WC.$$.fragment,T0),T0.forEach(t),aAr=i(Pl),Nr=n(Pl,"DIV",{class:!0});var Il=s(Nr);T(Hx.$$.fragment,Il),nAr=i(Il),PTe=n(Il,"P",{});var c5t=s(PTe);sAr=r(c5t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),c5t.forEach(t),lAr=i(Il),fn=n(Il,"P",{});var M0=s(fn);iAr=r(M0,"The model class to instantiate is selected based on the "),ITe=n(M0,"CODE",{});var m5t=s(ITe);dAr=r(m5t,"model_type"),m5t.forEach(t),cAr=r(M0,` property of the config object (either
passed as an argument or loaded from `),qTe=n(M0,"CODE",{});var f5t=s(qTe);mAr=r(f5t,"pretrained_model_name_or_path"),f5t.forEach(t),fAr=r(M0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NTe=n(M0,"CODE",{});var g5t=s(NTe);gAr=r(g5t,"pretrained_model_name_or_path"),g5t.forEach(t),hAr=r(M0,":"),M0.forEach(t),uAr=i(Il),jTe=n(Il,"UL",{});var h5t=s(jTe);HC=n(h5t,"LI",{});var zRe=s(HC);DTe=n(zRe,"STRONG",{});var u5t=s(DTe);pAr=r(u5t,"speech_to_text"),u5t.forEach(t),_Ar=r(zRe," \u2014 "),yU=n(zRe,"A",{href:!0});var p5t=s(yU);bAr=r(p5t,"TFSpeech2TextForConditionalGeneration"),p5t.forEach(t),FAr=r(zRe," (Speech2Text model)"),zRe.forEach(t),h5t.forEach(t),vAr=i(Il),T(UC.$$.fragment,Il),Il.forEach(t),Pl.forEach(t),Mqe=i(m),Ac=n(m,"H2",{class:!0});var xje=s(Ac);JC=n(xje,"A",{id:!0,class:!0,href:!0});var _5t=s(JC);GTe=n(_5t,"SPAN",{});var b5t=s(GTe);T(Ux.$$.fragment,b5t),b5t.forEach(t),_5t.forEach(t),TAr=i(xje),OTe=n(xje,"SPAN",{});var F5t=s(OTe);MAr=r(F5t,"FlaxAutoModel"),F5t.forEach(t),xje.forEach(t),Eqe=i(m),mr=n(m,"DIV",{class:!0});var ql=s(mr);T(Jx.$$.fragment,ql),EAr=i(ql),yc=n(ql,"P",{});var $Z=s(yc);CAr=r($Z,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),LU=n($Z,"A",{href:!0});var v5t=s(LU);wAr=r(v5t,"from_pretrained()"),v5t.forEach(t),AAr=r($Z," class method or the "),xU=n($Z,"A",{href:!0});var T5t=s(xU);yAr=r(T5t,"from_config()"),T5t.forEach(t),LAr=r($Z,` class
method.`),$Z.forEach(t),xAr=i(ql),Yx=n(ql,"P",{});var $je=s(Yx);$Ar=r($je,"This class cannot be instantiated directly using "),VTe=n($je,"CODE",{});var M5t=s(VTe);kAr=r(M5t,"__init__()"),M5t.forEach(t),SAr=r($je," (throws an error)."),$je.forEach(t),RAr=i(ql),jt=n(ql,"DIV",{class:!0});var E0=s(jt);T(Kx.$$.fragment,E0),BAr=i(E0),XTe=n(E0,"P",{});var E5t=s(XTe);PAr=r(E5t,"Instantiates one of the base model classes of the library from a configuration."),E5t.forEach(t),IAr=i(E0),Lc=n(E0,"P",{});var kZ=s(Lc);qAr=r(kZ,`Note:
Loading a model from its configuration file does `),zTe=n(kZ,"STRONG",{});var C5t=s(zTe);NAr=r(C5t,"not"),C5t.forEach(t),jAr=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$U=n(kZ,"A",{href:!0});var w5t=s($U);DAr=r(w5t,"from_pretrained()"),w5t.forEach(t),GAr=r(kZ," to load the model weights."),kZ.forEach(t),OAr=i(E0),T(YC.$$.fragment,E0),E0.forEach(t),VAr=i(ql),jr=n(ql,"DIV",{class:!0});var Nl=s(jr);T(Zx.$$.fragment,Nl),XAr=i(Nl),QTe=n(Nl,"P",{});var A5t=s(QTe);zAr=r(A5t,"Instantiate one of the base model classes of the library from a pretrained model."),A5t.forEach(t),QAr=i(Nl),gn=n(Nl,"P",{});var C0=s(gn);WAr=r(C0,"The model class to instantiate is selected based on the "),WTe=n(C0,"CODE",{});var y5t=s(WTe);HAr=r(y5t,"model_type"),y5t.forEach(t),UAr=r(C0,` property of the config object (either
passed as an argument or loaded from `),HTe=n(C0,"CODE",{});var L5t=s(HTe);JAr=r(L5t,"pretrained_model_name_or_path"),L5t.forEach(t),YAr=r(C0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UTe=n(C0,"CODE",{});var x5t=s(UTe);KAr=r(x5t,"pretrained_model_name_or_path"),x5t.forEach(t),ZAr=r(C0,":"),C0.forEach(t),e6r=i(Nl),re=n(Nl,"UL",{});var ne=s(re);KC=n(ne,"LI",{});var QRe=s(KC);JTe=n(QRe,"STRONG",{});var $5t=s(JTe);o6r=r($5t,"albert"),$5t.forEach(t),r6r=r(QRe," \u2014 "),kU=n(QRe,"A",{href:!0});var k5t=s(kU);t6r=r(k5t,"FlaxAlbertModel"),k5t.forEach(t),a6r=r(QRe," (ALBERT model)"),QRe.forEach(t),n6r=i(ne),ZC=n(ne,"LI",{});var WRe=s(ZC);YTe=n(WRe,"STRONG",{});var S5t=s(YTe);s6r=r(S5t,"bart"),S5t.forEach(t),l6r=r(WRe," \u2014 "),SU=n(WRe,"A",{href:!0});var R5t=s(SU);i6r=r(R5t,"FlaxBartModel"),R5t.forEach(t),d6r=r(WRe," (BART model)"),WRe.forEach(t),c6r=i(ne),e3=n(ne,"LI",{});var HRe=s(e3);KTe=n(HRe,"STRONG",{});var B5t=s(KTe);m6r=r(B5t,"beit"),B5t.forEach(t),f6r=r(HRe," \u2014 "),RU=n(HRe,"A",{href:!0});var P5t=s(RU);g6r=r(P5t,"FlaxBeitModel"),P5t.forEach(t),h6r=r(HRe," (BEiT model)"),HRe.forEach(t),u6r=i(ne),o3=n(ne,"LI",{});var URe=s(o3);ZTe=n(URe,"STRONG",{});var I5t=s(ZTe);p6r=r(I5t,"bert"),I5t.forEach(t),_6r=r(URe," \u2014 "),BU=n(URe,"A",{href:!0});var q5t=s(BU);b6r=r(q5t,"FlaxBertModel"),q5t.forEach(t),F6r=r(URe," (BERT model)"),URe.forEach(t),v6r=i(ne),r3=n(ne,"LI",{});var JRe=s(r3);eMe=n(JRe,"STRONG",{});var N5t=s(eMe);T6r=r(N5t,"big_bird"),N5t.forEach(t),M6r=r(JRe," \u2014 "),PU=n(JRe,"A",{href:!0});var j5t=s(PU);E6r=r(j5t,"FlaxBigBirdModel"),j5t.forEach(t),C6r=r(JRe," (BigBird model)"),JRe.forEach(t),w6r=i(ne),t3=n(ne,"LI",{});var YRe=s(t3);oMe=n(YRe,"STRONG",{});var D5t=s(oMe);A6r=r(D5t,"blenderbot"),D5t.forEach(t),y6r=r(YRe," \u2014 "),IU=n(YRe,"A",{href:!0});var G5t=s(IU);L6r=r(G5t,"FlaxBlenderbotModel"),G5t.forEach(t),x6r=r(YRe," (Blenderbot model)"),YRe.forEach(t),$6r=i(ne),a3=n(ne,"LI",{});var KRe=s(a3);rMe=n(KRe,"STRONG",{});var O5t=s(rMe);k6r=r(O5t,"blenderbot-small"),O5t.forEach(t),S6r=r(KRe," \u2014 "),qU=n(KRe,"A",{href:!0});var V5t=s(qU);R6r=r(V5t,"FlaxBlenderbotSmallModel"),V5t.forEach(t),B6r=r(KRe," (BlenderbotSmall model)"),KRe.forEach(t),P6r=i(ne),n3=n(ne,"LI",{});var ZRe=s(n3);tMe=n(ZRe,"STRONG",{});var X5t=s(tMe);I6r=r(X5t,"clip"),X5t.forEach(t),q6r=r(ZRe," \u2014 "),NU=n(ZRe,"A",{href:!0});var z5t=s(NU);N6r=r(z5t,"FlaxCLIPModel"),z5t.forEach(t),j6r=r(ZRe," (CLIP model)"),ZRe.forEach(t),D6r=i(ne),s3=n(ne,"LI",{});var eBe=s(s3);aMe=n(eBe,"STRONG",{});var Q5t=s(aMe);G6r=r(Q5t,"distilbert"),Q5t.forEach(t),O6r=r(eBe," \u2014 "),jU=n(eBe,"A",{href:!0});var W5t=s(jU);V6r=r(W5t,"FlaxDistilBertModel"),W5t.forEach(t),X6r=r(eBe," (DistilBERT model)"),eBe.forEach(t),z6r=i(ne),l3=n(ne,"LI",{});var oBe=s(l3);nMe=n(oBe,"STRONG",{});var H5t=s(nMe);Q6r=r(H5t,"electra"),H5t.forEach(t),W6r=r(oBe," \u2014 "),DU=n(oBe,"A",{href:!0});var U5t=s(DU);H6r=r(U5t,"FlaxElectraModel"),U5t.forEach(t),U6r=r(oBe," (ELECTRA model)"),oBe.forEach(t),J6r=i(ne),i3=n(ne,"LI",{});var rBe=s(i3);sMe=n(rBe,"STRONG",{});var J5t=s(sMe);Y6r=r(J5t,"gpt2"),J5t.forEach(t),K6r=r(rBe," \u2014 "),GU=n(rBe,"A",{href:!0});var Y5t=s(GU);Z6r=r(Y5t,"FlaxGPT2Model"),Y5t.forEach(t),e0r=r(rBe," (OpenAI GPT-2 model)"),rBe.forEach(t),o0r=i(ne),d3=n(ne,"LI",{});var tBe=s(d3);lMe=n(tBe,"STRONG",{});var K5t=s(lMe);r0r=r(K5t,"gpt_neo"),K5t.forEach(t),t0r=r(tBe," \u2014 "),OU=n(tBe,"A",{href:!0});var Z5t=s(OU);a0r=r(Z5t,"FlaxGPTNeoModel"),Z5t.forEach(t),n0r=r(tBe," (GPT Neo model)"),tBe.forEach(t),s0r=i(ne),c3=n(ne,"LI",{});var aBe=s(c3);iMe=n(aBe,"STRONG",{});var eCt=s(iMe);l0r=r(eCt,"gptj"),eCt.forEach(t),i0r=r(aBe," \u2014 "),VU=n(aBe,"A",{href:!0});var oCt=s(VU);d0r=r(oCt,"FlaxGPTJModel"),oCt.forEach(t),c0r=r(aBe," (GPT-J model)"),aBe.forEach(t),m0r=i(ne),m3=n(ne,"LI",{});var nBe=s(m3);dMe=n(nBe,"STRONG",{});var rCt=s(dMe);f0r=r(rCt,"marian"),rCt.forEach(t),g0r=r(nBe," \u2014 "),XU=n(nBe,"A",{href:!0});var tCt=s(XU);h0r=r(tCt,"FlaxMarianModel"),tCt.forEach(t),u0r=r(nBe," (Marian model)"),nBe.forEach(t),p0r=i(ne),f3=n(ne,"LI",{});var sBe=s(f3);cMe=n(sBe,"STRONG",{});var aCt=s(cMe);_0r=r(aCt,"mbart"),aCt.forEach(t),b0r=r(sBe," \u2014 "),zU=n(sBe,"A",{href:!0});var nCt=s(zU);F0r=r(nCt,"FlaxMBartModel"),nCt.forEach(t),v0r=r(sBe," (mBART model)"),sBe.forEach(t),T0r=i(ne),g3=n(ne,"LI",{});var lBe=s(g3);mMe=n(lBe,"STRONG",{});var sCt=s(mMe);M0r=r(sCt,"mt5"),sCt.forEach(t),E0r=r(lBe," \u2014 "),QU=n(lBe,"A",{href:!0});var lCt=s(QU);C0r=r(lCt,"FlaxMT5Model"),lCt.forEach(t),w0r=r(lBe," (mT5 model)"),lBe.forEach(t),A0r=i(ne),h3=n(ne,"LI",{});var iBe=s(h3);fMe=n(iBe,"STRONG",{});var iCt=s(fMe);y0r=r(iCt,"pegasus"),iCt.forEach(t),L0r=r(iBe," \u2014 "),WU=n(iBe,"A",{href:!0});var dCt=s(WU);x0r=r(dCt,"FlaxPegasusModel"),dCt.forEach(t),$0r=r(iBe," (Pegasus model)"),iBe.forEach(t),k0r=i(ne),u3=n(ne,"LI",{});var dBe=s(u3);gMe=n(dBe,"STRONG",{});var cCt=s(gMe);S0r=r(cCt,"roberta"),cCt.forEach(t),R0r=r(dBe," \u2014 "),HU=n(dBe,"A",{href:!0});var mCt=s(HU);B0r=r(mCt,"FlaxRobertaModel"),mCt.forEach(t),P0r=r(dBe," (RoBERTa model)"),dBe.forEach(t),I0r=i(ne),p3=n(ne,"LI",{});var cBe=s(p3);hMe=n(cBe,"STRONG",{});var fCt=s(hMe);q0r=r(fCt,"roformer"),fCt.forEach(t),N0r=r(cBe," \u2014 "),UU=n(cBe,"A",{href:!0});var gCt=s(UU);j0r=r(gCt,"FlaxRoFormerModel"),gCt.forEach(t),D0r=r(cBe," (RoFormer model)"),cBe.forEach(t),G0r=i(ne),_3=n(ne,"LI",{});var mBe=s(_3);uMe=n(mBe,"STRONG",{});var hCt=s(uMe);O0r=r(hCt,"t5"),hCt.forEach(t),V0r=r(mBe," \u2014 "),JU=n(mBe,"A",{href:!0});var uCt=s(JU);X0r=r(uCt,"FlaxT5Model"),uCt.forEach(t),z0r=r(mBe," (T5 model)"),mBe.forEach(t),Q0r=i(ne),b3=n(ne,"LI",{});var fBe=s(b3);pMe=n(fBe,"STRONG",{});var pCt=s(pMe);W0r=r(pCt,"vision-text-dual-encoder"),pCt.forEach(t),H0r=r(fBe," \u2014 "),YU=n(fBe,"A",{href:!0});var _Ct=s(YU);U0r=r(_Ct,"FlaxVisionTextDualEncoderModel"),_Ct.forEach(t),J0r=r(fBe," (VisionTextDualEncoder model)"),fBe.forEach(t),Y0r=i(ne),F3=n(ne,"LI",{});var gBe=s(F3);_Me=n(gBe,"STRONG",{});var bCt=s(_Me);K0r=r(bCt,"vit"),bCt.forEach(t),Z0r=r(gBe," \u2014 "),KU=n(gBe,"A",{href:!0});var FCt=s(KU);eyr=r(FCt,"FlaxViTModel"),FCt.forEach(t),oyr=r(gBe," (ViT model)"),gBe.forEach(t),ryr=i(ne),v3=n(ne,"LI",{});var hBe=s(v3);bMe=n(hBe,"STRONG",{});var vCt=s(bMe);tyr=r(vCt,"wav2vec2"),vCt.forEach(t),ayr=r(hBe," \u2014 "),ZU=n(hBe,"A",{href:!0});var TCt=s(ZU);nyr=r(TCt,"FlaxWav2Vec2Model"),TCt.forEach(t),syr=r(hBe," (Wav2Vec2 model)"),hBe.forEach(t),lyr=i(ne),T3=n(ne,"LI",{});var uBe=s(T3);FMe=n(uBe,"STRONG",{});var MCt=s(FMe);iyr=r(MCt,"xglm"),MCt.forEach(t),dyr=r(uBe," \u2014 "),eJ=n(uBe,"A",{href:!0});var ECt=s(eJ);cyr=r(ECt,"FlaxXGLMModel"),ECt.forEach(t),myr=r(uBe," (XGLM model)"),uBe.forEach(t),fyr=i(ne),M3=n(ne,"LI",{});var pBe=s(M3);vMe=n(pBe,"STRONG",{});var CCt=s(vMe);gyr=r(CCt,"xlm-roberta"),CCt.forEach(t),hyr=r(pBe," \u2014 "),oJ=n(pBe,"A",{href:!0});var wCt=s(oJ);uyr=r(wCt,"FlaxXLMRobertaModel"),wCt.forEach(t),pyr=r(pBe," (XLM-RoBERTa model)"),pBe.forEach(t),ne.forEach(t),_yr=i(Nl),T(E3.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),Cqe=i(m),xc=n(m,"H2",{class:!0});var kje=s(xc);C3=n(kje,"A",{id:!0,class:!0,href:!0});var ACt=s(C3);TMe=n(ACt,"SPAN",{});var yCt=s(TMe);T(e7.$$.fragment,yCt),yCt.forEach(t),ACt.forEach(t),byr=i(kje),MMe=n(kje,"SPAN",{});var LCt=s(MMe);Fyr=r(LCt,"FlaxAutoModelForCausalLM"),LCt.forEach(t),kje.forEach(t),wqe=i(m),fr=n(m,"DIV",{class:!0});var jl=s(fr);T(o7.$$.fragment,jl),vyr=i(jl),$c=n(jl,"P",{});var SZ=s($c);Tyr=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),rJ=n(SZ,"A",{href:!0});var xCt=s(rJ);Myr=r(xCt,"from_pretrained()"),xCt.forEach(t),Eyr=r(SZ," class method or the "),tJ=n(SZ,"A",{href:!0});var $Ct=s(tJ);Cyr=r($Ct,"from_config()"),$Ct.forEach(t),wyr=r(SZ,` class
method.`),SZ.forEach(t),Ayr=i(jl),r7=n(jl,"P",{});var Sje=s(r7);yyr=r(Sje,"This class cannot be instantiated directly using "),EMe=n(Sje,"CODE",{});var kCt=s(EMe);Lyr=r(kCt,"__init__()"),kCt.forEach(t),xyr=r(Sje," (throws an error)."),Sje.forEach(t),$yr=i(jl),Dt=n(jl,"DIV",{class:!0});var w0=s(Dt);T(t7.$$.fragment,w0),kyr=i(w0),CMe=n(w0,"P",{});var SCt=s(CMe);Syr=r(SCt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),SCt.forEach(t),Ryr=i(w0),kc=n(w0,"P",{});var RZ=s(kc);Byr=r(RZ,`Note:
Loading a model from its configuration file does `),wMe=n(RZ,"STRONG",{});var RCt=s(wMe);Pyr=r(RCt,"not"),RCt.forEach(t),Iyr=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aJ=n(RZ,"A",{href:!0});var BCt=s(aJ);qyr=r(BCt,"from_pretrained()"),BCt.forEach(t),Nyr=r(RZ," to load the model weights."),RZ.forEach(t),jyr=i(w0),T(w3.$$.fragment,w0),w0.forEach(t),Dyr=i(jl),Dr=n(jl,"DIV",{class:!0});var Dl=s(Dr);T(a7.$$.fragment,Dl),Gyr=i(Dl),AMe=n(Dl,"P",{});var PCt=s(AMe);Oyr=r(PCt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),PCt.forEach(t),Vyr=i(Dl),hn=n(Dl,"P",{});var A0=s(hn);Xyr=r(A0,"The model class to instantiate is selected based on the "),yMe=n(A0,"CODE",{});var ICt=s(yMe);zyr=r(ICt,"model_type"),ICt.forEach(t),Qyr=r(A0,` property of the config object (either
passed as an argument or loaded from `),LMe=n(A0,"CODE",{});var qCt=s(LMe);Wyr=r(qCt,"pretrained_model_name_or_path"),qCt.forEach(t),Hyr=r(A0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xMe=n(A0,"CODE",{});var NCt=s(xMe);Uyr=r(NCt,"pretrained_model_name_or_path"),NCt.forEach(t),Jyr=r(A0,":"),A0.forEach(t),Yyr=i(Dl),ke=n(Dl,"UL",{});var Oe=s(ke);A3=n(Oe,"LI",{});var _Be=s(A3);$Me=n(_Be,"STRONG",{});var jCt=s($Me);Kyr=r(jCt,"bart"),jCt.forEach(t),Zyr=r(_Be," \u2014 "),nJ=n(_Be,"A",{href:!0});var DCt=s(nJ);eLr=r(DCt,"FlaxBartForCausalLM"),DCt.forEach(t),oLr=r(_Be," (BART model)"),_Be.forEach(t),rLr=i(Oe),y3=n(Oe,"LI",{});var bBe=s(y3);kMe=n(bBe,"STRONG",{});var GCt=s(kMe);tLr=r(GCt,"bert"),GCt.forEach(t),aLr=r(bBe," \u2014 "),sJ=n(bBe,"A",{href:!0});var OCt=s(sJ);nLr=r(OCt,"FlaxBertForCausalLM"),OCt.forEach(t),sLr=r(bBe," (BERT model)"),bBe.forEach(t),lLr=i(Oe),L3=n(Oe,"LI",{});var FBe=s(L3);SMe=n(FBe,"STRONG",{});var VCt=s(SMe);iLr=r(VCt,"big_bird"),VCt.forEach(t),dLr=r(FBe," \u2014 "),lJ=n(FBe,"A",{href:!0});var XCt=s(lJ);cLr=r(XCt,"FlaxBigBirdForCausalLM"),XCt.forEach(t),mLr=r(FBe," (BigBird model)"),FBe.forEach(t),fLr=i(Oe),x3=n(Oe,"LI",{});var vBe=s(x3);RMe=n(vBe,"STRONG",{});var zCt=s(RMe);gLr=r(zCt,"electra"),zCt.forEach(t),hLr=r(vBe," \u2014 "),iJ=n(vBe,"A",{href:!0});var QCt=s(iJ);uLr=r(QCt,"FlaxElectraForCausalLM"),QCt.forEach(t),pLr=r(vBe," (ELECTRA model)"),vBe.forEach(t),_Lr=i(Oe),$3=n(Oe,"LI",{});var TBe=s($3);BMe=n(TBe,"STRONG",{});var WCt=s(BMe);bLr=r(WCt,"gpt2"),WCt.forEach(t),FLr=r(TBe," \u2014 "),dJ=n(TBe,"A",{href:!0});var HCt=s(dJ);vLr=r(HCt,"FlaxGPT2LMHeadModel"),HCt.forEach(t),TLr=r(TBe," (OpenAI GPT-2 model)"),TBe.forEach(t),MLr=i(Oe),k3=n(Oe,"LI",{});var MBe=s(k3);PMe=n(MBe,"STRONG",{});var UCt=s(PMe);ELr=r(UCt,"gpt_neo"),UCt.forEach(t),CLr=r(MBe," \u2014 "),cJ=n(MBe,"A",{href:!0});var JCt=s(cJ);wLr=r(JCt,"FlaxGPTNeoForCausalLM"),JCt.forEach(t),ALr=r(MBe," (GPT Neo model)"),MBe.forEach(t),yLr=i(Oe),S3=n(Oe,"LI",{});var EBe=s(S3);IMe=n(EBe,"STRONG",{});var YCt=s(IMe);LLr=r(YCt,"gptj"),YCt.forEach(t),xLr=r(EBe," \u2014 "),mJ=n(EBe,"A",{href:!0});var KCt=s(mJ);$Lr=r(KCt,"FlaxGPTJForCausalLM"),KCt.forEach(t),kLr=r(EBe," (GPT-J model)"),EBe.forEach(t),SLr=i(Oe),R3=n(Oe,"LI",{});var CBe=s(R3);qMe=n(CBe,"STRONG",{});var ZCt=s(qMe);RLr=r(ZCt,"roberta"),ZCt.forEach(t),BLr=r(CBe," \u2014 "),fJ=n(CBe,"A",{href:!0});var e3t=s(fJ);PLr=r(e3t,"FlaxRobertaForCausalLM"),e3t.forEach(t),ILr=r(CBe," (RoBERTa model)"),CBe.forEach(t),qLr=i(Oe),B3=n(Oe,"LI",{});var wBe=s(B3);NMe=n(wBe,"STRONG",{});var o3t=s(NMe);NLr=r(o3t,"xglm"),o3t.forEach(t),jLr=r(wBe," \u2014 "),gJ=n(wBe,"A",{href:!0});var r3t=s(gJ);DLr=r(r3t,"FlaxXGLMForCausalLM"),r3t.forEach(t),GLr=r(wBe," (XGLM model)"),wBe.forEach(t),Oe.forEach(t),OLr=i(Dl),T(P3.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),Aqe=i(m),Sc=n(m,"H2",{class:!0});var Rje=s(Sc);I3=n(Rje,"A",{id:!0,class:!0,href:!0});var t3t=s(I3);jMe=n(t3t,"SPAN",{});var a3t=s(jMe);T(n7.$$.fragment,a3t),a3t.forEach(t),t3t.forEach(t),VLr=i(Rje),DMe=n(Rje,"SPAN",{});var n3t=s(DMe);XLr=r(n3t,"FlaxAutoModelForPreTraining"),n3t.forEach(t),Rje.forEach(t),yqe=i(m),gr=n(m,"DIV",{class:!0});var Gl=s(gr);T(s7.$$.fragment,Gl),zLr=i(Gl),Rc=n(Gl,"P",{});var BZ=s(Rc);QLr=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),hJ=n(BZ,"A",{href:!0});var s3t=s(hJ);WLr=r(s3t,"from_pretrained()"),s3t.forEach(t),HLr=r(BZ," class method or the "),uJ=n(BZ,"A",{href:!0});var l3t=s(uJ);ULr=r(l3t,"from_config()"),l3t.forEach(t),JLr=r(BZ,` class
method.`),BZ.forEach(t),YLr=i(Gl),l7=n(Gl,"P",{});var Bje=s(l7);KLr=r(Bje,"This class cannot be instantiated directly using "),GMe=n(Bje,"CODE",{});var i3t=s(GMe);ZLr=r(i3t,"__init__()"),i3t.forEach(t),e8r=r(Bje," (throws an error)."),Bje.forEach(t),o8r=i(Gl),Gt=n(Gl,"DIV",{class:!0});var y0=s(Gt);T(i7.$$.fragment,y0),r8r=i(y0),OMe=n(y0,"P",{});var d3t=s(OMe);t8r=r(d3t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),d3t.forEach(t),a8r=i(y0),Bc=n(y0,"P",{});var PZ=s(Bc);n8r=r(PZ,`Note:
Loading a model from its configuration file does `),VMe=n(PZ,"STRONG",{});var c3t=s(VMe);s8r=r(c3t,"not"),c3t.forEach(t),l8r=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pJ=n(PZ,"A",{href:!0});var m3t=s(pJ);i8r=r(m3t,"from_pretrained()"),m3t.forEach(t),d8r=r(PZ," to load the model weights."),PZ.forEach(t),c8r=i(y0),T(q3.$$.fragment,y0),y0.forEach(t),m8r=i(Gl),Gr=n(Gl,"DIV",{class:!0});var Ol=s(Gr);T(d7.$$.fragment,Ol),f8r=i(Ol),XMe=n(Ol,"P",{});var f3t=s(XMe);g8r=r(f3t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),f3t.forEach(t),h8r=i(Ol),un=n(Ol,"P",{});var L0=s(un);u8r=r(L0,"The model class to instantiate is selected based on the "),zMe=n(L0,"CODE",{});var g3t=s(zMe);p8r=r(g3t,"model_type"),g3t.forEach(t),_8r=r(L0,` property of the config object (either
passed as an argument or loaded from `),QMe=n(L0,"CODE",{});var h3t=s(QMe);b8r=r(h3t,"pretrained_model_name_or_path"),h3t.forEach(t),F8r=r(L0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WMe=n(L0,"CODE",{});var u3t=s(WMe);v8r=r(u3t,"pretrained_model_name_or_path"),u3t.forEach(t),T8r=r(L0,":"),L0.forEach(t),M8r=i(Ol),Me=n(Ol,"UL",{});var we=s(Me);N3=n(we,"LI",{});var ABe=s(N3);HMe=n(ABe,"STRONG",{});var p3t=s(HMe);E8r=r(p3t,"albert"),p3t.forEach(t),C8r=r(ABe," \u2014 "),_J=n(ABe,"A",{href:!0});var _3t=s(_J);w8r=r(_3t,"FlaxAlbertForPreTraining"),_3t.forEach(t),A8r=r(ABe," (ALBERT model)"),ABe.forEach(t),y8r=i(we),j3=n(we,"LI",{});var yBe=s(j3);UMe=n(yBe,"STRONG",{});var b3t=s(UMe);L8r=r(b3t,"bart"),b3t.forEach(t),x8r=r(yBe," \u2014 "),bJ=n(yBe,"A",{href:!0});var F3t=s(bJ);$8r=r(F3t,"FlaxBartForConditionalGeneration"),F3t.forEach(t),k8r=r(yBe," (BART model)"),yBe.forEach(t),S8r=i(we),D3=n(we,"LI",{});var LBe=s(D3);JMe=n(LBe,"STRONG",{});var v3t=s(JMe);R8r=r(v3t,"bert"),v3t.forEach(t),B8r=r(LBe," \u2014 "),FJ=n(LBe,"A",{href:!0});var T3t=s(FJ);P8r=r(T3t,"FlaxBertForPreTraining"),T3t.forEach(t),I8r=r(LBe," (BERT model)"),LBe.forEach(t),q8r=i(we),G3=n(we,"LI",{});var xBe=s(G3);YMe=n(xBe,"STRONG",{});var M3t=s(YMe);N8r=r(M3t,"big_bird"),M3t.forEach(t),j8r=r(xBe," \u2014 "),vJ=n(xBe,"A",{href:!0});var E3t=s(vJ);D8r=r(E3t,"FlaxBigBirdForPreTraining"),E3t.forEach(t),G8r=r(xBe," (BigBird model)"),xBe.forEach(t),O8r=i(we),O3=n(we,"LI",{});var $Be=s(O3);KMe=n($Be,"STRONG",{});var C3t=s(KMe);V8r=r(C3t,"electra"),C3t.forEach(t),X8r=r($Be," \u2014 "),TJ=n($Be,"A",{href:!0});var w3t=s(TJ);z8r=r(w3t,"FlaxElectraForPreTraining"),w3t.forEach(t),Q8r=r($Be," (ELECTRA model)"),$Be.forEach(t),W8r=i(we),V3=n(we,"LI",{});var kBe=s(V3);ZMe=n(kBe,"STRONG",{});var A3t=s(ZMe);H8r=r(A3t,"mbart"),A3t.forEach(t),U8r=r(kBe," \u2014 "),MJ=n(kBe,"A",{href:!0});var y3t=s(MJ);J8r=r(y3t,"FlaxMBartForConditionalGeneration"),y3t.forEach(t),Y8r=r(kBe," (mBART model)"),kBe.forEach(t),K8r=i(we),X3=n(we,"LI",{});var SBe=s(X3);e4e=n(SBe,"STRONG",{});var L3t=s(e4e);Z8r=r(L3t,"mt5"),L3t.forEach(t),exr=r(SBe," \u2014 "),EJ=n(SBe,"A",{href:!0});var x3t=s(EJ);oxr=r(x3t,"FlaxMT5ForConditionalGeneration"),x3t.forEach(t),rxr=r(SBe," (mT5 model)"),SBe.forEach(t),txr=i(we),z3=n(we,"LI",{});var RBe=s(z3);o4e=n(RBe,"STRONG",{});var $3t=s(o4e);axr=r($3t,"roberta"),$3t.forEach(t),nxr=r(RBe," \u2014 "),CJ=n(RBe,"A",{href:!0});var k3t=s(CJ);sxr=r(k3t,"FlaxRobertaForMaskedLM"),k3t.forEach(t),lxr=r(RBe," (RoBERTa model)"),RBe.forEach(t),ixr=i(we),Q3=n(we,"LI",{});var BBe=s(Q3);r4e=n(BBe,"STRONG",{});var S3t=s(r4e);dxr=r(S3t,"roformer"),S3t.forEach(t),cxr=r(BBe," \u2014 "),wJ=n(BBe,"A",{href:!0});var R3t=s(wJ);mxr=r(R3t,"FlaxRoFormerForMaskedLM"),R3t.forEach(t),fxr=r(BBe," (RoFormer model)"),BBe.forEach(t),gxr=i(we),W3=n(we,"LI",{});var PBe=s(W3);t4e=n(PBe,"STRONG",{});var B3t=s(t4e);hxr=r(B3t,"t5"),B3t.forEach(t),uxr=r(PBe," \u2014 "),AJ=n(PBe,"A",{href:!0});var P3t=s(AJ);pxr=r(P3t,"FlaxT5ForConditionalGeneration"),P3t.forEach(t),_xr=r(PBe," (T5 model)"),PBe.forEach(t),bxr=i(we),H3=n(we,"LI",{});var IBe=s(H3);a4e=n(IBe,"STRONG",{});var I3t=s(a4e);Fxr=r(I3t,"wav2vec2"),I3t.forEach(t),vxr=r(IBe," \u2014 "),yJ=n(IBe,"A",{href:!0});var q3t=s(yJ);Txr=r(q3t,"FlaxWav2Vec2ForPreTraining"),q3t.forEach(t),Mxr=r(IBe," (Wav2Vec2 model)"),IBe.forEach(t),Exr=i(we),U3=n(we,"LI",{});var qBe=s(U3);n4e=n(qBe,"STRONG",{});var N3t=s(n4e);Cxr=r(N3t,"xlm-roberta"),N3t.forEach(t),wxr=r(qBe," \u2014 "),LJ=n(qBe,"A",{href:!0});var j3t=s(LJ);Axr=r(j3t,"FlaxXLMRobertaForMaskedLM"),j3t.forEach(t),yxr=r(qBe," (XLM-RoBERTa model)"),qBe.forEach(t),we.forEach(t),Lxr=i(Ol),T(J3.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),Lqe=i(m),Pc=n(m,"H2",{class:!0});var Pje=s(Pc);Y3=n(Pje,"A",{id:!0,class:!0,href:!0});var D3t=s(Y3);s4e=n(D3t,"SPAN",{});var G3t=s(s4e);T(c7.$$.fragment,G3t),G3t.forEach(t),D3t.forEach(t),xxr=i(Pje),l4e=n(Pje,"SPAN",{});var O3t=s(l4e);$xr=r(O3t,"FlaxAutoModelForMaskedLM"),O3t.forEach(t),Pje.forEach(t),xqe=i(m),hr=n(m,"DIV",{class:!0});var Vl=s(hr);T(m7.$$.fragment,Vl),kxr=i(Vl),Ic=n(Vl,"P",{});var IZ=s(Ic);Sxr=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),xJ=n(IZ,"A",{href:!0});var V3t=s(xJ);Rxr=r(V3t,"from_pretrained()"),V3t.forEach(t),Bxr=r(IZ," class method or the "),$J=n(IZ,"A",{href:!0});var X3t=s($J);Pxr=r(X3t,"from_config()"),X3t.forEach(t),Ixr=r(IZ,` class
method.`),IZ.forEach(t),qxr=i(Vl),f7=n(Vl,"P",{});var Ije=s(f7);Nxr=r(Ije,"This class cannot be instantiated directly using "),i4e=n(Ije,"CODE",{});var z3t=s(i4e);jxr=r(z3t,"__init__()"),z3t.forEach(t),Dxr=r(Ije," (throws an error)."),Ije.forEach(t),Gxr=i(Vl),Ot=n(Vl,"DIV",{class:!0});var x0=s(Ot);T(g7.$$.fragment,x0),Oxr=i(x0),d4e=n(x0,"P",{});var Q3t=s(d4e);Vxr=r(Q3t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Q3t.forEach(t),Xxr=i(x0),qc=n(x0,"P",{});var qZ=s(qc);zxr=r(qZ,`Note:
Loading a model from its configuration file does `),c4e=n(qZ,"STRONG",{});var W3t=s(c4e);Qxr=r(W3t,"not"),W3t.forEach(t),Wxr=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=n(qZ,"A",{href:!0});var H3t=s(kJ);Hxr=r(H3t,"from_pretrained()"),H3t.forEach(t),Uxr=r(qZ," to load the model weights."),qZ.forEach(t),Jxr=i(x0),T(K3.$$.fragment,x0),x0.forEach(t),Yxr=i(Vl),Or=n(Vl,"DIV",{class:!0});var Xl=s(Or);T(h7.$$.fragment,Xl),Kxr=i(Xl),m4e=n(Xl,"P",{});var U3t=s(m4e);Zxr=r(U3t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),U3t.forEach(t),e7r=i(Xl),pn=n(Xl,"P",{});var $0=s(pn);o7r=r($0,"The model class to instantiate is selected based on the "),f4e=n($0,"CODE",{});var J3t=s(f4e);r7r=r(J3t,"model_type"),J3t.forEach(t),t7r=r($0,` property of the config object (either
passed as an argument or loaded from `),g4e=n($0,"CODE",{});var Y3t=s(g4e);a7r=r(Y3t,"pretrained_model_name_or_path"),Y3t.forEach(t),n7r=r($0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h4e=n($0,"CODE",{});var K3t=s(h4e);s7r=r(K3t,"pretrained_model_name_or_path"),K3t.forEach(t),l7r=r($0,":"),$0.forEach(t),i7r=i(Xl),Le=n(Xl,"UL",{});var Be=s(Le);Z3=n(Be,"LI",{});var NBe=s(Z3);u4e=n(NBe,"STRONG",{});var Z3t=s(u4e);d7r=r(Z3t,"albert"),Z3t.forEach(t),c7r=r(NBe," \u2014 "),SJ=n(NBe,"A",{href:!0});var ewt=s(SJ);m7r=r(ewt,"FlaxAlbertForMaskedLM"),ewt.forEach(t),f7r=r(NBe," (ALBERT model)"),NBe.forEach(t),g7r=i(Be),ew=n(Be,"LI",{});var jBe=s(ew);p4e=n(jBe,"STRONG",{});var owt=s(p4e);h7r=r(owt,"bart"),owt.forEach(t),u7r=r(jBe," \u2014 "),RJ=n(jBe,"A",{href:!0});var rwt=s(RJ);p7r=r(rwt,"FlaxBartForConditionalGeneration"),rwt.forEach(t),_7r=r(jBe," (BART model)"),jBe.forEach(t),b7r=i(Be),ow=n(Be,"LI",{});var DBe=s(ow);_4e=n(DBe,"STRONG",{});var twt=s(_4e);F7r=r(twt,"bert"),twt.forEach(t),v7r=r(DBe," \u2014 "),BJ=n(DBe,"A",{href:!0});var awt=s(BJ);T7r=r(awt,"FlaxBertForMaskedLM"),awt.forEach(t),M7r=r(DBe," (BERT model)"),DBe.forEach(t),E7r=i(Be),rw=n(Be,"LI",{});var GBe=s(rw);b4e=n(GBe,"STRONG",{});var nwt=s(b4e);C7r=r(nwt,"big_bird"),nwt.forEach(t),w7r=r(GBe," \u2014 "),PJ=n(GBe,"A",{href:!0});var swt=s(PJ);A7r=r(swt,"FlaxBigBirdForMaskedLM"),swt.forEach(t),y7r=r(GBe," (BigBird model)"),GBe.forEach(t),L7r=i(Be),tw=n(Be,"LI",{});var OBe=s(tw);F4e=n(OBe,"STRONG",{});var lwt=s(F4e);x7r=r(lwt,"distilbert"),lwt.forEach(t),$7r=r(OBe," \u2014 "),IJ=n(OBe,"A",{href:!0});var iwt=s(IJ);k7r=r(iwt,"FlaxDistilBertForMaskedLM"),iwt.forEach(t),S7r=r(OBe," (DistilBERT model)"),OBe.forEach(t),R7r=i(Be),aw=n(Be,"LI",{});var VBe=s(aw);v4e=n(VBe,"STRONG",{});var dwt=s(v4e);B7r=r(dwt,"electra"),dwt.forEach(t),P7r=r(VBe," \u2014 "),qJ=n(VBe,"A",{href:!0});var cwt=s(qJ);I7r=r(cwt,"FlaxElectraForMaskedLM"),cwt.forEach(t),q7r=r(VBe," (ELECTRA model)"),VBe.forEach(t),N7r=i(Be),nw=n(Be,"LI",{});var XBe=s(nw);T4e=n(XBe,"STRONG",{});var mwt=s(T4e);j7r=r(mwt,"mbart"),mwt.forEach(t),D7r=r(XBe," \u2014 "),NJ=n(XBe,"A",{href:!0});var fwt=s(NJ);G7r=r(fwt,"FlaxMBartForConditionalGeneration"),fwt.forEach(t),O7r=r(XBe," (mBART model)"),XBe.forEach(t),V7r=i(Be),sw=n(Be,"LI",{});var zBe=s(sw);M4e=n(zBe,"STRONG",{});var gwt=s(M4e);X7r=r(gwt,"roberta"),gwt.forEach(t),z7r=r(zBe," \u2014 "),jJ=n(zBe,"A",{href:!0});var hwt=s(jJ);Q7r=r(hwt,"FlaxRobertaForMaskedLM"),hwt.forEach(t),W7r=r(zBe," (RoBERTa model)"),zBe.forEach(t),H7r=i(Be),lw=n(Be,"LI",{});var QBe=s(lw);E4e=n(QBe,"STRONG",{});var uwt=s(E4e);U7r=r(uwt,"roformer"),uwt.forEach(t),J7r=r(QBe," \u2014 "),DJ=n(QBe,"A",{href:!0});var pwt=s(DJ);Y7r=r(pwt,"FlaxRoFormerForMaskedLM"),pwt.forEach(t),K7r=r(QBe," (RoFormer model)"),QBe.forEach(t),Z7r=i(Be),iw=n(Be,"LI",{});var WBe=s(iw);C4e=n(WBe,"STRONG",{});var _wt=s(C4e);e9r=r(_wt,"xlm-roberta"),_wt.forEach(t),o9r=r(WBe," \u2014 "),GJ=n(WBe,"A",{href:!0});var bwt=s(GJ);r9r=r(bwt,"FlaxXLMRobertaForMaskedLM"),bwt.forEach(t),t9r=r(WBe," (XLM-RoBERTa model)"),WBe.forEach(t),Be.forEach(t),a9r=i(Xl),T(dw.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),$qe=i(m),Nc=n(m,"H2",{class:!0});var qje=s(Nc);cw=n(qje,"A",{id:!0,class:!0,href:!0});var Fwt=s(cw);w4e=n(Fwt,"SPAN",{});var vwt=s(w4e);T(u7.$$.fragment,vwt),vwt.forEach(t),Fwt.forEach(t),n9r=i(qje),A4e=n(qje,"SPAN",{});var Twt=s(A4e);s9r=r(Twt,"FlaxAutoModelForSeq2SeqLM"),Twt.forEach(t),qje.forEach(t),kqe=i(m),ur=n(m,"DIV",{class:!0});var zl=s(ur);T(p7.$$.fragment,zl),l9r=i(zl),jc=n(zl,"P",{});var NZ=s(jc);i9r=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),OJ=n(NZ,"A",{href:!0});var Mwt=s(OJ);d9r=r(Mwt,"from_pretrained()"),Mwt.forEach(t),c9r=r(NZ," class method or the "),VJ=n(NZ,"A",{href:!0});var Ewt=s(VJ);m9r=r(Ewt,"from_config()"),Ewt.forEach(t),f9r=r(NZ,` class
method.`),NZ.forEach(t),g9r=i(zl),_7=n(zl,"P",{});var Nje=s(_7);h9r=r(Nje,"This class cannot be instantiated directly using "),y4e=n(Nje,"CODE",{});var Cwt=s(y4e);u9r=r(Cwt,"__init__()"),Cwt.forEach(t),p9r=r(Nje," (throws an error)."),Nje.forEach(t),_9r=i(zl),Vt=n(zl,"DIV",{class:!0});var k0=s(Vt);T(b7.$$.fragment,k0),b9r=i(k0),L4e=n(k0,"P",{});var wwt=s(L4e);F9r=r(wwt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),wwt.forEach(t),v9r=i(k0),Dc=n(k0,"P",{});var jZ=s(Dc);T9r=r(jZ,`Note:
Loading a model from its configuration file does `),x4e=n(jZ,"STRONG",{});var Awt=s(x4e);M9r=r(Awt,"not"),Awt.forEach(t),E9r=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XJ=n(jZ,"A",{href:!0});var ywt=s(XJ);C9r=r(ywt,"from_pretrained()"),ywt.forEach(t),w9r=r(jZ," to load the model weights."),jZ.forEach(t),A9r=i(k0),T(mw.$$.fragment,k0),k0.forEach(t),y9r=i(zl),Vr=n(zl,"DIV",{class:!0});var Ql=s(Vr);T(F7.$$.fragment,Ql),L9r=i(Ql),$4e=n(Ql,"P",{});var Lwt=s($4e);x9r=r(Lwt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Lwt.forEach(t),$9r=i(Ql),_n=n(Ql,"P",{});var S0=s(_n);k9r=r(S0,"The model class to instantiate is selected based on the "),k4e=n(S0,"CODE",{});var xwt=s(k4e);S9r=r(xwt,"model_type"),xwt.forEach(t),R9r=r(S0,` property of the config object (either
passed as an argument or loaded from `),S4e=n(S0,"CODE",{});var $wt=s(S4e);B9r=r($wt,"pretrained_model_name_or_path"),$wt.forEach(t),P9r=r(S0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R4e=n(S0,"CODE",{});var kwt=s(R4e);I9r=r(kwt,"pretrained_model_name_or_path"),kwt.forEach(t),q9r=r(S0,":"),S0.forEach(t),N9r=i(Ql),Se=n(Ql,"UL",{});var Ve=s(Se);fw=n(Ve,"LI",{});var HBe=s(fw);B4e=n(HBe,"STRONG",{});var Swt=s(B4e);j9r=r(Swt,"bart"),Swt.forEach(t),D9r=r(HBe," \u2014 "),zJ=n(HBe,"A",{href:!0});var Rwt=s(zJ);G9r=r(Rwt,"FlaxBartForConditionalGeneration"),Rwt.forEach(t),O9r=r(HBe," (BART model)"),HBe.forEach(t),V9r=i(Ve),gw=n(Ve,"LI",{});var UBe=s(gw);P4e=n(UBe,"STRONG",{});var Bwt=s(P4e);X9r=r(Bwt,"blenderbot"),Bwt.forEach(t),z9r=r(UBe," \u2014 "),QJ=n(UBe,"A",{href:!0});var Pwt=s(QJ);Q9r=r(Pwt,"FlaxBlenderbotForConditionalGeneration"),Pwt.forEach(t),W9r=r(UBe," (Blenderbot model)"),UBe.forEach(t),H9r=i(Ve),hw=n(Ve,"LI",{});var JBe=s(hw);I4e=n(JBe,"STRONG",{});var Iwt=s(I4e);U9r=r(Iwt,"blenderbot-small"),Iwt.forEach(t),J9r=r(JBe," \u2014 "),WJ=n(JBe,"A",{href:!0});var qwt=s(WJ);Y9r=r(qwt,"FlaxBlenderbotSmallForConditionalGeneration"),qwt.forEach(t),K9r=r(JBe," (BlenderbotSmall model)"),JBe.forEach(t),Z9r=i(Ve),uw=n(Ve,"LI",{});var YBe=s(uw);q4e=n(YBe,"STRONG",{});var Nwt=s(q4e);e$r=r(Nwt,"encoder-decoder"),Nwt.forEach(t),o$r=r(YBe," \u2014 "),HJ=n(YBe,"A",{href:!0});var jwt=s(HJ);r$r=r(jwt,"FlaxEncoderDecoderModel"),jwt.forEach(t),t$r=r(YBe," (Encoder decoder model)"),YBe.forEach(t),a$r=i(Ve),pw=n(Ve,"LI",{});var KBe=s(pw);N4e=n(KBe,"STRONG",{});var Dwt=s(N4e);n$r=r(Dwt,"marian"),Dwt.forEach(t),s$r=r(KBe," \u2014 "),UJ=n(KBe,"A",{href:!0});var Gwt=s(UJ);l$r=r(Gwt,"FlaxMarianMTModel"),Gwt.forEach(t),i$r=r(KBe," (Marian model)"),KBe.forEach(t),d$r=i(Ve),_w=n(Ve,"LI",{});var ZBe=s(_w);j4e=n(ZBe,"STRONG",{});var Owt=s(j4e);c$r=r(Owt,"mbart"),Owt.forEach(t),m$r=r(ZBe," \u2014 "),JJ=n(ZBe,"A",{href:!0});var Vwt=s(JJ);f$r=r(Vwt,"FlaxMBartForConditionalGeneration"),Vwt.forEach(t),g$r=r(ZBe," (mBART model)"),ZBe.forEach(t),h$r=i(Ve),bw=n(Ve,"LI",{});var ePe=s(bw);D4e=n(ePe,"STRONG",{});var Xwt=s(D4e);u$r=r(Xwt,"mt5"),Xwt.forEach(t),p$r=r(ePe," \u2014 "),YJ=n(ePe,"A",{href:!0});var zwt=s(YJ);_$r=r(zwt,"FlaxMT5ForConditionalGeneration"),zwt.forEach(t),b$r=r(ePe," (mT5 model)"),ePe.forEach(t),F$r=i(Ve),Fw=n(Ve,"LI",{});var oPe=s(Fw);G4e=n(oPe,"STRONG",{});var Qwt=s(G4e);v$r=r(Qwt,"pegasus"),Qwt.forEach(t),T$r=r(oPe," \u2014 "),KJ=n(oPe,"A",{href:!0});var Wwt=s(KJ);M$r=r(Wwt,"FlaxPegasusForConditionalGeneration"),Wwt.forEach(t),E$r=r(oPe," (Pegasus model)"),oPe.forEach(t),C$r=i(Ve),vw=n(Ve,"LI",{});var rPe=s(vw);O4e=n(rPe,"STRONG",{});var Hwt=s(O4e);w$r=r(Hwt,"t5"),Hwt.forEach(t),A$r=r(rPe," \u2014 "),ZJ=n(rPe,"A",{href:!0});var Uwt=s(ZJ);y$r=r(Uwt,"FlaxT5ForConditionalGeneration"),Uwt.forEach(t),L$r=r(rPe," (T5 model)"),rPe.forEach(t),Ve.forEach(t),x$r=i(Ql),T(Tw.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),Sqe=i(m),Gc=n(m,"H2",{class:!0});var jje=s(Gc);Mw=n(jje,"A",{id:!0,class:!0,href:!0});var Jwt=s(Mw);V4e=n(Jwt,"SPAN",{});var Ywt=s(V4e);T(v7.$$.fragment,Ywt),Ywt.forEach(t),Jwt.forEach(t),$$r=i(jje),X4e=n(jje,"SPAN",{});var Kwt=s(X4e);k$r=r(Kwt,"FlaxAutoModelForSequenceClassification"),Kwt.forEach(t),jje.forEach(t),Rqe=i(m),pr=n(m,"DIV",{class:!0});var Wl=s(pr);T(T7.$$.fragment,Wl),S$r=i(Wl),Oc=n(Wl,"P",{});var DZ=s(Oc);R$r=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),eY=n(DZ,"A",{href:!0});var Zwt=s(eY);B$r=r(Zwt,"from_pretrained()"),Zwt.forEach(t),P$r=r(DZ," class method or the "),oY=n(DZ,"A",{href:!0});var eAt=s(oY);I$r=r(eAt,"from_config()"),eAt.forEach(t),q$r=r(DZ,` class
method.`),DZ.forEach(t),N$r=i(Wl),M7=n(Wl,"P",{});var Dje=s(M7);j$r=r(Dje,"This class cannot be instantiated directly using "),z4e=n(Dje,"CODE",{});var oAt=s(z4e);D$r=r(oAt,"__init__()"),oAt.forEach(t),G$r=r(Dje," (throws an error)."),Dje.forEach(t),O$r=i(Wl),Xt=n(Wl,"DIV",{class:!0});var R0=s(Xt);T(E7.$$.fragment,R0),V$r=i(R0),Q4e=n(R0,"P",{});var rAt=s(Q4e);X$r=r(rAt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),rAt.forEach(t),z$r=i(R0),Vc=n(R0,"P",{});var GZ=s(Vc);Q$r=r(GZ,`Note:
Loading a model from its configuration file does `),W4e=n(GZ,"STRONG",{});var tAt=s(W4e);W$r=r(tAt,"not"),tAt.forEach(t),H$r=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rY=n(GZ,"A",{href:!0});var aAt=s(rY);U$r=r(aAt,"from_pretrained()"),aAt.forEach(t),J$r=r(GZ," to load the model weights."),GZ.forEach(t),Y$r=i(R0),T(Ew.$$.fragment,R0),R0.forEach(t),K$r=i(Wl),Xr=n(Wl,"DIV",{class:!0});var Hl=s(Xr);T(C7.$$.fragment,Hl),Z$r=i(Hl),H4e=n(Hl,"P",{});var nAt=s(H4e);ekr=r(nAt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),nAt.forEach(t),okr=i(Hl),bn=n(Hl,"P",{});var B0=s(bn);rkr=r(B0,"The model class to instantiate is selected based on the "),U4e=n(B0,"CODE",{});var sAt=s(U4e);tkr=r(sAt,"model_type"),sAt.forEach(t),akr=r(B0,` property of the config object (either
passed as an argument or loaded from `),J4e=n(B0,"CODE",{});var lAt=s(J4e);nkr=r(lAt,"pretrained_model_name_or_path"),lAt.forEach(t),skr=r(B0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y4e=n(B0,"CODE",{});var iAt=s(Y4e);lkr=r(iAt,"pretrained_model_name_or_path"),iAt.forEach(t),ikr=r(B0,":"),B0.forEach(t),dkr=i(Hl),xe=n(Hl,"UL",{});var Pe=s(xe);Cw=n(Pe,"LI",{});var tPe=s(Cw);K4e=n(tPe,"STRONG",{});var dAt=s(K4e);ckr=r(dAt,"albert"),dAt.forEach(t),mkr=r(tPe," \u2014 "),tY=n(tPe,"A",{href:!0});var cAt=s(tY);fkr=r(cAt,"FlaxAlbertForSequenceClassification"),cAt.forEach(t),gkr=r(tPe," (ALBERT model)"),tPe.forEach(t),hkr=i(Pe),ww=n(Pe,"LI",{});var aPe=s(ww);Z4e=n(aPe,"STRONG",{});var mAt=s(Z4e);ukr=r(mAt,"bart"),mAt.forEach(t),pkr=r(aPe," \u2014 "),aY=n(aPe,"A",{href:!0});var fAt=s(aY);_kr=r(fAt,"FlaxBartForSequenceClassification"),fAt.forEach(t),bkr=r(aPe," (BART model)"),aPe.forEach(t),Fkr=i(Pe),Aw=n(Pe,"LI",{});var nPe=s(Aw);eEe=n(nPe,"STRONG",{});var gAt=s(eEe);vkr=r(gAt,"bert"),gAt.forEach(t),Tkr=r(nPe," \u2014 "),nY=n(nPe,"A",{href:!0});var hAt=s(nY);Mkr=r(hAt,"FlaxBertForSequenceClassification"),hAt.forEach(t),Ekr=r(nPe," (BERT model)"),nPe.forEach(t),Ckr=i(Pe),yw=n(Pe,"LI",{});var sPe=s(yw);oEe=n(sPe,"STRONG",{});var uAt=s(oEe);wkr=r(uAt,"big_bird"),uAt.forEach(t),Akr=r(sPe," \u2014 "),sY=n(sPe,"A",{href:!0});var pAt=s(sY);ykr=r(pAt,"FlaxBigBirdForSequenceClassification"),pAt.forEach(t),Lkr=r(sPe," (BigBird model)"),sPe.forEach(t),xkr=i(Pe),Lw=n(Pe,"LI",{});var lPe=s(Lw);rEe=n(lPe,"STRONG",{});var _At=s(rEe);$kr=r(_At,"distilbert"),_At.forEach(t),kkr=r(lPe," \u2014 "),lY=n(lPe,"A",{href:!0});var bAt=s(lY);Skr=r(bAt,"FlaxDistilBertForSequenceClassification"),bAt.forEach(t),Rkr=r(lPe," (DistilBERT model)"),lPe.forEach(t),Bkr=i(Pe),xw=n(Pe,"LI",{});var iPe=s(xw);tEe=n(iPe,"STRONG",{});var FAt=s(tEe);Pkr=r(FAt,"electra"),FAt.forEach(t),Ikr=r(iPe," \u2014 "),iY=n(iPe,"A",{href:!0});var vAt=s(iY);qkr=r(vAt,"FlaxElectraForSequenceClassification"),vAt.forEach(t),Nkr=r(iPe," (ELECTRA model)"),iPe.forEach(t),jkr=i(Pe),$w=n(Pe,"LI",{});var dPe=s($w);aEe=n(dPe,"STRONG",{});var TAt=s(aEe);Dkr=r(TAt,"mbart"),TAt.forEach(t),Gkr=r(dPe," \u2014 "),dY=n(dPe,"A",{href:!0});var MAt=s(dY);Okr=r(MAt,"FlaxMBartForSequenceClassification"),MAt.forEach(t),Vkr=r(dPe," (mBART model)"),dPe.forEach(t),Xkr=i(Pe),kw=n(Pe,"LI",{});var cPe=s(kw);nEe=n(cPe,"STRONG",{});var EAt=s(nEe);zkr=r(EAt,"roberta"),EAt.forEach(t),Qkr=r(cPe," \u2014 "),cY=n(cPe,"A",{href:!0});var CAt=s(cY);Wkr=r(CAt,"FlaxRobertaForSequenceClassification"),CAt.forEach(t),Hkr=r(cPe," (RoBERTa model)"),cPe.forEach(t),Ukr=i(Pe),Sw=n(Pe,"LI",{});var mPe=s(Sw);sEe=n(mPe,"STRONG",{});var wAt=s(sEe);Jkr=r(wAt,"roformer"),wAt.forEach(t),Ykr=r(mPe," \u2014 "),mY=n(mPe,"A",{href:!0});var AAt=s(mY);Kkr=r(AAt,"FlaxRoFormerForSequenceClassification"),AAt.forEach(t),Zkr=r(mPe," (RoFormer model)"),mPe.forEach(t),eSr=i(Pe),Rw=n(Pe,"LI",{});var fPe=s(Rw);lEe=n(fPe,"STRONG",{});var yAt=s(lEe);oSr=r(yAt,"xlm-roberta"),yAt.forEach(t),rSr=r(fPe," \u2014 "),fY=n(fPe,"A",{href:!0});var LAt=s(fY);tSr=r(LAt,"FlaxXLMRobertaForSequenceClassification"),LAt.forEach(t),aSr=r(fPe," (XLM-RoBERTa model)"),fPe.forEach(t),Pe.forEach(t),nSr=i(Hl),T(Bw.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),Bqe=i(m),Xc=n(m,"H2",{class:!0});var Gje=s(Xc);Pw=n(Gje,"A",{id:!0,class:!0,href:!0});var xAt=s(Pw);iEe=n(xAt,"SPAN",{});var $At=s(iEe);T(w7.$$.fragment,$At),$At.forEach(t),xAt.forEach(t),sSr=i(Gje),dEe=n(Gje,"SPAN",{});var kAt=s(dEe);lSr=r(kAt,"FlaxAutoModelForQuestionAnswering"),kAt.forEach(t),Gje.forEach(t),Pqe=i(m),_r=n(m,"DIV",{class:!0});var Ul=s(_r);T(A7.$$.fragment,Ul),iSr=i(Ul),zc=n(Ul,"P",{});var OZ=s(zc);dSr=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gY=n(OZ,"A",{href:!0});var SAt=s(gY);cSr=r(SAt,"from_pretrained()"),SAt.forEach(t),mSr=r(OZ," class method or the "),hY=n(OZ,"A",{href:!0});var RAt=s(hY);fSr=r(RAt,"from_config()"),RAt.forEach(t),gSr=r(OZ,` class
method.`),OZ.forEach(t),hSr=i(Ul),y7=n(Ul,"P",{});var Oje=s(y7);uSr=r(Oje,"This class cannot be instantiated directly using "),cEe=n(Oje,"CODE",{});var BAt=s(cEe);pSr=r(BAt,"__init__()"),BAt.forEach(t),_Sr=r(Oje," (throws an error)."),Oje.forEach(t),bSr=i(Ul),zt=n(Ul,"DIV",{class:!0});var P0=s(zt);T(L7.$$.fragment,P0),FSr=i(P0),mEe=n(P0,"P",{});var PAt=s(mEe);vSr=r(PAt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),PAt.forEach(t),TSr=i(P0),Qc=n(P0,"P",{});var VZ=s(Qc);MSr=r(VZ,`Note:
Loading a model from its configuration file does `),fEe=n(VZ,"STRONG",{});var IAt=s(fEe);ESr=r(IAt,"not"),IAt.forEach(t),CSr=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=n(VZ,"A",{href:!0});var qAt=s(uY);wSr=r(qAt,"from_pretrained()"),qAt.forEach(t),ASr=r(VZ," to load the model weights."),VZ.forEach(t),ySr=i(P0),T(Iw.$$.fragment,P0),P0.forEach(t),LSr=i(Ul),zr=n(Ul,"DIV",{class:!0});var Jl=s(zr);T(x7.$$.fragment,Jl),xSr=i(Jl),gEe=n(Jl,"P",{});var NAt=s(gEe);$Sr=r(NAt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),NAt.forEach(t),kSr=i(Jl),Fn=n(Jl,"P",{});var I0=s(Fn);SSr=r(I0,"The model class to instantiate is selected based on the "),hEe=n(I0,"CODE",{});var jAt=s(hEe);RSr=r(jAt,"model_type"),jAt.forEach(t),BSr=r(I0,` property of the config object (either
passed as an argument or loaded from `),uEe=n(I0,"CODE",{});var DAt=s(uEe);PSr=r(DAt,"pretrained_model_name_or_path"),DAt.forEach(t),ISr=r(I0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pEe=n(I0,"CODE",{});var GAt=s(pEe);qSr=r(GAt,"pretrained_model_name_or_path"),GAt.forEach(t),NSr=r(I0,":"),I0.forEach(t),jSr=i(Jl),$e=n(Jl,"UL",{});var Ie=s($e);qw=n(Ie,"LI",{});var gPe=s(qw);_Ee=n(gPe,"STRONG",{});var OAt=s(_Ee);DSr=r(OAt,"albert"),OAt.forEach(t),GSr=r(gPe," \u2014 "),pY=n(gPe,"A",{href:!0});var VAt=s(pY);OSr=r(VAt,"FlaxAlbertForQuestionAnswering"),VAt.forEach(t),VSr=r(gPe," (ALBERT model)"),gPe.forEach(t),XSr=i(Ie),Nw=n(Ie,"LI",{});var hPe=s(Nw);bEe=n(hPe,"STRONG",{});var XAt=s(bEe);zSr=r(XAt,"bart"),XAt.forEach(t),QSr=r(hPe," \u2014 "),_Y=n(hPe,"A",{href:!0});var zAt=s(_Y);WSr=r(zAt,"FlaxBartForQuestionAnswering"),zAt.forEach(t),HSr=r(hPe," (BART model)"),hPe.forEach(t),USr=i(Ie),jw=n(Ie,"LI",{});var uPe=s(jw);FEe=n(uPe,"STRONG",{});var QAt=s(FEe);JSr=r(QAt,"bert"),QAt.forEach(t),YSr=r(uPe," \u2014 "),bY=n(uPe,"A",{href:!0});var WAt=s(bY);KSr=r(WAt,"FlaxBertForQuestionAnswering"),WAt.forEach(t),ZSr=r(uPe," (BERT model)"),uPe.forEach(t),eRr=i(Ie),Dw=n(Ie,"LI",{});var pPe=s(Dw);vEe=n(pPe,"STRONG",{});var HAt=s(vEe);oRr=r(HAt,"big_bird"),HAt.forEach(t),rRr=r(pPe," \u2014 "),FY=n(pPe,"A",{href:!0});var UAt=s(FY);tRr=r(UAt,"FlaxBigBirdForQuestionAnswering"),UAt.forEach(t),aRr=r(pPe," (BigBird model)"),pPe.forEach(t),nRr=i(Ie),Gw=n(Ie,"LI",{});var _Pe=s(Gw);TEe=n(_Pe,"STRONG",{});var JAt=s(TEe);sRr=r(JAt,"distilbert"),JAt.forEach(t),lRr=r(_Pe," \u2014 "),vY=n(_Pe,"A",{href:!0});var YAt=s(vY);iRr=r(YAt,"FlaxDistilBertForQuestionAnswering"),YAt.forEach(t),dRr=r(_Pe," (DistilBERT model)"),_Pe.forEach(t),cRr=i(Ie),Ow=n(Ie,"LI",{});var bPe=s(Ow);MEe=n(bPe,"STRONG",{});var KAt=s(MEe);mRr=r(KAt,"electra"),KAt.forEach(t),fRr=r(bPe," \u2014 "),TY=n(bPe,"A",{href:!0});var ZAt=s(TY);gRr=r(ZAt,"FlaxElectraForQuestionAnswering"),ZAt.forEach(t),hRr=r(bPe," (ELECTRA model)"),bPe.forEach(t),uRr=i(Ie),Vw=n(Ie,"LI",{});var FPe=s(Vw);EEe=n(FPe,"STRONG",{});var e6t=s(EEe);pRr=r(e6t,"mbart"),e6t.forEach(t),_Rr=r(FPe," \u2014 "),MY=n(FPe,"A",{href:!0});var o6t=s(MY);bRr=r(o6t,"FlaxMBartForQuestionAnswering"),o6t.forEach(t),FRr=r(FPe," (mBART model)"),FPe.forEach(t),vRr=i(Ie),Xw=n(Ie,"LI",{});var vPe=s(Xw);CEe=n(vPe,"STRONG",{});var r6t=s(CEe);TRr=r(r6t,"roberta"),r6t.forEach(t),MRr=r(vPe," \u2014 "),EY=n(vPe,"A",{href:!0});var t6t=s(EY);ERr=r(t6t,"FlaxRobertaForQuestionAnswering"),t6t.forEach(t),CRr=r(vPe," (RoBERTa model)"),vPe.forEach(t),wRr=i(Ie),zw=n(Ie,"LI",{});var TPe=s(zw);wEe=n(TPe,"STRONG",{});var a6t=s(wEe);ARr=r(a6t,"roformer"),a6t.forEach(t),yRr=r(TPe," \u2014 "),CY=n(TPe,"A",{href:!0});var n6t=s(CY);LRr=r(n6t,"FlaxRoFormerForQuestionAnswering"),n6t.forEach(t),xRr=r(TPe," (RoFormer model)"),TPe.forEach(t),$Rr=i(Ie),Qw=n(Ie,"LI",{});var MPe=s(Qw);AEe=n(MPe,"STRONG",{});var s6t=s(AEe);kRr=r(s6t,"xlm-roberta"),s6t.forEach(t),SRr=r(MPe," \u2014 "),wY=n(MPe,"A",{href:!0});var l6t=s(wY);RRr=r(l6t,"FlaxXLMRobertaForQuestionAnswering"),l6t.forEach(t),BRr=r(MPe," (XLM-RoBERTa model)"),MPe.forEach(t),Ie.forEach(t),PRr=i(Jl),T(Ww.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),Iqe=i(m),Wc=n(m,"H2",{class:!0});var Vje=s(Wc);Hw=n(Vje,"A",{id:!0,class:!0,href:!0});var i6t=s(Hw);yEe=n(i6t,"SPAN",{});var d6t=s(yEe);T($7.$$.fragment,d6t),d6t.forEach(t),i6t.forEach(t),IRr=i(Vje),LEe=n(Vje,"SPAN",{});var c6t=s(LEe);qRr=r(c6t,"FlaxAutoModelForTokenClassification"),c6t.forEach(t),Vje.forEach(t),qqe=i(m),br=n(m,"DIV",{class:!0});var Yl=s(br);T(k7.$$.fragment,Yl),NRr=i(Yl),Hc=n(Yl,"P",{});var XZ=s(Hc);jRr=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),AY=n(XZ,"A",{href:!0});var m6t=s(AY);DRr=r(m6t,"from_pretrained()"),m6t.forEach(t),GRr=r(XZ," class method or the "),yY=n(XZ,"A",{href:!0});var f6t=s(yY);ORr=r(f6t,"from_config()"),f6t.forEach(t),VRr=r(XZ,` class
method.`),XZ.forEach(t),XRr=i(Yl),S7=n(Yl,"P",{});var Xje=s(S7);zRr=r(Xje,"This class cannot be instantiated directly using "),xEe=n(Xje,"CODE",{});var g6t=s(xEe);QRr=r(g6t,"__init__()"),g6t.forEach(t),WRr=r(Xje," (throws an error)."),Xje.forEach(t),HRr=i(Yl),Qt=n(Yl,"DIV",{class:!0});var q0=s(Qt);T(R7.$$.fragment,q0),URr=i(q0),$Ee=n(q0,"P",{});var h6t=s($Ee);JRr=r(h6t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),h6t.forEach(t),YRr=i(q0),Uc=n(q0,"P",{});var zZ=s(Uc);KRr=r(zZ,`Note:
Loading a model from its configuration file does `),kEe=n(zZ,"STRONG",{});var u6t=s(kEe);ZRr=r(u6t,"not"),u6t.forEach(t),eBr=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LY=n(zZ,"A",{href:!0});var p6t=s(LY);oBr=r(p6t,"from_pretrained()"),p6t.forEach(t),rBr=r(zZ," to load the model weights."),zZ.forEach(t),tBr=i(q0),T(Uw.$$.fragment,q0),q0.forEach(t),aBr=i(Yl),Qr=n(Yl,"DIV",{class:!0});var Kl=s(Qr);T(B7.$$.fragment,Kl),nBr=i(Kl),SEe=n(Kl,"P",{});var _6t=s(SEe);sBr=r(_6t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_6t.forEach(t),lBr=i(Kl),vn=n(Kl,"P",{});var N0=s(vn);iBr=r(N0,"The model class to instantiate is selected based on the "),REe=n(N0,"CODE",{});var b6t=s(REe);dBr=r(b6t,"model_type"),b6t.forEach(t),cBr=r(N0,` property of the config object (either
passed as an argument or loaded from `),BEe=n(N0,"CODE",{});var F6t=s(BEe);mBr=r(F6t,"pretrained_model_name_or_path"),F6t.forEach(t),fBr=r(N0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PEe=n(N0,"CODE",{});var v6t=s(PEe);gBr=r(v6t,"pretrained_model_name_or_path"),v6t.forEach(t),hBr=r(N0,":"),N0.forEach(t),uBr=i(Kl),De=n(Kl,"UL",{});var vo=s(De);Jw=n(vo,"LI",{});var EPe=s(Jw);IEe=n(EPe,"STRONG",{});var T6t=s(IEe);pBr=r(T6t,"albert"),T6t.forEach(t),_Br=r(EPe," \u2014 "),xY=n(EPe,"A",{href:!0});var M6t=s(xY);bBr=r(M6t,"FlaxAlbertForTokenClassification"),M6t.forEach(t),FBr=r(EPe," (ALBERT model)"),EPe.forEach(t),vBr=i(vo),Yw=n(vo,"LI",{});var CPe=s(Yw);qEe=n(CPe,"STRONG",{});var E6t=s(qEe);TBr=r(E6t,"bert"),E6t.forEach(t),MBr=r(CPe," \u2014 "),$Y=n(CPe,"A",{href:!0});var C6t=s($Y);EBr=r(C6t,"FlaxBertForTokenClassification"),C6t.forEach(t),CBr=r(CPe," (BERT model)"),CPe.forEach(t),wBr=i(vo),Kw=n(vo,"LI",{});var wPe=s(Kw);NEe=n(wPe,"STRONG",{});var w6t=s(NEe);ABr=r(w6t,"big_bird"),w6t.forEach(t),yBr=r(wPe," \u2014 "),kY=n(wPe,"A",{href:!0});var A6t=s(kY);LBr=r(A6t,"FlaxBigBirdForTokenClassification"),A6t.forEach(t),xBr=r(wPe," (BigBird model)"),wPe.forEach(t),$Br=i(vo),Zw=n(vo,"LI",{});var APe=s(Zw);jEe=n(APe,"STRONG",{});var y6t=s(jEe);kBr=r(y6t,"distilbert"),y6t.forEach(t),SBr=r(APe," \u2014 "),SY=n(APe,"A",{href:!0});var L6t=s(SY);RBr=r(L6t,"FlaxDistilBertForTokenClassification"),L6t.forEach(t),BBr=r(APe," (DistilBERT model)"),APe.forEach(t),PBr=i(vo),eA=n(vo,"LI",{});var yPe=s(eA);DEe=n(yPe,"STRONG",{});var x6t=s(DEe);IBr=r(x6t,"electra"),x6t.forEach(t),qBr=r(yPe," \u2014 "),RY=n(yPe,"A",{href:!0});var $6t=s(RY);NBr=r($6t,"FlaxElectraForTokenClassification"),$6t.forEach(t),jBr=r(yPe," (ELECTRA model)"),yPe.forEach(t),DBr=i(vo),oA=n(vo,"LI",{});var LPe=s(oA);GEe=n(LPe,"STRONG",{});var k6t=s(GEe);GBr=r(k6t,"roberta"),k6t.forEach(t),OBr=r(LPe," \u2014 "),BY=n(LPe,"A",{href:!0});var S6t=s(BY);VBr=r(S6t,"FlaxRobertaForTokenClassification"),S6t.forEach(t),XBr=r(LPe," (RoBERTa model)"),LPe.forEach(t),zBr=i(vo),rA=n(vo,"LI",{});var xPe=s(rA);OEe=n(xPe,"STRONG",{});var R6t=s(OEe);QBr=r(R6t,"roformer"),R6t.forEach(t),WBr=r(xPe," \u2014 "),PY=n(xPe,"A",{href:!0});var B6t=s(PY);HBr=r(B6t,"FlaxRoFormerForTokenClassification"),B6t.forEach(t),UBr=r(xPe," (RoFormer model)"),xPe.forEach(t),JBr=i(vo),tA=n(vo,"LI",{});var $Pe=s(tA);VEe=n($Pe,"STRONG",{});var P6t=s(VEe);YBr=r(P6t,"xlm-roberta"),P6t.forEach(t),KBr=r($Pe," \u2014 "),IY=n($Pe,"A",{href:!0});var I6t=s(IY);ZBr=r(I6t,"FlaxXLMRobertaForTokenClassification"),I6t.forEach(t),ePr=r($Pe," (XLM-RoBERTa model)"),$Pe.forEach(t),vo.forEach(t),oPr=i(Kl),T(aA.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),Nqe=i(m),Jc=n(m,"H2",{class:!0});var zje=s(Jc);nA=n(zje,"A",{id:!0,class:!0,href:!0});var q6t=s(nA);XEe=n(q6t,"SPAN",{});var N6t=s(XEe);T(P7.$$.fragment,N6t),N6t.forEach(t),q6t.forEach(t),rPr=i(zje),zEe=n(zje,"SPAN",{});var j6t=s(zEe);tPr=r(j6t,"FlaxAutoModelForMultipleChoice"),j6t.forEach(t),zje.forEach(t),jqe=i(m),Fr=n(m,"DIV",{class:!0});var Zl=s(Fr);T(I7.$$.fragment,Zl),aPr=i(Zl),Yc=n(Zl,"P",{});var QZ=s(Yc);nPr=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),qY=n(QZ,"A",{href:!0});var D6t=s(qY);sPr=r(D6t,"from_pretrained()"),D6t.forEach(t),lPr=r(QZ," class method or the "),NY=n(QZ,"A",{href:!0});var G6t=s(NY);iPr=r(G6t,"from_config()"),G6t.forEach(t),dPr=r(QZ,` class
method.`),QZ.forEach(t),cPr=i(Zl),q7=n(Zl,"P",{});var Qje=s(q7);mPr=r(Qje,"This class cannot be instantiated directly using "),QEe=n(Qje,"CODE",{});var O6t=s(QEe);fPr=r(O6t,"__init__()"),O6t.forEach(t),gPr=r(Qje," (throws an error)."),Qje.forEach(t),hPr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var j0=s(Wt);T(N7.$$.fragment,j0),uPr=i(j0),WEe=n(j0,"P",{});var V6t=s(WEe);pPr=r(V6t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),V6t.forEach(t),_Pr=i(j0),Kc=n(j0,"P",{});var WZ=s(Kc);bPr=r(WZ,`Note:
Loading a model from its configuration file does `),HEe=n(WZ,"STRONG",{});var X6t=s(HEe);FPr=r(X6t,"not"),X6t.forEach(t),vPr=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jY=n(WZ,"A",{href:!0});var z6t=s(jY);TPr=r(z6t,"from_pretrained()"),z6t.forEach(t),MPr=r(WZ," to load the model weights."),WZ.forEach(t),EPr=i(j0),T(sA.$$.fragment,j0),j0.forEach(t),CPr=i(Zl),Wr=n(Zl,"DIV",{class:!0});var ei=s(Wr);T(j7.$$.fragment,ei),wPr=i(ei),UEe=n(ei,"P",{});var Q6t=s(UEe);APr=r(Q6t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Q6t.forEach(t),yPr=i(ei),Tn=n(ei,"P",{});var D0=s(Tn);LPr=r(D0,"The model class to instantiate is selected based on the "),JEe=n(D0,"CODE",{});var W6t=s(JEe);xPr=r(W6t,"model_type"),W6t.forEach(t),$Pr=r(D0,` property of the config object (either
passed as an argument or loaded from `),YEe=n(D0,"CODE",{});var H6t=s(YEe);kPr=r(H6t,"pretrained_model_name_or_path"),H6t.forEach(t),SPr=r(D0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KEe=n(D0,"CODE",{});var U6t=s(KEe);RPr=r(U6t,"pretrained_model_name_or_path"),U6t.forEach(t),BPr=r(D0,":"),D0.forEach(t),PPr=i(ei),Ge=n(ei,"UL",{});var To=s(Ge);lA=n(To,"LI",{});var kPe=s(lA);ZEe=n(kPe,"STRONG",{});var J6t=s(ZEe);IPr=r(J6t,"albert"),J6t.forEach(t),qPr=r(kPe," \u2014 "),DY=n(kPe,"A",{href:!0});var Y6t=s(DY);NPr=r(Y6t,"FlaxAlbertForMultipleChoice"),Y6t.forEach(t),jPr=r(kPe," (ALBERT model)"),kPe.forEach(t),DPr=i(To),iA=n(To,"LI",{});var SPe=s(iA);e5e=n(SPe,"STRONG",{});var K6t=s(e5e);GPr=r(K6t,"bert"),K6t.forEach(t),OPr=r(SPe," \u2014 "),GY=n(SPe,"A",{href:!0});var Z6t=s(GY);VPr=r(Z6t,"FlaxBertForMultipleChoice"),Z6t.forEach(t),XPr=r(SPe," (BERT model)"),SPe.forEach(t),zPr=i(To),dA=n(To,"LI",{});var RPe=s(dA);o5e=n(RPe,"STRONG",{});var e0t=s(o5e);QPr=r(e0t,"big_bird"),e0t.forEach(t),WPr=r(RPe," \u2014 "),OY=n(RPe,"A",{href:!0});var o0t=s(OY);HPr=r(o0t,"FlaxBigBirdForMultipleChoice"),o0t.forEach(t),UPr=r(RPe," (BigBird model)"),RPe.forEach(t),JPr=i(To),cA=n(To,"LI",{});var BPe=s(cA);r5e=n(BPe,"STRONG",{});var r0t=s(r5e);YPr=r(r0t,"distilbert"),r0t.forEach(t),KPr=r(BPe," \u2014 "),VY=n(BPe,"A",{href:!0});var t0t=s(VY);ZPr=r(t0t,"FlaxDistilBertForMultipleChoice"),t0t.forEach(t),eIr=r(BPe," (DistilBERT model)"),BPe.forEach(t),oIr=i(To),mA=n(To,"LI",{});var PPe=s(mA);t5e=n(PPe,"STRONG",{});var a0t=s(t5e);rIr=r(a0t,"electra"),a0t.forEach(t),tIr=r(PPe," \u2014 "),XY=n(PPe,"A",{href:!0});var n0t=s(XY);aIr=r(n0t,"FlaxElectraForMultipleChoice"),n0t.forEach(t),nIr=r(PPe," (ELECTRA model)"),PPe.forEach(t),sIr=i(To),fA=n(To,"LI",{});var IPe=s(fA);a5e=n(IPe,"STRONG",{});var s0t=s(a5e);lIr=r(s0t,"roberta"),s0t.forEach(t),iIr=r(IPe," \u2014 "),zY=n(IPe,"A",{href:!0});var l0t=s(zY);dIr=r(l0t,"FlaxRobertaForMultipleChoice"),l0t.forEach(t),cIr=r(IPe," (RoBERTa model)"),IPe.forEach(t),mIr=i(To),gA=n(To,"LI",{});var qPe=s(gA);n5e=n(qPe,"STRONG",{});var i0t=s(n5e);fIr=r(i0t,"roformer"),i0t.forEach(t),gIr=r(qPe," \u2014 "),QY=n(qPe,"A",{href:!0});var d0t=s(QY);hIr=r(d0t,"FlaxRoFormerForMultipleChoice"),d0t.forEach(t),uIr=r(qPe," (RoFormer model)"),qPe.forEach(t),pIr=i(To),hA=n(To,"LI",{});var NPe=s(hA);s5e=n(NPe,"STRONG",{});var c0t=s(s5e);_Ir=r(c0t,"xlm-roberta"),c0t.forEach(t),bIr=r(NPe," \u2014 "),WY=n(NPe,"A",{href:!0});var m0t=s(WY);FIr=r(m0t,"FlaxXLMRobertaForMultipleChoice"),m0t.forEach(t),vIr=r(NPe," (XLM-RoBERTa model)"),NPe.forEach(t),To.forEach(t),TIr=i(ei),T(uA.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),Dqe=i(m),Zc=n(m,"H2",{class:!0});var Wje=s(Zc);pA=n(Wje,"A",{id:!0,class:!0,href:!0});var f0t=s(pA);l5e=n(f0t,"SPAN",{});var g0t=s(l5e);T(D7.$$.fragment,g0t),g0t.forEach(t),f0t.forEach(t),MIr=i(Wje),i5e=n(Wje,"SPAN",{});var h0t=s(i5e);EIr=r(h0t,"FlaxAutoModelForNextSentencePrediction"),h0t.forEach(t),Wje.forEach(t),Gqe=i(m),vr=n(m,"DIV",{class:!0});var oi=s(vr);T(G7.$$.fragment,oi),CIr=i(oi),em=n(oi,"P",{});var HZ=s(em);wIr=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),HY=n(HZ,"A",{href:!0});var u0t=s(HY);AIr=r(u0t,"from_pretrained()"),u0t.forEach(t),yIr=r(HZ," class method or the "),UY=n(HZ,"A",{href:!0});var p0t=s(UY);LIr=r(p0t,"from_config()"),p0t.forEach(t),xIr=r(HZ,` class
method.`),HZ.forEach(t),$Ir=i(oi),O7=n(oi,"P",{});var Hje=s(O7);kIr=r(Hje,"This class cannot be instantiated directly using "),d5e=n(Hje,"CODE",{});var _0t=s(d5e);SIr=r(_0t,"__init__()"),_0t.forEach(t),RIr=r(Hje," (throws an error)."),Hje.forEach(t),BIr=i(oi),Ht=n(oi,"DIV",{class:!0});var G0=s(Ht);T(V7.$$.fragment,G0),PIr=i(G0),c5e=n(G0,"P",{});var b0t=s(c5e);IIr=r(b0t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),b0t.forEach(t),qIr=i(G0),om=n(G0,"P",{});var UZ=s(om);NIr=r(UZ,`Note:
Loading a model from its configuration file does `),m5e=n(UZ,"STRONG",{});var F0t=s(m5e);jIr=r(F0t,"not"),F0t.forEach(t),DIr=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JY=n(UZ,"A",{href:!0});var v0t=s(JY);GIr=r(v0t,"from_pretrained()"),v0t.forEach(t),OIr=r(UZ," to load the model weights."),UZ.forEach(t),VIr=i(G0),T(_A.$$.fragment,G0),G0.forEach(t),XIr=i(oi),Hr=n(oi,"DIV",{class:!0});var ri=s(Hr);T(X7.$$.fragment,ri),zIr=i(ri),f5e=n(ri,"P",{});var T0t=s(f5e);QIr=r(T0t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),T0t.forEach(t),WIr=i(ri),Mn=n(ri,"P",{});var O0=s(Mn);HIr=r(O0,"The model class to instantiate is selected based on the "),g5e=n(O0,"CODE",{});var M0t=s(g5e);UIr=r(M0t,"model_type"),M0t.forEach(t),JIr=r(O0,` property of the config object (either
passed as an argument or loaded from `),h5e=n(O0,"CODE",{});var E0t=s(h5e);YIr=r(E0t,"pretrained_model_name_or_path"),E0t.forEach(t),KIr=r(O0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u5e=n(O0,"CODE",{});var C0t=s(u5e);ZIr=r(C0t,"pretrained_model_name_or_path"),C0t.forEach(t),eqr=r(O0,":"),O0.forEach(t),oqr=i(ri),p5e=n(ri,"UL",{});var w0t=s(p5e);bA=n(w0t,"LI",{});var jPe=s(bA);_5e=n(jPe,"STRONG",{});var A0t=s(_5e);rqr=r(A0t,"bert"),A0t.forEach(t),tqr=r(jPe," \u2014 "),YY=n(jPe,"A",{href:!0});var y0t=s(YY);aqr=r(y0t,"FlaxBertForNextSentencePrediction"),y0t.forEach(t),nqr=r(jPe," (BERT model)"),jPe.forEach(t),w0t.forEach(t),sqr=i(ri),T(FA.$$.fragment,ri),ri.forEach(t),oi.forEach(t),Oqe=i(m),rm=n(m,"H2",{class:!0});var Uje=s(rm);vA=n(Uje,"A",{id:!0,class:!0,href:!0});var L0t=s(vA);b5e=n(L0t,"SPAN",{});var x0t=s(b5e);T(z7.$$.fragment,x0t),x0t.forEach(t),L0t.forEach(t),lqr=i(Uje),F5e=n(Uje,"SPAN",{});var $0t=s(F5e);iqr=r($0t,"FlaxAutoModelForImageClassification"),$0t.forEach(t),Uje.forEach(t),Vqe=i(m),Tr=n(m,"DIV",{class:!0});var ti=s(Tr);T(Q7.$$.fragment,ti),dqr=i(ti),tm=n(ti,"P",{});var JZ=s(tm);cqr=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),KY=n(JZ,"A",{href:!0});var k0t=s(KY);mqr=r(k0t,"from_pretrained()"),k0t.forEach(t),fqr=r(JZ," class method or the "),ZY=n(JZ,"A",{href:!0});var S0t=s(ZY);gqr=r(S0t,"from_config()"),S0t.forEach(t),hqr=r(JZ,` class
method.`),JZ.forEach(t),uqr=i(ti),W7=n(ti,"P",{});var Jje=s(W7);pqr=r(Jje,"This class cannot be instantiated directly using "),v5e=n(Jje,"CODE",{});var R0t=s(v5e);_qr=r(R0t,"__init__()"),R0t.forEach(t),bqr=r(Jje," (throws an error)."),Jje.forEach(t),Fqr=i(ti),Ut=n(ti,"DIV",{class:!0});var V0=s(Ut);T(H7.$$.fragment,V0),vqr=i(V0),T5e=n(V0,"P",{});var B0t=s(T5e);Tqr=r(B0t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),B0t.forEach(t),Mqr=i(V0),am=n(V0,"P",{});var YZ=s(am);Eqr=r(YZ,`Note:
Loading a model from its configuration file does `),M5e=n(YZ,"STRONG",{});var P0t=s(M5e);Cqr=r(P0t,"not"),P0t.forEach(t),wqr=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eK=n(YZ,"A",{href:!0});var I0t=s(eK);Aqr=r(I0t,"from_pretrained()"),I0t.forEach(t),yqr=r(YZ," to load the model weights."),YZ.forEach(t),Lqr=i(V0),T(TA.$$.fragment,V0),V0.forEach(t),xqr=i(ti),Ur=n(ti,"DIV",{class:!0});var ai=s(Ur);T(U7.$$.fragment,ai),$qr=i(ai),E5e=n(ai,"P",{});var q0t=s(E5e);kqr=r(q0t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),q0t.forEach(t),Sqr=i(ai),En=n(ai,"P",{});var X0=s(En);Rqr=r(X0,"The model class to instantiate is selected based on the "),C5e=n(X0,"CODE",{});var N0t=s(C5e);Bqr=r(N0t,"model_type"),N0t.forEach(t),Pqr=r(X0,` property of the config object (either
passed as an argument or loaded from `),w5e=n(X0,"CODE",{});var j0t=s(w5e);Iqr=r(j0t,"pretrained_model_name_or_path"),j0t.forEach(t),qqr=r(X0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A5e=n(X0,"CODE",{});var D0t=s(A5e);Nqr=r(D0t,"pretrained_model_name_or_path"),D0t.forEach(t),jqr=r(X0,":"),X0.forEach(t),Dqr=i(ai),J7=n(ai,"UL",{});var Yje=s(J7);MA=n(Yje,"LI",{});var DPe=s(MA);y5e=n(DPe,"STRONG",{});var G0t=s(y5e);Gqr=r(G0t,"beit"),G0t.forEach(t),Oqr=r(DPe," \u2014 "),oK=n(DPe,"A",{href:!0});var O0t=s(oK);Vqr=r(O0t,"FlaxBeitForImageClassification"),O0t.forEach(t),Xqr=r(DPe," (BEiT model)"),DPe.forEach(t),zqr=i(Yje),EA=n(Yje,"LI",{});var GPe=s(EA);L5e=n(GPe,"STRONG",{});var V0t=s(L5e);Qqr=r(V0t,"vit"),V0t.forEach(t),Wqr=r(GPe," \u2014 "),rK=n(GPe,"A",{href:!0});var X0t=s(rK);Hqr=r(X0t,"FlaxViTForImageClassification"),X0t.forEach(t),Uqr=r(GPe," (ViT model)"),GPe.forEach(t),Yje.forEach(t),Jqr=i(ai),T(CA.$$.fragment,ai),ai.forEach(t),ti.forEach(t),Xqe=i(m),nm=n(m,"H2",{class:!0});var Kje=s(nm);wA=n(Kje,"A",{id:!0,class:!0,href:!0});var z0t=s(wA);x5e=n(z0t,"SPAN",{});var Q0t=s(x5e);T(Y7.$$.fragment,Q0t),Q0t.forEach(t),z0t.forEach(t),Yqr=i(Kje),$5e=n(Kje,"SPAN",{});var W0t=s($5e);Kqr=r(W0t,"FlaxAutoModelForVision2Seq"),W0t.forEach(t),Kje.forEach(t),zqe=i(m),Mr=n(m,"DIV",{class:!0});var ni=s(Mr);T(K7.$$.fragment,ni),Zqr=i(ni),sm=n(ni,"P",{});var KZ=s(sm);eNr=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tK=n(KZ,"A",{href:!0});var H0t=s(tK);oNr=r(H0t,"from_pretrained()"),H0t.forEach(t),rNr=r(KZ," class method or the "),aK=n(KZ,"A",{href:!0});var U0t=s(aK);tNr=r(U0t,"from_config()"),U0t.forEach(t),aNr=r(KZ,` class
method.`),KZ.forEach(t),nNr=i(ni),Z7=n(ni,"P",{});var Zje=s(Z7);sNr=r(Zje,"This class cannot be instantiated directly using "),k5e=n(Zje,"CODE",{});var J0t=s(k5e);lNr=r(J0t,"__init__()"),J0t.forEach(t),iNr=r(Zje," (throws an error)."),Zje.forEach(t),dNr=i(ni),Jt=n(ni,"DIV",{class:!0});var z0=s(Jt);T(e9.$$.fragment,z0),cNr=i(z0),S5e=n(z0,"P",{});var Y0t=s(S5e);mNr=r(Y0t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Y0t.forEach(t),fNr=i(z0),lm=n(z0,"P",{});var ZZ=s(lm);gNr=r(ZZ,`Note:
Loading a model from its configuration file does `),R5e=n(ZZ,"STRONG",{});var K0t=s(R5e);hNr=r(K0t,"not"),K0t.forEach(t),uNr=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nK=n(ZZ,"A",{href:!0});var Z0t=s(nK);pNr=r(Z0t,"from_pretrained()"),Z0t.forEach(t),_Nr=r(ZZ," to load the model weights."),ZZ.forEach(t),bNr=i(z0),T(AA.$$.fragment,z0),z0.forEach(t),FNr=i(ni),Jr=n(ni,"DIV",{class:!0});var si=s(Jr);T(o9.$$.fragment,si),vNr=i(si),B5e=n(si,"P",{});var eyt=s(B5e);TNr=r(eyt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),eyt.forEach(t),MNr=i(si),Cn=n(si,"P",{});var Q0=s(Cn);ENr=r(Q0,"The model class to instantiate is selected based on the "),P5e=n(Q0,"CODE",{});var oyt=s(P5e);CNr=r(oyt,"model_type"),oyt.forEach(t),wNr=r(Q0,` property of the config object (either
passed as an argument or loaded from `),I5e=n(Q0,"CODE",{});var ryt=s(I5e);ANr=r(ryt,"pretrained_model_name_or_path"),ryt.forEach(t),yNr=r(Q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q5e=n(Q0,"CODE",{});var tyt=s(q5e);LNr=r(tyt,"pretrained_model_name_or_path"),tyt.forEach(t),xNr=r(Q0,":"),Q0.forEach(t),$Nr=i(si),N5e=n(si,"UL",{});var ayt=s(N5e);yA=n(ayt,"LI",{});var OPe=s(yA);j5e=n(OPe,"STRONG",{});var nyt=s(j5e);kNr=r(nyt,"vision-encoder-decoder"),nyt.forEach(t),SNr=r(OPe," \u2014 "),sK=n(OPe,"A",{href:!0});var syt=s(sK);RNr=r(syt,"FlaxVisionEncoderDecoderModel"),syt.forEach(t),BNr=r(OPe," (Vision Encoder decoder model)"),OPe.forEach(t),ayt.forEach(t),PNr=i(si),T(LA.$$.fragment,si),si.forEach(t),ni.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(c8t)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(An,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(Ln,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c(xn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(gi,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(um,"id","extending-the-auto-classes"),c(um,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(um,"href","#extending-the-auto-classes"),c(hi,"class","relative group"),c(_m,"id","transformers.AutoConfig"),c(_m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_m,"href","#transformers.AutoConfig"),c(ui,"class","relative group"),c(v$,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(T$,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(M$,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(E$,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(C$,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(w$,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(A$,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(y$,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(L$,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(x$,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c($$,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(k$,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(S$,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(R$,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(B$,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(P$,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(I$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(q$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(N$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(j$,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(D$,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(G$,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(O$,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(V$,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(X$,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(z$,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(Q$,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(W$,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(H$,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(U$,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(J$,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(Y$,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(K$,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(Z$,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(ek,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(ok,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(rk,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(tk,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(ak,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(nk,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(sk,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(lk,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(ik,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(dk,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(ck,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(mk,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(fk,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(gk,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(hk,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(uk,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(pk,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(_k,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(bk,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Fk,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(vk,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(Tk,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Mk,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Ek,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(Ck,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(wk,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Ak,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(yk,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Lk,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(xk,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c($k,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(kk,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(Sk,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(Rk,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(Bk,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(Pk,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(Ik,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(qk,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(Nk,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(jk,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(Dk,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(Gk,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(Ok,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(Vk,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(Xk,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(zk,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(Qk,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Wk,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(Hk,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(Uk,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(Jk,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(Yk,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(Kk,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(Zk,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(eS,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(oS,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(rS,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(tS,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(aS,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(nS,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(sS,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(lS,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(iS,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(dS,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(cS,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(mS,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(fS,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(gS,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(hS,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(uS,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(pS,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(_S,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_g,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bg,"id","transformers.AutoTokenizer"),c(bg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bg,"href","#transformers.AutoTokenizer"),c(_i,"class","relative group"),c(bS,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(FS,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(vS,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(TS,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(MS,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(ES,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(CS,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(wS,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(AS,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(yS,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(LS,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(xS,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c($S,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(kS,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(SS,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(RS,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(BS,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(PS,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(IS,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(qS,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(NS,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(jS,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(DS,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(GS,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(OS,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(VS,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(XS,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(zS,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(QS,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(WS,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(HS,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(US,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(JS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(YS,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(KS,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(ZS,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(eR,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(oR,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(rR,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(tR,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(aR,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(nR,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(sR,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(lR,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(iR,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(dR,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(cR,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(mR,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(fR,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(gR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(hR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(uR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(pR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(_R,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(bR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(FR,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(vR,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(TR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(MR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(ER,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(CR,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(wR,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(AR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(yR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(LR,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(xR,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c($R,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(kR,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(SR,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(RR,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(BR,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(PR,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(IR,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(qR,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(NR,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(jR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(DR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(GR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(OR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(VR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(XR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(zR,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(QR,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(WR,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(HR,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(UR,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(JR,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(YR,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(KR,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(ZR,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(eB,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(oB,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(rB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(tB,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(aB,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(nB,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(sB,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(lB,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(iB,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(dB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(cB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(mB,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(fB,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(gB,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(hB,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(uB,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(pB,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(_B,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(bB,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(FB,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(vB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(TB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(MB,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(EB,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(CB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(wB,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(AB,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(yB,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(LB,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(xB,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c($B,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(kB,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(SB,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(RB,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(BB,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(PB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(IB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(qB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(NB,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(jB,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(DB,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(GB,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(OB,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(VB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(XB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(zB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(QB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(WB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(HB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(UB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(JB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yg,"id","transformers.AutoFeatureExtractor"),c(Yg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yg,"href","#transformers.AutoFeatureExtractor"),c(bi,"class","relative group"),c(YB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(KB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(ZB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(eP,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(oP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(rP,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(tP,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(aP,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(nP,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(sP,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(lP,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(iP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(dP,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(cP,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(mP,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(fP,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(gP,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(hP,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(uP,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(pP,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(_P,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(bP,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(FP,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(vP,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(TP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(MP,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ah,"id","transformers.AutoProcessor"),c(Ah,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ah,"href","#transformers.AutoProcessor"),c(Fi,"class","relative group"),c(EP,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(CP,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(wP,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(AP,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(yP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(LP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(xP,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c($P,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(kP,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(SP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(RP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(BP,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(PP,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(IP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zh,"id","transformers.AutoModel"),c(zh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zh,"href","#transformers.AutoModel"),c(Ti,"class","relative group"),c(NP,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jP,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DP,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(OP,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(VP,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(XP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(zP,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(QP,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(WP,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(HP,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(UP,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(JP,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(YP,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(KP,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(ZP,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(eI,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(oI,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(rI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(tI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(aI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(nI,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(sI,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(lI,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(iI,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(dI,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(cI,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(mI,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(fI,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(gI,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(hI,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(uI,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(pI,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(_I,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(bI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(FI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(vI,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(TI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(MI,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(EI,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(CI,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(wI,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(AI,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(yI,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(LI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(xI,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c($I,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(kI,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(SI,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(RI,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(BI,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(PI,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(II,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(qI,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(NI,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(jI,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(DI,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(GI,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(OI,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(VI,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(XI,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(zI,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(QI,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(WI,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(HI,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(UI,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(JI,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(YI,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(KI,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(ZI,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(eq,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(oq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(rq,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(tq,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(aq,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(nq,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(sq,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(lq,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(iq,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(dq,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(cq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(mq,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(fq,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(gq,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(hq,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(uq,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(pq,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(_q,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(bq,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Fq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(vq,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Tq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Mq,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(Eq,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(Cq,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(wq,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Aq,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(yq,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Lq,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(xq,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c($q,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qp,"id","transformers.AutoModelForPreTraining"),c(qp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qp,"href","#transformers.AutoModelForPreTraining"),c(Ci,"class","relative group"),c(kq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Pq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Iq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(qq,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Nq,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(jq,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Dq,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Gq,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Oq,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Vq,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Xq,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(zq,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Qq,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(Wq,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Hq,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Uq,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Jq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Yq,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Kq,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Zq,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(eN,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(oN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(rN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(tN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(aN,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(nN,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(sN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(lN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(iN,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(dN,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(cN,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(mN,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(fN,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(gN,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(hN,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(uN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(pN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(_N,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(bN,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(FN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y_,"id","transformers.AutoModelForCausalLM"),c(y_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y_,"href","#transformers.AutoModelForCausalLM"),c(yi,"class","relative group"),c(vN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EN,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(CN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(wN,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(AN,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(yN,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(LN,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(xN,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c($N,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(kN,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(SN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(RN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(BN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(PN,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(IN,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(qN,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(NN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(jN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(DN,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(GN,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(ON,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(VN,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(XN,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(zN,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(QN,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(WN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(HN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(UN,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(JN,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(YN,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(KN,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(ZN,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(ej,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(oj,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(rj,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(tj,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(aj,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gb,"id","transformers.AutoModelForMaskedLM"),c(gb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gb,"href","#transformers.AutoModelForMaskedLM"),c($i,"class","relative group"),c(nj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ij,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(dj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(cj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(mj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(fj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(gj,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(hj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(uj,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(pj,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(_j,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(bj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(Fj,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(vj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Tj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(Mj,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Ej,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Cj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(wj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Aj,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(yj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(Lj,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(xj,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c($j,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(kj,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(Sj,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(Rj,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(Bj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Pj,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(Ij,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(qj,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Nj,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(jj,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Dj,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Gj,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kb,"id","transformers.AutoModelForSeq2SeqLM"),c(Kb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kb,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ri,"class","relative group"),c(Oj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Xj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Qj,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(Wj,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(Hj,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Uj,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Jj,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Yj,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Kj,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Zj,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(eD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(oD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(rD,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(tD,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(aD,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(nD,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(sD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(lD,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F2,"id","transformers.AutoModelForSequenceClassification"),c(F2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F2,"href","#transformers.AutoModelForSequenceClassification"),c(Ii,"class","relative group"),c(iD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(fD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(gD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(hD,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(uD,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(pD,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(_D,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(bD,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(FD,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(vD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(TD,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(MD,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(ED,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(CD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(wD,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(AD,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(yD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(LD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(xD,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c($D,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(kD,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(SD,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(RD,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(BD,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(PD,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(ID,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(qD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(ND,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(jD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(DD,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(GD,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(OD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(VD,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(XD,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(zD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(QD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(WD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(HD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(UD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(JD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(YD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(KD,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(ZD,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(eG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(oG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(rG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(tG,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pF,"id","transformers.AutoModelForMultipleChoice"),c(pF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pF,"href","#transformers.AutoModelForMultipleChoice"),c(ji,"class","relative group"),c(aG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(iG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(dG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(cG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(mG,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(fG,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(gG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(hG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(uG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(pG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(_G,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(bG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(FG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(vG,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(TG,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(MG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(EG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(CG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(wG,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(AG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(yG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(LG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(xG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c($G,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(kG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(SG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(RG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(BG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(PG,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UF,"id","transformers.AutoModelForNextSentencePrediction"),c(UF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UF,"href","#transformers.AutoModelForNextSentencePrediction"),c(Oi,"class","relative group"),c(IG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(DG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(GG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(OG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(VG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(av,"id","transformers.AutoModelForTokenClassification"),c(av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(av,"href","#transformers.AutoModelForTokenClassification"),c(zi,"class","relative group"),c(XG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(HG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(UG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(JG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(YG,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(KG,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(ZG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(eO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(oO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(rO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(tO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(aO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(nO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(sO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(lO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(iO,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(dO,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(cO,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(mO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(fO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(gO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(hO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(uO,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(pO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(_O,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(bO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(FO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(vO,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(TO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(MO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(EO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(CO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(wO,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gv,"id","transformers.AutoModelForQuestionAnswering"),c(Gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gv,"href","#transformers.AutoModelForQuestionAnswering"),c(Hi,"class","relative group"),c(AO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c($O,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(kO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(SO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(RO,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(BO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(PO,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(IO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(qO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(NO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(jO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(DO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(GO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(OO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(VO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(XO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(zO,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(QO,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(WO,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(HO,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(UO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(JO,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(YO,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(KO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(ZO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(eV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(oV,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(rV,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(tV,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(aV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(nV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(sV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(lV,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(iV,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(dV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(cV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(mV,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(fV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(gV,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($1,"id","transformers.AutoModelForTableQuestionAnswering"),c($1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($1,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Yi,"class","relative group"),c(hV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_V,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P1,"id","transformers.AutoModelForImageClassification"),c(P1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P1,"href","#transformers.AutoModelForImageClassification"),c(ed,"class","relative group"),c(bV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TV,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(MV,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(EV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(CV,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(wV,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(AV,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(yV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(LV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(xV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c($V,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(kV,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(SV,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(RV,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(BV,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(PV,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(IV,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J1,"id","transformers.AutoModelForVision2Seq"),c(J1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J1,"href","#transformers.AutoModelForVision2Seq"),c(td,"class","relative group"),c(qV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DV,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oT,"id","transformers.AutoModelForAudioClassification"),c(oT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oT,"href","#transformers.AutoModelForAudioClassification"),c(sd,"class","relative group"),c(GV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(zV,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(QV,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(WV,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(HV,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(UV,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(JV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(YV,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gT,"id","transformers.AutoModelForAudioFrameClassification"),c(gT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gT,"href","#transformers.AutoModelForAudioFrameClassification"),c(dd,"class","relative group"),c(KV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(rX,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(tX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(aX,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TT,"id","transformers.AutoModelForCTC"),c(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TT,"href","#transformers.AutoModelForCTC"),c(fd,"class","relative group"),c(nX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(dX,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(cX,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(mX,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(fX,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(gX,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(hX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(uX,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(RT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(ud,"class","relative group"),c(pX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_X,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FX,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(vX,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jT,"id","transformers.AutoModelForAudioXVector"),c(jT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jT,"href","#transformers.AutoModelForAudioXVector"),c(bd,"class","relative group"),c(TX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(wX,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(AX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(yX,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WT,"id","transformers.AutoModelForMaskedImageModeling"),c(WT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Td,"class","relative group"),c(LX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($X,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kX,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(SX,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(RX,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eM,"id","transformers.AutoModelForObjectDetection"),c(eM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eM,"href","#transformers.AutoModelForObjectDetection"),c(wd,"class","relative group"),c(BX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qX,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(NX,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sM,"id","transformers.AutoModelForImageSegmentation"),c(sM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sM,"href","#transformers.AutoModelForImageSegmentation"),c(Ld,"class","relative group"),c(jX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OX,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mM,"id","transformers.AutoModelForSemanticSegmentation"),c(mM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mM,"href","#transformers.AutoModelForSemanticSegmentation"),c(kd,"class","relative group"),c(VX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QX,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(WX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(HX,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(UX,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FM,"id","transformers.AutoModelForInstanceSegmentation"),c(FM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FM,"href","#transformers.AutoModelForInstanceSegmentation"),c(Bd,"class","relative group"),c(JX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZX,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CM,"id","transformers.TFAutoModel"),c(CM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CM,"href","#transformers.TFAutoModel"),c(qd,"class","relative group"),c(ez,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tz,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(az,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(nz,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(sz,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(lz,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(iz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(dz,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(cz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(mz,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(fz,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(gz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(hz,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(uz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(pz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(_z,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(bz,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(Fz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(vz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(Tz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(Mz,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(Ez,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(Cz,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(wz,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Az,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(yz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(Lz,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(xz,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c($z,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(kz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(Sz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(Rz,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(Bz,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Pz,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Iz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(qz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(Nz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(jz,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Dz,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(Gz,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(Oz,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(Vz,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(Xz,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(zz,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(Qz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(Wz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(Hz,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_4,"id","transformers.TFAutoModelForPreTraining"),c(_4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_4,"href","#transformers.TFAutoModelForPreTraining"),c(Dd,"class","relative group"),c(Uz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kz,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(Zz,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(eQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(oQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(rQ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(tQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(aQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(nQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(sQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(lQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(iQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(dQ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(cQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(mQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(fQ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(gQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(hQ,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(uQ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(pQ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(_Q,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(bQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(FQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(vQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V4,"id","transformers.TFAutoModelForCausalLM"),c(V4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V4,"href","#transformers.TFAutoModelForCausalLM"),c(Vd,"class","relative group"),c(TQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(wQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(AQ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(yQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(LQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(xQ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c($Q,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(kQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(SQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(RQ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(BQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(PQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aE,"id","transformers.TFAutoModelForImageClassification"),c(aE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aE,"href","#transformers.TFAutoModelForImageClassification"),c(Qd,"class","relative group"),c(IQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jQ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(DQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(GQ,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cE,"id","transformers.TFAutoModelForMaskedLM"),c(cE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cE,"href","#transformers.TFAutoModelForMaskedLM"),c(Jd,"class","relative group"),c(OQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(QQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(WQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(HQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(UQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(JQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(YQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(KQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(ZQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(eW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(oW,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(rW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(tW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(aW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(nW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(sW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(lW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(iW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(dW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(cW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(RE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Zd,"class","relative group"),c(mW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hW,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(uW,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(pW,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(_W,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(bW,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(FW,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(vW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(TW,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(MW,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(EW,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QE,"id","transformers.TFAutoModelForSequenceClassification"),c(QE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QE,"href","#transformers.TFAutoModelForSequenceClassification"),c(rc,"class","relative group"),c(CW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yW,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(LW,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(xW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c($W,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(kW,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(SW,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(RW,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(BW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(PW,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(IW,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(qW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(NW,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(jW,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(DW,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(GW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(OW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(VW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(XW,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(zW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(QW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(WW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(HW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(UW,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(JW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(YW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(KW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T5,"id","transformers.TFAutoModelForMultipleChoice"),c(T5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T5,"href","#transformers.TFAutoModelForMultipleChoice"),c(nc,"class","relative group"),c(ZW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rH,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(tH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(aH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(nH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(sH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(lH,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(iH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(dH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(cH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(mH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(fH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(gH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(hH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(uH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(pH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(_H,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(bH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G5,"id","transformers.TFAutoModelForNextSentencePrediction"),c(G5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G5,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(ic,"class","relative group"),c(FH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(EH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q5,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(Q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q5,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(mc,"class","relative group"),c(CH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yH,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J5,"id","transformers.TFAutoModelForTokenClassification"),c(J5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J5,"href","#transformers.TFAutoModelForTokenClassification"),c(hc,"class","relative group"),c(LH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($H,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kH,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(SH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(RH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(BH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(PH,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(IH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(qH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(NH,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(jH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(DH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(GH,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(OH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(VH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(XH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(zH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(QH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(WH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(HH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(UH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(JH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FC,"id","transformers.TFAutoModelForQuestionAnswering"),c(FC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(_c,"class","relative group"),c(YH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eU,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(oU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(rU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(tU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(aU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(nU,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(sU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(lU,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(iU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(dU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(cU,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(mU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(fU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(gU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(hU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(uU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(pU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(_U,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(bU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(FU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OC,"id","transformers.TFAutoModelForVision2Seq"),c(OC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OC,"href","#transformers.TFAutoModelForVision2Seq"),c(vc,"class","relative group"),c(vU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EU,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(QC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ec,"class","relative group"),c(CU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yU,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JC,"id","transformers.FlaxAutoModel"),c(JC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JC,"href","#transformers.FlaxAutoModel"),c(Ac,"class","relative group"),c(LU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($U,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kU,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(SU,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(RU,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(BU,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(PU,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(IU,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(qU,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(NU,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(jU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(DU,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(GU,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(OU,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(VU,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(XU,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(zU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(QU,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(WU,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(HU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(UU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(JU,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(YU,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(KU,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(ZU,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(eJ,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(oJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C3,"id","transformers.FlaxAutoModelForCausalLM"),c(C3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C3,"href","#transformers.FlaxAutoModelForCausalLM"),c(xc,"class","relative group"),c(rJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(sJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(lJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(iJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(dJ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(cJ,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(mJ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(fJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(gJ,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I3,"id","transformers.FlaxAutoModelForPreTraining"),c(I3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Sc,"class","relative group"),c(hJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_J,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(bJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(FJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(vJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(TJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(MJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(EJ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(CJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(wJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(AJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(yJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(LJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y3,"id","transformers.FlaxAutoModelForMaskedLM"),c(Y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Pc,"class","relative group"),c(xJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($J,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(RJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(BJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(PJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(IJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(qJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(NJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(jJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(DJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(GJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cw,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(cw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cw,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Nc,"class","relative group"),c(OJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(QJ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(WJ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(HJ,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(UJ,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(JJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(YJ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(KJ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(ZJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mw,"id","transformers.FlaxAutoModelForSequenceClassification"),c(Mw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mw,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Gc,"class","relative group"),c(eY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(aY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(nY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(sY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(lY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(iY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(dY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(cY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(mY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(fY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pw,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(Pw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Xc,"class","relative group"),c(gY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(_Y,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(bY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(FY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(vY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(TY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(MY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(EY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(CY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(wY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hw,"id","transformers.FlaxAutoModelForTokenClassification"),c(Hw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Wc,"class","relative group"),c(AY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c($Y,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(kY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(SY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(RY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(BY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(PY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(IY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nA,"id","transformers.FlaxAutoModelForMultipleChoice"),c(nA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nA,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Jc,"class","relative group"),c(qY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(GY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(OY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(VY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(XY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(zY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(QY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(WY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pA,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(pA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pA,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Zc,"class","relative group"),c(HY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vA,"id","transformers.FlaxAutoModelForImageClassification"),c(vA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vA,"href","#transformers.FlaxAutoModelForImageClassification"),c(rm,"class","relative group"),c(KY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oK,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(rK,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wA,"id","transformers.FlaxAutoModelForVision2Seq"),c(wA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wA,"href","#transformers.FlaxAutoModelForVision2Seq"),c(nm,"class","relative group"),c(tK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sK,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,F,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,Mo),e(Mo,li),b(m,mm,_),b(m,et,_),e(et,ii),e(et,di),e(di,W0),e(et,fm),b(m,qe,_),b(m,Xe,_),e(Xe,ci),e(Xe,An),e(An,H0),e(Xe,yn),e(Xe,Ln),e(Ln,U0),e(Xe,mi),e(Xe,xn),e(xn,J0),e(Xe,fi),b(m,gm,_),M(Ma,m,_),b(m,ze,_),b(m,Ae,_),e(Ae,h$),e(Ae,gi),e(gi,u$),e(Ae,p$),b(m,Eo,_),b(m,Ea,_),e(Ea,_$),e(Ea,hm),e(hm,b$),e(Ea,eDe),b(m,VPe,_),b(m,hi,_),e(hi,um),e(um,eee),M(Y0,eee,null),e(hi,oDe),e(hi,oee),e(oee,rDe),b(m,XPe,_),b(m,$n,_),e($n,tDe),e($n,ree),e(ree,aDe),e($n,nDe),e($n,tee),e(tee,sDe),e($n,lDe),b(m,zPe,_),M(K0,m,_),b(m,QPe,_),b(m,F$,_),e(F$,iDe),b(m,WPe,_),M(pm,m,_),b(m,HPe,_),b(m,ui,_),e(ui,_m),e(_m,aee),M(Z0,aee,null),e(ui,dDe),e(ui,nee),e(nee,cDe),b(m,UPe,_),b(m,Co,_),M(ey,Co,null),e(Co,mDe),e(Co,oy),e(oy,fDe),e(oy,v$),e(v$,gDe),e(oy,hDe),e(Co,uDe),e(Co,ry),e(ry,pDe),e(ry,see),e(see,_De),e(ry,bDe),e(Co,FDe),e(Co,Er),M(ty,Er,null),e(Er,vDe),e(Er,lee),e(lee,TDe),e(Er,MDe),e(Er,pi),e(pi,EDe),e(pi,iee),e(iee,CDe),e(pi,wDe),e(pi,dee),e(dee,ADe),e(pi,yDe),e(Er,LDe),e(Er,A),e(A,bm),e(bm,cee),e(cee,xDe),e(bm,$De),e(bm,T$),e(T$,kDe),e(bm,SDe),e(A,RDe),e(A,Fm),e(Fm,mee),e(mee,BDe),e(Fm,PDe),e(Fm,M$),e(M$,IDe),e(Fm,qDe),e(A,NDe),e(A,vm),e(vm,fee),e(fee,jDe),e(vm,DDe),e(vm,E$),e(E$,GDe),e(vm,ODe),e(A,VDe),e(A,Tm),e(Tm,gee),e(gee,XDe),e(Tm,zDe),e(Tm,C$),e(C$,QDe),e(Tm,WDe),e(A,HDe),e(A,Mm),e(Mm,hee),e(hee,UDe),e(Mm,JDe),e(Mm,w$),e(w$,YDe),e(Mm,KDe),e(A,ZDe),e(A,Em),e(Em,uee),e(uee,eGe),e(Em,oGe),e(Em,A$),e(A$,rGe),e(Em,tGe),e(A,aGe),e(A,Cm),e(Cm,pee),e(pee,nGe),e(Cm,sGe),e(Cm,y$),e(y$,lGe),e(Cm,iGe),e(A,dGe),e(A,wm),e(wm,_ee),e(_ee,cGe),e(wm,mGe),e(wm,L$),e(L$,fGe),e(wm,gGe),e(A,hGe),e(A,Am),e(Am,bee),e(bee,uGe),e(Am,pGe),e(Am,x$),e(x$,_Ge),e(Am,bGe),e(A,FGe),e(A,ym),e(ym,Fee),e(Fee,vGe),e(ym,TGe),e(ym,$$),e($$,MGe),e(ym,EGe),e(A,CGe),e(A,Lm),e(Lm,vee),e(vee,wGe),e(Lm,AGe),e(Lm,k$),e(k$,yGe),e(Lm,LGe),e(A,xGe),e(A,xm),e(xm,Tee),e(Tee,$Ge),e(xm,kGe),e(xm,S$),e(S$,SGe),e(xm,RGe),e(A,BGe),e(A,$m),e($m,Mee),e(Mee,PGe),e($m,IGe),e($m,R$),e(R$,qGe),e($m,NGe),e(A,jGe),e(A,km),e(km,Eee),e(Eee,DGe),e(km,GGe),e(km,B$),e(B$,OGe),e(km,VGe),e(A,XGe),e(A,Sm),e(Sm,Cee),e(Cee,zGe),e(Sm,QGe),e(Sm,P$),e(P$,WGe),e(Sm,HGe),e(A,UGe),e(A,Rm),e(Rm,wee),e(wee,JGe),e(Rm,YGe),e(Rm,I$),e(I$,KGe),e(Rm,ZGe),e(A,eOe),e(A,Bm),e(Bm,Aee),e(Aee,oOe),e(Bm,rOe),e(Bm,q$),e(q$,tOe),e(Bm,aOe),e(A,nOe),e(A,Pm),e(Pm,yee),e(yee,sOe),e(Pm,lOe),e(Pm,N$),e(N$,iOe),e(Pm,dOe),e(A,cOe),e(A,Im),e(Im,Lee),e(Lee,mOe),e(Im,fOe),e(Im,j$),e(j$,gOe),e(Im,hOe),e(A,uOe),e(A,qm),e(qm,xee),e(xee,pOe),e(qm,_Oe),e(qm,D$),e(D$,bOe),e(qm,FOe),e(A,vOe),e(A,Nm),e(Nm,$ee),e($ee,TOe),e(Nm,MOe),e(Nm,G$),e(G$,EOe),e(Nm,COe),e(A,wOe),e(A,jm),e(jm,kee),e(kee,AOe),e(jm,yOe),e(jm,O$),e(O$,LOe),e(jm,xOe),e(A,$Oe),e(A,Dm),e(Dm,See),e(See,kOe),e(Dm,SOe),e(Dm,V$),e(V$,ROe),e(Dm,BOe),e(A,POe),e(A,Gm),e(Gm,Ree),e(Ree,IOe),e(Gm,qOe),e(Gm,X$),e(X$,NOe),e(Gm,jOe),e(A,DOe),e(A,Om),e(Om,Bee),e(Bee,GOe),e(Om,OOe),e(Om,z$),e(z$,VOe),e(Om,XOe),e(A,zOe),e(A,Vm),e(Vm,Pee),e(Pee,QOe),e(Vm,WOe),e(Vm,Q$),e(Q$,HOe),e(Vm,UOe),e(A,JOe),e(A,Xm),e(Xm,Iee),e(Iee,YOe),e(Xm,KOe),e(Xm,W$),e(W$,ZOe),e(Xm,eVe),e(A,oVe),e(A,zm),e(zm,qee),e(qee,rVe),e(zm,tVe),e(zm,H$),e(H$,aVe),e(zm,nVe),e(A,sVe),e(A,Qm),e(Qm,Nee),e(Nee,lVe),e(Qm,iVe),e(Qm,U$),e(U$,dVe),e(Qm,cVe),e(A,mVe),e(A,Wm),e(Wm,jee),e(jee,fVe),e(Wm,gVe),e(Wm,J$),e(J$,hVe),e(Wm,uVe),e(A,pVe),e(A,Hm),e(Hm,Dee),e(Dee,_Ve),e(Hm,bVe),e(Hm,Y$),e(Y$,FVe),e(Hm,vVe),e(A,TVe),e(A,Um),e(Um,Gee),e(Gee,MVe),e(Um,EVe),e(Um,K$),e(K$,CVe),e(Um,wVe),e(A,AVe),e(A,Jm),e(Jm,Oee),e(Oee,yVe),e(Jm,LVe),e(Jm,Z$),e(Z$,xVe),e(Jm,$Ve),e(A,kVe),e(A,Ym),e(Ym,Vee),e(Vee,SVe),e(Ym,RVe),e(Ym,ek),e(ek,BVe),e(Ym,PVe),e(A,IVe),e(A,Km),e(Km,Xee),e(Xee,qVe),e(Km,NVe),e(Km,ok),e(ok,jVe),e(Km,DVe),e(A,GVe),e(A,Zm),e(Zm,zee),e(zee,OVe),e(Zm,VVe),e(Zm,rk),e(rk,XVe),e(Zm,zVe),e(A,QVe),e(A,ef),e(ef,Qee),e(Qee,WVe),e(ef,HVe),e(ef,tk),e(tk,UVe),e(ef,JVe),e(A,YVe),e(A,of),e(of,Wee),e(Wee,KVe),e(of,ZVe),e(of,ak),e(ak,eXe),e(of,oXe),e(A,rXe),e(A,rf),e(rf,Hee),e(Hee,tXe),e(rf,aXe),e(rf,nk),e(nk,nXe),e(rf,sXe),e(A,lXe),e(A,tf),e(tf,Uee),e(Uee,iXe),e(tf,dXe),e(tf,sk),e(sk,cXe),e(tf,mXe),e(A,fXe),e(A,af),e(af,Jee),e(Jee,gXe),e(af,hXe),e(af,lk),e(lk,uXe),e(af,pXe),e(A,_Xe),e(A,nf),e(nf,Yee),e(Yee,bXe),e(nf,FXe),e(nf,ik),e(ik,vXe),e(nf,TXe),e(A,MXe),e(A,sf),e(sf,Kee),e(Kee,EXe),e(sf,CXe),e(sf,dk),e(dk,wXe),e(sf,AXe),e(A,yXe),e(A,lf),e(lf,Zee),e(Zee,LXe),e(lf,xXe),e(lf,ck),e(ck,$Xe),e(lf,kXe),e(A,SXe),e(A,df),e(df,eoe),e(eoe,RXe),e(df,BXe),e(df,mk),e(mk,PXe),e(df,IXe),e(A,qXe),e(A,cf),e(cf,ooe),e(ooe,NXe),e(cf,jXe),e(cf,fk),e(fk,DXe),e(cf,GXe),e(A,OXe),e(A,mf),e(mf,roe),e(roe,VXe),e(mf,XXe),e(mf,gk),e(gk,zXe),e(mf,QXe),e(A,WXe),e(A,ff),e(ff,toe),e(toe,HXe),e(ff,UXe),e(ff,hk),e(hk,JXe),e(ff,YXe),e(A,KXe),e(A,gf),e(gf,aoe),e(aoe,ZXe),e(gf,eze),e(gf,uk),e(uk,oze),e(gf,rze),e(A,tze),e(A,hf),e(hf,noe),e(noe,aze),e(hf,nze),e(hf,pk),e(pk,sze),e(hf,lze),e(A,ize),e(A,uf),e(uf,soe),e(soe,dze),e(uf,cze),e(uf,_k),e(_k,mze),e(uf,fze),e(A,gze),e(A,pf),e(pf,loe),e(loe,hze),e(pf,uze),e(pf,bk),e(bk,pze),e(pf,_ze),e(A,bze),e(A,_f),e(_f,ioe),e(ioe,Fze),e(_f,vze),e(_f,Fk),e(Fk,Tze),e(_f,Mze),e(A,Eze),e(A,bf),e(bf,doe),e(doe,Cze),e(bf,wze),e(bf,vk),e(vk,Aze),e(bf,yze),e(A,Lze),e(A,Ff),e(Ff,coe),e(coe,xze),e(Ff,$ze),e(Ff,Tk),e(Tk,kze),e(Ff,Sze),e(A,Rze),e(A,vf),e(vf,moe),e(moe,Bze),e(vf,Pze),e(vf,Mk),e(Mk,Ize),e(vf,qze),e(A,Nze),e(A,Tf),e(Tf,foe),e(foe,jze),e(Tf,Dze),e(Tf,Ek),e(Ek,Gze),e(Tf,Oze),e(A,Vze),e(A,Mf),e(Mf,goe),e(goe,Xze),e(Mf,zze),e(Mf,Ck),e(Ck,Qze),e(Mf,Wze),e(A,Hze),e(A,Ef),e(Ef,hoe),e(hoe,Uze),e(Ef,Jze),e(Ef,wk),e(wk,Yze),e(Ef,Kze),e(A,Zze),e(A,Cf),e(Cf,uoe),e(uoe,eQe),e(Cf,oQe),e(Cf,Ak),e(Ak,rQe),e(Cf,tQe),e(A,aQe),e(A,wf),e(wf,poe),e(poe,nQe),e(wf,sQe),e(wf,yk),e(yk,lQe),e(wf,iQe),e(A,dQe),e(A,Af),e(Af,_oe),e(_oe,cQe),e(Af,mQe),e(Af,Lk),e(Lk,fQe),e(Af,gQe),e(A,hQe),e(A,yf),e(yf,boe),e(boe,uQe),e(yf,pQe),e(yf,xk),e(xk,_Qe),e(yf,bQe),e(A,FQe),e(A,Lf),e(Lf,Foe),e(Foe,vQe),e(Lf,TQe),e(Lf,$k),e($k,MQe),e(Lf,EQe),e(A,CQe),e(A,xf),e(xf,voe),e(voe,wQe),e(xf,AQe),e(xf,kk),e(kk,yQe),e(xf,LQe),e(A,xQe),e(A,$f),e($f,Toe),e(Toe,$Qe),e($f,kQe),e($f,Sk),e(Sk,SQe),e($f,RQe),e(A,BQe),e(A,kf),e(kf,Moe),e(Moe,PQe),e(kf,IQe),e(kf,Rk),e(Rk,qQe),e(kf,NQe),e(A,jQe),e(A,Sf),e(Sf,Eoe),e(Eoe,DQe),e(Sf,GQe),e(Sf,Bk),e(Bk,OQe),e(Sf,VQe),e(A,XQe),e(A,Rf),e(Rf,Coe),e(Coe,zQe),e(Rf,QQe),e(Rf,Pk),e(Pk,WQe),e(Rf,HQe),e(A,UQe),e(A,Bf),e(Bf,woe),e(woe,JQe),e(Bf,YQe),e(Bf,Ik),e(Ik,KQe),e(Bf,ZQe),e(A,eWe),e(A,Pf),e(Pf,Aoe),e(Aoe,oWe),e(Pf,rWe),e(Pf,qk),e(qk,tWe),e(Pf,aWe),e(A,nWe),e(A,If),e(If,yoe),e(yoe,sWe),e(If,lWe),e(If,Nk),e(Nk,iWe),e(If,dWe),e(A,cWe),e(A,qf),e(qf,Loe),e(Loe,mWe),e(qf,fWe),e(qf,jk),e(jk,gWe),e(qf,hWe),e(A,uWe),e(A,Nf),e(Nf,xoe),e(xoe,pWe),e(Nf,_We),e(Nf,Dk),e(Dk,bWe),e(Nf,FWe),e(A,vWe),e(A,jf),e(jf,$oe),e($oe,TWe),e(jf,MWe),e(jf,Gk),e(Gk,EWe),e(jf,CWe),e(A,wWe),e(A,Df),e(Df,koe),e(koe,AWe),e(Df,yWe),e(Df,Ok),e(Ok,LWe),e(Df,xWe),e(A,$We),e(A,Gf),e(Gf,Soe),e(Soe,kWe),e(Gf,SWe),e(Gf,Vk),e(Vk,RWe),e(Gf,BWe),e(A,PWe),e(A,Of),e(Of,Roe),e(Roe,IWe),e(Of,qWe),e(Of,Xk),e(Xk,NWe),e(Of,jWe),e(A,DWe),e(A,Vf),e(Vf,Boe),e(Boe,GWe),e(Vf,OWe),e(Vf,zk),e(zk,VWe),e(Vf,XWe),e(A,zWe),e(A,Xf),e(Xf,Poe),e(Poe,QWe),e(Xf,WWe),e(Xf,Qk),e(Qk,HWe),e(Xf,UWe),e(A,JWe),e(A,zf),e(zf,Ioe),e(Ioe,YWe),e(zf,KWe),e(zf,Wk),e(Wk,ZWe),e(zf,eHe),e(A,oHe),e(A,Qf),e(Qf,qoe),e(qoe,rHe),e(Qf,tHe),e(Qf,Hk),e(Hk,aHe),e(Qf,nHe),e(A,sHe),e(A,Wf),e(Wf,Noe),e(Noe,lHe),e(Wf,iHe),e(Wf,Uk),e(Uk,dHe),e(Wf,cHe),e(A,mHe),e(A,Hf),e(Hf,joe),e(joe,fHe),e(Hf,gHe),e(Hf,Jk),e(Jk,hHe),e(Hf,uHe),e(A,pHe),e(A,Uf),e(Uf,Doe),e(Doe,_He),e(Uf,bHe),e(Uf,Yk),e(Yk,FHe),e(Uf,vHe),e(A,THe),e(A,Jf),e(Jf,Goe),e(Goe,MHe),e(Jf,EHe),e(Jf,Kk),e(Kk,CHe),e(Jf,wHe),e(A,AHe),e(A,Yf),e(Yf,Ooe),e(Ooe,yHe),e(Yf,LHe),e(Yf,Zk),e(Zk,xHe),e(Yf,$He),e(A,kHe),e(A,Kf),e(Kf,Voe),e(Voe,SHe),e(Kf,RHe),e(Kf,eS),e(eS,BHe),e(Kf,PHe),e(A,IHe),e(A,Zf),e(Zf,Xoe),e(Xoe,qHe),e(Zf,NHe),e(Zf,oS),e(oS,jHe),e(Zf,DHe),e(A,GHe),e(A,eg),e(eg,zoe),e(zoe,OHe),e(eg,VHe),e(eg,rS),e(rS,XHe),e(eg,zHe),e(A,QHe),e(A,og),e(og,Qoe),e(Qoe,WHe),e(og,HHe),e(og,tS),e(tS,UHe),e(og,JHe),e(A,YHe),e(A,rg),e(rg,Woe),e(Woe,KHe),e(rg,ZHe),e(rg,aS),e(aS,eUe),e(rg,oUe),e(A,rUe),e(A,tg),e(tg,Hoe),e(Hoe,tUe),e(tg,aUe),e(tg,nS),e(nS,nUe),e(tg,sUe),e(A,lUe),e(A,ag),e(ag,Uoe),e(Uoe,iUe),e(ag,dUe),e(ag,sS),e(sS,cUe),e(ag,mUe),e(A,fUe),e(A,ng),e(ng,Joe),e(Joe,gUe),e(ng,hUe),e(ng,lS),e(lS,uUe),e(ng,pUe),e(A,_Ue),e(A,sg),e(sg,Yoe),e(Yoe,bUe),e(sg,FUe),e(sg,iS),e(iS,vUe),e(sg,TUe),e(A,MUe),e(A,lg),e(lg,Koe),e(Koe,EUe),e(lg,CUe),e(lg,dS),e(dS,wUe),e(lg,AUe),e(A,yUe),e(A,ig),e(ig,Zoe),e(Zoe,LUe),e(ig,xUe),e(ig,cS),e(cS,$Ue),e(ig,kUe),e(A,SUe),e(A,dg),e(dg,ere),e(ere,RUe),e(dg,BUe),e(dg,mS),e(mS,PUe),e(dg,IUe),e(A,qUe),e(A,cg),e(cg,ore),e(ore,NUe),e(cg,jUe),e(cg,fS),e(fS,DUe),e(cg,GUe),e(A,OUe),e(A,mg),e(mg,rre),e(rre,VUe),e(mg,XUe),e(mg,gS),e(gS,zUe),e(mg,QUe),e(A,WUe),e(A,fg),e(fg,tre),e(tre,HUe),e(fg,UUe),e(fg,hS),e(hS,JUe),e(fg,YUe),e(A,KUe),e(A,gg),e(gg,are),e(are,ZUe),e(gg,eJe),e(gg,uS),e(uS,oJe),e(gg,rJe),e(A,tJe),e(A,hg),e(hg,nre),e(nre,aJe),e(hg,nJe),e(hg,pS),e(pS,sJe),e(hg,lJe),e(A,iJe),e(A,ug),e(ug,sre),e(sre,dJe),e(ug,cJe),e(ug,_S),e(_S,mJe),e(ug,fJe),e(Er,gJe),M(pg,Er,null),e(Co,hJe),e(Co,_g),M(ay,_g,null),e(_g,uJe),e(_g,lre),e(lre,pJe),b(m,JPe,_),b(m,_i,_),e(_i,bg),e(bg,ire),M(ny,ire,null),e(_i,_Je),e(_i,dre),e(dre,bJe),b(m,YPe,_),b(m,wo,_),M(sy,wo,null),e(wo,FJe),e(wo,ly),e(ly,vJe),e(ly,bS),e(bS,TJe),e(ly,MJe),e(wo,EJe),e(wo,iy),e(iy,CJe),e(iy,cre),e(cre,wJe),e(iy,AJe),e(wo,yJe),e(wo,Cr),M(dy,Cr,null),e(Cr,LJe),e(Cr,mre),e(mre,xJe),e(Cr,$Je),e(Cr,Ca),e(Ca,kJe),e(Ca,fre),e(fre,SJe),e(Ca,RJe),e(Ca,gre),e(gre,BJe),e(Ca,PJe),e(Ca,hre),e(hre,IJe),e(Ca,qJe),e(Cr,NJe),e(Cr,k),e(k,kn),e(kn,ure),e(ure,jJe),e(kn,DJe),e(kn,FS),e(FS,GJe),e(kn,OJe),e(kn,vS),e(vS,VJe),e(kn,XJe),e(k,zJe),e(k,Sn),e(Sn,pre),e(pre,QJe),e(Sn,WJe),e(Sn,TS),e(TS,HJe),e(Sn,UJe),e(Sn,MS),e(MS,JJe),e(Sn,YJe),e(k,KJe),e(k,Rn),e(Rn,_re),e(_re,ZJe),e(Rn,eYe),e(Rn,ES),e(ES,oYe),e(Rn,rYe),e(Rn,CS),e(CS,tYe),e(Rn,aYe),e(k,nYe),e(k,Fg),e(Fg,bre),e(bre,sYe),e(Fg,lYe),e(Fg,wS),e(wS,iYe),e(Fg,dYe),e(k,cYe),e(k,Bn),e(Bn,Fre),e(Fre,mYe),e(Bn,fYe),e(Bn,AS),e(AS,gYe),e(Bn,hYe),e(Bn,yS),e(yS,uYe),e(Bn,pYe),e(k,_Ye),e(k,vg),e(vg,vre),e(vre,bYe),e(vg,FYe),e(vg,LS),e(LS,vYe),e(vg,TYe),e(k,MYe),e(k,Tg),e(Tg,Tre),e(Tre,EYe),e(Tg,CYe),e(Tg,xS),e(xS,wYe),e(Tg,AYe),e(k,yYe),e(k,Mg),e(Mg,Mre),e(Mre,LYe),e(Mg,xYe),e(Mg,$S),e($S,$Ye),e(Mg,kYe),e(k,SYe),e(k,Pn),e(Pn,Ere),e(Ere,RYe),e(Pn,BYe),e(Pn,kS),e(kS,PYe),e(Pn,IYe),e(Pn,SS),e(SS,qYe),e(Pn,NYe),e(k,jYe),e(k,In),e(In,Cre),e(Cre,DYe),e(In,GYe),e(In,RS),e(RS,OYe),e(In,VYe),e(In,BS),e(BS,XYe),e(In,zYe),e(k,QYe),e(k,qn),e(qn,wre),e(wre,WYe),e(qn,HYe),e(qn,PS),e(PS,UYe),e(qn,JYe),e(qn,IS),e(IS,YYe),e(qn,KYe),e(k,ZYe),e(k,Eg),e(Eg,Are),e(Are,eKe),e(Eg,oKe),e(Eg,qS),e(qS,rKe),e(Eg,tKe),e(k,aKe),e(k,Cg),e(Cg,yre),e(yre,nKe),e(Cg,sKe),e(Cg,NS),e(NS,lKe),e(Cg,iKe),e(k,dKe),e(k,Nn),e(Nn,Lre),e(Lre,cKe),e(Nn,mKe),e(Nn,jS),e(jS,fKe),e(Nn,gKe),e(Nn,DS),e(DS,hKe),e(Nn,uKe),e(k,pKe),e(k,wg),e(wg,xre),e(xre,_Ke),e(wg,bKe),e(wg,GS),e(GS,FKe),e(wg,vKe),e(k,TKe),e(k,jn),e(jn,$re),e($re,MKe),e(jn,EKe),e(jn,OS),e(OS,CKe),e(jn,wKe),e(jn,VS),e(VS,AKe),e(jn,yKe),e(k,LKe),e(k,Dn),e(Dn,kre),e(kre,xKe),e(Dn,$Ke),e(Dn,XS),e(XS,kKe),e(Dn,SKe),e(Dn,zS),e(zS,RKe),e(Dn,BKe),e(k,PKe),e(k,Gn),e(Gn,Sre),e(Sre,IKe),e(Gn,qKe),e(Gn,QS),e(QS,NKe),e(Gn,jKe),e(Gn,WS),e(WS,DKe),e(Gn,GKe),e(k,OKe),e(k,Ag),e(Ag,Rre),e(Rre,VKe),e(Ag,XKe),e(Ag,HS),e(HS,zKe),e(Ag,QKe),e(k,WKe),e(k,On),e(On,Bre),e(Bre,HKe),e(On,UKe),e(On,US),e(US,JKe),e(On,YKe),e(On,JS),e(JS,KKe),e(On,ZKe),e(k,eZe),e(k,Vn),e(Vn,Pre),e(Pre,oZe),e(Vn,rZe),e(Vn,YS),e(YS,tZe),e(Vn,aZe),e(Vn,KS),e(KS,nZe),e(Vn,sZe),e(k,lZe),e(k,Xn),e(Xn,Ire),e(Ire,iZe),e(Xn,dZe),e(Xn,ZS),e(ZS,cZe),e(Xn,mZe),e(Xn,eR),e(eR,fZe),e(Xn,gZe),e(k,hZe),e(k,zn),e(zn,qre),e(qre,uZe),e(zn,pZe),e(zn,oR),e(oR,_Ze),e(zn,bZe),e(zn,rR),e(rR,FZe),e(zn,vZe),e(k,TZe),e(k,Qn),e(Qn,Nre),e(Nre,MZe),e(Qn,EZe),e(Qn,tR),e(tR,CZe),e(Qn,wZe),e(Qn,aR),e(aR,AZe),e(Qn,yZe),e(k,LZe),e(k,Wn),e(Wn,jre),e(jre,xZe),e(Wn,$Ze),e(Wn,nR),e(nR,kZe),e(Wn,SZe),e(Wn,sR),e(sR,RZe),e(Wn,BZe),e(k,PZe),e(k,yg),e(yg,Dre),e(Dre,IZe),e(yg,qZe),e(yg,lR),e(lR,NZe),e(yg,jZe),e(k,DZe),e(k,Hn),e(Hn,Gre),e(Gre,GZe),e(Hn,OZe),e(Hn,iR),e(iR,VZe),e(Hn,XZe),e(Hn,dR),e(dR,zZe),e(Hn,QZe),e(k,WZe),e(k,Lg),e(Lg,Ore),e(Ore,HZe),e(Lg,UZe),e(Lg,cR),e(cR,JZe),e(Lg,YZe),e(k,KZe),e(k,Un),e(Un,Vre),e(Vre,ZZe),e(Un,eeo),e(Un,mR),e(mR,oeo),e(Un,reo),e(Un,fR),e(fR,teo),e(Un,aeo),e(k,neo),e(k,Jn),e(Jn,Xre),e(Xre,seo),e(Jn,leo),e(Jn,gR),e(gR,ieo),e(Jn,deo),e(Jn,hR),e(hR,ceo),e(Jn,meo),e(k,feo),e(k,Yn),e(Yn,zre),e(zre,geo),e(Yn,heo),e(Yn,uR),e(uR,ueo),e(Yn,peo),e(Yn,pR),e(pR,_eo),e(Yn,beo),e(k,Feo),e(k,Kn),e(Kn,Qre),e(Qre,veo),e(Kn,Teo),e(Kn,_R),e(_R,Meo),e(Kn,Eeo),e(Kn,bR),e(bR,Ceo),e(Kn,weo),e(k,Aeo),e(k,Zn),e(Zn,Wre),e(Wre,yeo),e(Zn,Leo),e(Zn,FR),e(FR,xeo),e(Zn,$eo),e(Zn,vR),e(vR,keo),e(Zn,Seo),e(k,Reo),e(k,xg),e(xg,Hre),e(Hre,Beo),e(xg,Peo),e(xg,TR),e(TR,Ieo),e(xg,qeo),e(k,Neo),e(k,es),e(es,Ure),e(Ure,jeo),e(es,Deo),e(es,MR),e(MR,Geo),e(es,Oeo),e(es,ER),e(ER,Veo),e(es,Xeo),e(k,zeo),e(k,os),e(os,Jre),e(Jre,Qeo),e(os,Weo),e(os,CR),e(CR,Heo),e(os,Ueo),e(os,wR),e(wR,Jeo),e(os,Yeo),e(k,Keo),e(k,rs),e(rs,Yre),e(Yre,Zeo),e(rs,eoo),e(rs,AR),e(AR,ooo),e(rs,roo),e(rs,yR),e(yR,too),e(rs,aoo),e(k,noo),e(k,ts),e(ts,Kre),e(Kre,soo),e(ts,loo),e(ts,LR),e(LR,ioo),e(ts,doo),e(ts,xR),e(xR,coo),e(ts,moo),e(k,foo),e(k,as),e(as,Zre),e(Zre,goo),e(as,hoo),e(as,$R),e($R,uoo),e(as,poo),e(as,kR),e(kR,_oo),e(as,boo),e(k,Foo),e(k,ns),e(ns,ete),e(ete,voo),e(ns,Too),e(ns,SR),e(SR,Moo),e(ns,Eoo),e(ns,RR),e(RR,Coo),e(ns,woo),e(k,Aoo),e(k,$g),e($g,ote),e(ote,yoo),e($g,Loo),e($g,BR),e(BR,xoo),e($g,$oo),e(k,koo),e(k,ss),e(ss,rte),e(rte,Soo),e(ss,Roo),e(ss,PR),e(PR,Boo),e(ss,Poo),e(ss,IR),e(IR,Ioo),e(ss,qoo),e(k,Noo),e(k,kg),e(kg,tte),e(tte,joo),e(kg,Doo),e(kg,qR),e(qR,Goo),e(kg,Ooo),e(k,Voo),e(k,Sg),e(Sg,ate),e(ate,Xoo),e(Sg,zoo),e(Sg,NR),e(NR,Qoo),e(Sg,Woo),e(k,Hoo),e(k,ls),e(ls,nte),e(nte,Uoo),e(ls,Joo),e(ls,jR),e(jR,Yoo),e(ls,Koo),e(ls,DR),e(DR,Zoo),e(ls,ero),e(k,oro),e(k,is),e(is,ste),e(ste,rro),e(is,tro),e(is,GR),e(GR,aro),e(is,nro),e(is,OR),e(OR,sro),e(is,lro),e(k,iro),e(k,ds),e(ds,lte),e(lte,dro),e(ds,cro),e(ds,VR),e(VR,mro),e(ds,fro),e(ds,XR),e(XR,gro),e(ds,hro),e(k,uro),e(k,Rg),e(Rg,ite),e(ite,pro),e(Rg,_ro),e(Rg,zR),e(zR,bro),e(Rg,Fro),e(k,vro),e(k,cs),e(cs,dte),e(dte,Tro),e(cs,Mro),e(cs,QR),e(QR,Ero),e(cs,Cro),e(cs,WR),e(WR,wro),e(cs,Aro),e(k,yro),e(k,ms),e(ms,cte),e(cte,Lro),e(ms,xro),e(ms,HR),e(HR,$ro),e(ms,kro),e(ms,UR),e(UR,Sro),e(ms,Rro),e(k,Bro),e(k,fs),e(fs,mte),e(mte,Pro),e(fs,Iro),e(fs,JR),e(JR,qro),e(fs,Nro),e(fs,YR),e(YR,jro),e(fs,Dro),e(k,Gro),e(k,gs),e(gs,fte),e(fte,Oro),e(gs,Vro),e(gs,KR),e(KR,Xro),e(gs,zro),e(gs,ZR),e(ZR,Qro),e(gs,Wro),e(k,Hro),e(k,hs),e(hs,gte),e(gte,Uro),e(hs,Jro),e(hs,eB),e(eB,Yro),e(hs,Kro),e(hs,oB),e(oB,Zro),e(hs,eto),e(k,oto),e(k,Bg),e(Bg,hte),e(hte,rto),e(Bg,tto),e(Bg,rB),e(rB,ato),e(Bg,nto),e(k,sto),e(k,us),e(us,ute),e(ute,lto),e(us,ito),e(us,tB),e(tB,dto),e(us,cto),e(us,aB),e(aB,mto),e(us,fto),e(k,gto),e(k,Pg),e(Pg,pte),e(pte,hto),e(Pg,uto),e(Pg,nB),e(nB,pto),e(Pg,_to),e(k,bto),e(k,Ig),e(Ig,_te),e(_te,Fto),e(Ig,vto),e(Ig,sB),e(sB,Tto),e(Ig,Mto),e(k,Eto),e(k,qg),e(qg,bte),e(bte,Cto),e(qg,wto),e(qg,lB),e(lB,Ato),e(qg,yto),e(k,Lto),e(k,Ng),e(Ng,Fte),e(Fte,xto),e(Ng,$to),e(Ng,iB),e(iB,kto),e(Ng,Sto),e(k,Rto),e(k,ps),e(ps,vte),e(vte,Bto),e(ps,Pto),e(ps,dB),e(dB,Ito),e(ps,qto),e(ps,cB),e(cB,Nto),e(ps,jto),e(k,Dto),e(k,jg),e(jg,Tte),e(Tte,Gto),e(jg,Oto),e(jg,mB),e(mB,Vto),e(jg,Xto),e(k,zto),e(k,_s),e(_s,Mte),e(Mte,Qto),e(_s,Wto),e(_s,fB),e(fB,Hto),e(_s,Uto),e(_s,gB),e(gB,Jto),e(_s,Yto),e(k,Kto),e(k,bs),e(bs,Ete),e(Ete,Zto),e(bs,eao),e(bs,hB),e(hB,oao),e(bs,rao),e(bs,uB),e(uB,tao),e(bs,aao),e(k,nao),e(k,Fs),e(Fs,Cte),e(Cte,sao),e(Fs,lao),e(Fs,pB),e(pB,iao),e(Fs,dao),e(Fs,_B),e(_B,cao),e(Fs,mao),e(k,fao),e(k,vs),e(vs,wte),e(wte,gao),e(vs,hao),e(vs,bB),e(bB,uao),e(vs,pao),e(vs,FB),e(FB,_ao),e(vs,bao),e(k,Fao),e(k,Ts),e(Ts,Ate),e(Ate,vao),e(Ts,Tao),e(Ts,vB),e(vB,Mao),e(Ts,Eao),e(Ts,TB),e(TB,Cao),e(Ts,wao),e(k,Aao),e(k,Ms),e(Ms,yte),e(yte,yao),e(Ms,Lao),e(Ms,MB),e(MB,xao),e(Ms,$ao),e(Ms,EB),e(EB,kao),e(Ms,Sao),e(k,Rao),e(k,Dg),e(Dg,Lte),e(Lte,Bao),e(Dg,Pao),e(Dg,CB),e(CB,Iao),e(Dg,qao),e(k,Nao),e(k,Gg),e(Gg,xte),e(xte,jao),e(Gg,Dao),e(Gg,wB),e(wB,Gao),e(Gg,Oao),e(k,Vao),e(k,Es),e(Es,$te),e($te,Xao),e(Es,zao),e(Es,AB),e(AB,Qao),e(Es,Wao),e(Es,yB),e(yB,Hao),e(Es,Uao),e(k,Jao),e(k,Cs),e(Cs,kte),e(kte,Yao),e(Cs,Kao),e(Cs,LB),e(LB,Zao),e(Cs,eno),e(Cs,xB),e(xB,ono),e(Cs,rno),e(k,tno),e(k,ws),e(ws,Ste),e(Ste,ano),e(ws,nno),e(ws,$B),e($B,sno),e(ws,lno),e(ws,kB),e(kB,ino),e(ws,dno),e(k,cno),e(k,Og),e(Og,Rte),e(Rte,mno),e(Og,fno),e(Og,SB),e(SB,gno),e(Og,hno),e(k,uno),e(k,Vg),e(Vg,Bte),e(Bte,pno),e(Vg,_no),e(Vg,RB),e(RB,bno),e(Vg,Fno),e(k,vno),e(k,Xg),e(Xg,Pte),e(Pte,Tno),e(Xg,Mno),e(Xg,BB),e(BB,Eno),e(Xg,Cno),e(k,wno),e(k,As),e(As,Ite),e(Ite,Ano),e(As,yno),e(As,PB),e(PB,Lno),e(As,xno),e(As,IB),e(IB,$no),e(As,kno),e(k,Sno),e(k,zg),e(zg,qte),e(qte,Rno),e(zg,Bno),e(zg,qB),e(qB,Pno),e(zg,Ino),e(k,qno),e(k,Qg),e(Qg,Nte),e(Nte,Nno),e(Qg,jno),e(Qg,NB),e(NB,Dno),e(Qg,Gno),e(k,Ono),e(k,ys),e(ys,jte),e(jte,Vno),e(ys,Xno),e(ys,jB),e(jB,zno),e(ys,Qno),e(ys,DB),e(DB,Wno),e(ys,Hno),e(k,Uno),e(k,Wg),e(Wg,Dte),e(Dte,Jno),e(Wg,Yno),e(Wg,GB),e(GB,Kno),e(Wg,Zno),e(k,eso),e(k,Hg),e(Hg,Gte),e(Gte,oso),e(Hg,rso),e(Hg,OB),e(OB,tso),e(Hg,aso),e(k,nso),e(k,Ls),e(Ls,Ote),e(Ote,sso),e(Ls,lso),e(Ls,VB),e(VB,iso),e(Ls,dso),e(Ls,XB),e(XB,cso),e(Ls,mso),e(k,fso),e(k,xs),e(xs,Vte),e(Vte,gso),e(xs,hso),e(xs,zB),e(zB,uso),e(xs,pso),e(xs,QB),e(QB,_so),e(xs,bso),e(k,Fso),e(k,$s),e($s,Xte),e(Xte,vso),e($s,Tso),e($s,WB),e(WB,Mso),e($s,Eso),e($s,HB),e(HB,Cso),e($s,wso),e(k,Aso),e(k,ks),e(ks,zte),e(zte,yso),e(ks,Lso),e(ks,UB),e(UB,xso),e(ks,$so),e(ks,JB),e(JB,kso),e(ks,Sso),e(Cr,Rso),M(Ug,Cr,null),e(wo,Bso),e(wo,Jg),M(cy,Jg,null),e(Jg,Pso),e(Jg,Qte),e(Qte,Iso),b(m,KPe,_),b(m,bi,_),e(bi,Yg),e(Yg,Wte),M(my,Wte,null),e(bi,qso),e(bi,Hte),e(Hte,Nso),b(m,ZPe,_),b(m,Ao,_),M(fy,Ao,null),e(Ao,jso),e(Ao,gy),e(gy,Dso),e(gy,YB),e(YB,Gso),e(gy,Oso),e(Ao,Vso),e(Ao,hy),e(hy,Xso),e(hy,Ute),e(Ute,zso),e(hy,Qso),e(Ao,Wso),e(Ao,Qe),M(uy,Qe,null),e(Qe,Hso),e(Qe,Jte),e(Jte,Uso),e(Qe,Jso),e(Qe,wa),e(wa,Yso),e(wa,Yte),e(Yte,Kso),e(wa,Zso),e(wa,Kte),e(Kte,elo),e(wa,olo),e(wa,Zte),e(Zte,rlo),e(wa,tlo),e(Qe,alo),e(Qe,oe),e(oe,Kg),e(Kg,eae),e(eae,nlo),e(Kg,slo),e(Kg,KB),e(KB,llo),e(Kg,ilo),e(oe,dlo),e(oe,Zg),e(Zg,oae),e(oae,clo),e(Zg,mlo),e(Zg,ZB),e(ZB,flo),e(Zg,glo),e(oe,hlo),e(oe,eh),e(eh,rae),e(rae,ulo),e(eh,plo),e(eh,eP),e(eP,_lo),e(eh,blo),e(oe,Flo),e(oe,oh),e(oh,tae),e(tae,vlo),e(oh,Tlo),e(oh,oP),e(oP,Mlo),e(oh,Elo),e(oe,Clo),e(oe,rh),e(rh,aae),e(aae,wlo),e(rh,Alo),e(rh,rP),e(rP,ylo),e(rh,Llo),e(oe,xlo),e(oe,th),e(th,nae),e(nae,$lo),e(th,klo),e(th,tP),e(tP,Slo),e(th,Rlo),e(oe,Blo),e(oe,ah),e(ah,sae),e(sae,Plo),e(ah,Ilo),e(ah,aP),e(aP,qlo),e(ah,Nlo),e(oe,jlo),e(oe,nh),e(nh,lae),e(lae,Dlo),e(nh,Glo),e(nh,nP),e(nP,Olo),e(nh,Vlo),e(oe,Xlo),e(oe,sh),e(sh,iae),e(iae,zlo),e(sh,Qlo),e(sh,sP),e(sP,Wlo),e(sh,Hlo),e(oe,Ulo),e(oe,lh),e(lh,dae),e(dae,Jlo),e(lh,Ylo),e(lh,lP),e(lP,Klo),e(lh,Zlo),e(oe,eio),e(oe,ih),e(ih,cae),e(cae,oio),e(ih,rio),e(ih,iP),e(iP,tio),e(ih,aio),e(oe,nio),e(oe,dh),e(dh,mae),e(mae,sio),e(dh,lio),e(dh,dP),e(dP,iio),e(dh,dio),e(oe,cio),e(oe,ch),e(ch,fae),e(fae,mio),e(ch,fio),e(ch,cP),e(cP,gio),e(ch,hio),e(oe,uio),e(oe,mh),e(mh,gae),e(gae,pio),e(mh,_io),e(mh,mP),e(mP,bio),e(mh,Fio),e(oe,vio),e(oe,fh),e(fh,hae),e(hae,Tio),e(fh,Mio),e(fh,fP),e(fP,Eio),e(fh,Cio),e(oe,wio),e(oe,gh),e(gh,uae),e(uae,Aio),e(gh,yio),e(gh,gP),e(gP,Lio),e(gh,xio),e(oe,$io),e(oe,hh),e(hh,pae),e(pae,kio),e(hh,Sio),e(hh,hP),e(hP,Rio),e(hh,Bio),e(oe,Pio),e(oe,uh),e(uh,_ae),e(_ae,Iio),e(uh,qio),e(uh,uP),e(uP,Nio),e(uh,jio),e(oe,Dio),e(oe,ph),e(ph,bae),e(bae,Gio),e(ph,Oio),e(ph,pP),e(pP,Vio),e(ph,Xio),e(oe,zio),e(oe,_h),e(_h,Fae),e(Fae,Qio),e(_h,Wio),e(_h,_P),e(_P,Hio),e(_h,Uio),e(oe,Jio),e(oe,bh),e(bh,vae),e(vae,Yio),e(bh,Kio),e(bh,bP),e(bP,Zio),e(bh,edo),e(oe,odo),e(oe,Fh),e(Fh,Tae),e(Tae,rdo),e(Fh,tdo),e(Fh,FP),e(FP,ado),e(Fh,ndo),e(oe,sdo),e(oe,vh),e(vh,Mae),e(Mae,ldo),e(vh,ido),e(vh,vP),e(vP,ddo),e(vh,cdo),e(oe,mdo),e(oe,Th),e(Th,Eae),e(Eae,fdo),e(Th,gdo),e(Th,TP),e(TP,hdo),e(Th,udo),e(oe,pdo),e(oe,Mh),e(Mh,Cae),e(Cae,_do),e(Mh,bdo),e(Mh,MP),e(MP,Fdo),e(Mh,vdo),e(Qe,Tdo),M(Eh,Qe,null),e(Qe,Mdo),M(Ch,Qe,null),e(Ao,Edo),e(Ao,wh),M(py,wh,null),e(wh,Cdo),e(wh,wae),e(wae,wdo),b(m,eIe,_),b(m,Fi,_),e(Fi,Ah),e(Ah,Aae),M(_y,Aae,null),e(Fi,Ado),e(Fi,yae),e(yae,ydo),b(m,oIe,_),b(m,yo,_),M(by,yo,null),e(yo,Ldo),e(yo,Fy),e(Fy,xdo),e(Fy,EP),e(EP,$do),e(Fy,kdo),e(yo,Sdo),e(yo,vy),e(vy,Rdo),e(vy,Lae),e(Lae,Bdo),e(vy,Pdo),e(yo,Ido),e(yo,We),M(Ty,We,null),e(We,qdo),e(We,xae),e(xae,Ndo),e(We,jdo),e(We,vi),e(vi,Ddo),e(vi,$ae),e($ae,Gdo),e(vi,Odo),e(vi,kae),e(kae,Vdo),e(vi,Xdo),e(We,zdo),e(We,be),e(be,yh),e(yh,Sae),e(Sae,Qdo),e(yh,Wdo),e(yh,CP),e(CP,Hdo),e(yh,Udo),e(be,Jdo),e(be,Lh),e(Lh,Rae),e(Rae,Ydo),e(Lh,Kdo),e(Lh,Bae),e(Bae,Zdo),e(Lh,eco),e(be,oco),e(be,xh),e(xh,Pae),e(Pae,rco),e(xh,tco),e(xh,wP),e(wP,aco),e(xh,nco),e(be,sco),e(be,$h),e($h,Iae),e(Iae,lco),e($h,ico),e($h,AP),e(AP,dco),e($h,cco),e(be,mco),e(be,kh),e(kh,qae),e(qae,fco),e(kh,gco),e(kh,yP),e(yP,hco),e(kh,uco),e(be,pco),e(be,Sh),e(Sh,Nae),e(Nae,_co),e(Sh,bco),e(Sh,LP),e(LP,Fco),e(Sh,vco),e(be,Tco),e(be,Rh),e(Rh,jae),e(jae,Mco),e(Rh,Eco),e(Rh,xP),e(xP,Cco),e(Rh,wco),e(be,Aco),e(be,Bh),e(Bh,Dae),e(Dae,yco),e(Bh,Lco),e(Bh,$P),e($P,xco),e(Bh,$co),e(be,kco),e(be,Ph),e(Ph,Gae),e(Gae,Sco),e(Ph,Rco),e(Ph,kP),e(kP,Bco),e(Ph,Pco),e(be,Ico),e(be,Ih),e(Ih,Oae),e(Oae,qco),e(Ih,Nco),e(Ih,SP),e(SP,jco),e(Ih,Dco),e(be,Gco),e(be,qh),e(qh,Vae),e(Vae,Oco),e(qh,Vco),e(qh,RP),e(RP,Xco),e(qh,zco),e(be,Qco),e(be,Nh),e(Nh,Xae),e(Xae,Wco),e(Nh,Hco),e(Nh,BP),e(BP,Uco),e(Nh,Jco),e(be,Yco),e(be,jh),e(jh,zae),e(zae,Kco),e(jh,Zco),e(jh,PP),e(PP,emo),e(jh,omo),e(be,rmo),e(be,Dh),e(Dh,Qae),e(Qae,tmo),e(Dh,amo),e(Dh,IP),e(IP,nmo),e(Dh,smo),e(be,lmo),e(be,Gh),e(Gh,Wae),e(Wae,imo),e(Gh,dmo),e(Gh,qP),e(qP,cmo),e(Gh,mmo),e(We,fmo),M(Oh,We,null),e(We,gmo),M(Vh,We,null),e(yo,hmo),e(yo,Xh),M(My,Xh,null),e(Xh,umo),e(Xh,Hae),e(Hae,pmo),b(m,rIe,_),b(m,Ti,_),e(Ti,zh),e(zh,Uae),M(Ey,Uae,null),e(Ti,_mo),e(Ti,Jae),e(Jae,bmo),b(m,tIe,_),b(m,Lo,_),M(Cy,Lo,null),e(Lo,Fmo),e(Lo,Mi),e(Mi,vmo),e(Mi,NP),e(NP,Tmo),e(Mi,Mmo),e(Mi,jP),e(jP,Emo),e(Mi,Cmo),e(Lo,wmo),e(Lo,wy),e(wy,Amo),e(wy,Yae),e(Yae,ymo),e(wy,Lmo),e(Lo,xmo),e(Lo,ot),M(Ay,ot,null),e(ot,$mo),e(ot,Kae),e(Kae,kmo),e(ot,Smo),e(ot,Ei),e(Ei,Rmo),e(Ei,Zae),e(Zae,Bmo),e(Ei,Pmo),e(Ei,DP),e(DP,Imo),e(Ei,qmo),e(ot,Nmo),M(Qh,ot,null),e(Lo,jmo),e(Lo,He),M(yy,He,null),e(He,Dmo),e(He,ene),e(ene,Gmo),e(He,Omo),e(He,Aa),e(Aa,Vmo),e(Aa,one),e(one,Xmo),e(Aa,zmo),e(Aa,rne),e(rne,Qmo),e(Aa,Wmo),e(Aa,tne),e(tne,Hmo),e(Aa,Umo),e(He,Jmo),e(He,x),e(x,Wh),e(Wh,ane),e(ane,Ymo),e(Wh,Kmo),e(Wh,GP),e(GP,Zmo),e(Wh,efo),e(x,ofo),e(x,Hh),e(Hh,nne),e(nne,rfo),e(Hh,tfo),e(Hh,OP),e(OP,afo),e(Hh,nfo),e(x,sfo),e(x,Uh),e(Uh,sne),e(sne,lfo),e(Uh,ifo),e(Uh,VP),e(VP,dfo),e(Uh,cfo),e(x,mfo),e(x,Jh),e(Jh,lne),e(lne,ffo),e(Jh,gfo),e(Jh,XP),e(XP,hfo),e(Jh,ufo),e(x,pfo),e(x,Yh),e(Yh,ine),e(ine,_fo),e(Yh,bfo),e(Yh,zP),e(zP,Ffo),e(Yh,vfo),e(x,Tfo),e(x,Kh),e(Kh,dne),e(dne,Mfo),e(Kh,Efo),e(Kh,QP),e(QP,Cfo),e(Kh,wfo),e(x,Afo),e(x,Zh),e(Zh,cne),e(cne,yfo),e(Zh,Lfo),e(Zh,WP),e(WP,xfo),e(Zh,$fo),e(x,kfo),e(x,eu),e(eu,mne),e(mne,Sfo),e(eu,Rfo),e(eu,HP),e(HP,Bfo),e(eu,Pfo),e(x,Ifo),e(x,ou),e(ou,fne),e(fne,qfo),e(ou,Nfo),e(ou,UP),e(UP,jfo),e(ou,Dfo),e(x,Gfo),e(x,ru),e(ru,gne),e(gne,Ofo),e(ru,Vfo),e(ru,JP),e(JP,Xfo),e(ru,zfo),e(x,Qfo),e(x,tu),e(tu,hne),e(hne,Wfo),e(tu,Hfo),e(tu,YP),e(YP,Ufo),e(tu,Jfo),e(x,Yfo),e(x,au),e(au,une),e(une,Kfo),e(au,Zfo),e(au,KP),e(KP,ego),e(au,ogo),e(x,rgo),e(x,nu),e(nu,pne),e(pne,tgo),e(nu,ago),e(nu,ZP),e(ZP,ngo),e(nu,sgo),e(x,lgo),e(x,su),e(su,_ne),e(_ne,igo),e(su,dgo),e(su,eI),e(eI,cgo),e(su,mgo),e(x,fgo),e(x,lu),e(lu,bne),e(bne,ggo),e(lu,hgo),e(lu,oI),e(oI,ugo),e(lu,pgo),e(x,_go),e(x,iu),e(iu,Fne),e(Fne,bgo),e(iu,Fgo),e(iu,rI),e(rI,vgo),e(iu,Tgo),e(x,Mgo),e(x,du),e(du,vne),e(vne,Ego),e(du,Cgo),e(du,tI),e(tI,wgo),e(du,Ago),e(x,ygo),e(x,cu),e(cu,Tne),e(Tne,Lgo),e(cu,xgo),e(cu,aI),e(aI,$go),e(cu,kgo),e(x,Sgo),e(x,mu),e(mu,Mne),e(Mne,Rgo),e(mu,Bgo),e(mu,nI),e(nI,Pgo),e(mu,Igo),e(x,qgo),e(x,fu),e(fu,Ene),e(Ene,Ngo),e(fu,jgo),e(fu,sI),e(sI,Dgo),e(fu,Ggo),e(x,Ogo),e(x,gu),e(gu,Cne),e(Cne,Vgo),e(gu,Xgo),e(gu,lI),e(lI,zgo),e(gu,Qgo),e(x,Wgo),e(x,hu),e(hu,wne),e(wne,Hgo),e(hu,Ugo),e(hu,iI),e(iI,Jgo),e(hu,Ygo),e(x,Kgo),e(x,uu),e(uu,Ane),e(Ane,Zgo),e(uu,eho),e(uu,dI),e(dI,oho),e(uu,rho),e(x,tho),e(x,pu),e(pu,yne),e(yne,aho),e(pu,nho),e(pu,cI),e(cI,sho),e(pu,lho),e(x,iho),e(x,_u),e(_u,Lne),e(Lne,dho),e(_u,cho),e(_u,mI),e(mI,mho),e(_u,fho),e(x,gho),e(x,bu),e(bu,xne),e(xne,hho),e(bu,uho),e(bu,fI),e(fI,pho),e(bu,_ho),e(x,bho),e(x,Fu),e(Fu,$ne),e($ne,Fho),e(Fu,vho),e(Fu,gI),e(gI,Tho),e(Fu,Mho),e(x,Eho),e(x,vu),e(vu,kne),e(kne,Cho),e(vu,who),e(vu,hI),e(hI,Aho),e(vu,yho),e(x,Lho),e(x,Tu),e(Tu,Sne),e(Sne,xho),e(Tu,$ho),e(Tu,uI),e(uI,kho),e(Tu,Sho),e(x,Rho),e(x,Mu),e(Mu,Rne),e(Rne,Bho),e(Mu,Pho),e(Mu,pI),e(pI,Iho),e(Mu,qho),e(x,Nho),e(x,Eu),e(Eu,Bne),e(Bne,jho),e(Eu,Dho),e(Eu,_I),e(_I,Gho),e(Eu,Oho),e(x,Vho),e(x,Ss),e(Ss,Pne),e(Pne,Xho),e(Ss,zho),e(Ss,bI),e(bI,Qho),e(Ss,Who),e(Ss,FI),e(FI,Hho),e(Ss,Uho),e(x,Jho),e(x,Cu),e(Cu,Ine),e(Ine,Yho),e(Cu,Kho),e(Cu,vI),e(vI,Zho),e(Cu,euo),e(x,ouo),e(x,wu),e(wu,qne),e(qne,ruo),e(wu,tuo),e(wu,TI),e(TI,auo),e(wu,nuo),e(x,suo),e(x,Au),e(Au,Nne),e(Nne,luo),e(Au,iuo),e(Au,MI),e(MI,duo),e(Au,cuo),e(x,muo),e(x,yu),e(yu,jne),e(jne,fuo),e(yu,guo),e(yu,EI),e(EI,huo),e(yu,uuo),e(x,puo),e(x,Lu),e(Lu,Dne),e(Dne,_uo),e(Lu,buo),e(Lu,CI),e(CI,Fuo),e(Lu,vuo),e(x,Tuo),e(x,xu),e(xu,Gne),e(Gne,Muo),e(xu,Euo),e(xu,wI),e(wI,Cuo),e(xu,wuo),e(x,Auo),e(x,$u),e($u,One),e(One,yuo),e($u,Luo),e($u,AI),e(AI,xuo),e($u,$uo),e(x,kuo),e(x,ku),e(ku,Vne),e(Vne,Suo),e(ku,Ruo),e(ku,yI),e(yI,Buo),e(ku,Puo),e(x,Iuo),e(x,Su),e(Su,Xne),e(Xne,quo),e(Su,Nuo),e(Su,LI),e(LI,juo),e(Su,Duo),e(x,Guo),e(x,Ru),e(Ru,zne),e(zne,Ouo),e(Ru,Vuo),e(Ru,xI),e(xI,Xuo),e(Ru,zuo),e(x,Quo),e(x,Bu),e(Bu,Qne),e(Qne,Wuo),e(Bu,Huo),e(Bu,$I),e($I,Uuo),e(Bu,Juo),e(x,Yuo),e(x,Pu),e(Pu,Wne),e(Wne,Kuo),e(Pu,Zuo),e(Pu,kI),e(kI,epo),e(Pu,opo),e(x,rpo),e(x,Iu),e(Iu,Hne),e(Hne,tpo),e(Iu,apo),e(Iu,SI),e(SI,npo),e(Iu,spo),e(x,lpo),e(x,qu),e(qu,Une),e(Une,ipo),e(qu,dpo),e(qu,RI),e(RI,cpo),e(qu,mpo),e(x,fpo),e(x,Nu),e(Nu,Jne),e(Jne,gpo),e(Nu,hpo),e(Nu,BI),e(BI,upo),e(Nu,ppo),e(x,_po),e(x,ju),e(ju,Yne),e(Yne,bpo),e(ju,Fpo),e(ju,PI),e(PI,vpo),e(ju,Tpo),e(x,Mpo),e(x,Du),e(Du,Kne),e(Kne,Epo),e(Du,Cpo),e(Du,II),e(II,wpo),e(Du,Apo),e(x,ypo),e(x,Gu),e(Gu,Zne),e(Zne,Lpo),e(Gu,xpo),e(Gu,qI),e(qI,$po),e(Gu,kpo),e(x,Spo),e(x,Ou),e(Ou,ese),e(ese,Rpo),e(Ou,Bpo),e(Ou,NI),e(NI,Ppo),e(Ou,Ipo),e(x,qpo),e(x,Vu),e(Vu,ose),e(ose,Npo),e(Vu,jpo),e(Vu,jI),e(jI,Dpo),e(Vu,Gpo),e(x,Opo),e(x,Xu),e(Xu,rse),e(rse,Vpo),e(Xu,Xpo),e(Xu,DI),e(DI,zpo),e(Xu,Qpo),e(x,Wpo),e(x,zu),e(zu,tse),e(tse,Hpo),e(zu,Upo),e(zu,GI),e(GI,Jpo),e(zu,Ypo),e(x,Kpo),e(x,Qu),e(Qu,ase),e(ase,Zpo),e(Qu,e_o),e(Qu,OI),e(OI,o_o),e(Qu,r_o),e(x,t_o),e(x,Wu),e(Wu,nse),e(nse,a_o),e(Wu,n_o),e(Wu,VI),e(VI,s_o),e(Wu,l_o),e(x,i_o),e(x,Hu),e(Hu,sse),e(sse,d_o),e(Hu,c_o),e(Hu,XI),e(XI,m_o),e(Hu,f_o),e(x,g_o),e(x,Uu),e(Uu,lse),e(lse,h_o),e(Uu,u_o),e(Uu,zI),e(zI,p_o),e(Uu,__o),e(x,b_o),e(x,Ju),e(Ju,ise),e(ise,F_o),e(Ju,v_o),e(Ju,QI),e(QI,T_o),e(Ju,M_o),e(x,E_o),e(x,Yu),e(Yu,dse),e(dse,C_o),e(Yu,w_o),e(Yu,WI),e(WI,A_o),e(Yu,y_o),e(x,L_o),e(x,Ku),e(Ku,cse),e(cse,x_o),e(Ku,$_o),e(Ku,HI),e(HI,k_o),e(Ku,S_o),e(x,R_o),e(x,Zu),e(Zu,mse),e(mse,B_o),e(Zu,P_o),e(Zu,UI),e(UI,I_o),e(Zu,q_o),e(x,N_o),e(x,ep),e(ep,fse),e(fse,j_o),e(ep,D_o),e(ep,JI),e(JI,G_o),e(ep,O_o),e(x,V_o),e(x,op),e(op,gse),e(gse,X_o),e(op,z_o),e(op,YI),e(YI,Q_o),e(op,W_o),e(x,H_o),e(x,rp),e(rp,hse),e(hse,U_o),e(rp,J_o),e(rp,KI),e(KI,Y_o),e(rp,K_o),e(x,Z_o),e(x,tp),e(tp,use),e(use,ebo),e(tp,obo),e(tp,ZI),e(ZI,rbo),e(tp,tbo),e(x,abo),e(x,ap),e(ap,pse),e(pse,nbo),e(ap,sbo),e(ap,eq),e(eq,lbo),e(ap,ibo),e(x,dbo),e(x,np),e(np,_se),e(_se,cbo),e(np,mbo),e(np,oq),e(oq,fbo),e(np,gbo),e(x,hbo),e(x,sp),e(sp,bse),e(bse,ubo),e(sp,pbo),e(sp,rq),e(rq,_bo),e(sp,bbo),e(x,Fbo),e(x,lp),e(lp,Fse),e(Fse,vbo),e(lp,Tbo),e(lp,tq),e(tq,Mbo),e(lp,Ebo),e(x,Cbo),e(x,ip),e(ip,vse),e(vse,wbo),e(ip,Abo),e(ip,aq),e(aq,ybo),e(ip,Lbo),e(x,xbo),e(x,dp),e(dp,Tse),e(Tse,$bo),e(dp,kbo),e(dp,nq),e(nq,Sbo),e(dp,Rbo),e(x,Bbo),e(x,cp),e(cp,Mse),e(Mse,Pbo),e(cp,Ibo),e(cp,sq),e(sq,qbo),e(cp,Nbo),e(x,jbo),e(x,mp),e(mp,Ese),e(Ese,Dbo),e(mp,Gbo),e(mp,lq),e(lq,Obo),e(mp,Vbo),e(x,Xbo),e(x,fp),e(fp,Cse),e(Cse,zbo),e(fp,Qbo),e(fp,iq),e(iq,Wbo),e(fp,Hbo),e(x,Ubo),e(x,gp),e(gp,wse),e(wse,Jbo),e(gp,Ybo),e(gp,dq),e(dq,Kbo),e(gp,Zbo),e(x,e2o),e(x,hp),e(hp,Ase),e(Ase,o2o),e(hp,r2o),e(hp,cq),e(cq,t2o),e(hp,a2o),e(x,n2o),e(x,up),e(up,yse),e(yse,s2o),e(up,l2o),e(up,mq),e(mq,i2o),e(up,d2o),e(x,c2o),e(x,pp),e(pp,Lse),e(Lse,m2o),e(pp,f2o),e(pp,fq),e(fq,g2o),e(pp,h2o),e(x,u2o),e(x,_p),e(_p,xse),e(xse,p2o),e(_p,_2o),e(_p,gq),e(gq,b2o),e(_p,F2o),e(x,v2o),e(x,bp),e(bp,$se),e($se,T2o),e(bp,M2o),e(bp,hq),e(hq,E2o),e(bp,C2o),e(x,w2o),e(x,Fp),e(Fp,kse),e(kse,A2o),e(Fp,y2o),e(Fp,uq),e(uq,L2o),e(Fp,x2o),e(x,$2o),e(x,vp),e(vp,Sse),e(Sse,k2o),e(vp,S2o),e(vp,pq),e(pq,R2o),e(vp,B2o),e(x,P2o),e(x,Tp),e(Tp,Rse),e(Rse,I2o),e(Tp,q2o),e(Tp,_q),e(_q,N2o),e(Tp,j2o),e(x,D2o),e(x,Mp),e(Mp,Bse),e(Bse,G2o),e(Mp,O2o),e(Mp,bq),e(bq,V2o),e(Mp,X2o),e(x,z2o),e(x,Ep),e(Ep,Pse),e(Pse,Q2o),e(Ep,W2o),e(Ep,Fq),e(Fq,H2o),e(Ep,U2o),e(x,J2o),e(x,Cp),e(Cp,Ise),e(Ise,Y2o),e(Cp,K2o),e(Cp,vq),e(vq,Z2o),e(Cp,eFo),e(x,oFo),e(x,wp),e(wp,qse),e(qse,rFo),e(wp,tFo),e(wp,Tq),e(Tq,aFo),e(wp,nFo),e(x,sFo),e(x,Ap),e(Ap,Nse),e(Nse,lFo),e(Ap,iFo),e(Ap,Mq),e(Mq,dFo),e(Ap,cFo),e(x,mFo),e(x,yp),e(yp,jse),e(jse,fFo),e(yp,gFo),e(yp,Eq),e(Eq,hFo),e(yp,uFo),e(x,pFo),e(x,Lp),e(Lp,Dse),e(Dse,_Fo),e(Lp,bFo),e(Lp,Cq),e(Cq,FFo),e(Lp,vFo),e(x,TFo),e(x,xp),e(xp,Gse),e(Gse,MFo),e(xp,EFo),e(xp,wq),e(wq,CFo),e(xp,wFo),e(x,AFo),e(x,$p),e($p,Ose),e(Ose,yFo),e($p,LFo),e($p,Aq),e(Aq,xFo),e($p,$Fo),e(x,kFo),e(x,kp),e(kp,Vse),e(Vse,SFo),e(kp,RFo),e(kp,yq),e(yq,BFo),e(kp,PFo),e(x,IFo),e(x,Sp),e(Sp,Xse),e(Xse,qFo),e(Sp,NFo),e(Sp,Lq),e(Lq,jFo),e(Sp,DFo),e(x,GFo),e(x,Rp),e(Rp,zse),e(zse,OFo),e(Rp,VFo),e(Rp,xq),e(xq,XFo),e(Rp,zFo),e(x,QFo),e(x,Bp),e(Bp,Qse),e(Qse,WFo),e(Bp,HFo),e(Bp,$q),e($q,UFo),e(Bp,JFo),e(He,YFo),e(He,Pp),e(Pp,KFo),e(Pp,Wse),e(Wse,ZFo),e(Pp,evo),e(Pp,Hse),e(Hse,ovo),e(He,rvo),M(Ip,He,null),b(m,aIe,_),b(m,Ci,_),e(Ci,qp),e(qp,Use),M(Ly,Use,null),e(Ci,tvo),e(Ci,Jse),e(Jse,avo),b(m,nIe,_),b(m,xo,_),M(xy,xo,null),e(xo,nvo),e(xo,wi),e(wi,svo),e(wi,kq),e(kq,lvo),e(wi,ivo),e(wi,Sq),e(Sq,dvo),e(wi,cvo),e(xo,mvo),e(xo,$y),e($y,fvo),e($y,Yse),e(Yse,gvo),e($y,hvo),e(xo,uvo),e(xo,rt),M(ky,rt,null),e(rt,pvo),e(rt,Kse),e(Kse,_vo),e(rt,bvo),e(rt,Ai),e(Ai,Fvo),e(Ai,Zse),e(Zse,vvo),e(Ai,Tvo),e(Ai,Rq),e(Rq,Mvo),e(Ai,Evo),e(rt,Cvo),M(Np,rt,null),e(xo,wvo),e(xo,Ue),M(Sy,Ue,null),e(Ue,Avo),e(Ue,ele),e(ele,yvo),e(Ue,Lvo),e(Ue,ya),e(ya,xvo),e(ya,ole),e(ole,$vo),e(ya,kvo),e(ya,rle),e(rle,Svo),e(ya,Rvo),e(ya,tle),e(tle,Bvo),e(ya,Pvo),e(Ue,Ivo),e(Ue,G),e(G,jp),e(jp,ale),e(ale,qvo),e(jp,Nvo),e(jp,Bq),e(Bq,jvo),e(jp,Dvo),e(G,Gvo),e(G,Dp),e(Dp,nle),e(nle,Ovo),e(Dp,Vvo),e(Dp,Pq),e(Pq,Xvo),e(Dp,zvo),e(G,Qvo),e(G,Gp),e(Gp,sle),e(sle,Wvo),e(Gp,Hvo),e(Gp,Iq),e(Iq,Uvo),e(Gp,Jvo),e(G,Yvo),e(G,Op),e(Op,lle),e(lle,Kvo),e(Op,Zvo),e(Op,qq),e(qq,e1o),e(Op,o1o),e(G,r1o),e(G,Vp),e(Vp,ile),e(ile,t1o),e(Vp,a1o),e(Vp,Nq),e(Nq,n1o),e(Vp,s1o),e(G,l1o),e(G,Xp),e(Xp,dle),e(dle,i1o),e(Xp,d1o),e(Xp,jq),e(jq,c1o),e(Xp,m1o),e(G,f1o),e(G,zp),e(zp,cle),e(cle,g1o),e(zp,h1o),e(zp,Dq),e(Dq,u1o),e(zp,p1o),e(G,_1o),e(G,Qp),e(Qp,mle),e(mle,b1o),e(Qp,F1o),e(Qp,Gq),e(Gq,v1o),e(Qp,T1o),e(G,M1o),e(G,Wp),e(Wp,fle),e(fle,E1o),e(Wp,C1o),e(Wp,Oq),e(Oq,w1o),e(Wp,A1o),e(G,y1o),e(G,Hp),e(Hp,gle),e(gle,L1o),e(Hp,x1o),e(Hp,Vq),e(Vq,$1o),e(Hp,k1o),e(G,S1o),e(G,Up),e(Up,hle),e(hle,R1o),e(Up,B1o),e(Up,Xq),e(Xq,P1o),e(Up,I1o),e(G,q1o),e(G,Jp),e(Jp,ule),e(ule,N1o),e(Jp,j1o),e(Jp,zq),e(zq,D1o),e(Jp,G1o),e(G,O1o),e(G,Yp),e(Yp,ple),e(ple,V1o),e(Yp,X1o),e(Yp,Qq),e(Qq,z1o),e(Yp,Q1o),e(G,W1o),e(G,Kp),e(Kp,_le),e(_le,H1o),e(Kp,U1o),e(Kp,Wq),e(Wq,J1o),e(Kp,Y1o),e(G,K1o),e(G,Zp),e(Zp,ble),e(ble,Z1o),e(Zp,eTo),e(Zp,Hq),e(Hq,oTo),e(Zp,rTo),e(G,tTo),e(G,e_),e(e_,Fle),e(Fle,aTo),e(e_,nTo),e(e_,Uq),e(Uq,sTo),e(e_,lTo),e(G,iTo),e(G,o_),e(o_,vle),e(vle,dTo),e(o_,cTo),e(o_,Jq),e(Jq,mTo),e(o_,fTo),e(G,gTo),e(G,r_),e(r_,Tle),e(Tle,hTo),e(r_,uTo),e(r_,Yq),e(Yq,pTo),e(r_,_To),e(G,bTo),e(G,t_),e(t_,Mle),e(Mle,FTo),e(t_,vTo),e(t_,Kq),e(Kq,TTo),e(t_,MTo),e(G,ETo),e(G,a_),e(a_,Ele),e(Ele,CTo),e(a_,wTo),e(a_,Zq),e(Zq,ATo),e(a_,yTo),e(G,LTo),e(G,n_),e(n_,Cle),e(Cle,xTo),e(n_,$To),e(n_,eN),e(eN,kTo),e(n_,STo),e(G,RTo),e(G,s_),e(s_,wle),e(wle,BTo),e(s_,PTo),e(s_,oN),e(oN,ITo),e(s_,qTo),e(G,NTo),e(G,l_),e(l_,Ale),e(Ale,jTo),e(l_,DTo),e(l_,rN),e(rN,GTo),e(l_,OTo),e(G,VTo),e(G,i_),e(i_,yle),e(yle,XTo),e(i_,zTo),e(i_,tN),e(tN,QTo),e(i_,WTo),e(G,HTo),e(G,d_),e(d_,Lle),e(Lle,UTo),e(d_,JTo),e(d_,aN),e(aN,YTo),e(d_,KTo),e(G,ZTo),e(G,c_),e(c_,xle),e(xle,eMo),e(c_,oMo),e(c_,nN),e(nN,rMo),e(c_,tMo),e(G,aMo),e(G,m_),e(m_,$le),e($le,nMo),e(m_,sMo),e(m_,sN),e(sN,lMo),e(m_,iMo),e(G,dMo),e(G,f_),e(f_,kle),e(kle,cMo),e(f_,mMo),e(f_,lN),e(lN,fMo),e(f_,gMo),e(G,hMo),e(G,g_),e(g_,Sle),e(Sle,uMo),e(g_,pMo),e(g_,iN),e(iN,_Mo),e(g_,bMo),e(G,FMo),e(G,h_),e(h_,Rle),e(Rle,vMo),e(h_,TMo),e(h_,dN),e(dN,MMo),e(h_,EMo),e(G,CMo),e(G,u_),e(u_,Ble),e(Ble,wMo),e(u_,AMo),e(u_,cN),e(cN,yMo),e(u_,LMo),e(G,xMo),e(G,p_),e(p_,Ple),e(Ple,$Mo),e(p_,kMo),e(p_,mN),e(mN,SMo),e(p_,RMo),e(G,BMo),e(G,__),e(__,Ile),e(Ile,PMo),e(__,IMo),e(__,fN),e(fN,qMo),e(__,NMo),e(G,jMo),e(G,b_),e(b_,qle),e(qle,DMo),e(b_,GMo),e(b_,gN),e(gN,OMo),e(b_,VMo),e(G,XMo),e(G,F_),e(F_,Nle),e(Nle,zMo),e(F_,QMo),e(F_,hN),e(hN,WMo),e(F_,HMo),e(G,UMo),e(G,v_),e(v_,jle),e(jle,JMo),e(v_,YMo),e(v_,uN),e(uN,KMo),e(v_,ZMo),e(G,e4o),e(G,T_),e(T_,Dle),e(Dle,o4o),e(T_,r4o),e(T_,pN),e(pN,t4o),e(T_,a4o),e(G,n4o),e(G,M_),e(M_,Gle),e(Gle,s4o),e(M_,l4o),e(M_,_N),e(_N,i4o),e(M_,d4o),e(G,c4o),e(G,E_),e(E_,Ole),e(Ole,m4o),e(E_,f4o),e(E_,bN),e(bN,g4o),e(E_,h4o),e(G,u4o),e(G,C_),e(C_,Vle),e(Vle,p4o),e(C_,_4o),e(C_,FN),e(FN,b4o),e(C_,F4o),e(Ue,v4o),e(Ue,w_),e(w_,T4o),e(w_,Xle),e(Xle,M4o),e(w_,E4o),e(w_,zle),e(zle,C4o),e(Ue,w4o),M(A_,Ue,null),b(m,sIe,_),b(m,yi,_),e(yi,y_),e(y_,Qle),M(Ry,Qle,null),e(yi,A4o),e(yi,Wle),e(Wle,y4o),b(m,lIe,_),b(m,$o,_),M(By,$o,null),e($o,L4o),e($o,Li),e(Li,x4o),e(Li,vN),e(vN,$4o),e(Li,k4o),e(Li,TN),e(TN,S4o),e(Li,R4o),e($o,B4o),e($o,Py),e(Py,P4o),e(Py,Hle),e(Hle,I4o),e(Py,q4o),e($o,N4o),e($o,tt),M(Iy,tt,null),e(tt,j4o),e(tt,Ule),e(Ule,D4o),e(tt,G4o),e(tt,xi),e(xi,O4o),e(xi,Jle),e(Jle,V4o),e(xi,X4o),e(xi,MN),e(MN,z4o),e(xi,Q4o),e(tt,W4o),M(L_,tt,null),e($o,H4o),e($o,Je),M(qy,Je,null),e(Je,U4o),e(Je,Yle),e(Yle,J4o),e(Je,Y4o),e(Je,La),e(La,K4o),e(La,Kle),e(Kle,Z4o),e(La,eEo),e(La,Zle),e(Zle,oEo),e(La,rEo),e(La,eie),e(eie,tEo),e(La,aEo),e(Je,nEo),e(Je,z),e(z,x_),e(x_,oie),e(oie,sEo),e(x_,lEo),e(x_,EN),e(EN,iEo),e(x_,dEo),e(z,cEo),e(z,$_),e($_,rie),e(rie,mEo),e($_,fEo),e($_,CN),e(CN,gEo),e($_,hEo),e(z,uEo),e(z,k_),e(k_,tie),e(tie,pEo),e(k_,_Eo),e(k_,wN),e(wN,bEo),e(k_,FEo),e(z,vEo),e(z,S_),e(S_,aie),e(aie,TEo),e(S_,MEo),e(S_,AN),e(AN,EEo),e(S_,CEo),e(z,wEo),e(z,R_),e(R_,nie),e(nie,AEo),e(R_,yEo),e(R_,yN),e(yN,LEo),e(R_,xEo),e(z,$Eo),e(z,B_),e(B_,sie),e(sie,kEo),e(B_,SEo),e(B_,LN),e(LN,REo),e(B_,BEo),e(z,PEo),e(z,P_),e(P_,lie),e(lie,IEo),e(P_,qEo),e(P_,xN),e(xN,NEo),e(P_,jEo),e(z,DEo),e(z,I_),e(I_,iie),e(iie,GEo),e(I_,OEo),e(I_,$N),e($N,VEo),e(I_,XEo),e(z,zEo),e(z,q_),e(q_,die),e(die,QEo),e(q_,WEo),e(q_,kN),e(kN,HEo),e(q_,UEo),e(z,JEo),e(z,N_),e(N_,cie),e(cie,YEo),e(N_,KEo),e(N_,SN),e(SN,ZEo),e(N_,e5o),e(z,o5o),e(z,j_),e(j_,mie),e(mie,r5o),e(j_,t5o),e(j_,RN),e(RN,a5o),e(j_,n5o),e(z,s5o),e(z,D_),e(D_,fie),e(fie,l5o),e(D_,i5o),e(D_,BN),e(BN,d5o),e(D_,c5o),e(z,m5o),e(z,G_),e(G_,gie),e(gie,f5o),e(G_,g5o),e(G_,PN),e(PN,h5o),e(G_,u5o),e(z,p5o),e(z,O_),e(O_,hie),e(hie,_5o),e(O_,b5o),e(O_,IN),e(IN,F5o),e(O_,v5o),e(z,T5o),e(z,V_),e(V_,uie),e(uie,M5o),e(V_,E5o),e(V_,qN),e(qN,C5o),e(V_,w5o),e(z,A5o),e(z,X_),e(X_,pie),e(pie,y5o),e(X_,L5o),e(X_,NN),e(NN,x5o),e(X_,$5o),e(z,k5o),e(z,z_),e(z_,_ie),e(_ie,S5o),e(z_,R5o),e(z_,jN),e(jN,B5o),e(z_,P5o),e(z,I5o),e(z,Q_),e(Q_,bie),e(bie,q5o),e(Q_,N5o),e(Q_,DN),e(DN,j5o),e(Q_,D5o),e(z,G5o),e(z,W_),e(W_,Fie),e(Fie,O5o),e(W_,V5o),e(W_,GN),e(GN,X5o),e(W_,z5o),e(z,Q5o),e(z,H_),e(H_,vie),e(vie,W5o),e(H_,H5o),e(H_,ON),e(ON,U5o),e(H_,J5o),e(z,Y5o),e(z,U_),e(U_,Tie),e(Tie,K5o),e(U_,Z5o),e(U_,VN),e(VN,eCo),e(U_,oCo),e(z,rCo),e(z,J_),e(J_,Mie),e(Mie,tCo),e(J_,aCo),e(J_,XN),e(XN,nCo),e(J_,sCo),e(z,lCo),e(z,Y_),e(Y_,Eie),e(Eie,iCo),e(Y_,dCo),e(Y_,zN),e(zN,cCo),e(Y_,mCo),e(z,fCo),e(z,K_),e(K_,Cie),e(Cie,gCo),e(K_,hCo),e(K_,QN),e(QN,uCo),e(K_,pCo),e(z,_Co),e(z,Z_),e(Z_,wie),e(wie,bCo),e(Z_,FCo),e(Z_,WN),e(WN,vCo),e(Z_,TCo),e(z,MCo),e(z,eb),e(eb,Aie),e(Aie,ECo),e(eb,CCo),e(eb,HN),e(HN,wCo),e(eb,ACo),e(z,yCo),e(z,ob),e(ob,yie),e(yie,LCo),e(ob,xCo),e(ob,UN),e(UN,$Co),e(ob,kCo),e(z,SCo),e(z,rb),e(rb,Lie),e(Lie,RCo),e(rb,BCo),e(rb,JN),e(JN,PCo),e(rb,ICo),e(z,qCo),e(z,tb),e(tb,xie),e(xie,NCo),e(tb,jCo),e(tb,YN),e(YN,DCo),e(tb,GCo),e(z,OCo),e(z,ab),e(ab,$ie),e($ie,VCo),e(ab,XCo),e(ab,KN),e(KN,zCo),e(ab,QCo),e(z,WCo),e(z,nb),e(nb,kie),e(kie,HCo),e(nb,UCo),e(nb,ZN),e(ZN,JCo),e(nb,YCo),e(z,KCo),e(z,sb),e(sb,Sie),e(Sie,ZCo),e(sb,e3o),e(sb,ej),e(ej,o3o),e(sb,r3o),e(z,t3o),e(z,lb),e(lb,Rie),e(Rie,a3o),e(lb,n3o),e(lb,oj),e(oj,s3o),e(lb,l3o),e(z,i3o),e(z,ib),e(ib,Bie),e(Bie,d3o),e(ib,c3o),e(ib,rj),e(rj,m3o),e(ib,f3o),e(z,g3o),e(z,db),e(db,Pie),e(Pie,h3o),e(db,u3o),e(db,tj),e(tj,p3o),e(db,_3o),e(z,b3o),e(z,cb),e(cb,Iie),e(Iie,F3o),e(cb,v3o),e(cb,aj),e(aj,T3o),e(cb,M3o),e(Je,E3o),e(Je,mb),e(mb,C3o),e(mb,qie),e(qie,w3o),e(mb,A3o),e(mb,Nie),e(Nie,y3o),e(Je,L3o),M(fb,Je,null),b(m,iIe,_),b(m,$i,_),e($i,gb),e(gb,jie),M(Ny,jie,null),e($i,x3o),e($i,Die),e(Die,$3o),b(m,dIe,_),b(m,ko,_),M(jy,ko,null),e(ko,k3o),e(ko,ki),e(ki,S3o),e(ki,nj),e(nj,R3o),e(ki,B3o),e(ki,sj),e(sj,P3o),e(ki,I3o),e(ko,q3o),e(ko,Dy),e(Dy,N3o),e(Dy,Gie),e(Gie,j3o),e(Dy,D3o),e(ko,G3o),e(ko,at),M(Gy,at,null),e(at,O3o),e(at,Oie),e(Oie,V3o),e(at,X3o),e(at,Si),e(Si,z3o),e(Si,Vie),e(Vie,Q3o),e(Si,W3o),e(Si,lj),e(lj,H3o),e(Si,U3o),e(at,J3o),M(hb,at,null),e(ko,Y3o),e(ko,Ye),M(Oy,Ye,null),e(Ye,K3o),e(Ye,Xie),e(Xie,Z3o),e(Ye,ewo),e(Ye,xa),e(xa,owo),e(xa,zie),e(zie,rwo),e(xa,two),e(xa,Qie),e(Qie,awo),e(xa,nwo),e(xa,Wie),e(Wie,swo),e(xa,lwo),e(Ye,iwo),e(Ye,Q),e(Q,ub),e(ub,Hie),e(Hie,dwo),e(ub,cwo),e(ub,ij),e(ij,mwo),e(ub,fwo),e(Q,gwo),e(Q,pb),e(pb,Uie),e(Uie,hwo),e(pb,uwo),e(pb,dj),e(dj,pwo),e(pb,_wo),e(Q,bwo),e(Q,_b),e(_b,Jie),e(Jie,Fwo),e(_b,vwo),e(_b,cj),e(cj,Two),e(_b,Mwo),e(Q,Ewo),e(Q,bb),e(bb,Yie),e(Yie,Cwo),e(bb,wwo),e(bb,mj),e(mj,Awo),e(bb,ywo),e(Q,Lwo),e(Q,Fb),e(Fb,Kie),e(Kie,xwo),e(Fb,$wo),e(Fb,fj),e(fj,kwo),e(Fb,Swo),e(Q,Rwo),e(Q,vb),e(vb,Zie),e(Zie,Bwo),e(vb,Pwo),e(vb,gj),e(gj,Iwo),e(vb,qwo),e(Q,Nwo),e(Q,Tb),e(Tb,ede),e(ede,jwo),e(Tb,Dwo),e(Tb,hj),e(hj,Gwo),e(Tb,Owo),e(Q,Vwo),e(Q,Mb),e(Mb,ode),e(ode,Xwo),e(Mb,zwo),e(Mb,uj),e(uj,Qwo),e(Mb,Wwo),e(Q,Hwo),e(Q,Eb),e(Eb,rde),e(rde,Uwo),e(Eb,Jwo),e(Eb,pj),e(pj,Ywo),e(Eb,Kwo),e(Q,Zwo),e(Q,Cb),e(Cb,tde),e(tde,eAo),e(Cb,oAo),e(Cb,_j),e(_j,rAo),e(Cb,tAo),e(Q,aAo),e(Q,wb),e(wb,ade),e(ade,nAo),e(wb,sAo),e(wb,bj),e(bj,lAo),e(wb,iAo),e(Q,dAo),e(Q,Ab),e(Ab,nde),e(nde,cAo),e(Ab,mAo),e(Ab,Fj),e(Fj,fAo),e(Ab,gAo),e(Q,hAo),e(Q,yb),e(yb,sde),e(sde,uAo),e(yb,pAo),e(yb,vj),e(vj,_Ao),e(yb,bAo),e(Q,FAo),e(Q,Lb),e(Lb,lde),e(lde,vAo),e(Lb,TAo),e(Lb,Tj),e(Tj,MAo),e(Lb,EAo),e(Q,CAo),e(Q,xb),e(xb,ide),e(ide,wAo),e(xb,AAo),e(xb,Mj),e(Mj,yAo),e(xb,LAo),e(Q,xAo),e(Q,$b),e($b,dde),e(dde,$Ao),e($b,kAo),e($b,Ej),e(Ej,SAo),e($b,RAo),e(Q,BAo),e(Q,kb),e(kb,cde),e(cde,PAo),e(kb,IAo),e(kb,Cj),e(Cj,qAo),e(kb,NAo),e(Q,jAo),e(Q,Sb),e(Sb,mde),e(mde,DAo),e(Sb,GAo),e(Sb,wj),e(wj,OAo),e(Sb,VAo),e(Q,XAo),e(Q,Rb),e(Rb,fde),e(fde,zAo),e(Rb,QAo),e(Rb,Aj),e(Aj,WAo),e(Rb,HAo),e(Q,UAo),e(Q,Bb),e(Bb,gde),e(gde,JAo),e(Bb,YAo),e(Bb,yj),e(yj,KAo),e(Bb,ZAo),e(Q,e6o),e(Q,Pb),e(Pb,hde),e(hde,o6o),e(Pb,r6o),e(Pb,Lj),e(Lj,t6o),e(Pb,a6o),e(Q,n6o),e(Q,Ib),e(Ib,ude),e(ude,s6o),e(Ib,l6o),e(Ib,xj),e(xj,i6o),e(Ib,d6o),e(Q,c6o),e(Q,qb),e(qb,pde),e(pde,m6o),e(qb,f6o),e(qb,$j),e($j,g6o),e(qb,h6o),e(Q,u6o),e(Q,Nb),e(Nb,_de),e(_de,p6o),e(Nb,_6o),e(Nb,kj),e(kj,b6o),e(Nb,F6o),e(Q,v6o),e(Q,jb),e(jb,bde),e(bde,T6o),e(jb,M6o),e(jb,Sj),e(Sj,E6o),e(jb,C6o),e(Q,w6o),e(Q,Db),e(Db,Fde),e(Fde,A6o),e(Db,y6o),e(Db,Rj),e(Rj,L6o),e(Db,x6o),e(Q,$6o),e(Q,Gb),e(Gb,vde),e(vde,k6o),e(Gb,S6o),e(Gb,Bj),e(Bj,R6o),e(Gb,B6o),e(Q,P6o),e(Q,Ob),e(Ob,Tde),e(Tde,I6o),e(Ob,q6o),e(Ob,Pj),e(Pj,N6o),e(Ob,j6o),e(Q,D6o),e(Q,Vb),e(Vb,Mde),e(Mde,G6o),e(Vb,O6o),e(Vb,Ij),e(Ij,V6o),e(Vb,X6o),e(Q,z6o),e(Q,Xb),e(Xb,Ede),e(Ede,Q6o),e(Xb,W6o),e(Xb,qj),e(qj,H6o),e(Xb,U6o),e(Q,J6o),e(Q,zb),e(zb,Cde),e(Cde,Y6o),e(zb,K6o),e(zb,wde),e(wde,Z6o),e(zb,e0o),e(Q,o0o),e(Q,Qb),e(Qb,Ade),e(Ade,r0o),e(Qb,t0o),e(Qb,Nj),e(Nj,a0o),e(Qb,n0o),e(Q,s0o),e(Q,Wb),e(Wb,yde),e(yde,l0o),e(Wb,i0o),e(Wb,jj),e(jj,d0o),e(Wb,c0o),e(Q,m0o),e(Q,Hb),e(Hb,Lde),e(Lde,f0o),e(Hb,g0o),e(Hb,Dj),e(Dj,h0o),e(Hb,u0o),e(Q,p0o),e(Q,Ub),e(Ub,xde),e(xde,_0o),e(Ub,b0o),e(Ub,Gj),e(Gj,F0o),e(Ub,v0o),e(Ye,T0o),e(Ye,Jb),e(Jb,M0o),e(Jb,$de),e($de,E0o),e(Jb,C0o),e(Jb,kde),e(kde,w0o),e(Ye,A0o),M(Yb,Ye,null),b(m,cIe,_),b(m,Ri,_),e(Ri,Kb),e(Kb,Sde),M(Vy,Sde,null),e(Ri,y0o),e(Ri,Rde),e(Rde,L0o),b(m,mIe,_),b(m,So,_),M(Xy,So,null),e(So,x0o),e(So,Bi),e(Bi,$0o),e(Bi,Oj),e(Oj,k0o),e(Bi,S0o),e(Bi,Vj),e(Vj,R0o),e(Bi,B0o),e(So,P0o),e(So,zy),e(zy,I0o),e(zy,Bde),e(Bde,q0o),e(zy,N0o),e(So,j0o),e(So,nt),M(Qy,nt,null),e(nt,D0o),e(nt,Pde),e(Pde,G0o),e(nt,O0o),e(nt,Pi),e(Pi,V0o),e(Pi,Ide),e(Ide,X0o),e(Pi,z0o),e(Pi,Xj),e(Xj,Q0o),e(Pi,W0o),e(nt,H0o),M(Zb,nt,null),e(So,U0o),e(So,Ke),M(Wy,Ke,null),e(Ke,J0o),e(Ke,qde),e(qde,Y0o),e(Ke,K0o),e(Ke,$a),e($a,Z0o),e($a,Nde),e(Nde,eyo),e($a,oyo),e($a,jde),e(jde,ryo),e($a,tyo),e($a,Dde),e(Dde,ayo),e($a,nyo),e(Ke,syo),e(Ke,he),e(he,e2),e(e2,Gde),e(Gde,lyo),e(e2,iyo),e(e2,zj),e(zj,dyo),e(e2,cyo),e(he,myo),e(he,o2),e(o2,Ode),e(Ode,fyo),e(o2,gyo),e(o2,Qj),e(Qj,hyo),e(o2,uyo),e(he,pyo),e(he,r2),e(r2,Vde),e(Vde,_yo),e(r2,byo),e(r2,Wj),e(Wj,Fyo),e(r2,vyo),e(he,Tyo),e(he,t2),e(t2,Xde),e(Xde,Myo),e(t2,Eyo),e(t2,Hj),e(Hj,Cyo),e(t2,wyo),e(he,Ayo),e(he,a2),e(a2,zde),e(zde,yyo),e(a2,Lyo),e(a2,Uj),e(Uj,xyo),e(a2,$yo),e(he,kyo),e(he,n2),e(n2,Qde),e(Qde,Syo),e(n2,Ryo),e(n2,Jj),e(Jj,Byo),e(n2,Pyo),e(he,Iyo),e(he,s2),e(s2,Wde),e(Wde,qyo),e(s2,Nyo),e(s2,Yj),e(Yj,jyo),e(s2,Dyo),e(he,Gyo),e(he,l2),e(l2,Hde),e(Hde,Oyo),e(l2,Vyo),e(l2,Kj),e(Kj,Xyo),e(l2,zyo),e(he,Qyo),e(he,i2),e(i2,Ude),e(Ude,Wyo),e(i2,Hyo),e(i2,Zj),e(Zj,Uyo),e(i2,Jyo),e(he,Yyo),e(he,d2),e(d2,Jde),e(Jde,Kyo),e(d2,Zyo),e(d2,eD),e(eD,eLo),e(d2,oLo),e(he,rLo),e(he,c2),e(c2,Yde),e(Yde,tLo),e(c2,aLo),e(c2,oD),e(oD,nLo),e(c2,sLo),e(he,lLo),e(he,m2),e(m2,Kde),e(Kde,iLo),e(m2,dLo),e(m2,rD),e(rD,cLo),e(m2,mLo),e(he,fLo),e(he,f2),e(f2,Zde),e(Zde,gLo),e(f2,hLo),e(f2,tD),e(tD,uLo),e(f2,pLo),e(he,_Lo),e(he,g2),e(g2,ece),e(ece,bLo),e(g2,FLo),e(g2,aD),e(aD,vLo),e(g2,TLo),e(he,MLo),e(he,h2),e(h2,oce),e(oce,ELo),e(h2,CLo),e(h2,nD),e(nD,wLo),e(h2,ALo),e(he,yLo),e(he,u2),e(u2,rce),e(rce,LLo),e(u2,xLo),e(u2,sD),e(sD,$Lo),e(u2,kLo),e(he,SLo),e(he,p2),e(p2,tce),e(tce,RLo),e(p2,BLo),e(p2,lD),e(lD,PLo),e(p2,ILo),e(Ke,qLo),e(Ke,_2),e(_2,NLo),e(_2,ace),e(ace,jLo),e(_2,DLo),e(_2,nce),e(nce,GLo),e(Ke,OLo),M(b2,Ke,null),b(m,fIe,_),b(m,Ii,_),e(Ii,F2),e(F2,sce),M(Hy,sce,null),e(Ii,VLo),e(Ii,lce),e(lce,XLo),b(m,gIe,_),b(m,Ro,_),M(Uy,Ro,null),e(Ro,zLo),e(Ro,qi),e(qi,QLo),e(qi,iD),e(iD,WLo),e(qi,HLo),e(qi,dD),e(dD,ULo),e(qi,JLo),e(Ro,YLo),e(Ro,Jy),e(Jy,KLo),e(Jy,ice),e(ice,ZLo),e(Jy,e8o),e(Ro,o8o),e(Ro,st),M(Yy,st,null),e(st,r8o),e(st,dce),e(dce,t8o),e(st,a8o),e(st,Ni),e(Ni,n8o),e(Ni,cce),e(cce,s8o),e(Ni,l8o),e(Ni,cD),e(cD,i8o),e(Ni,d8o),e(st,c8o),M(v2,st,null),e(Ro,m8o),e(Ro,Ze),M(Ky,Ze,null),e(Ze,f8o),e(Ze,mce),e(mce,g8o),e(Ze,h8o),e(Ze,ka),e(ka,u8o),e(ka,fce),e(fce,p8o),e(ka,_8o),e(ka,gce),e(gce,b8o),e(ka,F8o),e(ka,hce),e(hce,v8o),e(ka,T8o),e(Ze,M8o),e(Ze,q),e(q,T2),e(T2,uce),e(uce,E8o),e(T2,C8o),e(T2,mD),e(mD,w8o),e(T2,A8o),e(q,y8o),e(q,M2),e(M2,pce),e(pce,L8o),e(M2,x8o),e(M2,fD),e(fD,$8o),e(M2,k8o),e(q,S8o),e(q,E2),e(E2,_ce),e(_ce,R8o),e(E2,B8o),e(E2,gD),e(gD,P8o),e(E2,I8o),e(q,q8o),e(q,C2),e(C2,bce),e(bce,N8o),e(C2,j8o),e(C2,hD),e(hD,D8o),e(C2,G8o),e(q,O8o),e(q,w2),e(w2,Fce),e(Fce,V8o),e(w2,X8o),e(w2,uD),e(uD,z8o),e(w2,Q8o),e(q,W8o),e(q,A2),e(A2,vce),e(vce,H8o),e(A2,U8o),e(A2,pD),e(pD,J8o),e(A2,Y8o),e(q,K8o),e(q,y2),e(y2,Tce),e(Tce,Z8o),e(y2,exo),e(y2,_D),e(_D,oxo),e(y2,rxo),e(q,txo),e(q,L2),e(L2,Mce),e(Mce,axo),e(L2,nxo),e(L2,bD),e(bD,sxo),e(L2,lxo),e(q,ixo),e(q,x2),e(x2,Ece),e(Ece,dxo),e(x2,cxo),e(x2,FD),e(FD,mxo),e(x2,fxo),e(q,gxo),e(q,$2),e($2,Cce),e(Cce,hxo),e($2,uxo),e($2,vD),e(vD,pxo),e($2,_xo),e(q,bxo),e(q,k2),e(k2,wce),e(wce,Fxo),e(k2,vxo),e(k2,TD),e(TD,Txo),e(k2,Mxo),e(q,Exo),e(q,S2),e(S2,Ace),e(Ace,Cxo),e(S2,wxo),e(S2,MD),e(MD,Axo),e(S2,yxo),e(q,Lxo),e(q,R2),e(R2,yce),e(yce,xxo),e(R2,$xo),e(R2,ED),e(ED,kxo),e(R2,Sxo),e(q,Rxo),e(q,B2),e(B2,Lce),e(Lce,Bxo),e(B2,Pxo),e(B2,CD),e(CD,Ixo),e(B2,qxo),e(q,Nxo),e(q,P2),e(P2,xce),e(xce,jxo),e(P2,Dxo),e(P2,wD),e(wD,Gxo),e(P2,Oxo),e(q,Vxo),e(q,I2),e(I2,$ce),e($ce,Xxo),e(I2,zxo),e(I2,AD),e(AD,Qxo),e(I2,Wxo),e(q,Hxo),e(q,q2),e(q2,kce),e(kce,Uxo),e(q2,Jxo),e(q2,yD),e(yD,Yxo),e(q2,Kxo),e(q,Zxo),e(q,N2),e(N2,Sce),e(Sce,e7o),e(N2,o7o),e(N2,LD),e(LD,r7o),e(N2,t7o),e(q,a7o),e(q,j2),e(j2,Rce),e(Rce,n7o),e(j2,s7o),e(j2,xD),e(xD,l7o),e(j2,i7o),e(q,d7o),e(q,D2),e(D2,Bce),e(Bce,c7o),e(D2,m7o),e(D2,$D),e($D,f7o),e(D2,g7o),e(q,h7o),e(q,G2),e(G2,Pce),e(Pce,u7o),e(G2,p7o),e(G2,kD),e(kD,_7o),e(G2,b7o),e(q,F7o),e(q,O2),e(O2,Ice),e(Ice,v7o),e(O2,T7o),e(O2,SD),e(SD,M7o),e(O2,E7o),e(q,C7o),e(q,V2),e(V2,qce),e(qce,w7o),e(V2,A7o),e(V2,RD),e(RD,y7o),e(V2,L7o),e(q,x7o),e(q,X2),e(X2,Nce),e(Nce,$7o),e(X2,k7o),e(X2,BD),e(BD,S7o),e(X2,R7o),e(q,B7o),e(q,z2),e(z2,jce),e(jce,P7o),e(z2,I7o),e(z2,PD),e(PD,q7o),e(z2,N7o),e(q,j7o),e(q,Q2),e(Q2,Dce),e(Dce,D7o),e(Q2,G7o),e(Q2,ID),e(ID,O7o),e(Q2,V7o),e(q,X7o),e(q,W2),e(W2,Gce),e(Gce,z7o),e(W2,Q7o),e(W2,qD),e(qD,W7o),e(W2,H7o),e(q,U7o),e(q,H2),e(H2,Oce),e(Oce,J7o),e(H2,Y7o),e(H2,ND),e(ND,K7o),e(H2,Z7o),e(q,e9o),e(q,U2),e(U2,Vce),e(Vce,o9o),e(U2,r9o),e(U2,jD),e(jD,t9o),e(U2,a9o),e(q,n9o),e(q,J2),e(J2,Xce),e(Xce,s9o),e(J2,l9o),e(J2,DD),e(DD,i9o),e(J2,d9o),e(q,c9o),e(q,Y2),e(Y2,zce),e(zce,m9o),e(Y2,f9o),e(Y2,GD),e(GD,g9o),e(Y2,h9o),e(q,u9o),e(q,K2),e(K2,Qce),e(Qce,p9o),e(K2,_9o),e(K2,OD),e(OD,b9o),e(K2,F9o),e(q,v9o),e(q,Z2),e(Z2,Wce),e(Wce,T9o),e(Z2,M9o),e(Z2,VD),e(VD,E9o),e(Z2,C9o),e(q,w9o),e(q,eF),e(eF,Hce),e(Hce,A9o),e(eF,y9o),e(eF,XD),e(XD,L9o),e(eF,x9o),e(q,$9o),e(q,oF),e(oF,Uce),e(Uce,k9o),e(oF,S9o),e(oF,zD),e(zD,R9o),e(oF,B9o),e(q,P9o),e(q,rF),e(rF,Jce),e(Jce,I9o),e(rF,q9o),e(rF,QD),e(QD,N9o),e(rF,j9o),e(q,D9o),e(q,tF),e(tF,Yce),e(Yce,G9o),e(tF,O9o),e(tF,WD),e(WD,V9o),e(tF,X9o),e(q,z9o),e(q,aF),e(aF,Kce),e(Kce,Q9o),e(aF,W9o),e(aF,HD),e(HD,H9o),e(aF,U9o),e(q,J9o),e(q,nF),e(nF,Zce),e(Zce,Y9o),e(nF,K9o),e(nF,UD),e(UD,Z9o),e(nF,e$o),e(q,o$o),e(q,sF),e(sF,eme),e(eme,r$o),e(sF,t$o),e(sF,JD),e(JD,a$o),e(sF,n$o),e(q,s$o),e(q,lF),e(lF,ome),e(ome,l$o),e(lF,i$o),e(lF,YD),e(YD,d$o),e(lF,c$o),e(q,m$o),e(q,iF),e(iF,rme),e(rme,f$o),e(iF,g$o),e(iF,KD),e(KD,h$o),e(iF,u$o),e(q,p$o),e(q,dF),e(dF,tme),e(tme,_$o),e(dF,b$o),e(dF,ZD),e(ZD,F$o),e(dF,v$o),e(q,T$o),e(q,cF),e(cF,ame),e(ame,M$o),e(cF,E$o),e(cF,eG),e(eG,C$o),e(cF,w$o),e(q,A$o),e(q,mF),e(mF,nme),e(nme,y$o),e(mF,L$o),e(mF,oG),e(oG,x$o),e(mF,$$o),e(q,k$o),e(q,fF),e(fF,sme),e(sme,S$o),e(fF,R$o),e(fF,rG),e(rG,B$o),e(fF,P$o),e(q,I$o),e(q,gF),e(gF,lme),e(lme,q$o),e(gF,N$o),e(gF,tG),e(tG,j$o),e(gF,D$o),e(Ze,G$o),e(Ze,hF),e(hF,O$o),e(hF,ime),e(ime,V$o),e(hF,X$o),e(hF,dme),e(dme,z$o),e(Ze,Q$o),M(uF,Ze,null),b(m,hIe,_),b(m,ji,_),e(ji,pF),e(pF,cme),M(Zy,cme,null),e(ji,W$o),e(ji,mme),e(mme,H$o),b(m,uIe,_),b(m,Bo,_),M(eL,Bo,null),e(Bo,U$o),e(Bo,Di),e(Di,J$o),e(Di,aG),e(aG,Y$o),e(Di,K$o),e(Di,nG),e(nG,Z$o),e(Di,eko),e(Bo,oko),e(Bo,oL),e(oL,rko),e(oL,fme),e(fme,tko),e(oL,ako),e(Bo,nko),e(Bo,lt),M(rL,lt,null),e(lt,sko),e(lt,gme),e(gme,lko),e(lt,iko),e(lt,Gi),e(Gi,dko),e(Gi,hme),e(hme,cko),e(Gi,mko),e(Gi,sG),e(sG,fko),e(Gi,gko),e(lt,hko),M(_F,lt,null),e(Bo,uko),e(Bo,eo),M(tL,eo,null),e(eo,pko),e(eo,ume),e(ume,_ko),e(eo,bko),e(eo,Sa),e(Sa,Fko),e(Sa,pme),e(pme,vko),e(Sa,Tko),e(Sa,_me),e(_me,Mko),e(Sa,Eko),e(Sa,bme),e(bme,Cko),e(Sa,wko),e(eo,Ako),e(eo,Y),e(Y,bF),e(bF,Fme),e(Fme,yko),e(bF,Lko),e(bF,lG),e(lG,xko),e(bF,$ko),e(Y,kko),e(Y,FF),e(FF,vme),e(vme,Sko),e(FF,Rko),e(FF,iG),e(iG,Bko),e(FF,Pko),e(Y,Iko),e(Y,vF),e(vF,Tme),e(Tme,qko),e(vF,Nko),e(vF,dG),e(dG,jko),e(vF,Dko),e(Y,Gko),e(Y,TF),e(TF,Mme),e(Mme,Oko),e(TF,Vko),e(TF,cG),e(cG,Xko),e(TF,zko),e(Y,Qko),e(Y,MF),e(MF,Eme),e(Eme,Wko),e(MF,Hko),e(MF,mG),e(mG,Uko),e(MF,Jko),e(Y,Yko),e(Y,EF),e(EF,Cme),e(Cme,Kko),e(EF,Zko),e(EF,fG),e(fG,eSo),e(EF,oSo),e(Y,rSo),e(Y,CF),e(CF,wme),e(wme,tSo),e(CF,aSo),e(CF,gG),e(gG,nSo),e(CF,sSo),e(Y,lSo),e(Y,wF),e(wF,Ame),e(Ame,iSo),e(wF,dSo),e(wF,hG),e(hG,cSo),e(wF,mSo),e(Y,fSo),e(Y,AF),e(AF,yme),e(yme,gSo),e(AF,hSo),e(AF,uG),e(uG,uSo),e(AF,pSo),e(Y,_So),e(Y,yF),e(yF,Lme),e(Lme,bSo),e(yF,FSo),e(yF,pG),e(pG,vSo),e(yF,TSo),e(Y,MSo),e(Y,LF),e(LF,xme),e(xme,ESo),e(LF,CSo),e(LF,_G),e(_G,wSo),e(LF,ASo),e(Y,ySo),e(Y,xF),e(xF,$me),e($me,LSo),e(xF,xSo),e(xF,bG),e(bG,$So),e(xF,kSo),e(Y,SSo),e(Y,$F),e($F,kme),e(kme,RSo),e($F,BSo),e($F,FG),e(FG,PSo),e($F,ISo),e(Y,qSo),e(Y,kF),e(kF,Sme),e(Sme,NSo),e(kF,jSo),e(kF,vG),e(vG,DSo),e(kF,GSo),e(Y,OSo),e(Y,SF),e(SF,Rme),e(Rme,VSo),e(SF,XSo),e(SF,TG),e(TG,zSo),e(SF,QSo),e(Y,WSo),e(Y,RF),e(RF,Bme),e(Bme,HSo),e(RF,USo),e(RF,MG),e(MG,JSo),e(RF,YSo),e(Y,KSo),e(Y,BF),e(BF,Pme),e(Pme,ZSo),e(BF,eRo),e(BF,EG),e(EG,oRo),e(BF,rRo),e(Y,tRo),e(Y,PF),e(PF,Ime),e(Ime,aRo),e(PF,nRo),e(PF,CG),e(CG,sRo),e(PF,lRo),e(Y,iRo),e(Y,IF),e(IF,qme),e(qme,dRo),e(IF,cRo),e(IF,wG),e(wG,mRo),e(IF,fRo),e(Y,gRo),e(Y,qF),e(qF,Nme),e(Nme,hRo),e(qF,uRo),e(qF,AG),e(AG,pRo),e(qF,_Ro),e(Y,bRo),e(Y,NF),e(NF,jme),e(jme,FRo),e(NF,vRo),e(NF,yG),e(yG,TRo),e(NF,MRo),e(Y,ERo),e(Y,jF),e(jF,Dme),e(Dme,CRo),e(jF,wRo),e(jF,LG),e(LG,ARo),e(jF,yRo),e(Y,LRo),e(Y,DF),e(DF,Gme),e(Gme,xRo),e(DF,$Ro),e(DF,xG),e(xG,kRo),e(DF,SRo),e(Y,RRo),e(Y,GF),e(GF,Ome),e(Ome,BRo),e(GF,PRo),e(GF,$G),e($G,IRo),e(GF,qRo),e(Y,NRo),e(Y,OF),e(OF,Vme),e(Vme,jRo),e(OF,DRo),e(OF,kG),e(kG,GRo),e(OF,ORo),e(Y,VRo),e(Y,VF),e(VF,Xme),e(Xme,XRo),e(VF,zRo),e(VF,SG),e(SG,QRo),e(VF,WRo),e(Y,HRo),e(Y,XF),e(XF,zme),e(zme,URo),e(XF,JRo),e(XF,RG),e(RG,YRo),e(XF,KRo),e(Y,ZRo),e(Y,zF),e(zF,Qme),e(Qme,eBo),e(zF,oBo),e(zF,BG),e(BG,rBo),e(zF,tBo),e(Y,aBo),e(Y,QF),e(QF,Wme),e(Wme,nBo),e(QF,sBo),e(QF,PG),e(PG,lBo),e(QF,iBo),e(eo,dBo),e(eo,WF),e(WF,cBo),e(WF,Hme),e(Hme,mBo),e(WF,fBo),e(WF,Ume),e(Ume,gBo),e(eo,hBo),M(HF,eo,null),b(m,pIe,_),b(m,Oi,_),e(Oi,UF),e(UF,Jme),M(aL,Jme,null),e(Oi,uBo),e(Oi,Yme),e(Yme,pBo),b(m,_Ie,_),b(m,Po,_),M(nL,Po,null),e(Po,_Bo),e(Po,Vi),e(Vi,bBo),e(Vi,IG),e(IG,FBo),e(Vi,vBo),e(Vi,qG),e(qG,TBo),e(Vi,MBo),e(Po,EBo),e(Po,sL),e(sL,CBo),e(sL,Kme),e(Kme,wBo),e(sL,ABo),e(Po,yBo),e(Po,it),M(lL,it,null),e(it,LBo),e(it,Zme),e(Zme,xBo),e(it,$Bo),e(it,Xi),e(Xi,kBo),e(Xi,efe),e(efe,SBo),e(Xi,RBo),e(Xi,NG),e(NG,BBo),e(Xi,PBo),e(it,IBo),M(JF,it,null),e(Po,qBo),e(Po,oo),M(iL,oo,null),e(oo,NBo),e(oo,ofe),e(ofe,jBo),e(oo,DBo),e(oo,Ra),e(Ra,GBo),e(Ra,rfe),e(rfe,OBo),e(Ra,VBo),e(Ra,tfe),e(tfe,XBo),e(Ra,zBo),e(Ra,afe),e(afe,QBo),e(Ra,WBo),e(oo,HBo),e(oo,Yr),e(Yr,YF),e(YF,nfe),e(nfe,UBo),e(YF,JBo),e(YF,jG),e(jG,YBo),e(YF,KBo),e(Yr,ZBo),e(Yr,KF),e(KF,sfe),e(sfe,ePo),e(KF,oPo),e(KF,DG),e(DG,rPo),e(KF,tPo),e(Yr,aPo),e(Yr,ZF),e(ZF,lfe),e(lfe,nPo),e(ZF,sPo),e(ZF,GG),e(GG,lPo),e(ZF,iPo),e(Yr,dPo),e(Yr,ev),e(ev,ife),e(ife,cPo),e(ev,mPo),e(ev,OG),e(OG,fPo),e(ev,gPo),e(Yr,hPo),e(Yr,ov),e(ov,dfe),e(dfe,uPo),e(ov,pPo),e(ov,VG),e(VG,_Po),e(ov,bPo),e(oo,FPo),e(oo,rv),e(rv,vPo),e(rv,cfe),e(cfe,TPo),e(rv,MPo),e(rv,mfe),e(mfe,EPo),e(oo,CPo),M(tv,oo,null),b(m,bIe,_),b(m,zi,_),e(zi,av),e(av,ffe),M(dL,ffe,null),e(zi,wPo),e(zi,gfe),e(gfe,APo),b(m,FIe,_),b(m,Io,_),M(cL,Io,null),e(Io,yPo),e(Io,Qi),e(Qi,LPo),e(Qi,XG),e(XG,xPo),e(Qi,$Po),e(Qi,zG),e(zG,kPo),e(Qi,SPo),e(Io,RPo),e(Io,mL),e(mL,BPo),e(mL,hfe),e(hfe,PPo),e(mL,IPo),e(Io,qPo),e(Io,dt),M(fL,dt,null),e(dt,NPo),e(dt,ufe),e(ufe,jPo),e(dt,DPo),e(dt,Wi),e(Wi,GPo),e(Wi,pfe),e(pfe,OPo),e(Wi,VPo),e(Wi,QG),e(QG,XPo),e(Wi,zPo),e(dt,QPo),M(nv,dt,null),e(Io,WPo),e(Io,ro),M(gL,ro,null),e(ro,HPo),e(ro,_fe),e(_fe,UPo),e(ro,JPo),e(ro,Ba),e(Ba,YPo),e(Ba,bfe),e(bfe,KPo),e(Ba,ZPo),e(Ba,Ffe),e(Ffe,eIo),e(Ba,oIo),e(Ba,vfe),e(vfe,rIo),e(Ba,tIo),e(ro,aIo),e(ro,U),e(U,sv),e(sv,Tfe),e(Tfe,nIo),e(sv,sIo),e(sv,WG),e(WG,lIo),e(sv,iIo),e(U,dIo),e(U,lv),e(lv,Mfe),e(Mfe,cIo),e(lv,mIo),e(lv,HG),e(HG,fIo),e(lv,gIo),e(U,hIo),e(U,iv),e(iv,Efe),e(Efe,uIo),e(iv,pIo),e(iv,UG),e(UG,_Io),e(iv,bIo),e(U,FIo),e(U,dv),e(dv,Cfe),e(Cfe,vIo),e(dv,TIo),e(dv,JG),e(JG,MIo),e(dv,EIo),e(U,CIo),e(U,cv),e(cv,wfe),e(wfe,wIo),e(cv,AIo),e(cv,YG),e(YG,yIo),e(cv,LIo),e(U,xIo),e(U,mv),e(mv,Afe),e(Afe,$Io),e(mv,kIo),e(mv,KG),e(KG,SIo),e(mv,RIo),e(U,BIo),e(U,fv),e(fv,yfe),e(yfe,PIo),e(fv,IIo),e(fv,ZG),e(ZG,qIo),e(fv,NIo),e(U,jIo),e(U,gv),e(gv,Lfe),e(Lfe,DIo),e(gv,GIo),e(gv,eO),e(eO,OIo),e(gv,VIo),e(U,XIo),e(U,hv),e(hv,xfe),e(xfe,zIo),e(hv,QIo),e(hv,oO),e(oO,WIo),e(hv,HIo),e(U,UIo),e(U,uv),e(uv,$fe),e($fe,JIo),e(uv,YIo),e(uv,rO),e(rO,KIo),e(uv,ZIo),e(U,eqo),e(U,pv),e(pv,kfe),e(kfe,oqo),e(pv,rqo),e(pv,tO),e(tO,tqo),e(pv,aqo),e(U,nqo),e(U,_v),e(_v,Sfe),e(Sfe,sqo),e(_v,lqo),e(_v,aO),e(aO,iqo),e(_v,dqo),e(U,cqo),e(U,bv),e(bv,Rfe),e(Rfe,mqo),e(bv,fqo),e(bv,nO),e(nO,gqo),e(bv,hqo),e(U,uqo),e(U,Fv),e(Fv,Bfe),e(Bfe,pqo),e(Fv,_qo),e(Fv,sO),e(sO,bqo),e(Fv,Fqo),e(U,vqo),e(U,vv),e(vv,Pfe),e(Pfe,Tqo),e(vv,Mqo),e(vv,lO),e(lO,Eqo),e(vv,Cqo),e(U,wqo),e(U,Tv),e(Tv,Ife),e(Ife,Aqo),e(Tv,yqo),e(Tv,iO),e(iO,Lqo),e(Tv,xqo),e(U,$qo),e(U,Mv),e(Mv,qfe),e(qfe,kqo),e(Mv,Sqo),e(Mv,dO),e(dO,Rqo),e(Mv,Bqo),e(U,Pqo),e(U,Ev),e(Ev,Nfe),e(Nfe,Iqo),e(Ev,qqo),e(Ev,cO),e(cO,Nqo),e(Ev,jqo),e(U,Dqo),e(U,Cv),e(Cv,jfe),e(jfe,Gqo),e(Cv,Oqo),e(Cv,mO),e(mO,Vqo),e(Cv,Xqo),e(U,zqo),e(U,wv),e(wv,Dfe),e(Dfe,Qqo),e(wv,Wqo),e(wv,fO),e(fO,Hqo),e(wv,Uqo),e(U,Jqo),e(U,Av),e(Av,Gfe),e(Gfe,Yqo),e(Av,Kqo),e(Av,gO),e(gO,Zqo),e(Av,eNo),e(U,oNo),e(U,yv),e(yv,Ofe),e(Ofe,rNo),e(yv,tNo),e(yv,hO),e(hO,aNo),e(yv,nNo),e(U,sNo),e(U,Lv),e(Lv,Vfe),e(Vfe,lNo),e(Lv,iNo),e(Lv,uO),e(uO,dNo),e(Lv,cNo),e(U,mNo),e(U,xv),e(xv,Xfe),e(Xfe,fNo),e(xv,gNo),e(xv,pO),e(pO,hNo),e(xv,uNo),e(U,pNo),e(U,$v),e($v,zfe),e(zfe,_No),e($v,bNo),e($v,_O),e(_O,FNo),e($v,vNo),e(U,TNo),e(U,kv),e(kv,Qfe),e(Qfe,MNo),e(kv,ENo),e(kv,bO),e(bO,CNo),e(kv,wNo),e(U,ANo),e(U,Sv),e(Sv,Wfe),e(Wfe,yNo),e(Sv,LNo),e(Sv,FO),e(FO,xNo),e(Sv,$No),e(U,kNo),e(U,Rv),e(Rv,Hfe),e(Hfe,SNo),e(Rv,RNo),e(Rv,vO),e(vO,BNo),e(Rv,PNo),e(U,INo),e(U,Bv),e(Bv,Ufe),e(Ufe,qNo),e(Bv,NNo),e(Bv,TO),e(TO,jNo),e(Bv,DNo),e(U,GNo),e(U,Pv),e(Pv,Jfe),e(Jfe,ONo),e(Pv,VNo),e(Pv,MO),e(MO,XNo),e(Pv,zNo),e(U,QNo),e(U,Iv),e(Iv,Yfe),e(Yfe,WNo),e(Iv,HNo),e(Iv,EO),e(EO,UNo),e(Iv,JNo),e(U,YNo),e(U,qv),e(qv,Kfe),e(Kfe,KNo),e(qv,ZNo),e(qv,CO),e(CO,ejo),e(qv,ojo),e(U,rjo),e(U,Nv),e(Nv,Zfe),e(Zfe,tjo),e(Nv,ajo),e(Nv,wO),e(wO,njo),e(Nv,sjo),e(ro,ljo),e(ro,jv),e(jv,ijo),e(jv,ege),e(ege,djo),e(jv,cjo),e(jv,oge),e(oge,mjo),e(ro,fjo),M(Dv,ro,null),b(m,vIe,_),b(m,Hi,_),e(Hi,Gv),e(Gv,rge),M(hL,rge,null),e(Hi,gjo),e(Hi,tge),e(tge,hjo),b(m,TIe,_),b(m,qo,_),M(uL,qo,null),e(qo,ujo),e(qo,Ui),e(Ui,pjo),e(Ui,AO),e(AO,_jo),e(Ui,bjo),e(Ui,yO),e(yO,Fjo),e(Ui,vjo),e(qo,Tjo),e(qo,pL),e(pL,Mjo),e(pL,age),e(age,Ejo),e(pL,Cjo),e(qo,wjo),e(qo,ct),M(_L,ct,null),e(ct,Ajo),e(ct,nge),e(nge,yjo),e(ct,Ljo),e(ct,Ji),e(Ji,xjo),e(Ji,sge),e(sge,$jo),e(Ji,kjo),e(Ji,LO),e(LO,Sjo),e(Ji,Rjo),e(ct,Bjo),M(Ov,ct,null),e(qo,Pjo),e(qo,to),M(bL,to,null),e(to,Ijo),e(to,lge),e(lge,qjo),e(to,Njo),e(to,Pa),e(Pa,jjo),e(Pa,ige),e(ige,Djo),e(Pa,Gjo),e(Pa,dge),e(dge,Ojo),e(Pa,Vjo),e(Pa,cge),e(cge,Xjo),e(Pa,zjo),e(to,Qjo),e(to,O),e(O,Vv),e(Vv,mge),e(mge,Wjo),e(Vv,Hjo),e(Vv,xO),e(xO,Ujo),e(Vv,Jjo),e(O,Yjo),e(O,Xv),e(Xv,fge),e(fge,Kjo),e(Xv,Zjo),e(Xv,$O),e($O,eDo),e(Xv,oDo),e(O,rDo),e(O,zv),e(zv,gge),e(gge,tDo),e(zv,aDo),e(zv,kO),e(kO,nDo),e(zv,sDo),e(O,lDo),e(O,Qv),e(Qv,hge),e(hge,iDo),e(Qv,dDo),e(Qv,SO),e(SO,cDo),e(Qv,mDo),e(O,fDo),e(O,Wv),e(Wv,uge),e(uge,gDo),e(Wv,hDo),e(Wv,RO),e(RO,uDo),e(Wv,pDo),e(O,_Do),e(O,Hv),e(Hv,pge),e(pge,bDo),e(Hv,FDo),e(Hv,BO),e(BO,vDo),e(Hv,TDo),e(O,MDo),e(O,Uv),e(Uv,_ge),e(_ge,EDo),e(Uv,CDo),e(Uv,PO),e(PO,wDo),e(Uv,ADo),e(O,yDo),e(O,Jv),e(Jv,bge),e(bge,LDo),e(Jv,xDo),e(Jv,IO),e(IO,$Do),e(Jv,kDo),e(O,SDo),e(O,Yv),e(Yv,Fge),e(Fge,RDo),e(Yv,BDo),e(Yv,qO),e(qO,PDo),e(Yv,IDo),e(O,qDo),e(O,Kv),e(Kv,vge),e(vge,NDo),e(Kv,jDo),e(Kv,NO),e(NO,DDo),e(Kv,GDo),e(O,ODo),e(O,Zv),e(Zv,Tge),e(Tge,VDo),e(Zv,XDo),e(Zv,jO),e(jO,zDo),e(Zv,QDo),e(O,WDo),e(O,e1),e(e1,Mge),e(Mge,HDo),e(e1,UDo),e(e1,DO),e(DO,JDo),e(e1,YDo),e(O,KDo),e(O,o1),e(o1,Ege),e(Ege,ZDo),e(o1,eGo),e(o1,GO),e(GO,oGo),e(o1,rGo),e(O,tGo),e(O,r1),e(r1,Cge),e(Cge,aGo),e(r1,nGo),e(r1,OO),e(OO,sGo),e(r1,lGo),e(O,iGo),e(O,t1),e(t1,wge),e(wge,dGo),e(t1,cGo),e(t1,VO),e(VO,mGo),e(t1,fGo),e(O,gGo),e(O,a1),e(a1,Age),e(Age,hGo),e(a1,uGo),e(a1,XO),e(XO,pGo),e(a1,_Go),e(O,bGo),e(O,n1),e(n1,yge),e(yge,FGo),e(n1,vGo),e(n1,zO),e(zO,TGo),e(n1,MGo),e(O,EGo),e(O,s1),e(s1,Lge),e(Lge,CGo),e(s1,wGo),e(s1,QO),e(QO,AGo),e(s1,yGo),e(O,LGo),e(O,l1),e(l1,xge),e(xge,xGo),e(l1,$Go),e(l1,WO),e(WO,kGo),e(l1,SGo),e(O,RGo),e(O,i1),e(i1,$ge),e($ge,BGo),e(i1,PGo),e(i1,HO),e(HO,IGo),e(i1,qGo),e(O,NGo),e(O,d1),e(d1,kge),e(kge,jGo),e(d1,DGo),e(d1,UO),e(UO,GGo),e(d1,OGo),e(O,VGo),e(O,c1),e(c1,Sge),e(Sge,XGo),e(c1,zGo),e(c1,JO),e(JO,QGo),e(c1,WGo),e(O,HGo),e(O,m1),e(m1,Rge),e(Rge,UGo),e(m1,JGo),e(m1,YO),e(YO,YGo),e(m1,KGo),e(O,ZGo),e(O,f1),e(f1,Bge),e(Bge,eOo),e(f1,oOo),e(f1,KO),e(KO,rOo),e(f1,tOo),e(O,aOo),e(O,g1),e(g1,Pge),e(Pge,nOo),e(g1,sOo),e(g1,ZO),e(ZO,lOo),e(g1,iOo),e(O,dOo),e(O,h1),e(h1,Ige),e(Ige,cOo),e(h1,mOo),e(h1,eV),e(eV,fOo),e(h1,gOo),e(O,hOo),e(O,u1),e(u1,qge),e(qge,uOo),e(u1,pOo),e(u1,oV),e(oV,_Oo),e(u1,bOo),e(O,FOo),e(O,p1),e(p1,Nge),e(Nge,vOo),e(p1,TOo),e(p1,rV),e(rV,MOo),e(p1,EOo),e(O,COo),e(O,_1),e(_1,jge),e(jge,wOo),e(_1,AOo),e(_1,tV),e(tV,yOo),e(_1,LOo),e(O,xOo),e(O,b1),e(b1,Dge),e(Dge,$Oo),e(b1,kOo),e(b1,aV),e(aV,SOo),e(b1,ROo),e(O,BOo),e(O,F1),e(F1,Gge),e(Gge,POo),e(F1,IOo),e(F1,nV),e(nV,qOo),e(F1,NOo),e(O,jOo),e(O,v1),e(v1,Oge),e(Oge,DOo),e(v1,GOo),e(v1,sV),e(sV,OOo),e(v1,VOo),e(O,XOo),e(O,T1),e(T1,Vge),e(Vge,zOo),e(T1,QOo),e(T1,lV),e(lV,WOo),e(T1,HOo),e(O,UOo),e(O,M1),e(M1,Xge),e(Xge,JOo),e(M1,YOo),e(M1,iV),e(iV,KOo),e(M1,ZOo),e(O,eVo),e(O,E1),e(E1,zge),e(zge,oVo),e(E1,rVo),e(E1,dV),e(dV,tVo),e(E1,aVo),e(O,nVo),e(O,C1),e(C1,Qge),e(Qge,sVo),e(C1,lVo),e(C1,cV),e(cV,iVo),e(C1,dVo),e(O,cVo),e(O,w1),e(w1,Wge),e(Wge,mVo),e(w1,fVo),e(w1,mV),e(mV,gVo),e(w1,hVo),e(O,uVo),e(O,A1),e(A1,Hge),e(Hge,pVo),e(A1,_Vo),e(A1,fV),e(fV,bVo),e(A1,FVo),e(O,vVo),e(O,y1),e(y1,Uge),e(Uge,TVo),e(y1,MVo),e(y1,gV),e(gV,EVo),e(y1,CVo),e(to,wVo),e(to,L1),e(L1,AVo),e(L1,Jge),e(Jge,yVo),e(L1,LVo),e(L1,Yge),e(Yge,xVo),e(to,$Vo),M(x1,to,null),b(m,MIe,_),b(m,Yi,_),e(Yi,$1),e($1,Kge),M(FL,Kge,null),e(Yi,kVo),e(Yi,Zge),e(Zge,SVo),b(m,EIe,_),b(m,No,_),M(vL,No,null),e(No,RVo),e(No,Ki),e(Ki,BVo),e(Ki,hV),e(hV,PVo),e(Ki,IVo),e(Ki,uV),e(uV,qVo),e(Ki,NVo),e(No,jVo),e(No,TL),e(TL,DVo),e(TL,ehe),e(ehe,GVo),e(TL,OVo),e(No,VVo),e(No,mt),M(ML,mt,null),e(mt,XVo),e(mt,ohe),e(ohe,zVo),e(mt,QVo),e(mt,Zi),e(Zi,WVo),e(Zi,rhe),e(rhe,HVo),e(Zi,UVo),e(Zi,pV),e(pV,JVo),e(Zi,YVo),e(mt,KVo),M(k1,mt,null),e(No,ZVo),e(No,ao),M(EL,ao,null),e(ao,eXo),e(ao,the),e(the,oXo),e(ao,rXo),e(ao,Ia),e(Ia,tXo),e(Ia,ahe),e(ahe,aXo),e(Ia,nXo),e(Ia,nhe),e(nhe,sXo),e(Ia,lXo),e(Ia,she),e(she,iXo),e(Ia,dXo),e(ao,cXo),e(ao,lhe),e(lhe,S1),e(S1,ihe),e(ihe,mXo),e(S1,fXo),e(S1,_V),e(_V,gXo),e(S1,hXo),e(ao,uXo),e(ao,R1),e(R1,pXo),e(R1,dhe),e(dhe,_Xo),e(R1,bXo),e(R1,che),e(che,FXo),e(ao,vXo),M(B1,ao,null),b(m,CIe,_),b(m,ed,_),e(ed,P1),e(P1,mhe),M(CL,mhe,null),e(ed,TXo),e(ed,fhe),e(fhe,MXo),b(m,wIe,_),b(m,jo,_),M(wL,jo,null),e(jo,EXo),e(jo,od),e(od,CXo),e(od,bV),e(bV,wXo),e(od,AXo),e(od,FV),e(FV,yXo),e(od,LXo),e(jo,xXo),e(jo,AL),e(AL,$Xo),e(AL,ghe),e(ghe,kXo),e(AL,SXo),e(jo,RXo),e(jo,ft),M(yL,ft,null),e(ft,BXo),e(ft,hhe),e(hhe,PXo),e(ft,IXo),e(ft,rd),e(rd,qXo),e(rd,uhe),e(uhe,NXo),e(rd,jXo),e(rd,vV),e(vV,DXo),e(rd,GXo),e(ft,OXo),M(I1,ft,null),e(jo,VXo),e(jo,no),M(LL,no,null),e(no,XXo),e(no,phe),e(phe,zXo),e(no,QXo),e(no,qa),e(qa,WXo),e(qa,_he),e(_he,HXo),e(qa,UXo),e(qa,bhe),e(bhe,JXo),e(qa,YXo),e(qa,Fhe),e(Fhe,KXo),e(qa,ZXo),e(no,ezo),e(no,ve),e(ve,q1),e(q1,vhe),e(vhe,ozo),e(q1,rzo),e(q1,TV),e(TV,tzo),e(q1,azo),e(ve,nzo),e(ve,N1),e(N1,The),e(The,szo),e(N1,lzo),e(N1,MV),e(MV,izo),e(N1,dzo),e(ve,czo),e(ve,j1),e(j1,Mhe),e(Mhe,mzo),e(j1,fzo),e(j1,EV),e(EV,gzo),e(j1,hzo),e(ve,uzo),e(ve,Rs),e(Rs,Ehe),e(Ehe,pzo),e(Rs,_zo),e(Rs,CV),e(CV,bzo),e(Rs,Fzo),e(Rs,wV),e(wV,vzo),e(Rs,Tzo),e(ve,Mzo),e(ve,D1),e(D1,Che),e(Che,Ezo),e(D1,Czo),e(D1,AV),e(AV,wzo),e(D1,Azo),e(ve,yzo),e(ve,gt),e(gt,whe),e(whe,Lzo),e(gt,xzo),e(gt,yV),e(yV,$zo),e(gt,kzo),e(gt,LV),e(LV,Szo),e(gt,Rzo),e(gt,xV),e(xV,Bzo),e(gt,Pzo),e(ve,Izo),e(ve,G1),e(G1,Ahe),e(Ahe,qzo),e(G1,Nzo),e(G1,$V),e($V,jzo),e(G1,Dzo),e(ve,Gzo),e(ve,O1),e(O1,yhe),e(yhe,Ozo),e(O1,Vzo),e(O1,kV),e(kV,Xzo),e(O1,zzo),e(ve,Qzo),e(ve,V1),e(V1,Lhe),e(Lhe,Wzo),e(V1,Hzo),e(V1,SV),e(SV,Uzo),e(V1,Jzo),e(ve,Yzo),e(ve,X1),e(X1,xhe),e(xhe,Kzo),e(X1,Zzo),e(X1,RV),e(RV,eQo),e(X1,oQo),e(ve,rQo),e(ve,z1),e(z1,$he),e($he,tQo),e(z1,aQo),e(z1,BV),e(BV,nQo),e(z1,sQo),e(ve,lQo),e(ve,Q1),e(Q1,khe),e(khe,iQo),e(Q1,dQo),e(Q1,PV),e(PV,cQo),e(Q1,mQo),e(ve,fQo),e(ve,W1),e(W1,She),e(She,gQo),e(W1,hQo),e(W1,IV),e(IV,uQo),e(W1,pQo),e(no,_Qo),e(no,H1),e(H1,bQo),e(H1,Rhe),e(Rhe,FQo),e(H1,vQo),e(H1,Bhe),e(Bhe,TQo),e(no,MQo),M(U1,no,null),b(m,AIe,_),b(m,td,_),e(td,J1),e(J1,Phe),M(xL,Phe,null),e(td,EQo),e(td,Ihe),e(Ihe,CQo),b(m,yIe,_),b(m,Do,_),M($L,Do,null),e(Do,wQo),e(Do,ad),e(ad,AQo),e(ad,qV),e(qV,yQo),e(ad,LQo),e(ad,NV),e(NV,xQo),e(ad,$Qo),e(Do,kQo),e(Do,kL),e(kL,SQo),e(kL,qhe),e(qhe,RQo),e(kL,BQo),e(Do,PQo),e(Do,ht),M(SL,ht,null),e(ht,IQo),e(ht,Nhe),e(Nhe,qQo),e(ht,NQo),e(ht,nd),e(nd,jQo),e(nd,jhe),e(jhe,DQo),e(nd,GQo),e(nd,jV),e(jV,OQo),e(nd,VQo),e(ht,XQo),M(Y1,ht,null),e(Do,zQo),e(Do,so),M(RL,so,null),e(so,QQo),e(so,Dhe),e(Dhe,WQo),e(so,HQo),e(so,Na),e(Na,UQo),e(Na,Ghe),e(Ghe,JQo),e(Na,YQo),e(Na,Ohe),e(Ohe,KQo),e(Na,ZQo),e(Na,Vhe),e(Vhe,eWo),e(Na,oWo),e(so,rWo),e(so,Xhe),e(Xhe,K1),e(K1,zhe),e(zhe,tWo),e(K1,aWo),e(K1,DV),e(DV,nWo),e(K1,sWo),e(so,lWo),e(so,Z1),e(Z1,iWo),e(Z1,Qhe),e(Qhe,dWo),e(Z1,cWo),e(Z1,Whe),e(Whe,mWo),e(so,fWo),M(eT,so,null),b(m,LIe,_),b(m,sd,_),e(sd,oT),e(oT,Hhe),M(BL,Hhe,null),e(sd,gWo),e(sd,Uhe),e(Uhe,hWo),b(m,xIe,_),b(m,Go,_),M(PL,Go,null),e(Go,uWo),e(Go,ld),e(ld,pWo),e(ld,GV),e(GV,_Wo),e(ld,bWo),e(ld,OV),e(OV,FWo),e(ld,vWo),e(Go,TWo),e(Go,IL),e(IL,MWo),e(IL,Jhe),e(Jhe,EWo),e(IL,CWo),e(Go,wWo),e(Go,ut),M(qL,ut,null),e(ut,AWo),e(ut,Yhe),e(Yhe,yWo),e(ut,LWo),e(ut,id),e(id,xWo),e(id,Khe),e(Khe,$Wo),e(id,kWo),e(id,VV),e(VV,SWo),e(id,RWo),e(ut,BWo),M(rT,ut,null),e(Go,PWo),e(Go,lo),M(NL,lo,null),e(lo,IWo),e(lo,Zhe),e(Zhe,qWo),e(lo,NWo),e(lo,ja),e(ja,jWo),e(ja,eue),e(eue,DWo),e(ja,GWo),e(ja,oue),e(oue,OWo),e(ja,VWo),e(ja,rue),e(rue,XWo),e(ja,zWo),e(lo,QWo),e(lo,Ne),e(Ne,tT),e(tT,tue),e(tue,WWo),e(tT,HWo),e(tT,XV),e(XV,UWo),e(tT,JWo),e(Ne,YWo),e(Ne,aT),e(aT,aue),e(aue,KWo),e(aT,ZWo),e(aT,zV),e(zV,eHo),e(aT,oHo),e(Ne,rHo),e(Ne,nT),e(nT,nue),e(nue,tHo),e(nT,aHo),e(nT,QV),e(QV,nHo),e(nT,sHo),e(Ne,lHo),e(Ne,sT),e(sT,sue),e(sue,iHo),e(sT,dHo),e(sT,WV),e(WV,cHo),e(sT,mHo),e(Ne,fHo),e(Ne,lT),e(lT,lue),e(lue,gHo),e(lT,hHo),e(lT,HV),e(HV,uHo),e(lT,pHo),e(Ne,_Ho),e(Ne,iT),e(iT,iue),e(iue,bHo),e(iT,FHo),e(iT,UV),e(UV,vHo),e(iT,THo),e(Ne,MHo),e(Ne,dT),e(dT,due),e(due,EHo),e(dT,CHo),e(dT,JV),e(JV,wHo),e(dT,AHo),e(Ne,yHo),e(Ne,cT),e(cT,cue),e(cue,LHo),e(cT,xHo),e(cT,YV),e(YV,$Ho),e(cT,kHo),e(lo,SHo),e(lo,mT),e(mT,RHo),e(mT,mue),e(mue,BHo),e(mT,PHo),e(mT,fue),e(fue,IHo),e(lo,qHo),M(fT,lo,null),b(m,$Ie,_),b(m,dd,_),e(dd,gT),e(gT,gue),M(jL,gue,null),e(dd,NHo),e(dd,hue),e(hue,jHo),b(m,kIe,_),b(m,Oo,_),M(DL,Oo,null),e(Oo,DHo),e(Oo,cd),e(cd,GHo),e(cd,KV),e(KV,OHo),e(cd,VHo),e(cd,ZV),e(ZV,XHo),e(cd,zHo),e(Oo,QHo),e(Oo,GL),e(GL,WHo),e(GL,uue),e(uue,HHo),e(GL,UHo),e(Oo,JHo),e(Oo,pt),M(OL,pt,null),e(pt,YHo),e(pt,pue),e(pue,KHo),e(pt,ZHo),e(pt,md),e(md,eUo),e(md,_ue),e(_ue,oUo),e(md,rUo),e(md,eX),e(eX,tUo),e(md,aUo),e(pt,nUo),M(hT,pt,null),e(Oo,sUo),e(Oo,io),M(VL,io,null),e(io,lUo),e(io,bue),e(bue,iUo),e(io,dUo),e(io,Da),e(Da,cUo),e(Da,Fue),e(Fue,mUo),e(Da,fUo),e(Da,vue),e(vue,gUo),e(Da,hUo),e(Da,Tue),e(Tue,uUo),e(Da,pUo),e(io,_Uo),e(io,Ga),e(Ga,uT),e(uT,Mue),e(Mue,bUo),e(uT,FUo),e(uT,oX),e(oX,vUo),e(uT,TUo),e(Ga,MUo),e(Ga,pT),e(pT,Eue),e(Eue,EUo),e(pT,CUo),e(pT,rX),e(rX,wUo),e(pT,AUo),e(Ga,yUo),e(Ga,_T),e(_T,Cue),e(Cue,LUo),e(_T,xUo),e(_T,tX),e(tX,$Uo),e(_T,kUo),e(Ga,SUo),e(Ga,bT),e(bT,wue),e(wue,RUo),e(bT,BUo),e(bT,aX),e(aX,PUo),e(bT,IUo),e(io,qUo),e(io,FT),e(FT,NUo),e(FT,Aue),e(Aue,jUo),e(FT,DUo),e(FT,yue),e(yue,GUo),e(io,OUo),M(vT,io,null),b(m,SIe,_),b(m,fd,_),e(fd,TT),e(TT,Lue),M(XL,Lue,null),e(fd,VUo),e(fd,xue),e(xue,XUo),b(m,RIe,_),b(m,Vo,_),M(zL,Vo,null),e(Vo,zUo),e(Vo,gd),e(gd,QUo),e(gd,nX),e(nX,WUo),e(gd,HUo),e(gd,sX),e(sX,UUo),e(gd,JUo),e(Vo,YUo),e(Vo,QL),e(QL,KUo),e(QL,$ue),e($ue,ZUo),e(QL,eJo),e(Vo,oJo),e(Vo,_t),M(WL,_t,null),e(_t,rJo),e(_t,kue),e(kue,tJo),e(_t,aJo),e(_t,hd),e(hd,nJo),e(hd,Sue),e(Sue,sJo),e(hd,lJo),e(hd,lX),e(lX,iJo),e(hd,dJo),e(_t,cJo),M(MT,_t,null),e(Vo,mJo),e(Vo,co),M(HL,co,null),e(co,fJo),e(co,Rue),e(Rue,gJo),e(co,hJo),e(co,Oa),e(Oa,uJo),e(Oa,Bue),e(Bue,pJo),e(Oa,_Jo),e(Oa,Pue),e(Pue,bJo),e(Oa,FJo),e(Oa,Iue),e(Iue,vJo),e(Oa,TJo),e(co,MJo),e(co,je),e(je,ET),e(ET,que),e(que,EJo),e(ET,CJo),e(ET,iX),e(iX,wJo),e(ET,AJo),e(je,yJo),e(je,CT),e(CT,Nue),e(Nue,LJo),e(CT,xJo),e(CT,dX),e(dX,$Jo),e(CT,kJo),e(je,SJo),e(je,wT),e(wT,jue),e(jue,RJo),e(wT,BJo),e(wT,cX),e(cX,PJo),e(wT,IJo),e(je,qJo),e(je,AT),e(AT,Due),e(Due,NJo),e(AT,jJo),e(AT,mX),e(mX,DJo),e(AT,GJo),e(je,OJo),e(je,yT),e(yT,Gue),e(Gue,VJo),e(yT,XJo),e(yT,fX),e(fX,zJo),e(yT,QJo),e(je,WJo),e(je,LT),e(LT,Oue),e(Oue,HJo),e(LT,UJo),e(LT,gX),e(gX,JJo),e(LT,YJo),e(je,KJo),e(je,xT),e(xT,Vue),e(Vue,ZJo),e(xT,eYo),e(xT,hX),e(hX,oYo),e(xT,rYo),e(je,tYo),e(je,$T),e($T,Xue),e(Xue,aYo),e($T,nYo),e($T,uX),e(uX,sYo),e($T,lYo),e(co,iYo),e(co,kT),e(kT,dYo),e(kT,zue),e(zue,cYo),e(kT,mYo),e(kT,Que),e(Que,fYo),e(co,gYo),M(ST,co,null),b(m,BIe,_),b(m,ud,_),e(ud,RT),e(RT,Wue),M(UL,Wue,null),e(ud,hYo),e(ud,Hue),e(Hue,uYo),b(m,PIe,_),b(m,Xo,_),M(JL,Xo,null),e(Xo,pYo),e(Xo,pd),e(pd,_Yo),e(pd,pX),e(pX,bYo),e(pd,FYo),e(pd,_X),e(_X,vYo),e(pd,TYo),e(Xo,MYo),e(Xo,YL),e(YL,EYo),e(YL,Uue),e(Uue,CYo),e(YL,wYo),e(Xo,AYo),e(Xo,bt),M(KL,bt,null),e(bt,yYo),e(bt,Jue),e(Jue,LYo),e(bt,xYo),e(bt,_d),e(_d,$Yo),e(_d,Yue),e(Yue,kYo),e(_d,SYo),e(_d,bX),e(bX,RYo),e(_d,BYo),e(bt,PYo),M(BT,bt,null),e(Xo,IYo),e(Xo,mo),M(ZL,mo,null),e(mo,qYo),e(mo,Kue),e(Kue,NYo),e(mo,jYo),e(mo,Va),e(Va,DYo),e(Va,Zue),e(Zue,GYo),e(Va,OYo),e(Va,epe),e(epe,VYo),e(Va,XYo),e(Va,ope),e(ope,zYo),e(Va,QYo),e(mo,WYo),e(mo,e8),e(e8,PT),e(PT,rpe),e(rpe,HYo),e(PT,UYo),e(PT,FX),e(FX,JYo),e(PT,YYo),e(e8,KYo),e(e8,IT),e(IT,tpe),e(tpe,ZYo),e(IT,eKo),e(IT,vX),e(vX,oKo),e(IT,rKo),e(mo,tKo),e(mo,qT),e(qT,aKo),e(qT,ape),e(ape,nKo),e(qT,sKo),e(qT,npe),e(npe,lKo),e(mo,iKo),M(NT,mo,null),b(m,IIe,_),b(m,bd,_),e(bd,jT),e(jT,spe),M(o8,spe,null),e(bd,dKo),e(bd,lpe),e(lpe,cKo),b(m,qIe,_),b(m,zo,_),M(r8,zo,null),e(zo,mKo),e(zo,Fd),e(Fd,fKo),e(Fd,TX),e(TX,gKo),e(Fd,hKo),e(Fd,MX),e(MX,uKo),e(Fd,pKo),e(zo,_Ko),e(zo,t8),e(t8,bKo),e(t8,ipe),e(ipe,FKo),e(t8,vKo),e(zo,TKo),e(zo,Ft),M(a8,Ft,null),e(Ft,MKo),e(Ft,dpe),e(dpe,EKo),e(Ft,CKo),e(Ft,vd),e(vd,wKo),e(vd,cpe),e(cpe,AKo),e(vd,yKo),e(vd,EX),e(EX,LKo),e(vd,xKo),e(Ft,$Ko),M(DT,Ft,null),e(zo,kKo),e(zo,fo),M(n8,fo,null),e(fo,SKo),e(fo,mpe),e(mpe,RKo),e(fo,BKo),e(fo,Xa),e(Xa,PKo),e(Xa,fpe),e(fpe,IKo),e(Xa,qKo),e(Xa,gpe),e(gpe,NKo),e(Xa,jKo),e(Xa,hpe),e(hpe,DKo),e(Xa,GKo),e(fo,OKo),e(fo,za),e(za,GT),e(GT,upe),e(upe,VKo),e(GT,XKo),e(GT,CX),e(CX,zKo),e(GT,QKo),e(za,WKo),e(za,OT),e(OT,ppe),e(ppe,HKo),e(OT,UKo),e(OT,wX),e(wX,JKo),e(OT,YKo),e(za,KKo),e(za,VT),e(VT,_pe),e(_pe,ZKo),e(VT,eZo),e(VT,AX),e(AX,oZo),e(VT,rZo),e(za,tZo),e(za,XT),e(XT,bpe),e(bpe,aZo),e(XT,nZo),e(XT,yX),e(yX,sZo),e(XT,lZo),e(fo,iZo),e(fo,zT),e(zT,dZo),e(zT,Fpe),e(Fpe,cZo),e(zT,mZo),e(zT,vpe),e(vpe,fZo),e(fo,gZo),M(QT,fo,null),b(m,NIe,_),b(m,Td,_),e(Td,WT),e(WT,Tpe),M(s8,Tpe,null),e(Td,hZo),e(Td,Mpe),e(Mpe,uZo),b(m,jIe,_),b(m,Qo,_),M(l8,Qo,null),e(Qo,pZo),e(Qo,Md),e(Md,_Zo),e(Md,LX),e(LX,bZo),e(Md,FZo),e(Md,xX),e(xX,vZo),e(Md,TZo),e(Qo,MZo),e(Qo,i8),e(i8,EZo),e(i8,Epe),e(Epe,CZo),e(i8,wZo),e(Qo,AZo),e(Qo,vt),M(d8,vt,null),e(vt,yZo),e(vt,Cpe),e(Cpe,LZo),e(vt,xZo),e(vt,Ed),e(Ed,$Zo),e(Ed,wpe),e(wpe,kZo),e(Ed,SZo),e(Ed,$X),e($X,RZo),e(Ed,BZo),e(vt,PZo),M(HT,vt,null),e(Qo,IZo),e(Qo,go),M(c8,go,null),e(go,qZo),e(go,Ape),e(Ape,NZo),e(go,jZo),e(go,Qa),e(Qa,DZo),e(Qa,ype),e(ype,GZo),e(Qa,OZo),e(Qa,Lpe),e(Lpe,VZo),e(Qa,XZo),e(Qa,xpe),e(xpe,zZo),e(Qa,QZo),e(go,WZo),e(go,Cd),e(Cd,UT),e(UT,$pe),e($pe,HZo),e(UT,UZo),e(UT,kX),e(kX,JZo),e(UT,YZo),e(Cd,KZo),e(Cd,JT),e(JT,kpe),e(kpe,ZZo),e(JT,eer),e(JT,SX),e(SX,oer),e(JT,rer),e(Cd,ter),e(Cd,YT),e(YT,Spe),e(Spe,aer),e(YT,ner),e(YT,RX),e(RX,ser),e(YT,ler),e(go,ier),e(go,KT),e(KT,der),e(KT,Rpe),e(Rpe,cer),e(KT,mer),e(KT,Bpe),e(Bpe,fer),e(go,ger),M(ZT,go,null),b(m,DIe,_),b(m,wd,_),e(wd,eM),e(eM,Ppe),M(m8,Ppe,null),e(wd,her),e(wd,Ipe),e(Ipe,uer),b(m,GIe,_),b(m,Wo,_),M(f8,Wo,null),e(Wo,per),e(Wo,Ad),e(Ad,_er),e(Ad,BX),e(BX,ber),e(Ad,Fer),e(Ad,PX),e(PX,ver),e(Ad,Ter),e(Wo,Mer),e(Wo,g8),e(g8,Eer),e(g8,qpe),e(qpe,Cer),e(g8,wer),e(Wo,Aer),e(Wo,Tt),M(h8,Tt,null),e(Tt,yer),e(Tt,Npe),e(Npe,Ler),e(Tt,xer),e(Tt,yd),e(yd,$er),e(yd,jpe),e(jpe,ker),e(yd,Ser),e(yd,IX),e(IX,Rer),e(yd,Ber),e(Tt,Per),M(oM,Tt,null),e(Wo,Ier),e(Wo,ho),M(u8,ho,null),e(ho,qer),e(ho,Dpe),e(Dpe,Ner),e(ho,jer),e(ho,Wa),e(Wa,Der),e(Wa,Gpe),e(Gpe,Ger),e(Wa,Oer),e(Wa,Ope),e(Ope,Ver),e(Wa,Xer),e(Wa,Vpe),e(Vpe,zer),e(Wa,Qer),e(ho,Wer),e(ho,p8),e(p8,rM),e(rM,Xpe),e(Xpe,Her),e(rM,Uer),e(rM,qX),e(qX,Jer),e(rM,Yer),e(p8,Ker),e(p8,tM),e(tM,zpe),e(zpe,Zer),e(tM,eor),e(tM,NX),e(NX,oor),e(tM,ror),e(ho,tor),e(ho,aM),e(aM,aor),e(aM,Qpe),e(Qpe,nor),e(aM,sor),e(aM,Wpe),e(Wpe,lor),e(ho,ior),M(nM,ho,null),b(m,OIe,_),b(m,Ld,_),e(Ld,sM),e(sM,Hpe),M(_8,Hpe,null),e(Ld,dor),e(Ld,Upe),e(Upe,cor),b(m,VIe,_),b(m,Ho,_),M(b8,Ho,null),e(Ho,mor),e(Ho,xd),e(xd,gor),e(xd,jX),e(jX,hor),e(xd,uor),e(xd,DX),e(DX,por),e(xd,_or),e(Ho,bor),e(Ho,F8),e(F8,For),e(F8,Jpe),e(Jpe,vor),e(F8,Tor),e(Ho,Mor),e(Ho,Mt),M(v8,Mt,null),e(Mt,Eor),e(Mt,Ype),e(Ype,Cor),e(Mt,wor),e(Mt,$d),e($d,Aor),e($d,Kpe),e(Kpe,yor),e($d,Lor),e($d,GX),e(GX,xor),e($d,$or),e(Mt,kor),M(lM,Mt,null),e(Ho,Sor),e(Ho,uo),M(T8,uo,null),e(uo,Ror),e(uo,Zpe),e(Zpe,Bor),e(uo,Por),e(uo,Ha),e(Ha,Ior),e(Ha,e_e),e(e_e,qor),e(Ha,Nor),e(Ha,o_e),e(o_e,jor),e(Ha,Dor),e(Ha,r_e),e(r_e,Gor),e(Ha,Oor),e(uo,Vor),e(uo,t_e),e(t_e,iM),e(iM,a_e),e(a_e,Xor),e(iM,zor),e(iM,OX),e(OX,Qor),e(iM,Wor),e(uo,Hor),e(uo,dM),e(dM,Uor),e(dM,n_e),e(n_e,Jor),e(dM,Yor),e(dM,s_e),e(s_e,Kor),e(uo,Zor),M(cM,uo,null),b(m,XIe,_),b(m,kd,_),e(kd,mM),e(mM,l_e),M(M8,l_e,null),e(kd,err),e(kd,i_e),e(i_e,orr),b(m,zIe,_),b(m,Uo,_),M(E8,Uo,null),e(Uo,rrr),e(Uo,Sd),e(Sd,trr),e(Sd,VX),e(VX,arr),e(Sd,nrr),e(Sd,XX),e(XX,srr),e(Sd,lrr),e(Uo,irr),e(Uo,C8),e(C8,drr),e(C8,d_e),e(d_e,crr),e(C8,mrr),e(Uo,frr),e(Uo,Et),M(w8,Et,null),e(Et,grr),e(Et,c_e),e(c_e,hrr),e(Et,urr),e(Et,Rd),e(Rd,prr),e(Rd,m_e),e(m_e,_rr),e(Rd,brr),e(Rd,zX),e(zX,Frr),e(Rd,vrr),e(Et,Trr),M(fM,Et,null),e(Uo,Mrr),e(Uo,po),M(A8,po,null),e(po,Err),e(po,f_e),e(f_e,Crr),e(po,wrr),e(po,Ua),e(Ua,Arr),e(Ua,g_e),e(g_e,yrr),e(Ua,Lrr),e(Ua,h_e),e(h_e,xrr),e(Ua,$rr),e(Ua,u_e),e(u_e,krr),e(Ua,Srr),e(po,Rrr),e(po,Ja),e(Ja,gM),e(gM,p_e),e(p_e,Brr),e(gM,Prr),e(gM,QX),e(QX,Irr),e(gM,qrr),e(Ja,Nrr),e(Ja,hM),e(hM,__e),e(__e,jrr),e(hM,Drr),e(hM,WX),e(WX,Grr),e(hM,Orr),e(Ja,Vrr),e(Ja,uM),e(uM,b_e),e(b_e,Xrr),e(uM,zrr),e(uM,HX),e(HX,Qrr),e(uM,Wrr),e(Ja,Hrr),e(Ja,pM),e(pM,F_e),e(F_e,Urr),e(pM,Jrr),e(pM,UX),e(UX,Yrr),e(pM,Krr),e(po,Zrr),e(po,_M),e(_M,etr),e(_M,v_e),e(v_e,otr),e(_M,rtr),e(_M,T_e),e(T_e,ttr),e(po,atr),M(bM,po,null),b(m,QIe,_),b(m,Bd,_),e(Bd,FM),e(FM,M_e),M(y8,M_e,null),e(Bd,ntr),e(Bd,E_e),e(E_e,str),b(m,WIe,_),b(m,Jo,_),M(L8,Jo,null),e(Jo,ltr),e(Jo,Pd),e(Pd,itr),e(Pd,JX),e(JX,dtr),e(Pd,ctr),e(Pd,YX),e(YX,mtr),e(Pd,ftr),e(Jo,gtr),e(Jo,x8),e(x8,htr),e(x8,C_e),e(C_e,utr),e(x8,ptr),e(Jo,_tr),e(Jo,Ct),M($8,Ct,null),e(Ct,btr),e(Ct,w_e),e(w_e,Ftr),e(Ct,vtr),e(Ct,Id),e(Id,Ttr),e(Id,A_e),e(A_e,Mtr),e(Id,Etr),e(Id,KX),e(KX,Ctr),e(Id,wtr),e(Ct,Atr),M(vM,Ct,null),e(Jo,ytr),e(Jo,_o),M(k8,_o,null),e(_o,Ltr),e(_o,y_e),e(y_e,xtr),e(_o,$tr),e(_o,Ya),e(Ya,ktr),e(Ya,L_e),e(L_e,Str),e(Ya,Rtr),e(Ya,x_e),e(x_e,Btr),e(Ya,Ptr),e(Ya,$_e),e($_e,Itr),e(Ya,qtr),e(_o,Ntr),e(_o,k_e),e(k_e,TM),e(TM,S_e),e(S_e,jtr),e(TM,Dtr),e(TM,ZX),e(ZX,Gtr),e(TM,Otr),e(_o,Vtr),e(_o,MM),e(MM,Xtr),e(MM,R_e),e(R_e,ztr),e(MM,Qtr),e(MM,B_e),e(B_e,Wtr),e(_o,Htr),M(EM,_o,null),b(m,HIe,_),b(m,qd,_),e(qd,CM),e(CM,P_e),M(S8,P_e,null),e(qd,Utr),e(qd,I_e),e(I_e,Jtr),b(m,UIe,_),b(m,Yo,_),M(R8,Yo,null),e(Yo,Ytr),e(Yo,Nd),e(Nd,Ktr),e(Nd,ez),e(ez,Ztr),e(Nd,ear),e(Nd,oz),e(oz,oar),e(Nd,rar),e(Yo,tar),e(Yo,B8),e(B8,aar),e(B8,q_e),e(q_e,nar),e(B8,sar),e(Yo,lar),e(Yo,wt),M(P8,wt,null),e(wt,iar),e(wt,N_e),e(N_e,dar),e(wt,car),e(wt,jd),e(jd,mar),e(jd,j_e),e(j_e,far),e(jd,gar),e(jd,rz),e(rz,har),e(jd,uar),e(wt,par),M(wM,wt,null),e(Yo,_ar),e(Yo,wr),M(I8,wr,null),e(wr,bar),e(wr,D_e),e(D_e,Far),e(wr,Tar),e(wr,Ka),e(Ka,Mar),e(Ka,G_e),e(G_e,Ear),e(Ka,Car),e(Ka,O_e),e(O_e,war),e(Ka,Aar),e(Ka,V_e),e(V_e,yar),e(Ka,Lar),e(wr,xar),e(wr,j),e(j,AM),e(AM,X_e),e(X_e,$ar),e(AM,kar),e(AM,tz),e(tz,Sar),e(AM,Rar),e(j,Bar),e(j,yM),e(yM,z_e),e(z_e,Par),e(yM,Iar),e(yM,az),e(az,qar),e(yM,Nar),e(j,jar),e(j,LM),e(LM,Q_e),e(Q_e,Dar),e(LM,Gar),e(LM,nz),e(nz,Oar),e(LM,Var),e(j,Xar),e(j,xM),e(xM,W_e),e(W_e,zar),e(xM,Qar),e(xM,sz),e(sz,War),e(xM,Har),e(j,Uar),e(j,$M),e($M,H_e),e(H_e,Jar),e($M,Yar),e($M,lz),e(lz,Kar),e($M,Zar),e(j,enr),e(j,kM),e(kM,U_e),e(U_e,onr),e(kM,rnr),e(kM,iz),e(iz,tnr),e(kM,anr),e(j,nnr),e(j,SM),e(SM,J_e),e(J_e,snr),e(SM,lnr),e(SM,dz),e(dz,inr),e(SM,dnr),e(j,cnr),e(j,RM),e(RM,Y_e),e(Y_e,mnr),e(RM,fnr),e(RM,cz),e(cz,gnr),e(RM,hnr),e(j,unr),e(j,BM),e(BM,K_e),e(K_e,pnr),e(BM,_nr),e(BM,mz),e(mz,bnr),e(BM,Fnr),e(j,vnr),e(j,PM),e(PM,Z_e),e(Z_e,Tnr),e(PM,Mnr),e(PM,fz),e(fz,Enr),e(PM,Cnr),e(j,wnr),e(j,IM),e(IM,ebe),e(ebe,Anr),e(IM,ynr),e(IM,gz),e(gz,Lnr),e(IM,xnr),e(j,$nr),e(j,qM),e(qM,obe),e(obe,knr),e(qM,Snr),e(qM,hz),e(hz,Rnr),e(qM,Bnr),e(j,Pnr),e(j,NM),e(NM,rbe),e(rbe,Inr),e(NM,qnr),e(NM,uz),e(uz,Nnr),e(NM,jnr),e(j,Dnr),e(j,jM),e(jM,tbe),e(tbe,Gnr),e(jM,Onr),e(jM,pz),e(pz,Vnr),e(jM,Xnr),e(j,znr),e(j,DM),e(DM,abe),e(abe,Qnr),e(DM,Wnr),e(DM,_z),e(_z,Hnr),e(DM,Unr),e(j,Jnr),e(j,GM),e(GM,nbe),e(nbe,Ynr),e(GM,Knr),e(GM,bz),e(bz,Znr),e(GM,esr),e(j,osr),e(j,OM),e(OM,sbe),e(sbe,rsr),e(OM,tsr),e(OM,Fz),e(Fz,asr),e(OM,nsr),e(j,ssr),e(j,Bs),e(Bs,lbe),e(lbe,lsr),e(Bs,isr),e(Bs,vz),e(vz,dsr),e(Bs,csr),e(Bs,Tz),e(Tz,msr),e(Bs,fsr),e(j,gsr),e(j,VM),e(VM,ibe),e(ibe,hsr),e(VM,usr),e(VM,Mz),e(Mz,psr),e(VM,_sr),e(j,bsr),e(j,XM),e(XM,dbe),e(dbe,Fsr),e(XM,vsr),e(XM,Ez),e(Ez,Tsr),e(XM,Msr),e(j,Esr),e(j,zM),e(zM,cbe),e(cbe,Csr),e(zM,wsr),e(zM,Cz),e(Cz,Asr),e(zM,ysr),e(j,Lsr),e(j,QM),e(QM,mbe),e(mbe,xsr),e(QM,$sr),e(QM,wz),e(wz,ksr),e(QM,Ssr),e(j,Rsr),e(j,WM),e(WM,fbe),e(fbe,Bsr),e(WM,Psr),e(WM,Az),e(Az,Isr),e(WM,qsr),e(j,Nsr),e(j,HM),e(HM,gbe),e(gbe,jsr),e(HM,Dsr),e(HM,yz),e(yz,Gsr),e(HM,Osr),e(j,Vsr),e(j,UM),e(UM,hbe),e(hbe,Xsr),e(UM,zsr),e(UM,Lz),e(Lz,Qsr),e(UM,Wsr),e(j,Hsr),e(j,JM),e(JM,ube),e(ube,Usr),e(JM,Jsr),e(JM,xz),e(xz,Ysr),e(JM,Ksr),e(j,Zsr),e(j,YM),e(YM,pbe),e(pbe,elr),e(YM,olr),e(YM,$z),e($z,rlr),e(YM,tlr),e(j,alr),e(j,KM),e(KM,_be),e(_be,nlr),e(KM,slr),e(KM,kz),e(kz,llr),e(KM,ilr),e(j,dlr),e(j,ZM),e(ZM,bbe),e(bbe,clr),e(ZM,mlr),e(ZM,Sz),e(Sz,flr),e(ZM,glr),e(j,hlr),e(j,e4),e(e4,Fbe),e(Fbe,ulr),e(e4,plr),e(e4,Rz),e(Rz,_lr),e(e4,blr),e(j,Flr),e(j,o4),e(o4,vbe),e(vbe,vlr),e(o4,Tlr),e(o4,Bz),e(Bz,Mlr),e(o4,Elr),e(j,Clr),e(j,r4),e(r4,Tbe),e(Tbe,wlr),e(r4,Alr),e(r4,Pz),e(Pz,ylr),e(r4,Llr),e(j,xlr),e(j,t4),e(t4,Mbe),e(Mbe,$lr),e(t4,klr),e(t4,Iz),e(Iz,Slr),e(t4,Rlr),e(j,Blr),e(j,a4),e(a4,Ebe),e(Ebe,Plr),e(a4,Ilr),e(a4,qz),e(qz,qlr),e(a4,Nlr),e(j,jlr),e(j,n4),e(n4,Cbe),e(Cbe,Dlr),e(n4,Glr),e(n4,Nz),e(Nz,Olr),e(n4,Vlr),e(j,Xlr),e(j,s4),e(s4,wbe),e(wbe,zlr),e(s4,Qlr),e(s4,jz),e(jz,Wlr),e(s4,Hlr),e(j,Ulr),e(j,l4),e(l4,Abe),e(Abe,Jlr),e(l4,Ylr),e(l4,Dz),e(Dz,Klr),e(l4,Zlr),e(j,eir),e(j,i4),e(i4,ybe),e(ybe,oir),e(i4,rir),e(i4,Gz),e(Gz,tir),e(i4,air),e(j,nir),e(j,d4),e(d4,Lbe),e(Lbe,sir),e(d4,lir),e(d4,Oz),e(Oz,iir),e(d4,dir),e(j,cir),e(j,c4),e(c4,xbe),e(xbe,mir),e(c4,fir),e(c4,Vz),e(Vz,gir),e(c4,hir),e(j,uir),e(j,m4),e(m4,$be),e($be,pir),e(m4,_ir),e(m4,Xz),e(Xz,bir),e(m4,Fir),e(j,vir),e(j,f4),e(f4,kbe),e(kbe,Tir),e(f4,Mir),e(f4,zz),e(zz,Eir),e(f4,Cir),e(j,wir),e(j,g4),e(g4,Sbe),e(Sbe,Air),e(g4,yir),e(g4,Qz),e(Qz,Lir),e(g4,xir),e(j,$ir),e(j,h4),e(h4,Rbe),e(Rbe,kir),e(h4,Sir),e(h4,Wz),e(Wz,Rir),e(h4,Bir),e(j,Pir),e(j,u4),e(u4,Bbe),e(Bbe,Iir),e(u4,qir),e(u4,Hz),e(Hz,Nir),e(u4,jir),e(wr,Dir),M(p4,wr,null),b(m,JIe,_),b(m,Dd,_),e(Dd,_4),e(_4,Pbe),M(q8,Pbe,null),e(Dd,Gir),e(Dd,Ibe),e(Ibe,Oir),b(m,YIe,_),b(m,Ko,_),M(N8,Ko,null),e(Ko,Vir),e(Ko,Gd),e(Gd,Xir),e(Gd,Uz),e(Uz,zir),e(Gd,Qir),e(Gd,Jz),e(Jz,Wir),e(Gd,Hir),e(Ko,Uir),e(Ko,j8),e(j8,Jir),e(j8,qbe),e(qbe,Yir),e(j8,Kir),e(Ko,Zir),e(Ko,At),M(D8,At,null),e(At,edr),e(At,Nbe),e(Nbe,odr),e(At,rdr),e(At,Od),e(Od,tdr),e(Od,jbe),e(jbe,adr),e(Od,ndr),e(Od,Yz),e(Yz,sdr),e(Od,ldr),e(At,idr),M(b4,At,null),e(Ko,ddr),e(Ko,Ar),M(G8,Ar,null),e(Ar,cdr),e(Ar,Dbe),e(Dbe,mdr),e(Ar,fdr),e(Ar,Za),e(Za,gdr),e(Za,Gbe),e(Gbe,hdr),e(Za,udr),e(Za,Obe),e(Obe,pdr),e(Za,_dr),e(Za,Vbe),e(Vbe,bdr),e(Za,Fdr),e(Ar,vdr),e(Ar,se),e(se,F4),e(F4,Xbe),e(Xbe,Tdr),e(F4,Mdr),e(F4,Kz),e(Kz,Edr),e(F4,Cdr),e(se,wdr),e(se,v4),e(v4,zbe),e(zbe,Adr),e(v4,ydr),e(v4,Zz),e(Zz,Ldr),e(v4,xdr),e(se,$dr),e(se,T4),e(T4,Qbe),e(Qbe,kdr),e(T4,Sdr),e(T4,eQ),e(eQ,Rdr),e(T4,Bdr),e(se,Pdr),e(se,M4),e(M4,Wbe),e(Wbe,Idr),e(M4,qdr),e(M4,oQ),e(oQ,Ndr),e(M4,jdr),e(se,Ddr),e(se,E4),e(E4,Hbe),e(Hbe,Gdr),e(E4,Odr),e(E4,rQ),e(rQ,Vdr),e(E4,Xdr),e(se,zdr),e(se,C4),e(C4,Ube),e(Ube,Qdr),e(C4,Wdr),e(C4,tQ),e(tQ,Hdr),e(C4,Udr),e(se,Jdr),e(se,w4),e(w4,Jbe),e(Jbe,Ydr),e(w4,Kdr),e(w4,aQ),e(aQ,Zdr),e(w4,ecr),e(se,ocr),e(se,A4),e(A4,Ybe),e(Ybe,rcr),e(A4,tcr),e(A4,nQ),e(nQ,acr),e(A4,ncr),e(se,scr),e(se,y4),e(y4,Kbe),e(Kbe,lcr),e(y4,icr),e(y4,sQ),e(sQ,dcr),e(y4,ccr),e(se,mcr),e(se,L4),e(L4,Zbe),e(Zbe,fcr),e(L4,gcr),e(L4,lQ),e(lQ,hcr),e(L4,ucr),e(se,pcr),e(se,x4),e(x4,e2e),e(e2e,_cr),e(x4,bcr),e(x4,iQ),e(iQ,Fcr),e(x4,vcr),e(se,Tcr),e(se,$4),e($4,o2e),e(o2e,Mcr),e($4,Ecr),e($4,dQ),e(dQ,Ccr),e($4,wcr),e(se,Acr),e(se,k4),e(k4,r2e),e(r2e,ycr),e(k4,Lcr),e(k4,cQ),e(cQ,xcr),e(k4,$cr),e(se,kcr),e(se,S4),e(S4,t2e),e(t2e,Scr),e(S4,Rcr),e(S4,mQ),e(mQ,Bcr),e(S4,Pcr),e(se,Icr),e(se,R4),e(R4,a2e),e(a2e,qcr),e(R4,Ncr),e(R4,fQ),e(fQ,jcr),e(R4,Dcr),e(se,Gcr),e(se,B4),e(B4,n2e),e(n2e,Ocr),e(B4,Vcr),e(B4,gQ),e(gQ,Xcr),e(B4,zcr),e(se,Qcr),e(se,P4),e(P4,s2e),e(s2e,Wcr),e(P4,Hcr),e(P4,hQ),e(hQ,Ucr),e(P4,Jcr),e(se,Ycr),e(se,I4),e(I4,l2e),e(l2e,Kcr),e(I4,Zcr),e(I4,uQ),e(uQ,emr),e(I4,omr),e(se,rmr),e(se,q4),e(q4,i2e),e(i2e,tmr),e(q4,amr),e(q4,pQ),e(pQ,nmr),e(q4,smr),e(se,lmr),e(se,N4),e(N4,d2e),e(d2e,imr),e(N4,dmr),e(N4,_Q),e(_Q,cmr),e(N4,mmr),e(se,fmr),e(se,j4),e(j4,c2e),e(c2e,gmr),e(j4,hmr),e(j4,bQ),e(bQ,umr),e(j4,pmr),e(se,_mr),e(se,D4),e(D4,m2e),e(m2e,bmr),e(D4,Fmr),e(D4,FQ),e(FQ,vmr),e(D4,Tmr),e(se,Mmr),e(se,G4),e(G4,f2e),e(f2e,Emr),e(G4,Cmr),e(G4,vQ),e(vQ,wmr),e(G4,Amr),e(Ar,ymr),M(O4,Ar,null),b(m,KIe,_),b(m,Vd,_),e(Vd,V4),e(V4,g2e),M(O8,g2e,null),e(Vd,Lmr),e(Vd,h2e),e(h2e,xmr),b(m,ZIe,_),b(m,Zo,_),M(V8,Zo,null),e(Zo,$mr),e(Zo,Xd),e(Xd,kmr),e(Xd,TQ),e(TQ,Smr),e(Xd,Rmr),e(Xd,MQ),e(MQ,Bmr),e(Xd,Pmr),e(Zo,Imr),e(Zo,X8),e(X8,qmr),e(X8,u2e),e(u2e,Nmr),e(X8,jmr),e(Zo,Dmr),e(Zo,yt),M(z8,yt,null),e(yt,Gmr),e(yt,p2e),e(p2e,Omr),e(yt,Vmr),e(yt,zd),e(zd,Xmr),e(zd,_2e),e(_2e,zmr),e(zd,Qmr),e(zd,EQ),e(EQ,Wmr),e(zd,Hmr),e(yt,Umr),M(X4,yt,null),e(Zo,Jmr),e(Zo,yr),M(Q8,yr,null),e(yr,Ymr),e(yr,b2e),e(b2e,Kmr),e(yr,Zmr),e(yr,en),e(en,efr),e(en,F2e),e(F2e,ofr),e(en,rfr),e(en,v2e),e(v2e,tfr),e(en,afr),e(en,T2e),e(T2e,nfr),e(en,sfr),e(yr,lfr),e(yr,Te),e(Te,z4),e(z4,M2e),e(M2e,ifr),e(z4,dfr),e(z4,CQ),e(CQ,cfr),e(z4,mfr),e(Te,ffr),e(Te,Q4),e(Q4,E2e),e(E2e,gfr),e(Q4,hfr),e(Q4,wQ),e(wQ,ufr),e(Q4,pfr),e(Te,_fr),e(Te,W4),e(W4,C2e),e(C2e,bfr),e(W4,Ffr),e(W4,AQ),e(AQ,vfr),e(W4,Tfr),e(Te,Mfr),e(Te,H4),e(H4,w2e),e(w2e,Efr),e(H4,Cfr),e(H4,yQ),e(yQ,wfr),e(H4,Afr),e(Te,yfr),e(Te,U4),e(U4,A2e),e(A2e,Lfr),e(U4,xfr),e(U4,LQ),e(LQ,$fr),e(U4,kfr),e(Te,Sfr),e(Te,J4),e(J4,y2e),e(y2e,Rfr),e(J4,Bfr),e(J4,xQ),e(xQ,Pfr),e(J4,Ifr),e(Te,qfr),e(Te,Y4),e(Y4,L2e),e(L2e,Nfr),e(Y4,jfr),e(Y4,$Q),e($Q,Dfr),e(Y4,Gfr),e(Te,Ofr),e(Te,K4),e(K4,x2e),e(x2e,Vfr),e(K4,Xfr),e(K4,kQ),e(kQ,zfr),e(K4,Qfr),e(Te,Wfr),e(Te,Z4),e(Z4,$2e),e($2e,Hfr),e(Z4,Ufr),e(Z4,SQ),e(SQ,Jfr),e(Z4,Yfr),e(Te,Kfr),e(Te,eE),e(eE,k2e),e(k2e,Zfr),e(eE,egr),e(eE,RQ),e(RQ,ogr),e(eE,rgr),e(Te,tgr),e(Te,oE),e(oE,S2e),e(S2e,agr),e(oE,ngr),e(oE,BQ),e(BQ,sgr),e(oE,lgr),e(Te,igr),e(Te,rE),e(rE,R2e),e(R2e,dgr),e(rE,cgr),e(rE,PQ),e(PQ,mgr),e(rE,fgr),e(yr,ggr),M(tE,yr,null),b(m,eqe,_),b(m,Qd,_),e(Qd,aE),e(aE,B2e),M(W8,B2e,null),e(Qd,hgr),e(Qd,P2e),e(P2e,ugr),b(m,oqe,_),b(m,er,_),M(H8,er,null),e(er,pgr),e(er,Wd),e(Wd,_gr),e(Wd,IQ),e(IQ,bgr),e(Wd,Fgr),e(Wd,qQ),e(qQ,vgr),e(Wd,Tgr),e(er,Mgr),e(er,U8),e(U8,Egr),e(U8,I2e),e(I2e,Cgr),e(U8,wgr),e(er,Agr),e(er,Lt),M(J8,Lt,null),e(Lt,ygr),e(Lt,q2e),e(q2e,Lgr),e(Lt,xgr),e(Lt,Hd),e(Hd,$gr),e(Hd,N2e),e(N2e,kgr),e(Hd,Sgr),e(Hd,NQ),e(NQ,Rgr),e(Hd,Bgr),e(Lt,Pgr),M(nE,Lt,null),e(er,Igr),e(er,Lr),M(Y8,Lr,null),e(Lr,qgr),e(Lr,j2e),e(j2e,Ngr),e(Lr,jgr),e(Lr,on),e(on,Dgr),e(on,D2e),e(D2e,Ggr),e(on,Ogr),e(on,G2e),e(G2e,Vgr),e(on,Xgr),e(on,O2e),e(O2e,zgr),e(on,Qgr),e(Lr,Wgr),e(Lr,Ud),e(Ud,sE),e(sE,V2e),e(V2e,Hgr),e(sE,Ugr),e(sE,jQ),e(jQ,Jgr),e(sE,Ygr),e(Ud,Kgr),e(Ud,lE),e(lE,X2e),e(X2e,Zgr),e(lE,ehr),e(lE,DQ),e(DQ,ohr),e(lE,rhr),e(Ud,thr),e(Ud,iE),e(iE,z2e),e(z2e,ahr),e(iE,nhr),e(iE,GQ),e(GQ,shr),e(iE,lhr),e(Lr,ihr),M(dE,Lr,null),b(m,rqe,_),b(m,Jd,_),e(Jd,cE),e(cE,Q2e),M(K8,Q2e,null),e(Jd,dhr),e(Jd,W2e),e(W2e,chr),b(m,tqe,_),b(m,or,_),M(Z8,or,null),e(or,mhr),e(or,Yd),e(Yd,fhr),e(Yd,OQ),e(OQ,ghr),e(Yd,hhr),e(Yd,VQ),e(VQ,uhr),e(Yd,phr),e(or,_hr),e(or,ex),e(ex,bhr),e(ex,H2e),e(H2e,Fhr),e(ex,vhr),e(or,Thr),e(or,xt),M(ox,xt,null),e(xt,Mhr),e(xt,U2e),e(U2e,Ehr),e(xt,Chr),e(xt,Kd),e(Kd,whr),e(Kd,J2e),e(J2e,Ahr),e(Kd,yhr),e(Kd,XQ),e(XQ,Lhr),e(Kd,xhr),e(xt,$hr),M(mE,xt,null),e(or,khr),e(or,xr),M(rx,xr,null),e(xr,Shr),e(xr,Y2e),e(Y2e,Rhr),e(xr,Bhr),e(xr,rn),e(rn,Phr),e(rn,K2e),e(K2e,Ihr),e(rn,qhr),e(rn,Z2e),e(Z2e,Nhr),e(rn,jhr),e(rn,eFe),e(eFe,Dhr),e(rn,Ghr),e(xr,Ohr),e(xr,ie),e(ie,fE),e(fE,oFe),e(oFe,Vhr),e(fE,Xhr),e(fE,zQ),e(zQ,zhr),e(fE,Qhr),e(ie,Whr),e(ie,gE),e(gE,rFe),e(rFe,Hhr),e(gE,Uhr),e(gE,QQ),e(QQ,Jhr),e(gE,Yhr),e(ie,Khr),e(ie,hE),e(hE,tFe),e(tFe,Zhr),e(hE,eur),e(hE,WQ),e(WQ,our),e(hE,rur),e(ie,tur),e(ie,uE),e(uE,aFe),e(aFe,aur),e(uE,nur),e(uE,HQ),e(HQ,sur),e(uE,lur),e(ie,iur),e(ie,pE),e(pE,nFe),e(nFe,dur),e(pE,cur),e(pE,UQ),e(UQ,mur),e(pE,fur),e(ie,gur),e(ie,_E),e(_E,sFe),e(sFe,hur),e(_E,uur),e(_E,JQ),e(JQ,pur),e(_E,_ur),e(ie,bur),e(ie,bE),e(bE,lFe),e(lFe,Fur),e(bE,vur),e(bE,YQ),e(YQ,Tur),e(bE,Mur),e(ie,Eur),e(ie,FE),e(FE,iFe),e(iFe,Cur),e(FE,wur),e(FE,KQ),e(KQ,Aur),e(FE,yur),e(ie,Lur),e(ie,vE),e(vE,dFe),e(dFe,xur),e(vE,$ur),e(vE,ZQ),e(ZQ,kur),e(vE,Sur),e(ie,Rur),e(ie,TE),e(TE,cFe),e(cFe,Bur),e(TE,Pur),e(TE,eW),e(eW,Iur),e(TE,qur),e(ie,Nur),e(ie,ME),e(ME,mFe),e(mFe,jur),e(ME,Dur),e(ME,oW),e(oW,Gur),e(ME,Our),e(ie,Vur),e(ie,EE),e(EE,fFe),e(fFe,Xur),e(EE,zur),e(EE,rW),e(rW,Qur),e(EE,Wur),e(ie,Hur),e(ie,CE),e(CE,gFe),e(gFe,Uur),e(CE,Jur),e(CE,tW),e(tW,Yur),e(CE,Kur),e(ie,Zur),e(ie,wE),e(wE,hFe),e(hFe,epr),e(wE,opr),e(wE,aW),e(aW,rpr),e(wE,tpr),e(ie,apr),e(ie,AE),e(AE,uFe),e(uFe,npr),e(AE,spr),e(AE,nW),e(nW,lpr),e(AE,ipr),e(ie,dpr),e(ie,yE),e(yE,pFe),e(pFe,cpr),e(yE,mpr),e(yE,sW),e(sW,fpr),e(yE,gpr),e(ie,hpr),e(ie,LE),e(LE,_Fe),e(_Fe,upr),e(LE,ppr),e(LE,lW),e(lW,_pr),e(LE,bpr),e(ie,Fpr),e(ie,xE),e(xE,bFe),e(bFe,vpr),e(xE,Tpr),e(xE,iW),e(iW,Mpr),e(xE,Epr),e(ie,Cpr),e(ie,$E),e($E,FFe),e(FFe,wpr),e($E,Apr),e($E,dW),e(dW,ypr),e($E,Lpr),e(ie,xpr),e(ie,kE),e(kE,vFe),e(vFe,$pr),e(kE,kpr),e(kE,cW),e(cW,Spr),e(kE,Rpr),e(xr,Bpr),M(SE,xr,null),b(m,aqe,_),b(m,Zd,_),e(Zd,RE),e(RE,TFe),M(tx,TFe,null),e(Zd,Ppr),e(Zd,MFe),e(MFe,Ipr),b(m,nqe,_),b(m,rr,_),M(ax,rr,null),e(rr,qpr),e(rr,ec),e(ec,Npr),e(ec,mW),e(mW,jpr),e(ec,Dpr),e(ec,fW),e(fW,Gpr),e(ec,Opr),e(rr,Vpr),e(rr,nx),e(nx,Xpr),e(nx,EFe),e(EFe,zpr),e(nx,Qpr),e(rr,Wpr),e(rr,$t),M(sx,$t,null),e($t,Hpr),e($t,CFe),e(CFe,Upr),e($t,Jpr),e($t,oc),e(oc,Ypr),e(oc,wFe),e(wFe,Kpr),e(oc,Zpr),e(oc,gW),e(gW,e_r),e(oc,o_r),e($t,r_r),M(BE,$t,null),e(rr,t_r),e(rr,$r),M(lx,$r,null),e($r,a_r),e($r,AFe),e(AFe,n_r),e($r,s_r),e($r,tn),e(tn,l_r),e(tn,yFe),e(yFe,i_r),e(tn,d_r),e(tn,LFe),e(LFe,c_r),e(tn,m_r),e(tn,xFe),e(xFe,f_r),e(tn,g_r),e($r,h_r),e($r,ye),e(ye,PE),e(PE,$Fe),e($Fe,u_r),e(PE,p_r),e(PE,hW),e(hW,__r),e(PE,b_r),e(ye,F_r),e(ye,IE),e(IE,kFe),e(kFe,v_r),e(IE,T_r),e(IE,uW),e(uW,M_r),e(IE,E_r),e(ye,C_r),e(ye,qE),e(qE,SFe),e(SFe,w_r),e(qE,A_r),e(qE,pW),e(pW,y_r),e(qE,L_r),e(ye,x_r),e(ye,NE),e(NE,RFe),e(RFe,$_r),e(NE,k_r),e(NE,_W),e(_W,S_r),e(NE,R_r),e(ye,B_r),e(ye,jE),e(jE,BFe),e(BFe,P_r),e(jE,I_r),e(jE,bW),e(bW,q_r),e(jE,N_r),e(ye,j_r),e(ye,DE),e(DE,PFe),e(PFe,D_r),e(DE,G_r),e(DE,FW),e(FW,O_r),e(DE,V_r),e(ye,X_r),e(ye,GE),e(GE,IFe),e(IFe,z_r),e(GE,Q_r),e(GE,vW),e(vW,W_r),e(GE,H_r),e(ye,U_r),e(ye,OE),e(OE,qFe),e(qFe,J_r),e(OE,Y_r),e(OE,TW),e(TW,K_r),e(OE,Z_r),e(ye,ebr),e(ye,VE),e(VE,NFe),e(NFe,obr),e(VE,rbr),e(VE,MW),e(MW,tbr),e(VE,abr),e(ye,nbr),e(ye,XE),e(XE,jFe),e(jFe,sbr),e(XE,lbr),e(XE,EW),e(EW,ibr),e(XE,dbr),e($r,cbr),M(zE,$r,null),b(m,sqe,_),b(m,rc,_),e(rc,QE),e(QE,DFe),M(ix,DFe,null),e(rc,mbr),e(rc,GFe),e(GFe,fbr),b(m,lqe,_),b(m,tr,_),M(dx,tr,null),e(tr,gbr),e(tr,tc),e(tc,hbr),e(tc,CW),e(CW,ubr),e(tc,pbr),e(tc,wW),e(wW,_br),e(tc,bbr),e(tr,Fbr),e(tr,cx),e(cx,vbr),e(cx,OFe),e(OFe,Tbr),e(cx,Mbr),e(tr,Ebr),e(tr,kt),M(mx,kt,null),e(kt,Cbr),e(kt,VFe),e(VFe,wbr),e(kt,Abr),e(kt,ac),e(ac,ybr),e(ac,XFe),e(XFe,Lbr),e(ac,xbr),e(ac,AW),e(AW,$br),e(ac,kbr),e(kt,Sbr),M(WE,kt,null),e(tr,Rbr),e(tr,kr),M(fx,kr,null),e(kr,Bbr),e(kr,zFe),e(zFe,Pbr),e(kr,Ibr),e(kr,an),e(an,qbr),e(an,QFe),e(QFe,Nbr),e(an,jbr),e(an,WFe),e(WFe,Dbr),e(an,Gbr),e(an,HFe),e(HFe,Obr),e(an,Vbr),e(kr,Xbr),e(kr,Z),e(Z,HE),e(HE,UFe),e(UFe,zbr),e(HE,Qbr),e(HE,yW),e(yW,Wbr),e(HE,Hbr),e(Z,Ubr),e(Z,UE),e(UE,JFe),e(JFe,Jbr),e(UE,Ybr),e(UE,LW),e(LW,Kbr),e(UE,Zbr),e(Z,e2r),e(Z,JE),e(JE,YFe),e(YFe,o2r),e(JE,r2r),e(JE,xW),e(xW,t2r),e(JE,a2r),e(Z,n2r),e(Z,YE),e(YE,KFe),e(KFe,s2r),e(YE,l2r),e(YE,$W),e($W,i2r),e(YE,d2r),e(Z,c2r),e(Z,KE),e(KE,ZFe),e(ZFe,m2r),e(KE,f2r),e(KE,kW),e(kW,g2r),e(KE,h2r),e(Z,u2r),e(Z,ZE),e(ZE,eve),e(eve,p2r),e(ZE,_2r),e(ZE,SW),e(SW,b2r),e(ZE,F2r),e(Z,v2r),e(Z,e5),e(e5,ove),e(ove,T2r),e(e5,M2r),e(e5,RW),e(RW,E2r),e(e5,C2r),e(Z,w2r),e(Z,o5),e(o5,rve),e(rve,A2r),e(o5,y2r),e(o5,BW),e(BW,L2r),e(o5,x2r),e(Z,$2r),e(Z,r5),e(r5,tve),e(tve,k2r),e(r5,S2r),e(r5,PW),e(PW,R2r),e(r5,B2r),e(Z,P2r),e(Z,t5),e(t5,ave),e(ave,I2r),e(t5,q2r),e(t5,IW),e(IW,N2r),e(t5,j2r),e(Z,D2r),e(Z,a5),e(a5,nve),e(nve,G2r),e(a5,O2r),e(a5,qW),e(qW,V2r),e(a5,X2r),e(Z,z2r),e(Z,n5),e(n5,sve),e(sve,Q2r),e(n5,W2r),e(n5,NW),e(NW,H2r),e(n5,U2r),e(Z,J2r),e(Z,s5),e(s5,lve),e(lve,Y2r),e(s5,K2r),e(s5,jW),e(jW,Z2r),e(s5,eFr),e(Z,oFr),e(Z,l5),e(l5,ive),e(ive,rFr),e(l5,tFr),e(l5,DW),e(DW,aFr),e(l5,nFr),e(Z,sFr),e(Z,i5),e(i5,dve),e(dve,lFr),e(i5,iFr),e(i5,GW),e(GW,dFr),e(i5,cFr),e(Z,mFr),e(Z,d5),e(d5,cve),e(cve,fFr),e(d5,gFr),e(d5,OW),e(OW,hFr),e(d5,uFr),e(Z,pFr),e(Z,c5),e(c5,mve),e(mve,_Fr),e(c5,bFr),e(c5,VW),e(VW,FFr),e(c5,vFr),e(Z,TFr),e(Z,m5),e(m5,fve),e(fve,MFr),e(m5,EFr),e(m5,XW),e(XW,CFr),e(m5,wFr),e(Z,AFr),e(Z,f5),e(f5,gve),e(gve,yFr),e(f5,LFr),e(f5,zW),e(zW,xFr),e(f5,$Fr),e(Z,kFr),e(Z,g5),e(g5,hve),e(hve,SFr),e(g5,RFr),e(g5,QW),e(QW,BFr),e(g5,PFr),e(Z,IFr),e(Z,h5),e(h5,uve),e(uve,qFr),e(h5,NFr),e(h5,WW),e(WW,jFr),e(h5,DFr),e(Z,GFr),e(Z,u5),e(u5,pve),e(pve,OFr),e(u5,VFr),e(u5,HW),e(HW,XFr),e(u5,zFr),e(Z,QFr),e(Z,p5),e(p5,_ve),e(_ve,WFr),e(p5,HFr),e(p5,UW),e(UW,UFr),e(p5,JFr),e(Z,YFr),e(Z,_5),e(_5,bve),e(bve,KFr),e(_5,ZFr),e(_5,JW),e(JW,evr),e(_5,ovr),e(Z,rvr),e(Z,b5),e(b5,Fve),e(Fve,tvr),e(b5,avr),e(b5,YW),e(YW,nvr),e(b5,svr),e(Z,lvr),e(Z,F5),e(F5,vve),e(vve,ivr),e(F5,dvr),e(F5,KW),e(KW,cvr),e(F5,mvr),e(kr,fvr),M(v5,kr,null),b(m,iqe,_),b(m,nc,_),e(nc,T5),e(T5,Tve),M(gx,Tve,null),e(nc,gvr),e(nc,Mve),e(Mve,hvr),b(m,dqe,_),b(m,ar,_),M(hx,ar,null),e(ar,uvr),e(ar,sc),e(sc,pvr),e(sc,ZW),e(ZW,_vr),e(sc,bvr),e(sc,eH),e(eH,Fvr),e(sc,vvr),e(ar,Tvr),e(ar,ux),e(ux,Mvr),e(ux,Eve),e(Eve,Evr),e(ux,Cvr),e(ar,wvr),e(ar,St),M(px,St,null),e(St,Avr),e(St,Cve),e(Cve,yvr),e(St,Lvr),e(St,lc),e(lc,xvr),e(lc,wve),e(wve,$vr),e(lc,kvr),e(lc,oH),e(oH,Svr),e(lc,Rvr),e(St,Bvr),M(M5,St,null),e(ar,Pvr),e(ar,Sr),M(_x,Sr,null),e(Sr,Ivr),e(Sr,Ave),e(Ave,qvr),e(Sr,Nvr),e(Sr,nn),e(nn,jvr),e(nn,yve),e(yve,Dvr),e(nn,Gvr),e(nn,Lve),e(Lve,Ovr),e(nn,Vvr),e(nn,xve),e(xve,Xvr),e(nn,zvr),e(Sr,Qvr),e(Sr,ue),e(ue,E5),e(E5,$ve),e($ve,Wvr),e(E5,Hvr),e(E5,rH),e(rH,Uvr),e(E5,Jvr),e(ue,Yvr),e(ue,C5),e(C5,kve),e(kve,Kvr),e(C5,Zvr),e(C5,tH),e(tH,e1r),e(C5,o1r),e(ue,r1r),e(ue,w5),e(w5,Sve),e(Sve,t1r),e(w5,a1r),e(w5,aH),e(aH,n1r),e(w5,s1r),e(ue,l1r),e(ue,A5),e(A5,Rve),e(Rve,i1r),e(A5,d1r),e(A5,nH),e(nH,c1r),e(A5,m1r),e(ue,f1r),e(ue,y5),e(y5,Bve),e(Bve,g1r),e(y5,h1r),e(y5,sH),e(sH,u1r),e(y5,p1r),e(ue,_1r),e(ue,L5),e(L5,Pve),e(Pve,b1r),e(L5,F1r),e(L5,lH),e(lH,v1r),e(L5,T1r),e(ue,M1r),e(ue,x5),e(x5,Ive),e(Ive,E1r),e(x5,C1r),e(x5,iH),e(iH,w1r),e(x5,A1r),e(ue,y1r),e(ue,$5),e($5,qve),e(qve,L1r),e($5,x1r),e($5,dH),e(dH,$1r),e($5,k1r),e(ue,S1r),e(ue,k5),e(k5,Nve),e(Nve,R1r),e(k5,B1r),e(k5,cH),e(cH,P1r),e(k5,I1r),e(ue,q1r),e(ue,S5),e(S5,jve),e(jve,N1r),e(S5,j1r),e(S5,mH),e(mH,D1r),e(S5,G1r),e(ue,O1r),e(ue,R5),e(R5,Dve),e(Dve,V1r),e(R5,X1r),e(R5,fH),e(fH,z1r),e(R5,Q1r),e(ue,W1r),e(ue,B5),e(B5,Gve),e(Gve,H1r),e(B5,U1r),e(B5,gH),e(gH,J1r),e(B5,Y1r),e(ue,K1r),e(ue,P5),e(P5,Ove),e(Ove,Z1r),e(P5,eTr),e(P5,hH),e(hH,oTr),e(P5,rTr),e(ue,tTr),e(ue,I5),e(I5,Vve),e(Vve,aTr),e(I5,nTr),e(I5,uH),e(uH,sTr),e(I5,lTr),e(ue,iTr),e(ue,q5),e(q5,Xve),e(Xve,dTr),e(q5,cTr),e(q5,pH),e(pH,mTr),e(q5,fTr),e(ue,gTr),e(ue,N5),e(N5,zve),e(zve,hTr),e(N5,uTr),e(N5,_H),e(_H,pTr),e(N5,_Tr),e(ue,bTr),e(ue,j5),e(j5,Qve),e(Qve,FTr),e(j5,vTr),e(j5,bH),e(bH,TTr),e(j5,MTr),e(Sr,ETr),M(D5,Sr,null),b(m,cqe,_),b(m,ic,_),e(ic,G5),e(G5,Wve),M(bx,Wve,null),e(ic,CTr),e(ic,Hve),e(Hve,wTr),b(m,mqe,_),b(m,nr,_),M(Fx,nr,null),e(nr,ATr),e(nr,dc),e(dc,yTr),e(dc,FH),e(FH,LTr),e(dc,xTr),e(dc,vH),e(vH,$Tr),e(dc,kTr),e(nr,STr),e(nr,vx),e(vx,RTr),e(vx,Uve),e(Uve,BTr),e(vx,PTr),e(nr,ITr),e(nr,Rt),M(Tx,Rt,null),e(Rt,qTr),e(Rt,Jve),e(Jve,NTr),e(Rt,jTr),e(Rt,cc),e(cc,DTr),e(cc,Yve),e(Yve,GTr),e(cc,OTr),e(cc,TH),e(TH,VTr),e(cc,XTr),e(Rt,zTr),M(O5,Rt,null),e(nr,QTr),e(nr,Rr),M(Mx,Rr,null),e(Rr,WTr),e(Rr,Kve),e(Kve,HTr),e(Rr,UTr),e(Rr,sn),e(sn,JTr),e(sn,Zve),e(Zve,YTr),e(sn,KTr),e(sn,e1e),e(e1e,ZTr),e(sn,eMr),e(sn,o1e),e(o1e,oMr),e(sn,rMr),e(Rr,tMr),e(Rr,Ex),e(Ex,V5),e(V5,r1e),e(r1e,aMr),e(V5,nMr),e(V5,MH),e(MH,sMr),e(V5,lMr),e(Ex,iMr),e(Ex,X5),e(X5,t1e),e(t1e,dMr),e(X5,cMr),e(X5,EH),e(EH,mMr),e(X5,fMr),e(Rr,gMr),M(z5,Rr,null),b(m,fqe,_),b(m,mc,_),e(mc,Q5),e(Q5,a1e),M(Cx,a1e,null),e(mc,hMr),e(mc,n1e),e(n1e,uMr),b(m,gqe,_),b(m,sr,_),M(wx,sr,null),e(sr,pMr),e(sr,fc),e(fc,_Mr),e(fc,CH),e(CH,bMr),e(fc,FMr),e(fc,wH),e(wH,vMr),e(fc,TMr),e(sr,MMr),e(sr,Ax),e(Ax,EMr),e(Ax,s1e),e(s1e,CMr),e(Ax,wMr),e(sr,AMr),e(sr,Bt),M(yx,Bt,null),e(Bt,yMr),e(Bt,l1e),e(l1e,LMr),e(Bt,xMr),e(Bt,gc),e(gc,$Mr),e(gc,i1e),e(i1e,kMr),e(gc,SMr),e(gc,AH),e(AH,RMr),e(gc,BMr),e(Bt,PMr),M(W5,Bt,null),e(sr,IMr),e(sr,Br),M(Lx,Br,null),e(Br,qMr),e(Br,d1e),e(d1e,NMr),e(Br,jMr),e(Br,ln),e(ln,DMr),e(ln,c1e),e(c1e,GMr),e(ln,OMr),e(ln,m1e),e(m1e,VMr),e(ln,XMr),e(ln,f1e),e(f1e,zMr),e(ln,QMr),e(Br,WMr),e(Br,g1e),e(g1e,H5),e(H5,h1e),e(h1e,HMr),e(H5,UMr),e(H5,yH),e(yH,JMr),e(H5,YMr),e(Br,KMr),M(U5,Br,null),b(m,hqe,_),b(m,hc,_),e(hc,J5),e(J5,u1e),M(xx,u1e,null),e(hc,ZMr),e(hc,p1e),e(p1e,e4r),b(m,uqe,_),b(m,lr,_),M($x,lr,null),e(lr,o4r),e(lr,uc),e(uc,r4r),e(uc,LH),e(LH,t4r),e(uc,a4r),e(uc,xH),e(xH,n4r),e(uc,s4r),e(lr,l4r),e(lr,kx),e(kx,i4r),e(kx,_1e),e(_1e,d4r),e(kx,c4r),e(lr,m4r),e(lr,Pt),M(Sx,Pt,null),e(Pt,f4r),e(Pt,b1e),e(b1e,g4r),e(Pt,h4r),e(Pt,pc),e(pc,u4r),e(pc,F1e),e(F1e,p4r),e(pc,_4r),e(pc,$H),e($H,b4r),e(pc,F4r),e(Pt,v4r),M(Y5,Pt,null),e(lr,T4r),e(lr,Pr),M(Rx,Pr,null),e(Pr,M4r),e(Pr,v1e),e(v1e,E4r),e(Pr,C4r),e(Pr,dn),e(dn,w4r),e(dn,T1e),e(T1e,A4r),e(dn,y4r),e(dn,M1e),e(M1e,L4r),e(dn,x4r),e(dn,E1e),e(E1e,$4r),e(dn,k4r),e(Pr,S4r),e(Pr,de),e(de,K5),e(K5,C1e),e(C1e,R4r),e(K5,B4r),e(K5,kH),e(kH,P4r),e(K5,I4r),e(de,q4r),e(de,Z5),e(Z5,w1e),e(w1e,N4r),e(Z5,j4r),e(Z5,SH),e(SH,D4r),e(Z5,G4r),e(de,O4r),e(de,eC),e(eC,A1e),e(A1e,V4r),e(eC,X4r),e(eC,RH),e(RH,z4r),e(eC,Q4r),e(de,W4r),e(de,oC),e(oC,y1e),e(y1e,H4r),e(oC,U4r),e(oC,BH),e(BH,J4r),e(oC,Y4r),e(de,K4r),e(de,rC),e(rC,L1e),e(L1e,Z4r),e(rC,eEr),e(rC,PH),e(PH,oEr),e(rC,rEr),e(de,tEr),e(de,tC),e(tC,x1e),e(x1e,aEr),e(tC,nEr),e(tC,IH),e(IH,sEr),e(tC,lEr),e(de,iEr),e(de,aC),e(aC,$1e),e($1e,dEr),e(aC,cEr),e(aC,qH),e(qH,mEr),e(aC,fEr),e(de,gEr),e(de,nC),e(nC,k1e),e(k1e,hEr),e(nC,uEr),e(nC,NH),e(NH,pEr),e(nC,_Er),e(de,bEr),e(de,sC),e(sC,S1e),e(S1e,FEr),e(sC,vEr),e(sC,jH),e(jH,TEr),e(sC,MEr),e(de,EEr),e(de,lC),e(lC,R1e),e(R1e,CEr),e(lC,wEr),e(lC,DH),e(DH,AEr),e(lC,yEr),e(de,LEr),e(de,iC),e(iC,B1e),e(B1e,xEr),e(iC,$Er),e(iC,GH),e(GH,kEr),e(iC,SEr),e(de,REr),e(de,dC),e(dC,P1e),e(P1e,BEr),e(dC,PEr),e(dC,OH),e(OH,IEr),e(dC,qEr),e(de,NEr),e(de,cC),e(cC,I1e),e(I1e,jEr),e(cC,DEr),e(cC,VH),e(VH,GEr),e(cC,OEr),e(de,VEr),e(de,mC),e(mC,q1e),e(q1e,XEr),e(mC,zEr),e(mC,XH),e(XH,QEr),e(mC,WEr),e(de,HEr),e(de,fC),e(fC,N1e),e(N1e,UEr),e(fC,JEr),e(fC,zH),e(zH,YEr),e(fC,KEr),e(de,ZEr),e(de,gC),e(gC,j1e),e(j1e,e5r),e(gC,o5r),e(gC,QH),e(QH,r5r),e(gC,t5r),e(de,a5r),e(de,hC),e(hC,D1e),e(D1e,n5r),e(hC,s5r),e(hC,WH),e(WH,l5r),e(hC,i5r),e(de,d5r),e(de,uC),e(uC,G1e),e(G1e,c5r),e(uC,m5r),e(uC,HH),e(HH,f5r),e(uC,g5r),e(de,h5r),e(de,pC),e(pC,O1e),e(O1e,u5r),e(pC,p5r),e(pC,UH),e(UH,_5r),e(pC,b5r),e(de,F5r),e(de,_C),e(_C,V1e),e(V1e,v5r),e(_C,T5r),e(_C,JH),e(JH,M5r),e(_C,E5r),e(Pr,C5r),M(bC,Pr,null),b(m,pqe,_),b(m,_c,_),e(_c,FC),e(FC,X1e),M(Bx,X1e,null),e(_c,w5r),e(_c,z1e),e(z1e,A5r),b(m,_qe,_),b(m,ir,_),M(Px,ir,null),e(ir,y5r),e(ir,bc),e(bc,L5r),e(bc,YH),e(YH,x5r),e(bc,$5r),e(bc,KH),e(KH,k5r),e(bc,S5r),e(ir,R5r),e(ir,Ix),e(Ix,B5r),e(Ix,Q1e),e(Q1e,P5r),e(Ix,I5r),e(ir,q5r),e(ir,It),M(qx,It,null),e(It,N5r),e(It,W1e),e(W1e,j5r),e(It,D5r),e(It,Fc),e(Fc,G5r),e(Fc,H1e),e(H1e,O5r),e(Fc,V5r),e(Fc,ZH),e(ZH,X5r),e(Fc,z5r),e(It,Q5r),M(vC,It,null),e(ir,W5r),e(ir,Ir),M(Nx,Ir,null),e(Ir,H5r),e(Ir,U1e),e(U1e,U5r),e(Ir,J5r),e(Ir,cn),e(cn,Y5r),e(cn,J1e),e(J1e,K5r),e(cn,Z5r),e(cn,Y1e),e(Y1e,eCr),e(cn,oCr),e(cn,K1e),e(K1e,rCr),e(cn,tCr),e(Ir,aCr),e(Ir,ce),e(ce,TC),e(TC,Z1e),e(Z1e,nCr),e(TC,sCr),e(TC,eU),e(eU,lCr),e(TC,iCr),e(ce,dCr),e(ce,MC),e(MC,eTe),e(eTe,cCr),e(MC,mCr),e(MC,oU),e(oU,fCr),e(MC,gCr),e(ce,hCr),e(ce,EC),e(EC,oTe),e(oTe,uCr),e(EC,pCr),e(EC,rU),e(rU,_Cr),e(EC,bCr),e(ce,FCr),e(ce,CC),e(CC,rTe),e(rTe,vCr),e(CC,TCr),e(CC,tU),e(tU,MCr),e(CC,ECr),e(ce,CCr),e(ce,wC),e(wC,tTe),e(tTe,wCr),e(wC,ACr),e(wC,aU),e(aU,yCr),e(wC,LCr),e(ce,xCr),e(ce,AC),e(AC,aTe),e(aTe,$Cr),e(AC,kCr),e(AC,nU),e(nU,SCr),e(AC,RCr),e(ce,BCr),e(ce,yC),e(yC,nTe),e(nTe,PCr),e(yC,ICr),e(yC,sU),e(sU,qCr),e(yC,NCr),e(ce,jCr),e(ce,LC),e(LC,sTe),e(sTe,DCr),e(LC,GCr),e(LC,lU),e(lU,OCr),e(LC,VCr),e(ce,XCr),e(ce,xC),e(xC,lTe),e(lTe,zCr),e(xC,QCr),e(xC,iU),e(iU,WCr),e(xC,HCr),e(ce,UCr),e(ce,$C),e($C,iTe),e(iTe,JCr),e($C,YCr),e($C,dU),e(dU,KCr),e($C,ZCr),e(ce,e3r),e(ce,kC),e(kC,dTe),e(dTe,o3r),e(kC,r3r),e(kC,cU),e(cU,t3r),e(kC,a3r),e(ce,n3r),e(ce,SC),e(SC,cTe),e(cTe,s3r),e(SC,l3r),e(SC,mU),e(mU,i3r),e(SC,d3r),e(ce,c3r),e(ce,RC),e(RC,mTe),e(mTe,m3r),e(RC,f3r),e(RC,fU),e(fU,g3r),e(RC,h3r),e(ce,u3r),e(ce,BC),e(BC,fTe),e(fTe,p3r),e(BC,_3r),e(BC,gU),e(gU,b3r),e(BC,F3r),e(ce,v3r),e(ce,PC),e(PC,gTe),e(gTe,T3r),e(PC,M3r),e(PC,hU),e(hU,E3r),e(PC,C3r),e(ce,w3r),e(ce,IC),e(IC,hTe),e(hTe,A3r),e(IC,y3r),e(IC,uU),e(uU,L3r),e(IC,x3r),e(ce,$3r),e(ce,qC),e(qC,uTe),e(uTe,k3r),e(qC,S3r),e(qC,pU),e(pU,R3r),e(qC,B3r),e(ce,P3r),e(ce,NC),e(NC,pTe),e(pTe,I3r),e(NC,q3r),e(NC,_U),e(_U,N3r),e(NC,j3r),e(ce,D3r),e(ce,jC),e(jC,_Te),e(_Te,G3r),e(jC,O3r),e(jC,bU),e(bU,V3r),e(jC,X3r),e(ce,z3r),e(ce,DC),e(DC,bTe),e(bTe,Q3r),e(DC,W3r),e(DC,FU),e(FU,H3r),e(DC,U3r),e(Ir,J3r),M(GC,Ir,null),b(m,bqe,_),b(m,vc,_),e(vc,OC),e(OC,FTe),M(jx,FTe,null),e(vc,Y3r),e(vc,vTe),e(vTe,K3r),b(m,Fqe,_),b(m,dr,_),M(Dx,dr,null),e(dr,Z3r),e(dr,Tc),e(Tc,ewr),e(Tc,vU),e(vU,owr),e(Tc,rwr),e(Tc,TU),e(TU,twr),e(Tc,awr),e(dr,nwr),e(dr,Gx),e(Gx,swr),e(Gx,TTe),e(TTe,lwr),e(Gx,iwr),e(dr,dwr),e(dr,qt),M(Ox,qt,null),e(qt,cwr),e(qt,MTe),e(MTe,mwr),e(qt,fwr),e(qt,Mc),e(Mc,gwr),e(Mc,ETe),e(ETe,hwr),e(Mc,uwr),e(Mc,MU),e(MU,pwr),e(Mc,_wr),e(qt,bwr),M(VC,qt,null),e(dr,Fwr),e(dr,qr),M(Vx,qr,null),e(qr,vwr),e(qr,CTe),e(CTe,Twr),e(qr,Mwr),e(qr,mn),e(mn,Ewr),e(mn,wTe),e(wTe,Cwr),e(mn,wwr),e(mn,ATe),e(ATe,Awr),e(mn,ywr),e(mn,yTe),e(yTe,Lwr),e(mn,xwr),e(qr,$wr),e(qr,LTe),e(LTe,XC),e(XC,xTe),e(xTe,kwr),e(XC,Swr),e(XC,EU),e(EU,Rwr),e(XC,Bwr),e(qr,Pwr),M(zC,qr,null),b(m,vqe,_),b(m,Ec,_),e(Ec,QC),e(QC,$Te),M(Xx,$Te,null),e(Ec,Iwr),e(Ec,kTe),e(kTe,qwr),b(m,Tqe,_),b(m,cr,_),M(zx,cr,null),e(cr,Nwr),e(cr,Cc),e(Cc,jwr),e(Cc,CU),e(CU,Dwr),e(Cc,Gwr),e(Cc,wU),e(wU,Owr),e(Cc,Vwr),e(cr,Xwr),e(cr,Qx),e(Qx,zwr),e(Qx,STe),e(STe,Qwr),e(Qx,Wwr),e(cr,Hwr),e(cr,Nt),M(Wx,Nt,null),e(Nt,Uwr),e(Nt,RTe),e(RTe,Jwr),e(Nt,Ywr),e(Nt,wc),e(wc,Kwr),e(wc,BTe),e(BTe,Zwr),e(wc,eAr),e(wc,AU),e(AU,oAr),e(wc,rAr),e(Nt,tAr),M(WC,Nt,null),e(cr,aAr),e(cr,Nr),M(Hx,Nr,null),e(Nr,nAr),e(Nr,PTe),e(PTe,sAr),e(Nr,lAr),e(Nr,fn),e(fn,iAr),e(fn,ITe),e(ITe,dAr),e(fn,cAr),e(fn,qTe),e(qTe,mAr),e(fn,fAr),e(fn,NTe),e(NTe,gAr),e(fn,hAr),e(Nr,uAr),e(Nr,jTe),e(jTe,HC),e(HC,DTe),e(DTe,pAr),e(HC,_Ar),e(HC,yU),e(yU,bAr),e(HC,FAr),e(Nr,vAr),M(UC,Nr,null),b(m,Mqe,_),b(m,Ac,_),e(Ac,JC),e(JC,GTe),M(Ux,GTe,null),e(Ac,TAr),e(Ac,OTe),e(OTe,MAr),b(m,Eqe,_),b(m,mr,_),M(Jx,mr,null),e(mr,EAr),e(mr,yc),e(yc,CAr),e(yc,LU),e(LU,wAr),e(yc,AAr),e(yc,xU),e(xU,yAr),e(yc,LAr),e(mr,xAr),e(mr,Yx),e(Yx,$Ar),e(Yx,VTe),e(VTe,kAr),e(Yx,SAr),e(mr,RAr),e(mr,jt),M(Kx,jt,null),e(jt,BAr),e(jt,XTe),e(XTe,PAr),e(jt,IAr),e(jt,Lc),e(Lc,qAr),e(Lc,zTe),e(zTe,NAr),e(Lc,jAr),e(Lc,$U),e($U,DAr),e(Lc,GAr),e(jt,OAr),M(YC,jt,null),e(mr,VAr),e(mr,jr),M(Zx,jr,null),e(jr,XAr),e(jr,QTe),e(QTe,zAr),e(jr,QAr),e(jr,gn),e(gn,WAr),e(gn,WTe),e(WTe,HAr),e(gn,UAr),e(gn,HTe),e(HTe,JAr),e(gn,YAr),e(gn,UTe),e(UTe,KAr),e(gn,ZAr),e(jr,e6r),e(jr,re),e(re,KC),e(KC,JTe),e(JTe,o6r),e(KC,r6r),e(KC,kU),e(kU,t6r),e(KC,a6r),e(re,n6r),e(re,ZC),e(ZC,YTe),e(YTe,s6r),e(ZC,l6r),e(ZC,SU),e(SU,i6r),e(ZC,d6r),e(re,c6r),e(re,e3),e(e3,KTe),e(KTe,m6r),e(e3,f6r),e(e3,RU),e(RU,g6r),e(e3,h6r),e(re,u6r),e(re,o3),e(o3,ZTe),e(ZTe,p6r),e(o3,_6r),e(o3,BU),e(BU,b6r),e(o3,F6r),e(re,v6r),e(re,r3),e(r3,eMe),e(eMe,T6r),e(r3,M6r),e(r3,PU),e(PU,E6r),e(r3,C6r),e(re,w6r),e(re,t3),e(t3,oMe),e(oMe,A6r),e(t3,y6r),e(t3,IU),e(IU,L6r),e(t3,x6r),e(re,$6r),e(re,a3),e(a3,rMe),e(rMe,k6r),e(a3,S6r),e(a3,qU),e(qU,R6r),e(a3,B6r),e(re,P6r),e(re,n3),e(n3,tMe),e(tMe,I6r),e(n3,q6r),e(n3,NU),e(NU,N6r),e(n3,j6r),e(re,D6r),e(re,s3),e(s3,aMe),e(aMe,G6r),e(s3,O6r),e(s3,jU),e(jU,V6r),e(s3,X6r),e(re,z6r),e(re,l3),e(l3,nMe),e(nMe,Q6r),e(l3,W6r),e(l3,DU),e(DU,H6r),e(l3,U6r),e(re,J6r),e(re,i3),e(i3,sMe),e(sMe,Y6r),e(i3,K6r),e(i3,GU),e(GU,Z6r),e(i3,e0r),e(re,o0r),e(re,d3),e(d3,lMe),e(lMe,r0r),e(d3,t0r),e(d3,OU),e(OU,a0r),e(d3,n0r),e(re,s0r),e(re,c3),e(c3,iMe),e(iMe,l0r),e(c3,i0r),e(c3,VU),e(VU,d0r),e(c3,c0r),e(re,m0r),e(re,m3),e(m3,dMe),e(dMe,f0r),e(m3,g0r),e(m3,XU),e(XU,h0r),e(m3,u0r),e(re,p0r),e(re,f3),e(f3,cMe),e(cMe,_0r),e(f3,b0r),e(f3,zU),e(zU,F0r),e(f3,v0r),e(re,T0r),e(re,g3),e(g3,mMe),e(mMe,M0r),e(g3,E0r),e(g3,QU),e(QU,C0r),e(g3,w0r),e(re,A0r),e(re,h3),e(h3,fMe),e(fMe,y0r),e(h3,L0r),e(h3,WU),e(WU,x0r),e(h3,$0r),e(re,k0r),e(re,u3),e(u3,gMe),e(gMe,S0r),e(u3,R0r),e(u3,HU),e(HU,B0r),e(u3,P0r),e(re,I0r),e(re,p3),e(p3,hMe),e(hMe,q0r),e(p3,N0r),e(p3,UU),e(UU,j0r),e(p3,D0r),e(re,G0r),e(re,_3),e(_3,uMe),e(uMe,O0r),e(_3,V0r),e(_3,JU),e(JU,X0r),e(_3,z0r),e(re,Q0r),e(re,b3),e(b3,pMe),e(pMe,W0r),e(b3,H0r),e(b3,YU),e(YU,U0r),e(b3,J0r),e(re,Y0r),e(re,F3),e(F3,_Me),e(_Me,K0r),e(F3,Z0r),e(F3,KU),e(KU,eyr),e(F3,oyr),e(re,ryr),e(re,v3),e(v3,bMe),e(bMe,tyr),e(v3,ayr),e(v3,ZU),e(ZU,nyr),e(v3,syr),e(re,lyr),e(re,T3),e(T3,FMe),e(FMe,iyr),e(T3,dyr),e(T3,eJ),e(eJ,cyr),e(T3,myr),e(re,fyr),e(re,M3),e(M3,vMe),e(vMe,gyr),e(M3,hyr),e(M3,oJ),e(oJ,uyr),e(M3,pyr),e(jr,_yr),M(E3,jr,null),b(m,Cqe,_),b(m,xc,_),e(xc,C3),e(C3,TMe),M(e7,TMe,null),e(xc,byr),e(xc,MMe),e(MMe,Fyr),b(m,wqe,_),b(m,fr,_),M(o7,fr,null),e(fr,vyr),e(fr,$c),e($c,Tyr),e($c,rJ),e(rJ,Myr),e($c,Eyr),e($c,tJ),e(tJ,Cyr),e($c,wyr),e(fr,Ayr),e(fr,r7),e(r7,yyr),e(r7,EMe),e(EMe,Lyr),e(r7,xyr),e(fr,$yr),e(fr,Dt),M(t7,Dt,null),e(Dt,kyr),e(Dt,CMe),e(CMe,Syr),e(Dt,Ryr),e(Dt,kc),e(kc,Byr),e(kc,wMe),e(wMe,Pyr),e(kc,Iyr),e(kc,aJ),e(aJ,qyr),e(kc,Nyr),e(Dt,jyr),M(w3,Dt,null),e(fr,Dyr),e(fr,Dr),M(a7,Dr,null),e(Dr,Gyr),e(Dr,AMe),e(AMe,Oyr),e(Dr,Vyr),e(Dr,hn),e(hn,Xyr),e(hn,yMe),e(yMe,zyr),e(hn,Qyr),e(hn,LMe),e(LMe,Wyr),e(hn,Hyr),e(hn,xMe),e(xMe,Uyr),e(hn,Jyr),e(Dr,Yyr),e(Dr,ke),e(ke,A3),e(A3,$Me),e($Me,Kyr),e(A3,Zyr),e(A3,nJ),e(nJ,eLr),e(A3,oLr),e(ke,rLr),e(ke,y3),e(y3,kMe),e(kMe,tLr),e(y3,aLr),e(y3,sJ),e(sJ,nLr),e(y3,sLr),e(ke,lLr),e(ke,L3),e(L3,SMe),e(SMe,iLr),e(L3,dLr),e(L3,lJ),e(lJ,cLr),e(L3,mLr),e(ke,fLr),e(ke,x3),e(x3,RMe),e(RMe,gLr),e(x3,hLr),e(x3,iJ),e(iJ,uLr),e(x3,pLr),e(ke,_Lr),e(ke,$3),e($3,BMe),e(BMe,bLr),e($3,FLr),e($3,dJ),e(dJ,vLr),e($3,TLr),e(ke,MLr),e(ke,k3),e(k3,PMe),e(PMe,ELr),e(k3,CLr),e(k3,cJ),e(cJ,wLr),e(k3,ALr),e(ke,yLr),e(ke,S3),e(S3,IMe),e(IMe,LLr),e(S3,xLr),e(S3,mJ),e(mJ,$Lr),e(S3,kLr),e(ke,SLr),e(ke,R3),e(R3,qMe),e(qMe,RLr),e(R3,BLr),e(R3,fJ),e(fJ,PLr),e(R3,ILr),e(ke,qLr),e(ke,B3),e(B3,NMe),e(NMe,NLr),e(B3,jLr),e(B3,gJ),e(gJ,DLr),e(B3,GLr),e(Dr,OLr),M(P3,Dr,null),b(m,Aqe,_),b(m,Sc,_),e(Sc,I3),e(I3,jMe),M(n7,jMe,null),e(Sc,VLr),e(Sc,DMe),e(DMe,XLr),b(m,yqe,_),b(m,gr,_),M(s7,gr,null),e(gr,zLr),e(gr,Rc),e(Rc,QLr),e(Rc,hJ),e(hJ,WLr),e(Rc,HLr),e(Rc,uJ),e(uJ,ULr),e(Rc,JLr),e(gr,YLr),e(gr,l7),e(l7,KLr),e(l7,GMe),e(GMe,ZLr),e(l7,e8r),e(gr,o8r),e(gr,Gt),M(i7,Gt,null),e(Gt,r8r),e(Gt,OMe),e(OMe,t8r),e(Gt,a8r),e(Gt,Bc),e(Bc,n8r),e(Bc,VMe),e(VMe,s8r),e(Bc,l8r),e(Bc,pJ),e(pJ,i8r),e(Bc,d8r),e(Gt,c8r),M(q3,Gt,null),e(gr,m8r),e(gr,Gr),M(d7,Gr,null),e(Gr,f8r),e(Gr,XMe),e(XMe,g8r),e(Gr,h8r),e(Gr,un),e(un,u8r),e(un,zMe),e(zMe,p8r),e(un,_8r),e(un,QMe),e(QMe,b8r),e(un,F8r),e(un,WMe),e(WMe,v8r),e(un,T8r),e(Gr,M8r),e(Gr,Me),e(Me,N3),e(N3,HMe),e(HMe,E8r),e(N3,C8r),e(N3,_J),e(_J,w8r),e(N3,A8r),e(Me,y8r),e(Me,j3),e(j3,UMe),e(UMe,L8r),e(j3,x8r),e(j3,bJ),e(bJ,$8r),e(j3,k8r),e(Me,S8r),e(Me,D3),e(D3,JMe),e(JMe,R8r),e(D3,B8r),e(D3,FJ),e(FJ,P8r),e(D3,I8r),e(Me,q8r),e(Me,G3),e(G3,YMe),e(YMe,N8r),e(G3,j8r),e(G3,vJ),e(vJ,D8r),e(G3,G8r),e(Me,O8r),e(Me,O3),e(O3,KMe),e(KMe,V8r),e(O3,X8r),e(O3,TJ),e(TJ,z8r),e(O3,Q8r),e(Me,W8r),e(Me,V3),e(V3,ZMe),e(ZMe,H8r),e(V3,U8r),e(V3,MJ),e(MJ,J8r),e(V3,Y8r),e(Me,K8r),e(Me,X3),e(X3,e4e),e(e4e,Z8r),e(X3,exr),e(X3,EJ),e(EJ,oxr),e(X3,rxr),e(Me,txr),e(Me,z3),e(z3,o4e),e(o4e,axr),e(z3,nxr),e(z3,CJ),e(CJ,sxr),e(z3,lxr),e(Me,ixr),e(Me,Q3),e(Q3,r4e),e(r4e,dxr),e(Q3,cxr),e(Q3,wJ),e(wJ,mxr),e(Q3,fxr),e(Me,gxr),e(Me,W3),e(W3,t4e),e(t4e,hxr),e(W3,uxr),e(W3,AJ),e(AJ,pxr),e(W3,_xr),e(Me,bxr),e(Me,H3),e(H3,a4e),e(a4e,Fxr),e(H3,vxr),e(H3,yJ),e(yJ,Txr),e(H3,Mxr),e(Me,Exr),e(Me,U3),e(U3,n4e),e(n4e,Cxr),e(U3,wxr),e(U3,LJ),e(LJ,Axr),e(U3,yxr),e(Gr,Lxr),M(J3,Gr,null),b(m,Lqe,_),b(m,Pc,_),e(Pc,Y3),e(Y3,s4e),M(c7,s4e,null),e(Pc,xxr),e(Pc,l4e),e(l4e,$xr),b(m,xqe,_),b(m,hr,_),M(m7,hr,null),e(hr,kxr),e(hr,Ic),e(Ic,Sxr),e(Ic,xJ),e(xJ,Rxr),e(Ic,Bxr),e(Ic,$J),e($J,Pxr),e(Ic,Ixr),e(hr,qxr),e(hr,f7),e(f7,Nxr),e(f7,i4e),e(i4e,jxr),e(f7,Dxr),e(hr,Gxr),e(hr,Ot),M(g7,Ot,null),e(Ot,Oxr),e(Ot,d4e),e(d4e,Vxr),e(Ot,Xxr),e(Ot,qc),e(qc,zxr),e(qc,c4e),e(c4e,Qxr),e(qc,Wxr),e(qc,kJ),e(kJ,Hxr),e(qc,Uxr),e(Ot,Jxr),M(K3,Ot,null),e(hr,Yxr),e(hr,Or),M(h7,Or,null),e(Or,Kxr),e(Or,m4e),e(m4e,Zxr),e(Or,e7r),e(Or,pn),e(pn,o7r),e(pn,f4e),e(f4e,r7r),e(pn,t7r),e(pn,g4e),e(g4e,a7r),e(pn,n7r),e(pn,h4e),e(h4e,s7r),e(pn,l7r),e(Or,i7r),e(Or,Le),e(Le,Z3),e(Z3,u4e),e(u4e,d7r),e(Z3,c7r),e(Z3,SJ),e(SJ,m7r),e(Z3,f7r),e(Le,g7r),e(Le,ew),e(ew,p4e),e(p4e,h7r),e(ew,u7r),e(ew,RJ),e(RJ,p7r),e(ew,_7r),e(Le,b7r),e(Le,ow),e(ow,_4e),e(_4e,F7r),e(ow,v7r),e(ow,BJ),e(BJ,T7r),e(ow,M7r),e(Le,E7r),e(Le,rw),e(rw,b4e),e(b4e,C7r),e(rw,w7r),e(rw,PJ),e(PJ,A7r),e(rw,y7r),e(Le,L7r),e(Le,tw),e(tw,F4e),e(F4e,x7r),e(tw,$7r),e(tw,IJ),e(IJ,k7r),e(tw,S7r),e(Le,R7r),e(Le,aw),e(aw,v4e),e(v4e,B7r),e(aw,P7r),e(aw,qJ),e(qJ,I7r),e(aw,q7r),e(Le,N7r),e(Le,nw),e(nw,T4e),e(T4e,j7r),e(nw,D7r),e(nw,NJ),e(NJ,G7r),e(nw,O7r),e(Le,V7r),e(Le,sw),e(sw,M4e),e(M4e,X7r),e(sw,z7r),e(sw,jJ),e(jJ,Q7r),e(sw,W7r),e(Le,H7r),e(Le,lw),e(lw,E4e),e(E4e,U7r),e(lw,J7r),e(lw,DJ),e(DJ,Y7r),e(lw,K7r),e(Le,Z7r),e(Le,iw),e(iw,C4e),e(C4e,e9r),e(iw,o9r),e(iw,GJ),e(GJ,r9r),e(iw,t9r),e(Or,a9r),M(dw,Or,null),b(m,$qe,_),b(m,Nc,_),e(Nc,cw),e(cw,w4e),M(u7,w4e,null),e(Nc,n9r),e(Nc,A4e),e(A4e,s9r),b(m,kqe,_),b(m,ur,_),M(p7,ur,null),e(ur,l9r),e(ur,jc),e(jc,i9r),e(jc,OJ),e(OJ,d9r),e(jc,c9r),e(jc,VJ),e(VJ,m9r),e(jc,f9r),e(ur,g9r),e(ur,_7),e(_7,h9r),e(_7,y4e),e(y4e,u9r),e(_7,p9r),e(ur,_9r),e(ur,Vt),M(b7,Vt,null),e(Vt,b9r),e(Vt,L4e),e(L4e,F9r),e(Vt,v9r),e(Vt,Dc),e(Dc,T9r),e(Dc,x4e),e(x4e,M9r),e(Dc,E9r),e(Dc,XJ),e(XJ,C9r),e(Dc,w9r),e(Vt,A9r),M(mw,Vt,null),e(ur,y9r),e(ur,Vr),M(F7,Vr,null),e(Vr,L9r),e(Vr,$4e),e($4e,x9r),e(Vr,$9r),e(Vr,_n),e(_n,k9r),e(_n,k4e),e(k4e,S9r),e(_n,R9r),e(_n,S4e),e(S4e,B9r),e(_n,P9r),e(_n,R4e),e(R4e,I9r),e(_n,q9r),e(Vr,N9r),e(Vr,Se),e(Se,fw),e(fw,B4e),e(B4e,j9r),e(fw,D9r),e(fw,zJ),e(zJ,G9r),e(fw,O9r),e(Se,V9r),e(Se,gw),e(gw,P4e),e(P4e,X9r),e(gw,z9r),e(gw,QJ),e(QJ,Q9r),e(gw,W9r),e(Se,H9r),e(Se,hw),e(hw,I4e),e(I4e,U9r),e(hw,J9r),e(hw,WJ),e(WJ,Y9r),e(hw,K9r),e(Se,Z9r),e(Se,uw),e(uw,q4e),e(q4e,e$r),e(uw,o$r),e(uw,HJ),e(HJ,r$r),e(uw,t$r),e(Se,a$r),e(Se,pw),e(pw,N4e),e(N4e,n$r),e(pw,s$r),e(pw,UJ),e(UJ,l$r),e(pw,i$r),e(Se,d$r),e(Se,_w),e(_w,j4e),e(j4e,c$r),e(_w,m$r),e(_w,JJ),e(JJ,f$r),e(_w,g$r),e(Se,h$r),e(Se,bw),e(bw,D4e),e(D4e,u$r),e(bw,p$r),e(bw,YJ),e(YJ,_$r),e(bw,b$r),e(Se,F$r),e(Se,Fw),e(Fw,G4e),e(G4e,v$r),e(Fw,T$r),e(Fw,KJ),e(KJ,M$r),e(Fw,E$r),e(Se,C$r),e(Se,vw),e(vw,O4e),e(O4e,w$r),e(vw,A$r),e(vw,ZJ),e(ZJ,y$r),e(vw,L$r),e(Vr,x$r),M(Tw,Vr,null),b(m,Sqe,_),b(m,Gc,_),e(Gc,Mw),e(Mw,V4e),M(v7,V4e,null),e(Gc,$$r),e(Gc,X4e),e(X4e,k$r),b(m,Rqe,_),b(m,pr,_),M(T7,pr,null),e(pr,S$r),e(pr,Oc),e(Oc,R$r),e(Oc,eY),e(eY,B$r),e(Oc,P$r),e(Oc,oY),e(oY,I$r),e(Oc,q$r),e(pr,N$r),e(pr,M7),e(M7,j$r),e(M7,z4e),e(z4e,D$r),e(M7,G$r),e(pr,O$r),e(pr,Xt),M(E7,Xt,null),e(Xt,V$r),e(Xt,Q4e),e(Q4e,X$r),e(Xt,z$r),e(Xt,Vc),e(Vc,Q$r),e(Vc,W4e),e(W4e,W$r),e(Vc,H$r),e(Vc,rY),e(rY,U$r),e(Vc,J$r),e(Xt,Y$r),M(Ew,Xt,null),e(pr,K$r),e(pr,Xr),M(C7,Xr,null),e(Xr,Z$r),e(Xr,H4e),e(H4e,ekr),e(Xr,okr),e(Xr,bn),e(bn,rkr),e(bn,U4e),e(U4e,tkr),e(bn,akr),e(bn,J4e),e(J4e,nkr),e(bn,skr),e(bn,Y4e),e(Y4e,lkr),e(bn,ikr),e(Xr,dkr),e(Xr,xe),e(xe,Cw),e(Cw,K4e),e(K4e,ckr),e(Cw,mkr),e(Cw,tY),e(tY,fkr),e(Cw,gkr),e(xe,hkr),e(xe,ww),e(ww,Z4e),e(Z4e,ukr),e(ww,pkr),e(ww,aY),e(aY,_kr),e(ww,bkr),e(xe,Fkr),e(xe,Aw),e(Aw,eEe),e(eEe,vkr),e(Aw,Tkr),e(Aw,nY),e(nY,Mkr),e(Aw,Ekr),e(xe,Ckr),e(xe,yw),e(yw,oEe),e(oEe,wkr),e(yw,Akr),e(yw,sY),e(sY,ykr),e(yw,Lkr),e(xe,xkr),e(xe,Lw),e(Lw,rEe),e(rEe,$kr),e(Lw,kkr),e(Lw,lY),e(lY,Skr),e(Lw,Rkr),e(xe,Bkr),e(xe,xw),e(xw,tEe),e(tEe,Pkr),e(xw,Ikr),e(xw,iY),e(iY,qkr),e(xw,Nkr),e(xe,jkr),e(xe,$w),e($w,aEe),e(aEe,Dkr),e($w,Gkr),e($w,dY),e(dY,Okr),e($w,Vkr),e(xe,Xkr),e(xe,kw),e(kw,nEe),e(nEe,zkr),e(kw,Qkr),e(kw,cY),e(cY,Wkr),e(kw,Hkr),e(xe,Ukr),e(xe,Sw),e(Sw,sEe),e(sEe,Jkr),e(Sw,Ykr),e(Sw,mY),e(mY,Kkr),e(Sw,Zkr),e(xe,eSr),e(xe,Rw),e(Rw,lEe),e(lEe,oSr),e(Rw,rSr),e(Rw,fY),e(fY,tSr),e(Rw,aSr),e(Xr,nSr),M(Bw,Xr,null),b(m,Bqe,_),b(m,Xc,_),e(Xc,Pw),e(Pw,iEe),M(w7,iEe,null),e(Xc,sSr),e(Xc,dEe),e(dEe,lSr),b(m,Pqe,_),b(m,_r,_),M(A7,_r,null),e(_r,iSr),e(_r,zc),e(zc,dSr),e(zc,gY),e(gY,cSr),e(zc,mSr),e(zc,hY),e(hY,fSr),e(zc,gSr),e(_r,hSr),e(_r,y7),e(y7,uSr),e(y7,cEe),e(cEe,pSr),e(y7,_Sr),e(_r,bSr),e(_r,zt),M(L7,zt,null),e(zt,FSr),e(zt,mEe),e(mEe,vSr),e(zt,TSr),e(zt,Qc),e(Qc,MSr),e(Qc,fEe),e(fEe,ESr),e(Qc,CSr),e(Qc,uY),e(uY,wSr),e(Qc,ASr),e(zt,ySr),M(Iw,zt,null),e(_r,LSr),e(_r,zr),M(x7,zr,null),e(zr,xSr),e(zr,gEe),e(gEe,$Sr),e(zr,kSr),e(zr,Fn),e(Fn,SSr),e(Fn,hEe),e(hEe,RSr),e(Fn,BSr),e(Fn,uEe),e(uEe,PSr),e(Fn,ISr),e(Fn,pEe),e(pEe,qSr),e(Fn,NSr),e(zr,jSr),e(zr,$e),e($e,qw),e(qw,_Ee),e(_Ee,DSr),e(qw,GSr),e(qw,pY),e(pY,OSr),e(qw,VSr),e($e,XSr),e($e,Nw),e(Nw,bEe),e(bEe,zSr),e(Nw,QSr),e(Nw,_Y),e(_Y,WSr),e(Nw,HSr),e($e,USr),e($e,jw),e(jw,FEe),e(FEe,JSr),e(jw,YSr),e(jw,bY),e(bY,KSr),e(jw,ZSr),e($e,eRr),e($e,Dw),e(Dw,vEe),e(vEe,oRr),e(Dw,rRr),e(Dw,FY),e(FY,tRr),e(Dw,aRr),e($e,nRr),e($e,Gw),e(Gw,TEe),e(TEe,sRr),e(Gw,lRr),e(Gw,vY),e(vY,iRr),e(Gw,dRr),e($e,cRr),e($e,Ow),e(Ow,MEe),e(MEe,mRr),e(Ow,fRr),e(Ow,TY),e(TY,gRr),e(Ow,hRr),e($e,uRr),e($e,Vw),e(Vw,EEe),e(EEe,pRr),e(Vw,_Rr),e(Vw,MY),e(MY,bRr),e(Vw,FRr),e($e,vRr),e($e,Xw),e(Xw,CEe),e(CEe,TRr),e(Xw,MRr),e(Xw,EY),e(EY,ERr),e(Xw,CRr),e($e,wRr),e($e,zw),e(zw,wEe),e(wEe,ARr),e(zw,yRr),e(zw,CY),e(CY,LRr),e(zw,xRr),e($e,$Rr),e($e,Qw),e(Qw,AEe),e(AEe,kRr),e(Qw,SRr),e(Qw,wY),e(wY,RRr),e(Qw,BRr),e(zr,PRr),M(Ww,zr,null),b(m,Iqe,_),b(m,Wc,_),e(Wc,Hw),e(Hw,yEe),M($7,yEe,null),e(Wc,IRr),e(Wc,LEe),e(LEe,qRr),b(m,qqe,_),b(m,br,_),M(k7,br,null),e(br,NRr),e(br,Hc),e(Hc,jRr),e(Hc,AY),e(AY,DRr),e(Hc,GRr),e(Hc,yY),e(yY,ORr),e(Hc,VRr),e(br,XRr),e(br,S7),e(S7,zRr),e(S7,xEe),e(xEe,QRr),e(S7,WRr),e(br,HRr),e(br,Qt),M(R7,Qt,null),e(Qt,URr),e(Qt,$Ee),e($Ee,JRr),e(Qt,YRr),e(Qt,Uc),e(Uc,KRr),e(Uc,kEe),e(kEe,ZRr),e(Uc,eBr),e(Uc,LY),e(LY,oBr),e(Uc,rBr),e(Qt,tBr),M(Uw,Qt,null),e(br,aBr),e(br,Qr),M(B7,Qr,null),e(Qr,nBr),e(Qr,SEe),e(SEe,sBr),e(Qr,lBr),e(Qr,vn),e(vn,iBr),e(vn,REe),e(REe,dBr),e(vn,cBr),e(vn,BEe),e(BEe,mBr),e(vn,fBr),e(vn,PEe),e(PEe,gBr),e(vn,hBr),e(Qr,uBr),e(Qr,De),e(De,Jw),e(Jw,IEe),e(IEe,pBr),e(Jw,_Br),e(Jw,xY),e(xY,bBr),e(Jw,FBr),e(De,vBr),e(De,Yw),e(Yw,qEe),e(qEe,TBr),e(Yw,MBr),e(Yw,$Y),e($Y,EBr),e(Yw,CBr),e(De,wBr),e(De,Kw),e(Kw,NEe),e(NEe,ABr),e(Kw,yBr),e(Kw,kY),e(kY,LBr),e(Kw,xBr),e(De,$Br),e(De,Zw),e(Zw,jEe),e(jEe,kBr),e(Zw,SBr),e(Zw,SY),e(SY,RBr),e(Zw,BBr),e(De,PBr),e(De,eA),e(eA,DEe),e(DEe,IBr),e(eA,qBr),e(eA,RY),e(RY,NBr),e(eA,jBr),e(De,DBr),e(De,oA),e(oA,GEe),e(GEe,GBr),e(oA,OBr),e(oA,BY),e(BY,VBr),e(oA,XBr),e(De,zBr),e(De,rA),e(rA,OEe),e(OEe,QBr),e(rA,WBr),e(rA,PY),e(PY,HBr),e(rA,UBr),e(De,JBr),e(De,tA),e(tA,VEe),e(VEe,YBr),e(tA,KBr),e(tA,IY),e(IY,ZBr),e(tA,ePr),e(Qr,oPr),M(aA,Qr,null),b(m,Nqe,_),b(m,Jc,_),e(Jc,nA),e(nA,XEe),M(P7,XEe,null),e(Jc,rPr),e(Jc,zEe),e(zEe,tPr),b(m,jqe,_),b(m,Fr,_),M(I7,Fr,null),e(Fr,aPr),e(Fr,Yc),e(Yc,nPr),e(Yc,qY),e(qY,sPr),e(Yc,lPr),e(Yc,NY),e(NY,iPr),e(Yc,dPr),e(Fr,cPr),e(Fr,q7),e(q7,mPr),e(q7,QEe),e(QEe,fPr),e(q7,gPr),e(Fr,hPr),e(Fr,Wt),M(N7,Wt,null),e(Wt,uPr),e(Wt,WEe),e(WEe,pPr),e(Wt,_Pr),e(Wt,Kc),e(Kc,bPr),e(Kc,HEe),e(HEe,FPr),e(Kc,vPr),e(Kc,jY),e(jY,TPr),e(Kc,MPr),e(Wt,EPr),M(sA,Wt,null),e(Fr,CPr),e(Fr,Wr),M(j7,Wr,null),e(Wr,wPr),e(Wr,UEe),e(UEe,APr),e(Wr,yPr),e(Wr,Tn),e(Tn,LPr),e(Tn,JEe),e(JEe,xPr),e(Tn,$Pr),e(Tn,YEe),e(YEe,kPr),e(Tn,SPr),e(Tn,KEe),e(KEe,RPr),e(Tn,BPr),e(Wr,PPr),e(Wr,Ge),e(Ge,lA),e(lA,ZEe),e(ZEe,IPr),e(lA,qPr),e(lA,DY),e(DY,NPr),e(lA,jPr),e(Ge,DPr),e(Ge,iA),e(iA,e5e),e(e5e,GPr),e(iA,OPr),e(iA,GY),e(GY,VPr),e(iA,XPr),e(Ge,zPr),e(Ge,dA),e(dA,o5e),e(o5e,QPr),e(dA,WPr),e(dA,OY),e(OY,HPr),e(dA,UPr),e(Ge,JPr),e(Ge,cA),e(cA,r5e),e(r5e,YPr),e(cA,KPr),e(cA,VY),e(VY,ZPr),e(cA,eIr),e(Ge,oIr),e(Ge,mA),e(mA,t5e),e(t5e,rIr),e(mA,tIr),e(mA,XY),e(XY,aIr),e(mA,nIr),e(Ge,sIr),e(Ge,fA),e(fA,a5e),e(a5e,lIr),e(fA,iIr),e(fA,zY),e(zY,dIr),e(fA,cIr),e(Ge,mIr),e(Ge,gA),e(gA,n5e),e(n5e,fIr),e(gA,gIr),e(gA,QY),e(QY,hIr),e(gA,uIr),e(Ge,pIr),e(Ge,hA),e(hA,s5e),e(s5e,_Ir),e(hA,bIr),e(hA,WY),e(WY,FIr),e(hA,vIr),e(Wr,TIr),M(uA,Wr,null),b(m,Dqe,_),b(m,Zc,_),e(Zc,pA),e(pA,l5e),M(D7,l5e,null),e(Zc,MIr),e(Zc,i5e),e(i5e,EIr),b(m,Gqe,_),b(m,vr,_),M(G7,vr,null),e(vr,CIr),e(vr,em),e(em,wIr),e(em,HY),e(HY,AIr),e(em,yIr),e(em,UY),e(UY,LIr),e(em,xIr),e(vr,$Ir),e(vr,O7),e(O7,kIr),e(O7,d5e),e(d5e,SIr),e(O7,RIr),e(vr,BIr),e(vr,Ht),M(V7,Ht,null),e(Ht,PIr),e(Ht,c5e),e(c5e,IIr),e(Ht,qIr),e(Ht,om),e(om,NIr),e(om,m5e),e(m5e,jIr),e(om,DIr),e(om,JY),e(JY,GIr),e(om,OIr),e(Ht,VIr),M(_A,Ht,null),e(vr,XIr),e(vr,Hr),M(X7,Hr,null),e(Hr,zIr),e(Hr,f5e),e(f5e,QIr),e(Hr,WIr),e(Hr,Mn),e(Mn,HIr),e(Mn,g5e),e(g5e,UIr),e(Mn,JIr),e(Mn,h5e),e(h5e,YIr),e(Mn,KIr),e(Mn,u5e),e(u5e,ZIr),e(Mn,eqr),e(Hr,oqr),e(Hr,p5e),e(p5e,bA),e(bA,_5e),e(_5e,rqr),e(bA,tqr),e(bA,YY),e(YY,aqr),e(bA,nqr),e(Hr,sqr),M(FA,Hr,null),b(m,Oqe,_),b(m,rm,_),e(rm,vA),e(vA,b5e),M(z7,b5e,null),e(rm,lqr),e(rm,F5e),e(F5e,iqr),b(m,Vqe,_),b(m,Tr,_),M(Q7,Tr,null),e(Tr,dqr),e(Tr,tm),e(tm,cqr),e(tm,KY),e(KY,mqr),e(tm,fqr),e(tm,ZY),e(ZY,gqr),e(tm,hqr),e(Tr,uqr),e(Tr,W7),e(W7,pqr),e(W7,v5e),e(v5e,_qr),e(W7,bqr),e(Tr,Fqr),e(Tr,Ut),M(H7,Ut,null),e(Ut,vqr),e(Ut,T5e),e(T5e,Tqr),e(Ut,Mqr),e(Ut,am),e(am,Eqr),e(am,M5e),e(M5e,Cqr),e(am,wqr),e(am,eK),e(eK,Aqr),e(am,yqr),e(Ut,Lqr),M(TA,Ut,null),e(Tr,xqr),e(Tr,Ur),M(U7,Ur,null),e(Ur,$qr),e(Ur,E5e),e(E5e,kqr),e(Ur,Sqr),e(Ur,En),e(En,Rqr),e(En,C5e),e(C5e,Bqr),e(En,Pqr),e(En,w5e),e(w5e,Iqr),e(En,qqr),e(En,A5e),e(A5e,Nqr),e(En,jqr),e(Ur,Dqr),e(Ur,J7),e(J7,MA),e(MA,y5e),e(y5e,Gqr),e(MA,Oqr),e(MA,oK),e(oK,Vqr),e(MA,Xqr),e(J7,zqr),e(J7,EA),e(EA,L5e),e(L5e,Qqr),e(EA,Wqr),e(EA,rK),e(rK,Hqr),e(EA,Uqr),e(Ur,Jqr),M(CA,Ur,null),b(m,Xqe,_),b(m,nm,_),e(nm,wA),e(wA,x5e),M(Y7,x5e,null),e(nm,Yqr),e(nm,$5e),e($5e,Kqr),b(m,zqe,_),b(m,Mr,_),M(K7,Mr,null),e(Mr,Zqr),e(Mr,sm),e(sm,eNr),e(sm,tK),e(tK,oNr),e(sm,rNr),e(sm,aK),e(aK,tNr),e(sm,aNr),e(Mr,nNr),e(Mr,Z7),e(Z7,sNr),e(Z7,k5e),e(k5e,lNr),e(Z7,iNr),e(Mr,dNr),e(Mr,Jt),M(e9,Jt,null),e(Jt,cNr),e(Jt,S5e),e(S5e,mNr),e(Jt,fNr),e(Jt,lm),e(lm,gNr),e(lm,R5e),e(R5e,hNr),e(lm,uNr),e(lm,nK),e(nK,pNr),e(lm,_Nr),e(Jt,bNr),M(AA,Jt,null),e(Mr,FNr),e(Mr,Jr),M(o9,Jr,null),e(Jr,vNr),e(Jr,B5e),e(B5e,TNr),e(Jr,MNr),e(Jr,Cn),e(Cn,ENr),e(Cn,P5e),e(P5e,CNr),e(Cn,wNr),e(Cn,I5e),e(I5e,ANr),e(Cn,yNr),e(Cn,q5e),e(q5e,LNr),e(Cn,xNr),e(Jr,$Nr),e(Jr,N5e),e(N5e,yA),e(yA,j5e),e(j5e,kNr),e(yA,SNr),e(yA,sK),e(sK,RNr),e(yA,BNr),e(Jr,PNr),M(LA,Jr,null),Qqe=!0},p(m,[_]){const r9={};_&2&&(r9.$$scope={dirty:_,ctx:m}),pm.$set(r9);const D5e={};_&2&&(D5e.$$scope={dirty:_,ctx:m}),pg.$set(D5e);const G5e={};_&2&&(G5e.$$scope={dirty:_,ctx:m}),Ug.$set(G5e);const O5e={};_&2&&(O5e.$$scope={dirty:_,ctx:m}),Eh.$set(O5e);const t9={};_&2&&(t9.$$scope={dirty:_,ctx:m}),Ch.$set(t9);const V5e={};_&2&&(V5e.$$scope={dirty:_,ctx:m}),Oh.$set(V5e);const wn={};_&2&&(wn.$$scope={dirty:_,ctx:m}),Vh.$set(wn);const X5e={};_&2&&(X5e.$$scope={dirty:_,ctx:m}),Qh.$set(X5e);const z5e={};_&2&&(z5e.$$scope={dirty:_,ctx:m}),Ip.$set(z5e);const Q5e={};_&2&&(Q5e.$$scope={dirty:_,ctx:m}),Np.$set(Q5e);const a9={};_&2&&(a9.$$scope={dirty:_,ctx:m}),A_.$set(a9);const W5e={};_&2&&(W5e.$$scope={dirty:_,ctx:m}),L_.$set(W5e);const n9={};_&2&&(n9.$$scope={dirty:_,ctx:m}),fb.$set(n9);const H5e={};_&2&&(H5e.$$scope={dirty:_,ctx:m}),hb.$set(H5e);const s9={};_&2&&(s9.$$scope={dirty:_,ctx:m}),Yb.$set(s9);const U5e={};_&2&&(U5e.$$scope={dirty:_,ctx:m}),Zb.$set(U5e);const J5e={};_&2&&(J5e.$$scope={dirty:_,ctx:m}),b2.$set(J5e);const Y5e={};_&2&&(Y5e.$$scope={dirty:_,ctx:m}),v2.$set(Y5e);const im={};_&2&&(im.$$scope={dirty:_,ctx:m}),uF.$set(im);const K5e={};_&2&&(K5e.$$scope={dirty:_,ctx:m}),_F.$set(K5e);const Z5e={};_&2&&(Z5e.$$scope={dirty:_,ctx:m}),HF.$set(Z5e);const eCe={};_&2&&(eCe.$$scope={dirty:_,ctx:m}),JF.$set(eCe);const l9={};_&2&&(l9.$$scope={dirty:_,ctx:m}),tv.$set(l9);const oCe={};_&2&&(oCe.$$scope={dirty:_,ctx:m}),nv.$set(oCe);const rCe={};_&2&&(rCe.$$scope={dirty:_,ctx:m}),Dv.$set(rCe);const tCe={};_&2&&(tCe.$$scope={dirty:_,ctx:m}),Ov.$set(tCe);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:m}),x1.$set(Kr);const i9={};_&2&&(i9.$$scope={dirty:_,ctx:m}),k1.$set(i9);const aCe={};_&2&&(aCe.$$scope={dirty:_,ctx:m}),B1.$set(aCe);const d9={};_&2&&(d9.$$scope={dirty:_,ctx:m}),I1.$set(d9);const nCe={};_&2&&(nCe.$$scope={dirty:_,ctx:m}),U1.$set(nCe);const Zr={};_&2&&(Zr.$$scope={dirty:_,ctx:m}),Y1.$set(Zr);const sCe={};_&2&&(sCe.$$scope={dirty:_,ctx:m}),eT.$set(sCe);const dm={};_&2&&(dm.$$scope={dirty:_,ctx:m}),rT.$set(dm);const lCe={};_&2&&(lCe.$$scope={dirty:_,ctx:m}),fT.$set(lCe);const iCe={};_&2&&(iCe.$$scope={dirty:_,ctx:m}),hT.$set(iCe);const y={};_&2&&(y.$$scope={dirty:_,ctx:m}),vT.$set(y);const xA={};_&2&&(xA.$$scope={dirty:_,ctx:m}),MT.$set(xA);const dCe={};_&2&&(dCe.$$scope={dirty:_,ctx:m}),ST.$set(dCe);const cCe={};_&2&&(cCe.$$scope={dirty:_,ctx:m}),BT.$set(cCe);const $A={};_&2&&($A.$$scope={dirty:_,ctx:m}),NT.$set($A);const mCe={};_&2&&(mCe.$$scope={dirty:_,ctx:m}),DT.$set(mCe);const fCe={};_&2&&(fCe.$$scope={dirty:_,ctx:m}),QT.$set(fCe);const kA={};_&2&&(kA.$$scope={dirty:_,ctx:m}),HT.$set(kA);const gCe={};_&2&&(gCe.$$scope={dirty:_,ctx:m}),ZT.$set(gCe);const hCe={};_&2&&(hCe.$$scope={dirty:_,ctx:m}),oM.$set(hCe);const SA={};_&2&&(SA.$$scope={dirty:_,ctx:m}),nM.$set(SA);const uCe={};_&2&&(uCe.$$scope={dirty:_,ctx:m}),lM.$set(uCe);const pCe={};_&2&&(pCe.$$scope={dirty:_,ctx:m}),cM.$set(pCe);const RA={};_&2&&(RA.$$scope={dirty:_,ctx:m}),fM.$set(RA);const _Ce={};_&2&&(_Ce.$$scope={dirty:_,ctx:m}),bM.$set(_Ce);const bCe={};_&2&&(bCe.$$scope={dirty:_,ctx:m}),vM.$set(bCe);const BA={};_&2&&(BA.$$scope={dirty:_,ctx:m}),EM.$set(BA);const FCe={};_&2&&(FCe.$$scope={dirty:_,ctx:m}),wM.$set(FCe);const vCe={};_&2&&(vCe.$$scope={dirty:_,ctx:m}),p4.$set(vCe);const PA={};_&2&&(PA.$$scope={dirty:_,ctx:m}),b4.$set(PA);const TCe={};_&2&&(TCe.$$scope={dirty:_,ctx:m}),O4.$set(TCe);const MCe={};_&2&&(MCe.$$scope={dirty:_,ctx:m}),X4.$set(MCe);const IA={};_&2&&(IA.$$scope={dirty:_,ctx:m}),tE.$set(IA);const ECe={};_&2&&(ECe.$$scope={dirty:_,ctx:m}),nE.$set(ECe);const CCe={};_&2&&(CCe.$$scope={dirty:_,ctx:m}),dE.$set(CCe);const qA={};_&2&&(qA.$$scope={dirty:_,ctx:m}),mE.$set(qA);const wCe={};_&2&&(wCe.$$scope={dirty:_,ctx:m}),SE.$set(wCe);const ACe={};_&2&&(ACe.$$scope={dirty:_,ctx:m}),BE.$set(ACe);const NA={};_&2&&(NA.$$scope={dirty:_,ctx:m}),zE.$set(NA);const yCe={};_&2&&(yCe.$$scope={dirty:_,ctx:m}),WE.$set(yCe);const LCe={};_&2&&(LCe.$$scope={dirty:_,ctx:m}),v5.$set(LCe);const jA={};_&2&&(jA.$$scope={dirty:_,ctx:m}),M5.$set(jA);const xCe={};_&2&&(xCe.$$scope={dirty:_,ctx:m}),D5.$set(xCe);const $Ce={};_&2&&($Ce.$$scope={dirty:_,ctx:m}),O5.$set($Ce);const DA={};_&2&&(DA.$$scope={dirty:_,ctx:m}),z5.$set(DA);const kCe={};_&2&&(kCe.$$scope={dirty:_,ctx:m}),W5.$set(kCe);const SCe={};_&2&&(SCe.$$scope={dirty:_,ctx:m}),U5.$set(SCe);const GA={};_&2&&(GA.$$scope={dirty:_,ctx:m}),Y5.$set(GA);const RCe={};_&2&&(RCe.$$scope={dirty:_,ctx:m}),bC.$set(RCe);const BCe={};_&2&&(BCe.$$scope={dirty:_,ctx:m}),vC.$set(BCe);const OA={};_&2&&(OA.$$scope={dirty:_,ctx:m}),GC.$set(OA);const PCe={};_&2&&(PCe.$$scope={dirty:_,ctx:m}),VC.$set(PCe);const ICe={};_&2&&(ICe.$$scope={dirty:_,ctx:m}),zC.$set(ICe);const VA={};_&2&&(VA.$$scope={dirty:_,ctx:m}),WC.$set(VA);const qCe={};_&2&&(qCe.$$scope={dirty:_,ctx:m}),UC.$set(qCe);const NCe={};_&2&&(NCe.$$scope={dirty:_,ctx:m}),YC.$set(NCe);const XA={};_&2&&(XA.$$scope={dirty:_,ctx:m}),E3.$set(XA);const jCe={};_&2&&(jCe.$$scope={dirty:_,ctx:m}),w3.$set(jCe);const DCe={};_&2&&(DCe.$$scope={dirty:_,ctx:m}),P3.$set(DCe);const zA={};_&2&&(zA.$$scope={dirty:_,ctx:m}),q3.$set(zA);const GCe={};_&2&&(GCe.$$scope={dirty:_,ctx:m}),J3.$set(GCe);const OCe={};_&2&&(OCe.$$scope={dirty:_,ctx:m}),K3.$set(OCe);const QA={};_&2&&(QA.$$scope={dirty:_,ctx:m}),dw.$set(QA);const VCe={};_&2&&(VCe.$$scope={dirty:_,ctx:m}),mw.$set(VCe);const XCe={};_&2&&(XCe.$$scope={dirty:_,ctx:m}),Tw.$set(XCe);const WA={};_&2&&(WA.$$scope={dirty:_,ctx:m}),Ew.$set(WA);const zCe={};_&2&&(zCe.$$scope={dirty:_,ctx:m}),Bw.$set(zCe);const QCe={};_&2&&(QCe.$$scope={dirty:_,ctx:m}),Iw.$set(QCe);const HA={};_&2&&(HA.$$scope={dirty:_,ctx:m}),Ww.$set(HA);const WCe={};_&2&&(WCe.$$scope={dirty:_,ctx:m}),Uw.$set(WCe);const HCe={};_&2&&(HCe.$$scope={dirty:_,ctx:m}),aA.$set(HCe);const UA={};_&2&&(UA.$$scope={dirty:_,ctx:m}),sA.$set(UA);const UCe={};_&2&&(UCe.$$scope={dirty:_,ctx:m}),uA.$set(UCe);const JCe={};_&2&&(JCe.$$scope={dirty:_,ctx:m}),_A.$set(JCe);const JA={};_&2&&(JA.$$scope={dirty:_,ctx:m}),FA.$set(JA);const YCe={};_&2&&(YCe.$$scope={dirty:_,ctx:m}),TA.$set(YCe);const KCe={};_&2&&(KCe.$$scope={dirty:_,ctx:m}),CA.$set(KCe);const YA={};_&2&&(YA.$$scope={dirty:_,ctx:m}),AA.$set(YA);const ZCe={};_&2&&(ZCe.$$scope={dirty:_,ctx:m}),LA.$set(ZCe)},i(m){Qqe||(E(d.$$.fragment,m),E(Ma.$$.fragment,m),E(Y0.$$.fragment,m),E(K0.$$.fragment,m),E(pm.$$.fragment,m),E(Z0.$$.fragment,m),E(ey.$$.fragment,m),E(ty.$$.fragment,m),E(pg.$$.fragment,m),E(ay.$$.fragment,m),E(ny.$$.fragment,m),E(sy.$$.fragment,m),E(dy.$$.fragment,m),E(Ug.$$.fragment,m),E(cy.$$.fragment,m),E(my.$$.fragment,m),E(fy.$$.fragment,m),E(uy.$$.fragment,m),E(Eh.$$.fragment,m),E(Ch.$$.fragment,m),E(py.$$.fragment,m),E(_y.$$.fragment,m),E(by.$$.fragment,m),E(Ty.$$.fragment,m),E(Oh.$$.fragment,m),E(Vh.$$.fragment,m),E(My.$$.fragment,m),E(Ey.$$.fragment,m),E(Cy.$$.fragment,m),E(Ay.$$.fragment,m),E(Qh.$$.fragment,m),E(yy.$$.fragment,m),E(Ip.$$.fragment,m),E(Ly.$$.fragment,m),E(xy.$$.fragment,m),E(ky.$$.fragment,m),E(Np.$$.fragment,m),E(Sy.$$.fragment,m),E(A_.$$.fragment,m),E(Ry.$$.fragment,m),E(By.$$.fragment,m),E(Iy.$$.fragment,m),E(L_.$$.fragment,m),E(qy.$$.fragment,m),E(fb.$$.fragment,m),E(Ny.$$.fragment,m),E(jy.$$.fragment,m),E(Gy.$$.fragment,m),E(hb.$$.fragment,m),E(Oy.$$.fragment,m),E(Yb.$$.fragment,m),E(Vy.$$.fragment,m),E(Xy.$$.fragment,m),E(Qy.$$.fragment,m),E(Zb.$$.fragment,m),E(Wy.$$.fragment,m),E(b2.$$.fragment,m),E(Hy.$$.fragment,m),E(Uy.$$.fragment,m),E(Yy.$$.fragment,m),E(v2.$$.fragment,m),E(Ky.$$.fragment,m),E(uF.$$.fragment,m),E(Zy.$$.fragment,m),E(eL.$$.fragment,m),E(rL.$$.fragment,m),E(_F.$$.fragment,m),E(tL.$$.fragment,m),E(HF.$$.fragment,m),E(aL.$$.fragment,m),E(nL.$$.fragment,m),E(lL.$$.fragment,m),E(JF.$$.fragment,m),E(iL.$$.fragment,m),E(tv.$$.fragment,m),E(dL.$$.fragment,m),E(cL.$$.fragment,m),E(fL.$$.fragment,m),E(nv.$$.fragment,m),E(gL.$$.fragment,m),E(Dv.$$.fragment,m),E(hL.$$.fragment,m),E(uL.$$.fragment,m),E(_L.$$.fragment,m),E(Ov.$$.fragment,m),E(bL.$$.fragment,m),E(x1.$$.fragment,m),E(FL.$$.fragment,m),E(vL.$$.fragment,m),E(ML.$$.fragment,m),E(k1.$$.fragment,m),E(EL.$$.fragment,m),E(B1.$$.fragment,m),E(CL.$$.fragment,m),E(wL.$$.fragment,m),E(yL.$$.fragment,m),E(I1.$$.fragment,m),E(LL.$$.fragment,m),E(U1.$$.fragment,m),E(xL.$$.fragment,m),E($L.$$.fragment,m),E(SL.$$.fragment,m),E(Y1.$$.fragment,m),E(RL.$$.fragment,m),E(eT.$$.fragment,m),E(BL.$$.fragment,m),E(PL.$$.fragment,m),E(qL.$$.fragment,m),E(rT.$$.fragment,m),E(NL.$$.fragment,m),E(fT.$$.fragment,m),E(jL.$$.fragment,m),E(DL.$$.fragment,m),E(OL.$$.fragment,m),E(hT.$$.fragment,m),E(VL.$$.fragment,m),E(vT.$$.fragment,m),E(XL.$$.fragment,m),E(zL.$$.fragment,m),E(WL.$$.fragment,m),E(MT.$$.fragment,m),E(HL.$$.fragment,m),E(ST.$$.fragment,m),E(UL.$$.fragment,m),E(JL.$$.fragment,m),E(KL.$$.fragment,m),E(BT.$$.fragment,m),E(ZL.$$.fragment,m),E(NT.$$.fragment,m),E(o8.$$.fragment,m),E(r8.$$.fragment,m),E(a8.$$.fragment,m),E(DT.$$.fragment,m),E(n8.$$.fragment,m),E(QT.$$.fragment,m),E(s8.$$.fragment,m),E(l8.$$.fragment,m),E(d8.$$.fragment,m),E(HT.$$.fragment,m),E(c8.$$.fragment,m),E(ZT.$$.fragment,m),E(m8.$$.fragment,m),E(f8.$$.fragment,m),E(h8.$$.fragment,m),E(oM.$$.fragment,m),E(u8.$$.fragment,m),E(nM.$$.fragment,m),E(_8.$$.fragment,m),E(b8.$$.fragment,m),E(v8.$$.fragment,m),E(lM.$$.fragment,m),E(T8.$$.fragment,m),E(cM.$$.fragment,m),E(M8.$$.fragment,m),E(E8.$$.fragment,m),E(w8.$$.fragment,m),E(fM.$$.fragment,m),E(A8.$$.fragment,m),E(bM.$$.fragment,m),E(y8.$$.fragment,m),E(L8.$$.fragment,m),E($8.$$.fragment,m),E(vM.$$.fragment,m),E(k8.$$.fragment,m),E(EM.$$.fragment,m),E(S8.$$.fragment,m),E(R8.$$.fragment,m),E(P8.$$.fragment,m),E(wM.$$.fragment,m),E(I8.$$.fragment,m),E(p4.$$.fragment,m),E(q8.$$.fragment,m),E(N8.$$.fragment,m),E(D8.$$.fragment,m),E(b4.$$.fragment,m),E(G8.$$.fragment,m),E(O4.$$.fragment,m),E(O8.$$.fragment,m),E(V8.$$.fragment,m),E(z8.$$.fragment,m),E(X4.$$.fragment,m),E(Q8.$$.fragment,m),E(tE.$$.fragment,m),E(W8.$$.fragment,m),E(H8.$$.fragment,m),E(J8.$$.fragment,m),E(nE.$$.fragment,m),E(Y8.$$.fragment,m),E(dE.$$.fragment,m),E(K8.$$.fragment,m),E(Z8.$$.fragment,m),E(ox.$$.fragment,m),E(mE.$$.fragment,m),E(rx.$$.fragment,m),E(SE.$$.fragment,m),E(tx.$$.fragment,m),E(ax.$$.fragment,m),E(sx.$$.fragment,m),E(BE.$$.fragment,m),E(lx.$$.fragment,m),E(zE.$$.fragment,m),E(ix.$$.fragment,m),E(dx.$$.fragment,m),E(mx.$$.fragment,m),E(WE.$$.fragment,m),E(fx.$$.fragment,m),E(v5.$$.fragment,m),E(gx.$$.fragment,m),E(hx.$$.fragment,m),E(px.$$.fragment,m),E(M5.$$.fragment,m),E(_x.$$.fragment,m),E(D5.$$.fragment,m),E(bx.$$.fragment,m),E(Fx.$$.fragment,m),E(Tx.$$.fragment,m),E(O5.$$.fragment,m),E(Mx.$$.fragment,m),E(z5.$$.fragment,m),E(Cx.$$.fragment,m),E(wx.$$.fragment,m),E(yx.$$.fragment,m),E(W5.$$.fragment,m),E(Lx.$$.fragment,m),E(U5.$$.fragment,m),E(xx.$$.fragment,m),E($x.$$.fragment,m),E(Sx.$$.fragment,m),E(Y5.$$.fragment,m),E(Rx.$$.fragment,m),E(bC.$$.fragment,m),E(Bx.$$.fragment,m),E(Px.$$.fragment,m),E(qx.$$.fragment,m),E(vC.$$.fragment,m),E(Nx.$$.fragment,m),E(GC.$$.fragment,m),E(jx.$$.fragment,m),E(Dx.$$.fragment,m),E(Ox.$$.fragment,m),E(VC.$$.fragment,m),E(Vx.$$.fragment,m),E(zC.$$.fragment,m),E(Xx.$$.fragment,m),E(zx.$$.fragment,m),E(Wx.$$.fragment,m),E(WC.$$.fragment,m),E(Hx.$$.fragment,m),E(UC.$$.fragment,m),E(Ux.$$.fragment,m),E(Jx.$$.fragment,m),E(Kx.$$.fragment,m),E(YC.$$.fragment,m),E(Zx.$$.fragment,m),E(E3.$$.fragment,m),E(e7.$$.fragment,m),E(o7.$$.fragment,m),E(t7.$$.fragment,m),E(w3.$$.fragment,m),E(a7.$$.fragment,m),E(P3.$$.fragment,m),E(n7.$$.fragment,m),E(s7.$$.fragment,m),E(i7.$$.fragment,m),E(q3.$$.fragment,m),E(d7.$$.fragment,m),E(J3.$$.fragment,m),E(c7.$$.fragment,m),E(m7.$$.fragment,m),E(g7.$$.fragment,m),E(K3.$$.fragment,m),E(h7.$$.fragment,m),E(dw.$$.fragment,m),E(u7.$$.fragment,m),E(p7.$$.fragment,m),E(b7.$$.fragment,m),E(mw.$$.fragment,m),E(F7.$$.fragment,m),E(Tw.$$.fragment,m),E(v7.$$.fragment,m),E(T7.$$.fragment,m),E(E7.$$.fragment,m),E(Ew.$$.fragment,m),E(C7.$$.fragment,m),E(Bw.$$.fragment,m),E(w7.$$.fragment,m),E(A7.$$.fragment,m),E(L7.$$.fragment,m),E(Iw.$$.fragment,m),E(x7.$$.fragment,m),E(Ww.$$.fragment,m),E($7.$$.fragment,m),E(k7.$$.fragment,m),E(R7.$$.fragment,m),E(Uw.$$.fragment,m),E(B7.$$.fragment,m),E(aA.$$.fragment,m),E(P7.$$.fragment,m),E(I7.$$.fragment,m),E(N7.$$.fragment,m),E(sA.$$.fragment,m),E(j7.$$.fragment,m),E(uA.$$.fragment,m),E(D7.$$.fragment,m),E(G7.$$.fragment,m),E(V7.$$.fragment,m),E(_A.$$.fragment,m),E(X7.$$.fragment,m),E(FA.$$.fragment,m),E(z7.$$.fragment,m),E(Q7.$$.fragment,m),E(H7.$$.fragment,m),E(TA.$$.fragment,m),E(U7.$$.fragment,m),E(CA.$$.fragment,m),E(Y7.$$.fragment,m),E(K7.$$.fragment,m),E(e9.$$.fragment,m),E(AA.$$.fragment,m),E(o9.$$.fragment,m),E(LA.$$.fragment,m),Qqe=!0)},o(m){C(d.$$.fragment,m),C(Ma.$$.fragment,m),C(Y0.$$.fragment,m),C(K0.$$.fragment,m),C(pm.$$.fragment,m),C(Z0.$$.fragment,m),C(ey.$$.fragment,m),C(ty.$$.fragment,m),C(pg.$$.fragment,m),C(ay.$$.fragment,m),C(ny.$$.fragment,m),C(sy.$$.fragment,m),C(dy.$$.fragment,m),C(Ug.$$.fragment,m),C(cy.$$.fragment,m),C(my.$$.fragment,m),C(fy.$$.fragment,m),C(uy.$$.fragment,m),C(Eh.$$.fragment,m),C(Ch.$$.fragment,m),C(py.$$.fragment,m),C(_y.$$.fragment,m),C(by.$$.fragment,m),C(Ty.$$.fragment,m),C(Oh.$$.fragment,m),C(Vh.$$.fragment,m),C(My.$$.fragment,m),C(Ey.$$.fragment,m),C(Cy.$$.fragment,m),C(Ay.$$.fragment,m),C(Qh.$$.fragment,m),C(yy.$$.fragment,m),C(Ip.$$.fragment,m),C(Ly.$$.fragment,m),C(xy.$$.fragment,m),C(ky.$$.fragment,m),C(Np.$$.fragment,m),C(Sy.$$.fragment,m),C(A_.$$.fragment,m),C(Ry.$$.fragment,m),C(By.$$.fragment,m),C(Iy.$$.fragment,m),C(L_.$$.fragment,m),C(qy.$$.fragment,m),C(fb.$$.fragment,m),C(Ny.$$.fragment,m),C(jy.$$.fragment,m),C(Gy.$$.fragment,m),C(hb.$$.fragment,m),C(Oy.$$.fragment,m),C(Yb.$$.fragment,m),C(Vy.$$.fragment,m),C(Xy.$$.fragment,m),C(Qy.$$.fragment,m),C(Zb.$$.fragment,m),C(Wy.$$.fragment,m),C(b2.$$.fragment,m),C(Hy.$$.fragment,m),C(Uy.$$.fragment,m),C(Yy.$$.fragment,m),C(v2.$$.fragment,m),C(Ky.$$.fragment,m),C(uF.$$.fragment,m),C(Zy.$$.fragment,m),C(eL.$$.fragment,m),C(rL.$$.fragment,m),C(_F.$$.fragment,m),C(tL.$$.fragment,m),C(HF.$$.fragment,m),C(aL.$$.fragment,m),C(nL.$$.fragment,m),C(lL.$$.fragment,m),C(JF.$$.fragment,m),C(iL.$$.fragment,m),C(tv.$$.fragment,m),C(dL.$$.fragment,m),C(cL.$$.fragment,m),C(fL.$$.fragment,m),C(nv.$$.fragment,m),C(gL.$$.fragment,m),C(Dv.$$.fragment,m),C(hL.$$.fragment,m),C(uL.$$.fragment,m),C(_L.$$.fragment,m),C(Ov.$$.fragment,m),C(bL.$$.fragment,m),C(x1.$$.fragment,m),C(FL.$$.fragment,m),C(vL.$$.fragment,m),C(ML.$$.fragment,m),C(k1.$$.fragment,m),C(EL.$$.fragment,m),C(B1.$$.fragment,m),C(CL.$$.fragment,m),C(wL.$$.fragment,m),C(yL.$$.fragment,m),C(I1.$$.fragment,m),C(LL.$$.fragment,m),C(U1.$$.fragment,m),C(xL.$$.fragment,m),C($L.$$.fragment,m),C(SL.$$.fragment,m),C(Y1.$$.fragment,m),C(RL.$$.fragment,m),C(eT.$$.fragment,m),C(BL.$$.fragment,m),C(PL.$$.fragment,m),C(qL.$$.fragment,m),C(rT.$$.fragment,m),C(NL.$$.fragment,m),C(fT.$$.fragment,m),C(jL.$$.fragment,m),C(DL.$$.fragment,m),C(OL.$$.fragment,m),C(hT.$$.fragment,m),C(VL.$$.fragment,m),C(vT.$$.fragment,m),C(XL.$$.fragment,m),C(zL.$$.fragment,m),C(WL.$$.fragment,m),C(MT.$$.fragment,m),C(HL.$$.fragment,m),C(ST.$$.fragment,m),C(UL.$$.fragment,m),C(JL.$$.fragment,m),C(KL.$$.fragment,m),C(BT.$$.fragment,m),C(ZL.$$.fragment,m),C(NT.$$.fragment,m),C(o8.$$.fragment,m),C(r8.$$.fragment,m),C(a8.$$.fragment,m),C(DT.$$.fragment,m),C(n8.$$.fragment,m),C(QT.$$.fragment,m),C(s8.$$.fragment,m),C(l8.$$.fragment,m),C(d8.$$.fragment,m),C(HT.$$.fragment,m),C(c8.$$.fragment,m),C(ZT.$$.fragment,m),C(m8.$$.fragment,m),C(f8.$$.fragment,m),C(h8.$$.fragment,m),C(oM.$$.fragment,m),C(u8.$$.fragment,m),C(nM.$$.fragment,m),C(_8.$$.fragment,m),C(b8.$$.fragment,m),C(v8.$$.fragment,m),C(lM.$$.fragment,m),C(T8.$$.fragment,m),C(cM.$$.fragment,m),C(M8.$$.fragment,m),C(E8.$$.fragment,m),C(w8.$$.fragment,m),C(fM.$$.fragment,m),C(A8.$$.fragment,m),C(bM.$$.fragment,m),C(y8.$$.fragment,m),C(L8.$$.fragment,m),C($8.$$.fragment,m),C(vM.$$.fragment,m),C(k8.$$.fragment,m),C(EM.$$.fragment,m),C(S8.$$.fragment,m),C(R8.$$.fragment,m),C(P8.$$.fragment,m),C(wM.$$.fragment,m),C(I8.$$.fragment,m),C(p4.$$.fragment,m),C(q8.$$.fragment,m),C(N8.$$.fragment,m),C(D8.$$.fragment,m),C(b4.$$.fragment,m),C(G8.$$.fragment,m),C(O4.$$.fragment,m),C(O8.$$.fragment,m),C(V8.$$.fragment,m),C(z8.$$.fragment,m),C(X4.$$.fragment,m),C(Q8.$$.fragment,m),C(tE.$$.fragment,m),C(W8.$$.fragment,m),C(H8.$$.fragment,m),C(J8.$$.fragment,m),C(nE.$$.fragment,m),C(Y8.$$.fragment,m),C(dE.$$.fragment,m),C(K8.$$.fragment,m),C(Z8.$$.fragment,m),C(ox.$$.fragment,m),C(mE.$$.fragment,m),C(rx.$$.fragment,m),C(SE.$$.fragment,m),C(tx.$$.fragment,m),C(ax.$$.fragment,m),C(sx.$$.fragment,m),C(BE.$$.fragment,m),C(lx.$$.fragment,m),C(zE.$$.fragment,m),C(ix.$$.fragment,m),C(dx.$$.fragment,m),C(mx.$$.fragment,m),C(WE.$$.fragment,m),C(fx.$$.fragment,m),C(v5.$$.fragment,m),C(gx.$$.fragment,m),C(hx.$$.fragment,m),C(px.$$.fragment,m),C(M5.$$.fragment,m),C(_x.$$.fragment,m),C(D5.$$.fragment,m),C(bx.$$.fragment,m),C(Fx.$$.fragment,m),C(Tx.$$.fragment,m),C(O5.$$.fragment,m),C(Mx.$$.fragment,m),C(z5.$$.fragment,m),C(Cx.$$.fragment,m),C(wx.$$.fragment,m),C(yx.$$.fragment,m),C(W5.$$.fragment,m),C(Lx.$$.fragment,m),C(U5.$$.fragment,m),C(xx.$$.fragment,m),C($x.$$.fragment,m),C(Sx.$$.fragment,m),C(Y5.$$.fragment,m),C(Rx.$$.fragment,m),C(bC.$$.fragment,m),C(Bx.$$.fragment,m),C(Px.$$.fragment,m),C(qx.$$.fragment,m),C(vC.$$.fragment,m),C(Nx.$$.fragment,m),C(GC.$$.fragment,m),C(jx.$$.fragment,m),C(Dx.$$.fragment,m),C(Ox.$$.fragment,m),C(VC.$$.fragment,m),C(Vx.$$.fragment,m),C(zC.$$.fragment,m),C(Xx.$$.fragment,m),C(zx.$$.fragment,m),C(Wx.$$.fragment,m),C(WC.$$.fragment,m),C(Hx.$$.fragment,m),C(UC.$$.fragment,m),C(Ux.$$.fragment,m),C(Jx.$$.fragment,m),C(Kx.$$.fragment,m),C(YC.$$.fragment,m),C(Zx.$$.fragment,m),C(E3.$$.fragment,m),C(e7.$$.fragment,m),C(o7.$$.fragment,m),C(t7.$$.fragment,m),C(w3.$$.fragment,m),C(a7.$$.fragment,m),C(P3.$$.fragment,m),C(n7.$$.fragment,m),C(s7.$$.fragment,m),C(i7.$$.fragment,m),C(q3.$$.fragment,m),C(d7.$$.fragment,m),C(J3.$$.fragment,m),C(c7.$$.fragment,m),C(m7.$$.fragment,m),C(g7.$$.fragment,m),C(K3.$$.fragment,m),C(h7.$$.fragment,m),C(dw.$$.fragment,m),C(u7.$$.fragment,m),C(p7.$$.fragment,m),C(b7.$$.fragment,m),C(mw.$$.fragment,m),C(F7.$$.fragment,m),C(Tw.$$.fragment,m),C(v7.$$.fragment,m),C(T7.$$.fragment,m),C(E7.$$.fragment,m),C(Ew.$$.fragment,m),C(C7.$$.fragment,m),C(Bw.$$.fragment,m),C(w7.$$.fragment,m),C(A7.$$.fragment,m),C(L7.$$.fragment,m),C(Iw.$$.fragment,m),C(x7.$$.fragment,m),C(Ww.$$.fragment,m),C($7.$$.fragment,m),C(k7.$$.fragment,m),C(R7.$$.fragment,m),C(Uw.$$.fragment,m),C(B7.$$.fragment,m),C(aA.$$.fragment,m),C(P7.$$.fragment,m),C(I7.$$.fragment,m),C(N7.$$.fragment,m),C(sA.$$.fragment,m),C(j7.$$.fragment,m),C(uA.$$.fragment,m),C(D7.$$.fragment,m),C(G7.$$.fragment,m),C(V7.$$.fragment,m),C(_A.$$.fragment,m),C(X7.$$.fragment,m),C(FA.$$.fragment,m),C(z7.$$.fragment,m),C(Q7.$$.fragment,m),C(H7.$$.fragment,m),C(TA.$$.fragment,m),C(U7.$$.fragment,m),C(CA.$$.fragment,m),C(Y7.$$.fragment,m),C(K7.$$.fragment,m),C(e9.$$.fragment,m),C(AA.$$.fragment,m),C(o9.$$.fragment,m),C(LA.$$.fragment,m),Qqe=!1},d(m){t(g),m&&t(F),m&&t(u),w(d),m&&t(mm),m&&t(et),m&&t(qe),m&&t(Xe),m&&t(gm),w(Ma,m),m&&t(ze),m&&t(Ae),m&&t(Eo),m&&t(Ea),m&&t(VPe),m&&t(hi),w(Y0),m&&t(XPe),m&&t($n),m&&t(zPe),w(K0,m),m&&t(QPe),m&&t(F$),m&&t(WPe),w(pm,m),m&&t(HPe),m&&t(ui),w(Z0),m&&t(UPe),m&&t(Co),w(ey),w(ty),w(pg),w(ay),m&&t(JPe),m&&t(_i),w(ny),m&&t(YPe),m&&t(wo),w(sy),w(dy),w(Ug),w(cy),m&&t(KPe),m&&t(bi),w(my),m&&t(ZPe),m&&t(Ao),w(fy),w(uy),w(Eh),w(Ch),w(py),m&&t(eIe),m&&t(Fi),w(_y),m&&t(oIe),m&&t(yo),w(by),w(Ty),w(Oh),w(Vh),w(My),m&&t(rIe),m&&t(Ti),w(Ey),m&&t(tIe),m&&t(Lo),w(Cy),w(Ay),w(Qh),w(yy),w(Ip),m&&t(aIe),m&&t(Ci),w(Ly),m&&t(nIe),m&&t(xo),w(xy),w(ky),w(Np),w(Sy),w(A_),m&&t(sIe),m&&t(yi),w(Ry),m&&t(lIe),m&&t($o),w(By),w(Iy),w(L_),w(qy),w(fb),m&&t(iIe),m&&t($i),w(Ny),m&&t(dIe),m&&t(ko),w(jy),w(Gy),w(hb),w(Oy),w(Yb),m&&t(cIe),m&&t(Ri),w(Vy),m&&t(mIe),m&&t(So),w(Xy),w(Qy),w(Zb),w(Wy),w(b2),m&&t(fIe),m&&t(Ii),w(Hy),m&&t(gIe),m&&t(Ro),w(Uy),w(Yy),w(v2),w(Ky),w(uF),m&&t(hIe),m&&t(ji),w(Zy),m&&t(uIe),m&&t(Bo),w(eL),w(rL),w(_F),w(tL),w(HF),m&&t(pIe),m&&t(Oi),w(aL),m&&t(_Ie),m&&t(Po),w(nL),w(lL),w(JF),w(iL),w(tv),m&&t(bIe),m&&t(zi),w(dL),m&&t(FIe),m&&t(Io),w(cL),w(fL),w(nv),w(gL),w(Dv),m&&t(vIe),m&&t(Hi),w(hL),m&&t(TIe),m&&t(qo),w(uL),w(_L),w(Ov),w(bL),w(x1),m&&t(MIe),m&&t(Yi),w(FL),m&&t(EIe),m&&t(No),w(vL),w(ML),w(k1),w(EL),w(B1),m&&t(CIe),m&&t(ed),w(CL),m&&t(wIe),m&&t(jo),w(wL),w(yL),w(I1),w(LL),w(U1),m&&t(AIe),m&&t(td),w(xL),m&&t(yIe),m&&t(Do),w($L),w(SL),w(Y1),w(RL),w(eT),m&&t(LIe),m&&t(sd),w(BL),m&&t(xIe),m&&t(Go),w(PL),w(qL),w(rT),w(NL),w(fT),m&&t($Ie),m&&t(dd),w(jL),m&&t(kIe),m&&t(Oo),w(DL),w(OL),w(hT),w(VL),w(vT),m&&t(SIe),m&&t(fd),w(XL),m&&t(RIe),m&&t(Vo),w(zL),w(WL),w(MT),w(HL),w(ST),m&&t(BIe),m&&t(ud),w(UL),m&&t(PIe),m&&t(Xo),w(JL),w(KL),w(BT),w(ZL),w(NT),m&&t(IIe),m&&t(bd),w(o8),m&&t(qIe),m&&t(zo),w(r8),w(a8),w(DT),w(n8),w(QT),m&&t(NIe),m&&t(Td),w(s8),m&&t(jIe),m&&t(Qo),w(l8),w(d8),w(HT),w(c8),w(ZT),m&&t(DIe),m&&t(wd),w(m8),m&&t(GIe),m&&t(Wo),w(f8),w(h8),w(oM),w(u8),w(nM),m&&t(OIe),m&&t(Ld),w(_8),m&&t(VIe),m&&t(Ho),w(b8),w(v8),w(lM),w(T8),w(cM),m&&t(XIe),m&&t(kd),w(M8),m&&t(zIe),m&&t(Uo),w(E8),w(w8),w(fM),w(A8),w(bM),m&&t(QIe),m&&t(Bd),w(y8),m&&t(WIe),m&&t(Jo),w(L8),w($8),w(vM),w(k8),w(EM),m&&t(HIe),m&&t(qd),w(S8),m&&t(UIe),m&&t(Yo),w(R8),w(P8),w(wM),w(I8),w(p4),m&&t(JIe),m&&t(Dd),w(q8),m&&t(YIe),m&&t(Ko),w(N8),w(D8),w(b4),w(G8),w(O4),m&&t(KIe),m&&t(Vd),w(O8),m&&t(ZIe),m&&t(Zo),w(V8),w(z8),w(X4),w(Q8),w(tE),m&&t(eqe),m&&t(Qd),w(W8),m&&t(oqe),m&&t(er),w(H8),w(J8),w(nE),w(Y8),w(dE),m&&t(rqe),m&&t(Jd),w(K8),m&&t(tqe),m&&t(or),w(Z8),w(ox),w(mE),w(rx),w(SE),m&&t(aqe),m&&t(Zd),w(tx),m&&t(nqe),m&&t(rr),w(ax),w(sx),w(BE),w(lx),w(zE),m&&t(sqe),m&&t(rc),w(ix),m&&t(lqe),m&&t(tr),w(dx),w(mx),w(WE),w(fx),w(v5),m&&t(iqe),m&&t(nc),w(gx),m&&t(dqe),m&&t(ar),w(hx),w(px),w(M5),w(_x),w(D5),m&&t(cqe),m&&t(ic),w(bx),m&&t(mqe),m&&t(nr),w(Fx),w(Tx),w(O5),w(Mx),w(z5),m&&t(fqe),m&&t(mc),w(Cx),m&&t(gqe),m&&t(sr),w(wx),w(yx),w(W5),w(Lx),w(U5),m&&t(hqe),m&&t(hc),w(xx),m&&t(uqe),m&&t(lr),w($x),w(Sx),w(Y5),w(Rx),w(bC),m&&t(pqe),m&&t(_c),w(Bx),m&&t(_qe),m&&t(ir),w(Px),w(qx),w(vC),w(Nx),w(GC),m&&t(bqe),m&&t(vc),w(jx),m&&t(Fqe),m&&t(dr),w(Dx),w(Ox),w(VC),w(Vx),w(zC),m&&t(vqe),m&&t(Ec),w(Xx),m&&t(Tqe),m&&t(cr),w(zx),w(Wx),w(WC),w(Hx),w(UC),m&&t(Mqe),m&&t(Ac),w(Ux),m&&t(Eqe),m&&t(mr),w(Jx),w(Kx),w(YC),w(Zx),w(E3),m&&t(Cqe),m&&t(xc),w(e7),m&&t(wqe),m&&t(fr),w(o7),w(t7),w(w3),w(a7),w(P3),m&&t(Aqe),m&&t(Sc),w(n7),m&&t(yqe),m&&t(gr),w(s7),w(i7),w(q3),w(d7),w(J3),m&&t(Lqe),m&&t(Pc),w(c7),m&&t(xqe),m&&t(hr),w(m7),w(g7),w(K3),w(h7),w(dw),m&&t($qe),m&&t(Nc),w(u7),m&&t(kqe),m&&t(ur),w(p7),w(b7),w(mw),w(F7),w(Tw),m&&t(Sqe),m&&t(Gc),w(v7),m&&t(Rqe),m&&t(pr),w(T7),w(E7),w(Ew),w(C7),w(Bw),m&&t(Bqe),m&&t(Xc),w(w7),m&&t(Pqe),m&&t(_r),w(A7),w(L7),w(Iw),w(x7),w(Ww),m&&t(Iqe),m&&t(Wc),w($7),m&&t(qqe),m&&t(br),w(k7),w(R7),w(Uw),w(B7),w(aA),m&&t(Nqe),m&&t(Jc),w(P7),m&&t(jqe),m&&t(Fr),w(I7),w(N7),w(sA),w(j7),w(uA),m&&t(Dqe),m&&t(Zc),w(D7),m&&t(Gqe),m&&t(vr),w(G7),w(V7),w(_A),w(X7),w(FA),m&&t(Oqe),m&&t(rm),w(z7),m&&t(Vqe),m&&t(Tr),w(Q7),w(H7),w(TA),w(U7),w(CA),m&&t(Xqe),m&&t(nm),w(Y7),m&&t(zqe),m&&t(Mr),w(K7),w(e9),w(AA),w(o9),w(LA)}}}const c8t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function m8t(L){return myt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class b8t extends lyt{constructor(g){super();iyt(this,g,m8t,d8t,dyt,{})}}export{b8t as default,c8t as metadata};
