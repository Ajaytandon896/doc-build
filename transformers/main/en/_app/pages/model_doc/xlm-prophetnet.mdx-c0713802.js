import{S as Sn,i as In,s as Fn,e as o,k as p,w as m,t as i,M as Gn,c as r,d as s,m as d,a as n,x as u,h as l,b as a,F as t,g as c,y as f,L as Bn,q as g,o as _,B as k,v as Rn}from"../../chunks/vendor-6b77c823.js";import{D as y}from"../../chunks/Docstring-1088f2fb.js";import{C as Gt}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as B}from"../../chunks/IconCopyLink-7a11ce68.js";function On(zr){let x,Bt,E,R,pt,pe,Ts,dt,Ds,Rt,X,ht,Cs,As,de,Ss,Is,Ot,j,O,ct,he,Fs,mt,Gs,Ht,H,Bs,ce,Rs,Os,Vt,We,Hs,Wt,Ue,Vs,Ut,Ye,ut,Ws,Yt,V,Us,me,Ys,Js,Jt,z,W,ft,ue,Qs,gt,Zs,Qt,T,fe,Ks,D,eo,Je,to,so,ge,oo,ro,Zt,C,U,_t,_e,no,kt,ao,Kt,v,ke,io,M,lo,Qe,po,ho,Ze,co,mo,ve,uo,fo,go,be,_o,Ke,ko,vo,bo,q,Pe,Po,vt,wo,No,we,et,Lo,bt,$o,Mo,tt,yo,Pt,qo,xo,Y,Ne,Eo,wt,Xo,jo,J,Le,zo,Nt,To,Do,Q,$e,Co,Me,Ao,Lt,So,Io,es,A,Z,$t,ye,Fo,Mt,Go,ts,P,qe,Bo,xe,Ro,st,Oo,Ho,Vo,yt,Wo,Uo,Ee,ss,S,K,qt,Xe,Yo,xt,Jo,os,w,je,Qo,ze,Zo,ot,Ko,er,tr,Et,sr,or,Te,rs,I,ee,Xt,De,rr,jt,nr,ns,N,Ce,ar,Ae,ir,rt,lr,pr,dr,zt,hr,cr,Se,as,F,te,Tt,Ie,mr,Dt,ur,is,L,Fe,fr,Ge,gr,nt,_r,kr,vr,Ct,br,Pr,Be,ls,G,se,At,Re,wr,St,Nr,ps,$,Oe,Lr,He,$r,at,Mr,yr,qr,It,xr,Er,Ve,ds;return pe=new B({}),he=new B({}),ue=new B({}),fe=new y({props:{name:"class transformers.XLMProphetNetConfig",anchor:"transformers.XLMProphetNetConfig",parameters:[{name:"activation_dropout",val:" = 0.1"},{name:"activation_function",val:" = 'gelu'"},{name:"vocab_size",val:" = 30522"},{name:"hidden_size",val:" = 1024"},{name:"encoder_ffn_dim",val:" = 4096"},{name:"num_encoder_layers",val:" = 12"},{name:"num_encoder_attention_heads",val:" = 16"},{name:"decoder_ffn_dim",val:" = 4096"},{name:"num_decoder_layers",val:" = 12"},{name:"num_decoder_attention_heads",val:" = 16"},{name:"attention_dropout",val:" = 0.1"},{name:"dropout",val:" = 0.1"},{name:"max_position_embeddings",val:" = 512"},{name:"init_std",val:" = 0.02"},{name:"is_encoder_decoder",val:" = True"},{name:"add_cross_attention",val:" = True"},{name:"decoder_start_token_id",val:" = 0"},{name:"ngram",val:" = 2"},{name:"num_buckets",val:" = 32"},{name:"relative_max_distance",val:" = 128"},{name:"disable_ngram_loss",val:" = False"},{name:"eps",val:" = 0.0"},{name:"use_cache",val:" = True"},{name:"pad_token_id",val:" = 0"},{name:"bos_token_id",val:" = 1"},{name:"eos_token_id",val:" = 2"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/xlm_prophetnet/configuration_xlm_prophetnet.py#L29"}}),_e=new B({}),ke=new y({props:{name:"class transformers.XLMProphetNetTokenizer",anchor:"transformers.XLMProphetNetTokenizer",parameters:[{name:"vocab_file",val:""},{name:"bos_token",val:" = '[SEP]'"},{name:"eos_token",val:" = '[SEP]'"},{name:"sep_token",val:" = '[SEP]'"},{name:"unk_token",val:" = '[UNK]'"},{name:"pad_token",val:" = '[PAD]'"},{name:"cls_token",val:" = '[CLS]'"},{name:"mask_token",val:" = '[MASK]'"},{name:"sp_model_kwargs",val:": typing.Union[typing.Dict[str, typing.Any], NoneType] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.XLMProphetNetTokenizer.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
Path to the vocabulary file.`,name:"vocab_file"},{anchor:"transformers.XLMProphetNetTokenizer.bos_token",description:`<strong>bos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The beginning of sequence token that was used during pretraining. Can be used a sequence classifier token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the beginning of
sequence. The token used is the <code>cls_token</code>.</p>

					</div>`,name:"bos_token"},{anchor:"transformers.XLMProphetNetTokenizer.eos_token",description:`<strong>eos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The end of sequence token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the end of sequence.
The token used is the <code>sep_token</code>.</p>

					</div>`,name:"eos_token"},{anchor:"transformers.XLMProphetNetTokenizer.sep_token",description:`<strong>sep_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The separator token, which is used when building a sequence from multiple sequences, e.g. two sequences for
sequence classification or for a text and a question for question answering. It is also used as the last
token of a sequence built with special tokens.`,name:"sep_token"},{anchor:"transformers.XLMProphetNetTokenizer.cls_token",description:`<strong>cls_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The classifier token which is used when doing sequence classification (classification of the whole sequence
instead of per-token classification). It is the first token of the sequence when built with special tokens.`,name:"cls_token"},{anchor:"transformers.XLMProphetNetTokenizer.unk_token",description:`<strong>unk_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;unk&gt;&quot;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.XLMProphetNetTokenizer.pad_token",description:`<strong>pad_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;pad&gt;&quot;</code>) &#x2014;
The token used for padding, for example when batching sequences of different lengths.`,name:"pad_token"},{anchor:"transformers.XLMProphetNetTokenizer.mask_token",description:`<strong>mask_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;mask&gt;&quot;</code>) &#x2014;
The token used for masking values. This is the token used when training this model with masked language
modeling. This is the token which the model will try to predict.`,name:"mask_token"},{anchor:"transformers.XLMProphetNetTokenizer.additional_special_tokens",description:`<strong>additional_special_tokens</strong> (<code>List[str]</code>, <em>optional</em>, defaults to <code>[&quot;&lt;s&gt;NOTUSED&quot;, &quot;&lt;/s&gt;NOTUSED&quot;]</code>) &#x2014;
Additional special tokens used by the tokenizer.`,name:"additional_special_tokens"},{anchor:"transformers.XLMProphetNetTokenizer.sp_model_kwargs",description:`<strong>sp_model_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Will be passed to the <code>SentencePieceProcessor.__init__()</code> method. The <a href="https://github.com/google/sentencepiece/tree/master/python" rel="nofollow">Python wrapper for
SentencePiece</a> can be used, among other things,
to set:</p>
<ul>
<li>
<p><code>enable_sampling</code>: Enable subword regularization.</p>
</li>
<li>
<p><code>nbest_size</code>: Sampling parameters for unigram. Invalid for BPE-Dropout.</p>
<ul>
<li><code>nbest_size = {0,1}</code>: No sampling is performed.</li>
<li><code>nbest_size &gt; 1</code>: samples from the nbest_size results.</li>
<li><code>nbest_size &lt; 0</code>: assuming that nbest_size is infinite and samples from the all hypothesis (lattice)
using forward-filtering-and-backward-sampling algorithm.</li>
</ul>
</li>
<li>
<p><code>alpha</code>: Smoothing parameter for unigram sampling, and dropout probability of merge operations for
BPE-dropout.</p>
</li>
</ul>`,name:"sp_model_kwargs"},{anchor:"transformers.XLMProphetNetTokenizer.sp_model",description:`<strong>sp_model</strong> (<code>SentencePieceProcessor</code>) &#x2014;
The <em>SentencePiece</em> processor that is used for every conversion (string, tokens and IDs).`,name:"sp_model"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/xlm_prophetnet/tokenization_xlm_prophetnet.py#L57"}}),Pe=new y({props:{name:"build_inputs_with_special_tokens",anchor:"transformers.XLMProphetNetTokenizer.build_inputs_with_special_tokens",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],parametersDescription:[{anchor:"transformers.XLMProphetNetTokenizer.build_inputs_with_special_tokens.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs to which the special tokens will be added`,name:"token_ids_0"},{anchor:"transformers.XLMProphetNetTokenizer.build_inputs_with_special_tokens.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/xlm_prophetnet/tokenization_xlm_prophetnet.py#L314",returnDescription:`
<p>list of <a href="../glossary#input-ids">input IDs</a> with the appropriate special tokens.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),Ne=new y({props:{name:"convert_tokens_to_string",anchor:"transformers.XLMProphetNetTokenizer.convert_tokens_to_string",parameters:[{name:"tokens",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/xlm_prophetnet/tokenization_xlm_prophetnet.py#L292"}}),Le=new y({props:{name:"create_token_type_ids_from_sequences",anchor:"transformers.XLMProphetNetTokenizer.create_token_type_ids_from_sequences",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],parametersDescription:[{anchor:"transformers.XLMProphetNetTokenizer.create_token_type_ids_from_sequences.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.XLMProphetNetTokenizer.create_token_type_ids_from_sequences.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/xlm_prophetnet/tokenization_xlm_prophetnet.py#L241",returnDescription:`
<p>List of zeros.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),$e=new y({props:{name:"get_special_tokens_mask",anchor:"transformers.XLMProphetNetTokenizer.get_special_tokens_mask",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"},{name:"already_has_special_tokens",val:": bool = False"}],parametersDescription:[{anchor:"transformers.XLMProphetNetTokenizer.get_special_tokens_mask.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.XLMProphetNetTokenizer.get_special_tokens_mask.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"},{anchor:"transformers.XLMProphetNetTokenizer.get_special_tokens_mask.already_has_special_tokens",description:`<strong>already_has_special_tokens</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the token list is already formatted with special tokens for the model.`,name:"already_has_special_tokens"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/xlm_prophetnet/tokenization_xlm_prophetnet.py#L213",returnDescription:`
<p>A list of integers in the range [0, 1]: 1 for a special token, 0 for a sequence token.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),ye=new B({}),qe=new y({props:{name:"class transformers.XLMProphetNetModel",anchor:"transformers.XLMProphetNetModel",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/xlm_prophetnet/modeling_xlm_prophetnet.py#L86"}}),Ee=new Gt({props:{code:`from transformers import XLMProphetNetTokenizer, XLMProphetNetModel

tokenizer = XLMProphetNetTokenizer.from_pretrained("microsoft/xprophetnet-large-wiki100-cased")
model = XLMProphetNetModel.from_pretrained("microsoft/xprophetnet-large-wiki100-cased")

input_ids = tokenizer(
    "Studies have been shown that owning a dog is good for you", return_tensors="pt"
).input_ids  # Batch size 1
decoder_input_ids = tokenizer("Studies show that", return_tensors="pt").input_ids  # Batch size 1
outputs = model(input_ids=input_ids, decoder_input_ids=decoder_input_ids)

last_hidden_states = outputs.last_hidden_state  # main stream hidden states
last_hidden_states_ngram = outputs.last_hidden_state_ngram  # predict hidden states`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> XLMProphetNetTokenizer, XLMProphetNetModel

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = XLMProphetNetTokenizer.from_pretrained(<span class="hljs-string">&quot;microsoft/xprophetnet-large-wiki100-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = XLMProphetNetModel.from_pretrained(<span class="hljs-string">&quot;microsoft/xprophetnet-large-wiki100-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>input_ids = tokenizer(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;Studies have been shown that owning a dog is good for you&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>).input_ids  <span class="hljs-comment"># Batch size 1</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>decoder_input_ids = tokenizer(<span class="hljs-string">&quot;Studies show that&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>).input_ids  <span class="hljs-comment"># Batch size 1</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(input_ids=input_ids, decoder_input_ids=decoder_input_ids)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state  <span class="hljs-comment"># main stream hidden states</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states_ngram = outputs.last_hidden_state_ngram  <span class="hljs-comment"># predict hidden states</span>`}}),Xe=new B({}),je=new y({props:{name:"class transformers.XLMProphetNetEncoder",anchor:"transformers.XLMProphetNetEncoder",parameters:[{name:"config",val:": ProphetNetConfig"},{name:"word_embeddings",val:": Embedding = None"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/xlm_prophetnet/modeling_xlm_prophetnet.py#L38"}}),Te=new Gt({props:{code:`from transformers import XLMProphetNetTokenizer, XLMProphetNetEncoder
import torch

tokenizer = XLMProphetNetTokenizer.from_pretrained("microsoft/xprophetnet-large-wiki100-cased")
model = XLMProphetNetEncoder.from_pretrained("patrickvonplaten/xprophetnet-large-uncased-standalone")
assert model.config.is_decoder, f"{model.__class__} has to be configured as a decoder."
inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> XLMProphetNetTokenizer, XLMProphetNetEncoder
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = XLMProphetNetTokenizer.from_pretrained(<span class="hljs-string">&quot;microsoft/xprophetnet-large-wiki100-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = XLMProphetNetEncoder.from_pretrained(<span class="hljs-string">&quot;patrickvonplaten/xprophetnet-large-uncased-standalone&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> model.config.is_decoder, <span class="hljs-string">f&quot;<span class="hljs-subst">{model.__class__}</span> has to be configured as a decoder.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state`}}),De=new B({}),Ce=new y({props:{name:"class transformers.XLMProphetNetDecoder",anchor:"transformers.XLMProphetNetDecoder",parameters:[{name:"config",val:": ProphetNetConfig"},{name:"word_embeddings",val:": Embedding = None"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/xlm_prophetnet/modeling_xlm_prophetnet.py#L61"}}),Se=new Gt({props:{code:`from transformers import XLMProphetNetTokenizer, XLMProphetNetDecoder
import torch

tokenizer = XLMProphetNetTokenizer.from_pretrained("microsoft/xprophetnet-large-wiki100-cased")
model = XLMProphetNetDecoder.from_pretrained(
    "patrickvonplaten/xprophetnet-large-uncased-standalone", add_cross_attention=False
)
assert model.config.is_decoder, f"{model.__class__} has to be configured as a decoder."
inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> XLMProphetNetTokenizer, XLMProphetNetDecoder
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = XLMProphetNetTokenizer.from_pretrained(<span class="hljs-string">&quot;microsoft/xprophetnet-large-wiki100-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = XLMProphetNetDecoder.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;patrickvonplaten/xprophetnet-large-uncased-standalone&quot;</span>, add_cross_attention=<span class="hljs-literal">False</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> model.config.is_decoder, <span class="hljs-string">f&quot;<span class="hljs-subst">{model.__class__}</span> has to be configured as a decoder.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state`}}),Ie=new B({}),Fe=new y({props:{name:"class transformers.XLMProphetNetForConditionalGeneration",anchor:"transformers.XLMProphetNetForConditionalGeneration",parameters:[{name:"config",val:": ProphetNetConfig"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/xlm_prophetnet/modeling_xlm_prophetnet.py#L112"}}),Be=new Gt({props:{code:`from transformers import XLMProphetNetTokenizer, XLMProphetNetForConditionalGeneration

tokenizer = XLMProphetNetTokenizer.from_pretrained("microsoft/xprophetnet-large-wiki100-cased")
model = XLMProphetNetForConditionalGeneration.from_pretrained("microsoft/xprophetnet-large-wiki100-cased")

input_ids = tokenizer(
    "Studies have been shown that owning a dog is good for you", return_tensors="pt"
).input_ids  # Batch size 1
decoder_input_ids = tokenizer("Studies show that", return_tensors="pt").input_ids  # Batch size 1
outputs = model(input_ids=input_ids, decoder_input_ids=decoder_input_ids)

logits_next_token = outputs.logits  # logits to predict next token as usual
logits_ngram_next_tokens = outputs.logits_ngram  # logits to predict 2nd, 3rd, ... next tokens`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> XLMProphetNetTokenizer, XLMProphetNetForConditionalGeneration

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = XLMProphetNetTokenizer.from_pretrained(<span class="hljs-string">&quot;microsoft/xprophetnet-large-wiki100-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = XLMProphetNetForConditionalGeneration.from_pretrained(<span class="hljs-string">&quot;microsoft/xprophetnet-large-wiki100-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>input_ids = tokenizer(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;Studies have been shown that owning a dog is good for you&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>).input_ids  <span class="hljs-comment"># Batch size 1</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>decoder_input_ids = tokenizer(<span class="hljs-string">&quot;Studies show that&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>).input_ids  <span class="hljs-comment"># Batch size 1</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(input_ids=input_ids, decoder_input_ids=decoder_input_ids)

<span class="hljs-meta">&gt;&gt;&gt; </span>logits_next_token = outputs.logits  <span class="hljs-comment"># logits to predict next token as usual</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>logits_ngram_next_tokens = outputs.logits_ngram  <span class="hljs-comment"># logits to predict 2nd, 3rd, ... next tokens</span>`}}),Re=new B({}),Oe=new y({props:{name:"class transformers.XLMProphetNetForCausalLM",anchor:"transformers.XLMProphetNetForCausalLM",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/xlm_prophetnet/modeling_xlm_prophetnet.py#L138"}}),Ve=new Gt({props:{code:`from transformers import XLMProphetNetTokenizer, XLMProphetNetForCausalLM
import torch

tokenizer = XLMProphetNetTokenizer.from_pretrained("microsoft/xprophetnet-large-wiki100-cased")
model = XLMProphetNetForCausalLM.from_pretrained("microsoft/xprophetnet-large-wiki100-cased")
assert model.config.is_decoder, f"{model.__class__} has to be configured as a decoder."
inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
outputs = model(**inputs)

logits = outputs.logits

# Model can also be used with EncoderDecoder framework
from transformers import EncoderDecoderModel, XLMProphetNetTokenizer, XLMRobertaTokenizer
import torch

tokenizer_enc = XLMRobertaTokenizer.from_pretrained("xlm-roberta-large")
tokenizer_dec = XLMProphetNetTokenizer.from_pretrained("microsoft/xprophetnet-large-wiki100-cased")
model = EncoderDecoderModel.from_encoder_decoder_pretrained(
    "xlm-roberta-large", "microsoft/xprophetnet-large-wiki100-cased"
)

ARTICLE = (
    "the us state department said wednesday it had received no "
    "formal word from bolivia that it was expelling the us ambassador there "
    "but said the charges made against him are \`\` baseless ."
)
input_ids = tokenizer_enc(ARTICLE, return_tensors="pt").input_ids
labels = tokenizer_dec("us rejects charges against its ambassador in bolivia", return_tensors="pt").input_ids
outputs = model(input_ids=input_ids, decoder_input_ids=labels[:, :-1], labels=labels[:, 1:])

loss = outputs.loss`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> XLMProphetNetTokenizer, XLMProphetNetForCausalLM
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = XLMProphetNetTokenizer.from_pretrained(<span class="hljs-string">&quot;microsoft/xprophetnet-large-wiki100-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = XLMProphetNetForCausalLM.from_pretrained(<span class="hljs-string">&quot;microsoft/xprophetnet-large-wiki100-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> model.config.is_decoder, <span class="hljs-string">f&quot;<span class="hljs-subst">{model.__class__}</span> has to be configured as a decoder.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Model can also be used with EncoderDecoder framework</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> EncoderDecoderModel, XLMProphetNetTokenizer, XLMRobertaTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer_enc = XLMRobertaTokenizer.from_pretrained(<span class="hljs-string">&quot;xlm-roberta-large&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer_dec = XLMProphetNetTokenizer.from_pretrained(<span class="hljs-string">&quot;microsoft/xprophetnet-large-wiki100-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = EncoderDecoderModel.from_encoder_decoder_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;xlm-roberta-large&quot;</span>, <span class="hljs-string">&quot;microsoft/xprophetnet-large-wiki100-cased&quot;</span>
<span class="hljs-meta">... </span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>ARTICLE = (
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;the us state department said wednesday it had received no &quot;</span>
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;formal word from bolivia that it was expelling the us ambassador there &quot;</span>
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;but said the charges made against him are \`\` baseless .&quot;</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>input_ids = tokenizer_enc(ARTICLE, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>).input_ids
<span class="hljs-meta">&gt;&gt;&gt; </span>labels = tokenizer_dec(<span class="hljs-string">&quot;us rejects charges against its ambassador in bolivia&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>).input_ids
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(input_ids=input_ids, decoder_input_ids=labels[:, :-<span class="hljs-number">1</span>], labels=labels[:, <span class="hljs-number">1</span>:])

<span class="hljs-meta">&gt;&gt;&gt; </span>loss = outputs.loss`}}),{c(){x=o("meta"),Bt=p(),E=o("h1"),R=o("a"),pt=o("span"),m(pe.$$.fragment),Ts=p(),dt=o("span"),Ds=i("XLM-ProphetNet"),Rt=p(),X=o("p"),ht=o("strong"),Cs=i("DISCLAIMER:"),As=i(" If you see something strange, file a "),de=o("a"),Ss=i("Github Issue"),Is=i(` and assign
@patrickvonplaten`),Ot=p(),j=o("h2"),O=o("a"),ct=o("span"),m(he.$$.fragment),Fs=p(),mt=o("span"),Gs=i("Overview"),Ht=p(),H=o("p"),Bs=i("The XLM-ProphetNet model was proposed in "),ce=o("a"),Rs=i("ProphetNet: Predicting Future N-gram for Sequence-to-Sequence Pre-training,"),Os=i(` by Yu Yan, Weizhen Qi, Yeyun Gong, Dayiheng Liu, Nan Duan, Jiusheng Chen, Ruofei
Zhang, Ming Zhou on 13 Jan, 2020.`),Vt=p(),We=o("p"),Hs=i(`XLM-ProphetNet is an encoder-decoder model and can predict n-future tokens for \u201Cngram\u201D language modeling instead of
just the next token. Its architecture is identical to ProhpetNet, but the model was trained on the multi-lingual
\u201Cwiki100\u201D Wikipedia dump.`),Wt=p(),Ue=o("p"),Vs=i("The abstract from the paper is the following:"),Ut=p(),Ye=o("p"),ut=o("em"),Ws=i(`In this paper, we present a new sequence-to-sequence pretraining model called ProphetNet, which introduces a novel
self-supervised objective named future n-gram prediction and the proposed n-stream self-attention mechanism. Instead of
the optimization of one-step ahead prediction in traditional sequence-to-sequence model, the ProphetNet is optimized by
n-step ahead prediction which predicts the next n tokens simultaneously based on previous context tokens at each time
step. The future n-gram prediction explicitly encourages the model to plan for the future tokens and prevent
overfitting on strong local correlations. We pre-train ProphetNet using a base scale dataset (16GB) and a large scale
dataset (160GB) respectively. Then we conduct experiments on CNN/DailyMail, Gigaword, and SQuAD 1.1 benchmarks for
abstractive summarization and question generation tasks. Experimental results show that ProphetNet achieves new
state-of-the-art results on all these datasets compared to the models using the same scale pretraining corpus.`),Yt=p(),V=o("p"),Us=i("The Authors\u2019 code can be found "),me=o("a"),Ys=i("here"),Js=i("."),Jt=p(),z=o("h2"),W=o("a"),ft=o("span"),m(ue.$$.fragment),Qs=p(),gt=o("span"),Zs=i("XLMProphetNetConfig"),Qt=p(),T=o("div"),m(fe.$$.fragment),Ks=p(),D=o("p"),eo=i("This class overrides "),Je=o("a"),to=i("ProphetNetConfig"),so=i(`. Please check the superclass for the appropriate documentation alongside
usage examples. Instantiating a configuration with the defaults will yield a similar configuration to that of the
XLMProphetNet
`),ge=o("a"),oo=i("microsoft/xprophetnet-large-wiki100-cased"),ro=i(`
architecture.`),Zt=p(),C=o("h2"),U=o("a"),_t=o("span"),m(_e.$$.fragment),no=p(),kt=o("span"),ao=i("XLMProphetNetTokenizer"),Kt=p(),v=o("div"),m(ke.$$.fragment),io=p(),M=o("p"),lo=i("Adapted from "),Qe=o("a"),po=i("RobertaTokenizer"),ho=i(" and "),Ze=o("a"),co=i("XLNetTokenizer"),mo=i(`. Based on
`),ve=o("a"),uo=i("SentencePiece"),fo=i("."),go=p(),be=o("p"),_o=i("This tokenizer inherits from "),Ke=o("a"),ko=i("PreTrainedTokenizer"),vo=i(` which contains most of the main methods. Users should refer to
this superclass for more information regarding those methods.`),bo=p(),q=o("div"),m(Pe.$$.fragment),Po=p(),vt=o("p"),wo=i(`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. A XLMProphetNet sequence has the following format:`),No=p(),we=o("ul"),et=o("li"),Lo=i("single sequence: "),bt=o("code"),$o=i("X [SEP]"),Mo=p(),tt=o("li"),yo=i("pair of sequences: "),Pt=o("code"),qo=i("A [SEP] B [SEP]"),xo=p(),Y=o("div"),m(Ne.$$.fragment),Eo=p(),wt=o("p"),Xo=i("Converts a sequence of tokens (strings for sub-words) in a single string."),jo=p(),J=o("div"),m(Le.$$.fragment),zo=p(),Nt=o("p"),To=i(`Create a mask from the two sequences passed to be used in a sequence-pair classification task. XLMProphetNet
does not make use of token type ids, therefore a list of zeros is returned.`),Do=p(),Q=o("div"),m($e.$$.fragment),Co=p(),Me=o("p"),Ao=i(`Retrieve sequence ids from a token list that has no special tokens added. This method is called when adding
special tokens using the tokenizer `),Lt=o("code"),So=i("prepare_for_model"),Io=i(" method."),es=p(),A=o("h2"),Z=o("a"),$t=o("span"),m(ye.$$.fragment),Fo=p(),Mt=o("span"),Go=i("XLMProphetNetModel"),ts=p(),P=o("div"),m(qe.$$.fragment),Bo=p(),xe=o("p"),Ro=i("This class overrides "),st=o("a"),Oo=i("ProphetNetModel"),Ho=i(`. Please check the superclass for the appropriate documentation alongside
usage examples.`),Vo=p(),yt=o("p"),Wo=i("Example:"),Uo=p(),m(Ee.$$.fragment),ss=p(),S=o("h2"),K=o("a"),qt=o("span"),m(Xe.$$.fragment),Yo=p(),xt=o("span"),Jo=i("XLMProphetNetEncoder"),os=p(),w=o("div"),m(je.$$.fragment),Qo=p(),ze=o("p"),Zo=i("This class overrides "),ot=o("a"),Ko=i("ProphetNetEncoder"),er=i(`. Please check the superclass for the appropriate documentation alongside
usage examples.`),tr=p(),Et=o("p"),sr=i("Example:"),or=p(),m(Te.$$.fragment),rs=p(),I=o("h2"),ee=o("a"),Xt=o("span"),m(De.$$.fragment),rr=p(),jt=o("span"),nr=i("XLMProphetNetDecoder"),ns=p(),N=o("div"),m(Ce.$$.fragment),ar=p(),Ae=o("p"),ir=i("This class overrides "),rt=o("a"),lr=i("ProphetNetDecoder"),pr=i(`. Please check the superclass for the appropriate documentation alongside
usage examples.`),dr=p(),zt=o("p"),hr=i("Example:"),cr=p(),m(Se.$$.fragment),as=p(),F=o("h2"),te=o("a"),Tt=o("span"),m(Ie.$$.fragment),mr=p(),Dt=o("span"),ur=i("XLMProphetNetForConditionalGeneration"),is=p(),L=o("div"),m(Fe.$$.fragment),fr=p(),Ge=o("p"),gr=i("This class overrides "),nt=o("a"),_r=i("ProphetNetForConditionalGeneration"),kr=i(`. Please check the superclass for the appropriate
documentation alongside usage examples.`),vr=p(),Ct=o("p"),br=i("Example:"),Pr=p(),m(Be.$$.fragment),ls=p(),G=o("h2"),se=o("a"),At=o("span"),m(Re.$$.fragment),wr=p(),St=o("span"),Nr=i("XLMProphetNetForCausalLM"),ps=p(),$=o("div"),m(Oe.$$.fragment),Lr=p(),He=o("p"),$r=i("This class overrides "),at=o("a"),Mr=i("ProphetNetForCausalLM"),yr=i(`. Please check the superclass for the appropriate documentation
alongside usage examples.`),qr=p(),It=o("p"),xr=i("Example:"),Er=p(),m(Ve.$$.fragment),this.h()},l(e){const h=Gn('[data-svelte="svelte-1phssyn"]',document.head);x=r(h,"META",{name:!0,content:!0}),h.forEach(s),Bt=d(e),E=r(e,"H1",{class:!0});var hs=n(E);R=r(hs,"A",{id:!0,class:!0,href:!0});var Tr=n(R);pt=r(Tr,"SPAN",{});var Dr=n(pt);u(pe.$$.fragment,Dr),Dr.forEach(s),Tr.forEach(s),Ts=d(hs),dt=r(hs,"SPAN",{});var Cr=n(dt);Ds=l(Cr,"XLM-ProphetNet"),Cr.forEach(s),hs.forEach(s),Rt=d(e),X=r(e,"P",{});var Ft=n(X);ht=r(Ft,"STRONG",{});var Ar=n(ht);Cs=l(Ar,"DISCLAIMER:"),Ar.forEach(s),As=l(Ft," If you see something strange, file a "),de=r(Ft,"A",{href:!0,rel:!0});var Sr=n(de);Ss=l(Sr,"Github Issue"),Sr.forEach(s),Is=l(Ft,` and assign
@patrickvonplaten`),Ft.forEach(s),Ot=d(e),j=r(e,"H2",{class:!0});var cs=n(j);O=r(cs,"A",{id:!0,class:!0,href:!0});var Ir=n(O);ct=r(Ir,"SPAN",{});var Fr=n(ct);u(he.$$.fragment,Fr),Fr.forEach(s),Ir.forEach(s),Fs=d(cs),mt=r(cs,"SPAN",{});var Gr=n(mt);Gs=l(Gr,"Overview"),Gr.forEach(s),cs.forEach(s),Ht=d(e),H=r(e,"P",{});var ms=n(H);Bs=l(ms,"The XLM-ProphetNet model was proposed in "),ce=r(ms,"A",{href:!0,rel:!0});var Br=n(ce);Rs=l(Br,"ProphetNet: Predicting Future N-gram for Sequence-to-Sequence Pre-training,"),Br.forEach(s),Os=l(ms,` by Yu Yan, Weizhen Qi, Yeyun Gong, Dayiheng Liu, Nan Duan, Jiusheng Chen, Ruofei
Zhang, Ming Zhou on 13 Jan, 2020.`),ms.forEach(s),Vt=d(e),We=r(e,"P",{});var Rr=n(We);Hs=l(Rr,`XLM-ProphetNet is an encoder-decoder model and can predict n-future tokens for \u201Cngram\u201D language modeling instead of
just the next token. Its architecture is identical to ProhpetNet, but the model was trained on the multi-lingual
\u201Cwiki100\u201D Wikipedia dump.`),Rr.forEach(s),Wt=d(e),Ue=r(e,"P",{});var Or=n(Ue);Vs=l(Or,"The abstract from the paper is the following:"),Or.forEach(s),Ut=d(e),Ye=r(e,"P",{});var Hr=n(Ye);ut=r(Hr,"EM",{});var Vr=n(ut);Ws=l(Vr,`In this paper, we present a new sequence-to-sequence pretraining model called ProphetNet, which introduces a novel
self-supervised objective named future n-gram prediction and the proposed n-stream self-attention mechanism. Instead of
the optimization of one-step ahead prediction in traditional sequence-to-sequence model, the ProphetNet is optimized by
n-step ahead prediction which predicts the next n tokens simultaneously based on previous context tokens at each time
step. The future n-gram prediction explicitly encourages the model to plan for the future tokens and prevent
overfitting on strong local correlations. We pre-train ProphetNet using a base scale dataset (16GB) and a large scale
dataset (160GB) respectively. Then we conduct experiments on CNN/DailyMail, Gigaword, and SQuAD 1.1 benchmarks for
abstractive summarization and question generation tasks. Experimental results show that ProphetNet achieves new
state-of-the-art results on all these datasets compared to the models using the same scale pretraining corpus.`),Vr.forEach(s),Hr.forEach(s),Yt=d(e),V=r(e,"P",{});var us=n(V);Us=l(us,"The Authors\u2019 code can be found "),me=r(us,"A",{href:!0,rel:!0});var Wr=n(me);Ys=l(Wr,"here"),Wr.forEach(s),Js=l(us,"."),us.forEach(s),Jt=d(e),z=r(e,"H2",{class:!0});var fs=n(z);W=r(fs,"A",{id:!0,class:!0,href:!0});var Ur=n(W);ft=r(Ur,"SPAN",{});var Yr=n(ft);u(ue.$$.fragment,Yr),Yr.forEach(s),Ur.forEach(s),Qs=d(fs),gt=r(fs,"SPAN",{});var Jr=n(gt);Zs=l(Jr,"XLMProphetNetConfig"),Jr.forEach(s),fs.forEach(s),Qt=d(e),T=r(e,"DIV",{class:!0});var gs=n(T);u(fe.$$.fragment,gs),Ks=d(gs),D=r(gs,"P",{});var it=n(D);eo=l(it,"This class overrides "),Je=r(it,"A",{href:!0});var Qr=n(Je);to=l(Qr,"ProphetNetConfig"),Qr.forEach(s),so=l(it,`. Please check the superclass for the appropriate documentation alongside
usage examples. Instantiating a configuration with the defaults will yield a similar configuration to that of the
XLMProphetNet
`),ge=r(it,"A",{href:!0,rel:!0});var Zr=n(ge);oo=l(Zr,"microsoft/xprophetnet-large-wiki100-cased"),Zr.forEach(s),ro=l(it,`
architecture.`),it.forEach(s),gs.forEach(s),Zt=d(e),C=r(e,"H2",{class:!0});var _s=n(C);U=r(_s,"A",{id:!0,class:!0,href:!0});var Kr=n(U);_t=r(Kr,"SPAN",{});var en=n(_t);u(_e.$$.fragment,en),en.forEach(s),Kr.forEach(s),no=d(_s),kt=r(_s,"SPAN",{});var tn=n(kt);ao=l(tn,"XLMProphetNetTokenizer"),tn.forEach(s),_s.forEach(s),Kt=d(e),v=r(e,"DIV",{class:!0});var b=n(v);u(ke.$$.fragment,b),io=d(b),M=r(b,"P",{});var oe=n(M);lo=l(oe,"Adapted from "),Qe=r(oe,"A",{href:!0});var sn=n(Qe);po=l(sn,"RobertaTokenizer"),sn.forEach(s),ho=l(oe," and "),Ze=r(oe,"A",{href:!0});var on=n(Ze);co=l(on,"XLNetTokenizer"),on.forEach(s),mo=l(oe,`. Based on
`),ve=r(oe,"A",{href:!0,rel:!0});var rn=n(ve);uo=l(rn,"SentencePiece"),rn.forEach(s),fo=l(oe,"."),oe.forEach(s),go=d(b),be=r(b,"P",{});var ks=n(be);_o=l(ks,"This tokenizer inherits from "),Ke=r(ks,"A",{href:!0});var nn=n(Ke);ko=l(nn,"PreTrainedTokenizer"),nn.forEach(s),vo=l(ks,` which contains most of the main methods. Users should refer to
this superclass for more information regarding those methods.`),ks.forEach(s),bo=d(b),q=r(b,"DIV",{class:!0});var lt=n(q);u(Pe.$$.fragment,lt),Po=d(lt),vt=r(lt,"P",{});var an=n(vt);wo=l(an,`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. A XLMProphetNet sequence has the following format:`),an.forEach(s),No=d(lt),we=r(lt,"UL",{});var vs=n(we);et=r(vs,"LI",{});var Xr=n(et);Lo=l(Xr,"single sequence: "),bt=r(Xr,"CODE",{});var ln=n(bt);$o=l(ln,"X [SEP]"),ln.forEach(s),Xr.forEach(s),Mo=d(vs),tt=r(vs,"LI",{});var jr=n(tt);yo=l(jr,"pair of sequences: "),Pt=r(jr,"CODE",{});var pn=n(Pt);qo=l(pn,"A [SEP] B [SEP]"),pn.forEach(s),jr.forEach(s),vs.forEach(s),lt.forEach(s),xo=d(b),Y=r(b,"DIV",{class:!0});var bs=n(Y);u(Ne.$$.fragment,bs),Eo=d(bs),wt=r(bs,"P",{});var dn=n(wt);Xo=l(dn,"Converts a sequence of tokens (strings for sub-words) in a single string."),dn.forEach(s),bs.forEach(s),jo=d(b),J=r(b,"DIV",{class:!0});var Ps=n(J);u(Le.$$.fragment,Ps),zo=d(Ps),Nt=r(Ps,"P",{});var hn=n(Nt);To=l(hn,`Create a mask from the two sequences passed to be used in a sequence-pair classification task. XLMProphetNet
does not make use of token type ids, therefore a list of zeros is returned.`),hn.forEach(s),Ps.forEach(s),Do=d(b),Q=r(b,"DIV",{class:!0});var ws=n(Q);u($e.$$.fragment,ws),Co=d(ws),Me=r(ws,"P",{});var Ns=n(Me);Ao=l(Ns,`Retrieve sequence ids from a token list that has no special tokens added. This method is called when adding
special tokens using the tokenizer `),Lt=r(Ns,"CODE",{});var cn=n(Lt);So=l(cn,"prepare_for_model"),cn.forEach(s),Io=l(Ns," method."),Ns.forEach(s),ws.forEach(s),b.forEach(s),es=d(e),A=r(e,"H2",{class:!0});var Ls=n(A);Z=r(Ls,"A",{id:!0,class:!0,href:!0});var mn=n(Z);$t=r(mn,"SPAN",{});var un=n($t);u(ye.$$.fragment,un),un.forEach(s),mn.forEach(s),Fo=d(Ls),Mt=r(Ls,"SPAN",{});var fn=n(Mt);Go=l(fn,"XLMProphetNetModel"),fn.forEach(s),Ls.forEach(s),ts=d(e),P=r(e,"DIV",{class:!0});var re=n(P);u(qe.$$.fragment,re),Bo=d(re),xe=r(re,"P",{});var $s=n(xe);Ro=l($s,"This class overrides "),st=r($s,"A",{href:!0});var gn=n(st);Oo=l(gn,"ProphetNetModel"),gn.forEach(s),Ho=l($s,`. Please check the superclass for the appropriate documentation alongside
usage examples.`),$s.forEach(s),Vo=d(re),yt=r(re,"P",{});var _n=n(yt);Wo=l(_n,"Example:"),_n.forEach(s),Uo=d(re),u(Ee.$$.fragment,re),re.forEach(s),ss=d(e),S=r(e,"H2",{class:!0});var Ms=n(S);K=r(Ms,"A",{id:!0,class:!0,href:!0});var kn=n(K);qt=r(kn,"SPAN",{});var vn=n(qt);u(Xe.$$.fragment,vn),vn.forEach(s),kn.forEach(s),Yo=d(Ms),xt=r(Ms,"SPAN",{});var bn=n(xt);Jo=l(bn,"XLMProphetNetEncoder"),bn.forEach(s),Ms.forEach(s),os=d(e),w=r(e,"DIV",{class:!0});var ne=n(w);u(je.$$.fragment,ne),Qo=d(ne),ze=r(ne,"P",{});var ys=n(ze);Zo=l(ys,"This class overrides "),ot=r(ys,"A",{href:!0});var Pn=n(ot);Ko=l(Pn,"ProphetNetEncoder"),Pn.forEach(s),er=l(ys,`. Please check the superclass for the appropriate documentation alongside
usage examples.`),ys.forEach(s),tr=d(ne),Et=r(ne,"P",{});var wn=n(Et);sr=l(wn,"Example:"),wn.forEach(s),or=d(ne),u(Te.$$.fragment,ne),ne.forEach(s),rs=d(e),I=r(e,"H2",{class:!0});var qs=n(I);ee=r(qs,"A",{id:!0,class:!0,href:!0});var Nn=n(ee);Xt=r(Nn,"SPAN",{});var Ln=n(Xt);u(De.$$.fragment,Ln),Ln.forEach(s),Nn.forEach(s),rr=d(qs),jt=r(qs,"SPAN",{});var $n=n(jt);nr=l($n,"XLMProphetNetDecoder"),$n.forEach(s),qs.forEach(s),ns=d(e),N=r(e,"DIV",{class:!0});var ae=n(N);u(Ce.$$.fragment,ae),ar=d(ae),Ae=r(ae,"P",{});var xs=n(Ae);ir=l(xs,"This class overrides "),rt=r(xs,"A",{href:!0});var Mn=n(rt);lr=l(Mn,"ProphetNetDecoder"),Mn.forEach(s),pr=l(xs,`. Please check the superclass for the appropriate documentation alongside
usage examples.`),xs.forEach(s),dr=d(ae),zt=r(ae,"P",{});var yn=n(zt);hr=l(yn,"Example:"),yn.forEach(s),cr=d(ae),u(Se.$$.fragment,ae),ae.forEach(s),as=d(e),F=r(e,"H2",{class:!0});var Es=n(F);te=r(Es,"A",{id:!0,class:!0,href:!0});var qn=n(te);Tt=r(qn,"SPAN",{});var xn=n(Tt);u(Ie.$$.fragment,xn),xn.forEach(s),qn.forEach(s),mr=d(Es),Dt=r(Es,"SPAN",{});var En=n(Dt);ur=l(En,"XLMProphetNetForConditionalGeneration"),En.forEach(s),Es.forEach(s),is=d(e),L=r(e,"DIV",{class:!0});var ie=n(L);u(Fe.$$.fragment,ie),fr=d(ie),Ge=r(ie,"P",{});var Xs=n(Ge);gr=l(Xs,"This class overrides "),nt=r(Xs,"A",{href:!0});var Xn=n(nt);_r=l(Xn,"ProphetNetForConditionalGeneration"),Xn.forEach(s),kr=l(Xs,`. Please check the superclass for the appropriate
documentation alongside usage examples.`),Xs.forEach(s),vr=d(ie),Ct=r(ie,"P",{});var jn=n(Ct);br=l(jn,"Example:"),jn.forEach(s),Pr=d(ie),u(Be.$$.fragment,ie),ie.forEach(s),ls=d(e),G=r(e,"H2",{class:!0});var js=n(G);se=r(js,"A",{id:!0,class:!0,href:!0});var zn=n(se);At=r(zn,"SPAN",{});var Tn=n(At);u(Re.$$.fragment,Tn),Tn.forEach(s),zn.forEach(s),wr=d(js),St=r(js,"SPAN",{});var Dn=n(St);Nr=l(Dn,"XLMProphetNetForCausalLM"),Dn.forEach(s),js.forEach(s),ps=d(e),$=r(e,"DIV",{class:!0});var le=n($);u(Oe.$$.fragment,le),Lr=d(le),He=r(le,"P",{});var zs=n(He);$r=l(zs,"This class overrides "),at=r(zs,"A",{href:!0});var Cn=n(at);Mr=l(Cn,"ProphetNetForCausalLM"),Cn.forEach(s),yr=l(zs,`. Please check the superclass for the appropriate documentation
alongside usage examples.`),zs.forEach(s),qr=d(le),It=r(le,"P",{});var An=n(It);xr=l(An,"Example:"),An.forEach(s),Er=d(le),u(Ve.$$.fragment,le),le.forEach(s),this.h()},h(){a(x,"name","hf:doc:metadata"),a(x,"content",JSON.stringify(Hn)),a(R,"id","xlmprophetnet"),a(R,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(R,"href","#xlmprophetnet"),a(E,"class","relative group"),a(de,"href","https://github.com/huggingface/transformers/issues/new?assignees=&labels=&template=bug-report.md&title"),a(de,"rel","nofollow"),a(O,"id","overview"),a(O,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(O,"href","#overview"),a(j,"class","relative group"),a(ce,"href","https://arxiv.org/abs/2001.04063"),a(ce,"rel","nofollow"),a(me,"href","https://github.com/microsoft/ProphetNet"),a(me,"rel","nofollow"),a(W,"id","transformers.XLMProphetNetConfig"),a(W,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(W,"href","#transformers.XLMProphetNetConfig"),a(z,"class","relative group"),a(Je,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),a(ge,"href","https://huggingface.co/microsoft/xprophetnet-large-wiki100-cased"),a(ge,"rel","nofollow"),a(T,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(U,"id","transformers.XLMProphetNetTokenizer"),a(U,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(U,"href","#transformers.XLMProphetNetTokenizer"),a(C,"class","relative group"),a(Qe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),a(Ze,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),a(ve,"href","https://github.com/google/sentencepiece"),a(ve,"rel","nofollow"),a(Ke,"href","/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer"),a(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(v,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(Z,"id","transformers.XLMProphetNetModel"),a(Z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(Z,"href","#transformers.XLMProphetNetModel"),a(A,"class","relative group"),a(st,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),a(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(K,"id","transformers.XLMProphetNetEncoder"),a(K,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(K,"href","#transformers.XLMProphetNetEncoder"),a(S,"class","relative group"),a(ot,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetEncoder"),a(w,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(ee,"id","transformers.XLMProphetNetDecoder"),a(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(ee,"href","#transformers.XLMProphetNetDecoder"),a(I,"class","relative group"),a(rt,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetDecoder"),a(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(te,"id","transformers.XLMProphetNetForConditionalGeneration"),a(te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(te,"href","#transformers.XLMProphetNetForConditionalGeneration"),a(F,"class","relative group"),a(nt,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),a(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(se,"id","transformers.XLMProphetNetForCausalLM"),a(se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(se,"href","#transformers.XLMProphetNetForCausalLM"),a(G,"class","relative group"),a(at,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),a($,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,h){t(document.head,x),c(e,Bt,h),c(e,E,h),t(E,R),t(R,pt),f(pe,pt,null),t(E,Ts),t(E,dt),t(dt,Ds),c(e,Rt,h),c(e,X,h),t(X,ht),t(ht,Cs),t(X,As),t(X,de),t(de,Ss),t(X,Is),c(e,Ot,h),c(e,j,h),t(j,O),t(O,ct),f(he,ct,null),t(j,Fs),t(j,mt),t(mt,Gs),c(e,Ht,h),c(e,H,h),t(H,Bs),t(H,ce),t(ce,Rs),t(H,Os),c(e,Vt,h),c(e,We,h),t(We,Hs),c(e,Wt,h),c(e,Ue,h),t(Ue,Vs),c(e,Ut,h),c(e,Ye,h),t(Ye,ut),t(ut,Ws),c(e,Yt,h),c(e,V,h),t(V,Us),t(V,me),t(me,Ys),t(V,Js),c(e,Jt,h),c(e,z,h),t(z,W),t(W,ft),f(ue,ft,null),t(z,Qs),t(z,gt),t(gt,Zs),c(e,Qt,h),c(e,T,h),f(fe,T,null),t(T,Ks),t(T,D),t(D,eo),t(D,Je),t(Je,to),t(D,so),t(D,ge),t(ge,oo),t(D,ro),c(e,Zt,h),c(e,C,h),t(C,U),t(U,_t),f(_e,_t,null),t(C,no),t(C,kt),t(kt,ao),c(e,Kt,h),c(e,v,h),f(ke,v,null),t(v,io),t(v,M),t(M,lo),t(M,Qe),t(Qe,po),t(M,ho),t(M,Ze),t(Ze,co),t(M,mo),t(M,ve),t(ve,uo),t(M,fo),t(v,go),t(v,be),t(be,_o),t(be,Ke),t(Ke,ko),t(be,vo),t(v,bo),t(v,q),f(Pe,q,null),t(q,Po),t(q,vt),t(vt,wo),t(q,No),t(q,we),t(we,et),t(et,Lo),t(et,bt),t(bt,$o),t(we,Mo),t(we,tt),t(tt,yo),t(tt,Pt),t(Pt,qo),t(v,xo),t(v,Y),f(Ne,Y,null),t(Y,Eo),t(Y,wt),t(wt,Xo),t(v,jo),t(v,J),f(Le,J,null),t(J,zo),t(J,Nt),t(Nt,To),t(v,Do),t(v,Q),f($e,Q,null),t(Q,Co),t(Q,Me),t(Me,Ao),t(Me,Lt),t(Lt,So),t(Me,Io),c(e,es,h),c(e,A,h),t(A,Z),t(Z,$t),f(ye,$t,null),t(A,Fo),t(A,Mt),t(Mt,Go),c(e,ts,h),c(e,P,h),f(qe,P,null),t(P,Bo),t(P,xe),t(xe,Ro),t(xe,st),t(st,Oo),t(xe,Ho),t(P,Vo),t(P,yt),t(yt,Wo),t(P,Uo),f(Ee,P,null),c(e,ss,h),c(e,S,h),t(S,K),t(K,qt),f(Xe,qt,null),t(S,Yo),t(S,xt),t(xt,Jo),c(e,os,h),c(e,w,h),f(je,w,null),t(w,Qo),t(w,ze),t(ze,Zo),t(ze,ot),t(ot,Ko),t(ze,er),t(w,tr),t(w,Et),t(Et,sr),t(w,or),f(Te,w,null),c(e,rs,h),c(e,I,h),t(I,ee),t(ee,Xt),f(De,Xt,null),t(I,rr),t(I,jt),t(jt,nr),c(e,ns,h),c(e,N,h),f(Ce,N,null),t(N,ar),t(N,Ae),t(Ae,ir),t(Ae,rt),t(rt,lr),t(Ae,pr),t(N,dr),t(N,zt),t(zt,hr),t(N,cr),f(Se,N,null),c(e,as,h),c(e,F,h),t(F,te),t(te,Tt),f(Ie,Tt,null),t(F,mr),t(F,Dt),t(Dt,ur),c(e,is,h),c(e,L,h),f(Fe,L,null),t(L,fr),t(L,Ge),t(Ge,gr),t(Ge,nt),t(nt,_r),t(Ge,kr),t(L,vr),t(L,Ct),t(Ct,br),t(L,Pr),f(Be,L,null),c(e,ls,h),c(e,G,h),t(G,se),t(se,At),f(Re,At,null),t(G,wr),t(G,St),t(St,Nr),c(e,ps,h),c(e,$,h),f(Oe,$,null),t($,Lr),t($,He),t(He,$r),t(He,at),t(at,Mr),t(He,yr),t($,qr),t($,It),t(It,xr),t($,Er),f(Ve,$,null),ds=!0},p:Bn,i(e){ds||(g(pe.$$.fragment,e),g(he.$$.fragment,e),g(ue.$$.fragment,e),g(fe.$$.fragment,e),g(_e.$$.fragment,e),g(ke.$$.fragment,e),g(Pe.$$.fragment,e),g(Ne.$$.fragment,e),g(Le.$$.fragment,e),g($e.$$.fragment,e),g(ye.$$.fragment,e),g(qe.$$.fragment,e),g(Ee.$$.fragment,e),g(Xe.$$.fragment,e),g(je.$$.fragment,e),g(Te.$$.fragment,e),g(De.$$.fragment,e),g(Ce.$$.fragment,e),g(Se.$$.fragment,e),g(Ie.$$.fragment,e),g(Fe.$$.fragment,e),g(Be.$$.fragment,e),g(Re.$$.fragment,e),g(Oe.$$.fragment,e),g(Ve.$$.fragment,e),ds=!0)},o(e){_(pe.$$.fragment,e),_(he.$$.fragment,e),_(ue.$$.fragment,e),_(fe.$$.fragment,e),_(_e.$$.fragment,e),_(ke.$$.fragment,e),_(Pe.$$.fragment,e),_(Ne.$$.fragment,e),_(Le.$$.fragment,e),_($e.$$.fragment,e),_(ye.$$.fragment,e),_(qe.$$.fragment,e),_(Ee.$$.fragment,e),_(Xe.$$.fragment,e),_(je.$$.fragment,e),_(Te.$$.fragment,e),_(De.$$.fragment,e),_(Ce.$$.fragment,e),_(Se.$$.fragment,e),_(Ie.$$.fragment,e),_(Fe.$$.fragment,e),_(Be.$$.fragment,e),_(Re.$$.fragment,e),_(Oe.$$.fragment,e),_(Ve.$$.fragment,e),ds=!1},d(e){s(x),e&&s(Bt),e&&s(E),k(pe),e&&s(Rt),e&&s(X),e&&s(Ot),e&&s(j),k(he),e&&s(Ht),e&&s(H),e&&s(Vt),e&&s(We),e&&s(Wt),e&&s(Ue),e&&s(Ut),e&&s(Ye),e&&s(Yt),e&&s(V),e&&s(Jt),e&&s(z),k(ue),e&&s(Qt),e&&s(T),k(fe),e&&s(Zt),e&&s(C),k(_e),e&&s(Kt),e&&s(v),k(ke),k(Pe),k(Ne),k(Le),k($e),e&&s(es),e&&s(A),k(ye),e&&s(ts),e&&s(P),k(qe),k(Ee),e&&s(ss),e&&s(S),k(Xe),e&&s(os),e&&s(w),k(je),k(Te),e&&s(rs),e&&s(I),k(De),e&&s(ns),e&&s(N),k(Ce),k(Se),e&&s(as),e&&s(F),k(Ie),e&&s(is),e&&s(L),k(Fe),k(Be),e&&s(ls),e&&s(G),k(Re),e&&s(ps),e&&s($),k(Oe),k(Ve)}}}const Hn={local:"xlmprophetnet",sections:[{local:"overview",title:"Overview"},{local:"transformers.XLMProphetNetConfig",title:"XLMProphetNetConfig"},{local:"transformers.XLMProphetNetTokenizer",title:"XLMProphetNetTokenizer"},{local:"transformers.XLMProphetNetModel",title:"XLMProphetNetModel"},{local:"transformers.XLMProphetNetEncoder",title:"XLMProphetNetEncoder"},{local:"transformers.XLMProphetNetDecoder",title:"XLMProphetNetDecoder"},{local:"transformers.XLMProphetNetForConditionalGeneration",title:"XLMProphetNetForConditionalGeneration"},{local:"transformers.XLMProphetNetForCausalLM",title:"XLMProphetNetForCausalLM"}],title:"XLM-ProphetNet"};function Vn(zr){return Rn(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Qn extends Sn{constructor(x){super();In(this,x,Vn,On,Fn,{})}}export{Qn as default,Hn as metadata};
