import{S as D3t,i as G3t,s as O3t,e as a,k as l,w as m,t as o,M as V3t,c as n,d as t,m as i,a as s,x as f,h as r,b as d,F as e,g as b,y as g,q as h,o as u,B as p,v as X3t}from"../../chunks/vendor-6b77c823.js";import{T as _Br}from"../../chunks/Tip-39098574.js";import{D as E}from"../../chunks/Docstring-abef54e3.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function z3t($m){let Z,io,de,Ce,lo,ge,Me,Xo,Ii,Im,ma,qi,Ni,Fw,qm,xe,co,ji,Gn,vw,On,Vn,Tw,Di,Xn,Mw,Gi,Nm,Da;return{c(){Z=a("p"),io=o("If your "),de=a("code"),Ce=o("NewModelConfig"),lo=o(" is a subclass of "),ge=a("code"),Me=o("PretrainedConfig"),Xo=o(`, make sure its
`),Ii=a("code"),Im=o("model_type"),ma=o(" attribute is set to the same key you use when registering the config (here "),qi=a("code"),Ni=o('"new-model"'),Fw=o(")."),qm=l(),xe=a("p"),co=o("Likewise, if your "),ji=a("code"),Gn=o("NewModel"),vw=o(" is a subclass of "),On=a("a"),Vn=o("PreTrainedModel"),Tw=o(`, make sure its
`),Di=a("code"),Xn=o("config_class"),Mw=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),Nm=o("NewModelConfig"),Da=o(")."),this.h()},l(mo){Z=n(mo,"P",{});var _e=s(Z);io=r(_e,"If your "),de=n(_e,"CODE",{});var m9=s(de);Ce=r(m9,"NewModelConfig"),m9.forEach(t),lo=r(_e," is a subclass of "),ge=n(_e,"CODE",{});var Oi=s(ge);Me=r(Oi,"PretrainedConfig"),Oi.forEach(t),Xo=r(_e,`, make sure its
`),Ii=n(_e,"CODE",{});var f9=s(Ii);Im=r(f9,"model_type"),f9.forEach(t),ma=r(_e," attribute is set to the same key you use when registering the config (here "),qi=n(_e,"CODE",{});var g9=s(qi);Ni=r(g9,'"new-model"'),g9.forEach(t),Fw=r(_e,")."),_e.forEach(t),qm=i(mo),xe=n(mo,"P",{});var zo=s(xe);co=r(zo,"Likewise, if your "),ji=n(zo,"CODE",{});var Ga=s(ji);Gn=r(Ga,"NewModel"),Ga.forEach(t),vw=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var h9=s(On);Vn=r(h9,"PreTrainedModel"),h9.forEach(t),Tw=r(zo,`, make sure its
`),Di=n(zo,"CODE",{});var jm=s(Di);Xn=r(jm,"config_class"),jm.forEach(t),Mw=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var u9=s(Gi);Nm=r(u9,"NewModelConfig"),u9.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(mo,_e){b(mo,Z,_e),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo),e(Z,ge),e(ge,Me),e(Z,Xo),e(Z,Ii),e(Ii,Im),e(Z,ma),e(Z,qi),e(qi,Ni),e(Z,Fw),b(mo,qm,_e),b(mo,xe,_e),e(xe,co),e(xe,ji),e(ji,Gn),e(xe,vw),e(xe,On),e(On,Vn),e(xe,Tw),e(xe,Di),e(Di,Xn),e(xe,Mw),e(xe,Gi),e(Gi,Nm),e(xe,Da)},d(mo){mo&&t(Z),mo&&t(qm),mo&&t(xe)}}}function Q3t($m){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(ge){Z=n(ge,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(ge,Me){b(ge,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(ge){ge&&t(Z)}}}function W3t($m){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(ge){Z=n(ge,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(ge,Me){b(ge,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(ge){ge&&t(Z)}}}function H3t($m){let Z,io,de,Ce,lo,ge,Me,Xo,Ii,Im,ma,qi,Ni,Fw,qm,xe,co,ji,Gn,vw,On,Vn,Tw,Di,Xn,Mw,Gi,Nm,Da,mo,_e,m9,Oi,f9,g9,zo,Ga,h9,jm,u9,fIe,ZSe,Vi,Dm,WJ,Ew,gIe,HJ,hIe,eRe,zn,uIe,UJ,pIe,_Ie,JJ,bIe,FIe,oRe,Cw,rRe,p9,vIe,tRe,Gm,aRe,Xi,Om,YJ,ww,TIe,KJ,MIe,nRe,Qo,Aw,EIe,yw,CIe,_9,wIe,AIe,yIe,Lw,LIe,ZJ,xIe,kIe,SIe,fo,xw,RIe,eY,BIe,PIe,zi,$Ie,oY,IIe,qIe,rY,NIe,jIe,DIe,F,Vm,tY,GIe,OIe,b9,VIe,XIe,zIe,Xm,aY,QIe,WIe,F9,HIe,UIe,JIe,zm,nY,YIe,KIe,v9,ZIe,eqe,oqe,Qm,sY,rqe,tqe,T9,aqe,nqe,sqe,Wm,lY,lqe,iqe,M9,dqe,cqe,mqe,Hm,iY,fqe,gqe,E9,hqe,uqe,pqe,Um,dY,_qe,bqe,C9,Fqe,vqe,Tqe,Jm,cY,Mqe,Eqe,w9,Cqe,wqe,Aqe,Ym,mY,yqe,Lqe,A9,xqe,kqe,Sqe,Km,fY,Rqe,Bqe,y9,Pqe,$qe,Iqe,Zm,gY,qqe,Nqe,L9,jqe,Dqe,Gqe,ef,hY,Oqe,Vqe,x9,Xqe,zqe,Qqe,of,uY,Wqe,Hqe,k9,Uqe,Jqe,Yqe,rf,pY,Kqe,Zqe,S9,eNe,oNe,rNe,tf,_Y,tNe,aNe,R9,nNe,sNe,lNe,af,bY,iNe,dNe,B9,cNe,mNe,fNe,nf,FY,gNe,hNe,P9,uNe,pNe,_Ne,sf,vY,bNe,FNe,$9,vNe,TNe,MNe,lf,TY,ENe,CNe,I9,wNe,ANe,yNe,df,MY,LNe,xNe,q9,kNe,SNe,RNe,cf,EY,BNe,PNe,N9,$Ne,INe,qNe,mf,CY,NNe,jNe,j9,DNe,GNe,ONe,ff,wY,VNe,XNe,D9,zNe,QNe,WNe,gf,AY,HNe,UNe,G9,JNe,YNe,KNe,hf,yY,ZNe,eje,O9,oje,rje,tje,uf,LY,aje,nje,V9,sje,lje,ije,pf,xY,dje,cje,X9,mje,fje,gje,_f,kY,hje,uje,z9,pje,_je,bje,bf,SY,Fje,vje,Q9,Tje,Mje,Eje,Ff,RY,Cje,wje,W9,Aje,yje,Lje,vf,BY,xje,kje,H9,Sje,Rje,Bje,Tf,PY,Pje,$je,U9,Ije,qje,Nje,Mf,$Y,jje,Dje,J9,Gje,Oje,Vje,Ef,IY,Xje,zje,Y9,Qje,Wje,Hje,Cf,qY,Uje,Jje,K9,Yje,Kje,Zje,wf,NY,eDe,oDe,Z9,rDe,tDe,aDe,Af,jY,nDe,sDe,ex,lDe,iDe,dDe,yf,DY,cDe,mDe,ox,fDe,gDe,hDe,Lf,GY,uDe,pDe,rx,_De,bDe,FDe,xf,OY,vDe,TDe,tx,MDe,EDe,CDe,kf,VY,wDe,ADe,ax,yDe,LDe,xDe,Sf,XY,kDe,SDe,nx,RDe,BDe,PDe,Rf,zY,$De,IDe,sx,qDe,NDe,jDe,Bf,QY,DDe,GDe,lx,ODe,VDe,XDe,Pf,WY,zDe,QDe,ix,WDe,HDe,UDe,$f,HY,JDe,YDe,dx,KDe,ZDe,eGe,If,UY,oGe,rGe,cx,tGe,aGe,nGe,qf,JY,sGe,lGe,mx,iGe,dGe,cGe,Nf,YY,mGe,fGe,fx,gGe,hGe,uGe,jf,KY,pGe,_Ge,gx,bGe,FGe,vGe,Df,ZY,TGe,MGe,hx,EGe,CGe,wGe,Gf,eK,AGe,yGe,ux,LGe,xGe,kGe,Of,oK,SGe,RGe,px,BGe,PGe,$Ge,Vf,rK,IGe,qGe,_x,NGe,jGe,DGe,Xf,tK,GGe,OGe,bx,VGe,XGe,zGe,zf,aK,QGe,WGe,Fx,HGe,UGe,JGe,Qf,nK,YGe,KGe,vx,ZGe,eOe,oOe,Wf,sK,rOe,tOe,Tx,aOe,nOe,sOe,Hf,lK,lOe,iOe,Mx,dOe,cOe,mOe,Uf,iK,fOe,gOe,Ex,hOe,uOe,pOe,Jf,dK,_Oe,bOe,Cx,FOe,vOe,TOe,Yf,cK,MOe,EOe,wx,COe,wOe,AOe,Kf,mK,yOe,LOe,Ax,xOe,kOe,SOe,Zf,fK,ROe,BOe,yx,POe,$Oe,IOe,eg,gK,qOe,NOe,Lx,jOe,DOe,GOe,og,hK,OOe,VOe,xx,XOe,zOe,QOe,rg,uK,WOe,HOe,kx,UOe,JOe,YOe,tg,pK,KOe,ZOe,Sx,eVe,oVe,rVe,ag,_K,tVe,aVe,Rx,nVe,sVe,lVe,ng,bK,iVe,dVe,Bx,cVe,mVe,fVe,sg,FK,gVe,hVe,Px,uVe,pVe,_Ve,lg,vK,bVe,FVe,$x,vVe,TVe,MVe,ig,TK,EVe,CVe,Ix,wVe,AVe,yVe,dg,MK,LVe,xVe,qx,kVe,SVe,RVe,cg,EK,BVe,PVe,Nx,$Ve,IVe,qVe,mg,CK,NVe,jVe,jx,DVe,GVe,OVe,fg,wK,VVe,XVe,Dx,zVe,QVe,WVe,gg,AK,HVe,UVe,Gx,JVe,YVe,KVe,hg,yK,ZVe,eXe,Ox,oXe,rXe,tXe,ug,LK,aXe,nXe,Vx,sXe,lXe,iXe,pg,xK,dXe,cXe,Xx,mXe,fXe,gXe,_g,kK,hXe,uXe,zx,pXe,_Xe,bXe,bg,SK,FXe,vXe,Qx,TXe,MXe,EXe,Fg,RK,CXe,wXe,Wx,AXe,yXe,LXe,vg,BK,xXe,kXe,Hx,SXe,RXe,BXe,Tg,PK,PXe,$Xe,Ux,IXe,qXe,NXe,Mg,$K,jXe,DXe,Jx,GXe,OXe,VXe,Eg,IK,XXe,zXe,Yx,QXe,WXe,HXe,Cg,qK,UXe,JXe,Kx,YXe,KXe,ZXe,wg,NK,eze,oze,Zx,rze,tze,aze,Ag,jK,nze,sze,ek,lze,ize,dze,yg,DK,cze,mze,ok,fze,gze,hze,Lg,GK,uze,pze,rk,_ze,bze,Fze,xg,OK,vze,Tze,tk,Mze,Eze,Cze,kg,VK,wze,Aze,ak,yze,Lze,xze,Sg,XK,kze,Sze,nk,Rze,Bze,Pze,Rg,zK,$ze,Ize,sk,qze,Nze,jze,Bg,QK,Dze,Gze,lk,Oze,Vze,Xze,Pg,WK,zze,Qze,ik,Wze,Hze,Uze,$g,HK,Jze,Yze,dk,Kze,Zze,eQe,UK,oQe,rQe,kw,tQe,Ig,Sw,aQe,JK,nQe,sRe,Qi,qg,YK,Rw,sQe,KK,lQe,lRe,Wo,Bw,iQe,Pw,dQe,ck,cQe,mQe,fQe,$w,gQe,ZK,hQe,uQe,pQe,go,Iw,_Qe,eZ,bQe,FQe,Oa,vQe,oZ,TQe,MQe,rZ,EQe,CQe,tZ,wQe,AQe,yQe,C,Qn,aZ,LQe,xQe,mk,kQe,SQe,fk,RQe,BQe,PQe,Wn,nZ,$Qe,IQe,gk,qQe,NQe,hk,jQe,DQe,GQe,Hn,sZ,OQe,VQe,uk,XQe,zQe,pk,QQe,WQe,HQe,Ng,lZ,UQe,JQe,_k,YQe,KQe,ZQe,Un,iZ,eWe,oWe,bk,rWe,tWe,Fk,aWe,nWe,sWe,jg,dZ,lWe,iWe,vk,dWe,cWe,mWe,Dg,cZ,fWe,gWe,Tk,hWe,uWe,pWe,Gg,mZ,_We,bWe,Mk,FWe,vWe,TWe,Jn,fZ,MWe,EWe,Ek,CWe,wWe,Ck,AWe,yWe,LWe,Yn,gZ,xWe,kWe,wk,SWe,RWe,Ak,BWe,PWe,$We,Kn,hZ,IWe,qWe,yk,NWe,jWe,Lk,DWe,GWe,OWe,Og,uZ,VWe,XWe,xk,zWe,QWe,WWe,Vg,pZ,HWe,UWe,kk,JWe,YWe,KWe,Zn,_Z,ZWe,eHe,Sk,oHe,rHe,Rk,tHe,aHe,nHe,Xg,bZ,sHe,lHe,Bk,iHe,dHe,cHe,es,FZ,mHe,fHe,Pk,gHe,hHe,$k,uHe,pHe,_He,os,vZ,bHe,FHe,Ik,vHe,THe,qk,MHe,EHe,CHe,rs,TZ,wHe,AHe,Nk,yHe,LHe,MZ,xHe,kHe,SHe,zg,EZ,RHe,BHe,jk,PHe,$He,IHe,ts,CZ,qHe,NHe,Dk,jHe,DHe,Gk,GHe,OHe,VHe,Qg,wZ,XHe,zHe,Ok,QHe,WHe,HHe,as,AZ,UHe,JHe,Vk,YHe,KHe,Xk,ZHe,eUe,oUe,ns,yZ,rUe,tUe,zk,aUe,nUe,Qk,sUe,lUe,iUe,ss,LZ,dUe,cUe,Wk,mUe,fUe,Hk,gUe,hUe,uUe,Wg,xZ,pUe,_Ue,Uk,bUe,FUe,vUe,ls,kZ,TUe,MUe,Jk,EUe,CUe,Yk,wUe,AUe,yUe,Hg,SZ,LUe,xUe,Kk,kUe,SUe,RUe,is,RZ,BUe,PUe,Zk,$Ue,IUe,eS,qUe,NUe,jUe,ds,BZ,DUe,GUe,oS,OUe,VUe,rS,XUe,zUe,QUe,cs,PZ,WUe,HUe,tS,UUe,JUe,aS,YUe,KUe,ZUe,ms,$Z,eJe,oJe,nS,rJe,tJe,sS,aJe,nJe,sJe,Ug,IZ,lJe,iJe,lS,dJe,cJe,mJe,fs,qZ,fJe,gJe,iS,hJe,uJe,dS,pJe,_Je,bJe,gs,NZ,FJe,vJe,cS,TJe,MJe,mS,EJe,CJe,wJe,hs,jZ,AJe,yJe,fS,LJe,xJe,gS,kJe,SJe,RJe,us,DZ,BJe,PJe,hS,$Je,IJe,uS,qJe,NJe,jJe,ps,GZ,DJe,GJe,pS,OJe,VJe,_S,XJe,zJe,QJe,_s,OZ,WJe,HJe,bS,UJe,JJe,FS,YJe,KJe,ZJe,Jg,VZ,eYe,oYe,vS,rYe,tYe,aYe,bs,XZ,nYe,sYe,TS,lYe,iYe,MS,dYe,cYe,mYe,Yg,zZ,fYe,gYe,ES,hYe,uYe,pYe,Kg,QZ,_Ye,bYe,CS,FYe,vYe,TYe,Fs,WZ,MYe,EYe,wS,CYe,wYe,AS,AYe,yYe,LYe,vs,HZ,xYe,kYe,yS,SYe,RYe,LS,BYe,PYe,$Ye,Zg,UZ,IYe,qYe,xS,NYe,jYe,DYe,Ts,JZ,GYe,OYe,kS,VYe,XYe,SS,zYe,QYe,WYe,Ms,YZ,HYe,UYe,RS,JYe,YYe,BS,KYe,ZYe,eKe,Es,KZ,oKe,rKe,PS,tKe,aKe,$S,nKe,sKe,lKe,Cs,ZZ,iKe,dKe,IS,cKe,mKe,qS,fKe,gKe,hKe,ws,eee,uKe,pKe,NS,_Ke,bKe,jS,FKe,vKe,TKe,eh,oee,MKe,EKe,DS,CKe,wKe,AKe,oh,ree,yKe,LKe,GS,xKe,kKe,SKe,rh,tee,RKe,BKe,OS,PKe,$Ke,IKe,th,aee,qKe,NKe,VS,jKe,DKe,GKe,As,nee,OKe,VKe,XS,XKe,zKe,zS,QKe,WKe,HKe,ah,see,UKe,JKe,QS,YKe,KKe,ZKe,ys,lee,eZe,oZe,WS,rZe,tZe,HS,aZe,nZe,sZe,Ls,iee,lZe,iZe,US,dZe,cZe,JS,mZe,fZe,gZe,xs,dee,hZe,uZe,YS,pZe,_Ze,KS,bZe,FZe,vZe,ks,cee,TZe,MZe,ZS,EZe,CZe,eR,wZe,AZe,yZe,Ss,mee,LZe,xZe,oR,kZe,SZe,rR,RZe,BZe,PZe,Rs,fee,$Ze,IZe,tR,qZe,NZe,aR,jZe,DZe,GZe,nh,gee,OZe,VZe,nR,XZe,zZe,QZe,sh,hee,WZe,HZe,sR,UZe,JZe,YZe,Bs,uee,KZe,ZZe,lR,eeo,oeo,iR,reo,teo,aeo,Ps,pee,neo,seo,dR,leo,ieo,cR,deo,ceo,meo,$s,_ee,feo,geo,mR,heo,ueo,fR,peo,_eo,beo,lh,bee,Feo,veo,gR,Teo,Meo,Eeo,ih,Fee,Ceo,weo,hR,Aeo,yeo,Leo,dh,vee,xeo,keo,uR,Seo,Reo,Beo,ch,Tee,Peo,$eo,pR,Ieo,qeo,Neo,Is,Mee,jeo,Deo,_R,Geo,Oeo,bR,Veo,Xeo,zeo,mh,Eee,Qeo,Weo,FR,Heo,Ueo,Jeo,fh,Cee,Yeo,Keo,vR,Zeo,eoo,ooo,qs,wee,roo,too,TR,aoo,noo,MR,soo,loo,ioo,Ns,Aee,doo,coo,ER,moo,foo,CR,goo,hoo,uoo,yee,poo,_oo,qw,boo,gh,Nw,Foo,Lee,voo,iRe,Wi,hh,xee,jw,Too,kee,Moo,dRe,Ho,Dw,Eoo,Gw,Coo,wR,woo,Aoo,yoo,Ow,Loo,See,xoo,koo,Soo,$e,Vw,Roo,Ree,Boo,Poo,Va,$oo,Bee,Ioo,qoo,Pee,Noo,joo,$ee,Doo,Goo,Ooo,ee,uh,Iee,Voo,Xoo,AR,zoo,Qoo,Woo,ph,qee,Hoo,Uoo,yR,Joo,Yoo,Koo,_h,Nee,Zoo,ero,LR,oro,rro,tro,bh,jee,aro,nro,xR,sro,lro,iro,Fh,Dee,dro,cro,kR,mro,fro,gro,vh,Gee,hro,uro,SR,pro,_ro,bro,Th,Oee,Fro,vro,RR,Tro,Mro,Ero,Mh,Vee,Cro,wro,BR,Aro,yro,Lro,Eh,Xee,xro,kro,PR,Sro,Rro,Bro,Ch,zee,Pro,$ro,$R,Iro,qro,Nro,wh,Qee,jro,Dro,IR,Gro,Oro,Vro,Ah,Wee,Xro,zro,qR,Qro,Wro,Hro,yh,Hee,Uro,Jro,NR,Yro,Kro,Zro,Lh,Uee,eto,oto,jR,rto,tto,ato,xh,Jee,nto,sto,DR,lto,ito,dto,kh,Yee,cto,mto,GR,fto,gto,hto,Sh,Kee,uto,pto,OR,_to,bto,Fto,Rh,Zee,vto,Tto,VR,Mto,Eto,Cto,Bh,eoe,wto,Ato,XR,yto,Lto,xto,Ph,kto,ooe,Sto,Rto,Xw,Bto,$h,zw,Pto,roe,$to,cRe,Hi,Ih,toe,Qw,Ito,aoe,qto,mRe,Uo,Ww,Nto,Hw,jto,zR,Dto,Gto,Oto,Uw,Vto,noe,Xto,zto,Qto,Ie,Jw,Wto,soe,Hto,Uto,Ui,Jto,loe,Yto,Kto,ioe,Zto,eao,oao,ke,qh,doe,rao,tao,QR,aao,nao,sao,Nh,coe,lao,iao,WR,dao,cao,mao,jh,moe,fao,gao,HR,hao,uao,pao,Dh,foe,_ao,bao,UR,Fao,vao,Tao,Gh,goe,Mao,Eao,JR,Cao,wao,Aao,Oh,hoe,yao,Lao,YR,xao,kao,Sao,Vh,uoe,Rao,Bao,KR,Pao,$ao,Iao,Xh,poe,qao,Nao,ZR,jao,Dao,Gao,zh,Oao,_oe,Vao,Xao,Yw,zao,Qh,Kw,Qao,boe,Wao,fRe,Ji,Wh,Foe,Zw,Hao,voe,Uao,gRe,Jo,eA,Jao,Yi,Yao,eB,Kao,Zao,oB,eno,ono,rno,oA,tno,Toe,ano,nno,sno,Xr,rA,lno,Moe,ino,dno,Ki,cno,Eoe,mno,fno,rB,gno,hno,uno,Coe,pno,_no,tA,bno,qe,aA,Fno,woe,vno,Tno,Xa,Mno,Aoe,Eno,Cno,yoe,wno,Ano,Loe,yno,Lno,xno,T,Hh,xoe,kno,Sno,tB,Rno,Bno,Pno,Uh,koe,$no,Ino,aB,qno,Nno,jno,Jh,Soe,Dno,Gno,nB,Ono,Vno,Xno,Yh,Roe,zno,Qno,sB,Wno,Hno,Uno,Kh,Boe,Jno,Yno,lB,Kno,Zno,eso,Zh,Poe,oso,rso,iB,tso,aso,nso,eu,$oe,sso,lso,dB,iso,dso,cso,ou,Ioe,mso,fso,cB,gso,hso,uso,ru,qoe,pso,_so,mB,bso,Fso,vso,tu,Noe,Tso,Mso,fB,Eso,Cso,wso,au,joe,Aso,yso,gB,Lso,xso,kso,nu,Doe,Sso,Rso,hB,Bso,Pso,$so,su,Goe,Iso,qso,uB,Nso,jso,Dso,lu,Ooe,Gso,Oso,pB,Vso,Xso,zso,iu,Voe,Qso,Wso,_B,Hso,Uso,Jso,du,Xoe,Yso,Kso,bB,Zso,elo,olo,cu,zoe,rlo,tlo,FB,alo,nlo,slo,mu,Qoe,llo,ilo,vB,dlo,clo,mlo,fu,Woe,flo,glo,TB,hlo,ulo,plo,gu,Hoe,_lo,blo,MB,Flo,vlo,Tlo,hu,Uoe,Mlo,Elo,EB,Clo,wlo,Alo,uu,Joe,ylo,Llo,CB,xlo,klo,Slo,pu,Yoe,Rlo,Blo,wB,Plo,$lo,Ilo,_u,Koe,qlo,Nlo,AB,jlo,Dlo,Glo,bu,Zoe,Olo,Vlo,yB,Xlo,zlo,Qlo,Fu,ere,Wlo,Hlo,LB,Ulo,Jlo,Ylo,vu,ore,Klo,Zlo,xB,eio,oio,rio,Tu,rre,tio,aio,kB,nio,sio,lio,Mu,tre,iio,dio,SB,cio,mio,fio,js,are,gio,hio,RB,uio,pio,BB,_io,bio,Fio,Eu,nre,vio,Tio,PB,Mio,Eio,Cio,Cu,sre,wio,Aio,$B,yio,Lio,xio,wu,lre,kio,Sio,IB,Rio,Bio,Pio,Au,ire,$io,Iio,qB,qio,Nio,jio,yu,dre,Dio,Gio,NB,Oio,Vio,Xio,Lu,cre,zio,Qio,jB,Wio,Hio,Uio,xu,mre,Jio,Yio,DB,Kio,Zio,edo,ku,fre,odo,rdo,GB,tdo,ado,ndo,Su,gre,sdo,ldo,OB,ido,ddo,cdo,Ru,hre,mdo,fdo,VB,gdo,hdo,udo,Bu,ure,pdo,_do,XB,bdo,Fdo,vdo,Pu,pre,Tdo,Mdo,zB,Edo,Cdo,wdo,$u,_re,Ado,ydo,QB,Ldo,xdo,kdo,Iu,bre,Sdo,Rdo,WB,Bdo,Pdo,$do,qu,Fre,Ido,qdo,HB,Ndo,jdo,Ddo,Nu,vre,Gdo,Odo,UB,Vdo,Xdo,zdo,ju,Tre,Qdo,Wdo,JB,Hdo,Udo,Jdo,Du,Mre,Ydo,Kdo,YB,Zdo,eco,oco,Gu,Ere,rco,tco,KB,aco,nco,sco,Ou,Cre,lco,ico,ZB,dco,cco,mco,Vu,wre,fco,gco,eP,hco,uco,pco,Xu,Are,_co,bco,oP,Fco,vco,Tco,zu,yre,Mco,Eco,rP,Cco,wco,Aco,Qu,Lre,yco,Lco,tP,xco,kco,Sco,Wu,xre,Rco,Bco,aP,Pco,$co,Ico,Hu,kre,qco,Nco,nP,jco,Dco,Gco,Uu,Sre,Oco,Vco,sP,Xco,zco,Qco,Ju,Rre,Wco,Hco,lP,Uco,Jco,Yco,Yu,Bre,Kco,Zco,iP,emo,omo,rmo,Ku,Pre,tmo,amo,dP,nmo,smo,lmo,Zu,$re,imo,dmo,cP,cmo,mmo,fmo,ep,Ire,gmo,hmo,mP,umo,pmo,_mo,op,qre,bmo,Fmo,fP,vmo,Tmo,Mmo,rp,Nre,Emo,Cmo,gP,wmo,Amo,ymo,tp,jre,Lmo,xmo,hP,kmo,Smo,Rmo,ap,Dre,Bmo,Pmo,uP,$mo,Imo,qmo,np,Gre,Nmo,jmo,pP,Dmo,Gmo,Omo,sp,Ore,Vmo,Xmo,_P,zmo,Qmo,Wmo,lp,Vre,Hmo,Umo,bP,Jmo,Ymo,Kmo,ip,Xre,Zmo,efo,FP,ofo,rfo,tfo,dp,zre,afo,nfo,vP,sfo,lfo,ifo,cp,Qre,dfo,cfo,TP,mfo,ffo,gfo,mp,Wre,hfo,ufo,MP,pfo,_fo,bfo,fp,Hre,Ffo,vfo,EP,Tfo,Mfo,Efo,gp,Ure,Cfo,wfo,CP,Afo,yfo,Lfo,hp,Jre,xfo,kfo,wP,Sfo,Rfo,Bfo,up,Yre,Pfo,$fo,AP,Ifo,qfo,Nfo,pp,Kre,jfo,Dfo,yP,Gfo,Ofo,Vfo,_p,Zre,Xfo,zfo,LP,Qfo,Wfo,Hfo,bp,ete,Ufo,Jfo,xP,Yfo,Kfo,Zfo,Fp,ote,ego,ogo,kP,rgo,tgo,ago,vp,rte,ngo,sgo,SP,lgo,igo,dgo,Tp,tte,cgo,mgo,RP,fgo,ggo,hgo,Mp,ate,ugo,pgo,BP,_go,bgo,Fgo,Ep,nte,vgo,Tgo,PP,Mgo,Ego,Cgo,Cp,ste,wgo,Ago,$P,ygo,Lgo,xgo,wp,lte,kgo,Sgo,IP,Rgo,Bgo,Pgo,Ap,ite,$go,Igo,qP,qgo,Ngo,jgo,yp,dte,Dgo,Ggo,NP,Ogo,Vgo,Xgo,Lp,cte,zgo,Qgo,jP,Wgo,Hgo,Ugo,xp,mte,Jgo,Ygo,DP,Kgo,Zgo,eho,kp,fte,oho,rho,GP,tho,aho,nho,Sp,gte,sho,lho,OP,iho,dho,cho,Rp,mho,hte,fho,gho,ute,hho,uho,pte,pho,_ho,nA,hRe,Zi,Bp,_te,sA,bho,bte,Fho,uRe,Yo,lA,vho,ed,Tho,VP,Mho,Eho,XP,Cho,who,Aho,iA,yho,Fte,Lho,xho,kho,zr,dA,Sho,vte,Rho,Bho,od,Pho,Tte,$ho,Iho,zP,qho,Nho,jho,Mte,Dho,Gho,cA,Oho,Ne,mA,Vho,Ete,Xho,zho,za,Qho,Cte,Who,Hho,wte,Uho,Jho,Ate,Yho,Kho,Zho,S,Pp,yte,euo,ouo,QP,ruo,tuo,auo,$p,Lte,nuo,suo,WP,luo,iuo,duo,Ip,xte,cuo,muo,HP,fuo,guo,huo,qp,kte,uuo,puo,UP,_uo,buo,Fuo,Np,Ste,vuo,Tuo,JP,Muo,Euo,Cuo,jp,Rte,wuo,Auo,YP,yuo,Luo,xuo,Dp,Bte,kuo,Suo,KP,Ruo,Buo,Puo,Gp,Pte,$uo,Iuo,ZP,quo,Nuo,juo,Op,$te,Duo,Guo,e$,Ouo,Vuo,Xuo,Vp,Ite,zuo,Quo,o$,Wuo,Huo,Uuo,Xp,qte,Juo,Yuo,r$,Kuo,Zuo,epo,zp,Nte,opo,rpo,t$,tpo,apo,npo,Qp,jte,spo,lpo,a$,ipo,dpo,cpo,Wp,Dte,mpo,fpo,n$,gpo,hpo,upo,Hp,Gte,ppo,_po,s$,bpo,Fpo,vpo,Up,Ote,Tpo,Mpo,l$,Epo,Cpo,wpo,Jp,Vte,Apo,ypo,i$,Lpo,xpo,kpo,Yp,Xte,Spo,Rpo,d$,Bpo,Ppo,$po,Kp,zte,Ipo,qpo,c$,Npo,jpo,Dpo,Zp,Qte,Gpo,Opo,m$,Vpo,Xpo,zpo,e_,Wte,Qpo,Wpo,f$,Hpo,Upo,Jpo,o_,Hte,Ypo,Kpo,g$,Zpo,e_o,o_o,r_,Ute,r_o,t_o,h$,a_o,n_o,s_o,t_,Jte,l_o,i_o,u$,d_o,c_o,m_o,a_,Yte,f_o,g_o,p$,h_o,u_o,p_o,n_,Kte,__o,b_o,_$,F_o,v_o,T_o,s_,Zte,M_o,E_o,b$,C_o,w_o,A_o,l_,eae,y_o,L_o,F$,x_o,k_o,S_o,i_,oae,R_o,B_o,v$,P_o,$_o,I_o,d_,rae,q_o,N_o,T$,j_o,D_o,G_o,c_,tae,O_o,V_o,M$,X_o,z_o,Q_o,m_,aae,W_o,H_o,E$,U_o,J_o,Y_o,f_,nae,K_o,Z_o,C$,ebo,obo,rbo,g_,sae,tbo,abo,w$,nbo,sbo,lbo,h_,lae,ibo,dbo,A$,cbo,mbo,fbo,u_,iae,gbo,hbo,y$,ubo,pbo,_bo,p_,dae,bbo,Fbo,L$,vbo,Tbo,Mbo,__,cae,Ebo,Cbo,x$,wbo,Abo,ybo,b_,mae,Lbo,xbo,k$,kbo,Sbo,Rbo,F_,Bbo,fae,Pbo,$bo,gae,Ibo,qbo,hae,Nbo,jbo,fA,pRe,rd,v_,uae,gA,Dbo,pae,Gbo,_Re,Ko,hA,Obo,td,Vbo,S$,Xbo,zbo,R$,Qbo,Wbo,Hbo,uA,Ubo,_ae,Jbo,Ybo,Kbo,Qr,pA,Zbo,bae,e2o,o2o,ad,r2o,Fae,t2o,a2o,B$,n2o,s2o,l2o,vae,i2o,d2o,_A,c2o,je,bA,m2o,Tae,f2o,g2o,Qa,h2o,Mae,u2o,p2o,Eae,_2o,b2o,Cae,F2o,v2o,T2o,$,T_,wae,M2o,E2o,P$,C2o,w2o,A2o,M_,Aae,y2o,L2o,$$,x2o,k2o,S2o,E_,yae,R2o,B2o,I$,P2o,$2o,I2o,C_,Lae,q2o,N2o,q$,j2o,D2o,G2o,w_,xae,O2o,V2o,N$,X2o,z2o,Q2o,A_,kae,W2o,H2o,j$,U2o,J2o,Y2o,y_,Sae,K2o,Z2o,D$,eFo,oFo,rFo,L_,Rae,tFo,aFo,G$,nFo,sFo,lFo,x_,Bae,iFo,dFo,O$,cFo,mFo,fFo,k_,Pae,gFo,hFo,V$,uFo,pFo,_Fo,S_,$ae,bFo,FFo,X$,vFo,TFo,MFo,R_,Iae,EFo,CFo,z$,wFo,AFo,yFo,B_,qae,LFo,xFo,Q$,kFo,SFo,RFo,P_,Nae,BFo,PFo,W$,$Fo,IFo,qFo,$_,jae,NFo,jFo,H$,DFo,GFo,OFo,I_,Dae,VFo,XFo,U$,zFo,QFo,WFo,q_,Gae,HFo,UFo,J$,JFo,YFo,KFo,N_,Oae,ZFo,evo,Y$,ovo,rvo,tvo,j_,Vae,avo,nvo,K$,svo,lvo,ivo,D_,Xae,dvo,cvo,Z$,mvo,fvo,gvo,G_,zae,hvo,uvo,eI,pvo,_vo,bvo,O_,Qae,Fvo,vvo,oI,Tvo,Mvo,Evo,V_,Wae,Cvo,wvo,rI,Avo,yvo,Lvo,X_,Hae,xvo,kvo,tI,Svo,Rvo,Bvo,z_,Uae,Pvo,$vo,aI,Ivo,qvo,Nvo,Q_,Jae,jvo,Dvo,nI,Gvo,Ovo,Vvo,W_,Yae,Xvo,zvo,sI,Qvo,Wvo,Hvo,H_,Kae,Uvo,Jvo,lI,Yvo,Kvo,Zvo,U_,Zae,eTo,oTo,iI,rTo,tTo,aTo,J_,ene,nTo,sTo,dI,lTo,iTo,dTo,Y_,one,cTo,mTo,cI,fTo,gTo,hTo,K_,rne,uTo,pTo,mI,_To,bTo,FTo,Z_,tne,vTo,TTo,fI,MTo,ETo,CTo,eb,ane,wTo,ATo,gI,yTo,LTo,xTo,ob,nne,kTo,STo,hI,RTo,BTo,PTo,rb,$To,sne,ITo,qTo,lne,NTo,jTo,ine,DTo,GTo,FA,bRe,nd,tb,dne,vA,OTo,cne,VTo,FRe,Zo,TA,XTo,sd,zTo,uI,QTo,WTo,pI,HTo,UTo,JTo,MA,YTo,mne,KTo,ZTo,e1o,Wr,EA,o1o,fne,r1o,t1o,ld,a1o,gne,n1o,s1o,_I,l1o,i1o,d1o,hne,c1o,m1o,CA,f1o,De,wA,g1o,une,h1o,u1o,Wa,p1o,pne,_1o,b1o,_ne,F1o,v1o,bne,T1o,M1o,E1o,I,ab,Fne,C1o,w1o,bI,A1o,y1o,L1o,nb,vne,x1o,k1o,FI,S1o,R1o,B1o,sb,Tne,P1o,$1o,vI,I1o,q1o,N1o,lb,Mne,j1o,D1o,TI,G1o,O1o,V1o,ib,Ene,X1o,z1o,MI,Q1o,W1o,H1o,db,Cne,U1o,J1o,EI,Y1o,K1o,Z1o,cb,wne,eMo,oMo,CI,rMo,tMo,aMo,mb,Ane,nMo,sMo,wI,lMo,iMo,dMo,fb,yne,cMo,mMo,AI,fMo,gMo,hMo,gb,Lne,uMo,pMo,yI,_Mo,bMo,FMo,hb,xne,vMo,TMo,LI,MMo,EMo,CMo,ub,kne,wMo,AMo,xI,yMo,LMo,xMo,pb,Sne,kMo,SMo,kI,RMo,BMo,PMo,_b,Rne,$Mo,IMo,SI,qMo,NMo,jMo,bb,Bne,DMo,GMo,RI,OMo,VMo,XMo,Fb,Pne,zMo,QMo,BI,WMo,HMo,UMo,vb,$ne,JMo,YMo,PI,KMo,ZMo,e4o,Tb,Ine,o4o,r4o,$I,t4o,a4o,n4o,Mb,qne,s4o,l4o,II,i4o,d4o,c4o,Eb,Nne,m4o,f4o,qI,g4o,h4o,u4o,Cb,jne,p4o,_4o,NI,b4o,F4o,v4o,wb,Dne,T4o,M4o,jI,E4o,C4o,w4o,Ab,Gne,A4o,y4o,DI,L4o,x4o,k4o,yb,One,S4o,R4o,GI,B4o,P4o,$4o,Lb,Vne,I4o,q4o,OI,N4o,j4o,D4o,xb,Xne,G4o,O4o,VI,V4o,X4o,z4o,kb,zne,Q4o,W4o,XI,H4o,U4o,J4o,Sb,Qne,Y4o,K4o,zI,Z4o,eEo,oEo,Rb,Wne,rEo,tEo,QI,aEo,nEo,sEo,Bb,Hne,lEo,iEo,WI,dEo,cEo,mEo,Pb,Une,fEo,gEo,Jne,hEo,uEo,pEo,$b,Yne,_Eo,bEo,HI,FEo,vEo,TEo,Ib,Kne,MEo,EEo,UI,CEo,wEo,AEo,qb,Zne,yEo,LEo,JI,xEo,kEo,SEo,Nb,ese,REo,BEo,YI,PEo,$Eo,IEo,jb,qEo,ose,NEo,jEo,rse,DEo,GEo,tse,OEo,VEo,AA,vRe,id,Db,ase,yA,XEo,nse,zEo,TRe,er,LA,QEo,dd,WEo,KI,HEo,UEo,ZI,JEo,YEo,KEo,xA,ZEo,sse,eCo,oCo,rCo,Hr,kA,tCo,lse,aCo,nCo,cd,sCo,ise,lCo,iCo,eq,dCo,cCo,mCo,dse,fCo,gCo,SA,hCo,Ge,RA,uCo,cse,pCo,_Co,Ha,bCo,mse,FCo,vCo,fse,TCo,MCo,gse,ECo,CCo,wCo,se,Gb,hse,ACo,yCo,oq,LCo,xCo,kCo,Ob,use,SCo,RCo,rq,BCo,PCo,$Co,Vb,pse,ICo,qCo,tq,NCo,jCo,DCo,Xb,_se,GCo,OCo,aq,VCo,XCo,zCo,zb,bse,QCo,WCo,nq,HCo,UCo,JCo,Qb,Fse,YCo,KCo,sq,ZCo,e5o,o5o,Wb,vse,r5o,t5o,lq,a5o,n5o,s5o,Hb,Tse,l5o,i5o,iq,d5o,c5o,m5o,Ub,Mse,f5o,g5o,dq,h5o,u5o,p5o,Jb,Ese,_5o,b5o,cq,F5o,v5o,T5o,Yb,Cse,M5o,E5o,mq,C5o,w5o,A5o,Kb,wse,y5o,L5o,fq,x5o,k5o,S5o,Zb,Ase,R5o,B5o,gq,P5o,$5o,I5o,e2,yse,q5o,N5o,hq,j5o,D5o,G5o,o2,Lse,O5o,V5o,uq,X5o,z5o,Q5o,r2,xse,W5o,H5o,pq,U5o,J5o,Y5o,t2,K5o,kse,Z5o,e3o,Sse,o3o,r3o,Rse,t3o,a3o,BA,MRe,md,a2,Bse,PA,n3o,Pse,s3o,ERe,or,$A,l3o,fd,i3o,_q,d3o,c3o,bq,m3o,f3o,g3o,IA,h3o,$se,u3o,p3o,_3o,Ur,qA,b3o,Ise,F3o,v3o,gd,T3o,qse,M3o,E3o,Fq,C3o,w3o,A3o,Nse,y3o,L3o,NA,x3o,Oe,jA,k3o,jse,S3o,R3o,Ua,B3o,Dse,P3o,$3o,Gse,I3o,q3o,Ose,N3o,j3o,D3o,y,n2,Vse,G3o,O3o,vq,V3o,X3o,z3o,s2,Xse,Q3o,W3o,Tq,H3o,U3o,J3o,l2,zse,Y3o,K3o,Mq,Z3o,ewo,owo,i2,Qse,rwo,two,Eq,awo,nwo,swo,d2,Wse,lwo,iwo,Cq,dwo,cwo,mwo,c2,Hse,fwo,gwo,wq,hwo,uwo,pwo,m2,Use,_wo,bwo,Aq,Fwo,vwo,Two,f2,Jse,Mwo,Ewo,yq,Cwo,wwo,Awo,g2,Yse,ywo,Lwo,Lq,xwo,kwo,Swo,h2,Kse,Rwo,Bwo,xq,Pwo,$wo,Iwo,u2,Zse,qwo,Nwo,kq,jwo,Dwo,Gwo,p2,ele,Owo,Vwo,Sq,Xwo,zwo,Qwo,_2,ole,Wwo,Hwo,Rq,Uwo,Jwo,Ywo,b2,rle,Kwo,Zwo,Bq,eAo,oAo,rAo,F2,tle,tAo,aAo,Pq,nAo,sAo,lAo,v2,ale,iAo,dAo,$q,cAo,mAo,fAo,T2,nle,gAo,hAo,Iq,uAo,pAo,_Ao,M2,sle,bAo,FAo,qq,vAo,TAo,MAo,E2,lle,EAo,CAo,Nq,wAo,AAo,yAo,C2,ile,LAo,xAo,jq,kAo,SAo,RAo,w2,dle,BAo,PAo,Dq,$Ao,IAo,qAo,A2,cle,NAo,jAo,Gq,DAo,GAo,OAo,y2,mle,VAo,XAo,Oq,zAo,QAo,WAo,L2,fle,HAo,UAo,Vq,JAo,YAo,KAo,x2,gle,ZAo,e6o,Xq,o6o,r6o,t6o,k2,hle,a6o,n6o,zq,s6o,l6o,i6o,S2,ule,d6o,c6o,Qq,m6o,f6o,g6o,R2,ple,h6o,u6o,Wq,p6o,_6o,b6o,B2,_le,F6o,v6o,Hq,T6o,M6o,E6o,P2,ble,C6o,w6o,Uq,A6o,y6o,L6o,$2,Fle,x6o,k6o,Jq,S6o,R6o,B6o,I2,vle,P6o,$6o,Yq,I6o,q6o,N6o,q2,Tle,j6o,D6o,Kq,G6o,O6o,V6o,N2,Mle,X6o,z6o,Zq,Q6o,W6o,H6o,j2,Ele,U6o,J6o,eN,Y6o,K6o,Z6o,D2,Cle,e0o,o0o,oN,r0o,t0o,a0o,G2,wle,n0o,s0o,rN,l0o,i0o,d0o,O2,Ale,c0o,m0o,tN,f0o,g0o,h0o,V2,yle,u0o,p0o,aN,_0o,b0o,F0o,X2,Lle,v0o,T0o,nN,M0o,E0o,C0o,z2,xle,w0o,A0o,sN,y0o,L0o,x0o,Q2,kle,k0o,S0o,lN,R0o,B0o,P0o,W2,Sle,$0o,I0o,iN,q0o,N0o,j0o,H2,Rle,D0o,G0o,dN,O0o,V0o,X0o,U2,Ble,z0o,Q0o,cN,W0o,H0o,U0o,J2,Ple,J0o,Y0o,mN,K0o,Z0o,eyo,Y2,oyo,$le,ryo,tyo,Ile,ayo,nyo,qle,syo,lyo,DA,CRe,hd,K2,Nle,GA,iyo,jle,dyo,wRe,rr,OA,cyo,ud,myo,fN,fyo,gyo,gN,hyo,uyo,pyo,VA,_yo,Dle,byo,Fyo,vyo,Jr,XA,Tyo,Gle,Myo,Eyo,pd,Cyo,Ole,wyo,Ayo,hN,yyo,Lyo,xyo,Vle,kyo,Syo,zA,Ryo,Ve,QA,Byo,Xle,Pyo,$yo,Ja,Iyo,zle,qyo,Nyo,Qle,jyo,Dyo,Wle,Gyo,Oyo,Vyo,G,Z2,Hle,Xyo,zyo,uN,Qyo,Wyo,Hyo,eF,Ule,Uyo,Jyo,pN,Yyo,Kyo,Zyo,oF,Jle,eLo,oLo,_N,rLo,tLo,aLo,rF,Yle,nLo,sLo,bN,lLo,iLo,dLo,tF,Kle,cLo,mLo,FN,fLo,gLo,hLo,aF,Zle,uLo,pLo,vN,_Lo,bLo,FLo,nF,eie,vLo,TLo,TN,MLo,ELo,CLo,sF,oie,wLo,ALo,MN,yLo,LLo,xLo,lF,rie,kLo,SLo,EN,RLo,BLo,PLo,iF,tie,$Lo,ILo,CN,qLo,NLo,jLo,dF,aie,DLo,GLo,wN,OLo,VLo,XLo,cF,nie,zLo,QLo,AN,WLo,HLo,ULo,mF,sie,JLo,YLo,yN,KLo,ZLo,e8o,fF,lie,o8o,r8o,LN,t8o,a8o,n8o,gF,iie,s8o,l8o,xN,i8o,d8o,c8o,hF,die,m8o,f8o,kN,g8o,h8o,u8o,uF,cie,p8o,_8o,SN,b8o,F8o,v8o,pF,mie,T8o,M8o,RN,E8o,C8o,w8o,_F,fie,A8o,y8o,BN,L8o,x8o,k8o,bF,gie,S8o,R8o,PN,B8o,P8o,$8o,FF,hie,I8o,q8o,$N,N8o,j8o,D8o,vF,uie,G8o,O8o,IN,V8o,X8o,z8o,TF,pie,Q8o,W8o,qN,H8o,U8o,J8o,MF,_ie,Y8o,K8o,NN,Z8o,e7o,o7o,EF,bie,r7o,t7o,jN,a7o,n7o,s7o,CF,Fie,l7o,i7o,DN,d7o,c7o,m7o,wF,vie,f7o,g7o,GN,h7o,u7o,p7o,AF,Tie,_7o,b7o,ON,F7o,v7o,T7o,yF,M7o,Mie,E7o,C7o,Eie,w7o,A7o,Cie,y7o,L7o,WA,ARe,_d,LF,wie,HA,x7o,Aie,k7o,yRe,tr,UA,S7o,bd,R7o,VN,B7o,P7o,XN,$7o,I7o,q7o,JA,N7o,yie,j7o,D7o,G7o,Yr,YA,O7o,Lie,V7o,X7o,Fd,z7o,xie,Q7o,W7o,zN,H7o,U7o,J7o,kie,Y7o,K7o,KA,Z7o,Xe,ZA,e9o,Sie,o9o,r9o,Ya,t9o,Rie,a9o,n9o,Bie,s9o,l9o,Pie,i9o,d9o,c9o,da,xF,$ie,m9o,f9o,QN,g9o,h9o,u9o,kF,Iie,p9o,_9o,WN,b9o,F9o,v9o,SF,qie,T9o,M9o,HN,E9o,C9o,w9o,RF,Nie,A9o,y9o,UN,L9o,x9o,k9o,BF,jie,S9o,R9o,JN,B9o,P9o,$9o,PF,I9o,Die,q9o,N9o,Gie,j9o,D9o,Oie,G9o,O9o,e6,LRe,vd,$F,Vie,o6,V9o,Xie,X9o,xRe,ar,r6,z9o,Td,Q9o,YN,W9o,H9o,KN,U9o,J9o,Y9o,t6,K9o,zie,Z9o,exo,oxo,Kr,a6,rxo,Qie,txo,axo,Md,nxo,Wie,sxo,lxo,ZN,ixo,dxo,cxo,Hie,mxo,fxo,n6,gxo,ze,s6,hxo,Uie,uxo,pxo,Ka,_xo,Jie,bxo,Fxo,Yie,vxo,Txo,Kie,Mxo,Exo,Cxo,j,IF,Zie,wxo,Axo,ej,yxo,Lxo,xxo,qF,ede,kxo,Sxo,oj,Rxo,Bxo,Pxo,NF,ode,$xo,Ixo,rj,qxo,Nxo,jxo,jF,rde,Dxo,Gxo,tj,Oxo,Vxo,Xxo,DF,tde,zxo,Qxo,aj,Wxo,Hxo,Uxo,GF,ade,Jxo,Yxo,nj,Kxo,Zxo,eko,OF,nde,oko,rko,sj,tko,ako,nko,VF,sde,sko,lko,lj,iko,dko,cko,XF,lde,mko,fko,ij,gko,hko,uko,zF,ide,pko,_ko,dj,bko,Fko,vko,QF,dde,Tko,Mko,cj,Eko,Cko,wko,WF,cde,Ako,yko,mj,Lko,xko,kko,HF,mde,Sko,Rko,fj,Bko,Pko,$ko,UF,fde,Iko,qko,gj,Nko,jko,Dko,JF,gde,Gko,Oko,hj,Vko,Xko,zko,YF,hde,Qko,Wko,uj,Hko,Uko,Jko,KF,ude,Yko,Kko,pj,Zko,eSo,oSo,ZF,pde,rSo,tSo,_j,aSo,nSo,sSo,ev,_de,lSo,iSo,bj,dSo,cSo,mSo,ov,bde,fSo,gSo,Fj,hSo,uSo,pSo,rv,Fde,_So,bSo,vj,FSo,vSo,TSo,tv,vde,MSo,ESo,Tj,CSo,wSo,ASo,av,Tde,ySo,LSo,Mj,xSo,kSo,SSo,nv,Mde,RSo,BSo,Ej,PSo,$So,ISo,sv,Ede,qSo,NSo,Cj,jSo,DSo,GSo,lv,Cde,OSo,VSo,wj,XSo,zSo,QSo,iv,wde,WSo,HSo,Aj,USo,JSo,YSo,dv,Ade,KSo,ZSo,yj,eRo,oRo,rRo,cv,yde,tRo,aRo,Lj,nRo,sRo,lRo,mv,Lde,iRo,dRo,xj,cRo,mRo,fRo,fv,xde,gRo,hRo,kj,uRo,pRo,_Ro,gv,kde,bRo,FRo,Sj,vRo,TRo,MRo,hv,Sde,ERo,CRo,Rj,wRo,ARo,yRo,uv,LRo,Rde,xRo,kRo,Bde,SRo,RRo,Pde,BRo,PRo,l6,kRe,Ed,pv,$de,i6,$Ro,Ide,IRo,SRe,nr,d6,qRo,Cd,NRo,Bj,jRo,DRo,Pj,GRo,ORo,VRo,c6,XRo,qde,zRo,QRo,WRo,Zr,m6,HRo,Nde,URo,JRo,wd,YRo,jde,KRo,ZRo,$j,eBo,oBo,rBo,Dde,tBo,aBo,f6,nBo,Qe,g6,sBo,Gde,lBo,iBo,Za,dBo,Ode,cBo,mBo,Vde,fBo,gBo,Xde,hBo,uBo,pBo,R,_v,zde,_Bo,bBo,Ij,FBo,vBo,TBo,bv,Qde,MBo,EBo,qj,CBo,wBo,ABo,Fv,Wde,yBo,LBo,Nj,xBo,kBo,SBo,vv,Hde,RBo,BBo,jj,PBo,$Bo,IBo,Tv,Ude,qBo,NBo,Dj,jBo,DBo,GBo,Mv,Jde,OBo,VBo,Gj,XBo,zBo,QBo,Ev,Yde,WBo,HBo,Oj,UBo,JBo,YBo,Cv,Kde,KBo,ZBo,Vj,ePo,oPo,rPo,wv,Zde,tPo,aPo,Xj,nPo,sPo,lPo,Av,ece,iPo,dPo,zj,cPo,mPo,fPo,yv,oce,gPo,hPo,Qj,uPo,pPo,_Po,Lv,rce,bPo,FPo,Wj,vPo,TPo,MPo,xv,tce,EPo,CPo,Hj,wPo,APo,yPo,kv,ace,LPo,xPo,Uj,kPo,SPo,RPo,Sv,nce,BPo,PPo,Jj,$Po,IPo,qPo,Rv,sce,NPo,jPo,Yj,DPo,GPo,OPo,Bv,lce,VPo,XPo,Kj,zPo,QPo,WPo,Pv,ice,HPo,UPo,Zj,JPo,YPo,KPo,$v,dce,ZPo,e$o,eD,o$o,r$o,t$o,Iv,cce,a$o,n$o,oD,s$o,l$o,i$o,qv,mce,d$o,c$o,rD,m$o,f$o,g$o,Nv,fce,h$o,u$o,tD,p$o,_$o,b$o,jv,gce,F$o,v$o,aD,T$o,M$o,E$o,Dv,hce,C$o,w$o,nD,A$o,y$o,L$o,Gv,uce,x$o,k$o,sD,S$o,R$o,B$o,Ov,pce,P$o,$$o,lD,I$o,q$o,N$o,Vv,_ce,j$o,D$o,iD,G$o,O$o,V$o,Xv,bce,X$o,z$o,dD,Q$o,W$o,H$o,zv,Fce,U$o,J$o,cD,Y$o,K$o,Z$o,Qv,vce,eIo,oIo,mD,rIo,tIo,aIo,Wv,Tce,nIo,sIo,fD,lIo,iIo,dIo,Hv,Mce,cIo,mIo,gD,fIo,gIo,hIo,Uv,Ece,uIo,pIo,hD,_Io,bIo,FIo,Jv,Cce,vIo,TIo,uD,MIo,EIo,CIo,Yv,wce,wIo,AIo,pD,yIo,LIo,xIo,Kv,Ace,kIo,SIo,_D,RIo,BIo,PIo,Zv,yce,$Io,IIo,bD,qIo,NIo,jIo,eT,Lce,DIo,GIo,FD,OIo,VIo,XIo,oT,xce,zIo,QIo,vD,WIo,HIo,UIo,rT,JIo,kce,YIo,KIo,Sce,ZIo,eqo,Rce,oqo,rqo,h6,RRe,Ad,tT,Bce,u6,tqo,Pce,aqo,BRe,sr,p6,nqo,yd,sqo,TD,lqo,iqo,MD,dqo,cqo,mqo,_6,fqo,$ce,gqo,hqo,uqo,et,b6,pqo,Ice,_qo,bqo,Ld,Fqo,qce,vqo,Tqo,ED,Mqo,Eqo,Cqo,Nce,wqo,Aqo,F6,yqo,We,v6,Lqo,jce,xqo,kqo,en,Sqo,Dce,Rqo,Bqo,Gce,Pqo,$qo,Oce,Iqo,qqo,Nqo,Vce,aT,Xce,jqo,Dqo,CD,Gqo,Oqo,Vqo,nT,Xqo,zce,zqo,Qqo,Qce,Wqo,Hqo,Wce,Uqo,Jqo,T6,PRe,xd,sT,Hce,M6,Yqo,Uce,Kqo,$Re,lr,E6,Zqo,kd,eNo,wD,oNo,rNo,AD,tNo,aNo,nNo,C6,sNo,Jce,lNo,iNo,dNo,ot,w6,cNo,Yce,mNo,fNo,Sd,gNo,Kce,hNo,uNo,yD,pNo,_No,bNo,Zce,FNo,vNo,A6,TNo,He,y6,MNo,eme,ENo,CNo,on,wNo,ome,ANo,yNo,rme,LNo,xNo,tme,kNo,SNo,RNo,ce,lT,ame,BNo,PNo,LD,$No,INo,qNo,iT,nme,NNo,jNo,xD,DNo,GNo,ONo,Ds,sme,VNo,XNo,kD,zNo,QNo,SD,WNo,HNo,UNo,dT,lme,JNo,YNo,RD,KNo,ZNo,ejo,fa,ime,ojo,rjo,BD,tjo,ajo,PD,njo,sjo,$D,ljo,ijo,djo,cT,dme,cjo,mjo,ID,fjo,gjo,hjo,mT,cme,ujo,pjo,qD,_jo,bjo,Fjo,fT,mme,vjo,Tjo,ND,Mjo,Ejo,Cjo,gT,fme,wjo,Ajo,jD,yjo,Ljo,xjo,hT,gme,kjo,Sjo,DD,Rjo,Bjo,Pjo,uT,hme,$jo,Ijo,GD,qjo,Njo,jjo,pT,ume,Djo,Gjo,OD,Ojo,Vjo,Xjo,_T,zjo,pme,Qjo,Wjo,_me,Hjo,Ujo,bme,Jjo,Yjo,L6,IRe,Rd,bT,Fme,x6,Kjo,vme,Zjo,qRe,ir,k6,eDo,Bd,oDo,VD,rDo,tDo,XD,aDo,nDo,sDo,S6,lDo,Tme,iDo,dDo,cDo,rt,R6,mDo,Mme,fDo,gDo,Pd,hDo,Eme,uDo,pDo,zD,_Do,bDo,FDo,Cme,vDo,TDo,B6,MDo,Ue,P6,EDo,wme,CDo,wDo,rn,ADo,Ame,yDo,LDo,yme,xDo,kDo,Lme,SDo,RDo,BDo,xme,FT,kme,PDo,$Do,QD,IDo,qDo,NDo,vT,jDo,Sme,DDo,GDo,Rme,ODo,VDo,Bme,XDo,zDo,$6,NRe,$d,TT,Pme,I6,QDo,$me,WDo,jRe,dr,q6,HDo,Id,UDo,WD,JDo,YDo,HD,KDo,ZDo,eGo,N6,oGo,Ime,rGo,tGo,aGo,tt,j6,nGo,qme,sGo,lGo,qd,iGo,Nme,dGo,cGo,UD,mGo,fGo,gGo,jme,hGo,uGo,D6,pGo,Je,G6,_Go,Dme,bGo,FGo,tn,vGo,Gme,TGo,MGo,Ome,EGo,CGo,Vme,wGo,AGo,yGo,Se,MT,Xme,LGo,xGo,JD,kGo,SGo,RGo,ET,zme,BGo,PGo,YD,$Go,IGo,qGo,CT,Qme,NGo,jGo,KD,DGo,GGo,OGo,wT,Wme,VGo,XGo,ZD,zGo,QGo,WGo,AT,Hme,HGo,UGo,eG,JGo,YGo,KGo,yT,Ume,ZGo,eOo,oG,oOo,rOo,tOo,LT,Jme,aOo,nOo,rG,sOo,lOo,iOo,xT,Yme,dOo,cOo,tG,mOo,fOo,gOo,kT,hOo,Kme,uOo,pOo,Zme,_Oo,bOo,efe,FOo,vOo,O6,DRe,Nd,ST,ofe,V6,TOo,rfe,MOo,GRe,cr,X6,EOo,jd,COo,aG,wOo,AOo,nG,yOo,LOo,xOo,z6,kOo,tfe,SOo,ROo,BOo,at,Q6,POo,afe,$Oo,IOo,Dd,qOo,nfe,NOo,jOo,sG,DOo,GOo,OOo,sfe,VOo,XOo,W6,zOo,Ye,H6,QOo,lfe,WOo,HOo,an,UOo,ife,JOo,YOo,dfe,KOo,ZOo,cfe,eVo,oVo,rVo,nn,RT,mfe,tVo,aVo,lG,nVo,sVo,lVo,BT,ffe,iVo,dVo,iG,cVo,mVo,fVo,PT,gfe,gVo,hVo,dG,uVo,pVo,_Vo,$T,hfe,bVo,FVo,cG,vVo,TVo,MVo,IT,EVo,ufe,CVo,wVo,pfe,AVo,yVo,_fe,LVo,xVo,U6,ORe,Gd,qT,bfe,J6,kVo,Ffe,SVo,VRe,mr,Y6,RVo,Od,BVo,mG,PVo,$Vo,fG,IVo,qVo,NVo,K6,jVo,vfe,DVo,GVo,OVo,nt,Z6,VVo,Tfe,XVo,zVo,Vd,QVo,Mfe,WVo,HVo,gG,UVo,JVo,YVo,Efe,KVo,ZVo,e0,eXo,Ke,o0,oXo,Cfe,rXo,tXo,sn,aXo,wfe,nXo,sXo,Afe,lXo,iXo,yfe,dXo,cXo,mXo,Re,NT,Lfe,fXo,gXo,hG,hXo,uXo,pXo,jT,xfe,_Xo,bXo,uG,FXo,vXo,TXo,DT,kfe,MXo,EXo,pG,CXo,wXo,AXo,GT,Sfe,yXo,LXo,_G,xXo,kXo,SXo,OT,Rfe,RXo,BXo,bG,PXo,$Xo,IXo,VT,Bfe,qXo,NXo,FG,jXo,DXo,GXo,XT,Pfe,OXo,VXo,vG,XXo,zXo,QXo,zT,$fe,WXo,HXo,TG,UXo,JXo,YXo,QT,KXo,Ife,ZXo,ezo,qfe,ozo,rzo,Nfe,tzo,azo,r0,XRe,Xd,WT,jfe,t0,nzo,Dfe,szo,zRe,fr,a0,lzo,zd,izo,MG,dzo,czo,EG,mzo,fzo,gzo,n0,hzo,Gfe,uzo,pzo,_zo,st,s0,bzo,Ofe,Fzo,vzo,Qd,Tzo,Vfe,Mzo,Ezo,CG,Czo,wzo,Azo,Xfe,yzo,Lzo,l0,xzo,Ze,i0,kzo,zfe,Szo,Rzo,ln,Bzo,Qfe,Pzo,$zo,Wfe,Izo,qzo,Hfe,Nzo,jzo,Dzo,d0,HT,Ufe,Gzo,Ozo,wG,Vzo,Xzo,zzo,UT,Jfe,Qzo,Wzo,AG,Hzo,Uzo,Jzo,JT,Yzo,Yfe,Kzo,Zzo,Kfe,eQo,oQo,Zfe,rQo,tQo,c0,QRe,Wd,YT,ege,m0,aQo,oge,nQo,WRe,gr,f0,sQo,Hd,lQo,yG,iQo,dQo,LG,cQo,mQo,fQo,g0,gQo,rge,hQo,uQo,pQo,lt,h0,_Qo,tge,bQo,FQo,Ud,vQo,age,TQo,MQo,xG,EQo,CQo,wQo,nge,AQo,yQo,u0,LQo,eo,p0,xQo,sge,kQo,SQo,dn,RQo,lge,BQo,PQo,ige,$Qo,IQo,dge,qQo,NQo,jQo,cn,KT,cge,DQo,GQo,kG,OQo,VQo,XQo,ZT,mge,zQo,QQo,SG,WQo,HQo,UQo,e1,fge,JQo,YQo,RG,KQo,ZQo,eWo,o1,gge,oWo,rWo,BG,tWo,aWo,nWo,r1,sWo,hge,lWo,iWo,uge,dWo,cWo,pge,mWo,fWo,_0,HRe,Jd,t1,_ge,b0,gWo,bge,hWo,URe,hr,F0,uWo,Yd,pWo,PG,_Wo,bWo,$G,FWo,vWo,TWo,v0,MWo,Fge,EWo,CWo,wWo,it,T0,AWo,vge,yWo,LWo,Kd,xWo,Tge,kWo,SWo,IG,RWo,BWo,PWo,Mge,$Wo,IWo,M0,qWo,oo,E0,NWo,Ege,jWo,DWo,mn,GWo,Cge,OWo,VWo,wge,XWo,zWo,Age,QWo,WWo,HWo,Zd,a1,yge,UWo,JWo,qG,YWo,KWo,ZWo,n1,Lge,eHo,oHo,NG,rHo,tHo,aHo,s1,xge,nHo,sHo,jG,lHo,iHo,dHo,l1,cHo,kge,mHo,fHo,Sge,gHo,hHo,Rge,uHo,pHo,C0,JRe,ec,i1,Bge,w0,_Ho,Pge,bHo,YRe,ur,A0,FHo,oc,vHo,DG,THo,MHo,GG,EHo,CHo,wHo,y0,AHo,$ge,yHo,LHo,xHo,dt,L0,kHo,Ige,SHo,RHo,rc,BHo,qge,PHo,$Ho,OG,IHo,qHo,NHo,Nge,jHo,DHo,x0,GHo,ro,k0,OHo,jge,VHo,XHo,fn,zHo,Dge,QHo,WHo,Gge,HHo,UHo,Oge,JHo,YHo,KHo,Vge,d1,Xge,ZHo,eUo,VG,oUo,rUo,tUo,c1,aUo,zge,nUo,sUo,Qge,lUo,iUo,Wge,dUo,cUo,S0,KRe,tc,m1,Hge,R0,mUo,Uge,fUo,ZRe,pr,B0,gUo,ac,hUo,XG,uUo,pUo,zG,_Uo,bUo,FUo,P0,vUo,Jge,TUo,MUo,EUo,ct,$0,CUo,Yge,wUo,AUo,nc,yUo,Kge,LUo,xUo,QG,kUo,SUo,RUo,Zge,BUo,PUo,I0,$Uo,to,q0,IUo,ehe,qUo,NUo,gn,jUo,ohe,DUo,GUo,rhe,OUo,VUo,the,XUo,zUo,QUo,ahe,f1,nhe,WUo,HUo,WG,UUo,JUo,YUo,g1,KUo,she,ZUo,eJo,lhe,oJo,rJo,ihe,tJo,aJo,N0,eBe,sc,h1,dhe,j0,nJo,che,sJo,oBe,_r,D0,lJo,lc,iJo,HG,dJo,cJo,UG,mJo,fJo,gJo,G0,hJo,mhe,uJo,pJo,_Jo,mt,O0,bJo,fhe,FJo,vJo,ic,TJo,ghe,MJo,EJo,JG,CJo,wJo,AJo,hhe,yJo,LJo,V0,xJo,ao,X0,kJo,uhe,SJo,RJo,hn,BJo,phe,PJo,$Jo,_he,IJo,qJo,bhe,NJo,jJo,DJo,dc,u1,Fhe,GJo,OJo,YG,VJo,XJo,zJo,p1,vhe,QJo,WJo,KG,HJo,UJo,JJo,_1,The,YJo,KJo,ZG,ZJo,eYo,oYo,b1,rYo,Mhe,tYo,aYo,Ehe,nYo,sYo,Che,lYo,iYo,z0,rBe,cc,F1,whe,Q0,dYo,Ahe,cYo,tBe,br,W0,mYo,mc,fYo,eO,gYo,hYo,oO,uYo,pYo,_Yo,H0,bYo,yhe,FYo,vYo,TYo,ft,U0,MYo,Lhe,EYo,CYo,fc,wYo,xhe,AYo,yYo,rO,LYo,xYo,kYo,khe,SYo,RYo,J0,BYo,no,Y0,PYo,She,$Yo,IYo,un,qYo,Rhe,NYo,jYo,Bhe,DYo,GYo,Phe,OYo,VYo,XYo,$he,v1,Ihe,zYo,QYo,tO,WYo,HYo,UYo,T1,JYo,qhe,YYo,KYo,Nhe,ZYo,eKo,jhe,oKo,rKo,K0,aBe,gc,M1,Dhe,Z0,tKo,Ghe,aKo,nBe,Fr,ey,nKo,hc,sKo,aO,lKo,iKo,nO,dKo,cKo,mKo,oy,fKo,Ohe,gKo,hKo,uKo,gt,ry,pKo,Vhe,_Ko,bKo,uc,FKo,Xhe,vKo,TKo,sO,MKo,EKo,CKo,zhe,wKo,AKo,ty,yKo,ho,ay,LKo,Qhe,xKo,kKo,pn,SKo,Whe,RKo,BKo,Hhe,PKo,$Ko,Uhe,IKo,qKo,NKo,x,E1,Jhe,jKo,DKo,lO,GKo,OKo,VKo,C1,Yhe,XKo,zKo,iO,QKo,WKo,HKo,w1,Khe,UKo,JKo,dO,YKo,KKo,ZKo,A1,Zhe,eZo,oZo,cO,rZo,tZo,aZo,y1,eue,nZo,sZo,mO,lZo,iZo,dZo,L1,oue,cZo,mZo,fO,fZo,gZo,hZo,x1,rue,uZo,pZo,gO,_Zo,bZo,FZo,k1,tue,vZo,TZo,hO,MZo,EZo,CZo,S1,aue,wZo,AZo,uO,yZo,LZo,xZo,R1,nue,kZo,SZo,pO,RZo,BZo,PZo,B1,sue,$Zo,IZo,_O,qZo,NZo,jZo,P1,lue,DZo,GZo,bO,OZo,VZo,XZo,$1,iue,zZo,QZo,FO,WZo,HZo,UZo,I1,due,JZo,YZo,vO,KZo,ZZo,eer,q1,cue,oer,rer,TO,ter,aer,ner,N1,mue,ser,ler,MO,ier,der,cer,Gs,fue,mer,fer,EO,ger,her,CO,uer,per,_er,j1,gue,ber,Fer,wO,ver,Ter,Mer,D1,hue,Eer,Cer,AO,wer,Aer,yer,G1,uue,Ler,xer,yO,ker,Ser,Rer,O1,pue,Ber,Per,LO,$er,Ier,qer,V1,_ue,Ner,jer,xO,Der,Ger,Oer,X1,bue,Ver,Xer,kO,zer,Qer,Wer,z1,Fue,Her,Uer,SO,Jer,Yer,Ker,Q1,vue,Zer,eor,RO,oor,ror,tor,W1,Tue,aor,nor,BO,sor,lor,ior,H1,Mue,dor,cor,PO,mor,gor,hor,U1,Eue,uor,por,$O,_or,bor,For,J1,Cue,vor,Tor,IO,Mor,Eor,Cor,Y1,wue,wor,Aor,qO,yor,Lor,xor,K1,Aue,kor,Sor,NO,Ror,Bor,Por,Z1,yue,$or,Ior,jO,qor,Nor,jor,eM,Lue,Dor,Gor,DO,Oor,Vor,Xor,oM,xue,zor,Qor,GO,Wor,Hor,Uor,rM,kue,Jor,Yor,OO,Kor,Zor,err,tM,Sue,orr,rrr,VO,trr,arr,nrr,aM,Rue,srr,lrr,XO,irr,drr,crr,nM,Bue,mrr,frr,zO,grr,hrr,urr,sM,Pue,prr,_rr,QO,brr,Frr,vrr,lM,$ue,Trr,Mrr,WO,Err,Crr,wrr,iM,Iue,Arr,yrr,HO,Lrr,xrr,krr,dM,que,Srr,Rrr,UO,Brr,Prr,$rr,cM,Nue,Irr,qrr,JO,Nrr,jrr,Drr,mM,jue,Grr,Orr,YO,Vrr,Xrr,zrr,Due,Qrr,Wrr,ny,sBe,pc,fM,Gue,sy,Hrr,Oue,Urr,lBe,vr,ly,Jrr,_c,Yrr,KO,Krr,Zrr,ZO,etr,otr,rtr,iy,ttr,Vue,atr,ntr,str,ht,dy,ltr,Xue,itr,dtr,bc,ctr,zue,mtr,ftr,eV,gtr,htr,utr,Que,ptr,_tr,cy,btr,uo,my,Ftr,Wue,vtr,Ttr,_n,Mtr,Hue,Etr,Ctr,Uue,wtr,Atr,Jue,ytr,Ltr,xtr,H,gM,Yue,ktr,Str,oV,Rtr,Btr,Ptr,hM,Kue,$tr,Itr,rV,qtr,Ntr,jtr,uM,Zue,Dtr,Gtr,tV,Otr,Vtr,Xtr,pM,epe,ztr,Qtr,aV,Wtr,Htr,Utr,_M,ope,Jtr,Ytr,nV,Ktr,Ztr,ear,bM,rpe,oar,rar,sV,tar,aar,nar,FM,tpe,sar,lar,lV,iar,dar,car,vM,ape,mar,far,iV,gar,har,uar,TM,npe,par,_ar,dV,bar,Far,Tar,MM,spe,Mar,Ear,cV,Car,war,Aar,EM,lpe,yar,Lar,mV,xar,kar,Sar,CM,ipe,Rar,Bar,fV,Par,$ar,Iar,wM,dpe,qar,Nar,gV,jar,Dar,Gar,AM,cpe,Oar,Var,hV,Xar,zar,Qar,yM,mpe,War,Har,uV,Uar,Jar,Yar,LM,fpe,Kar,Zar,pV,enr,onr,rnr,xM,gpe,tnr,anr,_V,nnr,snr,lnr,kM,hpe,inr,dnr,bV,cnr,mnr,fnr,SM,upe,gnr,hnr,FV,unr,pnr,_nr,RM,ppe,bnr,Fnr,vV,vnr,Tnr,Mnr,BM,_pe,Enr,Cnr,TV,wnr,Anr,ynr,PM,bpe,Lnr,xnr,MV,knr,Snr,Rnr,$M,Fpe,Bnr,Pnr,EV,$nr,Inr,qnr,vpe,Nnr,jnr,fy,iBe,Fc,IM,Tpe,gy,Dnr,Mpe,Gnr,dBe,Tr,hy,Onr,vc,Vnr,CV,Xnr,znr,wV,Qnr,Wnr,Hnr,uy,Unr,Epe,Jnr,Ynr,Knr,ut,py,Znr,Cpe,esr,osr,Tc,rsr,wpe,tsr,asr,AV,nsr,ssr,lsr,Ape,isr,dsr,_y,csr,po,by,msr,ype,fsr,gsr,bn,hsr,Lpe,usr,psr,xpe,_sr,bsr,kpe,Fsr,vsr,Tsr,me,qM,Spe,Msr,Esr,yV,Csr,wsr,Asr,NM,Rpe,ysr,Lsr,LV,xsr,ksr,Ssr,jM,Bpe,Rsr,Bsr,xV,Psr,$sr,Isr,DM,Ppe,qsr,Nsr,kV,jsr,Dsr,Gsr,GM,$pe,Osr,Vsr,SV,Xsr,zsr,Qsr,OM,Ipe,Wsr,Hsr,RV,Usr,Jsr,Ysr,VM,qpe,Ksr,Zsr,BV,elr,olr,rlr,XM,Npe,tlr,alr,PV,nlr,slr,llr,zM,jpe,ilr,dlr,$V,clr,mlr,flr,QM,Dpe,glr,hlr,IV,ulr,plr,_lr,WM,Gpe,blr,Flr,qV,vlr,Tlr,Mlr,HM,Ope,Elr,Clr,NV,wlr,Alr,ylr,Vpe,Llr,xlr,Fy,cBe,Mc,UM,Xpe,vy,klr,zpe,Slr,mBe,Mr,Ty,Rlr,Ec,Blr,jV,Plr,$lr,DV,Ilr,qlr,Nlr,My,jlr,Qpe,Dlr,Glr,Olr,pt,Ey,Vlr,Wpe,Xlr,zlr,Cc,Qlr,Hpe,Wlr,Hlr,GV,Ulr,Jlr,Ylr,Upe,Klr,Zlr,Cy,eir,_o,wy,oir,Jpe,rir,tir,Fn,air,Ype,nir,sir,Kpe,lir,iir,Zpe,dir,cir,mir,Ay,JM,e_e,fir,gir,OV,hir,uir,pir,YM,o_e,_ir,bir,VV,Fir,vir,Tir,r_e,Mir,Eir,yy,fBe,wc,KM,t_e,Ly,Cir,a_e,wir,gBe,Er,xy,Air,Ac,yir,XV,Lir,xir,zV,kir,Sir,Rir,ky,Bir,n_e,Pir,$ir,Iir,_t,Sy,qir,s_e,Nir,jir,yc,Dir,l_e,Gir,Oir,QV,Vir,Xir,zir,i_e,Qir,Wir,Ry,Hir,bo,By,Uir,d_e,Jir,Yir,vn,Kir,c_e,Zir,edr,m_e,odr,rdr,f_e,tdr,adr,ndr,J,ZM,g_e,sdr,ldr,WV,idr,ddr,cdr,e4,h_e,mdr,fdr,HV,gdr,hdr,udr,o4,u_e,pdr,_dr,UV,bdr,Fdr,vdr,r4,p_e,Tdr,Mdr,JV,Edr,Cdr,wdr,t4,__e,Adr,ydr,YV,Ldr,xdr,kdr,a4,b_e,Sdr,Rdr,KV,Bdr,Pdr,$dr,n4,F_e,Idr,qdr,ZV,Ndr,jdr,Ddr,s4,v_e,Gdr,Odr,eX,Vdr,Xdr,zdr,l4,T_e,Qdr,Wdr,oX,Hdr,Udr,Jdr,i4,M_e,Ydr,Kdr,rX,Zdr,ecr,ocr,d4,E_e,rcr,tcr,tX,acr,ncr,scr,c4,C_e,lcr,icr,aX,dcr,ccr,mcr,m4,w_e,fcr,gcr,nX,hcr,ucr,pcr,f4,A_e,_cr,bcr,sX,Fcr,vcr,Tcr,g4,y_e,Mcr,Ecr,lX,Ccr,wcr,Acr,h4,L_e,ycr,Lcr,iX,xcr,kcr,Scr,u4,x_e,Rcr,Bcr,dX,Pcr,$cr,Icr,p4,k_e,qcr,Ncr,cX,jcr,Dcr,Gcr,_4,S_e,Ocr,Vcr,mX,Xcr,zcr,Qcr,b4,R_e,Wcr,Hcr,fX,Ucr,Jcr,Ycr,B_e,Kcr,Zcr,Py,hBe,Lc,F4,P_e,$y,emr,$_e,omr,uBe,Cr,Iy,rmr,xc,tmr,gX,amr,nmr,hX,smr,lmr,imr,qy,dmr,I_e,cmr,mmr,fmr,bt,Ny,gmr,q_e,hmr,umr,kc,pmr,N_e,_mr,bmr,uX,Fmr,vmr,Tmr,j_e,Mmr,Emr,jy,Cmr,Fo,Dy,wmr,D_e,Amr,ymr,Tn,Lmr,G_e,xmr,kmr,O_e,Smr,Rmr,V_e,Bmr,Pmr,$mr,be,v4,X_e,Imr,qmr,pX,Nmr,jmr,Dmr,T4,z_e,Gmr,Omr,_X,Vmr,Xmr,zmr,M4,Q_e,Qmr,Wmr,bX,Hmr,Umr,Jmr,E4,W_e,Ymr,Kmr,FX,Zmr,efr,ofr,C4,H_e,rfr,tfr,vX,afr,nfr,sfr,w4,U_e,lfr,ifr,TX,dfr,cfr,mfr,A4,J_e,ffr,gfr,MX,hfr,ufr,pfr,y4,Y_e,_fr,bfr,EX,Ffr,vfr,Tfr,L4,K_e,Mfr,Efr,CX,Cfr,wfr,Afr,x4,Z_e,yfr,Lfr,wX,xfr,kfr,Sfr,ebe,Rfr,Bfr,Gy,pBe,Sc,k4,obe,Oy,Pfr,rbe,$fr,_Be,wr,Vy,Ifr,Rc,qfr,AX,Nfr,jfr,yX,Dfr,Gfr,Ofr,Xy,Vfr,tbe,Xfr,zfr,Qfr,Ft,zy,Wfr,abe,Hfr,Ufr,Bc,Jfr,nbe,Yfr,Kfr,LX,Zfr,egr,ogr,sbe,rgr,tgr,Qy,agr,vo,Wy,ngr,lbe,sgr,lgr,Mn,igr,ibe,dgr,cgr,dbe,mgr,fgr,cbe,ggr,hgr,ugr,V,S4,mbe,pgr,_gr,xX,bgr,Fgr,vgr,R4,fbe,Tgr,Mgr,kX,Egr,Cgr,wgr,B4,gbe,Agr,ygr,SX,Lgr,xgr,kgr,P4,hbe,Sgr,Rgr,RX,Bgr,Pgr,$gr,$4,ube,Igr,qgr,BX,Ngr,jgr,Dgr,I4,pbe,Ggr,Ogr,PX,Vgr,Xgr,zgr,q4,_be,Qgr,Wgr,$X,Hgr,Ugr,Jgr,N4,bbe,Ygr,Kgr,IX,Zgr,ehr,ohr,j4,Fbe,rhr,thr,qX,ahr,nhr,shr,D4,vbe,lhr,ihr,NX,dhr,chr,mhr,G4,Tbe,fhr,ghr,jX,hhr,uhr,phr,O4,Mbe,_hr,bhr,DX,Fhr,vhr,Thr,V4,Ebe,Mhr,Ehr,GX,Chr,whr,Ahr,X4,Cbe,yhr,Lhr,OX,xhr,khr,Shr,z4,wbe,Rhr,Bhr,VX,Phr,$hr,Ihr,Q4,Abe,qhr,Nhr,XX,jhr,Dhr,Ghr,W4,ybe,Ohr,Vhr,zX,Xhr,zhr,Qhr,H4,Lbe,Whr,Hhr,QX,Uhr,Jhr,Yhr,U4,xbe,Khr,Zhr,WX,eur,our,rur,J4,kbe,tur,aur,HX,nur,sur,lur,Y4,Sbe,iur,dur,UX,cur,mur,fur,K4,Rbe,gur,hur,JX,uur,pur,_ur,Z4,Bbe,bur,Fur,YX,vur,Tur,Mur,eE,Pbe,Eur,Cur,KX,wur,Aur,yur,oE,$be,Lur,xur,ZX,kur,Sur,Rur,rE,Ibe,Bur,Pur,ez,$ur,Iur,qur,qbe,Nur,jur,Hy,bBe,Pc,tE,Nbe,Uy,Dur,jbe,Gur,FBe,Ar,Jy,Our,$c,Vur,oz,Xur,zur,rz,Qur,Wur,Hur,Yy,Uur,Dbe,Jur,Yur,Kur,vt,Ky,Zur,Gbe,epr,opr,Ic,rpr,Obe,tpr,apr,tz,npr,spr,lpr,Vbe,ipr,dpr,Zy,cpr,To,eL,mpr,Xbe,fpr,gpr,En,hpr,zbe,upr,ppr,Qbe,_pr,bpr,Wbe,Fpr,vpr,Tpr,ne,aE,Hbe,Mpr,Epr,az,Cpr,wpr,Apr,nE,Ube,ypr,Lpr,nz,xpr,kpr,Spr,sE,Jbe,Rpr,Bpr,sz,Ppr,$pr,Ipr,lE,Ybe,qpr,Npr,lz,jpr,Dpr,Gpr,iE,Kbe,Opr,Vpr,iz,Xpr,zpr,Qpr,dE,Zbe,Wpr,Hpr,dz,Upr,Jpr,Ypr,cE,e2e,Kpr,Zpr,cz,e_r,o_r,r_r,mE,o2e,t_r,a_r,mz,n_r,s_r,l_r,fE,r2e,i_r,d_r,fz,c_r,m_r,f_r,gE,t2e,g_r,h_r,gz,u_r,p_r,__r,hE,a2e,b_r,F_r,hz,v_r,T_r,M_r,uE,n2e,E_r,C_r,uz,w_r,A_r,y_r,pE,s2e,L_r,x_r,pz,k_r,S_r,R_r,_E,l2e,B_r,P_r,_z,$_r,I_r,q_r,bE,i2e,N_r,j_r,bz,D_r,G_r,O_r,FE,d2e,V_r,X_r,Fz,z_r,Q_r,W_r,vE,c2e,H_r,U_r,vz,J_r,Y_r,K_r,m2e,Z_r,ebr,oL,vBe,qc,TE,f2e,rL,obr,g2e,rbr,TBe,yr,tL,tbr,Nc,abr,Tz,nbr,sbr,Mz,lbr,ibr,dbr,aL,cbr,h2e,mbr,fbr,gbr,Tt,nL,hbr,u2e,ubr,pbr,jc,_br,p2e,bbr,Fbr,Ez,vbr,Tbr,Mbr,_2e,Ebr,Cbr,sL,wbr,Mo,lL,Abr,b2e,ybr,Lbr,Cn,xbr,F2e,kbr,Sbr,v2e,Rbr,Bbr,T2e,Pbr,$br,Ibr,M2e,ME,E2e,qbr,Nbr,Cz,jbr,Dbr,Gbr,C2e,Obr,Vbr,iL,MBe,Dc,EE,w2e,dL,Xbr,A2e,zbr,EBe,Lr,cL,Qbr,Gc,Wbr,wz,Hbr,Ubr,Az,Jbr,Ybr,Kbr,mL,Zbr,y2e,e2r,o2r,r2r,Mt,fL,t2r,L2e,a2r,n2r,Oc,s2r,x2e,l2r,i2r,yz,d2r,c2r,m2r,k2e,f2r,g2r,gL,h2r,Eo,hL,u2r,S2e,p2r,_2r,wn,b2r,R2e,F2r,v2r,B2e,T2r,M2r,P2e,E2r,C2r,w2r,Y,CE,$2e,A2r,y2r,Lz,L2r,x2r,k2r,wE,I2e,S2r,R2r,xz,B2r,P2r,$2r,AE,q2e,I2r,q2r,kz,N2r,j2r,D2r,yE,N2e,G2r,O2r,Sz,V2r,X2r,z2r,LE,j2e,Q2r,W2r,Rz,H2r,U2r,J2r,xE,D2e,Y2r,K2r,Bz,Z2r,eFr,oFr,kE,G2e,rFr,tFr,Pz,aFr,nFr,sFr,SE,O2e,lFr,iFr,$z,dFr,cFr,mFr,RE,V2e,fFr,gFr,Iz,hFr,uFr,pFr,BE,X2e,_Fr,bFr,qz,FFr,vFr,TFr,PE,z2e,MFr,EFr,Nz,CFr,wFr,AFr,$E,Q2e,yFr,LFr,jz,xFr,kFr,SFr,IE,W2e,RFr,BFr,Dz,PFr,$Fr,IFr,qE,H2e,qFr,NFr,Gz,jFr,DFr,GFr,NE,U2e,OFr,VFr,Oz,XFr,zFr,QFr,jE,J2e,WFr,HFr,Vz,UFr,JFr,YFr,DE,Y2e,KFr,ZFr,Xz,evr,ovr,rvr,GE,K2e,tvr,avr,zz,nvr,svr,lvr,OE,Z2e,ivr,dvr,Qz,cvr,mvr,fvr,VE,eFe,gvr,hvr,Wz,uvr,pvr,_vr,oFe,bvr,Fvr,uL,CBe,Vc,XE,rFe,pL,vvr,tFe,Tvr,wBe,xr,_L,Mvr,Xc,Evr,Hz,Cvr,wvr,Uz,Avr,yvr,Lvr,bL,xvr,aFe,kvr,Svr,Rvr,Et,FL,Bvr,nFe,Pvr,$vr,zc,Ivr,sFe,qvr,Nvr,Jz,jvr,Dvr,Gvr,lFe,Ovr,Vvr,vL,Xvr,Co,TL,zvr,iFe,Qvr,Wvr,An,Hvr,dFe,Uvr,Jvr,cFe,Yvr,Kvr,mFe,Zvr,eTr,oTr,K,zE,fFe,rTr,tTr,Yz,aTr,nTr,sTr,QE,gFe,lTr,iTr,Kz,dTr,cTr,mTr,WE,hFe,fTr,gTr,Zz,hTr,uTr,pTr,HE,uFe,_Tr,bTr,eQ,FTr,vTr,TTr,UE,pFe,MTr,ETr,oQ,CTr,wTr,ATr,JE,_Fe,yTr,LTr,rQ,xTr,kTr,STr,YE,bFe,RTr,BTr,tQ,PTr,$Tr,ITr,KE,FFe,qTr,NTr,aQ,jTr,DTr,GTr,ZE,vFe,OTr,VTr,nQ,XTr,zTr,QTr,eC,TFe,WTr,HTr,sQ,UTr,JTr,YTr,oC,MFe,KTr,ZTr,lQ,e1r,o1r,r1r,rC,EFe,t1r,a1r,iQ,n1r,s1r,l1r,tC,CFe,i1r,d1r,dQ,c1r,m1r,f1r,aC,wFe,g1r,h1r,cQ,u1r,p1r,_1r,nC,AFe,b1r,F1r,mQ,v1r,T1r,M1r,sC,yFe,E1r,C1r,fQ,w1r,A1r,y1r,lC,LFe,L1r,x1r,gQ,k1r,S1r,R1r,iC,xFe,B1r,P1r,hQ,$1r,I1r,q1r,dC,kFe,N1r,j1r,uQ,D1r,G1r,O1r,cC,SFe,V1r,X1r,pQ,z1r,Q1r,W1r,RFe,H1r,U1r,ML,ABe,Qc,mC,BFe,EL,J1r,PFe,Y1r,yBe,kr,CL,K1r,Wc,Z1r,_Q,eMr,oMr,bQ,rMr,tMr,aMr,wL,nMr,$Fe,sMr,lMr,iMr,Ct,AL,dMr,IFe,cMr,mMr,Hc,fMr,qFe,gMr,hMr,FQ,uMr,pMr,_Mr,NFe,bMr,FMr,yL,vMr,wo,LL,TMr,jFe,MMr,EMr,yn,CMr,DFe,wMr,AMr,GFe,yMr,LMr,OFe,xMr,kMr,SMr,VFe,fC,XFe,RMr,BMr,vQ,PMr,$Mr,IMr,zFe,qMr,NMr,xL,LBe,Uc,gC,QFe,kL,jMr,WFe,DMr,xBe,Sr,SL,GMr,Jc,OMr,TQ,VMr,XMr,MQ,zMr,QMr,WMr,RL,HMr,HFe,UMr,JMr,YMr,wt,BL,KMr,UFe,ZMr,e4r,Yc,o4r,JFe,r4r,t4r,EQ,a4r,n4r,s4r,YFe,l4r,i4r,PL,d4r,Ao,$L,c4r,KFe,m4r,f4r,Ln,g4r,ZFe,h4r,u4r,eve,p4r,_4r,ove,b4r,F4r,v4r,rve,hC,tve,T4r,M4r,CQ,E4r,C4r,w4r,ave,A4r,y4r,IL,kBe,Kc,uC,nve,qL,L4r,sve,x4r,SBe,Rr,NL,k4r,Zc,S4r,wQ,R4r,B4r,AQ,P4r,$4r,I4r,jL,q4r,lve,N4r,j4r,D4r,At,DL,G4r,ive,O4r,V4r,em,X4r,dve,z4r,Q4r,yQ,W4r,H4r,U4r,cve,J4r,Y4r,GL,K4r,yo,OL,Z4r,mve,eEr,oEr,xn,rEr,fve,tEr,aEr,gve,nEr,sEr,hve,lEr,iEr,dEr,z,pC,uve,cEr,mEr,LQ,fEr,gEr,hEr,_C,pve,uEr,pEr,xQ,_Er,bEr,FEr,bC,_ve,vEr,TEr,kQ,MEr,EEr,CEr,FC,bve,wEr,AEr,SQ,yEr,LEr,xEr,vC,Fve,kEr,SEr,RQ,REr,BEr,PEr,TC,vve,$Er,IEr,BQ,qEr,NEr,jEr,MC,Tve,DEr,GEr,PQ,OEr,VEr,XEr,EC,Mve,zEr,QEr,$Q,WEr,HEr,UEr,CC,Eve,JEr,YEr,IQ,KEr,ZEr,eCr,wC,Cve,oCr,rCr,qQ,tCr,aCr,nCr,AC,wve,sCr,lCr,NQ,iCr,dCr,cCr,yC,Ave,mCr,fCr,jQ,gCr,hCr,uCr,LC,yve,pCr,_Cr,DQ,bCr,FCr,vCr,xC,Lve,TCr,MCr,GQ,ECr,CCr,wCr,kC,xve,ACr,yCr,OQ,LCr,xCr,kCr,SC,kve,SCr,RCr,VQ,BCr,PCr,$Cr,RC,Sve,ICr,qCr,XQ,NCr,jCr,DCr,BC,Rve,GCr,OCr,zQ,VCr,XCr,zCr,PC,Bve,QCr,WCr,QQ,HCr,UCr,JCr,$C,Pve,YCr,KCr,WQ,ZCr,e5r,o5r,IC,$ve,r5r,t5r,HQ,a5r,n5r,s5r,qC,Ive,l5r,i5r,UQ,d5r,c5r,m5r,NC,qve,f5r,g5r,JQ,h5r,u5r,p5r,jC,Nve,_5r,b5r,YQ,F5r,v5r,T5r,DC,jve,M5r,E5r,KQ,C5r,w5r,A5r,Dve,y5r,L5r,VL,RBe,om,GC,Gve,XL,x5r,Ove,k5r,BBe,Br,zL,S5r,rm,R5r,ZQ,B5r,P5r,eW,$5r,I5r,q5r,QL,N5r,Vve,j5r,D5r,G5r,yt,WL,O5r,Xve,V5r,X5r,tm,z5r,zve,Q5r,W5r,oW,H5r,U5r,J5r,Qve,Y5r,K5r,HL,Z5r,Lo,UL,e3r,Wve,o3r,r3r,kn,t3r,Hve,a3r,n3r,Uve,s3r,l3r,Jve,i3r,d3r,c3r,ca,OC,Yve,m3r,f3r,rW,g3r,h3r,u3r,VC,Kve,p3r,_3r,tW,b3r,F3r,v3r,XC,Zve,T3r,M3r,aW,E3r,C3r,w3r,zC,eTe,A3r,y3r,nW,L3r,x3r,k3r,QC,oTe,S3r,R3r,sW,B3r,P3r,$3r,rTe,I3r,q3r,JL,PBe,am,WC,tTe,YL,N3r,aTe,j3r,$Be,Pr,KL,D3r,nm,G3r,lW,O3r,V3r,iW,X3r,z3r,Q3r,ZL,W3r,nTe,H3r,U3r,J3r,Lt,e8,Y3r,sTe,K3r,Z3r,sm,ewr,lTe,owr,rwr,dW,twr,awr,nwr,iTe,swr,lwr,o8,iwr,xo,r8,dwr,dTe,cwr,mwr,Sn,fwr,cTe,gwr,hwr,mTe,uwr,pwr,fTe,_wr,bwr,Fwr,fe,HC,gTe,vwr,Twr,cW,Mwr,Ewr,Cwr,UC,hTe,wwr,Awr,mW,ywr,Lwr,xwr,JC,uTe,kwr,Swr,fW,Rwr,Bwr,Pwr,YC,pTe,$wr,Iwr,gW,qwr,Nwr,jwr,KC,_Te,Dwr,Gwr,hW,Owr,Vwr,Xwr,ZC,bTe,zwr,Qwr,uW,Wwr,Hwr,Uwr,e5,FTe,Jwr,Ywr,pW,Kwr,Zwr,eAr,o5,vTe,oAr,rAr,_W,tAr,aAr,nAr,r5,TTe,sAr,lAr,bW,iAr,dAr,cAr,t5,MTe,mAr,fAr,FW,gAr,hAr,uAr,a5,ETe,pAr,_Ar,vW,bAr,FAr,vAr,n5,CTe,TAr,MAr,TW,EAr,CAr,wAr,wTe,AAr,yAr,t8,IBe,lm,s5,ATe,a8,LAr,yTe,xAr,qBe,$r,n8,kAr,im,SAr,MW,RAr,BAr,EW,PAr,$Ar,IAr,s8,qAr,LTe,NAr,jAr,DAr,xt,l8,GAr,xTe,OAr,VAr,dm,XAr,kTe,zAr,QAr,CW,WAr,HAr,UAr,STe,JAr,YAr,i8,KAr,ko,d8,ZAr,RTe,e6r,o6r,Rn,r6r,BTe,t6r,a6r,PTe,n6r,s6r,$Te,l6r,i6r,d6r,Fe,l5,ITe,c6r,m6r,wW,f6r,g6r,h6r,i5,qTe,u6r,p6r,AW,_6r,b6r,F6r,d5,NTe,v6r,T6r,yW,M6r,E6r,C6r,c5,jTe,w6r,A6r,LW,y6r,L6r,x6r,m5,DTe,k6r,S6r,xW,R6r,B6r,P6r,f5,GTe,$6r,I6r,kW,q6r,N6r,j6r,g5,OTe,D6r,G6r,SW,O6r,V6r,X6r,h5,VTe,z6r,Q6r,RW,W6r,H6r,U6r,u5,XTe,J6r,Y6r,BW,K6r,Z6r,e0r,p5,zTe,o0r,r0r,PW,t0r,a0r,n0r,QTe,s0r,l0r,c8,NBe,cm,_5,WTe,m8,i0r,HTe,d0r,jBe,Ir,f8,c0r,mm,m0r,$W,f0r,g0r,IW,h0r,u0r,p0r,g8,_0r,UTe,b0r,F0r,v0r,kt,h8,T0r,JTe,M0r,E0r,fm,C0r,YTe,w0r,A0r,qW,y0r,L0r,x0r,KTe,k0r,S0r,u8,R0r,So,p8,B0r,ZTe,P0r,$0r,Bn,I0r,e1e,q0r,N0r,o1e,j0r,D0r,r1e,G0r,O0r,V0r,Ee,b5,t1e,X0r,z0r,NW,Q0r,W0r,H0r,F5,a1e,U0r,J0r,jW,Y0r,K0r,Z0r,v5,n1e,eyr,oyr,DW,ryr,tyr,ayr,T5,s1e,nyr,syr,GW,lyr,iyr,dyr,M5,l1e,cyr,myr,OW,fyr,gyr,hyr,E5,i1e,uyr,pyr,VW,_yr,byr,Fyr,C5,d1e,vyr,Tyr,XW,Myr,Eyr,Cyr,w5,c1e,wyr,Ayr,zW,yyr,Lyr,xyr,A5,m1e,kyr,Syr,QW,Ryr,Byr,Pyr,f1e,$yr,Iyr,_8,DBe,gm,y5,g1e,b8,qyr,h1e,Nyr,GBe,qr,F8,jyr,hm,Dyr,WW,Gyr,Oyr,HW,Vyr,Xyr,zyr,v8,Qyr,u1e,Wyr,Hyr,Uyr,St,T8,Jyr,p1e,Yyr,Kyr,um,Zyr,_1e,eLr,oLr,UW,rLr,tLr,aLr,b1e,nLr,sLr,M8,lLr,Ro,E8,iLr,F1e,dLr,cLr,Pn,mLr,v1e,fLr,gLr,T1e,hLr,uLr,M1e,pLr,_Lr,bLr,ve,L5,E1e,FLr,vLr,JW,TLr,MLr,ELr,x5,C1e,CLr,wLr,YW,ALr,yLr,LLr,k5,w1e,xLr,kLr,KW,SLr,RLr,BLr,S5,A1e,PLr,$Lr,ZW,ILr,qLr,NLr,R5,y1e,jLr,DLr,eH,GLr,OLr,VLr,B5,L1e,XLr,zLr,oH,QLr,WLr,HLr,P5,x1e,ULr,JLr,rH,YLr,KLr,ZLr,$5,k1e,e8r,o8r,tH,r8r,t8r,a8r,I5,S1e,n8r,s8r,aH,l8r,i8r,d8r,q5,R1e,c8r,m8r,nH,f8r,g8r,h8r,B1e,u8r,p8r,C8,OBe,pm,N5,P1e,w8,_8r,$1e,b8r,VBe,Nr,A8,F8r,_m,v8r,sH,T8r,M8r,lH,E8r,C8r,w8r,y8,A8r,I1e,y8r,L8r,x8r,Rt,L8,k8r,q1e,S8r,R8r,bm,B8r,N1e,P8r,$8r,iH,I8r,q8r,N8r,j1e,j8r,D8r,x8,G8r,Bo,k8,O8r,D1e,V8r,X8r,$n,z8r,G1e,Q8r,W8r,O1e,H8r,U8r,V1e,J8r,Y8r,K8r,Te,j5,X1e,Z8r,e7r,dH,o7r,r7r,t7r,D5,z1e,a7r,n7r,cH,s7r,l7r,i7r,G5,Q1e,d7r,c7r,mH,m7r,f7r,g7r,O5,W1e,h7r,u7r,fH,p7r,_7r,b7r,V5,H1e,F7r,v7r,gH,T7r,M7r,E7r,X5,U1e,C7r,w7r,hH,A7r,y7r,L7r,z5,J1e,x7r,k7r,uH,S7r,R7r,B7r,Q5,Y1e,P7r,$7r,pH,I7r,q7r,N7r,W5,K1e,j7r,D7r,_H,G7r,O7r,V7r,H5,Z1e,X7r,z7r,bH,Q7r,W7r,H7r,eMe,U7r,J7r,S8,XBe,Fm,U5,oMe,R8,Y7r,rMe,K7r,zBe,jr,B8,Z7r,vm,e9r,FH,o9r,r9r,vH,t9r,a9r,n9r,P8,s9r,tMe,l9r,i9r,d9r,Bt,$8,c9r,aMe,m9r,f9r,Tm,g9r,nMe,h9r,u9r,TH,p9r,_9r,b9r,sMe,F9r,v9r,I8,T9r,Po,q8,M9r,lMe,E9r,C9r,In,w9r,iMe,A9r,y9r,dMe,L9r,x9r,cMe,k9r,S9r,R9r,Be,J5,mMe,B9r,P9r,MH,$9r,I9r,q9r,Y5,fMe,N9r,j9r,EH,D9r,G9r,O9r,K5,gMe,V9r,X9r,CH,z9r,Q9r,W9r,Z5,hMe,H9r,U9r,wH,J9r,Y9r,K9r,e3,uMe,Z9r,exr,AH,oxr,rxr,txr,o3,pMe,axr,nxr,yH,sxr,lxr,ixr,r3,_Me,dxr,cxr,LH,mxr,fxr,gxr,t3,bMe,hxr,uxr,xH,pxr,_xr,bxr,FMe,Fxr,vxr,N8,QBe,Mm,a3,vMe,j8,Txr,TMe,Mxr,WBe,Dr,D8,Exr,Em,Cxr,kH,wxr,Axr,SH,yxr,Lxr,xxr,G8,kxr,MMe,Sxr,Rxr,Bxr,Pt,O8,Pxr,EMe,$xr,Ixr,Cm,qxr,CMe,Nxr,jxr,RH,Dxr,Gxr,Oxr,wMe,Vxr,Xxr,V8,zxr,$o,X8,Qxr,AMe,Wxr,Hxr,qn,Uxr,yMe,Jxr,Yxr,LMe,Kxr,Zxr,xMe,ekr,okr,rkr,Pe,n3,kMe,tkr,akr,BH,nkr,skr,lkr,s3,SMe,ikr,dkr,PH,ckr,mkr,fkr,l3,RMe,gkr,hkr,$H,ukr,pkr,_kr,i3,BMe,bkr,Fkr,IH,vkr,Tkr,Mkr,d3,PMe,Ekr,Ckr,qH,wkr,Akr,ykr,c3,$Me,Lkr,xkr,NH,kkr,Skr,Rkr,m3,IMe,Bkr,Pkr,jH,$kr,Ikr,qkr,f3,qMe,Nkr,jkr,DH,Dkr,Gkr,Okr,NMe,Vkr,Xkr,z8,HBe,wm,g3,jMe,Q8,zkr,DMe,Qkr,UBe,Gr,W8,Wkr,Am,Hkr,GH,Ukr,Jkr,OH,Ykr,Kkr,Zkr,H8,eSr,GMe,oSr,rSr,tSr,$t,U8,aSr,OMe,nSr,sSr,ym,lSr,VMe,iSr,dSr,VH,cSr,mSr,fSr,XMe,gSr,hSr,J8,uSr,Io,Y8,pSr,zMe,_Sr,bSr,Nn,FSr,QMe,vSr,TSr,WMe,MSr,ESr,HMe,CSr,wSr,ASr,UMe,h3,JMe,ySr,LSr,XH,xSr,kSr,SSr,YMe,RSr,BSr,K8,JBe,Lm,u3,KMe,Z8,PSr,ZMe,$Sr,YBe,Or,e7,ISr,xm,qSr,zH,NSr,jSr,QH,DSr,GSr,OSr,o7,VSr,e4e,XSr,zSr,QSr,It,r7,WSr,o4e,HSr,USr,km,JSr,r4e,YSr,KSr,WH,ZSr,eRr,oRr,t4e,rRr,tRr,t7,aRr,qo,a7,nRr,a4e,sRr,lRr,jn,iRr,n4e,dRr,cRr,s4e,mRr,fRr,l4e,gRr,hRr,uRr,n7,p3,i4e,pRr,_Rr,HH,bRr,FRr,vRr,_3,d4e,TRr,MRr,UH,ERr,CRr,wRr,c4e,ARr,yRr,s7,KBe,Sm,b3,m4e,l7,LRr,f4e,xRr,ZBe,Vr,i7,kRr,Rm,SRr,JH,RRr,BRr,YH,PRr,$Rr,IRr,d7,qRr,g4e,NRr,jRr,DRr,qt,c7,GRr,h4e,ORr,VRr,Bm,XRr,u4e,zRr,QRr,KH,WRr,HRr,URr,p4e,JRr,YRr,m7,KRr,No,f7,ZRr,_4e,eBr,oBr,Dn,rBr,b4e,tBr,aBr,F4e,nBr,sBr,v4e,lBr,iBr,dBr,T4e,F3,M4e,cBr,mBr,ZH,fBr,gBr,hBr,E4e,uBr,pBr,g7,ePe;return ge=new X({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Ew=new X({}),Cw=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Gm=new _Br({props:{warning:!0,$$slots:{default:[z3t]},$$scope:{ctx:$m}}}),ww=new X({}),Aw=new E({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L550"}}),xw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L573",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),kw=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),Sw=new E({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L695",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),Rw=new X({}),Bw=new E({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L351"}}),Iw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L365",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),qw=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),Nw=new E({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),jw=new X({}),Dw=new E({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L172"}}),Vw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L186",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Ph=new _Br({props:{$$slots:{default:[Q3t]},$$scope:{ctx:$m}}}),Xw=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),zw=new E({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L313",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),Qw=new X({}),Ww=new E({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L70"}}),Jw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L84",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),zh=new _Br({props:{$$slots:{default:[W3t]},$$scope:{ctx:$m}}}),Yw=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),Kw=new E({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L237",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),Zw=new X({}),eA=new E({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L709"}}),rA=new E({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),tA=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),aA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),nA=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sA=new X({}),lA=new E({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L716"}}),dA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),cA=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),mA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fA=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gA=new X({}),hA=new E({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L731"}}),pA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),_A=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),bA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),FA=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vA=new X({}),TA=new E({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L738"}}),EA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),CA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),wA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),AA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yA=new X({}),LA=new E({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L745"}}),kA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),SA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),RA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),BA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),PA=new X({}),$A=new E({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L754"}}),qA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),NA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),jA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),DA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),GA=new X({}),OA=new E({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L788"}}),XA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),zA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),QA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),WA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),HA=new X({}),UA=new E({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L795"}}),YA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),KA=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),ZA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),e6=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),o6=new X({}),r6=new E({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L781"}}),a6=new E({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),n6=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),s6=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),l6=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),i6=new X({}),d6=new E({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L763"}}),m6=new E({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),f6=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),g6=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),h6=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),u6=new X({}),p6=new E({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L770"}}),b6=new E({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),F6=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),v6=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),T6=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),M6=new X({}),E6=new E({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L804"}}),w6=new E({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),A6=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),y6=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),L6=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),x6=new X({}),k6=new E({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L843"}}),R6=new E({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),B6=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),P6=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$6=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),I6=new X({}),q6=new E({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L850"}}),j6=new E({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),D6=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),G6=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),O6=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),V6=new X({}),X6=new E({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L873"}}),Q6=new E({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),W6=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),H6=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),U6=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),J6=new X({}),Y6=new E({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L857"}}),Z6=new E({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),e0=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),o0=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),r0=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),t0=new X({}),a0=new E({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L864"}}),s0=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),l0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),i0=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),c0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),m0=new X({}),f0=new E({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L882"}}),h0=new E({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),u0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),p0=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),b0=new X({}),F0=new E({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L889"}}),T0=new E({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),M0=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),E0=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),C0=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),w0=new X({}),A0=new E({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L836"}}),L0=new E({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),x0=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),k0=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),S0=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),R0=new X({}),B0=new E({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L811"}}),$0=new E({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),I0=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),q0=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),N0=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),j0=new X({}),D0=new E({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L818"}}),O0=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),V0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),X0=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),z0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Q0=new X({}),W0=new E({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L827"}}),U0=new E({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),J0=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),Y0=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),K0=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Z0=new X({}),ey=new E({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),ry=new E({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),ty=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),ay=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ny=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sy=new X({}),ly=new E({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),dy=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),cy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),my=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gy=new X({}),hy=new E({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),py=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),_y=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),by=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Fy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vy=new X({}),Ty=new E({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),Ey=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Cy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),wy=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),yy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ly=new X({}),xy=new E({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),Sy=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),Ry=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),By=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Py=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$y=new X({}),Iy=new E({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),Ny=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),jy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),Dy=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Gy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Oy=new X({}),Vy=new E({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),zy=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Qy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),Wy=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Hy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Uy=new X({}),Jy=new E({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),Ky=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Zy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),eL=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),oL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rL=new X({}),tL=new E({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),nL=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),sL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),lL=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),iL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dL=new X({}),cL=new E({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),fL=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),gL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),hL=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pL=new X({}),_L=new E({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),FL=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),vL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),TL=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ML=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),EL=new X({}),CL=new E({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),AL=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),yL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),LL=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kL=new X({}),SL=new E({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),BL=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),PL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),$L=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),IL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qL=new X({}),NL=new E({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),DL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),GL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),OL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),VL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),XL=new X({}),zL=new E({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),WL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),HL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),UL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),JL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),YL=new X({}),KL=new E({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),e8=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),o8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),r8=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),t8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),a8=new X({}),n8=new E({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),l8=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),i8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),d8=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),c8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),m8=new X({}),f8=new E({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),h8=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),u8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),p8=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),b8=new X({}),F8=new E({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),T8=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),M8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),E8=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),C8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),w8=new X({}),A8=new E({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),L8=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),x8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),k8=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),S8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),R8=new X({}),B8=new E({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),$8=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),I8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),q8=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),N8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),j8=new X({}),D8=new E({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),O8=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),V8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),X8=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),z8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Q8=new X({}),W8=new E({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),U8=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),J8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),Y8=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),K8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Z8=new X({}),e7=new E({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),r7=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),t7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),a7=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),s7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),l7=new X({}),i7=new E({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),c7=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),m7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),f7=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),g7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),de=a("h1"),Ce=a("a"),lo=a("span"),m(ge.$$.fragment),Me=l(),Xo=a("span"),Ii=o("Auto Classes"),Im=l(),ma=a("p"),qi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=a("code"),Fw=o("from_pretrained()"),qm=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xe=l(),co=a("p"),ji=o("Instantiating one of "),Gn=a("a"),vw=o("AutoConfig"),On=o(", "),Vn=a("a"),Tw=o("AutoModel"),Di=o(`, and
`),Xn=a("a"),Mw=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),Nm=l(),m(Da.$$.fragment),mo=l(),_e=a("p"),m9=o("will create a model that is an instance of "),Oi=a("a"),f9=o("BertModel"),g9=o("."),zo=l(),Ga=a("p"),h9=o("There is one class of "),jm=a("code"),u9=o("AutoModel"),fIe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),ZSe=l(),Vi=a("h2"),Dm=a("a"),WJ=a("span"),m(Ew.$$.fragment),gIe=l(),HJ=a("span"),hIe=o("Extending the Auto Classes"),eRe=l(),zn=a("p"),uIe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),UJ=a("code"),pIe=o("NewModel"),_Ie=o(", make sure you have a "),JJ=a("code"),bIe=o("NewModelConfig"),FIe=o(` then you can add those to the auto
classes like this:`),oRe=l(),m(Cw.$$.fragment),rRe=l(),p9=a("p"),vIe=o("You will then be able to use the auto classes like you would usually do!"),tRe=l(),m(Gm.$$.fragment),aRe=l(),Xi=a("h2"),Om=a("a"),YJ=a("span"),m(ww.$$.fragment),TIe=l(),KJ=a("span"),MIe=o("AutoConfig"),nRe=l(),Qo=a("div"),m(Aw.$$.fragment),EIe=l(),yw=a("p"),CIe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),_9=a("a"),wIe=o("from_pretrained()"),AIe=o(" class method."),yIe=l(),Lw=a("p"),LIe=o("This class cannot be instantiated directly using "),ZJ=a("code"),xIe=o("__init__()"),kIe=o(" (throws an error)."),SIe=l(),fo=a("div"),m(xw.$$.fragment),RIe=l(),eY=a("p"),BIe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),PIe=l(),zi=a("p"),$Ie=o("The configuration class to instantiate is selected based on the "),oY=a("code"),IIe=o("model_type"),qIe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),rY=a("code"),NIe=o("pretrained_model_name_or_path"),jIe=o(":"),DIe=l(),F=a("ul"),Vm=a("li"),tY=a("strong"),GIe=o("albert"),OIe=o(" \u2014 "),b9=a("a"),VIe=o("AlbertConfig"),XIe=o(" (ALBERT model)"),zIe=l(),Xm=a("li"),aY=a("strong"),QIe=o("bart"),WIe=o(" \u2014 "),F9=a("a"),HIe=o("BartConfig"),UIe=o(" (BART model)"),JIe=l(),zm=a("li"),nY=a("strong"),YIe=o("beit"),KIe=o(" \u2014 "),v9=a("a"),ZIe=o("BeitConfig"),eqe=o(" (BEiT model)"),oqe=l(),Qm=a("li"),sY=a("strong"),rqe=o("bert"),tqe=o(" \u2014 "),T9=a("a"),aqe=o("BertConfig"),nqe=o(" (BERT model)"),sqe=l(),Wm=a("li"),lY=a("strong"),lqe=o("bert-generation"),iqe=o(" \u2014 "),M9=a("a"),dqe=o("BertGenerationConfig"),cqe=o(" (Bert Generation model)"),mqe=l(),Hm=a("li"),iY=a("strong"),fqe=o("big_bird"),gqe=o(" \u2014 "),E9=a("a"),hqe=o("BigBirdConfig"),uqe=o(" (BigBird model)"),pqe=l(),Um=a("li"),dY=a("strong"),_qe=o("bigbird_pegasus"),bqe=o(" \u2014 "),C9=a("a"),Fqe=o("BigBirdPegasusConfig"),vqe=o(" (BigBirdPegasus model)"),Tqe=l(),Jm=a("li"),cY=a("strong"),Mqe=o("blenderbot"),Eqe=o(" \u2014 "),w9=a("a"),Cqe=o("BlenderbotConfig"),wqe=o(" (Blenderbot model)"),Aqe=l(),Ym=a("li"),mY=a("strong"),yqe=o("blenderbot-small"),Lqe=o(" \u2014 "),A9=a("a"),xqe=o("BlenderbotSmallConfig"),kqe=o(" (BlenderbotSmall model)"),Sqe=l(),Km=a("li"),fY=a("strong"),Rqe=o("camembert"),Bqe=o(" \u2014 "),y9=a("a"),Pqe=o("CamembertConfig"),$qe=o(" (CamemBERT model)"),Iqe=l(),Zm=a("li"),gY=a("strong"),qqe=o("canine"),Nqe=o(" \u2014 "),L9=a("a"),jqe=o("CanineConfig"),Dqe=o(" (Canine model)"),Gqe=l(),ef=a("li"),hY=a("strong"),Oqe=o("clip"),Vqe=o(" \u2014 "),x9=a("a"),Xqe=o("CLIPConfig"),zqe=o(" (CLIP model)"),Qqe=l(),of=a("li"),uY=a("strong"),Wqe=o("convbert"),Hqe=o(" \u2014 "),k9=a("a"),Uqe=o("ConvBertConfig"),Jqe=o(" (ConvBERT model)"),Yqe=l(),rf=a("li"),pY=a("strong"),Kqe=o("convnext"),Zqe=o(" \u2014 "),S9=a("a"),eNe=o("ConvNextConfig"),oNe=o(" (ConvNext model)"),rNe=l(),tf=a("li"),_Y=a("strong"),tNe=o("ctrl"),aNe=o(" \u2014 "),R9=a("a"),nNe=o("CTRLConfig"),sNe=o(" (CTRL model)"),lNe=l(),af=a("li"),bY=a("strong"),iNe=o("data2vec-audio"),dNe=o(" \u2014 "),B9=a("a"),cNe=o("Data2VecAudioConfig"),mNe=o(" (Data2VecAudio model)"),fNe=l(),nf=a("li"),FY=a("strong"),gNe=o("data2vec-text"),hNe=o(" \u2014 "),P9=a("a"),uNe=o("Data2VecTextConfig"),pNe=o(" (Data2VecText model)"),_Ne=l(),sf=a("li"),vY=a("strong"),bNe=o("deberta"),FNe=o(" \u2014 "),$9=a("a"),vNe=o("DebertaConfig"),TNe=o(" (DeBERTa model)"),MNe=l(),lf=a("li"),TY=a("strong"),ENe=o("deberta-v2"),CNe=o(" \u2014 "),I9=a("a"),wNe=o("DebertaV2Config"),ANe=o(" (DeBERTa-v2 model)"),yNe=l(),df=a("li"),MY=a("strong"),LNe=o("decision_transformer"),xNe=o(" \u2014 "),q9=a("a"),kNe=o("DecisionTransformerConfig"),SNe=o(" (Decision Transformer model)"),RNe=l(),cf=a("li"),EY=a("strong"),BNe=o("deit"),PNe=o(" \u2014 "),N9=a("a"),$Ne=o("DeiTConfig"),INe=o(" (DeiT model)"),qNe=l(),mf=a("li"),CY=a("strong"),NNe=o("detr"),jNe=o(" \u2014 "),j9=a("a"),DNe=o("DetrConfig"),GNe=o(" (DETR model)"),ONe=l(),ff=a("li"),wY=a("strong"),VNe=o("distilbert"),XNe=o(" \u2014 "),D9=a("a"),zNe=o("DistilBertConfig"),QNe=o(" (DistilBERT model)"),WNe=l(),gf=a("li"),AY=a("strong"),HNe=o("dpr"),UNe=o(" \u2014 "),G9=a("a"),JNe=o("DPRConfig"),YNe=o(" (DPR model)"),KNe=l(),hf=a("li"),yY=a("strong"),ZNe=o("dpt"),eje=o(" \u2014 "),O9=a("a"),oje=o("DPTConfig"),rje=o(" (DPT model)"),tje=l(),uf=a("li"),LY=a("strong"),aje=o("electra"),nje=o(" \u2014 "),V9=a("a"),sje=o("ElectraConfig"),lje=o(" (ELECTRA model)"),ije=l(),pf=a("li"),xY=a("strong"),dje=o("encoder-decoder"),cje=o(" \u2014 "),X9=a("a"),mje=o("EncoderDecoderConfig"),fje=o(" (Encoder decoder model)"),gje=l(),_f=a("li"),kY=a("strong"),hje=o("flaubert"),uje=o(" \u2014 "),z9=a("a"),pje=o("FlaubertConfig"),_je=o(" (FlauBERT model)"),bje=l(),bf=a("li"),SY=a("strong"),Fje=o("fnet"),vje=o(" \u2014 "),Q9=a("a"),Tje=o("FNetConfig"),Mje=o(" (FNet model)"),Eje=l(),Ff=a("li"),RY=a("strong"),Cje=o("fsmt"),wje=o(" \u2014 "),W9=a("a"),Aje=o("FSMTConfig"),yje=o(" (FairSeq Machine-Translation model)"),Lje=l(),vf=a("li"),BY=a("strong"),xje=o("funnel"),kje=o(" \u2014 "),H9=a("a"),Sje=o("FunnelConfig"),Rje=o(" (Funnel Transformer model)"),Bje=l(),Tf=a("li"),PY=a("strong"),Pje=o("glpn"),$je=o(" \u2014 "),U9=a("a"),Ije=o("GLPNConfig"),qje=o(" (GLPN model)"),Nje=l(),Mf=a("li"),$Y=a("strong"),jje=o("gpt2"),Dje=o(" \u2014 "),J9=a("a"),Gje=o("GPT2Config"),Oje=o(" (OpenAI GPT-2 model)"),Vje=l(),Ef=a("li"),IY=a("strong"),Xje=o("gpt_neo"),zje=o(" \u2014 "),Y9=a("a"),Qje=o("GPTNeoConfig"),Wje=o(" (GPT Neo model)"),Hje=l(),Cf=a("li"),qY=a("strong"),Uje=o("gptj"),Jje=o(" \u2014 "),K9=a("a"),Yje=o("GPTJConfig"),Kje=o(" (GPT-J model)"),Zje=l(),wf=a("li"),NY=a("strong"),eDe=o("hubert"),oDe=o(" \u2014 "),Z9=a("a"),rDe=o("HubertConfig"),tDe=o(" (Hubert model)"),aDe=l(),Af=a("li"),jY=a("strong"),nDe=o("ibert"),sDe=o(" \u2014 "),ex=a("a"),lDe=o("IBertConfig"),iDe=o(" (I-BERT model)"),dDe=l(),yf=a("li"),DY=a("strong"),cDe=o("imagegpt"),mDe=o(" \u2014 "),ox=a("a"),fDe=o("ImageGPTConfig"),gDe=o(" (ImageGPT model)"),hDe=l(),Lf=a("li"),GY=a("strong"),uDe=o("layoutlm"),pDe=o(" \u2014 "),rx=a("a"),_De=o("LayoutLMConfig"),bDe=o(" (LayoutLM model)"),FDe=l(),xf=a("li"),OY=a("strong"),vDe=o("layoutlmv2"),TDe=o(" \u2014 "),tx=a("a"),MDe=o("LayoutLMv2Config"),EDe=o(" (LayoutLMv2 model)"),CDe=l(),kf=a("li"),VY=a("strong"),wDe=o("led"),ADe=o(" \u2014 "),ax=a("a"),yDe=o("LEDConfig"),LDe=o(" (LED model)"),xDe=l(),Sf=a("li"),XY=a("strong"),kDe=o("longformer"),SDe=o(" \u2014 "),nx=a("a"),RDe=o("LongformerConfig"),BDe=o(" (Longformer model)"),PDe=l(),Rf=a("li"),zY=a("strong"),$De=o("luke"),IDe=o(" \u2014 "),sx=a("a"),qDe=o("LukeConfig"),NDe=o(" (LUKE model)"),jDe=l(),Bf=a("li"),QY=a("strong"),DDe=o("lxmert"),GDe=o(" \u2014 "),lx=a("a"),ODe=o("LxmertConfig"),VDe=o(" (LXMERT model)"),XDe=l(),Pf=a("li"),WY=a("strong"),zDe=o("m2m_100"),QDe=o(" \u2014 "),ix=a("a"),WDe=o("M2M100Config"),HDe=o(" (M2M100 model)"),UDe=l(),$f=a("li"),HY=a("strong"),JDe=o("marian"),YDe=o(" \u2014 "),dx=a("a"),KDe=o("MarianConfig"),ZDe=o(" (Marian model)"),eGe=l(),If=a("li"),UY=a("strong"),oGe=o("maskformer"),rGe=o(" \u2014 "),cx=a("a"),tGe=o("MaskFormerConfig"),aGe=o(" (MaskFormer model)"),nGe=l(),qf=a("li"),JY=a("strong"),sGe=o("mbart"),lGe=o(" \u2014 "),mx=a("a"),iGe=o("MBartConfig"),dGe=o(" (mBART model)"),cGe=l(),Nf=a("li"),YY=a("strong"),mGe=o("megatron-bert"),fGe=o(" \u2014 "),fx=a("a"),gGe=o("MegatronBertConfig"),hGe=o(" (MegatronBert model)"),uGe=l(),jf=a("li"),KY=a("strong"),pGe=o("mobilebert"),_Ge=o(" \u2014 "),gx=a("a"),bGe=o("MobileBertConfig"),FGe=o(" (MobileBERT model)"),vGe=l(),Df=a("li"),ZY=a("strong"),TGe=o("mpnet"),MGe=o(" \u2014 "),hx=a("a"),EGe=o("MPNetConfig"),CGe=o(" (MPNet model)"),wGe=l(),Gf=a("li"),eK=a("strong"),AGe=o("mt5"),yGe=o(" \u2014 "),ux=a("a"),LGe=o("MT5Config"),xGe=o(" (mT5 model)"),kGe=l(),Of=a("li"),oK=a("strong"),SGe=o("nystromformer"),RGe=o(" \u2014 "),px=a("a"),BGe=o("NystromformerConfig"),PGe=o(" (Nystromformer model)"),$Ge=l(),Vf=a("li"),rK=a("strong"),IGe=o("openai-gpt"),qGe=o(" \u2014 "),_x=a("a"),NGe=o("OpenAIGPTConfig"),jGe=o(" (OpenAI GPT model)"),DGe=l(),Xf=a("li"),tK=a("strong"),GGe=o("pegasus"),OGe=o(" \u2014 "),bx=a("a"),VGe=o("PegasusConfig"),XGe=o(" (Pegasus model)"),zGe=l(),zf=a("li"),aK=a("strong"),QGe=o("perceiver"),WGe=o(" \u2014 "),Fx=a("a"),HGe=o("PerceiverConfig"),UGe=o(" (Perceiver model)"),JGe=l(),Qf=a("li"),nK=a("strong"),YGe=o("plbart"),KGe=o(" \u2014 "),vx=a("a"),ZGe=o("PLBartConfig"),eOe=o(" (PLBart model)"),oOe=l(),Wf=a("li"),sK=a("strong"),rOe=o("poolformer"),tOe=o(" \u2014 "),Tx=a("a"),aOe=o("PoolFormerConfig"),nOe=o(" (PoolFormer model)"),sOe=l(),Hf=a("li"),lK=a("strong"),lOe=o("prophetnet"),iOe=o(" \u2014 "),Mx=a("a"),dOe=o("ProphetNetConfig"),cOe=o(" (ProphetNet model)"),mOe=l(),Uf=a("li"),iK=a("strong"),fOe=o("qdqbert"),gOe=o(" \u2014 "),Ex=a("a"),hOe=o("QDQBertConfig"),uOe=o(" (QDQBert model)"),pOe=l(),Jf=a("li"),dK=a("strong"),_Oe=o("rag"),bOe=o(" \u2014 "),Cx=a("a"),FOe=o("RagConfig"),vOe=o(" (RAG model)"),TOe=l(),Yf=a("li"),cK=a("strong"),MOe=o("realm"),EOe=o(" \u2014 "),wx=a("a"),COe=o("RealmConfig"),wOe=o(" (Realm model)"),AOe=l(),Kf=a("li"),mK=a("strong"),yOe=o("reformer"),LOe=o(" \u2014 "),Ax=a("a"),xOe=o("ReformerConfig"),kOe=o(" (Reformer model)"),SOe=l(),Zf=a("li"),fK=a("strong"),ROe=o("regnet"),BOe=o(" \u2014 "),yx=a("a"),POe=o("RegNetConfig"),$Oe=o(" (RegNet model)"),IOe=l(),eg=a("li"),gK=a("strong"),qOe=o("rembert"),NOe=o(" \u2014 "),Lx=a("a"),jOe=o("RemBertConfig"),DOe=o(" (RemBERT model)"),GOe=l(),og=a("li"),hK=a("strong"),OOe=o("resnet"),VOe=o(" \u2014 "),xx=a("a"),XOe=o("ResNetConfig"),zOe=o(" (ResNet model)"),QOe=l(),rg=a("li"),uK=a("strong"),WOe=o("retribert"),HOe=o(" \u2014 "),kx=a("a"),UOe=o("RetriBertConfig"),JOe=o(" (RetriBERT model)"),YOe=l(),tg=a("li"),pK=a("strong"),KOe=o("roberta"),ZOe=o(" \u2014 "),Sx=a("a"),eVe=o("RobertaConfig"),oVe=o(" (RoBERTa model)"),rVe=l(),ag=a("li"),_K=a("strong"),tVe=o("roformer"),aVe=o(" \u2014 "),Rx=a("a"),nVe=o("RoFormerConfig"),sVe=o(" (RoFormer model)"),lVe=l(),ng=a("li"),bK=a("strong"),iVe=o("segformer"),dVe=o(" \u2014 "),Bx=a("a"),cVe=o("SegformerConfig"),mVe=o(" (SegFormer model)"),fVe=l(),sg=a("li"),FK=a("strong"),gVe=o("sew"),hVe=o(" \u2014 "),Px=a("a"),uVe=o("SEWConfig"),pVe=o(" (SEW model)"),_Ve=l(),lg=a("li"),vK=a("strong"),bVe=o("sew-d"),FVe=o(" \u2014 "),$x=a("a"),vVe=o("SEWDConfig"),TVe=o(" (SEW-D model)"),MVe=l(),ig=a("li"),TK=a("strong"),EVe=o("speech-encoder-decoder"),CVe=o(" \u2014 "),Ix=a("a"),wVe=o("SpeechEncoderDecoderConfig"),AVe=o(" (Speech Encoder decoder model)"),yVe=l(),dg=a("li"),MK=a("strong"),LVe=o("speech_to_text"),xVe=o(" \u2014 "),qx=a("a"),kVe=o("Speech2TextConfig"),SVe=o(" (Speech2Text model)"),RVe=l(),cg=a("li"),EK=a("strong"),BVe=o("speech_to_text_2"),PVe=o(" \u2014 "),Nx=a("a"),$Ve=o("Speech2Text2Config"),IVe=o(" (Speech2Text2 model)"),qVe=l(),mg=a("li"),CK=a("strong"),NVe=o("splinter"),jVe=o(" \u2014 "),jx=a("a"),DVe=o("SplinterConfig"),GVe=o(" (Splinter model)"),OVe=l(),fg=a("li"),wK=a("strong"),VVe=o("squeezebert"),XVe=o(" \u2014 "),Dx=a("a"),zVe=o("SqueezeBertConfig"),QVe=o(" (SqueezeBERT model)"),WVe=l(),gg=a("li"),AK=a("strong"),HVe=o("swin"),UVe=o(" \u2014 "),Gx=a("a"),JVe=o("SwinConfig"),YVe=o(" (Swin model)"),KVe=l(),hg=a("li"),yK=a("strong"),ZVe=o("t5"),eXe=o(" \u2014 "),Ox=a("a"),oXe=o("T5Config"),rXe=o(" (T5 model)"),tXe=l(),ug=a("li"),LK=a("strong"),aXe=o("tapas"),nXe=o(" \u2014 "),Vx=a("a"),sXe=o("TapasConfig"),lXe=o(" (TAPAS model)"),iXe=l(),pg=a("li"),xK=a("strong"),dXe=o("transfo-xl"),cXe=o(" \u2014 "),Xx=a("a"),mXe=o("TransfoXLConfig"),fXe=o(" (Transformer-XL model)"),gXe=l(),_g=a("li"),kK=a("strong"),hXe=o("trocr"),uXe=o(" \u2014 "),zx=a("a"),pXe=o("TrOCRConfig"),_Xe=o(" (TrOCR model)"),bXe=l(),bg=a("li"),SK=a("strong"),FXe=o("unispeech"),vXe=o(" \u2014 "),Qx=a("a"),TXe=o("UniSpeechConfig"),MXe=o(" (UniSpeech model)"),EXe=l(),Fg=a("li"),RK=a("strong"),CXe=o("unispeech-sat"),wXe=o(" \u2014 "),Wx=a("a"),AXe=o("UniSpeechSatConfig"),yXe=o(" (UniSpeechSat model)"),LXe=l(),vg=a("li"),BK=a("strong"),xXe=o("van"),kXe=o(" \u2014 "),Hx=a("a"),SXe=o("VanConfig"),RXe=o(" (VAN model)"),BXe=l(),Tg=a("li"),PK=a("strong"),PXe=o("vilt"),$Xe=o(" \u2014 "),Ux=a("a"),IXe=o("ViltConfig"),qXe=o(" (ViLT model)"),NXe=l(),Mg=a("li"),$K=a("strong"),jXe=o("vision-encoder-decoder"),DXe=o(" \u2014 "),Jx=a("a"),GXe=o("VisionEncoderDecoderConfig"),OXe=o(" (Vision Encoder decoder model)"),VXe=l(),Eg=a("li"),IK=a("strong"),XXe=o("vision-text-dual-encoder"),zXe=o(" \u2014 "),Yx=a("a"),QXe=o("VisionTextDualEncoderConfig"),WXe=o(" (VisionTextDualEncoder model)"),HXe=l(),Cg=a("li"),qK=a("strong"),UXe=o("visual_bert"),JXe=o(" \u2014 "),Kx=a("a"),YXe=o("VisualBertConfig"),KXe=o(" (VisualBert model)"),ZXe=l(),wg=a("li"),NK=a("strong"),eze=o("vit"),oze=o(" \u2014 "),Zx=a("a"),rze=o("ViTConfig"),tze=o(" (ViT model)"),aze=l(),Ag=a("li"),jK=a("strong"),nze=o("vit_mae"),sze=o(" \u2014 "),ek=a("a"),lze=o("ViTMAEConfig"),ize=o(" (ViTMAE model)"),dze=l(),yg=a("li"),DK=a("strong"),cze=o("wav2vec2"),mze=o(" \u2014 "),ok=a("a"),fze=o("Wav2Vec2Config"),gze=o(" (Wav2Vec2 model)"),hze=l(),Lg=a("li"),GK=a("strong"),uze=o("wavlm"),pze=o(" \u2014 "),rk=a("a"),_ze=o("WavLMConfig"),bze=o(" (WavLM model)"),Fze=l(),xg=a("li"),OK=a("strong"),vze=o("xglm"),Tze=o(" \u2014 "),tk=a("a"),Mze=o("XGLMConfig"),Eze=o(" (XGLM model)"),Cze=l(),kg=a("li"),VK=a("strong"),wze=o("xlm"),Aze=o(" \u2014 "),ak=a("a"),yze=o("XLMConfig"),Lze=o(" (XLM model)"),xze=l(),Sg=a("li"),XK=a("strong"),kze=o("xlm-prophetnet"),Sze=o(" \u2014 "),nk=a("a"),Rze=o("XLMProphetNetConfig"),Bze=o(" (XLMProphetNet model)"),Pze=l(),Rg=a("li"),zK=a("strong"),$ze=o("xlm-roberta"),Ize=o(" \u2014 "),sk=a("a"),qze=o("XLMRobertaConfig"),Nze=o(" (XLM-RoBERTa model)"),jze=l(),Bg=a("li"),QK=a("strong"),Dze=o("xlm-roberta-xl"),Gze=o(" \u2014 "),lk=a("a"),Oze=o("XLMRobertaXLConfig"),Vze=o(" (XLM-RoBERTa-XL model)"),Xze=l(),Pg=a("li"),WK=a("strong"),zze=o("xlnet"),Qze=o(" \u2014 "),ik=a("a"),Wze=o("XLNetConfig"),Hze=o(" (XLNet model)"),Uze=l(),$g=a("li"),HK=a("strong"),Jze=o("yoso"),Yze=o(" \u2014 "),dk=a("a"),Kze=o("YosoConfig"),Zze=o(" (YOSO model)"),eQe=l(),UK=a("p"),oQe=o("Examples:"),rQe=l(),m(kw.$$.fragment),tQe=l(),Ig=a("div"),m(Sw.$$.fragment),aQe=l(),JK=a("p"),nQe=o("Register a new configuration for this class."),sRe=l(),Qi=a("h2"),qg=a("a"),YK=a("span"),m(Rw.$$.fragment),sQe=l(),KK=a("span"),lQe=o("AutoTokenizer"),lRe=l(),Wo=a("div"),m(Bw.$$.fragment),iQe=l(),Pw=a("p"),dQe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ck=a("a"),cQe=o("AutoTokenizer.from_pretrained()"),mQe=o(" class method."),fQe=l(),$w=a("p"),gQe=o("This class cannot be instantiated directly using "),ZK=a("code"),hQe=o("__init__()"),uQe=o(" (throws an error)."),pQe=l(),go=a("div"),m(Iw.$$.fragment),_Qe=l(),eZ=a("p"),bQe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),FQe=l(),Oa=a("p"),vQe=o("The tokenizer class to instantiate is selected based on the "),oZ=a("code"),TQe=o("model_type"),MQe=o(` property of the config object (either
passed as an argument or loaded from `),rZ=a("code"),EQe=o("pretrained_model_name_or_path"),CQe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tZ=a("code"),wQe=o("pretrained_model_name_or_path"),AQe=o(":"),yQe=l(),C=a("ul"),Qn=a("li"),aZ=a("strong"),LQe=o("albert"),xQe=o(" \u2014 "),mk=a("a"),kQe=o("AlbertTokenizer"),SQe=o(" or "),fk=a("a"),RQe=o("AlbertTokenizerFast"),BQe=o(" (ALBERT model)"),PQe=l(),Wn=a("li"),nZ=a("strong"),$Qe=o("bart"),IQe=o(" \u2014 "),gk=a("a"),qQe=o("BartTokenizer"),NQe=o(" or "),hk=a("a"),jQe=o("BartTokenizerFast"),DQe=o(" (BART model)"),GQe=l(),Hn=a("li"),sZ=a("strong"),OQe=o("barthez"),VQe=o(" \u2014 "),uk=a("a"),XQe=o("BarthezTokenizer"),zQe=o(" or "),pk=a("a"),QQe=o("BarthezTokenizerFast"),WQe=o(" (BARThez model)"),HQe=l(),Ng=a("li"),lZ=a("strong"),UQe=o("bartpho"),JQe=o(" \u2014 "),_k=a("a"),YQe=o("BartphoTokenizer"),KQe=o(" (BARTpho model)"),ZQe=l(),Un=a("li"),iZ=a("strong"),eWe=o("bert"),oWe=o(" \u2014 "),bk=a("a"),rWe=o("BertTokenizer"),tWe=o(" or "),Fk=a("a"),aWe=o("BertTokenizerFast"),nWe=o(" (BERT model)"),sWe=l(),jg=a("li"),dZ=a("strong"),lWe=o("bert-generation"),iWe=o(" \u2014 "),vk=a("a"),dWe=o("BertGenerationTokenizer"),cWe=o(" (Bert Generation model)"),mWe=l(),Dg=a("li"),cZ=a("strong"),fWe=o("bert-japanese"),gWe=o(" \u2014 "),Tk=a("a"),hWe=o("BertJapaneseTokenizer"),uWe=o(" (BertJapanese model)"),pWe=l(),Gg=a("li"),mZ=a("strong"),_We=o("bertweet"),bWe=o(" \u2014 "),Mk=a("a"),FWe=o("BertweetTokenizer"),vWe=o(" (Bertweet model)"),TWe=l(),Jn=a("li"),fZ=a("strong"),MWe=o("big_bird"),EWe=o(" \u2014 "),Ek=a("a"),CWe=o("BigBirdTokenizer"),wWe=o(" or "),Ck=a("a"),AWe=o("BigBirdTokenizerFast"),yWe=o(" (BigBird model)"),LWe=l(),Yn=a("li"),gZ=a("strong"),xWe=o("bigbird_pegasus"),kWe=o(" \u2014 "),wk=a("a"),SWe=o("PegasusTokenizer"),RWe=o(" or "),Ak=a("a"),BWe=o("PegasusTokenizerFast"),PWe=o(" (BigBirdPegasus model)"),$We=l(),Kn=a("li"),hZ=a("strong"),IWe=o("blenderbot"),qWe=o(" \u2014 "),yk=a("a"),NWe=o("BlenderbotTokenizer"),jWe=o(" or "),Lk=a("a"),DWe=o("BlenderbotTokenizerFast"),GWe=o(" (Blenderbot model)"),OWe=l(),Og=a("li"),uZ=a("strong"),VWe=o("blenderbot-small"),XWe=o(" \u2014 "),xk=a("a"),zWe=o("BlenderbotSmallTokenizer"),QWe=o(" (BlenderbotSmall model)"),WWe=l(),Vg=a("li"),pZ=a("strong"),HWe=o("byt5"),UWe=o(" \u2014 "),kk=a("a"),JWe=o("ByT5Tokenizer"),YWe=o(" (ByT5 model)"),KWe=l(),Zn=a("li"),_Z=a("strong"),ZWe=o("camembert"),eHe=o(" \u2014 "),Sk=a("a"),oHe=o("CamembertTokenizer"),rHe=o(" or "),Rk=a("a"),tHe=o("CamembertTokenizerFast"),aHe=o(" (CamemBERT model)"),nHe=l(),Xg=a("li"),bZ=a("strong"),sHe=o("canine"),lHe=o(" \u2014 "),Bk=a("a"),iHe=o("CanineTokenizer"),dHe=o(" (Canine model)"),cHe=l(),es=a("li"),FZ=a("strong"),mHe=o("clip"),fHe=o(" \u2014 "),Pk=a("a"),gHe=o("CLIPTokenizer"),hHe=o(" or "),$k=a("a"),uHe=o("CLIPTokenizerFast"),pHe=o(" (CLIP model)"),_He=l(),os=a("li"),vZ=a("strong"),bHe=o("convbert"),FHe=o(" \u2014 "),Ik=a("a"),vHe=o("ConvBertTokenizer"),THe=o(" or "),qk=a("a"),MHe=o("ConvBertTokenizerFast"),EHe=o(" (ConvBERT model)"),CHe=l(),rs=a("li"),TZ=a("strong"),wHe=o("cpm"),AHe=o(" \u2014 "),Nk=a("a"),yHe=o("CpmTokenizer"),LHe=o(" or "),MZ=a("code"),xHe=o("CpmTokenizerFast"),kHe=o(" (CPM model)"),SHe=l(),zg=a("li"),EZ=a("strong"),RHe=o("ctrl"),BHe=o(" \u2014 "),jk=a("a"),PHe=o("CTRLTokenizer"),$He=o(" (CTRL model)"),IHe=l(),ts=a("li"),CZ=a("strong"),qHe=o("deberta"),NHe=o(" \u2014 "),Dk=a("a"),jHe=o("DebertaTokenizer"),DHe=o(" or "),Gk=a("a"),GHe=o("DebertaTokenizerFast"),OHe=o(" (DeBERTa model)"),VHe=l(),Qg=a("li"),wZ=a("strong"),XHe=o("deberta-v2"),zHe=o(" \u2014 "),Ok=a("a"),QHe=o("DebertaV2Tokenizer"),WHe=o(" (DeBERTa-v2 model)"),HHe=l(),as=a("li"),AZ=a("strong"),UHe=o("distilbert"),JHe=o(" \u2014 "),Vk=a("a"),YHe=o("DistilBertTokenizer"),KHe=o(" or "),Xk=a("a"),ZHe=o("DistilBertTokenizerFast"),eUe=o(" (DistilBERT model)"),oUe=l(),ns=a("li"),yZ=a("strong"),rUe=o("dpr"),tUe=o(" \u2014 "),zk=a("a"),aUe=o("DPRQuestionEncoderTokenizer"),nUe=o(" or "),Qk=a("a"),sUe=o("DPRQuestionEncoderTokenizerFast"),lUe=o(" (DPR model)"),iUe=l(),ss=a("li"),LZ=a("strong"),dUe=o("electra"),cUe=o(" \u2014 "),Wk=a("a"),mUe=o("ElectraTokenizer"),fUe=o(" or "),Hk=a("a"),gUe=o("ElectraTokenizerFast"),hUe=o(" (ELECTRA model)"),uUe=l(),Wg=a("li"),xZ=a("strong"),pUe=o("flaubert"),_Ue=o(" \u2014 "),Uk=a("a"),bUe=o("FlaubertTokenizer"),FUe=o(" (FlauBERT model)"),vUe=l(),ls=a("li"),kZ=a("strong"),TUe=o("fnet"),MUe=o(" \u2014 "),Jk=a("a"),EUe=o("FNetTokenizer"),CUe=o(" or "),Yk=a("a"),wUe=o("FNetTokenizerFast"),AUe=o(" (FNet model)"),yUe=l(),Hg=a("li"),SZ=a("strong"),LUe=o("fsmt"),xUe=o(" \u2014 "),Kk=a("a"),kUe=o("FSMTTokenizer"),SUe=o(" (FairSeq Machine-Translation model)"),RUe=l(),is=a("li"),RZ=a("strong"),BUe=o("funnel"),PUe=o(" \u2014 "),Zk=a("a"),$Ue=o("FunnelTokenizer"),IUe=o(" or "),eS=a("a"),qUe=o("FunnelTokenizerFast"),NUe=o(" (Funnel Transformer model)"),jUe=l(),ds=a("li"),BZ=a("strong"),DUe=o("gpt2"),GUe=o(" \u2014 "),oS=a("a"),OUe=o("GPT2Tokenizer"),VUe=o(" or "),rS=a("a"),XUe=o("GPT2TokenizerFast"),zUe=o(" (OpenAI GPT-2 model)"),QUe=l(),cs=a("li"),PZ=a("strong"),WUe=o("gpt_neo"),HUe=o(" \u2014 "),tS=a("a"),UUe=o("GPT2Tokenizer"),JUe=o(" or "),aS=a("a"),YUe=o("GPT2TokenizerFast"),KUe=o(" (GPT Neo model)"),ZUe=l(),ms=a("li"),$Z=a("strong"),eJe=o("herbert"),oJe=o(" \u2014 "),nS=a("a"),rJe=o("HerbertTokenizer"),tJe=o(" or "),sS=a("a"),aJe=o("HerbertTokenizerFast"),nJe=o(" (HerBERT model)"),sJe=l(),Ug=a("li"),IZ=a("strong"),lJe=o("hubert"),iJe=o(" \u2014 "),lS=a("a"),dJe=o("Wav2Vec2CTCTokenizer"),cJe=o(" (Hubert model)"),mJe=l(),fs=a("li"),qZ=a("strong"),fJe=o("ibert"),gJe=o(" \u2014 "),iS=a("a"),hJe=o("RobertaTokenizer"),uJe=o(" or "),dS=a("a"),pJe=o("RobertaTokenizerFast"),_Je=o(" (I-BERT model)"),bJe=l(),gs=a("li"),NZ=a("strong"),FJe=o("layoutlm"),vJe=o(" \u2014 "),cS=a("a"),TJe=o("LayoutLMTokenizer"),MJe=o(" or "),mS=a("a"),EJe=o("LayoutLMTokenizerFast"),CJe=o(" (LayoutLM model)"),wJe=l(),hs=a("li"),jZ=a("strong"),AJe=o("layoutlmv2"),yJe=o(" \u2014 "),fS=a("a"),LJe=o("LayoutLMv2Tokenizer"),xJe=o(" or "),gS=a("a"),kJe=o("LayoutLMv2TokenizerFast"),SJe=o(" (LayoutLMv2 model)"),RJe=l(),us=a("li"),DZ=a("strong"),BJe=o("layoutxlm"),PJe=o(" \u2014 "),hS=a("a"),$Je=o("LayoutXLMTokenizer"),IJe=o(" or "),uS=a("a"),qJe=o("LayoutXLMTokenizerFast"),NJe=o(" (LayoutXLM model)"),jJe=l(),ps=a("li"),GZ=a("strong"),DJe=o("led"),GJe=o(" \u2014 "),pS=a("a"),OJe=o("LEDTokenizer"),VJe=o(" or "),_S=a("a"),XJe=o("LEDTokenizerFast"),zJe=o(" (LED model)"),QJe=l(),_s=a("li"),OZ=a("strong"),WJe=o("longformer"),HJe=o(" \u2014 "),bS=a("a"),UJe=o("LongformerTokenizer"),JJe=o(" or "),FS=a("a"),YJe=o("LongformerTokenizerFast"),KJe=o(" (Longformer model)"),ZJe=l(),Jg=a("li"),VZ=a("strong"),eYe=o("luke"),oYe=o(" \u2014 "),vS=a("a"),rYe=o("LukeTokenizer"),tYe=o(" (LUKE model)"),aYe=l(),bs=a("li"),XZ=a("strong"),nYe=o("lxmert"),sYe=o(" \u2014 "),TS=a("a"),lYe=o("LxmertTokenizer"),iYe=o(" or "),MS=a("a"),dYe=o("LxmertTokenizerFast"),cYe=o(" (LXMERT model)"),mYe=l(),Yg=a("li"),zZ=a("strong"),fYe=o("m2m_100"),gYe=o(" \u2014 "),ES=a("a"),hYe=o("M2M100Tokenizer"),uYe=o(" (M2M100 model)"),pYe=l(),Kg=a("li"),QZ=a("strong"),_Ye=o("marian"),bYe=o(" \u2014 "),CS=a("a"),FYe=o("MarianTokenizer"),vYe=o(" (Marian model)"),TYe=l(),Fs=a("li"),WZ=a("strong"),MYe=o("mbart"),EYe=o(" \u2014 "),wS=a("a"),CYe=o("MBartTokenizer"),wYe=o(" or "),AS=a("a"),AYe=o("MBartTokenizerFast"),yYe=o(" (mBART model)"),LYe=l(),vs=a("li"),HZ=a("strong"),xYe=o("mbart50"),kYe=o(" \u2014 "),yS=a("a"),SYe=o("MBart50Tokenizer"),RYe=o(" or "),LS=a("a"),BYe=o("MBart50TokenizerFast"),PYe=o(" (mBART-50 model)"),$Ye=l(),Zg=a("li"),UZ=a("strong"),IYe=o("mluke"),qYe=o(" \u2014 "),xS=a("a"),NYe=o("MLukeTokenizer"),jYe=o(" (mLUKE model)"),DYe=l(),Ts=a("li"),JZ=a("strong"),GYe=o("mobilebert"),OYe=o(" \u2014 "),kS=a("a"),VYe=o("MobileBertTokenizer"),XYe=o(" or "),SS=a("a"),zYe=o("MobileBertTokenizerFast"),QYe=o(" (MobileBERT model)"),WYe=l(),Ms=a("li"),YZ=a("strong"),HYe=o("mpnet"),UYe=o(" \u2014 "),RS=a("a"),JYe=o("MPNetTokenizer"),YYe=o(" or "),BS=a("a"),KYe=o("MPNetTokenizerFast"),ZYe=o(" (MPNet model)"),eKe=l(),Es=a("li"),KZ=a("strong"),oKe=o("mt5"),rKe=o(" \u2014 "),PS=a("a"),tKe=o("MT5Tokenizer"),aKe=o(" or "),$S=a("a"),nKe=o("MT5TokenizerFast"),sKe=o(" (mT5 model)"),lKe=l(),Cs=a("li"),ZZ=a("strong"),iKe=o("openai-gpt"),dKe=o(" \u2014 "),IS=a("a"),cKe=o("OpenAIGPTTokenizer"),mKe=o(" or "),qS=a("a"),fKe=o("OpenAIGPTTokenizerFast"),gKe=o(" (OpenAI GPT model)"),hKe=l(),ws=a("li"),eee=a("strong"),uKe=o("pegasus"),pKe=o(" \u2014 "),NS=a("a"),_Ke=o("PegasusTokenizer"),bKe=o(" or "),jS=a("a"),FKe=o("PegasusTokenizerFast"),vKe=o(" (Pegasus model)"),TKe=l(),eh=a("li"),oee=a("strong"),MKe=o("perceiver"),EKe=o(" \u2014 "),DS=a("a"),CKe=o("PerceiverTokenizer"),wKe=o(" (Perceiver model)"),AKe=l(),oh=a("li"),ree=a("strong"),yKe=o("phobert"),LKe=o(" \u2014 "),GS=a("a"),xKe=o("PhobertTokenizer"),kKe=o(" (PhoBERT model)"),SKe=l(),rh=a("li"),tee=a("strong"),RKe=o("plbart"),BKe=o(" \u2014 "),OS=a("a"),PKe=o("PLBartTokenizer"),$Ke=o(" (PLBart model)"),IKe=l(),th=a("li"),aee=a("strong"),qKe=o("prophetnet"),NKe=o(" \u2014 "),VS=a("a"),jKe=o("ProphetNetTokenizer"),DKe=o(" (ProphetNet model)"),GKe=l(),As=a("li"),nee=a("strong"),OKe=o("qdqbert"),VKe=o(" \u2014 "),XS=a("a"),XKe=o("BertTokenizer"),zKe=o(" or "),zS=a("a"),QKe=o("BertTokenizerFast"),WKe=o(" (QDQBert model)"),HKe=l(),ah=a("li"),see=a("strong"),UKe=o("rag"),JKe=o(" \u2014 "),QS=a("a"),YKe=o("RagTokenizer"),KKe=o(" (RAG model)"),ZKe=l(),ys=a("li"),lee=a("strong"),eZe=o("realm"),oZe=o(" \u2014 "),WS=a("a"),rZe=o("RealmTokenizer"),tZe=o(" or "),HS=a("a"),aZe=o("RealmTokenizerFast"),nZe=o(" (Realm model)"),sZe=l(),Ls=a("li"),iee=a("strong"),lZe=o("reformer"),iZe=o(" \u2014 "),US=a("a"),dZe=o("ReformerTokenizer"),cZe=o(" or "),JS=a("a"),mZe=o("ReformerTokenizerFast"),fZe=o(" (Reformer model)"),gZe=l(),xs=a("li"),dee=a("strong"),hZe=o("rembert"),uZe=o(" \u2014 "),YS=a("a"),pZe=o("RemBertTokenizer"),_Ze=o(" or "),KS=a("a"),bZe=o("RemBertTokenizerFast"),FZe=o(" (RemBERT model)"),vZe=l(),ks=a("li"),cee=a("strong"),TZe=o("retribert"),MZe=o(" \u2014 "),ZS=a("a"),EZe=o("RetriBertTokenizer"),CZe=o(" or "),eR=a("a"),wZe=o("RetriBertTokenizerFast"),AZe=o(" (RetriBERT model)"),yZe=l(),Ss=a("li"),mee=a("strong"),LZe=o("roberta"),xZe=o(" \u2014 "),oR=a("a"),kZe=o("RobertaTokenizer"),SZe=o(" or "),rR=a("a"),RZe=o("RobertaTokenizerFast"),BZe=o(" (RoBERTa model)"),PZe=l(),Rs=a("li"),fee=a("strong"),$Ze=o("roformer"),IZe=o(" \u2014 "),tR=a("a"),qZe=o("RoFormerTokenizer"),NZe=o(" or "),aR=a("a"),jZe=o("RoFormerTokenizerFast"),DZe=o(" (RoFormer model)"),GZe=l(),nh=a("li"),gee=a("strong"),OZe=o("speech_to_text"),VZe=o(" \u2014 "),nR=a("a"),XZe=o("Speech2TextTokenizer"),zZe=o(" (Speech2Text model)"),QZe=l(),sh=a("li"),hee=a("strong"),WZe=o("speech_to_text_2"),HZe=o(" \u2014 "),sR=a("a"),UZe=o("Speech2Text2Tokenizer"),JZe=o(" (Speech2Text2 model)"),YZe=l(),Bs=a("li"),uee=a("strong"),KZe=o("splinter"),ZZe=o(" \u2014 "),lR=a("a"),eeo=o("SplinterTokenizer"),oeo=o(" or "),iR=a("a"),reo=o("SplinterTokenizerFast"),teo=o(" (Splinter model)"),aeo=l(),Ps=a("li"),pee=a("strong"),neo=o("squeezebert"),seo=o(" \u2014 "),dR=a("a"),leo=o("SqueezeBertTokenizer"),ieo=o(" or "),cR=a("a"),deo=o("SqueezeBertTokenizerFast"),ceo=o(" (SqueezeBERT model)"),meo=l(),$s=a("li"),_ee=a("strong"),feo=o("t5"),geo=o(" \u2014 "),mR=a("a"),heo=o("T5Tokenizer"),ueo=o(" or "),fR=a("a"),peo=o("T5TokenizerFast"),_eo=o(" (T5 model)"),beo=l(),lh=a("li"),bee=a("strong"),Feo=o("tapas"),veo=o(" \u2014 "),gR=a("a"),Teo=o("TapasTokenizer"),Meo=o(" (TAPAS model)"),Eeo=l(),ih=a("li"),Fee=a("strong"),Ceo=o("transfo-xl"),weo=o(" \u2014 "),hR=a("a"),Aeo=o("TransfoXLTokenizer"),yeo=o(" (Transformer-XL model)"),Leo=l(),dh=a("li"),vee=a("strong"),xeo=o("wav2vec2"),keo=o(" \u2014 "),uR=a("a"),Seo=o("Wav2Vec2CTCTokenizer"),Reo=o(" (Wav2Vec2 model)"),Beo=l(),ch=a("li"),Tee=a("strong"),Peo=o("wav2vec2_phoneme"),$eo=o(" \u2014 "),pR=a("a"),Ieo=o("Wav2Vec2PhonemeCTCTokenizer"),qeo=o(" (Wav2Vec2Phoneme model)"),Neo=l(),Is=a("li"),Mee=a("strong"),jeo=o("xglm"),Deo=o(" \u2014 "),_R=a("a"),Geo=o("XGLMTokenizer"),Oeo=o(" or "),bR=a("a"),Veo=o("XGLMTokenizerFast"),Xeo=o(" (XGLM model)"),zeo=l(),mh=a("li"),Eee=a("strong"),Qeo=o("xlm"),Weo=o(" \u2014 "),FR=a("a"),Heo=o("XLMTokenizer"),Ueo=o(" (XLM model)"),Jeo=l(),fh=a("li"),Cee=a("strong"),Yeo=o("xlm-prophetnet"),Keo=o(" \u2014 "),vR=a("a"),Zeo=o("XLMProphetNetTokenizer"),eoo=o(" (XLMProphetNet model)"),ooo=l(),qs=a("li"),wee=a("strong"),roo=o("xlm-roberta"),too=o(" \u2014 "),TR=a("a"),aoo=o("XLMRobertaTokenizer"),noo=o(" or "),MR=a("a"),soo=o("XLMRobertaTokenizerFast"),loo=o(" (XLM-RoBERTa model)"),ioo=l(),Ns=a("li"),Aee=a("strong"),doo=o("xlnet"),coo=o(" \u2014 "),ER=a("a"),moo=o("XLNetTokenizer"),foo=o(" or "),CR=a("a"),goo=o("XLNetTokenizerFast"),hoo=o(" (XLNet model)"),uoo=l(),yee=a("p"),poo=o("Examples:"),_oo=l(),m(qw.$$.fragment),boo=l(),gh=a("div"),m(Nw.$$.fragment),Foo=l(),Lee=a("p"),voo=o("Register a new tokenizer in this mapping."),iRe=l(),Wi=a("h2"),hh=a("a"),xee=a("span"),m(jw.$$.fragment),Too=l(),kee=a("span"),Moo=o("AutoFeatureExtractor"),dRe=l(),Ho=a("div"),m(Dw.$$.fragment),Eoo=l(),Gw=a("p"),Coo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),wR=a("a"),woo=o("AutoFeatureExtractor.from_pretrained()"),Aoo=o(" class method."),yoo=l(),Ow=a("p"),Loo=o("This class cannot be instantiated directly using "),See=a("code"),xoo=o("__init__()"),koo=o(" (throws an error)."),Soo=l(),$e=a("div"),m(Vw.$$.fragment),Roo=l(),Ree=a("p"),Boo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Poo=l(),Va=a("p"),$oo=o("The feature extractor class to instantiate is selected based on the "),Bee=a("code"),Ioo=o("model_type"),qoo=o(` property of the config object
(either passed as an argument or loaded from `),Pee=a("code"),Noo=o("pretrained_model_name_or_path"),joo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),$ee=a("code"),Doo=o("pretrained_model_name_or_path"),Goo=o(":"),Ooo=l(),ee=a("ul"),uh=a("li"),Iee=a("strong"),Voo=o("beit"),Xoo=o(" \u2014 "),AR=a("a"),zoo=o("BeitFeatureExtractor"),Qoo=o(" (BEiT model)"),Woo=l(),ph=a("li"),qee=a("strong"),Hoo=o("clip"),Uoo=o(" \u2014 "),yR=a("a"),Joo=o("CLIPFeatureExtractor"),Yoo=o(" (CLIP model)"),Koo=l(),_h=a("li"),Nee=a("strong"),Zoo=o("convnext"),ero=o(" \u2014 "),LR=a("a"),oro=o("ConvNextFeatureExtractor"),rro=o(" (ConvNext model)"),tro=l(),bh=a("li"),jee=a("strong"),aro=o("deit"),nro=o(" \u2014 "),xR=a("a"),sro=o("DeiTFeatureExtractor"),lro=o(" (DeiT model)"),iro=l(),Fh=a("li"),Dee=a("strong"),dro=o("detr"),cro=o(" \u2014 "),kR=a("a"),mro=o("DetrFeatureExtractor"),fro=o(" (DETR model)"),gro=l(),vh=a("li"),Gee=a("strong"),hro=o("hubert"),uro=o(" \u2014 "),SR=a("a"),pro=o("Wav2Vec2FeatureExtractor"),_ro=o(" (Hubert model)"),bro=l(),Th=a("li"),Oee=a("strong"),Fro=o("layoutlmv2"),vro=o(" \u2014 "),RR=a("a"),Tro=o("LayoutLMv2FeatureExtractor"),Mro=o(" (LayoutLMv2 model)"),Ero=l(),Mh=a("li"),Vee=a("strong"),Cro=o("maskformer"),wro=o(" \u2014 "),BR=a("a"),Aro=o("MaskFormerFeatureExtractor"),yro=o(" (MaskFormer model)"),Lro=l(),Eh=a("li"),Xee=a("strong"),xro=o("perceiver"),kro=o(" \u2014 "),PR=a("a"),Sro=o("PerceiverFeatureExtractor"),Rro=o(" (Perceiver model)"),Bro=l(),Ch=a("li"),zee=a("strong"),Pro=o("poolformer"),$ro=o(" \u2014 "),$R=a("a"),Iro=o("PoolFormerFeatureExtractor"),qro=o(" (PoolFormer model)"),Nro=l(),wh=a("li"),Qee=a("strong"),jro=o("regnet"),Dro=o(" \u2014 "),IR=a("a"),Gro=o("ConvNextFeatureExtractor"),Oro=o(" (RegNet model)"),Vro=l(),Ah=a("li"),Wee=a("strong"),Xro=o("resnet"),zro=o(" \u2014 "),qR=a("a"),Qro=o("ConvNextFeatureExtractor"),Wro=o(" (ResNet model)"),Hro=l(),yh=a("li"),Hee=a("strong"),Uro=o("segformer"),Jro=o(" \u2014 "),NR=a("a"),Yro=o("SegformerFeatureExtractor"),Kro=o(" (SegFormer model)"),Zro=l(),Lh=a("li"),Uee=a("strong"),eto=o("speech_to_text"),oto=o(" \u2014 "),jR=a("a"),rto=o("Speech2TextFeatureExtractor"),tto=o(" (Speech2Text model)"),ato=l(),xh=a("li"),Jee=a("strong"),nto=o("swin"),sto=o(" \u2014 "),DR=a("a"),lto=o("ViTFeatureExtractor"),ito=o(" (Swin model)"),dto=l(),kh=a("li"),Yee=a("strong"),cto=o("van"),mto=o(" \u2014 "),GR=a("a"),fto=o("ConvNextFeatureExtractor"),gto=o(" (VAN model)"),hto=l(),Sh=a("li"),Kee=a("strong"),uto=o("vit"),pto=o(" \u2014 "),OR=a("a"),_to=o("ViTFeatureExtractor"),bto=o(" (ViT model)"),Fto=l(),Rh=a("li"),Zee=a("strong"),vto=o("vit_mae"),Tto=o(" \u2014 "),VR=a("a"),Mto=o("ViTFeatureExtractor"),Eto=o(" (ViTMAE model)"),Cto=l(),Bh=a("li"),eoe=a("strong"),wto=o("wav2vec2"),Ato=o(" \u2014 "),XR=a("a"),yto=o("Wav2Vec2FeatureExtractor"),Lto=o(" (Wav2Vec2 model)"),xto=l(),m(Ph.$$.fragment),kto=l(),ooe=a("p"),Sto=o("Examples:"),Rto=l(),m(Xw.$$.fragment),Bto=l(),$h=a("div"),m(zw.$$.fragment),Pto=l(),roe=a("p"),$to=o("Register a new feature extractor for this class."),cRe=l(),Hi=a("h2"),Ih=a("a"),toe=a("span"),m(Qw.$$.fragment),Ito=l(),aoe=a("span"),qto=o("AutoProcessor"),mRe=l(),Uo=a("div"),m(Ww.$$.fragment),Nto=l(),Hw=a("p"),jto=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),zR=a("a"),Dto=o("AutoProcessor.from_pretrained()"),Gto=o(" class method."),Oto=l(),Uw=a("p"),Vto=o("This class cannot be instantiated directly using "),noe=a("code"),Xto=o("__init__()"),zto=o(" (throws an error)."),Qto=l(),Ie=a("div"),m(Jw.$$.fragment),Wto=l(),soe=a("p"),Hto=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Uto=l(),Ui=a("p"),Jto=o("The processor class to instantiate is selected based on the "),loe=a("code"),Yto=o("model_type"),Kto=o(` property of the config object (either
passed as an argument or loaded from `),ioe=a("code"),Zto=o("pretrained_model_name_or_path"),eao=o(" if possible):"),oao=l(),ke=a("ul"),qh=a("li"),doe=a("strong"),rao=o("clip"),tao=o(" \u2014 "),QR=a("a"),aao=o("CLIPProcessor"),nao=o(" (CLIP model)"),sao=l(),Nh=a("li"),coe=a("strong"),lao=o("layoutlmv2"),iao=o(" \u2014 "),WR=a("a"),dao=o("LayoutLMv2Processor"),cao=o(" (LayoutLMv2 model)"),mao=l(),jh=a("li"),moe=a("strong"),fao=o("layoutxlm"),gao=o(" \u2014 "),HR=a("a"),hao=o("LayoutXLMProcessor"),uao=o(" (LayoutXLM model)"),pao=l(),Dh=a("li"),foe=a("strong"),_ao=o("speech_to_text"),bao=o(" \u2014 "),UR=a("a"),Fao=o("Speech2TextProcessor"),vao=o(" (Speech2Text model)"),Tao=l(),Gh=a("li"),goe=a("strong"),Mao=o("speech_to_text_2"),Eao=o(" \u2014 "),JR=a("a"),Cao=o("Speech2Text2Processor"),wao=o(" (Speech2Text2 model)"),Aao=l(),Oh=a("li"),hoe=a("strong"),yao=o("trocr"),Lao=o(" \u2014 "),YR=a("a"),xao=o("TrOCRProcessor"),kao=o(" (TrOCR model)"),Sao=l(),Vh=a("li"),uoe=a("strong"),Rao=o("vision-text-dual-encoder"),Bao=o(" \u2014 "),KR=a("a"),Pao=o("VisionTextDualEncoderProcessor"),$ao=o(" (VisionTextDualEncoder model)"),Iao=l(),Xh=a("li"),poe=a("strong"),qao=o("wav2vec2"),Nao=o(" \u2014 "),ZR=a("a"),jao=o("Wav2Vec2Processor"),Dao=o(" (Wav2Vec2 model)"),Gao=l(),m(zh.$$.fragment),Oao=l(),_oe=a("p"),Vao=o("Examples:"),Xao=l(),m(Yw.$$.fragment),zao=l(),Qh=a("div"),m(Kw.$$.fragment),Qao=l(),boe=a("p"),Wao=o("Register a new processor for this class."),fRe=l(),Ji=a("h2"),Wh=a("a"),Foe=a("span"),m(Zw.$$.fragment),Hao=l(),voe=a("span"),Uao=o("AutoModel"),gRe=l(),Jo=a("div"),m(eA.$$.fragment),Jao=l(),Yi=a("p"),Yao=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eB=a("a"),Kao=o("from_pretrained()"),Zao=o(" class method or the "),oB=a("a"),eno=o("from_config()"),ono=o(` class
method.`),rno=l(),oA=a("p"),tno=o("This class cannot be instantiated directly using "),Toe=a("code"),ano=o("__init__()"),nno=o(" (throws an error)."),sno=l(),Xr=a("div"),m(rA.$$.fragment),lno=l(),Moe=a("p"),ino=o("Instantiates one of the base model classes of the library from a configuration."),dno=l(),Ki=a("p"),cno=o(`Note:
Loading a model from its configuration file does `),Eoe=a("strong"),mno=o("not"),fno=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rB=a("a"),gno=o("from_pretrained()"),hno=o(" to load the model weights."),uno=l(),Coe=a("p"),pno=o("Examples:"),_no=l(),m(tA.$$.fragment),bno=l(),qe=a("div"),m(aA.$$.fragment),Fno=l(),woe=a("p"),vno=o("Instantiate one of the base model classes of the library from a pretrained model."),Tno=l(),Xa=a("p"),Mno=o("The model class to instantiate is selected based on the "),Aoe=a("code"),Eno=o("model_type"),Cno=o(` property of the config object (either
passed as an argument or loaded from `),yoe=a("code"),wno=o("pretrained_model_name_or_path"),Ano=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Loe=a("code"),yno=o("pretrained_model_name_or_path"),Lno=o(":"),xno=l(),T=a("ul"),Hh=a("li"),xoe=a("strong"),kno=o("albert"),Sno=o(" \u2014 "),tB=a("a"),Rno=o("AlbertModel"),Bno=o(" (ALBERT model)"),Pno=l(),Uh=a("li"),koe=a("strong"),$no=o("bart"),Ino=o(" \u2014 "),aB=a("a"),qno=o("BartModel"),Nno=o(" (BART model)"),jno=l(),Jh=a("li"),Soe=a("strong"),Dno=o("beit"),Gno=o(" \u2014 "),nB=a("a"),Ono=o("BeitModel"),Vno=o(" (BEiT model)"),Xno=l(),Yh=a("li"),Roe=a("strong"),zno=o("bert"),Qno=o(" \u2014 "),sB=a("a"),Wno=o("BertModel"),Hno=o(" (BERT model)"),Uno=l(),Kh=a("li"),Boe=a("strong"),Jno=o("bert-generation"),Yno=o(" \u2014 "),lB=a("a"),Kno=o("BertGenerationEncoder"),Zno=o(" (Bert Generation model)"),eso=l(),Zh=a("li"),Poe=a("strong"),oso=o("big_bird"),rso=o(" \u2014 "),iB=a("a"),tso=o("BigBirdModel"),aso=o(" (BigBird model)"),nso=l(),eu=a("li"),$oe=a("strong"),sso=o("bigbird_pegasus"),lso=o(" \u2014 "),dB=a("a"),iso=o("BigBirdPegasusModel"),dso=o(" (BigBirdPegasus model)"),cso=l(),ou=a("li"),Ioe=a("strong"),mso=o("blenderbot"),fso=o(" \u2014 "),cB=a("a"),gso=o("BlenderbotModel"),hso=o(" (Blenderbot model)"),uso=l(),ru=a("li"),qoe=a("strong"),pso=o("blenderbot-small"),_so=o(" \u2014 "),mB=a("a"),bso=o("BlenderbotSmallModel"),Fso=o(" (BlenderbotSmall model)"),vso=l(),tu=a("li"),Noe=a("strong"),Tso=o("camembert"),Mso=o(" \u2014 "),fB=a("a"),Eso=o("CamembertModel"),Cso=o(" (CamemBERT model)"),wso=l(),au=a("li"),joe=a("strong"),Aso=o("canine"),yso=o(" \u2014 "),gB=a("a"),Lso=o("CanineModel"),xso=o(" (Canine model)"),kso=l(),nu=a("li"),Doe=a("strong"),Sso=o("clip"),Rso=o(" \u2014 "),hB=a("a"),Bso=o("CLIPModel"),Pso=o(" (CLIP model)"),$so=l(),su=a("li"),Goe=a("strong"),Iso=o("convbert"),qso=o(" \u2014 "),uB=a("a"),Nso=o("ConvBertModel"),jso=o(" (ConvBERT model)"),Dso=l(),lu=a("li"),Ooe=a("strong"),Gso=o("convnext"),Oso=o(" \u2014 "),pB=a("a"),Vso=o("ConvNextModel"),Xso=o(" (ConvNext model)"),zso=l(),iu=a("li"),Voe=a("strong"),Qso=o("ctrl"),Wso=o(" \u2014 "),_B=a("a"),Hso=o("CTRLModel"),Uso=o(" (CTRL model)"),Jso=l(),du=a("li"),Xoe=a("strong"),Yso=o("data2vec-audio"),Kso=o(" \u2014 "),bB=a("a"),Zso=o("Data2VecAudioModel"),elo=o(" (Data2VecAudio model)"),olo=l(),cu=a("li"),zoe=a("strong"),rlo=o("data2vec-text"),tlo=o(" \u2014 "),FB=a("a"),alo=o("Data2VecTextModel"),nlo=o(" (Data2VecText model)"),slo=l(),mu=a("li"),Qoe=a("strong"),llo=o("deberta"),ilo=o(" \u2014 "),vB=a("a"),dlo=o("DebertaModel"),clo=o(" (DeBERTa model)"),mlo=l(),fu=a("li"),Woe=a("strong"),flo=o("deberta-v2"),glo=o(" \u2014 "),TB=a("a"),hlo=o("DebertaV2Model"),ulo=o(" (DeBERTa-v2 model)"),plo=l(),gu=a("li"),Hoe=a("strong"),_lo=o("decision_transformer"),blo=o(" \u2014 "),MB=a("a"),Flo=o("DecisionTransformerModel"),vlo=o(" (Decision Transformer model)"),Tlo=l(),hu=a("li"),Uoe=a("strong"),Mlo=o("deit"),Elo=o(" \u2014 "),EB=a("a"),Clo=o("DeiTModel"),wlo=o(" (DeiT model)"),Alo=l(),uu=a("li"),Joe=a("strong"),ylo=o("detr"),Llo=o(" \u2014 "),CB=a("a"),xlo=o("DetrModel"),klo=o(" (DETR model)"),Slo=l(),pu=a("li"),Yoe=a("strong"),Rlo=o("distilbert"),Blo=o(" \u2014 "),wB=a("a"),Plo=o("DistilBertModel"),$lo=o(" (DistilBERT model)"),Ilo=l(),_u=a("li"),Koe=a("strong"),qlo=o("dpr"),Nlo=o(" \u2014 "),AB=a("a"),jlo=o("DPRQuestionEncoder"),Dlo=o(" (DPR model)"),Glo=l(),bu=a("li"),Zoe=a("strong"),Olo=o("dpt"),Vlo=o(" \u2014 "),yB=a("a"),Xlo=o("DPTModel"),zlo=o(" (DPT model)"),Qlo=l(),Fu=a("li"),ere=a("strong"),Wlo=o("electra"),Hlo=o(" \u2014 "),LB=a("a"),Ulo=o("ElectraModel"),Jlo=o(" (ELECTRA model)"),Ylo=l(),vu=a("li"),ore=a("strong"),Klo=o("flaubert"),Zlo=o(" \u2014 "),xB=a("a"),eio=o("FlaubertModel"),oio=o(" (FlauBERT model)"),rio=l(),Tu=a("li"),rre=a("strong"),tio=o("fnet"),aio=o(" \u2014 "),kB=a("a"),nio=o("FNetModel"),sio=o(" (FNet model)"),lio=l(),Mu=a("li"),tre=a("strong"),iio=o("fsmt"),dio=o(" \u2014 "),SB=a("a"),cio=o("FSMTModel"),mio=o(" (FairSeq Machine-Translation model)"),fio=l(),js=a("li"),are=a("strong"),gio=o("funnel"),hio=o(" \u2014 "),RB=a("a"),uio=o("FunnelModel"),pio=o(" or "),BB=a("a"),_io=o("FunnelBaseModel"),bio=o(" (Funnel Transformer model)"),Fio=l(),Eu=a("li"),nre=a("strong"),vio=o("glpn"),Tio=o(" \u2014 "),PB=a("a"),Mio=o("GLPNModel"),Eio=o(" (GLPN model)"),Cio=l(),Cu=a("li"),sre=a("strong"),wio=o("gpt2"),Aio=o(" \u2014 "),$B=a("a"),yio=o("GPT2Model"),Lio=o(" (OpenAI GPT-2 model)"),xio=l(),wu=a("li"),lre=a("strong"),kio=o("gpt_neo"),Sio=o(" \u2014 "),IB=a("a"),Rio=o("GPTNeoModel"),Bio=o(" (GPT Neo model)"),Pio=l(),Au=a("li"),ire=a("strong"),$io=o("gptj"),Iio=o(" \u2014 "),qB=a("a"),qio=o("GPTJModel"),Nio=o(" (GPT-J model)"),jio=l(),yu=a("li"),dre=a("strong"),Dio=o("hubert"),Gio=o(" \u2014 "),NB=a("a"),Oio=o("HubertModel"),Vio=o(" (Hubert model)"),Xio=l(),Lu=a("li"),cre=a("strong"),zio=o("ibert"),Qio=o(" \u2014 "),jB=a("a"),Wio=o("IBertModel"),Hio=o(" (I-BERT model)"),Uio=l(),xu=a("li"),mre=a("strong"),Jio=o("imagegpt"),Yio=o(" \u2014 "),DB=a("a"),Kio=o("ImageGPTModel"),Zio=o(" (ImageGPT model)"),edo=l(),ku=a("li"),fre=a("strong"),odo=o("layoutlm"),rdo=o(" \u2014 "),GB=a("a"),tdo=o("LayoutLMModel"),ado=o(" (LayoutLM model)"),ndo=l(),Su=a("li"),gre=a("strong"),sdo=o("layoutlmv2"),ldo=o(" \u2014 "),OB=a("a"),ido=o("LayoutLMv2Model"),ddo=o(" (LayoutLMv2 model)"),cdo=l(),Ru=a("li"),hre=a("strong"),mdo=o("led"),fdo=o(" \u2014 "),VB=a("a"),gdo=o("LEDModel"),hdo=o(" (LED model)"),udo=l(),Bu=a("li"),ure=a("strong"),pdo=o("longformer"),_do=o(" \u2014 "),XB=a("a"),bdo=o("LongformerModel"),Fdo=o(" (Longformer model)"),vdo=l(),Pu=a("li"),pre=a("strong"),Tdo=o("luke"),Mdo=o(" \u2014 "),zB=a("a"),Edo=o("LukeModel"),Cdo=o(" (LUKE model)"),wdo=l(),$u=a("li"),_re=a("strong"),Ado=o("lxmert"),ydo=o(" \u2014 "),QB=a("a"),Ldo=o("LxmertModel"),xdo=o(" (LXMERT model)"),kdo=l(),Iu=a("li"),bre=a("strong"),Sdo=o("m2m_100"),Rdo=o(" \u2014 "),WB=a("a"),Bdo=o("M2M100Model"),Pdo=o(" (M2M100 model)"),$do=l(),qu=a("li"),Fre=a("strong"),Ido=o("marian"),qdo=o(" \u2014 "),HB=a("a"),Ndo=o("MarianModel"),jdo=o(" (Marian model)"),Ddo=l(),Nu=a("li"),vre=a("strong"),Gdo=o("maskformer"),Odo=o(" \u2014 "),UB=a("a"),Vdo=o("MaskFormerModel"),Xdo=o(" (MaskFormer model)"),zdo=l(),ju=a("li"),Tre=a("strong"),Qdo=o("mbart"),Wdo=o(" \u2014 "),JB=a("a"),Hdo=o("MBartModel"),Udo=o(" (mBART model)"),Jdo=l(),Du=a("li"),Mre=a("strong"),Ydo=o("megatron-bert"),Kdo=o(" \u2014 "),YB=a("a"),Zdo=o("MegatronBertModel"),eco=o(" (MegatronBert model)"),oco=l(),Gu=a("li"),Ere=a("strong"),rco=o("mobilebert"),tco=o(" \u2014 "),KB=a("a"),aco=o("MobileBertModel"),nco=o(" (MobileBERT model)"),sco=l(),Ou=a("li"),Cre=a("strong"),lco=o("mpnet"),ico=o(" \u2014 "),ZB=a("a"),dco=o("MPNetModel"),cco=o(" (MPNet model)"),mco=l(),Vu=a("li"),wre=a("strong"),fco=o("mt5"),gco=o(" \u2014 "),eP=a("a"),hco=o("MT5Model"),uco=o(" (mT5 model)"),pco=l(),Xu=a("li"),Are=a("strong"),_co=o("nystromformer"),bco=o(" \u2014 "),oP=a("a"),Fco=o("NystromformerModel"),vco=o(" (Nystromformer model)"),Tco=l(),zu=a("li"),yre=a("strong"),Mco=o("openai-gpt"),Eco=o(" \u2014 "),rP=a("a"),Cco=o("OpenAIGPTModel"),wco=o(" (OpenAI GPT model)"),Aco=l(),Qu=a("li"),Lre=a("strong"),yco=o("pegasus"),Lco=o(" \u2014 "),tP=a("a"),xco=o("PegasusModel"),kco=o(" (Pegasus model)"),Sco=l(),Wu=a("li"),xre=a("strong"),Rco=o("perceiver"),Bco=o(" \u2014 "),aP=a("a"),Pco=o("PerceiverModel"),$co=o(" (Perceiver model)"),Ico=l(),Hu=a("li"),kre=a("strong"),qco=o("plbart"),Nco=o(" \u2014 "),nP=a("a"),jco=o("PLBartModel"),Dco=o(" (PLBart model)"),Gco=l(),Uu=a("li"),Sre=a("strong"),Oco=o("poolformer"),Vco=o(" \u2014 "),sP=a("a"),Xco=o("PoolFormerModel"),zco=o(" (PoolFormer model)"),Qco=l(),Ju=a("li"),Rre=a("strong"),Wco=o("prophetnet"),Hco=o(" \u2014 "),lP=a("a"),Uco=o("ProphetNetModel"),Jco=o(" (ProphetNet model)"),Yco=l(),Yu=a("li"),Bre=a("strong"),Kco=o("qdqbert"),Zco=o(" \u2014 "),iP=a("a"),emo=o("QDQBertModel"),omo=o(" (QDQBert model)"),rmo=l(),Ku=a("li"),Pre=a("strong"),tmo=o("reformer"),amo=o(" \u2014 "),dP=a("a"),nmo=o("ReformerModel"),smo=o(" (Reformer model)"),lmo=l(),Zu=a("li"),$re=a("strong"),imo=o("regnet"),dmo=o(" \u2014 "),cP=a("a"),cmo=o("RegNetModel"),mmo=o(" (RegNet model)"),fmo=l(),ep=a("li"),Ire=a("strong"),gmo=o("rembert"),hmo=o(" \u2014 "),mP=a("a"),umo=o("RemBertModel"),pmo=o(" (RemBERT model)"),_mo=l(),op=a("li"),qre=a("strong"),bmo=o("resnet"),Fmo=o(" \u2014 "),fP=a("a"),vmo=o("ResNetModel"),Tmo=o(" (ResNet model)"),Mmo=l(),rp=a("li"),Nre=a("strong"),Emo=o("retribert"),Cmo=o(" \u2014 "),gP=a("a"),wmo=o("RetriBertModel"),Amo=o(" (RetriBERT model)"),ymo=l(),tp=a("li"),jre=a("strong"),Lmo=o("roberta"),xmo=o(" \u2014 "),hP=a("a"),kmo=o("RobertaModel"),Smo=o(" (RoBERTa model)"),Rmo=l(),ap=a("li"),Dre=a("strong"),Bmo=o("roformer"),Pmo=o(" \u2014 "),uP=a("a"),$mo=o("RoFormerModel"),Imo=o(" (RoFormer model)"),qmo=l(),np=a("li"),Gre=a("strong"),Nmo=o("segformer"),jmo=o(" \u2014 "),pP=a("a"),Dmo=o("SegformerModel"),Gmo=o(" (SegFormer model)"),Omo=l(),sp=a("li"),Ore=a("strong"),Vmo=o("sew"),Xmo=o(" \u2014 "),_P=a("a"),zmo=o("SEWModel"),Qmo=o(" (SEW model)"),Wmo=l(),lp=a("li"),Vre=a("strong"),Hmo=o("sew-d"),Umo=o(" \u2014 "),bP=a("a"),Jmo=o("SEWDModel"),Ymo=o(" (SEW-D model)"),Kmo=l(),ip=a("li"),Xre=a("strong"),Zmo=o("speech_to_text"),efo=o(" \u2014 "),FP=a("a"),ofo=o("Speech2TextModel"),rfo=o(" (Speech2Text model)"),tfo=l(),dp=a("li"),zre=a("strong"),afo=o("splinter"),nfo=o(" \u2014 "),vP=a("a"),sfo=o("SplinterModel"),lfo=o(" (Splinter model)"),ifo=l(),cp=a("li"),Qre=a("strong"),dfo=o("squeezebert"),cfo=o(" \u2014 "),TP=a("a"),mfo=o("SqueezeBertModel"),ffo=o(" (SqueezeBERT model)"),gfo=l(),mp=a("li"),Wre=a("strong"),hfo=o("swin"),ufo=o(" \u2014 "),MP=a("a"),pfo=o("SwinModel"),_fo=o(" (Swin model)"),bfo=l(),fp=a("li"),Hre=a("strong"),Ffo=o("t5"),vfo=o(" \u2014 "),EP=a("a"),Tfo=o("T5Model"),Mfo=o(" (T5 model)"),Efo=l(),gp=a("li"),Ure=a("strong"),Cfo=o("tapas"),wfo=o(" \u2014 "),CP=a("a"),Afo=o("TapasModel"),yfo=o(" (TAPAS model)"),Lfo=l(),hp=a("li"),Jre=a("strong"),xfo=o("transfo-xl"),kfo=o(" \u2014 "),wP=a("a"),Sfo=o("TransfoXLModel"),Rfo=o(" (Transformer-XL model)"),Bfo=l(),up=a("li"),Yre=a("strong"),Pfo=o("unispeech"),$fo=o(" \u2014 "),AP=a("a"),Ifo=o("UniSpeechModel"),qfo=o(" (UniSpeech model)"),Nfo=l(),pp=a("li"),Kre=a("strong"),jfo=o("unispeech-sat"),Dfo=o(" \u2014 "),yP=a("a"),Gfo=o("UniSpeechSatModel"),Ofo=o(" (UniSpeechSat model)"),Vfo=l(),_p=a("li"),Zre=a("strong"),Xfo=o("van"),zfo=o(" \u2014 "),LP=a("a"),Qfo=o("VanModel"),Wfo=o(" (VAN model)"),Hfo=l(),bp=a("li"),ete=a("strong"),Ufo=o("vilt"),Jfo=o(" \u2014 "),xP=a("a"),Yfo=o("ViltModel"),Kfo=o(" (ViLT model)"),Zfo=l(),Fp=a("li"),ote=a("strong"),ego=o("vision-text-dual-encoder"),ogo=o(" \u2014 "),kP=a("a"),rgo=o("VisionTextDualEncoderModel"),tgo=o(" (VisionTextDualEncoder model)"),ago=l(),vp=a("li"),rte=a("strong"),ngo=o("visual_bert"),sgo=o(" \u2014 "),SP=a("a"),lgo=o("VisualBertModel"),igo=o(" (VisualBert model)"),dgo=l(),Tp=a("li"),tte=a("strong"),cgo=o("vit"),mgo=o(" \u2014 "),RP=a("a"),fgo=o("ViTModel"),ggo=o(" (ViT model)"),hgo=l(),Mp=a("li"),ate=a("strong"),ugo=o("vit_mae"),pgo=o(" \u2014 "),BP=a("a"),_go=o("ViTMAEModel"),bgo=o(" (ViTMAE model)"),Fgo=l(),Ep=a("li"),nte=a("strong"),vgo=o("wav2vec2"),Tgo=o(" \u2014 "),PP=a("a"),Mgo=o("Wav2Vec2Model"),Ego=o(" (Wav2Vec2 model)"),Cgo=l(),Cp=a("li"),ste=a("strong"),wgo=o("wavlm"),Ago=o(" \u2014 "),$P=a("a"),ygo=o("WavLMModel"),Lgo=o(" (WavLM model)"),xgo=l(),wp=a("li"),lte=a("strong"),kgo=o("xglm"),Sgo=o(" \u2014 "),IP=a("a"),Rgo=o("XGLMModel"),Bgo=o(" (XGLM model)"),Pgo=l(),Ap=a("li"),ite=a("strong"),$go=o("xlm"),Igo=o(" \u2014 "),qP=a("a"),qgo=o("XLMModel"),Ngo=o(" (XLM model)"),jgo=l(),yp=a("li"),dte=a("strong"),Dgo=o("xlm-prophetnet"),Ggo=o(" \u2014 "),NP=a("a"),Ogo=o("XLMProphetNetModel"),Vgo=o(" (XLMProphetNet model)"),Xgo=l(),Lp=a("li"),cte=a("strong"),zgo=o("xlm-roberta"),Qgo=o(" \u2014 "),jP=a("a"),Wgo=o("XLMRobertaModel"),Hgo=o(" (XLM-RoBERTa model)"),Ugo=l(),xp=a("li"),mte=a("strong"),Jgo=o("xlm-roberta-xl"),Ygo=o(" \u2014 "),DP=a("a"),Kgo=o("XLMRobertaXLModel"),Zgo=o(" (XLM-RoBERTa-XL model)"),eho=l(),kp=a("li"),fte=a("strong"),oho=o("xlnet"),rho=o(" \u2014 "),GP=a("a"),tho=o("XLNetModel"),aho=o(" (XLNet model)"),nho=l(),Sp=a("li"),gte=a("strong"),sho=o("yoso"),lho=o(" \u2014 "),OP=a("a"),iho=o("YosoModel"),dho=o(" (YOSO model)"),cho=l(),Rp=a("p"),mho=o("The model is set in evaluation mode by default using "),hte=a("code"),fho=o("model.eval()"),gho=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ute=a("code"),hho=o("model.train()"),uho=l(),pte=a("p"),pho=o("Examples:"),_ho=l(),m(nA.$$.fragment),hRe=l(),Zi=a("h2"),Bp=a("a"),_te=a("span"),m(sA.$$.fragment),bho=l(),bte=a("span"),Fho=o("AutoModelForPreTraining"),uRe=l(),Yo=a("div"),m(lA.$$.fragment),vho=l(),ed=a("p"),Tho=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),VP=a("a"),Mho=o("from_pretrained()"),Eho=o(" class method or the "),XP=a("a"),Cho=o("from_config()"),who=o(` class
method.`),Aho=l(),iA=a("p"),yho=o("This class cannot be instantiated directly using "),Fte=a("code"),Lho=o("__init__()"),xho=o(" (throws an error)."),kho=l(),zr=a("div"),m(dA.$$.fragment),Sho=l(),vte=a("p"),Rho=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Bho=l(),od=a("p"),Pho=o(`Note:
Loading a model from its configuration file does `),Tte=a("strong"),$ho=o("not"),Iho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zP=a("a"),qho=o("from_pretrained()"),Nho=o(" to load the model weights."),jho=l(),Mte=a("p"),Dho=o("Examples:"),Gho=l(),m(cA.$$.fragment),Oho=l(),Ne=a("div"),m(mA.$$.fragment),Vho=l(),Ete=a("p"),Xho=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),zho=l(),za=a("p"),Qho=o("The model class to instantiate is selected based on the "),Cte=a("code"),Who=o("model_type"),Hho=o(` property of the config object (either
passed as an argument or loaded from `),wte=a("code"),Uho=o("pretrained_model_name_or_path"),Jho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ate=a("code"),Yho=o("pretrained_model_name_or_path"),Kho=o(":"),Zho=l(),S=a("ul"),Pp=a("li"),yte=a("strong"),euo=o("albert"),ouo=o(" \u2014 "),QP=a("a"),ruo=o("AlbertForPreTraining"),tuo=o(" (ALBERT model)"),auo=l(),$p=a("li"),Lte=a("strong"),nuo=o("bart"),suo=o(" \u2014 "),WP=a("a"),luo=o("BartForConditionalGeneration"),iuo=o(" (BART model)"),duo=l(),Ip=a("li"),xte=a("strong"),cuo=o("bert"),muo=o(" \u2014 "),HP=a("a"),fuo=o("BertForPreTraining"),guo=o(" (BERT model)"),huo=l(),qp=a("li"),kte=a("strong"),uuo=o("big_bird"),puo=o(" \u2014 "),UP=a("a"),_uo=o("BigBirdForPreTraining"),buo=o(" (BigBird model)"),Fuo=l(),Np=a("li"),Ste=a("strong"),vuo=o("camembert"),Tuo=o(" \u2014 "),JP=a("a"),Muo=o("CamembertForMaskedLM"),Euo=o(" (CamemBERT model)"),Cuo=l(),jp=a("li"),Rte=a("strong"),wuo=o("ctrl"),Auo=o(" \u2014 "),YP=a("a"),yuo=o("CTRLLMHeadModel"),Luo=o(" (CTRL model)"),xuo=l(),Dp=a("li"),Bte=a("strong"),kuo=o("data2vec-text"),Suo=o(" \u2014 "),KP=a("a"),Ruo=o("Data2VecTextForMaskedLM"),Buo=o(" (Data2VecText model)"),Puo=l(),Gp=a("li"),Pte=a("strong"),$uo=o("deberta"),Iuo=o(" \u2014 "),ZP=a("a"),quo=o("DebertaForMaskedLM"),Nuo=o(" (DeBERTa model)"),juo=l(),Op=a("li"),$te=a("strong"),Duo=o("deberta-v2"),Guo=o(" \u2014 "),e$=a("a"),Ouo=o("DebertaV2ForMaskedLM"),Vuo=o(" (DeBERTa-v2 model)"),Xuo=l(),Vp=a("li"),Ite=a("strong"),zuo=o("distilbert"),Quo=o(" \u2014 "),o$=a("a"),Wuo=o("DistilBertForMaskedLM"),Huo=o(" (DistilBERT model)"),Uuo=l(),Xp=a("li"),qte=a("strong"),Juo=o("electra"),Yuo=o(" \u2014 "),r$=a("a"),Kuo=o("ElectraForPreTraining"),Zuo=o(" (ELECTRA model)"),epo=l(),zp=a("li"),Nte=a("strong"),opo=o("flaubert"),rpo=o(" \u2014 "),t$=a("a"),tpo=o("FlaubertWithLMHeadModel"),apo=o(" (FlauBERT model)"),npo=l(),Qp=a("li"),jte=a("strong"),spo=o("fnet"),lpo=o(" \u2014 "),a$=a("a"),ipo=o("FNetForPreTraining"),dpo=o(" (FNet model)"),cpo=l(),Wp=a("li"),Dte=a("strong"),mpo=o("fsmt"),fpo=o(" \u2014 "),n$=a("a"),gpo=o("FSMTForConditionalGeneration"),hpo=o(" (FairSeq Machine-Translation model)"),upo=l(),Hp=a("li"),Gte=a("strong"),ppo=o("funnel"),_po=o(" \u2014 "),s$=a("a"),bpo=o("FunnelForPreTraining"),Fpo=o(" (Funnel Transformer model)"),vpo=l(),Up=a("li"),Ote=a("strong"),Tpo=o("gpt2"),Mpo=o(" \u2014 "),l$=a("a"),Epo=o("GPT2LMHeadModel"),Cpo=o(" (OpenAI GPT-2 model)"),wpo=l(),Jp=a("li"),Vte=a("strong"),Apo=o("ibert"),ypo=o(" \u2014 "),i$=a("a"),Lpo=o("IBertForMaskedLM"),xpo=o(" (I-BERT model)"),kpo=l(),Yp=a("li"),Xte=a("strong"),Spo=o("layoutlm"),Rpo=o(" \u2014 "),d$=a("a"),Bpo=o("LayoutLMForMaskedLM"),Ppo=o(" (LayoutLM model)"),$po=l(),Kp=a("li"),zte=a("strong"),Ipo=o("longformer"),qpo=o(" \u2014 "),c$=a("a"),Npo=o("LongformerForMaskedLM"),jpo=o(" (Longformer model)"),Dpo=l(),Zp=a("li"),Qte=a("strong"),Gpo=o("lxmert"),Opo=o(" \u2014 "),m$=a("a"),Vpo=o("LxmertForPreTraining"),Xpo=o(" (LXMERT model)"),zpo=l(),e_=a("li"),Wte=a("strong"),Qpo=o("megatron-bert"),Wpo=o(" \u2014 "),f$=a("a"),Hpo=o("MegatronBertForPreTraining"),Upo=o(" (MegatronBert model)"),Jpo=l(),o_=a("li"),Hte=a("strong"),Ypo=o("mobilebert"),Kpo=o(" \u2014 "),g$=a("a"),Zpo=o("MobileBertForPreTraining"),e_o=o(" (MobileBERT model)"),o_o=l(),r_=a("li"),Ute=a("strong"),r_o=o("mpnet"),t_o=o(" \u2014 "),h$=a("a"),a_o=o("MPNetForMaskedLM"),n_o=o(" (MPNet model)"),s_o=l(),t_=a("li"),Jte=a("strong"),l_o=o("openai-gpt"),i_o=o(" \u2014 "),u$=a("a"),d_o=o("OpenAIGPTLMHeadModel"),c_o=o(" (OpenAI GPT model)"),m_o=l(),a_=a("li"),Yte=a("strong"),f_o=o("retribert"),g_o=o(" \u2014 "),p$=a("a"),h_o=o("RetriBertModel"),u_o=o(" (RetriBERT model)"),p_o=l(),n_=a("li"),Kte=a("strong"),__o=o("roberta"),b_o=o(" \u2014 "),_$=a("a"),F_o=o("RobertaForMaskedLM"),v_o=o(" (RoBERTa model)"),T_o=l(),s_=a("li"),Zte=a("strong"),M_o=o("squeezebert"),E_o=o(" \u2014 "),b$=a("a"),C_o=o("SqueezeBertForMaskedLM"),w_o=o(" (SqueezeBERT model)"),A_o=l(),l_=a("li"),eae=a("strong"),y_o=o("t5"),L_o=o(" \u2014 "),F$=a("a"),x_o=o("T5ForConditionalGeneration"),k_o=o(" (T5 model)"),S_o=l(),i_=a("li"),oae=a("strong"),R_o=o("tapas"),B_o=o(" \u2014 "),v$=a("a"),P_o=o("TapasForMaskedLM"),$_o=o(" (TAPAS model)"),I_o=l(),d_=a("li"),rae=a("strong"),q_o=o("transfo-xl"),N_o=o(" \u2014 "),T$=a("a"),j_o=o("TransfoXLLMHeadModel"),D_o=o(" (Transformer-XL model)"),G_o=l(),c_=a("li"),tae=a("strong"),O_o=o("unispeech"),V_o=o(" \u2014 "),M$=a("a"),X_o=o("UniSpeechForPreTraining"),z_o=o(" (UniSpeech model)"),Q_o=l(),m_=a("li"),aae=a("strong"),W_o=o("unispeech-sat"),H_o=o(" \u2014 "),E$=a("a"),U_o=o("UniSpeechSatForPreTraining"),J_o=o(" (UniSpeechSat model)"),Y_o=l(),f_=a("li"),nae=a("strong"),K_o=o("visual_bert"),Z_o=o(" \u2014 "),C$=a("a"),ebo=o("VisualBertForPreTraining"),obo=o(" (VisualBert model)"),rbo=l(),g_=a("li"),sae=a("strong"),tbo=o("vit_mae"),abo=o(" \u2014 "),w$=a("a"),nbo=o("ViTMAEForPreTraining"),sbo=o(" (ViTMAE model)"),lbo=l(),h_=a("li"),lae=a("strong"),ibo=o("wav2vec2"),dbo=o(" \u2014 "),A$=a("a"),cbo=o("Wav2Vec2ForPreTraining"),mbo=o(" (Wav2Vec2 model)"),fbo=l(),u_=a("li"),iae=a("strong"),gbo=o("xlm"),hbo=o(" \u2014 "),y$=a("a"),ubo=o("XLMWithLMHeadModel"),pbo=o(" (XLM model)"),_bo=l(),p_=a("li"),dae=a("strong"),bbo=o("xlm-roberta"),Fbo=o(" \u2014 "),L$=a("a"),vbo=o("XLMRobertaForMaskedLM"),Tbo=o(" (XLM-RoBERTa model)"),Mbo=l(),__=a("li"),cae=a("strong"),Ebo=o("xlm-roberta-xl"),Cbo=o(" \u2014 "),x$=a("a"),wbo=o("XLMRobertaXLForMaskedLM"),Abo=o(" (XLM-RoBERTa-XL model)"),ybo=l(),b_=a("li"),mae=a("strong"),Lbo=o("xlnet"),xbo=o(" \u2014 "),k$=a("a"),kbo=o("XLNetLMHeadModel"),Sbo=o(" (XLNet model)"),Rbo=l(),F_=a("p"),Bbo=o("The model is set in evaluation mode by default using "),fae=a("code"),Pbo=o("model.eval()"),$bo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gae=a("code"),Ibo=o("model.train()"),qbo=l(),hae=a("p"),Nbo=o("Examples:"),jbo=l(),m(fA.$$.fragment),pRe=l(),rd=a("h2"),v_=a("a"),uae=a("span"),m(gA.$$.fragment),Dbo=l(),pae=a("span"),Gbo=o("AutoModelForCausalLM"),_Re=l(),Ko=a("div"),m(hA.$$.fragment),Obo=l(),td=a("p"),Vbo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),S$=a("a"),Xbo=o("from_pretrained()"),zbo=o(" class method or the "),R$=a("a"),Qbo=o("from_config()"),Wbo=o(` class
method.`),Hbo=l(),uA=a("p"),Ubo=o("This class cannot be instantiated directly using "),_ae=a("code"),Jbo=o("__init__()"),Ybo=o(" (throws an error)."),Kbo=l(),Qr=a("div"),m(pA.$$.fragment),Zbo=l(),bae=a("p"),e2o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),o2o=l(),ad=a("p"),r2o=o(`Note:
Loading a model from its configuration file does `),Fae=a("strong"),t2o=o("not"),a2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),B$=a("a"),n2o=o("from_pretrained()"),s2o=o(" to load the model weights."),l2o=l(),vae=a("p"),i2o=o("Examples:"),d2o=l(),m(_A.$$.fragment),c2o=l(),je=a("div"),m(bA.$$.fragment),m2o=l(),Tae=a("p"),f2o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),g2o=l(),Qa=a("p"),h2o=o("The model class to instantiate is selected based on the "),Mae=a("code"),u2o=o("model_type"),p2o=o(` property of the config object (either
passed as an argument or loaded from `),Eae=a("code"),_2o=o("pretrained_model_name_or_path"),b2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cae=a("code"),F2o=o("pretrained_model_name_or_path"),v2o=o(":"),T2o=l(),$=a("ul"),T_=a("li"),wae=a("strong"),M2o=o("bart"),E2o=o(" \u2014 "),P$=a("a"),C2o=o("BartForCausalLM"),w2o=o(" (BART model)"),A2o=l(),M_=a("li"),Aae=a("strong"),y2o=o("bert"),L2o=o(" \u2014 "),$$=a("a"),x2o=o("BertLMHeadModel"),k2o=o(" (BERT model)"),S2o=l(),E_=a("li"),yae=a("strong"),R2o=o("bert-generation"),B2o=o(" \u2014 "),I$=a("a"),P2o=o("BertGenerationDecoder"),$2o=o(" (Bert Generation model)"),I2o=l(),C_=a("li"),Lae=a("strong"),q2o=o("big_bird"),N2o=o(" \u2014 "),q$=a("a"),j2o=o("BigBirdForCausalLM"),D2o=o(" (BigBird model)"),G2o=l(),w_=a("li"),xae=a("strong"),O2o=o("bigbird_pegasus"),V2o=o(" \u2014 "),N$=a("a"),X2o=o("BigBirdPegasusForCausalLM"),z2o=o(" (BigBirdPegasus model)"),Q2o=l(),A_=a("li"),kae=a("strong"),W2o=o("blenderbot"),H2o=o(" \u2014 "),j$=a("a"),U2o=o("BlenderbotForCausalLM"),J2o=o(" (Blenderbot model)"),Y2o=l(),y_=a("li"),Sae=a("strong"),K2o=o("blenderbot-small"),Z2o=o(" \u2014 "),D$=a("a"),eFo=o("BlenderbotSmallForCausalLM"),oFo=o(" (BlenderbotSmall model)"),rFo=l(),L_=a("li"),Rae=a("strong"),tFo=o("camembert"),aFo=o(" \u2014 "),G$=a("a"),nFo=o("CamembertForCausalLM"),sFo=o(" (CamemBERT model)"),lFo=l(),x_=a("li"),Bae=a("strong"),iFo=o("ctrl"),dFo=o(" \u2014 "),O$=a("a"),cFo=o("CTRLLMHeadModel"),mFo=o(" (CTRL model)"),fFo=l(),k_=a("li"),Pae=a("strong"),gFo=o("data2vec-text"),hFo=o(" \u2014 "),V$=a("a"),uFo=o("Data2VecTextForCausalLM"),pFo=o(" (Data2VecText model)"),_Fo=l(),S_=a("li"),$ae=a("strong"),bFo=o("electra"),FFo=o(" \u2014 "),X$=a("a"),vFo=o("ElectraForCausalLM"),TFo=o(" (ELECTRA model)"),MFo=l(),R_=a("li"),Iae=a("strong"),EFo=o("gpt2"),CFo=o(" \u2014 "),z$=a("a"),wFo=o("GPT2LMHeadModel"),AFo=o(" (OpenAI GPT-2 model)"),yFo=l(),B_=a("li"),qae=a("strong"),LFo=o("gpt_neo"),xFo=o(" \u2014 "),Q$=a("a"),kFo=o("GPTNeoForCausalLM"),SFo=o(" (GPT Neo model)"),RFo=l(),P_=a("li"),Nae=a("strong"),BFo=o("gptj"),PFo=o(" \u2014 "),W$=a("a"),$Fo=o("GPTJForCausalLM"),IFo=o(" (GPT-J model)"),qFo=l(),$_=a("li"),jae=a("strong"),NFo=o("marian"),jFo=o(" \u2014 "),H$=a("a"),DFo=o("MarianForCausalLM"),GFo=o(" (Marian model)"),OFo=l(),I_=a("li"),Dae=a("strong"),VFo=o("mbart"),XFo=o(" \u2014 "),U$=a("a"),zFo=o("MBartForCausalLM"),QFo=o(" (mBART model)"),WFo=l(),q_=a("li"),Gae=a("strong"),HFo=o("megatron-bert"),UFo=o(" \u2014 "),J$=a("a"),JFo=o("MegatronBertForCausalLM"),YFo=o(" (MegatronBert model)"),KFo=l(),N_=a("li"),Oae=a("strong"),ZFo=o("openai-gpt"),evo=o(" \u2014 "),Y$=a("a"),ovo=o("OpenAIGPTLMHeadModel"),rvo=o(" (OpenAI GPT model)"),tvo=l(),j_=a("li"),Vae=a("strong"),avo=o("pegasus"),nvo=o(" \u2014 "),K$=a("a"),svo=o("PegasusForCausalLM"),lvo=o(" (Pegasus model)"),ivo=l(),D_=a("li"),Xae=a("strong"),dvo=o("plbart"),cvo=o(" \u2014 "),Z$=a("a"),mvo=o("PLBartForCausalLM"),fvo=o(" (PLBart model)"),gvo=l(),G_=a("li"),zae=a("strong"),hvo=o("prophetnet"),uvo=o(" \u2014 "),eI=a("a"),pvo=o("ProphetNetForCausalLM"),_vo=o(" (ProphetNet model)"),bvo=l(),O_=a("li"),Qae=a("strong"),Fvo=o("qdqbert"),vvo=o(" \u2014 "),oI=a("a"),Tvo=o("QDQBertLMHeadModel"),Mvo=o(" (QDQBert model)"),Evo=l(),V_=a("li"),Wae=a("strong"),Cvo=o("reformer"),wvo=o(" \u2014 "),rI=a("a"),Avo=o("ReformerModelWithLMHead"),yvo=o(" (Reformer model)"),Lvo=l(),X_=a("li"),Hae=a("strong"),xvo=o("rembert"),kvo=o(" \u2014 "),tI=a("a"),Svo=o("RemBertForCausalLM"),Rvo=o(" (RemBERT model)"),Bvo=l(),z_=a("li"),Uae=a("strong"),Pvo=o("roberta"),$vo=o(" \u2014 "),aI=a("a"),Ivo=o("RobertaForCausalLM"),qvo=o(" (RoBERTa model)"),Nvo=l(),Q_=a("li"),Jae=a("strong"),jvo=o("roformer"),Dvo=o(" \u2014 "),nI=a("a"),Gvo=o("RoFormerForCausalLM"),Ovo=o(" (RoFormer model)"),Vvo=l(),W_=a("li"),Yae=a("strong"),Xvo=o("speech_to_text_2"),zvo=o(" \u2014 "),sI=a("a"),Qvo=o("Speech2Text2ForCausalLM"),Wvo=o(" (Speech2Text2 model)"),Hvo=l(),H_=a("li"),Kae=a("strong"),Uvo=o("transfo-xl"),Jvo=o(" \u2014 "),lI=a("a"),Yvo=o("TransfoXLLMHeadModel"),Kvo=o(" (Transformer-XL model)"),Zvo=l(),U_=a("li"),Zae=a("strong"),eTo=o("trocr"),oTo=o(" \u2014 "),iI=a("a"),rTo=o("TrOCRForCausalLM"),tTo=o(" (TrOCR model)"),aTo=l(),J_=a("li"),ene=a("strong"),nTo=o("xglm"),sTo=o(" \u2014 "),dI=a("a"),lTo=o("XGLMForCausalLM"),iTo=o(" (XGLM model)"),dTo=l(),Y_=a("li"),one=a("strong"),cTo=o("xlm"),mTo=o(" \u2014 "),cI=a("a"),fTo=o("XLMWithLMHeadModel"),gTo=o(" (XLM model)"),hTo=l(),K_=a("li"),rne=a("strong"),uTo=o("xlm-prophetnet"),pTo=o(" \u2014 "),mI=a("a"),_To=o("XLMProphetNetForCausalLM"),bTo=o(" (XLMProphetNet model)"),FTo=l(),Z_=a("li"),tne=a("strong"),vTo=o("xlm-roberta"),TTo=o(" \u2014 "),fI=a("a"),MTo=o("XLMRobertaForCausalLM"),ETo=o(" (XLM-RoBERTa model)"),CTo=l(),eb=a("li"),ane=a("strong"),wTo=o("xlm-roberta-xl"),ATo=o(" \u2014 "),gI=a("a"),yTo=o("XLMRobertaXLForCausalLM"),LTo=o(" (XLM-RoBERTa-XL model)"),xTo=l(),ob=a("li"),nne=a("strong"),kTo=o("xlnet"),STo=o(" \u2014 "),hI=a("a"),RTo=o("XLNetLMHeadModel"),BTo=o(" (XLNet model)"),PTo=l(),rb=a("p"),$To=o("The model is set in evaluation mode by default using "),sne=a("code"),ITo=o("model.eval()"),qTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lne=a("code"),NTo=o("model.train()"),jTo=l(),ine=a("p"),DTo=o("Examples:"),GTo=l(),m(FA.$$.fragment),bRe=l(),nd=a("h2"),tb=a("a"),dne=a("span"),m(vA.$$.fragment),OTo=l(),cne=a("span"),VTo=o("AutoModelForMaskedLM"),FRe=l(),Zo=a("div"),m(TA.$$.fragment),XTo=l(),sd=a("p"),zTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uI=a("a"),QTo=o("from_pretrained()"),WTo=o(" class method or the "),pI=a("a"),HTo=o("from_config()"),UTo=o(` class
method.`),JTo=l(),MA=a("p"),YTo=o("This class cannot be instantiated directly using "),mne=a("code"),KTo=o("__init__()"),ZTo=o(" (throws an error)."),e1o=l(),Wr=a("div"),m(EA.$$.fragment),o1o=l(),fne=a("p"),r1o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),t1o=l(),ld=a("p"),a1o=o(`Note:
Loading a model from its configuration file does `),gne=a("strong"),n1o=o("not"),s1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_I=a("a"),l1o=o("from_pretrained()"),i1o=o(" to load the model weights."),d1o=l(),hne=a("p"),c1o=o("Examples:"),m1o=l(),m(CA.$$.fragment),f1o=l(),De=a("div"),m(wA.$$.fragment),g1o=l(),une=a("p"),h1o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),u1o=l(),Wa=a("p"),p1o=o("The model class to instantiate is selected based on the "),pne=a("code"),_1o=o("model_type"),b1o=o(` property of the config object (either
passed as an argument or loaded from `),_ne=a("code"),F1o=o("pretrained_model_name_or_path"),v1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bne=a("code"),T1o=o("pretrained_model_name_or_path"),M1o=o(":"),E1o=l(),I=a("ul"),ab=a("li"),Fne=a("strong"),C1o=o("albert"),w1o=o(" \u2014 "),bI=a("a"),A1o=o("AlbertForMaskedLM"),y1o=o(" (ALBERT model)"),L1o=l(),nb=a("li"),vne=a("strong"),x1o=o("bart"),k1o=o(" \u2014 "),FI=a("a"),S1o=o("BartForConditionalGeneration"),R1o=o(" (BART model)"),B1o=l(),sb=a("li"),Tne=a("strong"),P1o=o("bert"),$1o=o(" \u2014 "),vI=a("a"),I1o=o("BertForMaskedLM"),q1o=o(" (BERT model)"),N1o=l(),lb=a("li"),Mne=a("strong"),j1o=o("big_bird"),D1o=o(" \u2014 "),TI=a("a"),G1o=o("BigBirdForMaskedLM"),O1o=o(" (BigBird model)"),V1o=l(),ib=a("li"),Ene=a("strong"),X1o=o("camembert"),z1o=o(" \u2014 "),MI=a("a"),Q1o=o("CamembertForMaskedLM"),W1o=o(" (CamemBERT model)"),H1o=l(),db=a("li"),Cne=a("strong"),U1o=o("convbert"),J1o=o(" \u2014 "),EI=a("a"),Y1o=o("ConvBertForMaskedLM"),K1o=o(" (ConvBERT model)"),Z1o=l(),cb=a("li"),wne=a("strong"),eMo=o("data2vec-text"),oMo=o(" \u2014 "),CI=a("a"),rMo=o("Data2VecTextForMaskedLM"),tMo=o(" (Data2VecText model)"),aMo=l(),mb=a("li"),Ane=a("strong"),nMo=o("deberta"),sMo=o(" \u2014 "),wI=a("a"),lMo=o("DebertaForMaskedLM"),iMo=o(" (DeBERTa model)"),dMo=l(),fb=a("li"),yne=a("strong"),cMo=o("deberta-v2"),mMo=o(" \u2014 "),AI=a("a"),fMo=o("DebertaV2ForMaskedLM"),gMo=o(" (DeBERTa-v2 model)"),hMo=l(),gb=a("li"),Lne=a("strong"),uMo=o("distilbert"),pMo=o(" \u2014 "),yI=a("a"),_Mo=o("DistilBertForMaskedLM"),bMo=o(" (DistilBERT model)"),FMo=l(),hb=a("li"),xne=a("strong"),vMo=o("electra"),TMo=o(" \u2014 "),LI=a("a"),MMo=o("ElectraForMaskedLM"),EMo=o(" (ELECTRA model)"),CMo=l(),ub=a("li"),kne=a("strong"),wMo=o("flaubert"),AMo=o(" \u2014 "),xI=a("a"),yMo=o("FlaubertWithLMHeadModel"),LMo=o(" (FlauBERT model)"),xMo=l(),pb=a("li"),Sne=a("strong"),kMo=o("fnet"),SMo=o(" \u2014 "),kI=a("a"),RMo=o("FNetForMaskedLM"),BMo=o(" (FNet model)"),PMo=l(),_b=a("li"),Rne=a("strong"),$Mo=o("funnel"),IMo=o(" \u2014 "),SI=a("a"),qMo=o("FunnelForMaskedLM"),NMo=o(" (Funnel Transformer model)"),jMo=l(),bb=a("li"),Bne=a("strong"),DMo=o("ibert"),GMo=o(" \u2014 "),RI=a("a"),OMo=o("IBertForMaskedLM"),VMo=o(" (I-BERT model)"),XMo=l(),Fb=a("li"),Pne=a("strong"),zMo=o("layoutlm"),QMo=o(" \u2014 "),BI=a("a"),WMo=o("LayoutLMForMaskedLM"),HMo=o(" (LayoutLM model)"),UMo=l(),vb=a("li"),$ne=a("strong"),JMo=o("longformer"),YMo=o(" \u2014 "),PI=a("a"),KMo=o("LongformerForMaskedLM"),ZMo=o(" (Longformer model)"),e4o=l(),Tb=a("li"),Ine=a("strong"),o4o=o("mbart"),r4o=o(" \u2014 "),$I=a("a"),t4o=o("MBartForConditionalGeneration"),a4o=o(" (mBART model)"),n4o=l(),Mb=a("li"),qne=a("strong"),s4o=o("megatron-bert"),l4o=o(" \u2014 "),II=a("a"),i4o=o("MegatronBertForMaskedLM"),d4o=o(" (MegatronBert model)"),c4o=l(),Eb=a("li"),Nne=a("strong"),m4o=o("mobilebert"),f4o=o(" \u2014 "),qI=a("a"),g4o=o("MobileBertForMaskedLM"),h4o=o(" (MobileBERT model)"),u4o=l(),Cb=a("li"),jne=a("strong"),p4o=o("mpnet"),_4o=o(" \u2014 "),NI=a("a"),b4o=o("MPNetForMaskedLM"),F4o=o(" (MPNet model)"),v4o=l(),wb=a("li"),Dne=a("strong"),T4o=o("nystromformer"),M4o=o(" \u2014 "),jI=a("a"),E4o=o("NystromformerForMaskedLM"),C4o=o(" (Nystromformer model)"),w4o=l(),Ab=a("li"),Gne=a("strong"),A4o=o("perceiver"),y4o=o(" \u2014 "),DI=a("a"),L4o=o("PerceiverForMaskedLM"),x4o=o(" (Perceiver model)"),k4o=l(),yb=a("li"),One=a("strong"),S4o=o("qdqbert"),R4o=o(" \u2014 "),GI=a("a"),B4o=o("QDQBertForMaskedLM"),P4o=o(" (QDQBert model)"),$4o=l(),Lb=a("li"),Vne=a("strong"),I4o=o("reformer"),q4o=o(" \u2014 "),OI=a("a"),N4o=o("ReformerForMaskedLM"),j4o=o(" (Reformer model)"),D4o=l(),xb=a("li"),Xne=a("strong"),G4o=o("rembert"),O4o=o(" \u2014 "),VI=a("a"),V4o=o("RemBertForMaskedLM"),X4o=o(" (RemBERT model)"),z4o=l(),kb=a("li"),zne=a("strong"),Q4o=o("roberta"),W4o=o(" \u2014 "),XI=a("a"),H4o=o("RobertaForMaskedLM"),U4o=o(" (RoBERTa model)"),J4o=l(),Sb=a("li"),Qne=a("strong"),Y4o=o("roformer"),K4o=o(" \u2014 "),zI=a("a"),Z4o=o("RoFormerForMaskedLM"),eEo=o(" (RoFormer model)"),oEo=l(),Rb=a("li"),Wne=a("strong"),rEo=o("squeezebert"),tEo=o(" \u2014 "),QI=a("a"),aEo=o("SqueezeBertForMaskedLM"),nEo=o(" (SqueezeBERT model)"),sEo=l(),Bb=a("li"),Hne=a("strong"),lEo=o("tapas"),iEo=o(" \u2014 "),WI=a("a"),dEo=o("TapasForMaskedLM"),cEo=o(" (TAPAS model)"),mEo=l(),Pb=a("li"),Une=a("strong"),fEo=o("wav2vec2"),gEo=o(" \u2014 "),Jne=a("code"),hEo=o("Wav2Vec2ForMaskedLM"),uEo=o(" (Wav2Vec2 model)"),pEo=l(),$b=a("li"),Yne=a("strong"),_Eo=o("xlm"),bEo=o(" \u2014 "),HI=a("a"),FEo=o("XLMWithLMHeadModel"),vEo=o(" (XLM model)"),TEo=l(),Ib=a("li"),Kne=a("strong"),MEo=o("xlm-roberta"),EEo=o(" \u2014 "),UI=a("a"),CEo=o("XLMRobertaForMaskedLM"),wEo=o(" (XLM-RoBERTa model)"),AEo=l(),qb=a("li"),Zne=a("strong"),yEo=o("xlm-roberta-xl"),LEo=o(" \u2014 "),JI=a("a"),xEo=o("XLMRobertaXLForMaskedLM"),kEo=o(" (XLM-RoBERTa-XL model)"),SEo=l(),Nb=a("li"),ese=a("strong"),REo=o("yoso"),BEo=o(" \u2014 "),YI=a("a"),PEo=o("YosoForMaskedLM"),$Eo=o(" (YOSO model)"),IEo=l(),jb=a("p"),qEo=o("The model is set in evaluation mode by default using "),ose=a("code"),NEo=o("model.eval()"),jEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rse=a("code"),DEo=o("model.train()"),GEo=l(),tse=a("p"),OEo=o("Examples:"),VEo=l(),m(AA.$$.fragment),vRe=l(),id=a("h2"),Db=a("a"),ase=a("span"),m(yA.$$.fragment),XEo=l(),nse=a("span"),zEo=o("AutoModelForSeq2SeqLM"),TRe=l(),er=a("div"),m(LA.$$.fragment),QEo=l(),dd=a("p"),WEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),KI=a("a"),HEo=o("from_pretrained()"),UEo=o(" class method or the "),ZI=a("a"),JEo=o("from_config()"),YEo=o(` class
method.`),KEo=l(),xA=a("p"),ZEo=o("This class cannot be instantiated directly using "),sse=a("code"),eCo=o("__init__()"),oCo=o(" (throws an error)."),rCo=l(),Hr=a("div"),m(kA.$$.fragment),tCo=l(),lse=a("p"),aCo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),nCo=l(),cd=a("p"),sCo=o(`Note:
Loading a model from its configuration file does `),ise=a("strong"),lCo=o("not"),iCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eq=a("a"),dCo=o("from_pretrained()"),cCo=o(" to load the model weights."),mCo=l(),dse=a("p"),fCo=o("Examples:"),gCo=l(),m(SA.$$.fragment),hCo=l(),Ge=a("div"),m(RA.$$.fragment),uCo=l(),cse=a("p"),pCo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),_Co=l(),Ha=a("p"),bCo=o("The model class to instantiate is selected based on the "),mse=a("code"),FCo=o("model_type"),vCo=o(` property of the config object (either
passed as an argument or loaded from `),fse=a("code"),TCo=o("pretrained_model_name_or_path"),MCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gse=a("code"),ECo=o("pretrained_model_name_or_path"),CCo=o(":"),wCo=l(),se=a("ul"),Gb=a("li"),hse=a("strong"),ACo=o("bart"),yCo=o(" \u2014 "),oq=a("a"),LCo=o("BartForConditionalGeneration"),xCo=o(" (BART model)"),kCo=l(),Ob=a("li"),use=a("strong"),SCo=o("bigbird_pegasus"),RCo=o(" \u2014 "),rq=a("a"),BCo=o("BigBirdPegasusForConditionalGeneration"),PCo=o(" (BigBirdPegasus model)"),$Co=l(),Vb=a("li"),pse=a("strong"),ICo=o("blenderbot"),qCo=o(" \u2014 "),tq=a("a"),NCo=o("BlenderbotForConditionalGeneration"),jCo=o(" (Blenderbot model)"),DCo=l(),Xb=a("li"),_se=a("strong"),GCo=o("blenderbot-small"),OCo=o(" \u2014 "),aq=a("a"),VCo=o("BlenderbotSmallForConditionalGeneration"),XCo=o(" (BlenderbotSmall model)"),zCo=l(),zb=a("li"),bse=a("strong"),QCo=o("encoder-decoder"),WCo=o(" \u2014 "),nq=a("a"),HCo=o("EncoderDecoderModel"),UCo=o(" (Encoder decoder model)"),JCo=l(),Qb=a("li"),Fse=a("strong"),YCo=o("fsmt"),KCo=o(" \u2014 "),sq=a("a"),ZCo=o("FSMTForConditionalGeneration"),e5o=o(" (FairSeq Machine-Translation model)"),o5o=l(),Wb=a("li"),vse=a("strong"),r5o=o("led"),t5o=o(" \u2014 "),lq=a("a"),a5o=o("LEDForConditionalGeneration"),n5o=o(" (LED model)"),s5o=l(),Hb=a("li"),Tse=a("strong"),l5o=o("m2m_100"),i5o=o(" \u2014 "),iq=a("a"),d5o=o("M2M100ForConditionalGeneration"),c5o=o(" (M2M100 model)"),m5o=l(),Ub=a("li"),Mse=a("strong"),f5o=o("marian"),g5o=o(" \u2014 "),dq=a("a"),h5o=o("MarianMTModel"),u5o=o(" (Marian model)"),p5o=l(),Jb=a("li"),Ese=a("strong"),_5o=o("mbart"),b5o=o(" \u2014 "),cq=a("a"),F5o=o("MBartForConditionalGeneration"),v5o=o(" (mBART model)"),T5o=l(),Yb=a("li"),Cse=a("strong"),M5o=o("mt5"),E5o=o(" \u2014 "),mq=a("a"),C5o=o("MT5ForConditionalGeneration"),w5o=o(" (mT5 model)"),A5o=l(),Kb=a("li"),wse=a("strong"),y5o=o("pegasus"),L5o=o(" \u2014 "),fq=a("a"),x5o=o("PegasusForConditionalGeneration"),k5o=o(" (Pegasus model)"),S5o=l(),Zb=a("li"),Ase=a("strong"),R5o=o("plbart"),B5o=o(" \u2014 "),gq=a("a"),P5o=o("PLBartForConditionalGeneration"),$5o=o(" (PLBart model)"),I5o=l(),e2=a("li"),yse=a("strong"),q5o=o("prophetnet"),N5o=o(" \u2014 "),hq=a("a"),j5o=o("ProphetNetForConditionalGeneration"),D5o=o(" (ProphetNet model)"),G5o=l(),o2=a("li"),Lse=a("strong"),O5o=o("t5"),V5o=o(" \u2014 "),uq=a("a"),X5o=o("T5ForConditionalGeneration"),z5o=o(" (T5 model)"),Q5o=l(),r2=a("li"),xse=a("strong"),W5o=o("xlm-prophetnet"),H5o=o(" \u2014 "),pq=a("a"),U5o=o("XLMProphetNetForConditionalGeneration"),J5o=o(" (XLMProphetNet model)"),Y5o=l(),t2=a("p"),K5o=o("The model is set in evaluation mode by default using "),kse=a("code"),Z5o=o("model.eval()"),e3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sse=a("code"),o3o=o("model.train()"),r3o=l(),Rse=a("p"),t3o=o("Examples:"),a3o=l(),m(BA.$$.fragment),MRe=l(),md=a("h2"),a2=a("a"),Bse=a("span"),m(PA.$$.fragment),n3o=l(),Pse=a("span"),s3o=o("AutoModelForSequenceClassification"),ERe=l(),or=a("div"),m($A.$$.fragment),l3o=l(),fd=a("p"),i3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),_q=a("a"),d3o=o("from_pretrained()"),c3o=o(" class method or the "),bq=a("a"),m3o=o("from_config()"),f3o=o(` class
method.`),g3o=l(),IA=a("p"),h3o=o("This class cannot be instantiated directly using "),$se=a("code"),u3o=o("__init__()"),p3o=o(" (throws an error)."),_3o=l(),Ur=a("div"),m(qA.$$.fragment),b3o=l(),Ise=a("p"),F3o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),v3o=l(),gd=a("p"),T3o=o(`Note:
Loading a model from its configuration file does `),qse=a("strong"),M3o=o("not"),E3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fq=a("a"),C3o=o("from_pretrained()"),w3o=o(" to load the model weights."),A3o=l(),Nse=a("p"),y3o=o("Examples:"),L3o=l(),m(NA.$$.fragment),x3o=l(),Oe=a("div"),m(jA.$$.fragment),k3o=l(),jse=a("p"),S3o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),R3o=l(),Ua=a("p"),B3o=o("The model class to instantiate is selected based on the "),Dse=a("code"),P3o=o("model_type"),$3o=o(` property of the config object (either
passed as an argument or loaded from `),Gse=a("code"),I3o=o("pretrained_model_name_or_path"),q3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ose=a("code"),N3o=o("pretrained_model_name_or_path"),j3o=o(":"),D3o=l(),y=a("ul"),n2=a("li"),Vse=a("strong"),G3o=o("albert"),O3o=o(" \u2014 "),vq=a("a"),V3o=o("AlbertForSequenceClassification"),X3o=o(" (ALBERT model)"),z3o=l(),s2=a("li"),Xse=a("strong"),Q3o=o("bart"),W3o=o(" \u2014 "),Tq=a("a"),H3o=o("BartForSequenceClassification"),U3o=o(" (BART model)"),J3o=l(),l2=a("li"),zse=a("strong"),Y3o=o("bert"),K3o=o(" \u2014 "),Mq=a("a"),Z3o=o("BertForSequenceClassification"),ewo=o(" (BERT model)"),owo=l(),i2=a("li"),Qse=a("strong"),rwo=o("big_bird"),two=o(" \u2014 "),Eq=a("a"),awo=o("BigBirdForSequenceClassification"),nwo=o(" (BigBird model)"),swo=l(),d2=a("li"),Wse=a("strong"),lwo=o("bigbird_pegasus"),iwo=o(" \u2014 "),Cq=a("a"),dwo=o("BigBirdPegasusForSequenceClassification"),cwo=o(" (BigBirdPegasus model)"),mwo=l(),c2=a("li"),Hse=a("strong"),fwo=o("camembert"),gwo=o(" \u2014 "),wq=a("a"),hwo=o("CamembertForSequenceClassification"),uwo=o(" (CamemBERT model)"),pwo=l(),m2=a("li"),Use=a("strong"),_wo=o("canine"),bwo=o(" \u2014 "),Aq=a("a"),Fwo=o("CanineForSequenceClassification"),vwo=o(" (Canine model)"),Two=l(),f2=a("li"),Jse=a("strong"),Mwo=o("convbert"),Ewo=o(" \u2014 "),yq=a("a"),Cwo=o("ConvBertForSequenceClassification"),wwo=o(" (ConvBERT model)"),Awo=l(),g2=a("li"),Yse=a("strong"),ywo=o("ctrl"),Lwo=o(" \u2014 "),Lq=a("a"),xwo=o("CTRLForSequenceClassification"),kwo=o(" (CTRL model)"),Swo=l(),h2=a("li"),Kse=a("strong"),Rwo=o("data2vec-text"),Bwo=o(" \u2014 "),xq=a("a"),Pwo=o("Data2VecTextForSequenceClassification"),$wo=o(" (Data2VecText model)"),Iwo=l(),u2=a("li"),Zse=a("strong"),qwo=o("deberta"),Nwo=o(" \u2014 "),kq=a("a"),jwo=o("DebertaForSequenceClassification"),Dwo=o(" (DeBERTa model)"),Gwo=l(),p2=a("li"),ele=a("strong"),Owo=o("deberta-v2"),Vwo=o(" \u2014 "),Sq=a("a"),Xwo=o("DebertaV2ForSequenceClassification"),zwo=o(" (DeBERTa-v2 model)"),Qwo=l(),_2=a("li"),ole=a("strong"),Wwo=o("distilbert"),Hwo=o(" \u2014 "),Rq=a("a"),Uwo=o("DistilBertForSequenceClassification"),Jwo=o(" (DistilBERT model)"),Ywo=l(),b2=a("li"),rle=a("strong"),Kwo=o("electra"),Zwo=o(" \u2014 "),Bq=a("a"),eAo=o("ElectraForSequenceClassification"),oAo=o(" (ELECTRA model)"),rAo=l(),F2=a("li"),tle=a("strong"),tAo=o("flaubert"),aAo=o(" \u2014 "),Pq=a("a"),nAo=o("FlaubertForSequenceClassification"),sAo=o(" (FlauBERT model)"),lAo=l(),v2=a("li"),ale=a("strong"),iAo=o("fnet"),dAo=o(" \u2014 "),$q=a("a"),cAo=o("FNetForSequenceClassification"),mAo=o(" (FNet model)"),fAo=l(),T2=a("li"),nle=a("strong"),gAo=o("funnel"),hAo=o(" \u2014 "),Iq=a("a"),uAo=o("FunnelForSequenceClassification"),pAo=o(" (Funnel Transformer model)"),_Ao=l(),M2=a("li"),sle=a("strong"),bAo=o("gpt2"),FAo=o(" \u2014 "),qq=a("a"),vAo=o("GPT2ForSequenceClassification"),TAo=o(" (OpenAI GPT-2 model)"),MAo=l(),E2=a("li"),lle=a("strong"),EAo=o("gpt_neo"),CAo=o(" \u2014 "),Nq=a("a"),wAo=o("GPTNeoForSequenceClassification"),AAo=o(" (GPT Neo model)"),yAo=l(),C2=a("li"),ile=a("strong"),LAo=o("gptj"),xAo=o(" \u2014 "),jq=a("a"),kAo=o("GPTJForSequenceClassification"),SAo=o(" (GPT-J model)"),RAo=l(),w2=a("li"),dle=a("strong"),BAo=o("ibert"),PAo=o(" \u2014 "),Dq=a("a"),$Ao=o("IBertForSequenceClassification"),IAo=o(" (I-BERT model)"),qAo=l(),A2=a("li"),cle=a("strong"),NAo=o("layoutlm"),jAo=o(" \u2014 "),Gq=a("a"),DAo=o("LayoutLMForSequenceClassification"),GAo=o(" (LayoutLM model)"),OAo=l(),y2=a("li"),mle=a("strong"),VAo=o("layoutlmv2"),XAo=o(" \u2014 "),Oq=a("a"),zAo=o("LayoutLMv2ForSequenceClassification"),QAo=o(" (LayoutLMv2 model)"),WAo=l(),L2=a("li"),fle=a("strong"),HAo=o("led"),UAo=o(" \u2014 "),Vq=a("a"),JAo=o("LEDForSequenceClassification"),YAo=o(" (LED model)"),KAo=l(),x2=a("li"),gle=a("strong"),ZAo=o("longformer"),e6o=o(" \u2014 "),Xq=a("a"),o6o=o("LongformerForSequenceClassification"),r6o=o(" (Longformer model)"),t6o=l(),k2=a("li"),hle=a("strong"),a6o=o("mbart"),n6o=o(" \u2014 "),zq=a("a"),s6o=o("MBartForSequenceClassification"),l6o=o(" (mBART model)"),i6o=l(),S2=a("li"),ule=a("strong"),d6o=o("megatron-bert"),c6o=o(" \u2014 "),Qq=a("a"),m6o=o("MegatronBertForSequenceClassification"),f6o=o(" (MegatronBert model)"),g6o=l(),R2=a("li"),ple=a("strong"),h6o=o("mobilebert"),u6o=o(" \u2014 "),Wq=a("a"),p6o=o("MobileBertForSequenceClassification"),_6o=o(" (MobileBERT model)"),b6o=l(),B2=a("li"),_le=a("strong"),F6o=o("mpnet"),v6o=o(" \u2014 "),Hq=a("a"),T6o=o("MPNetForSequenceClassification"),M6o=o(" (MPNet model)"),E6o=l(),P2=a("li"),ble=a("strong"),C6o=o("nystromformer"),w6o=o(" \u2014 "),Uq=a("a"),A6o=o("NystromformerForSequenceClassification"),y6o=o(" (Nystromformer model)"),L6o=l(),$2=a("li"),Fle=a("strong"),x6o=o("openai-gpt"),k6o=o(" \u2014 "),Jq=a("a"),S6o=o("OpenAIGPTForSequenceClassification"),R6o=o(" (OpenAI GPT model)"),B6o=l(),I2=a("li"),vle=a("strong"),P6o=o("perceiver"),$6o=o(" \u2014 "),Yq=a("a"),I6o=o("PerceiverForSequenceClassification"),q6o=o(" (Perceiver model)"),N6o=l(),q2=a("li"),Tle=a("strong"),j6o=o("plbart"),D6o=o(" \u2014 "),Kq=a("a"),G6o=o("PLBartForSequenceClassification"),O6o=o(" (PLBart model)"),V6o=l(),N2=a("li"),Mle=a("strong"),X6o=o("qdqbert"),z6o=o(" \u2014 "),Zq=a("a"),Q6o=o("QDQBertForSequenceClassification"),W6o=o(" (QDQBert model)"),H6o=l(),j2=a("li"),Ele=a("strong"),U6o=o("reformer"),J6o=o(" \u2014 "),eN=a("a"),Y6o=o("ReformerForSequenceClassification"),K6o=o(" (Reformer model)"),Z6o=l(),D2=a("li"),Cle=a("strong"),e0o=o("rembert"),o0o=o(" \u2014 "),oN=a("a"),r0o=o("RemBertForSequenceClassification"),t0o=o(" (RemBERT model)"),a0o=l(),G2=a("li"),wle=a("strong"),n0o=o("roberta"),s0o=o(" \u2014 "),rN=a("a"),l0o=o("RobertaForSequenceClassification"),i0o=o(" (RoBERTa model)"),d0o=l(),O2=a("li"),Ale=a("strong"),c0o=o("roformer"),m0o=o(" \u2014 "),tN=a("a"),f0o=o("RoFormerForSequenceClassification"),g0o=o(" (RoFormer model)"),h0o=l(),V2=a("li"),yle=a("strong"),u0o=o("squeezebert"),p0o=o(" \u2014 "),aN=a("a"),_0o=o("SqueezeBertForSequenceClassification"),b0o=o(" (SqueezeBERT model)"),F0o=l(),X2=a("li"),Lle=a("strong"),v0o=o("tapas"),T0o=o(" \u2014 "),nN=a("a"),M0o=o("TapasForSequenceClassification"),E0o=o(" (TAPAS model)"),C0o=l(),z2=a("li"),xle=a("strong"),w0o=o("transfo-xl"),A0o=o(" \u2014 "),sN=a("a"),y0o=o("TransfoXLForSequenceClassification"),L0o=o(" (Transformer-XL model)"),x0o=l(),Q2=a("li"),kle=a("strong"),k0o=o("xlm"),S0o=o(" \u2014 "),lN=a("a"),R0o=o("XLMForSequenceClassification"),B0o=o(" (XLM model)"),P0o=l(),W2=a("li"),Sle=a("strong"),$0o=o("xlm-roberta"),I0o=o(" \u2014 "),iN=a("a"),q0o=o("XLMRobertaForSequenceClassification"),N0o=o(" (XLM-RoBERTa model)"),j0o=l(),H2=a("li"),Rle=a("strong"),D0o=o("xlm-roberta-xl"),G0o=o(" \u2014 "),dN=a("a"),O0o=o("XLMRobertaXLForSequenceClassification"),V0o=o(" (XLM-RoBERTa-XL model)"),X0o=l(),U2=a("li"),Ble=a("strong"),z0o=o("xlnet"),Q0o=o(" \u2014 "),cN=a("a"),W0o=o("XLNetForSequenceClassification"),H0o=o(" (XLNet model)"),U0o=l(),J2=a("li"),Ple=a("strong"),J0o=o("yoso"),Y0o=o(" \u2014 "),mN=a("a"),K0o=o("YosoForSequenceClassification"),Z0o=o(" (YOSO model)"),eyo=l(),Y2=a("p"),oyo=o("The model is set in evaluation mode by default using "),$le=a("code"),ryo=o("model.eval()"),tyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ile=a("code"),ayo=o("model.train()"),nyo=l(),qle=a("p"),syo=o("Examples:"),lyo=l(),m(DA.$$.fragment),CRe=l(),hd=a("h2"),K2=a("a"),Nle=a("span"),m(GA.$$.fragment),iyo=l(),jle=a("span"),dyo=o("AutoModelForMultipleChoice"),wRe=l(),rr=a("div"),m(OA.$$.fragment),cyo=l(),ud=a("p"),myo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),fN=a("a"),fyo=o("from_pretrained()"),gyo=o(" class method or the "),gN=a("a"),hyo=o("from_config()"),uyo=o(` class
method.`),pyo=l(),VA=a("p"),_yo=o("This class cannot be instantiated directly using "),Dle=a("code"),byo=o("__init__()"),Fyo=o(" (throws an error)."),vyo=l(),Jr=a("div"),m(XA.$$.fragment),Tyo=l(),Gle=a("p"),Myo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Eyo=l(),pd=a("p"),Cyo=o(`Note:
Loading a model from its configuration file does `),Ole=a("strong"),wyo=o("not"),Ayo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hN=a("a"),yyo=o("from_pretrained()"),Lyo=o(" to load the model weights."),xyo=l(),Vle=a("p"),kyo=o("Examples:"),Syo=l(),m(zA.$$.fragment),Ryo=l(),Ve=a("div"),m(QA.$$.fragment),Byo=l(),Xle=a("p"),Pyo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$yo=l(),Ja=a("p"),Iyo=o("The model class to instantiate is selected based on the "),zle=a("code"),qyo=o("model_type"),Nyo=o(` property of the config object (either
passed as an argument or loaded from `),Qle=a("code"),jyo=o("pretrained_model_name_or_path"),Dyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wle=a("code"),Gyo=o("pretrained_model_name_or_path"),Oyo=o(":"),Vyo=l(),G=a("ul"),Z2=a("li"),Hle=a("strong"),Xyo=o("albert"),zyo=o(" \u2014 "),uN=a("a"),Qyo=o("AlbertForMultipleChoice"),Wyo=o(" (ALBERT model)"),Hyo=l(),eF=a("li"),Ule=a("strong"),Uyo=o("bert"),Jyo=o(" \u2014 "),pN=a("a"),Yyo=o("BertForMultipleChoice"),Kyo=o(" (BERT model)"),Zyo=l(),oF=a("li"),Jle=a("strong"),eLo=o("big_bird"),oLo=o(" \u2014 "),_N=a("a"),rLo=o("BigBirdForMultipleChoice"),tLo=o(" (BigBird model)"),aLo=l(),rF=a("li"),Yle=a("strong"),nLo=o("camembert"),sLo=o(" \u2014 "),bN=a("a"),lLo=o("CamembertForMultipleChoice"),iLo=o(" (CamemBERT model)"),dLo=l(),tF=a("li"),Kle=a("strong"),cLo=o("canine"),mLo=o(" \u2014 "),FN=a("a"),fLo=o("CanineForMultipleChoice"),gLo=o(" (Canine model)"),hLo=l(),aF=a("li"),Zle=a("strong"),uLo=o("convbert"),pLo=o(" \u2014 "),vN=a("a"),_Lo=o("ConvBertForMultipleChoice"),bLo=o(" (ConvBERT model)"),FLo=l(),nF=a("li"),eie=a("strong"),vLo=o("data2vec-text"),TLo=o(" \u2014 "),TN=a("a"),MLo=o("Data2VecTextForMultipleChoice"),ELo=o(" (Data2VecText model)"),CLo=l(),sF=a("li"),oie=a("strong"),wLo=o("distilbert"),ALo=o(" \u2014 "),MN=a("a"),yLo=o("DistilBertForMultipleChoice"),LLo=o(" (DistilBERT model)"),xLo=l(),lF=a("li"),rie=a("strong"),kLo=o("electra"),SLo=o(" \u2014 "),EN=a("a"),RLo=o("ElectraForMultipleChoice"),BLo=o(" (ELECTRA model)"),PLo=l(),iF=a("li"),tie=a("strong"),$Lo=o("flaubert"),ILo=o(" \u2014 "),CN=a("a"),qLo=o("FlaubertForMultipleChoice"),NLo=o(" (FlauBERT model)"),jLo=l(),dF=a("li"),aie=a("strong"),DLo=o("fnet"),GLo=o(" \u2014 "),wN=a("a"),OLo=o("FNetForMultipleChoice"),VLo=o(" (FNet model)"),XLo=l(),cF=a("li"),nie=a("strong"),zLo=o("funnel"),QLo=o(" \u2014 "),AN=a("a"),WLo=o("FunnelForMultipleChoice"),HLo=o(" (Funnel Transformer model)"),ULo=l(),mF=a("li"),sie=a("strong"),JLo=o("ibert"),YLo=o(" \u2014 "),yN=a("a"),KLo=o("IBertForMultipleChoice"),ZLo=o(" (I-BERT model)"),e8o=l(),fF=a("li"),lie=a("strong"),o8o=o("longformer"),r8o=o(" \u2014 "),LN=a("a"),t8o=o("LongformerForMultipleChoice"),a8o=o(" (Longformer model)"),n8o=l(),gF=a("li"),iie=a("strong"),s8o=o("megatron-bert"),l8o=o(" \u2014 "),xN=a("a"),i8o=o("MegatronBertForMultipleChoice"),d8o=o(" (MegatronBert model)"),c8o=l(),hF=a("li"),die=a("strong"),m8o=o("mobilebert"),f8o=o(" \u2014 "),kN=a("a"),g8o=o("MobileBertForMultipleChoice"),h8o=o(" (MobileBERT model)"),u8o=l(),uF=a("li"),cie=a("strong"),p8o=o("mpnet"),_8o=o(" \u2014 "),SN=a("a"),b8o=o("MPNetForMultipleChoice"),F8o=o(" (MPNet model)"),v8o=l(),pF=a("li"),mie=a("strong"),T8o=o("nystromformer"),M8o=o(" \u2014 "),RN=a("a"),E8o=o("NystromformerForMultipleChoice"),C8o=o(" (Nystromformer model)"),w8o=l(),_F=a("li"),fie=a("strong"),A8o=o("qdqbert"),y8o=o(" \u2014 "),BN=a("a"),L8o=o("QDQBertForMultipleChoice"),x8o=o(" (QDQBert model)"),k8o=l(),bF=a("li"),gie=a("strong"),S8o=o("rembert"),R8o=o(" \u2014 "),PN=a("a"),B8o=o("RemBertForMultipleChoice"),P8o=o(" (RemBERT model)"),$8o=l(),FF=a("li"),hie=a("strong"),I8o=o("roberta"),q8o=o(" \u2014 "),$N=a("a"),N8o=o("RobertaForMultipleChoice"),j8o=o(" (RoBERTa model)"),D8o=l(),vF=a("li"),uie=a("strong"),G8o=o("roformer"),O8o=o(" \u2014 "),IN=a("a"),V8o=o("RoFormerForMultipleChoice"),X8o=o(" (RoFormer model)"),z8o=l(),TF=a("li"),pie=a("strong"),Q8o=o("squeezebert"),W8o=o(" \u2014 "),qN=a("a"),H8o=o("SqueezeBertForMultipleChoice"),U8o=o(" (SqueezeBERT model)"),J8o=l(),MF=a("li"),_ie=a("strong"),Y8o=o("xlm"),K8o=o(" \u2014 "),NN=a("a"),Z8o=o("XLMForMultipleChoice"),e7o=o(" (XLM model)"),o7o=l(),EF=a("li"),bie=a("strong"),r7o=o("xlm-roberta"),t7o=o(" \u2014 "),jN=a("a"),a7o=o("XLMRobertaForMultipleChoice"),n7o=o(" (XLM-RoBERTa model)"),s7o=l(),CF=a("li"),Fie=a("strong"),l7o=o("xlm-roberta-xl"),i7o=o(" \u2014 "),DN=a("a"),d7o=o("XLMRobertaXLForMultipleChoice"),c7o=o(" (XLM-RoBERTa-XL model)"),m7o=l(),wF=a("li"),vie=a("strong"),f7o=o("xlnet"),g7o=o(" \u2014 "),GN=a("a"),h7o=o("XLNetForMultipleChoice"),u7o=o(" (XLNet model)"),p7o=l(),AF=a("li"),Tie=a("strong"),_7o=o("yoso"),b7o=o(" \u2014 "),ON=a("a"),F7o=o("YosoForMultipleChoice"),v7o=o(" (YOSO model)"),T7o=l(),yF=a("p"),M7o=o("The model is set in evaluation mode by default using "),Mie=a("code"),E7o=o("model.eval()"),C7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eie=a("code"),w7o=o("model.train()"),A7o=l(),Cie=a("p"),y7o=o("Examples:"),L7o=l(),m(WA.$$.fragment),ARe=l(),_d=a("h2"),LF=a("a"),wie=a("span"),m(HA.$$.fragment),x7o=l(),Aie=a("span"),k7o=o("AutoModelForNextSentencePrediction"),yRe=l(),tr=a("div"),m(UA.$$.fragment),S7o=l(),bd=a("p"),R7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),VN=a("a"),B7o=o("from_pretrained()"),P7o=o(" class method or the "),XN=a("a"),$7o=o("from_config()"),I7o=o(` class
method.`),q7o=l(),JA=a("p"),N7o=o("This class cannot be instantiated directly using "),yie=a("code"),j7o=o("__init__()"),D7o=o(" (throws an error)."),G7o=l(),Yr=a("div"),m(YA.$$.fragment),O7o=l(),Lie=a("p"),V7o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),X7o=l(),Fd=a("p"),z7o=o(`Note:
Loading a model from its configuration file does `),xie=a("strong"),Q7o=o("not"),W7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zN=a("a"),H7o=o("from_pretrained()"),U7o=o(" to load the model weights."),J7o=l(),kie=a("p"),Y7o=o("Examples:"),K7o=l(),m(KA.$$.fragment),Z7o=l(),Xe=a("div"),m(ZA.$$.fragment),e9o=l(),Sie=a("p"),o9o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),r9o=l(),Ya=a("p"),t9o=o("The model class to instantiate is selected based on the "),Rie=a("code"),a9o=o("model_type"),n9o=o(` property of the config object (either
passed as an argument or loaded from `),Bie=a("code"),s9o=o("pretrained_model_name_or_path"),l9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pie=a("code"),i9o=o("pretrained_model_name_or_path"),d9o=o(":"),c9o=l(),da=a("ul"),xF=a("li"),$ie=a("strong"),m9o=o("bert"),f9o=o(" \u2014 "),QN=a("a"),g9o=o("BertForNextSentencePrediction"),h9o=o(" (BERT model)"),u9o=l(),kF=a("li"),Iie=a("strong"),p9o=o("fnet"),_9o=o(" \u2014 "),WN=a("a"),b9o=o("FNetForNextSentencePrediction"),F9o=o(" (FNet model)"),v9o=l(),SF=a("li"),qie=a("strong"),T9o=o("megatron-bert"),M9o=o(" \u2014 "),HN=a("a"),E9o=o("MegatronBertForNextSentencePrediction"),C9o=o(" (MegatronBert model)"),w9o=l(),RF=a("li"),Nie=a("strong"),A9o=o("mobilebert"),y9o=o(" \u2014 "),UN=a("a"),L9o=o("MobileBertForNextSentencePrediction"),x9o=o(" (MobileBERT model)"),k9o=l(),BF=a("li"),jie=a("strong"),S9o=o("qdqbert"),R9o=o(" \u2014 "),JN=a("a"),B9o=o("QDQBertForNextSentencePrediction"),P9o=o(" (QDQBert model)"),$9o=l(),PF=a("p"),I9o=o("The model is set in evaluation mode by default using "),Die=a("code"),q9o=o("model.eval()"),N9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gie=a("code"),j9o=o("model.train()"),D9o=l(),Oie=a("p"),G9o=o("Examples:"),O9o=l(),m(e6.$$.fragment),LRe=l(),vd=a("h2"),$F=a("a"),Vie=a("span"),m(o6.$$.fragment),V9o=l(),Xie=a("span"),X9o=o("AutoModelForTokenClassification"),xRe=l(),ar=a("div"),m(r6.$$.fragment),z9o=l(),Td=a("p"),Q9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),YN=a("a"),W9o=o("from_pretrained()"),H9o=o(" class method or the "),KN=a("a"),U9o=o("from_config()"),J9o=o(` class
method.`),Y9o=l(),t6=a("p"),K9o=o("This class cannot be instantiated directly using "),zie=a("code"),Z9o=o("__init__()"),exo=o(" (throws an error)."),oxo=l(),Kr=a("div"),m(a6.$$.fragment),rxo=l(),Qie=a("p"),txo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),axo=l(),Md=a("p"),nxo=o(`Note:
Loading a model from its configuration file does `),Wie=a("strong"),sxo=o("not"),lxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZN=a("a"),ixo=o("from_pretrained()"),dxo=o(" to load the model weights."),cxo=l(),Hie=a("p"),mxo=o("Examples:"),fxo=l(),m(n6.$$.fragment),gxo=l(),ze=a("div"),m(s6.$$.fragment),hxo=l(),Uie=a("p"),uxo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),pxo=l(),Ka=a("p"),_xo=o("The model class to instantiate is selected based on the "),Jie=a("code"),bxo=o("model_type"),Fxo=o(` property of the config object (either
passed as an argument or loaded from `),Yie=a("code"),vxo=o("pretrained_model_name_or_path"),Txo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kie=a("code"),Mxo=o("pretrained_model_name_or_path"),Exo=o(":"),Cxo=l(),j=a("ul"),IF=a("li"),Zie=a("strong"),wxo=o("albert"),Axo=o(" \u2014 "),ej=a("a"),yxo=o("AlbertForTokenClassification"),Lxo=o(" (ALBERT model)"),xxo=l(),qF=a("li"),ede=a("strong"),kxo=o("bert"),Sxo=o(" \u2014 "),oj=a("a"),Rxo=o("BertForTokenClassification"),Bxo=o(" (BERT model)"),Pxo=l(),NF=a("li"),ode=a("strong"),$xo=o("big_bird"),Ixo=o(" \u2014 "),rj=a("a"),qxo=o("BigBirdForTokenClassification"),Nxo=o(" (BigBird model)"),jxo=l(),jF=a("li"),rde=a("strong"),Dxo=o("camembert"),Gxo=o(" \u2014 "),tj=a("a"),Oxo=o("CamembertForTokenClassification"),Vxo=o(" (CamemBERT model)"),Xxo=l(),DF=a("li"),tde=a("strong"),zxo=o("canine"),Qxo=o(" \u2014 "),aj=a("a"),Wxo=o("CanineForTokenClassification"),Hxo=o(" (Canine model)"),Uxo=l(),GF=a("li"),ade=a("strong"),Jxo=o("convbert"),Yxo=o(" \u2014 "),nj=a("a"),Kxo=o("ConvBertForTokenClassification"),Zxo=o(" (ConvBERT model)"),eko=l(),OF=a("li"),nde=a("strong"),oko=o("data2vec-text"),rko=o(" \u2014 "),sj=a("a"),tko=o("Data2VecTextForTokenClassification"),ako=o(" (Data2VecText model)"),nko=l(),VF=a("li"),sde=a("strong"),sko=o("deberta"),lko=o(" \u2014 "),lj=a("a"),iko=o("DebertaForTokenClassification"),dko=o(" (DeBERTa model)"),cko=l(),XF=a("li"),lde=a("strong"),mko=o("deberta-v2"),fko=o(" \u2014 "),ij=a("a"),gko=o("DebertaV2ForTokenClassification"),hko=o(" (DeBERTa-v2 model)"),uko=l(),zF=a("li"),ide=a("strong"),pko=o("distilbert"),_ko=o(" \u2014 "),dj=a("a"),bko=o("DistilBertForTokenClassification"),Fko=o(" (DistilBERT model)"),vko=l(),QF=a("li"),dde=a("strong"),Tko=o("electra"),Mko=o(" \u2014 "),cj=a("a"),Eko=o("ElectraForTokenClassification"),Cko=o(" (ELECTRA model)"),wko=l(),WF=a("li"),cde=a("strong"),Ako=o("flaubert"),yko=o(" \u2014 "),mj=a("a"),Lko=o("FlaubertForTokenClassification"),xko=o(" (FlauBERT model)"),kko=l(),HF=a("li"),mde=a("strong"),Sko=o("fnet"),Rko=o(" \u2014 "),fj=a("a"),Bko=o("FNetForTokenClassification"),Pko=o(" (FNet model)"),$ko=l(),UF=a("li"),fde=a("strong"),Iko=o("funnel"),qko=o(" \u2014 "),gj=a("a"),Nko=o("FunnelForTokenClassification"),jko=o(" (Funnel Transformer model)"),Dko=l(),JF=a("li"),gde=a("strong"),Gko=o("gpt2"),Oko=o(" \u2014 "),hj=a("a"),Vko=o("GPT2ForTokenClassification"),Xko=o(" (OpenAI GPT-2 model)"),zko=l(),YF=a("li"),hde=a("strong"),Qko=o("ibert"),Wko=o(" \u2014 "),uj=a("a"),Hko=o("IBertForTokenClassification"),Uko=o(" (I-BERT model)"),Jko=l(),KF=a("li"),ude=a("strong"),Yko=o("layoutlm"),Kko=o(" \u2014 "),pj=a("a"),Zko=o("LayoutLMForTokenClassification"),eSo=o(" (LayoutLM model)"),oSo=l(),ZF=a("li"),pde=a("strong"),rSo=o("layoutlmv2"),tSo=o(" \u2014 "),_j=a("a"),aSo=o("LayoutLMv2ForTokenClassification"),nSo=o(" (LayoutLMv2 model)"),sSo=l(),ev=a("li"),_de=a("strong"),lSo=o("longformer"),iSo=o(" \u2014 "),bj=a("a"),dSo=o("LongformerForTokenClassification"),cSo=o(" (Longformer model)"),mSo=l(),ov=a("li"),bde=a("strong"),fSo=o("megatron-bert"),gSo=o(" \u2014 "),Fj=a("a"),hSo=o("MegatronBertForTokenClassification"),uSo=o(" (MegatronBert model)"),pSo=l(),rv=a("li"),Fde=a("strong"),_So=o("mobilebert"),bSo=o(" \u2014 "),vj=a("a"),FSo=o("MobileBertForTokenClassification"),vSo=o(" (MobileBERT model)"),TSo=l(),tv=a("li"),vde=a("strong"),MSo=o("mpnet"),ESo=o(" \u2014 "),Tj=a("a"),CSo=o("MPNetForTokenClassification"),wSo=o(" (MPNet model)"),ASo=l(),av=a("li"),Tde=a("strong"),ySo=o("nystromformer"),LSo=o(" \u2014 "),Mj=a("a"),xSo=o("NystromformerForTokenClassification"),kSo=o(" (Nystromformer model)"),SSo=l(),nv=a("li"),Mde=a("strong"),RSo=o("qdqbert"),BSo=o(" \u2014 "),Ej=a("a"),PSo=o("QDQBertForTokenClassification"),$So=o(" (QDQBert model)"),ISo=l(),sv=a("li"),Ede=a("strong"),qSo=o("rembert"),NSo=o(" \u2014 "),Cj=a("a"),jSo=o("RemBertForTokenClassification"),DSo=o(" (RemBERT model)"),GSo=l(),lv=a("li"),Cde=a("strong"),OSo=o("roberta"),VSo=o(" \u2014 "),wj=a("a"),XSo=o("RobertaForTokenClassification"),zSo=o(" (RoBERTa model)"),QSo=l(),iv=a("li"),wde=a("strong"),WSo=o("roformer"),HSo=o(" \u2014 "),Aj=a("a"),USo=o("RoFormerForTokenClassification"),JSo=o(" (RoFormer model)"),YSo=l(),dv=a("li"),Ade=a("strong"),KSo=o("squeezebert"),ZSo=o(" \u2014 "),yj=a("a"),eRo=o("SqueezeBertForTokenClassification"),oRo=o(" (SqueezeBERT model)"),rRo=l(),cv=a("li"),yde=a("strong"),tRo=o("xlm"),aRo=o(" \u2014 "),Lj=a("a"),nRo=o("XLMForTokenClassification"),sRo=o(" (XLM model)"),lRo=l(),mv=a("li"),Lde=a("strong"),iRo=o("xlm-roberta"),dRo=o(" \u2014 "),xj=a("a"),cRo=o("XLMRobertaForTokenClassification"),mRo=o(" (XLM-RoBERTa model)"),fRo=l(),fv=a("li"),xde=a("strong"),gRo=o("xlm-roberta-xl"),hRo=o(" \u2014 "),kj=a("a"),uRo=o("XLMRobertaXLForTokenClassification"),pRo=o(" (XLM-RoBERTa-XL model)"),_Ro=l(),gv=a("li"),kde=a("strong"),bRo=o("xlnet"),FRo=o(" \u2014 "),Sj=a("a"),vRo=o("XLNetForTokenClassification"),TRo=o(" (XLNet model)"),MRo=l(),hv=a("li"),Sde=a("strong"),ERo=o("yoso"),CRo=o(" \u2014 "),Rj=a("a"),wRo=o("YosoForTokenClassification"),ARo=o(" (YOSO model)"),yRo=l(),uv=a("p"),LRo=o("The model is set in evaluation mode by default using "),Rde=a("code"),xRo=o("model.eval()"),kRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bde=a("code"),SRo=o("model.train()"),RRo=l(),Pde=a("p"),BRo=o("Examples:"),PRo=l(),m(l6.$$.fragment),kRe=l(),Ed=a("h2"),pv=a("a"),$de=a("span"),m(i6.$$.fragment),$Ro=l(),Ide=a("span"),IRo=o("AutoModelForQuestionAnswering"),SRe=l(),nr=a("div"),m(d6.$$.fragment),qRo=l(),Cd=a("p"),NRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Bj=a("a"),jRo=o("from_pretrained()"),DRo=o(" class method or the "),Pj=a("a"),GRo=o("from_config()"),ORo=o(` class
method.`),VRo=l(),c6=a("p"),XRo=o("This class cannot be instantiated directly using "),qde=a("code"),zRo=o("__init__()"),QRo=o(" (throws an error)."),WRo=l(),Zr=a("div"),m(m6.$$.fragment),HRo=l(),Nde=a("p"),URo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),JRo=l(),wd=a("p"),YRo=o(`Note:
Loading a model from its configuration file does `),jde=a("strong"),KRo=o("not"),ZRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$j=a("a"),eBo=o("from_pretrained()"),oBo=o(" to load the model weights."),rBo=l(),Dde=a("p"),tBo=o("Examples:"),aBo=l(),m(f6.$$.fragment),nBo=l(),Qe=a("div"),m(g6.$$.fragment),sBo=l(),Gde=a("p"),lBo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),iBo=l(),Za=a("p"),dBo=o("The model class to instantiate is selected based on the "),Ode=a("code"),cBo=o("model_type"),mBo=o(` property of the config object (either
passed as an argument or loaded from `),Vde=a("code"),fBo=o("pretrained_model_name_or_path"),gBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xde=a("code"),hBo=o("pretrained_model_name_or_path"),uBo=o(":"),pBo=l(),R=a("ul"),_v=a("li"),zde=a("strong"),_Bo=o("albert"),bBo=o(" \u2014 "),Ij=a("a"),FBo=o("AlbertForQuestionAnswering"),vBo=o(" (ALBERT model)"),TBo=l(),bv=a("li"),Qde=a("strong"),MBo=o("bart"),EBo=o(" \u2014 "),qj=a("a"),CBo=o("BartForQuestionAnswering"),wBo=o(" (BART model)"),ABo=l(),Fv=a("li"),Wde=a("strong"),yBo=o("bert"),LBo=o(" \u2014 "),Nj=a("a"),xBo=o("BertForQuestionAnswering"),kBo=o(" (BERT model)"),SBo=l(),vv=a("li"),Hde=a("strong"),RBo=o("big_bird"),BBo=o(" \u2014 "),jj=a("a"),PBo=o("BigBirdForQuestionAnswering"),$Bo=o(" (BigBird model)"),IBo=l(),Tv=a("li"),Ude=a("strong"),qBo=o("bigbird_pegasus"),NBo=o(" \u2014 "),Dj=a("a"),jBo=o("BigBirdPegasusForQuestionAnswering"),DBo=o(" (BigBirdPegasus model)"),GBo=l(),Mv=a("li"),Jde=a("strong"),OBo=o("camembert"),VBo=o(" \u2014 "),Gj=a("a"),XBo=o("CamembertForQuestionAnswering"),zBo=o(" (CamemBERT model)"),QBo=l(),Ev=a("li"),Yde=a("strong"),WBo=o("canine"),HBo=o(" \u2014 "),Oj=a("a"),UBo=o("CanineForQuestionAnswering"),JBo=o(" (Canine model)"),YBo=l(),Cv=a("li"),Kde=a("strong"),KBo=o("convbert"),ZBo=o(" \u2014 "),Vj=a("a"),ePo=o("ConvBertForQuestionAnswering"),oPo=o(" (ConvBERT model)"),rPo=l(),wv=a("li"),Zde=a("strong"),tPo=o("data2vec-text"),aPo=o(" \u2014 "),Xj=a("a"),nPo=o("Data2VecTextForQuestionAnswering"),sPo=o(" (Data2VecText model)"),lPo=l(),Av=a("li"),ece=a("strong"),iPo=o("deberta"),dPo=o(" \u2014 "),zj=a("a"),cPo=o("DebertaForQuestionAnswering"),mPo=o(" (DeBERTa model)"),fPo=l(),yv=a("li"),oce=a("strong"),gPo=o("deberta-v2"),hPo=o(" \u2014 "),Qj=a("a"),uPo=o("DebertaV2ForQuestionAnswering"),pPo=o(" (DeBERTa-v2 model)"),_Po=l(),Lv=a("li"),rce=a("strong"),bPo=o("distilbert"),FPo=o(" \u2014 "),Wj=a("a"),vPo=o("DistilBertForQuestionAnswering"),TPo=o(" (DistilBERT model)"),MPo=l(),xv=a("li"),tce=a("strong"),EPo=o("electra"),CPo=o(" \u2014 "),Hj=a("a"),wPo=o("ElectraForQuestionAnswering"),APo=o(" (ELECTRA model)"),yPo=l(),kv=a("li"),ace=a("strong"),LPo=o("flaubert"),xPo=o(" \u2014 "),Uj=a("a"),kPo=o("FlaubertForQuestionAnsweringSimple"),SPo=o(" (FlauBERT model)"),RPo=l(),Sv=a("li"),nce=a("strong"),BPo=o("fnet"),PPo=o(" \u2014 "),Jj=a("a"),$Po=o("FNetForQuestionAnswering"),IPo=o(" (FNet model)"),qPo=l(),Rv=a("li"),sce=a("strong"),NPo=o("funnel"),jPo=o(" \u2014 "),Yj=a("a"),DPo=o("FunnelForQuestionAnswering"),GPo=o(" (Funnel Transformer model)"),OPo=l(),Bv=a("li"),lce=a("strong"),VPo=o("gptj"),XPo=o(" \u2014 "),Kj=a("a"),zPo=o("GPTJForQuestionAnswering"),QPo=o(" (GPT-J model)"),WPo=l(),Pv=a("li"),ice=a("strong"),HPo=o("ibert"),UPo=o(" \u2014 "),Zj=a("a"),JPo=o("IBertForQuestionAnswering"),YPo=o(" (I-BERT model)"),KPo=l(),$v=a("li"),dce=a("strong"),ZPo=o("layoutlmv2"),e$o=o(" \u2014 "),eD=a("a"),o$o=o("LayoutLMv2ForQuestionAnswering"),r$o=o(" (LayoutLMv2 model)"),t$o=l(),Iv=a("li"),cce=a("strong"),a$o=o("led"),n$o=o(" \u2014 "),oD=a("a"),s$o=o("LEDForQuestionAnswering"),l$o=o(" (LED model)"),i$o=l(),qv=a("li"),mce=a("strong"),d$o=o("longformer"),c$o=o(" \u2014 "),rD=a("a"),m$o=o("LongformerForQuestionAnswering"),f$o=o(" (Longformer model)"),g$o=l(),Nv=a("li"),fce=a("strong"),h$o=o("lxmert"),u$o=o(" \u2014 "),tD=a("a"),p$o=o("LxmertForQuestionAnswering"),_$o=o(" (LXMERT model)"),b$o=l(),jv=a("li"),gce=a("strong"),F$o=o("mbart"),v$o=o(" \u2014 "),aD=a("a"),T$o=o("MBartForQuestionAnswering"),M$o=o(" (mBART model)"),E$o=l(),Dv=a("li"),hce=a("strong"),C$o=o("megatron-bert"),w$o=o(" \u2014 "),nD=a("a"),A$o=o("MegatronBertForQuestionAnswering"),y$o=o(" (MegatronBert model)"),L$o=l(),Gv=a("li"),uce=a("strong"),x$o=o("mobilebert"),k$o=o(" \u2014 "),sD=a("a"),S$o=o("MobileBertForQuestionAnswering"),R$o=o(" (MobileBERT model)"),B$o=l(),Ov=a("li"),pce=a("strong"),P$o=o("mpnet"),$$o=o(" \u2014 "),lD=a("a"),I$o=o("MPNetForQuestionAnswering"),q$o=o(" (MPNet model)"),N$o=l(),Vv=a("li"),_ce=a("strong"),j$o=o("nystromformer"),D$o=o(" \u2014 "),iD=a("a"),G$o=o("NystromformerForQuestionAnswering"),O$o=o(" (Nystromformer model)"),V$o=l(),Xv=a("li"),bce=a("strong"),X$o=o("qdqbert"),z$o=o(" \u2014 "),dD=a("a"),Q$o=o("QDQBertForQuestionAnswering"),W$o=o(" (QDQBert model)"),H$o=l(),zv=a("li"),Fce=a("strong"),U$o=o("reformer"),J$o=o(" \u2014 "),cD=a("a"),Y$o=o("ReformerForQuestionAnswering"),K$o=o(" (Reformer model)"),Z$o=l(),Qv=a("li"),vce=a("strong"),eIo=o("rembert"),oIo=o(" \u2014 "),mD=a("a"),rIo=o("RemBertForQuestionAnswering"),tIo=o(" (RemBERT model)"),aIo=l(),Wv=a("li"),Tce=a("strong"),nIo=o("roberta"),sIo=o(" \u2014 "),fD=a("a"),lIo=o("RobertaForQuestionAnswering"),iIo=o(" (RoBERTa model)"),dIo=l(),Hv=a("li"),Mce=a("strong"),cIo=o("roformer"),mIo=o(" \u2014 "),gD=a("a"),fIo=o("RoFormerForQuestionAnswering"),gIo=o(" (RoFormer model)"),hIo=l(),Uv=a("li"),Ece=a("strong"),uIo=o("splinter"),pIo=o(" \u2014 "),hD=a("a"),_Io=o("SplinterForQuestionAnswering"),bIo=o(" (Splinter model)"),FIo=l(),Jv=a("li"),Cce=a("strong"),vIo=o("squeezebert"),TIo=o(" \u2014 "),uD=a("a"),MIo=o("SqueezeBertForQuestionAnswering"),EIo=o(" (SqueezeBERT model)"),CIo=l(),Yv=a("li"),wce=a("strong"),wIo=o("xlm"),AIo=o(" \u2014 "),pD=a("a"),yIo=o("XLMForQuestionAnsweringSimple"),LIo=o(" (XLM model)"),xIo=l(),Kv=a("li"),Ace=a("strong"),kIo=o("xlm-roberta"),SIo=o(" \u2014 "),_D=a("a"),RIo=o("XLMRobertaForQuestionAnswering"),BIo=o(" (XLM-RoBERTa model)"),PIo=l(),Zv=a("li"),yce=a("strong"),$Io=o("xlm-roberta-xl"),IIo=o(" \u2014 "),bD=a("a"),qIo=o("XLMRobertaXLForQuestionAnswering"),NIo=o(" (XLM-RoBERTa-XL model)"),jIo=l(),eT=a("li"),Lce=a("strong"),DIo=o("xlnet"),GIo=o(" \u2014 "),FD=a("a"),OIo=o("XLNetForQuestionAnsweringSimple"),VIo=o(" (XLNet model)"),XIo=l(),oT=a("li"),xce=a("strong"),zIo=o("yoso"),QIo=o(" \u2014 "),vD=a("a"),WIo=o("YosoForQuestionAnswering"),HIo=o(" (YOSO model)"),UIo=l(),rT=a("p"),JIo=o("The model is set in evaluation mode by default using "),kce=a("code"),YIo=o("model.eval()"),KIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sce=a("code"),ZIo=o("model.train()"),eqo=l(),Rce=a("p"),oqo=o("Examples:"),rqo=l(),m(h6.$$.fragment),RRe=l(),Ad=a("h2"),tT=a("a"),Bce=a("span"),m(u6.$$.fragment),tqo=l(),Pce=a("span"),aqo=o("AutoModelForTableQuestionAnswering"),BRe=l(),sr=a("div"),m(p6.$$.fragment),nqo=l(),yd=a("p"),sqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),TD=a("a"),lqo=o("from_pretrained()"),iqo=o(" class method or the "),MD=a("a"),dqo=o("from_config()"),cqo=o(` class
method.`),mqo=l(),_6=a("p"),fqo=o("This class cannot be instantiated directly using "),$ce=a("code"),gqo=o("__init__()"),hqo=o(" (throws an error)."),uqo=l(),et=a("div"),m(b6.$$.fragment),pqo=l(),Ice=a("p"),_qo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),bqo=l(),Ld=a("p"),Fqo=o(`Note:
Loading a model from its configuration file does `),qce=a("strong"),vqo=o("not"),Tqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ED=a("a"),Mqo=o("from_pretrained()"),Eqo=o(" to load the model weights."),Cqo=l(),Nce=a("p"),wqo=o("Examples:"),Aqo=l(),m(F6.$$.fragment),yqo=l(),We=a("div"),m(v6.$$.fragment),Lqo=l(),jce=a("p"),xqo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),kqo=l(),en=a("p"),Sqo=o("The model class to instantiate is selected based on the "),Dce=a("code"),Rqo=o("model_type"),Bqo=o(` property of the config object (either
passed as an argument or loaded from `),Gce=a("code"),Pqo=o("pretrained_model_name_or_path"),$qo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oce=a("code"),Iqo=o("pretrained_model_name_or_path"),qqo=o(":"),Nqo=l(),Vce=a("ul"),aT=a("li"),Xce=a("strong"),jqo=o("tapas"),Dqo=o(" \u2014 "),CD=a("a"),Gqo=o("TapasForQuestionAnswering"),Oqo=o(" (TAPAS model)"),Vqo=l(),nT=a("p"),Xqo=o("The model is set in evaluation mode by default using "),zce=a("code"),zqo=o("model.eval()"),Qqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qce=a("code"),Wqo=o("model.train()"),Hqo=l(),Wce=a("p"),Uqo=o("Examples:"),Jqo=l(),m(T6.$$.fragment),PRe=l(),xd=a("h2"),sT=a("a"),Hce=a("span"),m(M6.$$.fragment),Yqo=l(),Uce=a("span"),Kqo=o("AutoModelForImageClassification"),$Re=l(),lr=a("div"),m(E6.$$.fragment),Zqo=l(),kd=a("p"),eNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wD=a("a"),oNo=o("from_pretrained()"),rNo=o(" class method or the "),AD=a("a"),tNo=o("from_config()"),aNo=o(` class
method.`),nNo=l(),C6=a("p"),sNo=o("This class cannot be instantiated directly using "),Jce=a("code"),lNo=o("__init__()"),iNo=o(" (throws an error)."),dNo=l(),ot=a("div"),m(w6.$$.fragment),cNo=l(),Yce=a("p"),mNo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),fNo=l(),Sd=a("p"),gNo=o(`Note:
Loading a model from its configuration file does `),Kce=a("strong"),hNo=o("not"),uNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yD=a("a"),pNo=o("from_pretrained()"),_No=o(" to load the model weights."),bNo=l(),Zce=a("p"),FNo=o("Examples:"),vNo=l(),m(A6.$$.fragment),TNo=l(),He=a("div"),m(y6.$$.fragment),MNo=l(),eme=a("p"),ENo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),CNo=l(),on=a("p"),wNo=o("The model class to instantiate is selected based on the "),ome=a("code"),ANo=o("model_type"),yNo=o(` property of the config object (either
passed as an argument or loaded from `),rme=a("code"),LNo=o("pretrained_model_name_or_path"),xNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tme=a("code"),kNo=o("pretrained_model_name_or_path"),SNo=o(":"),RNo=l(),ce=a("ul"),lT=a("li"),ame=a("strong"),BNo=o("beit"),PNo=o(" \u2014 "),LD=a("a"),$No=o("BeitForImageClassification"),INo=o(" (BEiT model)"),qNo=l(),iT=a("li"),nme=a("strong"),NNo=o("convnext"),jNo=o(" \u2014 "),xD=a("a"),DNo=o("ConvNextForImageClassification"),GNo=o(" (ConvNext model)"),ONo=l(),Ds=a("li"),sme=a("strong"),VNo=o("deit"),XNo=o(" \u2014 "),kD=a("a"),zNo=o("DeiTForImageClassification"),QNo=o(" or "),SD=a("a"),WNo=o("DeiTForImageClassificationWithTeacher"),HNo=o(" (DeiT model)"),UNo=l(),dT=a("li"),lme=a("strong"),JNo=o("imagegpt"),YNo=o(" \u2014 "),RD=a("a"),KNo=o("ImageGPTForImageClassification"),ZNo=o(" (ImageGPT model)"),ejo=l(),fa=a("li"),ime=a("strong"),ojo=o("perceiver"),rjo=o(" \u2014 "),BD=a("a"),tjo=o("PerceiverForImageClassificationLearned"),ajo=o(" or "),PD=a("a"),njo=o("PerceiverForImageClassificationFourier"),sjo=o(" or "),$D=a("a"),ljo=o("PerceiverForImageClassificationConvProcessing"),ijo=o(" (Perceiver model)"),djo=l(),cT=a("li"),dme=a("strong"),cjo=o("poolformer"),mjo=o(" \u2014 "),ID=a("a"),fjo=o("PoolFormerForImageClassification"),gjo=o(" (PoolFormer model)"),hjo=l(),mT=a("li"),cme=a("strong"),ujo=o("regnet"),pjo=o(" \u2014 "),qD=a("a"),_jo=o("RegNetForImageClassification"),bjo=o(" (RegNet model)"),Fjo=l(),fT=a("li"),mme=a("strong"),vjo=o("resnet"),Tjo=o(" \u2014 "),ND=a("a"),Mjo=o("ResNetForImageClassification"),Ejo=o(" (ResNet model)"),Cjo=l(),gT=a("li"),fme=a("strong"),wjo=o("segformer"),Ajo=o(" \u2014 "),jD=a("a"),yjo=o("SegformerForImageClassification"),Ljo=o(" (SegFormer model)"),xjo=l(),hT=a("li"),gme=a("strong"),kjo=o("swin"),Sjo=o(" \u2014 "),DD=a("a"),Rjo=o("SwinForImageClassification"),Bjo=o(" (Swin model)"),Pjo=l(),uT=a("li"),hme=a("strong"),$jo=o("van"),Ijo=o(" \u2014 "),GD=a("a"),qjo=o("VanForImageClassification"),Njo=o(" (VAN model)"),jjo=l(),pT=a("li"),ume=a("strong"),Djo=o("vit"),Gjo=o(" \u2014 "),OD=a("a"),Ojo=o("ViTForImageClassification"),Vjo=o(" (ViT model)"),Xjo=l(),_T=a("p"),zjo=o("The model is set in evaluation mode by default using "),pme=a("code"),Qjo=o("model.eval()"),Wjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_me=a("code"),Hjo=o("model.train()"),Ujo=l(),bme=a("p"),Jjo=o("Examples:"),Yjo=l(),m(L6.$$.fragment),IRe=l(),Rd=a("h2"),bT=a("a"),Fme=a("span"),m(x6.$$.fragment),Kjo=l(),vme=a("span"),Zjo=o("AutoModelForVision2Seq"),qRe=l(),ir=a("div"),m(k6.$$.fragment),eDo=l(),Bd=a("p"),oDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),VD=a("a"),rDo=o("from_pretrained()"),tDo=o(" class method or the "),XD=a("a"),aDo=o("from_config()"),nDo=o(` class
method.`),sDo=l(),S6=a("p"),lDo=o("This class cannot be instantiated directly using "),Tme=a("code"),iDo=o("__init__()"),dDo=o(" (throws an error)."),cDo=l(),rt=a("div"),m(R6.$$.fragment),mDo=l(),Mme=a("p"),fDo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),gDo=l(),Pd=a("p"),hDo=o(`Note:
Loading a model from its configuration file does `),Eme=a("strong"),uDo=o("not"),pDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zD=a("a"),_Do=o("from_pretrained()"),bDo=o(" to load the model weights."),FDo=l(),Cme=a("p"),vDo=o("Examples:"),TDo=l(),m(B6.$$.fragment),MDo=l(),Ue=a("div"),m(P6.$$.fragment),EDo=l(),wme=a("p"),CDo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),wDo=l(),rn=a("p"),ADo=o("The model class to instantiate is selected based on the "),Ame=a("code"),yDo=o("model_type"),LDo=o(` property of the config object (either
passed as an argument or loaded from `),yme=a("code"),xDo=o("pretrained_model_name_or_path"),kDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lme=a("code"),SDo=o("pretrained_model_name_or_path"),RDo=o(":"),BDo=l(),xme=a("ul"),FT=a("li"),kme=a("strong"),PDo=o("vision-encoder-decoder"),$Do=o(" \u2014 "),QD=a("a"),IDo=o("VisionEncoderDecoderModel"),qDo=o(" (Vision Encoder decoder model)"),NDo=l(),vT=a("p"),jDo=o("The model is set in evaluation mode by default using "),Sme=a("code"),DDo=o("model.eval()"),GDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rme=a("code"),ODo=o("model.train()"),VDo=l(),Bme=a("p"),XDo=o("Examples:"),zDo=l(),m($6.$$.fragment),NRe=l(),$d=a("h2"),TT=a("a"),Pme=a("span"),m(I6.$$.fragment),QDo=l(),$me=a("span"),WDo=o("AutoModelForAudioClassification"),jRe=l(),dr=a("div"),m(q6.$$.fragment),HDo=l(),Id=a("p"),UDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),WD=a("a"),JDo=o("from_pretrained()"),YDo=o(" class method or the "),HD=a("a"),KDo=o("from_config()"),ZDo=o(` class
method.`),eGo=l(),N6=a("p"),oGo=o("This class cannot be instantiated directly using "),Ime=a("code"),rGo=o("__init__()"),tGo=o(" (throws an error)."),aGo=l(),tt=a("div"),m(j6.$$.fragment),nGo=l(),qme=a("p"),sGo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),lGo=l(),qd=a("p"),iGo=o(`Note:
Loading a model from its configuration file does `),Nme=a("strong"),dGo=o("not"),cGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UD=a("a"),mGo=o("from_pretrained()"),fGo=o(" to load the model weights."),gGo=l(),jme=a("p"),hGo=o("Examples:"),uGo=l(),m(D6.$$.fragment),pGo=l(),Je=a("div"),m(G6.$$.fragment),_Go=l(),Dme=a("p"),bGo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),FGo=l(),tn=a("p"),vGo=o("The model class to instantiate is selected based on the "),Gme=a("code"),TGo=o("model_type"),MGo=o(` property of the config object (either
passed as an argument or loaded from `),Ome=a("code"),EGo=o("pretrained_model_name_or_path"),CGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vme=a("code"),wGo=o("pretrained_model_name_or_path"),AGo=o(":"),yGo=l(),Se=a("ul"),MT=a("li"),Xme=a("strong"),LGo=o("data2vec-audio"),xGo=o(" \u2014 "),JD=a("a"),kGo=o("Data2VecAudioForSequenceClassification"),SGo=o(" (Data2VecAudio model)"),RGo=l(),ET=a("li"),zme=a("strong"),BGo=o("hubert"),PGo=o(" \u2014 "),YD=a("a"),$Go=o("HubertForSequenceClassification"),IGo=o(" (Hubert model)"),qGo=l(),CT=a("li"),Qme=a("strong"),NGo=o("sew"),jGo=o(" \u2014 "),KD=a("a"),DGo=o("SEWForSequenceClassification"),GGo=o(" (SEW model)"),OGo=l(),wT=a("li"),Wme=a("strong"),VGo=o("sew-d"),XGo=o(" \u2014 "),ZD=a("a"),zGo=o("SEWDForSequenceClassification"),QGo=o(" (SEW-D model)"),WGo=l(),AT=a("li"),Hme=a("strong"),HGo=o("unispeech"),UGo=o(" \u2014 "),eG=a("a"),JGo=o("UniSpeechForSequenceClassification"),YGo=o(" (UniSpeech model)"),KGo=l(),yT=a("li"),Ume=a("strong"),ZGo=o("unispeech-sat"),eOo=o(" \u2014 "),oG=a("a"),oOo=o("UniSpeechSatForSequenceClassification"),rOo=o(" (UniSpeechSat model)"),tOo=l(),LT=a("li"),Jme=a("strong"),aOo=o("wav2vec2"),nOo=o(" \u2014 "),rG=a("a"),sOo=o("Wav2Vec2ForSequenceClassification"),lOo=o(" (Wav2Vec2 model)"),iOo=l(),xT=a("li"),Yme=a("strong"),dOo=o("wavlm"),cOo=o(" \u2014 "),tG=a("a"),mOo=o("WavLMForSequenceClassification"),fOo=o(" (WavLM model)"),gOo=l(),kT=a("p"),hOo=o("The model is set in evaluation mode by default using "),Kme=a("code"),uOo=o("model.eval()"),pOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zme=a("code"),_Oo=o("model.train()"),bOo=l(),efe=a("p"),FOo=o("Examples:"),vOo=l(),m(O6.$$.fragment),DRe=l(),Nd=a("h2"),ST=a("a"),ofe=a("span"),m(V6.$$.fragment),TOo=l(),rfe=a("span"),MOo=o("AutoModelForAudioFrameClassification"),GRe=l(),cr=a("div"),m(X6.$$.fragment),EOo=l(),jd=a("p"),COo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),aG=a("a"),wOo=o("from_pretrained()"),AOo=o(" class method or the "),nG=a("a"),yOo=o("from_config()"),LOo=o(` class
method.`),xOo=l(),z6=a("p"),kOo=o("This class cannot be instantiated directly using "),tfe=a("code"),SOo=o("__init__()"),ROo=o(" (throws an error)."),BOo=l(),at=a("div"),m(Q6.$$.fragment),POo=l(),afe=a("p"),$Oo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),IOo=l(),Dd=a("p"),qOo=o(`Note:
Loading a model from its configuration file does `),nfe=a("strong"),NOo=o("not"),jOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sG=a("a"),DOo=o("from_pretrained()"),GOo=o(" to load the model weights."),OOo=l(),sfe=a("p"),VOo=o("Examples:"),XOo=l(),m(W6.$$.fragment),zOo=l(),Ye=a("div"),m(H6.$$.fragment),QOo=l(),lfe=a("p"),WOo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),HOo=l(),an=a("p"),UOo=o("The model class to instantiate is selected based on the "),ife=a("code"),JOo=o("model_type"),YOo=o(` property of the config object (either
passed as an argument or loaded from `),dfe=a("code"),KOo=o("pretrained_model_name_or_path"),ZOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cfe=a("code"),eVo=o("pretrained_model_name_or_path"),oVo=o(":"),rVo=l(),nn=a("ul"),RT=a("li"),mfe=a("strong"),tVo=o("data2vec-audio"),aVo=o(" \u2014 "),lG=a("a"),nVo=o("Data2VecAudioForAudioFrameClassification"),sVo=o(" (Data2VecAudio model)"),lVo=l(),BT=a("li"),ffe=a("strong"),iVo=o("unispeech-sat"),dVo=o(" \u2014 "),iG=a("a"),cVo=o("UniSpeechSatForAudioFrameClassification"),mVo=o(" (UniSpeechSat model)"),fVo=l(),PT=a("li"),gfe=a("strong"),gVo=o("wav2vec2"),hVo=o(" \u2014 "),dG=a("a"),uVo=o("Wav2Vec2ForAudioFrameClassification"),pVo=o(" (Wav2Vec2 model)"),_Vo=l(),$T=a("li"),hfe=a("strong"),bVo=o("wavlm"),FVo=o(" \u2014 "),cG=a("a"),vVo=o("WavLMForAudioFrameClassification"),TVo=o(" (WavLM model)"),MVo=l(),IT=a("p"),EVo=o("The model is set in evaluation mode by default using "),ufe=a("code"),CVo=o("model.eval()"),wVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pfe=a("code"),AVo=o("model.train()"),yVo=l(),_fe=a("p"),LVo=o("Examples:"),xVo=l(),m(U6.$$.fragment),ORe=l(),Gd=a("h2"),qT=a("a"),bfe=a("span"),m(J6.$$.fragment),kVo=l(),Ffe=a("span"),SVo=o("AutoModelForCTC"),VRe=l(),mr=a("div"),m(Y6.$$.fragment),RVo=l(),Od=a("p"),BVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),mG=a("a"),PVo=o("from_pretrained()"),$Vo=o(" class method or the "),fG=a("a"),IVo=o("from_config()"),qVo=o(` class
method.`),NVo=l(),K6=a("p"),jVo=o("This class cannot be instantiated directly using "),vfe=a("code"),DVo=o("__init__()"),GVo=o(" (throws an error)."),OVo=l(),nt=a("div"),m(Z6.$$.fragment),VVo=l(),Tfe=a("p"),XVo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),zVo=l(),Vd=a("p"),QVo=o(`Note:
Loading a model from its configuration file does `),Mfe=a("strong"),WVo=o("not"),HVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gG=a("a"),UVo=o("from_pretrained()"),JVo=o(" to load the model weights."),YVo=l(),Efe=a("p"),KVo=o("Examples:"),ZVo=l(),m(e0.$$.fragment),eXo=l(),Ke=a("div"),m(o0.$$.fragment),oXo=l(),Cfe=a("p"),rXo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),tXo=l(),sn=a("p"),aXo=o("The model class to instantiate is selected based on the "),wfe=a("code"),nXo=o("model_type"),sXo=o(` property of the config object (either
passed as an argument or loaded from `),Afe=a("code"),lXo=o("pretrained_model_name_or_path"),iXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yfe=a("code"),dXo=o("pretrained_model_name_or_path"),cXo=o(":"),mXo=l(),Re=a("ul"),NT=a("li"),Lfe=a("strong"),fXo=o("data2vec-audio"),gXo=o(" \u2014 "),hG=a("a"),hXo=o("Data2VecAudioForCTC"),uXo=o(" (Data2VecAudio model)"),pXo=l(),jT=a("li"),xfe=a("strong"),_Xo=o("hubert"),bXo=o(" \u2014 "),uG=a("a"),FXo=o("HubertForCTC"),vXo=o(" (Hubert model)"),TXo=l(),DT=a("li"),kfe=a("strong"),MXo=o("sew"),EXo=o(" \u2014 "),pG=a("a"),CXo=o("SEWForCTC"),wXo=o(" (SEW model)"),AXo=l(),GT=a("li"),Sfe=a("strong"),yXo=o("sew-d"),LXo=o(" \u2014 "),_G=a("a"),xXo=o("SEWDForCTC"),kXo=o(" (SEW-D model)"),SXo=l(),OT=a("li"),Rfe=a("strong"),RXo=o("unispeech"),BXo=o(" \u2014 "),bG=a("a"),PXo=o("UniSpeechForCTC"),$Xo=o(" (UniSpeech model)"),IXo=l(),VT=a("li"),Bfe=a("strong"),qXo=o("unispeech-sat"),NXo=o(" \u2014 "),FG=a("a"),jXo=o("UniSpeechSatForCTC"),DXo=o(" (UniSpeechSat model)"),GXo=l(),XT=a("li"),Pfe=a("strong"),OXo=o("wav2vec2"),VXo=o(" \u2014 "),vG=a("a"),XXo=o("Wav2Vec2ForCTC"),zXo=o(" (Wav2Vec2 model)"),QXo=l(),zT=a("li"),$fe=a("strong"),WXo=o("wavlm"),HXo=o(" \u2014 "),TG=a("a"),UXo=o("WavLMForCTC"),JXo=o(" (WavLM model)"),YXo=l(),QT=a("p"),KXo=o("The model is set in evaluation mode by default using "),Ife=a("code"),ZXo=o("model.eval()"),ezo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qfe=a("code"),ozo=o("model.train()"),rzo=l(),Nfe=a("p"),tzo=o("Examples:"),azo=l(),m(r0.$$.fragment),XRe=l(),Xd=a("h2"),WT=a("a"),jfe=a("span"),m(t0.$$.fragment),nzo=l(),Dfe=a("span"),szo=o("AutoModelForSpeechSeq2Seq"),zRe=l(),fr=a("div"),m(a0.$$.fragment),lzo=l(),zd=a("p"),izo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),MG=a("a"),dzo=o("from_pretrained()"),czo=o(" class method or the "),EG=a("a"),mzo=o("from_config()"),fzo=o(` class
method.`),gzo=l(),n0=a("p"),hzo=o("This class cannot be instantiated directly using "),Gfe=a("code"),uzo=o("__init__()"),pzo=o(" (throws an error)."),_zo=l(),st=a("div"),m(s0.$$.fragment),bzo=l(),Ofe=a("p"),Fzo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),vzo=l(),Qd=a("p"),Tzo=o(`Note:
Loading a model from its configuration file does `),Vfe=a("strong"),Mzo=o("not"),Ezo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CG=a("a"),Czo=o("from_pretrained()"),wzo=o(" to load the model weights."),Azo=l(),Xfe=a("p"),yzo=o("Examples:"),Lzo=l(),m(l0.$$.fragment),xzo=l(),Ze=a("div"),m(i0.$$.fragment),kzo=l(),zfe=a("p"),Szo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Rzo=l(),ln=a("p"),Bzo=o("The model class to instantiate is selected based on the "),Qfe=a("code"),Pzo=o("model_type"),$zo=o(` property of the config object (either
passed as an argument or loaded from `),Wfe=a("code"),Izo=o("pretrained_model_name_or_path"),qzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hfe=a("code"),Nzo=o("pretrained_model_name_or_path"),jzo=o(":"),Dzo=l(),d0=a("ul"),HT=a("li"),Ufe=a("strong"),Gzo=o("speech-encoder-decoder"),Ozo=o(" \u2014 "),wG=a("a"),Vzo=o("SpeechEncoderDecoderModel"),Xzo=o(" (Speech Encoder decoder model)"),zzo=l(),UT=a("li"),Jfe=a("strong"),Qzo=o("speech_to_text"),Wzo=o(" \u2014 "),AG=a("a"),Hzo=o("Speech2TextForConditionalGeneration"),Uzo=o(" (Speech2Text model)"),Jzo=l(),JT=a("p"),Yzo=o("The model is set in evaluation mode by default using "),Yfe=a("code"),Kzo=o("model.eval()"),Zzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kfe=a("code"),eQo=o("model.train()"),oQo=l(),Zfe=a("p"),rQo=o("Examples:"),tQo=l(),m(c0.$$.fragment),QRe=l(),Wd=a("h2"),YT=a("a"),ege=a("span"),m(m0.$$.fragment),aQo=l(),oge=a("span"),nQo=o("AutoModelForAudioXVector"),WRe=l(),gr=a("div"),m(f0.$$.fragment),sQo=l(),Hd=a("p"),lQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),yG=a("a"),iQo=o("from_pretrained()"),dQo=o(" class method or the "),LG=a("a"),cQo=o("from_config()"),mQo=o(` class
method.`),fQo=l(),g0=a("p"),gQo=o("This class cannot be instantiated directly using "),rge=a("code"),hQo=o("__init__()"),uQo=o(" (throws an error)."),pQo=l(),lt=a("div"),m(h0.$$.fragment),_Qo=l(),tge=a("p"),bQo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),FQo=l(),Ud=a("p"),vQo=o(`Note:
Loading a model from its configuration file does `),age=a("strong"),TQo=o("not"),MQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xG=a("a"),EQo=o("from_pretrained()"),CQo=o(" to load the model weights."),wQo=l(),nge=a("p"),AQo=o("Examples:"),yQo=l(),m(u0.$$.fragment),LQo=l(),eo=a("div"),m(p0.$$.fragment),xQo=l(),sge=a("p"),kQo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),SQo=l(),dn=a("p"),RQo=o("The model class to instantiate is selected based on the "),lge=a("code"),BQo=o("model_type"),PQo=o(` property of the config object (either
passed as an argument or loaded from `),ige=a("code"),$Qo=o("pretrained_model_name_or_path"),IQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dge=a("code"),qQo=o("pretrained_model_name_or_path"),NQo=o(":"),jQo=l(),cn=a("ul"),KT=a("li"),cge=a("strong"),DQo=o("data2vec-audio"),GQo=o(" \u2014 "),kG=a("a"),OQo=o("Data2VecAudioForXVector"),VQo=o(" (Data2VecAudio model)"),XQo=l(),ZT=a("li"),mge=a("strong"),zQo=o("unispeech-sat"),QQo=o(" \u2014 "),SG=a("a"),WQo=o("UniSpeechSatForXVector"),HQo=o(" (UniSpeechSat model)"),UQo=l(),e1=a("li"),fge=a("strong"),JQo=o("wav2vec2"),YQo=o(" \u2014 "),RG=a("a"),KQo=o("Wav2Vec2ForXVector"),ZQo=o(" (Wav2Vec2 model)"),eWo=l(),o1=a("li"),gge=a("strong"),oWo=o("wavlm"),rWo=o(" \u2014 "),BG=a("a"),tWo=o("WavLMForXVector"),aWo=o(" (WavLM model)"),nWo=l(),r1=a("p"),sWo=o("The model is set in evaluation mode by default using "),hge=a("code"),lWo=o("model.eval()"),iWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uge=a("code"),dWo=o("model.train()"),cWo=l(),pge=a("p"),mWo=o("Examples:"),fWo=l(),m(_0.$$.fragment),HRe=l(),Jd=a("h2"),t1=a("a"),_ge=a("span"),m(b0.$$.fragment),gWo=l(),bge=a("span"),hWo=o("AutoModelForMaskedImageModeling"),URe=l(),hr=a("div"),m(F0.$$.fragment),uWo=l(),Yd=a("p"),pWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),PG=a("a"),_Wo=o("from_pretrained()"),bWo=o(" class method or the "),$G=a("a"),FWo=o("from_config()"),vWo=o(` class
method.`),TWo=l(),v0=a("p"),MWo=o("This class cannot be instantiated directly using "),Fge=a("code"),EWo=o("__init__()"),CWo=o(" (throws an error)."),wWo=l(),it=a("div"),m(T0.$$.fragment),AWo=l(),vge=a("p"),yWo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),LWo=l(),Kd=a("p"),xWo=o(`Note:
Loading a model from its configuration file does `),Tge=a("strong"),kWo=o("not"),SWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IG=a("a"),RWo=o("from_pretrained()"),BWo=o(" to load the model weights."),PWo=l(),Mge=a("p"),$Wo=o("Examples:"),IWo=l(),m(M0.$$.fragment),qWo=l(),oo=a("div"),m(E0.$$.fragment),NWo=l(),Ege=a("p"),jWo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),DWo=l(),mn=a("p"),GWo=o("The model class to instantiate is selected based on the "),Cge=a("code"),OWo=o("model_type"),VWo=o(` property of the config object (either
passed as an argument or loaded from `),wge=a("code"),XWo=o("pretrained_model_name_or_path"),zWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Age=a("code"),QWo=o("pretrained_model_name_or_path"),WWo=o(":"),HWo=l(),Zd=a("ul"),a1=a("li"),yge=a("strong"),UWo=o("deit"),JWo=o(" \u2014 "),qG=a("a"),YWo=o("DeiTForMaskedImageModeling"),KWo=o(" (DeiT model)"),ZWo=l(),n1=a("li"),Lge=a("strong"),eHo=o("swin"),oHo=o(" \u2014 "),NG=a("a"),rHo=o("SwinForMaskedImageModeling"),tHo=o(" (Swin model)"),aHo=l(),s1=a("li"),xge=a("strong"),nHo=o("vit"),sHo=o(" \u2014 "),jG=a("a"),lHo=o("ViTForMaskedImageModeling"),iHo=o(" (ViT model)"),dHo=l(),l1=a("p"),cHo=o("The model is set in evaluation mode by default using "),kge=a("code"),mHo=o("model.eval()"),fHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sge=a("code"),gHo=o("model.train()"),hHo=l(),Rge=a("p"),uHo=o("Examples:"),pHo=l(),m(C0.$$.fragment),JRe=l(),ec=a("h2"),i1=a("a"),Bge=a("span"),m(w0.$$.fragment),_Ho=l(),Pge=a("span"),bHo=o("AutoModelForObjectDetection"),YRe=l(),ur=a("div"),m(A0.$$.fragment),FHo=l(),oc=a("p"),vHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),DG=a("a"),THo=o("from_pretrained()"),MHo=o(" class method or the "),GG=a("a"),EHo=o("from_config()"),CHo=o(` class
method.`),wHo=l(),y0=a("p"),AHo=o("This class cannot be instantiated directly using "),$ge=a("code"),yHo=o("__init__()"),LHo=o(" (throws an error)."),xHo=l(),dt=a("div"),m(L0.$$.fragment),kHo=l(),Ige=a("p"),SHo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),RHo=l(),rc=a("p"),BHo=o(`Note:
Loading a model from its configuration file does `),qge=a("strong"),PHo=o("not"),$Ho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OG=a("a"),IHo=o("from_pretrained()"),qHo=o(" to load the model weights."),NHo=l(),Nge=a("p"),jHo=o("Examples:"),DHo=l(),m(x0.$$.fragment),GHo=l(),ro=a("div"),m(k0.$$.fragment),OHo=l(),jge=a("p"),VHo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),XHo=l(),fn=a("p"),zHo=o("The model class to instantiate is selected based on the "),Dge=a("code"),QHo=o("model_type"),WHo=o(` property of the config object (either
passed as an argument or loaded from `),Gge=a("code"),HHo=o("pretrained_model_name_or_path"),UHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oge=a("code"),JHo=o("pretrained_model_name_or_path"),YHo=o(":"),KHo=l(),Vge=a("ul"),d1=a("li"),Xge=a("strong"),ZHo=o("detr"),eUo=o(" \u2014 "),VG=a("a"),oUo=o("DetrForObjectDetection"),rUo=o(" (DETR model)"),tUo=l(),c1=a("p"),aUo=o("The model is set in evaluation mode by default using "),zge=a("code"),nUo=o("model.eval()"),sUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qge=a("code"),lUo=o("model.train()"),iUo=l(),Wge=a("p"),dUo=o("Examples:"),cUo=l(),m(S0.$$.fragment),KRe=l(),tc=a("h2"),m1=a("a"),Hge=a("span"),m(R0.$$.fragment),mUo=l(),Uge=a("span"),fUo=o("AutoModelForImageSegmentation"),ZRe=l(),pr=a("div"),m(B0.$$.fragment),gUo=l(),ac=a("p"),hUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),XG=a("a"),uUo=o("from_pretrained()"),pUo=o(" class method or the "),zG=a("a"),_Uo=o("from_config()"),bUo=o(` class
method.`),FUo=l(),P0=a("p"),vUo=o("This class cannot be instantiated directly using "),Jge=a("code"),TUo=o("__init__()"),MUo=o(" (throws an error)."),EUo=l(),ct=a("div"),m($0.$$.fragment),CUo=l(),Yge=a("p"),wUo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),AUo=l(),nc=a("p"),yUo=o(`Note:
Loading a model from its configuration file does `),Kge=a("strong"),LUo=o("not"),xUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QG=a("a"),kUo=o("from_pretrained()"),SUo=o(" to load the model weights."),RUo=l(),Zge=a("p"),BUo=o("Examples:"),PUo=l(),m(I0.$$.fragment),$Uo=l(),to=a("div"),m(q0.$$.fragment),IUo=l(),ehe=a("p"),qUo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),NUo=l(),gn=a("p"),jUo=o("The model class to instantiate is selected based on the "),ohe=a("code"),DUo=o("model_type"),GUo=o(` property of the config object (either
passed as an argument or loaded from `),rhe=a("code"),OUo=o("pretrained_model_name_or_path"),VUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),the=a("code"),XUo=o("pretrained_model_name_or_path"),zUo=o(":"),QUo=l(),ahe=a("ul"),f1=a("li"),nhe=a("strong"),WUo=o("detr"),HUo=o(" \u2014 "),WG=a("a"),UUo=o("DetrForSegmentation"),JUo=o(" (DETR model)"),YUo=l(),g1=a("p"),KUo=o("The model is set in evaluation mode by default using "),she=a("code"),ZUo=o("model.eval()"),eJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=a("code"),oJo=o("model.train()"),rJo=l(),ihe=a("p"),tJo=o("Examples:"),aJo=l(),m(N0.$$.fragment),eBe=l(),sc=a("h2"),h1=a("a"),dhe=a("span"),m(j0.$$.fragment),nJo=l(),che=a("span"),sJo=o("AutoModelForSemanticSegmentation"),oBe=l(),_r=a("div"),m(D0.$$.fragment),lJo=l(),lc=a("p"),iJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),HG=a("a"),dJo=o("from_pretrained()"),cJo=o(" class method or the "),UG=a("a"),mJo=o("from_config()"),fJo=o(` class
method.`),gJo=l(),G0=a("p"),hJo=o("This class cannot be instantiated directly using "),mhe=a("code"),uJo=o("__init__()"),pJo=o(" (throws an error)."),_Jo=l(),mt=a("div"),m(O0.$$.fragment),bJo=l(),fhe=a("p"),FJo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),vJo=l(),ic=a("p"),TJo=o(`Note:
Loading a model from its configuration file does `),ghe=a("strong"),MJo=o("not"),EJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=a("a"),CJo=o("from_pretrained()"),wJo=o(" to load the model weights."),AJo=l(),hhe=a("p"),yJo=o("Examples:"),LJo=l(),m(V0.$$.fragment),xJo=l(),ao=a("div"),m(X0.$$.fragment),kJo=l(),uhe=a("p"),SJo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),RJo=l(),hn=a("p"),BJo=o("The model class to instantiate is selected based on the "),phe=a("code"),PJo=o("model_type"),$Jo=o(` property of the config object (either
passed as an argument or loaded from `),_he=a("code"),IJo=o("pretrained_model_name_or_path"),qJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bhe=a("code"),NJo=o("pretrained_model_name_or_path"),jJo=o(":"),DJo=l(),dc=a("ul"),u1=a("li"),Fhe=a("strong"),GJo=o("beit"),OJo=o(" \u2014 "),YG=a("a"),VJo=o("BeitForSemanticSegmentation"),XJo=o(" (BEiT model)"),zJo=l(),p1=a("li"),vhe=a("strong"),QJo=o("dpt"),WJo=o(" \u2014 "),KG=a("a"),HJo=o("DPTForSemanticSegmentation"),UJo=o(" (DPT model)"),JJo=l(),_1=a("li"),The=a("strong"),YJo=o("segformer"),KJo=o(" \u2014 "),ZG=a("a"),ZJo=o("SegformerForSemanticSegmentation"),eYo=o(" (SegFormer model)"),oYo=l(),b1=a("p"),rYo=o("The model is set in evaluation mode by default using "),Mhe=a("code"),tYo=o("model.eval()"),aYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ehe=a("code"),nYo=o("model.train()"),sYo=l(),Che=a("p"),lYo=o("Examples:"),iYo=l(),m(z0.$$.fragment),rBe=l(),cc=a("h2"),F1=a("a"),whe=a("span"),m(Q0.$$.fragment),dYo=l(),Ahe=a("span"),cYo=o("AutoModelForInstanceSegmentation"),tBe=l(),br=a("div"),m(W0.$$.fragment),mYo=l(),mc=a("p"),fYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),eO=a("a"),gYo=o("from_pretrained()"),hYo=o(" class method or the "),oO=a("a"),uYo=o("from_config()"),pYo=o(` class
method.`),_Yo=l(),H0=a("p"),bYo=o("This class cannot be instantiated directly using "),yhe=a("code"),FYo=o("__init__()"),vYo=o(" (throws an error)."),TYo=l(),ft=a("div"),m(U0.$$.fragment),MYo=l(),Lhe=a("p"),EYo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),CYo=l(),fc=a("p"),wYo=o(`Note:
Loading a model from its configuration file does `),xhe=a("strong"),AYo=o("not"),yYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rO=a("a"),LYo=o("from_pretrained()"),xYo=o(" to load the model weights."),kYo=l(),khe=a("p"),SYo=o("Examples:"),RYo=l(),m(J0.$$.fragment),BYo=l(),no=a("div"),m(Y0.$$.fragment),PYo=l(),She=a("p"),$Yo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),IYo=l(),un=a("p"),qYo=o("The model class to instantiate is selected based on the "),Rhe=a("code"),NYo=o("model_type"),jYo=o(` property of the config object (either
passed as an argument or loaded from `),Bhe=a("code"),DYo=o("pretrained_model_name_or_path"),GYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Phe=a("code"),OYo=o("pretrained_model_name_or_path"),VYo=o(":"),XYo=l(),$he=a("ul"),v1=a("li"),Ihe=a("strong"),zYo=o("maskformer"),QYo=o(" \u2014 "),tO=a("a"),WYo=o("MaskFormerForInstanceSegmentation"),HYo=o(" (MaskFormer model)"),UYo=l(),T1=a("p"),JYo=o("The model is set in evaluation mode by default using "),qhe=a("code"),YYo=o("model.eval()"),KYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nhe=a("code"),ZYo=o("model.train()"),eKo=l(),jhe=a("p"),oKo=o("Examples:"),rKo=l(),m(K0.$$.fragment),aBe=l(),gc=a("h2"),M1=a("a"),Dhe=a("span"),m(Z0.$$.fragment),tKo=l(),Ghe=a("span"),aKo=o("TFAutoModel"),nBe=l(),Fr=a("div"),m(ey.$$.fragment),nKo=l(),hc=a("p"),sKo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aO=a("a"),lKo=o("from_pretrained()"),iKo=o(" class method or the "),nO=a("a"),dKo=o("from_config()"),cKo=o(` class
method.`),mKo=l(),oy=a("p"),fKo=o("This class cannot be instantiated directly using "),Ohe=a("code"),gKo=o("__init__()"),hKo=o(" (throws an error)."),uKo=l(),gt=a("div"),m(ry.$$.fragment),pKo=l(),Vhe=a("p"),_Ko=o("Instantiates one of the base model classes of the library from a configuration."),bKo=l(),uc=a("p"),FKo=o(`Note:
Loading a model from its configuration file does `),Xhe=a("strong"),vKo=o("not"),TKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sO=a("a"),MKo=o("from_pretrained()"),EKo=o(" to load the model weights."),CKo=l(),zhe=a("p"),wKo=o("Examples:"),AKo=l(),m(ty.$$.fragment),yKo=l(),ho=a("div"),m(ay.$$.fragment),LKo=l(),Qhe=a("p"),xKo=o("Instantiate one of the base model classes of the library from a pretrained model."),kKo=l(),pn=a("p"),SKo=o("The model class to instantiate is selected based on the "),Whe=a("code"),RKo=o("model_type"),BKo=o(` property of the config object (either
passed as an argument or loaded from `),Hhe=a("code"),PKo=o("pretrained_model_name_or_path"),$Ko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=a("code"),IKo=o("pretrained_model_name_or_path"),qKo=o(":"),NKo=l(),x=a("ul"),E1=a("li"),Jhe=a("strong"),jKo=o("albert"),DKo=o(" \u2014 "),lO=a("a"),GKo=o("TFAlbertModel"),OKo=o(" (ALBERT model)"),VKo=l(),C1=a("li"),Yhe=a("strong"),XKo=o("bart"),zKo=o(" \u2014 "),iO=a("a"),QKo=o("TFBartModel"),WKo=o(" (BART model)"),HKo=l(),w1=a("li"),Khe=a("strong"),UKo=o("bert"),JKo=o(" \u2014 "),dO=a("a"),YKo=o("TFBertModel"),KKo=o(" (BERT model)"),ZKo=l(),A1=a("li"),Zhe=a("strong"),eZo=o("blenderbot"),oZo=o(" \u2014 "),cO=a("a"),rZo=o("TFBlenderbotModel"),tZo=o(" (Blenderbot model)"),aZo=l(),y1=a("li"),eue=a("strong"),nZo=o("blenderbot-small"),sZo=o(" \u2014 "),mO=a("a"),lZo=o("TFBlenderbotSmallModel"),iZo=o(" (BlenderbotSmall model)"),dZo=l(),L1=a("li"),oue=a("strong"),cZo=o("camembert"),mZo=o(" \u2014 "),fO=a("a"),fZo=o("TFCamembertModel"),gZo=o(" (CamemBERT model)"),hZo=l(),x1=a("li"),rue=a("strong"),uZo=o("clip"),pZo=o(" \u2014 "),gO=a("a"),_Zo=o("TFCLIPModel"),bZo=o(" (CLIP model)"),FZo=l(),k1=a("li"),tue=a("strong"),vZo=o("convbert"),TZo=o(" \u2014 "),hO=a("a"),MZo=o("TFConvBertModel"),EZo=o(" (ConvBERT model)"),CZo=l(),S1=a("li"),aue=a("strong"),wZo=o("convnext"),AZo=o(" \u2014 "),uO=a("a"),yZo=o("TFConvNextModel"),LZo=o(" (ConvNext model)"),xZo=l(),R1=a("li"),nue=a("strong"),kZo=o("ctrl"),SZo=o(" \u2014 "),pO=a("a"),RZo=o("TFCTRLModel"),BZo=o(" (CTRL model)"),PZo=l(),B1=a("li"),sue=a("strong"),$Zo=o("deberta"),IZo=o(" \u2014 "),_O=a("a"),qZo=o("TFDebertaModel"),NZo=o(" (DeBERTa model)"),jZo=l(),P1=a("li"),lue=a("strong"),DZo=o("deberta-v2"),GZo=o(" \u2014 "),bO=a("a"),OZo=o("TFDebertaV2Model"),VZo=o(" (DeBERTa-v2 model)"),XZo=l(),$1=a("li"),iue=a("strong"),zZo=o("distilbert"),QZo=o(" \u2014 "),FO=a("a"),WZo=o("TFDistilBertModel"),HZo=o(" (DistilBERT model)"),UZo=l(),I1=a("li"),due=a("strong"),JZo=o("dpr"),YZo=o(" \u2014 "),vO=a("a"),KZo=o("TFDPRQuestionEncoder"),ZZo=o(" (DPR model)"),eer=l(),q1=a("li"),cue=a("strong"),oer=o("electra"),rer=o(" \u2014 "),TO=a("a"),ter=o("TFElectraModel"),aer=o(" (ELECTRA model)"),ner=l(),N1=a("li"),mue=a("strong"),ser=o("flaubert"),ler=o(" \u2014 "),MO=a("a"),ier=o("TFFlaubertModel"),der=o(" (FlauBERT model)"),cer=l(),Gs=a("li"),fue=a("strong"),mer=o("funnel"),fer=o(" \u2014 "),EO=a("a"),ger=o("TFFunnelModel"),her=o(" or "),CO=a("a"),uer=o("TFFunnelBaseModel"),per=o(" (Funnel Transformer model)"),_er=l(),j1=a("li"),gue=a("strong"),ber=o("gpt2"),Fer=o(" \u2014 "),wO=a("a"),ver=o("TFGPT2Model"),Ter=o(" (OpenAI GPT-2 model)"),Mer=l(),D1=a("li"),hue=a("strong"),Eer=o("gptj"),Cer=o(" \u2014 "),AO=a("a"),wer=o("TFGPTJModel"),Aer=o(" (GPT-J model)"),yer=l(),G1=a("li"),uue=a("strong"),Ler=o("hubert"),xer=o(" \u2014 "),yO=a("a"),ker=o("TFHubertModel"),Ser=o(" (Hubert model)"),Rer=l(),O1=a("li"),pue=a("strong"),Ber=o("layoutlm"),Per=o(" \u2014 "),LO=a("a"),$er=o("TFLayoutLMModel"),Ier=o(" (LayoutLM model)"),qer=l(),V1=a("li"),_ue=a("strong"),Ner=o("led"),jer=o(" \u2014 "),xO=a("a"),Der=o("TFLEDModel"),Ger=o(" (LED model)"),Oer=l(),X1=a("li"),bue=a("strong"),Ver=o("longformer"),Xer=o(" \u2014 "),kO=a("a"),zer=o("TFLongformerModel"),Qer=o(" (Longformer model)"),Wer=l(),z1=a("li"),Fue=a("strong"),Her=o("lxmert"),Uer=o(" \u2014 "),SO=a("a"),Jer=o("TFLxmertModel"),Yer=o(" (LXMERT model)"),Ker=l(),Q1=a("li"),vue=a("strong"),Zer=o("marian"),eor=o(" \u2014 "),RO=a("a"),oor=o("TFMarianModel"),ror=o(" (Marian model)"),tor=l(),W1=a("li"),Tue=a("strong"),aor=o("mbart"),nor=o(" \u2014 "),BO=a("a"),sor=o("TFMBartModel"),lor=o(" (mBART model)"),ior=l(),H1=a("li"),Mue=a("strong"),dor=o("mobilebert"),cor=o(" \u2014 "),PO=a("a"),mor=o("TFMobileBertModel"),gor=o(" (MobileBERT model)"),hor=l(),U1=a("li"),Eue=a("strong"),uor=o("mpnet"),por=o(" \u2014 "),$O=a("a"),_or=o("TFMPNetModel"),bor=o(" (MPNet model)"),For=l(),J1=a("li"),Cue=a("strong"),vor=o("mt5"),Tor=o(" \u2014 "),IO=a("a"),Mor=o("TFMT5Model"),Eor=o(" (mT5 model)"),Cor=l(),Y1=a("li"),wue=a("strong"),wor=o("openai-gpt"),Aor=o(" \u2014 "),qO=a("a"),yor=o("TFOpenAIGPTModel"),Lor=o(" (OpenAI GPT model)"),xor=l(),K1=a("li"),Aue=a("strong"),kor=o("pegasus"),Sor=o(" \u2014 "),NO=a("a"),Ror=o("TFPegasusModel"),Bor=o(" (Pegasus model)"),Por=l(),Z1=a("li"),yue=a("strong"),$or=o("rembert"),Ior=o(" \u2014 "),jO=a("a"),qor=o("TFRemBertModel"),Nor=o(" (RemBERT model)"),jor=l(),eM=a("li"),Lue=a("strong"),Dor=o("roberta"),Gor=o(" \u2014 "),DO=a("a"),Oor=o("TFRobertaModel"),Vor=o(" (RoBERTa model)"),Xor=l(),oM=a("li"),xue=a("strong"),zor=o("roformer"),Qor=o(" \u2014 "),GO=a("a"),Wor=o("TFRoFormerModel"),Hor=o(" (RoFormer model)"),Uor=l(),rM=a("li"),kue=a("strong"),Jor=o("speech_to_text"),Yor=o(" \u2014 "),OO=a("a"),Kor=o("TFSpeech2TextModel"),Zor=o(" (Speech2Text model)"),err=l(),tM=a("li"),Sue=a("strong"),orr=o("t5"),rrr=o(" \u2014 "),VO=a("a"),trr=o("TFT5Model"),arr=o(" (T5 model)"),nrr=l(),aM=a("li"),Rue=a("strong"),srr=o("tapas"),lrr=o(" \u2014 "),XO=a("a"),irr=o("TFTapasModel"),drr=o(" (TAPAS model)"),crr=l(),nM=a("li"),Bue=a("strong"),mrr=o("transfo-xl"),frr=o(" \u2014 "),zO=a("a"),grr=o("TFTransfoXLModel"),hrr=o(" (Transformer-XL model)"),urr=l(),sM=a("li"),Pue=a("strong"),prr=o("vit"),_rr=o(" \u2014 "),QO=a("a"),brr=o("TFViTModel"),Frr=o(" (ViT model)"),vrr=l(),lM=a("li"),$ue=a("strong"),Trr=o("vit_mae"),Mrr=o(" \u2014 "),WO=a("a"),Err=o("TFViTMAEModel"),Crr=o(" (ViTMAE model)"),wrr=l(),iM=a("li"),Iue=a("strong"),Arr=o("wav2vec2"),yrr=o(" \u2014 "),HO=a("a"),Lrr=o("TFWav2Vec2Model"),xrr=o(" (Wav2Vec2 model)"),krr=l(),dM=a("li"),que=a("strong"),Srr=o("xlm"),Rrr=o(" \u2014 "),UO=a("a"),Brr=o("TFXLMModel"),Prr=o(" (XLM model)"),$rr=l(),cM=a("li"),Nue=a("strong"),Irr=o("xlm-roberta"),qrr=o(" \u2014 "),JO=a("a"),Nrr=o("TFXLMRobertaModel"),jrr=o(" (XLM-RoBERTa model)"),Drr=l(),mM=a("li"),jue=a("strong"),Grr=o("xlnet"),Orr=o(" \u2014 "),YO=a("a"),Vrr=o("TFXLNetModel"),Xrr=o(" (XLNet model)"),zrr=l(),Due=a("p"),Qrr=o("Examples:"),Wrr=l(),m(ny.$$.fragment),sBe=l(),pc=a("h2"),fM=a("a"),Gue=a("span"),m(sy.$$.fragment),Hrr=l(),Oue=a("span"),Urr=o("TFAutoModelForPreTraining"),lBe=l(),vr=a("div"),m(ly.$$.fragment),Jrr=l(),_c=a("p"),Yrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),KO=a("a"),Krr=o("from_pretrained()"),Zrr=o(" class method or the "),ZO=a("a"),etr=o("from_config()"),otr=o(` class
method.`),rtr=l(),iy=a("p"),ttr=o("This class cannot be instantiated directly using "),Vue=a("code"),atr=o("__init__()"),ntr=o(" (throws an error)."),str=l(),ht=a("div"),m(dy.$$.fragment),ltr=l(),Xue=a("p"),itr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),dtr=l(),bc=a("p"),ctr=o(`Note:
Loading a model from its configuration file does `),zue=a("strong"),mtr=o("not"),ftr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eV=a("a"),gtr=o("from_pretrained()"),htr=o(" to load the model weights."),utr=l(),Que=a("p"),ptr=o("Examples:"),_tr=l(),m(cy.$$.fragment),btr=l(),uo=a("div"),m(my.$$.fragment),Ftr=l(),Wue=a("p"),vtr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ttr=l(),_n=a("p"),Mtr=o("The model class to instantiate is selected based on the "),Hue=a("code"),Etr=o("model_type"),Ctr=o(` property of the config object (either
passed as an argument or loaded from `),Uue=a("code"),wtr=o("pretrained_model_name_or_path"),Atr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jue=a("code"),ytr=o("pretrained_model_name_or_path"),Ltr=o(":"),xtr=l(),H=a("ul"),gM=a("li"),Yue=a("strong"),ktr=o("albert"),Str=o(" \u2014 "),oV=a("a"),Rtr=o("TFAlbertForPreTraining"),Btr=o(" (ALBERT model)"),Ptr=l(),hM=a("li"),Kue=a("strong"),$tr=o("bart"),Itr=o(" \u2014 "),rV=a("a"),qtr=o("TFBartForConditionalGeneration"),Ntr=o(" (BART model)"),jtr=l(),uM=a("li"),Zue=a("strong"),Dtr=o("bert"),Gtr=o(" \u2014 "),tV=a("a"),Otr=o("TFBertForPreTraining"),Vtr=o(" (BERT model)"),Xtr=l(),pM=a("li"),epe=a("strong"),ztr=o("camembert"),Qtr=o(" \u2014 "),aV=a("a"),Wtr=o("TFCamembertForMaskedLM"),Htr=o(" (CamemBERT model)"),Utr=l(),_M=a("li"),ope=a("strong"),Jtr=o("ctrl"),Ytr=o(" \u2014 "),nV=a("a"),Ktr=o("TFCTRLLMHeadModel"),Ztr=o(" (CTRL model)"),ear=l(),bM=a("li"),rpe=a("strong"),oar=o("distilbert"),rar=o(" \u2014 "),sV=a("a"),tar=o("TFDistilBertForMaskedLM"),aar=o(" (DistilBERT model)"),nar=l(),FM=a("li"),tpe=a("strong"),sar=o("electra"),lar=o(" \u2014 "),lV=a("a"),iar=o("TFElectraForPreTraining"),dar=o(" (ELECTRA model)"),car=l(),vM=a("li"),ape=a("strong"),mar=o("flaubert"),far=o(" \u2014 "),iV=a("a"),gar=o("TFFlaubertWithLMHeadModel"),har=o(" (FlauBERT model)"),uar=l(),TM=a("li"),npe=a("strong"),par=o("funnel"),_ar=o(" \u2014 "),dV=a("a"),bar=o("TFFunnelForPreTraining"),Far=o(" (Funnel Transformer model)"),Tar=l(),MM=a("li"),spe=a("strong"),Mar=o("gpt2"),Ear=o(" \u2014 "),cV=a("a"),Car=o("TFGPT2LMHeadModel"),war=o(" (OpenAI GPT-2 model)"),Aar=l(),EM=a("li"),lpe=a("strong"),yar=o("layoutlm"),Lar=o(" \u2014 "),mV=a("a"),xar=o("TFLayoutLMForMaskedLM"),kar=o(" (LayoutLM model)"),Sar=l(),CM=a("li"),ipe=a("strong"),Rar=o("lxmert"),Bar=o(" \u2014 "),fV=a("a"),Par=o("TFLxmertForPreTraining"),$ar=o(" (LXMERT model)"),Iar=l(),wM=a("li"),dpe=a("strong"),qar=o("mobilebert"),Nar=o(" \u2014 "),gV=a("a"),jar=o("TFMobileBertForPreTraining"),Dar=o(" (MobileBERT model)"),Gar=l(),AM=a("li"),cpe=a("strong"),Oar=o("mpnet"),Var=o(" \u2014 "),hV=a("a"),Xar=o("TFMPNetForMaskedLM"),zar=o(" (MPNet model)"),Qar=l(),yM=a("li"),mpe=a("strong"),War=o("openai-gpt"),Har=o(" \u2014 "),uV=a("a"),Uar=o("TFOpenAIGPTLMHeadModel"),Jar=o(" (OpenAI GPT model)"),Yar=l(),LM=a("li"),fpe=a("strong"),Kar=o("roberta"),Zar=o(" \u2014 "),pV=a("a"),enr=o("TFRobertaForMaskedLM"),onr=o(" (RoBERTa model)"),rnr=l(),xM=a("li"),gpe=a("strong"),tnr=o("t5"),anr=o(" \u2014 "),_V=a("a"),nnr=o("TFT5ForConditionalGeneration"),snr=o(" (T5 model)"),lnr=l(),kM=a("li"),hpe=a("strong"),inr=o("tapas"),dnr=o(" \u2014 "),bV=a("a"),cnr=o("TFTapasForMaskedLM"),mnr=o(" (TAPAS model)"),fnr=l(),SM=a("li"),upe=a("strong"),gnr=o("transfo-xl"),hnr=o(" \u2014 "),FV=a("a"),unr=o("TFTransfoXLLMHeadModel"),pnr=o(" (Transformer-XL model)"),_nr=l(),RM=a("li"),ppe=a("strong"),bnr=o("vit_mae"),Fnr=o(" \u2014 "),vV=a("a"),vnr=o("TFViTMAEForPreTraining"),Tnr=o(" (ViTMAE model)"),Mnr=l(),BM=a("li"),_pe=a("strong"),Enr=o("xlm"),Cnr=o(" \u2014 "),TV=a("a"),wnr=o("TFXLMWithLMHeadModel"),Anr=o(" (XLM model)"),ynr=l(),PM=a("li"),bpe=a("strong"),Lnr=o("xlm-roberta"),xnr=o(" \u2014 "),MV=a("a"),knr=o("TFXLMRobertaForMaskedLM"),Snr=o(" (XLM-RoBERTa model)"),Rnr=l(),$M=a("li"),Fpe=a("strong"),Bnr=o("xlnet"),Pnr=o(" \u2014 "),EV=a("a"),$nr=o("TFXLNetLMHeadModel"),Inr=o(" (XLNet model)"),qnr=l(),vpe=a("p"),Nnr=o("Examples:"),jnr=l(),m(fy.$$.fragment),iBe=l(),Fc=a("h2"),IM=a("a"),Tpe=a("span"),m(gy.$$.fragment),Dnr=l(),Mpe=a("span"),Gnr=o("TFAutoModelForCausalLM"),dBe=l(),Tr=a("div"),m(hy.$$.fragment),Onr=l(),vc=a("p"),Vnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),CV=a("a"),Xnr=o("from_pretrained()"),znr=o(" class method or the "),wV=a("a"),Qnr=o("from_config()"),Wnr=o(` class
method.`),Hnr=l(),uy=a("p"),Unr=o("This class cannot be instantiated directly using "),Epe=a("code"),Jnr=o("__init__()"),Ynr=o(" (throws an error)."),Knr=l(),ut=a("div"),m(py.$$.fragment),Znr=l(),Cpe=a("p"),esr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),osr=l(),Tc=a("p"),rsr=o(`Note:
Loading a model from its configuration file does `),wpe=a("strong"),tsr=o("not"),asr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AV=a("a"),nsr=o("from_pretrained()"),ssr=o(" to load the model weights."),lsr=l(),Ape=a("p"),isr=o("Examples:"),dsr=l(),m(_y.$$.fragment),csr=l(),po=a("div"),m(by.$$.fragment),msr=l(),ype=a("p"),fsr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),gsr=l(),bn=a("p"),hsr=o("The model class to instantiate is selected based on the "),Lpe=a("code"),usr=o("model_type"),psr=o(` property of the config object (either
passed as an argument or loaded from `),xpe=a("code"),_sr=o("pretrained_model_name_or_path"),bsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kpe=a("code"),Fsr=o("pretrained_model_name_or_path"),vsr=o(":"),Tsr=l(),me=a("ul"),qM=a("li"),Spe=a("strong"),Msr=o("bert"),Esr=o(" \u2014 "),yV=a("a"),Csr=o("TFBertLMHeadModel"),wsr=o(" (BERT model)"),Asr=l(),NM=a("li"),Rpe=a("strong"),ysr=o("camembert"),Lsr=o(" \u2014 "),LV=a("a"),xsr=o("TFCamembertForCausalLM"),ksr=o(" (CamemBERT model)"),Ssr=l(),jM=a("li"),Bpe=a("strong"),Rsr=o("ctrl"),Bsr=o(" \u2014 "),xV=a("a"),Psr=o("TFCTRLLMHeadModel"),$sr=o(" (CTRL model)"),Isr=l(),DM=a("li"),Ppe=a("strong"),qsr=o("gpt2"),Nsr=o(" \u2014 "),kV=a("a"),jsr=o("TFGPT2LMHeadModel"),Dsr=o(" (OpenAI GPT-2 model)"),Gsr=l(),GM=a("li"),$pe=a("strong"),Osr=o("gptj"),Vsr=o(" \u2014 "),SV=a("a"),Xsr=o("TFGPTJForCausalLM"),zsr=o(" (GPT-J model)"),Qsr=l(),OM=a("li"),Ipe=a("strong"),Wsr=o("openai-gpt"),Hsr=o(" \u2014 "),RV=a("a"),Usr=o("TFOpenAIGPTLMHeadModel"),Jsr=o(" (OpenAI GPT model)"),Ysr=l(),VM=a("li"),qpe=a("strong"),Ksr=o("rembert"),Zsr=o(" \u2014 "),BV=a("a"),elr=o("TFRemBertForCausalLM"),olr=o(" (RemBERT model)"),rlr=l(),XM=a("li"),Npe=a("strong"),tlr=o("roberta"),alr=o(" \u2014 "),PV=a("a"),nlr=o("TFRobertaForCausalLM"),slr=o(" (RoBERTa model)"),llr=l(),zM=a("li"),jpe=a("strong"),ilr=o("roformer"),dlr=o(" \u2014 "),$V=a("a"),clr=o("TFRoFormerForCausalLM"),mlr=o(" (RoFormer model)"),flr=l(),QM=a("li"),Dpe=a("strong"),glr=o("transfo-xl"),hlr=o(" \u2014 "),IV=a("a"),ulr=o("TFTransfoXLLMHeadModel"),plr=o(" (Transformer-XL model)"),_lr=l(),WM=a("li"),Gpe=a("strong"),blr=o("xlm"),Flr=o(" \u2014 "),qV=a("a"),vlr=o("TFXLMWithLMHeadModel"),Tlr=o(" (XLM model)"),Mlr=l(),HM=a("li"),Ope=a("strong"),Elr=o("xlnet"),Clr=o(" \u2014 "),NV=a("a"),wlr=o("TFXLNetLMHeadModel"),Alr=o(" (XLNet model)"),ylr=l(),Vpe=a("p"),Llr=o("Examples:"),xlr=l(),m(Fy.$$.fragment),cBe=l(),Mc=a("h2"),UM=a("a"),Xpe=a("span"),m(vy.$$.fragment),klr=l(),zpe=a("span"),Slr=o("TFAutoModelForImageClassification"),mBe=l(),Mr=a("div"),m(Ty.$$.fragment),Rlr=l(),Ec=a("p"),Blr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),jV=a("a"),Plr=o("from_pretrained()"),$lr=o(" class method or the "),DV=a("a"),Ilr=o("from_config()"),qlr=o(` class
method.`),Nlr=l(),My=a("p"),jlr=o("This class cannot be instantiated directly using "),Qpe=a("code"),Dlr=o("__init__()"),Glr=o(" (throws an error)."),Olr=l(),pt=a("div"),m(Ey.$$.fragment),Vlr=l(),Wpe=a("p"),Xlr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),zlr=l(),Cc=a("p"),Qlr=o(`Note:
Loading a model from its configuration file does `),Hpe=a("strong"),Wlr=o("not"),Hlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=a("a"),Ulr=o("from_pretrained()"),Jlr=o(" to load the model weights."),Ylr=l(),Upe=a("p"),Klr=o("Examples:"),Zlr=l(),m(Cy.$$.fragment),eir=l(),_o=a("div"),m(wy.$$.fragment),oir=l(),Jpe=a("p"),rir=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),tir=l(),Fn=a("p"),air=o("The model class to instantiate is selected based on the "),Ype=a("code"),nir=o("model_type"),sir=o(` property of the config object (either
passed as an argument or loaded from `),Kpe=a("code"),lir=o("pretrained_model_name_or_path"),iir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zpe=a("code"),dir=o("pretrained_model_name_or_path"),cir=o(":"),mir=l(),Ay=a("ul"),JM=a("li"),e_e=a("strong"),fir=o("convnext"),gir=o(" \u2014 "),OV=a("a"),hir=o("TFConvNextForImageClassification"),uir=o(" (ConvNext model)"),pir=l(),YM=a("li"),o_e=a("strong"),_ir=o("vit"),bir=o(" \u2014 "),VV=a("a"),Fir=o("TFViTForImageClassification"),vir=o(" (ViT model)"),Tir=l(),r_e=a("p"),Mir=o("Examples:"),Eir=l(),m(yy.$$.fragment),fBe=l(),wc=a("h2"),KM=a("a"),t_e=a("span"),m(Ly.$$.fragment),Cir=l(),a_e=a("span"),wir=o("TFAutoModelForMaskedLM"),gBe=l(),Er=a("div"),m(xy.$$.fragment),Air=l(),Ac=a("p"),yir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XV=a("a"),Lir=o("from_pretrained()"),xir=o(" class method or the "),zV=a("a"),kir=o("from_config()"),Sir=o(` class
method.`),Rir=l(),ky=a("p"),Bir=o("This class cannot be instantiated directly using "),n_e=a("code"),Pir=o("__init__()"),$ir=o(" (throws an error)."),Iir=l(),_t=a("div"),m(Sy.$$.fragment),qir=l(),s_e=a("p"),Nir=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),jir=l(),yc=a("p"),Dir=o(`Note:
Loading a model from its configuration file does `),l_e=a("strong"),Gir=o("not"),Oir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QV=a("a"),Vir=o("from_pretrained()"),Xir=o(" to load the model weights."),zir=l(),i_e=a("p"),Qir=o("Examples:"),Wir=l(),m(Ry.$$.fragment),Hir=l(),bo=a("div"),m(By.$$.fragment),Uir=l(),d_e=a("p"),Jir=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Yir=l(),vn=a("p"),Kir=o("The model class to instantiate is selected based on the "),c_e=a("code"),Zir=o("model_type"),edr=o(` property of the config object (either
passed as an argument or loaded from `),m_e=a("code"),odr=o("pretrained_model_name_or_path"),rdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f_e=a("code"),tdr=o("pretrained_model_name_or_path"),adr=o(":"),ndr=l(),J=a("ul"),ZM=a("li"),g_e=a("strong"),sdr=o("albert"),ldr=o(" \u2014 "),WV=a("a"),idr=o("TFAlbertForMaskedLM"),ddr=o(" (ALBERT model)"),cdr=l(),e4=a("li"),h_e=a("strong"),mdr=o("bert"),fdr=o(" \u2014 "),HV=a("a"),gdr=o("TFBertForMaskedLM"),hdr=o(" (BERT model)"),udr=l(),o4=a("li"),u_e=a("strong"),pdr=o("camembert"),_dr=o(" \u2014 "),UV=a("a"),bdr=o("TFCamembertForMaskedLM"),Fdr=o(" (CamemBERT model)"),vdr=l(),r4=a("li"),p_e=a("strong"),Tdr=o("convbert"),Mdr=o(" \u2014 "),JV=a("a"),Edr=o("TFConvBertForMaskedLM"),Cdr=o(" (ConvBERT model)"),wdr=l(),t4=a("li"),__e=a("strong"),Adr=o("deberta"),ydr=o(" \u2014 "),YV=a("a"),Ldr=o("TFDebertaForMaskedLM"),xdr=o(" (DeBERTa model)"),kdr=l(),a4=a("li"),b_e=a("strong"),Sdr=o("deberta-v2"),Rdr=o(" \u2014 "),KV=a("a"),Bdr=o("TFDebertaV2ForMaskedLM"),Pdr=o(" (DeBERTa-v2 model)"),$dr=l(),n4=a("li"),F_e=a("strong"),Idr=o("distilbert"),qdr=o(" \u2014 "),ZV=a("a"),Ndr=o("TFDistilBertForMaskedLM"),jdr=o(" (DistilBERT model)"),Ddr=l(),s4=a("li"),v_e=a("strong"),Gdr=o("electra"),Odr=o(" \u2014 "),eX=a("a"),Vdr=o("TFElectraForMaskedLM"),Xdr=o(" (ELECTRA model)"),zdr=l(),l4=a("li"),T_e=a("strong"),Qdr=o("flaubert"),Wdr=o(" \u2014 "),oX=a("a"),Hdr=o("TFFlaubertWithLMHeadModel"),Udr=o(" (FlauBERT model)"),Jdr=l(),i4=a("li"),M_e=a("strong"),Ydr=o("funnel"),Kdr=o(" \u2014 "),rX=a("a"),Zdr=o("TFFunnelForMaskedLM"),ecr=o(" (Funnel Transformer model)"),ocr=l(),d4=a("li"),E_e=a("strong"),rcr=o("layoutlm"),tcr=o(" \u2014 "),tX=a("a"),acr=o("TFLayoutLMForMaskedLM"),ncr=o(" (LayoutLM model)"),scr=l(),c4=a("li"),C_e=a("strong"),lcr=o("longformer"),icr=o(" \u2014 "),aX=a("a"),dcr=o("TFLongformerForMaskedLM"),ccr=o(" (Longformer model)"),mcr=l(),m4=a("li"),w_e=a("strong"),fcr=o("mobilebert"),gcr=o(" \u2014 "),nX=a("a"),hcr=o("TFMobileBertForMaskedLM"),ucr=o(" (MobileBERT model)"),pcr=l(),f4=a("li"),A_e=a("strong"),_cr=o("mpnet"),bcr=o(" \u2014 "),sX=a("a"),Fcr=o("TFMPNetForMaskedLM"),vcr=o(" (MPNet model)"),Tcr=l(),g4=a("li"),y_e=a("strong"),Mcr=o("rembert"),Ecr=o(" \u2014 "),lX=a("a"),Ccr=o("TFRemBertForMaskedLM"),wcr=o(" (RemBERT model)"),Acr=l(),h4=a("li"),L_e=a("strong"),ycr=o("roberta"),Lcr=o(" \u2014 "),iX=a("a"),xcr=o("TFRobertaForMaskedLM"),kcr=o(" (RoBERTa model)"),Scr=l(),u4=a("li"),x_e=a("strong"),Rcr=o("roformer"),Bcr=o(" \u2014 "),dX=a("a"),Pcr=o("TFRoFormerForMaskedLM"),$cr=o(" (RoFormer model)"),Icr=l(),p4=a("li"),k_e=a("strong"),qcr=o("tapas"),Ncr=o(" \u2014 "),cX=a("a"),jcr=o("TFTapasForMaskedLM"),Dcr=o(" (TAPAS model)"),Gcr=l(),_4=a("li"),S_e=a("strong"),Ocr=o("xlm"),Vcr=o(" \u2014 "),mX=a("a"),Xcr=o("TFXLMWithLMHeadModel"),zcr=o(" (XLM model)"),Qcr=l(),b4=a("li"),R_e=a("strong"),Wcr=o("xlm-roberta"),Hcr=o(" \u2014 "),fX=a("a"),Ucr=o("TFXLMRobertaForMaskedLM"),Jcr=o(" (XLM-RoBERTa model)"),Ycr=l(),B_e=a("p"),Kcr=o("Examples:"),Zcr=l(),m(Py.$$.fragment),hBe=l(),Lc=a("h2"),F4=a("a"),P_e=a("span"),m($y.$$.fragment),emr=l(),$_e=a("span"),omr=o("TFAutoModelForSeq2SeqLM"),uBe=l(),Cr=a("div"),m(Iy.$$.fragment),rmr=l(),xc=a("p"),tmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gX=a("a"),amr=o("from_pretrained()"),nmr=o(" class method or the "),hX=a("a"),smr=o("from_config()"),lmr=o(` class
method.`),imr=l(),qy=a("p"),dmr=o("This class cannot be instantiated directly using "),I_e=a("code"),cmr=o("__init__()"),mmr=o(" (throws an error)."),fmr=l(),bt=a("div"),m(Ny.$$.fragment),gmr=l(),q_e=a("p"),hmr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),umr=l(),kc=a("p"),pmr=o(`Note:
Loading a model from its configuration file does `),N_e=a("strong"),_mr=o("not"),bmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=a("a"),Fmr=o("from_pretrained()"),vmr=o(" to load the model weights."),Tmr=l(),j_e=a("p"),Mmr=o("Examples:"),Emr=l(),m(jy.$$.fragment),Cmr=l(),Fo=a("div"),m(Dy.$$.fragment),wmr=l(),D_e=a("p"),Amr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ymr=l(),Tn=a("p"),Lmr=o("The model class to instantiate is selected based on the "),G_e=a("code"),xmr=o("model_type"),kmr=o(` property of the config object (either
passed as an argument or loaded from `),O_e=a("code"),Smr=o("pretrained_model_name_or_path"),Rmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=a("code"),Bmr=o("pretrained_model_name_or_path"),Pmr=o(":"),$mr=l(),be=a("ul"),v4=a("li"),X_e=a("strong"),Imr=o("bart"),qmr=o(" \u2014 "),pX=a("a"),Nmr=o("TFBartForConditionalGeneration"),jmr=o(" (BART model)"),Dmr=l(),T4=a("li"),z_e=a("strong"),Gmr=o("blenderbot"),Omr=o(" \u2014 "),_X=a("a"),Vmr=o("TFBlenderbotForConditionalGeneration"),Xmr=o(" (Blenderbot model)"),zmr=l(),M4=a("li"),Q_e=a("strong"),Qmr=o("blenderbot-small"),Wmr=o(" \u2014 "),bX=a("a"),Hmr=o("TFBlenderbotSmallForConditionalGeneration"),Umr=o(" (BlenderbotSmall model)"),Jmr=l(),E4=a("li"),W_e=a("strong"),Ymr=o("encoder-decoder"),Kmr=o(" \u2014 "),FX=a("a"),Zmr=o("TFEncoderDecoderModel"),efr=o(" (Encoder decoder model)"),ofr=l(),C4=a("li"),H_e=a("strong"),rfr=o("led"),tfr=o(" \u2014 "),vX=a("a"),afr=o("TFLEDForConditionalGeneration"),nfr=o(" (LED model)"),sfr=l(),w4=a("li"),U_e=a("strong"),lfr=o("marian"),ifr=o(" \u2014 "),TX=a("a"),dfr=o("TFMarianMTModel"),cfr=o(" (Marian model)"),mfr=l(),A4=a("li"),J_e=a("strong"),ffr=o("mbart"),gfr=o(" \u2014 "),MX=a("a"),hfr=o("TFMBartForConditionalGeneration"),ufr=o(" (mBART model)"),pfr=l(),y4=a("li"),Y_e=a("strong"),_fr=o("mt5"),bfr=o(" \u2014 "),EX=a("a"),Ffr=o("TFMT5ForConditionalGeneration"),vfr=o(" (mT5 model)"),Tfr=l(),L4=a("li"),K_e=a("strong"),Mfr=o("pegasus"),Efr=o(" \u2014 "),CX=a("a"),Cfr=o("TFPegasusForConditionalGeneration"),wfr=o(" (Pegasus model)"),Afr=l(),x4=a("li"),Z_e=a("strong"),yfr=o("t5"),Lfr=o(" \u2014 "),wX=a("a"),xfr=o("TFT5ForConditionalGeneration"),kfr=o(" (T5 model)"),Sfr=l(),ebe=a("p"),Rfr=o("Examples:"),Bfr=l(),m(Gy.$$.fragment),pBe=l(),Sc=a("h2"),k4=a("a"),obe=a("span"),m(Oy.$$.fragment),Pfr=l(),rbe=a("span"),$fr=o("TFAutoModelForSequenceClassification"),_Be=l(),wr=a("div"),m(Vy.$$.fragment),Ifr=l(),Rc=a("p"),qfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),AX=a("a"),Nfr=o("from_pretrained()"),jfr=o(" class method or the "),yX=a("a"),Dfr=o("from_config()"),Gfr=o(` class
method.`),Ofr=l(),Xy=a("p"),Vfr=o("This class cannot be instantiated directly using "),tbe=a("code"),Xfr=o("__init__()"),zfr=o(" (throws an error)."),Qfr=l(),Ft=a("div"),m(zy.$$.fragment),Wfr=l(),abe=a("p"),Hfr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Ufr=l(),Bc=a("p"),Jfr=o(`Note:
Loading a model from its configuration file does `),nbe=a("strong"),Yfr=o("not"),Kfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=a("a"),Zfr=o("from_pretrained()"),egr=o(" to load the model weights."),ogr=l(),sbe=a("p"),rgr=o("Examples:"),tgr=l(),m(Qy.$$.fragment),agr=l(),vo=a("div"),m(Wy.$$.fragment),ngr=l(),lbe=a("p"),sgr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),lgr=l(),Mn=a("p"),igr=o("The model class to instantiate is selected based on the "),ibe=a("code"),dgr=o("model_type"),cgr=o(` property of the config object (either
passed as an argument or loaded from `),dbe=a("code"),mgr=o("pretrained_model_name_or_path"),fgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=a("code"),ggr=o("pretrained_model_name_or_path"),hgr=o(":"),ugr=l(),V=a("ul"),S4=a("li"),mbe=a("strong"),pgr=o("albert"),_gr=o(" \u2014 "),xX=a("a"),bgr=o("TFAlbertForSequenceClassification"),Fgr=o(" (ALBERT model)"),vgr=l(),R4=a("li"),fbe=a("strong"),Tgr=o("bert"),Mgr=o(" \u2014 "),kX=a("a"),Egr=o("TFBertForSequenceClassification"),Cgr=o(" (BERT model)"),wgr=l(),B4=a("li"),gbe=a("strong"),Agr=o("camembert"),ygr=o(" \u2014 "),SX=a("a"),Lgr=o("TFCamembertForSequenceClassification"),xgr=o(" (CamemBERT model)"),kgr=l(),P4=a("li"),hbe=a("strong"),Sgr=o("convbert"),Rgr=o(" \u2014 "),RX=a("a"),Bgr=o("TFConvBertForSequenceClassification"),Pgr=o(" (ConvBERT model)"),$gr=l(),$4=a("li"),ube=a("strong"),Igr=o("ctrl"),qgr=o(" \u2014 "),BX=a("a"),Ngr=o("TFCTRLForSequenceClassification"),jgr=o(" (CTRL model)"),Dgr=l(),I4=a("li"),pbe=a("strong"),Ggr=o("deberta"),Ogr=o(" \u2014 "),PX=a("a"),Vgr=o("TFDebertaForSequenceClassification"),Xgr=o(" (DeBERTa model)"),zgr=l(),q4=a("li"),_be=a("strong"),Qgr=o("deberta-v2"),Wgr=o(" \u2014 "),$X=a("a"),Hgr=o("TFDebertaV2ForSequenceClassification"),Ugr=o(" (DeBERTa-v2 model)"),Jgr=l(),N4=a("li"),bbe=a("strong"),Ygr=o("distilbert"),Kgr=o(" \u2014 "),IX=a("a"),Zgr=o("TFDistilBertForSequenceClassification"),ehr=o(" (DistilBERT model)"),ohr=l(),j4=a("li"),Fbe=a("strong"),rhr=o("electra"),thr=o(" \u2014 "),qX=a("a"),ahr=o("TFElectraForSequenceClassification"),nhr=o(" (ELECTRA model)"),shr=l(),D4=a("li"),vbe=a("strong"),lhr=o("flaubert"),ihr=o(" \u2014 "),NX=a("a"),dhr=o("TFFlaubertForSequenceClassification"),chr=o(" (FlauBERT model)"),mhr=l(),G4=a("li"),Tbe=a("strong"),fhr=o("funnel"),ghr=o(" \u2014 "),jX=a("a"),hhr=o("TFFunnelForSequenceClassification"),uhr=o(" (Funnel Transformer model)"),phr=l(),O4=a("li"),Mbe=a("strong"),_hr=o("gpt2"),bhr=o(" \u2014 "),DX=a("a"),Fhr=o("TFGPT2ForSequenceClassification"),vhr=o(" (OpenAI GPT-2 model)"),Thr=l(),V4=a("li"),Ebe=a("strong"),Mhr=o("gptj"),Ehr=o(" \u2014 "),GX=a("a"),Chr=o("TFGPTJForSequenceClassification"),whr=o(" (GPT-J model)"),Ahr=l(),X4=a("li"),Cbe=a("strong"),yhr=o("layoutlm"),Lhr=o(" \u2014 "),OX=a("a"),xhr=o("TFLayoutLMForSequenceClassification"),khr=o(" (LayoutLM model)"),Shr=l(),z4=a("li"),wbe=a("strong"),Rhr=o("longformer"),Bhr=o(" \u2014 "),VX=a("a"),Phr=o("TFLongformerForSequenceClassification"),$hr=o(" (Longformer model)"),Ihr=l(),Q4=a("li"),Abe=a("strong"),qhr=o("mobilebert"),Nhr=o(" \u2014 "),XX=a("a"),jhr=o("TFMobileBertForSequenceClassification"),Dhr=o(" (MobileBERT model)"),Ghr=l(),W4=a("li"),ybe=a("strong"),Ohr=o("mpnet"),Vhr=o(" \u2014 "),zX=a("a"),Xhr=o("TFMPNetForSequenceClassification"),zhr=o(" (MPNet model)"),Qhr=l(),H4=a("li"),Lbe=a("strong"),Whr=o("openai-gpt"),Hhr=o(" \u2014 "),QX=a("a"),Uhr=o("TFOpenAIGPTForSequenceClassification"),Jhr=o(" (OpenAI GPT model)"),Yhr=l(),U4=a("li"),xbe=a("strong"),Khr=o("rembert"),Zhr=o(" \u2014 "),WX=a("a"),eur=o("TFRemBertForSequenceClassification"),our=o(" (RemBERT model)"),rur=l(),J4=a("li"),kbe=a("strong"),tur=o("roberta"),aur=o(" \u2014 "),HX=a("a"),nur=o("TFRobertaForSequenceClassification"),sur=o(" (RoBERTa model)"),lur=l(),Y4=a("li"),Sbe=a("strong"),iur=o("roformer"),dur=o(" \u2014 "),UX=a("a"),cur=o("TFRoFormerForSequenceClassification"),mur=o(" (RoFormer model)"),fur=l(),K4=a("li"),Rbe=a("strong"),gur=o("tapas"),hur=o(" \u2014 "),JX=a("a"),uur=o("TFTapasForSequenceClassification"),pur=o(" (TAPAS model)"),_ur=l(),Z4=a("li"),Bbe=a("strong"),bur=o("transfo-xl"),Fur=o(" \u2014 "),YX=a("a"),vur=o("TFTransfoXLForSequenceClassification"),Tur=o(" (Transformer-XL model)"),Mur=l(),eE=a("li"),Pbe=a("strong"),Eur=o("xlm"),Cur=o(" \u2014 "),KX=a("a"),wur=o("TFXLMForSequenceClassification"),Aur=o(" (XLM model)"),yur=l(),oE=a("li"),$be=a("strong"),Lur=o("xlm-roberta"),xur=o(" \u2014 "),ZX=a("a"),kur=o("TFXLMRobertaForSequenceClassification"),Sur=o(" (XLM-RoBERTa model)"),Rur=l(),rE=a("li"),Ibe=a("strong"),Bur=o("xlnet"),Pur=o(" \u2014 "),ez=a("a"),$ur=o("TFXLNetForSequenceClassification"),Iur=o(" (XLNet model)"),qur=l(),qbe=a("p"),Nur=o("Examples:"),jur=l(),m(Hy.$$.fragment),bBe=l(),Pc=a("h2"),tE=a("a"),Nbe=a("span"),m(Uy.$$.fragment),Dur=l(),jbe=a("span"),Gur=o("TFAutoModelForMultipleChoice"),FBe=l(),Ar=a("div"),m(Jy.$$.fragment),Our=l(),$c=a("p"),Vur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oz=a("a"),Xur=o("from_pretrained()"),zur=o(" class method or the "),rz=a("a"),Qur=o("from_config()"),Wur=o(` class
method.`),Hur=l(),Yy=a("p"),Uur=o("This class cannot be instantiated directly using "),Dbe=a("code"),Jur=o("__init__()"),Yur=o(" (throws an error)."),Kur=l(),vt=a("div"),m(Ky.$$.fragment),Zur=l(),Gbe=a("p"),epr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),opr=l(),Ic=a("p"),rpr=o(`Note:
Loading a model from its configuration file does `),Obe=a("strong"),tpr=o("not"),apr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=a("a"),npr=o("from_pretrained()"),spr=o(" to load the model weights."),lpr=l(),Vbe=a("p"),ipr=o("Examples:"),dpr=l(),m(Zy.$$.fragment),cpr=l(),To=a("div"),m(eL.$$.fragment),mpr=l(),Xbe=a("p"),fpr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gpr=l(),En=a("p"),hpr=o("The model class to instantiate is selected based on the "),zbe=a("code"),upr=o("model_type"),ppr=o(` property of the config object (either
passed as an argument or loaded from `),Qbe=a("code"),_pr=o("pretrained_model_name_or_path"),bpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=a("code"),Fpr=o("pretrained_model_name_or_path"),vpr=o(":"),Tpr=l(),ne=a("ul"),aE=a("li"),Hbe=a("strong"),Mpr=o("albert"),Epr=o(" \u2014 "),az=a("a"),Cpr=o("TFAlbertForMultipleChoice"),wpr=o(" (ALBERT model)"),Apr=l(),nE=a("li"),Ube=a("strong"),ypr=o("bert"),Lpr=o(" \u2014 "),nz=a("a"),xpr=o("TFBertForMultipleChoice"),kpr=o(" (BERT model)"),Spr=l(),sE=a("li"),Jbe=a("strong"),Rpr=o("camembert"),Bpr=o(" \u2014 "),sz=a("a"),Ppr=o("TFCamembertForMultipleChoice"),$pr=o(" (CamemBERT model)"),Ipr=l(),lE=a("li"),Ybe=a("strong"),qpr=o("convbert"),Npr=o(" \u2014 "),lz=a("a"),jpr=o("TFConvBertForMultipleChoice"),Dpr=o(" (ConvBERT model)"),Gpr=l(),iE=a("li"),Kbe=a("strong"),Opr=o("distilbert"),Vpr=o(" \u2014 "),iz=a("a"),Xpr=o("TFDistilBertForMultipleChoice"),zpr=o(" (DistilBERT model)"),Qpr=l(),dE=a("li"),Zbe=a("strong"),Wpr=o("electra"),Hpr=o(" \u2014 "),dz=a("a"),Upr=o("TFElectraForMultipleChoice"),Jpr=o(" (ELECTRA model)"),Ypr=l(),cE=a("li"),e2e=a("strong"),Kpr=o("flaubert"),Zpr=o(" \u2014 "),cz=a("a"),e_r=o("TFFlaubertForMultipleChoice"),o_r=o(" (FlauBERT model)"),r_r=l(),mE=a("li"),o2e=a("strong"),t_r=o("funnel"),a_r=o(" \u2014 "),mz=a("a"),n_r=o("TFFunnelForMultipleChoice"),s_r=o(" (Funnel Transformer model)"),l_r=l(),fE=a("li"),r2e=a("strong"),i_r=o("longformer"),d_r=o(" \u2014 "),fz=a("a"),c_r=o("TFLongformerForMultipleChoice"),m_r=o(" (Longformer model)"),f_r=l(),gE=a("li"),t2e=a("strong"),g_r=o("mobilebert"),h_r=o(" \u2014 "),gz=a("a"),u_r=o("TFMobileBertForMultipleChoice"),p_r=o(" (MobileBERT model)"),__r=l(),hE=a("li"),a2e=a("strong"),b_r=o("mpnet"),F_r=o(" \u2014 "),hz=a("a"),v_r=o("TFMPNetForMultipleChoice"),T_r=o(" (MPNet model)"),M_r=l(),uE=a("li"),n2e=a("strong"),E_r=o("rembert"),C_r=o(" \u2014 "),uz=a("a"),w_r=o("TFRemBertForMultipleChoice"),A_r=o(" (RemBERT model)"),y_r=l(),pE=a("li"),s2e=a("strong"),L_r=o("roberta"),x_r=o(" \u2014 "),pz=a("a"),k_r=o("TFRobertaForMultipleChoice"),S_r=o(" (RoBERTa model)"),R_r=l(),_E=a("li"),l2e=a("strong"),B_r=o("roformer"),P_r=o(" \u2014 "),_z=a("a"),$_r=o("TFRoFormerForMultipleChoice"),I_r=o(" (RoFormer model)"),q_r=l(),bE=a("li"),i2e=a("strong"),N_r=o("xlm"),j_r=o(" \u2014 "),bz=a("a"),D_r=o("TFXLMForMultipleChoice"),G_r=o(" (XLM model)"),O_r=l(),FE=a("li"),d2e=a("strong"),V_r=o("xlm-roberta"),X_r=o(" \u2014 "),Fz=a("a"),z_r=o("TFXLMRobertaForMultipleChoice"),Q_r=o(" (XLM-RoBERTa model)"),W_r=l(),vE=a("li"),c2e=a("strong"),H_r=o("xlnet"),U_r=o(" \u2014 "),vz=a("a"),J_r=o("TFXLNetForMultipleChoice"),Y_r=o(" (XLNet model)"),K_r=l(),m2e=a("p"),Z_r=o("Examples:"),ebr=l(),m(oL.$$.fragment),vBe=l(),qc=a("h2"),TE=a("a"),f2e=a("span"),m(rL.$$.fragment),obr=l(),g2e=a("span"),rbr=o("TFAutoModelForTableQuestionAnswering"),TBe=l(),yr=a("div"),m(tL.$$.fragment),tbr=l(),Nc=a("p"),abr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Tz=a("a"),nbr=o("from_pretrained()"),sbr=o(" class method or the "),Mz=a("a"),lbr=o("from_config()"),ibr=o(` class
method.`),dbr=l(),aL=a("p"),cbr=o("This class cannot be instantiated directly using "),h2e=a("code"),mbr=o("__init__()"),fbr=o(" (throws an error)."),gbr=l(),Tt=a("div"),m(nL.$$.fragment),hbr=l(),u2e=a("p"),ubr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),pbr=l(),jc=a("p"),_br=o(`Note:
Loading a model from its configuration file does `),p2e=a("strong"),bbr=o("not"),Fbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=a("a"),vbr=o("from_pretrained()"),Tbr=o(" to load the model weights."),Mbr=l(),_2e=a("p"),Ebr=o("Examples:"),Cbr=l(),m(sL.$$.fragment),wbr=l(),Mo=a("div"),m(lL.$$.fragment),Abr=l(),b2e=a("p"),ybr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Lbr=l(),Cn=a("p"),xbr=o("The model class to instantiate is selected based on the "),F2e=a("code"),kbr=o("model_type"),Sbr=o(` property of the config object (either
passed as an argument or loaded from `),v2e=a("code"),Rbr=o("pretrained_model_name_or_path"),Bbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T2e=a("code"),Pbr=o("pretrained_model_name_or_path"),$br=o(":"),Ibr=l(),M2e=a("ul"),ME=a("li"),E2e=a("strong"),qbr=o("tapas"),Nbr=o(" \u2014 "),Cz=a("a"),jbr=o("TFTapasForQuestionAnswering"),Dbr=o(" (TAPAS model)"),Gbr=l(),C2e=a("p"),Obr=o("Examples:"),Vbr=l(),m(iL.$$.fragment),MBe=l(),Dc=a("h2"),EE=a("a"),w2e=a("span"),m(dL.$$.fragment),Xbr=l(),A2e=a("span"),zbr=o("TFAutoModelForTokenClassification"),EBe=l(),Lr=a("div"),m(cL.$$.fragment),Qbr=l(),Gc=a("p"),Wbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wz=a("a"),Hbr=o("from_pretrained()"),Ubr=o(" class method or the "),Az=a("a"),Jbr=o("from_config()"),Ybr=o(` class
method.`),Kbr=l(),mL=a("p"),Zbr=o("This class cannot be instantiated directly using "),y2e=a("code"),e2r=o("__init__()"),o2r=o(" (throws an error)."),r2r=l(),Mt=a("div"),m(fL.$$.fragment),t2r=l(),L2e=a("p"),a2r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),n2r=l(),Oc=a("p"),s2r=o(`Note:
Loading a model from its configuration file does `),x2e=a("strong"),l2r=o("not"),i2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=a("a"),d2r=o("from_pretrained()"),c2r=o(" to load the model weights."),m2r=l(),k2e=a("p"),f2r=o("Examples:"),g2r=l(),m(gL.$$.fragment),h2r=l(),Eo=a("div"),m(hL.$$.fragment),u2r=l(),S2e=a("p"),p2r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_2r=l(),wn=a("p"),b2r=o("The model class to instantiate is selected based on the "),R2e=a("code"),F2r=o("model_type"),v2r=o(` property of the config object (either
passed as an argument or loaded from `),B2e=a("code"),T2r=o("pretrained_model_name_or_path"),M2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P2e=a("code"),E2r=o("pretrained_model_name_or_path"),C2r=o(":"),w2r=l(),Y=a("ul"),CE=a("li"),$2e=a("strong"),A2r=o("albert"),y2r=o(" \u2014 "),Lz=a("a"),L2r=o("TFAlbertForTokenClassification"),x2r=o(" (ALBERT model)"),k2r=l(),wE=a("li"),I2e=a("strong"),S2r=o("bert"),R2r=o(" \u2014 "),xz=a("a"),B2r=o("TFBertForTokenClassification"),P2r=o(" (BERT model)"),$2r=l(),AE=a("li"),q2e=a("strong"),I2r=o("camembert"),q2r=o(" \u2014 "),kz=a("a"),N2r=o("TFCamembertForTokenClassification"),j2r=o(" (CamemBERT model)"),D2r=l(),yE=a("li"),N2e=a("strong"),G2r=o("convbert"),O2r=o(" \u2014 "),Sz=a("a"),V2r=o("TFConvBertForTokenClassification"),X2r=o(" (ConvBERT model)"),z2r=l(),LE=a("li"),j2e=a("strong"),Q2r=o("deberta"),W2r=o(" \u2014 "),Rz=a("a"),H2r=o("TFDebertaForTokenClassification"),U2r=o(" (DeBERTa model)"),J2r=l(),xE=a("li"),D2e=a("strong"),Y2r=o("deberta-v2"),K2r=o(" \u2014 "),Bz=a("a"),Z2r=o("TFDebertaV2ForTokenClassification"),eFr=o(" (DeBERTa-v2 model)"),oFr=l(),kE=a("li"),G2e=a("strong"),rFr=o("distilbert"),tFr=o(" \u2014 "),Pz=a("a"),aFr=o("TFDistilBertForTokenClassification"),nFr=o(" (DistilBERT model)"),sFr=l(),SE=a("li"),O2e=a("strong"),lFr=o("electra"),iFr=o(" \u2014 "),$z=a("a"),dFr=o("TFElectraForTokenClassification"),cFr=o(" (ELECTRA model)"),mFr=l(),RE=a("li"),V2e=a("strong"),fFr=o("flaubert"),gFr=o(" \u2014 "),Iz=a("a"),hFr=o("TFFlaubertForTokenClassification"),uFr=o(" (FlauBERT model)"),pFr=l(),BE=a("li"),X2e=a("strong"),_Fr=o("funnel"),bFr=o(" \u2014 "),qz=a("a"),FFr=o("TFFunnelForTokenClassification"),vFr=o(" (Funnel Transformer model)"),TFr=l(),PE=a("li"),z2e=a("strong"),MFr=o("layoutlm"),EFr=o(" \u2014 "),Nz=a("a"),CFr=o("TFLayoutLMForTokenClassification"),wFr=o(" (LayoutLM model)"),AFr=l(),$E=a("li"),Q2e=a("strong"),yFr=o("longformer"),LFr=o(" \u2014 "),jz=a("a"),xFr=o("TFLongformerForTokenClassification"),kFr=o(" (Longformer model)"),SFr=l(),IE=a("li"),W2e=a("strong"),RFr=o("mobilebert"),BFr=o(" \u2014 "),Dz=a("a"),PFr=o("TFMobileBertForTokenClassification"),$Fr=o(" (MobileBERT model)"),IFr=l(),qE=a("li"),H2e=a("strong"),qFr=o("mpnet"),NFr=o(" \u2014 "),Gz=a("a"),jFr=o("TFMPNetForTokenClassification"),DFr=o(" (MPNet model)"),GFr=l(),NE=a("li"),U2e=a("strong"),OFr=o("rembert"),VFr=o(" \u2014 "),Oz=a("a"),XFr=o("TFRemBertForTokenClassification"),zFr=o(" (RemBERT model)"),QFr=l(),jE=a("li"),J2e=a("strong"),WFr=o("roberta"),HFr=o(" \u2014 "),Vz=a("a"),UFr=o("TFRobertaForTokenClassification"),JFr=o(" (RoBERTa model)"),YFr=l(),DE=a("li"),Y2e=a("strong"),KFr=o("roformer"),ZFr=o(" \u2014 "),Xz=a("a"),evr=o("TFRoFormerForTokenClassification"),ovr=o(" (RoFormer model)"),rvr=l(),GE=a("li"),K2e=a("strong"),tvr=o("xlm"),avr=o(" \u2014 "),zz=a("a"),nvr=o("TFXLMForTokenClassification"),svr=o(" (XLM model)"),lvr=l(),OE=a("li"),Z2e=a("strong"),ivr=o("xlm-roberta"),dvr=o(" \u2014 "),Qz=a("a"),cvr=o("TFXLMRobertaForTokenClassification"),mvr=o(" (XLM-RoBERTa model)"),fvr=l(),VE=a("li"),eFe=a("strong"),gvr=o("xlnet"),hvr=o(" \u2014 "),Wz=a("a"),uvr=o("TFXLNetForTokenClassification"),pvr=o(" (XLNet model)"),_vr=l(),oFe=a("p"),bvr=o("Examples:"),Fvr=l(),m(uL.$$.fragment),CBe=l(),Vc=a("h2"),XE=a("a"),rFe=a("span"),m(pL.$$.fragment),vvr=l(),tFe=a("span"),Tvr=o("TFAutoModelForQuestionAnswering"),wBe=l(),xr=a("div"),m(_L.$$.fragment),Mvr=l(),Xc=a("p"),Evr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Hz=a("a"),Cvr=o("from_pretrained()"),wvr=o(" class method or the "),Uz=a("a"),Avr=o("from_config()"),yvr=o(` class
method.`),Lvr=l(),bL=a("p"),xvr=o("This class cannot be instantiated directly using "),aFe=a("code"),kvr=o("__init__()"),Svr=o(" (throws an error)."),Rvr=l(),Et=a("div"),m(FL.$$.fragment),Bvr=l(),nFe=a("p"),Pvr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$vr=l(),zc=a("p"),Ivr=o(`Note:
Loading a model from its configuration file does `),sFe=a("strong"),qvr=o("not"),Nvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=a("a"),jvr=o("from_pretrained()"),Dvr=o(" to load the model weights."),Gvr=l(),lFe=a("p"),Ovr=o("Examples:"),Vvr=l(),m(vL.$$.fragment),Xvr=l(),Co=a("div"),m(TL.$$.fragment),zvr=l(),iFe=a("p"),Qvr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Wvr=l(),An=a("p"),Hvr=o("The model class to instantiate is selected based on the "),dFe=a("code"),Uvr=o("model_type"),Jvr=o(` property of the config object (either
passed as an argument or loaded from `),cFe=a("code"),Yvr=o("pretrained_model_name_or_path"),Kvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mFe=a("code"),Zvr=o("pretrained_model_name_or_path"),eTr=o(":"),oTr=l(),K=a("ul"),zE=a("li"),fFe=a("strong"),rTr=o("albert"),tTr=o(" \u2014 "),Yz=a("a"),aTr=o("TFAlbertForQuestionAnswering"),nTr=o(" (ALBERT model)"),sTr=l(),QE=a("li"),gFe=a("strong"),lTr=o("bert"),iTr=o(" \u2014 "),Kz=a("a"),dTr=o("TFBertForQuestionAnswering"),cTr=o(" (BERT model)"),mTr=l(),WE=a("li"),hFe=a("strong"),fTr=o("camembert"),gTr=o(" \u2014 "),Zz=a("a"),hTr=o("TFCamembertForQuestionAnswering"),uTr=o(" (CamemBERT model)"),pTr=l(),HE=a("li"),uFe=a("strong"),_Tr=o("convbert"),bTr=o(" \u2014 "),eQ=a("a"),FTr=o("TFConvBertForQuestionAnswering"),vTr=o(" (ConvBERT model)"),TTr=l(),UE=a("li"),pFe=a("strong"),MTr=o("deberta"),ETr=o(" \u2014 "),oQ=a("a"),CTr=o("TFDebertaForQuestionAnswering"),wTr=o(" (DeBERTa model)"),ATr=l(),JE=a("li"),_Fe=a("strong"),yTr=o("deberta-v2"),LTr=o(" \u2014 "),rQ=a("a"),xTr=o("TFDebertaV2ForQuestionAnswering"),kTr=o(" (DeBERTa-v2 model)"),STr=l(),YE=a("li"),bFe=a("strong"),RTr=o("distilbert"),BTr=o(" \u2014 "),tQ=a("a"),PTr=o("TFDistilBertForQuestionAnswering"),$Tr=o(" (DistilBERT model)"),ITr=l(),KE=a("li"),FFe=a("strong"),qTr=o("electra"),NTr=o(" \u2014 "),aQ=a("a"),jTr=o("TFElectraForQuestionAnswering"),DTr=o(" (ELECTRA model)"),GTr=l(),ZE=a("li"),vFe=a("strong"),OTr=o("flaubert"),VTr=o(" \u2014 "),nQ=a("a"),XTr=o("TFFlaubertForQuestionAnsweringSimple"),zTr=o(" (FlauBERT model)"),QTr=l(),eC=a("li"),TFe=a("strong"),WTr=o("funnel"),HTr=o(" \u2014 "),sQ=a("a"),UTr=o("TFFunnelForQuestionAnswering"),JTr=o(" (Funnel Transformer model)"),YTr=l(),oC=a("li"),MFe=a("strong"),KTr=o("gptj"),ZTr=o(" \u2014 "),lQ=a("a"),e1r=o("TFGPTJForQuestionAnswering"),o1r=o(" (GPT-J model)"),r1r=l(),rC=a("li"),EFe=a("strong"),t1r=o("longformer"),a1r=o(" \u2014 "),iQ=a("a"),n1r=o("TFLongformerForQuestionAnswering"),s1r=o(" (Longformer model)"),l1r=l(),tC=a("li"),CFe=a("strong"),i1r=o("mobilebert"),d1r=o(" \u2014 "),dQ=a("a"),c1r=o("TFMobileBertForQuestionAnswering"),m1r=o(" (MobileBERT model)"),f1r=l(),aC=a("li"),wFe=a("strong"),g1r=o("mpnet"),h1r=o(" \u2014 "),cQ=a("a"),u1r=o("TFMPNetForQuestionAnswering"),p1r=o(" (MPNet model)"),_1r=l(),nC=a("li"),AFe=a("strong"),b1r=o("rembert"),F1r=o(" \u2014 "),mQ=a("a"),v1r=o("TFRemBertForQuestionAnswering"),T1r=o(" (RemBERT model)"),M1r=l(),sC=a("li"),yFe=a("strong"),E1r=o("roberta"),C1r=o(" \u2014 "),fQ=a("a"),w1r=o("TFRobertaForQuestionAnswering"),A1r=o(" (RoBERTa model)"),y1r=l(),lC=a("li"),LFe=a("strong"),L1r=o("roformer"),x1r=o(" \u2014 "),gQ=a("a"),k1r=o("TFRoFormerForQuestionAnswering"),S1r=o(" (RoFormer model)"),R1r=l(),iC=a("li"),xFe=a("strong"),B1r=o("xlm"),P1r=o(" \u2014 "),hQ=a("a"),$1r=o("TFXLMForQuestionAnsweringSimple"),I1r=o(" (XLM model)"),q1r=l(),dC=a("li"),kFe=a("strong"),N1r=o("xlm-roberta"),j1r=o(" \u2014 "),uQ=a("a"),D1r=o("TFXLMRobertaForQuestionAnswering"),G1r=o(" (XLM-RoBERTa model)"),O1r=l(),cC=a("li"),SFe=a("strong"),V1r=o("xlnet"),X1r=o(" \u2014 "),pQ=a("a"),z1r=o("TFXLNetForQuestionAnsweringSimple"),Q1r=o(" (XLNet model)"),W1r=l(),RFe=a("p"),H1r=o("Examples:"),U1r=l(),m(ML.$$.fragment),ABe=l(),Qc=a("h2"),mC=a("a"),BFe=a("span"),m(EL.$$.fragment),J1r=l(),PFe=a("span"),Y1r=o("TFAutoModelForVision2Seq"),yBe=l(),kr=a("div"),m(CL.$$.fragment),K1r=l(),Wc=a("p"),Z1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_Q=a("a"),eMr=o("from_pretrained()"),oMr=o(" class method or the "),bQ=a("a"),rMr=o("from_config()"),tMr=o(` class
method.`),aMr=l(),wL=a("p"),nMr=o("This class cannot be instantiated directly using "),$Fe=a("code"),sMr=o("__init__()"),lMr=o(" (throws an error)."),iMr=l(),Ct=a("div"),m(AL.$$.fragment),dMr=l(),IFe=a("p"),cMr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),mMr=l(),Hc=a("p"),fMr=o(`Note:
Loading a model from its configuration file does `),qFe=a("strong"),gMr=o("not"),hMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=a("a"),uMr=o("from_pretrained()"),pMr=o(" to load the model weights."),_Mr=l(),NFe=a("p"),bMr=o("Examples:"),FMr=l(),m(yL.$$.fragment),vMr=l(),wo=a("div"),m(LL.$$.fragment),TMr=l(),jFe=a("p"),MMr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),EMr=l(),yn=a("p"),CMr=o("The model class to instantiate is selected based on the "),DFe=a("code"),wMr=o("model_type"),AMr=o(` property of the config object (either
passed as an argument or loaded from `),GFe=a("code"),yMr=o("pretrained_model_name_or_path"),LMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OFe=a("code"),xMr=o("pretrained_model_name_or_path"),kMr=o(":"),SMr=l(),VFe=a("ul"),fC=a("li"),XFe=a("strong"),RMr=o("vision-encoder-decoder"),BMr=o(" \u2014 "),vQ=a("a"),PMr=o("TFVisionEncoderDecoderModel"),$Mr=o(" (Vision Encoder decoder model)"),IMr=l(),zFe=a("p"),qMr=o("Examples:"),NMr=l(),m(xL.$$.fragment),LBe=l(),Uc=a("h2"),gC=a("a"),QFe=a("span"),m(kL.$$.fragment),jMr=l(),WFe=a("span"),DMr=o("TFAutoModelForSpeechSeq2Seq"),xBe=l(),Sr=a("div"),m(SL.$$.fragment),GMr=l(),Jc=a("p"),OMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),TQ=a("a"),VMr=o("from_pretrained()"),XMr=o(" class method or the "),MQ=a("a"),zMr=o("from_config()"),QMr=o(` class
method.`),WMr=l(),RL=a("p"),HMr=o("This class cannot be instantiated directly using "),HFe=a("code"),UMr=o("__init__()"),JMr=o(" (throws an error)."),YMr=l(),wt=a("div"),m(BL.$$.fragment),KMr=l(),UFe=a("p"),ZMr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),e4r=l(),Yc=a("p"),o4r=o(`Note:
Loading a model from its configuration file does `),JFe=a("strong"),r4r=o("not"),t4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EQ=a("a"),a4r=o("from_pretrained()"),n4r=o(" to load the model weights."),s4r=l(),YFe=a("p"),l4r=o("Examples:"),i4r=l(),m(PL.$$.fragment),d4r=l(),Ao=a("div"),m($L.$$.fragment),c4r=l(),KFe=a("p"),m4r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),f4r=l(),Ln=a("p"),g4r=o("The model class to instantiate is selected based on the "),ZFe=a("code"),h4r=o("model_type"),u4r=o(` property of the config object (either
passed as an argument or loaded from `),eve=a("code"),p4r=o("pretrained_model_name_or_path"),_4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=a("code"),b4r=o("pretrained_model_name_or_path"),F4r=o(":"),v4r=l(),rve=a("ul"),hC=a("li"),tve=a("strong"),T4r=o("speech_to_text"),M4r=o(" \u2014 "),CQ=a("a"),E4r=o("TFSpeech2TextForConditionalGeneration"),C4r=o(" (Speech2Text model)"),w4r=l(),ave=a("p"),A4r=o("Examples:"),y4r=l(),m(IL.$$.fragment),kBe=l(),Kc=a("h2"),uC=a("a"),nve=a("span"),m(qL.$$.fragment),L4r=l(),sve=a("span"),x4r=o("FlaxAutoModel"),SBe=l(),Rr=a("div"),m(NL.$$.fragment),k4r=l(),Zc=a("p"),S4r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wQ=a("a"),R4r=o("from_pretrained()"),B4r=o(" class method or the "),AQ=a("a"),P4r=o("from_config()"),$4r=o(` class
method.`),I4r=l(),jL=a("p"),q4r=o("This class cannot be instantiated directly using "),lve=a("code"),N4r=o("__init__()"),j4r=o(" (throws an error)."),D4r=l(),At=a("div"),m(DL.$$.fragment),G4r=l(),ive=a("p"),O4r=o("Instantiates one of the base model classes of the library from a configuration."),V4r=l(),em=a("p"),X4r=o(`Note:
Loading a model from its configuration file does `),dve=a("strong"),z4r=o("not"),Q4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=a("a"),W4r=o("from_pretrained()"),H4r=o(" to load the model weights."),U4r=l(),cve=a("p"),J4r=o("Examples:"),Y4r=l(),m(GL.$$.fragment),K4r=l(),yo=a("div"),m(OL.$$.fragment),Z4r=l(),mve=a("p"),eEr=o("Instantiate one of the base model classes of the library from a pretrained model."),oEr=l(),xn=a("p"),rEr=o("The model class to instantiate is selected based on the "),fve=a("code"),tEr=o("model_type"),aEr=o(` property of the config object (either
passed as an argument or loaded from `),gve=a("code"),nEr=o("pretrained_model_name_or_path"),sEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=a("code"),lEr=o("pretrained_model_name_or_path"),iEr=o(":"),dEr=l(),z=a("ul"),pC=a("li"),uve=a("strong"),cEr=o("albert"),mEr=o(" \u2014 "),LQ=a("a"),fEr=o("FlaxAlbertModel"),gEr=o(" (ALBERT model)"),hEr=l(),_C=a("li"),pve=a("strong"),uEr=o("bart"),pEr=o(" \u2014 "),xQ=a("a"),_Er=o("FlaxBartModel"),bEr=o(" (BART model)"),FEr=l(),bC=a("li"),_ve=a("strong"),vEr=o("beit"),TEr=o(" \u2014 "),kQ=a("a"),MEr=o("FlaxBeitModel"),EEr=o(" (BEiT model)"),CEr=l(),FC=a("li"),bve=a("strong"),wEr=o("bert"),AEr=o(" \u2014 "),SQ=a("a"),yEr=o("FlaxBertModel"),LEr=o(" (BERT model)"),xEr=l(),vC=a("li"),Fve=a("strong"),kEr=o("big_bird"),SEr=o(" \u2014 "),RQ=a("a"),REr=o("FlaxBigBirdModel"),BEr=o(" (BigBird model)"),PEr=l(),TC=a("li"),vve=a("strong"),$Er=o("blenderbot"),IEr=o(" \u2014 "),BQ=a("a"),qEr=o("FlaxBlenderbotModel"),NEr=o(" (Blenderbot model)"),jEr=l(),MC=a("li"),Tve=a("strong"),DEr=o("blenderbot-small"),GEr=o(" \u2014 "),PQ=a("a"),OEr=o("FlaxBlenderbotSmallModel"),VEr=o(" (BlenderbotSmall model)"),XEr=l(),EC=a("li"),Mve=a("strong"),zEr=o("clip"),QEr=o(" \u2014 "),$Q=a("a"),WEr=o("FlaxCLIPModel"),HEr=o(" (CLIP model)"),UEr=l(),CC=a("li"),Eve=a("strong"),JEr=o("distilbert"),YEr=o(" \u2014 "),IQ=a("a"),KEr=o("FlaxDistilBertModel"),ZEr=o(" (DistilBERT model)"),eCr=l(),wC=a("li"),Cve=a("strong"),oCr=o("electra"),rCr=o(" \u2014 "),qQ=a("a"),tCr=o("FlaxElectraModel"),aCr=o(" (ELECTRA model)"),nCr=l(),AC=a("li"),wve=a("strong"),sCr=o("gpt2"),lCr=o(" \u2014 "),NQ=a("a"),iCr=o("FlaxGPT2Model"),dCr=o(" (OpenAI GPT-2 model)"),cCr=l(),yC=a("li"),Ave=a("strong"),mCr=o("gpt_neo"),fCr=o(" \u2014 "),jQ=a("a"),gCr=o("FlaxGPTNeoModel"),hCr=o(" (GPT Neo model)"),uCr=l(),LC=a("li"),yve=a("strong"),pCr=o("gptj"),_Cr=o(" \u2014 "),DQ=a("a"),bCr=o("FlaxGPTJModel"),FCr=o(" (GPT-J model)"),vCr=l(),xC=a("li"),Lve=a("strong"),TCr=o("marian"),MCr=o(" \u2014 "),GQ=a("a"),ECr=o("FlaxMarianModel"),CCr=o(" (Marian model)"),wCr=l(),kC=a("li"),xve=a("strong"),ACr=o("mbart"),yCr=o(" \u2014 "),OQ=a("a"),LCr=o("FlaxMBartModel"),xCr=o(" (mBART model)"),kCr=l(),SC=a("li"),kve=a("strong"),SCr=o("mt5"),RCr=o(" \u2014 "),VQ=a("a"),BCr=o("FlaxMT5Model"),PCr=o(" (mT5 model)"),$Cr=l(),RC=a("li"),Sve=a("strong"),ICr=o("pegasus"),qCr=o(" \u2014 "),XQ=a("a"),NCr=o("FlaxPegasusModel"),jCr=o(" (Pegasus model)"),DCr=l(),BC=a("li"),Rve=a("strong"),GCr=o("roberta"),OCr=o(" \u2014 "),zQ=a("a"),VCr=o("FlaxRobertaModel"),XCr=o(" (RoBERTa model)"),zCr=l(),PC=a("li"),Bve=a("strong"),QCr=o("roformer"),WCr=o(" \u2014 "),QQ=a("a"),HCr=o("FlaxRoFormerModel"),UCr=o(" (RoFormer model)"),JCr=l(),$C=a("li"),Pve=a("strong"),YCr=o("t5"),KCr=o(" \u2014 "),WQ=a("a"),ZCr=o("FlaxT5Model"),e5r=o(" (T5 model)"),o5r=l(),IC=a("li"),$ve=a("strong"),r5r=o("vision-text-dual-encoder"),t5r=o(" \u2014 "),HQ=a("a"),a5r=o("FlaxVisionTextDualEncoderModel"),n5r=o(" (VisionTextDualEncoder model)"),s5r=l(),qC=a("li"),Ive=a("strong"),l5r=o("vit"),i5r=o(" \u2014 "),UQ=a("a"),d5r=o("FlaxViTModel"),c5r=o(" (ViT model)"),m5r=l(),NC=a("li"),qve=a("strong"),f5r=o("wav2vec2"),g5r=o(" \u2014 "),JQ=a("a"),h5r=o("FlaxWav2Vec2Model"),u5r=o(" (Wav2Vec2 model)"),p5r=l(),jC=a("li"),Nve=a("strong"),_5r=o("xglm"),b5r=o(" \u2014 "),YQ=a("a"),F5r=o("FlaxXGLMModel"),v5r=o(" (XGLM model)"),T5r=l(),DC=a("li"),jve=a("strong"),M5r=o("xlm-roberta"),E5r=o(" \u2014 "),KQ=a("a"),C5r=o("FlaxXLMRobertaModel"),w5r=o(" (XLM-RoBERTa model)"),A5r=l(),Dve=a("p"),y5r=o("Examples:"),L5r=l(),m(VL.$$.fragment),RBe=l(),om=a("h2"),GC=a("a"),Gve=a("span"),m(XL.$$.fragment),x5r=l(),Ove=a("span"),k5r=o("FlaxAutoModelForCausalLM"),BBe=l(),Br=a("div"),m(zL.$$.fragment),S5r=l(),rm=a("p"),R5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ZQ=a("a"),B5r=o("from_pretrained()"),P5r=o(" class method or the "),eW=a("a"),$5r=o("from_config()"),I5r=o(` class
method.`),q5r=l(),QL=a("p"),N5r=o("This class cannot be instantiated directly using "),Vve=a("code"),j5r=o("__init__()"),D5r=o(" (throws an error)."),G5r=l(),yt=a("div"),m(WL.$$.fragment),O5r=l(),Xve=a("p"),V5r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),X5r=l(),tm=a("p"),z5r=o(`Note:
Loading a model from its configuration file does `),zve=a("strong"),Q5r=o("not"),W5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oW=a("a"),H5r=o("from_pretrained()"),U5r=o(" to load the model weights."),J5r=l(),Qve=a("p"),Y5r=o("Examples:"),K5r=l(),m(HL.$$.fragment),Z5r=l(),Lo=a("div"),m(UL.$$.fragment),e3r=l(),Wve=a("p"),o3r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),r3r=l(),kn=a("p"),t3r=o("The model class to instantiate is selected based on the "),Hve=a("code"),a3r=o("model_type"),n3r=o(` property of the config object (either
passed as an argument or loaded from `),Uve=a("code"),s3r=o("pretrained_model_name_or_path"),l3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jve=a("code"),i3r=o("pretrained_model_name_or_path"),d3r=o(":"),c3r=l(),ca=a("ul"),OC=a("li"),Yve=a("strong"),m3r=o("bart"),f3r=o(" \u2014 "),rW=a("a"),g3r=o("FlaxBartForCausalLM"),h3r=o(" (BART model)"),u3r=l(),VC=a("li"),Kve=a("strong"),p3r=o("gpt2"),_3r=o(" \u2014 "),tW=a("a"),b3r=o("FlaxGPT2LMHeadModel"),F3r=o(" (OpenAI GPT-2 model)"),v3r=l(),XC=a("li"),Zve=a("strong"),T3r=o("gpt_neo"),M3r=o(" \u2014 "),aW=a("a"),E3r=o("FlaxGPTNeoForCausalLM"),C3r=o(" (GPT Neo model)"),w3r=l(),zC=a("li"),eTe=a("strong"),A3r=o("gptj"),y3r=o(" \u2014 "),nW=a("a"),L3r=o("FlaxGPTJForCausalLM"),x3r=o(" (GPT-J model)"),k3r=l(),QC=a("li"),oTe=a("strong"),S3r=o("xglm"),R3r=o(" \u2014 "),sW=a("a"),B3r=o("FlaxXGLMForCausalLM"),P3r=o(" (XGLM model)"),$3r=l(),rTe=a("p"),I3r=o("Examples:"),q3r=l(),m(JL.$$.fragment),PBe=l(),am=a("h2"),WC=a("a"),tTe=a("span"),m(YL.$$.fragment),N3r=l(),aTe=a("span"),j3r=o("FlaxAutoModelForPreTraining"),$Be=l(),Pr=a("div"),m(KL.$$.fragment),D3r=l(),nm=a("p"),G3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lW=a("a"),O3r=o("from_pretrained()"),V3r=o(" class method or the "),iW=a("a"),X3r=o("from_config()"),z3r=o(` class
method.`),Q3r=l(),ZL=a("p"),W3r=o("This class cannot be instantiated directly using "),nTe=a("code"),H3r=o("__init__()"),U3r=o(" (throws an error)."),J3r=l(),Lt=a("div"),m(e8.$$.fragment),Y3r=l(),sTe=a("p"),K3r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Z3r=l(),sm=a("p"),ewr=o(`Note:
Loading a model from its configuration file does `),lTe=a("strong"),owr=o("not"),rwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=a("a"),twr=o("from_pretrained()"),awr=o(" to load the model weights."),nwr=l(),iTe=a("p"),swr=o("Examples:"),lwr=l(),m(o8.$$.fragment),iwr=l(),xo=a("div"),m(r8.$$.fragment),dwr=l(),dTe=a("p"),cwr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mwr=l(),Sn=a("p"),fwr=o("The model class to instantiate is selected based on the "),cTe=a("code"),gwr=o("model_type"),hwr=o(` property of the config object (either
passed as an argument or loaded from `),mTe=a("code"),uwr=o("pretrained_model_name_or_path"),pwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fTe=a("code"),_wr=o("pretrained_model_name_or_path"),bwr=o(":"),Fwr=l(),fe=a("ul"),HC=a("li"),gTe=a("strong"),vwr=o("albert"),Twr=o(" \u2014 "),cW=a("a"),Mwr=o("FlaxAlbertForPreTraining"),Ewr=o(" (ALBERT model)"),Cwr=l(),UC=a("li"),hTe=a("strong"),wwr=o("bart"),Awr=o(" \u2014 "),mW=a("a"),ywr=o("FlaxBartForConditionalGeneration"),Lwr=o(" (BART model)"),xwr=l(),JC=a("li"),uTe=a("strong"),kwr=o("bert"),Swr=o(" \u2014 "),fW=a("a"),Rwr=o("FlaxBertForPreTraining"),Bwr=o(" (BERT model)"),Pwr=l(),YC=a("li"),pTe=a("strong"),$wr=o("big_bird"),Iwr=o(" \u2014 "),gW=a("a"),qwr=o("FlaxBigBirdForPreTraining"),Nwr=o(" (BigBird model)"),jwr=l(),KC=a("li"),_Te=a("strong"),Dwr=o("electra"),Gwr=o(" \u2014 "),hW=a("a"),Owr=o("FlaxElectraForPreTraining"),Vwr=o(" (ELECTRA model)"),Xwr=l(),ZC=a("li"),bTe=a("strong"),zwr=o("mbart"),Qwr=o(" \u2014 "),uW=a("a"),Wwr=o("FlaxMBartForConditionalGeneration"),Hwr=o(" (mBART model)"),Uwr=l(),e5=a("li"),FTe=a("strong"),Jwr=o("mt5"),Ywr=o(" \u2014 "),pW=a("a"),Kwr=o("FlaxMT5ForConditionalGeneration"),Zwr=o(" (mT5 model)"),eAr=l(),o5=a("li"),vTe=a("strong"),oAr=o("roberta"),rAr=o(" \u2014 "),_W=a("a"),tAr=o("FlaxRobertaForMaskedLM"),aAr=o(" (RoBERTa model)"),nAr=l(),r5=a("li"),TTe=a("strong"),sAr=o("roformer"),lAr=o(" \u2014 "),bW=a("a"),iAr=o("FlaxRoFormerForMaskedLM"),dAr=o(" (RoFormer model)"),cAr=l(),t5=a("li"),MTe=a("strong"),mAr=o("t5"),fAr=o(" \u2014 "),FW=a("a"),gAr=o("FlaxT5ForConditionalGeneration"),hAr=o(" (T5 model)"),uAr=l(),a5=a("li"),ETe=a("strong"),pAr=o("wav2vec2"),_Ar=o(" \u2014 "),vW=a("a"),bAr=o("FlaxWav2Vec2ForPreTraining"),FAr=o(" (Wav2Vec2 model)"),vAr=l(),n5=a("li"),CTe=a("strong"),TAr=o("xlm-roberta"),MAr=o(" \u2014 "),TW=a("a"),EAr=o("FlaxXLMRobertaForMaskedLM"),CAr=o(" (XLM-RoBERTa model)"),wAr=l(),wTe=a("p"),AAr=o("Examples:"),yAr=l(),m(t8.$$.fragment),IBe=l(),lm=a("h2"),s5=a("a"),ATe=a("span"),m(a8.$$.fragment),LAr=l(),yTe=a("span"),xAr=o("FlaxAutoModelForMaskedLM"),qBe=l(),$r=a("div"),m(n8.$$.fragment),kAr=l(),im=a("p"),SAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),MW=a("a"),RAr=o("from_pretrained()"),BAr=o(" class method or the "),EW=a("a"),PAr=o("from_config()"),$Ar=o(` class
method.`),IAr=l(),s8=a("p"),qAr=o("This class cannot be instantiated directly using "),LTe=a("code"),NAr=o("__init__()"),jAr=o(" (throws an error)."),DAr=l(),xt=a("div"),m(l8.$$.fragment),GAr=l(),xTe=a("p"),OAr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),VAr=l(),dm=a("p"),XAr=o(`Note:
Loading a model from its configuration file does `),kTe=a("strong"),zAr=o("not"),QAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CW=a("a"),WAr=o("from_pretrained()"),HAr=o(" to load the model weights."),UAr=l(),STe=a("p"),JAr=o("Examples:"),YAr=l(),m(i8.$$.fragment),KAr=l(),ko=a("div"),m(d8.$$.fragment),ZAr=l(),RTe=a("p"),e6r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),o6r=l(),Rn=a("p"),r6r=o("The model class to instantiate is selected based on the "),BTe=a("code"),t6r=o("model_type"),a6r=o(` property of the config object (either
passed as an argument or loaded from `),PTe=a("code"),n6r=o("pretrained_model_name_or_path"),s6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Te=a("code"),l6r=o("pretrained_model_name_or_path"),i6r=o(":"),d6r=l(),Fe=a("ul"),l5=a("li"),ITe=a("strong"),c6r=o("albert"),m6r=o(" \u2014 "),wW=a("a"),f6r=o("FlaxAlbertForMaskedLM"),g6r=o(" (ALBERT model)"),h6r=l(),i5=a("li"),qTe=a("strong"),u6r=o("bart"),p6r=o(" \u2014 "),AW=a("a"),_6r=o("FlaxBartForConditionalGeneration"),b6r=o(" (BART model)"),F6r=l(),d5=a("li"),NTe=a("strong"),v6r=o("bert"),T6r=o(" \u2014 "),yW=a("a"),M6r=o("FlaxBertForMaskedLM"),E6r=o(" (BERT model)"),C6r=l(),c5=a("li"),jTe=a("strong"),w6r=o("big_bird"),A6r=o(" \u2014 "),LW=a("a"),y6r=o("FlaxBigBirdForMaskedLM"),L6r=o(" (BigBird model)"),x6r=l(),m5=a("li"),DTe=a("strong"),k6r=o("distilbert"),S6r=o(" \u2014 "),xW=a("a"),R6r=o("FlaxDistilBertForMaskedLM"),B6r=o(" (DistilBERT model)"),P6r=l(),f5=a("li"),GTe=a("strong"),$6r=o("electra"),I6r=o(" \u2014 "),kW=a("a"),q6r=o("FlaxElectraForMaskedLM"),N6r=o(" (ELECTRA model)"),j6r=l(),g5=a("li"),OTe=a("strong"),D6r=o("mbart"),G6r=o(" \u2014 "),SW=a("a"),O6r=o("FlaxMBartForConditionalGeneration"),V6r=o(" (mBART model)"),X6r=l(),h5=a("li"),VTe=a("strong"),z6r=o("roberta"),Q6r=o(" \u2014 "),RW=a("a"),W6r=o("FlaxRobertaForMaskedLM"),H6r=o(" (RoBERTa model)"),U6r=l(),u5=a("li"),XTe=a("strong"),J6r=o("roformer"),Y6r=o(" \u2014 "),BW=a("a"),K6r=o("FlaxRoFormerForMaskedLM"),Z6r=o(" (RoFormer model)"),e0r=l(),p5=a("li"),zTe=a("strong"),o0r=o("xlm-roberta"),r0r=o(" \u2014 "),PW=a("a"),t0r=o("FlaxXLMRobertaForMaskedLM"),a0r=o(" (XLM-RoBERTa model)"),n0r=l(),QTe=a("p"),s0r=o("Examples:"),l0r=l(),m(c8.$$.fragment),NBe=l(),cm=a("h2"),_5=a("a"),WTe=a("span"),m(m8.$$.fragment),i0r=l(),HTe=a("span"),d0r=o("FlaxAutoModelForSeq2SeqLM"),jBe=l(),Ir=a("div"),m(f8.$$.fragment),c0r=l(),mm=a("p"),m0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$W=a("a"),f0r=o("from_pretrained()"),g0r=o(" class method or the "),IW=a("a"),h0r=o("from_config()"),u0r=o(` class
method.`),p0r=l(),g8=a("p"),_0r=o("This class cannot be instantiated directly using "),UTe=a("code"),b0r=o("__init__()"),F0r=o(" (throws an error)."),v0r=l(),kt=a("div"),m(h8.$$.fragment),T0r=l(),JTe=a("p"),M0r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),E0r=l(),fm=a("p"),C0r=o(`Note:
Loading a model from its configuration file does `),YTe=a("strong"),w0r=o("not"),A0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=a("a"),y0r=o("from_pretrained()"),L0r=o(" to load the model weights."),x0r=l(),KTe=a("p"),k0r=o("Examples:"),S0r=l(),m(u8.$$.fragment),R0r=l(),So=a("div"),m(p8.$$.fragment),B0r=l(),ZTe=a("p"),P0r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$0r=l(),Bn=a("p"),I0r=o("The model class to instantiate is selected based on the "),e1e=a("code"),q0r=o("model_type"),N0r=o(` property of the config object (either
passed as an argument or loaded from `),o1e=a("code"),j0r=o("pretrained_model_name_or_path"),D0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r1e=a("code"),G0r=o("pretrained_model_name_or_path"),O0r=o(":"),V0r=l(),Ee=a("ul"),b5=a("li"),t1e=a("strong"),X0r=o("bart"),z0r=o(" \u2014 "),NW=a("a"),Q0r=o("FlaxBartForConditionalGeneration"),W0r=o(" (BART model)"),H0r=l(),F5=a("li"),a1e=a("strong"),U0r=o("blenderbot"),J0r=o(" \u2014 "),jW=a("a"),Y0r=o("FlaxBlenderbotForConditionalGeneration"),K0r=o(" (Blenderbot model)"),Z0r=l(),v5=a("li"),n1e=a("strong"),eyr=o("blenderbot-small"),oyr=o(" \u2014 "),DW=a("a"),ryr=o("FlaxBlenderbotSmallForConditionalGeneration"),tyr=o(" (BlenderbotSmall model)"),ayr=l(),T5=a("li"),s1e=a("strong"),nyr=o("encoder-decoder"),syr=o(" \u2014 "),GW=a("a"),lyr=o("FlaxEncoderDecoderModel"),iyr=o(" (Encoder decoder model)"),dyr=l(),M5=a("li"),l1e=a("strong"),cyr=o("marian"),myr=o(" \u2014 "),OW=a("a"),fyr=o("FlaxMarianMTModel"),gyr=o(" (Marian model)"),hyr=l(),E5=a("li"),i1e=a("strong"),uyr=o("mbart"),pyr=o(" \u2014 "),VW=a("a"),_yr=o("FlaxMBartForConditionalGeneration"),byr=o(" (mBART model)"),Fyr=l(),C5=a("li"),d1e=a("strong"),vyr=o("mt5"),Tyr=o(" \u2014 "),XW=a("a"),Myr=o("FlaxMT5ForConditionalGeneration"),Eyr=o(" (mT5 model)"),Cyr=l(),w5=a("li"),c1e=a("strong"),wyr=o("pegasus"),Ayr=o(" \u2014 "),zW=a("a"),yyr=o("FlaxPegasusForConditionalGeneration"),Lyr=o(" (Pegasus model)"),xyr=l(),A5=a("li"),m1e=a("strong"),kyr=o("t5"),Syr=o(" \u2014 "),QW=a("a"),Ryr=o("FlaxT5ForConditionalGeneration"),Byr=o(" (T5 model)"),Pyr=l(),f1e=a("p"),$yr=o("Examples:"),Iyr=l(),m(_8.$$.fragment),DBe=l(),gm=a("h2"),y5=a("a"),g1e=a("span"),m(b8.$$.fragment),qyr=l(),h1e=a("span"),Nyr=o("FlaxAutoModelForSequenceClassification"),GBe=l(),qr=a("div"),m(F8.$$.fragment),jyr=l(),hm=a("p"),Dyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),WW=a("a"),Gyr=o("from_pretrained()"),Oyr=o(" class method or the "),HW=a("a"),Vyr=o("from_config()"),Xyr=o(` class
method.`),zyr=l(),v8=a("p"),Qyr=o("This class cannot be instantiated directly using "),u1e=a("code"),Wyr=o("__init__()"),Hyr=o(" (throws an error)."),Uyr=l(),St=a("div"),m(T8.$$.fragment),Jyr=l(),p1e=a("p"),Yyr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Kyr=l(),um=a("p"),Zyr=o(`Note:
Loading a model from its configuration file does `),_1e=a("strong"),eLr=o("not"),oLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=a("a"),rLr=o("from_pretrained()"),tLr=o(" to load the model weights."),aLr=l(),b1e=a("p"),nLr=o("Examples:"),sLr=l(),m(M8.$$.fragment),lLr=l(),Ro=a("div"),m(E8.$$.fragment),iLr=l(),F1e=a("p"),dLr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),cLr=l(),Pn=a("p"),mLr=o("The model class to instantiate is selected based on the "),v1e=a("code"),fLr=o("model_type"),gLr=o(` property of the config object (either
passed as an argument or loaded from `),T1e=a("code"),hLr=o("pretrained_model_name_or_path"),uLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M1e=a("code"),pLr=o("pretrained_model_name_or_path"),_Lr=o(":"),bLr=l(),ve=a("ul"),L5=a("li"),E1e=a("strong"),FLr=o("albert"),vLr=o(" \u2014 "),JW=a("a"),TLr=o("FlaxAlbertForSequenceClassification"),MLr=o(" (ALBERT model)"),ELr=l(),x5=a("li"),C1e=a("strong"),CLr=o("bart"),wLr=o(" \u2014 "),YW=a("a"),ALr=o("FlaxBartForSequenceClassification"),yLr=o(" (BART model)"),LLr=l(),k5=a("li"),w1e=a("strong"),xLr=o("bert"),kLr=o(" \u2014 "),KW=a("a"),SLr=o("FlaxBertForSequenceClassification"),RLr=o(" (BERT model)"),BLr=l(),S5=a("li"),A1e=a("strong"),PLr=o("big_bird"),$Lr=o(" \u2014 "),ZW=a("a"),ILr=o("FlaxBigBirdForSequenceClassification"),qLr=o(" (BigBird model)"),NLr=l(),R5=a("li"),y1e=a("strong"),jLr=o("distilbert"),DLr=o(" \u2014 "),eH=a("a"),GLr=o("FlaxDistilBertForSequenceClassification"),OLr=o(" (DistilBERT model)"),VLr=l(),B5=a("li"),L1e=a("strong"),XLr=o("electra"),zLr=o(" \u2014 "),oH=a("a"),QLr=o("FlaxElectraForSequenceClassification"),WLr=o(" (ELECTRA model)"),HLr=l(),P5=a("li"),x1e=a("strong"),ULr=o("mbart"),JLr=o(" \u2014 "),rH=a("a"),YLr=o("FlaxMBartForSequenceClassification"),KLr=o(" (mBART model)"),ZLr=l(),$5=a("li"),k1e=a("strong"),e8r=o("roberta"),o8r=o(" \u2014 "),tH=a("a"),r8r=o("FlaxRobertaForSequenceClassification"),t8r=o(" (RoBERTa model)"),a8r=l(),I5=a("li"),S1e=a("strong"),n8r=o("roformer"),s8r=o(" \u2014 "),aH=a("a"),l8r=o("FlaxRoFormerForSequenceClassification"),i8r=o(" (RoFormer model)"),d8r=l(),q5=a("li"),R1e=a("strong"),c8r=o("xlm-roberta"),m8r=o(" \u2014 "),nH=a("a"),f8r=o("FlaxXLMRobertaForSequenceClassification"),g8r=o(" (XLM-RoBERTa model)"),h8r=l(),B1e=a("p"),u8r=o("Examples:"),p8r=l(),m(C8.$$.fragment),OBe=l(),pm=a("h2"),N5=a("a"),P1e=a("span"),m(w8.$$.fragment),_8r=l(),$1e=a("span"),b8r=o("FlaxAutoModelForQuestionAnswering"),VBe=l(),Nr=a("div"),m(A8.$$.fragment),F8r=l(),_m=a("p"),v8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),sH=a("a"),T8r=o("from_pretrained()"),M8r=o(" class method or the "),lH=a("a"),E8r=o("from_config()"),C8r=o(` class
method.`),w8r=l(),y8=a("p"),A8r=o("This class cannot be instantiated directly using "),I1e=a("code"),y8r=o("__init__()"),L8r=o(" (throws an error)."),x8r=l(),Rt=a("div"),m(L8.$$.fragment),k8r=l(),q1e=a("p"),S8r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),R8r=l(),bm=a("p"),B8r=o(`Note:
Loading a model from its configuration file does `),N1e=a("strong"),P8r=o("not"),$8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iH=a("a"),I8r=o("from_pretrained()"),q8r=o(" to load the model weights."),N8r=l(),j1e=a("p"),j8r=o("Examples:"),D8r=l(),m(x8.$$.fragment),G8r=l(),Bo=a("div"),m(k8.$$.fragment),O8r=l(),D1e=a("p"),V8r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),X8r=l(),$n=a("p"),z8r=o("The model class to instantiate is selected based on the "),G1e=a("code"),Q8r=o("model_type"),W8r=o(` property of the config object (either
passed as an argument or loaded from `),O1e=a("code"),H8r=o("pretrained_model_name_or_path"),U8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=a("code"),J8r=o("pretrained_model_name_or_path"),Y8r=o(":"),K8r=l(),Te=a("ul"),j5=a("li"),X1e=a("strong"),Z8r=o("albert"),e7r=o(" \u2014 "),dH=a("a"),o7r=o("FlaxAlbertForQuestionAnswering"),r7r=o(" (ALBERT model)"),t7r=l(),D5=a("li"),z1e=a("strong"),a7r=o("bart"),n7r=o(" \u2014 "),cH=a("a"),s7r=o("FlaxBartForQuestionAnswering"),l7r=o(" (BART model)"),i7r=l(),G5=a("li"),Q1e=a("strong"),d7r=o("bert"),c7r=o(" \u2014 "),mH=a("a"),m7r=o("FlaxBertForQuestionAnswering"),f7r=o(" (BERT model)"),g7r=l(),O5=a("li"),W1e=a("strong"),h7r=o("big_bird"),u7r=o(" \u2014 "),fH=a("a"),p7r=o("FlaxBigBirdForQuestionAnswering"),_7r=o(" (BigBird model)"),b7r=l(),V5=a("li"),H1e=a("strong"),F7r=o("distilbert"),v7r=o(" \u2014 "),gH=a("a"),T7r=o("FlaxDistilBertForQuestionAnswering"),M7r=o(" (DistilBERT model)"),E7r=l(),X5=a("li"),U1e=a("strong"),C7r=o("electra"),w7r=o(" \u2014 "),hH=a("a"),A7r=o("FlaxElectraForQuestionAnswering"),y7r=o(" (ELECTRA model)"),L7r=l(),z5=a("li"),J1e=a("strong"),x7r=o("mbart"),k7r=o(" \u2014 "),uH=a("a"),S7r=o("FlaxMBartForQuestionAnswering"),R7r=o(" (mBART model)"),B7r=l(),Q5=a("li"),Y1e=a("strong"),P7r=o("roberta"),$7r=o(" \u2014 "),pH=a("a"),I7r=o("FlaxRobertaForQuestionAnswering"),q7r=o(" (RoBERTa model)"),N7r=l(),W5=a("li"),K1e=a("strong"),j7r=o("roformer"),D7r=o(" \u2014 "),_H=a("a"),G7r=o("FlaxRoFormerForQuestionAnswering"),O7r=o(" (RoFormer model)"),V7r=l(),H5=a("li"),Z1e=a("strong"),X7r=o("xlm-roberta"),z7r=o(" \u2014 "),bH=a("a"),Q7r=o("FlaxXLMRobertaForQuestionAnswering"),W7r=o(" (XLM-RoBERTa model)"),H7r=l(),eMe=a("p"),U7r=o("Examples:"),J7r=l(),m(S8.$$.fragment),XBe=l(),Fm=a("h2"),U5=a("a"),oMe=a("span"),m(R8.$$.fragment),Y7r=l(),rMe=a("span"),K7r=o("FlaxAutoModelForTokenClassification"),zBe=l(),jr=a("div"),m(B8.$$.fragment),Z7r=l(),vm=a("p"),e9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),FH=a("a"),o9r=o("from_pretrained()"),r9r=o(" class method or the "),vH=a("a"),t9r=o("from_config()"),a9r=o(` class
method.`),n9r=l(),P8=a("p"),s9r=o("This class cannot be instantiated directly using "),tMe=a("code"),l9r=o("__init__()"),i9r=o(" (throws an error)."),d9r=l(),Bt=a("div"),m($8.$$.fragment),c9r=l(),aMe=a("p"),m9r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),f9r=l(),Tm=a("p"),g9r=o(`Note:
Loading a model from its configuration file does `),nMe=a("strong"),h9r=o("not"),u9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TH=a("a"),p9r=o("from_pretrained()"),_9r=o(" to load the model weights."),b9r=l(),sMe=a("p"),F9r=o("Examples:"),v9r=l(),m(I8.$$.fragment),T9r=l(),Po=a("div"),m(q8.$$.fragment),M9r=l(),lMe=a("p"),E9r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),C9r=l(),In=a("p"),w9r=o("The model class to instantiate is selected based on the "),iMe=a("code"),A9r=o("model_type"),y9r=o(` property of the config object (either
passed as an argument or loaded from `),dMe=a("code"),L9r=o("pretrained_model_name_or_path"),x9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cMe=a("code"),k9r=o("pretrained_model_name_or_path"),S9r=o(":"),R9r=l(),Be=a("ul"),J5=a("li"),mMe=a("strong"),B9r=o("albert"),P9r=o(" \u2014 "),MH=a("a"),$9r=o("FlaxAlbertForTokenClassification"),I9r=o(" (ALBERT model)"),q9r=l(),Y5=a("li"),fMe=a("strong"),N9r=o("bert"),j9r=o(" \u2014 "),EH=a("a"),D9r=o("FlaxBertForTokenClassification"),G9r=o(" (BERT model)"),O9r=l(),K5=a("li"),gMe=a("strong"),V9r=o("big_bird"),X9r=o(" \u2014 "),CH=a("a"),z9r=o("FlaxBigBirdForTokenClassification"),Q9r=o(" (BigBird model)"),W9r=l(),Z5=a("li"),hMe=a("strong"),H9r=o("distilbert"),U9r=o(" \u2014 "),wH=a("a"),J9r=o("FlaxDistilBertForTokenClassification"),Y9r=o(" (DistilBERT model)"),K9r=l(),e3=a("li"),uMe=a("strong"),Z9r=o("electra"),exr=o(" \u2014 "),AH=a("a"),oxr=o("FlaxElectraForTokenClassification"),rxr=o(" (ELECTRA model)"),txr=l(),o3=a("li"),pMe=a("strong"),axr=o("roberta"),nxr=o(" \u2014 "),yH=a("a"),sxr=o("FlaxRobertaForTokenClassification"),lxr=o(" (RoBERTa model)"),ixr=l(),r3=a("li"),_Me=a("strong"),dxr=o("roformer"),cxr=o(" \u2014 "),LH=a("a"),mxr=o("FlaxRoFormerForTokenClassification"),fxr=o(" (RoFormer model)"),gxr=l(),t3=a("li"),bMe=a("strong"),hxr=o("xlm-roberta"),uxr=o(" \u2014 "),xH=a("a"),pxr=o("FlaxXLMRobertaForTokenClassification"),_xr=o(" (XLM-RoBERTa model)"),bxr=l(),FMe=a("p"),Fxr=o("Examples:"),vxr=l(),m(N8.$$.fragment),QBe=l(),Mm=a("h2"),a3=a("a"),vMe=a("span"),m(j8.$$.fragment),Txr=l(),TMe=a("span"),Mxr=o("FlaxAutoModelForMultipleChoice"),WBe=l(),Dr=a("div"),m(D8.$$.fragment),Exr=l(),Em=a("p"),Cxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),kH=a("a"),wxr=o("from_pretrained()"),Axr=o(" class method or the "),SH=a("a"),yxr=o("from_config()"),Lxr=o(` class
method.`),xxr=l(),G8=a("p"),kxr=o("This class cannot be instantiated directly using "),MMe=a("code"),Sxr=o("__init__()"),Rxr=o(" (throws an error)."),Bxr=l(),Pt=a("div"),m(O8.$$.fragment),Pxr=l(),EMe=a("p"),$xr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ixr=l(),Cm=a("p"),qxr=o(`Note:
Loading a model from its configuration file does `),CMe=a("strong"),Nxr=o("not"),jxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=a("a"),Dxr=o("from_pretrained()"),Gxr=o(" to load the model weights."),Oxr=l(),wMe=a("p"),Vxr=o("Examples:"),Xxr=l(),m(V8.$$.fragment),zxr=l(),$o=a("div"),m(X8.$$.fragment),Qxr=l(),AMe=a("p"),Wxr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Hxr=l(),qn=a("p"),Uxr=o("The model class to instantiate is selected based on the "),yMe=a("code"),Jxr=o("model_type"),Yxr=o(` property of the config object (either
passed as an argument or loaded from `),LMe=a("code"),Kxr=o("pretrained_model_name_or_path"),Zxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xMe=a("code"),ekr=o("pretrained_model_name_or_path"),okr=o(":"),rkr=l(),Pe=a("ul"),n3=a("li"),kMe=a("strong"),tkr=o("albert"),akr=o(" \u2014 "),BH=a("a"),nkr=o("FlaxAlbertForMultipleChoice"),skr=o(" (ALBERT model)"),lkr=l(),s3=a("li"),SMe=a("strong"),ikr=o("bert"),dkr=o(" \u2014 "),PH=a("a"),ckr=o("FlaxBertForMultipleChoice"),mkr=o(" (BERT model)"),fkr=l(),l3=a("li"),RMe=a("strong"),gkr=o("big_bird"),hkr=o(" \u2014 "),$H=a("a"),ukr=o("FlaxBigBirdForMultipleChoice"),pkr=o(" (BigBird model)"),_kr=l(),i3=a("li"),BMe=a("strong"),bkr=o("distilbert"),Fkr=o(" \u2014 "),IH=a("a"),vkr=o("FlaxDistilBertForMultipleChoice"),Tkr=o(" (DistilBERT model)"),Mkr=l(),d3=a("li"),PMe=a("strong"),Ekr=o("electra"),Ckr=o(" \u2014 "),qH=a("a"),wkr=o("FlaxElectraForMultipleChoice"),Akr=o(" (ELECTRA model)"),ykr=l(),c3=a("li"),$Me=a("strong"),Lkr=o("roberta"),xkr=o(" \u2014 "),NH=a("a"),kkr=o("FlaxRobertaForMultipleChoice"),Skr=o(" (RoBERTa model)"),Rkr=l(),m3=a("li"),IMe=a("strong"),Bkr=o("roformer"),Pkr=o(" \u2014 "),jH=a("a"),$kr=o("FlaxRoFormerForMultipleChoice"),Ikr=o(" (RoFormer model)"),qkr=l(),f3=a("li"),qMe=a("strong"),Nkr=o("xlm-roberta"),jkr=o(" \u2014 "),DH=a("a"),Dkr=o("FlaxXLMRobertaForMultipleChoice"),Gkr=o(" (XLM-RoBERTa model)"),Okr=l(),NMe=a("p"),Vkr=o("Examples:"),Xkr=l(),m(z8.$$.fragment),HBe=l(),wm=a("h2"),g3=a("a"),jMe=a("span"),m(Q8.$$.fragment),zkr=l(),DMe=a("span"),Qkr=o("FlaxAutoModelForNextSentencePrediction"),UBe=l(),Gr=a("div"),m(W8.$$.fragment),Wkr=l(),Am=a("p"),Hkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),GH=a("a"),Ukr=o("from_pretrained()"),Jkr=o(" class method or the "),OH=a("a"),Ykr=o("from_config()"),Kkr=o(` class
method.`),Zkr=l(),H8=a("p"),eSr=o("This class cannot be instantiated directly using "),GMe=a("code"),oSr=o("__init__()"),rSr=o(" (throws an error)."),tSr=l(),$t=a("div"),m(U8.$$.fragment),aSr=l(),OMe=a("p"),nSr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),sSr=l(),ym=a("p"),lSr=o(`Note:
Loading a model from its configuration file does `),VMe=a("strong"),iSr=o("not"),dSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=a("a"),cSr=o("from_pretrained()"),mSr=o(" to load the model weights."),fSr=l(),XMe=a("p"),gSr=o("Examples:"),hSr=l(),m(J8.$$.fragment),uSr=l(),Io=a("div"),m(Y8.$$.fragment),pSr=l(),zMe=a("p"),_Sr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),bSr=l(),Nn=a("p"),FSr=o("The model class to instantiate is selected based on the "),QMe=a("code"),vSr=o("model_type"),TSr=o(` property of the config object (either
passed as an argument or loaded from `),WMe=a("code"),MSr=o("pretrained_model_name_or_path"),ESr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HMe=a("code"),CSr=o("pretrained_model_name_or_path"),wSr=o(":"),ASr=l(),UMe=a("ul"),h3=a("li"),JMe=a("strong"),ySr=o("bert"),LSr=o(" \u2014 "),XH=a("a"),xSr=o("FlaxBertForNextSentencePrediction"),kSr=o(" (BERT model)"),SSr=l(),YMe=a("p"),RSr=o("Examples:"),BSr=l(),m(K8.$$.fragment),JBe=l(),Lm=a("h2"),u3=a("a"),KMe=a("span"),m(Z8.$$.fragment),PSr=l(),ZMe=a("span"),$Sr=o("FlaxAutoModelForImageClassification"),YBe=l(),Or=a("div"),m(e7.$$.fragment),ISr=l(),xm=a("p"),qSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zH=a("a"),NSr=o("from_pretrained()"),jSr=o(" class method or the "),QH=a("a"),DSr=o("from_config()"),GSr=o(` class
method.`),OSr=l(),o7=a("p"),VSr=o("This class cannot be instantiated directly using "),e4e=a("code"),XSr=o("__init__()"),zSr=o(" (throws an error)."),QSr=l(),It=a("div"),m(r7.$$.fragment),WSr=l(),o4e=a("p"),HSr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),USr=l(),km=a("p"),JSr=o(`Note:
Loading a model from its configuration file does `),r4e=a("strong"),YSr=o("not"),KSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=a("a"),ZSr=o("from_pretrained()"),eRr=o(" to load the model weights."),oRr=l(),t4e=a("p"),rRr=o("Examples:"),tRr=l(),m(t7.$$.fragment),aRr=l(),qo=a("div"),m(a7.$$.fragment),nRr=l(),a4e=a("p"),sRr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),lRr=l(),jn=a("p"),iRr=o("The model class to instantiate is selected based on the "),n4e=a("code"),dRr=o("model_type"),cRr=o(` property of the config object (either
passed as an argument or loaded from `),s4e=a("code"),mRr=o("pretrained_model_name_or_path"),fRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l4e=a("code"),gRr=o("pretrained_model_name_or_path"),hRr=o(":"),uRr=l(),n7=a("ul"),p3=a("li"),i4e=a("strong"),pRr=o("beit"),_Rr=o(" \u2014 "),HH=a("a"),bRr=o("FlaxBeitForImageClassification"),FRr=o(" (BEiT model)"),vRr=l(),_3=a("li"),d4e=a("strong"),TRr=o("vit"),MRr=o(" \u2014 "),UH=a("a"),ERr=o("FlaxViTForImageClassification"),CRr=o(" (ViT model)"),wRr=l(),c4e=a("p"),ARr=o("Examples:"),yRr=l(),m(s7.$$.fragment),KBe=l(),Sm=a("h2"),b3=a("a"),m4e=a("span"),m(l7.$$.fragment),LRr=l(),f4e=a("span"),xRr=o("FlaxAutoModelForVision2Seq"),ZBe=l(),Vr=a("div"),m(i7.$$.fragment),kRr=l(),Rm=a("p"),SRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),JH=a("a"),RRr=o("from_pretrained()"),BRr=o(" class method or the "),YH=a("a"),PRr=o("from_config()"),$Rr=o(` class
method.`),IRr=l(),d7=a("p"),qRr=o("This class cannot be instantiated directly using "),g4e=a("code"),NRr=o("__init__()"),jRr=o(" (throws an error)."),DRr=l(),qt=a("div"),m(c7.$$.fragment),GRr=l(),h4e=a("p"),ORr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),VRr=l(),Bm=a("p"),XRr=o(`Note:
Loading a model from its configuration file does `),u4e=a("strong"),zRr=o("not"),QRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=a("a"),WRr=o("from_pretrained()"),HRr=o(" to load the model weights."),URr=l(),p4e=a("p"),JRr=o("Examples:"),YRr=l(),m(m7.$$.fragment),KRr=l(),No=a("div"),m(f7.$$.fragment),ZRr=l(),_4e=a("p"),eBr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),oBr=l(),Dn=a("p"),rBr=o("The model class to instantiate is selected based on the "),b4e=a("code"),tBr=o("model_type"),aBr=o(` property of the config object (either
passed as an argument or loaded from `),F4e=a("code"),nBr=o("pretrained_model_name_or_path"),sBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v4e=a("code"),lBr=o("pretrained_model_name_or_path"),iBr=o(":"),dBr=l(),T4e=a("ul"),F3=a("li"),M4e=a("strong"),cBr=o("vision-encoder-decoder"),mBr=o(" \u2014 "),ZH=a("a"),fBr=o("FlaxVisionEncoderDecoderModel"),gBr=o(" (Vision Encoder decoder model)"),hBr=l(),E4e=a("p"),uBr=o("Examples:"),pBr=l(),m(g7.$$.fragment),this.h()},l(c){const _=V3t('[data-svelte="svelte-1phssyn"]',document.head);Z=n(_,"META",{name:!0,content:!0}),_.forEach(t),io=i(c),de=n(c,"H1",{class:!0});var h7=s(de);Ce=n(h7,"A",{id:!0,class:!0,href:!0});var C4e=s(Ce);lo=n(C4e,"SPAN",{});var w4e=s(lo);f(ge.$$.fragment,w4e),w4e.forEach(t),C4e.forEach(t),Me=i(h7),Xo=n(h7,"SPAN",{});var bBr=s(Xo);Ii=r(bBr,"Auto Classes"),bBr.forEach(t),h7.forEach(t),Im=i(c),ma=n(c,"P",{});var oPe=s(ma);qi=r(oPe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=n(oPe,"CODE",{});var FBr=s(Ni);Fw=r(FBr,"from_pretrained()"),FBr.forEach(t),qm=r(oPe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),oPe.forEach(t),xe=i(c),co=n(c,"P",{});var v3=s(co);ji=r(v3,"Instantiating one of "),Gn=n(v3,"A",{href:!0});var vBr=s(Gn);vw=r(vBr,"AutoConfig"),vBr.forEach(t),On=r(v3,", "),Vn=n(v3,"A",{href:!0});var TBr=s(Vn);Tw=r(TBr,"AutoModel"),TBr.forEach(t),Di=r(v3,`, and
`),Xn=n(v3,"A",{href:!0});var MBr=s(Xn);Mw=r(MBr,"AutoTokenizer"),MBr.forEach(t),Gi=r(v3," will directly create a class of the relevant architecture. For instance"),v3.forEach(t),Nm=i(c),f(Da.$$.fragment,c),mo=i(c),_e=n(c,"P",{});var rPe=s(_e);m9=r(rPe,"will create a model that is an instance of "),Oi=n(rPe,"A",{href:!0});var EBr=s(Oi);f9=r(EBr,"BertModel"),EBr.forEach(t),g9=r(rPe,"."),rPe.forEach(t),zo=i(c),Ga=n(c,"P",{});var tPe=s(Ga);h9=r(tPe,"There is one class of "),jm=n(tPe,"CODE",{});var CBr=s(jm);u9=r(CBr,"AutoModel"),CBr.forEach(t),fIe=r(tPe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),tPe.forEach(t),ZSe=i(c),Vi=n(c,"H2",{class:!0});var aPe=s(Vi);Dm=n(aPe,"A",{id:!0,class:!0,href:!0});var wBr=s(Dm);WJ=n(wBr,"SPAN",{});var ABr=s(WJ);f(Ew.$$.fragment,ABr),ABr.forEach(t),wBr.forEach(t),gIe=i(aPe),HJ=n(aPe,"SPAN",{});var yBr=s(HJ);hIe=r(yBr,"Extending the Auto Classes"),yBr.forEach(t),aPe.forEach(t),eRe=i(c),zn=n(c,"P",{});var eU=s(zn);uIe=r(eU,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),UJ=n(eU,"CODE",{});var LBr=s(UJ);pIe=r(LBr,"NewModel"),LBr.forEach(t),_Ie=r(eU,", make sure you have a "),JJ=n(eU,"CODE",{});var xBr=s(JJ);bIe=r(xBr,"NewModelConfig"),xBr.forEach(t),FIe=r(eU,` then you can add those to the auto
classes like this:`),eU.forEach(t),oRe=i(c),f(Cw.$$.fragment,c),rRe=i(c),p9=n(c,"P",{});var kBr=s(p9);vIe=r(kBr,"You will then be able to use the auto classes like you would usually do!"),kBr.forEach(t),tRe=i(c),f(Gm.$$.fragment,c),aRe=i(c),Xi=n(c,"H2",{class:!0});var nPe=s(Xi);Om=n(nPe,"A",{id:!0,class:!0,href:!0});var SBr=s(Om);YJ=n(SBr,"SPAN",{});var RBr=s(YJ);f(ww.$$.fragment,RBr),RBr.forEach(t),SBr.forEach(t),TIe=i(nPe),KJ=n(nPe,"SPAN",{});var BBr=s(KJ);MIe=r(BBr,"AutoConfig"),BBr.forEach(t),nPe.forEach(t),nRe=i(c),Qo=n(c,"DIV",{class:!0});var Os=s(Qo);f(Aw.$$.fragment,Os),EIe=i(Os),yw=n(Os,"P",{});var sPe=s(yw);CIe=r(sPe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),_9=n(sPe,"A",{href:!0});var PBr=s(_9);wIe=r(PBr,"from_pretrained()"),PBr.forEach(t),AIe=r(sPe," class method."),sPe.forEach(t),yIe=i(Os),Lw=n(Os,"P",{});var lPe=s(Lw);LIe=r(lPe,"This class cannot be instantiated directly using "),ZJ=n(lPe,"CODE",{});var $Br=s(ZJ);xIe=r($Br,"__init__()"),$Br.forEach(t),kIe=r(lPe," (throws an error)."),lPe.forEach(t),SIe=i(Os),fo=n(Os,"DIV",{class:!0});var ga=s(fo);f(xw.$$.fragment,ga),RIe=i(ga),eY=n(ga,"P",{});var IBr=s(eY);BIe=r(IBr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),IBr.forEach(t),PIe=i(ga),zi=n(ga,"P",{});var oU=s(zi);$Ie=r(oU,"The configuration class to instantiate is selected based on the "),oY=n(oU,"CODE",{});var qBr=s(oY);IIe=r(qBr,"model_type"),qBr.forEach(t),qIe=r(oU,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),rY=n(oU,"CODE",{});var NBr=s(rY);NIe=r(NBr,"pretrained_model_name_or_path"),NBr.forEach(t),jIe=r(oU,":"),oU.forEach(t),DIe=i(ga),F=n(ga,"UL",{});var v=s(F);Vm=n(v,"LI",{});var A4e=s(Vm);tY=n(A4e,"STRONG",{});var jBr=s(tY);GIe=r(jBr,"albert"),jBr.forEach(t),OIe=r(A4e," \u2014 "),b9=n(A4e,"A",{href:!0});var DBr=s(b9);VIe=r(DBr,"AlbertConfig"),DBr.forEach(t),XIe=r(A4e," (ALBERT model)"),A4e.forEach(t),zIe=i(v),Xm=n(v,"LI",{});var y4e=s(Xm);aY=n(y4e,"STRONG",{});var GBr=s(aY);QIe=r(GBr,"bart"),GBr.forEach(t),WIe=r(y4e," \u2014 "),F9=n(y4e,"A",{href:!0});var OBr=s(F9);HIe=r(OBr,"BartConfig"),OBr.forEach(t),UIe=r(y4e," (BART model)"),y4e.forEach(t),JIe=i(v),zm=n(v,"LI",{});var L4e=s(zm);nY=n(L4e,"STRONG",{});var VBr=s(nY);YIe=r(VBr,"beit"),VBr.forEach(t),KIe=r(L4e," \u2014 "),v9=n(L4e,"A",{href:!0});var XBr=s(v9);ZIe=r(XBr,"BeitConfig"),XBr.forEach(t),eqe=r(L4e," (BEiT model)"),L4e.forEach(t),oqe=i(v),Qm=n(v,"LI",{});var x4e=s(Qm);sY=n(x4e,"STRONG",{});var zBr=s(sY);rqe=r(zBr,"bert"),zBr.forEach(t),tqe=r(x4e," \u2014 "),T9=n(x4e,"A",{href:!0});var QBr=s(T9);aqe=r(QBr,"BertConfig"),QBr.forEach(t),nqe=r(x4e," (BERT model)"),x4e.forEach(t),sqe=i(v),Wm=n(v,"LI",{});var k4e=s(Wm);lY=n(k4e,"STRONG",{});var WBr=s(lY);lqe=r(WBr,"bert-generation"),WBr.forEach(t),iqe=r(k4e," \u2014 "),M9=n(k4e,"A",{href:!0});var HBr=s(M9);dqe=r(HBr,"BertGenerationConfig"),HBr.forEach(t),cqe=r(k4e," (Bert Generation model)"),k4e.forEach(t),mqe=i(v),Hm=n(v,"LI",{});var S4e=s(Hm);iY=n(S4e,"STRONG",{});var UBr=s(iY);fqe=r(UBr,"big_bird"),UBr.forEach(t),gqe=r(S4e," \u2014 "),E9=n(S4e,"A",{href:!0});var JBr=s(E9);hqe=r(JBr,"BigBirdConfig"),JBr.forEach(t),uqe=r(S4e," (BigBird model)"),S4e.forEach(t),pqe=i(v),Um=n(v,"LI",{});var R4e=s(Um);dY=n(R4e,"STRONG",{});var YBr=s(dY);_qe=r(YBr,"bigbird_pegasus"),YBr.forEach(t),bqe=r(R4e," \u2014 "),C9=n(R4e,"A",{href:!0});var KBr=s(C9);Fqe=r(KBr,"BigBirdPegasusConfig"),KBr.forEach(t),vqe=r(R4e," (BigBirdPegasus model)"),R4e.forEach(t),Tqe=i(v),Jm=n(v,"LI",{});var B4e=s(Jm);cY=n(B4e,"STRONG",{});var ZBr=s(cY);Mqe=r(ZBr,"blenderbot"),ZBr.forEach(t),Eqe=r(B4e," \u2014 "),w9=n(B4e,"A",{href:!0});var ePr=s(w9);Cqe=r(ePr,"BlenderbotConfig"),ePr.forEach(t),wqe=r(B4e," (Blenderbot model)"),B4e.forEach(t),Aqe=i(v),Ym=n(v,"LI",{});var P4e=s(Ym);mY=n(P4e,"STRONG",{});var oPr=s(mY);yqe=r(oPr,"blenderbot-small"),oPr.forEach(t),Lqe=r(P4e," \u2014 "),A9=n(P4e,"A",{href:!0});var rPr=s(A9);xqe=r(rPr,"BlenderbotSmallConfig"),rPr.forEach(t),kqe=r(P4e," (BlenderbotSmall model)"),P4e.forEach(t),Sqe=i(v),Km=n(v,"LI",{});var $4e=s(Km);fY=n($4e,"STRONG",{});var tPr=s(fY);Rqe=r(tPr,"camembert"),tPr.forEach(t),Bqe=r($4e," \u2014 "),y9=n($4e,"A",{href:!0});var aPr=s(y9);Pqe=r(aPr,"CamembertConfig"),aPr.forEach(t),$qe=r($4e," (CamemBERT model)"),$4e.forEach(t),Iqe=i(v),Zm=n(v,"LI",{});var I4e=s(Zm);gY=n(I4e,"STRONG",{});var nPr=s(gY);qqe=r(nPr,"canine"),nPr.forEach(t),Nqe=r(I4e," \u2014 "),L9=n(I4e,"A",{href:!0});var sPr=s(L9);jqe=r(sPr,"CanineConfig"),sPr.forEach(t),Dqe=r(I4e," (Canine model)"),I4e.forEach(t),Gqe=i(v),ef=n(v,"LI",{});var q4e=s(ef);hY=n(q4e,"STRONG",{});var lPr=s(hY);Oqe=r(lPr,"clip"),lPr.forEach(t),Vqe=r(q4e," \u2014 "),x9=n(q4e,"A",{href:!0});var iPr=s(x9);Xqe=r(iPr,"CLIPConfig"),iPr.forEach(t),zqe=r(q4e," (CLIP model)"),q4e.forEach(t),Qqe=i(v),of=n(v,"LI",{});var N4e=s(of);uY=n(N4e,"STRONG",{});var dPr=s(uY);Wqe=r(dPr,"convbert"),dPr.forEach(t),Hqe=r(N4e," \u2014 "),k9=n(N4e,"A",{href:!0});var cPr=s(k9);Uqe=r(cPr,"ConvBertConfig"),cPr.forEach(t),Jqe=r(N4e," (ConvBERT model)"),N4e.forEach(t),Yqe=i(v),rf=n(v,"LI",{});var j4e=s(rf);pY=n(j4e,"STRONG",{});var mPr=s(pY);Kqe=r(mPr,"convnext"),mPr.forEach(t),Zqe=r(j4e," \u2014 "),S9=n(j4e,"A",{href:!0});var fPr=s(S9);eNe=r(fPr,"ConvNextConfig"),fPr.forEach(t),oNe=r(j4e," (ConvNext model)"),j4e.forEach(t),rNe=i(v),tf=n(v,"LI",{});var D4e=s(tf);_Y=n(D4e,"STRONG",{});var gPr=s(_Y);tNe=r(gPr,"ctrl"),gPr.forEach(t),aNe=r(D4e," \u2014 "),R9=n(D4e,"A",{href:!0});var hPr=s(R9);nNe=r(hPr,"CTRLConfig"),hPr.forEach(t),sNe=r(D4e," (CTRL model)"),D4e.forEach(t),lNe=i(v),af=n(v,"LI",{});var G4e=s(af);bY=n(G4e,"STRONG",{});var uPr=s(bY);iNe=r(uPr,"data2vec-audio"),uPr.forEach(t),dNe=r(G4e," \u2014 "),B9=n(G4e,"A",{href:!0});var pPr=s(B9);cNe=r(pPr,"Data2VecAudioConfig"),pPr.forEach(t),mNe=r(G4e," (Data2VecAudio model)"),G4e.forEach(t),fNe=i(v),nf=n(v,"LI",{});var O4e=s(nf);FY=n(O4e,"STRONG",{});var _Pr=s(FY);gNe=r(_Pr,"data2vec-text"),_Pr.forEach(t),hNe=r(O4e," \u2014 "),P9=n(O4e,"A",{href:!0});var bPr=s(P9);uNe=r(bPr,"Data2VecTextConfig"),bPr.forEach(t),pNe=r(O4e," (Data2VecText model)"),O4e.forEach(t),_Ne=i(v),sf=n(v,"LI",{});var V4e=s(sf);vY=n(V4e,"STRONG",{});var FPr=s(vY);bNe=r(FPr,"deberta"),FPr.forEach(t),FNe=r(V4e," \u2014 "),$9=n(V4e,"A",{href:!0});var vPr=s($9);vNe=r(vPr,"DebertaConfig"),vPr.forEach(t),TNe=r(V4e," (DeBERTa model)"),V4e.forEach(t),MNe=i(v),lf=n(v,"LI",{});var X4e=s(lf);TY=n(X4e,"STRONG",{});var TPr=s(TY);ENe=r(TPr,"deberta-v2"),TPr.forEach(t),CNe=r(X4e," \u2014 "),I9=n(X4e,"A",{href:!0});var MPr=s(I9);wNe=r(MPr,"DebertaV2Config"),MPr.forEach(t),ANe=r(X4e," (DeBERTa-v2 model)"),X4e.forEach(t),yNe=i(v),df=n(v,"LI",{});var z4e=s(df);MY=n(z4e,"STRONG",{});var EPr=s(MY);LNe=r(EPr,"decision_transformer"),EPr.forEach(t),xNe=r(z4e," \u2014 "),q9=n(z4e,"A",{href:!0});var CPr=s(q9);kNe=r(CPr,"DecisionTransformerConfig"),CPr.forEach(t),SNe=r(z4e," (Decision Transformer model)"),z4e.forEach(t),RNe=i(v),cf=n(v,"LI",{});var Q4e=s(cf);EY=n(Q4e,"STRONG",{});var wPr=s(EY);BNe=r(wPr,"deit"),wPr.forEach(t),PNe=r(Q4e," \u2014 "),N9=n(Q4e,"A",{href:!0});var APr=s(N9);$Ne=r(APr,"DeiTConfig"),APr.forEach(t),INe=r(Q4e," (DeiT model)"),Q4e.forEach(t),qNe=i(v),mf=n(v,"LI",{});var W4e=s(mf);CY=n(W4e,"STRONG",{});var yPr=s(CY);NNe=r(yPr,"detr"),yPr.forEach(t),jNe=r(W4e," \u2014 "),j9=n(W4e,"A",{href:!0});var LPr=s(j9);DNe=r(LPr,"DetrConfig"),LPr.forEach(t),GNe=r(W4e," (DETR model)"),W4e.forEach(t),ONe=i(v),ff=n(v,"LI",{});var H4e=s(ff);wY=n(H4e,"STRONG",{});var xPr=s(wY);VNe=r(xPr,"distilbert"),xPr.forEach(t),XNe=r(H4e," \u2014 "),D9=n(H4e,"A",{href:!0});var kPr=s(D9);zNe=r(kPr,"DistilBertConfig"),kPr.forEach(t),QNe=r(H4e," (DistilBERT model)"),H4e.forEach(t),WNe=i(v),gf=n(v,"LI",{});var U4e=s(gf);AY=n(U4e,"STRONG",{});var SPr=s(AY);HNe=r(SPr,"dpr"),SPr.forEach(t),UNe=r(U4e," \u2014 "),G9=n(U4e,"A",{href:!0});var RPr=s(G9);JNe=r(RPr,"DPRConfig"),RPr.forEach(t),YNe=r(U4e," (DPR model)"),U4e.forEach(t),KNe=i(v),hf=n(v,"LI",{});var J4e=s(hf);yY=n(J4e,"STRONG",{});var BPr=s(yY);ZNe=r(BPr,"dpt"),BPr.forEach(t),eje=r(J4e," \u2014 "),O9=n(J4e,"A",{href:!0});var PPr=s(O9);oje=r(PPr,"DPTConfig"),PPr.forEach(t),rje=r(J4e," (DPT model)"),J4e.forEach(t),tje=i(v),uf=n(v,"LI",{});var Y4e=s(uf);LY=n(Y4e,"STRONG",{});var $Pr=s(LY);aje=r($Pr,"electra"),$Pr.forEach(t),nje=r(Y4e," \u2014 "),V9=n(Y4e,"A",{href:!0});var IPr=s(V9);sje=r(IPr,"ElectraConfig"),IPr.forEach(t),lje=r(Y4e," (ELECTRA model)"),Y4e.forEach(t),ije=i(v),pf=n(v,"LI",{});var K4e=s(pf);xY=n(K4e,"STRONG",{});var qPr=s(xY);dje=r(qPr,"encoder-decoder"),qPr.forEach(t),cje=r(K4e," \u2014 "),X9=n(K4e,"A",{href:!0});var NPr=s(X9);mje=r(NPr,"EncoderDecoderConfig"),NPr.forEach(t),fje=r(K4e," (Encoder decoder model)"),K4e.forEach(t),gje=i(v),_f=n(v,"LI",{});var Z4e=s(_f);kY=n(Z4e,"STRONG",{});var jPr=s(kY);hje=r(jPr,"flaubert"),jPr.forEach(t),uje=r(Z4e," \u2014 "),z9=n(Z4e,"A",{href:!0});var DPr=s(z9);pje=r(DPr,"FlaubertConfig"),DPr.forEach(t),_je=r(Z4e," (FlauBERT model)"),Z4e.forEach(t),bje=i(v),bf=n(v,"LI",{});var eEe=s(bf);SY=n(eEe,"STRONG",{});var GPr=s(SY);Fje=r(GPr,"fnet"),GPr.forEach(t),vje=r(eEe," \u2014 "),Q9=n(eEe,"A",{href:!0});var OPr=s(Q9);Tje=r(OPr,"FNetConfig"),OPr.forEach(t),Mje=r(eEe," (FNet model)"),eEe.forEach(t),Eje=i(v),Ff=n(v,"LI",{});var oEe=s(Ff);RY=n(oEe,"STRONG",{});var VPr=s(RY);Cje=r(VPr,"fsmt"),VPr.forEach(t),wje=r(oEe," \u2014 "),W9=n(oEe,"A",{href:!0});var XPr=s(W9);Aje=r(XPr,"FSMTConfig"),XPr.forEach(t),yje=r(oEe," (FairSeq Machine-Translation model)"),oEe.forEach(t),Lje=i(v),vf=n(v,"LI",{});var rEe=s(vf);BY=n(rEe,"STRONG",{});var zPr=s(BY);xje=r(zPr,"funnel"),zPr.forEach(t),kje=r(rEe," \u2014 "),H9=n(rEe,"A",{href:!0});var QPr=s(H9);Sje=r(QPr,"FunnelConfig"),QPr.forEach(t),Rje=r(rEe," (Funnel Transformer model)"),rEe.forEach(t),Bje=i(v),Tf=n(v,"LI",{});var tEe=s(Tf);PY=n(tEe,"STRONG",{});var WPr=s(PY);Pje=r(WPr,"glpn"),WPr.forEach(t),$je=r(tEe," \u2014 "),U9=n(tEe,"A",{href:!0});var HPr=s(U9);Ije=r(HPr,"GLPNConfig"),HPr.forEach(t),qje=r(tEe," (GLPN model)"),tEe.forEach(t),Nje=i(v),Mf=n(v,"LI",{});var aEe=s(Mf);$Y=n(aEe,"STRONG",{});var UPr=s($Y);jje=r(UPr,"gpt2"),UPr.forEach(t),Dje=r(aEe," \u2014 "),J9=n(aEe,"A",{href:!0});var JPr=s(J9);Gje=r(JPr,"GPT2Config"),JPr.forEach(t),Oje=r(aEe," (OpenAI GPT-2 model)"),aEe.forEach(t),Vje=i(v),Ef=n(v,"LI",{});var nEe=s(Ef);IY=n(nEe,"STRONG",{});var YPr=s(IY);Xje=r(YPr,"gpt_neo"),YPr.forEach(t),zje=r(nEe," \u2014 "),Y9=n(nEe,"A",{href:!0});var KPr=s(Y9);Qje=r(KPr,"GPTNeoConfig"),KPr.forEach(t),Wje=r(nEe," (GPT Neo model)"),nEe.forEach(t),Hje=i(v),Cf=n(v,"LI",{});var sEe=s(Cf);qY=n(sEe,"STRONG",{});var ZPr=s(qY);Uje=r(ZPr,"gptj"),ZPr.forEach(t),Jje=r(sEe," \u2014 "),K9=n(sEe,"A",{href:!0});var e$r=s(K9);Yje=r(e$r,"GPTJConfig"),e$r.forEach(t),Kje=r(sEe," (GPT-J model)"),sEe.forEach(t),Zje=i(v),wf=n(v,"LI",{});var lEe=s(wf);NY=n(lEe,"STRONG",{});var o$r=s(NY);eDe=r(o$r,"hubert"),o$r.forEach(t),oDe=r(lEe," \u2014 "),Z9=n(lEe,"A",{href:!0});var r$r=s(Z9);rDe=r(r$r,"HubertConfig"),r$r.forEach(t),tDe=r(lEe," (Hubert model)"),lEe.forEach(t),aDe=i(v),Af=n(v,"LI",{});var iEe=s(Af);jY=n(iEe,"STRONG",{});var t$r=s(jY);nDe=r(t$r,"ibert"),t$r.forEach(t),sDe=r(iEe," \u2014 "),ex=n(iEe,"A",{href:!0});var a$r=s(ex);lDe=r(a$r,"IBertConfig"),a$r.forEach(t),iDe=r(iEe," (I-BERT model)"),iEe.forEach(t),dDe=i(v),yf=n(v,"LI",{});var dEe=s(yf);DY=n(dEe,"STRONG",{});var n$r=s(DY);cDe=r(n$r,"imagegpt"),n$r.forEach(t),mDe=r(dEe," \u2014 "),ox=n(dEe,"A",{href:!0});var s$r=s(ox);fDe=r(s$r,"ImageGPTConfig"),s$r.forEach(t),gDe=r(dEe," (ImageGPT model)"),dEe.forEach(t),hDe=i(v),Lf=n(v,"LI",{});var cEe=s(Lf);GY=n(cEe,"STRONG",{});var l$r=s(GY);uDe=r(l$r,"layoutlm"),l$r.forEach(t),pDe=r(cEe," \u2014 "),rx=n(cEe,"A",{href:!0});var i$r=s(rx);_De=r(i$r,"LayoutLMConfig"),i$r.forEach(t),bDe=r(cEe," (LayoutLM model)"),cEe.forEach(t),FDe=i(v),xf=n(v,"LI",{});var mEe=s(xf);OY=n(mEe,"STRONG",{});var d$r=s(OY);vDe=r(d$r,"layoutlmv2"),d$r.forEach(t),TDe=r(mEe," \u2014 "),tx=n(mEe,"A",{href:!0});var c$r=s(tx);MDe=r(c$r,"LayoutLMv2Config"),c$r.forEach(t),EDe=r(mEe," (LayoutLMv2 model)"),mEe.forEach(t),CDe=i(v),kf=n(v,"LI",{});var fEe=s(kf);VY=n(fEe,"STRONG",{});var m$r=s(VY);wDe=r(m$r,"led"),m$r.forEach(t),ADe=r(fEe," \u2014 "),ax=n(fEe,"A",{href:!0});var f$r=s(ax);yDe=r(f$r,"LEDConfig"),f$r.forEach(t),LDe=r(fEe," (LED model)"),fEe.forEach(t),xDe=i(v),Sf=n(v,"LI",{});var gEe=s(Sf);XY=n(gEe,"STRONG",{});var g$r=s(XY);kDe=r(g$r,"longformer"),g$r.forEach(t),SDe=r(gEe," \u2014 "),nx=n(gEe,"A",{href:!0});var h$r=s(nx);RDe=r(h$r,"LongformerConfig"),h$r.forEach(t),BDe=r(gEe," (Longformer model)"),gEe.forEach(t),PDe=i(v),Rf=n(v,"LI",{});var hEe=s(Rf);zY=n(hEe,"STRONG",{});var u$r=s(zY);$De=r(u$r,"luke"),u$r.forEach(t),IDe=r(hEe," \u2014 "),sx=n(hEe,"A",{href:!0});var p$r=s(sx);qDe=r(p$r,"LukeConfig"),p$r.forEach(t),NDe=r(hEe," (LUKE model)"),hEe.forEach(t),jDe=i(v),Bf=n(v,"LI",{});var uEe=s(Bf);QY=n(uEe,"STRONG",{});var _$r=s(QY);DDe=r(_$r,"lxmert"),_$r.forEach(t),GDe=r(uEe," \u2014 "),lx=n(uEe,"A",{href:!0});var b$r=s(lx);ODe=r(b$r,"LxmertConfig"),b$r.forEach(t),VDe=r(uEe," (LXMERT model)"),uEe.forEach(t),XDe=i(v),Pf=n(v,"LI",{});var pEe=s(Pf);WY=n(pEe,"STRONG",{});var F$r=s(WY);zDe=r(F$r,"m2m_100"),F$r.forEach(t),QDe=r(pEe," \u2014 "),ix=n(pEe,"A",{href:!0});var v$r=s(ix);WDe=r(v$r,"M2M100Config"),v$r.forEach(t),HDe=r(pEe," (M2M100 model)"),pEe.forEach(t),UDe=i(v),$f=n(v,"LI",{});var _Ee=s($f);HY=n(_Ee,"STRONG",{});var T$r=s(HY);JDe=r(T$r,"marian"),T$r.forEach(t),YDe=r(_Ee," \u2014 "),dx=n(_Ee,"A",{href:!0});var M$r=s(dx);KDe=r(M$r,"MarianConfig"),M$r.forEach(t),ZDe=r(_Ee," (Marian model)"),_Ee.forEach(t),eGe=i(v),If=n(v,"LI",{});var bEe=s(If);UY=n(bEe,"STRONG",{});var E$r=s(UY);oGe=r(E$r,"maskformer"),E$r.forEach(t),rGe=r(bEe," \u2014 "),cx=n(bEe,"A",{href:!0});var C$r=s(cx);tGe=r(C$r,"MaskFormerConfig"),C$r.forEach(t),aGe=r(bEe," (MaskFormer model)"),bEe.forEach(t),nGe=i(v),qf=n(v,"LI",{});var FEe=s(qf);JY=n(FEe,"STRONG",{});var w$r=s(JY);sGe=r(w$r,"mbart"),w$r.forEach(t),lGe=r(FEe," \u2014 "),mx=n(FEe,"A",{href:!0});var A$r=s(mx);iGe=r(A$r,"MBartConfig"),A$r.forEach(t),dGe=r(FEe," (mBART model)"),FEe.forEach(t),cGe=i(v),Nf=n(v,"LI",{});var vEe=s(Nf);YY=n(vEe,"STRONG",{});var y$r=s(YY);mGe=r(y$r,"megatron-bert"),y$r.forEach(t),fGe=r(vEe," \u2014 "),fx=n(vEe,"A",{href:!0});var L$r=s(fx);gGe=r(L$r,"MegatronBertConfig"),L$r.forEach(t),hGe=r(vEe," (MegatronBert model)"),vEe.forEach(t),uGe=i(v),jf=n(v,"LI",{});var TEe=s(jf);KY=n(TEe,"STRONG",{});var x$r=s(KY);pGe=r(x$r,"mobilebert"),x$r.forEach(t),_Ge=r(TEe," \u2014 "),gx=n(TEe,"A",{href:!0});var k$r=s(gx);bGe=r(k$r,"MobileBertConfig"),k$r.forEach(t),FGe=r(TEe," (MobileBERT model)"),TEe.forEach(t),vGe=i(v),Df=n(v,"LI",{});var MEe=s(Df);ZY=n(MEe,"STRONG",{});var S$r=s(ZY);TGe=r(S$r,"mpnet"),S$r.forEach(t),MGe=r(MEe," \u2014 "),hx=n(MEe,"A",{href:!0});var R$r=s(hx);EGe=r(R$r,"MPNetConfig"),R$r.forEach(t),CGe=r(MEe," (MPNet model)"),MEe.forEach(t),wGe=i(v),Gf=n(v,"LI",{});var EEe=s(Gf);eK=n(EEe,"STRONG",{});var B$r=s(eK);AGe=r(B$r,"mt5"),B$r.forEach(t),yGe=r(EEe," \u2014 "),ux=n(EEe,"A",{href:!0});var P$r=s(ux);LGe=r(P$r,"MT5Config"),P$r.forEach(t),xGe=r(EEe," (mT5 model)"),EEe.forEach(t),kGe=i(v),Of=n(v,"LI",{});var CEe=s(Of);oK=n(CEe,"STRONG",{});var $$r=s(oK);SGe=r($$r,"nystromformer"),$$r.forEach(t),RGe=r(CEe," \u2014 "),px=n(CEe,"A",{href:!0});var I$r=s(px);BGe=r(I$r,"NystromformerConfig"),I$r.forEach(t),PGe=r(CEe," (Nystromformer model)"),CEe.forEach(t),$Ge=i(v),Vf=n(v,"LI",{});var wEe=s(Vf);rK=n(wEe,"STRONG",{});var q$r=s(rK);IGe=r(q$r,"openai-gpt"),q$r.forEach(t),qGe=r(wEe," \u2014 "),_x=n(wEe,"A",{href:!0});var N$r=s(_x);NGe=r(N$r,"OpenAIGPTConfig"),N$r.forEach(t),jGe=r(wEe," (OpenAI GPT model)"),wEe.forEach(t),DGe=i(v),Xf=n(v,"LI",{});var AEe=s(Xf);tK=n(AEe,"STRONG",{});var j$r=s(tK);GGe=r(j$r,"pegasus"),j$r.forEach(t),OGe=r(AEe," \u2014 "),bx=n(AEe,"A",{href:!0});var D$r=s(bx);VGe=r(D$r,"PegasusConfig"),D$r.forEach(t),XGe=r(AEe," (Pegasus model)"),AEe.forEach(t),zGe=i(v),zf=n(v,"LI",{});var yEe=s(zf);aK=n(yEe,"STRONG",{});var G$r=s(aK);QGe=r(G$r,"perceiver"),G$r.forEach(t),WGe=r(yEe," \u2014 "),Fx=n(yEe,"A",{href:!0});var O$r=s(Fx);HGe=r(O$r,"PerceiverConfig"),O$r.forEach(t),UGe=r(yEe," (Perceiver model)"),yEe.forEach(t),JGe=i(v),Qf=n(v,"LI",{});var LEe=s(Qf);nK=n(LEe,"STRONG",{});var V$r=s(nK);YGe=r(V$r,"plbart"),V$r.forEach(t),KGe=r(LEe," \u2014 "),vx=n(LEe,"A",{href:!0});var X$r=s(vx);ZGe=r(X$r,"PLBartConfig"),X$r.forEach(t),eOe=r(LEe," (PLBart model)"),LEe.forEach(t),oOe=i(v),Wf=n(v,"LI",{});var xEe=s(Wf);sK=n(xEe,"STRONG",{});var z$r=s(sK);rOe=r(z$r,"poolformer"),z$r.forEach(t),tOe=r(xEe," \u2014 "),Tx=n(xEe,"A",{href:!0});var Q$r=s(Tx);aOe=r(Q$r,"PoolFormerConfig"),Q$r.forEach(t),nOe=r(xEe," (PoolFormer model)"),xEe.forEach(t),sOe=i(v),Hf=n(v,"LI",{});var kEe=s(Hf);lK=n(kEe,"STRONG",{});var W$r=s(lK);lOe=r(W$r,"prophetnet"),W$r.forEach(t),iOe=r(kEe," \u2014 "),Mx=n(kEe,"A",{href:!0});var H$r=s(Mx);dOe=r(H$r,"ProphetNetConfig"),H$r.forEach(t),cOe=r(kEe," (ProphetNet model)"),kEe.forEach(t),mOe=i(v),Uf=n(v,"LI",{});var SEe=s(Uf);iK=n(SEe,"STRONG",{});var U$r=s(iK);fOe=r(U$r,"qdqbert"),U$r.forEach(t),gOe=r(SEe," \u2014 "),Ex=n(SEe,"A",{href:!0});var J$r=s(Ex);hOe=r(J$r,"QDQBertConfig"),J$r.forEach(t),uOe=r(SEe," (QDQBert model)"),SEe.forEach(t),pOe=i(v),Jf=n(v,"LI",{});var REe=s(Jf);dK=n(REe,"STRONG",{});var Y$r=s(dK);_Oe=r(Y$r,"rag"),Y$r.forEach(t),bOe=r(REe," \u2014 "),Cx=n(REe,"A",{href:!0});var K$r=s(Cx);FOe=r(K$r,"RagConfig"),K$r.forEach(t),vOe=r(REe," (RAG model)"),REe.forEach(t),TOe=i(v),Yf=n(v,"LI",{});var BEe=s(Yf);cK=n(BEe,"STRONG",{});var Z$r=s(cK);MOe=r(Z$r,"realm"),Z$r.forEach(t),EOe=r(BEe," \u2014 "),wx=n(BEe,"A",{href:!0});var eIr=s(wx);COe=r(eIr,"RealmConfig"),eIr.forEach(t),wOe=r(BEe," (Realm model)"),BEe.forEach(t),AOe=i(v),Kf=n(v,"LI",{});var PEe=s(Kf);mK=n(PEe,"STRONG",{});var oIr=s(mK);yOe=r(oIr,"reformer"),oIr.forEach(t),LOe=r(PEe," \u2014 "),Ax=n(PEe,"A",{href:!0});var rIr=s(Ax);xOe=r(rIr,"ReformerConfig"),rIr.forEach(t),kOe=r(PEe," (Reformer model)"),PEe.forEach(t),SOe=i(v),Zf=n(v,"LI",{});var $Ee=s(Zf);fK=n($Ee,"STRONG",{});var tIr=s(fK);ROe=r(tIr,"regnet"),tIr.forEach(t),BOe=r($Ee," \u2014 "),yx=n($Ee,"A",{href:!0});var aIr=s(yx);POe=r(aIr,"RegNetConfig"),aIr.forEach(t),$Oe=r($Ee," (RegNet model)"),$Ee.forEach(t),IOe=i(v),eg=n(v,"LI",{});var IEe=s(eg);gK=n(IEe,"STRONG",{});var nIr=s(gK);qOe=r(nIr,"rembert"),nIr.forEach(t),NOe=r(IEe," \u2014 "),Lx=n(IEe,"A",{href:!0});var sIr=s(Lx);jOe=r(sIr,"RemBertConfig"),sIr.forEach(t),DOe=r(IEe," (RemBERT model)"),IEe.forEach(t),GOe=i(v),og=n(v,"LI",{});var qEe=s(og);hK=n(qEe,"STRONG",{});var lIr=s(hK);OOe=r(lIr,"resnet"),lIr.forEach(t),VOe=r(qEe," \u2014 "),xx=n(qEe,"A",{href:!0});var iIr=s(xx);XOe=r(iIr,"ResNetConfig"),iIr.forEach(t),zOe=r(qEe," (ResNet model)"),qEe.forEach(t),QOe=i(v),rg=n(v,"LI",{});var NEe=s(rg);uK=n(NEe,"STRONG",{});var dIr=s(uK);WOe=r(dIr,"retribert"),dIr.forEach(t),HOe=r(NEe," \u2014 "),kx=n(NEe,"A",{href:!0});var cIr=s(kx);UOe=r(cIr,"RetriBertConfig"),cIr.forEach(t),JOe=r(NEe," (RetriBERT model)"),NEe.forEach(t),YOe=i(v),tg=n(v,"LI",{});var jEe=s(tg);pK=n(jEe,"STRONG",{});var mIr=s(pK);KOe=r(mIr,"roberta"),mIr.forEach(t),ZOe=r(jEe," \u2014 "),Sx=n(jEe,"A",{href:!0});var fIr=s(Sx);eVe=r(fIr,"RobertaConfig"),fIr.forEach(t),oVe=r(jEe," (RoBERTa model)"),jEe.forEach(t),rVe=i(v),ag=n(v,"LI",{});var DEe=s(ag);_K=n(DEe,"STRONG",{});var gIr=s(_K);tVe=r(gIr,"roformer"),gIr.forEach(t),aVe=r(DEe," \u2014 "),Rx=n(DEe,"A",{href:!0});var hIr=s(Rx);nVe=r(hIr,"RoFormerConfig"),hIr.forEach(t),sVe=r(DEe," (RoFormer model)"),DEe.forEach(t),lVe=i(v),ng=n(v,"LI",{});var GEe=s(ng);bK=n(GEe,"STRONG",{});var uIr=s(bK);iVe=r(uIr,"segformer"),uIr.forEach(t),dVe=r(GEe," \u2014 "),Bx=n(GEe,"A",{href:!0});var pIr=s(Bx);cVe=r(pIr,"SegformerConfig"),pIr.forEach(t),mVe=r(GEe," (SegFormer model)"),GEe.forEach(t),fVe=i(v),sg=n(v,"LI",{});var OEe=s(sg);FK=n(OEe,"STRONG",{});var _Ir=s(FK);gVe=r(_Ir,"sew"),_Ir.forEach(t),hVe=r(OEe," \u2014 "),Px=n(OEe,"A",{href:!0});var bIr=s(Px);uVe=r(bIr,"SEWConfig"),bIr.forEach(t),pVe=r(OEe," (SEW model)"),OEe.forEach(t),_Ve=i(v),lg=n(v,"LI",{});var VEe=s(lg);vK=n(VEe,"STRONG",{});var FIr=s(vK);bVe=r(FIr,"sew-d"),FIr.forEach(t),FVe=r(VEe," \u2014 "),$x=n(VEe,"A",{href:!0});var vIr=s($x);vVe=r(vIr,"SEWDConfig"),vIr.forEach(t),TVe=r(VEe," (SEW-D model)"),VEe.forEach(t),MVe=i(v),ig=n(v,"LI",{});var XEe=s(ig);TK=n(XEe,"STRONG",{});var TIr=s(TK);EVe=r(TIr,"speech-encoder-decoder"),TIr.forEach(t),CVe=r(XEe," \u2014 "),Ix=n(XEe,"A",{href:!0});var MIr=s(Ix);wVe=r(MIr,"SpeechEncoderDecoderConfig"),MIr.forEach(t),AVe=r(XEe," (Speech Encoder decoder model)"),XEe.forEach(t),yVe=i(v),dg=n(v,"LI",{});var zEe=s(dg);MK=n(zEe,"STRONG",{});var EIr=s(MK);LVe=r(EIr,"speech_to_text"),EIr.forEach(t),xVe=r(zEe," \u2014 "),qx=n(zEe,"A",{href:!0});var CIr=s(qx);kVe=r(CIr,"Speech2TextConfig"),CIr.forEach(t),SVe=r(zEe," (Speech2Text model)"),zEe.forEach(t),RVe=i(v),cg=n(v,"LI",{});var QEe=s(cg);EK=n(QEe,"STRONG",{});var wIr=s(EK);BVe=r(wIr,"speech_to_text_2"),wIr.forEach(t),PVe=r(QEe," \u2014 "),Nx=n(QEe,"A",{href:!0});var AIr=s(Nx);$Ve=r(AIr,"Speech2Text2Config"),AIr.forEach(t),IVe=r(QEe," (Speech2Text2 model)"),QEe.forEach(t),qVe=i(v),mg=n(v,"LI",{});var WEe=s(mg);CK=n(WEe,"STRONG",{});var yIr=s(CK);NVe=r(yIr,"splinter"),yIr.forEach(t),jVe=r(WEe," \u2014 "),jx=n(WEe,"A",{href:!0});var LIr=s(jx);DVe=r(LIr,"SplinterConfig"),LIr.forEach(t),GVe=r(WEe," (Splinter model)"),WEe.forEach(t),OVe=i(v),fg=n(v,"LI",{});var HEe=s(fg);wK=n(HEe,"STRONG",{});var xIr=s(wK);VVe=r(xIr,"squeezebert"),xIr.forEach(t),XVe=r(HEe," \u2014 "),Dx=n(HEe,"A",{href:!0});var kIr=s(Dx);zVe=r(kIr,"SqueezeBertConfig"),kIr.forEach(t),QVe=r(HEe," (SqueezeBERT model)"),HEe.forEach(t),WVe=i(v),gg=n(v,"LI",{});var UEe=s(gg);AK=n(UEe,"STRONG",{});var SIr=s(AK);HVe=r(SIr,"swin"),SIr.forEach(t),UVe=r(UEe," \u2014 "),Gx=n(UEe,"A",{href:!0});var RIr=s(Gx);JVe=r(RIr,"SwinConfig"),RIr.forEach(t),YVe=r(UEe," (Swin model)"),UEe.forEach(t),KVe=i(v),hg=n(v,"LI",{});var JEe=s(hg);yK=n(JEe,"STRONG",{});var BIr=s(yK);ZVe=r(BIr,"t5"),BIr.forEach(t),eXe=r(JEe," \u2014 "),Ox=n(JEe,"A",{href:!0});var PIr=s(Ox);oXe=r(PIr,"T5Config"),PIr.forEach(t),rXe=r(JEe," (T5 model)"),JEe.forEach(t),tXe=i(v),ug=n(v,"LI",{});var YEe=s(ug);LK=n(YEe,"STRONG",{});var $Ir=s(LK);aXe=r($Ir,"tapas"),$Ir.forEach(t),nXe=r(YEe," \u2014 "),Vx=n(YEe,"A",{href:!0});var IIr=s(Vx);sXe=r(IIr,"TapasConfig"),IIr.forEach(t),lXe=r(YEe," (TAPAS model)"),YEe.forEach(t),iXe=i(v),pg=n(v,"LI",{});var KEe=s(pg);xK=n(KEe,"STRONG",{});var qIr=s(xK);dXe=r(qIr,"transfo-xl"),qIr.forEach(t),cXe=r(KEe," \u2014 "),Xx=n(KEe,"A",{href:!0});var NIr=s(Xx);mXe=r(NIr,"TransfoXLConfig"),NIr.forEach(t),fXe=r(KEe," (Transformer-XL model)"),KEe.forEach(t),gXe=i(v),_g=n(v,"LI",{});var ZEe=s(_g);kK=n(ZEe,"STRONG",{});var jIr=s(kK);hXe=r(jIr,"trocr"),jIr.forEach(t),uXe=r(ZEe," \u2014 "),zx=n(ZEe,"A",{href:!0});var DIr=s(zx);pXe=r(DIr,"TrOCRConfig"),DIr.forEach(t),_Xe=r(ZEe," (TrOCR model)"),ZEe.forEach(t),bXe=i(v),bg=n(v,"LI",{});var eCe=s(bg);SK=n(eCe,"STRONG",{});var GIr=s(SK);FXe=r(GIr,"unispeech"),GIr.forEach(t),vXe=r(eCe," \u2014 "),Qx=n(eCe,"A",{href:!0});var OIr=s(Qx);TXe=r(OIr,"UniSpeechConfig"),OIr.forEach(t),MXe=r(eCe," (UniSpeech model)"),eCe.forEach(t),EXe=i(v),Fg=n(v,"LI",{});var oCe=s(Fg);RK=n(oCe,"STRONG",{});var VIr=s(RK);CXe=r(VIr,"unispeech-sat"),VIr.forEach(t),wXe=r(oCe," \u2014 "),Wx=n(oCe,"A",{href:!0});var XIr=s(Wx);AXe=r(XIr,"UniSpeechSatConfig"),XIr.forEach(t),yXe=r(oCe," (UniSpeechSat model)"),oCe.forEach(t),LXe=i(v),vg=n(v,"LI",{});var rCe=s(vg);BK=n(rCe,"STRONG",{});var zIr=s(BK);xXe=r(zIr,"van"),zIr.forEach(t),kXe=r(rCe," \u2014 "),Hx=n(rCe,"A",{href:!0});var QIr=s(Hx);SXe=r(QIr,"VanConfig"),QIr.forEach(t),RXe=r(rCe," (VAN model)"),rCe.forEach(t),BXe=i(v),Tg=n(v,"LI",{});var tCe=s(Tg);PK=n(tCe,"STRONG",{});var WIr=s(PK);PXe=r(WIr,"vilt"),WIr.forEach(t),$Xe=r(tCe," \u2014 "),Ux=n(tCe,"A",{href:!0});var HIr=s(Ux);IXe=r(HIr,"ViltConfig"),HIr.forEach(t),qXe=r(tCe," (ViLT model)"),tCe.forEach(t),NXe=i(v),Mg=n(v,"LI",{});var aCe=s(Mg);$K=n(aCe,"STRONG",{});var UIr=s($K);jXe=r(UIr,"vision-encoder-decoder"),UIr.forEach(t),DXe=r(aCe," \u2014 "),Jx=n(aCe,"A",{href:!0});var JIr=s(Jx);GXe=r(JIr,"VisionEncoderDecoderConfig"),JIr.forEach(t),OXe=r(aCe," (Vision Encoder decoder model)"),aCe.forEach(t),VXe=i(v),Eg=n(v,"LI",{});var nCe=s(Eg);IK=n(nCe,"STRONG",{});var YIr=s(IK);XXe=r(YIr,"vision-text-dual-encoder"),YIr.forEach(t),zXe=r(nCe," \u2014 "),Yx=n(nCe,"A",{href:!0});var KIr=s(Yx);QXe=r(KIr,"VisionTextDualEncoderConfig"),KIr.forEach(t),WXe=r(nCe," (VisionTextDualEncoder model)"),nCe.forEach(t),HXe=i(v),Cg=n(v,"LI",{});var sCe=s(Cg);qK=n(sCe,"STRONG",{});var ZIr=s(qK);UXe=r(ZIr,"visual_bert"),ZIr.forEach(t),JXe=r(sCe," \u2014 "),Kx=n(sCe,"A",{href:!0});var eqr=s(Kx);YXe=r(eqr,"VisualBertConfig"),eqr.forEach(t),KXe=r(sCe," (VisualBert model)"),sCe.forEach(t),ZXe=i(v),wg=n(v,"LI",{});var lCe=s(wg);NK=n(lCe,"STRONG",{});var oqr=s(NK);eze=r(oqr,"vit"),oqr.forEach(t),oze=r(lCe," \u2014 "),Zx=n(lCe,"A",{href:!0});var rqr=s(Zx);rze=r(rqr,"ViTConfig"),rqr.forEach(t),tze=r(lCe," (ViT model)"),lCe.forEach(t),aze=i(v),Ag=n(v,"LI",{});var iCe=s(Ag);jK=n(iCe,"STRONG",{});var tqr=s(jK);nze=r(tqr,"vit_mae"),tqr.forEach(t),sze=r(iCe," \u2014 "),ek=n(iCe,"A",{href:!0});var aqr=s(ek);lze=r(aqr,"ViTMAEConfig"),aqr.forEach(t),ize=r(iCe," (ViTMAE model)"),iCe.forEach(t),dze=i(v),yg=n(v,"LI",{});var dCe=s(yg);DK=n(dCe,"STRONG",{});var nqr=s(DK);cze=r(nqr,"wav2vec2"),nqr.forEach(t),mze=r(dCe," \u2014 "),ok=n(dCe,"A",{href:!0});var sqr=s(ok);fze=r(sqr,"Wav2Vec2Config"),sqr.forEach(t),gze=r(dCe," (Wav2Vec2 model)"),dCe.forEach(t),hze=i(v),Lg=n(v,"LI",{});var cCe=s(Lg);GK=n(cCe,"STRONG",{});var lqr=s(GK);uze=r(lqr,"wavlm"),lqr.forEach(t),pze=r(cCe," \u2014 "),rk=n(cCe,"A",{href:!0});var iqr=s(rk);_ze=r(iqr,"WavLMConfig"),iqr.forEach(t),bze=r(cCe," (WavLM model)"),cCe.forEach(t),Fze=i(v),xg=n(v,"LI",{});var mCe=s(xg);OK=n(mCe,"STRONG",{});var dqr=s(OK);vze=r(dqr,"xglm"),dqr.forEach(t),Tze=r(mCe," \u2014 "),tk=n(mCe,"A",{href:!0});var cqr=s(tk);Mze=r(cqr,"XGLMConfig"),cqr.forEach(t),Eze=r(mCe," (XGLM model)"),mCe.forEach(t),Cze=i(v),kg=n(v,"LI",{});var fCe=s(kg);VK=n(fCe,"STRONG",{});var mqr=s(VK);wze=r(mqr,"xlm"),mqr.forEach(t),Aze=r(fCe," \u2014 "),ak=n(fCe,"A",{href:!0});var fqr=s(ak);yze=r(fqr,"XLMConfig"),fqr.forEach(t),Lze=r(fCe," (XLM model)"),fCe.forEach(t),xze=i(v),Sg=n(v,"LI",{});var gCe=s(Sg);XK=n(gCe,"STRONG",{});var gqr=s(XK);kze=r(gqr,"xlm-prophetnet"),gqr.forEach(t),Sze=r(gCe," \u2014 "),nk=n(gCe,"A",{href:!0});var hqr=s(nk);Rze=r(hqr,"XLMProphetNetConfig"),hqr.forEach(t),Bze=r(gCe," (XLMProphetNet model)"),gCe.forEach(t),Pze=i(v),Rg=n(v,"LI",{});var hCe=s(Rg);zK=n(hCe,"STRONG",{});var uqr=s(zK);$ze=r(uqr,"xlm-roberta"),uqr.forEach(t),Ize=r(hCe," \u2014 "),sk=n(hCe,"A",{href:!0});var pqr=s(sk);qze=r(pqr,"XLMRobertaConfig"),pqr.forEach(t),Nze=r(hCe," (XLM-RoBERTa model)"),hCe.forEach(t),jze=i(v),Bg=n(v,"LI",{});var uCe=s(Bg);QK=n(uCe,"STRONG",{});var _qr=s(QK);Dze=r(_qr,"xlm-roberta-xl"),_qr.forEach(t),Gze=r(uCe," \u2014 "),lk=n(uCe,"A",{href:!0});var bqr=s(lk);Oze=r(bqr,"XLMRobertaXLConfig"),bqr.forEach(t),Vze=r(uCe," (XLM-RoBERTa-XL model)"),uCe.forEach(t),Xze=i(v),Pg=n(v,"LI",{});var pCe=s(Pg);WK=n(pCe,"STRONG",{});var Fqr=s(WK);zze=r(Fqr,"xlnet"),Fqr.forEach(t),Qze=r(pCe," \u2014 "),ik=n(pCe,"A",{href:!0});var vqr=s(ik);Wze=r(vqr,"XLNetConfig"),vqr.forEach(t),Hze=r(pCe," (XLNet model)"),pCe.forEach(t),Uze=i(v),$g=n(v,"LI",{});var _Ce=s($g);HK=n(_Ce,"STRONG",{});var Tqr=s(HK);Jze=r(Tqr,"yoso"),Tqr.forEach(t),Yze=r(_Ce," \u2014 "),dk=n(_Ce,"A",{href:!0});var Mqr=s(dk);Kze=r(Mqr,"YosoConfig"),Mqr.forEach(t),Zze=r(_Ce," (YOSO model)"),_Ce.forEach(t),v.forEach(t),eQe=i(ga),UK=n(ga,"P",{});var Eqr=s(UK);oQe=r(Eqr,"Examples:"),Eqr.forEach(t),rQe=i(ga),f(kw.$$.fragment,ga),ga.forEach(t),tQe=i(Os),Ig=n(Os,"DIV",{class:!0});var iPe=s(Ig);f(Sw.$$.fragment,iPe),aQe=i(iPe),JK=n(iPe,"P",{});var Cqr=s(JK);nQe=r(Cqr,"Register a new configuration for this class."),Cqr.forEach(t),iPe.forEach(t),Os.forEach(t),sRe=i(c),Qi=n(c,"H2",{class:!0});var dPe=s(Qi);qg=n(dPe,"A",{id:!0,class:!0,href:!0});var wqr=s(qg);YK=n(wqr,"SPAN",{});var Aqr=s(YK);f(Rw.$$.fragment,Aqr),Aqr.forEach(t),wqr.forEach(t),sQe=i(dPe),KK=n(dPe,"SPAN",{});var yqr=s(KK);lQe=r(yqr,"AutoTokenizer"),yqr.forEach(t),dPe.forEach(t),lRe=i(c),Wo=n(c,"DIV",{class:!0});var Vs=s(Wo);f(Bw.$$.fragment,Vs),iQe=i(Vs),Pw=n(Vs,"P",{});var cPe=s(Pw);dQe=r(cPe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ck=n(cPe,"A",{href:!0});var Lqr=s(ck);cQe=r(Lqr,"AutoTokenizer.from_pretrained()"),Lqr.forEach(t),mQe=r(cPe," class method."),cPe.forEach(t),fQe=i(Vs),$w=n(Vs,"P",{});var mPe=s($w);gQe=r(mPe,"This class cannot be instantiated directly using "),ZK=n(mPe,"CODE",{});var xqr=s(ZK);hQe=r(xqr,"__init__()"),xqr.forEach(t),uQe=r(mPe," (throws an error)."),mPe.forEach(t),pQe=i(Vs),go=n(Vs,"DIV",{class:!0});var ha=s(go);f(Iw.$$.fragment,ha),_Qe=i(ha),eZ=n(ha,"P",{});var kqr=s(eZ);bQe=r(kqr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),kqr.forEach(t),FQe=i(ha),Oa=n(ha,"P",{});var T3=s(Oa);vQe=r(T3,"The tokenizer class to instantiate is selected based on the "),oZ=n(T3,"CODE",{});var Sqr=s(oZ);TQe=r(Sqr,"model_type"),Sqr.forEach(t),MQe=r(T3,` property of the config object (either
passed as an argument or loaded from `),rZ=n(T3,"CODE",{});var Rqr=s(rZ);EQe=r(Rqr,"pretrained_model_name_or_path"),Rqr.forEach(t),CQe=r(T3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tZ=n(T3,"CODE",{});var Bqr=s(tZ);wQe=r(Bqr,"pretrained_model_name_or_path"),Bqr.forEach(t),AQe=r(T3,":"),T3.forEach(t),yQe=i(ha),C=n(ha,"UL",{});var w=s(C);Qn=n(w,"LI",{});var u7=s(Qn);aZ=n(u7,"STRONG",{});var Pqr=s(aZ);LQe=r(Pqr,"albert"),Pqr.forEach(t),xQe=r(u7," \u2014 "),mk=n(u7,"A",{href:!0});var $qr=s(mk);kQe=r($qr,"AlbertTokenizer"),$qr.forEach(t),SQe=r(u7," or "),fk=n(u7,"A",{href:!0});var Iqr=s(fk);RQe=r(Iqr,"AlbertTokenizerFast"),Iqr.forEach(t),BQe=r(u7," (ALBERT model)"),u7.forEach(t),PQe=i(w),Wn=n(w,"LI",{});var p7=s(Wn);nZ=n(p7,"STRONG",{});var qqr=s(nZ);$Qe=r(qqr,"bart"),qqr.forEach(t),IQe=r(p7," \u2014 "),gk=n(p7,"A",{href:!0});var Nqr=s(gk);qQe=r(Nqr,"BartTokenizer"),Nqr.forEach(t),NQe=r(p7," or "),hk=n(p7,"A",{href:!0});var jqr=s(hk);jQe=r(jqr,"BartTokenizerFast"),jqr.forEach(t),DQe=r(p7," (BART model)"),p7.forEach(t),GQe=i(w),Hn=n(w,"LI",{});var _7=s(Hn);sZ=n(_7,"STRONG",{});var Dqr=s(sZ);OQe=r(Dqr,"barthez"),Dqr.forEach(t),VQe=r(_7," \u2014 "),uk=n(_7,"A",{href:!0});var Gqr=s(uk);XQe=r(Gqr,"BarthezTokenizer"),Gqr.forEach(t),zQe=r(_7," or "),pk=n(_7,"A",{href:!0});var Oqr=s(pk);QQe=r(Oqr,"BarthezTokenizerFast"),Oqr.forEach(t),WQe=r(_7," (BARThez model)"),_7.forEach(t),HQe=i(w),Ng=n(w,"LI",{});var bCe=s(Ng);lZ=n(bCe,"STRONG",{});var Vqr=s(lZ);UQe=r(Vqr,"bartpho"),Vqr.forEach(t),JQe=r(bCe," \u2014 "),_k=n(bCe,"A",{href:!0});var Xqr=s(_k);YQe=r(Xqr,"BartphoTokenizer"),Xqr.forEach(t),KQe=r(bCe," (BARTpho model)"),bCe.forEach(t),ZQe=i(w),Un=n(w,"LI",{});var b7=s(Un);iZ=n(b7,"STRONG",{});var zqr=s(iZ);eWe=r(zqr,"bert"),zqr.forEach(t),oWe=r(b7," \u2014 "),bk=n(b7,"A",{href:!0});var Qqr=s(bk);rWe=r(Qqr,"BertTokenizer"),Qqr.forEach(t),tWe=r(b7," or "),Fk=n(b7,"A",{href:!0});var Wqr=s(Fk);aWe=r(Wqr,"BertTokenizerFast"),Wqr.forEach(t),nWe=r(b7," (BERT model)"),b7.forEach(t),sWe=i(w),jg=n(w,"LI",{});var FCe=s(jg);dZ=n(FCe,"STRONG",{});var Hqr=s(dZ);lWe=r(Hqr,"bert-generation"),Hqr.forEach(t),iWe=r(FCe," \u2014 "),vk=n(FCe,"A",{href:!0});var Uqr=s(vk);dWe=r(Uqr,"BertGenerationTokenizer"),Uqr.forEach(t),cWe=r(FCe," (Bert Generation model)"),FCe.forEach(t),mWe=i(w),Dg=n(w,"LI",{});var vCe=s(Dg);cZ=n(vCe,"STRONG",{});var Jqr=s(cZ);fWe=r(Jqr,"bert-japanese"),Jqr.forEach(t),gWe=r(vCe," \u2014 "),Tk=n(vCe,"A",{href:!0});var Yqr=s(Tk);hWe=r(Yqr,"BertJapaneseTokenizer"),Yqr.forEach(t),uWe=r(vCe," (BertJapanese model)"),vCe.forEach(t),pWe=i(w),Gg=n(w,"LI",{});var TCe=s(Gg);mZ=n(TCe,"STRONG",{});var Kqr=s(mZ);_We=r(Kqr,"bertweet"),Kqr.forEach(t),bWe=r(TCe," \u2014 "),Mk=n(TCe,"A",{href:!0});var Zqr=s(Mk);FWe=r(Zqr,"BertweetTokenizer"),Zqr.forEach(t),vWe=r(TCe," (Bertweet model)"),TCe.forEach(t),TWe=i(w),Jn=n(w,"LI",{});var F7=s(Jn);fZ=n(F7,"STRONG",{});var eNr=s(fZ);MWe=r(eNr,"big_bird"),eNr.forEach(t),EWe=r(F7," \u2014 "),Ek=n(F7,"A",{href:!0});var oNr=s(Ek);CWe=r(oNr,"BigBirdTokenizer"),oNr.forEach(t),wWe=r(F7," or "),Ck=n(F7,"A",{href:!0});var rNr=s(Ck);AWe=r(rNr,"BigBirdTokenizerFast"),rNr.forEach(t),yWe=r(F7," (BigBird model)"),F7.forEach(t),LWe=i(w),Yn=n(w,"LI",{});var v7=s(Yn);gZ=n(v7,"STRONG",{});var tNr=s(gZ);xWe=r(tNr,"bigbird_pegasus"),tNr.forEach(t),kWe=r(v7," \u2014 "),wk=n(v7,"A",{href:!0});var aNr=s(wk);SWe=r(aNr,"PegasusTokenizer"),aNr.forEach(t),RWe=r(v7," or "),Ak=n(v7,"A",{href:!0});var nNr=s(Ak);BWe=r(nNr,"PegasusTokenizerFast"),nNr.forEach(t),PWe=r(v7," (BigBirdPegasus model)"),v7.forEach(t),$We=i(w),Kn=n(w,"LI",{});var T7=s(Kn);hZ=n(T7,"STRONG",{});var sNr=s(hZ);IWe=r(sNr,"blenderbot"),sNr.forEach(t),qWe=r(T7," \u2014 "),yk=n(T7,"A",{href:!0});var lNr=s(yk);NWe=r(lNr,"BlenderbotTokenizer"),lNr.forEach(t),jWe=r(T7," or "),Lk=n(T7,"A",{href:!0});var iNr=s(Lk);DWe=r(iNr,"BlenderbotTokenizerFast"),iNr.forEach(t),GWe=r(T7," (Blenderbot model)"),T7.forEach(t),OWe=i(w),Og=n(w,"LI",{});var MCe=s(Og);uZ=n(MCe,"STRONG",{});var dNr=s(uZ);VWe=r(dNr,"blenderbot-small"),dNr.forEach(t),XWe=r(MCe," \u2014 "),xk=n(MCe,"A",{href:!0});var cNr=s(xk);zWe=r(cNr,"BlenderbotSmallTokenizer"),cNr.forEach(t),QWe=r(MCe," (BlenderbotSmall model)"),MCe.forEach(t),WWe=i(w),Vg=n(w,"LI",{});var ECe=s(Vg);pZ=n(ECe,"STRONG",{});var mNr=s(pZ);HWe=r(mNr,"byt5"),mNr.forEach(t),UWe=r(ECe," \u2014 "),kk=n(ECe,"A",{href:!0});var fNr=s(kk);JWe=r(fNr,"ByT5Tokenizer"),fNr.forEach(t),YWe=r(ECe," (ByT5 model)"),ECe.forEach(t),KWe=i(w),Zn=n(w,"LI",{});var M7=s(Zn);_Z=n(M7,"STRONG",{});var gNr=s(_Z);ZWe=r(gNr,"camembert"),gNr.forEach(t),eHe=r(M7," \u2014 "),Sk=n(M7,"A",{href:!0});var hNr=s(Sk);oHe=r(hNr,"CamembertTokenizer"),hNr.forEach(t),rHe=r(M7," or "),Rk=n(M7,"A",{href:!0});var uNr=s(Rk);tHe=r(uNr,"CamembertTokenizerFast"),uNr.forEach(t),aHe=r(M7," (CamemBERT model)"),M7.forEach(t),nHe=i(w),Xg=n(w,"LI",{});var CCe=s(Xg);bZ=n(CCe,"STRONG",{});var pNr=s(bZ);sHe=r(pNr,"canine"),pNr.forEach(t),lHe=r(CCe," \u2014 "),Bk=n(CCe,"A",{href:!0});var _Nr=s(Bk);iHe=r(_Nr,"CanineTokenizer"),_Nr.forEach(t),dHe=r(CCe," (Canine model)"),CCe.forEach(t),cHe=i(w),es=n(w,"LI",{});var E7=s(es);FZ=n(E7,"STRONG",{});var bNr=s(FZ);mHe=r(bNr,"clip"),bNr.forEach(t),fHe=r(E7," \u2014 "),Pk=n(E7,"A",{href:!0});var FNr=s(Pk);gHe=r(FNr,"CLIPTokenizer"),FNr.forEach(t),hHe=r(E7," or "),$k=n(E7,"A",{href:!0});var vNr=s($k);uHe=r(vNr,"CLIPTokenizerFast"),vNr.forEach(t),pHe=r(E7," (CLIP model)"),E7.forEach(t),_He=i(w),os=n(w,"LI",{});var C7=s(os);vZ=n(C7,"STRONG",{});var TNr=s(vZ);bHe=r(TNr,"convbert"),TNr.forEach(t),FHe=r(C7," \u2014 "),Ik=n(C7,"A",{href:!0});var MNr=s(Ik);vHe=r(MNr,"ConvBertTokenizer"),MNr.forEach(t),THe=r(C7," or "),qk=n(C7,"A",{href:!0});var ENr=s(qk);MHe=r(ENr,"ConvBertTokenizerFast"),ENr.forEach(t),EHe=r(C7," (ConvBERT model)"),C7.forEach(t),CHe=i(w),rs=n(w,"LI",{});var w7=s(rs);TZ=n(w7,"STRONG",{});var CNr=s(TZ);wHe=r(CNr,"cpm"),CNr.forEach(t),AHe=r(w7," \u2014 "),Nk=n(w7,"A",{href:!0});var wNr=s(Nk);yHe=r(wNr,"CpmTokenizer"),wNr.forEach(t),LHe=r(w7," or "),MZ=n(w7,"CODE",{});var ANr=s(MZ);xHe=r(ANr,"CpmTokenizerFast"),ANr.forEach(t),kHe=r(w7," (CPM model)"),w7.forEach(t),SHe=i(w),zg=n(w,"LI",{});var wCe=s(zg);EZ=n(wCe,"STRONG",{});var yNr=s(EZ);RHe=r(yNr,"ctrl"),yNr.forEach(t),BHe=r(wCe," \u2014 "),jk=n(wCe,"A",{href:!0});var LNr=s(jk);PHe=r(LNr,"CTRLTokenizer"),LNr.forEach(t),$He=r(wCe," (CTRL model)"),wCe.forEach(t),IHe=i(w),ts=n(w,"LI",{});var A7=s(ts);CZ=n(A7,"STRONG",{});var xNr=s(CZ);qHe=r(xNr,"deberta"),xNr.forEach(t),NHe=r(A7," \u2014 "),Dk=n(A7,"A",{href:!0});var kNr=s(Dk);jHe=r(kNr,"DebertaTokenizer"),kNr.forEach(t),DHe=r(A7," or "),Gk=n(A7,"A",{href:!0});var SNr=s(Gk);GHe=r(SNr,"DebertaTokenizerFast"),SNr.forEach(t),OHe=r(A7," (DeBERTa model)"),A7.forEach(t),VHe=i(w),Qg=n(w,"LI",{});var ACe=s(Qg);wZ=n(ACe,"STRONG",{});var RNr=s(wZ);XHe=r(RNr,"deberta-v2"),RNr.forEach(t),zHe=r(ACe," \u2014 "),Ok=n(ACe,"A",{href:!0});var BNr=s(Ok);QHe=r(BNr,"DebertaV2Tokenizer"),BNr.forEach(t),WHe=r(ACe," (DeBERTa-v2 model)"),ACe.forEach(t),HHe=i(w),as=n(w,"LI",{});var y7=s(as);AZ=n(y7,"STRONG",{});var PNr=s(AZ);UHe=r(PNr,"distilbert"),PNr.forEach(t),JHe=r(y7," \u2014 "),Vk=n(y7,"A",{href:!0});var $Nr=s(Vk);YHe=r($Nr,"DistilBertTokenizer"),$Nr.forEach(t),KHe=r(y7," or "),Xk=n(y7,"A",{href:!0});var INr=s(Xk);ZHe=r(INr,"DistilBertTokenizerFast"),INr.forEach(t),eUe=r(y7," (DistilBERT model)"),y7.forEach(t),oUe=i(w),ns=n(w,"LI",{});var L7=s(ns);yZ=n(L7,"STRONG",{});var qNr=s(yZ);rUe=r(qNr,"dpr"),qNr.forEach(t),tUe=r(L7," \u2014 "),zk=n(L7,"A",{href:!0});var NNr=s(zk);aUe=r(NNr,"DPRQuestionEncoderTokenizer"),NNr.forEach(t),nUe=r(L7," or "),Qk=n(L7,"A",{href:!0});var jNr=s(Qk);sUe=r(jNr,"DPRQuestionEncoderTokenizerFast"),jNr.forEach(t),lUe=r(L7," (DPR model)"),L7.forEach(t),iUe=i(w),ss=n(w,"LI",{});var x7=s(ss);LZ=n(x7,"STRONG",{});var DNr=s(LZ);dUe=r(DNr,"electra"),DNr.forEach(t),cUe=r(x7," \u2014 "),Wk=n(x7,"A",{href:!0});var GNr=s(Wk);mUe=r(GNr,"ElectraTokenizer"),GNr.forEach(t),fUe=r(x7," or "),Hk=n(x7,"A",{href:!0});var ONr=s(Hk);gUe=r(ONr,"ElectraTokenizerFast"),ONr.forEach(t),hUe=r(x7," (ELECTRA model)"),x7.forEach(t),uUe=i(w),Wg=n(w,"LI",{});var yCe=s(Wg);xZ=n(yCe,"STRONG",{});var VNr=s(xZ);pUe=r(VNr,"flaubert"),VNr.forEach(t),_Ue=r(yCe," \u2014 "),Uk=n(yCe,"A",{href:!0});var XNr=s(Uk);bUe=r(XNr,"FlaubertTokenizer"),XNr.forEach(t),FUe=r(yCe," (FlauBERT model)"),yCe.forEach(t),vUe=i(w),ls=n(w,"LI",{});var k7=s(ls);kZ=n(k7,"STRONG",{});var zNr=s(kZ);TUe=r(zNr,"fnet"),zNr.forEach(t),MUe=r(k7," \u2014 "),Jk=n(k7,"A",{href:!0});var QNr=s(Jk);EUe=r(QNr,"FNetTokenizer"),QNr.forEach(t),CUe=r(k7," or "),Yk=n(k7,"A",{href:!0});var WNr=s(Yk);wUe=r(WNr,"FNetTokenizerFast"),WNr.forEach(t),AUe=r(k7," (FNet model)"),k7.forEach(t),yUe=i(w),Hg=n(w,"LI",{});var LCe=s(Hg);SZ=n(LCe,"STRONG",{});var HNr=s(SZ);LUe=r(HNr,"fsmt"),HNr.forEach(t),xUe=r(LCe," \u2014 "),Kk=n(LCe,"A",{href:!0});var UNr=s(Kk);kUe=r(UNr,"FSMTTokenizer"),UNr.forEach(t),SUe=r(LCe," (FairSeq Machine-Translation model)"),LCe.forEach(t),RUe=i(w),is=n(w,"LI",{});var S7=s(is);RZ=n(S7,"STRONG",{});var JNr=s(RZ);BUe=r(JNr,"funnel"),JNr.forEach(t),PUe=r(S7," \u2014 "),Zk=n(S7,"A",{href:!0});var YNr=s(Zk);$Ue=r(YNr,"FunnelTokenizer"),YNr.forEach(t),IUe=r(S7," or "),eS=n(S7,"A",{href:!0});var KNr=s(eS);qUe=r(KNr,"FunnelTokenizerFast"),KNr.forEach(t),NUe=r(S7," (Funnel Transformer model)"),S7.forEach(t),jUe=i(w),ds=n(w,"LI",{});var R7=s(ds);BZ=n(R7,"STRONG",{});var ZNr=s(BZ);DUe=r(ZNr,"gpt2"),ZNr.forEach(t),GUe=r(R7," \u2014 "),oS=n(R7,"A",{href:!0});var ejr=s(oS);OUe=r(ejr,"GPT2Tokenizer"),ejr.forEach(t),VUe=r(R7," or "),rS=n(R7,"A",{href:!0});var ojr=s(rS);XUe=r(ojr,"GPT2TokenizerFast"),ojr.forEach(t),zUe=r(R7," (OpenAI GPT-2 model)"),R7.forEach(t),QUe=i(w),cs=n(w,"LI",{});var B7=s(cs);PZ=n(B7,"STRONG",{});var rjr=s(PZ);WUe=r(rjr,"gpt_neo"),rjr.forEach(t),HUe=r(B7," \u2014 "),tS=n(B7,"A",{href:!0});var tjr=s(tS);UUe=r(tjr,"GPT2Tokenizer"),tjr.forEach(t),JUe=r(B7," or "),aS=n(B7,"A",{href:!0});var ajr=s(aS);YUe=r(ajr,"GPT2TokenizerFast"),ajr.forEach(t),KUe=r(B7," (GPT Neo model)"),B7.forEach(t),ZUe=i(w),ms=n(w,"LI",{});var P7=s(ms);$Z=n(P7,"STRONG",{});var njr=s($Z);eJe=r(njr,"herbert"),njr.forEach(t),oJe=r(P7," \u2014 "),nS=n(P7,"A",{href:!0});var sjr=s(nS);rJe=r(sjr,"HerbertTokenizer"),sjr.forEach(t),tJe=r(P7," or "),sS=n(P7,"A",{href:!0});var ljr=s(sS);aJe=r(ljr,"HerbertTokenizerFast"),ljr.forEach(t),nJe=r(P7," (HerBERT model)"),P7.forEach(t),sJe=i(w),Ug=n(w,"LI",{});var xCe=s(Ug);IZ=n(xCe,"STRONG",{});var ijr=s(IZ);lJe=r(ijr,"hubert"),ijr.forEach(t),iJe=r(xCe," \u2014 "),lS=n(xCe,"A",{href:!0});var djr=s(lS);dJe=r(djr,"Wav2Vec2CTCTokenizer"),djr.forEach(t),cJe=r(xCe," (Hubert model)"),xCe.forEach(t),mJe=i(w),fs=n(w,"LI",{});var $7=s(fs);qZ=n($7,"STRONG",{});var cjr=s(qZ);fJe=r(cjr,"ibert"),cjr.forEach(t),gJe=r($7," \u2014 "),iS=n($7,"A",{href:!0});var mjr=s(iS);hJe=r(mjr,"RobertaTokenizer"),mjr.forEach(t),uJe=r($7," or "),dS=n($7,"A",{href:!0});var fjr=s(dS);pJe=r(fjr,"RobertaTokenizerFast"),fjr.forEach(t),_Je=r($7," (I-BERT model)"),$7.forEach(t),bJe=i(w),gs=n(w,"LI",{});var I7=s(gs);NZ=n(I7,"STRONG",{});var gjr=s(NZ);FJe=r(gjr,"layoutlm"),gjr.forEach(t),vJe=r(I7," \u2014 "),cS=n(I7,"A",{href:!0});var hjr=s(cS);TJe=r(hjr,"LayoutLMTokenizer"),hjr.forEach(t),MJe=r(I7," or "),mS=n(I7,"A",{href:!0});var ujr=s(mS);EJe=r(ujr,"LayoutLMTokenizerFast"),ujr.forEach(t),CJe=r(I7," (LayoutLM model)"),I7.forEach(t),wJe=i(w),hs=n(w,"LI",{});var q7=s(hs);jZ=n(q7,"STRONG",{});var pjr=s(jZ);AJe=r(pjr,"layoutlmv2"),pjr.forEach(t),yJe=r(q7," \u2014 "),fS=n(q7,"A",{href:!0});var _jr=s(fS);LJe=r(_jr,"LayoutLMv2Tokenizer"),_jr.forEach(t),xJe=r(q7," or "),gS=n(q7,"A",{href:!0});var bjr=s(gS);kJe=r(bjr,"LayoutLMv2TokenizerFast"),bjr.forEach(t),SJe=r(q7," (LayoutLMv2 model)"),q7.forEach(t),RJe=i(w),us=n(w,"LI",{});var N7=s(us);DZ=n(N7,"STRONG",{});var Fjr=s(DZ);BJe=r(Fjr,"layoutxlm"),Fjr.forEach(t),PJe=r(N7," \u2014 "),hS=n(N7,"A",{href:!0});var vjr=s(hS);$Je=r(vjr,"LayoutXLMTokenizer"),vjr.forEach(t),IJe=r(N7," or "),uS=n(N7,"A",{href:!0});var Tjr=s(uS);qJe=r(Tjr,"LayoutXLMTokenizerFast"),Tjr.forEach(t),NJe=r(N7," (LayoutXLM model)"),N7.forEach(t),jJe=i(w),ps=n(w,"LI",{});var j7=s(ps);GZ=n(j7,"STRONG",{});var Mjr=s(GZ);DJe=r(Mjr,"led"),Mjr.forEach(t),GJe=r(j7," \u2014 "),pS=n(j7,"A",{href:!0});var Ejr=s(pS);OJe=r(Ejr,"LEDTokenizer"),Ejr.forEach(t),VJe=r(j7," or "),_S=n(j7,"A",{href:!0});var Cjr=s(_S);XJe=r(Cjr,"LEDTokenizerFast"),Cjr.forEach(t),zJe=r(j7," (LED model)"),j7.forEach(t),QJe=i(w),_s=n(w,"LI",{});var D7=s(_s);OZ=n(D7,"STRONG",{});var wjr=s(OZ);WJe=r(wjr,"longformer"),wjr.forEach(t),HJe=r(D7," \u2014 "),bS=n(D7,"A",{href:!0});var Ajr=s(bS);UJe=r(Ajr,"LongformerTokenizer"),Ajr.forEach(t),JJe=r(D7," or "),FS=n(D7,"A",{href:!0});var yjr=s(FS);YJe=r(yjr,"LongformerTokenizerFast"),yjr.forEach(t),KJe=r(D7," (Longformer model)"),D7.forEach(t),ZJe=i(w),Jg=n(w,"LI",{});var kCe=s(Jg);VZ=n(kCe,"STRONG",{});var Ljr=s(VZ);eYe=r(Ljr,"luke"),Ljr.forEach(t),oYe=r(kCe," \u2014 "),vS=n(kCe,"A",{href:!0});var xjr=s(vS);rYe=r(xjr,"LukeTokenizer"),xjr.forEach(t),tYe=r(kCe," (LUKE model)"),kCe.forEach(t),aYe=i(w),bs=n(w,"LI",{});var G7=s(bs);XZ=n(G7,"STRONG",{});var kjr=s(XZ);nYe=r(kjr,"lxmert"),kjr.forEach(t),sYe=r(G7," \u2014 "),TS=n(G7,"A",{href:!0});var Sjr=s(TS);lYe=r(Sjr,"LxmertTokenizer"),Sjr.forEach(t),iYe=r(G7," or "),MS=n(G7,"A",{href:!0});var Rjr=s(MS);dYe=r(Rjr,"LxmertTokenizerFast"),Rjr.forEach(t),cYe=r(G7," (LXMERT model)"),G7.forEach(t),mYe=i(w),Yg=n(w,"LI",{});var SCe=s(Yg);zZ=n(SCe,"STRONG",{});var Bjr=s(zZ);fYe=r(Bjr,"m2m_100"),Bjr.forEach(t),gYe=r(SCe," \u2014 "),ES=n(SCe,"A",{href:!0});var Pjr=s(ES);hYe=r(Pjr,"M2M100Tokenizer"),Pjr.forEach(t),uYe=r(SCe," (M2M100 model)"),SCe.forEach(t),pYe=i(w),Kg=n(w,"LI",{});var RCe=s(Kg);QZ=n(RCe,"STRONG",{});var $jr=s(QZ);_Ye=r($jr,"marian"),$jr.forEach(t),bYe=r(RCe," \u2014 "),CS=n(RCe,"A",{href:!0});var Ijr=s(CS);FYe=r(Ijr,"MarianTokenizer"),Ijr.forEach(t),vYe=r(RCe," (Marian model)"),RCe.forEach(t),TYe=i(w),Fs=n(w,"LI",{});var O7=s(Fs);WZ=n(O7,"STRONG",{});var qjr=s(WZ);MYe=r(qjr,"mbart"),qjr.forEach(t),EYe=r(O7," \u2014 "),wS=n(O7,"A",{href:!0});var Njr=s(wS);CYe=r(Njr,"MBartTokenizer"),Njr.forEach(t),wYe=r(O7," or "),AS=n(O7,"A",{href:!0});var jjr=s(AS);AYe=r(jjr,"MBartTokenizerFast"),jjr.forEach(t),yYe=r(O7," (mBART model)"),O7.forEach(t),LYe=i(w),vs=n(w,"LI",{});var V7=s(vs);HZ=n(V7,"STRONG",{});var Djr=s(HZ);xYe=r(Djr,"mbart50"),Djr.forEach(t),kYe=r(V7," \u2014 "),yS=n(V7,"A",{href:!0});var Gjr=s(yS);SYe=r(Gjr,"MBart50Tokenizer"),Gjr.forEach(t),RYe=r(V7," or "),LS=n(V7,"A",{href:!0});var Ojr=s(LS);BYe=r(Ojr,"MBart50TokenizerFast"),Ojr.forEach(t),PYe=r(V7," (mBART-50 model)"),V7.forEach(t),$Ye=i(w),Zg=n(w,"LI",{});var BCe=s(Zg);UZ=n(BCe,"STRONG",{});var Vjr=s(UZ);IYe=r(Vjr,"mluke"),Vjr.forEach(t),qYe=r(BCe," \u2014 "),xS=n(BCe,"A",{href:!0});var Xjr=s(xS);NYe=r(Xjr,"MLukeTokenizer"),Xjr.forEach(t),jYe=r(BCe," (mLUKE model)"),BCe.forEach(t),DYe=i(w),Ts=n(w,"LI",{});var X7=s(Ts);JZ=n(X7,"STRONG",{});var zjr=s(JZ);GYe=r(zjr,"mobilebert"),zjr.forEach(t),OYe=r(X7," \u2014 "),kS=n(X7,"A",{href:!0});var Qjr=s(kS);VYe=r(Qjr,"MobileBertTokenizer"),Qjr.forEach(t),XYe=r(X7," or "),SS=n(X7,"A",{href:!0});var Wjr=s(SS);zYe=r(Wjr,"MobileBertTokenizerFast"),Wjr.forEach(t),QYe=r(X7," (MobileBERT model)"),X7.forEach(t),WYe=i(w),Ms=n(w,"LI",{});var z7=s(Ms);YZ=n(z7,"STRONG",{});var Hjr=s(YZ);HYe=r(Hjr,"mpnet"),Hjr.forEach(t),UYe=r(z7," \u2014 "),RS=n(z7,"A",{href:!0});var Ujr=s(RS);JYe=r(Ujr,"MPNetTokenizer"),Ujr.forEach(t),YYe=r(z7," or "),BS=n(z7,"A",{href:!0});var Jjr=s(BS);KYe=r(Jjr,"MPNetTokenizerFast"),Jjr.forEach(t),ZYe=r(z7," (MPNet model)"),z7.forEach(t),eKe=i(w),Es=n(w,"LI",{});var Q7=s(Es);KZ=n(Q7,"STRONG",{});var Yjr=s(KZ);oKe=r(Yjr,"mt5"),Yjr.forEach(t),rKe=r(Q7," \u2014 "),PS=n(Q7,"A",{href:!0});var Kjr=s(PS);tKe=r(Kjr,"MT5Tokenizer"),Kjr.forEach(t),aKe=r(Q7," or "),$S=n(Q7,"A",{href:!0});var Zjr=s($S);nKe=r(Zjr,"MT5TokenizerFast"),Zjr.forEach(t),sKe=r(Q7," (mT5 model)"),Q7.forEach(t),lKe=i(w),Cs=n(w,"LI",{});var W7=s(Cs);ZZ=n(W7,"STRONG",{});var eDr=s(ZZ);iKe=r(eDr,"openai-gpt"),eDr.forEach(t),dKe=r(W7," \u2014 "),IS=n(W7,"A",{href:!0});var oDr=s(IS);cKe=r(oDr,"OpenAIGPTTokenizer"),oDr.forEach(t),mKe=r(W7," or "),qS=n(W7,"A",{href:!0});var rDr=s(qS);fKe=r(rDr,"OpenAIGPTTokenizerFast"),rDr.forEach(t),gKe=r(W7," (OpenAI GPT model)"),W7.forEach(t),hKe=i(w),ws=n(w,"LI",{});var H7=s(ws);eee=n(H7,"STRONG",{});var tDr=s(eee);uKe=r(tDr,"pegasus"),tDr.forEach(t),pKe=r(H7," \u2014 "),NS=n(H7,"A",{href:!0});var aDr=s(NS);_Ke=r(aDr,"PegasusTokenizer"),aDr.forEach(t),bKe=r(H7," or "),jS=n(H7,"A",{href:!0});var nDr=s(jS);FKe=r(nDr,"PegasusTokenizerFast"),nDr.forEach(t),vKe=r(H7," (Pegasus model)"),H7.forEach(t),TKe=i(w),eh=n(w,"LI",{});var PCe=s(eh);oee=n(PCe,"STRONG",{});var sDr=s(oee);MKe=r(sDr,"perceiver"),sDr.forEach(t),EKe=r(PCe," \u2014 "),DS=n(PCe,"A",{href:!0});var lDr=s(DS);CKe=r(lDr,"PerceiverTokenizer"),lDr.forEach(t),wKe=r(PCe," (Perceiver model)"),PCe.forEach(t),AKe=i(w),oh=n(w,"LI",{});var $Ce=s(oh);ree=n($Ce,"STRONG",{});var iDr=s(ree);yKe=r(iDr,"phobert"),iDr.forEach(t),LKe=r($Ce," \u2014 "),GS=n($Ce,"A",{href:!0});var dDr=s(GS);xKe=r(dDr,"PhobertTokenizer"),dDr.forEach(t),kKe=r($Ce," (PhoBERT model)"),$Ce.forEach(t),SKe=i(w),rh=n(w,"LI",{});var ICe=s(rh);tee=n(ICe,"STRONG",{});var cDr=s(tee);RKe=r(cDr,"plbart"),cDr.forEach(t),BKe=r(ICe," \u2014 "),OS=n(ICe,"A",{href:!0});var mDr=s(OS);PKe=r(mDr,"PLBartTokenizer"),mDr.forEach(t),$Ke=r(ICe," (PLBart model)"),ICe.forEach(t),IKe=i(w),th=n(w,"LI",{});var qCe=s(th);aee=n(qCe,"STRONG",{});var fDr=s(aee);qKe=r(fDr,"prophetnet"),fDr.forEach(t),NKe=r(qCe," \u2014 "),VS=n(qCe,"A",{href:!0});var gDr=s(VS);jKe=r(gDr,"ProphetNetTokenizer"),gDr.forEach(t),DKe=r(qCe," (ProphetNet model)"),qCe.forEach(t),GKe=i(w),As=n(w,"LI",{});var U7=s(As);nee=n(U7,"STRONG",{});var hDr=s(nee);OKe=r(hDr,"qdqbert"),hDr.forEach(t),VKe=r(U7," \u2014 "),XS=n(U7,"A",{href:!0});var uDr=s(XS);XKe=r(uDr,"BertTokenizer"),uDr.forEach(t),zKe=r(U7," or "),zS=n(U7,"A",{href:!0});var pDr=s(zS);QKe=r(pDr,"BertTokenizerFast"),pDr.forEach(t),WKe=r(U7," (QDQBert model)"),U7.forEach(t),HKe=i(w),ah=n(w,"LI",{});var NCe=s(ah);see=n(NCe,"STRONG",{});var _Dr=s(see);UKe=r(_Dr,"rag"),_Dr.forEach(t),JKe=r(NCe," \u2014 "),QS=n(NCe,"A",{href:!0});var bDr=s(QS);YKe=r(bDr,"RagTokenizer"),bDr.forEach(t),KKe=r(NCe," (RAG model)"),NCe.forEach(t),ZKe=i(w),ys=n(w,"LI",{});var J7=s(ys);lee=n(J7,"STRONG",{});var FDr=s(lee);eZe=r(FDr,"realm"),FDr.forEach(t),oZe=r(J7," \u2014 "),WS=n(J7,"A",{href:!0});var vDr=s(WS);rZe=r(vDr,"RealmTokenizer"),vDr.forEach(t),tZe=r(J7," or "),HS=n(J7,"A",{href:!0});var TDr=s(HS);aZe=r(TDr,"RealmTokenizerFast"),TDr.forEach(t),nZe=r(J7," (Realm model)"),J7.forEach(t),sZe=i(w),Ls=n(w,"LI",{});var Y7=s(Ls);iee=n(Y7,"STRONG",{});var MDr=s(iee);lZe=r(MDr,"reformer"),MDr.forEach(t),iZe=r(Y7," \u2014 "),US=n(Y7,"A",{href:!0});var EDr=s(US);dZe=r(EDr,"ReformerTokenizer"),EDr.forEach(t),cZe=r(Y7," or "),JS=n(Y7,"A",{href:!0});var CDr=s(JS);mZe=r(CDr,"ReformerTokenizerFast"),CDr.forEach(t),fZe=r(Y7," (Reformer model)"),Y7.forEach(t),gZe=i(w),xs=n(w,"LI",{});var K7=s(xs);dee=n(K7,"STRONG",{});var wDr=s(dee);hZe=r(wDr,"rembert"),wDr.forEach(t),uZe=r(K7," \u2014 "),YS=n(K7,"A",{href:!0});var ADr=s(YS);pZe=r(ADr,"RemBertTokenizer"),ADr.forEach(t),_Ze=r(K7," or "),KS=n(K7,"A",{href:!0});var yDr=s(KS);bZe=r(yDr,"RemBertTokenizerFast"),yDr.forEach(t),FZe=r(K7," (RemBERT model)"),K7.forEach(t),vZe=i(w),ks=n(w,"LI",{});var Z7=s(ks);cee=n(Z7,"STRONG",{});var LDr=s(cee);TZe=r(LDr,"retribert"),LDr.forEach(t),MZe=r(Z7," \u2014 "),ZS=n(Z7,"A",{href:!0});var xDr=s(ZS);EZe=r(xDr,"RetriBertTokenizer"),xDr.forEach(t),CZe=r(Z7," or "),eR=n(Z7,"A",{href:!0});var kDr=s(eR);wZe=r(kDr,"RetriBertTokenizerFast"),kDr.forEach(t),AZe=r(Z7," (RetriBERT model)"),Z7.forEach(t),yZe=i(w),Ss=n(w,"LI",{});var e9=s(Ss);mee=n(e9,"STRONG",{});var SDr=s(mee);LZe=r(SDr,"roberta"),SDr.forEach(t),xZe=r(e9," \u2014 "),oR=n(e9,"A",{href:!0});var RDr=s(oR);kZe=r(RDr,"RobertaTokenizer"),RDr.forEach(t),SZe=r(e9," or "),rR=n(e9,"A",{href:!0});var BDr=s(rR);RZe=r(BDr,"RobertaTokenizerFast"),BDr.forEach(t),BZe=r(e9," (RoBERTa model)"),e9.forEach(t),PZe=i(w),Rs=n(w,"LI",{});var o9=s(Rs);fee=n(o9,"STRONG",{});var PDr=s(fee);$Ze=r(PDr,"roformer"),PDr.forEach(t),IZe=r(o9," \u2014 "),tR=n(o9,"A",{href:!0});var $Dr=s(tR);qZe=r($Dr,"RoFormerTokenizer"),$Dr.forEach(t),NZe=r(o9," or "),aR=n(o9,"A",{href:!0});var IDr=s(aR);jZe=r(IDr,"RoFormerTokenizerFast"),IDr.forEach(t),DZe=r(o9," (RoFormer model)"),o9.forEach(t),GZe=i(w),nh=n(w,"LI",{});var jCe=s(nh);gee=n(jCe,"STRONG",{});var qDr=s(gee);OZe=r(qDr,"speech_to_text"),qDr.forEach(t),VZe=r(jCe," \u2014 "),nR=n(jCe,"A",{href:!0});var NDr=s(nR);XZe=r(NDr,"Speech2TextTokenizer"),NDr.forEach(t),zZe=r(jCe," (Speech2Text model)"),jCe.forEach(t),QZe=i(w),sh=n(w,"LI",{});var DCe=s(sh);hee=n(DCe,"STRONG",{});var jDr=s(hee);WZe=r(jDr,"speech_to_text_2"),jDr.forEach(t),HZe=r(DCe," \u2014 "),sR=n(DCe,"A",{href:!0});var DDr=s(sR);UZe=r(DDr,"Speech2Text2Tokenizer"),DDr.forEach(t),JZe=r(DCe," (Speech2Text2 model)"),DCe.forEach(t),YZe=i(w),Bs=n(w,"LI",{});var r9=s(Bs);uee=n(r9,"STRONG",{});var GDr=s(uee);KZe=r(GDr,"splinter"),GDr.forEach(t),ZZe=r(r9," \u2014 "),lR=n(r9,"A",{href:!0});var ODr=s(lR);eeo=r(ODr,"SplinterTokenizer"),ODr.forEach(t),oeo=r(r9," or "),iR=n(r9,"A",{href:!0});var VDr=s(iR);reo=r(VDr,"SplinterTokenizerFast"),VDr.forEach(t),teo=r(r9," (Splinter model)"),r9.forEach(t),aeo=i(w),Ps=n(w,"LI",{});var t9=s(Ps);pee=n(t9,"STRONG",{});var XDr=s(pee);neo=r(XDr,"squeezebert"),XDr.forEach(t),seo=r(t9," \u2014 "),dR=n(t9,"A",{href:!0});var zDr=s(dR);leo=r(zDr,"SqueezeBertTokenizer"),zDr.forEach(t),ieo=r(t9," or "),cR=n(t9,"A",{href:!0});var QDr=s(cR);deo=r(QDr,"SqueezeBertTokenizerFast"),QDr.forEach(t),ceo=r(t9," (SqueezeBERT model)"),t9.forEach(t),meo=i(w),$s=n(w,"LI",{});var a9=s($s);_ee=n(a9,"STRONG",{});var WDr=s(_ee);feo=r(WDr,"t5"),WDr.forEach(t),geo=r(a9," \u2014 "),mR=n(a9,"A",{href:!0});var HDr=s(mR);heo=r(HDr,"T5Tokenizer"),HDr.forEach(t),ueo=r(a9," or "),fR=n(a9,"A",{href:!0});var UDr=s(fR);peo=r(UDr,"T5TokenizerFast"),UDr.forEach(t),_eo=r(a9," (T5 model)"),a9.forEach(t),beo=i(w),lh=n(w,"LI",{});var GCe=s(lh);bee=n(GCe,"STRONG",{});var JDr=s(bee);Feo=r(JDr,"tapas"),JDr.forEach(t),veo=r(GCe," \u2014 "),gR=n(GCe,"A",{href:!0});var YDr=s(gR);Teo=r(YDr,"TapasTokenizer"),YDr.forEach(t),Meo=r(GCe," (TAPAS model)"),GCe.forEach(t),Eeo=i(w),ih=n(w,"LI",{});var OCe=s(ih);Fee=n(OCe,"STRONG",{});var KDr=s(Fee);Ceo=r(KDr,"transfo-xl"),KDr.forEach(t),weo=r(OCe," \u2014 "),hR=n(OCe,"A",{href:!0});var ZDr=s(hR);Aeo=r(ZDr,"TransfoXLTokenizer"),ZDr.forEach(t),yeo=r(OCe," (Transformer-XL model)"),OCe.forEach(t),Leo=i(w),dh=n(w,"LI",{});var VCe=s(dh);vee=n(VCe,"STRONG",{});var eGr=s(vee);xeo=r(eGr,"wav2vec2"),eGr.forEach(t),keo=r(VCe," \u2014 "),uR=n(VCe,"A",{href:!0});var oGr=s(uR);Seo=r(oGr,"Wav2Vec2CTCTokenizer"),oGr.forEach(t),Reo=r(VCe," (Wav2Vec2 model)"),VCe.forEach(t),Beo=i(w),ch=n(w,"LI",{});var XCe=s(ch);Tee=n(XCe,"STRONG",{});var rGr=s(Tee);Peo=r(rGr,"wav2vec2_phoneme"),rGr.forEach(t),$eo=r(XCe," \u2014 "),pR=n(XCe,"A",{href:!0});var tGr=s(pR);Ieo=r(tGr,"Wav2Vec2PhonemeCTCTokenizer"),tGr.forEach(t),qeo=r(XCe," (Wav2Vec2Phoneme model)"),XCe.forEach(t),Neo=i(w),Is=n(w,"LI",{});var n9=s(Is);Mee=n(n9,"STRONG",{});var aGr=s(Mee);jeo=r(aGr,"xglm"),aGr.forEach(t),Deo=r(n9," \u2014 "),_R=n(n9,"A",{href:!0});var nGr=s(_R);Geo=r(nGr,"XGLMTokenizer"),nGr.forEach(t),Oeo=r(n9," or "),bR=n(n9,"A",{href:!0});var sGr=s(bR);Veo=r(sGr,"XGLMTokenizerFast"),sGr.forEach(t),Xeo=r(n9," (XGLM model)"),n9.forEach(t),zeo=i(w),mh=n(w,"LI",{});var zCe=s(mh);Eee=n(zCe,"STRONG",{});var lGr=s(Eee);Qeo=r(lGr,"xlm"),lGr.forEach(t),Weo=r(zCe," \u2014 "),FR=n(zCe,"A",{href:!0});var iGr=s(FR);Heo=r(iGr,"XLMTokenizer"),iGr.forEach(t),Ueo=r(zCe," (XLM model)"),zCe.forEach(t),Jeo=i(w),fh=n(w,"LI",{});var QCe=s(fh);Cee=n(QCe,"STRONG",{});var dGr=s(Cee);Yeo=r(dGr,"xlm-prophetnet"),dGr.forEach(t),Keo=r(QCe," \u2014 "),vR=n(QCe,"A",{href:!0});var cGr=s(vR);Zeo=r(cGr,"XLMProphetNetTokenizer"),cGr.forEach(t),eoo=r(QCe," (XLMProphetNet model)"),QCe.forEach(t),ooo=i(w),qs=n(w,"LI",{});var s9=s(qs);wee=n(s9,"STRONG",{});var mGr=s(wee);roo=r(mGr,"xlm-roberta"),mGr.forEach(t),too=r(s9," \u2014 "),TR=n(s9,"A",{href:!0});var fGr=s(TR);aoo=r(fGr,"XLMRobertaTokenizer"),fGr.forEach(t),noo=r(s9," or "),MR=n(s9,"A",{href:!0});var gGr=s(MR);soo=r(gGr,"XLMRobertaTokenizerFast"),gGr.forEach(t),loo=r(s9," (XLM-RoBERTa model)"),s9.forEach(t),ioo=i(w),Ns=n(w,"LI",{});var l9=s(Ns);Aee=n(l9,"STRONG",{});var hGr=s(Aee);doo=r(hGr,"xlnet"),hGr.forEach(t),coo=r(l9," \u2014 "),ER=n(l9,"A",{href:!0});var uGr=s(ER);moo=r(uGr,"XLNetTokenizer"),uGr.forEach(t),foo=r(l9," or "),CR=n(l9,"A",{href:!0});var pGr=s(CR);goo=r(pGr,"XLNetTokenizerFast"),pGr.forEach(t),hoo=r(l9," (XLNet model)"),l9.forEach(t),w.forEach(t),uoo=i(ha),yee=n(ha,"P",{});var _Gr=s(yee);poo=r(_Gr,"Examples:"),_Gr.forEach(t),_oo=i(ha),f(qw.$$.fragment,ha),ha.forEach(t),boo=i(Vs),gh=n(Vs,"DIV",{class:!0});var fPe=s(gh);f(Nw.$$.fragment,fPe),Foo=i(fPe),Lee=n(fPe,"P",{});var bGr=s(Lee);voo=r(bGr,"Register a new tokenizer in this mapping."),bGr.forEach(t),fPe.forEach(t),Vs.forEach(t),iRe=i(c),Wi=n(c,"H2",{class:!0});var gPe=s(Wi);hh=n(gPe,"A",{id:!0,class:!0,href:!0});var FGr=s(hh);xee=n(FGr,"SPAN",{});var vGr=s(xee);f(jw.$$.fragment,vGr),vGr.forEach(t),FGr.forEach(t),Too=i(gPe),kee=n(gPe,"SPAN",{});var TGr=s(kee);Moo=r(TGr,"AutoFeatureExtractor"),TGr.forEach(t),gPe.forEach(t),dRe=i(c),Ho=n(c,"DIV",{class:!0});var Xs=s(Ho);f(Dw.$$.fragment,Xs),Eoo=i(Xs),Gw=n(Xs,"P",{});var hPe=s(Gw);Coo=r(hPe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),wR=n(hPe,"A",{href:!0});var MGr=s(wR);woo=r(MGr,"AutoFeatureExtractor.from_pretrained()"),MGr.forEach(t),Aoo=r(hPe," class method."),hPe.forEach(t),yoo=i(Xs),Ow=n(Xs,"P",{});var uPe=s(Ow);Loo=r(uPe,"This class cannot be instantiated directly using "),See=n(uPe,"CODE",{});var EGr=s(See);xoo=r(EGr,"__init__()"),EGr.forEach(t),koo=r(uPe," (throws an error)."),uPe.forEach(t),Soo=i(Xs),$e=n(Xs,"DIV",{class:!0});var Nt=s($e);f(Vw.$$.fragment,Nt),Roo=i(Nt),Ree=n(Nt,"P",{});var CGr=s(Ree);Boo=r(CGr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),CGr.forEach(t),Poo=i(Nt),Va=n(Nt,"P",{});var M3=s(Va);$oo=r(M3,"The feature extractor class to instantiate is selected based on the "),Bee=n(M3,"CODE",{});var wGr=s(Bee);Ioo=r(wGr,"model_type"),wGr.forEach(t),qoo=r(M3,` property of the config object
(either passed as an argument or loaded from `),Pee=n(M3,"CODE",{});var AGr=s(Pee);Noo=r(AGr,"pretrained_model_name_or_path"),AGr.forEach(t),joo=r(M3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),$ee=n(M3,"CODE",{});var yGr=s($ee);Doo=r(yGr,"pretrained_model_name_or_path"),yGr.forEach(t),Goo=r(M3,":"),M3.forEach(t),Ooo=i(Nt),ee=n(Nt,"UL",{});var ae=s(ee);uh=n(ae,"LI",{});var WCe=s(uh);Iee=n(WCe,"STRONG",{});var LGr=s(Iee);Voo=r(LGr,"beit"),LGr.forEach(t),Xoo=r(WCe," \u2014 "),AR=n(WCe,"A",{href:!0});var xGr=s(AR);zoo=r(xGr,"BeitFeatureExtractor"),xGr.forEach(t),Qoo=r(WCe," (BEiT model)"),WCe.forEach(t),Woo=i(ae),ph=n(ae,"LI",{});var HCe=s(ph);qee=n(HCe,"STRONG",{});var kGr=s(qee);Hoo=r(kGr,"clip"),kGr.forEach(t),Uoo=r(HCe," \u2014 "),yR=n(HCe,"A",{href:!0});var SGr=s(yR);Joo=r(SGr,"CLIPFeatureExtractor"),SGr.forEach(t),Yoo=r(HCe," (CLIP model)"),HCe.forEach(t),Koo=i(ae),_h=n(ae,"LI",{});var UCe=s(_h);Nee=n(UCe,"STRONG",{});var RGr=s(Nee);Zoo=r(RGr,"convnext"),RGr.forEach(t),ero=r(UCe," \u2014 "),LR=n(UCe,"A",{href:!0});var BGr=s(LR);oro=r(BGr,"ConvNextFeatureExtractor"),BGr.forEach(t),rro=r(UCe," (ConvNext model)"),UCe.forEach(t),tro=i(ae),bh=n(ae,"LI",{});var JCe=s(bh);jee=n(JCe,"STRONG",{});var PGr=s(jee);aro=r(PGr,"deit"),PGr.forEach(t),nro=r(JCe," \u2014 "),xR=n(JCe,"A",{href:!0});var $Gr=s(xR);sro=r($Gr,"DeiTFeatureExtractor"),$Gr.forEach(t),lro=r(JCe," (DeiT model)"),JCe.forEach(t),iro=i(ae),Fh=n(ae,"LI",{});var YCe=s(Fh);Dee=n(YCe,"STRONG",{});var IGr=s(Dee);dro=r(IGr,"detr"),IGr.forEach(t),cro=r(YCe," \u2014 "),kR=n(YCe,"A",{href:!0});var qGr=s(kR);mro=r(qGr,"DetrFeatureExtractor"),qGr.forEach(t),fro=r(YCe," (DETR model)"),YCe.forEach(t),gro=i(ae),vh=n(ae,"LI",{});var KCe=s(vh);Gee=n(KCe,"STRONG",{});var NGr=s(Gee);hro=r(NGr,"hubert"),NGr.forEach(t),uro=r(KCe," \u2014 "),SR=n(KCe,"A",{href:!0});var jGr=s(SR);pro=r(jGr,"Wav2Vec2FeatureExtractor"),jGr.forEach(t),_ro=r(KCe," (Hubert model)"),KCe.forEach(t),bro=i(ae),Th=n(ae,"LI",{});var ZCe=s(Th);Oee=n(ZCe,"STRONG",{});var DGr=s(Oee);Fro=r(DGr,"layoutlmv2"),DGr.forEach(t),vro=r(ZCe," \u2014 "),RR=n(ZCe,"A",{href:!0});var GGr=s(RR);Tro=r(GGr,"LayoutLMv2FeatureExtractor"),GGr.forEach(t),Mro=r(ZCe," (LayoutLMv2 model)"),ZCe.forEach(t),Ero=i(ae),Mh=n(ae,"LI",{});var e5e=s(Mh);Vee=n(e5e,"STRONG",{});var OGr=s(Vee);Cro=r(OGr,"maskformer"),OGr.forEach(t),wro=r(e5e," \u2014 "),BR=n(e5e,"A",{href:!0});var VGr=s(BR);Aro=r(VGr,"MaskFormerFeatureExtractor"),VGr.forEach(t),yro=r(e5e," (MaskFormer model)"),e5e.forEach(t),Lro=i(ae),Eh=n(ae,"LI",{});var o5e=s(Eh);Xee=n(o5e,"STRONG",{});var XGr=s(Xee);xro=r(XGr,"perceiver"),XGr.forEach(t),kro=r(o5e," \u2014 "),PR=n(o5e,"A",{href:!0});var zGr=s(PR);Sro=r(zGr,"PerceiverFeatureExtractor"),zGr.forEach(t),Rro=r(o5e," (Perceiver model)"),o5e.forEach(t),Bro=i(ae),Ch=n(ae,"LI",{});var r5e=s(Ch);zee=n(r5e,"STRONG",{});var QGr=s(zee);Pro=r(QGr,"poolformer"),QGr.forEach(t),$ro=r(r5e," \u2014 "),$R=n(r5e,"A",{href:!0});var WGr=s($R);Iro=r(WGr,"PoolFormerFeatureExtractor"),WGr.forEach(t),qro=r(r5e," (PoolFormer model)"),r5e.forEach(t),Nro=i(ae),wh=n(ae,"LI",{});var t5e=s(wh);Qee=n(t5e,"STRONG",{});var HGr=s(Qee);jro=r(HGr,"regnet"),HGr.forEach(t),Dro=r(t5e," \u2014 "),IR=n(t5e,"A",{href:!0});var UGr=s(IR);Gro=r(UGr,"ConvNextFeatureExtractor"),UGr.forEach(t),Oro=r(t5e," (RegNet model)"),t5e.forEach(t),Vro=i(ae),Ah=n(ae,"LI",{});var a5e=s(Ah);Wee=n(a5e,"STRONG",{});var JGr=s(Wee);Xro=r(JGr,"resnet"),JGr.forEach(t),zro=r(a5e," \u2014 "),qR=n(a5e,"A",{href:!0});var YGr=s(qR);Qro=r(YGr,"ConvNextFeatureExtractor"),YGr.forEach(t),Wro=r(a5e," (ResNet model)"),a5e.forEach(t),Hro=i(ae),yh=n(ae,"LI",{});var n5e=s(yh);Hee=n(n5e,"STRONG",{});var KGr=s(Hee);Uro=r(KGr,"segformer"),KGr.forEach(t),Jro=r(n5e," \u2014 "),NR=n(n5e,"A",{href:!0});var ZGr=s(NR);Yro=r(ZGr,"SegformerFeatureExtractor"),ZGr.forEach(t),Kro=r(n5e," (SegFormer model)"),n5e.forEach(t),Zro=i(ae),Lh=n(ae,"LI",{});var s5e=s(Lh);Uee=n(s5e,"STRONG",{});var eOr=s(Uee);eto=r(eOr,"speech_to_text"),eOr.forEach(t),oto=r(s5e," \u2014 "),jR=n(s5e,"A",{href:!0});var oOr=s(jR);rto=r(oOr,"Speech2TextFeatureExtractor"),oOr.forEach(t),tto=r(s5e," (Speech2Text model)"),s5e.forEach(t),ato=i(ae),xh=n(ae,"LI",{});var l5e=s(xh);Jee=n(l5e,"STRONG",{});var rOr=s(Jee);nto=r(rOr,"swin"),rOr.forEach(t),sto=r(l5e," \u2014 "),DR=n(l5e,"A",{href:!0});var tOr=s(DR);lto=r(tOr,"ViTFeatureExtractor"),tOr.forEach(t),ito=r(l5e," (Swin model)"),l5e.forEach(t),dto=i(ae),kh=n(ae,"LI",{});var i5e=s(kh);Yee=n(i5e,"STRONG",{});var aOr=s(Yee);cto=r(aOr,"van"),aOr.forEach(t),mto=r(i5e," \u2014 "),GR=n(i5e,"A",{href:!0});var nOr=s(GR);fto=r(nOr,"ConvNextFeatureExtractor"),nOr.forEach(t),gto=r(i5e," (VAN model)"),i5e.forEach(t),hto=i(ae),Sh=n(ae,"LI",{});var d5e=s(Sh);Kee=n(d5e,"STRONG",{});var sOr=s(Kee);uto=r(sOr,"vit"),sOr.forEach(t),pto=r(d5e," \u2014 "),OR=n(d5e,"A",{href:!0});var lOr=s(OR);_to=r(lOr,"ViTFeatureExtractor"),lOr.forEach(t),bto=r(d5e," (ViT model)"),d5e.forEach(t),Fto=i(ae),Rh=n(ae,"LI",{});var c5e=s(Rh);Zee=n(c5e,"STRONG",{});var iOr=s(Zee);vto=r(iOr,"vit_mae"),iOr.forEach(t),Tto=r(c5e," \u2014 "),VR=n(c5e,"A",{href:!0});var dOr=s(VR);Mto=r(dOr,"ViTFeatureExtractor"),dOr.forEach(t),Eto=r(c5e," (ViTMAE model)"),c5e.forEach(t),Cto=i(ae),Bh=n(ae,"LI",{});var m5e=s(Bh);eoe=n(m5e,"STRONG",{});var cOr=s(eoe);wto=r(cOr,"wav2vec2"),cOr.forEach(t),Ato=r(m5e," \u2014 "),XR=n(m5e,"A",{href:!0});var mOr=s(XR);yto=r(mOr,"Wav2Vec2FeatureExtractor"),mOr.forEach(t),Lto=r(m5e," (Wav2Vec2 model)"),m5e.forEach(t),ae.forEach(t),xto=i(Nt),f(Ph.$$.fragment,Nt),kto=i(Nt),ooe=n(Nt,"P",{});var fOr=s(ooe);Sto=r(fOr,"Examples:"),fOr.forEach(t),Rto=i(Nt),f(Xw.$$.fragment,Nt),Nt.forEach(t),Bto=i(Xs),$h=n(Xs,"DIV",{class:!0});var pPe=s($h);f(zw.$$.fragment,pPe),Pto=i(pPe),roe=n(pPe,"P",{});var gOr=s(roe);$to=r(gOr,"Register a new feature extractor for this class."),gOr.forEach(t),pPe.forEach(t),Xs.forEach(t),cRe=i(c),Hi=n(c,"H2",{class:!0});var _Pe=s(Hi);Ih=n(_Pe,"A",{id:!0,class:!0,href:!0});var hOr=s(Ih);toe=n(hOr,"SPAN",{});var uOr=s(toe);f(Qw.$$.fragment,uOr),uOr.forEach(t),hOr.forEach(t),Ito=i(_Pe),aoe=n(_Pe,"SPAN",{});var pOr=s(aoe);qto=r(pOr,"AutoProcessor"),pOr.forEach(t),_Pe.forEach(t),mRe=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);f(Ww.$$.fragment,zs),Nto=i(zs),Hw=n(zs,"P",{});var bPe=s(Hw);jto=r(bPe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),zR=n(bPe,"A",{href:!0});var _Or=s(zR);Dto=r(_Or,"AutoProcessor.from_pretrained()"),_Or.forEach(t),Gto=r(bPe," class method."),bPe.forEach(t),Oto=i(zs),Uw=n(zs,"P",{});var FPe=s(Uw);Vto=r(FPe,"This class cannot be instantiated directly using "),noe=n(FPe,"CODE",{});var bOr=s(noe);Xto=r(bOr,"__init__()"),bOr.forEach(t),zto=r(FPe," (throws an error)."),FPe.forEach(t),Qto=i(zs),Ie=n(zs,"DIV",{class:!0});var jt=s(Ie);f(Jw.$$.fragment,jt),Wto=i(jt),soe=n(jt,"P",{});var FOr=s(soe);Hto=r(FOr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),FOr.forEach(t),Uto=i(jt),Ui=n(jt,"P",{});var rU=s(Ui);Jto=r(rU,"The processor class to instantiate is selected based on the "),loe=n(rU,"CODE",{});var vOr=s(loe);Yto=r(vOr,"model_type"),vOr.forEach(t),Kto=r(rU,` property of the config object (either
passed as an argument or loaded from `),ioe=n(rU,"CODE",{});var TOr=s(ioe);Zto=r(TOr,"pretrained_model_name_or_path"),TOr.forEach(t),eao=r(rU," if possible):"),rU.forEach(t),oao=i(jt),ke=n(jt,"UL",{});var jo=s(ke);qh=n(jo,"LI",{});var f5e=s(qh);doe=n(f5e,"STRONG",{});var MOr=s(doe);rao=r(MOr,"clip"),MOr.forEach(t),tao=r(f5e," \u2014 "),QR=n(f5e,"A",{href:!0});var EOr=s(QR);aao=r(EOr,"CLIPProcessor"),EOr.forEach(t),nao=r(f5e," (CLIP model)"),f5e.forEach(t),sao=i(jo),Nh=n(jo,"LI",{});var g5e=s(Nh);coe=n(g5e,"STRONG",{});var COr=s(coe);lao=r(COr,"layoutlmv2"),COr.forEach(t),iao=r(g5e," \u2014 "),WR=n(g5e,"A",{href:!0});var wOr=s(WR);dao=r(wOr,"LayoutLMv2Processor"),wOr.forEach(t),cao=r(g5e," (LayoutLMv2 model)"),g5e.forEach(t),mao=i(jo),jh=n(jo,"LI",{});var h5e=s(jh);moe=n(h5e,"STRONG",{});var AOr=s(moe);fao=r(AOr,"layoutxlm"),AOr.forEach(t),gao=r(h5e," \u2014 "),HR=n(h5e,"A",{href:!0});var yOr=s(HR);hao=r(yOr,"LayoutXLMProcessor"),yOr.forEach(t),uao=r(h5e," (LayoutXLM model)"),h5e.forEach(t),pao=i(jo),Dh=n(jo,"LI",{});var u5e=s(Dh);foe=n(u5e,"STRONG",{});var LOr=s(foe);_ao=r(LOr,"speech_to_text"),LOr.forEach(t),bao=r(u5e," \u2014 "),UR=n(u5e,"A",{href:!0});var xOr=s(UR);Fao=r(xOr,"Speech2TextProcessor"),xOr.forEach(t),vao=r(u5e," (Speech2Text model)"),u5e.forEach(t),Tao=i(jo),Gh=n(jo,"LI",{});var p5e=s(Gh);goe=n(p5e,"STRONG",{});var kOr=s(goe);Mao=r(kOr,"speech_to_text_2"),kOr.forEach(t),Eao=r(p5e," \u2014 "),JR=n(p5e,"A",{href:!0});var SOr=s(JR);Cao=r(SOr,"Speech2Text2Processor"),SOr.forEach(t),wao=r(p5e," (Speech2Text2 model)"),p5e.forEach(t),Aao=i(jo),Oh=n(jo,"LI",{});var _5e=s(Oh);hoe=n(_5e,"STRONG",{});var ROr=s(hoe);yao=r(ROr,"trocr"),ROr.forEach(t),Lao=r(_5e," \u2014 "),YR=n(_5e,"A",{href:!0});var BOr=s(YR);xao=r(BOr,"TrOCRProcessor"),BOr.forEach(t),kao=r(_5e," (TrOCR model)"),_5e.forEach(t),Sao=i(jo),Vh=n(jo,"LI",{});var b5e=s(Vh);uoe=n(b5e,"STRONG",{});var POr=s(uoe);Rao=r(POr,"vision-text-dual-encoder"),POr.forEach(t),Bao=r(b5e," \u2014 "),KR=n(b5e,"A",{href:!0});var $Or=s(KR);Pao=r($Or,"VisionTextDualEncoderProcessor"),$Or.forEach(t),$ao=r(b5e," (VisionTextDualEncoder model)"),b5e.forEach(t),Iao=i(jo),Xh=n(jo,"LI",{});var F5e=s(Xh);poe=n(F5e,"STRONG",{});var IOr=s(poe);qao=r(IOr,"wav2vec2"),IOr.forEach(t),Nao=r(F5e," \u2014 "),ZR=n(F5e,"A",{href:!0});var qOr=s(ZR);jao=r(qOr,"Wav2Vec2Processor"),qOr.forEach(t),Dao=r(F5e," (Wav2Vec2 model)"),F5e.forEach(t),jo.forEach(t),Gao=i(jt),f(zh.$$.fragment,jt),Oao=i(jt),_oe=n(jt,"P",{});var NOr=s(_oe);Vao=r(NOr,"Examples:"),NOr.forEach(t),Xao=i(jt),f(Yw.$$.fragment,jt),jt.forEach(t),zao=i(zs),Qh=n(zs,"DIV",{class:!0});var vPe=s(Qh);f(Kw.$$.fragment,vPe),Qao=i(vPe),boe=n(vPe,"P",{});var jOr=s(boe);Wao=r(jOr,"Register a new processor for this class."),jOr.forEach(t),vPe.forEach(t),zs.forEach(t),fRe=i(c),Ji=n(c,"H2",{class:!0});var TPe=s(Ji);Wh=n(TPe,"A",{id:!0,class:!0,href:!0});var DOr=s(Wh);Foe=n(DOr,"SPAN",{});var GOr=s(Foe);f(Zw.$$.fragment,GOr),GOr.forEach(t),DOr.forEach(t),Hao=i(TPe),voe=n(TPe,"SPAN",{});var OOr=s(voe);Uao=r(OOr,"AutoModel"),OOr.forEach(t),TPe.forEach(t),gRe=i(c),Jo=n(c,"DIV",{class:!0});var Qs=s(Jo);f(eA.$$.fragment,Qs),Jao=i(Qs),Yi=n(Qs,"P",{});var tU=s(Yi);Yao=r(tU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eB=n(tU,"A",{href:!0});var VOr=s(eB);Kao=r(VOr,"from_pretrained()"),VOr.forEach(t),Zao=r(tU," class method or the "),oB=n(tU,"A",{href:!0});var XOr=s(oB);eno=r(XOr,"from_config()"),XOr.forEach(t),ono=r(tU,` class
method.`),tU.forEach(t),rno=i(Qs),oA=n(Qs,"P",{});var MPe=s(oA);tno=r(MPe,"This class cannot be instantiated directly using "),Toe=n(MPe,"CODE",{});var zOr=s(Toe);ano=r(zOr,"__init__()"),zOr.forEach(t),nno=r(MPe," (throws an error)."),MPe.forEach(t),sno=i(Qs),Xr=n(Qs,"DIV",{class:!0});var Ws=s(Xr);f(rA.$$.fragment,Ws),lno=i(Ws),Moe=n(Ws,"P",{});var QOr=s(Moe);ino=r(QOr,"Instantiates one of the base model classes of the library from a configuration."),QOr.forEach(t),dno=i(Ws),Ki=n(Ws,"P",{});var aU=s(Ki);cno=r(aU,`Note:
Loading a model from its configuration file does `),Eoe=n(aU,"STRONG",{});var WOr=s(Eoe);mno=r(WOr,"not"),WOr.forEach(t),fno=r(aU,` load the model weights. It only affects the
model\u2019s configuration. Use `),rB=n(aU,"A",{href:!0});var HOr=s(rB);gno=r(HOr,"from_pretrained()"),HOr.forEach(t),hno=r(aU," to load the model weights."),aU.forEach(t),uno=i(Ws),Coe=n(Ws,"P",{});var UOr=s(Coe);pno=r(UOr,"Examples:"),UOr.forEach(t),_no=i(Ws),f(tA.$$.fragment,Ws),Ws.forEach(t),bno=i(Qs),qe=n(Qs,"DIV",{class:!0});var Dt=s(qe);f(aA.$$.fragment,Dt),Fno=i(Dt),woe=n(Dt,"P",{});var JOr=s(woe);vno=r(JOr,"Instantiate one of the base model classes of the library from a pretrained model."),JOr.forEach(t),Tno=i(Dt),Xa=n(Dt,"P",{});var E3=s(Xa);Mno=r(E3,"The model class to instantiate is selected based on the "),Aoe=n(E3,"CODE",{});var YOr=s(Aoe);Eno=r(YOr,"model_type"),YOr.forEach(t),Cno=r(E3,` property of the config object (either
passed as an argument or loaded from `),yoe=n(E3,"CODE",{});var KOr=s(yoe);wno=r(KOr,"pretrained_model_name_or_path"),KOr.forEach(t),Ano=r(E3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Loe=n(E3,"CODE",{});var ZOr=s(Loe);yno=r(ZOr,"pretrained_model_name_or_path"),ZOr.forEach(t),Lno=r(E3,":"),E3.forEach(t),xno=i(Dt),T=n(Dt,"UL",{});var M=s(T);Hh=n(M,"LI",{});var v5e=s(Hh);xoe=n(v5e,"STRONG",{});var eVr=s(xoe);kno=r(eVr,"albert"),eVr.forEach(t),Sno=r(v5e," \u2014 "),tB=n(v5e,"A",{href:!0});var oVr=s(tB);Rno=r(oVr,"AlbertModel"),oVr.forEach(t),Bno=r(v5e," (ALBERT model)"),v5e.forEach(t),Pno=i(M),Uh=n(M,"LI",{});var T5e=s(Uh);koe=n(T5e,"STRONG",{});var rVr=s(koe);$no=r(rVr,"bart"),rVr.forEach(t),Ino=r(T5e," \u2014 "),aB=n(T5e,"A",{href:!0});var tVr=s(aB);qno=r(tVr,"BartModel"),tVr.forEach(t),Nno=r(T5e," (BART model)"),T5e.forEach(t),jno=i(M),Jh=n(M,"LI",{});var M5e=s(Jh);Soe=n(M5e,"STRONG",{});var aVr=s(Soe);Dno=r(aVr,"beit"),aVr.forEach(t),Gno=r(M5e," \u2014 "),nB=n(M5e,"A",{href:!0});var nVr=s(nB);Ono=r(nVr,"BeitModel"),nVr.forEach(t),Vno=r(M5e," (BEiT model)"),M5e.forEach(t),Xno=i(M),Yh=n(M,"LI",{});var E5e=s(Yh);Roe=n(E5e,"STRONG",{});var sVr=s(Roe);zno=r(sVr,"bert"),sVr.forEach(t),Qno=r(E5e," \u2014 "),sB=n(E5e,"A",{href:!0});var lVr=s(sB);Wno=r(lVr,"BertModel"),lVr.forEach(t),Hno=r(E5e," (BERT model)"),E5e.forEach(t),Uno=i(M),Kh=n(M,"LI",{});var C5e=s(Kh);Boe=n(C5e,"STRONG",{});var iVr=s(Boe);Jno=r(iVr,"bert-generation"),iVr.forEach(t),Yno=r(C5e," \u2014 "),lB=n(C5e,"A",{href:!0});var dVr=s(lB);Kno=r(dVr,"BertGenerationEncoder"),dVr.forEach(t),Zno=r(C5e," (Bert Generation model)"),C5e.forEach(t),eso=i(M),Zh=n(M,"LI",{});var w5e=s(Zh);Poe=n(w5e,"STRONG",{});var cVr=s(Poe);oso=r(cVr,"big_bird"),cVr.forEach(t),rso=r(w5e," \u2014 "),iB=n(w5e,"A",{href:!0});var mVr=s(iB);tso=r(mVr,"BigBirdModel"),mVr.forEach(t),aso=r(w5e," (BigBird model)"),w5e.forEach(t),nso=i(M),eu=n(M,"LI",{});var A5e=s(eu);$oe=n(A5e,"STRONG",{});var fVr=s($oe);sso=r(fVr,"bigbird_pegasus"),fVr.forEach(t),lso=r(A5e," \u2014 "),dB=n(A5e,"A",{href:!0});var gVr=s(dB);iso=r(gVr,"BigBirdPegasusModel"),gVr.forEach(t),dso=r(A5e," (BigBirdPegasus model)"),A5e.forEach(t),cso=i(M),ou=n(M,"LI",{});var y5e=s(ou);Ioe=n(y5e,"STRONG",{});var hVr=s(Ioe);mso=r(hVr,"blenderbot"),hVr.forEach(t),fso=r(y5e," \u2014 "),cB=n(y5e,"A",{href:!0});var uVr=s(cB);gso=r(uVr,"BlenderbotModel"),uVr.forEach(t),hso=r(y5e," (Blenderbot model)"),y5e.forEach(t),uso=i(M),ru=n(M,"LI",{});var L5e=s(ru);qoe=n(L5e,"STRONG",{});var pVr=s(qoe);pso=r(pVr,"blenderbot-small"),pVr.forEach(t),_so=r(L5e," \u2014 "),mB=n(L5e,"A",{href:!0});var _Vr=s(mB);bso=r(_Vr,"BlenderbotSmallModel"),_Vr.forEach(t),Fso=r(L5e," (BlenderbotSmall model)"),L5e.forEach(t),vso=i(M),tu=n(M,"LI",{});var x5e=s(tu);Noe=n(x5e,"STRONG",{});var bVr=s(Noe);Tso=r(bVr,"camembert"),bVr.forEach(t),Mso=r(x5e," \u2014 "),fB=n(x5e,"A",{href:!0});var FVr=s(fB);Eso=r(FVr,"CamembertModel"),FVr.forEach(t),Cso=r(x5e," (CamemBERT model)"),x5e.forEach(t),wso=i(M),au=n(M,"LI",{});var k5e=s(au);joe=n(k5e,"STRONG",{});var vVr=s(joe);Aso=r(vVr,"canine"),vVr.forEach(t),yso=r(k5e," \u2014 "),gB=n(k5e,"A",{href:!0});var TVr=s(gB);Lso=r(TVr,"CanineModel"),TVr.forEach(t),xso=r(k5e," (Canine model)"),k5e.forEach(t),kso=i(M),nu=n(M,"LI",{});var S5e=s(nu);Doe=n(S5e,"STRONG",{});var MVr=s(Doe);Sso=r(MVr,"clip"),MVr.forEach(t),Rso=r(S5e," \u2014 "),hB=n(S5e,"A",{href:!0});var EVr=s(hB);Bso=r(EVr,"CLIPModel"),EVr.forEach(t),Pso=r(S5e," (CLIP model)"),S5e.forEach(t),$so=i(M),su=n(M,"LI",{});var R5e=s(su);Goe=n(R5e,"STRONG",{});var CVr=s(Goe);Iso=r(CVr,"convbert"),CVr.forEach(t),qso=r(R5e," \u2014 "),uB=n(R5e,"A",{href:!0});var wVr=s(uB);Nso=r(wVr,"ConvBertModel"),wVr.forEach(t),jso=r(R5e," (ConvBERT model)"),R5e.forEach(t),Dso=i(M),lu=n(M,"LI",{});var B5e=s(lu);Ooe=n(B5e,"STRONG",{});var AVr=s(Ooe);Gso=r(AVr,"convnext"),AVr.forEach(t),Oso=r(B5e," \u2014 "),pB=n(B5e,"A",{href:!0});var yVr=s(pB);Vso=r(yVr,"ConvNextModel"),yVr.forEach(t),Xso=r(B5e," (ConvNext model)"),B5e.forEach(t),zso=i(M),iu=n(M,"LI",{});var P5e=s(iu);Voe=n(P5e,"STRONG",{});var LVr=s(Voe);Qso=r(LVr,"ctrl"),LVr.forEach(t),Wso=r(P5e," \u2014 "),_B=n(P5e,"A",{href:!0});var xVr=s(_B);Hso=r(xVr,"CTRLModel"),xVr.forEach(t),Uso=r(P5e," (CTRL model)"),P5e.forEach(t),Jso=i(M),du=n(M,"LI",{});var $5e=s(du);Xoe=n($5e,"STRONG",{});var kVr=s(Xoe);Yso=r(kVr,"data2vec-audio"),kVr.forEach(t),Kso=r($5e," \u2014 "),bB=n($5e,"A",{href:!0});var SVr=s(bB);Zso=r(SVr,"Data2VecAudioModel"),SVr.forEach(t),elo=r($5e," (Data2VecAudio model)"),$5e.forEach(t),olo=i(M),cu=n(M,"LI",{});var I5e=s(cu);zoe=n(I5e,"STRONG",{});var RVr=s(zoe);rlo=r(RVr,"data2vec-text"),RVr.forEach(t),tlo=r(I5e," \u2014 "),FB=n(I5e,"A",{href:!0});var BVr=s(FB);alo=r(BVr,"Data2VecTextModel"),BVr.forEach(t),nlo=r(I5e," (Data2VecText model)"),I5e.forEach(t),slo=i(M),mu=n(M,"LI",{});var q5e=s(mu);Qoe=n(q5e,"STRONG",{});var PVr=s(Qoe);llo=r(PVr,"deberta"),PVr.forEach(t),ilo=r(q5e," \u2014 "),vB=n(q5e,"A",{href:!0});var $Vr=s(vB);dlo=r($Vr,"DebertaModel"),$Vr.forEach(t),clo=r(q5e," (DeBERTa model)"),q5e.forEach(t),mlo=i(M),fu=n(M,"LI",{});var N5e=s(fu);Woe=n(N5e,"STRONG",{});var IVr=s(Woe);flo=r(IVr,"deberta-v2"),IVr.forEach(t),glo=r(N5e," \u2014 "),TB=n(N5e,"A",{href:!0});var qVr=s(TB);hlo=r(qVr,"DebertaV2Model"),qVr.forEach(t),ulo=r(N5e," (DeBERTa-v2 model)"),N5e.forEach(t),plo=i(M),gu=n(M,"LI",{});var j5e=s(gu);Hoe=n(j5e,"STRONG",{});var NVr=s(Hoe);_lo=r(NVr,"decision_transformer"),NVr.forEach(t),blo=r(j5e," \u2014 "),MB=n(j5e,"A",{href:!0});var jVr=s(MB);Flo=r(jVr,"DecisionTransformerModel"),jVr.forEach(t),vlo=r(j5e," (Decision Transformer model)"),j5e.forEach(t),Tlo=i(M),hu=n(M,"LI",{});var D5e=s(hu);Uoe=n(D5e,"STRONG",{});var DVr=s(Uoe);Mlo=r(DVr,"deit"),DVr.forEach(t),Elo=r(D5e," \u2014 "),EB=n(D5e,"A",{href:!0});var GVr=s(EB);Clo=r(GVr,"DeiTModel"),GVr.forEach(t),wlo=r(D5e," (DeiT model)"),D5e.forEach(t),Alo=i(M),uu=n(M,"LI",{});var G5e=s(uu);Joe=n(G5e,"STRONG",{});var OVr=s(Joe);ylo=r(OVr,"detr"),OVr.forEach(t),Llo=r(G5e," \u2014 "),CB=n(G5e,"A",{href:!0});var VVr=s(CB);xlo=r(VVr,"DetrModel"),VVr.forEach(t),klo=r(G5e," (DETR model)"),G5e.forEach(t),Slo=i(M),pu=n(M,"LI",{});var O5e=s(pu);Yoe=n(O5e,"STRONG",{});var XVr=s(Yoe);Rlo=r(XVr,"distilbert"),XVr.forEach(t),Blo=r(O5e," \u2014 "),wB=n(O5e,"A",{href:!0});var zVr=s(wB);Plo=r(zVr,"DistilBertModel"),zVr.forEach(t),$lo=r(O5e," (DistilBERT model)"),O5e.forEach(t),Ilo=i(M),_u=n(M,"LI",{});var V5e=s(_u);Koe=n(V5e,"STRONG",{});var QVr=s(Koe);qlo=r(QVr,"dpr"),QVr.forEach(t),Nlo=r(V5e," \u2014 "),AB=n(V5e,"A",{href:!0});var WVr=s(AB);jlo=r(WVr,"DPRQuestionEncoder"),WVr.forEach(t),Dlo=r(V5e," (DPR model)"),V5e.forEach(t),Glo=i(M),bu=n(M,"LI",{});var X5e=s(bu);Zoe=n(X5e,"STRONG",{});var HVr=s(Zoe);Olo=r(HVr,"dpt"),HVr.forEach(t),Vlo=r(X5e," \u2014 "),yB=n(X5e,"A",{href:!0});var UVr=s(yB);Xlo=r(UVr,"DPTModel"),UVr.forEach(t),zlo=r(X5e," (DPT model)"),X5e.forEach(t),Qlo=i(M),Fu=n(M,"LI",{});var z5e=s(Fu);ere=n(z5e,"STRONG",{});var JVr=s(ere);Wlo=r(JVr,"electra"),JVr.forEach(t),Hlo=r(z5e," \u2014 "),LB=n(z5e,"A",{href:!0});var YVr=s(LB);Ulo=r(YVr,"ElectraModel"),YVr.forEach(t),Jlo=r(z5e," (ELECTRA model)"),z5e.forEach(t),Ylo=i(M),vu=n(M,"LI",{});var Q5e=s(vu);ore=n(Q5e,"STRONG",{});var KVr=s(ore);Klo=r(KVr,"flaubert"),KVr.forEach(t),Zlo=r(Q5e," \u2014 "),xB=n(Q5e,"A",{href:!0});var ZVr=s(xB);eio=r(ZVr,"FlaubertModel"),ZVr.forEach(t),oio=r(Q5e," (FlauBERT model)"),Q5e.forEach(t),rio=i(M),Tu=n(M,"LI",{});var W5e=s(Tu);rre=n(W5e,"STRONG",{});var eXr=s(rre);tio=r(eXr,"fnet"),eXr.forEach(t),aio=r(W5e," \u2014 "),kB=n(W5e,"A",{href:!0});var oXr=s(kB);nio=r(oXr,"FNetModel"),oXr.forEach(t),sio=r(W5e," (FNet model)"),W5e.forEach(t),lio=i(M),Mu=n(M,"LI",{});var H5e=s(Mu);tre=n(H5e,"STRONG",{});var rXr=s(tre);iio=r(rXr,"fsmt"),rXr.forEach(t),dio=r(H5e," \u2014 "),SB=n(H5e,"A",{href:!0});var tXr=s(SB);cio=r(tXr,"FSMTModel"),tXr.forEach(t),mio=r(H5e," (FairSeq Machine-Translation model)"),H5e.forEach(t),fio=i(M),js=n(M,"LI",{});var i9=s(js);are=n(i9,"STRONG",{});var aXr=s(are);gio=r(aXr,"funnel"),aXr.forEach(t),hio=r(i9," \u2014 "),RB=n(i9,"A",{href:!0});var nXr=s(RB);uio=r(nXr,"FunnelModel"),nXr.forEach(t),pio=r(i9," or "),BB=n(i9,"A",{href:!0});var sXr=s(BB);_io=r(sXr,"FunnelBaseModel"),sXr.forEach(t),bio=r(i9," (Funnel Transformer model)"),i9.forEach(t),Fio=i(M),Eu=n(M,"LI",{});var U5e=s(Eu);nre=n(U5e,"STRONG",{});var lXr=s(nre);vio=r(lXr,"glpn"),lXr.forEach(t),Tio=r(U5e," \u2014 "),PB=n(U5e,"A",{href:!0});var iXr=s(PB);Mio=r(iXr,"GLPNModel"),iXr.forEach(t),Eio=r(U5e," (GLPN model)"),U5e.forEach(t),Cio=i(M),Cu=n(M,"LI",{});var J5e=s(Cu);sre=n(J5e,"STRONG",{});var dXr=s(sre);wio=r(dXr,"gpt2"),dXr.forEach(t),Aio=r(J5e," \u2014 "),$B=n(J5e,"A",{href:!0});var cXr=s($B);yio=r(cXr,"GPT2Model"),cXr.forEach(t),Lio=r(J5e," (OpenAI GPT-2 model)"),J5e.forEach(t),xio=i(M),wu=n(M,"LI",{});var Y5e=s(wu);lre=n(Y5e,"STRONG",{});var mXr=s(lre);kio=r(mXr,"gpt_neo"),mXr.forEach(t),Sio=r(Y5e," \u2014 "),IB=n(Y5e,"A",{href:!0});var fXr=s(IB);Rio=r(fXr,"GPTNeoModel"),fXr.forEach(t),Bio=r(Y5e," (GPT Neo model)"),Y5e.forEach(t),Pio=i(M),Au=n(M,"LI",{});var K5e=s(Au);ire=n(K5e,"STRONG",{});var gXr=s(ire);$io=r(gXr,"gptj"),gXr.forEach(t),Iio=r(K5e," \u2014 "),qB=n(K5e,"A",{href:!0});var hXr=s(qB);qio=r(hXr,"GPTJModel"),hXr.forEach(t),Nio=r(K5e," (GPT-J model)"),K5e.forEach(t),jio=i(M),yu=n(M,"LI",{});var Z5e=s(yu);dre=n(Z5e,"STRONG",{});var uXr=s(dre);Dio=r(uXr,"hubert"),uXr.forEach(t),Gio=r(Z5e," \u2014 "),NB=n(Z5e,"A",{href:!0});var pXr=s(NB);Oio=r(pXr,"HubertModel"),pXr.forEach(t),Vio=r(Z5e," (Hubert model)"),Z5e.forEach(t),Xio=i(M),Lu=n(M,"LI",{});var e3e=s(Lu);cre=n(e3e,"STRONG",{});var _Xr=s(cre);zio=r(_Xr,"ibert"),_Xr.forEach(t),Qio=r(e3e," \u2014 "),jB=n(e3e,"A",{href:!0});var bXr=s(jB);Wio=r(bXr,"IBertModel"),bXr.forEach(t),Hio=r(e3e," (I-BERT model)"),e3e.forEach(t),Uio=i(M),xu=n(M,"LI",{});var o3e=s(xu);mre=n(o3e,"STRONG",{});var FXr=s(mre);Jio=r(FXr,"imagegpt"),FXr.forEach(t),Yio=r(o3e," \u2014 "),DB=n(o3e,"A",{href:!0});var vXr=s(DB);Kio=r(vXr,"ImageGPTModel"),vXr.forEach(t),Zio=r(o3e," (ImageGPT model)"),o3e.forEach(t),edo=i(M),ku=n(M,"LI",{});var r3e=s(ku);fre=n(r3e,"STRONG",{});var TXr=s(fre);odo=r(TXr,"layoutlm"),TXr.forEach(t),rdo=r(r3e," \u2014 "),GB=n(r3e,"A",{href:!0});var MXr=s(GB);tdo=r(MXr,"LayoutLMModel"),MXr.forEach(t),ado=r(r3e," (LayoutLM model)"),r3e.forEach(t),ndo=i(M),Su=n(M,"LI",{});var t3e=s(Su);gre=n(t3e,"STRONG",{});var EXr=s(gre);sdo=r(EXr,"layoutlmv2"),EXr.forEach(t),ldo=r(t3e," \u2014 "),OB=n(t3e,"A",{href:!0});var CXr=s(OB);ido=r(CXr,"LayoutLMv2Model"),CXr.forEach(t),ddo=r(t3e," (LayoutLMv2 model)"),t3e.forEach(t),cdo=i(M),Ru=n(M,"LI",{});var a3e=s(Ru);hre=n(a3e,"STRONG",{});var wXr=s(hre);mdo=r(wXr,"led"),wXr.forEach(t),fdo=r(a3e," \u2014 "),VB=n(a3e,"A",{href:!0});var AXr=s(VB);gdo=r(AXr,"LEDModel"),AXr.forEach(t),hdo=r(a3e," (LED model)"),a3e.forEach(t),udo=i(M),Bu=n(M,"LI",{});var n3e=s(Bu);ure=n(n3e,"STRONG",{});var yXr=s(ure);pdo=r(yXr,"longformer"),yXr.forEach(t),_do=r(n3e," \u2014 "),XB=n(n3e,"A",{href:!0});var LXr=s(XB);bdo=r(LXr,"LongformerModel"),LXr.forEach(t),Fdo=r(n3e," (Longformer model)"),n3e.forEach(t),vdo=i(M),Pu=n(M,"LI",{});var s3e=s(Pu);pre=n(s3e,"STRONG",{});var xXr=s(pre);Tdo=r(xXr,"luke"),xXr.forEach(t),Mdo=r(s3e," \u2014 "),zB=n(s3e,"A",{href:!0});var kXr=s(zB);Edo=r(kXr,"LukeModel"),kXr.forEach(t),Cdo=r(s3e," (LUKE model)"),s3e.forEach(t),wdo=i(M),$u=n(M,"LI",{});var l3e=s($u);_re=n(l3e,"STRONG",{});var SXr=s(_re);Ado=r(SXr,"lxmert"),SXr.forEach(t),ydo=r(l3e," \u2014 "),QB=n(l3e,"A",{href:!0});var RXr=s(QB);Ldo=r(RXr,"LxmertModel"),RXr.forEach(t),xdo=r(l3e," (LXMERT model)"),l3e.forEach(t),kdo=i(M),Iu=n(M,"LI",{});var i3e=s(Iu);bre=n(i3e,"STRONG",{});var BXr=s(bre);Sdo=r(BXr,"m2m_100"),BXr.forEach(t),Rdo=r(i3e," \u2014 "),WB=n(i3e,"A",{href:!0});var PXr=s(WB);Bdo=r(PXr,"M2M100Model"),PXr.forEach(t),Pdo=r(i3e," (M2M100 model)"),i3e.forEach(t),$do=i(M),qu=n(M,"LI",{});var d3e=s(qu);Fre=n(d3e,"STRONG",{});var $Xr=s(Fre);Ido=r($Xr,"marian"),$Xr.forEach(t),qdo=r(d3e," \u2014 "),HB=n(d3e,"A",{href:!0});var IXr=s(HB);Ndo=r(IXr,"MarianModel"),IXr.forEach(t),jdo=r(d3e," (Marian model)"),d3e.forEach(t),Ddo=i(M),Nu=n(M,"LI",{});var c3e=s(Nu);vre=n(c3e,"STRONG",{});var qXr=s(vre);Gdo=r(qXr,"maskformer"),qXr.forEach(t),Odo=r(c3e," \u2014 "),UB=n(c3e,"A",{href:!0});var NXr=s(UB);Vdo=r(NXr,"MaskFormerModel"),NXr.forEach(t),Xdo=r(c3e," (MaskFormer model)"),c3e.forEach(t),zdo=i(M),ju=n(M,"LI",{});var m3e=s(ju);Tre=n(m3e,"STRONG",{});var jXr=s(Tre);Qdo=r(jXr,"mbart"),jXr.forEach(t),Wdo=r(m3e," \u2014 "),JB=n(m3e,"A",{href:!0});var DXr=s(JB);Hdo=r(DXr,"MBartModel"),DXr.forEach(t),Udo=r(m3e," (mBART model)"),m3e.forEach(t),Jdo=i(M),Du=n(M,"LI",{});var f3e=s(Du);Mre=n(f3e,"STRONG",{});var GXr=s(Mre);Ydo=r(GXr,"megatron-bert"),GXr.forEach(t),Kdo=r(f3e," \u2014 "),YB=n(f3e,"A",{href:!0});var OXr=s(YB);Zdo=r(OXr,"MegatronBertModel"),OXr.forEach(t),eco=r(f3e," (MegatronBert model)"),f3e.forEach(t),oco=i(M),Gu=n(M,"LI",{});var g3e=s(Gu);Ere=n(g3e,"STRONG",{});var VXr=s(Ere);rco=r(VXr,"mobilebert"),VXr.forEach(t),tco=r(g3e," \u2014 "),KB=n(g3e,"A",{href:!0});var XXr=s(KB);aco=r(XXr,"MobileBertModel"),XXr.forEach(t),nco=r(g3e," (MobileBERT model)"),g3e.forEach(t),sco=i(M),Ou=n(M,"LI",{});var h3e=s(Ou);Cre=n(h3e,"STRONG",{});var zXr=s(Cre);lco=r(zXr,"mpnet"),zXr.forEach(t),ico=r(h3e," \u2014 "),ZB=n(h3e,"A",{href:!0});var QXr=s(ZB);dco=r(QXr,"MPNetModel"),QXr.forEach(t),cco=r(h3e," (MPNet model)"),h3e.forEach(t),mco=i(M),Vu=n(M,"LI",{});var u3e=s(Vu);wre=n(u3e,"STRONG",{});var WXr=s(wre);fco=r(WXr,"mt5"),WXr.forEach(t),gco=r(u3e," \u2014 "),eP=n(u3e,"A",{href:!0});var HXr=s(eP);hco=r(HXr,"MT5Model"),HXr.forEach(t),uco=r(u3e," (mT5 model)"),u3e.forEach(t),pco=i(M),Xu=n(M,"LI",{});var p3e=s(Xu);Are=n(p3e,"STRONG",{});var UXr=s(Are);_co=r(UXr,"nystromformer"),UXr.forEach(t),bco=r(p3e," \u2014 "),oP=n(p3e,"A",{href:!0});var JXr=s(oP);Fco=r(JXr,"NystromformerModel"),JXr.forEach(t),vco=r(p3e," (Nystromformer model)"),p3e.forEach(t),Tco=i(M),zu=n(M,"LI",{});var _3e=s(zu);yre=n(_3e,"STRONG",{});var YXr=s(yre);Mco=r(YXr,"openai-gpt"),YXr.forEach(t),Eco=r(_3e," \u2014 "),rP=n(_3e,"A",{href:!0});var KXr=s(rP);Cco=r(KXr,"OpenAIGPTModel"),KXr.forEach(t),wco=r(_3e," (OpenAI GPT model)"),_3e.forEach(t),Aco=i(M),Qu=n(M,"LI",{});var b3e=s(Qu);Lre=n(b3e,"STRONG",{});var ZXr=s(Lre);yco=r(ZXr,"pegasus"),ZXr.forEach(t),Lco=r(b3e," \u2014 "),tP=n(b3e,"A",{href:!0});var ezr=s(tP);xco=r(ezr,"PegasusModel"),ezr.forEach(t),kco=r(b3e," (Pegasus model)"),b3e.forEach(t),Sco=i(M),Wu=n(M,"LI",{});var F3e=s(Wu);xre=n(F3e,"STRONG",{});var ozr=s(xre);Rco=r(ozr,"perceiver"),ozr.forEach(t),Bco=r(F3e," \u2014 "),aP=n(F3e,"A",{href:!0});var rzr=s(aP);Pco=r(rzr,"PerceiverModel"),rzr.forEach(t),$co=r(F3e," (Perceiver model)"),F3e.forEach(t),Ico=i(M),Hu=n(M,"LI",{});var v3e=s(Hu);kre=n(v3e,"STRONG",{});var tzr=s(kre);qco=r(tzr,"plbart"),tzr.forEach(t),Nco=r(v3e," \u2014 "),nP=n(v3e,"A",{href:!0});var azr=s(nP);jco=r(azr,"PLBartModel"),azr.forEach(t),Dco=r(v3e," (PLBart model)"),v3e.forEach(t),Gco=i(M),Uu=n(M,"LI",{});var T3e=s(Uu);Sre=n(T3e,"STRONG",{});var nzr=s(Sre);Oco=r(nzr,"poolformer"),nzr.forEach(t),Vco=r(T3e," \u2014 "),sP=n(T3e,"A",{href:!0});var szr=s(sP);Xco=r(szr,"PoolFormerModel"),szr.forEach(t),zco=r(T3e," (PoolFormer model)"),T3e.forEach(t),Qco=i(M),Ju=n(M,"LI",{});var M3e=s(Ju);Rre=n(M3e,"STRONG",{});var lzr=s(Rre);Wco=r(lzr,"prophetnet"),lzr.forEach(t),Hco=r(M3e," \u2014 "),lP=n(M3e,"A",{href:!0});var izr=s(lP);Uco=r(izr,"ProphetNetModel"),izr.forEach(t),Jco=r(M3e," (ProphetNet model)"),M3e.forEach(t),Yco=i(M),Yu=n(M,"LI",{});var E3e=s(Yu);Bre=n(E3e,"STRONG",{});var dzr=s(Bre);Kco=r(dzr,"qdqbert"),dzr.forEach(t),Zco=r(E3e," \u2014 "),iP=n(E3e,"A",{href:!0});var czr=s(iP);emo=r(czr,"QDQBertModel"),czr.forEach(t),omo=r(E3e," (QDQBert model)"),E3e.forEach(t),rmo=i(M),Ku=n(M,"LI",{});var C3e=s(Ku);Pre=n(C3e,"STRONG",{});var mzr=s(Pre);tmo=r(mzr,"reformer"),mzr.forEach(t),amo=r(C3e," \u2014 "),dP=n(C3e,"A",{href:!0});var fzr=s(dP);nmo=r(fzr,"ReformerModel"),fzr.forEach(t),smo=r(C3e," (Reformer model)"),C3e.forEach(t),lmo=i(M),Zu=n(M,"LI",{});var w3e=s(Zu);$re=n(w3e,"STRONG",{});var gzr=s($re);imo=r(gzr,"regnet"),gzr.forEach(t),dmo=r(w3e," \u2014 "),cP=n(w3e,"A",{href:!0});var hzr=s(cP);cmo=r(hzr,"RegNetModel"),hzr.forEach(t),mmo=r(w3e," (RegNet model)"),w3e.forEach(t),fmo=i(M),ep=n(M,"LI",{});var A3e=s(ep);Ire=n(A3e,"STRONG",{});var uzr=s(Ire);gmo=r(uzr,"rembert"),uzr.forEach(t),hmo=r(A3e," \u2014 "),mP=n(A3e,"A",{href:!0});var pzr=s(mP);umo=r(pzr,"RemBertModel"),pzr.forEach(t),pmo=r(A3e," (RemBERT model)"),A3e.forEach(t),_mo=i(M),op=n(M,"LI",{});var y3e=s(op);qre=n(y3e,"STRONG",{});var _zr=s(qre);bmo=r(_zr,"resnet"),_zr.forEach(t),Fmo=r(y3e," \u2014 "),fP=n(y3e,"A",{href:!0});var bzr=s(fP);vmo=r(bzr,"ResNetModel"),bzr.forEach(t),Tmo=r(y3e," (ResNet model)"),y3e.forEach(t),Mmo=i(M),rp=n(M,"LI",{});var L3e=s(rp);Nre=n(L3e,"STRONG",{});var Fzr=s(Nre);Emo=r(Fzr,"retribert"),Fzr.forEach(t),Cmo=r(L3e," \u2014 "),gP=n(L3e,"A",{href:!0});var vzr=s(gP);wmo=r(vzr,"RetriBertModel"),vzr.forEach(t),Amo=r(L3e," (RetriBERT model)"),L3e.forEach(t),ymo=i(M),tp=n(M,"LI",{});var x3e=s(tp);jre=n(x3e,"STRONG",{});var Tzr=s(jre);Lmo=r(Tzr,"roberta"),Tzr.forEach(t),xmo=r(x3e," \u2014 "),hP=n(x3e,"A",{href:!0});var Mzr=s(hP);kmo=r(Mzr,"RobertaModel"),Mzr.forEach(t),Smo=r(x3e," (RoBERTa model)"),x3e.forEach(t),Rmo=i(M),ap=n(M,"LI",{});var k3e=s(ap);Dre=n(k3e,"STRONG",{});var Ezr=s(Dre);Bmo=r(Ezr,"roformer"),Ezr.forEach(t),Pmo=r(k3e," \u2014 "),uP=n(k3e,"A",{href:!0});var Czr=s(uP);$mo=r(Czr,"RoFormerModel"),Czr.forEach(t),Imo=r(k3e," (RoFormer model)"),k3e.forEach(t),qmo=i(M),np=n(M,"LI",{});var S3e=s(np);Gre=n(S3e,"STRONG",{});var wzr=s(Gre);Nmo=r(wzr,"segformer"),wzr.forEach(t),jmo=r(S3e," \u2014 "),pP=n(S3e,"A",{href:!0});var Azr=s(pP);Dmo=r(Azr,"SegformerModel"),Azr.forEach(t),Gmo=r(S3e," (SegFormer model)"),S3e.forEach(t),Omo=i(M),sp=n(M,"LI",{});var R3e=s(sp);Ore=n(R3e,"STRONG",{});var yzr=s(Ore);Vmo=r(yzr,"sew"),yzr.forEach(t),Xmo=r(R3e," \u2014 "),_P=n(R3e,"A",{href:!0});var Lzr=s(_P);zmo=r(Lzr,"SEWModel"),Lzr.forEach(t),Qmo=r(R3e," (SEW model)"),R3e.forEach(t),Wmo=i(M),lp=n(M,"LI",{});var B3e=s(lp);Vre=n(B3e,"STRONG",{});var xzr=s(Vre);Hmo=r(xzr,"sew-d"),xzr.forEach(t),Umo=r(B3e," \u2014 "),bP=n(B3e,"A",{href:!0});var kzr=s(bP);Jmo=r(kzr,"SEWDModel"),kzr.forEach(t),Ymo=r(B3e," (SEW-D model)"),B3e.forEach(t),Kmo=i(M),ip=n(M,"LI",{});var P3e=s(ip);Xre=n(P3e,"STRONG",{});var Szr=s(Xre);Zmo=r(Szr,"speech_to_text"),Szr.forEach(t),efo=r(P3e," \u2014 "),FP=n(P3e,"A",{href:!0});var Rzr=s(FP);ofo=r(Rzr,"Speech2TextModel"),Rzr.forEach(t),rfo=r(P3e," (Speech2Text model)"),P3e.forEach(t),tfo=i(M),dp=n(M,"LI",{});var $3e=s(dp);zre=n($3e,"STRONG",{});var Bzr=s(zre);afo=r(Bzr,"splinter"),Bzr.forEach(t),nfo=r($3e," \u2014 "),vP=n($3e,"A",{href:!0});var Pzr=s(vP);sfo=r(Pzr,"SplinterModel"),Pzr.forEach(t),lfo=r($3e," (Splinter model)"),$3e.forEach(t),ifo=i(M),cp=n(M,"LI",{});var I3e=s(cp);Qre=n(I3e,"STRONG",{});var $zr=s(Qre);dfo=r($zr,"squeezebert"),$zr.forEach(t),cfo=r(I3e," \u2014 "),TP=n(I3e,"A",{href:!0});var Izr=s(TP);mfo=r(Izr,"SqueezeBertModel"),Izr.forEach(t),ffo=r(I3e," (SqueezeBERT model)"),I3e.forEach(t),gfo=i(M),mp=n(M,"LI",{});var q3e=s(mp);Wre=n(q3e,"STRONG",{});var qzr=s(Wre);hfo=r(qzr,"swin"),qzr.forEach(t),ufo=r(q3e," \u2014 "),MP=n(q3e,"A",{href:!0});var Nzr=s(MP);pfo=r(Nzr,"SwinModel"),Nzr.forEach(t),_fo=r(q3e," (Swin model)"),q3e.forEach(t),bfo=i(M),fp=n(M,"LI",{});var N3e=s(fp);Hre=n(N3e,"STRONG",{});var jzr=s(Hre);Ffo=r(jzr,"t5"),jzr.forEach(t),vfo=r(N3e," \u2014 "),EP=n(N3e,"A",{href:!0});var Dzr=s(EP);Tfo=r(Dzr,"T5Model"),Dzr.forEach(t),Mfo=r(N3e," (T5 model)"),N3e.forEach(t),Efo=i(M),gp=n(M,"LI",{});var j3e=s(gp);Ure=n(j3e,"STRONG",{});var Gzr=s(Ure);Cfo=r(Gzr,"tapas"),Gzr.forEach(t),wfo=r(j3e," \u2014 "),CP=n(j3e,"A",{href:!0});var Ozr=s(CP);Afo=r(Ozr,"TapasModel"),Ozr.forEach(t),yfo=r(j3e," (TAPAS model)"),j3e.forEach(t),Lfo=i(M),hp=n(M,"LI",{});var D3e=s(hp);Jre=n(D3e,"STRONG",{});var Vzr=s(Jre);xfo=r(Vzr,"transfo-xl"),Vzr.forEach(t),kfo=r(D3e," \u2014 "),wP=n(D3e,"A",{href:!0});var Xzr=s(wP);Sfo=r(Xzr,"TransfoXLModel"),Xzr.forEach(t),Rfo=r(D3e," (Transformer-XL model)"),D3e.forEach(t),Bfo=i(M),up=n(M,"LI",{});var G3e=s(up);Yre=n(G3e,"STRONG",{});var zzr=s(Yre);Pfo=r(zzr,"unispeech"),zzr.forEach(t),$fo=r(G3e," \u2014 "),AP=n(G3e,"A",{href:!0});var Qzr=s(AP);Ifo=r(Qzr,"UniSpeechModel"),Qzr.forEach(t),qfo=r(G3e," (UniSpeech model)"),G3e.forEach(t),Nfo=i(M),pp=n(M,"LI",{});var O3e=s(pp);Kre=n(O3e,"STRONG",{});var Wzr=s(Kre);jfo=r(Wzr,"unispeech-sat"),Wzr.forEach(t),Dfo=r(O3e," \u2014 "),yP=n(O3e,"A",{href:!0});var Hzr=s(yP);Gfo=r(Hzr,"UniSpeechSatModel"),Hzr.forEach(t),Ofo=r(O3e," (UniSpeechSat model)"),O3e.forEach(t),Vfo=i(M),_p=n(M,"LI",{});var V3e=s(_p);Zre=n(V3e,"STRONG",{});var Uzr=s(Zre);Xfo=r(Uzr,"van"),Uzr.forEach(t),zfo=r(V3e," \u2014 "),LP=n(V3e,"A",{href:!0});var Jzr=s(LP);Qfo=r(Jzr,"VanModel"),Jzr.forEach(t),Wfo=r(V3e," (VAN model)"),V3e.forEach(t),Hfo=i(M),bp=n(M,"LI",{});var X3e=s(bp);ete=n(X3e,"STRONG",{});var Yzr=s(ete);Ufo=r(Yzr,"vilt"),Yzr.forEach(t),Jfo=r(X3e," \u2014 "),xP=n(X3e,"A",{href:!0});var Kzr=s(xP);Yfo=r(Kzr,"ViltModel"),Kzr.forEach(t),Kfo=r(X3e," (ViLT model)"),X3e.forEach(t),Zfo=i(M),Fp=n(M,"LI",{});var z3e=s(Fp);ote=n(z3e,"STRONG",{});var Zzr=s(ote);ego=r(Zzr,"vision-text-dual-encoder"),Zzr.forEach(t),ogo=r(z3e," \u2014 "),kP=n(z3e,"A",{href:!0});var eQr=s(kP);rgo=r(eQr,"VisionTextDualEncoderModel"),eQr.forEach(t),tgo=r(z3e," (VisionTextDualEncoder model)"),z3e.forEach(t),ago=i(M),vp=n(M,"LI",{});var Q3e=s(vp);rte=n(Q3e,"STRONG",{});var oQr=s(rte);ngo=r(oQr,"visual_bert"),oQr.forEach(t),sgo=r(Q3e," \u2014 "),SP=n(Q3e,"A",{href:!0});var rQr=s(SP);lgo=r(rQr,"VisualBertModel"),rQr.forEach(t),igo=r(Q3e," (VisualBert model)"),Q3e.forEach(t),dgo=i(M),Tp=n(M,"LI",{});var W3e=s(Tp);tte=n(W3e,"STRONG",{});var tQr=s(tte);cgo=r(tQr,"vit"),tQr.forEach(t),mgo=r(W3e," \u2014 "),RP=n(W3e,"A",{href:!0});var aQr=s(RP);fgo=r(aQr,"ViTModel"),aQr.forEach(t),ggo=r(W3e," (ViT model)"),W3e.forEach(t),hgo=i(M),Mp=n(M,"LI",{});var H3e=s(Mp);ate=n(H3e,"STRONG",{});var nQr=s(ate);ugo=r(nQr,"vit_mae"),nQr.forEach(t),pgo=r(H3e," \u2014 "),BP=n(H3e,"A",{href:!0});var sQr=s(BP);_go=r(sQr,"ViTMAEModel"),sQr.forEach(t),bgo=r(H3e," (ViTMAE model)"),H3e.forEach(t),Fgo=i(M),Ep=n(M,"LI",{});var U3e=s(Ep);nte=n(U3e,"STRONG",{});var lQr=s(nte);vgo=r(lQr,"wav2vec2"),lQr.forEach(t),Tgo=r(U3e," \u2014 "),PP=n(U3e,"A",{href:!0});var iQr=s(PP);Mgo=r(iQr,"Wav2Vec2Model"),iQr.forEach(t),Ego=r(U3e," (Wav2Vec2 model)"),U3e.forEach(t),Cgo=i(M),Cp=n(M,"LI",{});var J3e=s(Cp);ste=n(J3e,"STRONG",{});var dQr=s(ste);wgo=r(dQr,"wavlm"),dQr.forEach(t),Ago=r(J3e," \u2014 "),$P=n(J3e,"A",{href:!0});var cQr=s($P);ygo=r(cQr,"WavLMModel"),cQr.forEach(t),Lgo=r(J3e," (WavLM model)"),J3e.forEach(t),xgo=i(M),wp=n(M,"LI",{});var Y3e=s(wp);lte=n(Y3e,"STRONG",{});var mQr=s(lte);kgo=r(mQr,"xglm"),mQr.forEach(t),Sgo=r(Y3e," \u2014 "),IP=n(Y3e,"A",{href:!0});var fQr=s(IP);Rgo=r(fQr,"XGLMModel"),fQr.forEach(t),Bgo=r(Y3e," (XGLM model)"),Y3e.forEach(t),Pgo=i(M),Ap=n(M,"LI",{});var K3e=s(Ap);ite=n(K3e,"STRONG",{});var gQr=s(ite);$go=r(gQr,"xlm"),gQr.forEach(t),Igo=r(K3e," \u2014 "),qP=n(K3e,"A",{href:!0});var hQr=s(qP);qgo=r(hQr,"XLMModel"),hQr.forEach(t),Ngo=r(K3e," (XLM model)"),K3e.forEach(t),jgo=i(M),yp=n(M,"LI",{});var Z3e=s(yp);dte=n(Z3e,"STRONG",{});var uQr=s(dte);Dgo=r(uQr,"xlm-prophetnet"),uQr.forEach(t),Ggo=r(Z3e," \u2014 "),NP=n(Z3e,"A",{href:!0});var pQr=s(NP);Ogo=r(pQr,"XLMProphetNetModel"),pQr.forEach(t),Vgo=r(Z3e," (XLMProphetNet model)"),Z3e.forEach(t),Xgo=i(M),Lp=n(M,"LI",{});var ewe=s(Lp);cte=n(ewe,"STRONG",{});var _Qr=s(cte);zgo=r(_Qr,"xlm-roberta"),_Qr.forEach(t),Qgo=r(ewe," \u2014 "),jP=n(ewe,"A",{href:!0});var bQr=s(jP);Wgo=r(bQr,"XLMRobertaModel"),bQr.forEach(t),Hgo=r(ewe," (XLM-RoBERTa model)"),ewe.forEach(t),Ugo=i(M),xp=n(M,"LI",{});var owe=s(xp);mte=n(owe,"STRONG",{});var FQr=s(mte);Jgo=r(FQr,"xlm-roberta-xl"),FQr.forEach(t),Ygo=r(owe," \u2014 "),DP=n(owe,"A",{href:!0});var vQr=s(DP);Kgo=r(vQr,"XLMRobertaXLModel"),vQr.forEach(t),Zgo=r(owe," (XLM-RoBERTa-XL model)"),owe.forEach(t),eho=i(M),kp=n(M,"LI",{});var rwe=s(kp);fte=n(rwe,"STRONG",{});var TQr=s(fte);oho=r(TQr,"xlnet"),TQr.forEach(t),rho=r(rwe," \u2014 "),GP=n(rwe,"A",{href:!0});var MQr=s(GP);tho=r(MQr,"XLNetModel"),MQr.forEach(t),aho=r(rwe," (XLNet model)"),rwe.forEach(t),nho=i(M),Sp=n(M,"LI",{});var twe=s(Sp);gte=n(twe,"STRONG",{});var EQr=s(gte);sho=r(EQr,"yoso"),EQr.forEach(t),lho=r(twe," \u2014 "),OP=n(twe,"A",{href:!0});var CQr=s(OP);iho=r(CQr,"YosoModel"),CQr.forEach(t),dho=r(twe," (YOSO model)"),twe.forEach(t),M.forEach(t),cho=i(Dt),Rp=n(Dt,"P",{});var awe=s(Rp);mho=r(awe,"The model is set in evaluation mode by default using "),hte=n(awe,"CODE",{});var wQr=s(hte);fho=r(wQr,"model.eval()"),wQr.forEach(t),gho=r(awe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ute=n(awe,"CODE",{});var AQr=s(ute);hho=r(AQr,"model.train()"),AQr.forEach(t),awe.forEach(t),uho=i(Dt),pte=n(Dt,"P",{});var yQr=s(pte);pho=r(yQr,"Examples:"),yQr.forEach(t),_ho=i(Dt),f(nA.$$.fragment,Dt),Dt.forEach(t),Qs.forEach(t),hRe=i(c),Zi=n(c,"H2",{class:!0});var EPe=s(Zi);Bp=n(EPe,"A",{id:!0,class:!0,href:!0});var LQr=s(Bp);_te=n(LQr,"SPAN",{});var xQr=s(_te);f(sA.$$.fragment,xQr),xQr.forEach(t),LQr.forEach(t),bho=i(EPe),bte=n(EPe,"SPAN",{});var kQr=s(bte);Fho=r(kQr,"AutoModelForPreTraining"),kQr.forEach(t),EPe.forEach(t),uRe=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);f(lA.$$.fragment,Hs),vho=i(Hs),ed=n(Hs,"P",{});var nU=s(ed);Tho=r(nU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),VP=n(nU,"A",{href:!0});var SQr=s(VP);Mho=r(SQr,"from_pretrained()"),SQr.forEach(t),Eho=r(nU," class method or the "),XP=n(nU,"A",{href:!0});var RQr=s(XP);Cho=r(RQr,"from_config()"),RQr.forEach(t),who=r(nU,` class
method.`),nU.forEach(t),Aho=i(Hs),iA=n(Hs,"P",{});var CPe=s(iA);yho=r(CPe,"This class cannot be instantiated directly using "),Fte=n(CPe,"CODE",{});var BQr=s(Fte);Lho=r(BQr,"__init__()"),BQr.forEach(t),xho=r(CPe," (throws an error)."),CPe.forEach(t),kho=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);f(dA.$$.fragment,Us),Sho=i(Us),vte=n(Us,"P",{});var PQr=s(vte);Rho=r(PQr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),PQr.forEach(t),Bho=i(Us),od=n(Us,"P",{});var sU=s(od);Pho=r(sU,`Note:
Loading a model from its configuration file does `),Tte=n(sU,"STRONG",{});var $Qr=s(Tte);$ho=r($Qr,"not"),$Qr.forEach(t),Iho=r(sU,` load the model weights. It only affects the
model\u2019s configuration. Use `),zP=n(sU,"A",{href:!0});var IQr=s(zP);qho=r(IQr,"from_pretrained()"),IQr.forEach(t),Nho=r(sU," to load the model weights."),sU.forEach(t),jho=i(Us),Mte=n(Us,"P",{});var qQr=s(Mte);Dho=r(qQr,"Examples:"),qQr.forEach(t),Gho=i(Us),f(cA.$$.fragment,Us),Us.forEach(t),Oho=i(Hs),Ne=n(Hs,"DIV",{class:!0});var Gt=s(Ne);f(mA.$$.fragment,Gt),Vho=i(Gt),Ete=n(Gt,"P",{});var NQr=s(Ete);Xho=r(NQr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),NQr.forEach(t),zho=i(Gt),za=n(Gt,"P",{});var C3=s(za);Qho=r(C3,"The model class to instantiate is selected based on the "),Cte=n(C3,"CODE",{});var jQr=s(Cte);Who=r(jQr,"model_type"),jQr.forEach(t),Hho=r(C3,` property of the config object (either
passed as an argument or loaded from `),wte=n(C3,"CODE",{});var DQr=s(wte);Uho=r(DQr,"pretrained_model_name_or_path"),DQr.forEach(t),Jho=r(C3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ate=n(C3,"CODE",{});var GQr=s(Ate);Yho=r(GQr,"pretrained_model_name_or_path"),GQr.forEach(t),Kho=r(C3,":"),C3.forEach(t),Zho=i(Gt),S=n(Gt,"UL",{});var B=s(S);Pp=n(B,"LI",{});var nwe=s(Pp);yte=n(nwe,"STRONG",{});var OQr=s(yte);euo=r(OQr,"albert"),OQr.forEach(t),ouo=r(nwe," \u2014 "),QP=n(nwe,"A",{href:!0});var VQr=s(QP);ruo=r(VQr,"AlbertForPreTraining"),VQr.forEach(t),tuo=r(nwe," (ALBERT model)"),nwe.forEach(t),auo=i(B),$p=n(B,"LI",{});var swe=s($p);Lte=n(swe,"STRONG",{});var XQr=s(Lte);nuo=r(XQr,"bart"),XQr.forEach(t),suo=r(swe," \u2014 "),WP=n(swe,"A",{href:!0});var zQr=s(WP);luo=r(zQr,"BartForConditionalGeneration"),zQr.forEach(t),iuo=r(swe," (BART model)"),swe.forEach(t),duo=i(B),Ip=n(B,"LI",{});var lwe=s(Ip);xte=n(lwe,"STRONG",{});var QQr=s(xte);cuo=r(QQr,"bert"),QQr.forEach(t),muo=r(lwe," \u2014 "),HP=n(lwe,"A",{href:!0});var WQr=s(HP);fuo=r(WQr,"BertForPreTraining"),WQr.forEach(t),guo=r(lwe," (BERT model)"),lwe.forEach(t),huo=i(B),qp=n(B,"LI",{});var iwe=s(qp);kte=n(iwe,"STRONG",{});var HQr=s(kte);uuo=r(HQr,"big_bird"),HQr.forEach(t),puo=r(iwe," \u2014 "),UP=n(iwe,"A",{href:!0});var UQr=s(UP);_uo=r(UQr,"BigBirdForPreTraining"),UQr.forEach(t),buo=r(iwe," (BigBird model)"),iwe.forEach(t),Fuo=i(B),Np=n(B,"LI",{});var dwe=s(Np);Ste=n(dwe,"STRONG",{});var JQr=s(Ste);vuo=r(JQr,"camembert"),JQr.forEach(t),Tuo=r(dwe," \u2014 "),JP=n(dwe,"A",{href:!0});var YQr=s(JP);Muo=r(YQr,"CamembertForMaskedLM"),YQr.forEach(t),Euo=r(dwe," (CamemBERT model)"),dwe.forEach(t),Cuo=i(B),jp=n(B,"LI",{});var cwe=s(jp);Rte=n(cwe,"STRONG",{});var KQr=s(Rte);wuo=r(KQr,"ctrl"),KQr.forEach(t),Auo=r(cwe," \u2014 "),YP=n(cwe,"A",{href:!0});var ZQr=s(YP);yuo=r(ZQr,"CTRLLMHeadModel"),ZQr.forEach(t),Luo=r(cwe," (CTRL model)"),cwe.forEach(t),xuo=i(B),Dp=n(B,"LI",{});var mwe=s(Dp);Bte=n(mwe,"STRONG",{});var eWr=s(Bte);kuo=r(eWr,"data2vec-text"),eWr.forEach(t),Suo=r(mwe," \u2014 "),KP=n(mwe,"A",{href:!0});var oWr=s(KP);Ruo=r(oWr,"Data2VecTextForMaskedLM"),oWr.forEach(t),Buo=r(mwe," (Data2VecText model)"),mwe.forEach(t),Puo=i(B),Gp=n(B,"LI",{});var fwe=s(Gp);Pte=n(fwe,"STRONG",{});var rWr=s(Pte);$uo=r(rWr,"deberta"),rWr.forEach(t),Iuo=r(fwe," \u2014 "),ZP=n(fwe,"A",{href:!0});var tWr=s(ZP);quo=r(tWr,"DebertaForMaskedLM"),tWr.forEach(t),Nuo=r(fwe," (DeBERTa model)"),fwe.forEach(t),juo=i(B),Op=n(B,"LI",{});var gwe=s(Op);$te=n(gwe,"STRONG",{});var aWr=s($te);Duo=r(aWr,"deberta-v2"),aWr.forEach(t),Guo=r(gwe," \u2014 "),e$=n(gwe,"A",{href:!0});var nWr=s(e$);Ouo=r(nWr,"DebertaV2ForMaskedLM"),nWr.forEach(t),Vuo=r(gwe," (DeBERTa-v2 model)"),gwe.forEach(t),Xuo=i(B),Vp=n(B,"LI",{});var hwe=s(Vp);Ite=n(hwe,"STRONG",{});var sWr=s(Ite);zuo=r(sWr,"distilbert"),sWr.forEach(t),Quo=r(hwe," \u2014 "),o$=n(hwe,"A",{href:!0});var lWr=s(o$);Wuo=r(lWr,"DistilBertForMaskedLM"),lWr.forEach(t),Huo=r(hwe," (DistilBERT model)"),hwe.forEach(t),Uuo=i(B),Xp=n(B,"LI",{});var uwe=s(Xp);qte=n(uwe,"STRONG",{});var iWr=s(qte);Juo=r(iWr,"electra"),iWr.forEach(t),Yuo=r(uwe," \u2014 "),r$=n(uwe,"A",{href:!0});var dWr=s(r$);Kuo=r(dWr,"ElectraForPreTraining"),dWr.forEach(t),Zuo=r(uwe," (ELECTRA model)"),uwe.forEach(t),epo=i(B),zp=n(B,"LI",{});var pwe=s(zp);Nte=n(pwe,"STRONG",{});var cWr=s(Nte);opo=r(cWr,"flaubert"),cWr.forEach(t),rpo=r(pwe," \u2014 "),t$=n(pwe,"A",{href:!0});var mWr=s(t$);tpo=r(mWr,"FlaubertWithLMHeadModel"),mWr.forEach(t),apo=r(pwe," (FlauBERT model)"),pwe.forEach(t),npo=i(B),Qp=n(B,"LI",{});var _we=s(Qp);jte=n(_we,"STRONG",{});var fWr=s(jte);spo=r(fWr,"fnet"),fWr.forEach(t),lpo=r(_we," \u2014 "),a$=n(_we,"A",{href:!0});var gWr=s(a$);ipo=r(gWr,"FNetForPreTraining"),gWr.forEach(t),dpo=r(_we," (FNet model)"),_we.forEach(t),cpo=i(B),Wp=n(B,"LI",{});var bwe=s(Wp);Dte=n(bwe,"STRONG",{});var hWr=s(Dte);mpo=r(hWr,"fsmt"),hWr.forEach(t),fpo=r(bwe," \u2014 "),n$=n(bwe,"A",{href:!0});var uWr=s(n$);gpo=r(uWr,"FSMTForConditionalGeneration"),uWr.forEach(t),hpo=r(bwe," (FairSeq Machine-Translation model)"),bwe.forEach(t),upo=i(B),Hp=n(B,"LI",{});var Fwe=s(Hp);Gte=n(Fwe,"STRONG",{});var pWr=s(Gte);ppo=r(pWr,"funnel"),pWr.forEach(t),_po=r(Fwe," \u2014 "),s$=n(Fwe,"A",{href:!0});var _Wr=s(s$);bpo=r(_Wr,"FunnelForPreTraining"),_Wr.forEach(t),Fpo=r(Fwe," (Funnel Transformer model)"),Fwe.forEach(t),vpo=i(B),Up=n(B,"LI",{});var vwe=s(Up);Ote=n(vwe,"STRONG",{});var bWr=s(Ote);Tpo=r(bWr,"gpt2"),bWr.forEach(t),Mpo=r(vwe," \u2014 "),l$=n(vwe,"A",{href:!0});var FWr=s(l$);Epo=r(FWr,"GPT2LMHeadModel"),FWr.forEach(t),Cpo=r(vwe," (OpenAI GPT-2 model)"),vwe.forEach(t),wpo=i(B),Jp=n(B,"LI",{});var Twe=s(Jp);Vte=n(Twe,"STRONG",{});var vWr=s(Vte);Apo=r(vWr,"ibert"),vWr.forEach(t),ypo=r(Twe," \u2014 "),i$=n(Twe,"A",{href:!0});var TWr=s(i$);Lpo=r(TWr,"IBertForMaskedLM"),TWr.forEach(t),xpo=r(Twe," (I-BERT model)"),Twe.forEach(t),kpo=i(B),Yp=n(B,"LI",{});var Mwe=s(Yp);Xte=n(Mwe,"STRONG",{});var MWr=s(Xte);Spo=r(MWr,"layoutlm"),MWr.forEach(t),Rpo=r(Mwe," \u2014 "),d$=n(Mwe,"A",{href:!0});var EWr=s(d$);Bpo=r(EWr,"LayoutLMForMaskedLM"),EWr.forEach(t),Ppo=r(Mwe," (LayoutLM model)"),Mwe.forEach(t),$po=i(B),Kp=n(B,"LI",{});var Ewe=s(Kp);zte=n(Ewe,"STRONG",{});var CWr=s(zte);Ipo=r(CWr,"longformer"),CWr.forEach(t),qpo=r(Ewe," \u2014 "),c$=n(Ewe,"A",{href:!0});var wWr=s(c$);Npo=r(wWr,"LongformerForMaskedLM"),wWr.forEach(t),jpo=r(Ewe," (Longformer model)"),Ewe.forEach(t),Dpo=i(B),Zp=n(B,"LI",{});var Cwe=s(Zp);Qte=n(Cwe,"STRONG",{});var AWr=s(Qte);Gpo=r(AWr,"lxmert"),AWr.forEach(t),Opo=r(Cwe," \u2014 "),m$=n(Cwe,"A",{href:!0});var yWr=s(m$);Vpo=r(yWr,"LxmertForPreTraining"),yWr.forEach(t),Xpo=r(Cwe," (LXMERT model)"),Cwe.forEach(t),zpo=i(B),e_=n(B,"LI",{});var wwe=s(e_);Wte=n(wwe,"STRONG",{});var LWr=s(Wte);Qpo=r(LWr,"megatron-bert"),LWr.forEach(t),Wpo=r(wwe," \u2014 "),f$=n(wwe,"A",{href:!0});var xWr=s(f$);Hpo=r(xWr,"MegatronBertForPreTraining"),xWr.forEach(t),Upo=r(wwe," (MegatronBert model)"),wwe.forEach(t),Jpo=i(B),o_=n(B,"LI",{});var Awe=s(o_);Hte=n(Awe,"STRONG",{});var kWr=s(Hte);Ypo=r(kWr,"mobilebert"),kWr.forEach(t),Kpo=r(Awe," \u2014 "),g$=n(Awe,"A",{href:!0});var SWr=s(g$);Zpo=r(SWr,"MobileBertForPreTraining"),SWr.forEach(t),e_o=r(Awe," (MobileBERT model)"),Awe.forEach(t),o_o=i(B),r_=n(B,"LI",{});var ywe=s(r_);Ute=n(ywe,"STRONG",{});var RWr=s(Ute);r_o=r(RWr,"mpnet"),RWr.forEach(t),t_o=r(ywe," \u2014 "),h$=n(ywe,"A",{href:!0});var BWr=s(h$);a_o=r(BWr,"MPNetForMaskedLM"),BWr.forEach(t),n_o=r(ywe," (MPNet model)"),ywe.forEach(t),s_o=i(B),t_=n(B,"LI",{});var Lwe=s(t_);Jte=n(Lwe,"STRONG",{});var PWr=s(Jte);l_o=r(PWr,"openai-gpt"),PWr.forEach(t),i_o=r(Lwe," \u2014 "),u$=n(Lwe,"A",{href:!0});var $Wr=s(u$);d_o=r($Wr,"OpenAIGPTLMHeadModel"),$Wr.forEach(t),c_o=r(Lwe," (OpenAI GPT model)"),Lwe.forEach(t),m_o=i(B),a_=n(B,"LI",{});var xwe=s(a_);Yte=n(xwe,"STRONG",{});var IWr=s(Yte);f_o=r(IWr,"retribert"),IWr.forEach(t),g_o=r(xwe," \u2014 "),p$=n(xwe,"A",{href:!0});var qWr=s(p$);h_o=r(qWr,"RetriBertModel"),qWr.forEach(t),u_o=r(xwe," (RetriBERT model)"),xwe.forEach(t),p_o=i(B),n_=n(B,"LI",{});var kwe=s(n_);Kte=n(kwe,"STRONG",{});var NWr=s(Kte);__o=r(NWr,"roberta"),NWr.forEach(t),b_o=r(kwe," \u2014 "),_$=n(kwe,"A",{href:!0});var jWr=s(_$);F_o=r(jWr,"RobertaForMaskedLM"),jWr.forEach(t),v_o=r(kwe," (RoBERTa model)"),kwe.forEach(t),T_o=i(B),s_=n(B,"LI",{});var Swe=s(s_);Zte=n(Swe,"STRONG",{});var DWr=s(Zte);M_o=r(DWr,"squeezebert"),DWr.forEach(t),E_o=r(Swe," \u2014 "),b$=n(Swe,"A",{href:!0});var GWr=s(b$);C_o=r(GWr,"SqueezeBertForMaskedLM"),GWr.forEach(t),w_o=r(Swe," (SqueezeBERT model)"),Swe.forEach(t),A_o=i(B),l_=n(B,"LI",{});var Rwe=s(l_);eae=n(Rwe,"STRONG",{});var OWr=s(eae);y_o=r(OWr,"t5"),OWr.forEach(t),L_o=r(Rwe," \u2014 "),F$=n(Rwe,"A",{href:!0});var VWr=s(F$);x_o=r(VWr,"T5ForConditionalGeneration"),VWr.forEach(t),k_o=r(Rwe," (T5 model)"),Rwe.forEach(t),S_o=i(B),i_=n(B,"LI",{});var Bwe=s(i_);oae=n(Bwe,"STRONG",{});var XWr=s(oae);R_o=r(XWr,"tapas"),XWr.forEach(t),B_o=r(Bwe," \u2014 "),v$=n(Bwe,"A",{href:!0});var zWr=s(v$);P_o=r(zWr,"TapasForMaskedLM"),zWr.forEach(t),$_o=r(Bwe," (TAPAS model)"),Bwe.forEach(t),I_o=i(B),d_=n(B,"LI",{});var Pwe=s(d_);rae=n(Pwe,"STRONG",{});var QWr=s(rae);q_o=r(QWr,"transfo-xl"),QWr.forEach(t),N_o=r(Pwe," \u2014 "),T$=n(Pwe,"A",{href:!0});var WWr=s(T$);j_o=r(WWr,"TransfoXLLMHeadModel"),WWr.forEach(t),D_o=r(Pwe," (Transformer-XL model)"),Pwe.forEach(t),G_o=i(B),c_=n(B,"LI",{});var $we=s(c_);tae=n($we,"STRONG",{});var HWr=s(tae);O_o=r(HWr,"unispeech"),HWr.forEach(t),V_o=r($we," \u2014 "),M$=n($we,"A",{href:!0});var UWr=s(M$);X_o=r(UWr,"UniSpeechForPreTraining"),UWr.forEach(t),z_o=r($we," (UniSpeech model)"),$we.forEach(t),Q_o=i(B),m_=n(B,"LI",{});var Iwe=s(m_);aae=n(Iwe,"STRONG",{});var JWr=s(aae);W_o=r(JWr,"unispeech-sat"),JWr.forEach(t),H_o=r(Iwe," \u2014 "),E$=n(Iwe,"A",{href:!0});var YWr=s(E$);U_o=r(YWr,"UniSpeechSatForPreTraining"),YWr.forEach(t),J_o=r(Iwe," (UniSpeechSat model)"),Iwe.forEach(t),Y_o=i(B),f_=n(B,"LI",{});var qwe=s(f_);nae=n(qwe,"STRONG",{});var KWr=s(nae);K_o=r(KWr,"visual_bert"),KWr.forEach(t),Z_o=r(qwe," \u2014 "),C$=n(qwe,"A",{href:!0});var ZWr=s(C$);ebo=r(ZWr,"VisualBertForPreTraining"),ZWr.forEach(t),obo=r(qwe," (VisualBert model)"),qwe.forEach(t),rbo=i(B),g_=n(B,"LI",{});var Nwe=s(g_);sae=n(Nwe,"STRONG",{});var eHr=s(sae);tbo=r(eHr,"vit_mae"),eHr.forEach(t),abo=r(Nwe," \u2014 "),w$=n(Nwe,"A",{href:!0});var oHr=s(w$);nbo=r(oHr,"ViTMAEForPreTraining"),oHr.forEach(t),sbo=r(Nwe," (ViTMAE model)"),Nwe.forEach(t),lbo=i(B),h_=n(B,"LI",{});var jwe=s(h_);lae=n(jwe,"STRONG",{});var rHr=s(lae);ibo=r(rHr,"wav2vec2"),rHr.forEach(t),dbo=r(jwe," \u2014 "),A$=n(jwe,"A",{href:!0});var tHr=s(A$);cbo=r(tHr,"Wav2Vec2ForPreTraining"),tHr.forEach(t),mbo=r(jwe," (Wav2Vec2 model)"),jwe.forEach(t),fbo=i(B),u_=n(B,"LI",{});var Dwe=s(u_);iae=n(Dwe,"STRONG",{});var aHr=s(iae);gbo=r(aHr,"xlm"),aHr.forEach(t),hbo=r(Dwe," \u2014 "),y$=n(Dwe,"A",{href:!0});var nHr=s(y$);ubo=r(nHr,"XLMWithLMHeadModel"),nHr.forEach(t),pbo=r(Dwe," (XLM model)"),Dwe.forEach(t),_bo=i(B),p_=n(B,"LI",{});var Gwe=s(p_);dae=n(Gwe,"STRONG",{});var sHr=s(dae);bbo=r(sHr,"xlm-roberta"),sHr.forEach(t),Fbo=r(Gwe," \u2014 "),L$=n(Gwe,"A",{href:!0});var lHr=s(L$);vbo=r(lHr,"XLMRobertaForMaskedLM"),lHr.forEach(t),Tbo=r(Gwe," (XLM-RoBERTa model)"),Gwe.forEach(t),Mbo=i(B),__=n(B,"LI",{});var Owe=s(__);cae=n(Owe,"STRONG",{});var iHr=s(cae);Ebo=r(iHr,"xlm-roberta-xl"),iHr.forEach(t),Cbo=r(Owe," \u2014 "),x$=n(Owe,"A",{href:!0});var dHr=s(x$);wbo=r(dHr,"XLMRobertaXLForMaskedLM"),dHr.forEach(t),Abo=r(Owe," (XLM-RoBERTa-XL model)"),Owe.forEach(t),ybo=i(B),b_=n(B,"LI",{});var Vwe=s(b_);mae=n(Vwe,"STRONG",{});var cHr=s(mae);Lbo=r(cHr,"xlnet"),cHr.forEach(t),xbo=r(Vwe," \u2014 "),k$=n(Vwe,"A",{href:!0});var mHr=s(k$);kbo=r(mHr,"XLNetLMHeadModel"),mHr.forEach(t),Sbo=r(Vwe," (XLNet model)"),Vwe.forEach(t),B.forEach(t),Rbo=i(Gt),F_=n(Gt,"P",{});var Xwe=s(F_);Bbo=r(Xwe,"The model is set in evaluation mode by default using "),fae=n(Xwe,"CODE",{});var fHr=s(fae);Pbo=r(fHr,"model.eval()"),fHr.forEach(t),$bo=r(Xwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gae=n(Xwe,"CODE",{});var gHr=s(gae);Ibo=r(gHr,"model.train()"),gHr.forEach(t),Xwe.forEach(t),qbo=i(Gt),hae=n(Gt,"P",{});var hHr=s(hae);Nbo=r(hHr,"Examples:"),hHr.forEach(t),jbo=i(Gt),f(fA.$$.fragment,Gt),Gt.forEach(t),Hs.forEach(t),pRe=i(c),rd=n(c,"H2",{class:!0});var wPe=s(rd);v_=n(wPe,"A",{id:!0,class:!0,href:!0});var uHr=s(v_);uae=n(uHr,"SPAN",{});var pHr=s(uae);f(gA.$$.fragment,pHr),pHr.forEach(t),uHr.forEach(t),Dbo=i(wPe),pae=n(wPe,"SPAN",{});var _Hr=s(pae);Gbo=r(_Hr,"AutoModelForCausalLM"),_Hr.forEach(t),wPe.forEach(t),_Re=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);f(hA.$$.fragment,Js),Obo=i(Js),td=n(Js,"P",{});var lU=s(td);Vbo=r(lU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),S$=n(lU,"A",{href:!0});var bHr=s(S$);Xbo=r(bHr,"from_pretrained()"),bHr.forEach(t),zbo=r(lU," class method or the "),R$=n(lU,"A",{href:!0});var FHr=s(R$);Qbo=r(FHr,"from_config()"),FHr.forEach(t),Wbo=r(lU,` class
method.`),lU.forEach(t),Hbo=i(Js),uA=n(Js,"P",{});var APe=s(uA);Ubo=r(APe,"This class cannot be instantiated directly using "),_ae=n(APe,"CODE",{});var vHr=s(_ae);Jbo=r(vHr,"__init__()"),vHr.forEach(t),Ybo=r(APe," (throws an error)."),APe.forEach(t),Kbo=i(Js),Qr=n(Js,"DIV",{class:!0});var Ys=s(Qr);f(pA.$$.fragment,Ys),Zbo=i(Ys),bae=n(Ys,"P",{});var THr=s(bae);e2o=r(THr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),THr.forEach(t),o2o=i(Ys),ad=n(Ys,"P",{});var iU=s(ad);r2o=r(iU,`Note:
Loading a model from its configuration file does `),Fae=n(iU,"STRONG",{});var MHr=s(Fae);t2o=r(MHr,"not"),MHr.forEach(t),a2o=r(iU,` load the model weights. It only affects the
model\u2019s configuration. Use `),B$=n(iU,"A",{href:!0});var EHr=s(B$);n2o=r(EHr,"from_pretrained()"),EHr.forEach(t),s2o=r(iU," to load the model weights."),iU.forEach(t),l2o=i(Ys),vae=n(Ys,"P",{});var CHr=s(vae);i2o=r(CHr,"Examples:"),CHr.forEach(t),d2o=i(Ys),f(_A.$$.fragment,Ys),Ys.forEach(t),c2o=i(Js),je=n(Js,"DIV",{class:!0});var Ot=s(je);f(bA.$$.fragment,Ot),m2o=i(Ot),Tae=n(Ot,"P",{});var wHr=s(Tae);f2o=r(wHr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),wHr.forEach(t),g2o=i(Ot),Qa=n(Ot,"P",{});var w3=s(Qa);h2o=r(w3,"The model class to instantiate is selected based on the "),Mae=n(w3,"CODE",{});var AHr=s(Mae);u2o=r(AHr,"model_type"),AHr.forEach(t),p2o=r(w3,` property of the config object (either
passed as an argument or loaded from `),Eae=n(w3,"CODE",{});var yHr=s(Eae);_2o=r(yHr,"pretrained_model_name_or_path"),yHr.forEach(t),b2o=r(w3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cae=n(w3,"CODE",{});var LHr=s(Cae);F2o=r(LHr,"pretrained_model_name_or_path"),LHr.forEach(t),v2o=r(w3,":"),w3.forEach(t),T2o=i(Ot),$=n(Ot,"UL",{});var q=s($);T_=n(q,"LI",{});var zwe=s(T_);wae=n(zwe,"STRONG",{});var xHr=s(wae);M2o=r(xHr,"bart"),xHr.forEach(t),E2o=r(zwe," \u2014 "),P$=n(zwe,"A",{href:!0});var kHr=s(P$);C2o=r(kHr,"BartForCausalLM"),kHr.forEach(t),w2o=r(zwe," (BART model)"),zwe.forEach(t),A2o=i(q),M_=n(q,"LI",{});var Qwe=s(M_);Aae=n(Qwe,"STRONG",{});var SHr=s(Aae);y2o=r(SHr,"bert"),SHr.forEach(t),L2o=r(Qwe," \u2014 "),$$=n(Qwe,"A",{href:!0});var RHr=s($$);x2o=r(RHr,"BertLMHeadModel"),RHr.forEach(t),k2o=r(Qwe," (BERT model)"),Qwe.forEach(t),S2o=i(q),E_=n(q,"LI",{});var Wwe=s(E_);yae=n(Wwe,"STRONG",{});var BHr=s(yae);R2o=r(BHr,"bert-generation"),BHr.forEach(t),B2o=r(Wwe," \u2014 "),I$=n(Wwe,"A",{href:!0});var PHr=s(I$);P2o=r(PHr,"BertGenerationDecoder"),PHr.forEach(t),$2o=r(Wwe," (Bert Generation model)"),Wwe.forEach(t),I2o=i(q),C_=n(q,"LI",{});var Hwe=s(C_);Lae=n(Hwe,"STRONG",{});var $Hr=s(Lae);q2o=r($Hr,"big_bird"),$Hr.forEach(t),N2o=r(Hwe," \u2014 "),q$=n(Hwe,"A",{href:!0});var IHr=s(q$);j2o=r(IHr,"BigBirdForCausalLM"),IHr.forEach(t),D2o=r(Hwe," (BigBird model)"),Hwe.forEach(t),G2o=i(q),w_=n(q,"LI",{});var Uwe=s(w_);xae=n(Uwe,"STRONG",{});var qHr=s(xae);O2o=r(qHr,"bigbird_pegasus"),qHr.forEach(t),V2o=r(Uwe," \u2014 "),N$=n(Uwe,"A",{href:!0});var NHr=s(N$);X2o=r(NHr,"BigBirdPegasusForCausalLM"),NHr.forEach(t),z2o=r(Uwe," (BigBirdPegasus model)"),Uwe.forEach(t),Q2o=i(q),A_=n(q,"LI",{});var Jwe=s(A_);kae=n(Jwe,"STRONG",{});var jHr=s(kae);W2o=r(jHr,"blenderbot"),jHr.forEach(t),H2o=r(Jwe," \u2014 "),j$=n(Jwe,"A",{href:!0});var DHr=s(j$);U2o=r(DHr,"BlenderbotForCausalLM"),DHr.forEach(t),J2o=r(Jwe," (Blenderbot model)"),Jwe.forEach(t),Y2o=i(q),y_=n(q,"LI",{});var Ywe=s(y_);Sae=n(Ywe,"STRONG",{});var GHr=s(Sae);K2o=r(GHr,"blenderbot-small"),GHr.forEach(t),Z2o=r(Ywe," \u2014 "),D$=n(Ywe,"A",{href:!0});var OHr=s(D$);eFo=r(OHr,"BlenderbotSmallForCausalLM"),OHr.forEach(t),oFo=r(Ywe," (BlenderbotSmall model)"),Ywe.forEach(t),rFo=i(q),L_=n(q,"LI",{});var Kwe=s(L_);Rae=n(Kwe,"STRONG",{});var VHr=s(Rae);tFo=r(VHr,"camembert"),VHr.forEach(t),aFo=r(Kwe," \u2014 "),G$=n(Kwe,"A",{href:!0});var XHr=s(G$);nFo=r(XHr,"CamembertForCausalLM"),XHr.forEach(t),sFo=r(Kwe," (CamemBERT model)"),Kwe.forEach(t),lFo=i(q),x_=n(q,"LI",{});var Zwe=s(x_);Bae=n(Zwe,"STRONG",{});var zHr=s(Bae);iFo=r(zHr,"ctrl"),zHr.forEach(t),dFo=r(Zwe," \u2014 "),O$=n(Zwe,"A",{href:!0});var QHr=s(O$);cFo=r(QHr,"CTRLLMHeadModel"),QHr.forEach(t),mFo=r(Zwe," (CTRL model)"),Zwe.forEach(t),fFo=i(q),k_=n(q,"LI",{});var eAe=s(k_);Pae=n(eAe,"STRONG",{});var WHr=s(Pae);gFo=r(WHr,"data2vec-text"),WHr.forEach(t),hFo=r(eAe," \u2014 "),V$=n(eAe,"A",{href:!0});var HHr=s(V$);uFo=r(HHr,"Data2VecTextForCausalLM"),HHr.forEach(t),pFo=r(eAe," (Data2VecText model)"),eAe.forEach(t),_Fo=i(q),S_=n(q,"LI",{});var oAe=s(S_);$ae=n(oAe,"STRONG",{});var UHr=s($ae);bFo=r(UHr,"electra"),UHr.forEach(t),FFo=r(oAe," \u2014 "),X$=n(oAe,"A",{href:!0});var JHr=s(X$);vFo=r(JHr,"ElectraForCausalLM"),JHr.forEach(t),TFo=r(oAe," (ELECTRA model)"),oAe.forEach(t),MFo=i(q),R_=n(q,"LI",{});var rAe=s(R_);Iae=n(rAe,"STRONG",{});var YHr=s(Iae);EFo=r(YHr,"gpt2"),YHr.forEach(t),CFo=r(rAe," \u2014 "),z$=n(rAe,"A",{href:!0});var KHr=s(z$);wFo=r(KHr,"GPT2LMHeadModel"),KHr.forEach(t),AFo=r(rAe," (OpenAI GPT-2 model)"),rAe.forEach(t),yFo=i(q),B_=n(q,"LI",{});var tAe=s(B_);qae=n(tAe,"STRONG",{});var ZHr=s(qae);LFo=r(ZHr,"gpt_neo"),ZHr.forEach(t),xFo=r(tAe," \u2014 "),Q$=n(tAe,"A",{href:!0});var eUr=s(Q$);kFo=r(eUr,"GPTNeoForCausalLM"),eUr.forEach(t),SFo=r(tAe," (GPT Neo model)"),tAe.forEach(t),RFo=i(q),P_=n(q,"LI",{});var aAe=s(P_);Nae=n(aAe,"STRONG",{});var oUr=s(Nae);BFo=r(oUr,"gptj"),oUr.forEach(t),PFo=r(aAe," \u2014 "),W$=n(aAe,"A",{href:!0});var rUr=s(W$);$Fo=r(rUr,"GPTJForCausalLM"),rUr.forEach(t),IFo=r(aAe," (GPT-J model)"),aAe.forEach(t),qFo=i(q),$_=n(q,"LI",{});var nAe=s($_);jae=n(nAe,"STRONG",{});var tUr=s(jae);NFo=r(tUr,"marian"),tUr.forEach(t),jFo=r(nAe," \u2014 "),H$=n(nAe,"A",{href:!0});var aUr=s(H$);DFo=r(aUr,"MarianForCausalLM"),aUr.forEach(t),GFo=r(nAe," (Marian model)"),nAe.forEach(t),OFo=i(q),I_=n(q,"LI",{});var sAe=s(I_);Dae=n(sAe,"STRONG",{});var nUr=s(Dae);VFo=r(nUr,"mbart"),nUr.forEach(t),XFo=r(sAe," \u2014 "),U$=n(sAe,"A",{href:!0});var sUr=s(U$);zFo=r(sUr,"MBartForCausalLM"),sUr.forEach(t),QFo=r(sAe," (mBART model)"),sAe.forEach(t),WFo=i(q),q_=n(q,"LI",{});var lAe=s(q_);Gae=n(lAe,"STRONG",{});var lUr=s(Gae);HFo=r(lUr,"megatron-bert"),lUr.forEach(t),UFo=r(lAe," \u2014 "),J$=n(lAe,"A",{href:!0});var iUr=s(J$);JFo=r(iUr,"MegatronBertForCausalLM"),iUr.forEach(t),YFo=r(lAe," (MegatronBert model)"),lAe.forEach(t),KFo=i(q),N_=n(q,"LI",{});var iAe=s(N_);Oae=n(iAe,"STRONG",{});var dUr=s(Oae);ZFo=r(dUr,"openai-gpt"),dUr.forEach(t),evo=r(iAe," \u2014 "),Y$=n(iAe,"A",{href:!0});var cUr=s(Y$);ovo=r(cUr,"OpenAIGPTLMHeadModel"),cUr.forEach(t),rvo=r(iAe," (OpenAI GPT model)"),iAe.forEach(t),tvo=i(q),j_=n(q,"LI",{});var dAe=s(j_);Vae=n(dAe,"STRONG",{});var mUr=s(Vae);avo=r(mUr,"pegasus"),mUr.forEach(t),nvo=r(dAe," \u2014 "),K$=n(dAe,"A",{href:!0});var fUr=s(K$);svo=r(fUr,"PegasusForCausalLM"),fUr.forEach(t),lvo=r(dAe," (Pegasus model)"),dAe.forEach(t),ivo=i(q),D_=n(q,"LI",{});var cAe=s(D_);Xae=n(cAe,"STRONG",{});var gUr=s(Xae);dvo=r(gUr,"plbart"),gUr.forEach(t),cvo=r(cAe," \u2014 "),Z$=n(cAe,"A",{href:!0});var hUr=s(Z$);mvo=r(hUr,"PLBartForCausalLM"),hUr.forEach(t),fvo=r(cAe," (PLBart model)"),cAe.forEach(t),gvo=i(q),G_=n(q,"LI",{});var mAe=s(G_);zae=n(mAe,"STRONG",{});var uUr=s(zae);hvo=r(uUr,"prophetnet"),uUr.forEach(t),uvo=r(mAe," \u2014 "),eI=n(mAe,"A",{href:!0});var pUr=s(eI);pvo=r(pUr,"ProphetNetForCausalLM"),pUr.forEach(t),_vo=r(mAe," (ProphetNet model)"),mAe.forEach(t),bvo=i(q),O_=n(q,"LI",{});var fAe=s(O_);Qae=n(fAe,"STRONG",{});var _Ur=s(Qae);Fvo=r(_Ur,"qdqbert"),_Ur.forEach(t),vvo=r(fAe," \u2014 "),oI=n(fAe,"A",{href:!0});var bUr=s(oI);Tvo=r(bUr,"QDQBertLMHeadModel"),bUr.forEach(t),Mvo=r(fAe," (QDQBert model)"),fAe.forEach(t),Evo=i(q),V_=n(q,"LI",{});var gAe=s(V_);Wae=n(gAe,"STRONG",{});var FUr=s(Wae);Cvo=r(FUr,"reformer"),FUr.forEach(t),wvo=r(gAe," \u2014 "),rI=n(gAe,"A",{href:!0});var vUr=s(rI);Avo=r(vUr,"ReformerModelWithLMHead"),vUr.forEach(t),yvo=r(gAe," (Reformer model)"),gAe.forEach(t),Lvo=i(q),X_=n(q,"LI",{});var hAe=s(X_);Hae=n(hAe,"STRONG",{});var TUr=s(Hae);xvo=r(TUr,"rembert"),TUr.forEach(t),kvo=r(hAe," \u2014 "),tI=n(hAe,"A",{href:!0});var MUr=s(tI);Svo=r(MUr,"RemBertForCausalLM"),MUr.forEach(t),Rvo=r(hAe," (RemBERT model)"),hAe.forEach(t),Bvo=i(q),z_=n(q,"LI",{});var uAe=s(z_);Uae=n(uAe,"STRONG",{});var EUr=s(Uae);Pvo=r(EUr,"roberta"),EUr.forEach(t),$vo=r(uAe," \u2014 "),aI=n(uAe,"A",{href:!0});var CUr=s(aI);Ivo=r(CUr,"RobertaForCausalLM"),CUr.forEach(t),qvo=r(uAe," (RoBERTa model)"),uAe.forEach(t),Nvo=i(q),Q_=n(q,"LI",{});var pAe=s(Q_);Jae=n(pAe,"STRONG",{});var wUr=s(Jae);jvo=r(wUr,"roformer"),wUr.forEach(t),Dvo=r(pAe," \u2014 "),nI=n(pAe,"A",{href:!0});var AUr=s(nI);Gvo=r(AUr,"RoFormerForCausalLM"),AUr.forEach(t),Ovo=r(pAe," (RoFormer model)"),pAe.forEach(t),Vvo=i(q),W_=n(q,"LI",{});var _Ae=s(W_);Yae=n(_Ae,"STRONG",{});var yUr=s(Yae);Xvo=r(yUr,"speech_to_text_2"),yUr.forEach(t),zvo=r(_Ae," \u2014 "),sI=n(_Ae,"A",{href:!0});var LUr=s(sI);Qvo=r(LUr,"Speech2Text2ForCausalLM"),LUr.forEach(t),Wvo=r(_Ae," (Speech2Text2 model)"),_Ae.forEach(t),Hvo=i(q),H_=n(q,"LI",{});var bAe=s(H_);Kae=n(bAe,"STRONG",{});var xUr=s(Kae);Uvo=r(xUr,"transfo-xl"),xUr.forEach(t),Jvo=r(bAe," \u2014 "),lI=n(bAe,"A",{href:!0});var kUr=s(lI);Yvo=r(kUr,"TransfoXLLMHeadModel"),kUr.forEach(t),Kvo=r(bAe," (Transformer-XL model)"),bAe.forEach(t),Zvo=i(q),U_=n(q,"LI",{});var FAe=s(U_);Zae=n(FAe,"STRONG",{});var SUr=s(Zae);eTo=r(SUr,"trocr"),SUr.forEach(t),oTo=r(FAe," \u2014 "),iI=n(FAe,"A",{href:!0});var RUr=s(iI);rTo=r(RUr,"TrOCRForCausalLM"),RUr.forEach(t),tTo=r(FAe," (TrOCR model)"),FAe.forEach(t),aTo=i(q),J_=n(q,"LI",{});var vAe=s(J_);ene=n(vAe,"STRONG",{});var BUr=s(ene);nTo=r(BUr,"xglm"),BUr.forEach(t),sTo=r(vAe," \u2014 "),dI=n(vAe,"A",{href:!0});var PUr=s(dI);lTo=r(PUr,"XGLMForCausalLM"),PUr.forEach(t),iTo=r(vAe," (XGLM model)"),vAe.forEach(t),dTo=i(q),Y_=n(q,"LI",{});var TAe=s(Y_);one=n(TAe,"STRONG",{});var $Ur=s(one);cTo=r($Ur,"xlm"),$Ur.forEach(t),mTo=r(TAe," \u2014 "),cI=n(TAe,"A",{href:!0});var IUr=s(cI);fTo=r(IUr,"XLMWithLMHeadModel"),IUr.forEach(t),gTo=r(TAe," (XLM model)"),TAe.forEach(t),hTo=i(q),K_=n(q,"LI",{});var MAe=s(K_);rne=n(MAe,"STRONG",{});var qUr=s(rne);uTo=r(qUr,"xlm-prophetnet"),qUr.forEach(t),pTo=r(MAe," \u2014 "),mI=n(MAe,"A",{href:!0});var NUr=s(mI);_To=r(NUr,"XLMProphetNetForCausalLM"),NUr.forEach(t),bTo=r(MAe," (XLMProphetNet model)"),MAe.forEach(t),FTo=i(q),Z_=n(q,"LI",{});var EAe=s(Z_);tne=n(EAe,"STRONG",{});var jUr=s(tne);vTo=r(jUr,"xlm-roberta"),jUr.forEach(t),TTo=r(EAe," \u2014 "),fI=n(EAe,"A",{href:!0});var DUr=s(fI);MTo=r(DUr,"XLMRobertaForCausalLM"),DUr.forEach(t),ETo=r(EAe," (XLM-RoBERTa model)"),EAe.forEach(t),CTo=i(q),eb=n(q,"LI",{});var CAe=s(eb);ane=n(CAe,"STRONG",{});var GUr=s(ane);wTo=r(GUr,"xlm-roberta-xl"),GUr.forEach(t),ATo=r(CAe," \u2014 "),gI=n(CAe,"A",{href:!0});var OUr=s(gI);yTo=r(OUr,"XLMRobertaXLForCausalLM"),OUr.forEach(t),LTo=r(CAe," (XLM-RoBERTa-XL model)"),CAe.forEach(t),xTo=i(q),ob=n(q,"LI",{});var wAe=s(ob);nne=n(wAe,"STRONG",{});var VUr=s(nne);kTo=r(VUr,"xlnet"),VUr.forEach(t),STo=r(wAe," \u2014 "),hI=n(wAe,"A",{href:!0});var XUr=s(hI);RTo=r(XUr,"XLNetLMHeadModel"),XUr.forEach(t),BTo=r(wAe," (XLNet model)"),wAe.forEach(t),q.forEach(t),PTo=i(Ot),rb=n(Ot,"P",{});var AAe=s(rb);$To=r(AAe,"The model is set in evaluation mode by default using "),sne=n(AAe,"CODE",{});var zUr=s(sne);ITo=r(zUr,"model.eval()"),zUr.forEach(t),qTo=r(AAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lne=n(AAe,"CODE",{});var QUr=s(lne);NTo=r(QUr,"model.train()"),QUr.forEach(t),AAe.forEach(t),jTo=i(Ot),ine=n(Ot,"P",{});var WUr=s(ine);DTo=r(WUr,"Examples:"),WUr.forEach(t),GTo=i(Ot),f(FA.$$.fragment,Ot),Ot.forEach(t),Js.forEach(t),bRe=i(c),nd=n(c,"H2",{class:!0});var yPe=s(nd);tb=n(yPe,"A",{id:!0,class:!0,href:!0});var HUr=s(tb);dne=n(HUr,"SPAN",{});var UUr=s(dne);f(vA.$$.fragment,UUr),UUr.forEach(t),HUr.forEach(t),OTo=i(yPe),cne=n(yPe,"SPAN",{});var JUr=s(cne);VTo=r(JUr,"AutoModelForMaskedLM"),JUr.forEach(t),yPe.forEach(t),FRe=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);f(TA.$$.fragment,Ks),XTo=i(Ks),sd=n(Ks,"P",{});var dU=s(sd);zTo=r(dU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uI=n(dU,"A",{href:!0});var YUr=s(uI);QTo=r(YUr,"from_pretrained()"),YUr.forEach(t),WTo=r(dU," class method or the "),pI=n(dU,"A",{href:!0});var KUr=s(pI);HTo=r(KUr,"from_config()"),KUr.forEach(t),UTo=r(dU,` class
method.`),dU.forEach(t),JTo=i(Ks),MA=n(Ks,"P",{});var LPe=s(MA);YTo=r(LPe,"This class cannot be instantiated directly using "),mne=n(LPe,"CODE",{});var ZUr=s(mne);KTo=r(ZUr,"__init__()"),ZUr.forEach(t),ZTo=r(LPe," (throws an error)."),LPe.forEach(t),e1o=i(Ks),Wr=n(Ks,"DIV",{class:!0});var Zs=s(Wr);f(EA.$$.fragment,Zs),o1o=i(Zs),fne=n(Zs,"P",{});var eJr=s(fne);r1o=r(eJr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),eJr.forEach(t),t1o=i(Zs),ld=n(Zs,"P",{});var cU=s(ld);a1o=r(cU,`Note:
Loading a model from its configuration file does `),gne=n(cU,"STRONG",{});var oJr=s(gne);n1o=r(oJr,"not"),oJr.forEach(t),s1o=r(cU,` load the model weights. It only affects the
model\u2019s configuration. Use `),_I=n(cU,"A",{href:!0});var rJr=s(_I);l1o=r(rJr,"from_pretrained()"),rJr.forEach(t),i1o=r(cU," to load the model weights."),cU.forEach(t),d1o=i(Zs),hne=n(Zs,"P",{});var tJr=s(hne);c1o=r(tJr,"Examples:"),tJr.forEach(t),m1o=i(Zs),f(CA.$$.fragment,Zs),Zs.forEach(t),f1o=i(Ks),De=n(Ks,"DIV",{class:!0});var Vt=s(De);f(wA.$$.fragment,Vt),g1o=i(Vt),une=n(Vt,"P",{});var aJr=s(une);h1o=r(aJr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),aJr.forEach(t),u1o=i(Vt),Wa=n(Vt,"P",{});var A3=s(Wa);p1o=r(A3,"The model class to instantiate is selected based on the "),pne=n(A3,"CODE",{});var nJr=s(pne);_1o=r(nJr,"model_type"),nJr.forEach(t),b1o=r(A3,` property of the config object (either
passed as an argument or loaded from `),_ne=n(A3,"CODE",{});var sJr=s(_ne);F1o=r(sJr,"pretrained_model_name_or_path"),sJr.forEach(t),v1o=r(A3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bne=n(A3,"CODE",{});var lJr=s(bne);T1o=r(lJr,"pretrained_model_name_or_path"),lJr.forEach(t),M1o=r(A3,":"),A3.forEach(t),E1o=i(Vt),I=n(Vt,"UL",{});var N=s(I);ab=n(N,"LI",{});var yAe=s(ab);Fne=n(yAe,"STRONG",{});var iJr=s(Fne);C1o=r(iJr,"albert"),iJr.forEach(t),w1o=r(yAe," \u2014 "),bI=n(yAe,"A",{href:!0});var dJr=s(bI);A1o=r(dJr,"AlbertForMaskedLM"),dJr.forEach(t),y1o=r(yAe," (ALBERT model)"),yAe.forEach(t),L1o=i(N),nb=n(N,"LI",{});var LAe=s(nb);vne=n(LAe,"STRONG",{});var cJr=s(vne);x1o=r(cJr,"bart"),cJr.forEach(t),k1o=r(LAe," \u2014 "),FI=n(LAe,"A",{href:!0});var mJr=s(FI);S1o=r(mJr,"BartForConditionalGeneration"),mJr.forEach(t),R1o=r(LAe," (BART model)"),LAe.forEach(t),B1o=i(N),sb=n(N,"LI",{});var xAe=s(sb);Tne=n(xAe,"STRONG",{});var fJr=s(Tne);P1o=r(fJr,"bert"),fJr.forEach(t),$1o=r(xAe," \u2014 "),vI=n(xAe,"A",{href:!0});var gJr=s(vI);I1o=r(gJr,"BertForMaskedLM"),gJr.forEach(t),q1o=r(xAe," (BERT model)"),xAe.forEach(t),N1o=i(N),lb=n(N,"LI",{});var kAe=s(lb);Mne=n(kAe,"STRONG",{});var hJr=s(Mne);j1o=r(hJr,"big_bird"),hJr.forEach(t),D1o=r(kAe," \u2014 "),TI=n(kAe,"A",{href:!0});var uJr=s(TI);G1o=r(uJr,"BigBirdForMaskedLM"),uJr.forEach(t),O1o=r(kAe," (BigBird model)"),kAe.forEach(t),V1o=i(N),ib=n(N,"LI",{});var SAe=s(ib);Ene=n(SAe,"STRONG",{});var pJr=s(Ene);X1o=r(pJr,"camembert"),pJr.forEach(t),z1o=r(SAe," \u2014 "),MI=n(SAe,"A",{href:!0});var _Jr=s(MI);Q1o=r(_Jr,"CamembertForMaskedLM"),_Jr.forEach(t),W1o=r(SAe," (CamemBERT model)"),SAe.forEach(t),H1o=i(N),db=n(N,"LI",{});var RAe=s(db);Cne=n(RAe,"STRONG",{});var bJr=s(Cne);U1o=r(bJr,"convbert"),bJr.forEach(t),J1o=r(RAe," \u2014 "),EI=n(RAe,"A",{href:!0});var FJr=s(EI);Y1o=r(FJr,"ConvBertForMaskedLM"),FJr.forEach(t),K1o=r(RAe," (ConvBERT model)"),RAe.forEach(t),Z1o=i(N),cb=n(N,"LI",{});var BAe=s(cb);wne=n(BAe,"STRONG",{});var vJr=s(wne);eMo=r(vJr,"data2vec-text"),vJr.forEach(t),oMo=r(BAe," \u2014 "),CI=n(BAe,"A",{href:!0});var TJr=s(CI);rMo=r(TJr,"Data2VecTextForMaskedLM"),TJr.forEach(t),tMo=r(BAe," (Data2VecText model)"),BAe.forEach(t),aMo=i(N),mb=n(N,"LI",{});var PAe=s(mb);Ane=n(PAe,"STRONG",{});var MJr=s(Ane);nMo=r(MJr,"deberta"),MJr.forEach(t),sMo=r(PAe," \u2014 "),wI=n(PAe,"A",{href:!0});var EJr=s(wI);lMo=r(EJr,"DebertaForMaskedLM"),EJr.forEach(t),iMo=r(PAe," (DeBERTa model)"),PAe.forEach(t),dMo=i(N),fb=n(N,"LI",{});var $Ae=s(fb);yne=n($Ae,"STRONG",{});var CJr=s(yne);cMo=r(CJr,"deberta-v2"),CJr.forEach(t),mMo=r($Ae," \u2014 "),AI=n($Ae,"A",{href:!0});var wJr=s(AI);fMo=r(wJr,"DebertaV2ForMaskedLM"),wJr.forEach(t),gMo=r($Ae," (DeBERTa-v2 model)"),$Ae.forEach(t),hMo=i(N),gb=n(N,"LI",{});var IAe=s(gb);Lne=n(IAe,"STRONG",{});var AJr=s(Lne);uMo=r(AJr,"distilbert"),AJr.forEach(t),pMo=r(IAe," \u2014 "),yI=n(IAe,"A",{href:!0});var yJr=s(yI);_Mo=r(yJr,"DistilBertForMaskedLM"),yJr.forEach(t),bMo=r(IAe," (DistilBERT model)"),IAe.forEach(t),FMo=i(N),hb=n(N,"LI",{});var qAe=s(hb);xne=n(qAe,"STRONG",{});var LJr=s(xne);vMo=r(LJr,"electra"),LJr.forEach(t),TMo=r(qAe," \u2014 "),LI=n(qAe,"A",{href:!0});var xJr=s(LI);MMo=r(xJr,"ElectraForMaskedLM"),xJr.forEach(t),EMo=r(qAe," (ELECTRA model)"),qAe.forEach(t),CMo=i(N),ub=n(N,"LI",{});var NAe=s(ub);kne=n(NAe,"STRONG",{});var kJr=s(kne);wMo=r(kJr,"flaubert"),kJr.forEach(t),AMo=r(NAe," \u2014 "),xI=n(NAe,"A",{href:!0});var SJr=s(xI);yMo=r(SJr,"FlaubertWithLMHeadModel"),SJr.forEach(t),LMo=r(NAe," (FlauBERT model)"),NAe.forEach(t),xMo=i(N),pb=n(N,"LI",{});var jAe=s(pb);Sne=n(jAe,"STRONG",{});var RJr=s(Sne);kMo=r(RJr,"fnet"),RJr.forEach(t),SMo=r(jAe," \u2014 "),kI=n(jAe,"A",{href:!0});var BJr=s(kI);RMo=r(BJr,"FNetForMaskedLM"),BJr.forEach(t),BMo=r(jAe," (FNet model)"),jAe.forEach(t),PMo=i(N),_b=n(N,"LI",{});var DAe=s(_b);Rne=n(DAe,"STRONG",{});var PJr=s(Rne);$Mo=r(PJr,"funnel"),PJr.forEach(t),IMo=r(DAe," \u2014 "),SI=n(DAe,"A",{href:!0});var $Jr=s(SI);qMo=r($Jr,"FunnelForMaskedLM"),$Jr.forEach(t),NMo=r(DAe," (Funnel Transformer model)"),DAe.forEach(t),jMo=i(N),bb=n(N,"LI",{});var GAe=s(bb);Bne=n(GAe,"STRONG",{});var IJr=s(Bne);DMo=r(IJr,"ibert"),IJr.forEach(t),GMo=r(GAe," \u2014 "),RI=n(GAe,"A",{href:!0});var qJr=s(RI);OMo=r(qJr,"IBertForMaskedLM"),qJr.forEach(t),VMo=r(GAe," (I-BERT model)"),GAe.forEach(t),XMo=i(N),Fb=n(N,"LI",{});var OAe=s(Fb);Pne=n(OAe,"STRONG",{});var NJr=s(Pne);zMo=r(NJr,"layoutlm"),NJr.forEach(t),QMo=r(OAe," \u2014 "),BI=n(OAe,"A",{href:!0});var jJr=s(BI);WMo=r(jJr,"LayoutLMForMaskedLM"),jJr.forEach(t),HMo=r(OAe," (LayoutLM model)"),OAe.forEach(t),UMo=i(N),vb=n(N,"LI",{});var VAe=s(vb);$ne=n(VAe,"STRONG",{});var DJr=s($ne);JMo=r(DJr,"longformer"),DJr.forEach(t),YMo=r(VAe," \u2014 "),PI=n(VAe,"A",{href:!0});var GJr=s(PI);KMo=r(GJr,"LongformerForMaskedLM"),GJr.forEach(t),ZMo=r(VAe," (Longformer model)"),VAe.forEach(t),e4o=i(N),Tb=n(N,"LI",{});var XAe=s(Tb);Ine=n(XAe,"STRONG",{});var OJr=s(Ine);o4o=r(OJr,"mbart"),OJr.forEach(t),r4o=r(XAe," \u2014 "),$I=n(XAe,"A",{href:!0});var VJr=s($I);t4o=r(VJr,"MBartForConditionalGeneration"),VJr.forEach(t),a4o=r(XAe," (mBART model)"),XAe.forEach(t),n4o=i(N),Mb=n(N,"LI",{});var zAe=s(Mb);qne=n(zAe,"STRONG",{});var XJr=s(qne);s4o=r(XJr,"megatron-bert"),XJr.forEach(t),l4o=r(zAe," \u2014 "),II=n(zAe,"A",{href:!0});var zJr=s(II);i4o=r(zJr,"MegatronBertForMaskedLM"),zJr.forEach(t),d4o=r(zAe," (MegatronBert model)"),zAe.forEach(t),c4o=i(N),Eb=n(N,"LI",{});var QAe=s(Eb);Nne=n(QAe,"STRONG",{});var QJr=s(Nne);m4o=r(QJr,"mobilebert"),QJr.forEach(t),f4o=r(QAe," \u2014 "),qI=n(QAe,"A",{href:!0});var WJr=s(qI);g4o=r(WJr,"MobileBertForMaskedLM"),WJr.forEach(t),h4o=r(QAe," (MobileBERT model)"),QAe.forEach(t),u4o=i(N),Cb=n(N,"LI",{});var WAe=s(Cb);jne=n(WAe,"STRONG",{});var HJr=s(jne);p4o=r(HJr,"mpnet"),HJr.forEach(t),_4o=r(WAe," \u2014 "),NI=n(WAe,"A",{href:!0});var UJr=s(NI);b4o=r(UJr,"MPNetForMaskedLM"),UJr.forEach(t),F4o=r(WAe," (MPNet model)"),WAe.forEach(t),v4o=i(N),wb=n(N,"LI",{});var HAe=s(wb);Dne=n(HAe,"STRONG",{});var JJr=s(Dne);T4o=r(JJr,"nystromformer"),JJr.forEach(t),M4o=r(HAe," \u2014 "),jI=n(HAe,"A",{href:!0});var YJr=s(jI);E4o=r(YJr,"NystromformerForMaskedLM"),YJr.forEach(t),C4o=r(HAe," (Nystromformer model)"),HAe.forEach(t),w4o=i(N),Ab=n(N,"LI",{});var UAe=s(Ab);Gne=n(UAe,"STRONG",{});var KJr=s(Gne);A4o=r(KJr,"perceiver"),KJr.forEach(t),y4o=r(UAe," \u2014 "),DI=n(UAe,"A",{href:!0});var ZJr=s(DI);L4o=r(ZJr,"PerceiverForMaskedLM"),ZJr.forEach(t),x4o=r(UAe," (Perceiver model)"),UAe.forEach(t),k4o=i(N),yb=n(N,"LI",{});var JAe=s(yb);One=n(JAe,"STRONG",{});var eYr=s(One);S4o=r(eYr,"qdqbert"),eYr.forEach(t),R4o=r(JAe," \u2014 "),GI=n(JAe,"A",{href:!0});var oYr=s(GI);B4o=r(oYr,"QDQBertForMaskedLM"),oYr.forEach(t),P4o=r(JAe," (QDQBert model)"),JAe.forEach(t),$4o=i(N),Lb=n(N,"LI",{});var YAe=s(Lb);Vne=n(YAe,"STRONG",{});var rYr=s(Vne);I4o=r(rYr,"reformer"),rYr.forEach(t),q4o=r(YAe," \u2014 "),OI=n(YAe,"A",{href:!0});var tYr=s(OI);N4o=r(tYr,"ReformerForMaskedLM"),tYr.forEach(t),j4o=r(YAe," (Reformer model)"),YAe.forEach(t),D4o=i(N),xb=n(N,"LI",{});var KAe=s(xb);Xne=n(KAe,"STRONG",{});var aYr=s(Xne);G4o=r(aYr,"rembert"),aYr.forEach(t),O4o=r(KAe," \u2014 "),VI=n(KAe,"A",{href:!0});var nYr=s(VI);V4o=r(nYr,"RemBertForMaskedLM"),nYr.forEach(t),X4o=r(KAe," (RemBERT model)"),KAe.forEach(t),z4o=i(N),kb=n(N,"LI",{});var ZAe=s(kb);zne=n(ZAe,"STRONG",{});var sYr=s(zne);Q4o=r(sYr,"roberta"),sYr.forEach(t),W4o=r(ZAe," \u2014 "),XI=n(ZAe,"A",{href:!0});var lYr=s(XI);H4o=r(lYr,"RobertaForMaskedLM"),lYr.forEach(t),U4o=r(ZAe," (RoBERTa model)"),ZAe.forEach(t),J4o=i(N),Sb=n(N,"LI",{});var e6e=s(Sb);Qne=n(e6e,"STRONG",{});var iYr=s(Qne);Y4o=r(iYr,"roformer"),iYr.forEach(t),K4o=r(e6e," \u2014 "),zI=n(e6e,"A",{href:!0});var dYr=s(zI);Z4o=r(dYr,"RoFormerForMaskedLM"),dYr.forEach(t),eEo=r(e6e," (RoFormer model)"),e6e.forEach(t),oEo=i(N),Rb=n(N,"LI",{});var o6e=s(Rb);Wne=n(o6e,"STRONG",{});var cYr=s(Wne);rEo=r(cYr,"squeezebert"),cYr.forEach(t),tEo=r(o6e," \u2014 "),QI=n(o6e,"A",{href:!0});var mYr=s(QI);aEo=r(mYr,"SqueezeBertForMaskedLM"),mYr.forEach(t),nEo=r(o6e," (SqueezeBERT model)"),o6e.forEach(t),sEo=i(N),Bb=n(N,"LI",{});var r6e=s(Bb);Hne=n(r6e,"STRONG",{});var fYr=s(Hne);lEo=r(fYr,"tapas"),fYr.forEach(t),iEo=r(r6e," \u2014 "),WI=n(r6e,"A",{href:!0});var gYr=s(WI);dEo=r(gYr,"TapasForMaskedLM"),gYr.forEach(t),cEo=r(r6e," (TAPAS model)"),r6e.forEach(t),mEo=i(N),Pb=n(N,"LI",{});var t6e=s(Pb);Une=n(t6e,"STRONG",{});var hYr=s(Une);fEo=r(hYr,"wav2vec2"),hYr.forEach(t),gEo=r(t6e," \u2014 "),Jne=n(t6e,"CODE",{});var uYr=s(Jne);hEo=r(uYr,"Wav2Vec2ForMaskedLM"),uYr.forEach(t),uEo=r(t6e," (Wav2Vec2 model)"),t6e.forEach(t),pEo=i(N),$b=n(N,"LI",{});var a6e=s($b);Yne=n(a6e,"STRONG",{});var pYr=s(Yne);_Eo=r(pYr,"xlm"),pYr.forEach(t),bEo=r(a6e," \u2014 "),HI=n(a6e,"A",{href:!0});var _Yr=s(HI);FEo=r(_Yr,"XLMWithLMHeadModel"),_Yr.forEach(t),vEo=r(a6e," (XLM model)"),a6e.forEach(t),TEo=i(N),Ib=n(N,"LI",{});var n6e=s(Ib);Kne=n(n6e,"STRONG",{});var bYr=s(Kne);MEo=r(bYr,"xlm-roberta"),bYr.forEach(t),EEo=r(n6e," \u2014 "),UI=n(n6e,"A",{href:!0});var FYr=s(UI);CEo=r(FYr,"XLMRobertaForMaskedLM"),FYr.forEach(t),wEo=r(n6e," (XLM-RoBERTa model)"),n6e.forEach(t),AEo=i(N),qb=n(N,"LI",{});var s6e=s(qb);Zne=n(s6e,"STRONG",{});var vYr=s(Zne);yEo=r(vYr,"xlm-roberta-xl"),vYr.forEach(t),LEo=r(s6e," \u2014 "),JI=n(s6e,"A",{href:!0});var TYr=s(JI);xEo=r(TYr,"XLMRobertaXLForMaskedLM"),TYr.forEach(t),kEo=r(s6e," (XLM-RoBERTa-XL model)"),s6e.forEach(t),SEo=i(N),Nb=n(N,"LI",{});var l6e=s(Nb);ese=n(l6e,"STRONG",{});var MYr=s(ese);REo=r(MYr,"yoso"),MYr.forEach(t),BEo=r(l6e," \u2014 "),YI=n(l6e,"A",{href:!0});var EYr=s(YI);PEo=r(EYr,"YosoForMaskedLM"),EYr.forEach(t),$Eo=r(l6e," (YOSO model)"),l6e.forEach(t),N.forEach(t),IEo=i(Vt),jb=n(Vt,"P",{});var i6e=s(jb);qEo=r(i6e,"The model is set in evaluation mode by default using "),ose=n(i6e,"CODE",{});var CYr=s(ose);NEo=r(CYr,"model.eval()"),CYr.forEach(t),jEo=r(i6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rse=n(i6e,"CODE",{});var wYr=s(rse);DEo=r(wYr,"model.train()"),wYr.forEach(t),i6e.forEach(t),GEo=i(Vt),tse=n(Vt,"P",{});var AYr=s(tse);OEo=r(AYr,"Examples:"),AYr.forEach(t),VEo=i(Vt),f(AA.$$.fragment,Vt),Vt.forEach(t),Ks.forEach(t),vRe=i(c),id=n(c,"H2",{class:!0});var xPe=s(id);Db=n(xPe,"A",{id:!0,class:!0,href:!0});var yYr=s(Db);ase=n(yYr,"SPAN",{});var LYr=s(ase);f(yA.$$.fragment,LYr),LYr.forEach(t),yYr.forEach(t),XEo=i(xPe),nse=n(xPe,"SPAN",{});var xYr=s(nse);zEo=r(xYr,"AutoModelForSeq2SeqLM"),xYr.forEach(t),xPe.forEach(t),TRe=i(c),er=n(c,"DIV",{class:!0});var el=s(er);f(LA.$$.fragment,el),QEo=i(el),dd=n(el,"P",{});var mU=s(dd);WEo=r(mU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),KI=n(mU,"A",{href:!0});var kYr=s(KI);HEo=r(kYr,"from_pretrained()"),kYr.forEach(t),UEo=r(mU," class method or the "),ZI=n(mU,"A",{href:!0});var SYr=s(ZI);JEo=r(SYr,"from_config()"),SYr.forEach(t),YEo=r(mU,` class
method.`),mU.forEach(t),KEo=i(el),xA=n(el,"P",{});var kPe=s(xA);ZEo=r(kPe,"This class cannot be instantiated directly using "),sse=n(kPe,"CODE",{});var RYr=s(sse);eCo=r(RYr,"__init__()"),RYr.forEach(t),oCo=r(kPe," (throws an error)."),kPe.forEach(t),rCo=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);f(kA.$$.fragment,ol),tCo=i(ol),lse=n(ol,"P",{});var BYr=s(lse);aCo=r(BYr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),BYr.forEach(t),nCo=i(ol),cd=n(ol,"P",{});var fU=s(cd);sCo=r(fU,`Note:
Loading a model from its configuration file does `),ise=n(fU,"STRONG",{});var PYr=s(ise);lCo=r(PYr,"not"),PYr.forEach(t),iCo=r(fU,` load the model weights. It only affects the
model\u2019s configuration. Use `),eq=n(fU,"A",{href:!0});var $Yr=s(eq);dCo=r($Yr,"from_pretrained()"),$Yr.forEach(t),cCo=r(fU," to load the model weights."),fU.forEach(t),mCo=i(ol),dse=n(ol,"P",{});var IYr=s(dse);fCo=r(IYr,"Examples:"),IYr.forEach(t),gCo=i(ol),f(SA.$$.fragment,ol),ol.forEach(t),hCo=i(el),Ge=n(el,"DIV",{class:!0});var Xt=s(Ge);f(RA.$$.fragment,Xt),uCo=i(Xt),cse=n(Xt,"P",{});var qYr=s(cse);pCo=r(qYr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qYr.forEach(t),_Co=i(Xt),Ha=n(Xt,"P",{});var y3=s(Ha);bCo=r(y3,"The model class to instantiate is selected based on the "),mse=n(y3,"CODE",{});var NYr=s(mse);FCo=r(NYr,"model_type"),NYr.forEach(t),vCo=r(y3,` property of the config object (either
passed as an argument or loaded from `),fse=n(y3,"CODE",{});var jYr=s(fse);TCo=r(jYr,"pretrained_model_name_or_path"),jYr.forEach(t),MCo=r(y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gse=n(y3,"CODE",{});var DYr=s(gse);ECo=r(DYr,"pretrained_model_name_or_path"),DYr.forEach(t),CCo=r(y3,":"),y3.forEach(t),wCo=i(Xt),se=n(Xt,"UL",{});var ie=s(se);Gb=n(ie,"LI",{});var d6e=s(Gb);hse=n(d6e,"STRONG",{});var GYr=s(hse);ACo=r(GYr,"bart"),GYr.forEach(t),yCo=r(d6e," \u2014 "),oq=n(d6e,"A",{href:!0});var OYr=s(oq);LCo=r(OYr,"BartForConditionalGeneration"),OYr.forEach(t),xCo=r(d6e," (BART model)"),d6e.forEach(t),kCo=i(ie),Ob=n(ie,"LI",{});var c6e=s(Ob);use=n(c6e,"STRONG",{});var VYr=s(use);SCo=r(VYr,"bigbird_pegasus"),VYr.forEach(t),RCo=r(c6e," \u2014 "),rq=n(c6e,"A",{href:!0});var XYr=s(rq);BCo=r(XYr,"BigBirdPegasusForConditionalGeneration"),XYr.forEach(t),PCo=r(c6e," (BigBirdPegasus model)"),c6e.forEach(t),$Co=i(ie),Vb=n(ie,"LI",{});var m6e=s(Vb);pse=n(m6e,"STRONG",{});var zYr=s(pse);ICo=r(zYr,"blenderbot"),zYr.forEach(t),qCo=r(m6e," \u2014 "),tq=n(m6e,"A",{href:!0});var QYr=s(tq);NCo=r(QYr,"BlenderbotForConditionalGeneration"),QYr.forEach(t),jCo=r(m6e," (Blenderbot model)"),m6e.forEach(t),DCo=i(ie),Xb=n(ie,"LI",{});var f6e=s(Xb);_se=n(f6e,"STRONG",{});var WYr=s(_se);GCo=r(WYr,"blenderbot-small"),WYr.forEach(t),OCo=r(f6e," \u2014 "),aq=n(f6e,"A",{href:!0});var HYr=s(aq);VCo=r(HYr,"BlenderbotSmallForConditionalGeneration"),HYr.forEach(t),XCo=r(f6e," (BlenderbotSmall model)"),f6e.forEach(t),zCo=i(ie),zb=n(ie,"LI",{});var g6e=s(zb);bse=n(g6e,"STRONG",{});var UYr=s(bse);QCo=r(UYr,"encoder-decoder"),UYr.forEach(t),WCo=r(g6e," \u2014 "),nq=n(g6e,"A",{href:!0});var JYr=s(nq);HCo=r(JYr,"EncoderDecoderModel"),JYr.forEach(t),UCo=r(g6e," (Encoder decoder model)"),g6e.forEach(t),JCo=i(ie),Qb=n(ie,"LI",{});var h6e=s(Qb);Fse=n(h6e,"STRONG",{});var YYr=s(Fse);YCo=r(YYr,"fsmt"),YYr.forEach(t),KCo=r(h6e," \u2014 "),sq=n(h6e,"A",{href:!0});var KYr=s(sq);ZCo=r(KYr,"FSMTForConditionalGeneration"),KYr.forEach(t),e5o=r(h6e," (FairSeq Machine-Translation model)"),h6e.forEach(t),o5o=i(ie),Wb=n(ie,"LI",{});var u6e=s(Wb);vse=n(u6e,"STRONG",{});var ZYr=s(vse);r5o=r(ZYr,"led"),ZYr.forEach(t),t5o=r(u6e," \u2014 "),lq=n(u6e,"A",{href:!0});var eKr=s(lq);a5o=r(eKr,"LEDForConditionalGeneration"),eKr.forEach(t),n5o=r(u6e," (LED model)"),u6e.forEach(t),s5o=i(ie),Hb=n(ie,"LI",{});var p6e=s(Hb);Tse=n(p6e,"STRONG",{});var oKr=s(Tse);l5o=r(oKr,"m2m_100"),oKr.forEach(t),i5o=r(p6e," \u2014 "),iq=n(p6e,"A",{href:!0});var rKr=s(iq);d5o=r(rKr,"M2M100ForConditionalGeneration"),rKr.forEach(t),c5o=r(p6e," (M2M100 model)"),p6e.forEach(t),m5o=i(ie),Ub=n(ie,"LI",{});var _6e=s(Ub);Mse=n(_6e,"STRONG",{});var tKr=s(Mse);f5o=r(tKr,"marian"),tKr.forEach(t),g5o=r(_6e," \u2014 "),dq=n(_6e,"A",{href:!0});var aKr=s(dq);h5o=r(aKr,"MarianMTModel"),aKr.forEach(t),u5o=r(_6e," (Marian model)"),_6e.forEach(t),p5o=i(ie),Jb=n(ie,"LI",{});var b6e=s(Jb);Ese=n(b6e,"STRONG",{});var nKr=s(Ese);_5o=r(nKr,"mbart"),nKr.forEach(t),b5o=r(b6e," \u2014 "),cq=n(b6e,"A",{href:!0});var sKr=s(cq);F5o=r(sKr,"MBartForConditionalGeneration"),sKr.forEach(t),v5o=r(b6e," (mBART model)"),b6e.forEach(t),T5o=i(ie),Yb=n(ie,"LI",{});var F6e=s(Yb);Cse=n(F6e,"STRONG",{});var lKr=s(Cse);M5o=r(lKr,"mt5"),lKr.forEach(t),E5o=r(F6e," \u2014 "),mq=n(F6e,"A",{href:!0});var iKr=s(mq);C5o=r(iKr,"MT5ForConditionalGeneration"),iKr.forEach(t),w5o=r(F6e," (mT5 model)"),F6e.forEach(t),A5o=i(ie),Kb=n(ie,"LI",{});var v6e=s(Kb);wse=n(v6e,"STRONG",{});var dKr=s(wse);y5o=r(dKr,"pegasus"),dKr.forEach(t),L5o=r(v6e," \u2014 "),fq=n(v6e,"A",{href:!0});var cKr=s(fq);x5o=r(cKr,"PegasusForConditionalGeneration"),cKr.forEach(t),k5o=r(v6e," (Pegasus model)"),v6e.forEach(t),S5o=i(ie),Zb=n(ie,"LI",{});var T6e=s(Zb);Ase=n(T6e,"STRONG",{});var mKr=s(Ase);R5o=r(mKr,"plbart"),mKr.forEach(t),B5o=r(T6e," \u2014 "),gq=n(T6e,"A",{href:!0});var fKr=s(gq);P5o=r(fKr,"PLBartForConditionalGeneration"),fKr.forEach(t),$5o=r(T6e," (PLBart model)"),T6e.forEach(t),I5o=i(ie),e2=n(ie,"LI",{});var M6e=s(e2);yse=n(M6e,"STRONG",{});var gKr=s(yse);q5o=r(gKr,"prophetnet"),gKr.forEach(t),N5o=r(M6e," \u2014 "),hq=n(M6e,"A",{href:!0});var hKr=s(hq);j5o=r(hKr,"ProphetNetForConditionalGeneration"),hKr.forEach(t),D5o=r(M6e," (ProphetNet model)"),M6e.forEach(t),G5o=i(ie),o2=n(ie,"LI",{});var E6e=s(o2);Lse=n(E6e,"STRONG",{});var uKr=s(Lse);O5o=r(uKr,"t5"),uKr.forEach(t),V5o=r(E6e," \u2014 "),uq=n(E6e,"A",{href:!0});var pKr=s(uq);X5o=r(pKr,"T5ForConditionalGeneration"),pKr.forEach(t),z5o=r(E6e," (T5 model)"),E6e.forEach(t),Q5o=i(ie),r2=n(ie,"LI",{});var C6e=s(r2);xse=n(C6e,"STRONG",{});var _Kr=s(xse);W5o=r(_Kr,"xlm-prophetnet"),_Kr.forEach(t),H5o=r(C6e," \u2014 "),pq=n(C6e,"A",{href:!0});var bKr=s(pq);U5o=r(bKr,"XLMProphetNetForConditionalGeneration"),bKr.forEach(t),J5o=r(C6e," (XLMProphetNet model)"),C6e.forEach(t),ie.forEach(t),Y5o=i(Xt),t2=n(Xt,"P",{});var w6e=s(t2);K5o=r(w6e,"The model is set in evaluation mode by default using "),kse=n(w6e,"CODE",{});var FKr=s(kse);Z5o=r(FKr,"model.eval()"),FKr.forEach(t),e3o=r(w6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sse=n(w6e,"CODE",{});var vKr=s(Sse);o3o=r(vKr,"model.train()"),vKr.forEach(t),w6e.forEach(t),r3o=i(Xt),Rse=n(Xt,"P",{});var TKr=s(Rse);t3o=r(TKr,"Examples:"),TKr.forEach(t),a3o=i(Xt),f(BA.$$.fragment,Xt),Xt.forEach(t),el.forEach(t),MRe=i(c),md=n(c,"H2",{class:!0});var SPe=s(md);a2=n(SPe,"A",{id:!0,class:!0,href:!0});var MKr=s(a2);Bse=n(MKr,"SPAN",{});var EKr=s(Bse);f(PA.$$.fragment,EKr),EKr.forEach(t),MKr.forEach(t),n3o=i(SPe),Pse=n(SPe,"SPAN",{});var CKr=s(Pse);s3o=r(CKr,"AutoModelForSequenceClassification"),CKr.forEach(t),SPe.forEach(t),ERe=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);f($A.$$.fragment,rl),l3o=i(rl),fd=n(rl,"P",{});var gU=s(fd);i3o=r(gU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),_q=n(gU,"A",{href:!0});var wKr=s(_q);d3o=r(wKr,"from_pretrained()"),wKr.forEach(t),c3o=r(gU," class method or the "),bq=n(gU,"A",{href:!0});var AKr=s(bq);m3o=r(AKr,"from_config()"),AKr.forEach(t),f3o=r(gU,` class
method.`),gU.forEach(t),g3o=i(rl),IA=n(rl,"P",{});var RPe=s(IA);h3o=r(RPe,"This class cannot be instantiated directly using "),$se=n(RPe,"CODE",{});var yKr=s($se);u3o=r(yKr,"__init__()"),yKr.forEach(t),p3o=r(RPe," (throws an error)."),RPe.forEach(t),_3o=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);f(qA.$$.fragment,tl),b3o=i(tl),Ise=n(tl,"P",{});var LKr=s(Ise);F3o=r(LKr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),LKr.forEach(t),v3o=i(tl),gd=n(tl,"P",{});var hU=s(gd);T3o=r(hU,`Note:
Loading a model from its configuration file does `),qse=n(hU,"STRONG",{});var xKr=s(qse);M3o=r(xKr,"not"),xKr.forEach(t),E3o=r(hU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fq=n(hU,"A",{href:!0});var kKr=s(Fq);C3o=r(kKr,"from_pretrained()"),kKr.forEach(t),w3o=r(hU," to load the model weights."),hU.forEach(t),A3o=i(tl),Nse=n(tl,"P",{});var SKr=s(Nse);y3o=r(SKr,"Examples:"),SKr.forEach(t),L3o=i(tl),f(NA.$$.fragment,tl),tl.forEach(t),x3o=i(rl),Oe=n(rl,"DIV",{class:!0});var zt=s(Oe);f(jA.$$.fragment,zt),k3o=i(zt),jse=n(zt,"P",{});var RKr=s(jse);S3o=r(RKr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),RKr.forEach(t),R3o=i(zt),Ua=n(zt,"P",{});var L3=s(Ua);B3o=r(L3,"The model class to instantiate is selected based on the "),Dse=n(L3,"CODE",{});var BKr=s(Dse);P3o=r(BKr,"model_type"),BKr.forEach(t),$3o=r(L3,` property of the config object (either
passed as an argument or loaded from `),Gse=n(L3,"CODE",{});var PKr=s(Gse);I3o=r(PKr,"pretrained_model_name_or_path"),PKr.forEach(t),q3o=r(L3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ose=n(L3,"CODE",{});var $Kr=s(Ose);N3o=r($Kr,"pretrained_model_name_or_path"),$Kr.forEach(t),j3o=r(L3,":"),L3.forEach(t),D3o=i(zt),y=n(zt,"UL",{});var L=s(y);n2=n(L,"LI",{});var A6e=s(n2);Vse=n(A6e,"STRONG",{});var IKr=s(Vse);G3o=r(IKr,"albert"),IKr.forEach(t),O3o=r(A6e," \u2014 "),vq=n(A6e,"A",{href:!0});var qKr=s(vq);V3o=r(qKr,"AlbertForSequenceClassification"),qKr.forEach(t),X3o=r(A6e," (ALBERT model)"),A6e.forEach(t),z3o=i(L),s2=n(L,"LI",{});var y6e=s(s2);Xse=n(y6e,"STRONG",{});var NKr=s(Xse);Q3o=r(NKr,"bart"),NKr.forEach(t),W3o=r(y6e," \u2014 "),Tq=n(y6e,"A",{href:!0});var jKr=s(Tq);H3o=r(jKr,"BartForSequenceClassification"),jKr.forEach(t),U3o=r(y6e," (BART model)"),y6e.forEach(t),J3o=i(L),l2=n(L,"LI",{});var L6e=s(l2);zse=n(L6e,"STRONG",{});var DKr=s(zse);Y3o=r(DKr,"bert"),DKr.forEach(t),K3o=r(L6e," \u2014 "),Mq=n(L6e,"A",{href:!0});var GKr=s(Mq);Z3o=r(GKr,"BertForSequenceClassification"),GKr.forEach(t),ewo=r(L6e," (BERT model)"),L6e.forEach(t),owo=i(L),i2=n(L,"LI",{});var x6e=s(i2);Qse=n(x6e,"STRONG",{});var OKr=s(Qse);rwo=r(OKr,"big_bird"),OKr.forEach(t),two=r(x6e," \u2014 "),Eq=n(x6e,"A",{href:!0});var VKr=s(Eq);awo=r(VKr,"BigBirdForSequenceClassification"),VKr.forEach(t),nwo=r(x6e," (BigBird model)"),x6e.forEach(t),swo=i(L),d2=n(L,"LI",{});var k6e=s(d2);Wse=n(k6e,"STRONG",{});var XKr=s(Wse);lwo=r(XKr,"bigbird_pegasus"),XKr.forEach(t),iwo=r(k6e," \u2014 "),Cq=n(k6e,"A",{href:!0});var zKr=s(Cq);dwo=r(zKr,"BigBirdPegasusForSequenceClassification"),zKr.forEach(t),cwo=r(k6e," (BigBirdPegasus model)"),k6e.forEach(t),mwo=i(L),c2=n(L,"LI",{});var S6e=s(c2);Hse=n(S6e,"STRONG",{});var QKr=s(Hse);fwo=r(QKr,"camembert"),QKr.forEach(t),gwo=r(S6e," \u2014 "),wq=n(S6e,"A",{href:!0});var WKr=s(wq);hwo=r(WKr,"CamembertForSequenceClassification"),WKr.forEach(t),uwo=r(S6e," (CamemBERT model)"),S6e.forEach(t),pwo=i(L),m2=n(L,"LI",{});var R6e=s(m2);Use=n(R6e,"STRONG",{});var HKr=s(Use);_wo=r(HKr,"canine"),HKr.forEach(t),bwo=r(R6e," \u2014 "),Aq=n(R6e,"A",{href:!0});var UKr=s(Aq);Fwo=r(UKr,"CanineForSequenceClassification"),UKr.forEach(t),vwo=r(R6e," (Canine model)"),R6e.forEach(t),Two=i(L),f2=n(L,"LI",{});var B6e=s(f2);Jse=n(B6e,"STRONG",{});var JKr=s(Jse);Mwo=r(JKr,"convbert"),JKr.forEach(t),Ewo=r(B6e," \u2014 "),yq=n(B6e,"A",{href:!0});var YKr=s(yq);Cwo=r(YKr,"ConvBertForSequenceClassification"),YKr.forEach(t),wwo=r(B6e," (ConvBERT model)"),B6e.forEach(t),Awo=i(L),g2=n(L,"LI",{});var P6e=s(g2);Yse=n(P6e,"STRONG",{});var KKr=s(Yse);ywo=r(KKr,"ctrl"),KKr.forEach(t),Lwo=r(P6e," \u2014 "),Lq=n(P6e,"A",{href:!0});var ZKr=s(Lq);xwo=r(ZKr,"CTRLForSequenceClassification"),ZKr.forEach(t),kwo=r(P6e," (CTRL model)"),P6e.forEach(t),Swo=i(L),h2=n(L,"LI",{});var $6e=s(h2);Kse=n($6e,"STRONG",{});var eZr=s(Kse);Rwo=r(eZr,"data2vec-text"),eZr.forEach(t),Bwo=r($6e," \u2014 "),xq=n($6e,"A",{href:!0});var oZr=s(xq);Pwo=r(oZr,"Data2VecTextForSequenceClassification"),oZr.forEach(t),$wo=r($6e," (Data2VecText model)"),$6e.forEach(t),Iwo=i(L),u2=n(L,"LI",{});var I6e=s(u2);Zse=n(I6e,"STRONG",{});var rZr=s(Zse);qwo=r(rZr,"deberta"),rZr.forEach(t),Nwo=r(I6e," \u2014 "),kq=n(I6e,"A",{href:!0});var tZr=s(kq);jwo=r(tZr,"DebertaForSequenceClassification"),tZr.forEach(t),Dwo=r(I6e," (DeBERTa model)"),I6e.forEach(t),Gwo=i(L),p2=n(L,"LI",{});var q6e=s(p2);ele=n(q6e,"STRONG",{});var aZr=s(ele);Owo=r(aZr,"deberta-v2"),aZr.forEach(t),Vwo=r(q6e," \u2014 "),Sq=n(q6e,"A",{href:!0});var nZr=s(Sq);Xwo=r(nZr,"DebertaV2ForSequenceClassification"),nZr.forEach(t),zwo=r(q6e," (DeBERTa-v2 model)"),q6e.forEach(t),Qwo=i(L),_2=n(L,"LI",{});var N6e=s(_2);ole=n(N6e,"STRONG",{});var sZr=s(ole);Wwo=r(sZr,"distilbert"),sZr.forEach(t),Hwo=r(N6e," \u2014 "),Rq=n(N6e,"A",{href:!0});var lZr=s(Rq);Uwo=r(lZr,"DistilBertForSequenceClassification"),lZr.forEach(t),Jwo=r(N6e," (DistilBERT model)"),N6e.forEach(t),Ywo=i(L),b2=n(L,"LI",{});var j6e=s(b2);rle=n(j6e,"STRONG",{});var iZr=s(rle);Kwo=r(iZr,"electra"),iZr.forEach(t),Zwo=r(j6e," \u2014 "),Bq=n(j6e,"A",{href:!0});var dZr=s(Bq);eAo=r(dZr,"ElectraForSequenceClassification"),dZr.forEach(t),oAo=r(j6e," (ELECTRA model)"),j6e.forEach(t),rAo=i(L),F2=n(L,"LI",{});var D6e=s(F2);tle=n(D6e,"STRONG",{});var cZr=s(tle);tAo=r(cZr,"flaubert"),cZr.forEach(t),aAo=r(D6e," \u2014 "),Pq=n(D6e,"A",{href:!0});var mZr=s(Pq);nAo=r(mZr,"FlaubertForSequenceClassification"),mZr.forEach(t),sAo=r(D6e," (FlauBERT model)"),D6e.forEach(t),lAo=i(L),v2=n(L,"LI",{});var G6e=s(v2);ale=n(G6e,"STRONG",{});var fZr=s(ale);iAo=r(fZr,"fnet"),fZr.forEach(t),dAo=r(G6e," \u2014 "),$q=n(G6e,"A",{href:!0});var gZr=s($q);cAo=r(gZr,"FNetForSequenceClassification"),gZr.forEach(t),mAo=r(G6e," (FNet model)"),G6e.forEach(t),fAo=i(L),T2=n(L,"LI",{});var O6e=s(T2);nle=n(O6e,"STRONG",{});var hZr=s(nle);gAo=r(hZr,"funnel"),hZr.forEach(t),hAo=r(O6e," \u2014 "),Iq=n(O6e,"A",{href:!0});var uZr=s(Iq);uAo=r(uZr,"FunnelForSequenceClassification"),uZr.forEach(t),pAo=r(O6e," (Funnel Transformer model)"),O6e.forEach(t),_Ao=i(L),M2=n(L,"LI",{});var V6e=s(M2);sle=n(V6e,"STRONG",{});var pZr=s(sle);bAo=r(pZr,"gpt2"),pZr.forEach(t),FAo=r(V6e," \u2014 "),qq=n(V6e,"A",{href:!0});var _Zr=s(qq);vAo=r(_Zr,"GPT2ForSequenceClassification"),_Zr.forEach(t),TAo=r(V6e," (OpenAI GPT-2 model)"),V6e.forEach(t),MAo=i(L),E2=n(L,"LI",{});var X6e=s(E2);lle=n(X6e,"STRONG",{});var bZr=s(lle);EAo=r(bZr,"gpt_neo"),bZr.forEach(t),CAo=r(X6e," \u2014 "),Nq=n(X6e,"A",{href:!0});var FZr=s(Nq);wAo=r(FZr,"GPTNeoForSequenceClassification"),FZr.forEach(t),AAo=r(X6e," (GPT Neo model)"),X6e.forEach(t),yAo=i(L),C2=n(L,"LI",{});var z6e=s(C2);ile=n(z6e,"STRONG",{});var vZr=s(ile);LAo=r(vZr,"gptj"),vZr.forEach(t),xAo=r(z6e," \u2014 "),jq=n(z6e,"A",{href:!0});var TZr=s(jq);kAo=r(TZr,"GPTJForSequenceClassification"),TZr.forEach(t),SAo=r(z6e," (GPT-J model)"),z6e.forEach(t),RAo=i(L),w2=n(L,"LI",{});var Q6e=s(w2);dle=n(Q6e,"STRONG",{});var MZr=s(dle);BAo=r(MZr,"ibert"),MZr.forEach(t),PAo=r(Q6e," \u2014 "),Dq=n(Q6e,"A",{href:!0});var EZr=s(Dq);$Ao=r(EZr,"IBertForSequenceClassification"),EZr.forEach(t),IAo=r(Q6e," (I-BERT model)"),Q6e.forEach(t),qAo=i(L),A2=n(L,"LI",{});var W6e=s(A2);cle=n(W6e,"STRONG",{});var CZr=s(cle);NAo=r(CZr,"layoutlm"),CZr.forEach(t),jAo=r(W6e," \u2014 "),Gq=n(W6e,"A",{href:!0});var wZr=s(Gq);DAo=r(wZr,"LayoutLMForSequenceClassification"),wZr.forEach(t),GAo=r(W6e," (LayoutLM model)"),W6e.forEach(t),OAo=i(L),y2=n(L,"LI",{});var H6e=s(y2);mle=n(H6e,"STRONG",{});var AZr=s(mle);VAo=r(AZr,"layoutlmv2"),AZr.forEach(t),XAo=r(H6e," \u2014 "),Oq=n(H6e,"A",{href:!0});var yZr=s(Oq);zAo=r(yZr,"LayoutLMv2ForSequenceClassification"),yZr.forEach(t),QAo=r(H6e," (LayoutLMv2 model)"),H6e.forEach(t),WAo=i(L),L2=n(L,"LI",{});var U6e=s(L2);fle=n(U6e,"STRONG",{});var LZr=s(fle);HAo=r(LZr,"led"),LZr.forEach(t),UAo=r(U6e," \u2014 "),Vq=n(U6e,"A",{href:!0});var xZr=s(Vq);JAo=r(xZr,"LEDForSequenceClassification"),xZr.forEach(t),YAo=r(U6e," (LED model)"),U6e.forEach(t),KAo=i(L),x2=n(L,"LI",{});var J6e=s(x2);gle=n(J6e,"STRONG",{});var kZr=s(gle);ZAo=r(kZr,"longformer"),kZr.forEach(t),e6o=r(J6e," \u2014 "),Xq=n(J6e,"A",{href:!0});var SZr=s(Xq);o6o=r(SZr,"LongformerForSequenceClassification"),SZr.forEach(t),r6o=r(J6e," (Longformer model)"),J6e.forEach(t),t6o=i(L),k2=n(L,"LI",{});var Y6e=s(k2);hle=n(Y6e,"STRONG",{});var RZr=s(hle);a6o=r(RZr,"mbart"),RZr.forEach(t),n6o=r(Y6e," \u2014 "),zq=n(Y6e,"A",{href:!0});var BZr=s(zq);s6o=r(BZr,"MBartForSequenceClassification"),BZr.forEach(t),l6o=r(Y6e," (mBART model)"),Y6e.forEach(t),i6o=i(L),S2=n(L,"LI",{});var K6e=s(S2);ule=n(K6e,"STRONG",{});var PZr=s(ule);d6o=r(PZr,"megatron-bert"),PZr.forEach(t),c6o=r(K6e," \u2014 "),Qq=n(K6e,"A",{href:!0});var $Zr=s(Qq);m6o=r($Zr,"MegatronBertForSequenceClassification"),$Zr.forEach(t),f6o=r(K6e," (MegatronBert model)"),K6e.forEach(t),g6o=i(L),R2=n(L,"LI",{});var Z6e=s(R2);ple=n(Z6e,"STRONG",{});var IZr=s(ple);h6o=r(IZr,"mobilebert"),IZr.forEach(t),u6o=r(Z6e," \u2014 "),Wq=n(Z6e,"A",{href:!0});var qZr=s(Wq);p6o=r(qZr,"MobileBertForSequenceClassification"),qZr.forEach(t),_6o=r(Z6e," (MobileBERT model)"),Z6e.forEach(t),b6o=i(L),B2=n(L,"LI",{});var e0e=s(B2);_le=n(e0e,"STRONG",{});var NZr=s(_le);F6o=r(NZr,"mpnet"),NZr.forEach(t),v6o=r(e0e," \u2014 "),Hq=n(e0e,"A",{href:!0});var jZr=s(Hq);T6o=r(jZr,"MPNetForSequenceClassification"),jZr.forEach(t),M6o=r(e0e," (MPNet model)"),e0e.forEach(t),E6o=i(L),P2=n(L,"LI",{});var o0e=s(P2);ble=n(o0e,"STRONG",{});var DZr=s(ble);C6o=r(DZr,"nystromformer"),DZr.forEach(t),w6o=r(o0e," \u2014 "),Uq=n(o0e,"A",{href:!0});var GZr=s(Uq);A6o=r(GZr,"NystromformerForSequenceClassification"),GZr.forEach(t),y6o=r(o0e," (Nystromformer model)"),o0e.forEach(t),L6o=i(L),$2=n(L,"LI",{});var r0e=s($2);Fle=n(r0e,"STRONG",{});var OZr=s(Fle);x6o=r(OZr,"openai-gpt"),OZr.forEach(t),k6o=r(r0e," \u2014 "),Jq=n(r0e,"A",{href:!0});var VZr=s(Jq);S6o=r(VZr,"OpenAIGPTForSequenceClassification"),VZr.forEach(t),R6o=r(r0e," (OpenAI GPT model)"),r0e.forEach(t),B6o=i(L),I2=n(L,"LI",{});var t0e=s(I2);vle=n(t0e,"STRONG",{});var XZr=s(vle);P6o=r(XZr,"perceiver"),XZr.forEach(t),$6o=r(t0e," \u2014 "),Yq=n(t0e,"A",{href:!0});var zZr=s(Yq);I6o=r(zZr,"PerceiverForSequenceClassification"),zZr.forEach(t),q6o=r(t0e," (Perceiver model)"),t0e.forEach(t),N6o=i(L),q2=n(L,"LI",{});var a0e=s(q2);Tle=n(a0e,"STRONG",{});var QZr=s(Tle);j6o=r(QZr,"plbart"),QZr.forEach(t),D6o=r(a0e," \u2014 "),Kq=n(a0e,"A",{href:!0});var WZr=s(Kq);G6o=r(WZr,"PLBartForSequenceClassification"),WZr.forEach(t),O6o=r(a0e," (PLBart model)"),a0e.forEach(t),V6o=i(L),N2=n(L,"LI",{});var n0e=s(N2);Mle=n(n0e,"STRONG",{});var HZr=s(Mle);X6o=r(HZr,"qdqbert"),HZr.forEach(t),z6o=r(n0e," \u2014 "),Zq=n(n0e,"A",{href:!0});var UZr=s(Zq);Q6o=r(UZr,"QDQBertForSequenceClassification"),UZr.forEach(t),W6o=r(n0e," (QDQBert model)"),n0e.forEach(t),H6o=i(L),j2=n(L,"LI",{});var s0e=s(j2);Ele=n(s0e,"STRONG",{});var JZr=s(Ele);U6o=r(JZr,"reformer"),JZr.forEach(t),J6o=r(s0e," \u2014 "),eN=n(s0e,"A",{href:!0});var YZr=s(eN);Y6o=r(YZr,"ReformerForSequenceClassification"),YZr.forEach(t),K6o=r(s0e," (Reformer model)"),s0e.forEach(t),Z6o=i(L),D2=n(L,"LI",{});var l0e=s(D2);Cle=n(l0e,"STRONG",{});var KZr=s(Cle);e0o=r(KZr,"rembert"),KZr.forEach(t),o0o=r(l0e," \u2014 "),oN=n(l0e,"A",{href:!0});var ZZr=s(oN);r0o=r(ZZr,"RemBertForSequenceClassification"),ZZr.forEach(t),t0o=r(l0e," (RemBERT model)"),l0e.forEach(t),a0o=i(L),G2=n(L,"LI",{});var i0e=s(G2);wle=n(i0e,"STRONG",{});var eet=s(wle);n0o=r(eet,"roberta"),eet.forEach(t),s0o=r(i0e," \u2014 "),rN=n(i0e,"A",{href:!0});var oet=s(rN);l0o=r(oet,"RobertaForSequenceClassification"),oet.forEach(t),i0o=r(i0e," (RoBERTa model)"),i0e.forEach(t),d0o=i(L),O2=n(L,"LI",{});var d0e=s(O2);Ale=n(d0e,"STRONG",{});var ret=s(Ale);c0o=r(ret,"roformer"),ret.forEach(t),m0o=r(d0e," \u2014 "),tN=n(d0e,"A",{href:!0});var tet=s(tN);f0o=r(tet,"RoFormerForSequenceClassification"),tet.forEach(t),g0o=r(d0e," (RoFormer model)"),d0e.forEach(t),h0o=i(L),V2=n(L,"LI",{});var c0e=s(V2);yle=n(c0e,"STRONG",{});var aet=s(yle);u0o=r(aet,"squeezebert"),aet.forEach(t),p0o=r(c0e," \u2014 "),aN=n(c0e,"A",{href:!0});var net=s(aN);_0o=r(net,"SqueezeBertForSequenceClassification"),net.forEach(t),b0o=r(c0e," (SqueezeBERT model)"),c0e.forEach(t),F0o=i(L),X2=n(L,"LI",{});var m0e=s(X2);Lle=n(m0e,"STRONG",{});var set=s(Lle);v0o=r(set,"tapas"),set.forEach(t),T0o=r(m0e," \u2014 "),nN=n(m0e,"A",{href:!0});var iet=s(nN);M0o=r(iet,"TapasForSequenceClassification"),iet.forEach(t),E0o=r(m0e," (TAPAS model)"),m0e.forEach(t),C0o=i(L),z2=n(L,"LI",{});var f0e=s(z2);xle=n(f0e,"STRONG",{});var det=s(xle);w0o=r(det,"transfo-xl"),det.forEach(t),A0o=r(f0e," \u2014 "),sN=n(f0e,"A",{href:!0});var cet=s(sN);y0o=r(cet,"TransfoXLForSequenceClassification"),cet.forEach(t),L0o=r(f0e," (Transformer-XL model)"),f0e.forEach(t),x0o=i(L),Q2=n(L,"LI",{});var g0e=s(Q2);kle=n(g0e,"STRONG",{});var met=s(kle);k0o=r(met,"xlm"),met.forEach(t),S0o=r(g0e," \u2014 "),lN=n(g0e,"A",{href:!0});var fet=s(lN);R0o=r(fet,"XLMForSequenceClassification"),fet.forEach(t),B0o=r(g0e," (XLM model)"),g0e.forEach(t),P0o=i(L),W2=n(L,"LI",{});var h0e=s(W2);Sle=n(h0e,"STRONG",{});var get=s(Sle);$0o=r(get,"xlm-roberta"),get.forEach(t),I0o=r(h0e," \u2014 "),iN=n(h0e,"A",{href:!0});var het=s(iN);q0o=r(het,"XLMRobertaForSequenceClassification"),het.forEach(t),N0o=r(h0e," (XLM-RoBERTa model)"),h0e.forEach(t),j0o=i(L),H2=n(L,"LI",{});var u0e=s(H2);Rle=n(u0e,"STRONG",{});var uet=s(Rle);D0o=r(uet,"xlm-roberta-xl"),uet.forEach(t),G0o=r(u0e," \u2014 "),dN=n(u0e,"A",{href:!0});var pet=s(dN);O0o=r(pet,"XLMRobertaXLForSequenceClassification"),pet.forEach(t),V0o=r(u0e," (XLM-RoBERTa-XL model)"),u0e.forEach(t),X0o=i(L),U2=n(L,"LI",{});var p0e=s(U2);Ble=n(p0e,"STRONG",{});var _et=s(Ble);z0o=r(_et,"xlnet"),_et.forEach(t),Q0o=r(p0e," \u2014 "),cN=n(p0e,"A",{href:!0});var bet=s(cN);W0o=r(bet,"XLNetForSequenceClassification"),bet.forEach(t),H0o=r(p0e," (XLNet model)"),p0e.forEach(t),U0o=i(L),J2=n(L,"LI",{});var _0e=s(J2);Ple=n(_0e,"STRONG",{});var Fet=s(Ple);J0o=r(Fet,"yoso"),Fet.forEach(t),Y0o=r(_0e," \u2014 "),mN=n(_0e,"A",{href:!0});var vet=s(mN);K0o=r(vet,"YosoForSequenceClassification"),vet.forEach(t),Z0o=r(_0e," (YOSO model)"),_0e.forEach(t),L.forEach(t),eyo=i(zt),Y2=n(zt,"P",{});var b0e=s(Y2);oyo=r(b0e,"The model is set in evaluation mode by default using "),$le=n(b0e,"CODE",{});var Tet=s($le);ryo=r(Tet,"model.eval()"),Tet.forEach(t),tyo=r(b0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ile=n(b0e,"CODE",{});var Met=s(Ile);ayo=r(Met,"model.train()"),Met.forEach(t),b0e.forEach(t),nyo=i(zt),qle=n(zt,"P",{});var Eet=s(qle);syo=r(Eet,"Examples:"),Eet.forEach(t),lyo=i(zt),f(DA.$$.fragment,zt),zt.forEach(t),rl.forEach(t),CRe=i(c),hd=n(c,"H2",{class:!0});var BPe=s(hd);K2=n(BPe,"A",{id:!0,class:!0,href:!0});var Cet=s(K2);Nle=n(Cet,"SPAN",{});var wet=s(Nle);f(GA.$$.fragment,wet),wet.forEach(t),Cet.forEach(t),iyo=i(BPe),jle=n(BPe,"SPAN",{});var Aet=s(jle);dyo=r(Aet,"AutoModelForMultipleChoice"),Aet.forEach(t),BPe.forEach(t),wRe=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);f(OA.$$.fragment,al),cyo=i(al),ud=n(al,"P",{});var uU=s(ud);myo=r(uU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),fN=n(uU,"A",{href:!0});var yet=s(fN);fyo=r(yet,"from_pretrained()"),yet.forEach(t),gyo=r(uU," class method or the "),gN=n(uU,"A",{href:!0});var Let=s(gN);hyo=r(Let,"from_config()"),Let.forEach(t),uyo=r(uU,` class
method.`),uU.forEach(t),pyo=i(al),VA=n(al,"P",{});var PPe=s(VA);_yo=r(PPe,"This class cannot be instantiated directly using "),Dle=n(PPe,"CODE",{});var xet=s(Dle);byo=r(xet,"__init__()"),xet.forEach(t),Fyo=r(PPe," (throws an error)."),PPe.forEach(t),vyo=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);f(XA.$$.fragment,nl),Tyo=i(nl),Gle=n(nl,"P",{});var ket=s(Gle);Myo=r(ket,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ket.forEach(t),Eyo=i(nl),pd=n(nl,"P",{});var pU=s(pd);Cyo=r(pU,`Note:
Loading a model from its configuration file does `),Ole=n(pU,"STRONG",{});var Set=s(Ole);wyo=r(Set,"not"),Set.forEach(t),Ayo=r(pU,` load the model weights. It only affects the
model\u2019s configuration. Use `),hN=n(pU,"A",{href:!0});var Ret=s(hN);yyo=r(Ret,"from_pretrained()"),Ret.forEach(t),Lyo=r(pU," to load the model weights."),pU.forEach(t),xyo=i(nl),Vle=n(nl,"P",{});var Bet=s(Vle);kyo=r(Bet,"Examples:"),Bet.forEach(t),Syo=i(nl),f(zA.$$.fragment,nl),nl.forEach(t),Ryo=i(al),Ve=n(al,"DIV",{class:!0});var Qt=s(Ve);f(QA.$$.fragment,Qt),Byo=i(Qt),Xle=n(Qt,"P",{});var Pet=s(Xle);Pyo=r(Pet,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Pet.forEach(t),$yo=i(Qt),Ja=n(Qt,"P",{});var x3=s(Ja);Iyo=r(x3,"The model class to instantiate is selected based on the "),zle=n(x3,"CODE",{});var $et=s(zle);qyo=r($et,"model_type"),$et.forEach(t),Nyo=r(x3,` property of the config object (either
passed as an argument or loaded from `),Qle=n(x3,"CODE",{});var Iet=s(Qle);jyo=r(Iet,"pretrained_model_name_or_path"),Iet.forEach(t),Dyo=r(x3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wle=n(x3,"CODE",{});var qet=s(Wle);Gyo=r(qet,"pretrained_model_name_or_path"),qet.forEach(t),Oyo=r(x3,":"),x3.forEach(t),Vyo=i(Qt),G=n(Qt,"UL",{});var O=s(G);Z2=n(O,"LI",{});var F0e=s(Z2);Hle=n(F0e,"STRONG",{});var Net=s(Hle);Xyo=r(Net,"albert"),Net.forEach(t),zyo=r(F0e," \u2014 "),uN=n(F0e,"A",{href:!0});var jet=s(uN);Qyo=r(jet,"AlbertForMultipleChoice"),jet.forEach(t),Wyo=r(F0e," (ALBERT model)"),F0e.forEach(t),Hyo=i(O),eF=n(O,"LI",{});var v0e=s(eF);Ule=n(v0e,"STRONG",{});var Det=s(Ule);Uyo=r(Det,"bert"),Det.forEach(t),Jyo=r(v0e," \u2014 "),pN=n(v0e,"A",{href:!0});var Get=s(pN);Yyo=r(Get,"BertForMultipleChoice"),Get.forEach(t),Kyo=r(v0e," (BERT model)"),v0e.forEach(t),Zyo=i(O),oF=n(O,"LI",{});var T0e=s(oF);Jle=n(T0e,"STRONG",{});var Oet=s(Jle);eLo=r(Oet,"big_bird"),Oet.forEach(t),oLo=r(T0e," \u2014 "),_N=n(T0e,"A",{href:!0});var Vet=s(_N);rLo=r(Vet,"BigBirdForMultipleChoice"),Vet.forEach(t),tLo=r(T0e," (BigBird model)"),T0e.forEach(t),aLo=i(O),rF=n(O,"LI",{});var M0e=s(rF);Yle=n(M0e,"STRONG",{});var Xet=s(Yle);nLo=r(Xet,"camembert"),Xet.forEach(t),sLo=r(M0e," \u2014 "),bN=n(M0e,"A",{href:!0});var zet=s(bN);lLo=r(zet,"CamembertForMultipleChoice"),zet.forEach(t),iLo=r(M0e," (CamemBERT model)"),M0e.forEach(t),dLo=i(O),tF=n(O,"LI",{});var E0e=s(tF);Kle=n(E0e,"STRONG",{});var Qet=s(Kle);cLo=r(Qet,"canine"),Qet.forEach(t),mLo=r(E0e," \u2014 "),FN=n(E0e,"A",{href:!0});var Wet=s(FN);fLo=r(Wet,"CanineForMultipleChoice"),Wet.forEach(t),gLo=r(E0e," (Canine model)"),E0e.forEach(t),hLo=i(O),aF=n(O,"LI",{});var C0e=s(aF);Zle=n(C0e,"STRONG",{});var Het=s(Zle);uLo=r(Het,"convbert"),Het.forEach(t),pLo=r(C0e," \u2014 "),vN=n(C0e,"A",{href:!0});var Uet=s(vN);_Lo=r(Uet,"ConvBertForMultipleChoice"),Uet.forEach(t),bLo=r(C0e," (ConvBERT model)"),C0e.forEach(t),FLo=i(O),nF=n(O,"LI",{});var w0e=s(nF);eie=n(w0e,"STRONG",{});var Jet=s(eie);vLo=r(Jet,"data2vec-text"),Jet.forEach(t),TLo=r(w0e," \u2014 "),TN=n(w0e,"A",{href:!0});var Yet=s(TN);MLo=r(Yet,"Data2VecTextForMultipleChoice"),Yet.forEach(t),ELo=r(w0e," (Data2VecText model)"),w0e.forEach(t),CLo=i(O),sF=n(O,"LI",{});var A0e=s(sF);oie=n(A0e,"STRONG",{});var Ket=s(oie);wLo=r(Ket,"distilbert"),Ket.forEach(t),ALo=r(A0e," \u2014 "),MN=n(A0e,"A",{href:!0});var Zet=s(MN);yLo=r(Zet,"DistilBertForMultipleChoice"),Zet.forEach(t),LLo=r(A0e," (DistilBERT model)"),A0e.forEach(t),xLo=i(O),lF=n(O,"LI",{});var y0e=s(lF);rie=n(y0e,"STRONG",{});var eot=s(rie);kLo=r(eot,"electra"),eot.forEach(t),SLo=r(y0e," \u2014 "),EN=n(y0e,"A",{href:!0});var oot=s(EN);RLo=r(oot,"ElectraForMultipleChoice"),oot.forEach(t),BLo=r(y0e," (ELECTRA model)"),y0e.forEach(t),PLo=i(O),iF=n(O,"LI",{});var L0e=s(iF);tie=n(L0e,"STRONG",{});var rot=s(tie);$Lo=r(rot,"flaubert"),rot.forEach(t),ILo=r(L0e," \u2014 "),CN=n(L0e,"A",{href:!0});var tot=s(CN);qLo=r(tot,"FlaubertForMultipleChoice"),tot.forEach(t),NLo=r(L0e," (FlauBERT model)"),L0e.forEach(t),jLo=i(O),dF=n(O,"LI",{});var x0e=s(dF);aie=n(x0e,"STRONG",{});var aot=s(aie);DLo=r(aot,"fnet"),aot.forEach(t),GLo=r(x0e," \u2014 "),wN=n(x0e,"A",{href:!0});var not=s(wN);OLo=r(not,"FNetForMultipleChoice"),not.forEach(t),VLo=r(x0e," (FNet model)"),x0e.forEach(t),XLo=i(O),cF=n(O,"LI",{});var k0e=s(cF);nie=n(k0e,"STRONG",{});var sot=s(nie);zLo=r(sot,"funnel"),sot.forEach(t),QLo=r(k0e," \u2014 "),AN=n(k0e,"A",{href:!0});var lot=s(AN);WLo=r(lot,"FunnelForMultipleChoice"),lot.forEach(t),HLo=r(k0e," (Funnel Transformer model)"),k0e.forEach(t),ULo=i(O),mF=n(O,"LI",{});var S0e=s(mF);sie=n(S0e,"STRONG",{});var iot=s(sie);JLo=r(iot,"ibert"),iot.forEach(t),YLo=r(S0e," \u2014 "),yN=n(S0e,"A",{href:!0});var dot=s(yN);KLo=r(dot,"IBertForMultipleChoice"),dot.forEach(t),ZLo=r(S0e," (I-BERT model)"),S0e.forEach(t),e8o=i(O),fF=n(O,"LI",{});var R0e=s(fF);lie=n(R0e,"STRONG",{});var cot=s(lie);o8o=r(cot,"longformer"),cot.forEach(t),r8o=r(R0e," \u2014 "),LN=n(R0e,"A",{href:!0});var mot=s(LN);t8o=r(mot,"LongformerForMultipleChoice"),mot.forEach(t),a8o=r(R0e," (Longformer model)"),R0e.forEach(t),n8o=i(O),gF=n(O,"LI",{});var B0e=s(gF);iie=n(B0e,"STRONG",{});var fot=s(iie);s8o=r(fot,"megatron-bert"),fot.forEach(t),l8o=r(B0e," \u2014 "),xN=n(B0e,"A",{href:!0});var got=s(xN);i8o=r(got,"MegatronBertForMultipleChoice"),got.forEach(t),d8o=r(B0e," (MegatronBert model)"),B0e.forEach(t),c8o=i(O),hF=n(O,"LI",{});var P0e=s(hF);die=n(P0e,"STRONG",{});var hot=s(die);m8o=r(hot,"mobilebert"),hot.forEach(t),f8o=r(P0e," \u2014 "),kN=n(P0e,"A",{href:!0});var uot=s(kN);g8o=r(uot,"MobileBertForMultipleChoice"),uot.forEach(t),h8o=r(P0e," (MobileBERT model)"),P0e.forEach(t),u8o=i(O),uF=n(O,"LI",{});var $0e=s(uF);cie=n($0e,"STRONG",{});var pot=s(cie);p8o=r(pot,"mpnet"),pot.forEach(t),_8o=r($0e," \u2014 "),SN=n($0e,"A",{href:!0});var _ot=s(SN);b8o=r(_ot,"MPNetForMultipleChoice"),_ot.forEach(t),F8o=r($0e," (MPNet model)"),$0e.forEach(t),v8o=i(O),pF=n(O,"LI",{});var I0e=s(pF);mie=n(I0e,"STRONG",{});var bot=s(mie);T8o=r(bot,"nystromformer"),bot.forEach(t),M8o=r(I0e," \u2014 "),RN=n(I0e,"A",{href:!0});var Fot=s(RN);E8o=r(Fot,"NystromformerForMultipleChoice"),Fot.forEach(t),C8o=r(I0e," (Nystromformer model)"),I0e.forEach(t),w8o=i(O),_F=n(O,"LI",{});var q0e=s(_F);fie=n(q0e,"STRONG",{});var vot=s(fie);A8o=r(vot,"qdqbert"),vot.forEach(t),y8o=r(q0e," \u2014 "),BN=n(q0e,"A",{href:!0});var Tot=s(BN);L8o=r(Tot,"QDQBertForMultipleChoice"),Tot.forEach(t),x8o=r(q0e," (QDQBert model)"),q0e.forEach(t),k8o=i(O),bF=n(O,"LI",{});var N0e=s(bF);gie=n(N0e,"STRONG",{});var Mot=s(gie);S8o=r(Mot,"rembert"),Mot.forEach(t),R8o=r(N0e," \u2014 "),PN=n(N0e,"A",{href:!0});var Eot=s(PN);B8o=r(Eot,"RemBertForMultipleChoice"),Eot.forEach(t),P8o=r(N0e," (RemBERT model)"),N0e.forEach(t),$8o=i(O),FF=n(O,"LI",{});var j0e=s(FF);hie=n(j0e,"STRONG",{});var Cot=s(hie);I8o=r(Cot,"roberta"),Cot.forEach(t),q8o=r(j0e," \u2014 "),$N=n(j0e,"A",{href:!0});var wot=s($N);N8o=r(wot,"RobertaForMultipleChoice"),wot.forEach(t),j8o=r(j0e," (RoBERTa model)"),j0e.forEach(t),D8o=i(O),vF=n(O,"LI",{});var D0e=s(vF);uie=n(D0e,"STRONG",{});var Aot=s(uie);G8o=r(Aot,"roformer"),Aot.forEach(t),O8o=r(D0e," \u2014 "),IN=n(D0e,"A",{href:!0});var yot=s(IN);V8o=r(yot,"RoFormerForMultipleChoice"),yot.forEach(t),X8o=r(D0e," (RoFormer model)"),D0e.forEach(t),z8o=i(O),TF=n(O,"LI",{});var G0e=s(TF);pie=n(G0e,"STRONG",{});var Lot=s(pie);Q8o=r(Lot,"squeezebert"),Lot.forEach(t),W8o=r(G0e," \u2014 "),qN=n(G0e,"A",{href:!0});var xot=s(qN);H8o=r(xot,"SqueezeBertForMultipleChoice"),xot.forEach(t),U8o=r(G0e," (SqueezeBERT model)"),G0e.forEach(t),J8o=i(O),MF=n(O,"LI",{});var O0e=s(MF);_ie=n(O0e,"STRONG",{});var kot=s(_ie);Y8o=r(kot,"xlm"),kot.forEach(t),K8o=r(O0e," \u2014 "),NN=n(O0e,"A",{href:!0});var Sot=s(NN);Z8o=r(Sot,"XLMForMultipleChoice"),Sot.forEach(t),e7o=r(O0e," (XLM model)"),O0e.forEach(t),o7o=i(O),EF=n(O,"LI",{});var V0e=s(EF);bie=n(V0e,"STRONG",{});var Rot=s(bie);r7o=r(Rot,"xlm-roberta"),Rot.forEach(t),t7o=r(V0e," \u2014 "),jN=n(V0e,"A",{href:!0});var Bot=s(jN);a7o=r(Bot,"XLMRobertaForMultipleChoice"),Bot.forEach(t),n7o=r(V0e," (XLM-RoBERTa model)"),V0e.forEach(t),s7o=i(O),CF=n(O,"LI",{});var X0e=s(CF);Fie=n(X0e,"STRONG",{});var Pot=s(Fie);l7o=r(Pot,"xlm-roberta-xl"),Pot.forEach(t),i7o=r(X0e," \u2014 "),DN=n(X0e,"A",{href:!0});var $ot=s(DN);d7o=r($ot,"XLMRobertaXLForMultipleChoice"),$ot.forEach(t),c7o=r(X0e," (XLM-RoBERTa-XL model)"),X0e.forEach(t),m7o=i(O),wF=n(O,"LI",{});var z0e=s(wF);vie=n(z0e,"STRONG",{});var Iot=s(vie);f7o=r(Iot,"xlnet"),Iot.forEach(t),g7o=r(z0e," \u2014 "),GN=n(z0e,"A",{href:!0});var qot=s(GN);h7o=r(qot,"XLNetForMultipleChoice"),qot.forEach(t),u7o=r(z0e," (XLNet model)"),z0e.forEach(t),p7o=i(O),AF=n(O,"LI",{});var Q0e=s(AF);Tie=n(Q0e,"STRONG",{});var Not=s(Tie);_7o=r(Not,"yoso"),Not.forEach(t),b7o=r(Q0e," \u2014 "),ON=n(Q0e,"A",{href:!0});var jot=s(ON);F7o=r(jot,"YosoForMultipleChoice"),jot.forEach(t),v7o=r(Q0e," (YOSO model)"),Q0e.forEach(t),O.forEach(t),T7o=i(Qt),yF=n(Qt,"P",{});var W0e=s(yF);M7o=r(W0e,"The model is set in evaluation mode by default using "),Mie=n(W0e,"CODE",{});var Dot=s(Mie);E7o=r(Dot,"model.eval()"),Dot.forEach(t),C7o=r(W0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eie=n(W0e,"CODE",{});var Got=s(Eie);w7o=r(Got,"model.train()"),Got.forEach(t),W0e.forEach(t),A7o=i(Qt),Cie=n(Qt,"P",{});var Oot=s(Cie);y7o=r(Oot,"Examples:"),Oot.forEach(t),L7o=i(Qt),f(WA.$$.fragment,Qt),Qt.forEach(t),al.forEach(t),ARe=i(c),_d=n(c,"H2",{class:!0});var $Pe=s(_d);LF=n($Pe,"A",{id:!0,class:!0,href:!0});var Vot=s(LF);wie=n(Vot,"SPAN",{});var Xot=s(wie);f(HA.$$.fragment,Xot),Xot.forEach(t),Vot.forEach(t),x7o=i($Pe),Aie=n($Pe,"SPAN",{});var zot=s(Aie);k7o=r(zot,"AutoModelForNextSentencePrediction"),zot.forEach(t),$Pe.forEach(t),yRe=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);f(UA.$$.fragment,sl),S7o=i(sl),bd=n(sl,"P",{});var _U=s(bd);R7o=r(_U,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),VN=n(_U,"A",{href:!0});var Qot=s(VN);B7o=r(Qot,"from_pretrained()"),Qot.forEach(t),P7o=r(_U," class method or the "),XN=n(_U,"A",{href:!0});var Wot=s(XN);$7o=r(Wot,"from_config()"),Wot.forEach(t),I7o=r(_U,` class
method.`),_U.forEach(t),q7o=i(sl),JA=n(sl,"P",{});var IPe=s(JA);N7o=r(IPe,"This class cannot be instantiated directly using "),yie=n(IPe,"CODE",{});var Hot=s(yie);j7o=r(Hot,"__init__()"),Hot.forEach(t),D7o=r(IPe," (throws an error)."),IPe.forEach(t),G7o=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);f(YA.$$.fragment,ll),O7o=i(ll),Lie=n(ll,"P",{});var Uot=s(Lie);V7o=r(Uot,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Uot.forEach(t),X7o=i(ll),Fd=n(ll,"P",{});var bU=s(Fd);z7o=r(bU,`Note:
Loading a model from its configuration file does `),xie=n(bU,"STRONG",{});var Jot=s(xie);Q7o=r(Jot,"not"),Jot.forEach(t),W7o=r(bU,` load the model weights. It only affects the
model\u2019s configuration. Use `),zN=n(bU,"A",{href:!0});var Yot=s(zN);H7o=r(Yot,"from_pretrained()"),Yot.forEach(t),U7o=r(bU," to load the model weights."),bU.forEach(t),J7o=i(ll),kie=n(ll,"P",{});var Kot=s(kie);Y7o=r(Kot,"Examples:"),Kot.forEach(t),K7o=i(ll),f(KA.$$.fragment,ll),ll.forEach(t),Z7o=i(sl),Xe=n(sl,"DIV",{class:!0});var Wt=s(Xe);f(ZA.$$.fragment,Wt),e9o=i(Wt),Sie=n(Wt,"P",{});var Zot=s(Sie);o9o=r(Zot,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Zot.forEach(t),r9o=i(Wt),Ya=n(Wt,"P",{});var k3=s(Ya);t9o=r(k3,"The model class to instantiate is selected based on the "),Rie=n(k3,"CODE",{});var ert=s(Rie);a9o=r(ert,"model_type"),ert.forEach(t),n9o=r(k3,` property of the config object (either
passed as an argument or loaded from `),Bie=n(k3,"CODE",{});var ort=s(Bie);s9o=r(ort,"pretrained_model_name_or_path"),ort.forEach(t),l9o=r(k3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pie=n(k3,"CODE",{});var rrt=s(Pie);i9o=r(rrt,"pretrained_model_name_or_path"),rrt.forEach(t),d9o=r(k3,":"),k3.forEach(t),c9o=i(Wt),da=n(Wt,"UL",{});var il=s(da);xF=n(il,"LI",{});var H0e=s(xF);$ie=n(H0e,"STRONG",{});var trt=s($ie);m9o=r(trt,"bert"),trt.forEach(t),f9o=r(H0e," \u2014 "),QN=n(H0e,"A",{href:!0});var art=s(QN);g9o=r(art,"BertForNextSentencePrediction"),art.forEach(t),h9o=r(H0e," (BERT model)"),H0e.forEach(t),u9o=i(il),kF=n(il,"LI",{});var U0e=s(kF);Iie=n(U0e,"STRONG",{});var nrt=s(Iie);p9o=r(nrt,"fnet"),nrt.forEach(t),_9o=r(U0e," \u2014 "),WN=n(U0e,"A",{href:!0});var srt=s(WN);b9o=r(srt,"FNetForNextSentencePrediction"),srt.forEach(t),F9o=r(U0e," (FNet model)"),U0e.forEach(t),v9o=i(il),SF=n(il,"LI",{});var J0e=s(SF);qie=n(J0e,"STRONG",{});var lrt=s(qie);T9o=r(lrt,"megatron-bert"),lrt.forEach(t),M9o=r(J0e," \u2014 "),HN=n(J0e,"A",{href:!0});var irt=s(HN);E9o=r(irt,"MegatronBertForNextSentencePrediction"),irt.forEach(t),C9o=r(J0e," (MegatronBert model)"),J0e.forEach(t),w9o=i(il),RF=n(il,"LI",{});var Y0e=s(RF);Nie=n(Y0e,"STRONG",{});var drt=s(Nie);A9o=r(drt,"mobilebert"),drt.forEach(t),y9o=r(Y0e," \u2014 "),UN=n(Y0e,"A",{href:!0});var crt=s(UN);L9o=r(crt,"MobileBertForNextSentencePrediction"),crt.forEach(t),x9o=r(Y0e," (MobileBERT model)"),Y0e.forEach(t),k9o=i(il),BF=n(il,"LI",{});var K0e=s(BF);jie=n(K0e,"STRONG",{});var mrt=s(jie);S9o=r(mrt,"qdqbert"),mrt.forEach(t),R9o=r(K0e," \u2014 "),JN=n(K0e,"A",{href:!0});var frt=s(JN);B9o=r(frt,"QDQBertForNextSentencePrediction"),frt.forEach(t),P9o=r(K0e," (QDQBert model)"),K0e.forEach(t),il.forEach(t),$9o=i(Wt),PF=n(Wt,"P",{});var Z0e=s(PF);I9o=r(Z0e,"The model is set in evaluation mode by default using "),Die=n(Z0e,"CODE",{});var grt=s(Die);q9o=r(grt,"model.eval()"),grt.forEach(t),N9o=r(Z0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gie=n(Z0e,"CODE",{});var hrt=s(Gie);j9o=r(hrt,"model.train()"),hrt.forEach(t),Z0e.forEach(t),D9o=i(Wt),Oie=n(Wt,"P",{});var urt=s(Oie);G9o=r(urt,"Examples:"),urt.forEach(t),O9o=i(Wt),f(e6.$$.fragment,Wt),Wt.forEach(t),sl.forEach(t),LRe=i(c),vd=n(c,"H2",{class:!0});var qPe=s(vd);$F=n(qPe,"A",{id:!0,class:!0,href:!0});var prt=s($F);Vie=n(prt,"SPAN",{});var _rt=s(Vie);f(o6.$$.fragment,_rt),_rt.forEach(t),prt.forEach(t),V9o=i(qPe),Xie=n(qPe,"SPAN",{});var brt=s(Xie);X9o=r(brt,"AutoModelForTokenClassification"),brt.forEach(t),qPe.forEach(t),xRe=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);f(r6.$$.fragment,dl),z9o=i(dl),Td=n(dl,"P",{});var FU=s(Td);Q9o=r(FU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),YN=n(FU,"A",{href:!0});var Frt=s(YN);W9o=r(Frt,"from_pretrained()"),Frt.forEach(t),H9o=r(FU," class method or the "),KN=n(FU,"A",{href:!0});var vrt=s(KN);U9o=r(vrt,"from_config()"),vrt.forEach(t),J9o=r(FU,` class
method.`),FU.forEach(t),Y9o=i(dl),t6=n(dl,"P",{});var NPe=s(t6);K9o=r(NPe,"This class cannot be instantiated directly using "),zie=n(NPe,"CODE",{});var Trt=s(zie);Z9o=r(Trt,"__init__()"),Trt.forEach(t),exo=r(NPe," (throws an error)."),NPe.forEach(t),oxo=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);f(a6.$$.fragment,cl),rxo=i(cl),Qie=n(cl,"P",{});var Mrt=s(Qie);txo=r(Mrt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Mrt.forEach(t),axo=i(cl),Md=n(cl,"P",{});var vU=s(Md);nxo=r(vU,`Note:
Loading a model from its configuration file does `),Wie=n(vU,"STRONG",{});var Ert=s(Wie);sxo=r(Ert,"not"),Ert.forEach(t),lxo=r(vU,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZN=n(vU,"A",{href:!0});var Crt=s(ZN);ixo=r(Crt,"from_pretrained()"),Crt.forEach(t),dxo=r(vU," to load the model weights."),vU.forEach(t),cxo=i(cl),Hie=n(cl,"P",{});var wrt=s(Hie);mxo=r(wrt,"Examples:"),wrt.forEach(t),fxo=i(cl),f(n6.$$.fragment,cl),cl.forEach(t),gxo=i(dl),ze=n(dl,"DIV",{class:!0});var Ht=s(ze);f(s6.$$.fragment,Ht),hxo=i(Ht),Uie=n(Ht,"P",{});var Art=s(Uie);uxo=r(Art,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Art.forEach(t),pxo=i(Ht),Ka=n(Ht,"P",{});var S3=s(Ka);_xo=r(S3,"The model class to instantiate is selected based on the "),Jie=n(S3,"CODE",{});var yrt=s(Jie);bxo=r(yrt,"model_type"),yrt.forEach(t),Fxo=r(S3,` property of the config object (either
passed as an argument or loaded from `),Yie=n(S3,"CODE",{});var Lrt=s(Yie);vxo=r(Lrt,"pretrained_model_name_or_path"),Lrt.forEach(t),Txo=r(S3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kie=n(S3,"CODE",{});var xrt=s(Kie);Mxo=r(xrt,"pretrained_model_name_or_path"),xrt.forEach(t),Exo=r(S3,":"),S3.forEach(t),Cxo=i(Ht),j=n(Ht,"UL",{});var D=s(j);IF=n(D,"LI",{});var eye=s(IF);Zie=n(eye,"STRONG",{});var krt=s(Zie);wxo=r(krt,"albert"),krt.forEach(t),Axo=r(eye," \u2014 "),ej=n(eye,"A",{href:!0});var Srt=s(ej);yxo=r(Srt,"AlbertForTokenClassification"),Srt.forEach(t),Lxo=r(eye," (ALBERT model)"),eye.forEach(t),xxo=i(D),qF=n(D,"LI",{});var oye=s(qF);ede=n(oye,"STRONG",{});var Rrt=s(ede);kxo=r(Rrt,"bert"),Rrt.forEach(t),Sxo=r(oye," \u2014 "),oj=n(oye,"A",{href:!0});var Brt=s(oj);Rxo=r(Brt,"BertForTokenClassification"),Brt.forEach(t),Bxo=r(oye," (BERT model)"),oye.forEach(t),Pxo=i(D),NF=n(D,"LI",{});var rye=s(NF);ode=n(rye,"STRONG",{});var Prt=s(ode);$xo=r(Prt,"big_bird"),Prt.forEach(t),Ixo=r(rye," \u2014 "),rj=n(rye,"A",{href:!0});var $rt=s(rj);qxo=r($rt,"BigBirdForTokenClassification"),$rt.forEach(t),Nxo=r(rye," (BigBird model)"),rye.forEach(t),jxo=i(D),jF=n(D,"LI",{});var tye=s(jF);rde=n(tye,"STRONG",{});var Irt=s(rde);Dxo=r(Irt,"camembert"),Irt.forEach(t),Gxo=r(tye," \u2014 "),tj=n(tye,"A",{href:!0});var qrt=s(tj);Oxo=r(qrt,"CamembertForTokenClassification"),qrt.forEach(t),Vxo=r(tye," (CamemBERT model)"),tye.forEach(t),Xxo=i(D),DF=n(D,"LI",{});var aye=s(DF);tde=n(aye,"STRONG",{});var Nrt=s(tde);zxo=r(Nrt,"canine"),Nrt.forEach(t),Qxo=r(aye," \u2014 "),aj=n(aye,"A",{href:!0});var jrt=s(aj);Wxo=r(jrt,"CanineForTokenClassification"),jrt.forEach(t),Hxo=r(aye," (Canine model)"),aye.forEach(t),Uxo=i(D),GF=n(D,"LI",{});var nye=s(GF);ade=n(nye,"STRONG",{});var Drt=s(ade);Jxo=r(Drt,"convbert"),Drt.forEach(t),Yxo=r(nye," \u2014 "),nj=n(nye,"A",{href:!0});var Grt=s(nj);Kxo=r(Grt,"ConvBertForTokenClassification"),Grt.forEach(t),Zxo=r(nye," (ConvBERT model)"),nye.forEach(t),eko=i(D),OF=n(D,"LI",{});var sye=s(OF);nde=n(sye,"STRONG",{});var Ort=s(nde);oko=r(Ort,"data2vec-text"),Ort.forEach(t),rko=r(sye," \u2014 "),sj=n(sye,"A",{href:!0});var Vrt=s(sj);tko=r(Vrt,"Data2VecTextForTokenClassification"),Vrt.forEach(t),ako=r(sye," (Data2VecText model)"),sye.forEach(t),nko=i(D),VF=n(D,"LI",{});var lye=s(VF);sde=n(lye,"STRONG",{});var Xrt=s(sde);sko=r(Xrt,"deberta"),Xrt.forEach(t),lko=r(lye," \u2014 "),lj=n(lye,"A",{href:!0});var zrt=s(lj);iko=r(zrt,"DebertaForTokenClassification"),zrt.forEach(t),dko=r(lye," (DeBERTa model)"),lye.forEach(t),cko=i(D),XF=n(D,"LI",{});var iye=s(XF);lde=n(iye,"STRONG",{});var Qrt=s(lde);mko=r(Qrt,"deberta-v2"),Qrt.forEach(t),fko=r(iye," \u2014 "),ij=n(iye,"A",{href:!0});var Wrt=s(ij);gko=r(Wrt,"DebertaV2ForTokenClassification"),Wrt.forEach(t),hko=r(iye," (DeBERTa-v2 model)"),iye.forEach(t),uko=i(D),zF=n(D,"LI",{});var dye=s(zF);ide=n(dye,"STRONG",{});var Hrt=s(ide);pko=r(Hrt,"distilbert"),Hrt.forEach(t),_ko=r(dye," \u2014 "),dj=n(dye,"A",{href:!0});var Urt=s(dj);bko=r(Urt,"DistilBertForTokenClassification"),Urt.forEach(t),Fko=r(dye," (DistilBERT model)"),dye.forEach(t),vko=i(D),QF=n(D,"LI",{});var cye=s(QF);dde=n(cye,"STRONG",{});var Jrt=s(dde);Tko=r(Jrt,"electra"),Jrt.forEach(t),Mko=r(cye," \u2014 "),cj=n(cye,"A",{href:!0});var Yrt=s(cj);Eko=r(Yrt,"ElectraForTokenClassification"),Yrt.forEach(t),Cko=r(cye," (ELECTRA model)"),cye.forEach(t),wko=i(D),WF=n(D,"LI",{});var mye=s(WF);cde=n(mye,"STRONG",{});var Krt=s(cde);Ako=r(Krt,"flaubert"),Krt.forEach(t),yko=r(mye," \u2014 "),mj=n(mye,"A",{href:!0});var Zrt=s(mj);Lko=r(Zrt,"FlaubertForTokenClassification"),Zrt.forEach(t),xko=r(mye," (FlauBERT model)"),mye.forEach(t),kko=i(D),HF=n(D,"LI",{});var fye=s(HF);mde=n(fye,"STRONG",{});var ett=s(mde);Sko=r(ett,"fnet"),ett.forEach(t),Rko=r(fye," \u2014 "),fj=n(fye,"A",{href:!0});var ott=s(fj);Bko=r(ott,"FNetForTokenClassification"),ott.forEach(t),Pko=r(fye," (FNet model)"),fye.forEach(t),$ko=i(D),UF=n(D,"LI",{});var gye=s(UF);fde=n(gye,"STRONG",{});var rtt=s(fde);Iko=r(rtt,"funnel"),rtt.forEach(t),qko=r(gye," \u2014 "),gj=n(gye,"A",{href:!0});var ttt=s(gj);Nko=r(ttt,"FunnelForTokenClassification"),ttt.forEach(t),jko=r(gye," (Funnel Transformer model)"),gye.forEach(t),Dko=i(D),JF=n(D,"LI",{});var hye=s(JF);gde=n(hye,"STRONG",{});var att=s(gde);Gko=r(att,"gpt2"),att.forEach(t),Oko=r(hye," \u2014 "),hj=n(hye,"A",{href:!0});var ntt=s(hj);Vko=r(ntt,"GPT2ForTokenClassification"),ntt.forEach(t),Xko=r(hye," (OpenAI GPT-2 model)"),hye.forEach(t),zko=i(D),YF=n(D,"LI",{});var uye=s(YF);hde=n(uye,"STRONG",{});var stt=s(hde);Qko=r(stt,"ibert"),stt.forEach(t),Wko=r(uye," \u2014 "),uj=n(uye,"A",{href:!0});var ltt=s(uj);Hko=r(ltt,"IBertForTokenClassification"),ltt.forEach(t),Uko=r(uye," (I-BERT model)"),uye.forEach(t),Jko=i(D),KF=n(D,"LI",{});var pye=s(KF);ude=n(pye,"STRONG",{});var itt=s(ude);Yko=r(itt,"layoutlm"),itt.forEach(t),Kko=r(pye," \u2014 "),pj=n(pye,"A",{href:!0});var dtt=s(pj);Zko=r(dtt,"LayoutLMForTokenClassification"),dtt.forEach(t),eSo=r(pye," (LayoutLM model)"),pye.forEach(t),oSo=i(D),ZF=n(D,"LI",{});var _ye=s(ZF);pde=n(_ye,"STRONG",{});var ctt=s(pde);rSo=r(ctt,"layoutlmv2"),ctt.forEach(t),tSo=r(_ye," \u2014 "),_j=n(_ye,"A",{href:!0});var mtt=s(_j);aSo=r(mtt,"LayoutLMv2ForTokenClassification"),mtt.forEach(t),nSo=r(_ye," (LayoutLMv2 model)"),_ye.forEach(t),sSo=i(D),ev=n(D,"LI",{});var bye=s(ev);_de=n(bye,"STRONG",{});var ftt=s(_de);lSo=r(ftt,"longformer"),ftt.forEach(t),iSo=r(bye," \u2014 "),bj=n(bye,"A",{href:!0});var gtt=s(bj);dSo=r(gtt,"LongformerForTokenClassification"),gtt.forEach(t),cSo=r(bye," (Longformer model)"),bye.forEach(t),mSo=i(D),ov=n(D,"LI",{});var Fye=s(ov);bde=n(Fye,"STRONG",{});var htt=s(bde);fSo=r(htt,"megatron-bert"),htt.forEach(t),gSo=r(Fye," \u2014 "),Fj=n(Fye,"A",{href:!0});var utt=s(Fj);hSo=r(utt,"MegatronBertForTokenClassification"),utt.forEach(t),uSo=r(Fye," (MegatronBert model)"),Fye.forEach(t),pSo=i(D),rv=n(D,"LI",{});var vye=s(rv);Fde=n(vye,"STRONG",{});var ptt=s(Fde);_So=r(ptt,"mobilebert"),ptt.forEach(t),bSo=r(vye," \u2014 "),vj=n(vye,"A",{href:!0});var _tt=s(vj);FSo=r(_tt,"MobileBertForTokenClassification"),_tt.forEach(t),vSo=r(vye," (MobileBERT model)"),vye.forEach(t),TSo=i(D),tv=n(D,"LI",{});var Tye=s(tv);vde=n(Tye,"STRONG",{});var btt=s(vde);MSo=r(btt,"mpnet"),btt.forEach(t),ESo=r(Tye," \u2014 "),Tj=n(Tye,"A",{href:!0});var Ftt=s(Tj);CSo=r(Ftt,"MPNetForTokenClassification"),Ftt.forEach(t),wSo=r(Tye," (MPNet model)"),Tye.forEach(t),ASo=i(D),av=n(D,"LI",{});var Mye=s(av);Tde=n(Mye,"STRONG",{});var vtt=s(Tde);ySo=r(vtt,"nystromformer"),vtt.forEach(t),LSo=r(Mye," \u2014 "),Mj=n(Mye,"A",{href:!0});var Ttt=s(Mj);xSo=r(Ttt,"NystromformerForTokenClassification"),Ttt.forEach(t),kSo=r(Mye," (Nystromformer model)"),Mye.forEach(t),SSo=i(D),nv=n(D,"LI",{});var Eye=s(nv);Mde=n(Eye,"STRONG",{});var Mtt=s(Mde);RSo=r(Mtt,"qdqbert"),Mtt.forEach(t),BSo=r(Eye," \u2014 "),Ej=n(Eye,"A",{href:!0});var Ett=s(Ej);PSo=r(Ett,"QDQBertForTokenClassification"),Ett.forEach(t),$So=r(Eye," (QDQBert model)"),Eye.forEach(t),ISo=i(D),sv=n(D,"LI",{});var Cye=s(sv);Ede=n(Cye,"STRONG",{});var Ctt=s(Ede);qSo=r(Ctt,"rembert"),Ctt.forEach(t),NSo=r(Cye," \u2014 "),Cj=n(Cye,"A",{href:!0});var wtt=s(Cj);jSo=r(wtt,"RemBertForTokenClassification"),wtt.forEach(t),DSo=r(Cye," (RemBERT model)"),Cye.forEach(t),GSo=i(D),lv=n(D,"LI",{});var wye=s(lv);Cde=n(wye,"STRONG",{});var Att=s(Cde);OSo=r(Att,"roberta"),Att.forEach(t),VSo=r(wye," \u2014 "),wj=n(wye,"A",{href:!0});var ytt=s(wj);XSo=r(ytt,"RobertaForTokenClassification"),ytt.forEach(t),zSo=r(wye," (RoBERTa model)"),wye.forEach(t),QSo=i(D),iv=n(D,"LI",{});var Aye=s(iv);wde=n(Aye,"STRONG",{});var Ltt=s(wde);WSo=r(Ltt,"roformer"),Ltt.forEach(t),HSo=r(Aye," \u2014 "),Aj=n(Aye,"A",{href:!0});var xtt=s(Aj);USo=r(xtt,"RoFormerForTokenClassification"),xtt.forEach(t),JSo=r(Aye," (RoFormer model)"),Aye.forEach(t),YSo=i(D),dv=n(D,"LI",{});var yye=s(dv);Ade=n(yye,"STRONG",{});var ktt=s(Ade);KSo=r(ktt,"squeezebert"),ktt.forEach(t),ZSo=r(yye," \u2014 "),yj=n(yye,"A",{href:!0});var Stt=s(yj);eRo=r(Stt,"SqueezeBertForTokenClassification"),Stt.forEach(t),oRo=r(yye," (SqueezeBERT model)"),yye.forEach(t),rRo=i(D),cv=n(D,"LI",{});var Lye=s(cv);yde=n(Lye,"STRONG",{});var Rtt=s(yde);tRo=r(Rtt,"xlm"),Rtt.forEach(t),aRo=r(Lye," \u2014 "),Lj=n(Lye,"A",{href:!0});var Btt=s(Lj);nRo=r(Btt,"XLMForTokenClassification"),Btt.forEach(t),sRo=r(Lye," (XLM model)"),Lye.forEach(t),lRo=i(D),mv=n(D,"LI",{});var xye=s(mv);Lde=n(xye,"STRONG",{});var Ptt=s(Lde);iRo=r(Ptt,"xlm-roberta"),Ptt.forEach(t),dRo=r(xye," \u2014 "),xj=n(xye,"A",{href:!0});var $tt=s(xj);cRo=r($tt,"XLMRobertaForTokenClassification"),$tt.forEach(t),mRo=r(xye," (XLM-RoBERTa model)"),xye.forEach(t),fRo=i(D),fv=n(D,"LI",{});var kye=s(fv);xde=n(kye,"STRONG",{});var Itt=s(xde);gRo=r(Itt,"xlm-roberta-xl"),Itt.forEach(t),hRo=r(kye," \u2014 "),kj=n(kye,"A",{href:!0});var qtt=s(kj);uRo=r(qtt,"XLMRobertaXLForTokenClassification"),qtt.forEach(t),pRo=r(kye," (XLM-RoBERTa-XL model)"),kye.forEach(t),_Ro=i(D),gv=n(D,"LI",{});var Sye=s(gv);kde=n(Sye,"STRONG",{});var Ntt=s(kde);bRo=r(Ntt,"xlnet"),Ntt.forEach(t),FRo=r(Sye," \u2014 "),Sj=n(Sye,"A",{href:!0});var jtt=s(Sj);vRo=r(jtt,"XLNetForTokenClassification"),jtt.forEach(t),TRo=r(Sye," (XLNet model)"),Sye.forEach(t),MRo=i(D),hv=n(D,"LI",{});var Rye=s(hv);Sde=n(Rye,"STRONG",{});var Dtt=s(Sde);ERo=r(Dtt,"yoso"),Dtt.forEach(t),CRo=r(Rye," \u2014 "),Rj=n(Rye,"A",{href:!0});var Gtt=s(Rj);wRo=r(Gtt,"YosoForTokenClassification"),Gtt.forEach(t),ARo=r(Rye," (YOSO model)"),Rye.forEach(t),D.forEach(t),yRo=i(Ht),uv=n(Ht,"P",{});var Bye=s(uv);LRo=r(Bye,"The model is set in evaluation mode by default using "),Rde=n(Bye,"CODE",{});var Ott=s(Rde);xRo=r(Ott,"model.eval()"),Ott.forEach(t),kRo=r(Bye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bde=n(Bye,"CODE",{});var Vtt=s(Bde);SRo=r(Vtt,"model.train()"),Vtt.forEach(t),Bye.forEach(t),RRo=i(Ht),Pde=n(Ht,"P",{});var Xtt=s(Pde);BRo=r(Xtt,"Examples:"),Xtt.forEach(t),PRo=i(Ht),f(l6.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),kRe=i(c),Ed=n(c,"H2",{class:!0});var jPe=s(Ed);pv=n(jPe,"A",{id:!0,class:!0,href:!0});var ztt=s(pv);$de=n(ztt,"SPAN",{});var Qtt=s($de);f(i6.$$.fragment,Qtt),Qtt.forEach(t),ztt.forEach(t),$Ro=i(jPe),Ide=n(jPe,"SPAN",{});var Wtt=s(Ide);IRo=r(Wtt,"AutoModelForQuestionAnswering"),Wtt.forEach(t),jPe.forEach(t),SRe=i(c),nr=n(c,"DIV",{class:!0});var ml=s(nr);f(d6.$$.fragment,ml),qRo=i(ml),Cd=n(ml,"P",{});var TU=s(Cd);NRo=r(TU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Bj=n(TU,"A",{href:!0});var Htt=s(Bj);jRo=r(Htt,"from_pretrained()"),Htt.forEach(t),DRo=r(TU," class method or the "),Pj=n(TU,"A",{href:!0});var Utt=s(Pj);GRo=r(Utt,"from_config()"),Utt.forEach(t),ORo=r(TU,` class
method.`),TU.forEach(t),VRo=i(ml),c6=n(ml,"P",{});var DPe=s(c6);XRo=r(DPe,"This class cannot be instantiated directly using "),qde=n(DPe,"CODE",{});var Jtt=s(qde);zRo=r(Jtt,"__init__()"),Jtt.forEach(t),QRo=r(DPe," (throws an error)."),DPe.forEach(t),WRo=i(ml),Zr=n(ml,"DIV",{class:!0});var fl=s(Zr);f(m6.$$.fragment,fl),HRo=i(fl),Nde=n(fl,"P",{});var Ytt=s(Nde);URo=r(Ytt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ytt.forEach(t),JRo=i(fl),wd=n(fl,"P",{});var MU=s(wd);YRo=r(MU,`Note:
Loading a model from its configuration file does `),jde=n(MU,"STRONG",{});var Ktt=s(jde);KRo=r(Ktt,"not"),Ktt.forEach(t),ZRo=r(MU,` load the model weights. It only affects the
model\u2019s configuration. Use `),$j=n(MU,"A",{href:!0});var Ztt=s($j);eBo=r(Ztt,"from_pretrained()"),Ztt.forEach(t),oBo=r(MU," to load the model weights."),MU.forEach(t),rBo=i(fl),Dde=n(fl,"P",{});var eat=s(Dde);tBo=r(eat,"Examples:"),eat.forEach(t),aBo=i(fl),f(f6.$$.fragment,fl),fl.forEach(t),nBo=i(ml),Qe=n(ml,"DIV",{class:!0});var Ut=s(Qe);f(g6.$$.fragment,Ut),sBo=i(Ut),Gde=n(Ut,"P",{});var oat=s(Gde);lBo=r(oat,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),oat.forEach(t),iBo=i(Ut),Za=n(Ut,"P",{});var R3=s(Za);dBo=r(R3,"The model class to instantiate is selected based on the "),Ode=n(R3,"CODE",{});var rat=s(Ode);cBo=r(rat,"model_type"),rat.forEach(t),mBo=r(R3,` property of the config object (either
passed as an argument or loaded from `),Vde=n(R3,"CODE",{});var tat=s(Vde);fBo=r(tat,"pretrained_model_name_or_path"),tat.forEach(t),gBo=r(R3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xde=n(R3,"CODE",{});var aat=s(Xde);hBo=r(aat,"pretrained_model_name_or_path"),aat.forEach(t),uBo=r(R3,":"),R3.forEach(t),pBo=i(Ut),R=n(Ut,"UL",{});var P=s(R);_v=n(P,"LI",{});var Pye=s(_v);zde=n(Pye,"STRONG",{});var nat=s(zde);_Bo=r(nat,"albert"),nat.forEach(t),bBo=r(Pye," \u2014 "),Ij=n(Pye,"A",{href:!0});var sat=s(Ij);FBo=r(sat,"AlbertForQuestionAnswering"),sat.forEach(t),vBo=r(Pye," (ALBERT model)"),Pye.forEach(t),TBo=i(P),bv=n(P,"LI",{});var $ye=s(bv);Qde=n($ye,"STRONG",{});var lat=s(Qde);MBo=r(lat,"bart"),lat.forEach(t),EBo=r($ye," \u2014 "),qj=n($ye,"A",{href:!0});var iat=s(qj);CBo=r(iat,"BartForQuestionAnswering"),iat.forEach(t),wBo=r($ye," (BART model)"),$ye.forEach(t),ABo=i(P),Fv=n(P,"LI",{});var Iye=s(Fv);Wde=n(Iye,"STRONG",{});var dat=s(Wde);yBo=r(dat,"bert"),dat.forEach(t),LBo=r(Iye," \u2014 "),Nj=n(Iye,"A",{href:!0});var cat=s(Nj);xBo=r(cat,"BertForQuestionAnswering"),cat.forEach(t),kBo=r(Iye," (BERT model)"),Iye.forEach(t),SBo=i(P),vv=n(P,"LI",{});var qye=s(vv);Hde=n(qye,"STRONG",{});var mat=s(Hde);RBo=r(mat,"big_bird"),mat.forEach(t),BBo=r(qye," \u2014 "),jj=n(qye,"A",{href:!0});var fat=s(jj);PBo=r(fat,"BigBirdForQuestionAnswering"),fat.forEach(t),$Bo=r(qye," (BigBird model)"),qye.forEach(t),IBo=i(P),Tv=n(P,"LI",{});var Nye=s(Tv);Ude=n(Nye,"STRONG",{});var gat=s(Ude);qBo=r(gat,"bigbird_pegasus"),gat.forEach(t),NBo=r(Nye," \u2014 "),Dj=n(Nye,"A",{href:!0});var hat=s(Dj);jBo=r(hat,"BigBirdPegasusForQuestionAnswering"),hat.forEach(t),DBo=r(Nye," (BigBirdPegasus model)"),Nye.forEach(t),GBo=i(P),Mv=n(P,"LI",{});var jye=s(Mv);Jde=n(jye,"STRONG",{});var uat=s(Jde);OBo=r(uat,"camembert"),uat.forEach(t),VBo=r(jye," \u2014 "),Gj=n(jye,"A",{href:!0});var pat=s(Gj);XBo=r(pat,"CamembertForQuestionAnswering"),pat.forEach(t),zBo=r(jye," (CamemBERT model)"),jye.forEach(t),QBo=i(P),Ev=n(P,"LI",{});var Dye=s(Ev);Yde=n(Dye,"STRONG",{});var _at=s(Yde);WBo=r(_at,"canine"),_at.forEach(t),HBo=r(Dye," \u2014 "),Oj=n(Dye,"A",{href:!0});var bat=s(Oj);UBo=r(bat,"CanineForQuestionAnswering"),bat.forEach(t),JBo=r(Dye," (Canine model)"),Dye.forEach(t),YBo=i(P),Cv=n(P,"LI",{});var Gye=s(Cv);Kde=n(Gye,"STRONG",{});var Fat=s(Kde);KBo=r(Fat,"convbert"),Fat.forEach(t),ZBo=r(Gye," \u2014 "),Vj=n(Gye,"A",{href:!0});var vat=s(Vj);ePo=r(vat,"ConvBertForQuestionAnswering"),vat.forEach(t),oPo=r(Gye," (ConvBERT model)"),Gye.forEach(t),rPo=i(P),wv=n(P,"LI",{});var Oye=s(wv);Zde=n(Oye,"STRONG",{});var Tat=s(Zde);tPo=r(Tat,"data2vec-text"),Tat.forEach(t),aPo=r(Oye," \u2014 "),Xj=n(Oye,"A",{href:!0});var Mat=s(Xj);nPo=r(Mat,"Data2VecTextForQuestionAnswering"),Mat.forEach(t),sPo=r(Oye," (Data2VecText model)"),Oye.forEach(t),lPo=i(P),Av=n(P,"LI",{});var Vye=s(Av);ece=n(Vye,"STRONG",{});var Eat=s(ece);iPo=r(Eat,"deberta"),Eat.forEach(t),dPo=r(Vye," \u2014 "),zj=n(Vye,"A",{href:!0});var Cat=s(zj);cPo=r(Cat,"DebertaForQuestionAnswering"),Cat.forEach(t),mPo=r(Vye," (DeBERTa model)"),Vye.forEach(t),fPo=i(P),yv=n(P,"LI",{});var Xye=s(yv);oce=n(Xye,"STRONG",{});var wat=s(oce);gPo=r(wat,"deberta-v2"),wat.forEach(t),hPo=r(Xye," \u2014 "),Qj=n(Xye,"A",{href:!0});var Aat=s(Qj);uPo=r(Aat,"DebertaV2ForQuestionAnswering"),Aat.forEach(t),pPo=r(Xye," (DeBERTa-v2 model)"),Xye.forEach(t),_Po=i(P),Lv=n(P,"LI",{});var zye=s(Lv);rce=n(zye,"STRONG",{});var yat=s(rce);bPo=r(yat,"distilbert"),yat.forEach(t),FPo=r(zye," \u2014 "),Wj=n(zye,"A",{href:!0});var Lat=s(Wj);vPo=r(Lat,"DistilBertForQuestionAnswering"),Lat.forEach(t),TPo=r(zye," (DistilBERT model)"),zye.forEach(t),MPo=i(P),xv=n(P,"LI",{});var Qye=s(xv);tce=n(Qye,"STRONG",{});var xat=s(tce);EPo=r(xat,"electra"),xat.forEach(t),CPo=r(Qye," \u2014 "),Hj=n(Qye,"A",{href:!0});var kat=s(Hj);wPo=r(kat,"ElectraForQuestionAnswering"),kat.forEach(t),APo=r(Qye," (ELECTRA model)"),Qye.forEach(t),yPo=i(P),kv=n(P,"LI",{});var Wye=s(kv);ace=n(Wye,"STRONG",{});var Sat=s(ace);LPo=r(Sat,"flaubert"),Sat.forEach(t),xPo=r(Wye," \u2014 "),Uj=n(Wye,"A",{href:!0});var Rat=s(Uj);kPo=r(Rat,"FlaubertForQuestionAnsweringSimple"),Rat.forEach(t),SPo=r(Wye," (FlauBERT model)"),Wye.forEach(t),RPo=i(P),Sv=n(P,"LI",{});var Hye=s(Sv);nce=n(Hye,"STRONG",{});var Bat=s(nce);BPo=r(Bat,"fnet"),Bat.forEach(t),PPo=r(Hye," \u2014 "),Jj=n(Hye,"A",{href:!0});var Pat=s(Jj);$Po=r(Pat,"FNetForQuestionAnswering"),Pat.forEach(t),IPo=r(Hye," (FNet model)"),Hye.forEach(t),qPo=i(P),Rv=n(P,"LI",{});var Uye=s(Rv);sce=n(Uye,"STRONG",{});var $at=s(sce);NPo=r($at,"funnel"),$at.forEach(t),jPo=r(Uye," \u2014 "),Yj=n(Uye,"A",{href:!0});var Iat=s(Yj);DPo=r(Iat,"FunnelForQuestionAnswering"),Iat.forEach(t),GPo=r(Uye," (Funnel Transformer model)"),Uye.forEach(t),OPo=i(P),Bv=n(P,"LI",{});var Jye=s(Bv);lce=n(Jye,"STRONG",{});var qat=s(lce);VPo=r(qat,"gptj"),qat.forEach(t),XPo=r(Jye," \u2014 "),Kj=n(Jye,"A",{href:!0});var Nat=s(Kj);zPo=r(Nat,"GPTJForQuestionAnswering"),Nat.forEach(t),QPo=r(Jye," (GPT-J model)"),Jye.forEach(t),WPo=i(P),Pv=n(P,"LI",{});var Yye=s(Pv);ice=n(Yye,"STRONG",{});var jat=s(ice);HPo=r(jat,"ibert"),jat.forEach(t),UPo=r(Yye," \u2014 "),Zj=n(Yye,"A",{href:!0});var Dat=s(Zj);JPo=r(Dat,"IBertForQuestionAnswering"),Dat.forEach(t),YPo=r(Yye," (I-BERT model)"),Yye.forEach(t),KPo=i(P),$v=n(P,"LI",{});var Kye=s($v);dce=n(Kye,"STRONG",{});var Gat=s(dce);ZPo=r(Gat,"layoutlmv2"),Gat.forEach(t),e$o=r(Kye," \u2014 "),eD=n(Kye,"A",{href:!0});var Oat=s(eD);o$o=r(Oat,"LayoutLMv2ForQuestionAnswering"),Oat.forEach(t),r$o=r(Kye," (LayoutLMv2 model)"),Kye.forEach(t),t$o=i(P),Iv=n(P,"LI",{});var Zye=s(Iv);cce=n(Zye,"STRONG",{});var Vat=s(cce);a$o=r(Vat,"led"),Vat.forEach(t),n$o=r(Zye," \u2014 "),oD=n(Zye,"A",{href:!0});var Xat=s(oD);s$o=r(Xat,"LEDForQuestionAnswering"),Xat.forEach(t),l$o=r(Zye," (LED model)"),Zye.forEach(t),i$o=i(P),qv=n(P,"LI",{});var eLe=s(qv);mce=n(eLe,"STRONG",{});var zat=s(mce);d$o=r(zat,"longformer"),zat.forEach(t),c$o=r(eLe," \u2014 "),rD=n(eLe,"A",{href:!0});var Qat=s(rD);m$o=r(Qat,"LongformerForQuestionAnswering"),Qat.forEach(t),f$o=r(eLe," (Longformer model)"),eLe.forEach(t),g$o=i(P),Nv=n(P,"LI",{});var oLe=s(Nv);fce=n(oLe,"STRONG",{});var Wat=s(fce);h$o=r(Wat,"lxmert"),Wat.forEach(t),u$o=r(oLe," \u2014 "),tD=n(oLe,"A",{href:!0});var Hat=s(tD);p$o=r(Hat,"LxmertForQuestionAnswering"),Hat.forEach(t),_$o=r(oLe," (LXMERT model)"),oLe.forEach(t),b$o=i(P),jv=n(P,"LI",{});var rLe=s(jv);gce=n(rLe,"STRONG",{});var Uat=s(gce);F$o=r(Uat,"mbart"),Uat.forEach(t),v$o=r(rLe," \u2014 "),aD=n(rLe,"A",{href:!0});var Jat=s(aD);T$o=r(Jat,"MBartForQuestionAnswering"),Jat.forEach(t),M$o=r(rLe," (mBART model)"),rLe.forEach(t),E$o=i(P),Dv=n(P,"LI",{});var tLe=s(Dv);hce=n(tLe,"STRONG",{});var Yat=s(hce);C$o=r(Yat,"megatron-bert"),Yat.forEach(t),w$o=r(tLe," \u2014 "),nD=n(tLe,"A",{href:!0});var Kat=s(nD);A$o=r(Kat,"MegatronBertForQuestionAnswering"),Kat.forEach(t),y$o=r(tLe," (MegatronBert model)"),tLe.forEach(t),L$o=i(P),Gv=n(P,"LI",{});var aLe=s(Gv);uce=n(aLe,"STRONG",{});var Zat=s(uce);x$o=r(Zat,"mobilebert"),Zat.forEach(t),k$o=r(aLe," \u2014 "),sD=n(aLe,"A",{href:!0});var ent=s(sD);S$o=r(ent,"MobileBertForQuestionAnswering"),ent.forEach(t),R$o=r(aLe," (MobileBERT model)"),aLe.forEach(t),B$o=i(P),Ov=n(P,"LI",{});var nLe=s(Ov);pce=n(nLe,"STRONG",{});var ont=s(pce);P$o=r(ont,"mpnet"),ont.forEach(t),$$o=r(nLe," \u2014 "),lD=n(nLe,"A",{href:!0});var rnt=s(lD);I$o=r(rnt,"MPNetForQuestionAnswering"),rnt.forEach(t),q$o=r(nLe," (MPNet model)"),nLe.forEach(t),N$o=i(P),Vv=n(P,"LI",{});var sLe=s(Vv);_ce=n(sLe,"STRONG",{});var tnt=s(_ce);j$o=r(tnt,"nystromformer"),tnt.forEach(t),D$o=r(sLe," \u2014 "),iD=n(sLe,"A",{href:!0});var ant=s(iD);G$o=r(ant,"NystromformerForQuestionAnswering"),ant.forEach(t),O$o=r(sLe," (Nystromformer model)"),sLe.forEach(t),V$o=i(P),Xv=n(P,"LI",{});var lLe=s(Xv);bce=n(lLe,"STRONG",{});var nnt=s(bce);X$o=r(nnt,"qdqbert"),nnt.forEach(t),z$o=r(lLe," \u2014 "),dD=n(lLe,"A",{href:!0});var snt=s(dD);Q$o=r(snt,"QDQBertForQuestionAnswering"),snt.forEach(t),W$o=r(lLe," (QDQBert model)"),lLe.forEach(t),H$o=i(P),zv=n(P,"LI",{});var iLe=s(zv);Fce=n(iLe,"STRONG",{});var lnt=s(Fce);U$o=r(lnt,"reformer"),lnt.forEach(t),J$o=r(iLe," \u2014 "),cD=n(iLe,"A",{href:!0});var int=s(cD);Y$o=r(int,"ReformerForQuestionAnswering"),int.forEach(t),K$o=r(iLe," (Reformer model)"),iLe.forEach(t),Z$o=i(P),Qv=n(P,"LI",{});var dLe=s(Qv);vce=n(dLe,"STRONG",{});var dnt=s(vce);eIo=r(dnt,"rembert"),dnt.forEach(t),oIo=r(dLe," \u2014 "),mD=n(dLe,"A",{href:!0});var cnt=s(mD);rIo=r(cnt,"RemBertForQuestionAnswering"),cnt.forEach(t),tIo=r(dLe," (RemBERT model)"),dLe.forEach(t),aIo=i(P),Wv=n(P,"LI",{});var cLe=s(Wv);Tce=n(cLe,"STRONG",{});var mnt=s(Tce);nIo=r(mnt,"roberta"),mnt.forEach(t),sIo=r(cLe," \u2014 "),fD=n(cLe,"A",{href:!0});var fnt=s(fD);lIo=r(fnt,"RobertaForQuestionAnswering"),fnt.forEach(t),iIo=r(cLe," (RoBERTa model)"),cLe.forEach(t),dIo=i(P),Hv=n(P,"LI",{});var mLe=s(Hv);Mce=n(mLe,"STRONG",{});var gnt=s(Mce);cIo=r(gnt,"roformer"),gnt.forEach(t),mIo=r(mLe," \u2014 "),gD=n(mLe,"A",{href:!0});var hnt=s(gD);fIo=r(hnt,"RoFormerForQuestionAnswering"),hnt.forEach(t),gIo=r(mLe," (RoFormer model)"),mLe.forEach(t),hIo=i(P),Uv=n(P,"LI",{});var fLe=s(Uv);Ece=n(fLe,"STRONG",{});var unt=s(Ece);uIo=r(unt,"splinter"),unt.forEach(t),pIo=r(fLe," \u2014 "),hD=n(fLe,"A",{href:!0});var pnt=s(hD);_Io=r(pnt,"SplinterForQuestionAnswering"),pnt.forEach(t),bIo=r(fLe," (Splinter model)"),fLe.forEach(t),FIo=i(P),Jv=n(P,"LI",{});var gLe=s(Jv);Cce=n(gLe,"STRONG",{});var _nt=s(Cce);vIo=r(_nt,"squeezebert"),_nt.forEach(t),TIo=r(gLe," \u2014 "),uD=n(gLe,"A",{href:!0});var bnt=s(uD);MIo=r(bnt,"SqueezeBertForQuestionAnswering"),bnt.forEach(t),EIo=r(gLe," (SqueezeBERT model)"),gLe.forEach(t),CIo=i(P),Yv=n(P,"LI",{});var hLe=s(Yv);wce=n(hLe,"STRONG",{});var Fnt=s(wce);wIo=r(Fnt,"xlm"),Fnt.forEach(t),AIo=r(hLe," \u2014 "),pD=n(hLe,"A",{href:!0});var vnt=s(pD);yIo=r(vnt,"XLMForQuestionAnsweringSimple"),vnt.forEach(t),LIo=r(hLe," (XLM model)"),hLe.forEach(t),xIo=i(P),Kv=n(P,"LI",{});var uLe=s(Kv);Ace=n(uLe,"STRONG",{});var Tnt=s(Ace);kIo=r(Tnt,"xlm-roberta"),Tnt.forEach(t),SIo=r(uLe," \u2014 "),_D=n(uLe,"A",{href:!0});var Mnt=s(_D);RIo=r(Mnt,"XLMRobertaForQuestionAnswering"),Mnt.forEach(t),BIo=r(uLe," (XLM-RoBERTa model)"),uLe.forEach(t),PIo=i(P),Zv=n(P,"LI",{});var pLe=s(Zv);yce=n(pLe,"STRONG",{});var Ent=s(yce);$Io=r(Ent,"xlm-roberta-xl"),Ent.forEach(t),IIo=r(pLe," \u2014 "),bD=n(pLe,"A",{href:!0});var Cnt=s(bD);qIo=r(Cnt,"XLMRobertaXLForQuestionAnswering"),Cnt.forEach(t),NIo=r(pLe," (XLM-RoBERTa-XL model)"),pLe.forEach(t),jIo=i(P),eT=n(P,"LI",{});var _Le=s(eT);Lce=n(_Le,"STRONG",{});var wnt=s(Lce);DIo=r(wnt,"xlnet"),wnt.forEach(t),GIo=r(_Le," \u2014 "),FD=n(_Le,"A",{href:!0});var Ant=s(FD);OIo=r(Ant,"XLNetForQuestionAnsweringSimple"),Ant.forEach(t),VIo=r(_Le," (XLNet model)"),_Le.forEach(t),XIo=i(P),oT=n(P,"LI",{});var bLe=s(oT);xce=n(bLe,"STRONG",{});var ynt=s(xce);zIo=r(ynt,"yoso"),ynt.forEach(t),QIo=r(bLe," \u2014 "),vD=n(bLe,"A",{href:!0});var Lnt=s(vD);WIo=r(Lnt,"YosoForQuestionAnswering"),Lnt.forEach(t),HIo=r(bLe," (YOSO model)"),bLe.forEach(t),P.forEach(t),UIo=i(Ut),rT=n(Ut,"P",{});var FLe=s(rT);JIo=r(FLe,"The model is set in evaluation mode by default using "),kce=n(FLe,"CODE",{});var xnt=s(kce);YIo=r(xnt,"model.eval()"),xnt.forEach(t),KIo=r(FLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sce=n(FLe,"CODE",{});var knt=s(Sce);ZIo=r(knt,"model.train()"),knt.forEach(t),FLe.forEach(t),eqo=i(Ut),Rce=n(Ut,"P",{});var Snt=s(Rce);oqo=r(Snt,"Examples:"),Snt.forEach(t),rqo=i(Ut),f(h6.$$.fragment,Ut),Ut.forEach(t),ml.forEach(t),RRe=i(c),Ad=n(c,"H2",{class:!0});var GPe=s(Ad);tT=n(GPe,"A",{id:!0,class:!0,href:!0});var Rnt=s(tT);Bce=n(Rnt,"SPAN",{});var Bnt=s(Bce);f(u6.$$.fragment,Bnt),Bnt.forEach(t),Rnt.forEach(t),tqo=i(GPe),Pce=n(GPe,"SPAN",{});var Pnt=s(Pce);aqo=r(Pnt,"AutoModelForTableQuestionAnswering"),Pnt.forEach(t),GPe.forEach(t),BRe=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);f(p6.$$.fragment,gl),nqo=i(gl),yd=n(gl,"P",{});var EU=s(yd);sqo=r(EU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),TD=n(EU,"A",{href:!0});var $nt=s(TD);lqo=r($nt,"from_pretrained()"),$nt.forEach(t),iqo=r(EU," class method or the "),MD=n(EU,"A",{href:!0});var Int=s(MD);dqo=r(Int,"from_config()"),Int.forEach(t),cqo=r(EU,` class
method.`),EU.forEach(t),mqo=i(gl),_6=n(gl,"P",{});var OPe=s(_6);fqo=r(OPe,"This class cannot be instantiated directly using "),$ce=n(OPe,"CODE",{});var qnt=s($ce);gqo=r(qnt,"__init__()"),qnt.forEach(t),hqo=r(OPe," (throws an error)."),OPe.forEach(t),uqo=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);f(b6.$$.fragment,hl),pqo=i(hl),Ice=n(hl,"P",{});var Nnt=s(Ice);_qo=r(Nnt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Nnt.forEach(t),bqo=i(hl),Ld=n(hl,"P",{});var CU=s(Ld);Fqo=r(CU,`Note:
Loading a model from its configuration file does `),qce=n(CU,"STRONG",{});var jnt=s(qce);vqo=r(jnt,"not"),jnt.forEach(t),Tqo=r(CU,` load the model weights. It only affects the
model\u2019s configuration. Use `),ED=n(CU,"A",{href:!0});var Dnt=s(ED);Mqo=r(Dnt,"from_pretrained()"),Dnt.forEach(t),Eqo=r(CU," to load the model weights."),CU.forEach(t),Cqo=i(hl),Nce=n(hl,"P",{});var Gnt=s(Nce);wqo=r(Gnt,"Examples:"),Gnt.forEach(t),Aqo=i(hl),f(F6.$$.fragment,hl),hl.forEach(t),yqo=i(gl),We=n(gl,"DIV",{class:!0});var Jt=s(We);f(v6.$$.fragment,Jt),Lqo=i(Jt),jce=n(Jt,"P",{});var Ont=s(jce);xqo=r(Ont,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Ont.forEach(t),kqo=i(Jt),en=n(Jt,"P",{});var B3=s(en);Sqo=r(B3,"The model class to instantiate is selected based on the "),Dce=n(B3,"CODE",{});var Vnt=s(Dce);Rqo=r(Vnt,"model_type"),Vnt.forEach(t),Bqo=r(B3,` property of the config object (either
passed as an argument or loaded from `),Gce=n(B3,"CODE",{});var Xnt=s(Gce);Pqo=r(Xnt,"pretrained_model_name_or_path"),Xnt.forEach(t),$qo=r(B3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oce=n(B3,"CODE",{});var znt=s(Oce);Iqo=r(znt,"pretrained_model_name_or_path"),znt.forEach(t),qqo=r(B3,":"),B3.forEach(t),Nqo=i(Jt),Vce=n(Jt,"UL",{});var Qnt=s(Vce);aT=n(Qnt,"LI",{});var vLe=s(aT);Xce=n(vLe,"STRONG",{});var Wnt=s(Xce);jqo=r(Wnt,"tapas"),Wnt.forEach(t),Dqo=r(vLe," \u2014 "),CD=n(vLe,"A",{href:!0});var Hnt=s(CD);Gqo=r(Hnt,"TapasForQuestionAnswering"),Hnt.forEach(t),Oqo=r(vLe," (TAPAS model)"),vLe.forEach(t),Qnt.forEach(t),Vqo=i(Jt),nT=n(Jt,"P",{});var TLe=s(nT);Xqo=r(TLe,"The model is set in evaluation mode by default using "),zce=n(TLe,"CODE",{});var Unt=s(zce);zqo=r(Unt,"model.eval()"),Unt.forEach(t),Qqo=r(TLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qce=n(TLe,"CODE",{});var Jnt=s(Qce);Wqo=r(Jnt,"model.train()"),Jnt.forEach(t),TLe.forEach(t),Hqo=i(Jt),Wce=n(Jt,"P",{});var Ynt=s(Wce);Uqo=r(Ynt,"Examples:"),Ynt.forEach(t),Jqo=i(Jt),f(T6.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),PRe=i(c),xd=n(c,"H2",{class:!0});var VPe=s(xd);sT=n(VPe,"A",{id:!0,class:!0,href:!0});var Knt=s(sT);Hce=n(Knt,"SPAN",{});var Znt=s(Hce);f(M6.$$.fragment,Znt),Znt.forEach(t),Knt.forEach(t),Yqo=i(VPe),Uce=n(VPe,"SPAN",{});var est=s(Uce);Kqo=r(est,"AutoModelForImageClassification"),est.forEach(t),VPe.forEach(t),$Re=i(c),lr=n(c,"DIV",{class:!0});var ul=s(lr);f(E6.$$.fragment,ul),Zqo=i(ul),kd=n(ul,"P",{});var wU=s(kd);eNo=r(wU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wD=n(wU,"A",{href:!0});var ost=s(wD);oNo=r(ost,"from_pretrained()"),ost.forEach(t),rNo=r(wU," class method or the "),AD=n(wU,"A",{href:!0});var rst=s(AD);tNo=r(rst,"from_config()"),rst.forEach(t),aNo=r(wU,` class
method.`),wU.forEach(t),nNo=i(ul),C6=n(ul,"P",{});var XPe=s(C6);sNo=r(XPe,"This class cannot be instantiated directly using "),Jce=n(XPe,"CODE",{});var tst=s(Jce);lNo=r(tst,"__init__()"),tst.forEach(t),iNo=r(XPe," (throws an error)."),XPe.forEach(t),dNo=i(ul),ot=n(ul,"DIV",{class:!0});var pl=s(ot);f(w6.$$.fragment,pl),cNo=i(pl),Yce=n(pl,"P",{});var ast=s(Yce);mNo=r(ast,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ast.forEach(t),fNo=i(pl),Sd=n(pl,"P",{});var AU=s(Sd);gNo=r(AU,`Note:
Loading a model from its configuration file does `),Kce=n(AU,"STRONG",{});var nst=s(Kce);hNo=r(nst,"not"),nst.forEach(t),uNo=r(AU,` load the model weights. It only affects the
model\u2019s configuration. Use `),yD=n(AU,"A",{href:!0});var sst=s(yD);pNo=r(sst,"from_pretrained()"),sst.forEach(t),_No=r(AU," to load the model weights."),AU.forEach(t),bNo=i(pl),Zce=n(pl,"P",{});var lst=s(Zce);FNo=r(lst,"Examples:"),lst.forEach(t),vNo=i(pl),f(A6.$$.fragment,pl),pl.forEach(t),TNo=i(ul),He=n(ul,"DIV",{class:!0});var Yt=s(He);f(y6.$$.fragment,Yt),MNo=i(Yt),eme=n(Yt,"P",{});var ist=s(eme);ENo=r(ist,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ist.forEach(t),CNo=i(Yt),on=n(Yt,"P",{});var P3=s(on);wNo=r(P3,"The model class to instantiate is selected based on the "),ome=n(P3,"CODE",{});var dst=s(ome);ANo=r(dst,"model_type"),dst.forEach(t),yNo=r(P3,` property of the config object (either
passed as an argument or loaded from `),rme=n(P3,"CODE",{});var cst=s(rme);LNo=r(cst,"pretrained_model_name_or_path"),cst.forEach(t),xNo=r(P3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tme=n(P3,"CODE",{});var mst=s(tme);kNo=r(mst,"pretrained_model_name_or_path"),mst.forEach(t),SNo=r(P3,":"),P3.forEach(t),RNo=i(Yt),ce=n(Yt,"UL",{});var he=s(ce);lT=n(he,"LI",{});var MLe=s(lT);ame=n(MLe,"STRONG",{});var fst=s(ame);BNo=r(fst,"beit"),fst.forEach(t),PNo=r(MLe," \u2014 "),LD=n(MLe,"A",{href:!0});var gst=s(LD);$No=r(gst,"BeitForImageClassification"),gst.forEach(t),INo=r(MLe," (BEiT model)"),MLe.forEach(t),qNo=i(he),iT=n(he,"LI",{});var ELe=s(iT);nme=n(ELe,"STRONG",{});var hst=s(nme);NNo=r(hst,"convnext"),hst.forEach(t),jNo=r(ELe," \u2014 "),xD=n(ELe,"A",{href:!0});var ust=s(xD);DNo=r(ust,"ConvNextForImageClassification"),ust.forEach(t),GNo=r(ELe," (ConvNext model)"),ELe.forEach(t),ONo=i(he),Ds=n(he,"LI",{});var d9=s(Ds);sme=n(d9,"STRONG",{});var pst=s(sme);VNo=r(pst,"deit"),pst.forEach(t),XNo=r(d9," \u2014 "),kD=n(d9,"A",{href:!0});var _st=s(kD);zNo=r(_st,"DeiTForImageClassification"),_st.forEach(t),QNo=r(d9," or "),SD=n(d9,"A",{href:!0});var bst=s(SD);WNo=r(bst,"DeiTForImageClassificationWithTeacher"),bst.forEach(t),HNo=r(d9," (DeiT model)"),d9.forEach(t),UNo=i(he),dT=n(he,"LI",{});var CLe=s(dT);lme=n(CLe,"STRONG",{});var Fst=s(lme);JNo=r(Fst,"imagegpt"),Fst.forEach(t),YNo=r(CLe," \u2014 "),RD=n(CLe,"A",{href:!0});var vst=s(RD);KNo=r(vst,"ImageGPTForImageClassification"),vst.forEach(t),ZNo=r(CLe," (ImageGPT model)"),CLe.forEach(t),ejo=i(he),fa=n(he,"LI",{});var Pm=s(fa);ime=n(Pm,"STRONG",{});var Tst=s(ime);ojo=r(Tst,"perceiver"),Tst.forEach(t),rjo=r(Pm," \u2014 "),BD=n(Pm,"A",{href:!0});var Mst=s(BD);tjo=r(Mst,"PerceiverForImageClassificationLearned"),Mst.forEach(t),ajo=r(Pm," or "),PD=n(Pm,"A",{href:!0});var Est=s(PD);njo=r(Est,"PerceiverForImageClassificationFourier"),Est.forEach(t),sjo=r(Pm," or "),$D=n(Pm,"A",{href:!0});var Cst=s($D);ljo=r(Cst,"PerceiverForImageClassificationConvProcessing"),Cst.forEach(t),ijo=r(Pm," (Perceiver model)"),Pm.forEach(t),djo=i(he),cT=n(he,"LI",{});var wLe=s(cT);dme=n(wLe,"STRONG",{});var wst=s(dme);cjo=r(wst,"poolformer"),wst.forEach(t),mjo=r(wLe," \u2014 "),ID=n(wLe,"A",{href:!0});var Ast=s(ID);fjo=r(Ast,"PoolFormerForImageClassification"),Ast.forEach(t),gjo=r(wLe," (PoolFormer model)"),wLe.forEach(t),hjo=i(he),mT=n(he,"LI",{});var ALe=s(mT);cme=n(ALe,"STRONG",{});var yst=s(cme);ujo=r(yst,"regnet"),yst.forEach(t),pjo=r(ALe," \u2014 "),qD=n(ALe,"A",{href:!0});var Lst=s(qD);_jo=r(Lst,"RegNetForImageClassification"),Lst.forEach(t),bjo=r(ALe," (RegNet model)"),ALe.forEach(t),Fjo=i(he),fT=n(he,"LI",{});var yLe=s(fT);mme=n(yLe,"STRONG",{});var xst=s(mme);vjo=r(xst,"resnet"),xst.forEach(t),Tjo=r(yLe," \u2014 "),ND=n(yLe,"A",{href:!0});var kst=s(ND);Mjo=r(kst,"ResNetForImageClassification"),kst.forEach(t),Ejo=r(yLe," (ResNet model)"),yLe.forEach(t),Cjo=i(he),gT=n(he,"LI",{});var LLe=s(gT);fme=n(LLe,"STRONG",{});var Sst=s(fme);wjo=r(Sst,"segformer"),Sst.forEach(t),Ajo=r(LLe," \u2014 "),jD=n(LLe,"A",{href:!0});var Rst=s(jD);yjo=r(Rst,"SegformerForImageClassification"),Rst.forEach(t),Ljo=r(LLe," (SegFormer model)"),LLe.forEach(t),xjo=i(he),hT=n(he,"LI",{});var xLe=s(hT);gme=n(xLe,"STRONG",{});var Bst=s(gme);kjo=r(Bst,"swin"),Bst.forEach(t),Sjo=r(xLe," \u2014 "),DD=n(xLe,"A",{href:!0});var Pst=s(DD);Rjo=r(Pst,"SwinForImageClassification"),Pst.forEach(t),Bjo=r(xLe," (Swin model)"),xLe.forEach(t),Pjo=i(he),uT=n(he,"LI",{});var kLe=s(uT);hme=n(kLe,"STRONG",{});var $st=s(hme);$jo=r($st,"van"),$st.forEach(t),Ijo=r(kLe," \u2014 "),GD=n(kLe,"A",{href:!0});var Ist=s(GD);qjo=r(Ist,"VanForImageClassification"),Ist.forEach(t),Njo=r(kLe," (VAN model)"),kLe.forEach(t),jjo=i(he),pT=n(he,"LI",{});var SLe=s(pT);ume=n(SLe,"STRONG",{});var qst=s(ume);Djo=r(qst,"vit"),qst.forEach(t),Gjo=r(SLe," \u2014 "),OD=n(SLe,"A",{href:!0});var Nst=s(OD);Ojo=r(Nst,"ViTForImageClassification"),Nst.forEach(t),Vjo=r(SLe," (ViT model)"),SLe.forEach(t),he.forEach(t),Xjo=i(Yt),_T=n(Yt,"P",{});var RLe=s(_T);zjo=r(RLe,"The model is set in evaluation mode by default using "),pme=n(RLe,"CODE",{});var jst=s(pme);Qjo=r(jst,"model.eval()"),jst.forEach(t),Wjo=r(RLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_me=n(RLe,"CODE",{});var Dst=s(_me);Hjo=r(Dst,"model.train()"),Dst.forEach(t),RLe.forEach(t),Ujo=i(Yt),bme=n(Yt,"P",{});var Gst=s(bme);Jjo=r(Gst,"Examples:"),Gst.forEach(t),Yjo=i(Yt),f(L6.$$.fragment,Yt),Yt.forEach(t),ul.forEach(t),IRe=i(c),Rd=n(c,"H2",{class:!0});var zPe=s(Rd);bT=n(zPe,"A",{id:!0,class:!0,href:!0});var Ost=s(bT);Fme=n(Ost,"SPAN",{});var Vst=s(Fme);f(x6.$$.fragment,Vst),Vst.forEach(t),Ost.forEach(t),Kjo=i(zPe),vme=n(zPe,"SPAN",{});var Xst=s(vme);Zjo=r(Xst,"AutoModelForVision2Seq"),Xst.forEach(t),zPe.forEach(t),qRe=i(c),ir=n(c,"DIV",{class:!0});var _l=s(ir);f(k6.$$.fragment,_l),eDo=i(_l),Bd=n(_l,"P",{});var yU=s(Bd);oDo=r(yU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),VD=n(yU,"A",{href:!0});var zst=s(VD);rDo=r(zst,"from_pretrained()"),zst.forEach(t),tDo=r(yU," class method or the "),XD=n(yU,"A",{href:!0});var Qst=s(XD);aDo=r(Qst,"from_config()"),Qst.forEach(t),nDo=r(yU,` class
method.`),yU.forEach(t),sDo=i(_l),S6=n(_l,"P",{});var QPe=s(S6);lDo=r(QPe,"This class cannot be instantiated directly using "),Tme=n(QPe,"CODE",{});var Wst=s(Tme);iDo=r(Wst,"__init__()"),Wst.forEach(t),dDo=r(QPe," (throws an error)."),QPe.forEach(t),cDo=i(_l),rt=n(_l,"DIV",{class:!0});var bl=s(rt);f(R6.$$.fragment,bl),mDo=i(bl),Mme=n(bl,"P",{});var Hst=s(Mme);fDo=r(Hst,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Hst.forEach(t),gDo=i(bl),Pd=n(bl,"P",{});var LU=s(Pd);hDo=r(LU,`Note:
Loading a model from its configuration file does `),Eme=n(LU,"STRONG",{});var Ust=s(Eme);uDo=r(Ust,"not"),Ust.forEach(t),pDo=r(LU,` load the model weights. It only affects the
model\u2019s configuration. Use `),zD=n(LU,"A",{href:!0});var Jst=s(zD);_Do=r(Jst,"from_pretrained()"),Jst.forEach(t),bDo=r(LU," to load the model weights."),LU.forEach(t),FDo=i(bl),Cme=n(bl,"P",{});var Yst=s(Cme);vDo=r(Yst,"Examples:"),Yst.forEach(t),TDo=i(bl),f(B6.$$.fragment,bl),bl.forEach(t),MDo=i(_l),Ue=n(_l,"DIV",{class:!0});var Kt=s(Ue);f(P6.$$.fragment,Kt),EDo=i(Kt),wme=n(Kt,"P",{});var Kst=s(wme);CDo=r(Kst,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Kst.forEach(t),wDo=i(Kt),rn=n(Kt,"P",{});var $3=s(rn);ADo=r($3,"The model class to instantiate is selected based on the "),Ame=n($3,"CODE",{});var Zst=s(Ame);yDo=r(Zst,"model_type"),Zst.forEach(t),LDo=r($3,` property of the config object (either
passed as an argument or loaded from `),yme=n($3,"CODE",{});var elt=s(yme);xDo=r(elt,"pretrained_model_name_or_path"),elt.forEach(t),kDo=r($3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lme=n($3,"CODE",{});var olt=s(Lme);SDo=r(olt,"pretrained_model_name_or_path"),olt.forEach(t),RDo=r($3,":"),$3.forEach(t),BDo=i(Kt),xme=n(Kt,"UL",{});var rlt=s(xme);FT=n(rlt,"LI",{});var BLe=s(FT);kme=n(BLe,"STRONG",{});var tlt=s(kme);PDo=r(tlt,"vision-encoder-decoder"),tlt.forEach(t),$Do=r(BLe," \u2014 "),QD=n(BLe,"A",{href:!0});var alt=s(QD);IDo=r(alt,"VisionEncoderDecoderModel"),alt.forEach(t),qDo=r(BLe," (Vision Encoder decoder model)"),BLe.forEach(t),rlt.forEach(t),NDo=i(Kt),vT=n(Kt,"P",{});var PLe=s(vT);jDo=r(PLe,"The model is set in evaluation mode by default using "),Sme=n(PLe,"CODE",{});var nlt=s(Sme);DDo=r(nlt,"model.eval()"),nlt.forEach(t),GDo=r(PLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rme=n(PLe,"CODE",{});var slt=s(Rme);ODo=r(slt,"model.train()"),slt.forEach(t),PLe.forEach(t),VDo=i(Kt),Bme=n(Kt,"P",{});var llt=s(Bme);XDo=r(llt,"Examples:"),llt.forEach(t),zDo=i(Kt),f($6.$$.fragment,Kt),Kt.forEach(t),_l.forEach(t),NRe=i(c),$d=n(c,"H2",{class:!0});var WPe=s($d);TT=n(WPe,"A",{id:!0,class:!0,href:!0});var ilt=s(TT);Pme=n(ilt,"SPAN",{});var dlt=s(Pme);f(I6.$$.fragment,dlt),dlt.forEach(t),ilt.forEach(t),QDo=i(WPe),$me=n(WPe,"SPAN",{});var clt=s($me);WDo=r(clt,"AutoModelForAudioClassification"),clt.forEach(t),WPe.forEach(t),jRe=i(c),dr=n(c,"DIV",{class:!0});var Fl=s(dr);f(q6.$$.fragment,Fl),HDo=i(Fl),Id=n(Fl,"P",{});var xU=s(Id);UDo=r(xU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),WD=n(xU,"A",{href:!0});var mlt=s(WD);JDo=r(mlt,"from_pretrained()"),mlt.forEach(t),YDo=r(xU," class method or the "),HD=n(xU,"A",{href:!0});var flt=s(HD);KDo=r(flt,"from_config()"),flt.forEach(t),ZDo=r(xU,` class
method.`),xU.forEach(t),eGo=i(Fl),N6=n(Fl,"P",{});var HPe=s(N6);oGo=r(HPe,"This class cannot be instantiated directly using "),Ime=n(HPe,"CODE",{});var glt=s(Ime);rGo=r(glt,"__init__()"),glt.forEach(t),tGo=r(HPe," (throws an error)."),HPe.forEach(t),aGo=i(Fl),tt=n(Fl,"DIV",{class:!0});var vl=s(tt);f(j6.$$.fragment,vl),nGo=i(vl),qme=n(vl,"P",{});var hlt=s(qme);sGo=r(hlt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),hlt.forEach(t),lGo=i(vl),qd=n(vl,"P",{});var kU=s(qd);iGo=r(kU,`Note:
Loading a model from its configuration file does `),Nme=n(kU,"STRONG",{});var ult=s(Nme);dGo=r(ult,"not"),ult.forEach(t),cGo=r(kU,` load the model weights. It only affects the
model\u2019s configuration. Use `),UD=n(kU,"A",{href:!0});var plt=s(UD);mGo=r(plt,"from_pretrained()"),plt.forEach(t),fGo=r(kU," to load the model weights."),kU.forEach(t),gGo=i(vl),jme=n(vl,"P",{});var _lt=s(jme);hGo=r(_lt,"Examples:"),_lt.forEach(t),uGo=i(vl),f(D6.$$.fragment,vl),vl.forEach(t),pGo=i(Fl),Je=n(Fl,"DIV",{class:!0});var Zt=s(Je);f(G6.$$.fragment,Zt),_Go=i(Zt),Dme=n(Zt,"P",{});var blt=s(Dme);bGo=r(blt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),blt.forEach(t),FGo=i(Zt),tn=n(Zt,"P",{});var I3=s(tn);vGo=r(I3,"The model class to instantiate is selected based on the "),Gme=n(I3,"CODE",{});var Flt=s(Gme);TGo=r(Flt,"model_type"),Flt.forEach(t),MGo=r(I3,` property of the config object (either
passed as an argument or loaded from `),Ome=n(I3,"CODE",{});var vlt=s(Ome);EGo=r(vlt,"pretrained_model_name_or_path"),vlt.forEach(t),CGo=r(I3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vme=n(I3,"CODE",{});var Tlt=s(Vme);wGo=r(Tlt,"pretrained_model_name_or_path"),Tlt.forEach(t),AGo=r(I3,":"),I3.forEach(t),yGo=i(Zt),Se=n(Zt,"UL",{});var Do=s(Se);MT=n(Do,"LI",{});var $Le=s(MT);Xme=n($Le,"STRONG",{});var Mlt=s(Xme);LGo=r(Mlt,"data2vec-audio"),Mlt.forEach(t),xGo=r($Le," \u2014 "),JD=n($Le,"A",{href:!0});var Elt=s(JD);kGo=r(Elt,"Data2VecAudioForSequenceClassification"),Elt.forEach(t),SGo=r($Le," (Data2VecAudio model)"),$Le.forEach(t),RGo=i(Do),ET=n(Do,"LI",{});var ILe=s(ET);zme=n(ILe,"STRONG",{});var Clt=s(zme);BGo=r(Clt,"hubert"),Clt.forEach(t),PGo=r(ILe," \u2014 "),YD=n(ILe,"A",{href:!0});var wlt=s(YD);$Go=r(wlt,"HubertForSequenceClassification"),wlt.forEach(t),IGo=r(ILe," (Hubert model)"),ILe.forEach(t),qGo=i(Do),CT=n(Do,"LI",{});var qLe=s(CT);Qme=n(qLe,"STRONG",{});var Alt=s(Qme);NGo=r(Alt,"sew"),Alt.forEach(t),jGo=r(qLe," \u2014 "),KD=n(qLe,"A",{href:!0});var ylt=s(KD);DGo=r(ylt,"SEWForSequenceClassification"),ylt.forEach(t),GGo=r(qLe," (SEW model)"),qLe.forEach(t),OGo=i(Do),wT=n(Do,"LI",{});var NLe=s(wT);Wme=n(NLe,"STRONG",{});var Llt=s(Wme);VGo=r(Llt,"sew-d"),Llt.forEach(t),XGo=r(NLe," \u2014 "),ZD=n(NLe,"A",{href:!0});var xlt=s(ZD);zGo=r(xlt,"SEWDForSequenceClassification"),xlt.forEach(t),QGo=r(NLe," (SEW-D model)"),NLe.forEach(t),WGo=i(Do),AT=n(Do,"LI",{});var jLe=s(AT);Hme=n(jLe,"STRONG",{});var klt=s(Hme);HGo=r(klt,"unispeech"),klt.forEach(t),UGo=r(jLe," \u2014 "),eG=n(jLe,"A",{href:!0});var Slt=s(eG);JGo=r(Slt,"UniSpeechForSequenceClassification"),Slt.forEach(t),YGo=r(jLe," (UniSpeech model)"),jLe.forEach(t),KGo=i(Do),yT=n(Do,"LI",{});var DLe=s(yT);Ume=n(DLe,"STRONG",{});var Rlt=s(Ume);ZGo=r(Rlt,"unispeech-sat"),Rlt.forEach(t),eOo=r(DLe," \u2014 "),oG=n(DLe,"A",{href:!0});var Blt=s(oG);oOo=r(Blt,"UniSpeechSatForSequenceClassification"),Blt.forEach(t),rOo=r(DLe," (UniSpeechSat model)"),DLe.forEach(t),tOo=i(Do),LT=n(Do,"LI",{});var GLe=s(LT);Jme=n(GLe,"STRONG",{});var Plt=s(Jme);aOo=r(Plt,"wav2vec2"),Plt.forEach(t),nOo=r(GLe," \u2014 "),rG=n(GLe,"A",{href:!0});var $lt=s(rG);sOo=r($lt,"Wav2Vec2ForSequenceClassification"),$lt.forEach(t),lOo=r(GLe," (Wav2Vec2 model)"),GLe.forEach(t),iOo=i(Do),xT=n(Do,"LI",{});var OLe=s(xT);Yme=n(OLe,"STRONG",{});var Ilt=s(Yme);dOo=r(Ilt,"wavlm"),Ilt.forEach(t),cOo=r(OLe," \u2014 "),tG=n(OLe,"A",{href:!0});var qlt=s(tG);mOo=r(qlt,"WavLMForSequenceClassification"),qlt.forEach(t),fOo=r(OLe," (WavLM model)"),OLe.forEach(t),Do.forEach(t),gOo=i(Zt),kT=n(Zt,"P",{});var VLe=s(kT);hOo=r(VLe,"The model is set in evaluation mode by default using "),Kme=n(VLe,"CODE",{});var Nlt=s(Kme);uOo=r(Nlt,"model.eval()"),Nlt.forEach(t),pOo=r(VLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zme=n(VLe,"CODE",{});var jlt=s(Zme);_Oo=r(jlt,"model.train()"),jlt.forEach(t),VLe.forEach(t),bOo=i(Zt),efe=n(Zt,"P",{});var Dlt=s(efe);FOo=r(Dlt,"Examples:"),Dlt.forEach(t),vOo=i(Zt),f(O6.$$.fragment,Zt),Zt.forEach(t),Fl.forEach(t),DRe=i(c),Nd=n(c,"H2",{class:!0});var UPe=s(Nd);ST=n(UPe,"A",{id:!0,class:!0,href:!0});var Glt=s(ST);ofe=n(Glt,"SPAN",{});var Olt=s(ofe);f(V6.$$.fragment,Olt),Olt.forEach(t),Glt.forEach(t),TOo=i(UPe),rfe=n(UPe,"SPAN",{});var Vlt=s(rfe);MOo=r(Vlt,"AutoModelForAudioFrameClassification"),Vlt.forEach(t),UPe.forEach(t),GRe=i(c),cr=n(c,"DIV",{class:!0});var Tl=s(cr);f(X6.$$.fragment,Tl),EOo=i(Tl),jd=n(Tl,"P",{});var SU=s(jd);COo=r(SU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),aG=n(SU,"A",{href:!0});var Xlt=s(aG);wOo=r(Xlt,"from_pretrained()"),Xlt.forEach(t),AOo=r(SU," class method or the "),nG=n(SU,"A",{href:!0});var zlt=s(nG);yOo=r(zlt,"from_config()"),zlt.forEach(t),LOo=r(SU,` class
method.`),SU.forEach(t),xOo=i(Tl),z6=n(Tl,"P",{});var JPe=s(z6);kOo=r(JPe,"This class cannot be instantiated directly using "),tfe=n(JPe,"CODE",{});var Qlt=s(tfe);SOo=r(Qlt,"__init__()"),Qlt.forEach(t),ROo=r(JPe," (throws an error)."),JPe.forEach(t),BOo=i(Tl),at=n(Tl,"DIV",{class:!0});var Ml=s(at);f(Q6.$$.fragment,Ml),POo=i(Ml),afe=n(Ml,"P",{});var Wlt=s(afe);$Oo=r(Wlt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Wlt.forEach(t),IOo=i(Ml),Dd=n(Ml,"P",{});var RU=s(Dd);qOo=r(RU,`Note:
Loading a model from its configuration file does `),nfe=n(RU,"STRONG",{});var Hlt=s(nfe);NOo=r(Hlt,"not"),Hlt.forEach(t),jOo=r(RU,` load the model weights. It only affects the
model\u2019s configuration. Use `),sG=n(RU,"A",{href:!0});var Ult=s(sG);DOo=r(Ult,"from_pretrained()"),Ult.forEach(t),GOo=r(RU," to load the model weights."),RU.forEach(t),OOo=i(Ml),sfe=n(Ml,"P",{});var Jlt=s(sfe);VOo=r(Jlt,"Examples:"),Jlt.forEach(t),XOo=i(Ml),f(W6.$$.fragment,Ml),Ml.forEach(t),zOo=i(Tl),Ye=n(Tl,"DIV",{class:!0});var ea=s(Ye);f(H6.$$.fragment,ea),QOo=i(ea),lfe=n(ea,"P",{});var Ylt=s(lfe);WOo=r(Ylt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Ylt.forEach(t),HOo=i(ea),an=n(ea,"P",{});var q3=s(an);UOo=r(q3,"The model class to instantiate is selected based on the "),ife=n(q3,"CODE",{});var Klt=s(ife);JOo=r(Klt,"model_type"),Klt.forEach(t),YOo=r(q3,` property of the config object (either
passed as an argument or loaded from `),dfe=n(q3,"CODE",{});var Zlt=s(dfe);KOo=r(Zlt,"pretrained_model_name_or_path"),Zlt.forEach(t),ZOo=r(q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cfe=n(q3,"CODE",{});var eit=s(cfe);eVo=r(eit,"pretrained_model_name_or_path"),eit.forEach(t),oVo=r(q3,":"),q3.forEach(t),rVo=i(ea),nn=n(ea,"UL",{});var N3=s(nn);RT=n(N3,"LI",{});var XLe=s(RT);mfe=n(XLe,"STRONG",{});var oit=s(mfe);tVo=r(oit,"data2vec-audio"),oit.forEach(t),aVo=r(XLe," \u2014 "),lG=n(XLe,"A",{href:!0});var rit=s(lG);nVo=r(rit,"Data2VecAudioForAudioFrameClassification"),rit.forEach(t),sVo=r(XLe," (Data2VecAudio model)"),XLe.forEach(t),lVo=i(N3),BT=n(N3,"LI",{});var zLe=s(BT);ffe=n(zLe,"STRONG",{});var tit=s(ffe);iVo=r(tit,"unispeech-sat"),tit.forEach(t),dVo=r(zLe," \u2014 "),iG=n(zLe,"A",{href:!0});var ait=s(iG);cVo=r(ait,"UniSpeechSatForAudioFrameClassification"),ait.forEach(t),mVo=r(zLe," (UniSpeechSat model)"),zLe.forEach(t),fVo=i(N3),PT=n(N3,"LI",{});var QLe=s(PT);gfe=n(QLe,"STRONG",{});var nit=s(gfe);gVo=r(nit,"wav2vec2"),nit.forEach(t),hVo=r(QLe," \u2014 "),dG=n(QLe,"A",{href:!0});var sit=s(dG);uVo=r(sit,"Wav2Vec2ForAudioFrameClassification"),sit.forEach(t),pVo=r(QLe," (Wav2Vec2 model)"),QLe.forEach(t),_Vo=i(N3),$T=n(N3,"LI",{});var WLe=s($T);hfe=n(WLe,"STRONG",{});var lit=s(hfe);bVo=r(lit,"wavlm"),lit.forEach(t),FVo=r(WLe," \u2014 "),cG=n(WLe,"A",{href:!0});var iit=s(cG);vVo=r(iit,"WavLMForAudioFrameClassification"),iit.forEach(t),TVo=r(WLe," (WavLM model)"),WLe.forEach(t),N3.forEach(t),MVo=i(ea),IT=n(ea,"P",{});var HLe=s(IT);EVo=r(HLe,"The model is set in evaluation mode by default using "),ufe=n(HLe,"CODE",{});var dit=s(ufe);CVo=r(dit,"model.eval()"),dit.forEach(t),wVo=r(HLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pfe=n(HLe,"CODE",{});var cit=s(pfe);AVo=r(cit,"model.train()"),cit.forEach(t),HLe.forEach(t),yVo=i(ea),_fe=n(ea,"P",{});var mit=s(_fe);LVo=r(mit,"Examples:"),mit.forEach(t),xVo=i(ea),f(U6.$$.fragment,ea),ea.forEach(t),Tl.forEach(t),ORe=i(c),Gd=n(c,"H2",{class:!0});var YPe=s(Gd);qT=n(YPe,"A",{id:!0,class:!0,href:!0});var fit=s(qT);bfe=n(fit,"SPAN",{});var git=s(bfe);f(J6.$$.fragment,git),git.forEach(t),fit.forEach(t),kVo=i(YPe),Ffe=n(YPe,"SPAN",{});var hit=s(Ffe);SVo=r(hit,"AutoModelForCTC"),hit.forEach(t),YPe.forEach(t),VRe=i(c),mr=n(c,"DIV",{class:!0});var El=s(mr);f(Y6.$$.fragment,El),RVo=i(El),Od=n(El,"P",{});var BU=s(Od);BVo=r(BU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),mG=n(BU,"A",{href:!0});var uit=s(mG);PVo=r(uit,"from_pretrained()"),uit.forEach(t),$Vo=r(BU," class method or the "),fG=n(BU,"A",{href:!0});var pit=s(fG);IVo=r(pit,"from_config()"),pit.forEach(t),qVo=r(BU,` class
method.`),BU.forEach(t),NVo=i(El),K6=n(El,"P",{});var KPe=s(K6);jVo=r(KPe,"This class cannot be instantiated directly using "),vfe=n(KPe,"CODE",{});var _it=s(vfe);DVo=r(_it,"__init__()"),_it.forEach(t),GVo=r(KPe," (throws an error)."),KPe.forEach(t),OVo=i(El),nt=n(El,"DIV",{class:!0});var Cl=s(nt);f(Z6.$$.fragment,Cl),VVo=i(Cl),Tfe=n(Cl,"P",{});var bit=s(Tfe);XVo=r(bit,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),bit.forEach(t),zVo=i(Cl),Vd=n(Cl,"P",{});var PU=s(Vd);QVo=r(PU,`Note:
Loading a model from its configuration file does `),Mfe=n(PU,"STRONG",{});var Fit=s(Mfe);WVo=r(Fit,"not"),Fit.forEach(t),HVo=r(PU,` load the model weights. It only affects the
model\u2019s configuration. Use `),gG=n(PU,"A",{href:!0});var vit=s(gG);UVo=r(vit,"from_pretrained()"),vit.forEach(t),JVo=r(PU," to load the model weights."),PU.forEach(t),YVo=i(Cl),Efe=n(Cl,"P",{});var Tit=s(Efe);KVo=r(Tit,"Examples:"),Tit.forEach(t),ZVo=i(Cl),f(e0.$$.fragment,Cl),Cl.forEach(t),eXo=i(El),Ke=n(El,"DIV",{class:!0});var oa=s(Ke);f(o0.$$.fragment,oa),oXo=i(oa),Cfe=n(oa,"P",{});var Mit=s(Cfe);rXo=r(Mit,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Mit.forEach(t),tXo=i(oa),sn=n(oa,"P",{});var j3=s(sn);aXo=r(j3,"The model class to instantiate is selected based on the "),wfe=n(j3,"CODE",{});var Eit=s(wfe);nXo=r(Eit,"model_type"),Eit.forEach(t),sXo=r(j3,` property of the config object (either
passed as an argument or loaded from `),Afe=n(j3,"CODE",{});var Cit=s(Afe);lXo=r(Cit,"pretrained_model_name_or_path"),Cit.forEach(t),iXo=r(j3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yfe=n(j3,"CODE",{});var wit=s(yfe);dXo=r(wit,"pretrained_model_name_or_path"),wit.forEach(t),cXo=r(j3,":"),j3.forEach(t),mXo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);NT=n(Go,"LI",{});var ULe=s(NT);Lfe=n(ULe,"STRONG",{});var Ait=s(Lfe);fXo=r(Ait,"data2vec-audio"),Ait.forEach(t),gXo=r(ULe," \u2014 "),hG=n(ULe,"A",{href:!0});var yit=s(hG);hXo=r(yit,"Data2VecAudioForCTC"),yit.forEach(t),uXo=r(ULe," (Data2VecAudio model)"),ULe.forEach(t),pXo=i(Go),jT=n(Go,"LI",{});var JLe=s(jT);xfe=n(JLe,"STRONG",{});var Lit=s(xfe);_Xo=r(Lit,"hubert"),Lit.forEach(t),bXo=r(JLe," \u2014 "),uG=n(JLe,"A",{href:!0});var xit=s(uG);FXo=r(xit,"HubertForCTC"),xit.forEach(t),vXo=r(JLe," (Hubert model)"),JLe.forEach(t),TXo=i(Go),DT=n(Go,"LI",{});var YLe=s(DT);kfe=n(YLe,"STRONG",{});var kit=s(kfe);MXo=r(kit,"sew"),kit.forEach(t),EXo=r(YLe," \u2014 "),pG=n(YLe,"A",{href:!0});var Sit=s(pG);CXo=r(Sit,"SEWForCTC"),Sit.forEach(t),wXo=r(YLe," (SEW model)"),YLe.forEach(t),AXo=i(Go),GT=n(Go,"LI",{});var KLe=s(GT);Sfe=n(KLe,"STRONG",{});var Rit=s(Sfe);yXo=r(Rit,"sew-d"),Rit.forEach(t),LXo=r(KLe," \u2014 "),_G=n(KLe,"A",{href:!0});var Bit=s(_G);xXo=r(Bit,"SEWDForCTC"),Bit.forEach(t),kXo=r(KLe," (SEW-D model)"),KLe.forEach(t),SXo=i(Go),OT=n(Go,"LI",{});var ZLe=s(OT);Rfe=n(ZLe,"STRONG",{});var Pit=s(Rfe);RXo=r(Pit,"unispeech"),Pit.forEach(t),BXo=r(ZLe," \u2014 "),bG=n(ZLe,"A",{href:!0});var $it=s(bG);PXo=r($it,"UniSpeechForCTC"),$it.forEach(t),$Xo=r(ZLe," (UniSpeech model)"),ZLe.forEach(t),IXo=i(Go),VT=n(Go,"LI",{});var e8e=s(VT);Bfe=n(e8e,"STRONG",{});var Iit=s(Bfe);qXo=r(Iit,"unispeech-sat"),Iit.forEach(t),NXo=r(e8e," \u2014 "),FG=n(e8e,"A",{href:!0});var qit=s(FG);jXo=r(qit,"UniSpeechSatForCTC"),qit.forEach(t),DXo=r(e8e," (UniSpeechSat model)"),e8e.forEach(t),GXo=i(Go),XT=n(Go,"LI",{});var o8e=s(XT);Pfe=n(o8e,"STRONG",{});var Nit=s(Pfe);OXo=r(Nit,"wav2vec2"),Nit.forEach(t),VXo=r(o8e," \u2014 "),vG=n(o8e,"A",{href:!0});var jit=s(vG);XXo=r(jit,"Wav2Vec2ForCTC"),jit.forEach(t),zXo=r(o8e," (Wav2Vec2 model)"),o8e.forEach(t),QXo=i(Go),zT=n(Go,"LI",{});var r8e=s(zT);$fe=n(r8e,"STRONG",{});var Dit=s($fe);WXo=r(Dit,"wavlm"),Dit.forEach(t),HXo=r(r8e," \u2014 "),TG=n(r8e,"A",{href:!0});var Git=s(TG);UXo=r(Git,"WavLMForCTC"),Git.forEach(t),JXo=r(r8e," (WavLM model)"),r8e.forEach(t),Go.forEach(t),YXo=i(oa),QT=n(oa,"P",{});var t8e=s(QT);KXo=r(t8e,"The model is set in evaluation mode by default using "),Ife=n(t8e,"CODE",{});var Oit=s(Ife);ZXo=r(Oit,"model.eval()"),Oit.forEach(t),ezo=r(t8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qfe=n(t8e,"CODE",{});var Vit=s(qfe);ozo=r(Vit,"model.train()"),Vit.forEach(t),t8e.forEach(t),rzo=i(oa),Nfe=n(oa,"P",{});var Xit=s(Nfe);tzo=r(Xit,"Examples:"),Xit.forEach(t),azo=i(oa),f(r0.$$.fragment,oa),oa.forEach(t),El.forEach(t),XRe=i(c),Xd=n(c,"H2",{class:!0});var ZPe=s(Xd);WT=n(ZPe,"A",{id:!0,class:!0,href:!0});var zit=s(WT);jfe=n(zit,"SPAN",{});var Qit=s(jfe);f(t0.$$.fragment,Qit),Qit.forEach(t),zit.forEach(t),nzo=i(ZPe),Dfe=n(ZPe,"SPAN",{});var Wit=s(Dfe);szo=r(Wit,"AutoModelForSpeechSeq2Seq"),Wit.forEach(t),ZPe.forEach(t),zRe=i(c),fr=n(c,"DIV",{class:!0});var wl=s(fr);f(a0.$$.fragment,wl),lzo=i(wl),zd=n(wl,"P",{});var $U=s(zd);izo=r($U,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),MG=n($U,"A",{href:!0});var Hit=s(MG);dzo=r(Hit,"from_pretrained()"),Hit.forEach(t),czo=r($U," class method or the "),EG=n($U,"A",{href:!0});var Uit=s(EG);mzo=r(Uit,"from_config()"),Uit.forEach(t),fzo=r($U,` class
method.`),$U.forEach(t),gzo=i(wl),n0=n(wl,"P",{});var e$e=s(n0);hzo=r(e$e,"This class cannot be instantiated directly using "),Gfe=n(e$e,"CODE",{});var Jit=s(Gfe);uzo=r(Jit,"__init__()"),Jit.forEach(t),pzo=r(e$e," (throws an error)."),e$e.forEach(t),_zo=i(wl),st=n(wl,"DIV",{class:!0});var Al=s(st);f(s0.$$.fragment,Al),bzo=i(Al),Ofe=n(Al,"P",{});var Yit=s(Ofe);Fzo=r(Yit,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Yit.forEach(t),vzo=i(Al),Qd=n(Al,"P",{});var IU=s(Qd);Tzo=r(IU,`Note:
Loading a model from its configuration file does `),Vfe=n(IU,"STRONG",{});var Kit=s(Vfe);Mzo=r(Kit,"not"),Kit.forEach(t),Ezo=r(IU,` load the model weights. It only affects the
model\u2019s configuration. Use `),CG=n(IU,"A",{href:!0});var Zit=s(CG);Czo=r(Zit,"from_pretrained()"),Zit.forEach(t),wzo=r(IU," to load the model weights."),IU.forEach(t),Azo=i(Al),Xfe=n(Al,"P",{});var edt=s(Xfe);yzo=r(edt,"Examples:"),edt.forEach(t),Lzo=i(Al),f(l0.$$.fragment,Al),Al.forEach(t),xzo=i(wl),Ze=n(wl,"DIV",{class:!0});var ra=s(Ze);f(i0.$$.fragment,ra),kzo=i(ra),zfe=n(ra,"P",{});var odt=s(zfe);Szo=r(odt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),odt.forEach(t),Rzo=i(ra),ln=n(ra,"P",{});var D3=s(ln);Bzo=r(D3,"The model class to instantiate is selected based on the "),Qfe=n(D3,"CODE",{});var rdt=s(Qfe);Pzo=r(rdt,"model_type"),rdt.forEach(t),$zo=r(D3,` property of the config object (either
passed as an argument or loaded from `),Wfe=n(D3,"CODE",{});var tdt=s(Wfe);Izo=r(tdt,"pretrained_model_name_or_path"),tdt.forEach(t),qzo=r(D3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hfe=n(D3,"CODE",{});var adt=s(Hfe);Nzo=r(adt,"pretrained_model_name_or_path"),adt.forEach(t),jzo=r(D3,":"),D3.forEach(t),Dzo=i(ra),d0=n(ra,"UL",{});var o$e=s(d0);HT=n(o$e,"LI",{});var a8e=s(HT);Ufe=n(a8e,"STRONG",{});var ndt=s(Ufe);Gzo=r(ndt,"speech-encoder-decoder"),ndt.forEach(t),Ozo=r(a8e," \u2014 "),wG=n(a8e,"A",{href:!0});var sdt=s(wG);Vzo=r(sdt,"SpeechEncoderDecoderModel"),sdt.forEach(t),Xzo=r(a8e," (Speech Encoder decoder model)"),a8e.forEach(t),zzo=i(o$e),UT=n(o$e,"LI",{});var n8e=s(UT);Jfe=n(n8e,"STRONG",{});var ldt=s(Jfe);Qzo=r(ldt,"speech_to_text"),ldt.forEach(t),Wzo=r(n8e," \u2014 "),AG=n(n8e,"A",{href:!0});var idt=s(AG);Hzo=r(idt,"Speech2TextForConditionalGeneration"),idt.forEach(t),Uzo=r(n8e," (Speech2Text model)"),n8e.forEach(t),o$e.forEach(t),Jzo=i(ra),JT=n(ra,"P",{});var s8e=s(JT);Yzo=r(s8e,"The model is set in evaluation mode by default using "),Yfe=n(s8e,"CODE",{});var ddt=s(Yfe);Kzo=r(ddt,"model.eval()"),ddt.forEach(t),Zzo=r(s8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kfe=n(s8e,"CODE",{});var cdt=s(Kfe);eQo=r(cdt,"model.train()"),cdt.forEach(t),s8e.forEach(t),oQo=i(ra),Zfe=n(ra,"P",{});var mdt=s(Zfe);rQo=r(mdt,"Examples:"),mdt.forEach(t),tQo=i(ra),f(c0.$$.fragment,ra),ra.forEach(t),wl.forEach(t),QRe=i(c),Wd=n(c,"H2",{class:!0});var r$e=s(Wd);YT=n(r$e,"A",{id:!0,class:!0,href:!0});var fdt=s(YT);ege=n(fdt,"SPAN",{});var gdt=s(ege);f(m0.$$.fragment,gdt),gdt.forEach(t),fdt.forEach(t),aQo=i(r$e),oge=n(r$e,"SPAN",{});var hdt=s(oge);nQo=r(hdt,"AutoModelForAudioXVector"),hdt.forEach(t),r$e.forEach(t),WRe=i(c),gr=n(c,"DIV",{class:!0});var yl=s(gr);f(f0.$$.fragment,yl),sQo=i(yl),Hd=n(yl,"P",{});var qU=s(Hd);lQo=r(qU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),yG=n(qU,"A",{href:!0});var udt=s(yG);iQo=r(udt,"from_pretrained()"),udt.forEach(t),dQo=r(qU," class method or the "),LG=n(qU,"A",{href:!0});var pdt=s(LG);cQo=r(pdt,"from_config()"),pdt.forEach(t),mQo=r(qU,` class
method.`),qU.forEach(t),fQo=i(yl),g0=n(yl,"P",{});var t$e=s(g0);gQo=r(t$e,"This class cannot be instantiated directly using "),rge=n(t$e,"CODE",{});var _dt=s(rge);hQo=r(_dt,"__init__()"),_dt.forEach(t),uQo=r(t$e," (throws an error)."),t$e.forEach(t),pQo=i(yl),lt=n(yl,"DIV",{class:!0});var Ll=s(lt);f(h0.$$.fragment,Ll),_Qo=i(Ll),tge=n(Ll,"P",{});var bdt=s(tge);bQo=r(bdt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),bdt.forEach(t),FQo=i(Ll),Ud=n(Ll,"P",{});var NU=s(Ud);vQo=r(NU,`Note:
Loading a model from its configuration file does `),age=n(NU,"STRONG",{});var Fdt=s(age);TQo=r(Fdt,"not"),Fdt.forEach(t),MQo=r(NU,` load the model weights. It only affects the
model\u2019s configuration. Use `),xG=n(NU,"A",{href:!0});var vdt=s(xG);EQo=r(vdt,"from_pretrained()"),vdt.forEach(t),CQo=r(NU," to load the model weights."),NU.forEach(t),wQo=i(Ll),nge=n(Ll,"P",{});var Tdt=s(nge);AQo=r(Tdt,"Examples:"),Tdt.forEach(t),yQo=i(Ll),f(u0.$$.fragment,Ll),Ll.forEach(t),LQo=i(yl),eo=n(yl,"DIV",{class:!0});var ta=s(eo);f(p0.$$.fragment,ta),xQo=i(ta),sge=n(ta,"P",{});var Mdt=s(sge);kQo=r(Mdt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Mdt.forEach(t),SQo=i(ta),dn=n(ta,"P",{});var G3=s(dn);RQo=r(G3,"The model class to instantiate is selected based on the "),lge=n(G3,"CODE",{});var Edt=s(lge);BQo=r(Edt,"model_type"),Edt.forEach(t),PQo=r(G3,` property of the config object (either
passed as an argument or loaded from `),ige=n(G3,"CODE",{});var Cdt=s(ige);$Qo=r(Cdt,"pretrained_model_name_or_path"),Cdt.forEach(t),IQo=r(G3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dge=n(G3,"CODE",{});var wdt=s(dge);qQo=r(wdt,"pretrained_model_name_or_path"),wdt.forEach(t),NQo=r(G3,":"),G3.forEach(t),jQo=i(ta),cn=n(ta,"UL",{});var O3=s(cn);KT=n(O3,"LI",{});var l8e=s(KT);cge=n(l8e,"STRONG",{});var Adt=s(cge);DQo=r(Adt,"data2vec-audio"),Adt.forEach(t),GQo=r(l8e," \u2014 "),kG=n(l8e,"A",{href:!0});var ydt=s(kG);OQo=r(ydt,"Data2VecAudioForXVector"),ydt.forEach(t),VQo=r(l8e," (Data2VecAudio model)"),l8e.forEach(t),XQo=i(O3),ZT=n(O3,"LI",{});var i8e=s(ZT);mge=n(i8e,"STRONG",{});var Ldt=s(mge);zQo=r(Ldt,"unispeech-sat"),Ldt.forEach(t),QQo=r(i8e," \u2014 "),SG=n(i8e,"A",{href:!0});var xdt=s(SG);WQo=r(xdt,"UniSpeechSatForXVector"),xdt.forEach(t),HQo=r(i8e," (UniSpeechSat model)"),i8e.forEach(t),UQo=i(O3),e1=n(O3,"LI",{});var d8e=s(e1);fge=n(d8e,"STRONG",{});var kdt=s(fge);JQo=r(kdt,"wav2vec2"),kdt.forEach(t),YQo=r(d8e," \u2014 "),RG=n(d8e,"A",{href:!0});var Sdt=s(RG);KQo=r(Sdt,"Wav2Vec2ForXVector"),Sdt.forEach(t),ZQo=r(d8e," (Wav2Vec2 model)"),d8e.forEach(t),eWo=i(O3),o1=n(O3,"LI",{});var c8e=s(o1);gge=n(c8e,"STRONG",{});var Rdt=s(gge);oWo=r(Rdt,"wavlm"),Rdt.forEach(t),rWo=r(c8e," \u2014 "),BG=n(c8e,"A",{href:!0});var Bdt=s(BG);tWo=r(Bdt,"WavLMForXVector"),Bdt.forEach(t),aWo=r(c8e," (WavLM model)"),c8e.forEach(t),O3.forEach(t),nWo=i(ta),r1=n(ta,"P",{});var m8e=s(r1);sWo=r(m8e,"The model is set in evaluation mode by default using "),hge=n(m8e,"CODE",{});var Pdt=s(hge);lWo=r(Pdt,"model.eval()"),Pdt.forEach(t),iWo=r(m8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uge=n(m8e,"CODE",{});var $dt=s(uge);dWo=r($dt,"model.train()"),$dt.forEach(t),m8e.forEach(t),cWo=i(ta),pge=n(ta,"P",{});var Idt=s(pge);mWo=r(Idt,"Examples:"),Idt.forEach(t),fWo=i(ta),f(_0.$$.fragment,ta),ta.forEach(t),yl.forEach(t),HRe=i(c),Jd=n(c,"H2",{class:!0});var a$e=s(Jd);t1=n(a$e,"A",{id:!0,class:!0,href:!0});var qdt=s(t1);_ge=n(qdt,"SPAN",{});var Ndt=s(_ge);f(b0.$$.fragment,Ndt),Ndt.forEach(t),qdt.forEach(t),gWo=i(a$e),bge=n(a$e,"SPAN",{});var jdt=s(bge);hWo=r(jdt,"AutoModelForMaskedImageModeling"),jdt.forEach(t),a$e.forEach(t),URe=i(c),hr=n(c,"DIV",{class:!0});var xl=s(hr);f(F0.$$.fragment,xl),uWo=i(xl),Yd=n(xl,"P",{});var jU=s(Yd);pWo=r(jU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),PG=n(jU,"A",{href:!0});var Ddt=s(PG);_Wo=r(Ddt,"from_pretrained()"),Ddt.forEach(t),bWo=r(jU," class method or the "),$G=n(jU,"A",{href:!0});var Gdt=s($G);FWo=r(Gdt,"from_config()"),Gdt.forEach(t),vWo=r(jU,` class
method.`),jU.forEach(t),TWo=i(xl),v0=n(xl,"P",{});var n$e=s(v0);MWo=r(n$e,"This class cannot be instantiated directly using "),Fge=n(n$e,"CODE",{});var Odt=s(Fge);EWo=r(Odt,"__init__()"),Odt.forEach(t),CWo=r(n$e," (throws an error)."),n$e.forEach(t),wWo=i(xl),it=n(xl,"DIV",{class:!0});var kl=s(it);f(T0.$$.fragment,kl),AWo=i(kl),vge=n(kl,"P",{});var Vdt=s(vge);yWo=r(Vdt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Vdt.forEach(t),LWo=i(kl),Kd=n(kl,"P",{});var DU=s(Kd);xWo=r(DU,`Note:
Loading a model from its configuration file does `),Tge=n(DU,"STRONG",{});var Xdt=s(Tge);kWo=r(Xdt,"not"),Xdt.forEach(t),SWo=r(DU,` load the model weights. It only affects the
model\u2019s configuration. Use `),IG=n(DU,"A",{href:!0});var zdt=s(IG);RWo=r(zdt,"from_pretrained()"),zdt.forEach(t),BWo=r(DU," to load the model weights."),DU.forEach(t),PWo=i(kl),Mge=n(kl,"P",{});var Qdt=s(Mge);$Wo=r(Qdt,"Examples:"),Qdt.forEach(t),IWo=i(kl),f(M0.$$.fragment,kl),kl.forEach(t),qWo=i(xl),oo=n(xl,"DIV",{class:!0});var aa=s(oo);f(E0.$$.fragment,aa),NWo=i(aa),Ege=n(aa,"P",{});var Wdt=s(Ege);jWo=r(Wdt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Wdt.forEach(t),DWo=i(aa),mn=n(aa,"P",{});var V3=s(mn);GWo=r(V3,"The model class to instantiate is selected based on the "),Cge=n(V3,"CODE",{});var Hdt=s(Cge);OWo=r(Hdt,"model_type"),Hdt.forEach(t),VWo=r(V3,` property of the config object (either
passed as an argument or loaded from `),wge=n(V3,"CODE",{});var Udt=s(wge);XWo=r(Udt,"pretrained_model_name_or_path"),Udt.forEach(t),zWo=r(V3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Age=n(V3,"CODE",{});var Jdt=s(Age);QWo=r(Jdt,"pretrained_model_name_or_path"),Jdt.forEach(t),WWo=r(V3,":"),V3.forEach(t),HWo=i(aa),Zd=n(aa,"UL",{});var GU=s(Zd);a1=n(GU,"LI",{});var f8e=s(a1);yge=n(f8e,"STRONG",{});var Ydt=s(yge);UWo=r(Ydt,"deit"),Ydt.forEach(t),JWo=r(f8e," \u2014 "),qG=n(f8e,"A",{href:!0});var Kdt=s(qG);YWo=r(Kdt,"DeiTForMaskedImageModeling"),Kdt.forEach(t),KWo=r(f8e," (DeiT model)"),f8e.forEach(t),ZWo=i(GU),n1=n(GU,"LI",{});var g8e=s(n1);Lge=n(g8e,"STRONG",{});var Zdt=s(Lge);eHo=r(Zdt,"swin"),Zdt.forEach(t),oHo=r(g8e," \u2014 "),NG=n(g8e,"A",{href:!0});var ect=s(NG);rHo=r(ect,"SwinForMaskedImageModeling"),ect.forEach(t),tHo=r(g8e," (Swin model)"),g8e.forEach(t),aHo=i(GU),s1=n(GU,"LI",{});var h8e=s(s1);xge=n(h8e,"STRONG",{});var oct=s(xge);nHo=r(oct,"vit"),oct.forEach(t),sHo=r(h8e," \u2014 "),jG=n(h8e,"A",{href:!0});var rct=s(jG);lHo=r(rct,"ViTForMaskedImageModeling"),rct.forEach(t),iHo=r(h8e," (ViT model)"),h8e.forEach(t),GU.forEach(t),dHo=i(aa),l1=n(aa,"P",{});var u8e=s(l1);cHo=r(u8e,"The model is set in evaluation mode by default using "),kge=n(u8e,"CODE",{});var tct=s(kge);mHo=r(tct,"model.eval()"),tct.forEach(t),fHo=r(u8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sge=n(u8e,"CODE",{});var act=s(Sge);gHo=r(act,"model.train()"),act.forEach(t),u8e.forEach(t),hHo=i(aa),Rge=n(aa,"P",{});var nct=s(Rge);uHo=r(nct,"Examples:"),nct.forEach(t),pHo=i(aa),f(C0.$$.fragment,aa),aa.forEach(t),xl.forEach(t),JRe=i(c),ec=n(c,"H2",{class:!0});var s$e=s(ec);i1=n(s$e,"A",{id:!0,class:!0,href:!0});var sct=s(i1);Bge=n(sct,"SPAN",{});var lct=s(Bge);f(w0.$$.fragment,lct),lct.forEach(t),sct.forEach(t),_Ho=i(s$e),Pge=n(s$e,"SPAN",{});var ict=s(Pge);bHo=r(ict,"AutoModelForObjectDetection"),ict.forEach(t),s$e.forEach(t),YRe=i(c),ur=n(c,"DIV",{class:!0});var Sl=s(ur);f(A0.$$.fragment,Sl),FHo=i(Sl),oc=n(Sl,"P",{});var OU=s(oc);vHo=r(OU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),DG=n(OU,"A",{href:!0});var dct=s(DG);THo=r(dct,"from_pretrained()"),dct.forEach(t),MHo=r(OU," class method or the "),GG=n(OU,"A",{href:!0});var cct=s(GG);EHo=r(cct,"from_config()"),cct.forEach(t),CHo=r(OU,` class
method.`),OU.forEach(t),wHo=i(Sl),y0=n(Sl,"P",{});var l$e=s(y0);AHo=r(l$e,"This class cannot be instantiated directly using "),$ge=n(l$e,"CODE",{});var mct=s($ge);yHo=r(mct,"__init__()"),mct.forEach(t),LHo=r(l$e," (throws an error)."),l$e.forEach(t),xHo=i(Sl),dt=n(Sl,"DIV",{class:!0});var Rl=s(dt);f(L0.$$.fragment,Rl),kHo=i(Rl),Ige=n(Rl,"P",{});var fct=s(Ige);SHo=r(fct,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),fct.forEach(t),RHo=i(Rl),rc=n(Rl,"P",{});var VU=s(rc);BHo=r(VU,`Note:
Loading a model from its configuration file does `),qge=n(VU,"STRONG",{});var gct=s(qge);PHo=r(gct,"not"),gct.forEach(t),$Ho=r(VU,` load the model weights. It only affects the
model\u2019s configuration. Use `),OG=n(VU,"A",{href:!0});var hct=s(OG);IHo=r(hct,"from_pretrained()"),hct.forEach(t),qHo=r(VU," to load the model weights."),VU.forEach(t),NHo=i(Rl),Nge=n(Rl,"P",{});var uct=s(Nge);jHo=r(uct,"Examples:"),uct.forEach(t),DHo=i(Rl),f(x0.$$.fragment,Rl),Rl.forEach(t),GHo=i(Sl),ro=n(Sl,"DIV",{class:!0});var na=s(ro);f(k0.$$.fragment,na),OHo=i(na),jge=n(na,"P",{});var pct=s(jge);VHo=r(pct,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),pct.forEach(t),XHo=i(na),fn=n(na,"P",{});var X3=s(fn);zHo=r(X3,"The model class to instantiate is selected based on the "),Dge=n(X3,"CODE",{});var _ct=s(Dge);QHo=r(_ct,"model_type"),_ct.forEach(t),WHo=r(X3,` property of the config object (either
passed as an argument or loaded from `),Gge=n(X3,"CODE",{});var bct=s(Gge);HHo=r(bct,"pretrained_model_name_or_path"),bct.forEach(t),UHo=r(X3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oge=n(X3,"CODE",{});var Fct=s(Oge);JHo=r(Fct,"pretrained_model_name_or_path"),Fct.forEach(t),YHo=r(X3,":"),X3.forEach(t),KHo=i(na),Vge=n(na,"UL",{});var vct=s(Vge);d1=n(vct,"LI",{});var p8e=s(d1);Xge=n(p8e,"STRONG",{});var Tct=s(Xge);ZHo=r(Tct,"detr"),Tct.forEach(t),eUo=r(p8e," \u2014 "),VG=n(p8e,"A",{href:!0});var Mct=s(VG);oUo=r(Mct,"DetrForObjectDetection"),Mct.forEach(t),rUo=r(p8e," (DETR model)"),p8e.forEach(t),vct.forEach(t),tUo=i(na),c1=n(na,"P",{});var _8e=s(c1);aUo=r(_8e,"The model is set in evaluation mode by default using "),zge=n(_8e,"CODE",{});var Ect=s(zge);nUo=r(Ect,"model.eval()"),Ect.forEach(t),sUo=r(_8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qge=n(_8e,"CODE",{});var Cct=s(Qge);lUo=r(Cct,"model.train()"),Cct.forEach(t),_8e.forEach(t),iUo=i(na),Wge=n(na,"P",{});var wct=s(Wge);dUo=r(wct,"Examples:"),wct.forEach(t),cUo=i(na),f(S0.$$.fragment,na),na.forEach(t),Sl.forEach(t),KRe=i(c),tc=n(c,"H2",{class:!0});var i$e=s(tc);m1=n(i$e,"A",{id:!0,class:!0,href:!0});var Act=s(m1);Hge=n(Act,"SPAN",{});var yct=s(Hge);f(R0.$$.fragment,yct),yct.forEach(t),Act.forEach(t),mUo=i(i$e),Uge=n(i$e,"SPAN",{});var Lct=s(Uge);fUo=r(Lct,"AutoModelForImageSegmentation"),Lct.forEach(t),i$e.forEach(t),ZRe=i(c),pr=n(c,"DIV",{class:!0});var Bl=s(pr);f(B0.$$.fragment,Bl),gUo=i(Bl),ac=n(Bl,"P",{});var XU=s(ac);hUo=r(XU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),XG=n(XU,"A",{href:!0});var xct=s(XG);uUo=r(xct,"from_pretrained()"),xct.forEach(t),pUo=r(XU," class method or the "),zG=n(XU,"A",{href:!0});var kct=s(zG);_Uo=r(kct,"from_config()"),kct.forEach(t),bUo=r(XU,` class
method.`),XU.forEach(t),FUo=i(Bl),P0=n(Bl,"P",{});var d$e=s(P0);vUo=r(d$e,"This class cannot be instantiated directly using "),Jge=n(d$e,"CODE",{});var Sct=s(Jge);TUo=r(Sct,"__init__()"),Sct.forEach(t),MUo=r(d$e," (throws an error)."),d$e.forEach(t),EUo=i(Bl),ct=n(Bl,"DIV",{class:!0});var Pl=s(ct);f($0.$$.fragment,Pl),CUo=i(Pl),Yge=n(Pl,"P",{});var Rct=s(Yge);wUo=r(Rct,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Rct.forEach(t),AUo=i(Pl),nc=n(Pl,"P",{});var zU=s(nc);yUo=r(zU,`Note:
Loading a model from its configuration file does `),Kge=n(zU,"STRONG",{});var Bct=s(Kge);LUo=r(Bct,"not"),Bct.forEach(t),xUo=r(zU,` load the model weights. It only affects the
model\u2019s configuration. Use `),QG=n(zU,"A",{href:!0});var Pct=s(QG);kUo=r(Pct,"from_pretrained()"),Pct.forEach(t),SUo=r(zU," to load the model weights."),zU.forEach(t),RUo=i(Pl),Zge=n(Pl,"P",{});var $ct=s(Zge);BUo=r($ct,"Examples:"),$ct.forEach(t),PUo=i(Pl),f(I0.$$.fragment,Pl),Pl.forEach(t),$Uo=i(Bl),to=n(Bl,"DIV",{class:!0});var sa=s(to);f(q0.$$.fragment,sa),IUo=i(sa),ehe=n(sa,"P",{});var Ict=s(ehe);qUo=r(Ict,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Ict.forEach(t),NUo=i(sa),gn=n(sa,"P",{});var z3=s(gn);jUo=r(z3,"The model class to instantiate is selected based on the "),ohe=n(z3,"CODE",{});var qct=s(ohe);DUo=r(qct,"model_type"),qct.forEach(t),GUo=r(z3,` property of the config object (either
passed as an argument or loaded from `),rhe=n(z3,"CODE",{});var Nct=s(rhe);OUo=r(Nct,"pretrained_model_name_or_path"),Nct.forEach(t),VUo=r(z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),the=n(z3,"CODE",{});var jct=s(the);XUo=r(jct,"pretrained_model_name_or_path"),jct.forEach(t),zUo=r(z3,":"),z3.forEach(t),QUo=i(sa),ahe=n(sa,"UL",{});var Dct=s(ahe);f1=n(Dct,"LI",{});var b8e=s(f1);nhe=n(b8e,"STRONG",{});var Gct=s(nhe);WUo=r(Gct,"detr"),Gct.forEach(t),HUo=r(b8e," \u2014 "),WG=n(b8e,"A",{href:!0});var Oct=s(WG);UUo=r(Oct,"DetrForSegmentation"),Oct.forEach(t),JUo=r(b8e," (DETR model)"),b8e.forEach(t),Dct.forEach(t),YUo=i(sa),g1=n(sa,"P",{});var F8e=s(g1);KUo=r(F8e,"The model is set in evaluation mode by default using "),she=n(F8e,"CODE",{});var Vct=s(she);ZUo=r(Vct,"model.eval()"),Vct.forEach(t),eJo=r(F8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=n(F8e,"CODE",{});var Xct=s(lhe);oJo=r(Xct,"model.train()"),Xct.forEach(t),F8e.forEach(t),rJo=i(sa),ihe=n(sa,"P",{});var zct=s(ihe);tJo=r(zct,"Examples:"),zct.forEach(t),aJo=i(sa),f(N0.$$.fragment,sa),sa.forEach(t),Bl.forEach(t),eBe=i(c),sc=n(c,"H2",{class:!0});var c$e=s(sc);h1=n(c$e,"A",{id:!0,class:!0,href:!0});var Qct=s(h1);dhe=n(Qct,"SPAN",{});var Wct=s(dhe);f(j0.$$.fragment,Wct),Wct.forEach(t),Qct.forEach(t),nJo=i(c$e),che=n(c$e,"SPAN",{});var Hct=s(che);sJo=r(Hct,"AutoModelForSemanticSegmentation"),Hct.forEach(t),c$e.forEach(t),oBe=i(c),_r=n(c,"DIV",{class:!0});var $l=s(_r);f(D0.$$.fragment,$l),lJo=i($l),lc=n($l,"P",{});var QU=s(lc);iJo=r(QU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),HG=n(QU,"A",{href:!0});var Uct=s(HG);dJo=r(Uct,"from_pretrained()"),Uct.forEach(t),cJo=r(QU," class method or the "),UG=n(QU,"A",{href:!0});var Jct=s(UG);mJo=r(Jct,"from_config()"),Jct.forEach(t),fJo=r(QU,` class
method.`),QU.forEach(t),gJo=i($l),G0=n($l,"P",{});var m$e=s(G0);hJo=r(m$e,"This class cannot be instantiated directly using "),mhe=n(m$e,"CODE",{});var Yct=s(mhe);uJo=r(Yct,"__init__()"),Yct.forEach(t),pJo=r(m$e," (throws an error)."),m$e.forEach(t),_Jo=i($l),mt=n($l,"DIV",{class:!0});var Il=s(mt);f(O0.$$.fragment,Il),bJo=i(Il),fhe=n(Il,"P",{});var Kct=s(fhe);FJo=r(Kct,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Kct.forEach(t),vJo=i(Il),ic=n(Il,"P",{});var WU=s(ic);TJo=r(WU,`Note:
Loading a model from its configuration file does `),ghe=n(WU,"STRONG",{});var Zct=s(ghe);MJo=r(Zct,"not"),Zct.forEach(t),EJo=r(WU,` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=n(WU,"A",{href:!0});var emt=s(JG);CJo=r(emt,"from_pretrained()"),emt.forEach(t),wJo=r(WU," to load the model weights."),WU.forEach(t),AJo=i(Il),hhe=n(Il,"P",{});var omt=s(hhe);yJo=r(omt,"Examples:"),omt.forEach(t),LJo=i(Il),f(V0.$$.fragment,Il),Il.forEach(t),xJo=i($l),ao=n($l,"DIV",{class:!0});var la=s(ao);f(X0.$$.fragment,la),kJo=i(la),uhe=n(la,"P",{});var rmt=s(uhe);SJo=r(rmt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),rmt.forEach(t),RJo=i(la),hn=n(la,"P",{});var Q3=s(hn);BJo=r(Q3,"The model class to instantiate is selected based on the "),phe=n(Q3,"CODE",{});var tmt=s(phe);PJo=r(tmt,"model_type"),tmt.forEach(t),$Jo=r(Q3,` property of the config object (either
passed as an argument or loaded from `),_he=n(Q3,"CODE",{});var amt=s(_he);IJo=r(amt,"pretrained_model_name_or_path"),amt.forEach(t),qJo=r(Q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bhe=n(Q3,"CODE",{});var nmt=s(bhe);NJo=r(nmt,"pretrained_model_name_or_path"),nmt.forEach(t),jJo=r(Q3,":"),Q3.forEach(t),DJo=i(la),dc=n(la,"UL",{});var HU=s(dc);u1=n(HU,"LI",{});var v8e=s(u1);Fhe=n(v8e,"STRONG",{});var smt=s(Fhe);GJo=r(smt,"beit"),smt.forEach(t),OJo=r(v8e," \u2014 "),YG=n(v8e,"A",{href:!0});var lmt=s(YG);VJo=r(lmt,"BeitForSemanticSegmentation"),lmt.forEach(t),XJo=r(v8e," (BEiT model)"),v8e.forEach(t),zJo=i(HU),p1=n(HU,"LI",{});var T8e=s(p1);vhe=n(T8e,"STRONG",{});var imt=s(vhe);QJo=r(imt,"dpt"),imt.forEach(t),WJo=r(T8e," \u2014 "),KG=n(T8e,"A",{href:!0});var dmt=s(KG);HJo=r(dmt,"DPTForSemanticSegmentation"),dmt.forEach(t),UJo=r(T8e," (DPT model)"),T8e.forEach(t),JJo=i(HU),_1=n(HU,"LI",{});var M8e=s(_1);The=n(M8e,"STRONG",{});var cmt=s(The);YJo=r(cmt,"segformer"),cmt.forEach(t),KJo=r(M8e," \u2014 "),ZG=n(M8e,"A",{href:!0});var mmt=s(ZG);ZJo=r(mmt,"SegformerForSemanticSegmentation"),mmt.forEach(t),eYo=r(M8e," (SegFormer model)"),M8e.forEach(t),HU.forEach(t),oYo=i(la),b1=n(la,"P",{});var E8e=s(b1);rYo=r(E8e,"The model is set in evaluation mode by default using "),Mhe=n(E8e,"CODE",{});var fmt=s(Mhe);tYo=r(fmt,"model.eval()"),fmt.forEach(t),aYo=r(E8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ehe=n(E8e,"CODE",{});var gmt=s(Ehe);nYo=r(gmt,"model.train()"),gmt.forEach(t),E8e.forEach(t),sYo=i(la),Che=n(la,"P",{});var hmt=s(Che);lYo=r(hmt,"Examples:"),hmt.forEach(t),iYo=i(la),f(z0.$$.fragment,la),la.forEach(t),$l.forEach(t),rBe=i(c),cc=n(c,"H2",{class:!0});var f$e=s(cc);F1=n(f$e,"A",{id:!0,class:!0,href:!0});var umt=s(F1);whe=n(umt,"SPAN",{});var pmt=s(whe);f(Q0.$$.fragment,pmt),pmt.forEach(t),umt.forEach(t),dYo=i(f$e),Ahe=n(f$e,"SPAN",{});var _mt=s(Ahe);cYo=r(_mt,"AutoModelForInstanceSegmentation"),_mt.forEach(t),f$e.forEach(t),tBe=i(c),br=n(c,"DIV",{class:!0});var ql=s(br);f(W0.$$.fragment,ql),mYo=i(ql),mc=n(ql,"P",{});var UU=s(mc);fYo=r(UU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),eO=n(UU,"A",{href:!0});var bmt=s(eO);gYo=r(bmt,"from_pretrained()"),bmt.forEach(t),hYo=r(UU," class method or the "),oO=n(UU,"A",{href:!0});var Fmt=s(oO);uYo=r(Fmt,"from_config()"),Fmt.forEach(t),pYo=r(UU,` class
method.`),UU.forEach(t),_Yo=i(ql),H0=n(ql,"P",{});var g$e=s(H0);bYo=r(g$e,"This class cannot be instantiated directly using "),yhe=n(g$e,"CODE",{});var vmt=s(yhe);FYo=r(vmt,"__init__()"),vmt.forEach(t),vYo=r(g$e," (throws an error)."),g$e.forEach(t),TYo=i(ql),ft=n(ql,"DIV",{class:!0});var Nl=s(ft);f(U0.$$.fragment,Nl),MYo=i(Nl),Lhe=n(Nl,"P",{});var Tmt=s(Lhe);EYo=r(Tmt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Tmt.forEach(t),CYo=i(Nl),fc=n(Nl,"P",{});var JU=s(fc);wYo=r(JU,`Note:
Loading a model from its configuration file does `),xhe=n(JU,"STRONG",{});var Mmt=s(xhe);AYo=r(Mmt,"not"),Mmt.forEach(t),yYo=r(JU,` load the model weights. It only affects the
model\u2019s configuration. Use `),rO=n(JU,"A",{href:!0});var Emt=s(rO);LYo=r(Emt,"from_pretrained()"),Emt.forEach(t),xYo=r(JU," to load the model weights."),JU.forEach(t),kYo=i(Nl),khe=n(Nl,"P",{});var Cmt=s(khe);SYo=r(Cmt,"Examples:"),Cmt.forEach(t),RYo=i(Nl),f(J0.$$.fragment,Nl),Nl.forEach(t),BYo=i(ql),no=n(ql,"DIV",{class:!0});var ia=s(no);f(Y0.$$.fragment,ia),PYo=i(ia),She=n(ia,"P",{});var wmt=s(She);$Yo=r(wmt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),wmt.forEach(t),IYo=i(ia),un=n(ia,"P",{});var W3=s(un);qYo=r(W3,"The model class to instantiate is selected based on the "),Rhe=n(W3,"CODE",{});var Amt=s(Rhe);NYo=r(Amt,"model_type"),Amt.forEach(t),jYo=r(W3,` property of the config object (either
passed as an argument or loaded from `),Bhe=n(W3,"CODE",{});var ymt=s(Bhe);DYo=r(ymt,"pretrained_model_name_or_path"),ymt.forEach(t),GYo=r(W3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Phe=n(W3,"CODE",{});var Lmt=s(Phe);OYo=r(Lmt,"pretrained_model_name_or_path"),Lmt.forEach(t),VYo=r(W3,":"),W3.forEach(t),XYo=i(ia),$he=n(ia,"UL",{});var xmt=s($he);v1=n(xmt,"LI",{});var C8e=s(v1);Ihe=n(C8e,"STRONG",{});var kmt=s(Ihe);zYo=r(kmt,"maskformer"),kmt.forEach(t),QYo=r(C8e," \u2014 "),tO=n(C8e,"A",{href:!0});var Smt=s(tO);WYo=r(Smt,"MaskFormerForInstanceSegmentation"),Smt.forEach(t),HYo=r(C8e," (MaskFormer model)"),C8e.forEach(t),xmt.forEach(t),UYo=i(ia),T1=n(ia,"P",{});var w8e=s(T1);JYo=r(w8e,"The model is set in evaluation mode by default using "),qhe=n(w8e,"CODE",{});var Rmt=s(qhe);YYo=r(Rmt,"model.eval()"),Rmt.forEach(t),KYo=r(w8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nhe=n(w8e,"CODE",{});var Bmt=s(Nhe);ZYo=r(Bmt,"model.train()"),Bmt.forEach(t),w8e.forEach(t),eKo=i(ia),jhe=n(ia,"P",{});var Pmt=s(jhe);oKo=r(Pmt,"Examples:"),Pmt.forEach(t),rKo=i(ia),f(K0.$$.fragment,ia),ia.forEach(t),ql.forEach(t),aBe=i(c),gc=n(c,"H2",{class:!0});var h$e=s(gc);M1=n(h$e,"A",{id:!0,class:!0,href:!0});var $mt=s(M1);Dhe=n($mt,"SPAN",{});var Imt=s(Dhe);f(Z0.$$.fragment,Imt),Imt.forEach(t),$mt.forEach(t),tKo=i(h$e),Ghe=n(h$e,"SPAN",{});var qmt=s(Ghe);aKo=r(qmt,"TFAutoModel"),qmt.forEach(t),h$e.forEach(t),nBe=i(c),Fr=n(c,"DIV",{class:!0});var jl=s(Fr);f(ey.$$.fragment,jl),nKo=i(jl),hc=n(jl,"P",{});var YU=s(hc);sKo=r(YU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aO=n(YU,"A",{href:!0});var Nmt=s(aO);lKo=r(Nmt,"from_pretrained()"),Nmt.forEach(t),iKo=r(YU," class method or the "),nO=n(YU,"A",{href:!0});var jmt=s(nO);dKo=r(jmt,"from_config()"),jmt.forEach(t),cKo=r(YU,` class
method.`),YU.forEach(t),mKo=i(jl),oy=n(jl,"P",{});var u$e=s(oy);fKo=r(u$e,"This class cannot be instantiated directly using "),Ohe=n(u$e,"CODE",{});var Dmt=s(Ohe);gKo=r(Dmt,"__init__()"),Dmt.forEach(t),hKo=r(u$e," (throws an error)."),u$e.forEach(t),uKo=i(jl),gt=n(jl,"DIV",{class:!0});var Dl=s(gt);f(ry.$$.fragment,Dl),pKo=i(Dl),Vhe=n(Dl,"P",{});var Gmt=s(Vhe);_Ko=r(Gmt,"Instantiates one of the base model classes of the library from a configuration."),Gmt.forEach(t),bKo=i(Dl),uc=n(Dl,"P",{});var KU=s(uc);FKo=r(KU,`Note:
Loading a model from its configuration file does `),Xhe=n(KU,"STRONG",{});var Omt=s(Xhe);vKo=r(Omt,"not"),Omt.forEach(t),TKo=r(KU,` load the model weights. It only affects the
model\u2019s configuration. Use `),sO=n(KU,"A",{href:!0});var Vmt=s(sO);MKo=r(Vmt,"from_pretrained()"),Vmt.forEach(t),EKo=r(KU," to load the model weights."),KU.forEach(t),CKo=i(Dl),zhe=n(Dl,"P",{});var Xmt=s(zhe);wKo=r(Xmt,"Examples:"),Xmt.forEach(t),AKo=i(Dl),f(ty.$$.fragment,Dl),Dl.forEach(t),yKo=i(jl),ho=n(jl,"DIV",{class:!0});var ua=s(ho);f(ay.$$.fragment,ua),LKo=i(ua),Qhe=n(ua,"P",{});var zmt=s(Qhe);xKo=r(zmt,"Instantiate one of the base model classes of the library from a pretrained model."),zmt.forEach(t),kKo=i(ua),pn=n(ua,"P",{});var H3=s(pn);SKo=r(H3,"The model class to instantiate is selected based on the "),Whe=n(H3,"CODE",{});var Qmt=s(Whe);RKo=r(Qmt,"model_type"),Qmt.forEach(t),BKo=r(H3,` property of the config object (either
passed as an argument or loaded from `),Hhe=n(H3,"CODE",{});var Wmt=s(Hhe);PKo=r(Wmt,"pretrained_model_name_or_path"),Wmt.forEach(t),$Ko=r(H3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=n(H3,"CODE",{});var Hmt=s(Uhe);IKo=r(Hmt,"pretrained_model_name_or_path"),Hmt.forEach(t),qKo=r(H3,":"),H3.forEach(t),NKo=i(ua),x=n(ua,"UL",{});var k=s(x);E1=n(k,"LI",{});var A8e=s(E1);Jhe=n(A8e,"STRONG",{});var Umt=s(Jhe);jKo=r(Umt,"albert"),Umt.forEach(t),DKo=r(A8e," \u2014 "),lO=n(A8e,"A",{href:!0});var Jmt=s(lO);GKo=r(Jmt,"TFAlbertModel"),Jmt.forEach(t),OKo=r(A8e," (ALBERT model)"),A8e.forEach(t),VKo=i(k),C1=n(k,"LI",{});var y8e=s(C1);Yhe=n(y8e,"STRONG",{});var Ymt=s(Yhe);XKo=r(Ymt,"bart"),Ymt.forEach(t),zKo=r(y8e," \u2014 "),iO=n(y8e,"A",{href:!0});var Kmt=s(iO);QKo=r(Kmt,"TFBartModel"),Kmt.forEach(t),WKo=r(y8e," (BART model)"),y8e.forEach(t),HKo=i(k),w1=n(k,"LI",{});var L8e=s(w1);Khe=n(L8e,"STRONG",{});var Zmt=s(Khe);UKo=r(Zmt,"bert"),Zmt.forEach(t),JKo=r(L8e," \u2014 "),dO=n(L8e,"A",{href:!0});var eft=s(dO);YKo=r(eft,"TFBertModel"),eft.forEach(t),KKo=r(L8e," (BERT model)"),L8e.forEach(t),ZKo=i(k),A1=n(k,"LI",{});var x8e=s(A1);Zhe=n(x8e,"STRONG",{});var oft=s(Zhe);eZo=r(oft,"blenderbot"),oft.forEach(t),oZo=r(x8e," \u2014 "),cO=n(x8e,"A",{href:!0});var rft=s(cO);rZo=r(rft,"TFBlenderbotModel"),rft.forEach(t),tZo=r(x8e," (Blenderbot model)"),x8e.forEach(t),aZo=i(k),y1=n(k,"LI",{});var k8e=s(y1);eue=n(k8e,"STRONG",{});var tft=s(eue);nZo=r(tft,"blenderbot-small"),tft.forEach(t),sZo=r(k8e," \u2014 "),mO=n(k8e,"A",{href:!0});var aft=s(mO);lZo=r(aft,"TFBlenderbotSmallModel"),aft.forEach(t),iZo=r(k8e," (BlenderbotSmall model)"),k8e.forEach(t),dZo=i(k),L1=n(k,"LI",{});var S8e=s(L1);oue=n(S8e,"STRONG",{});var nft=s(oue);cZo=r(nft,"camembert"),nft.forEach(t),mZo=r(S8e," \u2014 "),fO=n(S8e,"A",{href:!0});var sft=s(fO);fZo=r(sft,"TFCamembertModel"),sft.forEach(t),gZo=r(S8e," (CamemBERT model)"),S8e.forEach(t),hZo=i(k),x1=n(k,"LI",{});var R8e=s(x1);rue=n(R8e,"STRONG",{});var lft=s(rue);uZo=r(lft,"clip"),lft.forEach(t),pZo=r(R8e," \u2014 "),gO=n(R8e,"A",{href:!0});var ift=s(gO);_Zo=r(ift,"TFCLIPModel"),ift.forEach(t),bZo=r(R8e," (CLIP model)"),R8e.forEach(t),FZo=i(k),k1=n(k,"LI",{});var B8e=s(k1);tue=n(B8e,"STRONG",{});var dft=s(tue);vZo=r(dft,"convbert"),dft.forEach(t),TZo=r(B8e," \u2014 "),hO=n(B8e,"A",{href:!0});var cft=s(hO);MZo=r(cft,"TFConvBertModel"),cft.forEach(t),EZo=r(B8e," (ConvBERT model)"),B8e.forEach(t),CZo=i(k),S1=n(k,"LI",{});var P8e=s(S1);aue=n(P8e,"STRONG",{});var mft=s(aue);wZo=r(mft,"convnext"),mft.forEach(t),AZo=r(P8e," \u2014 "),uO=n(P8e,"A",{href:!0});var fft=s(uO);yZo=r(fft,"TFConvNextModel"),fft.forEach(t),LZo=r(P8e," (ConvNext model)"),P8e.forEach(t),xZo=i(k),R1=n(k,"LI",{});var $8e=s(R1);nue=n($8e,"STRONG",{});var gft=s(nue);kZo=r(gft,"ctrl"),gft.forEach(t),SZo=r($8e," \u2014 "),pO=n($8e,"A",{href:!0});var hft=s(pO);RZo=r(hft,"TFCTRLModel"),hft.forEach(t),BZo=r($8e," (CTRL model)"),$8e.forEach(t),PZo=i(k),B1=n(k,"LI",{});var I8e=s(B1);sue=n(I8e,"STRONG",{});var uft=s(sue);$Zo=r(uft,"deberta"),uft.forEach(t),IZo=r(I8e," \u2014 "),_O=n(I8e,"A",{href:!0});var pft=s(_O);qZo=r(pft,"TFDebertaModel"),pft.forEach(t),NZo=r(I8e," (DeBERTa model)"),I8e.forEach(t),jZo=i(k),P1=n(k,"LI",{});var q8e=s(P1);lue=n(q8e,"STRONG",{});var _ft=s(lue);DZo=r(_ft,"deberta-v2"),_ft.forEach(t),GZo=r(q8e," \u2014 "),bO=n(q8e,"A",{href:!0});var bft=s(bO);OZo=r(bft,"TFDebertaV2Model"),bft.forEach(t),VZo=r(q8e," (DeBERTa-v2 model)"),q8e.forEach(t),XZo=i(k),$1=n(k,"LI",{});var N8e=s($1);iue=n(N8e,"STRONG",{});var Fft=s(iue);zZo=r(Fft,"distilbert"),Fft.forEach(t),QZo=r(N8e," \u2014 "),FO=n(N8e,"A",{href:!0});var vft=s(FO);WZo=r(vft,"TFDistilBertModel"),vft.forEach(t),HZo=r(N8e," (DistilBERT model)"),N8e.forEach(t),UZo=i(k),I1=n(k,"LI",{});var j8e=s(I1);due=n(j8e,"STRONG",{});var Tft=s(due);JZo=r(Tft,"dpr"),Tft.forEach(t),YZo=r(j8e," \u2014 "),vO=n(j8e,"A",{href:!0});var Mft=s(vO);KZo=r(Mft,"TFDPRQuestionEncoder"),Mft.forEach(t),ZZo=r(j8e," (DPR model)"),j8e.forEach(t),eer=i(k),q1=n(k,"LI",{});var D8e=s(q1);cue=n(D8e,"STRONG",{});var Eft=s(cue);oer=r(Eft,"electra"),Eft.forEach(t),rer=r(D8e," \u2014 "),TO=n(D8e,"A",{href:!0});var Cft=s(TO);ter=r(Cft,"TFElectraModel"),Cft.forEach(t),aer=r(D8e," (ELECTRA model)"),D8e.forEach(t),ner=i(k),N1=n(k,"LI",{});var G8e=s(N1);mue=n(G8e,"STRONG",{});var wft=s(mue);ser=r(wft,"flaubert"),wft.forEach(t),ler=r(G8e," \u2014 "),MO=n(G8e,"A",{href:!0});var Aft=s(MO);ier=r(Aft,"TFFlaubertModel"),Aft.forEach(t),der=r(G8e," (FlauBERT model)"),G8e.forEach(t),cer=i(k),Gs=n(k,"LI",{});var c9=s(Gs);fue=n(c9,"STRONG",{});var yft=s(fue);mer=r(yft,"funnel"),yft.forEach(t),fer=r(c9," \u2014 "),EO=n(c9,"A",{href:!0});var Lft=s(EO);ger=r(Lft,"TFFunnelModel"),Lft.forEach(t),her=r(c9," or "),CO=n(c9,"A",{href:!0});var xft=s(CO);uer=r(xft,"TFFunnelBaseModel"),xft.forEach(t),per=r(c9," (Funnel Transformer model)"),c9.forEach(t),_er=i(k),j1=n(k,"LI",{});var O8e=s(j1);gue=n(O8e,"STRONG",{});var kft=s(gue);ber=r(kft,"gpt2"),kft.forEach(t),Fer=r(O8e," \u2014 "),wO=n(O8e,"A",{href:!0});var Sft=s(wO);ver=r(Sft,"TFGPT2Model"),Sft.forEach(t),Ter=r(O8e," (OpenAI GPT-2 model)"),O8e.forEach(t),Mer=i(k),D1=n(k,"LI",{});var V8e=s(D1);hue=n(V8e,"STRONG",{});var Rft=s(hue);Eer=r(Rft,"gptj"),Rft.forEach(t),Cer=r(V8e," \u2014 "),AO=n(V8e,"A",{href:!0});var Bft=s(AO);wer=r(Bft,"TFGPTJModel"),Bft.forEach(t),Aer=r(V8e," (GPT-J model)"),V8e.forEach(t),yer=i(k),G1=n(k,"LI",{});var X8e=s(G1);uue=n(X8e,"STRONG",{});var Pft=s(uue);Ler=r(Pft,"hubert"),Pft.forEach(t),xer=r(X8e," \u2014 "),yO=n(X8e,"A",{href:!0});var $ft=s(yO);ker=r($ft,"TFHubertModel"),$ft.forEach(t),Ser=r(X8e," (Hubert model)"),X8e.forEach(t),Rer=i(k),O1=n(k,"LI",{});var z8e=s(O1);pue=n(z8e,"STRONG",{});var Ift=s(pue);Ber=r(Ift,"layoutlm"),Ift.forEach(t),Per=r(z8e," \u2014 "),LO=n(z8e,"A",{href:!0});var qft=s(LO);$er=r(qft,"TFLayoutLMModel"),qft.forEach(t),Ier=r(z8e," (LayoutLM model)"),z8e.forEach(t),qer=i(k),V1=n(k,"LI",{});var Q8e=s(V1);_ue=n(Q8e,"STRONG",{});var Nft=s(_ue);Ner=r(Nft,"led"),Nft.forEach(t),jer=r(Q8e," \u2014 "),xO=n(Q8e,"A",{href:!0});var jft=s(xO);Der=r(jft,"TFLEDModel"),jft.forEach(t),Ger=r(Q8e," (LED model)"),Q8e.forEach(t),Oer=i(k),X1=n(k,"LI",{});var W8e=s(X1);bue=n(W8e,"STRONG",{});var Dft=s(bue);Ver=r(Dft,"longformer"),Dft.forEach(t),Xer=r(W8e," \u2014 "),kO=n(W8e,"A",{href:!0});var Gft=s(kO);zer=r(Gft,"TFLongformerModel"),Gft.forEach(t),Qer=r(W8e," (Longformer model)"),W8e.forEach(t),Wer=i(k),z1=n(k,"LI",{});var H8e=s(z1);Fue=n(H8e,"STRONG",{});var Oft=s(Fue);Her=r(Oft,"lxmert"),Oft.forEach(t),Uer=r(H8e," \u2014 "),SO=n(H8e,"A",{href:!0});var Vft=s(SO);Jer=r(Vft,"TFLxmertModel"),Vft.forEach(t),Yer=r(H8e," (LXMERT model)"),H8e.forEach(t),Ker=i(k),Q1=n(k,"LI",{});var U8e=s(Q1);vue=n(U8e,"STRONG",{});var Xft=s(vue);Zer=r(Xft,"marian"),Xft.forEach(t),eor=r(U8e," \u2014 "),RO=n(U8e,"A",{href:!0});var zft=s(RO);oor=r(zft,"TFMarianModel"),zft.forEach(t),ror=r(U8e," (Marian model)"),U8e.forEach(t),tor=i(k),W1=n(k,"LI",{});var J8e=s(W1);Tue=n(J8e,"STRONG",{});var Qft=s(Tue);aor=r(Qft,"mbart"),Qft.forEach(t),nor=r(J8e," \u2014 "),BO=n(J8e,"A",{href:!0});var Wft=s(BO);sor=r(Wft,"TFMBartModel"),Wft.forEach(t),lor=r(J8e," (mBART model)"),J8e.forEach(t),ior=i(k),H1=n(k,"LI",{});var Y8e=s(H1);Mue=n(Y8e,"STRONG",{});var Hft=s(Mue);dor=r(Hft,"mobilebert"),Hft.forEach(t),cor=r(Y8e," \u2014 "),PO=n(Y8e,"A",{href:!0});var Uft=s(PO);mor=r(Uft,"TFMobileBertModel"),Uft.forEach(t),gor=r(Y8e," (MobileBERT model)"),Y8e.forEach(t),hor=i(k),U1=n(k,"LI",{});var K8e=s(U1);Eue=n(K8e,"STRONG",{});var Jft=s(Eue);uor=r(Jft,"mpnet"),Jft.forEach(t),por=r(K8e," \u2014 "),$O=n(K8e,"A",{href:!0});var Yft=s($O);_or=r(Yft,"TFMPNetModel"),Yft.forEach(t),bor=r(K8e," (MPNet model)"),K8e.forEach(t),For=i(k),J1=n(k,"LI",{});var Z8e=s(J1);Cue=n(Z8e,"STRONG",{});var Kft=s(Cue);vor=r(Kft,"mt5"),Kft.forEach(t),Tor=r(Z8e," \u2014 "),IO=n(Z8e,"A",{href:!0});var Zft=s(IO);Mor=r(Zft,"TFMT5Model"),Zft.forEach(t),Eor=r(Z8e," (mT5 model)"),Z8e.forEach(t),Cor=i(k),Y1=n(k,"LI",{});var e7e=s(Y1);wue=n(e7e,"STRONG",{});var egt=s(wue);wor=r(egt,"openai-gpt"),egt.forEach(t),Aor=r(e7e," \u2014 "),qO=n(e7e,"A",{href:!0});var ogt=s(qO);yor=r(ogt,"TFOpenAIGPTModel"),ogt.forEach(t),Lor=r(e7e," (OpenAI GPT model)"),e7e.forEach(t),xor=i(k),K1=n(k,"LI",{});var o7e=s(K1);Aue=n(o7e,"STRONG",{});var rgt=s(Aue);kor=r(rgt,"pegasus"),rgt.forEach(t),Sor=r(o7e," \u2014 "),NO=n(o7e,"A",{href:!0});var tgt=s(NO);Ror=r(tgt,"TFPegasusModel"),tgt.forEach(t),Bor=r(o7e," (Pegasus model)"),o7e.forEach(t),Por=i(k),Z1=n(k,"LI",{});var r7e=s(Z1);yue=n(r7e,"STRONG",{});var agt=s(yue);$or=r(agt,"rembert"),agt.forEach(t),Ior=r(r7e," \u2014 "),jO=n(r7e,"A",{href:!0});var ngt=s(jO);qor=r(ngt,"TFRemBertModel"),ngt.forEach(t),Nor=r(r7e," (RemBERT model)"),r7e.forEach(t),jor=i(k),eM=n(k,"LI",{});var t7e=s(eM);Lue=n(t7e,"STRONG",{});var sgt=s(Lue);Dor=r(sgt,"roberta"),sgt.forEach(t),Gor=r(t7e," \u2014 "),DO=n(t7e,"A",{href:!0});var lgt=s(DO);Oor=r(lgt,"TFRobertaModel"),lgt.forEach(t),Vor=r(t7e," (RoBERTa model)"),t7e.forEach(t),Xor=i(k),oM=n(k,"LI",{});var a7e=s(oM);xue=n(a7e,"STRONG",{});var igt=s(xue);zor=r(igt,"roformer"),igt.forEach(t),Qor=r(a7e," \u2014 "),GO=n(a7e,"A",{href:!0});var dgt=s(GO);Wor=r(dgt,"TFRoFormerModel"),dgt.forEach(t),Hor=r(a7e," (RoFormer model)"),a7e.forEach(t),Uor=i(k),rM=n(k,"LI",{});var n7e=s(rM);kue=n(n7e,"STRONG",{});var cgt=s(kue);Jor=r(cgt,"speech_to_text"),cgt.forEach(t),Yor=r(n7e," \u2014 "),OO=n(n7e,"A",{href:!0});var mgt=s(OO);Kor=r(mgt,"TFSpeech2TextModel"),mgt.forEach(t),Zor=r(n7e," (Speech2Text model)"),n7e.forEach(t),err=i(k),tM=n(k,"LI",{});var s7e=s(tM);Sue=n(s7e,"STRONG",{});var fgt=s(Sue);orr=r(fgt,"t5"),fgt.forEach(t),rrr=r(s7e," \u2014 "),VO=n(s7e,"A",{href:!0});var ggt=s(VO);trr=r(ggt,"TFT5Model"),ggt.forEach(t),arr=r(s7e," (T5 model)"),s7e.forEach(t),nrr=i(k),aM=n(k,"LI",{});var l7e=s(aM);Rue=n(l7e,"STRONG",{});var hgt=s(Rue);srr=r(hgt,"tapas"),hgt.forEach(t),lrr=r(l7e," \u2014 "),XO=n(l7e,"A",{href:!0});var ugt=s(XO);irr=r(ugt,"TFTapasModel"),ugt.forEach(t),drr=r(l7e," (TAPAS model)"),l7e.forEach(t),crr=i(k),nM=n(k,"LI",{});var i7e=s(nM);Bue=n(i7e,"STRONG",{});var pgt=s(Bue);mrr=r(pgt,"transfo-xl"),pgt.forEach(t),frr=r(i7e," \u2014 "),zO=n(i7e,"A",{href:!0});var _gt=s(zO);grr=r(_gt,"TFTransfoXLModel"),_gt.forEach(t),hrr=r(i7e," (Transformer-XL model)"),i7e.forEach(t),urr=i(k),sM=n(k,"LI",{});var d7e=s(sM);Pue=n(d7e,"STRONG",{});var bgt=s(Pue);prr=r(bgt,"vit"),bgt.forEach(t),_rr=r(d7e," \u2014 "),QO=n(d7e,"A",{href:!0});var Fgt=s(QO);brr=r(Fgt,"TFViTModel"),Fgt.forEach(t),Frr=r(d7e," (ViT model)"),d7e.forEach(t),vrr=i(k),lM=n(k,"LI",{});var c7e=s(lM);$ue=n(c7e,"STRONG",{});var vgt=s($ue);Trr=r(vgt,"vit_mae"),vgt.forEach(t),Mrr=r(c7e," \u2014 "),WO=n(c7e,"A",{href:!0});var Tgt=s(WO);Err=r(Tgt,"TFViTMAEModel"),Tgt.forEach(t),Crr=r(c7e," (ViTMAE model)"),c7e.forEach(t),wrr=i(k),iM=n(k,"LI",{});var m7e=s(iM);Iue=n(m7e,"STRONG",{});var Mgt=s(Iue);Arr=r(Mgt,"wav2vec2"),Mgt.forEach(t),yrr=r(m7e," \u2014 "),HO=n(m7e,"A",{href:!0});var Egt=s(HO);Lrr=r(Egt,"TFWav2Vec2Model"),Egt.forEach(t),xrr=r(m7e," (Wav2Vec2 model)"),m7e.forEach(t),krr=i(k),dM=n(k,"LI",{});var f7e=s(dM);que=n(f7e,"STRONG",{});var Cgt=s(que);Srr=r(Cgt,"xlm"),Cgt.forEach(t),Rrr=r(f7e," \u2014 "),UO=n(f7e,"A",{href:!0});var wgt=s(UO);Brr=r(wgt,"TFXLMModel"),wgt.forEach(t),Prr=r(f7e," (XLM model)"),f7e.forEach(t),$rr=i(k),cM=n(k,"LI",{});var g7e=s(cM);Nue=n(g7e,"STRONG",{});var Agt=s(Nue);Irr=r(Agt,"xlm-roberta"),Agt.forEach(t),qrr=r(g7e," \u2014 "),JO=n(g7e,"A",{href:!0});var ygt=s(JO);Nrr=r(ygt,"TFXLMRobertaModel"),ygt.forEach(t),jrr=r(g7e," (XLM-RoBERTa model)"),g7e.forEach(t),Drr=i(k),mM=n(k,"LI",{});var h7e=s(mM);jue=n(h7e,"STRONG",{});var Lgt=s(jue);Grr=r(Lgt,"xlnet"),Lgt.forEach(t),Orr=r(h7e," \u2014 "),YO=n(h7e,"A",{href:!0});var xgt=s(YO);Vrr=r(xgt,"TFXLNetModel"),xgt.forEach(t),Xrr=r(h7e," (XLNet model)"),h7e.forEach(t),k.forEach(t),zrr=i(ua),Due=n(ua,"P",{});var kgt=s(Due);Qrr=r(kgt,"Examples:"),kgt.forEach(t),Wrr=i(ua),f(ny.$$.fragment,ua),ua.forEach(t),jl.forEach(t),sBe=i(c),pc=n(c,"H2",{class:!0});var p$e=s(pc);fM=n(p$e,"A",{id:!0,class:!0,href:!0});var Sgt=s(fM);Gue=n(Sgt,"SPAN",{});var Rgt=s(Gue);f(sy.$$.fragment,Rgt),Rgt.forEach(t),Sgt.forEach(t),Hrr=i(p$e),Oue=n(p$e,"SPAN",{});var Bgt=s(Oue);Urr=r(Bgt,"TFAutoModelForPreTraining"),Bgt.forEach(t),p$e.forEach(t),lBe=i(c),vr=n(c,"DIV",{class:!0});var Gl=s(vr);f(ly.$$.fragment,Gl),Jrr=i(Gl),_c=n(Gl,"P",{});var ZU=s(_c);Yrr=r(ZU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),KO=n(ZU,"A",{href:!0});var Pgt=s(KO);Krr=r(Pgt,"from_pretrained()"),Pgt.forEach(t),Zrr=r(ZU," class method or the "),ZO=n(ZU,"A",{href:!0});var $gt=s(ZO);etr=r($gt,"from_config()"),$gt.forEach(t),otr=r(ZU,` class
method.`),ZU.forEach(t),rtr=i(Gl),iy=n(Gl,"P",{});var _$e=s(iy);ttr=r(_$e,"This class cannot be instantiated directly using "),Vue=n(_$e,"CODE",{});var Igt=s(Vue);atr=r(Igt,"__init__()"),Igt.forEach(t),ntr=r(_$e," (throws an error)."),_$e.forEach(t),str=i(Gl),ht=n(Gl,"DIV",{class:!0});var Ol=s(ht);f(dy.$$.fragment,Ol),ltr=i(Ol),Xue=n(Ol,"P",{});var qgt=s(Xue);itr=r(qgt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),qgt.forEach(t),dtr=i(Ol),bc=n(Ol,"P",{});var eJ=s(bc);ctr=r(eJ,`Note:
Loading a model from its configuration file does `),zue=n(eJ,"STRONG",{});var Ngt=s(zue);mtr=r(Ngt,"not"),Ngt.forEach(t),ftr=r(eJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eV=n(eJ,"A",{href:!0});var jgt=s(eV);gtr=r(jgt,"from_pretrained()"),jgt.forEach(t),htr=r(eJ," to load the model weights."),eJ.forEach(t),utr=i(Ol),Que=n(Ol,"P",{});var Dgt=s(Que);ptr=r(Dgt,"Examples:"),Dgt.forEach(t),_tr=i(Ol),f(cy.$$.fragment,Ol),Ol.forEach(t),btr=i(Gl),uo=n(Gl,"DIV",{class:!0});var pa=s(uo);f(my.$$.fragment,pa),Ftr=i(pa),Wue=n(pa,"P",{});var Ggt=s(Wue);vtr=r(Ggt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ggt.forEach(t),Ttr=i(pa),_n=n(pa,"P",{});var U3=s(_n);Mtr=r(U3,"The model class to instantiate is selected based on the "),Hue=n(U3,"CODE",{});var Ogt=s(Hue);Etr=r(Ogt,"model_type"),Ogt.forEach(t),Ctr=r(U3,` property of the config object (either
passed as an argument or loaded from `),Uue=n(U3,"CODE",{});var Vgt=s(Uue);wtr=r(Vgt,"pretrained_model_name_or_path"),Vgt.forEach(t),Atr=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jue=n(U3,"CODE",{});var Xgt=s(Jue);ytr=r(Xgt,"pretrained_model_name_or_path"),Xgt.forEach(t),Ltr=r(U3,":"),U3.forEach(t),xtr=i(pa),H=n(pa,"UL",{});var U=s(H);gM=n(U,"LI",{});var u7e=s(gM);Yue=n(u7e,"STRONG",{});var zgt=s(Yue);ktr=r(zgt,"albert"),zgt.forEach(t),Str=r(u7e," \u2014 "),oV=n(u7e,"A",{href:!0});var Qgt=s(oV);Rtr=r(Qgt,"TFAlbertForPreTraining"),Qgt.forEach(t),Btr=r(u7e," (ALBERT model)"),u7e.forEach(t),Ptr=i(U),hM=n(U,"LI",{});var p7e=s(hM);Kue=n(p7e,"STRONG",{});var Wgt=s(Kue);$tr=r(Wgt,"bart"),Wgt.forEach(t),Itr=r(p7e," \u2014 "),rV=n(p7e,"A",{href:!0});var Hgt=s(rV);qtr=r(Hgt,"TFBartForConditionalGeneration"),Hgt.forEach(t),Ntr=r(p7e," (BART model)"),p7e.forEach(t),jtr=i(U),uM=n(U,"LI",{});var _7e=s(uM);Zue=n(_7e,"STRONG",{});var Ugt=s(Zue);Dtr=r(Ugt,"bert"),Ugt.forEach(t),Gtr=r(_7e," \u2014 "),tV=n(_7e,"A",{href:!0});var Jgt=s(tV);Otr=r(Jgt,"TFBertForPreTraining"),Jgt.forEach(t),Vtr=r(_7e," (BERT model)"),_7e.forEach(t),Xtr=i(U),pM=n(U,"LI",{});var b7e=s(pM);epe=n(b7e,"STRONG",{});var Ygt=s(epe);ztr=r(Ygt,"camembert"),Ygt.forEach(t),Qtr=r(b7e," \u2014 "),aV=n(b7e,"A",{href:!0});var Kgt=s(aV);Wtr=r(Kgt,"TFCamembertForMaskedLM"),Kgt.forEach(t),Htr=r(b7e," (CamemBERT model)"),b7e.forEach(t),Utr=i(U),_M=n(U,"LI",{});var F7e=s(_M);ope=n(F7e,"STRONG",{});var Zgt=s(ope);Jtr=r(Zgt,"ctrl"),Zgt.forEach(t),Ytr=r(F7e," \u2014 "),nV=n(F7e,"A",{href:!0});var eht=s(nV);Ktr=r(eht,"TFCTRLLMHeadModel"),eht.forEach(t),Ztr=r(F7e," (CTRL model)"),F7e.forEach(t),ear=i(U),bM=n(U,"LI",{});var v7e=s(bM);rpe=n(v7e,"STRONG",{});var oht=s(rpe);oar=r(oht,"distilbert"),oht.forEach(t),rar=r(v7e," \u2014 "),sV=n(v7e,"A",{href:!0});var rht=s(sV);tar=r(rht,"TFDistilBertForMaskedLM"),rht.forEach(t),aar=r(v7e," (DistilBERT model)"),v7e.forEach(t),nar=i(U),FM=n(U,"LI",{});var T7e=s(FM);tpe=n(T7e,"STRONG",{});var tht=s(tpe);sar=r(tht,"electra"),tht.forEach(t),lar=r(T7e," \u2014 "),lV=n(T7e,"A",{href:!0});var aht=s(lV);iar=r(aht,"TFElectraForPreTraining"),aht.forEach(t),dar=r(T7e," (ELECTRA model)"),T7e.forEach(t),car=i(U),vM=n(U,"LI",{});var M7e=s(vM);ape=n(M7e,"STRONG",{});var nht=s(ape);mar=r(nht,"flaubert"),nht.forEach(t),far=r(M7e," \u2014 "),iV=n(M7e,"A",{href:!0});var sht=s(iV);gar=r(sht,"TFFlaubertWithLMHeadModel"),sht.forEach(t),har=r(M7e," (FlauBERT model)"),M7e.forEach(t),uar=i(U),TM=n(U,"LI",{});var E7e=s(TM);npe=n(E7e,"STRONG",{});var lht=s(npe);par=r(lht,"funnel"),lht.forEach(t),_ar=r(E7e," \u2014 "),dV=n(E7e,"A",{href:!0});var iht=s(dV);bar=r(iht,"TFFunnelForPreTraining"),iht.forEach(t),Far=r(E7e," (Funnel Transformer model)"),E7e.forEach(t),Tar=i(U),MM=n(U,"LI",{});var C7e=s(MM);spe=n(C7e,"STRONG",{});var dht=s(spe);Mar=r(dht,"gpt2"),dht.forEach(t),Ear=r(C7e," \u2014 "),cV=n(C7e,"A",{href:!0});var cht=s(cV);Car=r(cht,"TFGPT2LMHeadModel"),cht.forEach(t),war=r(C7e," (OpenAI GPT-2 model)"),C7e.forEach(t),Aar=i(U),EM=n(U,"LI",{});var w7e=s(EM);lpe=n(w7e,"STRONG",{});var mht=s(lpe);yar=r(mht,"layoutlm"),mht.forEach(t),Lar=r(w7e," \u2014 "),mV=n(w7e,"A",{href:!0});var fht=s(mV);xar=r(fht,"TFLayoutLMForMaskedLM"),fht.forEach(t),kar=r(w7e," (LayoutLM model)"),w7e.forEach(t),Sar=i(U),CM=n(U,"LI",{});var A7e=s(CM);ipe=n(A7e,"STRONG",{});var ght=s(ipe);Rar=r(ght,"lxmert"),ght.forEach(t),Bar=r(A7e," \u2014 "),fV=n(A7e,"A",{href:!0});var hht=s(fV);Par=r(hht,"TFLxmertForPreTraining"),hht.forEach(t),$ar=r(A7e," (LXMERT model)"),A7e.forEach(t),Iar=i(U),wM=n(U,"LI",{});var y7e=s(wM);dpe=n(y7e,"STRONG",{});var uht=s(dpe);qar=r(uht,"mobilebert"),uht.forEach(t),Nar=r(y7e," \u2014 "),gV=n(y7e,"A",{href:!0});var pht=s(gV);jar=r(pht,"TFMobileBertForPreTraining"),pht.forEach(t),Dar=r(y7e," (MobileBERT model)"),y7e.forEach(t),Gar=i(U),AM=n(U,"LI",{});var L7e=s(AM);cpe=n(L7e,"STRONG",{});var _ht=s(cpe);Oar=r(_ht,"mpnet"),_ht.forEach(t),Var=r(L7e," \u2014 "),hV=n(L7e,"A",{href:!0});var bht=s(hV);Xar=r(bht,"TFMPNetForMaskedLM"),bht.forEach(t),zar=r(L7e," (MPNet model)"),L7e.forEach(t),Qar=i(U),yM=n(U,"LI",{});var x7e=s(yM);mpe=n(x7e,"STRONG",{});var Fht=s(mpe);War=r(Fht,"openai-gpt"),Fht.forEach(t),Har=r(x7e," \u2014 "),uV=n(x7e,"A",{href:!0});var vht=s(uV);Uar=r(vht,"TFOpenAIGPTLMHeadModel"),vht.forEach(t),Jar=r(x7e," (OpenAI GPT model)"),x7e.forEach(t),Yar=i(U),LM=n(U,"LI",{});var k7e=s(LM);fpe=n(k7e,"STRONG",{});var Tht=s(fpe);Kar=r(Tht,"roberta"),Tht.forEach(t),Zar=r(k7e," \u2014 "),pV=n(k7e,"A",{href:!0});var Mht=s(pV);enr=r(Mht,"TFRobertaForMaskedLM"),Mht.forEach(t),onr=r(k7e," (RoBERTa model)"),k7e.forEach(t),rnr=i(U),xM=n(U,"LI",{});var S7e=s(xM);gpe=n(S7e,"STRONG",{});var Eht=s(gpe);tnr=r(Eht,"t5"),Eht.forEach(t),anr=r(S7e," \u2014 "),_V=n(S7e,"A",{href:!0});var Cht=s(_V);nnr=r(Cht,"TFT5ForConditionalGeneration"),Cht.forEach(t),snr=r(S7e," (T5 model)"),S7e.forEach(t),lnr=i(U),kM=n(U,"LI",{});var R7e=s(kM);hpe=n(R7e,"STRONG",{});var wht=s(hpe);inr=r(wht,"tapas"),wht.forEach(t),dnr=r(R7e," \u2014 "),bV=n(R7e,"A",{href:!0});var Aht=s(bV);cnr=r(Aht,"TFTapasForMaskedLM"),Aht.forEach(t),mnr=r(R7e," (TAPAS model)"),R7e.forEach(t),fnr=i(U),SM=n(U,"LI",{});var B7e=s(SM);upe=n(B7e,"STRONG",{});var yht=s(upe);gnr=r(yht,"transfo-xl"),yht.forEach(t),hnr=r(B7e," \u2014 "),FV=n(B7e,"A",{href:!0});var Lht=s(FV);unr=r(Lht,"TFTransfoXLLMHeadModel"),Lht.forEach(t),pnr=r(B7e," (Transformer-XL model)"),B7e.forEach(t),_nr=i(U),RM=n(U,"LI",{});var P7e=s(RM);ppe=n(P7e,"STRONG",{});var xht=s(ppe);bnr=r(xht,"vit_mae"),xht.forEach(t),Fnr=r(P7e," \u2014 "),vV=n(P7e,"A",{href:!0});var kht=s(vV);vnr=r(kht,"TFViTMAEForPreTraining"),kht.forEach(t),Tnr=r(P7e," (ViTMAE model)"),P7e.forEach(t),Mnr=i(U),BM=n(U,"LI",{});var $7e=s(BM);_pe=n($7e,"STRONG",{});var Sht=s(_pe);Enr=r(Sht,"xlm"),Sht.forEach(t),Cnr=r($7e," \u2014 "),TV=n($7e,"A",{href:!0});var Rht=s(TV);wnr=r(Rht,"TFXLMWithLMHeadModel"),Rht.forEach(t),Anr=r($7e," (XLM model)"),$7e.forEach(t),ynr=i(U),PM=n(U,"LI",{});var I7e=s(PM);bpe=n(I7e,"STRONG",{});var Bht=s(bpe);Lnr=r(Bht,"xlm-roberta"),Bht.forEach(t),xnr=r(I7e," \u2014 "),MV=n(I7e,"A",{href:!0});var Pht=s(MV);knr=r(Pht,"TFXLMRobertaForMaskedLM"),Pht.forEach(t),Snr=r(I7e," (XLM-RoBERTa model)"),I7e.forEach(t),Rnr=i(U),$M=n(U,"LI",{});var q7e=s($M);Fpe=n(q7e,"STRONG",{});var $ht=s(Fpe);Bnr=r($ht,"xlnet"),$ht.forEach(t),Pnr=r(q7e," \u2014 "),EV=n(q7e,"A",{href:!0});var Iht=s(EV);$nr=r(Iht,"TFXLNetLMHeadModel"),Iht.forEach(t),Inr=r(q7e," (XLNet model)"),q7e.forEach(t),U.forEach(t),qnr=i(pa),vpe=n(pa,"P",{});var qht=s(vpe);Nnr=r(qht,"Examples:"),qht.forEach(t),jnr=i(pa),f(fy.$$.fragment,pa),pa.forEach(t),Gl.forEach(t),iBe=i(c),Fc=n(c,"H2",{class:!0});var b$e=s(Fc);IM=n(b$e,"A",{id:!0,class:!0,href:!0});var Nht=s(IM);Tpe=n(Nht,"SPAN",{});var jht=s(Tpe);f(gy.$$.fragment,jht),jht.forEach(t),Nht.forEach(t),Dnr=i(b$e),Mpe=n(b$e,"SPAN",{});var Dht=s(Mpe);Gnr=r(Dht,"TFAutoModelForCausalLM"),Dht.forEach(t),b$e.forEach(t),dBe=i(c),Tr=n(c,"DIV",{class:!0});var Vl=s(Tr);f(hy.$$.fragment,Vl),Onr=i(Vl),vc=n(Vl,"P",{});var oJ=s(vc);Vnr=r(oJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),CV=n(oJ,"A",{href:!0});var Ght=s(CV);Xnr=r(Ght,"from_pretrained()"),Ght.forEach(t),znr=r(oJ," class method or the "),wV=n(oJ,"A",{href:!0});var Oht=s(wV);Qnr=r(Oht,"from_config()"),Oht.forEach(t),Wnr=r(oJ,` class
method.`),oJ.forEach(t),Hnr=i(Vl),uy=n(Vl,"P",{});var F$e=s(uy);Unr=r(F$e,"This class cannot be instantiated directly using "),Epe=n(F$e,"CODE",{});var Vht=s(Epe);Jnr=r(Vht,"__init__()"),Vht.forEach(t),Ynr=r(F$e," (throws an error)."),F$e.forEach(t),Knr=i(Vl),ut=n(Vl,"DIV",{class:!0});var Xl=s(ut);f(py.$$.fragment,Xl),Znr=i(Xl),Cpe=n(Xl,"P",{});var Xht=s(Cpe);esr=r(Xht,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Xht.forEach(t),osr=i(Xl),Tc=n(Xl,"P",{});var rJ=s(Tc);rsr=r(rJ,`Note:
Loading a model from its configuration file does `),wpe=n(rJ,"STRONG",{});var zht=s(wpe);tsr=r(zht,"not"),zht.forEach(t),asr=r(rJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AV=n(rJ,"A",{href:!0});var Qht=s(AV);nsr=r(Qht,"from_pretrained()"),Qht.forEach(t),ssr=r(rJ," to load the model weights."),rJ.forEach(t),lsr=i(Xl),Ape=n(Xl,"P",{});var Wht=s(Ape);isr=r(Wht,"Examples:"),Wht.forEach(t),dsr=i(Xl),f(_y.$$.fragment,Xl),Xl.forEach(t),csr=i(Vl),po=n(Vl,"DIV",{class:!0});var _a=s(po);f(by.$$.fragment,_a),msr=i(_a),ype=n(_a,"P",{});var Hht=s(ype);fsr=r(Hht,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Hht.forEach(t),gsr=i(_a),bn=n(_a,"P",{});var J3=s(bn);hsr=r(J3,"The model class to instantiate is selected based on the "),Lpe=n(J3,"CODE",{});var Uht=s(Lpe);usr=r(Uht,"model_type"),Uht.forEach(t),psr=r(J3,` property of the config object (either
passed as an argument or loaded from `),xpe=n(J3,"CODE",{});var Jht=s(xpe);_sr=r(Jht,"pretrained_model_name_or_path"),Jht.forEach(t),bsr=r(J3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kpe=n(J3,"CODE",{});var Yht=s(kpe);Fsr=r(Yht,"pretrained_model_name_or_path"),Yht.forEach(t),vsr=r(J3,":"),J3.forEach(t),Tsr=i(_a),me=n(_a,"UL",{});var ue=s(me);qM=n(ue,"LI",{});var N7e=s(qM);Spe=n(N7e,"STRONG",{});var Kht=s(Spe);Msr=r(Kht,"bert"),Kht.forEach(t),Esr=r(N7e," \u2014 "),yV=n(N7e,"A",{href:!0});var Zht=s(yV);Csr=r(Zht,"TFBertLMHeadModel"),Zht.forEach(t),wsr=r(N7e," (BERT model)"),N7e.forEach(t),Asr=i(ue),NM=n(ue,"LI",{});var j7e=s(NM);Rpe=n(j7e,"STRONG",{});var eut=s(Rpe);ysr=r(eut,"camembert"),eut.forEach(t),Lsr=r(j7e," \u2014 "),LV=n(j7e,"A",{href:!0});var out=s(LV);xsr=r(out,"TFCamembertForCausalLM"),out.forEach(t),ksr=r(j7e," (CamemBERT model)"),j7e.forEach(t),Ssr=i(ue),jM=n(ue,"LI",{});var D7e=s(jM);Bpe=n(D7e,"STRONG",{});var rut=s(Bpe);Rsr=r(rut,"ctrl"),rut.forEach(t),Bsr=r(D7e," \u2014 "),xV=n(D7e,"A",{href:!0});var tut=s(xV);Psr=r(tut,"TFCTRLLMHeadModel"),tut.forEach(t),$sr=r(D7e," (CTRL model)"),D7e.forEach(t),Isr=i(ue),DM=n(ue,"LI",{});var G7e=s(DM);Ppe=n(G7e,"STRONG",{});var aut=s(Ppe);qsr=r(aut,"gpt2"),aut.forEach(t),Nsr=r(G7e," \u2014 "),kV=n(G7e,"A",{href:!0});var nut=s(kV);jsr=r(nut,"TFGPT2LMHeadModel"),nut.forEach(t),Dsr=r(G7e," (OpenAI GPT-2 model)"),G7e.forEach(t),Gsr=i(ue),GM=n(ue,"LI",{});var O7e=s(GM);$pe=n(O7e,"STRONG",{});var sut=s($pe);Osr=r(sut,"gptj"),sut.forEach(t),Vsr=r(O7e," \u2014 "),SV=n(O7e,"A",{href:!0});var lut=s(SV);Xsr=r(lut,"TFGPTJForCausalLM"),lut.forEach(t),zsr=r(O7e," (GPT-J model)"),O7e.forEach(t),Qsr=i(ue),OM=n(ue,"LI",{});var V7e=s(OM);Ipe=n(V7e,"STRONG",{});var iut=s(Ipe);Wsr=r(iut,"openai-gpt"),iut.forEach(t),Hsr=r(V7e," \u2014 "),RV=n(V7e,"A",{href:!0});var dut=s(RV);Usr=r(dut,"TFOpenAIGPTLMHeadModel"),dut.forEach(t),Jsr=r(V7e," (OpenAI GPT model)"),V7e.forEach(t),Ysr=i(ue),VM=n(ue,"LI",{});var X7e=s(VM);qpe=n(X7e,"STRONG",{});var cut=s(qpe);Ksr=r(cut,"rembert"),cut.forEach(t),Zsr=r(X7e," \u2014 "),BV=n(X7e,"A",{href:!0});var mut=s(BV);elr=r(mut,"TFRemBertForCausalLM"),mut.forEach(t),olr=r(X7e," (RemBERT model)"),X7e.forEach(t),rlr=i(ue),XM=n(ue,"LI",{});var z7e=s(XM);Npe=n(z7e,"STRONG",{});var fut=s(Npe);tlr=r(fut,"roberta"),fut.forEach(t),alr=r(z7e," \u2014 "),PV=n(z7e,"A",{href:!0});var gut=s(PV);nlr=r(gut,"TFRobertaForCausalLM"),gut.forEach(t),slr=r(z7e," (RoBERTa model)"),z7e.forEach(t),llr=i(ue),zM=n(ue,"LI",{});var Q7e=s(zM);jpe=n(Q7e,"STRONG",{});var hut=s(jpe);ilr=r(hut,"roformer"),hut.forEach(t),dlr=r(Q7e," \u2014 "),$V=n(Q7e,"A",{href:!0});var uut=s($V);clr=r(uut,"TFRoFormerForCausalLM"),uut.forEach(t),mlr=r(Q7e," (RoFormer model)"),Q7e.forEach(t),flr=i(ue),QM=n(ue,"LI",{});var W7e=s(QM);Dpe=n(W7e,"STRONG",{});var put=s(Dpe);glr=r(put,"transfo-xl"),put.forEach(t),hlr=r(W7e," \u2014 "),IV=n(W7e,"A",{href:!0});var _ut=s(IV);ulr=r(_ut,"TFTransfoXLLMHeadModel"),_ut.forEach(t),plr=r(W7e," (Transformer-XL model)"),W7e.forEach(t),_lr=i(ue),WM=n(ue,"LI",{});var H7e=s(WM);Gpe=n(H7e,"STRONG",{});var but=s(Gpe);blr=r(but,"xlm"),but.forEach(t),Flr=r(H7e," \u2014 "),qV=n(H7e,"A",{href:!0});var Fut=s(qV);vlr=r(Fut,"TFXLMWithLMHeadModel"),Fut.forEach(t),Tlr=r(H7e," (XLM model)"),H7e.forEach(t),Mlr=i(ue),HM=n(ue,"LI",{});var U7e=s(HM);Ope=n(U7e,"STRONG",{});var vut=s(Ope);Elr=r(vut,"xlnet"),vut.forEach(t),Clr=r(U7e," \u2014 "),NV=n(U7e,"A",{href:!0});var Tut=s(NV);wlr=r(Tut,"TFXLNetLMHeadModel"),Tut.forEach(t),Alr=r(U7e," (XLNet model)"),U7e.forEach(t),ue.forEach(t),ylr=i(_a),Vpe=n(_a,"P",{});var Mut=s(Vpe);Llr=r(Mut,"Examples:"),Mut.forEach(t),xlr=i(_a),f(Fy.$$.fragment,_a),_a.forEach(t),Vl.forEach(t),cBe=i(c),Mc=n(c,"H2",{class:!0});var v$e=s(Mc);UM=n(v$e,"A",{id:!0,class:!0,href:!0});var Eut=s(UM);Xpe=n(Eut,"SPAN",{});var Cut=s(Xpe);f(vy.$$.fragment,Cut),Cut.forEach(t),Eut.forEach(t),klr=i(v$e),zpe=n(v$e,"SPAN",{});var wut=s(zpe);Slr=r(wut,"TFAutoModelForImageClassification"),wut.forEach(t),v$e.forEach(t),mBe=i(c),Mr=n(c,"DIV",{class:!0});var zl=s(Mr);f(Ty.$$.fragment,zl),Rlr=i(zl),Ec=n(zl,"P",{});var tJ=s(Ec);Blr=r(tJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),jV=n(tJ,"A",{href:!0});var Aut=s(jV);Plr=r(Aut,"from_pretrained()"),Aut.forEach(t),$lr=r(tJ," class method or the "),DV=n(tJ,"A",{href:!0});var yut=s(DV);Ilr=r(yut,"from_config()"),yut.forEach(t),qlr=r(tJ,` class
method.`),tJ.forEach(t),Nlr=i(zl),My=n(zl,"P",{});var T$e=s(My);jlr=r(T$e,"This class cannot be instantiated directly using "),Qpe=n(T$e,"CODE",{});var Lut=s(Qpe);Dlr=r(Lut,"__init__()"),Lut.forEach(t),Glr=r(T$e," (throws an error)."),T$e.forEach(t),Olr=i(zl),pt=n(zl,"DIV",{class:!0});var Ql=s(pt);f(Ey.$$.fragment,Ql),Vlr=i(Ql),Wpe=n(Ql,"P",{});var xut=s(Wpe);Xlr=r(xut,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),xut.forEach(t),zlr=i(Ql),Cc=n(Ql,"P",{});var aJ=s(Cc);Qlr=r(aJ,`Note:
Loading a model from its configuration file does `),Hpe=n(aJ,"STRONG",{});var kut=s(Hpe);Wlr=r(kut,"not"),kut.forEach(t),Hlr=r(aJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=n(aJ,"A",{href:!0});var Sut=s(GV);Ulr=r(Sut,"from_pretrained()"),Sut.forEach(t),Jlr=r(aJ," to load the model weights."),aJ.forEach(t),Ylr=i(Ql),Upe=n(Ql,"P",{});var Rut=s(Upe);Klr=r(Rut,"Examples:"),Rut.forEach(t),Zlr=i(Ql),f(Cy.$$.fragment,Ql),Ql.forEach(t),eir=i(zl),_o=n(zl,"DIV",{class:!0});var ba=s(_o);f(wy.$$.fragment,ba),oir=i(ba),Jpe=n(ba,"P",{});var But=s(Jpe);rir=r(But,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),But.forEach(t),tir=i(ba),Fn=n(ba,"P",{});var Y3=s(Fn);air=r(Y3,"The model class to instantiate is selected based on the "),Ype=n(Y3,"CODE",{});var Put=s(Ype);nir=r(Put,"model_type"),Put.forEach(t),sir=r(Y3,` property of the config object (either
passed as an argument or loaded from `),Kpe=n(Y3,"CODE",{});var $ut=s(Kpe);lir=r($ut,"pretrained_model_name_or_path"),$ut.forEach(t),iir=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zpe=n(Y3,"CODE",{});var Iut=s(Zpe);dir=r(Iut,"pretrained_model_name_or_path"),Iut.forEach(t),cir=r(Y3,":"),Y3.forEach(t),mir=i(ba),Ay=n(ba,"UL",{});var M$e=s(Ay);JM=n(M$e,"LI",{});var J7e=s(JM);e_e=n(J7e,"STRONG",{});var qut=s(e_e);fir=r(qut,"convnext"),qut.forEach(t),gir=r(J7e," \u2014 "),OV=n(J7e,"A",{href:!0});var Nut=s(OV);hir=r(Nut,"TFConvNextForImageClassification"),Nut.forEach(t),uir=r(J7e," (ConvNext model)"),J7e.forEach(t),pir=i(M$e),YM=n(M$e,"LI",{});var Y7e=s(YM);o_e=n(Y7e,"STRONG",{});var jut=s(o_e);_ir=r(jut,"vit"),jut.forEach(t),bir=r(Y7e," \u2014 "),VV=n(Y7e,"A",{href:!0});var Dut=s(VV);Fir=r(Dut,"TFViTForImageClassification"),Dut.forEach(t),vir=r(Y7e," (ViT model)"),Y7e.forEach(t),M$e.forEach(t),Tir=i(ba),r_e=n(ba,"P",{});var Gut=s(r_e);Mir=r(Gut,"Examples:"),Gut.forEach(t),Eir=i(ba),f(yy.$$.fragment,ba),ba.forEach(t),zl.forEach(t),fBe=i(c),wc=n(c,"H2",{class:!0});var E$e=s(wc);KM=n(E$e,"A",{id:!0,class:!0,href:!0});var Out=s(KM);t_e=n(Out,"SPAN",{});var Vut=s(t_e);f(Ly.$$.fragment,Vut),Vut.forEach(t),Out.forEach(t),Cir=i(E$e),a_e=n(E$e,"SPAN",{});var Xut=s(a_e);wir=r(Xut,"TFAutoModelForMaskedLM"),Xut.forEach(t),E$e.forEach(t),gBe=i(c),Er=n(c,"DIV",{class:!0});var Wl=s(Er);f(xy.$$.fragment,Wl),Air=i(Wl),Ac=n(Wl,"P",{});var nJ=s(Ac);yir=r(nJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XV=n(nJ,"A",{href:!0});var zut=s(XV);Lir=r(zut,"from_pretrained()"),zut.forEach(t),xir=r(nJ," class method or the "),zV=n(nJ,"A",{href:!0});var Qut=s(zV);kir=r(Qut,"from_config()"),Qut.forEach(t),Sir=r(nJ,` class
method.`),nJ.forEach(t),Rir=i(Wl),ky=n(Wl,"P",{});var C$e=s(ky);Bir=r(C$e,"This class cannot be instantiated directly using "),n_e=n(C$e,"CODE",{});var Wut=s(n_e);Pir=r(Wut,"__init__()"),Wut.forEach(t),$ir=r(C$e," (throws an error)."),C$e.forEach(t),Iir=i(Wl),_t=n(Wl,"DIV",{class:!0});var Hl=s(_t);f(Sy.$$.fragment,Hl),qir=i(Hl),s_e=n(Hl,"P",{});var Hut=s(s_e);Nir=r(Hut,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Hut.forEach(t),jir=i(Hl),yc=n(Hl,"P",{});var sJ=s(yc);Dir=r(sJ,`Note:
Loading a model from its configuration file does `),l_e=n(sJ,"STRONG",{});var Uut=s(l_e);Gir=r(Uut,"not"),Uut.forEach(t),Oir=r(sJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QV=n(sJ,"A",{href:!0});var Jut=s(QV);Vir=r(Jut,"from_pretrained()"),Jut.forEach(t),Xir=r(sJ," to load the model weights."),sJ.forEach(t),zir=i(Hl),i_e=n(Hl,"P",{});var Yut=s(i_e);Qir=r(Yut,"Examples:"),Yut.forEach(t),Wir=i(Hl),f(Ry.$$.fragment,Hl),Hl.forEach(t),Hir=i(Wl),bo=n(Wl,"DIV",{class:!0});var Fa=s(bo);f(By.$$.fragment,Fa),Uir=i(Fa),d_e=n(Fa,"P",{});var Kut=s(d_e);Jir=r(Kut,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Kut.forEach(t),Yir=i(Fa),vn=n(Fa,"P",{});var K3=s(vn);Kir=r(K3,"The model class to instantiate is selected based on the "),c_e=n(K3,"CODE",{});var Zut=s(c_e);Zir=r(Zut,"model_type"),Zut.forEach(t),edr=r(K3,` property of the config object (either
passed as an argument or loaded from `),m_e=n(K3,"CODE",{});var ept=s(m_e);odr=r(ept,"pretrained_model_name_or_path"),ept.forEach(t),rdr=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f_e=n(K3,"CODE",{});var opt=s(f_e);tdr=r(opt,"pretrained_model_name_or_path"),opt.forEach(t),adr=r(K3,":"),K3.forEach(t),ndr=i(Fa),J=n(Fa,"UL",{});var oe=s(J);ZM=n(oe,"LI",{});var K7e=s(ZM);g_e=n(K7e,"STRONG",{});var rpt=s(g_e);sdr=r(rpt,"albert"),rpt.forEach(t),ldr=r(K7e," \u2014 "),WV=n(K7e,"A",{href:!0});var tpt=s(WV);idr=r(tpt,"TFAlbertForMaskedLM"),tpt.forEach(t),ddr=r(K7e," (ALBERT model)"),K7e.forEach(t),cdr=i(oe),e4=n(oe,"LI",{});var Z7e=s(e4);h_e=n(Z7e,"STRONG",{});var apt=s(h_e);mdr=r(apt,"bert"),apt.forEach(t),fdr=r(Z7e," \u2014 "),HV=n(Z7e,"A",{href:!0});var npt=s(HV);gdr=r(npt,"TFBertForMaskedLM"),npt.forEach(t),hdr=r(Z7e," (BERT model)"),Z7e.forEach(t),udr=i(oe),o4=n(oe,"LI",{});var e9e=s(o4);u_e=n(e9e,"STRONG",{});var spt=s(u_e);pdr=r(spt,"camembert"),spt.forEach(t),_dr=r(e9e," \u2014 "),UV=n(e9e,"A",{href:!0});var lpt=s(UV);bdr=r(lpt,"TFCamembertForMaskedLM"),lpt.forEach(t),Fdr=r(e9e," (CamemBERT model)"),e9e.forEach(t),vdr=i(oe),r4=n(oe,"LI",{});var o9e=s(r4);p_e=n(o9e,"STRONG",{});var ipt=s(p_e);Tdr=r(ipt,"convbert"),ipt.forEach(t),Mdr=r(o9e," \u2014 "),JV=n(o9e,"A",{href:!0});var dpt=s(JV);Edr=r(dpt,"TFConvBertForMaskedLM"),dpt.forEach(t),Cdr=r(o9e," (ConvBERT model)"),o9e.forEach(t),wdr=i(oe),t4=n(oe,"LI",{});var r9e=s(t4);__e=n(r9e,"STRONG",{});var cpt=s(__e);Adr=r(cpt,"deberta"),cpt.forEach(t),ydr=r(r9e," \u2014 "),YV=n(r9e,"A",{href:!0});var mpt=s(YV);Ldr=r(mpt,"TFDebertaForMaskedLM"),mpt.forEach(t),xdr=r(r9e," (DeBERTa model)"),r9e.forEach(t),kdr=i(oe),a4=n(oe,"LI",{});var t9e=s(a4);b_e=n(t9e,"STRONG",{});var fpt=s(b_e);Sdr=r(fpt,"deberta-v2"),fpt.forEach(t),Rdr=r(t9e," \u2014 "),KV=n(t9e,"A",{href:!0});var gpt=s(KV);Bdr=r(gpt,"TFDebertaV2ForMaskedLM"),gpt.forEach(t),Pdr=r(t9e," (DeBERTa-v2 model)"),t9e.forEach(t),$dr=i(oe),n4=n(oe,"LI",{});var a9e=s(n4);F_e=n(a9e,"STRONG",{});var hpt=s(F_e);Idr=r(hpt,"distilbert"),hpt.forEach(t),qdr=r(a9e," \u2014 "),ZV=n(a9e,"A",{href:!0});var upt=s(ZV);Ndr=r(upt,"TFDistilBertForMaskedLM"),upt.forEach(t),jdr=r(a9e," (DistilBERT model)"),a9e.forEach(t),Ddr=i(oe),s4=n(oe,"LI",{});var n9e=s(s4);v_e=n(n9e,"STRONG",{});var ppt=s(v_e);Gdr=r(ppt,"electra"),ppt.forEach(t),Odr=r(n9e," \u2014 "),eX=n(n9e,"A",{href:!0});var _pt=s(eX);Vdr=r(_pt,"TFElectraForMaskedLM"),_pt.forEach(t),Xdr=r(n9e," (ELECTRA model)"),n9e.forEach(t),zdr=i(oe),l4=n(oe,"LI",{});var s9e=s(l4);T_e=n(s9e,"STRONG",{});var bpt=s(T_e);Qdr=r(bpt,"flaubert"),bpt.forEach(t),Wdr=r(s9e," \u2014 "),oX=n(s9e,"A",{href:!0});var Fpt=s(oX);Hdr=r(Fpt,"TFFlaubertWithLMHeadModel"),Fpt.forEach(t),Udr=r(s9e," (FlauBERT model)"),s9e.forEach(t),Jdr=i(oe),i4=n(oe,"LI",{});var l9e=s(i4);M_e=n(l9e,"STRONG",{});var vpt=s(M_e);Ydr=r(vpt,"funnel"),vpt.forEach(t),Kdr=r(l9e," \u2014 "),rX=n(l9e,"A",{href:!0});var Tpt=s(rX);Zdr=r(Tpt,"TFFunnelForMaskedLM"),Tpt.forEach(t),ecr=r(l9e," (Funnel Transformer model)"),l9e.forEach(t),ocr=i(oe),d4=n(oe,"LI",{});var i9e=s(d4);E_e=n(i9e,"STRONG",{});var Mpt=s(E_e);rcr=r(Mpt,"layoutlm"),Mpt.forEach(t),tcr=r(i9e," \u2014 "),tX=n(i9e,"A",{href:!0});var Ept=s(tX);acr=r(Ept,"TFLayoutLMForMaskedLM"),Ept.forEach(t),ncr=r(i9e," (LayoutLM model)"),i9e.forEach(t),scr=i(oe),c4=n(oe,"LI",{});var d9e=s(c4);C_e=n(d9e,"STRONG",{});var Cpt=s(C_e);lcr=r(Cpt,"longformer"),Cpt.forEach(t),icr=r(d9e," \u2014 "),aX=n(d9e,"A",{href:!0});var wpt=s(aX);dcr=r(wpt,"TFLongformerForMaskedLM"),wpt.forEach(t),ccr=r(d9e," (Longformer model)"),d9e.forEach(t),mcr=i(oe),m4=n(oe,"LI",{});var c9e=s(m4);w_e=n(c9e,"STRONG",{});var Apt=s(w_e);fcr=r(Apt,"mobilebert"),Apt.forEach(t),gcr=r(c9e," \u2014 "),nX=n(c9e,"A",{href:!0});var ypt=s(nX);hcr=r(ypt,"TFMobileBertForMaskedLM"),ypt.forEach(t),ucr=r(c9e," (MobileBERT model)"),c9e.forEach(t),pcr=i(oe),f4=n(oe,"LI",{});var m9e=s(f4);A_e=n(m9e,"STRONG",{});var Lpt=s(A_e);_cr=r(Lpt,"mpnet"),Lpt.forEach(t),bcr=r(m9e," \u2014 "),sX=n(m9e,"A",{href:!0});var xpt=s(sX);Fcr=r(xpt,"TFMPNetForMaskedLM"),xpt.forEach(t),vcr=r(m9e," (MPNet model)"),m9e.forEach(t),Tcr=i(oe),g4=n(oe,"LI",{});var f9e=s(g4);y_e=n(f9e,"STRONG",{});var kpt=s(y_e);Mcr=r(kpt,"rembert"),kpt.forEach(t),Ecr=r(f9e," \u2014 "),lX=n(f9e,"A",{href:!0});var Spt=s(lX);Ccr=r(Spt,"TFRemBertForMaskedLM"),Spt.forEach(t),wcr=r(f9e," (RemBERT model)"),f9e.forEach(t),Acr=i(oe),h4=n(oe,"LI",{});var g9e=s(h4);L_e=n(g9e,"STRONG",{});var Rpt=s(L_e);ycr=r(Rpt,"roberta"),Rpt.forEach(t),Lcr=r(g9e," \u2014 "),iX=n(g9e,"A",{href:!0});var Bpt=s(iX);xcr=r(Bpt,"TFRobertaForMaskedLM"),Bpt.forEach(t),kcr=r(g9e," (RoBERTa model)"),g9e.forEach(t),Scr=i(oe),u4=n(oe,"LI",{});var h9e=s(u4);x_e=n(h9e,"STRONG",{});var Ppt=s(x_e);Rcr=r(Ppt,"roformer"),Ppt.forEach(t),Bcr=r(h9e," \u2014 "),dX=n(h9e,"A",{href:!0});var $pt=s(dX);Pcr=r($pt,"TFRoFormerForMaskedLM"),$pt.forEach(t),$cr=r(h9e," (RoFormer model)"),h9e.forEach(t),Icr=i(oe),p4=n(oe,"LI",{});var u9e=s(p4);k_e=n(u9e,"STRONG",{});var Ipt=s(k_e);qcr=r(Ipt,"tapas"),Ipt.forEach(t),Ncr=r(u9e," \u2014 "),cX=n(u9e,"A",{href:!0});var qpt=s(cX);jcr=r(qpt,"TFTapasForMaskedLM"),qpt.forEach(t),Dcr=r(u9e," (TAPAS model)"),u9e.forEach(t),Gcr=i(oe),_4=n(oe,"LI",{});var p9e=s(_4);S_e=n(p9e,"STRONG",{});var Npt=s(S_e);Ocr=r(Npt,"xlm"),Npt.forEach(t),Vcr=r(p9e," \u2014 "),mX=n(p9e,"A",{href:!0});var jpt=s(mX);Xcr=r(jpt,"TFXLMWithLMHeadModel"),jpt.forEach(t),zcr=r(p9e," (XLM model)"),p9e.forEach(t),Qcr=i(oe),b4=n(oe,"LI",{});var _9e=s(b4);R_e=n(_9e,"STRONG",{});var Dpt=s(R_e);Wcr=r(Dpt,"xlm-roberta"),Dpt.forEach(t),Hcr=r(_9e," \u2014 "),fX=n(_9e,"A",{href:!0});var Gpt=s(fX);Ucr=r(Gpt,"TFXLMRobertaForMaskedLM"),Gpt.forEach(t),Jcr=r(_9e," (XLM-RoBERTa model)"),_9e.forEach(t),oe.forEach(t),Ycr=i(Fa),B_e=n(Fa,"P",{});var Opt=s(B_e);Kcr=r(Opt,"Examples:"),Opt.forEach(t),Zcr=i(Fa),f(Py.$$.fragment,Fa),Fa.forEach(t),Wl.forEach(t),hBe=i(c),Lc=n(c,"H2",{class:!0});var w$e=s(Lc);F4=n(w$e,"A",{id:!0,class:!0,href:!0});var Vpt=s(F4);P_e=n(Vpt,"SPAN",{});var Xpt=s(P_e);f($y.$$.fragment,Xpt),Xpt.forEach(t),Vpt.forEach(t),emr=i(w$e),$_e=n(w$e,"SPAN",{});var zpt=s($_e);omr=r(zpt,"TFAutoModelForSeq2SeqLM"),zpt.forEach(t),w$e.forEach(t),uBe=i(c),Cr=n(c,"DIV",{class:!0});var Ul=s(Cr);f(Iy.$$.fragment,Ul),rmr=i(Ul),xc=n(Ul,"P",{});var lJ=s(xc);tmr=r(lJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gX=n(lJ,"A",{href:!0});var Qpt=s(gX);amr=r(Qpt,"from_pretrained()"),Qpt.forEach(t),nmr=r(lJ," class method or the "),hX=n(lJ,"A",{href:!0});var Wpt=s(hX);smr=r(Wpt,"from_config()"),Wpt.forEach(t),lmr=r(lJ,` class
method.`),lJ.forEach(t),imr=i(Ul),qy=n(Ul,"P",{});var A$e=s(qy);dmr=r(A$e,"This class cannot be instantiated directly using "),I_e=n(A$e,"CODE",{});var Hpt=s(I_e);cmr=r(Hpt,"__init__()"),Hpt.forEach(t),mmr=r(A$e," (throws an error)."),A$e.forEach(t),fmr=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);f(Ny.$$.fragment,Jl),gmr=i(Jl),q_e=n(Jl,"P",{});var Upt=s(q_e);hmr=r(Upt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Upt.forEach(t),umr=i(Jl),kc=n(Jl,"P",{});var iJ=s(kc);pmr=r(iJ,`Note:
Loading a model from its configuration file does `),N_e=n(iJ,"STRONG",{});var Jpt=s(N_e);_mr=r(Jpt,"not"),Jpt.forEach(t),bmr=r(iJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=n(iJ,"A",{href:!0});var Ypt=s(uX);Fmr=r(Ypt,"from_pretrained()"),Ypt.forEach(t),vmr=r(iJ," to load the model weights."),iJ.forEach(t),Tmr=i(Jl),j_e=n(Jl,"P",{});var Kpt=s(j_e);Mmr=r(Kpt,"Examples:"),Kpt.forEach(t),Emr=i(Jl),f(jy.$$.fragment,Jl),Jl.forEach(t),Cmr=i(Ul),Fo=n(Ul,"DIV",{class:!0});var va=s(Fo);f(Dy.$$.fragment,va),wmr=i(va),D_e=n(va,"P",{});var Zpt=s(D_e);Amr=r(Zpt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Zpt.forEach(t),ymr=i(va),Tn=n(va,"P",{});var Z3=s(Tn);Lmr=r(Z3,"The model class to instantiate is selected based on the "),G_e=n(Z3,"CODE",{});var e_t=s(G_e);xmr=r(e_t,"model_type"),e_t.forEach(t),kmr=r(Z3,` property of the config object (either
passed as an argument or loaded from `),O_e=n(Z3,"CODE",{});var o_t=s(O_e);Smr=r(o_t,"pretrained_model_name_or_path"),o_t.forEach(t),Rmr=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=n(Z3,"CODE",{});var r_t=s(V_e);Bmr=r(r_t,"pretrained_model_name_or_path"),r_t.forEach(t),Pmr=r(Z3,":"),Z3.forEach(t),$mr=i(va),be=n(va,"UL",{});var we=s(be);v4=n(we,"LI",{});var b9e=s(v4);X_e=n(b9e,"STRONG",{});var t_t=s(X_e);Imr=r(t_t,"bart"),t_t.forEach(t),qmr=r(b9e," \u2014 "),pX=n(b9e,"A",{href:!0});var a_t=s(pX);Nmr=r(a_t,"TFBartForConditionalGeneration"),a_t.forEach(t),jmr=r(b9e," (BART model)"),b9e.forEach(t),Dmr=i(we),T4=n(we,"LI",{});var F9e=s(T4);z_e=n(F9e,"STRONG",{});var n_t=s(z_e);Gmr=r(n_t,"blenderbot"),n_t.forEach(t),Omr=r(F9e," \u2014 "),_X=n(F9e,"A",{href:!0});var s_t=s(_X);Vmr=r(s_t,"TFBlenderbotForConditionalGeneration"),s_t.forEach(t),Xmr=r(F9e," (Blenderbot model)"),F9e.forEach(t),zmr=i(we),M4=n(we,"LI",{});var v9e=s(M4);Q_e=n(v9e,"STRONG",{});var l_t=s(Q_e);Qmr=r(l_t,"blenderbot-small"),l_t.forEach(t),Wmr=r(v9e," \u2014 "),bX=n(v9e,"A",{href:!0});var i_t=s(bX);Hmr=r(i_t,"TFBlenderbotSmallForConditionalGeneration"),i_t.forEach(t),Umr=r(v9e," (BlenderbotSmall model)"),v9e.forEach(t),Jmr=i(we),E4=n(we,"LI",{});var T9e=s(E4);W_e=n(T9e,"STRONG",{});var d_t=s(W_e);Ymr=r(d_t,"encoder-decoder"),d_t.forEach(t),Kmr=r(T9e," \u2014 "),FX=n(T9e,"A",{href:!0});var c_t=s(FX);Zmr=r(c_t,"TFEncoderDecoderModel"),c_t.forEach(t),efr=r(T9e," (Encoder decoder model)"),T9e.forEach(t),ofr=i(we),C4=n(we,"LI",{});var M9e=s(C4);H_e=n(M9e,"STRONG",{});var m_t=s(H_e);rfr=r(m_t,"led"),m_t.forEach(t),tfr=r(M9e," \u2014 "),vX=n(M9e,"A",{href:!0});var f_t=s(vX);afr=r(f_t,"TFLEDForConditionalGeneration"),f_t.forEach(t),nfr=r(M9e," (LED model)"),M9e.forEach(t),sfr=i(we),w4=n(we,"LI",{});var E9e=s(w4);U_e=n(E9e,"STRONG",{});var g_t=s(U_e);lfr=r(g_t,"marian"),g_t.forEach(t),ifr=r(E9e," \u2014 "),TX=n(E9e,"A",{href:!0});var h_t=s(TX);dfr=r(h_t,"TFMarianMTModel"),h_t.forEach(t),cfr=r(E9e," (Marian model)"),E9e.forEach(t),mfr=i(we),A4=n(we,"LI",{});var C9e=s(A4);J_e=n(C9e,"STRONG",{});var u_t=s(J_e);ffr=r(u_t,"mbart"),u_t.forEach(t),gfr=r(C9e," \u2014 "),MX=n(C9e,"A",{href:!0});var p_t=s(MX);hfr=r(p_t,"TFMBartForConditionalGeneration"),p_t.forEach(t),ufr=r(C9e," (mBART model)"),C9e.forEach(t),pfr=i(we),y4=n(we,"LI",{});var w9e=s(y4);Y_e=n(w9e,"STRONG",{});var __t=s(Y_e);_fr=r(__t,"mt5"),__t.forEach(t),bfr=r(w9e," \u2014 "),EX=n(w9e,"A",{href:!0});var b_t=s(EX);Ffr=r(b_t,"TFMT5ForConditionalGeneration"),b_t.forEach(t),vfr=r(w9e," (mT5 model)"),w9e.forEach(t),Tfr=i(we),L4=n(we,"LI",{});var A9e=s(L4);K_e=n(A9e,"STRONG",{});var F_t=s(K_e);Mfr=r(F_t,"pegasus"),F_t.forEach(t),Efr=r(A9e," \u2014 "),CX=n(A9e,"A",{href:!0});var v_t=s(CX);Cfr=r(v_t,"TFPegasusForConditionalGeneration"),v_t.forEach(t),wfr=r(A9e," (Pegasus model)"),A9e.forEach(t),Afr=i(we),x4=n(we,"LI",{});var y9e=s(x4);Z_e=n(y9e,"STRONG",{});var T_t=s(Z_e);yfr=r(T_t,"t5"),T_t.forEach(t),Lfr=r(y9e," \u2014 "),wX=n(y9e,"A",{href:!0});var M_t=s(wX);xfr=r(M_t,"TFT5ForConditionalGeneration"),M_t.forEach(t),kfr=r(y9e," (T5 model)"),y9e.forEach(t),we.forEach(t),Sfr=i(va),ebe=n(va,"P",{});var E_t=s(ebe);Rfr=r(E_t,"Examples:"),E_t.forEach(t),Bfr=i(va),f(Gy.$$.fragment,va),va.forEach(t),Ul.forEach(t),pBe=i(c),Sc=n(c,"H2",{class:!0});var y$e=s(Sc);k4=n(y$e,"A",{id:!0,class:!0,href:!0});var C_t=s(k4);obe=n(C_t,"SPAN",{});var w_t=s(obe);f(Oy.$$.fragment,w_t),w_t.forEach(t),C_t.forEach(t),Pfr=i(y$e),rbe=n(y$e,"SPAN",{});var A_t=s(rbe);$fr=r(A_t,"TFAutoModelForSequenceClassification"),A_t.forEach(t),y$e.forEach(t),_Be=i(c),wr=n(c,"DIV",{class:!0});var Yl=s(wr);f(Vy.$$.fragment,Yl),Ifr=i(Yl),Rc=n(Yl,"P",{});var dJ=s(Rc);qfr=r(dJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),AX=n(dJ,"A",{href:!0});var y_t=s(AX);Nfr=r(y_t,"from_pretrained()"),y_t.forEach(t),jfr=r(dJ," class method or the "),yX=n(dJ,"A",{href:!0});var L_t=s(yX);Dfr=r(L_t,"from_config()"),L_t.forEach(t),Gfr=r(dJ,` class
method.`),dJ.forEach(t),Ofr=i(Yl),Xy=n(Yl,"P",{});var L$e=s(Xy);Vfr=r(L$e,"This class cannot be instantiated directly using "),tbe=n(L$e,"CODE",{});var x_t=s(tbe);Xfr=r(x_t,"__init__()"),x_t.forEach(t),zfr=r(L$e," (throws an error)."),L$e.forEach(t),Qfr=i(Yl),Ft=n(Yl,"DIV",{class:!0});var Kl=s(Ft);f(zy.$$.fragment,Kl),Wfr=i(Kl),abe=n(Kl,"P",{});var k_t=s(abe);Hfr=r(k_t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),k_t.forEach(t),Ufr=i(Kl),Bc=n(Kl,"P",{});var cJ=s(Bc);Jfr=r(cJ,`Note:
Loading a model from its configuration file does `),nbe=n(cJ,"STRONG",{});var S_t=s(nbe);Yfr=r(S_t,"not"),S_t.forEach(t),Kfr=r(cJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=n(cJ,"A",{href:!0});var R_t=s(LX);Zfr=r(R_t,"from_pretrained()"),R_t.forEach(t),egr=r(cJ," to load the model weights."),cJ.forEach(t),ogr=i(Kl),sbe=n(Kl,"P",{});var B_t=s(sbe);rgr=r(B_t,"Examples:"),B_t.forEach(t),tgr=i(Kl),f(Qy.$$.fragment,Kl),Kl.forEach(t),agr=i(Yl),vo=n(Yl,"DIV",{class:!0});var Ta=s(vo);f(Wy.$$.fragment,Ta),ngr=i(Ta),lbe=n(Ta,"P",{});var P_t=s(lbe);sgr=r(P_t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),P_t.forEach(t),lgr=i(Ta),Mn=n(Ta,"P",{});var ew=s(Mn);igr=r(ew,"The model class to instantiate is selected based on the "),ibe=n(ew,"CODE",{});var $_t=s(ibe);dgr=r($_t,"model_type"),$_t.forEach(t),cgr=r(ew,` property of the config object (either
passed as an argument or loaded from `),dbe=n(ew,"CODE",{});var I_t=s(dbe);mgr=r(I_t,"pretrained_model_name_or_path"),I_t.forEach(t),fgr=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=n(ew,"CODE",{});var q_t=s(cbe);ggr=r(q_t,"pretrained_model_name_or_path"),q_t.forEach(t),hgr=r(ew,":"),ew.forEach(t),ugr=i(Ta),V=n(Ta,"UL",{});var Q=s(V);S4=n(Q,"LI",{});var L9e=s(S4);mbe=n(L9e,"STRONG",{});var N_t=s(mbe);pgr=r(N_t,"albert"),N_t.forEach(t),_gr=r(L9e," \u2014 "),xX=n(L9e,"A",{href:!0});var j_t=s(xX);bgr=r(j_t,"TFAlbertForSequenceClassification"),j_t.forEach(t),Fgr=r(L9e," (ALBERT model)"),L9e.forEach(t),vgr=i(Q),R4=n(Q,"LI",{});var x9e=s(R4);fbe=n(x9e,"STRONG",{});var D_t=s(fbe);Tgr=r(D_t,"bert"),D_t.forEach(t),Mgr=r(x9e," \u2014 "),kX=n(x9e,"A",{href:!0});var G_t=s(kX);Egr=r(G_t,"TFBertForSequenceClassification"),G_t.forEach(t),Cgr=r(x9e," (BERT model)"),x9e.forEach(t),wgr=i(Q),B4=n(Q,"LI",{});var k9e=s(B4);gbe=n(k9e,"STRONG",{});var O_t=s(gbe);Agr=r(O_t,"camembert"),O_t.forEach(t),ygr=r(k9e," \u2014 "),SX=n(k9e,"A",{href:!0});var V_t=s(SX);Lgr=r(V_t,"TFCamembertForSequenceClassification"),V_t.forEach(t),xgr=r(k9e," (CamemBERT model)"),k9e.forEach(t),kgr=i(Q),P4=n(Q,"LI",{});var S9e=s(P4);hbe=n(S9e,"STRONG",{});var X_t=s(hbe);Sgr=r(X_t,"convbert"),X_t.forEach(t),Rgr=r(S9e," \u2014 "),RX=n(S9e,"A",{href:!0});var z_t=s(RX);Bgr=r(z_t,"TFConvBertForSequenceClassification"),z_t.forEach(t),Pgr=r(S9e," (ConvBERT model)"),S9e.forEach(t),$gr=i(Q),$4=n(Q,"LI",{});var R9e=s($4);ube=n(R9e,"STRONG",{});var Q_t=s(ube);Igr=r(Q_t,"ctrl"),Q_t.forEach(t),qgr=r(R9e," \u2014 "),BX=n(R9e,"A",{href:!0});var W_t=s(BX);Ngr=r(W_t,"TFCTRLForSequenceClassification"),W_t.forEach(t),jgr=r(R9e," (CTRL model)"),R9e.forEach(t),Dgr=i(Q),I4=n(Q,"LI",{});var B9e=s(I4);pbe=n(B9e,"STRONG",{});var H_t=s(pbe);Ggr=r(H_t,"deberta"),H_t.forEach(t),Ogr=r(B9e," \u2014 "),PX=n(B9e,"A",{href:!0});var U_t=s(PX);Vgr=r(U_t,"TFDebertaForSequenceClassification"),U_t.forEach(t),Xgr=r(B9e," (DeBERTa model)"),B9e.forEach(t),zgr=i(Q),q4=n(Q,"LI",{});var P9e=s(q4);_be=n(P9e,"STRONG",{});var J_t=s(_be);Qgr=r(J_t,"deberta-v2"),J_t.forEach(t),Wgr=r(P9e," \u2014 "),$X=n(P9e,"A",{href:!0});var Y_t=s($X);Hgr=r(Y_t,"TFDebertaV2ForSequenceClassification"),Y_t.forEach(t),Ugr=r(P9e," (DeBERTa-v2 model)"),P9e.forEach(t),Jgr=i(Q),N4=n(Q,"LI",{});var $9e=s(N4);bbe=n($9e,"STRONG",{});var K_t=s(bbe);Ygr=r(K_t,"distilbert"),K_t.forEach(t),Kgr=r($9e," \u2014 "),IX=n($9e,"A",{href:!0});var Z_t=s(IX);Zgr=r(Z_t,"TFDistilBertForSequenceClassification"),Z_t.forEach(t),ehr=r($9e," (DistilBERT model)"),$9e.forEach(t),ohr=i(Q),j4=n(Q,"LI",{});var I9e=s(j4);Fbe=n(I9e,"STRONG",{});var ebt=s(Fbe);rhr=r(ebt,"electra"),ebt.forEach(t),thr=r(I9e," \u2014 "),qX=n(I9e,"A",{href:!0});var obt=s(qX);ahr=r(obt,"TFElectraForSequenceClassification"),obt.forEach(t),nhr=r(I9e," (ELECTRA model)"),I9e.forEach(t),shr=i(Q),D4=n(Q,"LI",{});var q9e=s(D4);vbe=n(q9e,"STRONG",{});var rbt=s(vbe);lhr=r(rbt,"flaubert"),rbt.forEach(t),ihr=r(q9e," \u2014 "),NX=n(q9e,"A",{href:!0});var tbt=s(NX);dhr=r(tbt,"TFFlaubertForSequenceClassification"),tbt.forEach(t),chr=r(q9e," (FlauBERT model)"),q9e.forEach(t),mhr=i(Q),G4=n(Q,"LI",{});var N9e=s(G4);Tbe=n(N9e,"STRONG",{});var abt=s(Tbe);fhr=r(abt,"funnel"),abt.forEach(t),ghr=r(N9e," \u2014 "),jX=n(N9e,"A",{href:!0});var nbt=s(jX);hhr=r(nbt,"TFFunnelForSequenceClassification"),nbt.forEach(t),uhr=r(N9e," (Funnel Transformer model)"),N9e.forEach(t),phr=i(Q),O4=n(Q,"LI",{});var j9e=s(O4);Mbe=n(j9e,"STRONG",{});var sbt=s(Mbe);_hr=r(sbt,"gpt2"),sbt.forEach(t),bhr=r(j9e," \u2014 "),DX=n(j9e,"A",{href:!0});var lbt=s(DX);Fhr=r(lbt,"TFGPT2ForSequenceClassification"),lbt.forEach(t),vhr=r(j9e," (OpenAI GPT-2 model)"),j9e.forEach(t),Thr=i(Q),V4=n(Q,"LI",{});var D9e=s(V4);Ebe=n(D9e,"STRONG",{});var ibt=s(Ebe);Mhr=r(ibt,"gptj"),ibt.forEach(t),Ehr=r(D9e," \u2014 "),GX=n(D9e,"A",{href:!0});var dbt=s(GX);Chr=r(dbt,"TFGPTJForSequenceClassification"),dbt.forEach(t),whr=r(D9e," (GPT-J model)"),D9e.forEach(t),Ahr=i(Q),X4=n(Q,"LI",{});var G9e=s(X4);Cbe=n(G9e,"STRONG",{});var cbt=s(Cbe);yhr=r(cbt,"layoutlm"),cbt.forEach(t),Lhr=r(G9e," \u2014 "),OX=n(G9e,"A",{href:!0});var mbt=s(OX);xhr=r(mbt,"TFLayoutLMForSequenceClassification"),mbt.forEach(t),khr=r(G9e," (LayoutLM model)"),G9e.forEach(t),Shr=i(Q),z4=n(Q,"LI",{});var O9e=s(z4);wbe=n(O9e,"STRONG",{});var fbt=s(wbe);Rhr=r(fbt,"longformer"),fbt.forEach(t),Bhr=r(O9e," \u2014 "),VX=n(O9e,"A",{href:!0});var gbt=s(VX);Phr=r(gbt,"TFLongformerForSequenceClassification"),gbt.forEach(t),$hr=r(O9e," (Longformer model)"),O9e.forEach(t),Ihr=i(Q),Q4=n(Q,"LI",{});var V9e=s(Q4);Abe=n(V9e,"STRONG",{});var hbt=s(Abe);qhr=r(hbt,"mobilebert"),hbt.forEach(t),Nhr=r(V9e," \u2014 "),XX=n(V9e,"A",{href:!0});var ubt=s(XX);jhr=r(ubt,"TFMobileBertForSequenceClassification"),ubt.forEach(t),Dhr=r(V9e," (MobileBERT model)"),V9e.forEach(t),Ghr=i(Q),W4=n(Q,"LI",{});var X9e=s(W4);ybe=n(X9e,"STRONG",{});var pbt=s(ybe);Ohr=r(pbt,"mpnet"),pbt.forEach(t),Vhr=r(X9e," \u2014 "),zX=n(X9e,"A",{href:!0});var _bt=s(zX);Xhr=r(_bt,"TFMPNetForSequenceClassification"),_bt.forEach(t),zhr=r(X9e," (MPNet model)"),X9e.forEach(t),Qhr=i(Q),H4=n(Q,"LI",{});var z9e=s(H4);Lbe=n(z9e,"STRONG",{});var bbt=s(Lbe);Whr=r(bbt,"openai-gpt"),bbt.forEach(t),Hhr=r(z9e," \u2014 "),QX=n(z9e,"A",{href:!0});var Fbt=s(QX);Uhr=r(Fbt,"TFOpenAIGPTForSequenceClassification"),Fbt.forEach(t),Jhr=r(z9e," (OpenAI GPT model)"),z9e.forEach(t),Yhr=i(Q),U4=n(Q,"LI",{});var Q9e=s(U4);xbe=n(Q9e,"STRONG",{});var vbt=s(xbe);Khr=r(vbt,"rembert"),vbt.forEach(t),Zhr=r(Q9e," \u2014 "),WX=n(Q9e,"A",{href:!0});var Tbt=s(WX);eur=r(Tbt,"TFRemBertForSequenceClassification"),Tbt.forEach(t),our=r(Q9e," (RemBERT model)"),Q9e.forEach(t),rur=i(Q),J4=n(Q,"LI",{});var W9e=s(J4);kbe=n(W9e,"STRONG",{});var Mbt=s(kbe);tur=r(Mbt,"roberta"),Mbt.forEach(t),aur=r(W9e," \u2014 "),HX=n(W9e,"A",{href:!0});var Ebt=s(HX);nur=r(Ebt,"TFRobertaForSequenceClassification"),Ebt.forEach(t),sur=r(W9e," (RoBERTa model)"),W9e.forEach(t),lur=i(Q),Y4=n(Q,"LI",{});var H9e=s(Y4);Sbe=n(H9e,"STRONG",{});var Cbt=s(Sbe);iur=r(Cbt,"roformer"),Cbt.forEach(t),dur=r(H9e," \u2014 "),UX=n(H9e,"A",{href:!0});var wbt=s(UX);cur=r(wbt,"TFRoFormerForSequenceClassification"),wbt.forEach(t),mur=r(H9e," (RoFormer model)"),H9e.forEach(t),fur=i(Q),K4=n(Q,"LI",{});var U9e=s(K4);Rbe=n(U9e,"STRONG",{});var Abt=s(Rbe);gur=r(Abt,"tapas"),Abt.forEach(t),hur=r(U9e," \u2014 "),JX=n(U9e,"A",{href:!0});var ybt=s(JX);uur=r(ybt,"TFTapasForSequenceClassification"),ybt.forEach(t),pur=r(U9e," (TAPAS model)"),U9e.forEach(t),_ur=i(Q),Z4=n(Q,"LI",{});var J9e=s(Z4);Bbe=n(J9e,"STRONG",{});var Lbt=s(Bbe);bur=r(Lbt,"transfo-xl"),Lbt.forEach(t),Fur=r(J9e," \u2014 "),YX=n(J9e,"A",{href:!0});var xbt=s(YX);vur=r(xbt,"TFTransfoXLForSequenceClassification"),xbt.forEach(t),Tur=r(J9e," (Transformer-XL model)"),J9e.forEach(t),Mur=i(Q),eE=n(Q,"LI",{});var Y9e=s(eE);Pbe=n(Y9e,"STRONG",{});var kbt=s(Pbe);Eur=r(kbt,"xlm"),kbt.forEach(t),Cur=r(Y9e," \u2014 "),KX=n(Y9e,"A",{href:!0});var Sbt=s(KX);wur=r(Sbt,"TFXLMForSequenceClassification"),Sbt.forEach(t),Aur=r(Y9e," (XLM model)"),Y9e.forEach(t),yur=i(Q),oE=n(Q,"LI",{});var K9e=s(oE);$be=n(K9e,"STRONG",{});var Rbt=s($be);Lur=r(Rbt,"xlm-roberta"),Rbt.forEach(t),xur=r(K9e," \u2014 "),ZX=n(K9e,"A",{href:!0});var Bbt=s(ZX);kur=r(Bbt,"TFXLMRobertaForSequenceClassification"),Bbt.forEach(t),Sur=r(K9e," (XLM-RoBERTa model)"),K9e.forEach(t),Rur=i(Q),rE=n(Q,"LI",{});var Z9e=s(rE);Ibe=n(Z9e,"STRONG",{});var Pbt=s(Ibe);Bur=r(Pbt,"xlnet"),Pbt.forEach(t),Pur=r(Z9e," \u2014 "),ez=n(Z9e,"A",{href:!0});var $bt=s(ez);$ur=r($bt,"TFXLNetForSequenceClassification"),$bt.forEach(t),Iur=r(Z9e," (XLNet model)"),Z9e.forEach(t),Q.forEach(t),qur=i(Ta),qbe=n(Ta,"P",{});var Ibt=s(qbe);Nur=r(Ibt,"Examples:"),Ibt.forEach(t),jur=i(Ta),f(Hy.$$.fragment,Ta),Ta.forEach(t),Yl.forEach(t),bBe=i(c),Pc=n(c,"H2",{class:!0});var x$e=s(Pc);tE=n(x$e,"A",{id:!0,class:!0,href:!0});var qbt=s(tE);Nbe=n(qbt,"SPAN",{});var Nbt=s(Nbe);f(Uy.$$.fragment,Nbt),Nbt.forEach(t),qbt.forEach(t),Dur=i(x$e),jbe=n(x$e,"SPAN",{});var jbt=s(jbe);Gur=r(jbt,"TFAutoModelForMultipleChoice"),jbt.forEach(t),x$e.forEach(t),FBe=i(c),Ar=n(c,"DIV",{class:!0});var Zl=s(Ar);f(Jy.$$.fragment,Zl),Our=i(Zl),$c=n(Zl,"P",{});var mJ=s($c);Vur=r(mJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oz=n(mJ,"A",{href:!0});var Dbt=s(oz);Xur=r(Dbt,"from_pretrained()"),Dbt.forEach(t),zur=r(mJ," class method or the "),rz=n(mJ,"A",{href:!0});var Gbt=s(rz);Qur=r(Gbt,"from_config()"),Gbt.forEach(t),Wur=r(mJ,` class
method.`),mJ.forEach(t),Hur=i(Zl),Yy=n(Zl,"P",{});var k$e=s(Yy);Uur=r(k$e,"This class cannot be instantiated directly using "),Dbe=n(k$e,"CODE",{});var Obt=s(Dbe);Jur=r(Obt,"__init__()"),Obt.forEach(t),Yur=r(k$e," (throws an error)."),k$e.forEach(t),Kur=i(Zl),vt=n(Zl,"DIV",{class:!0});var ei=s(vt);f(Ky.$$.fragment,ei),Zur=i(ei),Gbe=n(ei,"P",{});var Vbt=s(Gbe);epr=r(Vbt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Vbt.forEach(t),opr=i(ei),Ic=n(ei,"P",{});var fJ=s(Ic);rpr=r(fJ,`Note:
Loading a model from its configuration file does `),Obe=n(fJ,"STRONG",{});var Xbt=s(Obe);tpr=r(Xbt,"not"),Xbt.forEach(t),apr=r(fJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=n(fJ,"A",{href:!0});var zbt=s(tz);npr=r(zbt,"from_pretrained()"),zbt.forEach(t),spr=r(fJ," to load the model weights."),fJ.forEach(t),lpr=i(ei),Vbe=n(ei,"P",{});var Qbt=s(Vbe);ipr=r(Qbt,"Examples:"),Qbt.forEach(t),dpr=i(ei),f(Zy.$$.fragment,ei),ei.forEach(t),cpr=i(Zl),To=n(Zl,"DIV",{class:!0});var Ma=s(To);f(eL.$$.fragment,Ma),mpr=i(Ma),Xbe=n(Ma,"P",{});var Wbt=s(Xbe);fpr=r(Wbt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Wbt.forEach(t),gpr=i(Ma),En=n(Ma,"P",{});var ow=s(En);hpr=r(ow,"The model class to instantiate is selected based on the "),zbe=n(ow,"CODE",{});var Hbt=s(zbe);upr=r(Hbt,"model_type"),Hbt.forEach(t),ppr=r(ow,` property of the config object (either
passed as an argument or loaded from `),Qbe=n(ow,"CODE",{});var Ubt=s(Qbe);_pr=r(Ubt,"pretrained_model_name_or_path"),Ubt.forEach(t),bpr=r(ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=n(ow,"CODE",{});var Jbt=s(Wbe);Fpr=r(Jbt,"pretrained_model_name_or_path"),Jbt.forEach(t),vpr=r(ow,":"),ow.forEach(t),Tpr=i(Ma),ne=n(Ma,"UL",{});var le=s(ne);aE=n(le,"LI",{});var exe=s(aE);Hbe=n(exe,"STRONG",{});var Ybt=s(Hbe);Mpr=r(Ybt,"albert"),Ybt.forEach(t),Epr=r(exe," \u2014 "),az=n(exe,"A",{href:!0});var Kbt=s(az);Cpr=r(Kbt,"TFAlbertForMultipleChoice"),Kbt.forEach(t),wpr=r(exe," (ALBERT model)"),exe.forEach(t),Apr=i(le),nE=n(le,"LI",{});var oxe=s(nE);Ube=n(oxe,"STRONG",{});var Zbt=s(Ube);ypr=r(Zbt,"bert"),Zbt.forEach(t),Lpr=r(oxe," \u2014 "),nz=n(oxe,"A",{href:!0});var e2t=s(nz);xpr=r(e2t,"TFBertForMultipleChoice"),e2t.forEach(t),kpr=r(oxe," (BERT model)"),oxe.forEach(t),Spr=i(le),sE=n(le,"LI",{});var rxe=s(sE);Jbe=n(rxe,"STRONG",{});var o2t=s(Jbe);Rpr=r(o2t,"camembert"),o2t.forEach(t),Bpr=r(rxe," \u2014 "),sz=n(rxe,"A",{href:!0});var r2t=s(sz);Ppr=r(r2t,"TFCamembertForMultipleChoice"),r2t.forEach(t),$pr=r(rxe," (CamemBERT model)"),rxe.forEach(t),Ipr=i(le),lE=n(le,"LI",{});var txe=s(lE);Ybe=n(txe,"STRONG",{});var t2t=s(Ybe);qpr=r(t2t,"convbert"),t2t.forEach(t),Npr=r(txe," \u2014 "),lz=n(txe,"A",{href:!0});var a2t=s(lz);jpr=r(a2t,"TFConvBertForMultipleChoice"),a2t.forEach(t),Dpr=r(txe," (ConvBERT model)"),txe.forEach(t),Gpr=i(le),iE=n(le,"LI",{});var axe=s(iE);Kbe=n(axe,"STRONG",{});var n2t=s(Kbe);Opr=r(n2t,"distilbert"),n2t.forEach(t),Vpr=r(axe," \u2014 "),iz=n(axe,"A",{href:!0});var s2t=s(iz);Xpr=r(s2t,"TFDistilBertForMultipleChoice"),s2t.forEach(t),zpr=r(axe," (DistilBERT model)"),axe.forEach(t),Qpr=i(le),dE=n(le,"LI",{});var nxe=s(dE);Zbe=n(nxe,"STRONG",{});var l2t=s(Zbe);Wpr=r(l2t,"electra"),l2t.forEach(t),Hpr=r(nxe," \u2014 "),dz=n(nxe,"A",{href:!0});var i2t=s(dz);Upr=r(i2t,"TFElectraForMultipleChoice"),i2t.forEach(t),Jpr=r(nxe," (ELECTRA model)"),nxe.forEach(t),Ypr=i(le),cE=n(le,"LI",{});var sxe=s(cE);e2e=n(sxe,"STRONG",{});var d2t=s(e2e);Kpr=r(d2t,"flaubert"),d2t.forEach(t),Zpr=r(sxe," \u2014 "),cz=n(sxe,"A",{href:!0});var c2t=s(cz);e_r=r(c2t,"TFFlaubertForMultipleChoice"),c2t.forEach(t),o_r=r(sxe," (FlauBERT model)"),sxe.forEach(t),r_r=i(le),mE=n(le,"LI",{});var lxe=s(mE);o2e=n(lxe,"STRONG",{});var m2t=s(o2e);t_r=r(m2t,"funnel"),m2t.forEach(t),a_r=r(lxe," \u2014 "),mz=n(lxe,"A",{href:!0});var f2t=s(mz);n_r=r(f2t,"TFFunnelForMultipleChoice"),f2t.forEach(t),s_r=r(lxe," (Funnel Transformer model)"),lxe.forEach(t),l_r=i(le),fE=n(le,"LI",{});var ixe=s(fE);r2e=n(ixe,"STRONG",{});var g2t=s(r2e);i_r=r(g2t,"longformer"),g2t.forEach(t),d_r=r(ixe," \u2014 "),fz=n(ixe,"A",{href:!0});var h2t=s(fz);c_r=r(h2t,"TFLongformerForMultipleChoice"),h2t.forEach(t),m_r=r(ixe," (Longformer model)"),ixe.forEach(t),f_r=i(le),gE=n(le,"LI",{});var dxe=s(gE);t2e=n(dxe,"STRONG",{});var u2t=s(t2e);g_r=r(u2t,"mobilebert"),u2t.forEach(t),h_r=r(dxe," \u2014 "),gz=n(dxe,"A",{href:!0});var p2t=s(gz);u_r=r(p2t,"TFMobileBertForMultipleChoice"),p2t.forEach(t),p_r=r(dxe," (MobileBERT model)"),dxe.forEach(t),__r=i(le),hE=n(le,"LI",{});var cxe=s(hE);a2e=n(cxe,"STRONG",{});var _2t=s(a2e);b_r=r(_2t,"mpnet"),_2t.forEach(t),F_r=r(cxe," \u2014 "),hz=n(cxe,"A",{href:!0});var b2t=s(hz);v_r=r(b2t,"TFMPNetForMultipleChoice"),b2t.forEach(t),T_r=r(cxe," (MPNet model)"),cxe.forEach(t),M_r=i(le),uE=n(le,"LI",{});var mxe=s(uE);n2e=n(mxe,"STRONG",{});var F2t=s(n2e);E_r=r(F2t,"rembert"),F2t.forEach(t),C_r=r(mxe," \u2014 "),uz=n(mxe,"A",{href:!0});var v2t=s(uz);w_r=r(v2t,"TFRemBertForMultipleChoice"),v2t.forEach(t),A_r=r(mxe," (RemBERT model)"),mxe.forEach(t),y_r=i(le),pE=n(le,"LI",{});var fxe=s(pE);s2e=n(fxe,"STRONG",{});var T2t=s(s2e);L_r=r(T2t,"roberta"),T2t.forEach(t),x_r=r(fxe," \u2014 "),pz=n(fxe,"A",{href:!0});var M2t=s(pz);k_r=r(M2t,"TFRobertaForMultipleChoice"),M2t.forEach(t),S_r=r(fxe," (RoBERTa model)"),fxe.forEach(t),R_r=i(le),_E=n(le,"LI",{});var gxe=s(_E);l2e=n(gxe,"STRONG",{});var E2t=s(l2e);B_r=r(E2t,"roformer"),E2t.forEach(t),P_r=r(gxe," \u2014 "),_z=n(gxe,"A",{href:!0});var C2t=s(_z);$_r=r(C2t,"TFRoFormerForMultipleChoice"),C2t.forEach(t),I_r=r(gxe," (RoFormer model)"),gxe.forEach(t),q_r=i(le),bE=n(le,"LI",{});var hxe=s(bE);i2e=n(hxe,"STRONG",{});var w2t=s(i2e);N_r=r(w2t,"xlm"),w2t.forEach(t),j_r=r(hxe," \u2014 "),bz=n(hxe,"A",{href:!0});var A2t=s(bz);D_r=r(A2t,"TFXLMForMultipleChoice"),A2t.forEach(t),G_r=r(hxe," (XLM model)"),hxe.forEach(t),O_r=i(le),FE=n(le,"LI",{});var uxe=s(FE);d2e=n(uxe,"STRONG",{});var y2t=s(d2e);V_r=r(y2t,"xlm-roberta"),y2t.forEach(t),X_r=r(uxe," \u2014 "),Fz=n(uxe,"A",{href:!0});var L2t=s(Fz);z_r=r(L2t,"TFXLMRobertaForMultipleChoice"),L2t.forEach(t),Q_r=r(uxe," (XLM-RoBERTa model)"),uxe.forEach(t),W_r=i(le),vE=n(le,"LI",{});var pxe=s(vE);c2e=n(pxe,"STRONG",{});var x2t=s(c2e);H_r=r(x2t,"xlnet"),x2t.forEach(t),U_r=r(pxe," \u2014 "),vz=n(pxe,"A",{href:!0});var k2t=s(vz);J_r=r(k2t,"TFXLNetForMultipleChoice"),k2t.forEach(t),Y_r=r(pxe," (XLNet model)"),pxe.forEach(t),le.forEach(t),K_r=i(Ma),m2e=n(Ma,"P",{});var S2t=s(m2e);Z_r=r(S2t,"Examples:"),S2t.forEach(t),ebr=i(Ma),f(oL.$$.fragment,Ma),Ma.forEach(t),Zl.forEach(t),vBe=i(c),qc=n(c,"H2",{class:!0});var S$e=s(qc);TE=n(S$e,"A",{id:!0,class:!0,href:!0});var R2t=s(TE);f2e=n(R2t,"SPAN",{});var B2t=s(f2e);f(rL.$$.fragment,B2t),B2t.forEach(t),R2t.forEach(t),obr=i(S$e),g2e=n(S$e,"SPAN",{});var P2t=s(g2e);rbr=r(P2t,"TFAutoModelForTableQuestionAnswering"),P2t.forEach(t),S$e.forEach(t),TBe=i(c),yr=n(c,"DIV",{class:!0});var oi=s(yr);f(tL.$$.fragment,oi),tbr=i(oi),Nc=n(oi,"P",{});var gJ=s(Nc);abr=r(gJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Tz=n(gJ,"A",{href:!0});var $2t=s(Tz);nbr=r($2t,"from_pretrained()"),$2t.forEach(t),sbr=r(gJ," class method or the "),Mz=n(gJ,"A",{href:!0});var I2t=s(Mz);lbr=r(I2t,"from_config()"),I2t.forEach(t),ibr=r(gJ,` class
method.`),gJ.forEach(t),dbr=i(oi),aL=n(oi,"P",{});var R$e=s(aL);cbr=r(R$e,"This class cannot be instantiated directly using "),h2e=n(R$e,"CODE",{});var q2t=s(h2e);mbr=r(q2t,"__init__()"),q2t.forEach(t),fbr=r(R$e," (throws an error)."),R$e.forEach(t),gbr=i(oi),Tt=n(oi,"DIV",{class:!0});var ri=s(Tt);f(nL.$$.fragment,ri),hbr=i(ri),u2e=n(ri,"P",{});var N2t=s(u2e);ubr=r(N2t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),N2t.forEach(t),pbr=i(ri),jc=n(ri,"P",{});var hJ=s(jc);_br=r(hJ,`Note:
Loading a model from its configuration file does `),p2e=n(hJ,"STRONG",{});var j2t=s(p2e);bbr=r(j2t,"not"),j2t.forEach(t),Fbr=r(hJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=n(hJ,"A",{href:!0});var D2t=s(Ez);vbr=r(D2t,"from_pretrained()"),D2t.forEach(t),Tbr=r(hJ," to load the model weights."),hJ.forEach(t),Mbr=i(ri),_2e=n(ri,"P",{});var G2t=s(_2e);Ebr=r(G2t,"Examples:"),G2t.forEach(t),Cbr=i(ri),f(sL.$$.fragment,ri),ri.forEach(t),wbr=i(oi),Mo=n(oi,"DIV",{class:!0});var Ea=s(Mo);f(lL.$$.fragment,Ea),Abr=i(Ea),b2e=n(Ea,"P",{});var O2t=s(b2e);ybr=r(O2t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),O2t.forEach(t),Lbr=i(Ea),Cn=n(Ea,"P",{});var rw=s(Cn);xbr=r(rw,"The model class to instantiate is selected based on the "),F2e=n(rw,"CODE",{});var V2t=s(F2e);kbr=r(V2t,"model_type"),V2t.forEach(t),Sbr=r(rw,` property of the config object (either
passed as an argument or loaded from `),v2e=n(rw,"CODE",{});var X2t=s(v2e);Rbr=r(X2t,"pretrained_model_name_or_path"),X2t.forEach(t),Bbr=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T2e=n(rw,"CODE",{});var z2t=s(T2e);Pbr=r(z2t,"pretrained_model_name_or_path"),z2t.forEach(t),$br=r(rw,":"),rw.forEach(t),Ibr=i(Ea),M2e=n(Ea,"UL",{});var Q2t=s(M2e);ME=n(Q2t,"LI",{});var _xe=s(ME);E2e=n(_xe,"STRONG",{});var W2t=s(E2e);qbr=r(W2t,"tapas"),W2t.forEach(t),Nbr=r(_xe," \u2014 "),Cz=n(_xe,"A",{href:!0});var H2t=s(Cz);jbr=r(H2t,"TFTapasForQuestionAnswering"),H2t.forEach(t),Dbr=r(_xe," (TAPAS model)"),_xe.forEach(t),Q2t.forEach(t),Gbr=i(Ea),C2e=n(Ea,"P",{});var U2t=s(C2e);Obr=r(U2t,"Examples:"),U2t.forEach(t),Vbr=i(Ea),f(iL.$$.fragment,Ea),Ea.forEach(t),oi.forEach(t),MBe=i(c),Dc=n(c,"H2",{class:!0});var B$e=s(Dc);EE=n(B$e,"A",{id:!0,class:!0,href:!0});var J2t=s(EE);w2e=n(J2t,"SPAN",{});var Y2t=s(w2e);f(dL.$$.fragment,Y2t),Y2t.forEach(t),J2t.forEach(t),Xbr=i(B$e),A2e=n(B$e,"SPAN",{});var K2t=s(A2e);zbr=r(K2t,"TFAutoModelForTokenClassification"),K2t.forEach(t),B$e.forEach(t),EBe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);f(cL.$$.fragment,ti),Qbr=i(ti),Gc=n(ti,"P",{});var uJ=s(Gc);Wbr=r(uJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wz=n(uJ,"A",{href:!0});var Z2t=s(wz);Hbr=r(Z2t,"from_pretrained()"),Z2t.forEach(t),Ubr=r(uJ," class method or the "),Az=n(uJ,"A",{href:!0});var eFt=s(Az);Jbr=r(eFt,"from_config()"),eFt.forEach(t),Ybr=r(uJ,` class
method.`),uJ.forEach(t),Kbr=i(ti),mL=n(ti,"P",{});var P$e=s(mL);Zbr=r(P$e,"This class cannot be instantiated directly using "),y2e=n(P$e,"CODE",{});var oFt=s(y2e);e2r=r(oFt,"__init__()"),oFt.forEach(t),o2r=r(P$e," (throws an error)."),P$e.forEach(t),r2r=i(ti),Mt=n(ti,"DIV",{class:!0});var ai=s(Mt);f(fL.$$.fragment,ai),t2r=i(ai),L2e=n(ai,"P",{});var rFt=s(L2e);a2r=r(rFt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),rFt.forEach(t),n2r=i(ai),Oc=n(ai,"P",{});var pJ=s(Oc);s2r=r(pJ,`Note:
Loading a model from its configuration file does `),x2e=n(pJ,"STRONG",{});var tFt=s(x2e);l2r=r(tFt,"not"),tFt.forEach(t),i2r=r(pJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=n(pJ,"A",{href:!0});var aFt=s(yz);d2r=r(aFt,"from_pretrained()"),aFt.forEach(t),c2r=r(pJ," to load the model weights."),pJ.forEach(t),m2r=i(ai),k2e=n(ai,"P",{});var nFt=s(k2e);f2r=r(nFt,"Examples:"),nFt.forEach(t),g2r=i(ai),f(gL.$$.fragment,ai),ai.forEach(t),h2r=i(ti),Eo=n(ti,"DIV",{class:!0});var Ca=s(Eo);f(hL.$$.fragment,Ca),u2r=i(Ca),S2e=n(Ca,"P",{});var sFt=s(S2e);p2r=r(sFt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sFt.forEach(t),_2r=i(Ca),wn=n(Ca,"P",{});var tw=s(wn);b2r=r(tw,"The model class to instantiate is selected based on the "),R2e=n(tw,"CODE",{});var lFt=s(R2e);F2r=r(lFt,"model_type"),lFt.forEach(t),v2r=r(tw,` property of the config object (either
passed as an argument or loaded from `),B2e=n(tw,"CODE",{});var iFt=s(B2e);T2r=r(iFt,"pretrained_model_name_or_path"),iFt.forEach(t),M2r=r(tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P2e=n(tw,"CODE",{});var dFt=s(P2e);E2r=r(dFt,"pretrained_model_name_or_path"),dFt.forEach(t),C2r=r(tw,":"),tw.forEach(t),w2r=i(Ca),Y=n(Ca,"UL",{});var re=s(Y);CE=n(re,"LI",{});var bxe=s(CE);$2e=n(bxe,"STRONG",{});var cFt=s($2e);A2r=r(cFt,"albert"),cFt.forEach(t),y2r=r(bxe," \u2014 "),Lz=n(bxe,"A",{href:!0});var mFt=s(Lz);L2r=r(mFt,"TFAlbertForTokenClassification"),mFt.forEach(t),x2r=r(bxe," (ALBERT model)"),bxe.forEach(t),k2r=i(re),wE=n(re,"LI",{});var Fxe=s(wE);I2e=n(Fxe,"STRONG",{});var fFt=s(I2e);S2r=r(fFt,"bert"),fFt.forEach(t),R2r=r(Fxe," \u2014 "),xz=n(Fxe,"A",{href:!0});var gFt=s(xz);B2r=r(gFt,"TFBertForTokenClassification"),gFt.forEach(t),P2r=r(Fxe," (BERT model)"),Fxe.forEach(t),$2r=i(re),AE=n(re,"LI",{});var vxe=s(AE);q2e=n(vxe,"STRONG",{});var hFt=s(q2e);I2r=r(hFt,"camembert"),hFt.forEach(t),q2r=r(vxe," \u2014 "),kz=n(vxe,"A",{href:!0});var uFt=s(kz);N2r=r(uFt,"TFCamembertForTokenClassification"),uFt.forEach(t),j2r=r(vxe," (CamemBERT model)"),vxe.forEach(t),D2r=i(re),yE=n(re,"LI",{});var Txe=s(yE);N2e=n(Txe,"STRONG",{});var pFt=s(N2e);G2r=r(pFt,"convbert"),pFt.forEach(t),O2r=r(Txe," \u2014 "),Sz=n(Txe,"A",{href:!0});var _Ft=s(Sz);V2r=r(_Ft,"TFConvBertForTokenClassification"),_Ft.forEach(t),X2r=r(Txe," (ConvBERT model)"),Txe.forEach(t),z2r=i(re),LE=n(re,"LI",{});var Mxe=s(LE);j2e=n(Mxe,"STRONG",{});var bFt=s(j2e);Q2r=r(bFt,"deberta"),bFt.forEach(t),W2r=r(Mxe," \u2014 "),Rz=n(Mxe,"A",{href:!0});var FFt=s(Rz);H2r=r(FFt,"TFDebertaForTokenClassification"),FFt.forEach(t),U2r=r(Mxe," (DeBERTa model)"),Mxe.forEach(t),J2r=i(re),xE=n(re,"LI",{});var Exe=s(xE);D2e=n(Exe,"STRONG",{});var vFt=s(D2e);Y2r=r(vFt,"deberta-v2"),vFt.forEach(t),K2r=r(Exe," \u2014 "),Bz=n(Exe,"A",{href:!0});var TFt=s(Bz);Z2r=r(TFt,"TFDebertaV2ForTokenClassification"),TFt.forEach(t),eFr=r(Exe," (DeBERTa-v2 model)"),Exe.forEach(t),oFr=i(re),kE=n(re,"LI",{});var Cxe=s(kE);G2e=n(Cxe,"STRONG",{});var MFt=s(G2e);rFr=r(MFt,"distilbert"),MFt.forEach(t),tFr=r(Cxe," \u2014 "),Pz=n(Cxe,"A",{href:!0});var EFt=s(Pz);aFr=r(EFt,"TFDistilBertForTokenClassification"),EFt.forEach(t),nFr=r(Cxe," (DistilBERT model)"),Cxe.forEach(t),sFr=i(re),SE=n(re,"LI",{});var wxe=s(SE);O2e=n(wxe,"STRONG",{});var CFt=s(O2e);lFr=r(CFt,"electra"),CFt.forEach(t),iFr=r(wxe," \u2014 "),$z=n(wxe,"A",{href:!0});var wFt=s($z);dFr=r(wFt,"TFElectraForTokenClassification"),wFt.forEach(t),cFr=r(wxe," (ELECTRA model)"),wxe.forEach(t),mFr=i(re),RE=n(re,"LI",{});var Axe=s(RE);V2e=n(Axe,"STRONG",{});var AFt=s(V2e);fFr=r(AFt,"flaubert"),AFt.forEach(t),gFr=r(Axe," \u2014 "),Iz=n(Axe,"A",{href:!0});var yFt=s(Iz);hFr=r(yFt,"TFFlaubertForTokenClassification"),yFt.forEach(t),uFr=r(Axe," (FlauBERT model)"),Axe.forEach(t),pFr=i(re),BE=n(re,"LI",{});var yxe=s(BE);X2e=n(yxe,"STRONG",{});var LFt=s(X2e);_Fr=r(LFt,"funnel"),LFt.forEach(t),bFr=r(yxe," \u2014 "),qz=n(yxe,"A",{href:!0});var xFt=s(qz);FFr=r(xFt,"TFFunnelForTokenClassification"),xFt.forEach(t),vFr=r(yxe," (Funnel Transformer model)"),yxe.forEach(t),TFr=i(re),PE=n(re,"LI",{});var Lxe=s(PE);z2e=n(Lxe,"STRONG",{});var kFt=s(z2e);MFr=r(kFt,"layoutlm"),kFt.forEach(t),EFr=r(Lxe," \u2014 "),Nz=n(Lxe,"A",{href:!0});var SFt=s(Nz);CFr=r(SFt,"TFLayoutLMForTokenClassification"),SFt.forEach(t),wFr=r(Lxe," (LayoutLM model)"),Lxe.forEach(t),AFr=i(re),$E=n(re,"LI",{});var xxe=s($E);Q2e=n(xxe,"STRONG",{});var RFt=s(Q2e);yFr=r(RFt,"longformer"),RFt.forEach(t),LFr=r(xxe," \u2014 "),jz=n(xxe,"A",{href:!0});var BFt=s(jz);xFr=r(BFt,"TFLongformerForTokenClassification"),BFt.forEach(t),kFr=r(xxe," (Longformer model)"),xxe.forEach(t),SFr=i(re),IE=n(re,"LI",{});var kxe=s(IE);W2e=n(kxe,"STRONG",{});var PFt=s(W2e);RFr=r(PFt,"mobilebert"),PFt.forEach(t),BFr=r(kxe," \u2014 "),Dz=n(kxe,"A",{href:!0});var $Ft=s(Dz);PFr=r($Ft,"TFMobileBertForTokenClassification"),$Ft.forEach(t),$Fr=r(kxe," (MobileBERT model)"),kxe.forEach(t),IFr=i(re),qE=n(re,"LI",{});var Sxe=s(qE);H2e=n(Sxe,"STRONG",{});var IFt=s(H2e);qFr=r(IFt,"mpnet"),IFt.forEach(t),NFr=r(Sxe," \u2014 "),Gz=n(Sxe,"A",{href:!0});var qFt=s(Gz);jFr=r(qFt,"TFMPNetForTokenClassification"),qFt.forEach(t),DFr=r(Sxe," (MPNet model)"),Sxe.forEach(t),GFr=i(re),NE=n(re,"LI",{});var Rxe=s(NE);U2e=n(Rxe,"STRONG",{});var NFt=s(U2e);OFr=r(NFt,"rembert"),NFt.forEach(t),VFr=r(Rxe," \u2014 "),Oz=n(Rxe,"A",{href:!0});var jFt=s(Oz);XFr=r(jFt,"TFRemBertForTokenClassification"),jFt.forEach(t),zFr=r(Rxe," (RemBERT model)"),Rxe.forEach(t),QFr=i(re),jE=n(re,"LI",{});var Bxe=s(jE);J2e=n(Bxe,"STRONG",{});var DFt=s(J2e);WFr=r(DFt,"roberta"),DFt.forEach(t),HFr=r(Bxe," \u2014 "),Vz=n(Bxe,"A",{href:!0});var GFt=s(Vz);UFr=r(GFt,"TFRobertaForTokenClassification"),GFt.forEach(t),JFr=r(Bxe," (RoBERTa model)"),Bxe.forEach(t),YFr=i(re),DE=n(re,"LI",{});var Pxe=s(DE);Y2e=n(Pxe,"STRONG",{});var OFt=s(Y2e);KFr=r(OFt,"roformer"),OFt.forEach(t),ZFr=r(Pxe," \u2014 "),Xz=n(Pxe,"A",{href:!0});var VFt=s(Xz);evr=r(VFt,"TFRoFormerForTokenClassification"),VFt.forEach(t),ovr=r(Pxe," (RoFormer model)"),Pxe.forEach(t),rvr=i(re),GE=n(re,"LI",{});var $xe=s(GE);K2e=n($xe,"STRONG",{});var XFt=s(K2e);tvr=r(XFt,"xlm"),XFt.forEach(t),avr=r($xe," \u2014 "),zz=n($xe,"A",{href:!0});var zFt=s(zz);nvr=r(zFt,"TFXLMForTokenClassification"),zFt.forEach(t),svr=r($xe," (XLM model)"),$xe.forEach(t),lvr=i(re),OE=n(re,"LI",{});var Ixe=s(OE);Z2e=n(Ixe,"STRONG",{});var QFt=s(Z2e);ivr=r(QFt,"xlm-roberta"),QFt.forEach(t),dvr=r(Ixe," \u2014 "),Qz=n(Ixe,"A",{href:!0});var WFt=s(Qz);cvr=r(WFt,"TFXLMRobertaForTokenClassification"),WFt.forEach(t),mvr=r(Ixe," (XLM-RoBERTa model)"),Ixe.forEach(t),fvr=i(re),VE=n(re,"LI",{});var qxe=s(VE);eFe=n(qxe,"STRONG",{});var HFt=s(eFe);gvr=r(HFt,"xlnet"),HFt.forEach(t),hvr=r(qxe," \u2014 "),Wz=n(qxe,"A",{href:!0});var UFt=s(Wz);uvr=r(UFt,"TFXLNetForTokenClassification"),UFt.forEach(t),pvr=r(qxe," (XLNet model)"),qxe.forEach(t),re.forEach(t),_vr=i(Ca),oFe=n(Ca,"P",{});var JFt=s(oFe);bvr=r(JFt,"Examples:"),JFt.forEach(t),Fvr=i(Ca),f(uL.$$.fragment,Ca),Ca.forEach(t),ti.forEach(t),CBe=i(c),Vc=n(c,"H2",{class:!0});var $$e=s(Vc);XE=n($$e,"A",{id:!0,class:!0,href:!0});var YFt=s(XE);rFe=n(YFt,"SPAN",{});var KFt=s(rFe);f(pL.$$.fragment,KFt),KFt.forEach(t),YFt.forEach(t),vvr=i($$e),tFe=n($$e,"SPAN",{});var ZFt=s(tFe);Tvr=r(ZFt,"TFAutoModelForQuestionAnswering"),ZFt.forEach(t),$$e.forEach(t),wBe=i(c),xr=n(c,"DIV",{class:!0});var ni=s(xr);f(_L.$$.fragment,ni),Mvr=i(ni),Xc=n(ni,"P",{});var _J=s(Xc);Evr=r(_J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Hz=n(_J,"A",{href:!0});var evt=s(Hz);Cvr=r(evt,"from_pretrained()"),evt.forEach(t),wvr=r(_J," class method or the "),Uz=n(_J,"A",{href:!0});var ovt=s(Uz);Avr=r(ovt,"from_config()"),ovt.forEach(t),yvr=r(_J,` class
method.`),_J.forEach(t),Lvr=i(ni),bL=n(ni,"P",{});var I$e=s(bL);xvr=r(I$e,"This class cannot be instantiated directly using "),aFe=n(I$e,"CODE",{});var rvt=s(aFe);kvr=r(rvt,"__init__()"),rvt.forEach(t),Svr=r(I$e," (throws an error)."),I$e.forEach(t),Rvr=i(ni),Et=n(ni,"DIV",{class:!0});var si=s(Et);f(FL.$$.fragment,si),Bvr=i(si),nFe=n(si,"P",{});var tvt=s(nFe);Pvr=r(tvt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),tvt.forEach(t),$vr=i(si),zc=n(si,"P",{});var bJ=s(zc);Ivr=r(bJ,`Note:
Loading a model from its configuration file does `),sFe=n(bJ,"STRONG",{});var avt=s(sFe);qvr=r(avt,"not"),avt.forEach(t),Nvr=r(bJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=n(bJ,"A",{href:!0});var nvt=s(Jz);jvr=r(nvt,"from_pretrained()"),nvt.forEach(t),Dvr=r(bJ," to load the model weights."),bJ.forEach(t),Gvr=i(si),lFe=n(si,"P",{});var svt=s(lFe);Ovr=r(svt,"Examples:"),svt.forEach(t),Vvr=i(si),f(vL.$$.fragment,si),si.forEach(t),Xvr=i(ni),Co=n(ni,"DIV",{class:!0});var wa=s(Co);f(TL.$$.fragment,wa),zvr=i(wa),iFe=n(wa,"P",{});var lvt=s(iFe);Qvr=r(lvt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),lvt.forEach(t),Wvr=i(wa),An=n(wa,"P",{});var aw=s(An);Hvr=r(aw,"The model class to instantiate is selected based on the "),dFe=n(aw,"CODE",{});var ivt=s(dFe);Uvr=r(ivt,"model_type"),ivt.forEach(t),Jvr=r(aw,` property of the config object (either
passed as an argument or loaded from `),cFe=n(aw,"CODE",{});var dvt=s(cFe);Yvr=r(dvt,"pretrained_model_name_or_path"),dvt.forEach(t),Kvr=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mFe=n(aw,"CODE",{});var cvt=s(mFe);Zvr=r(cvt,"pretrained_model_name_or_path"),cvt.forEach(t),eTr=r(aw,":"),aw.forEach(t),oTr=i(wa),K=n(wa,"UL",{});var te=s(K);zE=n(te,"LI",{});var Nxe=s(zE);fFe=n(Nxe,"STRONG",{});var mvt=s(fFe);rTr=r(mvt,"albert"),mvt.forEach(t),tTr=r(Nxe," \u2014 "),Yz=n(Nxe,"A",{href:!0});var fvt=s(Yz);aTr=r(fvt,"TFAlbertForQuestionAnswering"),fvt.forEach(t),nTr=r(Nxe," (ALBERT model)"),Nxe.forEach(t),sTr=i(te),QE=n(te,"LI",{});var jxe=s(QE);gFe=n(jxe,"STRONG",{});var gvt=s(gFe);lTr=r(gvt,"bert"),gvt.forEach(t),iTr=r(jxe," \u2014 "),Kz=n(jxe,"A",{href:!0});var hvt=s(Kz);dTr=r(hvt,"TFBertForQuestionAnswering"),hvt.forEach(t),cTr=r(jxe," (BERT model)"),jxe.forEach(t),mTr=i(te),WE=n(te,"LI",{});var Dxe=s(WE);hFe=n(Dxe,"STRONG",{});var uvt=s(hFe);fTr=r(uvt,"camembert"),uvt.forEach(t),gTr=r(Dxe," \u2014 "),Zz=n(Dxe,"A",{href:!0});var pvt=s(Zz);hTr=r(pvt,"TFCamembertForQuestionAnswering"),pvt.forEach(t),uTr=r(Dxe," (CamemBERT model)"),Dxe.forEach(t),pTr=i(te),HE=n(te,"LI",{});var Gxe=s(HE);uFe=n(Gxe,"STRONG",{});var _vt=s(uFe);_Tr=r(_vt,"convbert"),_vt.forEach(t),bTr=r(Gxe," \u2014 "),eQ=n(Gxe,"A",{href:!0});var bvt=s(eQ);FTr=r(bvt,"TFConvBertForQuestionAnswering"),bvt.forEach(t),vTr=r(Gxe," (ConvBERT model)"),Gxe.forEach(t),TTr=i(te),UE=n(te,"LI",{});var Oxe=s(UE);pFe=n(Oxe,"STRONG",{});var Fvt=s(pFe);MTr=r(Fvt,"deberta"),Fvt.forEach(t),ETr=r(Oxe," \u2014 "),oQ=n(Oxe,"A",{href:!0});var vvt=s(oQ);CTr=r(vvt,"TFDebertaForQuestionAnswering"),vvt.forEach(t),wTr=r(Oxe," (DeBERTa model)"),Oxe.forEach(t),ATr=i(te),JE=n(te,"LI",{});var Vxe=s(JE);_Fe=n(Vxe,"STRONG",{});var Tvt=s(_Fe);yTr=r(Tvt,"deberta-v2"),Tvt.forEach(t),LTr=r(Vxe," \u2014 "),rQ=n(Vxe,"A",{href:!0});var Mvt=s(rQ);xTr=r(Mvt,"TFDebertaV2ForQuestionAnswering"),Mvt.forEach(t),kTr=r(Vxe," (DeBERTa-v2 model)"),Vxe.forEach(t),STr=i(te),YE=n(te,"LI",{});var Xxe=s(YE);bFe=n(Xxe,"STRONG",{});var Evt=s(bFe);RTr=r(Evt,"distilbert"),Evt.forEach(t),BTr=r(Xxe," \u2014 "),tQ=n(Xxe,"A",{href:!0});var Cvt=s(tQ);PTr=r(Cvt,"TFDistilBertForQuestionAnswering"),Cvt.forEach(t),$Tr=r(Xxe," (DistilBERT model)"),Xxe.forEach(t),ITr=i(te),KE=n(te,"LI",{});var zxe=s(KE);FFe=n(zxe,"STRONG",{});var wvt=s(FFe);qTr=r(wvt,"electra"),wvt.forEach(t),NTr=r(zxe," \u2014 "),aQ=n(zxe,"A",{href:!0});var Avt=s(aQ);jTr=r(Avt,"TFElectraForQuestionAnswering"),Avt.forEach(t),DTr=r(zxe," (ELECTRA model)"),zxe.forEach(t),GTr=i(te),ZE=n(te,"LI",{});var Qxe=s(ZE);vFe=n(Qxe,"STRONG",{});var yvt=s(vFe);OTr=r(yvt,"flaubert"),yvt.forEach(t),VTr=r(Qxe," \u2014 "),nQ=n(Qxe,"A",{href:!0});var Lvt=s(nQ);XTr=r(Lvt,"TFFlaubertForQuestionAnsweringSimple"),Lvt.forEach(t),zTr=r(Qxe," (FlauBERT model)"),Qxe.forEach(t),QTr=i(te),eC=n(te,"LI",{});var Wxe=s(eC);TFe=n(Wxe,"STRONG",{});var xvt=s(TFe);WTr=r(xvt,"funnel"),xvt.forEach(t),HTr=r(Wxe," \u2014 "),sQ=n(Wxe,"A",{href:!0});var kvt=s(sQ);UTr=r(kvt,"TFFunnelForQuestionAnswering"),kvt.forEach(t),JTr=r(Wxe," (Funnel Transformer model)"),Wxe.forEach(t),YTr=i(te),oC=n(te,"LI",{});var Hxe=s(oC);MFe=n(Hxe,"STRONG",{});var Svt=s(MFe);KTr=r(Svt,"gptj"),Svt.forEach(t),ZTr=r(Hxe," \u2014 "),lQ=n(Hxe,"A",{href:!0});var Rvt=s(lQ);e1r=r(Rvt,"TFGPTJForQuestionAnswering"),Rvt.forEach(t),o1r=r(Hxe," (GPT-J model)"),Hxe.forEach(t),r1r=i(te),rC=n(te,"LI",{});var Uxe=s(rC);EFe=n(Uxe,"STRONG",{});var Bvt=s(EFe);t1r=r(Bvt,"longformer"),Bvt.forEach(t),a1r=r(Uxe," \u2014 "),iQ=n(Uxe,"A",{href:!0});var Pvt=s(iQ);n1r=r(Pvt,"TFLongformerForQuestionAnswering"),Pvt.forEach(t),s1r=r(Uxe," (Longformer model)"),Uxe.forEach(t),l1r=i(te),tC=n(te,"LI",{});var Jxe=s(tC);CFe=n(Jxe,"STRONG",{});var $vt=s(CFe);i1r=r($vt,"mobilebert"),$vt.forEach(t),d1r=r(Jxe," \u2014 "),dQ=n(Jxe,"A",{href:!0});var Ivt=s(dQ);c1r=r(Ivt,"TFMobileBertForQuestionAnswering"),Ivt.forEach(t),m1r=r(Jxe," (MobileBERT model)"),Jxe.forEach(t),f1r=i(te),aC=n(te,"LI",{});var Yxe=s(aC);wFe=n(Yxe,"STRONG",{});var qvt=s(wFe);g1r=r(qvt,"mpnet"),qvt.forEach(t),h1r=r(Yxe," \u2014 "),cQ=n(Yxe,"A",{href:!0});var Nvt=s(cQ);u1r=r(Nvt,"TFMPNetForQuestionAnswering"),Nvt.forEach(t),p1r=r(Yxe," (MPNet model)"),Yxe.forEach(t),_1r=i(te),nC=n(te,"LI",{});var Kxe=s(nC);AFe=n(Kxe,"STRONG",{});var jvt=s(AFe);b1r=r(jvt,"rembert"),jvt.forEach(t),F1r=r(Kxe," \u2014 "),mQ=n(Kxe,"A",{href:!0});var Dvt=s(mQ);v1r=r(Dvt,"TFRemBertForQuestionAnswering"),Dvt.forEach(t),T1r=r(Kxe," (RemBERT model)"),Kxe.forEach(t),M1r=i(te),sC=n(te,"LI",{});var Zxe=s(sC);yFe=n(Zxe,"STRONG",{});var Gvt=s(yFe);E1r=r(Gvt,"roberta"),Gvt.forEach(t),C1r=r(Zxe," \u2014 "),fQ=n(Zxe,"A",{href:!0});var Ovt=s(fQ);w1r=r(Ovt,"TFRobertaForQuestionAnswering"),Ovt.forEach(t),A1r=r(Zxe," (RoBERTa model)"),Zxe.forEach(t),y1r=i(te),lC=n(te,"LI",{});var eke=s(lC);LFe=n(eke,"STRONG",{});var Vvt=s(LFe);L1r=r(Vvt,"roformer"),Vvt.forEach(t),x1r=r(eke," \u2014 "),gQ=n(eke,"A",{href:!0});var Xvt=s(gQ);k1r=r(Xvt,"TFRoFormerForQuestionAnswering"),Xvt.forEach(t),S1r=r(eke," (RoFormer model)"),eke.forEach(t),R1r=i(te),iC=n(te,"LI",{});var oke=s(iC);xFe=n(oke,"STRONG",{});var zvt=s(xFe);B1r=r(zvt,"xlm"),zvt.forEach(t),P1r=r(oke," \u2014 "),hQ=n(oke,"A",{href:!0});var Qvt=s(hQ);$1r=r(Qvt,"TFXLMForQuestionAnsweringSimple"),Qvt.forEach(t),I1r=r(oke," (XLM model)"),oke.forEach(t),q1r=i(te),dC=n(te,"LI",{});var rke=s(dC);kFe=n(rke,"STRONG",{});var Wvt=s(kFe);N1r=r(Wvt,"xlm-roberta"),Wvt.forEach(t),j1r=r(rke," \u2014 "),uQ=n(rke,"A",{href:!0});var Hvt=s(uQ);D1r=r(Hvt,"TFXLMRobertaForQuestionAnswering"),Hvt.forEach(t),G1r=r(rke," (XLM-RoBERTa model)"),rke.forEach(t),O1r=i(te),cC=n(te,"LI",{});var tke=s(cC);SFe=n(tke,"STRONG",{});var Uvt=s(SFe);V1r=r(Uvt,"xlnet"),Uvt.forEach(t),X1r=r(tke," \u2014 "),pQ=n(tke,"A",{href:!0});var Jvt=s(pQ);z1r=r(Jvt,"TFXLNetForQuestionAnsweringSimple"),Jvt.forEach(t),Q1r=r(tke," (XLNet model)"),tke.forEach(t),te.forEach(t),W1r=i(wa),RFe=n(wa,"P",{});var Yvt=s(RFe);H1r=r(Yvt,"Examples:"),Yvt.forEach(t),U1r=i(wa),f(ML.$$.fragment,wa),wa.forEach(t),ni.forEach(t),ABe=i(c),Qc=n(c,"H2",{class:!0});var q$e=s(Qc);mC=n(q$e,"A",{id:!0,class:!0,href:!0});var Kvt=s(mC);BFe=n(Kvt,"SPAN",{});var Zvt=s(BFe);f(EL.$$.fragment,Zvt),Zvt.forEach(t),Kvt.forEach(t),J1r=i(q$e),PFe=n(q$e,"SPAN",{});var eTt=s(PFe);Y1r=r(eTt,"TFAutoModelForVision2Seq"),eTt.forEach(t),q$e.forEach(t),yBe=i(c),kr=n(c,"DIV",{class:!0});var li=s(kr);f(CL.$$.fragment,li),K1r=i(li),Wc=n(li,"P",{});var FJ=s(Wc);Z1r=r(FJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_Q=n(FJ,"A",{href:!0});var oTt=s(_Q);eMr=r(oTt,"from_pretrained()"),oTt.forEach(t),oMr=r(FJ," class method or the "),bQ=n(FJ,"A",{href:!0});var rTt=s(bQ);rMr=r(rTt,"from_config()"),rTt.forEach(t),tMr=r(FJ,` class
method.`),FJ.forEach(t),aMr=i(li),wL=n(li,"P",{});var N$e=s(wL);nMr=r(N$e,"This class cannot be instantiated directly using "),$Fe=n(N$e,"CODE",{});var tTt=s($Fe);sMr=r(tTt,"__init__()"),tTt.forEach(t),lMr=r(N$e," (throws an error)."),N$e.forEach(t),iMr=i(li),Ct=n(li,"DIV",{class:!0});var ii=s(Ct);f(AL.$$.fragment,ii),dMr=i(ii),IFe=n(ii,"P",{});var aTt=s(IFe);cMr=r(aTt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),aTt.forEach(t),mMr=i(ii),Hc=n(ii,"P",{});var vJ=s(Hc);fMr=r(vJ,`Note:
Loading a model from its configuration file does `),qFe=n(vJ,"STRONG",{});var nTt=s(qFe);gMr=r(nTt,"not"),nTt.forEach(t),hMr=r(vJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=n(vJ,"A",{href:!0});var sTt=s(FQ);uMr=r(sTt,"from_pretrained()"),sTt.forEach(t),pMr=r(vJ," to load the model weights."),vJ.forEach(t),_Mr=i(ii),NFe=n(ii,"P",{});var lTt=s(NFe);bMr=r(lTt,"Examples:"),lTt.forEach(t),FMr=i(ii),f(yL.$$.fragment,ii),ii.forEach(t),vMr=i(li),wo=n(li,"DIV",{class:!0});var Aa=s(wo);f(LL.$$.fragment,Aa),TMr=i(Aa),jFe=n(Aa,"P",{});var iTt=s(jFe);MMr=r(iTt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),iTt.forEach(t),EMr=i(Aa),yn=n(Aa,"P",{});var nw=s(yn);CMr=r(nw,"The model class to instantiate is selected based on the "),DFe=n(nw,"CODE",{});var dTt=s(DFe);wMr=r(dTt,"model_type"),dTt.forEach(t),AMr=r(nw,` property of the config object (either
passed as an argument or loaded from `),GFe=n(nw,"CODE",{});var cTt=s(GFe);yMr=r(cTt,"pretrained_model_name_or_path"),cTt.forEach(t),LMr=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OFe=n(nw,"CODE",{});var mTt=s(OFe);xMr=r(mTt,"pretrained_model_name_or_path"),mTt.forEach(t),kMr=r(nw,":"),nw.forEach(t),SMr=i(Aa),VFe=n(Aa,"UL",{});var fTt=s(VFe);fC=n(fTt,"LI",{});var ake=s(fC);XFe=n(ake,"STRONG",{});var gTt=s(XFe);RMr=r(gTt,"vision-encoder-decoder"),gTt.forEach(t),BMr=r(ake," \u2014 "),vQ=n(ake,"A",{href:!0});var hTt=s(vQ);PMr=r(hTt,"TFVisionEncoderDecoderModel"),hTt.forEach(t),$Mr=r(ake," (Vision Encoder decoder model)"),ake.forEach(t),fTt.forEach(t),IMr=i(Aa),zFe=n(Aa,"P",{});var uTt=s(zFe);qMr=r(uTt,"Examples:"),uTt.forEach(t),NMr=i(Aa),f(xL.$$.fragment,Aa),Aa.forEach(t),li.forEach(t),LBe=i(c),Uc=n(c,"H2",{class:!0});var j$e=s(Uc);gC=n(j$e,"A",{id:!0,class:!0,href:!0});var pTt=s(gC);QFe=n(pTt,"SPAN",{});var _Tt=s(QFe);f(kL.$$.fragment,_Tt),_Tt.forEach(t),pTt.forEach(t),jMr=i(j$e),WFe=n(j$e,"SPAN",{});var bTt=s(WFe);DMr=r(bTt,"TFAutoModelForSpeechSeq2Seq"),bTt.forEach(t),j$e.forEach(t),xBe=i(c),Sr=n(c,"DIV",{class:!0});var di=s(Sr);f(SL.$$.fragment,di),GMr=i(di),Jc=n(di,"P",{});var TJ=s(Jc);OMr=r(TJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),TQ=n(TJ,"A",{href:!0});var FTt=s(TQ);VMr=r(FTt,"from_pretrained()"),FTt.forEach(t),XMr=r(TJ," class method or the "),MQ=n(TJ,"A",{href:!0});var vTt=s(MQ);zMr=r(vTt,"from_config()"),vTt.forEach(t),QMr=r(TJ,` class
method.`),TJ.forEach(t),WMr=i(di),RL=n(di,"P",{});var D$e=s(RL);HMr=r(D$e,"This class cannot be instantiated directly using "),HFe=n(D$e,"CODE",{});var TTt=s(HFe);UMr=r(TTt,"__init__()"),TTt.forEach(t),JMr=r(D$e," (throws an error)."),D$e.forEach(t),YMr=i(di),wt=n(di,"DIV",{class:!0});var ci=s(wt);f(BL.$$.fragment,ci),KMr=i(ci),UFe=n(ci,"P",{});var MTt=s(UFe);ZMr=r(MTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),MTt.forEach(t),e4r=i(ci),Yc=n(ci,"P",{});var MJ=s(Yc);o4r=r(MJ,`Note:
Loading a model from its configuration file does `),JFe=n(MJ,"STRONG",{});var ETt=s(JFe);r4r=r(ETt,"not"),ETt.forEach(t),t4r=r(MJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EQ=n(MJ,"A",{href:!0});var CTt=s(EQ);a4r=r(CTt,"from_pretrained()"),CTt.forEach(t),n4r=r(MJ," to load the model weights."),MJ.forEach(t),s4r=i(ci),YFe=n(ci,"P",{});var wTt=s(YFe);l4r=r(wTt,"Examples:"),wTt.forEach(t),i4r=i(ci),f(PL.$$.fragment,ci),ci.forEach(t),d4r=i(di),Ao=n(di,"DIV",{class:!0});var ya=s(Ao);f($L.$$.fragment,ya),c4r=i(ya),KFe=n(ya,"P",{});var ATt=s(KFe);m4r=r(ATt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ATt.forEach(t),f4r=i(ya),Ln=n(ya,"P",{});var sw=s(Ln);g4r=r(sw,"The model class to instantiate is selected based on the "),ZFe=n(sw,"CODE",{});var yTt=s(ZFe);h4r=r(yTt,"model_type"),yTt.forEach(t),u4r=r(sw,` property of the config object (either
passed as an argument or loaded from `),eve=n(sw,"CODE",{});var LTt=s(eve);p4r=r(LTt,"pretrained_model_name_or_path"),LTt.forEach(t),_4r=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=n(sw,"CODE",{});var xTt=s(ove);b4r=r(xTt,"pretrained_model_name_or_path"),xTt.forEach(t),F4r=r(sw,":"),sw.forEach(t),v4r=i(ya),rve=n(ya,"UL",{});var kTt=s(rve);hC=n(kTt,"LI",{});var nke=s(hC);tve=n(nke,"STRONG",{});var STt=s(tve);T4r=r(STt,"speech_to_text"),STt.forEach(t),M4r=r(nke," \u2014 "),CQ=n(nke,"A",{href:!0});var RTt=s(CQ);E4r=r(RTt,"TFSpeech2TextForConditionalGeneration"),RTt.forEach(t),C4r=r(nke," (Speech2Text model)"),nke.forEach(t),kTt.forEach(t),w4r=i(ya),ave=n(ya,"P",{});var BTt=s(ave);A4r=r(BTt,"Examples:"),BTt.forEach(t),y4r=i(ya),f(IL.$$.fragment,ya),ya.forEach(t),di.forEach(t),kBe=i(c),Kc=n(c,"H2",{class:!0});var G$e=s(Kc);uC=n(G$e,"A",{id:!0,class:!0,href:!0});var PTt=s(uC);nve=n(PTt,"SPAN",{});var $Tt=s(nve);f(qL.$$.fragment,$Tt),$Tt.forEach(t),PTt.forEach(t),L4r=i(G$e),sve=n(G$e,"SPAN",{});var ITt=s(sve);x4r=r(ITt,"FlaxAutoModel"),ITt.forEach(t),G$e.forEach(t),SBe=i(c),Rr=n(c,"DIV",{class:!0});var mi=s(Rr);f(NL.$$.fragment,mi),k4r=i(mi),Zc=n(mi,"P",{});var EJ=s(Zc);S4r=r(EJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wQ=n(EJ,"A",{href:!0});var qTt=s(wQ);R4r=r(qTt,"from_pretrained()"),qTt.forEach(t),B4r=r(EJ," class method or the "),AQ=n(EJ,"A",{href:!0});var NTt=s(AQ);P4r=r(NTt,"from_config()"),NTt.forEach(t),$4r=r(EJ,` class
method.`),EJ.forEach(t),I4r=i(mi),jL=n(mi,"P",{});var O$e=s(jL);q4r=r(O$e,"This class cannot be instantiated directly using "),lve=n(O$e,"CODE",{});var jTt=s(lve);N4r=r(jTt,"__init__()"),jTt.forEach(t),j4r=r(O$e," (throws an error)."),O$e.forEach(t),D4r=i(mi),At=n(mi,"DIV",{class:!0});var fi=s(At);f(DL.$$.fragment,fi),G4r=i(fi),ive=n(fi,"P",{});var DTt=s(ive);O4r=r(DTt,"Instantiates one of the base model classes of the library from a configuration."),DTt.forEach(t),V4r=i(fi),em=n(fi,"P",{});var CJ=s(em);X4r=r(CJ,`Note:
Loading a model from its configuration file does `),dve=n(CJ,"STRONG",{});var GTt=s(dve);z4r=r(GTt,"not"),GTt.forEach(t),Q4r=r(CJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=n(CJ,"A",{href:!0});var OTt=s(yQ);W4r=r(OTt,"from_pretrained()"),OTt.forEach(t),H4r=r(CJ," to load the model weights."),CJ.forEach(t),U4r=i(fi),cve=n(fi,"P",{});var VTt=s(cve);J4r=r(VTt,"Examples:"),VTt.forEach(t),Y4r=i(fi),f(GL.$$.fragment,fi),fi.forEach(t),K4r=i(mi),yo=n(mi,"DIV",{class:!0});var La=s(yo);f(OL.$$.fragment,La),Z4r=i(La),mve=n(La,"P",{});var XTt=s(mve);eEr=r(XTt,"Instantiate one of the base model classes of the library from a pretrained model."),XTt.forEach(t),oEr=i(La),xn=n(La,"P",{});var lw=s(xn);rEr=r(lw,"The model class to instantiate is selected based on the "),fve=n(lw,"CODE",{});var zTt=s(fve);tEr=r(zTt,"model_type"),zTt.forEach(t),aEr=r(lw,` property of the config object (either
passed as an argument or loaded from `),gve=n(lw,"CODE",{});var QTt=s(gve);nEr=r(QTt,"pretrained_model_name_or_path"),QTt.forEach(t),sEr=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=n(lw,"CODE",{});var WTt=s(hve);lEr=r(WTt,"pretrained_model_name_or_path"),WTt.forEach(t),iEr=r(lw,":"),lw.forEach(t),dEr=i(La),z=n(La,"UL",{});var W=s(z);pC=n(W,"LI",{});var ske=s(pC);uve=n(ske,"STRONG",{});var HTt=s(uve);cEr=r(HTt,"albert"),HTt.forEach(t),mEr=r(ske," \u2014 "),LQ=n(ske,"A",{href:!0});var UTt=s(LQ);fEr=r(UTt,"FlaxAlbertModel"),UTt.forEach(t),gEr=r(ske," (ALBERT model)"),ske.forEach(t),hEr=i(W),_C=n(W,"LI",{});var lke=s(_C);pve=n(lke,"STRONG",{});var JTt=s(pve);uEr=r(JTt,"bart"),JTt.forEach(t),pEr=r(lke," \u2014 "),xQ=n(lke,"A",{href:!0});var YTt=s(xQ);_Er=r(YTt,"FlaxBartModel"),YTt.forEach(t),bEr=r(lke," (BART model)"),lke.forEach(t),FEr=i(W),bC=n(W,"LI",{});var ike=s(bC);_ve=n(ike,"STRONG",{});var KTt=s(_ve);vEr=r(KTt,"beit"),KTt.forEach(t),TEr=r(ike," \u2014 "),kQ=n(ike,"A",{href:!0});var ZTt=s(kQ);MEr=r(ZTt,"FlaxBeitModel"),ZTt.forEach(t),EEr=r(ike," (BEiT model)"),ike.forEach(t),CEr=i(W),FC=n(W,"LI",{});var dke=s(FC);bve=n(dke,"STRONG",{});var e1t=s(bve);wEr=r(e1t,"bert"),e1t.forEach(t),AEr=r(dke," \u2014 "),SQ=n(dke,"A",{href:!0});var o1t=s(SQ);yEr=r(o1t,"FlaxBertModel"),o1t.forEach(t),LEr=r(dke," (BERT model)"),dke.forEach(t),xEr=i(W),vC=n(W,"LI",{});var cke=s(vC);Fve=n(cke,"STRONG",{});var r1t=s(Fve);kEr=r(r1t,"big_bird"),r1t.forEach(t),SEr=r(cke," \u2014 "),RQ=n(cke,"A",{href:!0});var t1t=s(RQ);REr=r(t1t,"FlaxBigBirdModel"),t1t.forEach(t),BEr=r(cke," (BigBird model)"),cke.forEach(t),PEr=i(W),TC=n(W,"LI",{});var mke=s(TC);vve=n(mke,"STRONG",{});var a1t=s(vve);$Er=r(a1t,"blenderbot"),a1t.forEach(t),IEr=r(mke," \u2014 "),BQ=n(mke,"A",{href:!0});var n1t=s(BQ);qEr=r(n1t,"FlaxBlenderbotModel"),n1t.forEach(t),NEr=r(mke," (Blenderbot model)"),mke.forEach(t),jEr=i(W),MC=n(W,"LI",{});var fke=s(MC);Tve=n(fke,"STRONG",{});var s1t=s(Tve);DEr=r(s1t,"blenderbot-small"),s1t.forEach(t),GEr=r(fke," \u2014 "),PQ=n(fke,"A",{href:!0});var l1t=s(PQ);OEr=r(l1t,"FlaxBlenderbotSmallModel"),l1t.forEach(t),VEr=r(fke," (BlenderbotSmall model)"),fke.forEach(t),XEr=i(W),EC=n(W,"LI",{});var gke=s(EC);Mve=n(gke,"STRONG",{});var i1t=s(Mve);zEr=r(i1t,"clip"),i1t.forEach(t),QEr=r(gke," \u2014 "),$Q=n(gke,"A",{href:!0});var d1t=s($Q);WEr=r(d1t,"FlaxCLIPModel"),d1t.forEach(t),HEr=r(gke," (CLIP model)"),gke.forEach(t),UEr=i(W),CC=n(W,"LI",{});var hke=s(CC);Eve=n(hke,"STRONG",{});var c1t=s(Eve);JEr=r(c1t,"distilbert"),c1t.forEach(t),YEr=r(hke," \u2014 "),IQ=n(hke,"A",{href:!0});var m1t=s(IQ);KEr=r(m1t,"FlaxDistilBertModel"),m1t.forEach(t),ZEr=r(hke," (DistilBERT model)"),hke.forEach(t),eCr=i(W),wC=n(W,"LI",{});var uke=s(wC);Cve=n(uke,"STRONG",{});var f1t=s(Cve);oCr=r(f1t,"electra"),f1t.forEach(t),rCr=r(uke," \u2014 "),qQ=n(uke,"A",{href:!0});var g1t=s(qQ);tCr=r(g1t,"FlaxElectraModel"),g1t.forEach(t),aCr=r(uke," (ELECTRA model)"),uke.forEach(t),nCr=i(W),AC=n(W,"LI",{});var pke=s(AC);wve=n(pke,"STRONG",{});var h1t=s(wve);sCr=r(h1t,"gpt2"),h1t.forEach(t),lCr=r(pke," \u2014 "),NQ=n(pke,"A",{href:!0});var u1t=s(NQ);iCr=r(u1t,"FlaxGPT2Model"),u1t.forEach(t),dCr=r(pke," (OpenAI GPT-2 model)"),pke.forEach(t),cCr=i(W),yC=n(W,"LI",{});var _ke=s(yC);Ave=n(_ke,"STRONG",{});var p1t=s(Ave);mCr=r(p1t,"gpt_neo"),p1t.forEach(t),fCr=r(_ke," \u2014 "),jQ=n(_ke,"A",{href:!0});var _1t=s(jQ);gCr=r(_1t,"FlaxGPTNeoModel"),_1t.forEach(t),hCr=r(_ke," (GPT Neo model)"),_ke.forEach(t),uCr=i(W),LC=n(W,"LI",{});var bke=s(LC);yve=n(bke,"STRONG",{});var b1t=s(yve);pCr=r(b1t,"gptj"),b1t.forEach(t),_Cr=r(bke," \u2014 "),DQ=n(bke,"A",{href:!0});var F1t=s(DQ);bCr=r(F1t,"FlaxGPTJModel"),F1t.forEach(t),FCr=r(bke," (GPT-J model)"),bke.forEach(t),vCr=i(W),xC=n(W,"LI",{});var Fke=s(xC);Lve=n(Fke,"STRONG",{});var v1t=s(Lve);TCr=r(v1t,"marian"),v1t.forEach(t),MCr=r(Fke," \u2014 "),GQ=n(Fke,"A",{href:!0});var T1t=s(GQ);ECr=r(T1t,"FlaxMarianModel"),T1t.forEach(t),CCr=r(Fke," (Marian model)"),Fke.forEach(t),wCr=i(W),kC=n(W,"LI",{});var vke=s(kC);xve=n(vke,"STRONG",{});var M1t=s(xve);ACr=r(M1t,"mbart"),M1t.forEach(t),yCr=r(vke," \u2014 "),OQ=n(vke,"A",{href:!0});var E1t=s(OQ);LCr=r(E1t,"FlaxMBartModel"),E1t.forEach(t),xCr=r(vke," (mBART model)"),vke.forEach(t),kCr=i(W),SC=n(W,"LI",{});var Tke=s(SC);kve=n(Tke,"STRONG",{});var C1t=s(kve);SCr=r(C1t,"mt5"),C1t.forEach(t),RCr=r(Tke," \u2014 "),VQ=n(Tke,"A",{href:!0});var w1t=s(VQ);BCr=r(w1t,"FlaxMT5Model"),w1t.forEach(t),PCr=r(Tke," (mT5 model)"),Tke.forEach(t),$Cr=i(W),RC=n(W,"LI",{});var Mke=s(RC);Sve=n(Mke,"STRONG",{});var A1t=s(Sve);ICr=r(A1t,"pegasus"),A1t.forEach(t),qCr=r(Mke," \u2014 "),XQ=n(Mke,"A",{href:!0});var y1t=s(XQ);NCr=r(y1t,"FlaxPegasusModel"),y1t.forEach(t),jCr=r(Mke," (Pegasus model)"),Mke.forEach(t),DCr=i(W),BC=n(W,"LI",{});var Eke=s(BC);Rve=n(Eke,"STRONG",{});var L1t=s(Rve);GCr=r(L1t,"roberta"),L1t.forEach(t),OCr=r(Eke," \u2014 "),zQ=n(Eke,"A",{href:!0});var x1t=s(zQ);VCr=r(x1t,"FlaxRobertaModel"),x1t.forEach(t),XCr=r(Eke," (RoBERTa model)"),Eke.forEach(t),zCr=i(W),PC=n(W,"LI",{});var Cke=s(PC);Bve=n(Cke,"STRONG",{});var k1t=s(Bve);QCr=r(k1t,"roformer"),k1t.forEach(t),WCr=r(Cke," \u2014 "),QQ=n(Cke,"A",{href:!0});var S1t=s(QQ);HCr=r(S1t,"FlaxRoFormerModel"),S1t.forEach(t),UCr=r(Cke," (RoFormer model)"),Cke.forEach(t),JCr=i(W),$C=n(W,"LI",{});var wke=s($C);Pve=n(wke,"STRONG",{});var R1t=s(Pve);YCr=r(R1t,"t5"),R1t.forEach(t),KCr=r(wke," \u2014 "),WQ=n(wke,"A",{href:!0});var B1t=s(WQ);ZCr=r(B1t,"FlaxT5Model"),B1t.forEach(t),e5r=r(wke," (T5 model)"),wke.forEach(t),o5r=i(W),IC=n(W,"LI",{});var Ake=s(IC);$ve=n(Ake,"STRONG",{});var P1t=s($ve);r5r=r(P1t,"vision-text-dual-encoder"),P1t.forEach(t),t5r=r(Ake," \u2014 "),HQ=n(Ake,"A",{href:!0});var $1t=s(HQ);a5r=r($1t,"FlaxVisionTextDualEncoderModel"),$1t.forEach(t),n5r=r(Ake," (VisionTextDualEncoder model)"),Ake.forEach(t),s5r=i(W),qC=n(W,"LI",{});var yke=s(qC);Ive=n(yke,"STRONG",{});var I1t=s(Ive);l5r=r(I1t,"vit"),I1t.forEach(t),i5r=r(yke," \u2014 "),UQ=n(yke,"A",{href:!0});var q1t=s(UQ);d5r=r(q1t,"FlaxViTModel"),q1t.forEach(t),c5r=r(yke," (ViT model)"),yke.forEach(t),m5r=i(W),NC=n(W,"LI",{});var Lke=s(NC);qve=n(Lke,"STRONG",{});var N1t=s(qve);f5r=r(N1t,"wav2vec2"),N1t.forEach(t),g5r=r(Lke," \u2014 "),JQ=n(Lke,"A",{href:!0});var j1t=s(JQ);h5r=r(j1t,"FlaxWav2Vec2Model"),j1t.forEach(t),u5r=r(Lke," (Wav2Vec2 model)"),Lke.forEach(t),p5r=i(W),jC=n(W,"LI",{});var xke=s(jC);Nve=n(xke,"STRONG",{});var D1t=s(Nve);_5r=r(D1t,"xglm"),D1t.forEach(t),b5r=r(xke," \u2014 "),YQ=n(xke,"A",{href:!0});var G1t=s(YQ);F5r=r(G1t,"FlaxXGLMModel"),G1t.forEach(t),v5r=r(xke," (XGLM model)"),xke.forEach(t),T5r=i(W),DC=n(W,"LI",{});var kke=s(DC);jve=n(kke,"STRONG",{});var O1t=s(jve);M5r=r(O1t,"xlm-roberta"),O1t.forEach(t),E5r=r(kke," \u2014 "),KQ=n(kke,"A",{href:!0});var V1t=s(KQ);C5r=r(V1t,"FlaxXLMRobertaModel"),V1t.forEach(t),w5r=r(kke," (XLM-RoBERTa model)"),kke.forEach(t),W.forEach(t),A5r=i(La),Dve=n(La,"P",{});var X1t=s(Dve);y5r=r(X1t,"Examples:"),X1t.forEach(t),L5r=i(La),f(VL.$$.fragment,La),La.forEach(t),mi.forEach(t),RBe=i(c),om=n(c,"H2",{class:!0});var V$e=s(om);GC=n(V$e,"A",{id:!0,class:!0,href:!0});var z1t=s(GC);Gve=n(z1t,"SPAN",{});var Q1t=s(Gve);f(XL.$$.fragment,Q1t),Q1t.forEach(t),z1t.forEach(t),x5r=i(V$e),Ove=n(V$e,"SPAN",{});var W1t=s(Ove);k5r=r(W1t,"FlaxAutoModelForCausalLM"),W1t.forEach(t),V$e.forEach(t),BBe=i(c),Br=n(c,"DIV",{class:!0});var gi=s(Br);f(zL.$$.fragment,gi),S5r=i(gi),rm=n(gi,"P",{});var wJ=s(rm);R5r=r(wJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ZQ=n(wJ,"A",{href:!0});var H1t=s(ZQ);B5r=r(H1t,"from_pretrained()"),H1t.forEach(t),P5r=r(wJ," class method or the "),eW=n(wJ,"A",{href:!0});var U1t=s(eW);$5r=r(U1t,"from_config()"),U1t.forEach(t),I5r=r(wJ,` class
method.`),wJ.forEach(t),q5r=i(gi),QL=n(gi,"P",{});var X$e=s(QL);N5r=r(X$e,"This class cannot be instantiated directly using "),Vve=n(X$e,"CODE",{});var J1t=s(Vve);j5r=r(J1t,"__init__()"),J1t.forEach(t),D5r=r(X$e," (throws an error)."),X$e.forEach(t),G5r=i(gi),yt=n(gi,"DIV",{class:!0});var hi=s(yt);f(WL.$$.fragment,hi),O5r=i(hi),Xve=n(hi,"P",{});var Y1t=s(Xve);V5r=r(Y1t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Y1t.forEach(t),X5r=i(hi),tm=n(hi,"P",{});var AJ=s(tm);z5r=r(AJ,`Note:
Loading a model from its configuration file does `),zve=n(AJ,"STRONG",{});var K1t=s(zve);Q5r=r(K1t,"not"),K1t.forEach(t),W5r=r(AJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oW=n(AJ,"A",{href:!0});var Z1t=s(oW);H5r=r(Z1t,"from_pretrained()"),Z1t.forEach(t),U5r=r(AJ," to load the model weights."),AJ.forEach(t),J5r=i(hi),Qve=n(hi,"P",{});var eMt=s(Qve);Y5r=r(eMt,"Examples:"),eMt.forEach(t),K5r=i(hi),f(HL.$$.fragment,hi),hi.forEach(t),Z5r=i(gi),Lo=n(gi,"DIV",{class:!0});var xa=s(Lo);f(UL.$$.fragment,xa),e3r=i(xa),Wve=n(xa,"P",{});var oMt=s(Wve);o3r=r(oMt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),oMt.forEach(t),r3r=i(xa),kn=n(xa,"P",{});var iw=s(kn);t3r=r(iw,"The model class to instantiate is selected based on the "),Hve=n(iw,"CODE",{});var rMt=s(Hve);a3r=r(rMt,"model_type"),rMt.forEach(t),n3r=r(iw,` property of the config object (either
passed as an argument or loaded from `),Uve=n(iw,"CODE",{});var tMt=s(Uve);s3r=r(tMt,"pretrained_model_name_or_path"),tMt.forEach(t),l3r=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jve=n(iw,"CODE",{});var aMt=s(Jve);i3r=r(aMt,"pretrained_model_name_or_path"),aMt.forEach(t),d3r=r(iw,":"),iw.forEach(t),c3r=i(xa),ca=n(xa,"UL",{});var ui=s(ca);OC=n(ui,"LI",{});var Ske=s(OC);Yve=n(Ske,"STRONG",{});var nMt=s(Yve);m3r=r(nMt,"bart"),nMt.forEach(t),f3r=r(Ske," \u2014 "),rW=n(Ske,"A",{href:!0});var sMt=s(rW);g3r=r(sMt,"FlaxBartForCausalLM"),sMt.forEach(t),h3r=r(Ske," (BART model)"),Ske.forEach(t),u3r=i(ui),VC=n(ui,"LI",{});var Rke=s(VC);Kve=n(Rke,"STRONG",{});var lMt=s(Kve);p3r=r(lMt,"gpt2"),lMt.forEach(t),_3r=r(Rke," \u2014 "),tW=n(Rke,"A",{href:!0});var iMt=s(tW);b3r=r(iMt,"FlaxGPT2LMHeadModel"),iMt.forEach(t),F3r=r(Rke," (OpenAI GPT-2 model)"),Rke.forEach(t),v3r=i(ui),XC=n(ui,"LI",{});var Bke=s(XC);Zve=n(Bke,"STRONG",{});var dMt=s(Zve);T3r=r(dMt,"gpt_neo"),dMt.forEach(t),M3r=r(Bke," \u2014 "),aW=n(Bke,"A",{href:!0});var cMt=s(aW);E3r=r(cMt,"FlaxGPTNeoForCausalLM"),cMt.forEach(t),C3r=r(Bke," (GPT Neo model)"),Bke.forEach(t),w3r=i(ui),zC=n(ui,"LI",{});var Pke=s(zC);eTe=n(Pke,"STRONG",{});var mMt=s(eTe);A3r=r(mMt,"gptj"),mMt.forEach(t),y3r=r(Pke," \u2014 "),nW=n(Pke,"A",{href:!0});var fMt=s(nW);L3r=r(fMt,"FlaxGPTJForCausalLM"),fMt.forEach(t),x3r=r(Pke," (GPT-J model)"),Pke.forEach(t),k3r=i(ui),QC=n(ui,"LI",{});var $ke=s(QC);oTe=n($ke,"STRONG",{});var gMt=s(oTe);S3r=r(gMt,"xglm"),gMt.forEach(t),R3r=r($ke," \u2014 "),sW=n($ke,"A",{href:!0});var hMt=s(sW);B3r=r(hMt,"FlaxXGLMForCausalLM"),hMt.forEach(t),P3r=r($ke," (XGLM model)"),$ke.forEach(t),ui.forEach(t),$3r=i(xa),rTe=n(xa,"P",{});var uMt=s(rTe);I3r=r(uMt,"Examples:"),uMt.forEach(t),q3r=i(xa),f(JL.$$.fragment,xa),xa.forEach(t),gi.forEach(t),PBe=i(c),am=n(c,"H2",{class:!0});var z$e=s(am);WC=n(z$e,"A",{id:!0,class:!0,href:!0});var pMt=s(WC);tTe=n(pMt,"SPAN",{});var _Mt=s(tTe);f(YL.$$.fragment,_Mt),_Mt.forEach(t),pMt.forEach(t),N3r=i(z$e),aTe=n(z$e,"SPAN",{});var bMt=s(aTe);j3r=r(bMt,"FlaxAutoModelForPreTraining"),bMt.forEach(t),z$e.forEach(t),$Be=i(c),Pr=n(c,"DIV",{class:!0});var pi=s(Pr);f(KL.$$.fragment,pi),D3r=i(pi),nm=n(pi,"P",{});var yJ=s(nm);G3r=r(yJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lW=n(yJ,"A",{href:!0});var FMt=s(lW);O3r=r(FMt,"from_pretrained()"),FMt.forEach(t),V3r=r(yJ," class method or the "),iW=n(yJ,"A",{href:!0});var vMt=s(iW);X3r=r(vMt,"from_config()"),vMt.forEach(t),z3r=r(yJ,` class
method.`),yJ.forEach(t),Q3r=i(pi),ZL=n(pi,"P",{});var Q$e=s(ZL);W3r=r(Q$e,"This class cannot be instantiated directly using "),nTe=n(Q$e,"CODE",{});var TMt=s(nTe);H3r=r(TMt,"__init__()"),TMt.forEach(t),U3r=r(Q$e," (throws an error)."),Q$e.forEach(t),J3r=i(pi),Lt=n(pi,"DIV",{class:!0});var _i=s(Lt);f(e8.$$.fragment,_i),Y3r=i(_i),sTe=n(_i,"P",{});var MMt=s(sTe);K3r=r(MMt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),MMt.forEach(t),Z3r=i(_i),sm=n(_i,"P",{});var LJ=s(sm);ewr=r(LJ,`Note:
Loading a model from its configuration file does `),lTe=n(LJ,"STRONG",{});var EMt=s(lTe);owr=r(EMt,"not"),EMt.forEach(t),rwr=r(LJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=n(LJ,"A",{href:!0});var CMt=s(dW);twr=r(CMt,"from_pretrained()"),CMt.forEach(t),awr=r(LJ," to load the model weights."),LJ.forEach(t),nwr=i(_i),iTe=n(_i,"P",{});var wMt=s(iTe);swr=r(wMt,"Examples:"),wMt.forEach(t),lwr=i(_i),f(o8.$$.fragment,_i),_i.forEach(t),iwr=i(pi),xo=n(pi,"DIV",{class:!0});var ka=s(xo);f(r8.$$.fragment,ka),dwr=i(ka),dTe=n(ka,"P",{});var AMt=s(dTe);cwr=r(AMt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),AMt.forEach(t),mwr=i(ka),Sn=n(ka,"P",{});var dw=s(Sn);fwr=r(dw,"The model class to instantiate is selected based on the "),cTe=n(dw,"CODE",{});var yMt=s(cTe);gwr=r(yMt,"model_type"),yMt.forEach(t),hwr=r(dw,` property of the config object (either
passed as an argument or loaded from `),mTe=n(dw,"CODE",{});var LMt=s(mTe);uwr=r(LMt,"pretrained_model_name_or_path"),LMt.forEach(t),pwr=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fTe=n(dw,"CODE",{});var xMt=s(fTe);_wr=r(xMt,"pretrained_model_name_or_path"),xMt.forEach(t),bwr=r(dw,":"),dw.forEach(t),Fwr=i(ka),fe=n(ka,"UL",{});var pe=s(fe);HC=n(pe,"LI",{});var Ike=s(HC);gTe=n(Ike,"STRONG",{});var kMt=s(gTe);vwr=r(kMt,"albert"),kMt.forEach(t),Twr=r(Ike," \u2014 "),cW=n(Ike,"A",{href:!0});var SMt=s(cW);Mwr=r(SMt,"FlaxAlbertForPreTraining"),SMt.forEach(t),Ewr=r(Ike," (ALBERT model)"),Ike.forEach(t),Cwr=i(pe),UC=n(pe,"LI",{});var qke=s(UC);hTe=n(qke,"STRONG",{});var RMt=s(hTe);wwr=r(RMt,"bart"),RMt.forEach(t),Awr=r(qke," \u2014 "),mW=n(qke,"A",{href:!0});var BMt=s(mW);ywr=r(BMt,"FlaxBartForConditionalGeneration"),BMt.forEach(t),Lwr=r(qke," (BART model)"),qke.forEach(t),xwr=i(pe),JC=n(pe,"LI",{});var Nke=s(JC);uTe=n(Nke,"STRONG",{});var PMt=s(uTe);kwr=r(PMt,"bert"),PMt.forEach(t),Swr=r(Nke," \u2014 "),fW=n(Nke,"A",{href:!0});var $Mt=s(fW);Rwr=r($Mt,"FlaxBertForPreTraining"),$Mt.forEach(t),Bwr=r(Nke," (BERT model)"),Nke.forEach(t),Pwr=i(pe),YC=n(pe,"LI",{});var jke=s(YC);pTe=n(jke,"STRONG",{});var IMt=s(pTe);$wr=r(IMt,"big_bird"),IMt.forEach(t),Iwr=r(jke," \u2014 "),gW=n(jke,"A",{href:!0});var qMt=s(gW);qwr=r(qMt,"FlaxBigBirdForPreTraining"),qMt.forEach(t),Nwr=r(jke," (BigBird model)"),jke.forEach(t),jwr=i(pe),KC=n(pe,"LI",{});var Dke=s(KC);_Te=n(Dke,"STRONG",{});var NMt=s(_Te);Dwr=r(NMt,"electra"),NMt.forEach(t),Gwr=r(Dke," \u2014 "),hW=n(Dke,"A",{href:!0});var jMt=s(hW);Owr=r(jMt,"FlaxElectraForPreTraining"),jMt.forEach(t),Vwr=r(Dke," (ELECTRA model)"),Dke.forEach(t),Xwr=i(pe),ZC=n(pe,"LI",{});var Gke=s(ZC);bTe=n(Gke,"STRONG",{});var DMt=s(bTe);zwr=r(DMt,"mbart"),DMt.forEach(t),Qwr=r(Gke," \u2014 "),uW=n(Gke,"A",{href:!0});var GMt=s(uW);Wwr=r(GMt,"FlaxMBartForConditionalGeneration"),GMt.forEach(t),Hwr=r(Gke," (mBART model)"),Gke.forEach(t),Uwr=i(pe),e5=n(pe,"LI",{});var Oke=s(e5);FTe=n(Oke,"STRONG",{});var OMt=s(FTe);Jwr=r(OMt,"mt5"),OMt.forEach(t),Ywr=r(Oke," \u2014 "),pW=n(Oke,"A",{href:!0});var VMt=s(pW);Kwr=r(VMt,"FlaxMT5ForConditionalGeneration"),VMt.forEach(t),Zwr=r(Oke," (mT5 model)"),Oke.forEach(t),eAr=i(pe),o5=n(pe,"LI",{});var Vke=s(o5);vTe=n(Vke,"STRONG",{});var XMt=s(vTe);oAr=r(XMt,"roberta"),XMt.forEach(t),rAr=r(Vke," \u2014 "),_W=n(Vke,"A",{href:!0});var zMt=s(_W);tAr=r(zMt,"FlaxRobertaForMaskedLM"),zMt.forEach(t),aAr=r(Vke," (RoBERTa model)"),Vke.forEach(t),nAr=i(pe),r5=n(pe,"LI",{});var Xke=s(r5);TTe=n(Xke,"STRONG",{});var QMt=s(TTe);sAr=r(QMt,"roformer"),QMt.forEach(t),lAr=r(Xke," \u2014 "),bW=n(Xke,"A",{href:!0});var WMt=s(bW);iAr=r(WMt,"FlaxRoFormerForMaskedLM"),WMt.forEach(t),dAr=r(Xke," (RoFormer model)"),Xke.forEach(t),cAr=i(pe),t5=n(pe,"LI",{});var zke=s(t5);MTe=n(zke,"STRONG",{});var HMt=s(MTe);mAr=r(HMt,"t5"),HMt.forEach(t),fAr=r(zke," \u2014 "),FW=n(zke,"A",{href:!0});var UMt=s(FW);gAr=r(UMt,"FlaxT5ForConditionalGeneration"),UMt.forEach(t),hAr=r(zke," (T5 model)"),zke.forEach(t),uAr=i(pe),a5=n(pe,"LI",{});var Qke=s(a5);ETe=n(Qke,"STRONG",{});var JMt=s(ETe);pAr=r(JMt,"wav2vec2"),JMt.forEach(t),_Ar=r(Qke," \u2014 "),vW=n(Qke,"A",{href:!0});var YMt=s(vW);bAr=r(YMt,"FlaxWav2Vec2ForPreTraining"),YMt.forEach(t),FAr=r(Qke," (Wav2Vec2 model)"),Qke.forEach(t),vAr=i(pe),n5=n(pe,"LI",{});var Wke=s(n5);CTe=n(Wke,"STRONG",{});var KMt=s(CTe);TAr=r(KMt,"xlm-roberta"),KMt.forEach(t),MAr=r(Wke," \u2014 "),TW=n(Wke,"A",{href:!0});var ZMt=s(TW);EAr=r(ZMt,"FlaxXLMRobertaForMaskedLM"),ZMt.forEach(t),CAr=r(Wke," (XLM-RoBERTa model)"),Wke.forEach(t),pe.forEach(t),wAr=i(ka),wTe=n(ka,"P",{});var e4t=s(wTe);AAr=r(e4t,"Examples:"),e4t.forEach(t),yAr=i(ka),f(t8.$$.fragment,ka),ka.forEach(t),pi.forEach(t),IBe=i(c),lm=n(c,"H2",{class:!0});var W$e=s(lm);s5=n(W$e,"A",{id:!0,class:!0,href:!0});var o4t=s(s5);ATe=n(o4t,"SPAN",{});var r4t=s(ATe);f(a8.$$.fragment,r4t),r4t.forEach(t),o4t.forEach(t),LAr=i(W$e),yTe=n(W$e,"SPAN",{});var t4t=s(yTe);xAr=r(t4t,"FlaxAutoModelForMaskedLM"),t4t.forEach(t),W$e.forEach(t),qBe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);f(n8.$$.fragment,bi),kAr=i(bi),im=n(bi,"P",{});var xJ=s(im);SAr=r(xJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),MW=n(xJ,"A",{href:!0});var a4t=s(MW);RAr=r(a4t,"from_pretrained()"),a4t.forEach(t),BAr=r(xJ," class method or the "),EW=n(xJ,"A",{href:!0});var n4t=s(EW);PAr=r(n4t,"from_config()"),n4t.forEach(t),$Ar=r(xJ,` class
method.`),xJ.forEach(t),IAr=i(bi),s8=n(bi,"P",{});var H$e=s(s8);qAr=r(H$e,"This class cannot be instantiated directly using "),LTe=n(H$e,"CODE",{});var s4t=s(LTe);NAr=r(s4t,"__init__()"),s4t.forEach(t),jAr=r(H$e," (throws an error)."),H$e.forEach(t),DAr=i(bi),xt=n(bi,"DIV",{class:!0});var Fi=s(xt);f(l8.$$.fragment,Fi),GAr=i(Fi),xTe=n(Fi,"P",{});var l4t=s(xTe);OAr=r(l4t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),l4t.forEach(t),VAr=i(Fi),dm=n(Fi,"P",{});var kJ=s(dm);XAr=r(kJ,`Note:
Loading a model from its configuration file does `),kTe=n(kJ,"STRONG",{});var i4t=s(kTe);zAr=r(i4t,"not"),i4t.forEach(t),QAr=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CW=n(kJ,"A",{href:!0});var d4t=s(CW);WAr=r(d4t,"from_pretrained()"),d4t.forEach(t),HAr=r(kJ," to load the model weights."),kJ.forEach(t),UAr=i(Fi),STe=n(Fi,"P",{});var c4t=s(STe);JAr=r(c4t,"Examples:"),c4t.forEach(t),YAr=i(Fi),f(i8.$$.fragment,Fi),Fi.forEach(t),KAr=i(bi),ko=n(bi,"DIV",{class:!0});var Sa=s(ko);f(d8.$$.fragment,Sa),ZAr=i(Sa),RTe=n(Sa,"P",{});var m4t=s(RTe);e6r=r(m4t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),m4t.forEach(t),o6r=i(Sa),Rn=n(Sa,"P",{});var cw=s(Rn);r6r=r(cw,"The model class to instantiate is selected based on the "),BTe=n(cw,"CODE",{});var f4t=s(BTe);t6r=r(f4t,"model_type"),f4t.forEach(t),a6r=r(cw,` property of the config object (either
passed as an argument or loaded from `),PTe=n(cw,"CODE",{});var g4t=s(PTe);n6r=r(g4t,"pretrained_model_name_or_path"),g4t.forEach(t),s6r=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Te=n(cw,"CODE",{});var h4t=s($Te);l6r=r(h4t,"pretrained_model_name_or_path"),h4t.forEach(t),i6r=r(cw,":"),cw.forEach(t),d6r=i(Sa),Fe=n(Sa,"UL",{});var Ae=s(Fe);l5=n(Ae,"LI",{});var Hke=s(l5);ITe=n(Hke,"STRONG",{});var u4t=s(ITe);c6r=r(u4t,"albert"),u4t.forEach(t),m6r=r(Hke," \u2014 "),wW=n(Hke,"A",{href:!0});var p4t=s(wW);f6r=r(p4t,"FlaxAlbertForMaskedLM"),p4t.forEach(t),g6r=r(Hke," (ALBERT model)"),Hke.forEach(t),h6r=i(Ae),i5=n(Ae,"LI",{});var Uke=s(i5);qTe=n(Uke,"STRONG",{});var _4t=s(qTe);u6r=r(_4t,"bart"),_4t.forEach(t),p6r=r(Uke," \u2014 "),AW=n(Uke,"A",{href:!0});var b4t=s(AW);_6r=r(b4t,"FlaxBartForConditionalGeneration"),b4t.forEach(t),b6r=r(Uke," (BART model)"),Uke.forEach(t),F6r=i(Ae),d5=n(Ae,"LI",{});var Jke=s(d5);NTe=n(Jke,"STRONG",{});var F4t=s(NTe);v6r=r(F4t,"bert"),F4t.forEach(t),T6r=r(Jke," \u2014 "),yW=n(Jke,"A",{href:!0});var v4t=s(yW);M6r=r(v4t,"FlaxBertForMaskedLM"),v4t.forEach(t),E6r=r(Jke," (BERT model)"),Jke.forEach(t),C6r=i(Ae),c5=n(Ae,"LI",{});var Yke=s(c5);jTe=n(Yke,"STRONG",{});var T4t=s(jTe);w6r=r(T4t,"big_bird"),T4t.forEach(t),A6r=r(Yke," \u2014 "),LW=n(Yke,"A",{href:!0});var M4t=s(LW);y6r=r(M4t,"FlaxBigBirdForMaskedLM"),M4t.forEach(t),L6r=r(Yke," (BigBird model)"),Yke.forEach(t),x6r=i(Ae),m5=n(Ae,"LI",{});var Kke=s(m5);DTe=n(Kke,"STRONG",{});var E4t=s(DTe);k6r=r(E4t,"distilbert"),E4t.forEach(t),S6r=r(Kke," \u2014 "),xW=n(Kke,"A",{href:!0});var C4t=s(xW);R6r=r(C4t,"FlaxDistilBertForMaskedLM"),C4t.forEach(t),B6r=r(Kke," (DistilBERT model)"),Kke.forEach(t),P6r=i(Ae),f5=n(Ae,"LI",{});var Zke=s(f5);GTe=n(Zke,"STRONG",{});var w4t=s(GTe);$6r=r(w4t,"electra"),w4t.forEach(t),I6r=r(Zke," \u2014 "),kW=n(Zke,"A",{href:!0});var A4t=s(kW);q6r=r(A4t,"FlaxElectraForMaskedLM"),A4t.forEach(t),N6r=r(Zke," (ELECTRA model)"),Zke.forEach(t),j6r=i(Ae),g5=n(Ae,"LI",{});var eSe=s(g5);OTe=n(eSe,"STRONG",{});var y4t=s(OTe);D6r=r(y4t,"mbart"),y4t.forEach(t),G6r=r(eSe," \u2014 "),SW=n(eSe,"A",{href:!0});var L4t=s(SW);O6r=r(L4t,"FlaxMBartForConditionalGeneration"),L4t.forEach(t),V6r=r(eSe," (mBART model)"),eSe.forEach(t),X6r=i(Ae),h5=n(Ae,"LI",{});var oSe=s(h5);VTe=n(oSe,"STRONG",{});var x4t=s(VTe);z6r=r(x4t,"roberta"),x4t.forEach(t),Q6r=r(oSe," \u2014 "),RW=n(oSe,"A",{href:!0});var k4t=s(RW);W6r=r(k4t,"FlaxRobertaForMaskedLM"),k4t.forEach(t),H6r=r(oSe," (RoBERTa model)"),oSe.forEach(t),U6r=i(Ae),u5=n(Ae,"LI",{});var rSe=s(u5);XTe=n(rSe,"STRONG",{});var S4t=s(XTe);J6r=r(S4t,"roformer"),S4t.forEach(t),Y6r=r(rSe," \u2014 "),BW=n(rSe,"A",{href:!0});var R4t=s(BW);K6r=r(R4t,"FlaxRoFormerForMaskedLM"),R4t.forEach(t),Z6r=r(rSe," (RoFormer model)"),rSe.forEach(t),e0r=i(Ae),p5=n(Ae,"LI",{});var tSe=s(p5);zTe=n(tSe,"STRONG",{});var B4t=s(zTe);o0r=r(B4t,"xlm-roberta"),B4t.forEach(t),r0r=r(tSe," \u2014 "),PW=n(tSe,"A",{href:!0});var P4t=s(PW);t0r=r(P4t,"FlaxXLMRobertaForMaskedLM"),P4t.forEach(t),a0r=r(tSe," (XLM-RoBERTa model)"),tSe.forEach(t),Ae.forEach(t),n0r=i(Sa),QTe=n(Sa,"P",{});var $4t=s(QTe);s0r=r($4t,"Examples:"),$4t.forEach(t),l0r=i(Sa),f(c8.$$.fragment,Sa),Sa.forEach(t),bi.forEach(t),NBe=i(c),cm=n(c,"H2",{class:!0});var U$e=s(cm);_5=n(U$e,"A",{id:!0,class:!0,href:!0});var I4t=s(_5);WTe=n(I4t,"SPAN",{});var q4t=s(WTe);f(m8.$$.fragment,q4t),q4t.forEach(t),I4t.forEach(t),i0r=i(U$e),HTe=n(U$e,"SPAN",{});var N4t=s(HTe);d0r=r(N4t,"FlaxAutoModelForSeq2SeqLM"),N4t.forEach(t),U$e.forEach(t),jBe=i(c),Ir=n(c,"DIV",{class:!0});var vi=s(Ir);f(f8.$$.fragment,vi),c0r=i(vi),mm=n(vi,"P",{});var SJ=s(mm);m0r=r(SJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$W=n(SJ,"A",{href:!0});var j4t=s($W);f0r=r(j4t,"from_pretrained()"),j4t.forEach(t),g0r=r(SJ," class method or the "),IW=n(SJ,"A",{href:!0});var D4t=s(IW);h0r=r(D4t,"from_config()"),D4t.forEach(t),u0r=r(SJ,` class
method.`),SJ.forEach(t),p0r=i(vi),g8=n(vi,"P",{});var J$e=s(g8);_0r=r(J$e,"This class cannot be instantiated directly using "),UTe=n(J$e,"CODE",{});var G4t=s(UTe);b0r=r(G4t,"__init__()"),G4t.forEach(t),F0r=r(J$e," (throws an error)."),J$e.forEach(t),v0r=i(vi),kt=n(vi,"DIV",{class:!0});var Ti=s(kt);f(h8.$$.fragment,Ti),T0r=i(Ti),JTe=n(Ti,"P",{});var O4t=s(JTe);M0r=r(O4t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),O4t.forEach(t),E0r=i(Ti),fm=n(Ti,"P",{});var RJ=s(fm);C0r=r(RJ,`Note:
Loading a model from its configuration file does `),YTe=n(RJ,"STRONG",{});var V4t=s(YTe);w0r=r(V4t,"not"),V4t.forEach(t),A0r=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=n(RJ,"A",{href:!0});var X4t=s(qW);y0r=r(X4t,"from_pretrained()"),X4t.forEach(t),L0r=r(RJ," to load the model weights."),RJ.forEach(t),x0r=i(Ti),KTe=n(Ti,"P",{});var z4t=s(KTe);k0r=r(z4t,"Examples:"),z4t.forEach(t),S0r=i(Ti),f(u8.$$.fragment,Ti),Ti.forEach(t),R0r=i(vi),So=n(vi,"DIV",{class:!0});var Ra=s(So);f(p8.$$.fragment,Ra),B0r=i(Ra),ZTe=n(Ra,"P",{});var Q4t=s(ZTe);P0r=r(Q4t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Q4t.forEach(t),$0r=i(Ra),Bn=n(Ra,"P",{});var mw=s(Bn);I0r=r(mw,"The model class to instantiate is selected based on the "),e1e=n(mw,"CODE",{});var W4t=s(e1e);q0r=r(W4t,"model_type"),W4t.forEach(t),N0r=r(mw,` property of the config object (either
passed as an argument or loaded from `),o1e=n(mw,"CODE",{});var H4t=s(o1e);j0r=r(H4t,"pretrained_model_name_or_path"),H4t.forEach(t),D0r=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r1e=n(mw,"CODE",{});var U4t=s(r1e);G0r=r(U4t,"pretrained_model_name_or_path"),U4t.forEach(t),O0r=r(mw,":"),mw.forEach(t),V0r=i(Ra),Ee=n(Ra,"UL",{});var so=s(Ee);b5=n(so,"LI",{});var aSe=s(b5);t1e=n(aSe,"STRONG",{});var J4t=s(t1e);X0r=r(J4t,"bart"),J4t.forEach(t),z0r=r(aSe," \u2014 "),NW=n(aSe,"A",{href:!0});var Y4t=s(NW);Q0r=r(Y4t,"FlaxBartForConditionalGeneration"),Y4t.forEach(t),W0r=r(aSe," (BART model)"),aSe.forEach(t),H0r=i(so),F5=n(so,"LI",{});var nSe=s(F5);a1e=n(nSe,"STRONG",{});var K4t=s(a1e);U0r=r(K4t,"blenderbot"),K4t.forEach(t),J0r=r(nSe," \u2014 "),jW=n(nSe,"A",{href:!0});var Z4t=s(jW);Y0r=r(Z4t,"FlaxBlenderbotForConditionalGeneration"),Z4t.forEach(t),K0r=r(nSe," (Blenderbot model)"),nSe.forEach(t),Z0r=i(so),v5=n(so,"LI",{});var sSe=s(v5);n1e=n(sSe,"STRONG",{});var eEt=s(n1e);eyr=r(eEt,"blenderbot-small"),eEt.forEach(t),oyr=r(sSe," \u2014 "),DW=n(sSe,"A",{href:!0});var oEt=s(DW);ryr=r(oEt,"FlaxBlenderbotSmallForConditionalGeneration"),oEt.forEach(t),tyr=r(sSe," (BlenderbotSmall model)"),sSe.forEach(t),ayr=i(so),T5=n(so,"LI",{});var lSe=s(T5);s1e=n(lSe,"STRONG",{});var rEt=s(s1e);nyr=r(rEt,"encoder-decoder"),rEt.forEach(t),syr=r(lSe," \u2014 "),GW=n(lSe,"A",{href:!0});var tEt=s(GW);lyr=r(tEt,"FlaxEncoderDecoderModel"),tEt.forEach(t),iyr=r(lSe," (Encoder decoder model)"),lSe.forEach(t),dyr=i(so),M5=n(so,"LI",{});var iSe=s(M5);l1e=n(iSe,"STRONG",{});var aEt=s(l1e);cyr=r(aEt,"marian"),aEt.forEach(t),myr=r(iSe," \u2014 "),OW=n(iSe,"A",{href:!0});var nEt=s(OW);fyr=r(nEt,"FlaxMarianMTModel"),nEt.forEach(t),gyr=r(iSe," (Marian model)"),iSe.forEach(t),hyr=i(so),E5=n(so,"LI",{});var dSe=s(E5);i1e=n(dSe,"STRONG",{});var sEt=s(i1e);uyr=r(sEt,"mbart"),sEt.forEach(t),pyr=r(dSe," \u2014 "),VW=n(dSe,"A",{href:!0});var lEt=s(VW);_yr=r(lEt,"FlaxMBartForConditionalGeneration"),lEt.forEach(t),byr=r(dSe," (mBART model)"),dSe.forEach(t),Fyr=i(so),C5=n(so,"LI",{});var cSe=s(C5);d1e=n(cSe,"STRONG",{});var iEt=s(d1e);vyr=r(iEt,"mt5"),iEt.forEach(t),Tyr=r(cSe," \u2014 "),XW=n(cSe,"A",{href:!0});var dEt=s(XW);Myr=r(dEt,"FlaxMT5ForConditionalGeneration"),dEt.forEach(t),Eyr=r(cSe," (mT5 model)"),cSe.forEach(t),Cyr=i(so),w5=n(so,"LI",{});var mSe=s(w5);c1e=n(mSe,"STRONG",{});var cEt=s(c1e);wyr=r(cEt,"pegasus"),cEt.forEach(t),Ayr=r(mSe," \u2014 "),zW=n(mSe,"A",{href:!0});var mEt=s(zW);yyr=r(mEt,"FlaxPegasusForConditionalGeneration"),mEt.forEach(t),Lyr=r(mSe," (Pegasus model)"),mSe.forEach(t),xyr=i(so),A5=n(so,"LI",{});var fSe=s(A5);m1e=n(fSe,"STRONG",{});var fEt=s(m1e);kyr=r(fEt,"t5"),fEt.forEach(t),Syr=r(fSe," \u2014 "),QW=n(fSe,"A",{href:!0});var gEt=s(QW);Ryr=r(gEt,"FlaxT5ForConditionalGeneration"),gEt.forEach(t),Byr=r(fSe," (T5 model)"),fSe.forEach(t),so.forEach(t),Pyr=i(Ra),f1e=n(Ra,"P",{});var hEt=s(f1e);$yr=r(hEt,"Examples:"),hEt.forEach(t),Iyr=i(Ra),f(_8.$$.fragment,Ra),Ra.forEach(t),vi.forEach(t),DBe=i(c),gm=n(c,"H2",{class:!0});var Y$e=s(gm);y5=n(Y$e,"A",{id:!0,class:!0,href:!0});var uEt=s(y5);g1e=n(uEt,"SPAN",{});var pEt=s(g1e);f(b8.$$.fragment,pEt),pEt.forEach(t),uEt.forEach(t),qyr=i(Y$e),h1e=n(Y$e,"SPAN",{});var _Et=s(h1e);Nyr=r(_Et,"FlaxAutoModelForSequenceClassification"),_Et.forEach(t),Y$e.forEach(t),GBe=i(c),qr=n(c,"DIV",{class:!0});var Mi=s(qr);f(F8.$$.fragment,Mi),jyr=i(Mi),hm=n(Mi,"P",{});var BJ=s(hm);Dyr=r(BJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),WW=n(BJ,"A",{href:!0});var bEt=s(WW);Gyr=r(bEt,"from_pretrained()"),bEt.forEach(t),Oyr=r(BJ," class method or the "),HW=n(BJ,"A",{href:!0});var FEt=s(HW);Vyr=r(FEt,"from_config()"),FEt.forEach(t),Xyr=r(BJ,` class
method.`),BJ.forEach(t),zyr=i(Mi),v8=n(Mi,"P",{});var K$e=s(v8);Qyr=r(K$e,"This class cannot be instantiated directly using "),u1e=n(K$e,"CODE",{});var vEt=s(u1e);Wyr=r(vEt,"__init__()"),vEt.forEach(t),Hyr=r(K$e," (throws an error)."),K$e.forEach(t),Uyr=i(Mi),St=n(Mi,"DIV",{class:!0});var Ei=s(St);f(T8.$$.fragment,Ei),Jyr=i(Ei),p1e=n(Ei,"P",{});var TEt=s(p1e);Yyr=r(TEt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),TEt.forEach(t),Kyr=i(Ei),um=n(Ei,"P",{});var PJ=s(um);Zyr=r(PJ,`Note:
Loading a model from its configuration file does `),_1e=n(PJ,"STRONG",{});var MEt=s(_1e);eLr=r(MEt,"not"),MEt.forEach(t),oLr=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=n(PJ,"A",{href:!0});var EEt=s(UW);rLr=r(EEt,"from_pretrained()"),EEt.forEach(t),tLr=r(PJ," to load the model weights."),PJ.forEach(t),aLr=i(Ei),b1e=n(Ei,"P",{});var CEt=s(b1e);nLr=r(CEt,"Examples:"),CEt.forEach(t),sLr=i(Ei),f(M8.$$.fragment,Ei),Ei.forEach(t),lLr=i(Mi),Ro=n(Mi,"DIV",{class:!0});var Ba=s(Ro);f(E8.$$.fragment,Ba),iLr=i(Ba),F1e=n(Ba,"P",{});var wEt=s(F1e);dLr=r(wEt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),wEt.forEach(t),cLr=i(Ba),Pn=n(Ba,"P",{});var fw=s(Pn);mLr=r(fw,"The model class to instantiate is selected based on the "),v1e=n(fw,"CODE",{});var AEt=s(v1e);fLr=r(AEt,"model_type"),AEt.forEach(t),gLr=r(fw,` property of the config object (either
passed as an argument or loaded from `),T1e=n(fw,"CODE",{});var yEt=s(T1e);hLr=r(yEt,"pretrained_model_name_or_path"),yEt.forEach(t),uLr=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M1e=n(fw,"CODE",{});var LEt=s(M1e);pLr=r(LEt,"pretrained_model_name_or_path"),LEt.forEach(t),_Lr=r(fw,":"),fw.forEach(t),bLr=i(Ba),ve=n(Ba,"UL",{});var ye=s(ve);L5=n(ye,"LI",{});var gSe=s(L5);E1e=n(gSe,"STRONG",{});var xEt=s(E1e);FLr=r(xEt,"albert"),xEt.forEach(t),vLr=r(gSe," \u2014 "),JW=n(gSe,"A",{href:!0});var kEt=s(JW);TLr=r(kEt,"FlaxAlbertForSequenceClassification"),kEt.forEach(t),MLr=r(gSe," (ALBERT model)"),gSe.forEach(t),ELr=i(ye),x5=n(ye,"LI",{});var hSe=s(x5);C1e=n(hSe,"STRONG",{});var SEt=s(C1e);CLr=r(SEt,"bart"),SEt.forEach(t),wLr=r(hSe," \u2014 "),YW=n(hSe,"A",{href:!0});var REt=s(YW);ALr=r(REt,"FlaxBartForSequenceClassification"),REt.forEach(t),yLr=r(hSe," (BART model)"),hSe.forEach(t),LLr=i(ye),k5=n(ye,"LI",{});var uSe=s(k5);w1e=n(uSe,"STRONG",{});var BEt=s(w1e);xLr=r(BEt,"bert"),BEt.forEach(t),kLr=r(uSe," \u2014 "),KW=n(uSe,"A",{href:!0});var PEt=s(KW);SLr=r(PEt,"FlaxBertForSequenceClassification"),PEt.forEach(t),RLr=r(uSe," (BERT model)"),uSe.forEach(t),BLr=i(ye),S5=n(ye,"LI",{});var pSe=s(S5);A1e=n(pSe,"STRONG",{});var $Et=s(A1e);PLr=r($Et,"big_bird"),$Et.forEach(t),$Lr=r(pSe," \u2014 "),ZW=n(pSe,"A",{href:!0});var IEt=s(ZW);ILr=r(IEt,"FlaxBigBirdForSequenceClassification"),IEt.forEach(t),qLr=r(pSe," (BigBird model)"),pSe.forEach(t),NLr=i(ye),R5=n(ye,"LI",{});var _Se=s(R5);y1e=n(_Se,"STRONG",{});var qEt=s(y1e);jLr=r(qEt,"distilbert"),qEt.forEach(t),DLr=r(_Se," \u2014 "),eH=n(_Se,"A",{href:!0});var NEt=s(eH);GLr=r(NEt,"FlaxDistilBertForSequenceClassification"),NEt.forEach(t),OLr=r(_Se," (DistilBERT model)"),_Se.forEach(t),VLr=i(ye),B5=n(ye,"LI",{});var bSe=s(B5);L1e=n(bSe,"STRONG",{});var jEt=s(L1e);XLr=r(jEt,"electra"),jEt.forEach(t),zLr=r(bSe," \u2014 "),oH=n(bSe,"A",{href:!0});var DEt=s(oH);QLr=r(DEt,"FlaxElectraForSequenceClassification"),DEt.forEach(t),WLr=r(bSe," (ELECTRA model)"),bSe.forEach(t),HLr=i(ye),P5=n(ye,"LI",{});var FSe=s(P5);x1e=n(FSe,"STRONG",{});var GEt=s(x1e);ULr=r(GEt,"mbart"),GEt.forEach(t),JLr=r(FSe," \u2014 "),rH=n(FSe,"A",{href:!0});var OEt=s(rH);YLr=r(OEt,"FlaxMBartForSequenceClassification"),OEt.forEach(t),KLr=r(FSe," (mBART model)"),FSe.forEach(t),ZLr=i(ye),$5=n(ye,"LI",{});var vSe=s($5);k1e=n(vSe,"STRONG",{});var VEt=s(k1e);e8r=r(VEt,"roberta"),VEt.forEach(t),o8r=r(vSe," \u2014 "),tH=n(vSe,"A",{href:!0});var XEt=s(tH);r8r=r(XEt,"FlaxRobertaForSequenceClassification"),XEt.forEach(t),t8r=r(vSe," (RoBERTa model)"),vSe.forEach(t),a8r=i(ye),I5=n(ye,"LI",{});var TSe=s(I5);S1e=n(TSe,"STRONG",{});var zEt=s(S1e);n8r=r(zEt,"roformer"),zEt.forEach(t),s8r=r(TSe," \u2014 "),aH=n(TSe,"A",{href:!0});var QEt=s(aH);l8r=r(QEt,"FlaxRoFormerForSequenceClassification"),QEt.forEach(t),i8r=r(TSe," (RoFormer model)"),TSe.forEach(t),d8r=i(ye),q5=n(ye,"LI",{});var MSe=s(q5);R1e=n(MSe,"STRONG",{});var WEt=s(R1e);c8r=r(WEt,"xlm-roberta"),WEt.forEach(t),m8r=r(MSe," \u2014 "),nH=n(MSe,"A",{href:!0});var HEt=s(nH);f8r=r(HEt,"FlaxXLMRobertaForSequenceClassification"),HEt.forEach(t),g8r=r(MSe," (XLM-RoBERTa model)"),MSe.forEach(t),ye.forEach(t),h8r=i(Ba),B1e=n(Ba,"P",{});var UEt=s(B1e);u8r=r(UEt,"Examples:"),UEt.forEach(t),p8r=i(Ba),f(C8.$$.fragment,Ba),Ba.forEach(t),Mi.forEach(t),OBe=i(c),pm=n(c,"H2",{class:!0});var Z$e=s(pm);N5=n(Z$e,"A",{id:!0,class:!0,href:!0});var JEt=s(N5);P1e=n(JEt,"SPAN",{});var YEt=s(P1e);f(w8.$$.fragment,YEt),YEt.forEach(t),JEt.forEach(t),_8r=i(Z$e),$1e=n(Z$e,"SPAN",{});var KEt=s($1e);b8r=r(KEt,"FlaxAutoModelForQuestionAnswering"),KEt.forEach(t),Z$e.forEach(t),VBe=i(c),Nr=n(c,"DIV",{class:!0});var Ci=s(Nr);f(A8.$$.fragment,Ci),F8r=i(Ci),_m=n(Ci,"P",{});var $J=s(_m);v8r=r($J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),sH=n($J,"A",{href:!0});var ZEt=s(sH);T8r=r(ZEt,"from_pretrained()"),ZEt.forEach(t),M8r=r($J," class method or the "),lH=n($J,"A",{href:!0});var eCt=s(lH);E8r=r(eCt,"from_config()"),eCt.forEach(t),C8r=r($J,` class
method.`),$J.forEach(t),w8r=i(Ci),y8=n(Ci,"P",{});var eIe=s(y8);A8r=r(eIe,"This class cannot be instantiated directly using "),I1e=n(eIe,"CODE",{});var oCt=s(I1e);y8r=r(oCt,"__init__()"),oCt.forEach(t),L8r=r(eIe," (throws an error)."),eIe.forEach(t),x8r=i(Ci),Rt=n(Ci,"DIV",{class:!0});var wi=s(Rt);f(L8.$$.fragment,wi),k8r=i(wi),q1e=n(wi,"P",{});var rCt=s(q1e);S8r=r(rCt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),rCt.forEach(t),R8r=i(wi),bm=n(wi,"P",{});var IJ=s(bm);B8r=r(IJ,`Note:
Loading a model from its configuration file does `),N1e=n(IJ,"STRONG",{});var tCt=s(N1e);P8r=r(tCt,"not"),tCt.forEach(t),$8r=r(IJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iH=n(IJ,"A",{href:!0});var aCt=s(iH);I8r=r(aCt,"from_pretrained()"),aCt.forEach(t),q8r=r(IJ," to load the model weights."),IJ.forEach(t),N8r=i(wi),j1e=n(wi,"P",{});var nCt=s(j1e);j8r=r(nCt,"Examples:"),nCt.forEach(t),D8r=i(wi),f(x8.$$.fragment,wi),wi.forEach(t),G8r=i(Ci),Bo=n(Ci,"DIV",{class:!0});var Pa=s(Bo);f(k8.$$.fragment,Pa),O8r=i(Pa),D1e=n(Pa,"P",{});var sCt=s(D1e);V8r=r(sCt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),sCt.forEach(t),X8r=i(Pa),$n=n(Pa,"P",{});var gw=s($n);z8r=r(gw,"The model class to instantiate is selected based on the "),G1e=n(gw,"CODE",{});var lCt=s(G1e);Q8r=r(lCt,"model_type"),lCt.forEach(t),W8r=r(gw,` property of the config object (either
passed as an argument or loaded from `),O1e=n(gw,"CODE",{});var iCt=s(O1e);H8r=r(iCt,"pretrained_model_name_or_path"),iCt.forEach(t),U8r=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=n(gw,"CODE",{});var dCt=s(V1e);J8r=r(dCt,"pretrained_model_name_or_path"),dCt.forEach(t),Y8r=r(gw,":"),gw.forEach(t),K8r=i(Pa),Te=n(Pa,"UL",{});var Le=s(Te);j5=n(Le,"LI",{});var ESe=s(j5);X1e=n(ESe,"STRONG",{});var cCt=s(X1e);Z8r=r(cCt,"albert"),cCt.forEach(t),e7r=r(ESe," \u2014 "),dH=n(ESe,"A",{href:!0});var mCt=s(dH);o7r=r(mCt,"FlaxAlbertForQuestionAnswering"),mCt.forEach(t),r7r=r(ESe," (ALBERT model)"),ESe.forEach(t),t7r=i(Le),D5=n(Le,"LI",{});var CSe=s(D5);z1e=n(CSe,"STRONG",{});var fCt=s(z1e);a7r=r(fCt,"bart"),fCt.forEach(t),n7r=r(CSe," \u2014 "),cH=n(CSe,"A",{href:!0});var gCt=s(cH);s7r=r(gCt,"FlaxBartForQuestionAnswering"),gCt.forEach(t),l7r=r(CSe," (BART model)"),CSe.forEach(t),i7r=i(Le),G5=n(Le,"LI",{});var wSe=s(G5);Q1e=n(wSe,"STRONG",{});var hCt=s(Q1e);d7r=r(hCt,"bert"),hCt.forEach(t),c7r=r(wSe," \u2014 "),mH=n(wSe,"A",{href:!0});var uCt=s(mH);m7r=r(uCt,"FlaxBertForQuestionAnswering"),uCt.forEach(t),f7r=r(wSe," (BERT model)"),wSe.forEach(t),g7r=i(Le),O5=n(Le,"LI",{});var ASe=s(O5);W1e=n(ASe,"STRONG",{});var pCt=s(W1e);h7r=r(pCt,"big_bird"),pCt.forEach(t),u7r=r(ASe," \u2014 "),fH=n(ASe,"A",{href:!0});var _Ct=s(fH);p7r=r(_Ct,"FlaxBigBirdForQuestionAnswering"),_Ct.forEach(t),_7r=r(ASe," (BigBird model)"),ASe.forEach(t),b7r=i(Le),V5=n(Le,"LI",{});var ySe=s(V5);H1e=n(ySe,"STRONG",{});var bCt=s(H1e);F7r=r(bCt,"distilbert"),bCt.forEach(t),v7r=r(ySe," \u2014 "),gH=n(ySe,"A",{href:!0});var FCt=s(gH);T7r=r(FCt,"FlaxDistilBertForQuestionAnswering"),FCt.forEach(t),M7r=r(ySe," (DistilBERT model)"),ySe.forEach(t),E7r=i(Le),X5=n(Le,"LI",{});var LSe=s(X5);U1e=n(LSe,"STRONG",{});var vCt=s(U1e);C7r=r(vCt,"electra"),vCt.forEach(t),w7r=r(LSe," \u2014 "),hH=n(LSe,"A",{href:!0});var TCt=s(hH);A7r=r(TCt,"FlaxElectraForQuestionAnswering"),TCt.forEach(t),y7r=r(LSe," (ELECTRA model)"),LSe.forEach(t),L7r=i(Le),z5=n(Le,"LI",{});var xSe=s(z5);J1e=n(xSe,"STRONG",{});var MCt=s(J1e);x7r=r(MCt,"mbart"),MCt.forEach(t),k7r=r(xSe," \u2014 "),uH=n(xSe,"A",{href:!0});var ECt=s(uH);S7r=r(ECt,"FlaxMBartForQuestionAnswering"),ECt.forEach(t),R7r=r(xSe," (mBART model)"),xSe.forEach(t),B7r=i(Le),Q5=n(Le,"LI",{});var kSe=s(Q5);Y1e=n(kSe,"STRONG",{});var CCt=s(Y1e);P7r=r(CCt,"roberta"),CCt.forEach(t),$7r=r(kSe," \u2014 "),pH=n(kSe,"A",{href:!0});var wCt=s(pH);I7r=r(wCt,"FlaxRobertaForQuestionAnswering"),wCt.forEach(t),q7r=r(kSe," (RoBERTa model)"),kSe.forEach(t),N7r=i(Le),W5=n(Le,"LI",{});var SSe=s(W5);K1e=n(SSe,"STRONG",{});var ACt=s(K1e);j7r=r(ACt,"roformer"),ACt.forEach(t),D7r=r(SSe," \u2014 "),_H=n(SSe,"A",{href:!0});var yCt=s(_H);G7r=r(yCt,"FlaxRoFormerForQuestionAnswering"),yCt.forEach(t),O7r=r(SSe," (RoFormer model)"),SSe.forEach(t),V7r=i(Le),H5=n(Le,"LI",{});var RSe=s(H5);Z1e=n(RSe,"STRONG",{});var LCt=s(Z1e);X7r=r(LCt,"xlm-roberta"),LCt.forEach(t),z7r=r(RSe," \u2014 "),bH=n(RSe,"A",{href:!0});var xCt=s(bH);Q7r=r(xCt,"FlaxXLMRobertaForQuestionAnswering"),xCt.forEach(t),W7r=r(RSe," (XLM-RoBERTa model)"),RSe.forEach(t),Le.forEach(t),H7r=i(Pa),eMe=n(Pa,"P",{});var kCt=s(eMe);U7r=r(kCt,"Examples:"),kCt.forEach(t),J7r=i(Pa),f(S8.$$.fragment,Pa),Pa.forEach(t),Ci.forEach(t),XBe=i(c),Fm=n(c,"H2",{class:!0});var oIe=s(Fm);U5=n(oIe,"A",{id:!0,class:!0,href:!0});var SCt=s(U5);oMe=n(SCt,"SPAN",{});var RCt=s(oMe);f(R8.$$.fragment,RCt),RCt.forEach(t),SCt.forEach(t),Y7r=i(oIe),rMe=n(oIe,"SPAN",{});var BCt=s(rMe);K7r=r(BCt,"FlaxAutoModelForTokenClassification"),BCt.forEach(t),oIe.forEach(t),zBe=i(c),jr=n(c,"DIV",{class:!0});var Ai=s(jr);f(B8.$$.fragment,Ai),Z7r=i(Ai),vm=n(Ai,"P",{});var qJ=s(vm);e9r=r(qJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),FH=n(qJ,"A",{href:!0});var PCt=s(FH);o9r=r(PCt,"from_pretrained()"),PCt.forEach(t),r9r=r(qJ," class method or the "),vH=n(qJ,"A",{href:!0});var $Ct=s(vH);t9r=r($Ct,"from_config()"),$Ct.forEach(t),a9r=r(qJ,` class
method.`),qJ.forEach(t),n9r=i(Ai),P8=n(Ai,"P",{});var rIe=s(P8);s9r=r(rIe,"This class cannot be instantiated directly using "),tMe=n(rIe,"CODE",{});var ICt=s(tMe);l9r=r(ICt,"__init__()"),ICt.forEach(t),i9r=r(rIe," (throws an error)."),rIe.forEach(t),d9r=i(Ai),Bt=n(Ai,"DIV",{class:!0});var yi=s(Bt);f($8.$$.fragment,yi),c9r=i(yi),aMe=n(yi,"P",{});var qCt=s(aMe);m9r=r(qCt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),qCt.forEach(t),f9r=i(yi),Tm=n(yi,"P",{});var NJ=s(Tm);g9r=r(NJ,`Note:
Loading a model from its configuration file does `),nMe=n(NJ,"STRONG",{});var NCt=s(nMe);h9r=r(NCt,"not"),NCt.forEach(t),u9r=r(NJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TH=n(NJ,"A",{href:!0});var jCt=s(TH);p9r=r(jCt,"from_pretrained()"),jCt.forEach(t),_9r=r(NJ," to load the model weights."),NJ.forEach(t),b9r=i(yi),sMe=n(yi,"P",{});var DCt=s(sMe);F9r=r(DCt,"Examples:"),DCt.forEach(t),v9r=i(yi),f(I8.$$.fragment,yi),yi.forEach(t),T9r=i(Ai),Po=n(Ai,"DIV",{class:!0});var $a=s(Po);f(q8.$$.fragment,$a),M9r=i($a),lMe=n($a,"P",{});var GCt=s(lMe);E9r=r(GCt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),GCt.forEach(t),C9r=i($a),In=n($a,"P",{});var hw=s(In);w9r=r(hw,"The model class to instantiate is selected based on the "),iMe=n(hw,"CODE",{});var OCt=s(iMe);A9r=r(OCt,"model_type"),OCt.forEach(t),y9r=r(hw,` property of the config object (either
passed as an argument or loaded from `),dMe=n(hw,"CODE",{});var VCt=s(dMe);L9r=r(VCt,"pretrained_model_name_or_path"),VCt.forEach(t),x9r=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cMe=n(hw,"CODE",{});var XCt=s(cMe);k9r=r(XCt,"pretrained_model_name_or_path"),XCt.forEach(t),S9r=r(hw,":"),hw.forEach(t),R9r=i($a),Be=n($a,"UL",{});var Oo=s(Be);J5=n(Oo,"LI",{});var BSe=s(J5);mMe=n(BSe,"STRONG",{});var zCt=s(mMe);B9r=r(zCt,"albert"),zCt.forEach(t),P9r=r(BSe," \u2014 "),MH=n(BSe,"A",{href:!0});var QCt=s(MH);$9r=r(QCt,"FlaxAlbertForTokenClassification"),QCt.forEach(t),I9r=r(BSe," (ALBERT model)"),BSe.forEach(t),q9r=i(Oo),Y5=n(Oo,"LI",{});var PSe=s(Y5);fMe=n(PSe,"STRONG",{});var WCt=s(fMe);N9r=r(WCt,"bert"),WCt.forEach(t),j9r=r(PSe," \u2014 "),EH=n(PSe,"A",{href:!0});var HCt=s(EH);D9r=r(HCt,"FlaxBertForTokenClassification"),HCt.forEach(t),G9r=r(PSe," (BERT model)"),PSe.forEach(t),O9r=i(Oo),K5=n(Oo,"LI",{});var $Se=s(K5);gMe=n($Se,"STRONG",{});var UCt=s(gMe);V9r=r(UCt,"big_bird"),UCt.forEach(t),X9r=r($Se," \u2014 "),CH=n($Se,"A",{href:!0});var JCt=s(CH);z9r=r(JCt,"FlaxBigBirdForTokenClassification"),JCt.forEach(t),Q9r=r($Se," (BigBird model)"),$Se.forEach(t),W9r=i(Oo),Z5=n(Oo,"LI",{});var ISe=s(Z5);hMe=n(ISe,"STRONG",{});var YCt=s(hMe);H9r=r(YCt,"distilbert"),YCt.forEach(t),U9r=r(ISe," \u2014 "),wH=n(ISe,"A",{href:!0});var KCt=s(wH);J9r=r(KCt,"FlaxDistilBertForTokenClassification"),KCt.forEach(t),Y9r=r(ISe," (DistilBERT model)"),ISe.forEach(t),K9r=i(Oo),e3=n(Oo,"LI",{});var qSe=s(e3);uMe=n(qSe,"STRONG",{});var ZCt=s(uMe);Z9r=r(ZCt,"electra"),ZCt.forEach(t),exr=r(qSe," \u2014 "),AH=n(qSe,"A",{href:!0});var e5t=s(AH);oxr=r(e5t,"FlaxElectraForTokenClassification"),e5t.forEach(t),rxr=r(qSe," (ELECTRA model)"),qSe.forEach(t),txr=i(Oo),o3=n(Oo,"LI",{});var NSe=s(o3);pMe=n(NSe,"STRONG",{});var o5t=s(pMe);axr=r(o5t,"roberta"),o5t.forEach(t),nxr=r(NSe," \u2014 "),yH=n(NSe,"A",{href:!0});var r5t=s(yH);sxr=r(r5t,"FlaxRobertaForTokenClassification"),r5t.forEach(t),lxr=r(NSe," (RoBERTa model)"),NSe.forEach(t),ixr=i(Oo),r3=n(Oo,"LI",{});var jSe=s(r3);_Me=n(jSe,"STRONG",{});var t5t=s(_Me);dxr=r(t5t,"roformer"),t5t.forEach(t),cxr=r(jSe," \u2014 "),LH=n(jSe,"A",{href:!0});var a5t=s(LH);mxr=r(a5t,"FlaxRoFormerForTokenClassification"),a5t.forEach(t),fxr=r(jSe," (RoFormer model)"),jSe.forEach(t),gxr=i(Oo),t3=n(Oo,"LI",{});var DSe=s(t3);bMe=n(DSe,"STRONG",{});var n5t=s(bMe);hxr=r(n5t,"xlm-roberta"),n5t.forEach(t),uxr=r(DSe," \u2014 "),xH=n(DSe,"A",{href:!0});var s5t=s(xH);pxr=r(s5t,"FlaxXLMRobertaForTokenClassification"),s5t.forEach(t),_xr=r(DSe," (XLM-RoBERTa model)"),DSe.forEach(t),Oo.forEach(t),bxr=i($a),FMe=n($a,"P",{});var l5t=s(FMe);Fxr=r(l5t,"Examples:"),l5t.forEach(t),vxr=i($a),f(N8.$$.fragment,$a),$a.forEach(t),Ai.forEach(t),QBe=i(c),Mm=n(c,"H2",{class:!0});var tIe=s(Mm);a3=n(tIe,"A",{id:!0,class:!0,href:!0});var i5t=s(a3);vMe=n(i5t,"SPAN",{});var d5t=s(vMe);f(j8.$$.fragment,d5t),d5t.forEach(t),i5t.forEach(t),Txr=i(tIe),TMe=n(tIe,"SPAN",{});var c5t=s(TMe);Mxr=r(c5t,"FlaxAutoModelForMultipleChoice"),c5t.forEach(t),tIe.forEach(t),WBe=i(c),Dr=n(c,"DIV",{class:!0});var Li=s(Dr);f(D8.$$.fragment,Li),Exr=i(Li),Em=n(Li,"P",{});var jJ=s(Em);Cxr=r(jJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),kH=n(jJ,"A",{href:!0});var m5t=s(kH);wxr=r(m5t,"from_pretrained()"),m5t.forEach(t),Axr=r(jJ," class method or the "),SH=n(jJ,"A",{href:!0});var f5t=s(SH);yxr=r(f5t,"from_config()"),f5t.forEach(t),Lxr=r(jJ,` class
method.`),jJ.forEach(t),xxr=i(Li),G8=n(Li,"P",{});var aIe=s(G8);kxr=r(aIe,"This class cannot be instantiated directly using "),MMe=n(aIe,"CODE",{});var g5t=s(MMe);Sxr=r(g5t,"__init__()"),g5t.forEach(t),Rxr=r(aIe," (throws an error)."),aIe.forEach(t),Bxr=i(Li),Pt=n(Li,"DIV",{class:!0});var xi=s(Pt);f(O8.$$.fragment,xi),Pxr=i(xi),EMe=n(xi,"P",{});var h5t=s(EMe);$xr=r(h5t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),h5t.forEach(t),Ixr=i(xi),Cm=n(xi,"P",{});var DJ=s(Cm);qxr=r(DJ,`Note:
Loading a model from its configuration file does `),CMe=n(DJ,"STRONG",{});var u5t=s(CMe);Nxr=r(u5t,"not"),u5t.forEach(t),jxr=r(DJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=n(DJ,"A",{href:!0});var p5t=s(RH);Dxr=r(p5t,"from_pretrained()"),p5t.forEach(t),Gxr=r(DJ," to load the model weights."),DJ.forEach(t),Oxr=i(xi),wMe=n(xi,"P",{});var _5t=s(wMe);Vxr=r(_5t,"Examples:"),_5t.forEach(t),Xxr=i(xi),f(V8.$$.fragment,xi),xi.forEach(t),zxr=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);f(X8.$$.fragment,Ia),Qxr=i(Ia),AMe=n(Ia,"P",{});var b5t=s(AMe);Wxr=r(b5t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),b5t.forEach(t),Hxr=i(Ia),qn=n(Ia,"P",{});var uw=s(qn);Uxr=r(uw,"The model class to instantiate is selected based on the "),yMe=n(uw,"CODE",{});var F5t=s(yMe);Jxr=r(F5t,"model_type"),F5t.forEach(t),Yxr=r(uw,` property of the config object (either
passed as an argument or loaded from `),LMe=n(uw,"CODE",{});var v5t=s(LMe);Kxr=r(v5t,"pretrained_model_name_or_path"),v5t.forEach(t),Zxr=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xMe=n(uw,"CODE",{});var T5t=s(xMe);ekr=r(T5t,"pretrained_model_name_or_path"),T5t.forEach(t),okr=r(uw,":"),uw.forEach(t),rkr=i(Ia),Pe=n(Ia,"UL",{});var Vo=s(Pe);n3=n(Vo,"LI",{});var GSe=s(n3);kMe=n(GSe,"STRONG",{});var M5t=s(kMe);tkr=r(M5t,"albert"),M5t.forEach(t),akr=r(GSe," \u2014 "),BH=n(GSe,"A",{href:!0});var E5t=s(BH);nkr=r(E5t,"FlaxAlbertForMultipleChoice"),E5t.forEach(t),skr=r(GSe," (ALBERT model)"),GSe.forEach(t),lkr=i(Vo),s3=n(Vo,"LI",{});var OSe=s(s3);SMe=n(OSe,"STRONG",{});var C5t=s(SMe);ikr=r(C5t,"bert"),C5t.forEach(t),dkr=r(OSe," \u2014 "),PH=n(OSe,"A",{href:!0});var w5t=s(PH);ckr=r(w5t,"FlaxBertForMultipleChoice"),w5t.forEach(t),mkr=r(OSe," (BERT model)"),OSe.forEach(t),fkr=i(Vo),l3=n(Vo,"LI",{});var VSe=s(l3);RMe=n(VSe,"STRONG",{});var A5t=s(RMe);gkr=r(A5t,"big_bird"),A5t.forEach(t),hkr=r(VSe," \u2014 "),$H=n(VSe,"A",{href:!0});var y5t=s($H);ukr=r(y5t,"FlaxBigBirdForMultipleChoice"),y5t.forEach(t),pkr=r(VSe," (BigBird model)"),VSe.forEach(t),_kr=i(Vo),i3=n(Vo,"LI",{});var XSe=s(i3);BMe=n(XSe,"STRONG",{});var L5t=s(BMe);bkr=r(L5t,"distilbert"),L5t.forEach(t),Fkr=r(XSe," \u2014 "),IH=n(XSe,"A",{href:!0});var x5t=s(IH);vkr=r(x5t,"FlaxDistilBertForMultipleChoice"),x5t.forEach(t),Tkr=r(XSe," (DistilBERT model)"),XSe.forEach(t),Mkr=i(Vo),d3=n(Vo,"LI",{});var zSe=s(d3);PMe=n(zSe,"STRONG",{});var k5t=s(PMe);Ekr=r(k5t,"electra"),k5t.forEach(t),Ckr=r(zSe," \u2014 "),qH=n(zSe,"A",{href:!0});var S5t=s(qH);wkr=r(S5t,"FlaxElectraForMultipleChoice"),S5t.forEach(t),Akr=r(zSe," (ELECTRA model)"),zSe.forEach(t),ykr=i(Vo),c3=n(Vo,"LI",{});var QSe=s(c3);$Me=n(QSe,"STRONG",{});var R5t=s($Me);Lkr=r(R5t,"roberta"),R5t.forEach(t),xkr=r(QSe," \u2014 "),NH=n(QSe,"A",{href:!0});var B5t=s(NH);kkr=r(B5t,"FlaxRobertaForMultipleChoice"),B5t.forEach(t),Skr=r(QSe," (RoBERTa model)"),QSe.forEach(t),Rkr=i(Vo),m3=n(Vo,"LI",{});var WSe=s(m3);IMe=n(WSe,"STRONG",{});var P5t=s(IMe);Bkr=r(P5t,"roformer"),P5t.forEach(t),Pkr=r(WSe," \u2014 "),jH=n(WSe,"A",{href:!0});var $5t=s(jH);$kr=r($5t,"FlaxRoFormerForMultipleChoice"),$5t.forEach(t),Ikr=r(WSe," (RoFormer model)"),WSe.forEach(t),qkr=i(Vo),f3=n(Vo,"LI",{});var HSe=s(f3);qMe=n(HSe,"STRONG",{});var I5t=s(qMe);Nkr=r(I5t,"xlm-roberta"),I5t.forEach(t),jkr=r(HSe," \u2014 "),DH=n(HSe,"A",{href:!0});var q5t=s(DH);Dkr=r(q5t,"FlaxXLMRobertaForMultipleChoice"),q5t.forEach(t),Gkr=r(HSe," (XLM-RoBERTa model)"),HSe.forEach(t),Vo.forEach(t),Okr=i(Ia),NMe=n(Ia,"P",{});var N5t=s(NMe);Vkr=r(N5t,"Examples:"),N5t.forEach(t),Xkr=i(Ia),f(z8.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),HBe=i(c),wm=n(c,"H2",{class:!0});var nIe=s(wm);g3=n(nIe,"A",{id:!0,class:!0,href:!0});var j5t=s(g3);jMe=n(j5t,"SPAN",{});var D5t=s(jMe);f(Q8.$$.fragment,D5t),D5t.forEach(t),j5t.forEach(t),zkr=i(nIe),DMe=n(nIe,"SPAN",{});var G5t=s(DMe);Qkr=r(G5t,"FlaxAutoModelForNextSentencePrediction"),G5t.forEach(t),nIe.forEach(t),UBe=i(c),Gr=n(c,"DIV",{class:!0});var ki=s(Gr);f(W8.$$.fragment,ki),Wkr=i(ki),Am=n(ki,"P",{});var GJ=s(Am);Hkr=r(GJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),GH=n(GJ,"A",{href:!0});var O5t=s(GH);Ukr=r(O5t,"from_pretrained()"),O5t.forEach(t),Jkr=r(GJ," class method or the "),OH=n(GJ,"A",{href:!0});var V5t=s(OH);Ykr=r(V5t,"from_config()"),V5t.forEach(t),Kkr=r(GJ,` class
method.`),GJ.forEach(t),Zkr=i(ki),H8=n(ki,"P",{});var sIe=s(H8);eSr=r(sIe,"This class cannot be instantiated directly using "),GMe=n(sIe,"CODE",{});var X5t=s(GMe);oSr=r(X5t,"__init__()"),X5t.forEach(t),rSr=r(sIe," (throws an error)."),sIe.forEach(t),tSr=i(ki),$t=n(ki,"DIV",{class:!0});var Si=s($t);f(U8.$$.fragment,Si),aSr=i(Si),OMe=n(Si,"P",{});var z5t=s(OMe);nSr=r(z5t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),z5t.forEach(t),sSr=i(Si),ym=n(Si,"P",{});var OJ=s(ym);lSr=r(OJ,`Note:
Loading a model from its configuration file does `),VMe=n(OJ,"STRONG",{});var Q5t=s(VMe);iSr=r(Q5t,"not"),Q5t.forEach(t),dSr=r(OJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=n(OJ,"A",{href:!0});var W5t=s(VH);cSr=r(W5t,"from_pretrained()"),W5t.forEach(t),mSr=r(OJ," to load the model weights."),OJ.forEach(t),fSr=i(Si),XMe=n(Si,"P",{});var H5t=s(XMe);gSr=r(H5t,"Examples:"),H5t.forEach(t),hSr=i(Si),f(J8.$$.fragment,Si),Si.forEach(t),uSr=i(ki),Io=n(ki,"DIV",{class:!0});var qa=s(Io);f(Y8.$$.fragment,qa),pSr=i(qa),zMe=n(qa,"P",{});var U5t=s(zMe);_Sr=r(U5t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),U5t.forEach(t),bSr=i(qa),Nn=n(qa,"P",{});var pw=s(Nn);FSr=r(pw,"The model class to instantiate is selected based on the "),QMe=n(pw,"CODE",{});var J5t=s(QMe);vSr=r(J5t,"model_type"),J5t.forEach(t),TSr=r(pw,` property of the config object (either
passed as an argument or loaded from `),WMe=n(pw,"CODE",{});var Y5t=s(WMe);MSr=r(Y5t,"pretrained_model_name_or_path"),Y5t.forEach(t),ESr=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HMe=n(pw,"CODE",{});var K5t=s(HMe);CSr=r(K5t,"pretrained_model_name_or_path"),K5t.forEach(t),wSr=r(pw,":"),pw.forEach(t),ASr=i(qa),UMe=n(qa,"UL",{});var Z5t=s(UMe);h3=n(Z5t,"LI",{});var USe=s(h3);JMe=n(USe,"STRONG",{});var e3t=s(JMe);ySr=r(e3t,"bert"),e3t.forEach(t),LSr=r(USe," \u2014 "),XH=n(USe,"A",{href:!0});var o3t=s(XH);xSr=r(o3t,"FlaxBertForNextSentencePrediction"),o3t.forEach(t),kSr=r(USe," (BERT model)"),USe.forEach(t),Z5t.forEach(t),SSr=i(qa),YMe=n(qa,"P",{});var r3t=s(YMe);RSr=r(r3t,"Examples:"),r3t.forEach(t),BSr=i(qa),f(K8.$$.fragment,qa),qa.forEach(t),ki.forEach(t),JBe=i(c),Lm=n(c,"H2",{class:!0});var lIe=s(Lm);u3=n(lIe,"A",{id:!0,class:!0,href:!0});var t3t=s(u3);KMe=n(t3t,"SPAN",{});var a3t=s(KMe);f(Z8.$$.fragment,a3t),a3t.forEach(t),t3t.forEach(t),PSr=i(lIe),ZMe=n(lIe,"SPAN",{});var n3t=s(ZMe);$Sr=r(n3t,"FlaxAutoModelForImageClassification"),n3t.forEach(t),lIe.forEach(t),YBe=i(c),Or=n(c,"DIV",{class:!0});var Ri=s(Or);f(e7.$$.fragment,Ri),ISr=i(Ri),xm=n(Ri,"P",{});var VJ=s(xm);qSr=r(VJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zH=n(VJ,"A",{href:!0});var s3t=s(zH);NSr=r(s3t,"from_pretrained()"),s3t.forEach(t),jSr=r(VJ," class method or the "),QH=n(VJ,"A",{href:!0});var l3t=s(QH);DSr=r(l3t,"from_config()"),l3t.forEach(t),GSr=r(VJ,` class
method.`),VJ.forEach(t),OSr=i(Ri),o7=n(Ri,"P",{});var iIe=s(o7);VSr=r(iIe,"This class cannot be instantiated directly using "),e4e=n(iIe,"CODE",{});var i3t=s(e4e);XSr=r(i3t,"__init__()"),i3t.forEach(t),zSr=r(iIe," (throws an error)."),iIe.forEach(t),QSr=i(Ri),It=n(Ri,"DIV",{class:!0});var Bi=s(It);f(r7.$$.fragment,Bi),WSr=i(Bi),o4e=n(Bi,"P",{});var d3t=s(o4e);HSr=r(d3t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),d3t.forEach(t),USr=i(Bi),km=n(Bi,"P",{});var XJ=s(km);JSr=r(XJ,`Note:
Loading a model from its configuration file does `),r4e=n(XJ,"STRONG",{});var c3t=s(r4e);YSr=r(c3t,"not"),c3t.forEach(t),KSr=r(XJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=n(XJ,"A",{href:!0});var m3t=s(WH);ZSr=r(m3t,"from_pretrained()"),m3t.forEach(t),eRr=r(XJ," to load the model weights."),XJ.forEach(t),oRr=i(Bi),t4e=n(Bi,"P",{});var f3t=s(t4e);rRr=r(f3t,"Examples:"),f3t.forEach(t),tRr=i(Bi),f(t7.$$.fragment,Bi),Bi.forEach(t),aRr=i(Ri),qo=n(Ri,"DIV",{class:!0});var Na=s(qo);f(a7.$$.fragment,Na),nRr=i(Na),a4e=n(Na,"P",{});var g3t=s(a4e);sRr=r(g3t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),g3t.forEach(t),lRr=i(Na),jn=n(Na,"P",{});var _w=s(jn);iRr=r(_w,"The model class to instantiate is selected based on the "),n4e=n(_w,"CODE",{});var h3t=s(n4e);dRr=r(h3t,"model_type"),h3t.forEach(t),cRr=r(_w,` property of the config object (either
passed as an argument or loaded from `),s4e=n(_w,"CODE",{});var u3t=s(s4e);mRr=r(u3t,"pretrained_model_name_or_path"),u3t.forEach(t),fRr=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l4e=n(_w,"CODE",{});var p3t=s(l4e);gRr=r(p3t,"pretrained_model_name_or_path"),p3t.forEach(t),hRr=r(_w,":"),_w.forEach(t),uRr=i(Na),n7=n(Na,"UL",{});var dIe=s(n7);p3=n(dIe,"LI",{});var JSe=s(p3);i4e=n(JSe,"STRONG",{});var _3t=s(i4e);pRr=r(_3t,"beit"),_3t.forEach(t),_Rr=r(JSe," \u2014 "),HH=n(JSe,"A",{href:!0});var b3t=s(HH);bRr=r(b3t,"FlaxBeitForImageClassification"),b3t.forEach(t),FRr=r(JSe," (BEiT model)"),JSe.forEach(t),vRr=i(dIe),_3=n(dIe,"LI",{});var YSe=s(_3);d4e=n(YSe,"STRONG",{});var F3t=s(d4e);TRr=r(F3t,"vit"),F3t.forEach(t),MRr=r(YSe," \u2014 "),UH=n(YSe,"A",{href:!0});var v3t=s(UH);ERr=r(v3t,"FlaxViTForImageClassification"),v3t.forEach(t),CRr=r(YSe," (ViT model)"),YSe.forEach(t),dIe.forEach(t),wRr=i(Na),c4e=n(Na,"P",{});var T3t=s(c4e);ARr=r(T3t,"Examples:"),T3t.forEach(t),yRr=i(Na),f(s7.$$.fragment,Na),Na.forEach(t),Ri.forEach(t),KBe=i(c),Sm=n(c,"H2",{class:!0});var cIe=s(Sm);b3=n(cIe,"A",{id:!0,class:!0,href:!0});var M3t=s(b3);m4e=n(M3t,"SPAN",{});var E3t=s(m4e);f(l7.$$.fragment,E3t),E3t.forEach(t),M3t.forEach(t),LRr=i(cIe),f4e=n(cIe,"SPAN",{});var C3t=s(f4e);xRr=r(C3t,"FlaxAutoModelForVision2Seq"),C3t.forEach(t),cIe.forEach(t),ZBe=i(c),Vr=n(c,"DIV",{class:!0});var Pi=s(Vr);f(i7.$$.fragment,Pi),kRr=i(Pi),Rm=n(Pi,"P",{});var zJ=s(Rm);SRr=r(zJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),JH=n(zJ,"A",{href:!0});var w3t=s(JH);RRr=r(w3t,"from_pretrained()"),w3t.forEach(t),BRr=r(zJ," class method or the "),YH=n(zJ,"A",{href:!0});var A3t=s(YH);PRr=r(A3t,"from_config()"),A3t.forEach(t),$Rr=r(zJ,` class
method.`),zJ.forEach(t),IRr=i(Pi),d7=n(Pi,"P",{});var mIe=s(d7);qRr=r(mIe,"This class cannot be instantiated directly using "),g4e=n(mIe,"CODE",{});var y3t=s(g4e);NRr=r(y3t,"__init__()"),y3t.forEach(t),jRr=r(mIe," (throws an error)."),mIe.forEach(t),DRr=i(Pi),qt=n(Pi,"DIV",{class:!0});var $i=s(qt);f(c7.$$.fragment,$i),GRr=i($i),h4e=n($i,"P",{});var L3t=s(h4e);ORr=r(L3t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),L3t.forEach(t),VRr=i($i),Bm=n($i,"P",{});var QJ=s(Bm);XRr=r(QJ,`Note:
Loading a model from its configuration file does `),u4e=n(QJ,"STRONG",{});var x3t=s(u4e);zRr=r(x3t,"not"),x3t.forEach(t),QRr=r(QJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=n(QJ,"A",{href:!0});var k3t=s(KH);WRr=r(k3t,"from_pretrained()"),k3t.forEach(t),HRr=r(QJ," to load the model weights."),QJ.forEach(t),URr=i($i),p4e=n($i,"P",{});var S3t=s(p4e);JRr=r(S3t,"Examples:"),S3t.forEach(t),YRr=i($i),f(m7.$$.fragment,$i),$i.forEach(t),KRr=i(Pi),No=n(Pi,"DIV",{class:!0});var ja=s(No);f(f7.$$.fragment,ja),ZRr=i(ja),_4e=n(ja,"P",{});var R3t=s(_4e);eBr=r(R3t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),R3t.forEach(t),oBr=i(ja),Dn=n(ja,"P",{});var bw=s(Dn);rBr=r(bw,"The model class to instantiate is selected based on the "),b4e=n(bw,"CODE",{});var B3t=s(b4e);tBr=r(B3t,"model_type"),B3t.forEach(t),aBr=r(bw,` property of the config object (either
passed as an argument or loaded from `),F4e=n(bw,"CODE",{});var P3t=s(F4e);nBr=r(P3t,"pretrained_model_name_or_path"),P3t.forEach(t),sBr=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v4e=n(bw,"CODE",{});var $3t=s(v4e);lBr=r($3t,"pretrained_model_name_or_path"),$3t.forEach(t),iBr=r(bw,":"),bw.forEach(t),dBr=i(ja),T4e=n(ja,"UL",{});var I3t=s(T4e);F3=n(I3t,"LI",{});var KSe=s(F3);M4e=n(KSe,"STRONG",{});var q3t=s(M4e);cBr=r(q3t,"vision-encoder-decoder"),q3t.forEach(t),mBr=r(KSe," \u2014 "),ZH=n(KSe,"A",{href:!0});var N3t=s(ZH);fBr=r(N3t,"FlaxVisionEncoderDecoderModel"),N3t.forEach(t),gBr=r(KSe," (Vision Encoder decoder model)"),KSe.forEach(t),I3t.forEach(t),hBr=i(ja),E4e=n(ja,"P",{});var j3t=s(E4e);uBr=r(j3t,"Examples:"),j3t.forEach(t),pBr=i(ja),f(g7.$$.fragment,ja),ja.forEach(t),Pi.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(U3t)),d(Ce,"id","auto-classes"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#auto-classes"),d(de,"class","relative group"),d(Gn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),d(Vn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),d(Xn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),d(Oi,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),d(Dm,"id","extending-the-auto-classes"),d(Dm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Dm,"href","#extending-the-auto-classes"),d(Vi,"class","relative group"),d(Om,"id","transformers.AutoConfig"),d(Om,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Om,"href","#transformers.AutoConfig"),d(Xi,"class","relative group"),d(_9,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(b9,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),d(F9,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),d(v9,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),d(T9,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),d(M9,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(E9,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),d(C9,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(w9,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(A9,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(y9,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),d(L9,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),d(x9,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),d(k9,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),d(S9,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),d(R9,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),d(B9,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(P9,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d($9,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),d(I9,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(q9,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(N9,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),d(j9,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),d(D9,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),d(G9,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),d(O9,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),d(V9,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),d(X9,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(z9,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),d(Q9,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),d(W9,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),d(H9,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),d(U9,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),d(J9,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),d(Y9,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(K9,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),d(Z9,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),d(ex,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),d(ox,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(rx,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(tx,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(ax,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),d(nx,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),d(sx,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),d(lx,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),d(ix,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),d(dx,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),d(cx,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(mx,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),d(fx,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(gx,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(hx,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),d(ux,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),d(px,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(_x,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(bx,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),d(Fx,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),d(vx,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),d(Tx,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(Mx,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(Ex,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(Cx,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),d(wx,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),d(Ax,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),d(yx,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),d(Lx,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),d(xx,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),d(kx,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),d(Sx,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),d(Rx,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),d(Bx,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),d(Px,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),d($x,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),d(Ix,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(qx,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(Nx,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(jx,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),d(Dx,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(Gx,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),d(Ox,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),d(Vx,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),d(Xx,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(zx,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),d(Qx,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(Wx,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(Hx,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),d(Ux,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),d(Jx,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(Yx,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(Kx,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(Zx,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),d(ek,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(ok,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(rk,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),d(tk,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),d(ak,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),d(nk,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(sk,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(lk,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(ik,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),d(dk,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),d(fo,"class","docstring"),d(Ig,"class","docstring"),d(Qo,"class","docstring"),d(qg,"id","transformers.AutoTokenizer"),d(qg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qg,"href","#transformers.AutoTokenizer"),d(Qi,"class","relative group"),d(ck,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(mk,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),d(fk,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(gk,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),d(hk,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),d(uk,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),d(pk,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(_k,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(bk,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(Fk,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(vk,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(Tk,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(Mk,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(Ek,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(Ck,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(wk,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Ak,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(yk,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(Lk,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(xk,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(kk,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(Sk,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),d(Rk,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(Bk,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),d(Pk,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),d($k,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Ik,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(qk,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Nk,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),d(jk,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(Dk,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),d(Gk,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(Ok,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(Vk,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(Xk,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(zk,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(Qk,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(Wk,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),d(Hk,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(Uk,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(Jk,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),d(Yk,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(Kk,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(Zk,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),d(eS,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(oS,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(rS,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(tS,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(aS,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(nS,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),d(sS,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(lS,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(iS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d(dS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(cS,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(mS,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(fS,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(gS,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(hS,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(uS,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(pS,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),d(_S,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),d(bS,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),d(FS,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(vS,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),d(TS,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(MS,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(ES,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(CS,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),d(wS,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),d(AS,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(yS,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(LS,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(xS,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),d(kS,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(SS,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(RS,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(BS,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(PS,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),d($S,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),d(IS,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(qS,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(NS,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(jS,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(DS,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(GS,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),d(OS,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),d(VS,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(XS,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(zS,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(QS,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),d(WS,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),d(HS,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),d(US,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),d(JS,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(YS,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),d(KS,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(ZS,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(eR,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(oR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d(rR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(tR,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(aR,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(nR,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(sR,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(lR,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),d(iR,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(dR,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(cR,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(mR,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),d(fR,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),d(gR,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),d(hR,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(uR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(pR,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(_R,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),d(bR,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(FR,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),d(vR,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(TR,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(MR,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(ER,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(CR,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(gh,"class","docstring"),d(Wo,"class","docstring"),d(hh,"id","transformers.AutoFeatureExtractor"),d(hh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hh,"href","#transformers.AutoFeatureExtractor"),d(Wi,"class","relative group"),d(wR,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(AR,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(yR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(LR,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(xR,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(kR,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(SR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(RR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(BR,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(PR,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d($R,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(IR,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(qR,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(NR,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(jR,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(DR,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(GR,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(OR,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(VR,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(XR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring"),d($h,"class","docstring"),d(Ho,"class","docstring"),d(Ih,"id","transformers.AutoProcessor"),d(Ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ih,"href","#transformers.AutoProcessor"),d(Hi,"class","relative group"),d(zR,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(QR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),d(WR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(HR,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(UR,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(JR,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(YR,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),d(KR,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(ZR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring"),d(Qh,"class","docstring"),d(Uo,"class","docstring"),d(Wh,"id","transformers.AutoModel"),d(Wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Wh,"href","#transformers.AutoModel"),d(Ji,"class","relative group"),d(eB,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oB,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rB,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring"),d(tB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),d(aB,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),d(nB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),d(sB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),d(lB,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(iB,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),d(dB,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(cB,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(mB,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(fB,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),d(gB,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),d(hB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),d(uB,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),d(pB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),d(_B,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),d(bB,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(FB,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(vB,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),d(TB,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(MB,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(EB,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),d(CB,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),d(wB,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),d(AB,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(yB,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),d(LB,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),d(xB,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),d(kB,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),d(SB,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),d(RB,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),d(BB,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),d(PB,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),d($B,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),d(IB,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(qB,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),d(NB,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),d(jB,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),d(DB,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(GB,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(OB,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(VB,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),d(XB,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),d(zB,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),d(QB,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),d(WB,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),d(HB,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),d(UB,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),d(JB,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),d(YB,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(KB,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),d(ZB,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),d(eP,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),d(oP,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),d(rP,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(tP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),d(aP,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),d(nP,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),d(sP,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),d(lP,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(iP,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),d(dP,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),d(cP,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),d(mP,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),d(fP,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),d(gP,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),d(hP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),d(uP,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),d(pP,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),d(_P,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),d(bP,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),d(FP,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(vP,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),d(TP,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(MP,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),d(EP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),d(CP,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),d(wP,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(AP,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),d(yP,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(LP,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),d(xP,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),d(kP,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(SP,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),d(RP,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),d(BP,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(PP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d($P,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),d(IP,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),d(qP,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),d(NP,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(jP,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(DP,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(GP,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),d(OP,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),d(qe,"class","docstring"),d(Jo,"class","docstring"),d(Bp,"id","transformers.AutoModelForPreTraining"),d(Bp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Bp,"href","#transformers.AutoModelForPreTraining"),d(Zi,"class","relative group"),d(VP,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XP,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zP,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring"),d(QP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),d(WP,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(HP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),d(UP,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(JP,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(YP,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(KP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(ZP,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(e$,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(o$,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(r$,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),d(t$,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(a$,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),d(n$,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(s$,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(l$,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(i$,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(d$,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(c$,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(m$,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(f$,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(g$,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(h$,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(u$,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(p$,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),d(_$,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(b$,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(F$,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(v$,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(T$,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(M$,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(E$,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(C$,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(w$,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(A$,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(y$,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(L$,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(x$,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(k$,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring"),d(Yo,"class","docstring"),d(v_,"id","transformers.AutoModelForCausalLM"),d(v_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(v_,"href","#transformers.AutoModelForCausalLM"),d(rd,"class","relative group"),d(S$,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(R$,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(B$,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring"),d(P$,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),d($$,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),d(I$,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(q$,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(N$,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(j$,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(D$,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(G$,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(O$,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(V$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(X$,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),d(z$,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(Q$,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(W$,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(H$,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),d(U$,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),d(J$,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(Y$,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(K$,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(Z$,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(eI,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(oI,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(rI,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(tI,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(aI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(nI,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(sI,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(lI,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(iI,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(dI,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(cI,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(mI,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(fI,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(gI,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(hI,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring"),d(Ko,"class","docstring"),d(tb,"id","transformers.AutoModelForMaskedLM"),d(tb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tb,"href","#transformers.AutoModelForMaskedLM"),d(nd,"class","relative group"),d(uI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_I,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring"),d(bI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(FI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(vI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),d(TI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(MI,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(EI,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(CI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(wI,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(AI,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(yI,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(LI,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(xI,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(kI,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(SI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(RI,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(BI,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(PI,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d($I,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(II,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(qI,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(NI,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(jI,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(DI,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(GI,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(OI,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(VI,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(XI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(zI,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(QI,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(WI,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(HI,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(UI,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(JI,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(YI,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(De,"class","docstring"),d(Zo,"class","docstring"),d(Db,"id","transformers.AutoModelForSeq2SeqLM"),d(Db,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Db,"href","#transformers.AutoModelForSeq2SeqLM"),d(id,"class","relative group"),d(KI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ZI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring"),d(oq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(rq,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(tq,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(aq,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(nq,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(sq,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(lq,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(iq,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(dq,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),d(cq,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(mq,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(fq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(gq,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(hq,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(uq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(pq,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(er,"class","docstring"),d(a2,"id","transformers.AutoModelForSequenceClassification"),d(a2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(a2,"href","#transformers.AutoModelForSequenceClassification"),d(md,"class","relative group"),d(_q,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Fq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring"),d(vq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(Tq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),d(Mq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),d(Eq,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(Cq,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(wq,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(Aq,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(yq,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(Lq,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(xq,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(kq,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(Sq,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(Rq,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(Bq,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(Pq,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d($q,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(Iq,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(qq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(Nq,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(jq,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(Dq,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(Gq,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(Oq,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(Vq,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),d(Xq,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(zq,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(Qq,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(Wq,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(Hq,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(Uq,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(Jq,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(Yq,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(Kq,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(Zq,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(eN,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(oN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(rN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(tN,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(aN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(nN,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(sN,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(lN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(iN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(dN,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(cN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(mN,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring"),d(or,"class","docstring"),d(K2,"id","transformers.AutoModelForMultipleChoice"),d(K2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(K2,"href","#transformers.AutoModelForMultipleChoice"),d(hd,"class","relative group"),d(fN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring"),d(uN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(pN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),d(_N,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(bN,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(FN,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(vN,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(TN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(MN,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(EN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(CN,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(wN,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(AN,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(yN,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(LN,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(xN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(kN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(SN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(RN,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(BN,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(PN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d($N,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(IN,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(qN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(NN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(jN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(DN,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(GN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(ON,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring"),d(rr,"class","docstring"),d(LF,"id","transformers.AutoModelForNextSentencePrediction"),d(LF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(LF,"href","#transformers.AutoModelForNextSentencePrediction"),d(_d,"class","relative group"),d(VN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring"),d(QN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(WN,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(HN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(UN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(JN,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Xe,"class","docstring"),d(tr,"class","docstring"),d($F,"id","transformers.AutoModelForTokenClassification"),d($F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($F,"href","#transformers.AutoModelForTokenClassification"),d(vd,"class","relative group"),d(YN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(KN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ZN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring"),d(ej,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(oj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),d(rj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(tj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(aj,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),d(nj,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(sj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(lj,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(ij,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(dj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(cj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(mj,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(fj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(gj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(hj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(uj,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(pj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(_j,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(bj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(Fj,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(vj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(Tj,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(Mj,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(Ej,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(Cj,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(wj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(Aj,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(yj,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(Lj,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(xj,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(kj,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(Sj,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(Rj,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring"),d(ar,"class","docstring"),d(pv,"id","transformers.AutoModelForQuestionAnswering"),d(pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pv,"href","#transformers.AutoModelForQuestionAnswering"),d(Ed,"class","relative group"),d(Bj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($j,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring"),d(Ij,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(qj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(Nj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(jj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(Dj,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(Gj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(Oj,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(Vj,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(Xj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(zj,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(Qj,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(Wj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(Hj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(Uj,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(Jj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(Yj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(Kj,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(Zj,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(eD,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(oD,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(rD,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(tD,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(aD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(nD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(sD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(lD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(iD,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(dD,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(cD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(mD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(fD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(gD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(hD,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(uD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(pD,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(_D,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(bD,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(FD,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(vD,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring"),d(nr,"class","docstring"),d(tT,"id","transformers.AutoModelForTableQuestionAnswering"),d(tT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tT,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Ad,"class","relative group"),d(TD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ED,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring"),d(CD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(We,"class","docstring"),d(sr,"class","docstring"),d(sT,"id","transformers.AutoModelForImageClassification"),d(sT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(sT,"href","#transformers.AutoModelForImageClassification"),d(xd,"class","relative group"),d(wD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(AD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring"),d(LD,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),d(xD,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(kD,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),d(SD,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(RD,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(BD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(PD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d($D,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(ID,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(qD,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(ND,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(jD,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(DD,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),d(GD,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),d(OD,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring"),d(lr,"class","docstring"),d(bT,"id","transformers.AutoModelForVision2Seq"),d(bT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bT,"href","#transformers.AutoModelForVision2Seq"),d(Rd,"class","relative group"),d(VD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring"),d(QD,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring"),d(ir,"class","docstring"),d(TT,"id","transformers.AutoModelForAudioClassification"),d(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TT,"href","#transformers.AutoModelForAudioClassification"),d($d,"class","relative group"),d(WD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(HD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(UD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring"),d(JD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(YD,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(KD,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(ZD,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(eG,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(oG,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(rG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(tG,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring"),d(dr,"class","docstring"),d(ST,"id","transformers.AutoModelForAudioFrameClassification"),d(ST,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ST,"href","#transformers.AutoModelForAudioFrameClassification"),d(Nd,"class","relative group"),d(aG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring"),d(lG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(iG,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(dG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(cG,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring"),d(cr,"class","docstring"),d(qT,"id","transformers.AutoModelForCTC"),d(qT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qT,"href","#transformers.AutoModelForCTC"),d(Gd,"class","relative group"),d(mG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring"),d(hG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(uG,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),d(pG,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),d(_G,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),d(bG,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(FG,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(vG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(TG,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring"),d(mr,"class","docstring"),d(WT,"id","transformers.AutoModelForSpeechSeq2Seq"),d(WT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(WT,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Xd,"class","relative group"),d(MG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(EG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(CG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring"),d(wG,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(AG,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring"),d(fr,"class","docstring"),d(YT,"id","transformers.AutoModelForAudioXVector"),d(YT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(YT,"href","#transformers.AutoModelForAudioXVector"),d(Wd,"class","relative group"),d(yG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring"),d(kG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(SG,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(RG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(BG,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring"),d(gr,"class","docstring"),d(t1,"id","transformers.AutoModelForMaskedImageModeling"),d(t1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t1,"href","#transformers.AutoModelForMaskedImageModeling"),d(Jd,"class","relative group"),d(PG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($G,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring"),d(qG,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(NG,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(jG,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring"),d(hr,"class","docstring"),d(i1,"id","transformers.AutoModelForObjectDetection"),d(i1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(i1,"href","#transformers.AutoModelForObjectDetection"),d(ec,"class","relative group"),d(DG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring"),d(VG,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring"),d(ur,"class","docstring"),d(m1,"id","transformers.AutoModelForImageSegmentation"),d(m1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m1,"href","#transformers.AutoModelForImageSegmentation"),d(tc,"class","relative group"),d(XG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring"),d(WG,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring"),d(pr,"class","docstring"),d(h1,"id","transformers.AutoModelForSemanticSegmentation"),d(h1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h1,"href","#transformers.AutoModelForSemanticSegmentation"),d(sc,"class","relative group"),d(HG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring"),d(YG,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(KG,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(ZG,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring"),d(_r,"class","docstring"),d(F1,"id","transformers.AutoModelForInstanceSegmentation"),d(F1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(F1,"href","#transformers.AutoModelForInstanceSegmentation"),d(cc,"class","relative group"),d(eO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring"),d(tO,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring"),d(br,"class","docstring"),d(M1,"id","transformers.TFAutoModel"),d(M1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(M1,"href","#transformers.TFAutoModel"),d(gc,"class","relative group"),d(aO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring"),d(lO,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),d(iO,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),d(dO,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),d(cO,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(mO,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(fO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),d(gO,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),d(hO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),d(uO,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),d(pO,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),d(_O,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),d(bO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(FO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(vO,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(TO,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),d(MO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(EO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),d(CO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(wO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),d(AO,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),d(yO,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),d(LO,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(xO,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),d(kO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),d(SO,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),d(RO,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),d(BO,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),d(PO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d($O,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),d(IO,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),d(qO,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(NO,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),d(jO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),d(DO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),d(GO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),d(OO,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(VO,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),d(XO,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),d(zO,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(QO,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),d(WO,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(HO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(UO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),d(JO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(YO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(Fr,"class","docstring"),d(fM,"id","transformers.TFAutoModelForPreTraining"),d(fM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fM,"href","#transformers.TFAutoModelForPreTraining"),d(pc,"class","relative group"),d(KO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ZO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring"),d(oV,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(rV,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(tV,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),d(aV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(nV,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(sV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(lV,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(iV,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(dV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(cV,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(mV,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(fV,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(gV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(hV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(uV,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(pV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(_V,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(bV,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(FV,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(vV,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(TV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(MV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(EV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(uo,"class","docstring"),d(vr,"class","docstring"),d(IM,"id","transformers.TFAutoModelForCausalLM"),d(IM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(IM,"href","#transformers.TFAutoModelForCausalLM"),d(Fc,"class","relative group"),d(CV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(AV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring"),d(yV,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(LV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(xV,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(kV,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(SV,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(RV,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(BV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(PV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d($V,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(IV,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(qV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(NV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(Tr,"class","docstring"),d(UM,"id","transformers.TFAutoModelForImageClassification"),d(UM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(UM,"href","#transformers.TFAutoModelForImageClassification"),d(Mc,"class","relative group"),d(jV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(DV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(GV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring"),d(OV,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(VV,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),d(_o,"class","docstring"),d(Mr,"class","docstring"),d(KM,"id","transformers.TFAutoModelForMaskedLM"),d(KM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(KM,"href","#transformers.TFAutoModelForMaskedLM"),d(wc,"class","relative group"),d(XV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring"),d(WV,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(HV,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(UV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(JV,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(YV,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(KV,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(ZV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(eX,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(oX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(rX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(tX,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(aX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(nX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(sX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(lX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(iX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(dX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(cX,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(mX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(fX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Er,"class","docstring"),d(F4,"id","transformers.TFAutoModelForSeq2SeqLM"),d(F4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(F4,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Lc,"class","relative group"),d(gX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring"),d(pX,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(_X,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(bX,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(FX,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(vX,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(TX,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),d(MX,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(EX,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(CX,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(wX,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Fo,"class","docstring"),d(Cr,"class","docstring"),d(k4,"id","transformers.TFAutoModelForSequenceClassification"),d(k4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(k4,"href","#transformers.TFAutoModelForSequenceClassification"),d(Sc,"class","relative group"),d(AX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(LX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring"),d(xX,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(kX,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(SX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(RX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(BX,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(PX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d($X,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(IX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(qX,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(NX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(jX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(DX,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(GX,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(OX,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(VX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(XX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(zX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(QX,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(WX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(HX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(UX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(JX,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(YX,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(KX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(ZX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(ez,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(vo,"class","docstring"),d(wr,"class","docstring"),d(tE,"id","transformers.TFAutoModelForMultipleChoice"),d(tE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tE,"href","#transformers.TFAutoModelForMultipleChoice"),d(Pc,"class","relative group"),d(oz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring"),d(az,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(nz,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(sz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(lz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(iz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(dz,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(cz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(mz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(fz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(gz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(hz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(uz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(pz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(_z,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(bz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(Fz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(vz,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring"),d(Ar,"class","docstring"),d(TE,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(TE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(qc,"class","relative group"),d(Tz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Ez,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring"),d(Cz,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Mo,"class","docstring"),d(yr,"class","docstring"),d(EE,"id","transformers.TFAutoModelForTokenClassification"),d(EE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(EE,"href","#transformers.TFAutoModelForTokenClassification"),d(Dc,"class","relative group"),d(wz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Az,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring"),d(Lz,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(xz,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(kz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(Sz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(Rz,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(Bz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(Pz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d($z,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(Iz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(qz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(Nz,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(jz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(Dz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(Gz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(Oz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(Vz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(Xz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(zz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(Qz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(Wz,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Eo,"class","docstring"),d(Lr,"class","docstring"),d(XE,"id","transformers.TFAutoModelForQuestionAnswering"),d(XE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(XE,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Vc,"class","relative group"),d(Hz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Uz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Jz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring"),d(Yz,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(Kz,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(Zz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(eQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(oQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(rQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(tQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(aQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(nQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(sQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(lQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(iQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(dQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(cQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(mQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(fQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(gQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(hQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(uQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(pQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Co,"class","docstring"),d(xr,"class","docstring"),d(mC,"id","transformers.TFAutoModelForVision2Seq"),d(mC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mC,"href","#transformers.TFAutoModelForVision2Seq"),d(Qc,"class","relative group"),d(_Q,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring"),d(vQ,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(gC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(gC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Uc,"class","relative group"),d(TQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(EQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring"),d(CQ,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Ao,"class","docstring"),d(Sr,"class","docstring"),d(uC,"id","transformers.FlaxAutoModel"),d(uC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uC,"href","#transformers.FlaxAutoModel"),d(Kc,"class","relative group"),d(wQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(AQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring"),d(LQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),d(xQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),d(kQ,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),d(SQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),d(RQ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(BQ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(PQ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d($Q,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),d(IQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(qQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),d(NQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(jQ,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(DQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(GQ,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),d(OQ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),d(VQ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),d(XQ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(zQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(QQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(WQ,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),d(HQ,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(UQ,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),d(JQ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(YQ,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(KQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(yo,"class","docstring"),d(Rr,"class","docstring"),d(GC,"id","transformers.FlaxAutoModelForCausalLM"),d(GC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(GC,"href","#transformers.FlaxAutoModelForCausalLM"),d(om,"class","relative group"),d(ZQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(eW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(oW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring"),d(rW,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(tW,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(aW,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(nW,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(sW,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Br,"class","docstring"),d(WC,"id","transformers.FlaxAutoModelForPreTraining"),d(WC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(WC,"href","#transformers.FlaxAutoModelForPreTraining"),d(am,"class","relative group"),d(lW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(iW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring"),d(cW,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(mW,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(fW,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(gW,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(hW,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(uW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(pW,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(_W,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(bW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(FW,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(vW,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(TW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d(Pr,"class","docstring"),d(s5,"id","transformers.FlaxAutoModelForMaskedLM"),d(s5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(s5,"href","#transformers.FlaxAutoModelForMaskedLM"),d(lm,"class","relative group"),d(MW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(EW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(CW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring"),d(wW,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(AW,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(yW,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(LW,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(xW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(kW,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(SW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(RW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(BW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(PW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring"),d($r,"class","docstring"),d(_5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(_5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(cm,"class","relative group"),d($W,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(IW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring"),d(NW,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(jW,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(DW,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(GW,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(OW,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(VW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(XW,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(zW,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(QW,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(So,"class","docstring"),d(Ir,"class","docstring"),d(y5,"id","transformers.FlaxAutoModelForSequenceClassification"),d(y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y5,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(gm,"class","relative group"),d(WW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(HW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(UW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring"),d(JW,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(YW,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(KW,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(ZW,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(eH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(oH,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(rH,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(tH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(aH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(nH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(qr,"class","docstring"),d(N5,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(N5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(pm,"class","relative group"),d(sH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring"),d(dH,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(cH,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(mH,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(fH,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(gH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(hH,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(uH,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(pH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(_H,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(bH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Bo,"class","docstring"),d(Nr,"class","docstring"),d(U5,"id","transformers.FlaxAutoModelForTokenClassification"),d(U5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(U5,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Fm,"class","relative group"),d(FH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring"),d(MH,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(EH,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(CH,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(wH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(AH,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(yH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(LH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(xH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(jr,"class","docstring"),d(a3,"id","transformers.FlaxAutoModelForMultipleChoice"),d(a3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(a3,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Mm,"class","relative group"),d(kH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(SH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(RH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring"),d(BH,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(PH,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d($H,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(IH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(qH,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(NH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(jH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(DH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(Dr,"class","docstring"),d(g3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(g3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(g3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(wm,"class","relative group"),d(GH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(OH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(VH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring"),d(XH,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Gr,"class","docstring"),d(u3,"id","transformers.FlaxAutoModelForImageClassification"),d(u3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u3,"href","#transformers.FlaxAutoModelForImageClassification"),d(Lm,"class","relative group"),d(zH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(QH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(WH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring"),d(HH,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(UH,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(qo,"class","docstring"),d(Or,"class","docstring"),d(b3,"id","transformers.FlaxAutoModelForVision2Seq"),d(b3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(b3,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Sm,"class","relative group"),d(JH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(YH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(KH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring"),d(ZH,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring"),d(Vr,"class","docstring")},m(c,_){e(document.head,Z),b(c,io,_),b(c,de,_),e(de,Ce),e(Ce,lo),g(ge,lo,null),e(de,Me),e(de,Xo),e(Xo,Ii),b(c,Im,_),b(c,ma,_),e(ma,qi),e(ma,Ni),e(Ni,Fw),e(ma,qm),b(c,xe,_),b(c,co,_),e(co,ji),e(co,Gn),e(Gn,vw),e(co,On),e(co,Vn),e(Vn,Tw),e(co,Di),e(co,Xn),e(Xn,Mw),e(co,Gi),b(c,Nm,_),g(Da,c,_),b(c,mo,_),b(c,_e,_),e(_e,m9),e(_e,Oi),e(Oi,f9),e(_e,g9),b(c,zo,_),b(c,Ga,_),e(Ga,h9),e(Ga,jm),e(jm,u9),e(Ga,fIe),b(c,ZSe,_),b(c,Vi,_),e(Vi,Dm),e(Dm,WJ),g(Ew,WJ,null),e(Vi,gIe),e(Vi,HJ),e(HJ,hIe),b(c,eRe,_),b(c,zn,_),e(zn,uIe),e(zn,UJ),e(UJ,pIe),e(zn,_Ie),e(zn,JJ),e(JJ,bIe),e(zn,FIe),b(c,oRe,_),g(Cw,c,_),b(c,rRe,_),b(c,p9,_),e(p9,vIe),b(c,tRe,_),g(Gm,c,_),b(c,aRe,_),b(c,Xi,_),e(Xi,Om),e(Om,YJ),g(ww,YJ,null),e(Xi,TIe),e(Xi,KJ),e(KJ,MIe),b(c,nRe,_),b(c,Qo,_),g(Aw,Qo,null),e(Qo,EIe),e(Qo,yw),e(yw,CIe),e(yw,_9),e(_9,wIe),e(yw,AIe),e(Qo,yIe),e(Qo,Lw),e(Lw,LIe),e(Lw,ZJ),e(ZJ,xIe),e(Lw,kIe),e(Qo,SIe),e(Qo,fo),g(xw,fo,null),e(fo,RIe),e(fo,eY),e(eY,BIe),e(fo,PIe),e(fo,zi),e(zi,$Ie),e(zi,oY),e(oY,IIe),e(zi,qIe),e(zi,rY),e(rY,NIe),e(zi,jIe),e(fo,DIe),e(fo,F),e(F,Vm),e(Vm,tY),e(tY,GIe),e(Vm,OIe),e(Vm,b9),e(b9,VIe),e(Vm,XIe),e(F,zIe),e(F,Xm),e(Xm,aY),e(aY,QIe),e(Xm,WIe),e(Xm,F9),e(F9,HIe),e(Xm,UIe),e(F,JIe),e(F,zm),e(zm,nY),e(nY,YIe),e(zm,KIe),e(zm,v9),e(v9,ZIe),e(zm,eqe),e(F,oqe),e(F,Qm),e(Qm,sY),e(sY,rqe),e(Qm,tqe),e(Qm,T9),e(T9,aqe),e(Qm,nqe),e(F,sqe),e(F,Wm),e(Wm,lY),e(lY,lqe),e(Wm,iqe),e(Wm,M9),e(M9,dqe),e(Wm,cqe),e(F,mqe),e(F,Hm),e(Hm,iY),e(iY,fqe),e(Hm,gqe),e(Hm,E9),e(E9,hqe),e(Hm,uqe),e(F,pqe),e(F,Um),e(Um,dY),e(dY,_qe),e(Um,bqe),e(Um,C9),e(C9,Fqe),e(Um,vqe),e(F,Tqe),e(F,Jm),e(Jm,cY),e(cY,Mqe),e(Jm,Eqe),e(Jm,w9),e(w9,Cqe),e(Jm,wqe),e(F,Aqe),e(F,Ym),e(Ym,mY),e(mY,yqe),e(Ym,Lqe),e(Ym,A9),e(A9,xqe),e(Ym,kqe),e(F,Sqe),e(F,Km),e(Km,fY),e(fY,Rqe),e(Km,Bqe),e(Km,y9),e(y9,Pqe),e(Km,$qe),e(F,Iqe),e(F,Zm),e(Zm,gY),e(gY,qqe),e(Zm,Nqe),e(Zm,L9),e(L9,jqe),e(Zm,Dqe),e(F,Gqe),e(F,ef),e(ef,hY),e(hY,Oqe),e(ef,Vqe),e(ef,x9),e(x9,Xqe),e(ef,zqe),e(F,Qqe),e(F,of),e(of,uY),e(uY,Wqe),e(of,Hqe),e(of,k9),e(k9,Uqe),e(of,Jqe),e(F,Yqe),e(F,rf),e(rf,pY),e(pY,Kqe),e(rf,Zqe),e(rf,S9),e(S9,eNe),e(rf,oNe),e(F,rNe),e(F,tf),e(tf,_Y),e(_Y,tNe),e(tf,aNe),e(tf,R9),e(R9,nNe),e(tf,sNe),e(F,lNe),e(F,af),e(af,bY),e(bY,iNe),e(af,dNe),e(af,B9),e(B9,cNe),e(af,mNe),e(F,fNe),e(F,nf),e(nf,FY),e(FY,gNe),e(nf,hNe),e(nf,P9),e(P9,uNe),e(nf,pNe),e(F,_Ne),e(F,sf),e(sf,vY),e(vY,bNe),e(sf,FNe),e(sf,$9),e($9,vNe),e(sf,TNe),e(F,MNe),e(F,lf),e(lf,TY),e(TY,ENe),e(lf,CNe),e(lf,I9),e(I9,wNe),e(lf,ANe),e(F,yNe),e(F,df),e(df,MY),e(MY,LNe),e(df,xNe),e(df,q9),e(q9,kNe),e(df,SNe),e(F,RNe),e(F,cf),e(cf,EY),e(EY,BNe),e(cf,PNe),e(cf,N9),e(N9,$Ne),e(cf,INe),e(F,qNe),e(F,mf),e(mf,CY),e(CY,NNe),e(mf,jNe),e(mf,j9),e(j9,DNe),e(mf,GNe),e(F,ONe),e(F,ff),e(ff,wY),e(wY,VNe),e(ff,XNe),e(ff,D9),e(D9,zNe),e(ff,QNe),e(F,WNe),e(F,gf),e(gf,AY),e(AY,HNe),e(gf,UNe),e(gf,G9),e(G9,JNe),e(gf,YNe),e(F,KNe),e(F,hf),e(hf,yY),e(yY,ZNe),e(hf,eje),e(hf,O9),e(O9,oje),e(hf,rje),e(F,tje),e(F,uf),e(uf,LY),e(LY,aje),e(uf,nje),e(uf,V9),e(V9,sje),e(uf,lje),e(F,ije),e(F,pf),e(pf,xY),e(xY,dje),e(pf,cje),e(pf,X9),e(X9,mje),e(pf,fje),e(F,gje),e(F,_f),e(_f,kY),e(kY,hje),e(_f,uje),e(_f,z9),e(z9,pje),e(_f,_je),e(F,bje),e(F,bf),e(bf,SY),e(SY,Fje),e(bf,vje),e(bf,Q9),e(Q9,Tje),e(bf,Mje),e(F,Eje),e(F,Ff),e(Ff,RY),e(RY,Cje),e(Ff,wje),e(Ff,W9),e(W9,Aje),e(Ff,yje),e(F,Lje),e(F,vf),e(vf,BY),e(BY,xje),e(vf,kje),e(vf,H9),e(H9,Sje),e(vf,Rje),e(F,Bje),e(F,Tf),e(Tf,PY),e(PY,Pje),e(Tf,$je),e(Tf,U9),e(U9,Ije),e(Tf,qje),e(F,Nje),e(F,Mf),e(Mf,$Y),e($Y,jje),e(Mf,Dje),e(Mf,J9),e(J9,Gje),e(Mf,Oje),e(F,Vje),e(F,Ef),e(Ef,IY),e(IY,Xje),e(Ef,zje),e(Ef,Y9),e(Y9,Qje),e(Ef,Wje),e(F,Hje),e(F,Cf),e(Cf,qY),e(qY,Uje),e(Cf,Jje),e(Cf,K9),e(K9,Yje),e(Cf,Kje),e(F,Zje),e(F,wf),e(wf,NY),e(NY,eDe),e(wf,oDe),e(wf,Z9),e(Z9,rDe),e(wf,tDe),e(F,aDe),e(F,Af),e(Af,jY),e(jY,nDe),e(Af,sDe),e(Af,ex),e(ex,lDe),e(Af,iDe),e(F,dDe),e(F,yf),e(yf,DY),e(DY,cDe),e(yf,mDe),e(yf,ox),e(ox,fDe),e(yf,gDe),e(F,hDe),e(F,Lf),e(Lf,GY),e(GY,uDe),e(Lf,pDe),e(Lf,rx),e(rx,_De),e(Lf,bDe),e(F,FDe),e(F,xf),e(xf,OY),e(OY,vDe),e(xf,TDe),e(xf,tx),e(tx,MDe),e(xf,EDe),e(F,CDe),e(F,kf),e(kf,VY),e(VY,wDe),e(kf,ADe),e(kf,ax),e(ax,yDe),e(kf,LDe),e(F,xDe),e(F,Sf),e(Sf,XY),e(XY,kDe),e(Sf,SDe),e(Sf,nx),e(nx,RDe),e(Sf,BDe),e(F,PDe),e(F,Rf),e(Rf,zY),e(zY,$De),e(Rf,IDe),e(Rf,sx),e(sx,qDe),e(Rf,NDe),e(F,jDe),e(F,Bf),e(Bf,QY),e(QY,DDe),e(Bf,GDe),e(Bf,lx),e(lx,ODe),e(Bf,VDe),e(F,XDe),e(F,Pf),e(Pf,WY),e(WY,zDe),e(Pf,QDe),e(Pf,ix),e(ix,WDe),e(Pf,HDe),e(F,UDe),e(F,$f),e($f,HY),e(HY,JDe),e($f,YDe),e($f,dx),e(dx,KDe),e($f,ZDe),e(F,eGe),e(F,If),e(If,UY),e(UY,oGe),e(If,rGe),e(If,cx),e(cx,tGe),e(If,aGe),e(F,nGe),e(F,qf),e(qf,JY),e(JY,sGe),e(qf,lGe),e(qf,mx),e(mx,iGe),e(qf,dGe),e(F,cGe),e(F,Nf),e(Nf,YY),e(YY,mGe),e(Nf,fGe),e(Nf,fx),e(fx,gGe),e(Nf,hGe),e(F,uGe),e(F,jf),e(jf,KY),e(KY,pGe),e(jf,_Ge),e(jf,gx),e(gx,bGe),e(jf,FGe),e(F,vGe),e(F,Df),e(Df,ZY),e(ZY,TGe),e(Df,MGe),e(Df,hx),e(hx,EGe),e(Df,CGe),e(F,wGe),e(F,Gf),e(Gf,eK),e(eK,AGe),e(Gf,yGe),e(Gf,ux),e(ux,LGe),e(Gf,xGe),e(F,kGe),e(F,Of),e(Of,oK),e(oK,SGe),e(Of,RGe),e(Of,px),e(px,BGe),e(Of,PGe),e(F,$Ge),e(F,Vf),e(Vf,rK),e(rK,IGe),e(Vf,qGe),e(Vf,_x),e(_x,NGe),e(Vf,jGe),e(F,DGe),e(F,Xf),e(Xf,tK),e(tK,GGe),e(Xf,OGe),e(Xf,bx),e(bx,VGe),e(Xf,XGe),e(F,zGe),e(F,zf),e(zf,aK),e(aK,QGe),e(zf,WGe),e(zf,Fx),e(Fx,HGe),e(zf,UGe),e(F,JGe),e(F,Qf),e(Qf,nK),e(nK,YGe),e(Qf,KGe),e(Qf,vx),e(vx,ZGe),e(Qf,eOe),e(F,oOe),e(F,Wf),e(Wf,sK),e(sK,rOe),e(Wf,tOe),e(Wf,Tx),e(Tx,aOe),e(Wf,nOe),e(F,sOe),e(F,Hf),e(Hf,lK),e(lK,lOe),e(Hf,iOe),e(Hf,Mx),e(Mx,dOe),e(Hf,cOe),e(F,mOe),e(F,Uf),e(Uf,iK),e(iK,fOe),e(Uf,gOe),e(Uf,Ex),e(Ex,hOe),e(Uf,uOe),e(F,pOe),e(F,Jf),e(Jf,dK),e(dK,_Oe),e(Jf,bOe),e(Jf,Cx),e(Cx,FOe),e(Jf,vOe),e(F,TOe),e(F,Yf),e(Yf,cK),e(cK,MOe),e(Yf,EOe),e(Yf,wx),e(wx,COe),e(Yf,wOe),e(F,AOe),e(F,Kf),e(Kf,mK),e(mK,yOe),e(Kf,LOe),e(Kf,Ax),e(Ax,xOe),e(Kf,kOe),e(F,SOe),e(F,Zf),e(Zf,fK),e(fK,ROe),e(Zf,BOe),e(Zf,yx),e(yx,POe),e(Zf,$Oe),e(F,IOe),e(F,eg),e(eg,gK),e(gK,qOe),e(eg,NOe),e(eg,Lx),e(Lx,jOe),e(eg,DOe),e(F,GOe),e(F,og),e(og,hK),e(hK,OOe),e(og,VOe),e(og,xx),e(xx,XOe),e(og,zOe),e(F,QOe),e(F,rg),e(rg,uK),e(uK,WOe),e(rg,HOe),e(rg,kx),e(kx,UOe),e(rg,JOe),e(F,YOe),e(F,tg),e(tg,pK),e(pK,KOe),e(tg,ZOe),e(tg,Sx),e(Sx,eVe),e(tg,oVe),e(F,rVe),e(F,ag),e(ag,_K),e(_K,tVe),e(ag,aVe),e(ag,Rx),e(Rx,nVe),e(ag,sVe),e(F,lVe),e(F,ng),e(ng,bK),e(bK,iVe),e(ng,dVe),e(ng,Bx),e(Bx,cVe),e(ng,mVe),e(F,fVe),e(F,sg),e(sg,FK),e(FK,gVe),e(sg,hVe),e(sg,Px),e(Px,uVe),e(sg,pVe),e(F,_Ve),e(F,lg),e(lg,vK),e(vK,bVe),e(lg,FVe),e(lg,$x),e($x,vVe),e(lg,TVe),e(F,MVe),e(F,ig),e(ig,TK),e(TK,EVe),e(ig,CVe),e(ig,Ix),e(Ix,wVe),e(ig,AVe),e(F,yVe),e(F,dg),e(dg,MK),e(MK,LVe),e(dg,xVe),e(dg,qx),e(qx,kVe),e(dg,SVe),e(F,RVe),e(F,cg),e(cg,EK),e(EK,BVe),e(cg,PVe),e(cg,Nx),e(Nx,$Ve),e(cg,IVe),e(F,qVe),e(F,mg),e(mg,CK),e(CK,NVe),e(mg,jVe),e(mg,jx),e(jx,DVe),e(mg,GVe),e(F,OVe),e(F,fg),e(fg,wK),e(wK,VVe),e(fg,XVe),e(fg,Dx),e(Dx,zVe),e(fg,QVe),e(F,WVe),e(F,gg),e(gg,AK),e(AK,HVe),e(gg,UVe),e(gg,Gx),e(Gx,JVe),e(gg,YVe),e(F,KVe),e(F,hg),e(hg,yK),e(yK,ZVe),e(hg,eXe),e(hg,Ox),e(Ox,oXe),e(hg,rXe),e(F,tXe),e(F,ug),e(ug,LK),e(LK,aXe),e(ug,nXe),e(ug,Vx),e(Vx,sXe),e(ug,lXe),e(F,iXe),e(F,pg),e(pg,xK),e(xK,dXe),e(pg,cXe),e(pg,Xx),e(Xx,mXe),e(pg,fXe),e(F,gXe),e(F,_g),e(_g,kK),e(kK,hXe),e(_g,uXe),e(_g,zx),e(zx,pXe),e(_g,_Xe),e(F,bXe),e(F,bg),e(bg,SK),e(SK,FXe),e(bg,vXe),e(bg,Qx),e(Qx,TXe),e(bg,MXe),e(F,EXe),e(F,Fg),e(Fg,RK),e(RK,CXe),e(Fg,wXe),e(Fg,Wx),e(Wx,AXe),e(Fg,yXe),e(F,LXe),e(F,vg),e(vg,BK),e(BK,xXe),e(vg,kXe),e(vg,Hx),e(Hx,SXe),e(vg,RXe),e(F,BXe),e(F,Tg),e(Tg,PK),e(PK,PXe),e(Tg,$Xe),e(Tg,Ux),e(Ux,IXe),e(Tg,qXe),e(F,NXe),e(F,Mg),e(Mg,$K),e($K,jXe),e(Mg,DXe),e(Mg,Jx),e(Jx,GXe),e(Mg,OXe),e(F,VXe),e(F,Eg),e(Eg,IK),e(IK,XXe),e(Eg,zXe),e(Eg,Yx),e(Yx,QXe),e(Eg,WXe),e(F,HXe),e(F,Cg),e(Cg,qK),e(qK,UXe),e(Cg,JXe),e(Cg,Kx),e(Kx,YXe),e(Cg,KXe),e(F,ZXe),e(F,wg),e(wg,NK),e(NK,eze),e(wg,oze),e(wg,Zx),e(Zx,rze),e(wg,tze),e(F,aze),e(F,Ag),e(Ag,jK),e(jK,nze),e(Ag,sze),e(Ag,ek),e(ek,lze),e(Ag,ize),e(F,dze),e(F,yg),e(yg,DK),e(DK,cze),e(yg,mze),e(yg,ok),e(ok,fze),e(yg,gze),e(F,hze),e(F,Lg),e(Lg,GK),e(GK,uze),e(Lg,pze),e(Lg,rk),e(rk,_ze),e(Lg,bze),e(F,Fze),e(F,xg),e(xg,OK),e(OK,vze),e(xg,Tze),e(xg,tk),e(tk,Mze),e(xg,Eze),e(F,Cze),e(F,kg),e(kg,VK),e(VK,wze),e(kg,Aze),e(kg,ak),e(ak,yze),e(kg,Lze),e(F,xze),e(F,Sg),e(Sg,XK),e(XK,kze),e(Sg,Sze),e(Sg,nk),e(nk,Rze),e(Sg,Bze),e(F,Pze),e(F,Rg),e(Rg,zK),e(zK,$ze),e(Rg,Ize),e(Rg,sk),e(sk,qze),e(Rg,Nze),e(F,jze),e(F,Bg),e(Bg,QK),e(QK,Dze),e(Bg,Gze),e(Bg,lk),e(lk,Oze),e(Bg,Vze),e(F,Xze),e(F,Pg),e(Pg,WK),e(WK,zze),e(Pg,Qze),e(Pg,ik),e(ik,Wze),e(Pg,Hze),e(F,Uze),e(F,$g),e($g,HK),e(HK,Jze),e($g,Yze),e($g,dk),e(dk,Kze),e($g,Zze),e(fo,eQe),e(fo,UK),e(UK,oQe),e(fo,rQe),g(kw,fo,null),e(Qo,tQe),e(Qo,Ig),g(Sw,Ig,null),e(Ig,aQe),e(Ig,JK),e(JK,nQe),b(c,sRe,_),b(c,Qi,_),e(Qi,qg),e(qg,YK),g(Rw,YK,null),e(Qi,sQe),e(Qi,KK),e(KK,lQe),b(c,lRe,_),b(c,Wo,_),g(Bw,Wo,null),e(Wo,iQe),e(Wo,Pw),e(Pw,dQe),e(Pw,ck),e(ck,cQe),e(Pw,mQe),e(Wo,fQe),e(Wo,$w),e($w,gQe),e($w,ZK),e(ZK,hQe),e($w,uQe),e(Wo,pQe),e(Wo,go),g(Iw,go,null),e(go,_Qe),e(go,eZ),e(eZ,bQe),e(go,FQe),e(go,Oa),e(Oa,vQe),e(Oa,oZ),e(oZ,TQe),e(Oa,MQe),e(Oa,rZ),e(rZ,EQe),e(Oa,CQe),e(Oa,tZ),e(tZ,wQe),e(Oa,AQe),e(go,yQe),e(go,C),e(C,Qn),e(Qn,aZ),e(aZ,LQe),e(Qn,xQe),e(Qn,mk),e(mk,kQe),e(Qn,SQe),e(Qn,fk),e(fk,RQe),e(Qn,BQe),e(C,PQe),e(C,Wn),e(Wn,nZ),e(nZ,$Qe),e(Wn,IQe),e(Wn,gk),e(gk,qQe),e(Wn,NQe),e(Wn,hk),e(hk,jQe),e(Wn,DQe),e(C,GQe),e(C,Hn),e(Hn,sZ),e(sZ,OQe),e(Hn,VQe),e(Hn,uk),e(uk,XQe),e(Hn,zQe),e(Hn,pk),e(pk,QQe),e(Hn,WQe),e(C,HQe),e(C,Ng),e(Ng,lZ),e(lZ,UQe),e(Ng,JQe),e(Ng,_k),e(_k,YQe),e(Ng,KQe),e(C,ZQe),e(C,Un),e(Un,iZ),e(iZ,eWe),e(Un,oWe),e(Un,bk),e(bk,rWe),e(Un,tWe),e(Un,Fk),e(Fk,aWe),e(Un,nWe),e(C,sWe),e(C,jg),e(jg,dZ),e(dZ,lWe),e(jg,iWe),e(jg,vk),e(vk,dWe),e(jg,cWe),e(C,mWe),e(C,Dg),e(Dg,cZ),e(cZ,fWe),e(Dg,gWe),e(Dg,Tk),e(Tk,hWe),e(Dg,uWe),e(C,pWe),e(C,Gg),e(Gg,mZ),e(mZ,_We),e(Gg,bWe),e(Gg,Mk),e(Mk,FWe),e(Gg,vWe),e(C,TWe),e(C,Jn),e(Jn,fZ),e(fZ,MWe),e(Jn,EWe),e(Jn,Ek),e(Ek,CWe),e(Jn,wWe),e(Jn,Ck),e(Ck,AWe),e(Jn,yWe),e(C,LWe),e(C,Yn),e(Yn,gZ),e(gZ,xWe),e(Yn,kWe),e(Yn,wk),e(wk,SWe),e(Yn,RWe),e(Yn,Ak),e(Ak,BWe),e(Yn,PWe),e(C,$We),e(C,Kn),e(Kn,hZ),e(hZ,IWe),e(Kn,qWe),e(Kn,yk),e(yk,NWe),e(Kn,jWe),e(Kn,Lk),e(Lk,DWe),e(Kn,GWe),e(C,OWe),e(C,Og),e(Og,uZ),e(uZ,VWe),e(Og,XWe),e(Og,xk),e(xk,zWe),e(Og,QWe),e(C,WWe),e(C,Vg),e(Vg,pZ),e(pZ,HWe),e(Vg,UWe),e(Vg,kk),e(kk,JWe),e(Vg,YWe),e(C,KWe),e(C,Zn),e(Zn,_Z),e(_Z,ZWe),e(Zn,eHe),e(Zn,Sk),e(Sk,oHe),e(Zn,rHe),e(Zn,Rk),e(Rk,tHe),e(Zn,aHe),e(C,nHe),e(C,Xg),e(Xg,bZ),e(bZ,sHe),e(Xg,lHe),e(Xg,Bk),e(Bk,iHe),e(Xg,dHe),e(C,cHe),e(C,es),e(es,FZ),e(FZ,mHe),e(es,fHe),e(es,Pk),e(Pk,gHe),e(es,hHe),e(es,$k),e($k,uHe),e(es,pHe),e(C,_He),e(C,os),e(os,vZ),e(vZ,bHe),e(os,FHe),e(os,Ik),e(Ik,vHe),e(os,THe),e(os,qk),e(qk,MHe),e(os,EHe),e(C,CHe),e(C,rs),e(rs,TZ),e(TZ,wHe),e(rs,AHe),e(rs,Nk),e(Nk,yHe),e(rs,LHe),e(rs,MZ),e(MZ,xHe),e(rs,kHe),e(C,SHe),e(C,zg),e(zg,EZ),e(EZ,RHe),e(zg,BHe),e(zg,jk),e(jk,PHe),e(zg,$He),e(C,IHe),e(C,ts),e(ts,CZ),e(CZ,qHe),e(ts,NHe),e(ts,Dk),e(Dk,jHe),e(ts,DHe),e(ts,Gk),e(Gk,GHe),e(ts,OHe),e(C,VHe),e(C,Qg),e(Qg,wZ),e(wZ,XHe),e(Qg,zHe),e(Qg,Ok),e(Ok,QHe),e(Qg,WHe),e(C,HHe),e(C,as),e(as,AZ),e(AZ,UHe),e(as,JHe),e(as,Vk),e(Vk,YHe),e(as,KHe),e(as,Xk),e(Xk,ZHe),e(as,eUe),e(C,oUe),e(C,ns),e(ns,yZ),e(yZ,rUe),e(ns,tUe),e(ns,zk),e(zk,aUe),e(ns,nUe),e(ns,Qk),e(Qk,sUe),e(ns,lUe),e(C,iUe),e(C,ss),e(ss,LZ),e(LZ,dUe),e(ss,cUe),e(ss,Wk),e(Wk,mUe),e(ss,fUe),e(ss,Hk),e(Hk,gUe),e(ss,hUe),e(C,uUe),e(C,Wg),e(Wg,xZ),e(xZ,pUe),e(Wg,_Ue),e(Wg,Uk),e(Uk,bUe),e(Wg,FUe),e(C,vUe),e(C,ls),e(ls,kZ),e(kZ,TUe),e(ls,MUe),e(ls,Jk),e(Jk,EUe),e(ls,CUe),e(ls,Yk),e(Yk,wUe),e(ls,AUe),e(C,yUe),e(C,Hg),e(Hg,SZ),e(SZ,LUe),e(Hg,xUe),e(Hg,Kk),e(Kk,kUe),e(Hg,SUe),e(C,RUe),e(C,is),e(is,RZ),e(RZ,BUe),e(is,PUe),e(is,Zk),e(Zk,$Ue),e(is,IUe),e(is,eS),e(eS,qUe),e(is,NUe),e(C,jUe),e(C,ds),e(ds,BZ),e(BZ,DUe),e(ds,GUe),e(ds,oS),e(oS,OUe),e(ds,VUe),e(ds,rS),e(rS,XUe),e(ds,zUe),e(C,QUe),e(C,cs),e(cs,PZ),e(PZ,WUe),e(cs,HUe),e(cs,tS),e(tS,UUe),e(cs,JUe),e(cs,aS),e(aS,YUe),e(cs,KUe),e(C,ZUe),e(C,ms),e(ms,$Z),e($Z,eJe),e(ms,oJe),e(ms,nS),e(nS,rJe),e(ms,tJe),e(ms,sS),e(sS,aJe),e(ms,nJe),e(C,sJe),e(C,Ug),e(Ug,IZ),e(IZ,lJe),e(Ug,iJe),e(Ug,lS),e(lS,dJe),e(Ug,cJe),e(C,mJe),e(C,fs),e(fs,qZ),e(qZ,fJe),e(fs,gJe),e(fs,iS),e(iS,hJe),e(fs,uJe),e(fs,dS),e(dS,pJe),e(fs,_Je),e(C,bJe),e(C,gs),e(gs,NZ),e(NZ,FJe),e(gs,vJe),e(gs,cS),e(cS,TJe),e(gs,MJe),e(gs,mS),e(mS,EJe),e(gs,CJe),e(C,wJe),e(C,hs),e(hs,jZ),e(jZ,AJe),e(hs,yJe),e(hs,fS),e(fS,LJe),e(hs,xJe),e(hs,gS),e(gS,kJe),e(hs,SJe),e(C,RJe),e(C,us),e(us,DZ),e(DZ,BJe),e(us,PJe),e(us,hS),e(hS,$Je),e(us,IJe),e(us,uS),e(uS,qJe),e(us,NJe),e(C,jJe),e(C,ps),e(ps,GZ),e(GZ,DJe),e(ps,GJe),e(ps,pS),e(pS,OJe),e(ps,VJe),e(ps,_S),e(_S,XJe),e(ps,zJe),e(C,QJe),e(C,_s),e(_s,OZ),e(OZ,WJe),e(_s,HJe),e(_s,bS),e(bS,UJe),e(_s,JJe),e(_s,FS),e(FS,YJe),e(_s,KJe),e(C,ZJe),e(C,Jg),e(Jg,VZ),e(VZ,eYe),e(Jg,oYe),e(Jg,vS),e(vS,rYe),e(Jg,tYe),e(C,aYe),e(C,bs),e(bs,XZ),e(XZ,nYe),e(bs,sYe),e(bs,TS),e(TS,lYe),e(bs,iYe),e(bs,MS),e(MS,dYe),e(bs,cYe),e(C,mYe),e(C,Yg),e(Yg,zZ),e(zZ,fYe),e(Yg,gYe),e(Yg,ES),e(ES,hYe),e(Yg,uYe),e(C,pYe),e(C,Kg),e(Kg,QZ),e(QZ,_Ye),e(Kg,bYe),e(Kg,CS),e(CS,FYe),e(Kg,vYe),e(C,TYe),e(C,Fs),e(Fs,WZ),e(WZ,MYe),e(Fs,EYe),e(Fs,wS),e(wS,CYe),e(Fs,wYe),e(Fs,AS),e(AS,AYe),e(Fs,yYe),e(C,LYe),e(C,vs),e(vs,HZ),e(HZ,xYe),e(vs,kYe),e(vs,yS),e(yS,SYe),e(vs,RYe),e(vs,LS),e(LS,BYe),e(vs,PYe),e(C,$Ye),e(C,Zg),e(Zg,UZ),e(UZ,IYe),e(Zg,qYe),e(Zg,xS),e(xS,NYe),e(Zg,jYe),e(C,DYe),e(C,Ts),e(Ts,JZ),e(JZ,GYe),e(Ts,OYe),e(Ts,kS),e(kS,VYe),e(Ts,XYe),e(Ts,SS),e(SS,zYe),e(Ts,QYe),e(C,WYe),e(C,Ms),e(Ms,YZ),e(YZ,HYe),e(Ms,UYe),e(Ms,RS),e(RS,JYe),e(Ms,YYe),e(Ms,BS),e(BS,KYe),e(Ms,ZYe),e(C,eKe),e(C,Es),e(Es,KZ),e(KZ,oKe),e(Es,rKe),e(Es,PS),e(PS,tKe),e(Es,aKe),e(Es,$S),e($S,nKe),e(Es,sKe),e(C,lKe),e(C,Cs),e(Cs,ZZ),e(ZZ,iKe),e(Cs,dKe),e(Cs,IS),e(IS,cKe),e(Cs,mKe),e(Cs,qS),e(qS,fKe),e(Cs,gKe),e(C,hKe),e(C,ws),e(ws,eee),e(eee,uKe),e(ws,pKe),e(ws,NS),e(NS,_Ke),e(ws,bKe),e(ws,jS),e(jS,FKe),e(ws,vKe),e(C,TKe),e(C,eh),e(eh,oee),e(oee,MKe),e(eh,EKe),e(eh,DS),e(DS,CKe),e(eh,wKe),e(C,AKe),e(C,oh),e(oh,ree),e(ree,yKe),e(oh,LKe),e(oh,GS),e(GS,xKe),e(oh,kKe),e(C,SKe),e(C,rh),e(rh,tee),e(tee,RKe),e(rh,BKe),e(rh,OS),e(OS,PKe),e(rh,$Ke),e(C,IKe),e(C,th),e(th,aee),e(aee,qKe),e(th,NKe),e(th,VS),e(VS,jKe),e(th,DKe),e(C,GKe),e(C,As),e(As,nee),e(nee,OKe),e(As,VKe),e(As,XS),e(XS,XKe),e(As,zKe),e(As,zS),e(zS,QKe),e(As,WKe),e(C,HKe),e(C,ah),e(ah,see),e(see,UKe),e(ah,JKe),e(ah,QS),e(QS,YKe),e(ah,KKe),e(C,ZKe),e(C,ys),e(ys,lee),e(lee,eZe),e(ys,oZe),e(ys,WS),e(WS,rZe),e(ys,tZe),e(ys,HS),e(HS,aZe),e(ys,nZe),e(C,sZe),e(C,Ls),e(Ls,iee),e(iee,lZe),e(Ls,iZe),e(Ls,US),e(US,dZe),e(Ls,cZe),e(Ls,JS),e(JS,mZe),e(Ls,fZe),e(C,gZe),e(C,xs),e(xs,dee),e(dee,hZe),e(xs,uZe),e(xs,YS),e(YS,pZe),e(xs,_Ze),e(xs,KS),e(KS,bZe),e(xs,FZe),e(C,vZe),e(C,ks),e(ks,cee),e(cee,TZe),e(ks,MZe),e(ks,ZS),e(ZS,EZe),e(ks,CZe),e(ks,eR),e(eR,wZe),e(ks,AZe),e(C,yZe),e(C,Ss),e(Ss,mee),e(mee,LZe),e(Ss,xZe),e(Ss,oR),e(oR,kZe),e(Ss,SZe),e(Ss,rR),e(rR,RZe),e(Ss,BZe),e(C,PZe),e(C,Rs),e(Rs,fee),e(fee,$Ze),e(Rs,IZe),e(Rs,tR),e(tR,qZe),e(Rs,NZe),e(Rs,aR),e(aR,jZe),e(Rs,DZe),e(C,GZe),e(C,nh),e(nh,gee),e(gee,OZe),e(nh,VZe),e(nh,nR),e(nR,XZe),e(nh,zZe),e(C,QZe),e(C,sh),e(sh,hee),e(hee,WZe),e(sh,HZe),e(sh,sR),e(sR,UZe),e(sh,JZe),e(C,YZe),e(C,Bs),e(Bs,uee),e(uee,KZe),e(Bs,ZZe),e(Bs,lR),e(lR,eeo),e(Bs,oeo),e(Bs,iR),e(iR,reo),e(Bs,teo),e(C,aeo),e(C,Ps),e(Ps,pee),e(pee,neo),e(Ps,seo),e(Ps,dR),e(dR,leo),e(Ps,ieo),e(Ps,cR),e(cR,deo),e(Ps,ceo),e(C,meo),e(C,$s),e($s,_ee),e(_ee,feo),e($s,geo),e($s,mR),e(mR,heo),e($s,ueo),e($s,fR),e(fR,peo),e($s,_eo),e(C,beo),e(C,lh),e(lh,bee),e(bee,Feo),e(lh,veo),e(lh,gR),e(gR,Teo),e(lh,Meo),e(C,Eeo),e(C,ih),e(ih,Fee),e(Fee,Ceo),e(ih,weo),e(ih,hR),e(hR,Aeo),e(ih,yeo),e(C,Leo),e(C,dh),e(dh,vee),e(vee,xeo),e(dh,keo),e(dh,uR),e(uR,Seo),e(dh,Reo),e(C,Beo),e(C,ch),e(ch,Tee),e(Tee,Peo),e(ch,$eo),e(ch,pR),e(pR,Ieo),e(ch,qeo),e(C,Neo),e(C,Is),e(Is,Mee),e(Mee,jeo),e(Is,Deo),e(Is,_R),e(_R,Geo),e(Is,Oeo),e(Is,bR),e(bR,Veo),e(Is,Xeo),e(C,zeo),e(C,mh),e(mh,Eee),e(Eee,Qeo),e(mh,Weo),e(mh,FR),e(FR,Heo),e(mh,Ueo),e(C,Jeo),e(C,fh),e(fh,Cee),e(Cee,Yeo),e(fh,Keo),e(fh,vR),e(vR,Zeo),e(fh,eoo),e(C,ooo),e(C,qs),e(qs,wee),e(wee,roo),e(qs,too),e(qs,TR),e(TR,aoo),e(qs,noo),e(qs,MR),e(MR,soo),e(qs,loo),e(C,ioo),e(C,Ns),e(Ns,Aee),e(Aee,doo),e(Ns,coo),e(Ns,ER),e(ER,moo),e(Ns,foo),e(Ns,CR),e(CR,goo),e(Ns,hoo),e(go,uoo),e(go,yee),e(yee,poo),e(go,_oo),g(qw,go,null),e(Wo,boo),e(Wo,gh),g(Nw,gh,null),e(gh,Foo),e(gh,Lee),e(Lee,voo),b(c,iRe,_),b(c,Wi,_),e(Wi,hh),e(hh,xee),g(jw,xee,null),e(Wi,Too),e(Wi,kee),e(kee,Moo),b(c,dRe,_),b(c,Ho,_),g(Dw,Ho,null),e(Ho,Eoo),e(Ho,Gw),e(Gw,Coo),e(Gw,wR),e(wR,woo),e(Gw,Aoo),e(Ho,yoo),e(Ho,Ow),e(Ow,Loo),e(Ow,See),e(See,xoo),e(Ow,koo),e(Ho,Soo),e(Ho,$e),g(Vw,$e,null),e($e,Roo),e($e,Ree),e(Ree,Boo),e($e,Poo),e($e,Va),e(Va,$oo),e(Va,Bee),e(Bee,Ioo),e(Va,qoo),e(Va,Pee),e(Pee,Noo),e(Va,joo),e(Va,$ee),e($ee,Doo),e(Va,Goo),e($e,Ooo),e($e,ee),e(ee,uh),e(uh,Iee),e(Iee,Voo),e(uh,Xoo),e(uh,AR),e(AR,zoo),e(uh,Qoo),e(ee,Woo),e(ee,ph),e(ph,qee),e(qee,Hoo),e(ph,Uoo),e(ph,yR),e(yR,Joo),e(ph,Yoo),e(ee,Koo),e(ee,_h),e(_h,Nee),e(Nee,Zoo),e(_h,ero),e(_h,LR),e(LR,oro),e(_h,rro),e(ee,tro),e(ee,bh),e(bh,jee),e(jee,aro),e(bh,nro),e(bh,xR),e(xR,sro),e(bh,lro),e(ee,iro),e(ee,Fh),e(Fh,Dee),e(Dee,dro),e(Fh,cro),e(Fh,kR),e(kR,mro),e(Fh,fro),e(ee,gro),e(ee,vh),e(vh,Gee),e(Gee,hro),e(vh,uro),e(vh,SR),e(SR,pro),e(vh,_ro),e(ee,bro),e(ee,Th),e(Th,Oee),e(Oee,Fro),e(Th,vro),e(Th,RR),e(RR,Tro),e(Th,Mro),e(ee,Ero),e(ee,Mh),e(Mh,Vee),e(Vee,Cro),e(Mh,wro),e(Mh,BR),e(BR,Aro),e(Mh,yro),e(ee,Lro),e(ee,Eh),e(Eh,Xee),e(Xee,xro),e(Eh,kro),e(Eh,PR),e(PR,Sro),e(Eh,Rro),e(ee,Bro),e(ee,Ch),e(Ch,zee),e(zee,Pro),e(Ch,$ro),e(Ch,$R),e($R,Iro),e(Ch,qro),e(ee,Nro),e(ee,wh),e(wh,Qee),e(Qee,jro),e(wh,Dro),e(wh,IR),e(IR,Gro),e(wh,Oro),e(ee,Vro),e(ee,Ah),e(Ah,Wee),e(Wee,Xro),e(Ah,zro),e(Ah,qR),e(qR,Qro),e(Ah,Wro),e(ee,Hro),e(ee,yh),e(yh,Hee),e(Hee,Uro),e(yh,Jro),e(yh,NR),e(NR,Yro),e(yh,Kro),e(ee,Zro),e(ee,Lh),e(Lh,Uee),e(Uee,eto),e(Lh,oto),e(Lh,jR),e(jR,rto),e(Lh,tto),e(ee,ato),e(ee,xh),e(xh,Jee),e(Jee,nto),e(xh,sto),e(xh,DR),e(DR,lto),e(xh,ito),e(ee,dto),e(ee,kh),e(kh,Yee),e(Yee,cto),e(kh,mto),e(kh,GR),e(GR,fto),e(kh,gto),e(ee,hto),e(ee,Sh),e(Sh,Kee),e(Kee,uto),e(Sh,pto),e(Sh,OR),e(OR,_to),e(Sh,bto),e(ee,Fto),e(ee,Rh),e(Rh,Zee),e(Zee,vto),e(Rh,Tto),e(Rh,VR),e(VR,Mto),e(Rh,Eto),e(ee,Cto),e(ee,Bh),e(Bh,eoe),e(eoe,wto),e(Bh,Ato),e(Bh,XR),e(XR,yto),e(Bh,Lto),e($e,xto),g(Ph,$e,null),e($e,kto),e($e,ooe),e(ooe,Sto),e($e,Rto),g(Xw,$e,null),e(Ho,Bto),e(Ho,$h),g(zw,$h,null),e($h,Pto),e($h,roe),e(roe,$to),b(c,cRe,_),b(c,Hi,_),e(Hi,Ih),e(Ih,toe),g(Qw,toe,null),e(Hi,Ito),e(Hi,aoe),e(aoe,qto),b(c,mRe,_),b(c,Uo,_),g(Ww,Uo,null),e(Uo,Nto),e(Uo,Hw),e(Hw,jto),e(Hw,zR),e(zR,Dto),e(Hw,Gto),e(Uo,Oto),e(Uo,Uw),e(Uw,Vto),e(Uw,noe),e(noe,Xto),e(Uw,zto),e(Uo,Qto),e(Uo,Ie),g(Jw,Ie,null),e(Ie,Wto),e(Ie,soe),e(soe,Hto),e(Ie,Uto),e(Ie,Ui),e(Ui,Jto),e(Ui,loe),e(loe,Yto),e(Ui,Kto),e(Ui,ioe),e(ioe,Zto),e(Ui,eao),e(Ie,oao),e(Ie,ke),e(ke,qh),e(qh,doe),e(doe,rao),e(qh,tao),e(qh,QR),e(QR,aao),e(qh,nao),e(ke,sao),e(ke,Nh),e(Nh,coe),e(coe,lao),e(Nh,iao),e(Nh,WR),e(WR,dao),e(Nh,cao),e(ke,mao),e(ke,jh),e(jh,moe),e(moe,fao),e(jh,gao),e(jh,HR),e(HR,hao),e(jh,uao),e(ke,pao),e(ke,Dh),e(Dh,foe),e(foe,_ao),e(Dh,bao),e(Dh,UR),e(UR,Fao),e(Dh,vao),e(ke,Tao),e(ke,Gh),e(Gh,goe),e(goe,Mao),e(Gh,Eao),e(Gh,JR),e(JR,Cao),e(Gh,wao),e(ke,Aao),e(ke,Oh),e(Oh,hoe),e(hoe,yao),e(Oh,Lao),e(Oh,YR),e(YR,xao),e(Oh,kao),e(ke,Sao),e(ke,Vh),e(Vh,uoe),e(uoe,Rao),e(Vh,Bao),e(Vh,KR),e(KR,Pao),e(Vh,$ao),e(ke,Iao),e(ke,Xh),e(Xh,poe),e(poe,qao),e(Xh,Nao),e(Xh,ZR),e(ZR,jao),e(Xh,Dao),e(Ie,Gao),g(zh,Ie,null),e(Ie,Oao),e(Ie,_oe),e(_oe,Vao),e(Ie,Xao),g(Yw,Ie,null),e(Uo,zao),e(Uo,Qh),g(Kw,Qh,null),e(Qh,Qao),e(Qh,boe),e(boe,Wao),b(c,fRe,_),b(c,Ji,_),e(Ji,Wh),e(Wh,Foe),g(Zw,Foe,null),e(Ji,Hao),e(Ji,voe),e(voe,Uao),b(c,gRe,_),b(c,Jo,_),g(eA,Jo,null),e(Jo,Jao),e(Jo,Yi),e(Yi,Yao),e(Yi,eB),e(eB,Kao),e(Yi,Zao),e(Yi,oB),e(oB,eno),e(Yi,ono),e(Jo,rno),e(Jo,oA),e(oA,tno),e(oA,Toe),e(Toe,ano),e(oA,nno),e(Jo,sno),e(Jo,Xr),g(rA,Xr,null),e(Xr,lno),e(Xr,Moe),e(Moe,ino),e(Xr,dno),e(Xr,Ki),e(Ki,cno),e(Ki,Eoe),e(Eoe,mno),e(Ki,fno),e(Ki,rB),e(rB,gno),e(Ki,hno),e(Xr,uno),e(Xr,Coe),e(Coe,pno),e(Xr,_no),g(tA,Xr,null),e(Jo,bno),e(Jo,qe),g(aA,qe,null),e(qe,Fno),e(qe,woe),e(woe,vno),e(qe,Tno),e(qe,Xa),e(Xa,Mno),e(Xa,Aoe),e(Aoe,Eno),e(Xa,Cno),e(Xa,yoe),e(yoe,wno),e(Xa,Ano),e(Xa,Loe),e(Loe,yno),e(Xa,Lno),e(qe,xno),e(qe,T),e(T,Hh),e(Hh,xoe),e(xoe,kno),e(Hh,Sno),e(Hh,tB),e(tB,Rno),e(Hh,Bno),e(T,Pno),e(T,Uh),e(Uh,koe),e(koe,$no),e(Uh,Ino),e(Uh,aB),e(aB,qno),e(Uh,Nno),e(T,jno),e(T,Jh),e(Jh,Soe),e(Soe,Dno),e(Jh,Gno),e(Jh,nB),e(nB,Ono),e(Jh,Vno),e(T,Xno),e(T,Yh),e(Yh,Roe),e(Roe,zno),e(Yh,Qno),e(Yh,sB),e(sB,Wno),e(Yh,Hno),e(T,Uno),e(T,Kh),e(Kh,Boe),e(Boe,Jno),e(Kh,Yno),e(Kh,lB),e(lB,Kno),e(Kh,Zno),e(T,eso),e(T,Zh),e(Zh,Poe),e(Poe,oso),e(Zh,rso),e(Zh,iB),e(iB,tso),e(Zh,aso),e(T,nso),e(T,eu),e(eu,$oe),e($oe,sso),e(eu,lso),e(eu,dB),e(dB,iso),e(eu,dso),e(T,cso),e(T,ou),e(ou,Ioe),e(Ioe,mso),e(ou,fso),e(ou,cB),e(cB,gso),e(ou,hso),e(T,uso),e(T,ru),e(ru,qoe),e(qoe,pso),e(ru,_so),e(ru,mB),e(mB,bso),e(ru,Fso),e(T,vso),e(T,tu),e(tu,Noe),e(Noe,Tso),e(tu,Mso),e(tu,fB),e(fB,Eso),e(tu,Cso),e(T,wso),e(T,au),e(au,joe),e(joe,Aso),e(au,yso),e(au,gB),e(gB,Lso),e(au,xso),e(T,kso),e(T,nu),e(nu,Doe),e(Doe,Sso),e(nu,Rso),e(nu,hB),e(hB,Bso),e(nu,Pso),e(T,$so),e(T,su),e(su,Goe),e(Goe,Iso),e(su,qso),e(su,uB),e(uB,Nso),e(su,jso),e(T,Dso),e(T,lu),e(lu,Ooe),e(Ooe,Gso),e(lu,Oso),e(lu,pB),e(pB,Vso),e(lu,Xso),e(T,zso),e(T,iu),e(iu,Voe),e(Voe,Qso),e(iu,Wso),e(iu,_B),e(_B,Hso),e(iu,Uso),e(T,Jso),e(T,du),e(du,Xoe),e(Xoe,Yso),e(du,Kso),e(du,bB),e(bB,Zso),e(du,elo),e(T,olo),e(T,cu),e(cu,zoe),e(zoe,rlo),e(cu,tlo),e(cu,FB),e(FB,alo),e(cu,nlo),e(T,slo),e(T,mu),e(mu,Qoe),e(Qoe,llo),e(mu,ilo),e(mu,vB),e(vB,dlo),e(mu,clo),e(T,mlo),e(T,fu),e(fu,Woe),e(Woe,flo),e(fu,glo),e(fu,TB),e(TB,hlo),e(fu,ulo),e(T,plo),e(T,gu),e(gu,Hoe),e(Hoe,_lo),e(gu,blo),e(gu,MB),e(MB,Flo),e(gu,vlo),e(T,Tlo),e(T,hu),e(hu,Uoe),e(Uoe,Mlo),e(hu,Elo),e(hu,EB),e(EB,Clo),e(hu,wlo),e(T,Alo),e(T,uu),e(uu,Joe),e(Joe,ylo),e(uu,Llo),e(uu,CB),e(CB,xlo),e(uu,klo),e(T,Slo),e(T,pu),e(pu,Yoe),e(Yoe,Rlo),e(pu,Blo),e(pu,wB),e(wB,Plo),e(pu,$lo),e(T,Ilo),e(T,_u),e(_u,Koe),e(Koe,qlo),e(_u,Nlo),e(_u,AB),e(AB,jlo),e(_u,Dlo),e(T,Glo),e(T,bu),e(bu,Zoe),e(Zoe,Olo),e(bu,Vlo),e(bu,yB),e(yB,Xlo),e(bu,zlo),e(T,Qlo),e(T,Fu),e(Fu,ere),e(ere,Wlo),e(Fu,Hlo),e(Fu,LB),e(LB,Ulo),e(Fu,Jlo),e(T,Ylo),e(T,vu),e(vu,ore),e(ore,Klo),e(vu,Zlo),e(vu,xB),e(xB,eio),e(vu,oio),e(T,rio),e(T,Tu),e(Tu,rre),e(rre,tio),e(Tu,aio),e(Tu,kB),e(kB,nio),e(Tu,sio),e(T,lio),e(T,Mu),e(Mu,tre),e(tre,iio),e(Mu,dio),e(Mu,SB),e(SB,cio),e(Mu,mio),e(T,fio),e(T,js),e(js,are),e(are,gio),e(js,hio),e(js,RB),e(RB,uio),e(js,pio),e(js,BB),e(BB,_io),e(js,bio),e(T,Fio),e(T,Eu),e(Eu,nre),e(nre,vio),e(Eu,Tio),e(Eu,PB),e(PB,Mio),e(Eu,Eio),e(T,Cio),e(T,Cu),e(Cu,sre),e(sre,wio),e(Cu,Aio),e(Cu,$B),e($B,yio),e(Cu,Lio),e(T,xio),e(T,wu),e(wu,lre),e(lre,kio),e(wu,Sio),e(wu,IB),e(IB,Rio),e(wu,Bio),e(T,Pio),e(T,Au),e(Au,ire),e(ire,$io),e(Au,Iio),e(Au,qB),e(qB,qio),e(Au,Nio),e(T,jio),e(T,yu),e(yu,dre),e(dre,Dio),e(yu,Gio),e(yu,NB),e(NB,Oio),e(yu,Vio),e(T,Xio),e(T,Lu),e(Lu,cre),e(cre,zio),e(Lu,Qio),e(Lu,jB),e(jB,Wio),e(Lu,Hio),e(T,Uio),e(T,xu),e(xu,mre),e(mre,Jio),e(xu,Yio),e(xu,DB),e(DB,Kio),e(xu,Zio),e(T,edo),e(T,ku),e(ku,fre),e(fre,odo),e(ku,rdo),e(ku,GB),e(GB,tdo),e(ku,ado),e(T,ndo),e(T,Su),e(Su,gre),e(gre,sdo),e(Su,ldo),e(Su,OB),e(OB,ido),e(Su,ddo),e(T,cdo),e(T,Ru),e(Ru,hre),e(hre,mdo),e(Ru,fdo),e(Ru,VB),e(VB,gdo),e(Ru,hdo),e(T,udo),e(T,Bu),e(Bu,ure),e(ure,pdo),e(Bu,_do),e(Bu,XB),e(XB,bdo),e(Bu,Fdo),e(T,vdo),e(T,Pu),e(Pu,pre),e(pre,Tdo),e(Pu,Mdo),e(Pu,zB),e(zB,Edo),e(Pu,Cdo),e(T,wdo),e(T,$u),e($u,_re),e(_re,Ado),e($u,ydo),e($u,QB),e(QB,Ldo),e($u,xdo),e(T,kdo),e(T,Iu),e(Iu,bre),e(bre,Sdo),e(Iu,Rdo),e(Iu,WB),e(WB,Bdo),e(Iu,Pdo),e(T,$do),e(T,qu),e(qu,Fre),e(Fre,Ido),e(qu,qdo),e(qu,HB),e(HB,Ndo),e(qu,jdo),e(T,Ddo),e(T,Nu),e(Nu,vre),e(vre,Gdo),e(Nu,Odo),e(Nu,UB),e(UB,Vdo),e(Nu,Xdo),e(T,zdo),e(T,ju),e(ju,Tre),e(Tre,Qdo),e(ju,Wdo),e(ju,JB),e(JB,Hdo),e(ju,Udo),e(T,Jdo),e(T,Du),e(Du,Mre),e(Mre,Ydo),e(Du,Kdo),e(Du,YB),e(YB,Zdo),e(Du,eco),e(T,oco),e(T,Gu),e(Gu,Ere),e(Ere,rco),e(Gu,tco),e(Gu,KB),e(KB,aco),e(Gu,nco),e(T,sco),e(T,Ou),e(Ou,Cre),e(Cre,lco),e(Ou,ico),e(Ou,ZB),e(ZB,dco),e(Ou,cco),e(T,mco),e(T,Vu),e(Vu,wre),e(wre,fco),e(Vu,gco),e(Vu,eP),e(eP,hco),e(Vu,uco),e(T,pco),e(T,Xu),e(Xu,Are),e(Are,_co),e(Xu,bco),e(Xu,oP),e(oP,Fco),e(Xu,vco),e(T,Tco),e(T,zu),e(zu,yre),e(yre,Mco),e(zu,Eco),e(zu,rP),e(rP,Cco),e(zu,wco),e(T,Aco),e(T,Qu),e(Qu,Lre),e(Lre,yco),e(Qu,Lco),e(Qu,tP),e(tP,xco),e(Qu,kco),e(T,Sco),e(T,Wu),e(Wu,xre),e(xre,Rco),e(Wu,Bco),e(Wu,aP),e(aP,Pco),e(Wu,$co),e(T,Ico),e(T,Hu),e(Hu,kre),e(kre,qco),e(Hu,Nco),e(Hu,nP),e(nP,jco),e(Hu,Dco),e(T,Gco),e(T,Uu),e(Uu,Sre),e(Sre,Oco),e(Uu,Vco),e(Uu,sP),e(sP,Xco),e(Uu,zco),e(T,Qco),e(T,Ju),e(Ju,Rre),e(Rre,Wco),e(Ju,Hco),e(Ju,lP),e(lP,Uco),e(Ju,Jco),e(T,Yco),e(T,Yu),e(Yu,Bre),e(Bre,Kco),e(Yu,Zco),e(Yu,iP),e(iP,emo),e(Yu,omo),e(T,rmo),e(T,Ku),e(Ku,Pre),e(Pre,tmo),e(Ku,amo),e(Ku,dP),e(dP,nmo),e(Ku,smo),e(T,lmo),e(T,Zu),e(Zu,$re),e($re,imo),e(Zu,dmo),e(Zu,cP),e(cP,cmo),e(Zu,mmo),e(T,fmo),e(T,ep),e(ep,Ire),e(Ire,gmo),e(ep,hmo),e(ep,mP),e(mP,umo),e(ep,pmo),e(T,_mo),e(T,op),e(op,qre),e(qre,bmo),e(op,Fmo),e(op,fP),e(fP,vmo),e(op,Tmo),e(T,Mmo),e(T,rp),e(rp,Nre),e(Nre,Emo),e(rp,Cmo),e(rp,gP),e(gP,wmo),e(rp,Amo),e(T,ymo),e(T,tp),e(tp,jre),e(jre,Lmo),e(tp,xmo),e(tp,hP),e(hP,kmo),e(tp,Smo),e(T,Rmo),e(T,ap),e(ap,Dre),e(Dre,Bmo),e(ap,Pmo),e(ap,uP),e(uP,$mo),e(ap,Imo),e(T,qmo),e(T,np),e(np,Gre),e(Gre,Nmo),e(np,jmo),e(np,pP),e(pP,Dmo),e(np,Gmo),e(T,Omo),e(T,sp),e(sp,Ore),e(Ore,Vmo),e(sp,Xmo),e(sp,_P),e(_P,zmo),e(sp,Qmo),e(T,Wmo),e(T,lp),e(lp,Vre),e(Vre,Hmo),e(lp,Umo),e(lp,bP),e(bP,Jmo),e(lp,Ymo),e(T,Kmo),e(T,ip),e(ip,Xre),e(Xre,Zmo),e(ip,efo),e(ip,FP),e(FP,ofo),e(ip,rfo),e(T,tfo),e(T,dp),e(dp,zre),e(zre,afo),e(dp,nfo),e(dp,vP),e(vP,sfo),e(dp,lfo),e(T,ifo),e(T,cp),e(cp,Qre),e(Qre,dfo),e(cp,cfo),e(cp,TP),e(TP,mfo),e(cp,ffo),e(T,gfo),e(T,mp),e(mp,Wre),e(Wre,hfo),e(mp,ufo),e(mp,MP),e(MP,pfo),e(mp,_fo),e(T,bfo),e(T,fp),e(fp,Hre),e(Hre,Ffo),e(fp,vfo),e(fp,EP),e(EP,Tfo),e(fp,Mfo),e(T,Efo),e(T,gp),e(gp,Ure),e(Ure,Cfo),e(gp,wfo),e(gp,CP),e(CP,Afo),e(gp,yfo),e(T,Lfo),e(T,hp),e(hp,Jre),e(Jre,xfo),e(hp,kfo),e(hp,wP),e(wP,Sfo),e(hp,Rfo),e(T,Bfo),e(T,up),e(up,Yre),e(Yre,Pfo),e(up,$fo),e(up,AP),e(AP,Ifo),e(up,qfo),e(T,Nfo),e(T,pp),e(pp,Kre),e(Kre,jfo),e(pp,Dfo),e(pp,yP),e(yP,Gfo),e(pp,Ofo),e(T,Vfo),e(T,_p),e(_p,Zre),e(Zre,Xfo),e(_p,zfo),e(_p,LP),e(LP,Qfo),e(_p,Wfo),e(T,Hfo),e(T,bp),e(bp,ete),e(ete,Ufo),e(bp,Jfo),e(bp,xP),e(xP,Yfo),e(bp,Kfo),e(T,Zfo),e(T,Fp),e(Fp,ote),e(ote,ego),e(Fp,ogo),e(Fp,kP),e(kP,rgo),e(Fp,tgo),e(T,ago),e(T,vp),e(vp,rte),e(rte,ngo),e(vp,sgo),e(vp,SP),e(SP,lgo),e(vp,igo),e(T,dgo),e(T,Tp),e(Tp,tte),e(tte,cgo),e(Tp,mgo),e(Tp,RP),e(RP,fgo),e(Tp,ggo),e(T,hgo),e(T,Mp),e(Mp,ate),e(ate,ugo),e(Mp,pgo),e(Mp,BP),e(BP,_go),e(Mp,bgo),e(T,Fgo),e(T,Ep),e(Ep,nte),e(nte,vgo),e(Ep,Tgo),e(Ep,PP),e(PP,Mgo),e(Ep,Ego),e(T,Cgo),e(T,Cp),e(Cp,ste),e(ste,wgo),e(Cp,Ago),e(Cp,$P),e($P,ygo),e(Cp,Lgo),e(T,xgo),e(T,wp),e(wp,lte),e(lte,kgo),e(wp,Sgo),e(wp,IP),e(IP,Rgo),e(wp,Bgo),e(T,Pgo),e(T,Ap),e(Ap,ite),e(ite,$go),e(Ap,Igo),e(Ap,qP),e(qP,qgo),e(Ap,Ngo),e(T,jgo),e(T,yp),e(yp,dte),e(dte,Dgo),e(yp,Ggo),e(yp,NP),e(NP,Ogo),e(yp,Vgo),e(T,Xgo),e(T,Lp),e(Lp,cte),e(cte,zgo),e(Lp,Qgo),e(Lp,jP),e(jP,Wgo),e(Lp,Hgo),e(T,Ugo),e(T,xp),e(xp,mte),e(mte,Jgo),e(xp,Ygo),e(xp,DP),e(DP,Kgo),e(xp,Zgo),e(T,eho),e(T,kp),e(kp,fte),e(fte,oho),e(kp,rho),e(kp,GP),e(GP,tho),e(kp,aho),e(T,nho),e(T,Sp),e(Sp,gte),e(gte,sho),e(Sp,lho),e(Sp,OP),e(OP,iho),e(Sp,dho),e(qe,cho),e(qe,Rp),e(Rp,mho),e(Rp,hte),e(hte,fho),e(Rp,gho),e(Rp,ute),e(ute,hho),e(qe,uho),e(qe,pte),e(pte,pho),e(qe,_ho),g(nA,qe,null),b(c,hRe,_),b(c,Zi,_),e(Zi,Bp),e(Bp,_te),g(sA,_te,null),e(Zi,bho),e(Zi,bte),e(bte,Fho),b(c,uRe,_),b(c,Yo,_),g(lA,Yo,null),e(Yo,vho),e(Yo,ed),e(ed,Tho),e(ed,VP),e(VP,Mho),e(ed,Eho),e(ed,XP),e(XP,Cho),e(ed,who),e(Yo,Aho),e(Yo,iA),e(iA,yho),e(iA,Fte),e(Fte,Lho),e(iA,xho),e(Yo,kho),e(Yo,zr),g(dA,zr,null),e(zr,Sho),e(zr,vte),e(vte,Rho),e(zr,Bho),e(zr,od),e(od,Pho),e(od,Tte),e(Tte,$ho),e(od,Iho),e(od,zP),e(zP,qho),e(od,Nho),e(zr,jho),e(zr,Mte),e(Mte,Dho),e(zr,Gho),g(cA,zr,null),e(Yo,Oho),e(Yo,Ne),g(mA,Ne,null),e(Ne,Vho),e(Ne,Ete),e(Ete,Xho),e(Ne,zho),e(Ne,za),e(za,Qho),e(za,Cte),e(Cte,Who),e(za,Hho),e(za,wte),e(wte,Uho),e(za,Jho),e(za,Ate),e(Ate,Yho),e(za,Kho),e(Ne,Zho),e(Ne,S),e(S,Pp),e(Pp,yte),e(yte,euo),e(Pp,ouo),e(Pp,QP),e(QP,ruo),e(Pp,tuo),e(S,auo),e(S,$p),e($p,Lte),e(Lte,nuo),e($p,suo),e($p,WP),e(WP,luo),e($p,iuo),e(S,duo),e(S,Ip),e(Ip,xte),e(xte,cuo),e(Ip,muo),e(Ip,HP),e(HP,fuo),e(Ip,guo),e(S,huo),e(S,qp),e(qp,kte),e(kte,uuo),e(qp,puo),e(qp,UP),e(UP,_uo),e(qp,buo),e(S,Fuo),e(S,Np),e(Np,Ste),e(Ste,vuo),e(Np,Tuo),e(Np,JP),e(JP,Muo),e(Np,Euo),e(S,Cuo),e(S,jp),e(jp,Rte),e(Rte,wuo),e(jp,Auo),e(jp,YP),e(YP,yuo),e(jp,Luo),e(S,xuo),e(S,Dp),e(Dp,Bte),e(Bte,kuo),e(Dp,Suo),e(Dp,KP),e(KP,Ruo),e(Dp,Buo),e(S,Puo),e(S,Gp),e(Gp,Pte),e(Pte,$uo),e(Gp,Iuo),e(Gp,ZP),e(ZP,quo),e(Gp,Nuo),e(S,juo),e(S,Op),e(Op,$te),e($te,Duo),e(Op,Guo),e(Op,e$),e(e$,Ouo),e(Op,Vuo),e(S,Xuo),e(S,Vp),e(Vp,Ite),e(Ite,zuo),e(Vp,Quo),e(Vp,o$),e(o$,Wuo),e(Vp,Huo),e(S,Uuo),e(S,Xp),e(Xp,qte),e(qte,Juo),e(Xp,Yuo),e(Xp,r$),e(r$,Kuo),e(Xp,Zuo),e(S,epo),e(S,zp),e(zp,Nte),e(Nte,opo),e(zp,rpo),e(zp,t$),e(t$,tpo),e(zp,apo),e(S,npo),e(S,Qp),e(Qp,jte),e(jte,spo),e(Qp,lpo),e(Qp,a$),e(a$,ipo),e(Qp,dpo),e(S,cpo),e(S,Wp),e(Wp,Dte),e(Dte,mpo),e(Wp,fpo),e(Wp,n$),e(n$,gpo),e(Wp,hpo),e(S,upo),e(S,Hp),e(Hp,Gte),e(Gte,ppo),e(Hp,_po),e(Hp,s$),e(s$,bpo),e(Hp,Fpo),e(S,vpo),e(S,Up),e(Up,Ote),e(Ote,Tpo),e(Up,Mpo),e(Up,l$),e(l$,Epo),e(Up,Cpo),e(S,wpo),e(S,Jp),e(Jp,Vte),e(Vte,Apo),e(Jp,ypo),e(Jp,i$),e(i$,Lpo),e(Jp,xpo),e(S,kpo),e(S,Yp),e(Yp,Xte),e(Xte,Spo),e(Yp,Rpo),e(Yp,d$),e(d$,Bpo),e(Yp,Ppo),e(S,$po),e(S,Kp),e(Kp,zte),e(zte,Ipo),e(Kp,qpo),e(Kp,c$),e(c$,Npo),e(Kp,jpo),e(S,Dpo),e(S,Zp),e(Zp,Qte),e(Qte,Gpo),e(Zp,Opo),e(Zp,m$),e(m$,Vpo),e(Zp,Xpo),e(S,zpo),e(S,e_),e(e_,Wte),e(Wte,Qpo),e(e_,Wpo),e(e_,f$),e(f$,Hpo),e(e_,Upo),e(S,Jpo),e(S,o_),e(o_,Hte),e(Hte,Ypo),e(o_,Kpo),e(o_,g$),e(g$,Zpo),e(o_,e_o),e(S,o_o),e(S,r_),e(r_,Ute),e(Ute,r_o),e(r_,t_o),e(r_,h$),e(h$,a_o),e(r_,n_o),e(S,s_o),e(S,t_),e(t_,Jte),e(Jte,l_o),e(t_,i_o),e(t_,u$),e(u$,d_o),e(t_,c_o),e(S,m_o),e(S,a_),e(a_,Yte),e(Yte,f_o),e(a_,g_o),e(a_,p$),e(p$,h_o),e(a_,u_o),e(S,p_o),e(S,n_),e(n_,Kte),e(Kte,__o),e(n_,b_o),e(n_,_$),e(_$,F_o),e(n_,v_o),e(S,T_o),e(S,s_),e(s_,Zte),e(Zte,M_o),e(s_,E_o),e(s_,b$),e(b$,C_o),e(s_,w_o),e(S,A_o),e(S,l_),e(l_,eae),e(eae,y_o),e(l_,L_o),e(l_,F$),e(F$,x_o),e(l_,k_o),e(S,S_o),e(S,i_),e(i_,oae),e(oae,R_o),e(i_,B_o),e(i_,v$),e(v$,P_o),e(i_,$_o),e(S,I_o),e(S,d_),e(d_,rae),e(rae,q_o),e(d_,N_o),e(d_,T$),e(T$,j_o),e(d_,D_o),e(S,G_o),e(S,c_),e(c_,tae),e(tae,O_o),e(c_,V_o),e(c_,M$),e(M$,X_o),e(c_,z_o),e(S,Q_o),e(S,m_),e(m_,aae),e(aae,W_o),e(m_,H_o),e(m_,E$),e(E$,U_o),e(m_,J_o),e(S,Y_o),e(S,f_),e(f_,nae),e(nae,K_o),e(f_,Z_o),e(f_,C$),e(C$,ebo),e(f_,obo),e(S,rbo),e(S,g_),e(g_,sae),e(sae,tbo),e(g_,abo),e(g_,w$),e(w$,nbo),e(g_,sbo),e(S,lbo),e(S,h_),e(h_,lae),e(lae,ibo),e(h_,dbo),e(h_,A$),e(A$,cbo),e(h_,mbo),e(S,fbo),e(S,u_),e(u_,iae),e(iae,gbo),e(u_,hbo),e(u_,y$),e(y$,ubo),e(u_,pbo),e(S,_bo),e(S,p_),e(p_,dae),e(dae,bbo),e(p_,Fbo),e(p_,L$),e(L$,vbo),e(p_,Tbo),e(S,Mbo),e(S,__),e(__,cae),e(cae,Ebo),e(__,Cbo),e(__,x$),e(x$,wbo),e(__,Abo),e(S,ybo),e(S,b_),e(b_,mae),e(mae,Lbo),e(b_,xbo),e(b_,k$),e(k$,kbo),e(b_,Sbo),e(Ne,Rbo),e(Ne,F_),e(F_,Bbo),e(F_,fae),e(fae,Pbo),e(F_,$bo),e(F_,gae),e(gae,Ibo),e(Ne,qbo),e(Ne,hae),e(hae,Nbo),e(Ne,jbo),g(fA,Ne,null),b(c,pRe,_),b(c,rd,_),e(rd,v_),e(v_,uae),g(gA,uae,null),e(rd,Dbo),e(rd,pae),e(pae,Gbo),b(c,_Re,_),b(c,Ko,_),g(hA,Ko,null),e(Ko,Obo),e(Ko,td),e(td,Vbo),e(td,S$),e(S$,Xbo),e(td,zbo),e(td,R$),e(R$,Qbo),e(td,Wbo),e(Ko,Hbo),e(Ko,uA),e(uA,Ubo),e(uA,_ae),e(_ae,Jbo),e(uA,Ybo),e(Ko,Kbo),e(Ko,Qr),g(pA,Qr,null),e(Qr,Zbo),e(Qr,bae),e(bae,e2o),e(Qr,o2o),e(Qr,ad),e(ad,r2o),e(ad,Fae),e(Fae,t2o),e(ad,a2o),e(ad,B$),e(B$,n2o),e(ad,s2o),e(Qr,l2o),e(Qr,vae),e(vae,i2o),e(Qr,d2o),g(_A,Qr,null),e(Ko,c2o),e(Ko,je),g(bA,je,null),e(je,m2o),e(je,Tae),e(Tae,f2o),e(je,g2o),e(je,Qa),e(Qa,h2o),e(Qa,Mae),e(Mae,u2o),e(Qa,p2o),e(Qa,Eae),e(Eae,_2o),e(Qa,b2o),e(Qa,Cae),e(Cae,F2o),e(Qa,v2o),e(je,T2o),e(je,$),e($,T_),e(T_,wae),e(wae,M2o),e(T_,E2o),e(T_,P$),e(P$,C2o),e(T_,w2o),e($,A2o),e($,M_),e(M_,Aae),e(Aae,y2o),e(M_,L2o),e(M_,$$),e($$,x2o),e(M_,k2o),e($,S2o),e($,E_),e(E_,yae),e(yae,R2o),e(E_,B2o),e(E_,I$),e(I$,P2o),e(E_,$2o),e($,I2o),e($,C_),e(C_,Lae),e(Lae,q2o),e(C_,N2o),e(C_,q$),e(q$,j2o),e(C_,D2o),e($,G2o),e($,w_),e(w_,xae),e(xae,O2o),e(w_,V2o),e(w_,N$),e(N$,X2o),e(w_,z2o),e($,Q2o),e($,A_),e(A_,kae),e(kae,W2o),e(A_,H2o),e(A_,j$),e(j$,U2o),e(A_,J2o),e($,Y2o),e($,y_),e(y_,Sae),e(Sae,K2o),e(y_,Z2o),e(y_,D$),e(D$,eFo),e(y_,oFo),e($,rFo),e($,L_),e(L_,Rae),e(Rae,tFo),e(L_,aFo),e(L_,G$),e(G$,nFo),e(L_,sFo),e($,lFo),e($,x_),e(x_,Bae),e(Bae,iFo),e(x_,dFo),e(x_,O$),e(O$,cFo),e(x_,mFo),e($,fFo),e($,k_),e(k_,Pae),e(Pae,gFo),e(k_,hFo),e(k_,V$),e(V$,uFo),e(k_,pFo),e($,_Fo),e($,S_),e(S_,$ae),e($ae,bFo),e(S_,FFo),e(S_,X$),e(X$,vFo),e(S_,TFo),e($,MFo),e($,R_),e(R_,Iae),e(Iae,EFo),e(R_,CFo),e(R_,z$),e(z$,wFo),e(R_,AFo),e($,yFo),e($,B_),e(B_,qae),e(qae,LFo),e(B_,xFo),e(B_,Q$),e(Q$,kFo),e(B_,SFo),e($,RFo),e($,P_),e(P_,Nae),e(Nae,BFo),e(P_,PFo),e(P_,W$),e(W$,$Fo),e(P_,IFo),e($,qFo),e($,$_),e($_,jae),e(jae,NFo),e($_,jFo),e($_,H$),e(H$,DFo),e($_,GFo),e($,OFo),e($,I_),e(I_,Dae),e(Dae,VFo),e(I_,XFo),e(I_,U$),e(U$,zFo),e(I_,QFo),e($,WFo),e($,q_),e(q_,Gae),e(Gae,HFo),e(q_,UFo),e(q_,J$),e(J$,JFo),e(q_,YFo),e($,KFo),e($,N_),e(N_,Oae),e(Oae,ZFo),e(N_,evo),e(N_,Y$),e(Y$,ovo),e(N_,rvo),e($,tvo),e($,j_),e(j_,Vae),e(Vae,avo),e(j_,nvo),e(j_,K$),e(K$,svo),e(j_,lvo),e($,ivo),e($,D_),e(D_,Xae),e(Xae,dvo),e(D_,cvo),e(D_,Z$),e(Z$,mvo),e(D_,fvo),e($,gvo),e($,G_),e(G_,zae),e(zae,hvo),e(G_,uvo),e(G_,eI),e(eI,pvo),e(G_,_vo),e($,bvo),e($,O_),e(O_,Qae),e(Qae,Fvo),e(O_,vvo),e(O_,oI),e(oI,Tvo),e(O_,Mvo),e($,Evo),e($,V_),e(V_,Wae),e(Wae,Cvo),e(V_,wvo),e(V_,rI),e(rI,Avo),e(V_,yvo),e($,Lvo),e($,X_),e(X_,Hae),e(Hae,xvo),e(X_,kvo),e(X_,tI),e(tI,Svo),e(X_,Rvo),e($,Bvo),e($,z_),e(z_,Uae),e(Uae,Pvo),e(z_,$vo),e(z_,aI),e(aI,Ivo),e(z_,qvo),e($,Nvo),e($,Q_),e(Q_,Jae),e(Jae,jvo),e(Q_,Dvo),e(Q_,nI),e(nI,Gvo),e(Q_,Ovo),e($,Vvo),e($,W_),e(W_,Yae),e(Yae,Xvo),e(W_,zvo),e(W_,sI),e(sI,Qvo),e(W_,Wvo),e($,Hvo),e($,H_),e(H_,Kae),e(Kae,Uvo),e(H_,Jvo),e(H_,lI),e(lI,Yvo),e(H_,Kvo),e($,Zvo),e($,U_),e(U_,Zae),e(Zae,eTo),e(U_,oTo),e(U_,iI),e(iI,rTo),e(U_,tTo),e($,aTo),e($,J_),e(J_,ene),e(ene,nTo),e(J_,sTo),e(J_,dI),e(dI,lTo),e(J_,iTo),e($,dTo),e($,Y_),e(Y_,one),e(one,cTo),e(Y_,mTo),e(Y_,cI),e(cI,fTo),e(Y_,gTo),e($,hTo),e($,K_),e(K_,rne),e(rne,uTo),e(K_,pTo),e(K_,mI),e(mI,_To),e(K_,bTo),e($,FTo),e($,Z_),e(Z_,tne),e(tne,vTo),e(Z_,TTo),e(Z_,fI),e(fI,MTo),e(Z_,ETo),e($,CTo),e($,eb),e(eb,ane),e(ane,wTo),e(eb,ATo),e(eb,gI),e(gI,yTo),e(eb,LTo),e($,xTo),e($,ob),e(ob,nne),e(nne,kTo),e(ob,STo),e(ob,hI),e(hI,RTo),e(ob,BTo),e(je,PTo),e(je,rb),e(rb,$To),e(rb,sne),e(sne,ITo),e(rb,qTo),e(rb,lne),e(lne,NTo),e(je,jTo),e(je,ine),e(ine,DTo),e(je,GTo),g(FA,je,null),b(c,bRe,_),b(c,nd,_),e(nd,tb),e(tb,dne),g(vA,dne,null),e(nd,OTo),e(nd,cne),e(cne,VTo),b(c,FRe,_),b(c,Zo,_),g(TA,Zo,null),e(Zo,XTo),e(Zo,sd),e(sd,zTo),e(sd,uI),e(uI,QTo),e(sd,WTo),e(sd,pI),e(pI,HTo),e(sd,UTo),e(Zo,JTo),e(Zo,MA),e(MA,YTo),e(MA,mne),e(mne,KTo),e(MA,ZTo),e(Zo,e1o),e(Zo,Wr),g(EA,Wr,null),e(Wr,o1o),e(Wr,fne),e(fne,r1o),e(Wr,t1o),e(Wr,ld),e(ld,a1o),e(ld,gne),e(gne,n1o),e(ld,s1o),e(ld,_I),e(_I,l1o),e(ld,i1o),e(Wr,d1o),e(Wr,hne),e(hne,c1o),e(Wr,m1o),g(CA,Wr,null),e(Zo,f1o),e(Zo,De),g(wA,De,null),e(De,g1o),e(De,une),e(une,h1o),e(De,u1o),e(De,Wa),e(Wa,p1o),e(Wa,pne),e(pne,_1o),e(Wa,b1o),e(Wa,_ne),e(_ne,F1o),e(Wa,v1o),e(Wa,bne),e(bne,T1o),e(Wa,M1o),e(De,E1o),e(De,I),e(I,ab),e(ab,Fne),e(Fne,C1o),e(ab,w1o),e(ab,bI),e(bI,A1o),e(ab,y1o),e(I,L1o),e(I,nb),e(nb,vne),e(vne,x1o),e(nb,k1o),e(nb,FI),e(FI,S1o),e(nb,R1o),e(I,B1o),e(I,sb),e(sb,Tne),e(Tne,P1o),e(sb,$1o),e(sb,vI),e(vI,I1o),e(sb,q1o),e(I,N1o),e(I,lb),e(lb,Mne),e(Mne,j1o),e(lb,D1o),e(lb,TI),e(TI,G1o),e(lb,O1o),e(I,V1o),e(I,ib),e(ib,Ene),e(Ene,X1o),e(ib,z1o),e(ib,MI),e(MI,Q1o),e(ib,W1o),e(I,H1o),e(I,db),e(db,Cne),e(Cne,U1o),e(db,J1o),e(db,EI),e(EI,Y1o),e(db,K1o),e(I,Z1o),e(I,cb),e(cb,wne),e(wne,eMo),e(cb,oMo),e(cb,CI),e(CI,rMo),e(cb,tMo),e(I,aMo),e(I,mb),e(mb,Ane),e(Ane,nMo),e(mb,sMo),e(mb,wI),e(wI,lMo),e(mb,iMo),e(I,dMo),e(I,fb),e(fb,yne),e(yne,cMo),e(fb,mMo),e(fb,AI),e(AI,fMo),e(fb,gMo),e(I,hMo),e(I,gb),e(gb,Lne),e(Lne,uMo),e(gb,pMo),e(gb,yI),e(yI,_Mo),e(gb,bMo),e(I,FMo),e(I,hb),e(hb,xne),e(xne,vMo),e(hb,TMo),e(hb,LI),e(LI,MMo),e(hb,EMo),e(I,CMo),e(I,ub),e(ub,kne),e(kne,wMo),e(ub,AMo),e(ub,xI),e(xI,yMo),e(ub,LMo),e(I,xMo),e(I,pb),e(pb,Sne),e(Sne,kMo),e(pb,SMo),e(pb,kI),e(kI,RMo),e(pb,BMo),e(I,PMo),e(I,_b),e(_b,Rne),e(Rne,$Mo),e(_b,IMo),e(_b,SI),e(SI,qMo),e(_b,NMo),e(I,jMo),e(I,bb),e(bb,Bne),e(Bne,DMo),e(bb,GMo),e(bb,RI),e(RI,OMo),e(bb,VMo),e(I,XMo),e(I,Fb),e(Fb,Pne),e(Pne,zMo),e(Fb,QMo),e(Fb,BI),e(BI,WMo),e(Fb,HMo),e(I,UMo),e(I,vb),e(vb,$ne),e($ne,JMo),e(vb,YMo),e(vb,PI),e(PI,KMo),e(vb,ZMo),e(I,e4o),e(I,Tb),e(Tb,Ine),e(Ine,o4o),e(Tb,r4o),e(Tb,$I),e($I,t4o),e(Tb,a4o),e(I,n4o),e(I,Mb),e(Mb,qne),e(qne,s4o),e(Mb,l4o),e(Mb,II),e(II,i4o),e(Mb,d4o),e(I,c4o),e(I,Eb),e(Eb,Nne),e(Nne,m4o),e(Eb,f4o),e(Eb,qI),e(qI,g4o),e(Eb,h4o),e(I,u4o),e(I,Cb),e(Cb,jne),e(jne,p4o),e(Cb,_4o),e(Cb,NI),e(NI,b4o),e(Cb,F4o),e(I,v4o),e(I,wb),e(wb,Dne),e(Dne,T4o),e(wb,M4o),e(wb,jI),e(jI,E4o),e(wb,C4o),e(I,w4o),e(I,Ab),e(Ab,Gne),e(Gne,A4o),e(Ab,y4o),e(Ab,DI),e(DI,L4o),e(Ab,x4o),e(I,k4o),e(I,yb),e(yb,One),e(One,S4o),e(yb,R4o),e(yb,GI),e(GI,B4o),e(yb,P4o),e(I,$4o),e(I,Lb),e(Lb,Vne),e(Vne,I4o),e(Lb,q4o),e(Lb,OI),e(OI,N4o),e(Lb,j4o),e(I,D4o),e(I,xb),e(xb,Xne),e(Xne,G4o),e(xb,O4o),e(xb,VI),e(VI,V4o),e(xb,X4o),e(I,z4o),e(I,kb),e(kb,zne),e(zne,Q4o),e(kb,W4o),e(kb,XI),e(XI,H4o),e(kb,U4o),e(I,J4o),e(I,Sb),e(Sb,Qne),e(Qne,Y4o),e(Sb,K4o),e(Sb,zI),e(zI,Z4o),e(Sb,eEo),e(I,oEo),e(I,Rb),e(Rb,Wne),e(Wne,rEo),e(Rb,tEo),e(Rb,QI),e(QI,aEo),e(Rb,nEo),e(I,sEo),e(I,Bb),e(Bb,Hne),e(Hne,lEo),e(Bb,iEo),e(Bb,WI),e(WI,dEo),e(Bb,cEo),e(I,mEo),e(I,Pb),e(Pb,Une),e(Une,fEo),e(Pb,gEo),e(Pb,Jne),e(Jne,hEo),e(Pb,uEo),e(I,pEo),e(I,$b),e($b,Yne),e(Yne,_Eo),e($b,bEo),e($b,HI),e(HI,FEo),e($b,vEo),e(I,TEo),e(I,Ib),e(Ib,Kne),e(Kne,MEo),e(Ib,EEo),e(Ib,UI),e(UI,CEo),e(Ib,wEo),e(I,AEo),e(I,qb),e(qb,Zne),e(Zne,yEo),e(qb,LEo),e(qb,JI),e(JI,xEo),e(qb,kEo),e(I,SEo),e(I,Nb),e(Nb,ese),e(ese,REo),e(Nb,BEo),e(Nb,YI),e(YI,PEo),e(Nb,$Eo),e(De,IEo),e(De,jb),e(jb,qEo),e(jb,ose),e(ose,NEo),e(jb,jEo),e(jb,rse),e(rse,DEo),e(De,GEo),e(De,tse),e(tse,OEo),e(De,VEo),g(AA,De,null),b(c,vRe,_),b(c,id,_),e(id,Db),e(Db,ase),g(yA,ase,null),e(id,XEo),e(id,nse),e(nse,zEo),b(c,TRe,_),b(c,er,_),g(LA,er,null),e(er,QEo),e(er,dd),e(dd,WEo),e(dd,KI),e(KI,HEo),e(dd,UEo),e(dd,ZI),e(ZI,JEo),e(dd,YEo),e(er,KEo),e(er,xA),e(xA,ZEo),e(xA,sse),e(sse,eCo),e(xA,oCo),e(er,rCo),e(er,Hr),g(kA,Hr,null),e(Hr,tCo),e(Hr,lse),e(lse,aCo),e(Hr,nCo),e(Hr,cd),e(cd,sCo),e(cd,ise),e(ise,lCo),e(cd,iCo),e(cd,eq),e(eq,dCo),e(cd,cCo),e(Hr,mCo),e(Hr,dse),e(dse,fCo),e(Hr,gCo),g(SA,Hr,null),e(er,hCo),e(er,Ge),g(RA,Ge,null),e(Ge,uCo),e(Ge,cse),e(cse,pCo),e(Ge,_Co),e(Ge,Ha),e(Ha,bCo),e(Ha,mse),e(mse,FCo),e(Ha,vCo),e(Ha,fse),e(fse,TCo),e(Ha,MCo),e(Ha,gse),e(gse,ECo),e(Ha,CCo),e(Ge,wCo),e(Ge,se),e(se,Gb),e(Gb,hse),e(hse,ACo),e(Gb,yCo),e(Gb,oq),e(oq,LCo),e(Gb,xCo),e(se,kCo),e(se,Ob),e(Ob,use),e(use,SCo),e(Ob,RCo),e(Ob,rq),e(rq,BCo),e(Ob,PCo),e(se,$Co),e(se,Vb),e(Vb,pse),e(pse,ICo),e(Vb,qCo),e(Vb,tq),e(tq,NCo),e(Vb,jCo),e(se,DCo),e(se,Xb),e(Xb,_se),e(_se,GCo),e(Xb,OCo),e(Xb,aq),e(aq,VCo),e(Xb,XCo),e(se,zCo),e(se,zb),e(zb,bse),e(bse,QCo),e(zb,WCo),e(zb,nq),e(nq,HCo),e(zb,UCo),e(se,JCo),e(se,Qb),e(Qb,Fse),e(Fse,YCo),e(Qb,KCo),e(Qb,sq),e(sq,ZCo),e(Qb,e5o),e(se,o5o),e(se,Wb),e(Wb,vse),e(vse,r5o),e(Wb,t5o),e(Wb,lq),e(lq,a5o),e(Wb,n5o),e(se,s5o),e(se,Hb),e(Hb,Tse),e(Tse,l5o),e(Hb,i5o),e(Hb,iq),e(iq,d5o),e(Hb,c5o),e(se,m5o),e(se,Ub),e(Ub,Mse),e(Mse,f5o),e(Ub,g5o),e(Ub,dq),e(dq,h5o),e(Ub,u5o),e(se,p5o),e(se,Jb),e(Jb,Ese),e(Ese,_5o),e(Jb,b5o),e(Jb,cq),e(cq,F5o),e(Jb,v5o),e(se,T5o),e(se,Yb),e(Yb,Cse),e(Cse,M5o),e(Yb,E5o),e(Yb,mq),e(mq,C5o),e(Yb,w5o),e(se,A5o),e(se,Kb),e(Kb,wse),e(wse,y5o),e(Kb,L5o),e(Kb,fq),e(fq,x5o),e(Kb,k5o),e(se,S5o),e(se,Zb),e(Zb,Ase),e(Ase,R5o),e(Zb,B5o),e(Zb,gq),e(gq,P5o),e(Zb,$5o),e(se,I5o),e(se,e2),e(e2,yse),e(yse,q5o),e(e2,N5o),e(e2,hq),e(hq,j5o),e(e2,D5o),e(se,G5o),e(se,o2),e(o2,Lse),e(Lse,O5o),e(o2,V5o),e(o2,uq),e(uq,X5o),e(o2,z5o),e(se,Q5o),e(se,r2),e(r2,xse),e(xse,W5o),e(r2,H5o),e(r2,pq),e(pq,U5o),e(r2,J5o),e(Ge,Y5o),e(Ge,t2),e(t2,K5o),e(t2,kse),e(kse,Z5o),e(t2,e3o),e(t2,Sse),e(Sse,o3o),e(Ge,r3o),e(Ge,Rse),e(Rse,t3o),e(Ge,a3o),g(BA,Ge,null),b(c,MRe,_),b(c,md,_),e(md,a2),e(a2,Bse),g(PA,Bse,null),e(md,n3o),e(md,Pse),e(Pse,s3o),b(c,ERe,_),b(c,or,_),g($A,or,null),e(or,l3o),e(or,fd),e(fd,i3o),e(fd,_q),e(_q,d3o),e(fd,c3o),e(fd,bq),e(bq,m3o),e(fd,f3o),e(or,g3o),e(or,IA),e(IA,h3o),e(IA,$se),e($se,u3o),e(IA,p3o),e(or,_3o),e(or,Ur),g(qA,Ur,null),e(Ur,b3o),e(Ur,Ise),e(Ise,F3o),e(Ur,v3o),e(Ur,gd),e(gd,T3o),e(gd,qse),e(qse,M3o),e(gd,E3o),e(gd,Fq),e(Fq,C3o),e(gd,w3o),e(Ur,A3o),e(Ur,Nse),e(Nse,y3o),e(Ur,L3o),g(NA,Ur,null),e(or,x3o),e(or,Oe),g(jA,Oe,null),e(Oe,k3o),e(Oe,jse),e(jse,S3o),e(Oe,R3o),e(Oe,Ua),e(Ua,B3o),e(Ua,Dse),e(Dse,P3o),e(Ua,$3o),e(Ua,Gse),e(Gse,I3o),e(Ua,q3o),e(Ua,Ose),e(Ose,N3o),e(Ua,j3o),e(Oe,D3o),e(Oe,y),e(y,n2),e(n2,Vse),e(Vse,G3o),e(n2,O3o),e(n2,vq),e(vq,V3o),e(n2,X3o),e(y,z3o),e(y,s2),e(s2,Xse),e(Xse,Q3o),e(s2,W3o),e(s2,Tq),e(Tq,H3o),e(s2,U3o),e(y,J3o),e(y,l2),e(l2,zse),e(zse,Y3o),e(l2,K3o),e(l2,Mq),e(Mq,Z3o),e(l2,ewo),e(y,owo),e(y,i2),e(i2,Qse),e(Qse,rwo),e(i2,two),e(i2,Eq),e(Eq,awo),e(i2,nwo),e(y,swo),e(y,d2),e(d2,Wse),e(Wse,lwo),e(d2,iwo),e(d2,Cq),e(Cq,dwo),e(d2,cwo),e(y,mwo),e(y,c2),e(c2,Hse),e(Hse,fwo),e(c2,gwo),e(c2,wq),e(wq,hwo),e(c2,uwo),e(y,pwo),e(y,m2),e(m2,Use),e(Use,_wo),e(m2,bwo),e(m2,Aq),e(Aq,Fwo),e(m2,vwo),e(y,Two),e(y,f2),e(f2,Jse),e(Jse,Mwo),e(f2,Ewo),e(f2,yq),e(yq,Cwo),e(f2,wwo),e(y,Awo),e(y,g2),e(g2,Yse),e(Yse,ywo),e(g2,Lwo),e(g2,Lq),e(Lq,xwo),e(g2,kwo),e(y,Swo),e(y,h2),e(h2,Kse),e(Kse,Rwo),e(h2,Bwo),e(h2,xq),e(xq,Pwo),e(h2,$wo),e(y,Iwo),e(y,u2),e(u2,Zse),e(Zse,qwo),e(u2,Nwo),e(u2,kq),e(kq,jwo),e(u2,Dwo),e(y,Gwo),e(y,p2),e(p2,ele),e(ele,Owo),e(p2,Vwo),e(p2,Sq),e(Sq,Xwo),e(p2,zwo),e(y,Qwo),e(y,_2),e(_2,ole),e(ole,Wwo),e(_2,Hwo),e(_2,Rq),e(Rq,Uwo),e(_2,Jwo),e(y,Ywo),e(y,b2),e(b2,rle),e(rle,Kwo),e(b2,Zwo),e(b2,Bq),e(Bq,eAo),e(b2,oAo),e(y,rAo),e(y,F2),e(F2,tle),e(tle,tAo),e(F2,aAo),e(F2,Pq),e(Pq,nAo),e(F2,sAo),e(y,lAo),e(y,v2),e(v2,ale),e(ale,iAo),e(v2,dAo),e(v2,$q),e($q,cAo),e(v2,mAo),e(y,fAo),e(y,T2),e(T2,nle),e(nle,gAo),e(T2,hAo),e(T2,Iq),e(Iq,uAo),e(T2,pAo),e(y,_Ao),e(y,M2),e(M2,sle),e(sle,bAo),e(M2,FAo),e(M2,qq),e(qq,vAo),e(M2,TAo),e(y,MAo),e(y,E2),e(E2,lle),e(lle,EAo),e(E2,CAo),e(E2,Nq),e(Nq,wAo),e(E2,AAo),e(y,yAo),e(y,C2),e(C2,ile),e(ile,LAo),e(C2,xAo),e(C2,jq),e(jq,kAo),e(C2,SAo),e(y,RAo),e(y,w2),e(w2,dle),e(dle,BAo),e(w2,PAo),e(w2,Dq),e(Dq,$Ao),e(w2,IAo),e(y,qAo),e(y,A2),e(A2,cle),e(cle,NAo),e(A2,jAo),e(A2,Gq),e(Gq,DAo),e(A2,GAo),e(y,OAo),e(y,y2),e(y2,mle),e(mle,VAo),e(y2,XAo),e(y2,Oq),e(Oq,zAo),e(y2,QAo),e(y,WAo),e(y,L2),e(L2,fle),e(fle,HAo),e(L2,UAo),e(L2,Vq),e(Vq,JAo),e(L2,YAo),e(y,KAo),e(y,x2),e(x2,gle),e(gle,ZAo),e(x2,e6o),e(x2,Xq),e(Xq,o6o),e(x2,r6o),e(y,t6o),e(y,k2),e(k2,hle),e(hle,a6o),e(k2,n6o),e(k2,zq),e(zq,s6o),e(k2,l6o),e(y,i6o),e(y,S2),e(S2,ule),e(ule,d6o),e(S2,c6o),e(S2,Qq),e(Qq,m6o),e(S2,f6o),e(y,g6o),e(y,R2),e(R2,ple),e(ple,h6o),e(R2,u6o),e(R2,Wq),e(Wq,p6o),e(R2,_6o),e(y,b6o),e(y,B2),e(B2,_le),e(_le,F6o),e(B2,v6o),e(B2,Hq),e(Hq,T6o),e(B2,M6o),e(y,E6o),e(y,P2),e(P2,ble),e(ble,C6o),e(P2,w6o),e(P2,Uq),e(Uq,A6o),e(P2,y6o),e(y,L6o),e(y,$2),e($2,Fle),e(Fle,x6o),e($2,k6o),e($2,Jq),e(Jq,S6o),e($2,R6o),e(y,B6o),e(y,I2),e(I2,vle),e(vle,P6o),e(I2,$6o),e(I2,Yq),e(Yq,I6o),e(I2,q6o),e(y,N6o),e(y,q2),e(q2,Tle),e(Tle,j6o),e(q2,D6o),e(q2,Kq),e(Kq,G6o),e(q2,O6o),e(y,V6o),e(y,N2),e(N2,Mle),e(Mle,X6o),e(N2,z6o),e(N2,Zq),e(Zq,Q6o),e(N2,W6o),e(y,H6o),e(y,j2),e(j2,Ele),e(Ele,U6o),e(j2,J6o),e(j2,eN),e(eN,Y6o),e(j2,K6o),e(y,Z6o),e(y,D2),e(D2,Cle),e(Cle,e0o),e(D2,o0o),e(D2,oN),e(oN,r0o),e(D2,t0o),e(y,a0o),e(y,G2),e(G2,wle),e(wle,n0o),e(G2,s0o),e(G2,rN),e(rN,l0o),e(G2,i0o),e(y,d0o),e(y,O2),e(O2,Ale),e(Ale,c0o),e(O2,m0o),e(O2,tN),e(tN,f0o),e(O2,g0o),e(y,h0o),e(y,V2),e(V2,yle),e(yle,u0o),e(V2,p0o),e(V2,aN),e(aN,_0o),e(V2,b0o),e(y,F0o),e(y,X2),e(X2,Lle),e(Lle,v0o),e(X2,T0o),e(X2,nN),e(nN,M0o),e(X2,E0o),e(y,C0o),e(y,z2),e(z2,xle),e(xle,w0o),e(z2,A0o),e(z2,sN),e(sN,y0o),e(z2,L0o),e(y,x0o),e(y,Q2),e(Q2,kle),e(kle,k0o),e(Q2,S0o),e(Q2,lN),e(lN,R0o),e(Q2,B0o),e(y,P0o),e(y,W2),e(W2,Sle),e(Sle,$0o),e(W2,I0o),e(W2,iN),e(iN,q0o),e(W2,N0o),e(y,j0o),e(y,H2),e(H2,Rle),e(Rle,D0o),e(H2,G0o),e(H2,dN),e(dN,O0o),e(H2,V0o),e(y,X0o),e(y,U2),e(U2,Ble),e(Ble,z0o),e(U2,Q0o),e(U2,cN),e(cN,W0o),e(U2,H0o),e(y,U0o),e(y,J2),e(J2,Ple),e(Ple,J0o),e(J2,Y0o),e(J2,mN),e(mN,K0o),e(J2,Z0o),e(Oe,eyo),e(Oe,Y2),e(Y2,oyo),e(Y2,$le),e($le,ryo),e(Y2,tyo),e(Y2,Ile),e(Ile,ayo),e(Oe,nyo),e(Oe,qle),e(qle,syo),e(Oe,lyo),g(DA,Oe,null),b(c,CRe,_),b(c,hd,_),e(hd,K2),e(K2,Nle),g(GA,Nle,null),e(hd,iyo),e(hd,jle),e(jle,dyo),b(c,wRe,_),b(c,rr,_),g(OA,rr,null),e(rr,cyo),e(rr,ud),e(ud,myo),e(ud,fN),e(fN,fyo),e(ud,gyo),e(ud,gN),e(gN,hyo),e(ud,uyo),e(rr,pyo),e(rr,VA),e(VA,_yo),e(VA,Dle),e(Dle,byo),e(VA,Fyo),e(rr,vyo),e(rr,Jr),g(XA,Jr,null),e(Jr,Tyo),e(Jr,Gle),e(Gle,Myo),e(Jr,Eyo),e(Jr,pd),e(pd,Cyo),e(pd,Ole),e(Ole,wyo),e(pd,Ayo),e(pd,hN),e(hN,yyo),e(pd,Lyo),e(Jr,xyo),e(Jr,Vle),e(Vle,kyo),e(Jr,Syo),g(zA,Jr,null),e(rr,Ryo),e(rr,Ve),g(QA,Ve,null),e(Ve,Byo),e(Ve,Xle),e(Xle,Pyo),e(Ve,$yo),e(Ve,Ja),e(Ja,Iyo),e(Ja,zle),e(zle,qyo),e(Ja,Nyo),e(Ja,Qle),e(Qle,jyo),e(Ja,Dyo),e(Ja,Wle),e(Wle,Gyo),e(Ja,Oyo),e(Ve,Vyo),e(Ve,G),e(G,Z2),e(Z2,Hle),e(Hle,Xyo),e(Z2,zyo),e(Z2,uN),e(uN,Qyo),e(Z2,Wyo),e(G,Hyo),e(G,eF),e(eF,Ule),e(Ule,Uyo),e(eF,Jyo),e(eF,pN),e(pN,Yyo),e(eF,Kyo),e(G,Zyo),e(G,oF),e(oF,Jle),e(Jle,eLo),e(oF,oLo),e(oF,_N),e(_N,rLo),e(oF,tLo),e(G,aLo),e(G,rF),e(rF,Yle),e(Yle,nLo),e(rF,sLo),e(rF,bN),e(bN,lLo),e(rF,iLo),e(G,dLo),e(G,tF),e(tF,Kle),e(Kle,cLo),e(tF,mLo),e(tF,FN),e(FN,fLo),e(tF,gLo),e(G,hLo),e(G,aF),e(aF,Zle),e(Zle,uLo),e(aF,pLo),e(aF,vN),e(vN,_Lo),e(aF,bLo),e(G,FLo),e(G,nF),e(nF,eie),e(eie,vLo),e(nF,TLo),e(nF,TN),e(TN,MLo),e(nF,ELo),e(G,CLo),e(G,sF),e(sF,oie),e(oie,wLo),e(sF,ALo),e(sF,MN),e(MN,yLo),e(sF,LLo),e(G,xLo),e(G,lF),e(lF,rie),e(rie,kLo),e(lF,SLo),e(lF,EN),e(EN,RLo),e(lF,BLo),e(G,PLo),e(G,iF),e(iF,tie),e(tie,$Lo),e(iF,ILo),e(iF,CN),e(CN,qLo),e(iF,NLo),e(G,jLo),e(G,dF),e(dF,aie),e(aie,DLo),e(dF,GLo),e(dF,wN),e(wN,OLo),e(dF,VLo),e(G,XLo),e(G,cF),e(cF,nie),e(nie,zLo),e(cF,QLo),e(cF,AN),e(AN,WLo),e(cF,HLo),e(G,ULo),e(G,mF),e(mF,sie),e(sie,JLo),e(mF,YLo),e(mF,yN),e(yN,KLo),e(mF,ZLo),e(G,e8o),e(G,fF),e(fF,lie),e(lie,o8o),e(fF,r8o),e(fF,LN),e(LN,t8o),e(fF,a8o),e(G,n8o),e(G,gF),e(gF,iie),e(iie,s8o),e(gF,l8o),e(gF,xN),e(xN,i8o),e(gF,d8o),e(G,c8o),e(G,hF),e(hF,die),e(die,m8o),e(hF,f8o),e(hF,kN),e(kN,g8o),e(hF,h8o),e(G,u8o),e(G,uF),e(uF,cie),e(cie,p8o),e(uF,_8o),e(uF,SN),e(SN,b8o),e(uF,F8o),e(G,v8o),e(G,pF),e(pF,mie),e(mie,T8o),e(pF,M8o),e(pF,RN),e(RN,E8o),e(pF,C8o),e(G,w8o),e(G,_F),e(_F,fie),e(fie,A8o),e(_F,y8o),e(_F,BN),e(BN,L8o),e(_F,x8o),e(G,k8o),e(G,bF),e(bF,gie),e(gie,S8o),e(bF,R8o),e(bF,PN),e(PN,B8o),e(bF,P8o),e(G,$8o),e(G,FF),e(FF,hie),e(hie,I8o),e(FF,q8o),e(FF,$N),e($N,N8o),e(FF,j8o),e(G,D8o),e(G,vF),e(vF,uie),e(uie,G8o),e(vF,O8o),e(vF,IN),e(IN,V8o),e(vF,X8o),e(G,z8o),e(G,TF),e(TF,pie),e(pie,Q8o),e(TF,W8o),e(TF,qN),e(qN,H8o),e(TF,U8o),e(G,J8o),e(G,MF),e(MF,_ie),e(_ie,Y8o),e(MF,K8o),e(MF,NN),e(NN,Z8o),e(MF,e7o),e(G,o7o),e(G,EF),e(EF,bie),e(bie,r7o),e(EF,t7o),e(EF,jN),e(jN,a7o),e(EF,n7o),e(G,s7o),e(G,CF),e(CF,Fie),e(Fie,l7o),e(CF,i7o),e(CF,DN),e(DN,d7o),e(CF,c7o),e(G,m7o),e(G,wF),e(wF,vie),e(vie,f7o),e(wF,g7o),e(wF,GN),e(GN,h7o),e(wF,u7o),e(G,p7o),e(G,AF),e(AF,Tie),e(Tie,_7o),e(AF,b7o),e(AF,ON),e(ON,F7o),e(AF,v7o),e(Ve,T7o),e(Ve,yF),e(yF,M7o),e(yF,Mie),e(Mie,E7o),e(yF,C7o),e(yF,Eie),e(Eie,w7o),e(Ve,A7o),e(Ve,Cie),e(Cie,y7o),e(Ve,L7o),g(WA,Ve,null),b(c,ARe,_),b(c,_d,_),e(_d,LF),e(LF,wie),g(HA,wie,null),e(_d,x7o),e(_d,Aie),e(Aie,k7o),b(c,yRe,_),b(c,tr,_),g(UA,tr,null),e(tr,S7o),e(tr,bd),e(bd,R7o),e(bd,VN),e(VN,B7o),e(bd,P7o),e(bd,XN),e(XN,$7o),e(bd,I7o),e(tr,q7o),e(tr,JA),e(JA,N7o),e(JA,yie),e(yie,j7o),e(JA,D7o),e(tr,G7o),e(tr,Yr),g(YA,Yr,null),e(Yr,O7o),e(Yr,Lie),e(Lie,V7o),e(Yr,X7o),e(Yr,Fd),e(Fd,z7o),e(Fd,xie),e(xie,Q7o),e(Fd,W7o),e(Fd,zN),e(zN,H7o),e(Fd,U7o),e(Yr,J7o),e(Yr,kie),e(kie,Y7o),e(Yr,K7o),g(KA,Yr,null),e(tr,Z7o),e(tr,Xe),g(ZA,Xe,null),e(Xe,e9o),e(Xe,Sie),e(Sie,o9o),e(Xe,r9o),e(Xe,Ya),e(Ya,t9o),e(Ya,Rie),e(Rie,a9o),e(Ya,n9o),e(Ya,Bie),e(Bie,s9o),e(Ya,l9o),e(Ya,Pie),e(Pie,i9o),e(Ya,d9o),e(Xe,c9o),e(Xe,da),e(da,xF),e(xF,$ie),e($ie,m9o),e(xF,f9o),e(xF,QN),e(QN,g9o),e(xF,h9o),e(da,u9o),e(da,kF),e(kF,Iie),e(Iie,p9o),e(kF,_9o),e(kF,WN),e(WN,b9o),e(kF,F9o),e(da,v9o),e(da,SF),e(SF,qie),e(qie,T9o),e(SF,M9o),e(SF,HN),e(HN,E9o),e(SF,C9o),e(da,w9o),e(da,RF),e(RF,Nie),e(Nie,A9o),e(RF,y9o),e(RF,UN),e(UN,L9o),e(RF,x9o),e(da,k9o),e(da,BF),e(BF,jie),e(jie,S9o),e(BF,R9o),e(BF,JN),e(JN,B9o),e(BF,P9o),e(Xe,$9o),e(Xe,PF),e(PF,I9o),e(PF,Die),e(Die,q9o),e(PF,N9o),e(PF,Gie),e(Gie,j9o),e(Xe,D9o),e(Xe,Oie),e(Oie,G9o),e(Xe,O9o),g(e6,Xe,null),b(c,LRe,_),b(c,vd,_),e(vd,$F),e($F,Vie),g(o6,Vie,null),e(vd,V9o),e(vd,Xie),e(Xie,X9o),b(c,xRe,_),b(c,ar,_),g(r6,ar,null),e(ar,z9o),e(ar,Td),e(Td,Q9o),e(Td,YN),e(YN,W9o),e(Td,H9o),e(Td,KN),e(KN,U9o),e(Td,J9o),e(ar,Y9o),e(ar,t6),e(t6,K9o),e(t6,zie),e(zie,Z9o),e(t6,exo),e(ar,oxo),e(ar,Kr),g(a6,Kr,null),e(Kr,rxo),e(Kr,Qie),e(Qie,txo),e(Kr,axo),e(Kr,Md),e(Md,nxo),e(Md,Wie),e(Wie,sxo),e(Md,lxo),e(Md,ZN),e(ZN,ixo),e(Md,dxo),e(Kr,cxo),e(Kr,Hie),e(Hie,mxo),e(Kr,fxo),g(n6,Kr,null),e(ar,gxo),e(ar,ze),g(s6,ze,null),e(ze,hxo),e(ze,Uie),e(Uie,uxo),e(ze,pxo),e(ze,Ka),e(Ka,_xo),e(Ka,Jie),e(Jie,bxo),e(Ka,Fxo),e(Ka,Yie),e(Yie,vxo),e(Ka,Txo),e(Ka,Kie),e(Kie,Mxo),e(Ka,Exo),e(ze,Cxo),e(ze,j),e(j,IF),e(IF,Zie),e(Zie,wxo),e(IF,Axo),e(IF,ej),e(ej,yxo),e(IF,Lxo),e(j,xxo),e(j,qF),e(qF,ede),e(ede,kxo),e(qF,Sxo),e(qF,oj),e(oj,Rxo),e(qF,Bxo),e(j,Pxo),e(j,NF),e(NF,ode),e(ode,$xo),e(NF,Ixo),e(NF,rj),e(rj,qxo),e(NF,Nxo),e(j,jxo),e(j,jF),e(jF,rde),e(rde,Dxo),e(jF,Gxo),e(jF,tj),e(tj,Oxo),e(jF,Vxo),e(j,Xxo),e(j,DF),e(DF,tde),e(tde,zxo),e(DF,Qxo),e(DF,aj),e(aj,Wxo),e(DF,Hxo),e(j,Uxo),e(j,GF),e(GF,ade),e(ade,Jxo),e(GF,Yxo),e(GF,nj),e(nj,Kxo),e(GF,Zxo),e(j,eko),e(j,OF),e(OF,nde),e(nde,oko),e(OF,rko),e(OF,sj),e(sj,tko),e(OF,ako),e(j,nko),e(j,VF),e(VF,sde),e(sde,sko),e(VF,lko),e(VF,lj),e(lj,iko),e(VF,dko),e(j,cko),e(j,XF),e(XF,lde),e(lde,mko),e(XF,fko),e(XF,ij),e(ij,gko),e(XF,hko),e(j,uko),e(j,zF),e(zF,ide),e(ide,pko),e(zF,_ko),e(zF,dj),e(dj,bko),e(zF,Fko),e(j,vko),e(j,QF),e(QF,dde),e(dde,Tko),e(QF,Mko),e(QF,cj),e(cj,Eko),e(QF,Cko),e(j,wko),e(j,WF),e(WF,cde),e(cde,Ako),e(WF,yko),e(WF,mj),e(mj,Lko),e(WF,xko),e(j,kko),e(j,HF),e(HF,mde),e(mde,Sko),e(HF,Rko),e(HF,fj),e(fj,Bko),e(HF,Pko),e(j,$ko),e(j,UF),e(UF,fde),e(fde,Iko),e(UF,qko),e(UF,gj),e(gj,Nko),e(UF,jko),e(j,Dko),e(j,JF),e(JF,gde),e(gde,Gko),e(JF,Oko),e(JF,hj),e(hj,Vko),e(JF,Xko),e(j,zko),e(j,YF),e(YF,hde),e(hde,Qko),e(YF,Wko),e(YF,uj),e(uj,Hko),e(YF,Uko),e(j,Jko),e(j,KF),e(KF,ude),e(ude,Yko),e(KF,Kko),e(KF,pj),e(pj,Zko),e(KF,eSo),e(j,oSo),e(j,ZF),e(ZF,pde),e(pde,rSo),e(ZF,tSo),e(ZF,_j),e(_j,aSo),e(ZF,nSo),e(j,sSo),e(j,ev),e(ev,_de),e(_de,lSo),e(ev,iSo),e(ev,bj),e(bj,dSo),e(ev,cSo),e(j,mSo),e(j,ov),e(ov,bde),e(bde,fSo),e(ov,gSo),e(ov,Fj),e(Fj,hSo),e(ov,uSo),e(j,pSo),e(j,rv),e(rv,Fde),e(Fde,_So),e(rv,bSo),e(rv,vj),e(vj,FSo),e(rv,vSo),e(j,TSo),e(j,tv),e(tv,vde),e(vde,MSo),e(tv,ESo),e(tv,Tj),e(Tj,CSo),e(tv,wSo),e(j,ASo),e(j,av),e(av,Tde),e(Tde,ySo),e(av,LSo),e(av,Mj),e(Mj,xSo),e(av,kSo),e(j,SSo),e(j,nv),e(nv,Mde),e(Mde,RSo),e(nv,BSo),e(nv,Ej),e(Ej,PSo),e(nv,$So),e(j,ISo),e(j,sv),e(sv,Ede),e(Ede,qSo),e(sv,NSo),e(sv,Cj),e(Cj,jSo),e(sv,DSo),e(j,GSo),e(j,lv),e(lv,Cde),e(Cde,OSo),e(lv,VSo),e(lv,wj),e(wj,XSo),e(lv,zSo),e(j,QSo),e(j,iv),e(iv,wde),e(wde,WSo),e(iv,HSo),e(iv,Aj),e(Aj,USo),e(iv,JSo),e(j,YSo),e(j,dv),e(dv,Ade),e(Ade,KSo),e(dv,ZSo),e(dv,yj),e(yj,eRo),e(dv,oRo),e(j,rRo),e(j,cv),e(cv,yde),e(yde,tRo),e(cv,aRo),e(cv,Lj),e(Lj,nRo),e(cv,sRo),e(j,lRo),e(j,mv),e(mv,Lde),e(Lde,iRo),e(mv,dRo),e(mv,xj),e(xj,cRo),e(mv,mRo),e(j,fRo),e(j,fv),e(fv,xde),e(xde,gRo),e(fv,hRo),e(fv,kj),e(kj,uRo),e(fv,pRo),e(j,_Ro),e(j,gv),e(gv,kde),e(kde,bRo),e(gv,FRo),e(gv,Sj),e(Sj,vRo),e(gv,TRo),e(j,MRo),e(j,hv),e(hv,Sde),e(Sde,ERo),e(hv,CRo),e(hv,Rj),e(Rj,wRo),e(hv,ARo),e(ze,yRo),e(ze,uv),e(uv,LRo),e(uv,Rde),e(Rde,xRo),e(uv,kRo),e(uv,Bde),e(Bde,SRo),e(ze,RRo),e(ze,Pde),e(Pde,BRo),e(ze,PRo),g(l6,ze,null),b(c,kRe,_),b(c,Ed,_),e(Ed,pv),e(pv,$de),g(i6,$de,null),e(Ed,$Ro),e(Ed,Ide),e(Ide,IRo),b(c,SRe,_),b(c,nr,_),g(d6,nr,null),e(nr,qRo),e(nr,Cd),e(Cd,NRo),e(Cd,Bj),e(Bj,jRo),e(Cd,DRo),e(Cd,Pj),e(Pj,GRo),e(Cd,ORo),e(nr,VRo),e(nr,c6),e(c6,XRo),e(c6,qde),e(qde,zRo),e(c6,QRo),e(nr,WRo),e(nr,Zr),g(m6,Zr,null),e(Zr,HRo),e(Zr,Nde),e(Nde,URo),e(Zr,JRo),e(Zr,wd),e(wd,YRo),e(wd,jde),e(jde,KRo),e(wd,ZRo),e(wd,$j),e($j,eBo),e(wd,oBo),e(Zr,rBo),e(Zr,Dde),e(Dde,tBo),e(Zr,aBo),g(f6,Zr,null),e(nr,nBo),e(nr,Qe),g(g6,Qe,null),e(Qe,sBo),e(Qe,Gde),e(Gde,lBo),e(Qe,iBo),e(Qe,Za),e(Za,dBo),e(Za,Ode),e(Ode,cBo),e(Za,mBo),e(Za,Vde),e(Vde,fBo),e(Za,gBo),e(Za,Xde),e(Xde,hBo),e(Za,uBo),e(Qe,pBo),e(Qe,R),e(R,_v),e(_v,zde),e(zde,_Bo),e(_v,bBo),e(_v,Ij),e(Ij,FBo),e(_v,vBo),e(R,TBo),e(R,bv),e(bv,Qde),e(Qde,MBo),e(bv,EBo),e(bv,qj),e(qj,CBo),e(bv,wBo),e(R,ABo),e(R,Fv),e(Fv,Wde),e(Wde,yBo),e(Fv,LBo),e(Fv,Nj),e(Nj,xBo),e(Fv,kBo),e(R,SBo),e(R,vv),e(vv,Hde),e(Hde,RBo),e(vv,BBo),e(vv,jj),e(jj,PBo),e(vv,$Bo),e(R,IBo),e(R,Tv),e(Tv,Ude),e(Ude,qBo),e(Tv,NBo),e(Tv,Dj),e(Dj,jBo),e(Tv,DBo),e(R,GBo),e(R,Mv),e(Mv,Jde),e(Jde,OBo),e(Mv,VBo),e(Mv,Gj),e(Gj,XBo),e(Mv,zBo),e(R,QBo),e(R,Ev),e(Ev,Yde),e(Yde,WBo),e(Ev,HBo),e(Ev,Oj),e(Oj,UBo),e(Ev,JBo),e(R,YBo),e(R,Cv),e(Cv,Kde),e(Kde,KBo),e(Cv,ZBo),e(Cv,Vj),e(Vj,ePo),e(Cv,oPo),e(R,rPo),e(R,wv),e(wv,Zde),e(Zde,tPo),e(wv,aPo),e(wv,Xj),e(Xj,nPo),e(wv,sPo),e(R,lPo),e(R,Av),e(Av,ece),e(ece,iPo),e(Av,dPo),e(Av,zj),e(zj,cPo),e(Av,mPo),e(R,fPo),e(R,yv),e(yv,oce),e(oce,gPo),e(yv,hPo),e(yv,Qj),e(Qj,uPo),e(yv,pPo),e(R,_Po),e(R,Lv),e(Lv,rce),e(rce,bPo),e(Lv,FPo),e(Lv,Wj),e(Wj,vPo),e(Lv,TPo),e(R,MPo),e(R,xv),e(xv,tce),e(tce,EPo),e(xv,CPo),e(xv,Hj),e(Hj,wPo),e(xv,APo),e(R,yPo),e(R,kv),e(kv,ace),e(ace,LPo),e(kv,xPo),e(kv,Uj),e(Uj,kPo),e(kv,SPo),e(R,RPo),e(R,Sv),e(Sv,nce),e(nce,BPo),e(Sv,PPo),e(Sv,Jj),e(Jj,$Po),e(Sv,IPo),e(R,qPo),e(R,Rv),e(Rv,sce),e(sce,NPo),e(Rv,jPo),e(Rv,Yj),e(Yj,DPo),e(Rv,GPo),e(R,OPo),e(R,Bv),e(Bv,lce),e(lce,VPo),e(Bv,XPo),e(Bv,Kj),e(Kj,zPo),e(Bv,QPo),e(R,WPo),e(R,Pv),e(Pv,ice),e(ice,HPo),e(Pv,UPo),e(Pv,Zj),e(Zj,JPo),e(Pv,YPo),e(R,KPo),e(R,$v),e($v,dce),e(dce,ZPo),e($v,e$o),e($v,eD),e(eD,o$o),e($v,r$o),e(R,t$o),e(R,Iv),e(Iv,cce),e(cce,a$o),e(Iv,n$o),e(Iv,oD),e(oD,s$o),e(Iv,l$o),e(R,i$o),e(R,qv),e(qv,mce),e(mce,d$o),e(qv,c$o),e(qv,rD),e(rD,m$o),e(qv,f$o),e(R,g$o),e(R,Nv),e(Nv,fce),e(fce,h$o),e(Nv,u$o),e(Nv,tD),e(tD,p$o),e(Nv,_$o),e(R,b$o),e(R,jv),e(jv,gce),e(gce,F$o),e(jv,v$o),e(jv,aD),e(aD,T$o),e(jv,M$o),e(R,E$o),e(R,Dv),e(Dv,hce),e(hce,C$o),e(Dv,w$o),e(Dv,nD),e(nD,A$o),e(Dv,y$o),e(R,L$o),e(R,Gv),e(Gv,uce),e(uce,x$o),e(Gv,k$o),e(Gv,sD),e(sD,S$o),e(Gv,R$o),e(R,B$o),e(R,Ov),e(Ov,pce),e(pce,P$o),e(Ov,$$o),e(Ov,lD),e(lD,I$o),e(Ov,q$o),e(R,N$o),e(R,Vv),e(Vv,_ce),e(_ce,j$o),e(Vv,D$o),e(Vv,iD),e(iD,G$o),e(Vv,O$o),e(R,V$o),e(R,Xv),e(Xv,bce),e(bce,X$o),e(Xv,z$o),e(Xv,dD),e(dD,Q$o),e(Xv,W$o),e(R,H$o),e(R,zv),e(zv,Fce),e(Fce,U$o),e(zv,J$o),e(zv,cD),e(cD,Y$o),e(zv,K$o),e(R,Z$o),e(R,Qv),e(Qv,vce),e(vce,eIo),e(Qv,oIo),e(Qv,mD),e(mD,rIo),e(Qv,tIo),e(R,aIo),e(R,Wv),e(Wv,Tce),e(Tce,nIo),e(Wv,sIo),e(Wv,fD),e(fD,lIo),e(Wv,iIo),e(R,dIo),e(R,Hv),e(Hv,Mce),e(Mce,cIo),e(Hv,mIo),e(Hv,gD),e(gD,fIo),e(Hv,gIo),e(R,hIo),e(R,Uv),e(Uv,Ece),e(Ece,uIo),e(Uv,pIo),e(Uv,hD),e(hD,_Io),e(Uv,bIo),e(R,FIo),e(R,Jv),e(Jv,Cce),e(Cce,vIo),e(Jv,TIo),e(Jv,uD),e(uD,MIo),e(Jv,EIo),e(R,CIo),e(R,Yv),e(Yv,wce),e(wce,wIo),e(Yv,AIo),e(Yv,pD),e(pD,yIo),e(Yv,LIo),e(R,xIo),e(R,Kv),e(Kv,Ace),e(Ace,kIo),e(Kv,SIo),e(Kv,_D),e(_D,RIo),e(Kv,BIo),e(R,PIo),e(R,Zv),e(Zv,yce),e(yce,$Io),e(Zv,IIo),e(Zv,bD),e(bD,qIo),e(Zv,NIo),e(R,jIo),e(R,eT),e(eT,Lce),e(Lce,DIo),e(eT,GIo),e(eT,FD),e(FD,OIo),e(eT,VIo),e(R,XIo),e(R,oT),e(oT,xce),e(xce,zIo),e(oT,QIo),e(oT,vD),e(vD,WIo),e(oT,HIo),e(Qe,UIo),e(Qe,rT),e(rT,JIo),e(rT,kce),e(kce,YIo),e(rT,KIo),e(rT,Sce),e(Sce,ZIo),e(Qe,eqo),e(Qe,Rce),e(Rce,oqo),e(Qe,rqo),g(h6,Qe,null),b(c,RRe,_),b(c,Ad,_),e(Ad,tT),e(tT,Bce),g(u6,Bce,null),e(Ad,tqo),e(Ad,Pce),e(Pce,aqo),b(c,BRe,_),b(c,sr,_),g(p6,sr,null),e(sr,nqo),e(sr,yd),e(yd,sqo),e(yd,TD),e(TD,lqo),e(yd,iqo),e(yd,MD),e(MD,dqo),e(yd,cqo),e(sr,mqo),e(sr,_6),e(_6,fqo),e(_6,$ce),e($ce,gqo),e(_6,hqo),e(sr,uqo),e(sr,et),g(b6,et,null),e(et,pqo),e(et,Ice),e(Ice,_qo),e(et,bqo),e(et,Ld),e(Ld,Fqo),e(Ld,qce),e(qce,vqo),e(Ld,Tqo),e(Ld,ED),e(ED,Mqo),e(Ld,Eqo),e(et,Cqo),e(et,Nce),e(Nce,wqo),e(et,Aqo),g(F6,et,null),e(sr,yqo),e(sr,We),g(v6,We,null),e(We,Lqo),e(We,jce),e(jce,xqo),e(We,kqo),e(We,en),e(en,Sqo),e(en,Dce),e(Dce,Rqo),e(en,Bqo),e(en,Gce),e(Gce,Pqo),e(en,$qo),e(en,Oce),e(Oce,Iqo),e(en,qqo),e(We,Nqo),e(We,Vce),e(Vce,aT),e(aT,Xce),e(Xce,jqo),e(aT,Dqo),e(aT,CD),e(CD,Gqo),e(aT,Oqo),e(We,Vqo),e(We,nT),e(nT,Xqo),e(nT,zce),e(zce,zqo),e(nT,Qqo),e(nT,Qce),e(Qce,Wqo),e(We,Hqo),e(We,Wce),e(Wce,Uqo),e(We,Jqo),g(T6,We,null),b(c,PRe,_),b(c,xd,_),e(xd,sT),e(sT,Hce),g(M6,Hce,null),e(xd,Yqo),e(xd,Uce),e(Uce,Kqo),b(c,$Re,_),b(c,lr,_),g(E6,lr,null),e(lr,Zqo),e(lr,kd),e(kd,eNo),e(kd,wD),e(wD,oNo),e(kd,rNo),e(kd,AD),e(AD,tNo),e(kd,aNo),e(lr,nNo),e(lr,C6),e(C6,sNo),e(C6,Jce),e(Jce,lNo),e(C6,iNo),e(lr,dNo),e(lr,ot),g(w6,ot,null),e(ot,cNo),e(ot,Yce),e(Yce,mNo),e(ot,fNo),e(ot,Sd),e(Sd,gNo),e(Sd,Kce),e(Kce,hNo),e(Sd,uNo),e(Sd,yD),e(yD,pNo),e(Sd,_No),e(ot,bNo),e(ot,Zce),e(Zce,FNo),e(ot,vNo),g(A6,ot,null),e(lr,TNo),e(lr,He),g(y6,He,null),e(He,MNo),e(He,eme),e(eme,ENo),e(He,CNo),e(He,on),e(on,wNo),e(on,ome),e(ome,ANo),e(on,yNo),e(on,rme),e(rme,LNo),e(on,xNo),e(on,tme),e(tme,kNo),e(on,SNo),e(He,RNo),e(He,ce),e(ce,lT),e(lT,ame),e(ame,BNo),e(lT,PNo),e(lT,LD),e(LD,$No),e(lT,INo),e(ce,qNo),e(ce,iT),e(iT,nme),e(nme,NNo),e(iT,jNo),e(iT,xD),e(xD,DNo),e(iT,GNo),e(ce,ONo),e(ce,Ds),e(Ds,sme),e(sme,VNo),e(Ds,XNo),e(Ds,kD),e(kD,zNo),e(Ds,QNo),e(Ds,SD),e(SD,WNo),e(Ds,HNo),e(ce,UNo),e(ce,dT),e(dT,lme),e(lme,JNo),e(dT,YNo),e(dT,RD),e(RD,KNo),e(dT,ZNo),e(ce,ejo),e(ce,fa),e(fa,ime),e(ime,ojo),e(fa,rjo),e(fa,BD),e(BD,tjo),e(fa,ajo),e(fa,PD),e(PD,njo),e(fa,sjo),e(fa,$D),e($D,ljo),e(fa,ijo),e(ce,djo),e(ce,cT),e(cT,dme),e(dme,cjo),e(cT,mjo),e(cT,ID),e(ID,fjo),e(cT,gjo),e(ce,hjo),e(ce,mT),e(mT,cme),e(cme,ujo),e(mT,pjo),e(mT,qD),e(qD,_jo),e(mT,bjo),e(ce,Fjo),e(ce,fT),e(fT,mme),e(mme,vjo),e(fT,Tjo),e(fT,ND),e(ND,Mjo),e(fT,Ejo),e(ce,Cjo),e(ce,gT),e(gT,fme),e(fme,wjo),e(gT,Ajo),e(gT,jD),e(jD,yjo),e(gT,Ljo),e(ce,xjo),e(ce,hT),e(hT,gme),e(gme,kjo),e(hT,Sjo),e(hT,DD),e(DD,Rjo),e(hT,Bjo),e(ce,Pjo),e(ce,uT),e(uT,hme),e(hme,$jo),e(uT,Ijo),e(uT,GD),e(GD,qjo),e(uT,Njo),e(ce,jjo),e(ce,pT),e(pT,ume),e(ume,Djo),e(pT,Gjo),e(pT,OD),e(OD,Ojo),e(pT,Vjo),e(He,Xjo),e(He,_T),e(_T,zjo),e(_T,pme),e(pme,Qjo),e(_T,Wjo),e(_T,_me),e(_me,Hjo),e(He,Ujo),e(He,bme),e(bme,Jjo),e(He,Yjo),g(L6,He,null),b(c,IRe,_),b(c,Rd,_),e(Rd,bT),e(bT,Fme),g(x6,Fme,null),e(Rd,Kjo),e(Rd,vme),e(vme,Zjo),b(c,qRe,_),b(c,ir,_),g(k6,ir,null),e(ir,eDo),e(ir,Bd),e(Bd,oDo),e(Bd,VD),e(VD,rDo),e(Bd,tDo),e(Bd,XD),e(XD,aDo),e(Bd,nDo),e(ir,sDo),e(ir,S6),e(S6,lDo),e(S6,Tme),e(Tme,iDo),e(S6,dDo),e(ir,cDo),e(ir,rt),g(R6,rt,null),e(rt,mDo),e(rt,Mme),e(Mme,fDo),e(rt,gDo),e(rt,Pd),e(Pd,hDo),e(Pd,Eme),e(Eme,uDo),e(Pd,pDo),e(Pd,zD),e(zD,_Do),e(Pd,bDo),e(rt,FDo),e(rt,Cme),e(Cme,vDo),e(rt,TDo),g(B6,rt,null),e(ir,MDo),e(ir,Ue),g(P6,Ue,null),e(Ue,EDo),e(Ue,wme),e(wme,CDo),e(Ue,wDo),e(Ue,rn),e(rn,ADo),e(rn,Ame),e(Ame,yDo),e(rn,LDo),e(rn,yme),e(yme,xDo),e(rn,kDo),e(rn,Lme),e(Lme,SDo),e(rn,RDo),e(Ue,BDo),e(Ue,xme),e(xme,FT),e(FT,kme),e(kme,PDo),e(FT,$Do),e(FT,QD),e(QD,IDo),e(FT,qDo),e(Ue,NDo),e(Ue,vT),e(vT,jDo),e(vT,Sme),e(Sme,DDo),e(vT,GDo),e(vT,Rme),e(Rme,ODo),e(Ue,VDo),e(Ue,Bme),e(Bme,XDo),e(Ue,zDo),g($6,Ue,null),b(c,NRe,_),b(c,$d,_),e($d,TT),e(TT,Pme),g(I6,Pme,null),e($d,QDo),e($d,$me),e($me,WDo),b(c,jRe,_),b(c,dr,_),g(q6,dr,null),e(dr,HDo),e(dr,Id),e(Id,UDo),e(Id,WD),e(WD,JDo),e(Id,YDo),e(Id,HD),e(HD,KDo),e(Id,ZDo),e(dr,eGo),e(dr,N6),e(N6,oGo),e(N6,Ime),e(Ime,rGo),e(N6,tGo),e(dr,aGo),e(dr,tt),g(j6,tt,null),e(tt,nGo),e(tt,qme),e(qme,sGo),e(tt,lGo),e(tt,qd),e(qd,iGo),e(qd,Nme),e(Nme,dGo),e(qd,cGo),e(qd,UD),e(UD,mGo),e(qd,fGo),e(tt,gGo),e(tt,jme),e(jme,hGo),e(tt,uGo),g(D6,tt,null),e(dr,pGo),e(dr,Je),g(G6,Je,null),e(Je,_Go),e(Je,Dme),e(Dme,bGo),e(Je,FGo),e(Je,tn),e(tn,vGo),e(tn,Gme),e(Gme,TGo),e(tn,MGo),e(tn,Ome),e(Ome,EGo),e(tn,CGo),e(tn,Vme),e(Vme,wGo),e(tn,AGo),e(Je,yGo),e(Je,Se),e(Se,MT),e(MT,Xme),e(Xme,LGo),e(MT,xGo),e(MT,JD),e(JD,kGo),e(MT,SGo),e(Se,RGo),e(Se,ET),e(ET,zme),e(zme,BGo),e(ET,PGo),e(ET,YD),e(YD,$Go),e(ET,IGo),e(Se,qGo),e(Se,CT),e(CT,Qme),e(Qme,NGo),e(CT,jGo),e(CT,KD),e(KD,DGo),e(CT,GGo),e(Se,OGo),e(Se,wT),e(wT,Wme),e(Wme,VGo),e(wT,XGo),e(wT,ZD),e(ZD,zGo),e(wT,QGo),e(Se,WGo),e(Se,AT),e(AT,Hme),e(Hme,HGo),e(AT,UGo),e(AT,eG),e(eG,JGo),e(AT,YGo),e(Se,KGo),e(Se,yT),e(yT,Ume),e(Ume,ZGo),e(yT,eOo),e(yT,oG),e(oG,oOo),e(yT,rOo),e(Se,tOo),e(Se,LT),e(LT,Jme),e(Jme,aOo),e(LT,nOo),e(LT,rG),e(rG,sOo),e(LT,lOo),e(Se,iOo),e(Se,xT),e(xT,Yme),e(Yme,dOo),e(xT,cOo),e(xT,tG),e(tG,mOo),e(xT,fOo),e(Je,gOo),e(Je,kT),e(kT,hOo),e(kT,Kme),e(Kme,uOo),e(kT,pOo),e(kT,Zme),e(Zme,_Oo),e(Je,bOo),e(Je,efe),e(efe,FOo),e(Je,vOo),g(O6,Je,null),b(c,DRe,_),b(c,Nd,_),e(Nd,ST),e(ST,ofe),g(V6,ofe,null),e(Nd,TOo),e(Nd,rfe),e(rfe,MOo),b(c,GRe,_),b(c,cr,_),g(X6,cr,null),e(cr,EOo),e(cr,jd),e(jd,COo),e(jd,aG),e(aG,wOo),e(jd,AOo),e(jd,nG),e(nG,yOo),e(jd,LOo),e(cr,xOo),e(cr,z6),e(z6,kOo),e(z6,tfe),e(tfe,SOo),e(z6,ROo),e(cr,BOo),e(cr,at),g(Q6,at,null),e(at,POo),e(at,afe),e(afe,$Oo),e(at,IOo),e(at,Dd),e(Dd,qOo),e(Dd,nfe),e(nfe,NOo),e(Dd,jOo),e(Dd,sG),e(sG,DOo),e(Dd,GOo),e(at,OOo),e(at,sfe),e(sfe,VOo),e(at,XOo),g(W6,at,null),e(cr,zOo),e(cr,Ye),g(H6,Ye,null),e(Ye,QOo),e(Ye,lfe),e(lfe,WOo),e(Ye,HOo),e(Ye,an),e(an,UOo),e(an,ife),e(ife,JOo),e(an,YOo),e(an,dfe),e(dfe,KOo),e(an,ZOo),e(an,cfe),e(cfe,eVo),e(an,oVo),e(Ye,rVo),e(Ye,nn),e(nn,RT),e(RT,mfe),e(mfe,tVo),e(RT,aVo),e(RT,lG),e(lG,nVo),e(RT,sVo),e(nn,lVo),e(nn,BT),e(BT,ffe),e(ffe,iVo),e(BT,dVo),e(BT,iG),e(iG,cVo),e(BT,mVo),e(nn,fVo),e(nn,PT),e(PT,gfe),e(gfe,gVo),e(PT,hVo),e(PT,dG),e(dG,uVo),e(PT,pVo),e(nn,_Vo),e(nn,$T),e($T,hfe),e(hfe,bVo),e($T,FVo),e($T,cG),e(cG,vVo),e($T,TVo),e(Ye,MVo),e(Ye,IT),e(IT,EVo),e(IT,ufe),e(ufe,CVo),e(IT,wVo),e(IT,pfe),e(pfe,AVo),e(Ye,yVo),e(Ye,_fe),e(_fe,LVo),e(Ye,xVo),g(U6,Ye,null),b(c,ORe,_),b(c,Gd,_),e(Gd,qT),e(qT,bfe),g(J6,bfe,null),e(Gd,kVo),e(Gd,Ffe),e(Ffe,SVo),b(c,VRe,_),b(c,mr,_),g(Y6,mr,null),e(mr,RVo),e(mr,Od),e(Od,BVo),e(Od,mG),e(mG,PVo),e(Od,$Vo),e(Od,fG),e(fG,IVo),e(Od,qVo),e(mr,NVo),e(mr,K6),e(K6,jVo),e(K6,vfe),e(vfe,DVo),e(K6,GVo),e(mr,OVo),e(mr,nt),g(Z6,nt,null),e(nt,VVo),e(nt,Tfe),e(Tfe,XVo),e(nt,zVo),e(nt,Vd),e(Vd,QVo),e(Vd,Mfe),e(Mfe,WVo),e(Vd,HVo),e(Vd,gG),e(gG,UVo),e(Vd,JVo),e(nt,YVo),e(nt,Efe),e(Efe,KVo),e(nt,ZVo),g(e0,nt,null),e(mr,eXo),e(mr,Ke),g(o0,Ke,null),e(Ke,oXo),e(Ke,Cfe),e(Cfe,rXo),e(Ke,tXo),e(Ke,sn),e(sn,aXo),e(sn,wfe),e(wfe,nXo),e(sn,sXo),e(sn,Afe),e(Afe,lXo),e(sn,iXo),e(sn,yfe),e(yfe,dXo),e(sn,cXo),e(Ke,mXo),e(Ke,Re),e(Re,NT),e(NT,Lfe),e(Lfe,fXo),e(NT,gXo),e(NT,hG),e(hG,hXo),e(NT,uXo),e(Re,pXo),e(Re,jT),e(jT,xfe),e(xfe,_Xo),e(jT,bXo),e(jT,uG),e(uG,FXo),e(jT,vXo),e(Re,TXo),e(Re,DT),e(DT,kfe),e(kfe,MXo),e(DT,EXo),e(DT,pG),e(pG,CXo),e(DT,wXo),e(Re,AXo),e(Re,GT),e(GT,Sfe),e(Sfe,yXo),e(GT,LXo),e(GT,_G),e(_G,xXo),e(GT,kXo),e(Re,SXo),e(Re,OT),e(OT,Rfe),e(Rfe,RXo),e(OT,BXo),e(OT,bG),e(bG,PXo),e(OT,$Xo),e(Re,IXo),e(Re,VT),e(VT,Bfe),e(Bfe,qXo),e(VT,NXo),e(VT,FG),e(FG,jXo),e(VT,DXo),e(Re,GXo),e(Re,XT),e(XT,Pfe),e(Pfe,OXo),e(XT,VXo),e(XT,vG),e(vG,XXo),e(XT,zXo),e(Re,QXo),e(Re,zT),e(zT,$fe),e($fe,WXo),e(zT,HXo),e(zT,TG),e(TG,UXo),e(zT,JXo),e(Ke,YXo),e(Ke,QT),e(QT,KXo),e(QT,Ife),e(Ife,ZXo),e(QT,ezo),e(QT,qfe),e(qfe,ozo),e(Ke,rzo),e(Ke,Nfe),e(Nfe,tzo),e(Ke,azo),g(r0,Ke,null),b(c,XRe,_),b(c,Xd,_),e(Xd,WT),e(WT,jfe),g(t0,jfe,null),e(Xd,nzo),e(Xd,Dfe),e(Dfe,szo),b(c,zRe,_),b(c,fr,_),g(a0,fr,null),e(fr,lzo),e(fr,zd),e(zd,izo),e(zd,MG),e(MG,dzo),e(zd,czo),e(zd,EG),e(EG,mzo),e(zd,fzo),e(fr,gzo),e(fr,n0),e(n0,hzo),e(n0,Gfe),e(Gfe,uzo),e(n0,pzo),e(fr,_zo),e(fr,st),g(s0,st,null),e(st,bzo),e(st,Ofe),e(Ofe,Fzo),e(st,vzo),e(st,Qd),e(Qd,Tzo),e(Qd,Vfe),e(Vfe,Mzo),e(Qd,Ezo),e(Qd,CG),e(CG,Czo),e(Qd,wzo),e(st,Azo),e(st,Xfe),e(Xfe,yzo),e(st,Lzo),g(l0,st,null),e(fr,xzo),e(fr,Ze),g(i0,Ze,null),e(Ze,kzo),e(Ze,zfe),e(zfe,Szo),e(Ze,Rzo),e(Ze,ln),e(ln,Bzo),e(ln,Qfe),e(Qfe,Pzo),e(ln,$zo),e(ln,Wfe),e(Wfe,Izo),e(ln,qzo),e(ln,Hfe),e(Hfe,Nzo),e(ln,jzo),e(Ze,Dzo),e(Ze,d0),e(d0,HT),e(HT,Ufe),e(Ufe,Gzo),e(HT,Ozo),e(HT,wG),e(wG,Vzo),e(HT,Xzo),e(d0,zzo),e(d0,UT),e(UT,Jfe),e(Jfe,Qzo),e(UT,Wzo),e(UT,AG),e(AG,Hzo),e(UT,Uzo),e(Ze,Jzo),e(Ze,JT),e(JT,Yzo),e(JT,Yfe),e(Yfe,Kzo),e(JT,Zzo),e(JT,Kfe),e(Kfe,eQo),e(Ze,oQo),e(Ze,Zfe),e(Zfe,rQo),e(Ze,tQo),g(c0,Ze,null),b(c,QRe,_),b(c,Wd,_),e(Wd,YT),e(YT,ege),g(m0,ege,null),e(Wd,aQo),e(Wd,oge),e(oge,nQo),b(c,WRe,_),b(c,gr,_),g(f0,gr,null),e(gr,sQo),e(gr,Hd),e(Hd,lQo),e(Hd,yG),e(yG,iQo),e(Hd,dQo),e(Hd,LG),e(LG,cQo),e(Hd,mQo),e(gr,fQo),e(gr,g0),e(g0,gQo),e(g0,rge),e(rge,hQo),e(g0,uQo),e(gr,pQo),e(gr,lt),g(h0,lt,null),e(lt,_Qo),e(lt,tge),e(tge,bQo),e(lt,FQo),e(lt,Ud),e(Ud,vQo),e(Ud,age),e(age,TQo),e(Ud,MQo),e(Ud,xG),e(xG,EQo),e(Ud,CQo),e(lt,wQo),e(lt,nge),e(nge,AQo),e(lt,yQo),g(u0,lt,null),e(gr,LQo),e(gr,eo),g(p0,eo,null),e(eo,xQo),e(eo,sge),e(sge,kQo),e(eo,SQo),e(eo,dn),e(dn,RQo),e(dn,lge),e(lge,BQo),e(dn,PQo),e(dn,ige),e(ige,$Qo),e(dn,IQo),e(dn,dge),e(dge,qQo),e(dn,NQo),e(eo,jQo),e(eo,cn),e(cn,KT),e(KT,cge),e(cge,DQo),e(KT,GQo),e(KT,kG),e(kG,OQo),e(KT,VQo),e(cn,XQo),e(cn,ZT),e(ZT,mge),e(mge,zQo),e(ZT,QQo),e(ZT,SG),e(SG,WQo),e(ZT,HQo),e(cn,UQo),e(cn,e1),e(e1,fge),e(fge,JQo),e(e1,YQo),e(e1,RG),e(RG,KQo),e(e1,ZQo),e(cn,eWo),e(cn,o1),e(o1,gge),e(gge,oWo),e(o1,rWo),e(o1,BG),e(BG,tWo),e(o1,aWo),e(eo,nWo),e(eo,r1),e(r1,sWo),e(r1,hge),e(hge,lWo),e(r1,iWo),e(r1,uge),e(uge,dWo),e(eo,cWo),e(eo,pge),e(pge,mWo),e(eo,fWo),g(_0,eo,null),b(c,HRe,_),b(c,Jd,_),e(Jd,t1),e(t1,_ge),g(b0,_ge,null),e(Jd,gWo),e(Jd,bge),e(bge,hWo),b(c,URe,_),b(c,hr,_),g(F0,hr,null),e(hr,uWo),e(hr,Yd),e(Yd,pWo),e(Yd,PG),e(PG,_Wo),e(Yd,bWo),e(Yd,$G),e($G,FWo),e(Yd,vWo),e(hr,TWo),e(hr,v0),e(v0,MWo),e(v0,Fge),e(Fge,EWo),e(v0,CWo),e(hr,wWo),e(hr,it),g(T0,it,null),e(it,AWo),e(it,vge),e(vge,yWo),e(it,LWo),e(it,Kd),e(Kd,xWo),e(Kd,Tge),e(Tge,kWo),e(Kd,SWo),e(Kd,IG),e(IG,RWo),e(Kd,BWo),e(it,PWo),e(it,Mge),e(Mge,$Wo),e(it,IWo),g(M0,it,null),e(hr,qWo),e(hr,oo),g(E0,oo,null),e(oo,NWo),e(oo,Ege),e(Ege,jWo),e(oo,DWo),e(oo,mn),e(mn,GWo),e(mn,Cge),e(Cge,OWo),e(mn,VWo),e(mn,wge),e(wge,XWo),e(mn,zWo),e(mn,Age),e(Age,QWo),e(mn,WWo),e(oo,HWo),e(oo,Zd),e(Zd,a1),e(a1,yge),e(yge,UWo),e(a1,JWo),e(a1,qG),e(qG,YWo),e(a1,KWo),e(Zd,ZWo),e(Zd,n1),e(n1,Lge),e(Lge,eHo),e(n1,oHo),e(n1,NG),e(NG,rHo),e(n1,tHo),e(Zd,aHo),e(Zd,s1),e(s1,xge),e(xge,nHo),e(s1,sHo),e(s1,jG),e(jG,lHo),e(s1,iHo),e(oo,dHo),e(oo,l1),e(l1,cHo),e(l1,kge),e(kge,mHo),e(l1,fHo),e(l1,Sge),e(Sge,gHo),e(oo,hHo),e(oo,Rge),e(Rge,uHo),e(oo,pHo),g(C0,oo,null),b(c,JRe,_),b(c,ec,_),e(ec,i1),e(i1,Bge),g(w0,Bge,null),e(ec,_Ho),e(ec,Pge),e(Pge,bHo),b(c,YRe,_),b(c,ur,_),g(A0,ur,null),e(ur,FHo),e(ur,oc),e(oc,vHo),e(oc,DG),e(DG,THo),e(oc,MHo),e(oc,GG),e(GG,EHo),e(oc,CHo),e(ur,wHo),e(ur,y0),e(y0,AHo),e(y0,$ge),e($ge,yHo),e(y0,LHo),e(ur,xHo),e(ur,dt),g(L0,dt,null),e(dt,kHo),e(dt,Ige),e(Ige,SHo),e(dt,RHo),e(dt,rc),e(rc,BHo),e(rc,qge),e(qge,PHo),e(rc,$Ho),e(rc,OG),e(OG,IHo),e(rc,qHo),e(dt,NHo),e(dt,Nge),e(Nge,jHo),e(dt,DHo),g(x0,dt,null),e(ur,GHo),e(ur,ro),g(k0,ro,null),e(ro,OHo),e(ro,jge),e(jge,VHo),e(ro,XHo),e(ro,fn),e(fn,zHo),e(fn,Dge),e(Dge,QHo),e(fn,WHo),e(fn,Gge),e(Gge,HHo),e(fn,UHo),e(fn,Oge),e(Oge,JHo),e(fn,YHo),e(ro,KHo),e(ro,Vge),e(Vge,d1),e(d1,Xge),e(Xge,ZHo),e(d1,eUo),e(d1,VG),e(VG,oUo),e(d1,rUo),e(ro,tUo),e(ro,c1),e(c1,aUo),e(c1,zge),e(zge,nUo),e(c1,sUo),e(c1,Qge),e(Qge,lUo),e(ro,iUo),e(ro,Wge),e(Wge,dUo),e(ro,cUo),g(S0,ro,null),b(c,KRe,_),b(c,tc,_),e(tc,m1),e(m1,Hge),g(R0,Hge,null),e(tc,mUo),e(tc,Uge),e(Uge,fUo),b(c,ZRe,_),b(c,pr,_),g(B0,pr,null),e(pr,gUo),e(pr,ac),e(ac,hUo),e(ac,XG),e(XG,uUo),e(ac,pUo),e(ac,zG),e(zG,_Uo),e(ac,bUo),e(pr,FUo),e(pr,P0),e(P0,vUo),e(P0,Jge),e(Jge,TUo),e(P0,MUo),e(pr,EUo),e(pr,ct),g($0,ct,null),e(ct,CUo),e(ct,Yge),e(Yge,wUo),e(ct,AUo),e(ct,nc),e(nc,yUo),e(nc,Kge),e(Kge,LUo),e(nc,xUo),e(nc,QG),e(QG,kUo),e(nc,SUo),e(ct,RUo),e(ct,Zge),e(Zge,BUo),e(ct,PUo),g(I0,ct,null),e(pr,$Uo),e(pr,to),g(q0,to,null),e(to,IUo),e(to,ehe),e(ehe,qUo),e(to,NUo),e(to,gn),e(gn,jUo),e(gn,ohe),e(ohe,DUo),e(gn,GUo),e(gn,rhe),e(rhe,OUo),e(gn,VUo),e(gn,the),e(the,XUo),e(gn,zUo),e(to,QUo),e(to,ahe),e(ahe,f1),e(f1,nhe),e(nhe,WUo),e(f1,HUo),e(f1,WG),e(WG,UUo),e(f1,JUo),e(to,YUo),e(to,g1),e(g1,KUo),e(g1,she),e(she,ZUo),e(g1,eJo),e(g1,lhe),e(lhe,oJo),e(to,rJo),e(to,ihe),e(ihe,tJo),e(to,aJo),g(N0,to,null),b(c,eBe,_),b(c,sc,_),e(sc,h1),e(h1,dhe),g(j0,dhe,null),e(sc,nJo),e(sc,che),e(che,sJo),b(c,oBe,_),b(c,_r,_),g(D0,_r,null),e(_r,lJo),e(_r,lc),e(lc,iJo),e(lc,HG),e(HG,dJo),e(lc,cJo),e(lc,UG),e(UG,mJo),e(lc,fJo),e(_r,gJo),e(_r,G0),e(G0,hJo),e(G0,mhe),e(mhe,uJo),e(G0,pJo),e(_r,_Jo),e(_r,mt),g(O0,mt,null),e(mt,bJo),e(mt,fhe),e(fhe,FJo),e(mt,vJo),e(mt,ic),e(ic,TJo),e(ic,ghe),e(ghe,MJo),e(ic,EJo),e(ic,JG),e(JG,CJo),e(ic,wJo),e(mt,AJo),e(mt,hhe),e(hhe,yJo),e(mt,LJo),g(V0,mt,null),e(_r,xJo),e(_r,ao),g(X0,ao,null),e(ao,kJo),e(ao,uhe),e(uhe,SJo),e(ao,RJo),e(ao,hn),e(hn,BJo),e(hn,phe),e(phe,PJo),e(hn,$Jo),e(hn,_he),e(_he,IJo),e(hn,qJo),e(hn,bhe),e(bhe,NJo),e(hn,jJo),e(ao,DJo),e(ao,dc),e(dc,u1),e(u1,Fhe),e(Fhe,GJo),e(u1,OJo),e(u1,YG),e(YG,VJo),e(u1,XJo),e(dc,zJo),e(dc,p1),e(p1,vhe),e(vhe,QJo),e(p1,WJo),e(p1,KG),e(KG,HJo),e(p1,UJo),e(dc,JJo),e(dc,_1),e(_1,The),e(The,YJo),e(_1,KJo),e(_1,ZG),e(ZG,ZJo),e(_1,eYo),e(ao,oYo),e(ao,b1),e(b1,rYo),e(b1,Mhe),e(Mhe,tYo),e(b1,aYo),e(b1,Ehe),e(Ehe,nYo),e(ao,sYo),e(ao,Che),e(Che,lYo),e(ao,iYo),g(z0,ao,null),b(c,rBe,_),b(c,cc,_),e(cc,F1),e(F1,whe),g(Q0,whe,null),e(cc,dYo),e(cc,Ahe),e(Ahe,cYo),b(c,tBe,_),b(c,br,_),g(W0,br,null),e(br,mYo),e(br,mc),e(mc,fYo),e(mc,eO),e(eO,gYo),e(mc,hYo),e(mc,oO),e(oO,uYo),e(mc,pYo),e(br,_Yo),e(br,H0),e(H0,bYo),e(H0,yhe),e(yhe,FYo),e(H0,vYo),e(br,TYo),e(br,ft),g(U0,ft,null),e(ft,MYo),e(ft,Lhe),e(Lhe,EYo),e(ft,CYo),e(ft,fc),e(fc,wYo),e(fc,xhe),e(xhe,AYo),e(fc,yYo),e(fc,rO),e(rO,LYo),e(fc,xYo),e(ft,kYo),e(ft,khe),e(khe,SYo),e(ft,RYo),g(J0,ft,null),e(br,BYo),e(br,no),g(Y0,no,null),e(no,PYo),e(no,She),e(She,$Yo),e(no,IYo),e(no,un),e(un,qYo),e(un,Rhe),e(Rhe,NYo),e(un,jYo),e(un,Bhe),e(Bhe,DYo),e(un,GYo),e(un,Phe),e(Phe,OYo),e(un,VYo),e(no,XYo),e(no,$he),e($he,v1),e(v1,Ihe),e(Ihe,zYo),e(v1,QYo),e(v1,tO),e(tO,WYo),e(v1,HYo),e(no,UYo),e(no,T1),e(T1,JYo),e(T1,qhe),e(qhe,YYo),e(T1,KYo),e(T1,Nhe),e(Nhe,ZYo),e(no,eKo),e(no,jhe),e(jhe,oKo),e(no,rKo),g(K0,no,null),b(c,aBe,_),b(c,gc,_),e(gc,M1),e(M1,Dhe),g(Z0,Dhe,null),e(gc,tKo),e(gc,Ghe),e(Ghe,aKo),b(c,nBe,_),b(c,Fr,_),g(ey,Fr,null),e(Fr,nKo),e(Fr,hc),e(hc,sKo),e(hc,aO),e(aO,lKo),e(hc,iKo),e(hc,nO),e(nO,dKo),e(hc,cKo),e(Fr,mKo),e(Fr,oy),e(oy,fKo),e(oy,Ohe),e(Ohe,gKo),e(oy,hKo),e(Fr,uKo),e(Fr,gt),g(ry,gt,null),e(gt,pKo),e(gt,Vhe),e(Vhe,_Ko),e(gt,bKo),e(gt,uc),e(uc,FKo),e(uc,Xhe),e(Xhe,vKo),e(uc,TKo),e(uc,sO),e(sO,MKo),e(uc,EKo),e(gt,CKo),e(gt,zhe),e(zhe,wKo),e(gt,AKo),g(ty,gt,null),e(Fr,yKo),e(Fr,ho),g(ay,ho,null),e(ho,LKo),e(ho,Qhe),e(Qhe,xKo),e(ho,kKo),e(ho,pn),e(pn,SKo),e(pn,Whe),e(Whe,RKo),e(pn,BKo),e(pn,Hhe),e(Hhe,PKo),e(pn,$Ko),e(pn,Uhe),e(Uhe,IKo),e(pn,qKo),e(ho,NKo),e(ho,x),e(x,E1),e(E1,Jhe),e(Jhe,jKo),e(E1,DKo),e(E1,lO),e(lO,GKo),e(E1,OKo),e(x,VKo),e(x,C1),e(C1,Yhe),e(Yhe,XKo),e(C1,zKo),e(C1,iO),e(iO,QKo),e(C1,WKo),e(x,HKo),e(x,w1),e(w1,Khe),e(Khe,UKo),e(w1,JKo),e(w1,dO),e(dO,YKo),e(w1,KKo),e(x,ZKo),e(x,A1),e(A1,Zhe),e(Zhe,eZo),e(A1,oZo),e(A1,cO),e(cO,rZo),e(A1,tZo),e(x,aZo),e(x,y1),e(y1,eue),e(eue,nZo),e(y1,sZo),e(y1,mO),e(mO,lZo),e(y1,iZo),e(x,dZo),e(x,L1),e(L1,oue),e(oue,cZo),e(L1,mZo),e(L1,fO),e(fO,fZo),e(L1,gZo),e(x,hZo),e(x,x1),e(x1,rue),e(rue,uZo),e(x1,pZo),e(x1,gO),e(gO,_Zo),e(x1,bZo),e(x,FZo),e(x,k1),e(k1,tue),e(tue,vZo),e(k1,TZo),e(k1,hO),e(hO,MZo),e(k1,EZo),e(x,CZo),e(x,S1),e(S1,aue),e(aue,wZo),e(S1,AZo),e(S1,uO),e(uO,yZo),e(S1,LZo),e(x,xZo),e(x,R1),e(R1,nue),e(nue,kZo),e(R1,SZo),e(R1,pO),e(pO,RZo),e(R1,BZo),e(x,PZo),e(x,B1),e(B1,sue),e(sue,$Zo),e(B1,IZo),e(B1,_O),e(_O,qZo),e(B1,NZo),e(x,jZo),e(x,P1),e(P1,lue),e(lue,DZo),e(P1,GZo),e(P1,bO),e(bO,OZo),e(P1,VZo),e(x,XZo),e(x,$1),e($1,iue),e(iue,zZo),e($1,QZo),e($1,FO),e(FO,WZo),e($1,HZo),e(x,UZo),e(x,I1),e(I1,due),e(due,JZo),e(I1,YZo),e(I1,vO),e(vO,KZo),e(I1,ZZo),e(x,eer),e(x,q1),e(q1,cue),e(cue,oer),e(q1,rer),e(q1,TO),e(TO,ter),e(q1,aer),e(x,ner),e(x,N1),e(N1,mue),e(mue,ser),e(N1,ler),e(N1,MO),e(MO,ier),e(N1,der),e(x,cer),e(x,Gs),e(Gs,fue),e(fue,mer),e(Gs,fer),e(Gs,EO),e(EO,ger),e(Gs,her),e(Gs,CO),e(CO,uer),e(Gs,per),e(x,_er),e(x,j1),e(j1,gue),e(gue,ber),e(j1,Fer),e(j1,wO),e(wO,ver),e(j1,Ter),e(x,Mer),e(x,D1),e(D1,hue),e(hue,Eer),e(D1,Cer),e(D1,AO),e(AO,wer),e(D1,Aer),e(x,yer),e(x,G1),e(G1,uue),e(uue,Ler),e(G1,xer),e(G1,yO),e(yO,ker),e(G1,Ser),e(x,Rer),e(x,O1),e(O1,pue),e(pue,Ber),e(O1,Per),e(O1,LO),e(LO,$er),e(O1,Ier),e(x,qer),e(x,V1),e(V1,_ue),e(_ue,Ner),e(V1,jer),e(V1,xO),e(xO,Der),e(V1,Ger),e(x,Oer),e(x,X1),e(X1,bue),e(bue,Ver),e(X1,Xer),e(X1,kO),e(kO,zer),e(X1,Qer),e(x,Wer),e(x,z1),e(z1,Fue),e(Fue,Her),e(z1,Uer),e(z1,SO),e(SO,Jer),e(z1,Yer),e(x,Ker),e(x,Q1),e(Q1,vue),e(vue,Zer),e(Q1,eor),e(Q1,RO),e(RO,oor),e(Q1,ror),e(x,tor),e(x,W1),e(W1,Tue),e(Tue,aor),e(W1,nor),e(W1,BO),e(BO,sor),e(W1,lor),e(x,ior),e(x,H1),e(H1,Mue),e(Mue,dor),e(H1,cor),e(H1,PO),e(PO,mor),e(H1,gor),e(x,hor),e(x,U1),e(U1,Eue),e(Eue,uor),e(U1,por),e(U1,$O),e($O,_or),e(U1,bor),e(x,For),e(x,J1),e(J1,Cue),e(Cue,vor),e(J1,Tor),e(J1,IO),e(IO,Mor),e(J1,Eor),e(x,Cor),e(x,Y1),e(Y1,wue),e(wue,wor),e(Y1,Aor),e(Y1,qO),e(qO,yor),e(Y1,Lor),e(x,xor),e(x,K1),e(K1,Aue),e(Aue,kor),e(K1,Sor),e(K1,NO),e(NO,Ror),e(K1,Bor),e(x,Por),e(x,Z1),e(Z1,yue),e(yue,$or),e(Z1,Ior),e(Z1,jO),e(jO,qor),e(Z1,Nor),e(x,jor),e(x,eM),e(eM,Lue),e(Lue,Dor),e(eM,Gor),e(eM,DO),e(DO,Oor),e(eM,Vor),e(x,Xor),e(x,oM),e(oM,xue),e(xue,zor),e(oM,Qor),e(oM,GO),e(GO,Wor),e(oM,Hor),e(x,Uor),e(x,rM),e(rM,kue),e(kue,Jor),e(rM,Yor),e(rM,OO),e(OO,Kor),e(rM,Zor),e(x,err),e(x,tM),e(tM,Sue),e(Sue,orr),e(tM,rrr),e(tM,VO),e(VO,trr),e(tM,arr),e(x,nrr),e(x,aM),e(aM,Rue),e(Rue,srr),e(aM,lrr),e(aM,XO),e(XO,irr),e(aM,drr),e(x,crr),e(x,nM),e(nM,Bue),e(Bue,mrr),e(nM,frr),e(nM,zO),e(zO,grr),e(nM,hrr),e(x,urr),e(x,sM),e(sM,Pue),e(Pue,prr),e(sM,_rr),e(sM,QO),e(QO,brr),e(sM,Frr),e(x,vrr),e(x,lM),e(lM,$ue),e($ue,Trr),e(lM,Mrr),e(lM,WO),e(WO,Err),e(lM,Crr),e(x,wrr),e(x,iM),e(iM,Iue),e(Iue,Arr),e(iM,yrr),e(iM,HO),e(HO,Lrr),e(iM,xrr),e(x,krr),e(x,dM),e(dM,que),e(que,Srr),e(dM,Rrr),e(dM,UO),e(UO,Brr),e(dM,Prr),e(x,$rr),e(x,cM),e(cM,Nue),e(Nue,Irr),e(cM,qrr),e(cM,JO),e(JO,Nrr),e(cM,jrr),e(x,Drr),e(x,mM),e(mM,jue),e(jue,Grr),e(mM,Orr),e(mM,YO),e(YO,Vrr),e(mM,Xrr),e(ho,zrr),e(ho,Due),e(Due,Qrr),e(ho,Wrr),g(ny,ho,null),b(c,sBe,_),b(c,pc,_),e(pc,fM),e(fM,Gue),g(sy,Gue,null),e(pc,Hrr),e(pc,Oue),e(Oue,Urr),b(c,lBe,_),b(c,vr,_),g(ly,vr,null),e(vr,Jrr),e(vr,_c),e(_c,Yrr),e(_c,KO),e(KO,Krr),e(_c,Zrr),e(_c,ZO),e(ZO,etr),e(_c,otr),e(vr,rtr),e(vr,iy),e(iy,ttr),e(iy,Vue),e(Vue,atr),e(iy,ntr),e(vr,str),e(vr,ht),g(dy,ht,null),e(ht,ltr),e(ht,Xue),e(Xue,itr),e(ht,dtr),e(ht,bc),e(bc,ctr),e(bc,zue),e(zue,mtr),e(bc,ftr),e(bc,eV),e(eV,gtr),e(bc,htr),e(ht,utr),e(ht,Que),e(Que,ptr),e(ht,_tr),g(cy,ht,null),e(vr,btr),e(vr,uo),g(my,uo,null),e(uo,Ftr),e(uo,Wue),e(Wue,vtr),e(uo,Ttr),e(uo,_n),e(_n,Mtr),e(_n,Hue),e(Hue,Etr),e(_n,Ctr),e(_n,Uue),e(Uue,wtr),e(_n,Atr),e(_n,Jue),e(Jue,ytr),e(_n,Ltr),e(uo,xtr),e(uo,H),e(H,gM),e(gM,Yue),e(Yue,ktr),e(gM,Str),e(gM,oV),e(oV,Rtr),e(gM,Btr),e(H,Ptr),e(H,hM),e(hM,Kue),e(Kue,$tr),e(hM,Itr),e(hM,rV),e(rV,qtr),e(hM,Ntr),e(H,jtr),e(H,uM),e(uM,Zue),e(Zue,Dtr),e(uM,Gtr),e(uM,tV),e(tV,Otr),e(uM,Vtr),e(H,Xtr),e(H,pM),e(pM,epe),e(epe,ztr),e(pM,Qtr),e(pM,aV),e(aV,Wtr),e(pM,Htr),e(H,Utr),e(H,_M),e(_M,ope),e(ope,Jtr),e(_M,Ytr),e(_M,nV),e(nV,Ktr),e(_M,Ztr),e(H,ear),e(H,bM),e(bM,rpe),e(rpe,oar),e(bM,rar),e(bM,sV),e(sV,tar),e(bM,aar),e(H,nar),e(H,FM),e(FM,tpe),e(tpe,sar),e(FM,lar),e(FM,lV),e(lV,iar),e(FM,dar),e(H,car),e(H,vM),e(vM,ape),e(ape,mar),e(vM,far),e(vM,iV),e(iV,gar),e(vM,har),e(H,uar),e(H,TM),e(TM,npe),e(npe,par),e(TM,_ar),e(TM,dV),e(dV,bar),e(TM,Far),e(H,Tar),e(H,MM),e(MM,spe),e(spe,Mar),e(MM,Ear),e(MM,cV),e(cV,Car),e(MM,war),e(H,Aar),e(H,EM),e(EM,lpe),e(lpe,yar),e(EM,Lar),e(EM,mV),e(mV,xar),e(EM,kar),e(H,Sar),e(H,CM),e(CM,ipe),e(ipe,Rar),e(CM,Bar),e(CM,fV),e(fV,Par),e(CM,$ar),e(H,Iar),e(H,wM),e(wM,dpe),e(dpe,qar),e(wM,Nar),e(wM,gV),e(gV,jar),e(wM,Dar),e(H,Gar),e(H,AM),e(AM,cpe),e(cpe,Oar),e(AM,Var),e(AM,hV),e(hV,Xar),e(AM,zar),e(H,Qar),e(H,yM),e(yM,mpe),e(mpe,War),e(yM,Har),e(yM,uV),e(uV,Uar),e(yM,Jar),e(H,Yar),e(H,LM),e(LM,fpe),e(fpe,Kar),e(LM,Zar),e(LM,pV),e(pV,enr),e(LM,onr),e(H,rnr),e(H,xM),e(xM,gpe),e(gpe,tnr),e(xM,anr),e(xM,_V),e(_V,nnr),e(xM,snr),e(H,lnr),e(H,kM),e(kM,hpe),e(hpe,inr),e(kM,dnr),e(kM,bV),e(bV,cnr),e(kM,mnr),e(H,fnr),e(H,SM),e(SM,upe),e(upe,gnr),e(SM,hnr),e(SM,FV),e(FV,unr),e(SM,pnr),e(H,_nr),e(H,RM),e(RM,ppe),e(ppe,bnr),e(RM,Fnr),e(RM,vV),e(vV,vnr),e(RM,Tnr),e(H,Mnr),e(H,BM),e(BM,_pe),e(_pe,Enr),e(BM,Cnr),e(BM,TV),e(TV,wnr),e(BM,Anr),e(H,ynr),e(H,PM),e(PM,bpe),e(bpe,Lnr),e(PM,xnr),e(PM,MV),e(MV,knr),e(PM,Snr),e(H,Rnr),e(H,$M),e($M,Fpe),e(Fpe,Bnr),e($M,Pnr),e($M,EV),e(EV,$nr),e($M,Inr),e(uo,qnr),e(uo,vpe),e(vpe,Nnr),e(uo,jnr),g(fy,uo,null),b(c,iBe,_),b(c,Fc,_),e(Fc,IM),e(IM,Tpe),g(gy,Tpe,null),e(Fc,Dnr),e(Fc,Mpe),e(Mpe,Gnr),b(c,dBe,_),b(c,Tr,_),g(hy,Tr,null),e(Tr,Onr),e(Tr,vc),e(vc,Vnr),e(vc,CV),e(CV,Xnr),e(vc,znr),e(vc,wV),e(wV,Qnr),e(vc,Wnr),e(Tr,Hnr),e(Tr,uy),e(uy,Unr),e(uy,Epe),e(Epe,Jnr),e(uy,Ynr),e(Tr,Knr),e(Tr,ut),g(py,ut,null),e(ut,Znr),e(ut,Cpe),e(Cpe,esr),e(ut,osr),e(ut,Tc),e(Tc,rsr),e(Tc,wpe),e(wpe,tsr),e(Tc,asr),e(Tc,AV),e(AV,nsr),e(Tc,ssr),e(ut,lsr),e(ut,Ape),e(Ape,isr),e(ut,dsr),g(_y,ut,null),e(Tr,csr),e(Tr,po),g(by,po,null),e(po,msr),e(po,ype),e(ype,fsr),e(po,gsr),e(po,bn),e(bn,hsr),e(bn,Lpe),e(Lpe,usr),e(bn,psr),e(bn,xpe),e(xpe,_sr),e(bn,bsr),e(bn,kpe),e(kpe,Fsr),e(bn,vsr),e(po,Tsr),e(po,me),e(me,qM),e(qM,Spe),e(Spe,Msr),e(qM,Esr),e(qM,yV),e(yV,Csr),e(qM,wsr),e(me,Asr),e(me,NM),e(NM,Rpe),e(Rpe,ysr),e(NM,Lsr),e(NM,LV),e(LV,xsr),e(NM,ksr),e(me,Ssr),e(me,jM),e(jM,Bpe),e(Bpe,Rsr),e(jM,Bsr),e(jM,xV),e(xV,Psr),e(jM,$sr),e(me,Isr),e(me,DM),e(DM,Ppe),e(Ppe,qsr),e(DM,Nsr),e(DM,kV),e(kV,jsr),e(DM,Dsr),e(me,Gsr),e(me,GM),e(GM,$pe),e($pe,Osr),e(GM,Vsr),e(GM,SV),e(SV,Xsr),e(GM,zsr),e(me,Qsr),e(me,OM),e(OM,Ipe),e(Ipe,Wsr),e(OM,Hsr),e(OM,RV),e(RV,Usr),e(OM,Jsr),e(me,Ysr),e(me,VM),e(VM,qpe),e(qpe,Ksr),e(VM,Zsr),e(VM,BV),e(BV,elr),e(VM,olr),e(me,rlr),e(me,XM),e(XM,Npe),e(Npe,tlr),e(XM,alr),e(XM,PV),e(PV,nlr),e(XM,slr),e(me,llr),e(me,zM),e(zM,jpe),e(jpe,ilr),e(zM,dlr),e(zM,$V),e($V,clr),e(zM,mlr),e(me,flr),e(me,QM),e(QM,Dpe),e(Dpe,glr),e(QM,hlr),e(QM,IV),e(IV,ulr),e(QM,plr),e(me,_lr),e(me,WM),e(WM,Gpe),e(Gpe,blr),e(WM,Flr),e(WM,qV),e(qV,vlr),e(WM,Tlr),e(me,Mlr),e(me,HM),e(HM,Ope),e(Ope,Elr),e(HM,Clr),e(HM,NV),e(NV,wlr),e(HM,Alr),e(po,ylr),e(po,Vpe),e(Vpe,Llr),e(po,xlr),g(Fy,po,null),b(c,cBe,_),b(c,Mc,_),e(Mc,UM),e(UM,Xpe),g(vy,Xpe,null),e(Mc,klr),e(Mc,zpe),e(zpe,Slr),b(c,mBe,_),b(c,Mr,_),g(Ty,Mr,null),e(Mr,Rlr),e(Mr,Ec),e(Ec,Blr),e(Ec,jV),e(jV,Plr),e(Ec,$lr),e(Ec,DV),e(DV,Ilr),e(Ec,qlr),e(Mr,Nlr),e(Mr,My),e(My,jlr),e(My,Qpe),e(Qpe,Dlr),e(My,Glr),e(Mr,Olr),e(Mr,pt),g(Ey,pt,null),e(pt,Vlr),e(pt,Wpe),e(Wpe,Xlr),e(pt,zlr),e(pt,Cc),e(Cc,Qlr),e(Cc,Hpe),e(Hpe,Wlr),e(Cc,Hlr),e(Cc,GV),e(GV,Ulr),e(Cc,Jlr),e(pt,Ylr),e(pt,Upe),e(Upe,Klr),e(pt,Zlr),g(Cy,pt,null),e(Mr,eir),e(Mr,_o),g(wy,_o,null),e(_o,oir),e(_o,Jpe),e(Jpe,rir),e(_o,tir),e(_o,Fn),e(Fn,air),e(Fn,Ype),e(Ype,nir),e(Fn,sir),e(Fn,Kpe),e(Kpe,lir),e(Fn,iir),e(Fn,Zpe),e(Zpe,dir),e(Fn,cir),e(_o,mir),e(_o,Ay),e(Ay,JM),e(JM,e_e),e(e_e,fir),e(JM,gir),e(JM,OV),e(OV,hir),e(JM,uir),e(Ay,pir),e(Ay,YM),e(YM,o_e),e(o_e,_ir),e(YM,bir),e(YM,VV),e(VV,Fir),e(YM,vir),e(_o,Tir),e(_o,r_e),e(r_e,Mir),e(_o,Eir),g(yy,_o,null),b(c,fBe,_),b(c,wc,_),e(wc,KM),e(KM,t_e),g(Ly,t_e,null),e(wc,Cir),e(wc,a_e),e(a_e,wir),b(c,gBe,_),b(c,Er,_),g(xy,Er,null),e(Er,Air),e(Er,Ac),e(Ac,yir),e(Ac,XV),e(XV,Lir),e(Ac,xir),e(Ac,zV),e(zV,kir),e(Ac,Sir),e(Er,Rir),e(Er,ky),e(ky,Bir),e(ky,n_e),e(n_e,Pir),e(ky,$ir),e(Er,Iir),e(Er,_t),g(Sy,_t,null),e(_t,qir),e(_t,s_e),e(s_e,Nir),e(_t,jir),e(_t,yc),e(yc,Dir),e(yc,l_e),e(l_e,Gir),e(yc,Oir),e(yc,QV),e(QV,Vir),e(yc,Xir),e(_t,zir),e(_t,i_e),e(i_e,Qir),e(_t,Wir),g(Ry,_t,null),e(Er,Hir),e(Er,bo),g(By,bo,null),e(bo,Uir),e(bo,d_e),e(d_e,Jir),e(bo,Yir),e(bo,vn),e(vn,Kir),e(vn,c_e),e(c_e,Zir),e(vn,edr),e(vn,m_e),e(m_e,odr),e(vn,rdr),e(vn,f_e),e(f_e,tdr),e(vn,adr),e(bo,ndr),e(bo,J),e(J,ZM),e(ZM,g_e),e(g_e,sdr),e(ZM,ldr),e(ZM,WV),e(WV,idr),e(ZM,ddr),e(J,cdr),e(J,e4),e(e4,h_e),e(h_e,mdr),e(e4,fdr),e(e4,HV),e(HV,gdr),e(e4,hdr),e(J,udr),e(J,o4),e(o4,u_e),e(u_e,pdr),e(o4,_dr),e(o4,UV),e(UV,bdr),e(o4,Fdr),e(J,vdr),e(J,r4),e(r4,p_e),e(p_e,Tdr),e(r4,Mdr),e(r4,JV),e(JV,Edr),e(r4,Cdr),e(J,wdr),e(J,t4),e(t4,__e),e(__e,Adr),e(t4,ydr),e(t4,YV),e(YV,Ldr),e(t4,xdr),e(J,kdr),e(J,a4),e(a4,b_e),e(b_e,Sdr),e(a4,Rdr),e(a4,KV),e(KV,Bdr),e(a4,Pdr),e(J,$dr),e(J,n4),e(n4,F_e),e(F_e,Idr),e(n4,qdr),e(n4,ZV),e(ZV,Ndr),e(n4,jdr),e(J,Ddr),e(J,s4),e(s4,v_e),e(v_e,Gdr),e(s4,Odr),e(s4,eX),e(eX,Vdr),e(s4,Xdr),e(J,zdr),e(J,l4),e(l4,T_e),e(T_e,Qdr),e(l4,Wdr),e(l4,oX),e(oX,Hdr),e(l4,Udr),e(J,Jdr),e(J,i4),e(i4,M_e),e(M_e,Ydr),e(i4,Kdr),e(i4,rX),e(rX,Zdr),e(i4,ecr),e(J,ocr),e(J,d4),e(d4,E_e),e(E_e,rcr),e(d4,tcr),e(d4,tX),e(tX,acr),e(d4,ncr),e(J,scr),e(J,c4),e(c4,C_e),e(C_e,lcr),e(c4,icr),e(c4,aX),e(aX,dcr),e(c4,ccr),e(J,mcr),e(J,m4),e(m4,w_e),e(w_e,fcr),e(m4,gcr),e(m4,nX),e(nX,hcr),e(m4,ucr),e(J,pcr),e(J,f4),e(f4,A_e),e(A_e,_cr),e(f4,bcr),e(f4,sX),e(sX,Fcr),e(f4,vcr),e(J,Tcr),e(J,g4),e(g4,y_e),e(y_e,Mcr),e(g4,Ecr),e(g4,lX),e(lX,Ccr),e(g4,wcr),e(J,Acr),e(J,h4),e(h4,L_e),e(L_e,ycr),e(h4,Lcr),e(h4,iX),e(iX,xcr),e(h4,kcr),e(J,Scr),e(J,u4),e(u4,x_e),e(x_e,Rcr),e(u4,Bcr),e(u4,dX),e(dX,Pcr),e(u4,$cr),e(J,Icr),e(J,p4),e(p4,k_e),e(k_e,qcr),e(p4,Ncr),e(p4,cX),e(cX,jcr),e(p4,Dcr),e(J,Gcr),e(J,_4),e(_4,S_e),e(S_e,Ocr),e(_4,Vcr),e(_4,mX),e(mX,Xcr),e(_4,zcr),e(J,Qcr),e(J,b4),e(b4,R_e),e(R_e,Wcr),e(b4,Hcr),e(b4,fX),e(fX,Ucr),e(b4,Jcr),e(bo,Ycr),e(bo,B_e),e(B_e,Kcr),e(bo,Zcr),g(Py,bo,null),b(c,hBe,_),b(c,Lc,_),e(Lc,F4),e(F4,P_e),g($y,P_e,null),e(Lc,emr),e(Lc,$_e),e($_e,omr),b(c,uBe,_),b(c,Cr,_),g(Iy,Cr,null),e(Cr,rmr),e(Cr,xc),e(xc,tmr),e(xc,gX),e(gX,amr),e(xc,nmr),e(xc,hX),e(hX,smr),e(xc,lmr),e(Cr,imr),e(Cr,qy),e(qy,dmr),e(qy,I_e),e(I_e,cmr),e(qy,mmr),e(Cr,fmr),e(Cr,bt),g(Ny,bt,null),e(bt,gmr),e(bt,q_e),e(q_e,hmr),e(bt,umr),e(bt,kc),e(kc,pmr),e(kc,N_e),e(N_e,_mr),e(kc,bmr),e(kc,uX),e(uX,Fmr),e(kc,vmr),e(bt,Tmr),e(bt,j_e),e(j_e,Mmr),e(bt,Emr),g(jy,bt,null),e(Cr,Cmr),e(Cr,Fo),g(Dy,Fo,null),e(Fo,wmr),e(Fo,D_e),e(D_e,Amr),e(Fo,ymr),e(Fo,Tn),e(Tn,Lmr),e(Tn,G_e),e(G_e,xmr),e(Tn,kmr),e(Tn,O_e),e(O_e,Smr),e(Tn,Rmr),e(Tn,V_e),e(V_e,Bmr),e(Tn,Pmr),e(Fo,$mr),e(Fo,be),e(be,v4),e(v4,X_e),e(X_e,Imr),e(v4,qmr),e(v4,pX),e(pX,Nmr),e(v4,jmr),e(be,Dmr),e(be,T4),e(T4,z_e),e(z_e,Gmr),e(T4,Omr),e(T4,_X),e(_X,Vmr),e(T4,Xmr),e(be,zmr),e(be,M4),e(M4,Q_e),e(Q_e,Qmr),e(M4,Wmr),e(M4,bX),e(bX,Hmr),e(M4,Umr),e(be,Jmr),e(be,E4),e(E4,W_e),e(W_e,Ymr),e(E4,Kmr),e(E4,FX),e(FX,Zmr),e(E4,efr),e(be,ofr),e(be,C4),e(C4,H_e),e(H_e,rfr),e(C4,tfr),e(C4,vX),e(vX,afr),e(C4,nfr),e(be,sfr),e(be,w4),e(w4,U_e),e(U_e,lfr),e(w4,ifr),e(w4,TX),e(TX,dfr),e(w4,cfr),e(be,mfr),e(be,A4),e(A4,J_e),e(J_e,ffr),e(A4,gfr),e(A4,MX),e(MX,hfr),e(A4,ufr),e(be,pfr),e(be,y4),e(y4,Y_e),e(Y_e,_fr),e(y4,bfr),e(y4,EX),e(EX,Ffr),e(y4,vfr),e(be,Tfr),e(be,L4),e(L4,K_e),e(K_e,Mfr),e(L4,Efr),e(L4,CX),e(CX,Cfr),e(L4,wfr),e(be,Afr),e(be,x4),e(x4,Z_e),e(Z_e,yfr),e(x4,Lfr),e(x4,wX),e(wX,xfr),e(x4,kfr),e(Fo,Sfr),e(Fo,ebe),e(ebe,Rfr),e(Fo,Bfr),g(Gy,Fo,null),b(c,pBe,_),b(c,Sc,_),e(Sc,k4),e(k4,obe),g(Oy,obe,null),e(Sc,Pfr),e(Sc,rbe),e(rbe,$fr),b(c,_Be,_),b(c,wr,_),g(Vy,wr,null),e(wr,Ifr),e(wr,Rc),e(Rc,qfr),e(Rc,AX),e(AX,Nfr),e(Rc,jfr),e(Rc,yX),e(yX,Dfr),e(Rc,Gfr),e(wr,Ofr),e(wr,Xy),e(Xy,Vfr),e(Xy,tbe),e(tbe,Xfr),e(Xy,zfr),e(wr,Qfr),e(wr,Ft),g(zy,Ft,null),e(Ft,Wfr),e(Ft,abe),e(abe,Hfr),e(Ft,Ufr),e(Ft,Bc),e(Bc,Jfr),e(Bc,nbe),e(nbe,Yfr),e(Bc,Kfr),e(Bc,LX),e(LX,Zfr),e(Bc,egr),e(Ft,ogr),e(Ft,sbe),e(sbe,rgr),e(Ft,tgr),g(Qy,Ft,null),e(wr,agr),e(wr,vo),g(Wy,vo,null),e(vo,ngr),e(vo,lbe),e(lbe,sgr),e(vo,lgr),e(vo,Mn),e(Mn,igr),e(Mn,ibe),e(ibe,dgr),e(Mn,cgr),e(Mn,dbe),e(dbe,mgr),e(Mn,fgr),e(Mn,cbe),e(cbe,ggr),e(Mn,hgr),e(vo,ugr),e(vo,V),e(V,S4),e(S4,mbe),e(mbe,pgr),e(S4,_gr),e(S4,xX),e(xX,bgr),e(S4,Fgr),e(V,vgr),e(V,R4),e(R4,fbe),e(fbe,Tgr),e(R4,Mgr),e(R4,kX),e(kX,Egr),e(R4,Cgr),e(V,wgr),e(V,B4),e(B4,gbe),e(gbe,Agr),e(B4,ygr),e(B4,SX),e(SX,Lgr),e(B4,xgr),e(V,kgr),e(V,P4),e(P4,hbe),e(hbe,Sgr),e(P4,Rgr),e(P4,RX),e(RX,Bgr),e(P4,Pgr),e(V,$gr),e(V,$4),e($4,ube),e(ube,Igr),e($4,qgr),e($4,BX),e(BX,Ngr),e($4,jgr),e(V,Dgr),e(V,I4),e(I4,pbe),e(pbe,Ggr),e(I4,Ogr),e(I4,PX),e(PX,Vgr),e(I4,Xgr),e(V,zgr),e(V,q4),e(q4,_be),e(_be,Qgr),e(q4,Wgr),e(q4,$X),e($X,Hgr),e(q4,Ugr),e(V,Jgr),e(V,N4),e(N4,bbe),e(bbe,Ygr),e(N4,Kgr),e(N4,IX),e(IX,Zgr),e(N4,ehr),e(V,ohr),e(V,j4),e(j4,Fbe),e(Fbe,rhr),e(j4,thr),e(j4,qX),e(qX,ahr),e(j4,nhr),e(V,shr),e(V,D4),e(D4,vbe),e(vbe,lhr),e(D4,ihr),e(D4,NX),e(NX,dhr),e(D4,chr),e(V,mhr),e(V,G4),e(G4,Tbe),e(Tbe,fhr),e(G4,ghr),e(G4,jX),e(jX,hhr),e(G4,uhr),e(V,phr),e(V,O4),e(O4,Mbe),e(Mbe,_hr),e(O4,bhr),e(O4,DX),e(DX,Fhr),e(O4,vhr),e(V,Thr),e(V,V4),e(V4,Ebe),e(Ebe,Mhr),e(V4,Ehr),e(V4,GX),e(GX,Chr),e(V4,whr),e(V,Ahr),e(V,X4),e(X4,Cbe),e(Cbe,yhr),e(X4,Lhr),e(X4,OX),e(OX,xhr),e(X4,khr),e(V,Shr),e(V,z4),e(z4,wbe),e(wbe,Rhr),e(z4,Bhr),e(z4,VX),e(VX,Phr),e(z4,$hr),e(V,Ihr),e(V,Q4),e(Q4,Abe),e(Abe,qhr),e(Q4,Nhr),e(Q4,XX),e(XX,jhr),e(Q4,Dhr),e(V,Ghr),e(V,W4),e(W4,ybe),e(ybe,Ohr),e(W4,Vhr),e(W4,zX),e(zX,Xhr),e(W4,zhr),e(V,Qhr),e(V,H4),e(H4,Lbe),e(Lbe,Whr),e(H4,Hhr),e(H4,QX),e(QX,Uhr),e(H4,Jhr),e(V,Yhr),e(V,U4),e(U4,xbe),e(xbe,Khr),e(U4,Zhr),e(U4,WX),e(WX,eur),e(U4,our),e(V,rur),e(V,J4),e(J4,kbe),e(kbe,tur),e(J4,aur),e(J4,HX),e(HX,nur),e(J4,sur),e(V,lur),e(V,Y4),e(Y4,Sbe),e(Sbe,iur),e(Y4,dur),e(Y4,UX),e(UX,cur),e(Y4,mur),e(V,fur),e(V,K4),e(K4,Rbe),e(Rbe,gur),e(K4,hur),e(K4,JX),e(JX,uur),e(K4,pur),e(V,_ur),e(V,Z4),e(Z4,Bbe),e(Bbe,bur),e(Z4,Fur),e(Z4,YX),e(YX,vur),e(Z4,Tur),e(V,Mur),e(V,eE),e(eE,Pbe),e(Pbe,Eur),e(eE,Cur),e(eE,KX),e(KX,wur),e(eE,Aur),e(V,yur),e(V,oE),e(oE,$be),e($be,Lur),e(oE,xur),e(oE,ZX),e(ZX,kur),e(oE,Sur),e(V,Rur),e(V,rE),e(rE,Ibe),e(Ibe,Bur),e(rE,Pur),e(rE,ez),e(ez,$ur),e(rE,Iur),e(vo,qur),e(vo,qbe),e(qbe,Nur),e(vo,jur),g(Hy,vo,null),b(c,bBe,_),b(c,Pc,_),e(Pc,tE),e(tE,Nbe),g(Uy,Nbe,null),e(Pc,Dur),e(Pc,jbe),e(jbe,Gur),b(c,FBe,_),b(c,Ar,_),g(Jy,Ar,null),e(Ar,Our),e(Ar,$c),e($c,Vur),e($c,oz),e(oz,Xur),e($c,zur),e($c,rz),e(rz,Qur),e($c,Wur),e(Ar,Hur),e(Ar,Yy),e(Yy,Uur),e(Yy,Dbe),e(Dbe,Jur),e(Yy,Yur),e(Ar,Kur),e(Ar,vt),g(Ky,vt,null),e(vt,Zur),e(vt,Gbe),e(Gbe,epr),e(vt,opr),e(vt,Ic),e(Ic,rpr),e(Ic,Obe),e(Obe,tpr),e(Ic,apr),e(Ic,tz),e(tz,npr),e(Ic,spr),e(vt,lpr),e(vt,Vbe),e(Vbe,ipr),e(vt,dpr),g(Zy,vt,null),e(Ar,cpr),e(Ar,To),g(eL,To,null),e(To,mpr),e(To,Xbe),e(Xbe,fpr),e(To,gpr),e(To,En),e(En,hpr),e(En,zbe),e(zbe,upr),e(En,ppr),e(En,Qbe),e(Qbe,_pr),e(En,bpr),e(En,Wbe),e(Wbe,Fpr),e(En,vpr),e(To,Tpr),e(To,ne),e(ne,aE),e(aE,Hbe),e(Hbe,Mpr),e(aE,Epr),e(aE,az),e(az,Cpr),e(aE,wpr),e(ne,Apr),e(ne,nE),e(nE,Ube),e(Ube,ypr),e(nE,Lpr),e(nE,nz),e(nz,xpr),e(nE,kpr),e(ne,Spr),e(ne,sE),e(sE,Jbe),e(Jbe,Rpr),e(sE,Bpr),e(sE,sz),e(sz,Ppr),e(sE,$pr),e(ne,Ipr),e(ne,lE),e(lE,Ybe),e(Ybe,qpr),e(lE,Npr),e(lE,lz),e(lz,jpr),e(lE,Dpr),e(ne,Gpr),e(ne,iE),e(iE,Kbe),e(Kbe,Opr),e(iE,Vpr),e(iE,iz),e(iz,Xpr),e(iE,zpr),e(ne,Qpr),e(ne,dE),e(dE,Zbe),e(Zbe,Wpr),e(dE,Hpr),e(dE,dz),e(dz,Upr),e(dE,Jpr),e(ne,Ypr),e(ne,cE),e(cE,e2e),e(e2e,Kpr),e(cE,Zpr),e(cE,cz),e(cz,e_r),e(cE,o_r),e(ne,r_r),e(ne,mE),e(mE,o2e),e(o2e,t_r),e(mE,a_r),e(mE,mz),e(mz,n_r),e(mE,s_r),e(ne,l_r),e(ne,fE),e(fE,r2e),e(r2e,i_r),e(fE,d_r),e(fE,fz),e(fz,c_r),e(fE,m_r),e(ne,f_r),e(ne,gE),e(gE,t2e),e(t2e,g_r),e(gE,h_r),e(gE,gz),e(gz,u_r),e(gE,p_r),e(ne,__r),e(ne,hE),e(hE,a2e),e(a2e,b_r),e(hE,F_r),e(hE,hz),e(hz,v_r),e(hE,T_r),e(ne,M_r),e(ne,uE),e(uE,n2e),e(n2e,E_r),e(uE,C_r),e(uE,uz),e(uz,w_r),e(uE,A_r),e(ne,y_r),e(ne,pE),e(pE,s2e),e(s2e,L_r),e(pE,x_r),e(pE,pz),e(pz,k_r),e(pE,S_r),e(ne,R_r),e(ne,_E),e(_E,l2e),e(l2e,B_r),e(_E,P_r),e(_E,_z),e(_z,$_r),e(_E,I_r),e(ne,q_r),e(ne,bE),e(bE,i2e),e(i2e,N_r),e(bE,j_r),e(bE,bz),e(bz,D_r),e(bE,G_r),e(ne,O_r),e(ne,FE),e(FE,d2e),e(d2e,V_r),e(FE,X_r),e(FE,Fz),e(Fz,z_r),e(FE,Q_r),e(ne,W_r),e(ne,vE),e(vE,c2e),e(c2e,H_r),e(vE,U_r),e(vE,vz),e(vz,J_r),e(vE,Y_r),e(To,K_r),e(To,m2e),e(m2e,Z_r),e(To,ebr),g(oL,To,null),b(c,vBe,_),b(c,qc,_),e(qc,TE),e(TE,f2e),g(rL,f2e,null),e(qc,obr),e(qc,g2e),e(g2e,rbr),b(c,TBe,_),b(c,yr,_),g(tL,yr,null),e(yr,tbr),e(yr,Nc),e(Nc,abr),e(Nc,Tz),e(Tz,nbr),e(Nc,sbr),e(Nc,Mz),e(Mz,lbr),e(Nc,ibr),e(yr,dbr),e(yr,aL),e(aL,cbr),e(aL,h2e),e(h2e,mbr),e(aL,fbr),e(yr,gbr),e(yr,Tt),g(nL,Tt,null),e(Tt,hbr),e(Tt,u2e),e(u2e,ubr),e(Tt,pbr),e(Tt,jc),e(jc,_br),e(jc,p2e),e(p2e,bbr),e(jc,Fbr),e(jc,Ez),e(Ez,vbr),e(jc,Tbr),e(Tt,Mbr),e(Tt,_2e),e(_2e,Ebr),e(Tt,Cbr),g(sL,Tt,null),e(yr,wbr),e(yr,Mo),g(lL,Mo,null),e(Mo,Abr),e(Mo,b2e),e(b2e,ybr),e(Mo,Lbr),e(Mo,Cn),e(Cn,xbr),e(Cn,F2e),e(F2e,kbr),e(Cn,Sbr),e(Cn,v2e),e(v2e,Rbr),e(Cn,Bbr),e(Cn,T2e),e(T2e,Pbr),e(Cn,$br),e(Mo,Ibr),e(Mo,M2e),e(M2e,ME),e(ME,E2e),e(E2e,qbr),e(ME,Nbr),e(ME,Cz),e(Cz,jbr),e(ME,Dbr),e(Mo,Gbr),e(Mo,C2e),e(C2e,Obr),e(Mo,Vbr),g(iL,Mo,null),b(c,MBe,_),b(c,Dc,_),e(Dc,EE),e(EE,w2e),g(dL,w2e,null),e(Dc,Xbr),e(Dc,A2e),e(A2e,zbr),b(c,EBe,_),b(c,Lr,_),g(cL,Lr,null),e(Lr,Qbr),e(Lr,Gc),e(Gc,Wbr),e(Gc,wz),e(wz,Hbr),e(Gc,Ubr),e(Gc,Az),e(Az,Jbr),e(Gc,Ybr),e(Lr,Kbr),e(Lr,mL),e(mL,Zbr),e(mL,y2e),e(y2e,e2r),e(mL,o2r),e(Lr,r2r),e(Lr,Mt),g(fL,Mt,null),e(Mt,t2r),e(Mt,L2e),e(L2e,a2r),e(Mt,n2r),e(Mt,Oc),e(Oc,s2r),e(Oc,x2e),e(x2e,l2r),e(Oc,i2r),e(Oc,yz),e(yz,d2r),e(Oc,c2r),e(Mt,m2r),e(Mt,k2e),e(k2e,f2r),e(Mt,g2r),g(gL,Mt,null),e(Lr,h2r),e(Lr,Eo),g(hL,Eo,null),e(Eo,u2r),e(Eo,S2e),e(S2e,p2r),e(Eo,_2r),e(Eo,wn),e(wn,b2r),e(wn,R2e),e(R2e,F2r),e(wn,v2r),e(wn,B2e),e(B2e,T2r),e(wn,M2r),e(wn,P2e),e(P2e,E2r),e(wn,C2r),e(Eo,w2r),e(Eo,Y),e(Y,CE),e(CE,$2e),e($2e,A2r),e(CE,y2r),e(CE,Lz),e(Lz,L2r),e(CE,x2r),e(Y,k2r),e(Y,wE),e(wE,I2e),e(I2e,S2r),e(wE,R2r),e(wE,xz),e(xz,B2r),e(wE,P2r),e(Y,$2r),e(Y,AE),e(AE,q2e),e(q2e,I2r),e(AE,q2r),e(AE,kz),e(kz,N2r),e(AE,j2r),e(Y,D2r),e(Y,yE),e(yE,N2e),e(N2e,G2r),e(yE,O2r),e(yE,Sz),e(Sz,V2r),e(yE,X2r),e(Y,z2r),e(Y,LE),e(LE,j2e),e(j2e,Q2r),e(LE,W2r),e(LE,Rz),e(Rz,H2r),e(LE,U2r),e(Y,J2r),e(Y,xE),e(xE,D2e),e(D2e,Y2r),e(xE,K2r),e(xE,Bz),e(Bz,Z2r),e(xE,eFr),e(Y,oFr),e(Y,kE),e(kE,G2e),e(G2e,rFr),e(kE,tFr),e(kE,Pz),e(Pz,aFr),e(kE,nFr),e(Y,sFr),e(Y,SE),e(SE,O2e),e(O2e,lFr),e(SE,iFr),e(SE,$z),e($z,dFr),e(SE,cFr),e(Y,mFr),e(Y,RE),e(RE,V2e),e(V2e,fFr),e(RE,gFr),e(RE,Iz),e(Iz,hFr),e(RE,uFr),e(Y,pFr),e(Y,BE),e(BE,X2e),e(X2e,_Fr),e(BE,bFr),e(BE,qz),e(qz,FFr),e(BE,vFr),e(Y,TFr),e(Y,PE),e(PE,z2e),e(z2e,MFr),e(PE,EFr),e(PE,Nz),e(Nz,CFr),e(PE,wFr),e(Y,AFr),e(Y,$E),e($E,Q2e),e(Q2e,yFr),e($E,LFr),e($E,jz),e(jz,xFr),e($E,kFr),e(Y,SFr),e(Y,IE),e(IE,W2e),e(W2e,RFr),e(IE,BFr),e(IE,Dz),e(Dz,PFr),e(IE,$Fr),e(Y,IFr),e(Y,qE),e(qE,H2e),e(H2e,qFr),e(qE,NFr),e(qE,Gz),e(Gz,jFr),e(qE,DFr),e(Y,GFr),e(Y,NE),e(NE,U2e),e(U2e,OFr),e(NE,VFr),e(NE,Oz),e(Oz,XFr),e(NE,zFr),e(Y,QFr),e(Y,jE),e(jE,J2e),e(J2e,WFr),e(jE,HFr),e(jE,Vz),e(Vz,UFr),e(jE,JFr),e(Y,YFr),e(Y,DE),e(DE,Y2e),e(Y2e,KFr),e(DE,ZFr),e(DE,Xz),e(Xz,evr),e(DE,ovr),e(Y,rvr),e(Y,GE),e(GE,K2e),e(K2e,tvr),e(GE,avr),e(GE,zz),e(zz,nvr),e(GE,svr),e(Y,lvr),e(Y,OE),e(OE,Z2e),e(Z2e,ivr),e(OE,dvr),e(OE,Qz),e(Qz,cvr),e(OE,mvr),e(Y,fvr),e(Y,VE),e(VE,eFe),e(eFe,gvr),e(VE,hvr),e(VE,Wz),e(Wz,uvr),e(VE,pvr),e(Eo,_vr),e(Eo,oFe),e(oFe,bvr),e(Eo,Fvr),g(uL,Eo,null),b(c,CBe,_),b(c,Vc,_),e(Vc,XE),e(XE,rFe),g(pL,rFe,null),e(Vc,vvr),e(Vc,tFe),e(tFe,Tvr),b(c,wBe,_),b(c,xr,_),g(_L,xr,null),e(xr,Mvr),e(xr,Xc),e(Xc,Evr),e(Xc,Hz),e(Hz,Cvr),e(Xc,wvr),e(Xc,Uz),e(Uz,Avr),e(Xc,yvr),e(xr,Lvr),e(xr,bL),e(bL,xvr),e(bL,aFe),e(aFe,kvr),e(bL,Svr),e(xr,Rvr),e(xr,Et),g(FL,Et,null),e(Et,Bvr),e(Et,nFe),e(nFe,Pvr),e(Et,$vr),e(Et,zc),e(zc,Ivr),e(zc,sFe),e(sFe,qvr),e(zc,Nvr),e(zc,Jz),e(Jz,jvr),e(zc,Dvr),e(Et,Gvr),e(Et,lFe),e(lFe,Ovr),e(Et,Vvr),g(vL,Et,null),e(xr,Xvr),e(xr,Co),g(TL,Co,null),e(Co,zvr),e(Co,iFe),e(iFe,Qvr),e(Co,Wvr),e(Co,An),e(An,Hvr),e(An,dFe),e(dFe,Uvr),e(An,Jvr),e(An,cFe),e(cFe,Yvr),e(An,Kvr),e(An,mFe),e(mFe,Zvr),e(An,eTr),e(Co,oTr),e(Co,K),e(K,zE),e(zE,fFe),e(fFe,rTr),e(zE,tTr),e(zE,Yz),e(Yz,aTr),e(zE,nTr),e(K,sTr),e(K,QE),e(QE,gFe),e(gFe,lTr),e(QE,iTr),e(QE,Kz),e(Kz,dTr),e(QE,cTr),e(K,mTr),e(K,WE),e(WE,hFe),e(hFe,fTr),e(WE,gTr),e(WE,Zz),e(Zz,hTr),e(WE,uTr),e(K,pTr),e(K,HE),e(HE,uFe),e(uFe,_Tr),e(HE,bTr),e(HE,eQ),e(eQ,FTr),e(HE,vTr),e(K,TTr),e(K,UE),e(UE,pFe),e(pFe,MTr),e(UE,ETr),e(UE,oQ),e(oQ,CTr),e(UE,wTr),e(K,ATr),e(K,JE),e(JE,_Fe),e(_Fe,yTr),e(JE,LTr),e(JE,rQ),e(rQ,xTr),e(JE,kTr),e(K,STr),e(K,YE),e(YE,bFe),e(bFe,RTr),e(YE,BTr),e(YE,tQ),e(tQ,PTr),e(YE,$Tr),e(K,ITr),e(K,KE),e(KE,FFe),e(FFe,qTr),e(KE,NTr),e(KE,aQ),e(aQ,jTr),e(KE,DTr),e(K,GTr),e(K,ZE),e(ZE,vFe),e(vFe,OTr),e(ZE,VTr),e(ZE,nQ),e(nQ,XTr),e(ZE,zTr),e(K,QTr),e(K,eC),e(eC,TFe),e(TFe,WTr),e(eC,HTr),e(eC,sQ),e(sQ,UTr),e(eC,JTr),e(K,YTr),e(K,oC),e(oC,MFe),e(MFe,KTr),e(oC,ZTr),e(oC,lQ),e(lQ,e1r),e(oC,o1r),e(K,r1r),e(K,rC),e(rC,EFe),e(EFe,t1r),e(rC,a1r),e(rC,iQ),e(iQ,n1r),e(rC,s1r),e(K,l1r),e(K,tC),e(tC,CFe),e(CFe,i1r),e(tC,d1r),e(tC,dQ),e(dQ,c1r),e(tC,m1r),e(K,f1r),e(K,aC),e(aC,wFe),e(wFe,g1r),e(aC,h1r),e(aC,cQ),e(cQ,u1r),e(aC,p1r),e(K,_1r),e(K,nC),e(nC,AFe),e(AFe,b1r),e(nC,F1r),e(nC,mQ),e(mQ,v1r),e(nC,T1r),e(K,M1r),e(K,sC),e(sC,yFe),e(yFe,E1r),e(sC,C1r),e(sC,fQ),e(fQ,w1r),e(sC,A1r),e(K,y1r),e(K,lC),e(lC,LFe),e(LFe,L1r),e(lC,x1r),e(lC,gQ),e(gQ,k1r),e(lC,S1r),e(K,R1r),e(K,iC),e(iC,xFe),e(xFe,B1r),e(iC,P1r),e(iC,hQ),e(hQ,$1r),e(iC,I1r),e(K,q1r),e(K,dC),e(dC,kFe),e(kFe,N1r),e(dC,j1r),e(dC,uQ),e(uQ,D1r),e(dC,G1r),e(K,O1r),e(K,cC),e(cC,SFe),e(SFe,V1r),e(cC,X1r),e(cC,pQ),e(pQ,z1r),e(cC,Q1r),e(Co,W1r),e(Co,RFe),e(RFe,H1r),e(Co,U1r),g(ML,Co,null),b(c,ABe,_),b(c,Qc,_),e(Qc,mC),e(mC,BFe),g(EL,BFe,null),e(Qc,J1r),e(Qc,PFe),e(PFe,Y1r),b(c,yBe,_),b(c,kr,_),g(CL,kr,null),e(kr,K1r),e(kr,Wc),e(Wc,Z1r),e(Wc,_Q),e(_Q,eMr),e(Wc,oMr),e(Wc,bQ),e(bQ,rMr),e(Wc,tMr),e(kr,aMr),e(kr,wL),e(wL,nMr),e(wL,$Fe),e($Fe,sMr),e(wL,lMr),e(kr,iMr),e(kr,Ct),g(AL,Ct,null),e(Ct,dMr),e(Ct,IFe),e(IFe,cMr),e(Ct,mMr),e(Ct,Hc),e(Hc,fMr),e(Hc,qFe),e(qFe,gMr),e(Hc,hMr),e(Hc,FQ),e(FQ,uMr),e(Hc,pMr),e(Ct,_Mr),e(Ct,NFe),e(NFe,bMr),e(Ct,FMr),g(yL,Ct,null),e(kr,vMr),e(kr,wo),g(LL,wo,null),e(wo,TMr),e(wo,jFe),e(jFe,MMr),e(wo,EMr),e(wo,yn),e(yn,CMr),e(yn,DFe),e(DFe,wMr),e(yn,AMr),e(yn,GFe),e(GFe,yMr),e(yn,LMr),e(yn,OFe),e(OFe,xMr),e(yn,kMr),e(wo,SMr),e(wo,VFe),e(VFe,fC),e(fC,XFe),e(XFe,RMr),e(fC,BMr),e(fC,vQ),e(vQ,PMr),e(fC,$Mr),e(wo,IMr),e(wo,zFe),e(zFe,qMr),e(wo,NMr),g(xL,wo,null),b(c,LBe,_),b(c,Uc,_),e(Uc,gC),e(gC,QFe),g(kL,QFe,null),e(Uc,jMr),e(Uc,WFe),e(WFe,DMr),b(c,xBe,_),b(c,Sr,_),g(SL,Sr,null),e(Sr,GMr),e(Sr,Jc),e(Jc,OMr),e(Jc,TQ),e(TQ,VMr),e(Jc,XMr),e(Jc,MQ),e(MQ,zMr),e(Jc,QMr),e(Sr,WMr),e(Sr,RL),e(RL,HMr),e(RL,HFe),e(HFe,UMr),e(RL,JMr),e(Sr,YMr),e(Sr,wt),g(BL,wt,null),e(wt,KMr),e(wt,UFe),e(UFe,ZMr),e(wt,e4r),e(wt,Yc),e(Yc,o4r),e(Yc,JFe),e(JFe,r4r),e(Yc,t4r),e(Yc,EQ),e(EQ,a4r),e(Yc,n4r),e(wt,s4r),e(wt,YFe),e(YFe,l4r),e(wt,i4r),g(PL,wt,null),e(Sr,d4r),e(Sr,Ao),g($L,Ao,null),e(Ao,c4r),e(Ao,KFe),e(KFe,m4r),e(Ao,f4r),e(Ao,Ln),e(Ln,g4r),e(Ln,ZFe),e(ZFe,h4r),e(Ln,u4r),e(Ln,eve),e(eve,p4r),e(Ln,_4r),e(Ln,ove),e(ove,b4r),e(Ln,F4r),e(Ao,v4r),e(Ao,rve),e(rve,hC),e(hC,tve),e(tve,T4r),e(hC,M4r),e(hC,CQ),e(CQ,E4r),e(hC,C4r),e(Ao,w4r),e(Ao,ave),e(ave,A4r),e(Ao,y4r),g(IL,Ao,null),b(c,kBe,_),b(c,Kc,_),e(Kc,uC),e(uC,nve),g(qL,nve,null),e(Kc,L4r),e(Kc,sve),e(sve,x4r),b(c,SBe,_),b(c,Rr,_),g(NL,Rr,null),e(Rr,k4r),e(Rr,Zc),e(Zc,S4r),e(Zc,wQ),e(wQ,R4r),e(Zc,B4r),e(Zc,AQ),e(AQ,P4r),e(Zc,$4r),e(Rr,I4r),e(Rr,jL),e(jL,q4r),e(jL,lve),e(lve,N4r),e(jL,j4r),e(Rr,D4r),e(Rr,At),g(DL,At,null),e(At,G4r),e(At,ive),e(ive,O4r),e(At,V4r),e(At,em),e(em,X4r),e(em,dve),e(dve,z4r),e(em,Q4r),e(em,yQ),e(yQ,W4r),e(em,H4r),e(At,U4r),e(At,cve),e(cve,J4r),e(At,Y4r),g(GL,At,null),e(Rr,K4r),e(Rr,yo),g(OL,yo,null),e(yo,Z4r),e(yo,mve),e(mve,eEr),e(yo,oEr),e(yo,xn),e(xn,rEr),e(xn,fve),e(fve,tEr),e(xn,aEr),e(xn,gve),e(gve,nEr),e(xn,sEr),e(xn,hve),e(hve,lEr),e(xn,iEr),e(yo,dEr),e(yo,z),e(z,pC),e(pC,uve),e(uve,cEr),e(pC,mEr),e(pC,LQ),e(LQ,fEr),e(pC,gEr),e(z,hEr),e(z,_C),e(_C,pve),e(pve,uEr),e(_C,pEr),e(_C,xQ),e(xQ,_Er),e(_C,bEr),e(z,FEr),e(z,bC),e(bC,_ve),e(_ve,vEr),e(bC,TEr),e(bC,kQ),e(kQ,MEr),e(bC,EEr),e(z,CEr),e(z,FC),e(FC,bve),e(bve,wEr),e(FC,AEr),e(FC,SQ),e(SQ,yEr),e(FC,LEr),e(z,xEr),e(z,vC),e(vC,Fve),e(Fve,kEr),e(vC,SEr),e(vC,RQ),e(RQ,REr),e(vC,BEr),e(z,PEr),e(z,TC),e(TC,vve),e(vve,$Er),e(TC,IEr),e(TC,BQ),e(BQ,qEr),e(TC,NEr),e(z,jEr),e(z,MC),e(MC,Tve),e(Tve,DEr),e(MC,GEr),e(MC,PQ),e(PQ,OEr),e(MC,VEr),e(z,XEr),e(z,EC),e(EC,Mve),e(Mve,zEr),e(EC,QEr),e(EC,$Q),e($Q,WEr),e(EC,HEr),e(z,UEr),e(z,CC),e(CC,Eve),e(Eve,JEr),e(CC,YEr),e(CC,IQ),e(IQ,KEr),e(CC,ZEr),e(z,eCr),e(z,wC),e(wC,Cve),e(Cve,oCr),e(wC,rCr),e(wC,qQ),e(qQ,tCr),e(wC,aCr),e(z,nCr),e(z,AC),e(AC,wve),e(wve,sCr),e(AC,lCr),e(AC,NQ),e(NQ,iCr),e(AC,dCr),e(z,cCr),e(z,yC),e(yC,Ave),e(Ave,mCr),e(yC,fCr),e(yC,jQ),e(jQ,gCr),e(yC,hCr),e(z,uCr),e(z,LC),e(LC,yve),e(yve,pCr),e(LC,_Cr),e(LC,DQ),e(DQ,bCr),e(LC,FCr),e(z,vCr),e(z,xC),e(xC,Lve),e(Lve,TCr),e(xC,MCr),e(xC,GQ),e(GQ,ECr),e(xC,CCr),e(z,wCr),e(z,kC),e(kC,xve),e(xve,ACr),e(kC,yCr),e(kC,OQ),e(OQ,LCr),e(kC,xCr),e(z,kCr),e(z,SC),e(SC,kve),e(kve,SCr),e(SC,RCr),e(SC,VQ),e(VQ,BCr),e(SC,PCr),e(z,$Cr),e(z,RC),e(RC,Sve),e(Sve,ICr),e(RC,qCr),e(RC,XQ),e(XQ,NCr),e(RC,jCr),e(z,DCr),e(z,BC),e(BC,Rve),e(Rve,GCr),e(BC,OCr),e(BC,zQ),e(zQ,VCr),e(BC,XCr),e(z,zCr),e(z,PC),e(PC,Bve),e(Bve,QCr),e(PC,WCr),e(PC,QQ),e(QQ,HCr),e(PC,UCr),e(z,JCr),e(z,$C),e($C,Pve),e(Pve,YCr),e($C,KCr),e($C,WQ),e(WQ,ZCr),e($C,e5r),e(z,o5r),e(z,IC),e(IC,$ve),e($ve,r5r),e(IC,t5r),e(IC,HQ),e(HQ,a5r),e(IC,n5r),e(z,s5r),e(z,qC),e(qC,Ive),e(Ive,l5r),e(qC,i5r),e(qC,UQ),e(UQ,d5r),e(qC,c5r),e(z,m5r),e(z,NC),e(NC,qve),e(qve,f5r),e(NC,g5r),e(NC,JQ),e(JQ,h5r),e(NC,u5r),e(z,p5r),e(z,jC),e(jC,Nve),e(Nve,_5r),e(jC,b5r),e(jC,YQ),e(YQ,F5r),e(jC,v5r),e(z,T5r),e(z,DC),e(DC,jve),e(jve,M5r),e(DC,E5r),e(DC,KQ),e(KQ,C5r),e(DC,w5r),e(yo,A5r),e(yo,Dve),e(Dve,y5r),e(yo,L5r),g(VL,yo,null),b(c,RBe,_),b(c,om,_),e(om,GC),e(GC,Gve),g(XL,Gve,null),e(om,x5r),e(om,Ove),e(Ove,k5r),b(c,BBe,_),b(c,Br,_),g(zL,Br,null),e(Br,S5r),e(Br,rm),e(rm,R5r),e(rm,ZQ),e(ZQ,B5r),e(rm,P5r),e(rm,eW),e(eW,$5r),e(rm,I5r),e(Br,q5r),e(Br,QL),e(QL,N5r),e(QL,Vve),e(Vve,j5r),e(QL,D5r),e(Br,G5r),e(Br,yt),g(WL,yt,null),e(yt,O5r),e(yt,Xve),e(Xve,V5r),e(yt,X5r),e(yt,tm),e(tm,z5r),e(tm,zve),e(zve,Q5r),e(tm,W5r),e(tm,oW),e(oW,H5r),e(tm,U5r),e(yt,J5r),e(yt,Qve),e(Qve,Y5r),e(yt,K5r),g(HL,yt,null),e(Br,Z5r),e(Br,Lo),g(UL,Lo,null),e(Lo,e3r),e(Lo,Wve),e(Wve,o3r),e(Lo,r3r),e(Lo,kn),e(kn,t3r),e(kn,Hve),e(Hve,a3r),e(kn,n3r),e(kn,Uve),e(Uve,s3r),e(kn,l3r),e(kn,Jve),e(Jve,i3r),e(kn,d3r),e(Lo,c3r),e(Lo,ca),e(ca,OC),e(OC,Yve),e(Yve,m3r),e(OC,f3r),e(OC,rW),e(rW,g3r),e(OC,h3r),e(ca,u3r),e(ca,VC),e(VC,Kve),e(Kve,p3r),e(VC,_3r),e(VC,tW),e(tW,b3r),e(VC,F3r),e(ca,v3r),e(ca,XC),e(XC,Zve),e(Zve,T3r),e(XC,M3r),e(XC,aW),e(aW,E3r),e(XC,C3r),e(ca,w3r),e(ca,zC),e(zC,eTe),e(eTe,A3r),e(zC,y3r),e(zC,nW),e(nW,L3r),e(zC,x3r),e(ca,k3r),e(ca,QC),e(QC,oTe),e(oTe,S3r),e(QC,R3r),e(QC,sW),e(sW,B3r),e(QC,P3r),e(Lo,$3r),e(Lo,rTe),e(rTe,I3r),e(Lo,q3r),g(JL,Lo,null),b(c,PBe,_),b(c,am,_),e(am,WC),e(WC,tTe),g(YL,tTe,null),e(am,N3r),e(am,aTe),e(aTe,j3r),b(c,$Be,_),b(c,Pr,_),g(KL,Pr,null),e(Pr,D3r),e(Pr,nm),e(nm,G3r),e(nm,lW),e(lW,O3r),e(nm,V3r),e(nm,iW),e(iW,X3r),e(nm,z3r),e(Pr,Q3r),e(Pr,ZL),e(ZL,W3r),e(ZL,nTe),e(nTe,H3r),e(ZL,U3r),e(Pr,J3r),e(Pr,Lt),g(e8,Lt,null),e(Lt,Y3r),e(Lt,sTe),e(sTe,K3r),e(Lt,Z3r),e(Lt,sm),e(sm,ewr),e(sm,lTe),e(lTe,owr),e(sm,rwr),e(sm,dW),e(dW,twr),e(sm,awr),e(Lt,nwr),e(Lt,iTe),e(iTe,swr),e(Lt,lwr),g(o8,Lt,null),e(Pr,iwr),e(Pr,xo),g(r8,xo,null),e(xo,dwr),e(xo,dTe),e(dTe,cwr),e(xo,mwr),e(xo,Sn),e(Sn,fwr),e(Sn,cTe),e(cTe,gwr),e(Sn,hwr),e(Sn,mTe),e(mTe,uwr),e(Sn,pwr),e(Sn,fTe),e(fTe,_wr),e(Sn,bwr),e(xo,Fwr),e(xo,fe),e(fe,HC),e(HC,gTe),e(gTe,vwr),e(HC,Twr),e(HC,cW),e(cW,Mwr),e(HC,Ewr),e(fe,Cwr),e(fe,UC),e(UC,hTe),e(hTe,wwr),e(UC,Awr),e(UC,mW),e(mW,ywr),e(UC,Lwr),e(fe,xwr),e(fe,JC),e(JC,uTe),e(uTe,kwr),e(JC,Swr),e(JC,fW),e(fW,Rwr),e(JC,Bwr),e(fe,Pwr),e(fe,YC),e(YC,pTe),e(pTe,$wr),e(YC,Iwr),e(YC,gW),e(gW,qwr),e(YC,Nwr),e(fe,jwr),e(fe,KC),e(KC,_Te),e(_Te,Dwr),e(KC,Gwr),e(KC,hW),e(hW,Owr),e(KC,Vwr),e(fe,Xwr),e(fe,ZC),e(ZC,bTe),e(bTe,zwr),e(ZC,Qwr),e(ZC,uW),e(uW,Wwr),e(ZC,Hwr),e(fe,Uwr),e(fe,e5),e(e5,FTe),e(FTe,Jwr),e(e5,Ywr),e(e5,pW),e(pW,Kwr),e(e5,Zwr),e(fe,eAr),e(fe,o5),e(o5,vTe),e(vTe,oAr),e(o5,rAr),e(o5,_W),e(_W,tAr),e(o5,aAr),e(fe,nAr),e(fe,r5),e(r5,TTe),e(TTe,sAr),e(r5,lAr),e(r5,bW),e(bW,iAr),e(r5,dAr),e(fe,cAr),e(fe,t5),e(t5,MTe),e(MTe,mAr),e(t5,fAr),e(t5,FW),e(FW,gAr),e(t5,hAr),e(fe,uAr),e(fe,a5),e(a5,ETe),e(ETe,pAr),e(a5,_Ar),e(a5,vW),e(vW,bAr),e(a5,FAr),e(fe,vAr),e(fe,n5),e(n5,CTe),e(CTe,TAr),e(n5,MAr),e(n5,TW),e(TW,EAr),e(n5,CAr),e(xo,wAr),e(xo,wTe),e(wTe,AAr),e(xo,yAr),g(t8,xo,null),b(c,IBe,_),b(c,lm,_),e(lm,s5),e(s5,ATe),g(a8,ATe,null),e(lm,LAr),e(lm,yTe),e(yTe,xAr),b(c,qBe,_),b(c,$r,_),g(n8,$r,null),e($r,kAr),e($r,im),e(im,SAr),e(im,MW),e(MW,RAr),e(im,BAr),e(im,EW),e(EW,PAr),e(im,$Ar),e($r,IAr),e($r,s8),e(s8,qAr),e(s8,LTe),e(LTe,NAr),e(s8,jAr),e($r,DAr),e($r,xt),g(l8,xt,null),e(xt,GAr),e(xt,xTe),e(xTe,OAr),e(xt,VAr),e(xt,dm),e(dm,XAr),e(dm,kTe),e(kTe,zAr),e(dm,QAr),e(dm,CW),e(CW,WAr),e(dm,HAr),e(xt,UAr),e(xt,STe),e(STe,JAr),e(xt,YAr),g(i8,xt,null),e($r,KAr),e($r,ko),g(d8,ko,null),e(ko,ZAr),e(ko,RTe),e(RTe,e6r),e(ko,o6r),e(ko,Rn),e(Rn,r6r),e(Rn,BTe),e(BTe,t6r),e(Rn,a6r),e(Rn,PTe),e(PTe,n6r),e(Rn,s6r),e(Rn,$Te),e($Te,l6r),e(Rn,i6r),e(ko,d6r),e(ko,Fe),e(Fe,l5),e(l5,ITe),e(ITe,c6r),e(l5,m6r),e(l5,wW),e(wW,f6r),e(l5,g6r),e(Fe,h6r),e(Fe,i5),e(i5,qTe),e(qTe,u6r),e(i5,p6r),e(i5,AW),e(AW,_6r),e(i5,b6r),e(Fe,F6r),e(Fe,d5),e(d5,NTe),e(NTe,v6r),e(d5,T6r),e(d5,yW),e(yW,M6r),e(d5,E6r),e(Fe,C6r),e(Fe,c5),e(c5,jTe),e(jTe,w6r),e(c5,A6r),e(c5,LW),e(LW,y6r),e(c5,L6r),e(Fe,x6r),e(Fe,m5),e(m5,DTe),e(DTe,k6r),e(m5,S6r),e(m5,xW),e(xW,R6r),e(m5,B6r),e(Fe,P6r),e(Fe,f5),e(f5,GTe),e(GTe,$6r),e(f5,I6r),e(f5,kW),e(kW,q6r),e(f5,N6r),e(Fe,j6r),e(Fe,g5),e(g5,OTe),e(OTe,D6r),e(g5,G6r),e(g5,SW),e(SW,O6r),e(g5,V6r),e(Fe,X6r),e(Fe,h5),e(h5,VTe),e(VTe,z6r),e(h5,Q6r),e(h5,RW),e(RW,W6r),e(h5,H6r),e(Fe,U6r),e(Fe,u5),e(u5,XTe),e(XTe,J6r),e(u5,Y6r),e(u5,BW),e(BW,K6r),e(u5,Z6r),e(Fe,e0r),e(Fe,p5),e(p5,zTe),e(zTe,o0r),e(p5,r0r),e(p5,PW),e(PW,t0r),e(p5,a0r),e(ko,n0r),e(ko,QTe),e(QTe,s0r),e(ko,l0r),g(c8,ko,null),b(c,NBe,_),b(c,cm,_),e(cm,_5),e(_5,WTe),g(m8,WTe,null),e(cm,i0r),e(cm,HTe),e(HTe,d0r),b(c,jBe,_),b(c,Ir,_),g(f8,Ir,null),e(Ir,c0r),e(Ir,mm),e(mm,m0r),e(mm,$W),e($W,f0r),e(mm,g0r),e(mm,IW),e(IW,h0r),e(mm,u0r),e(Ir,p0r),e(Ir,g8),e(g8,_0r),e(g8,UTe),e(UTe,b0r),e(g8,F0r),e(Ir,v0r),e(Ir,kt),g(h8,kt,null),e(kt,T0r),e(kt,JTe),e(JTe,M0r),e(kt,E0r),e(kt,fm),e(fm,C0r),e(fm,YTe),e(YTe,w0r),e(fm,A0r),e(fm,qW),e(qW,y0r),e(fm,L0r),e(kt,x0r),e(kt,KTe),e(KTe,k0r),e(kt,S0r),g(u8,kt,null),e(Ir,R0r),e(Ir,So),g(p8,So,null),e(So,B0r),e(So,ZTe),e(ZTe,P0r),e(So,$0r),e(So,Bn),e(Bn,I0r),e(Bn,e1e),e(e1e,q0r),e(Bn,N0r),e(Bn,o1e),e(o1e,j0r),e(Bn,D0r),e(Bn,r1e),e(r1e,G0r),e(Bn,O0r),e(So,V0r),e(So,Ee),e(Ee,b5),e(b5,t1e),e(t1e,X0r),e(b5,z0r),e(b5,NW),e(NW,Q0r),e(b5,W0r),e(Ee,H0r),e(Ee,F5),e(F5,a1e),e(a1e,U0r),e(F5,J0r),e(F5,jW),e(jW,Y0r),e(F5,K0r),e(Ee,Z0r),e(Ee,v5),e(v5,n1e),e(n1e,eyr),e(v5,oyr),e(v5,DW),e(DW,ryr),e(v5,tyr),e(Ee,ayr),e(Ee,T5),e(T5,s1e),e(s1e,nyr),e(T5,syr),e(T5,GW),e(GW,lyr),e(T5,iyr),e(Ee,dyr),e(Ee,M5),e(M5,l1e),e(l1e,cyr),e(M5,myr),e(M5,OW),e(OW,fyr),e(M5,gyr),e(Ee,hyr),e(Ee,E5),e(E5,i1e),e(i1e,uyr),e(E5,pyr),e(E5,VW),e(VW,_yr),e(E5,byr),e(Ee,Fyr),e(Ee,C5),e(C5,d1e),e(d1e,vyr),e(C5,Tyr),e(C5,XW),e(XW,Myr),e(C5,Eyr),e(Ee,Cyr),e(Ee,w5),e(w5,c1e),e(c1e,wyr),e(w5,Ayr),e(w5,zW),e(zW,yyr),e(w5,Lyr),e(Ee,xyr),e(Ee,A5),e(A5,m1e),e(m1e,kyr),e(A5,Syr),e(A5,QW),e(QW,Ryr),e(A5,Byr),e(So,Pyr),e(So,f1e),e(f1e,$yr),e(So,Iyr),g(_8,So,null),b(c,DBe,_),b(c,gm,_),e(gm,y5),e(y5,g1e),g(b8,g1e,null),e(gm,qyr),e(gm,h1e),e(h1e,Nyr),b(c,GBe,_),b(c,qr,_),g(F8,qr,null),e(qr,jyr),e(qr,hm),e(hm,Dyr),e(hm,WW),e(WW,Gyr),e(hm,Oyr),e(hm,HW),e(HW,Vyr),e(hm,Xyr),e(qr,zyr),e(qr,v8),e(v8,Qyr),e(v8,u1e),e(u1e,Wyr),e(v8,Hyr),e(qr,Uyr),e(qr,St),g(T8,St,null),e(St,Jyr),e(St,p1e),e(p1e,Yyr),e(St,Kyr),e(St,um),e(um,Zyr),e(um,_1e),e(_1e,eLr),e(um,oLr),e(um,UW),e(UW,rLr),e(um,tLr),e(St,aLr),e(St,b1e),e(b1e,nLr),e(St,sLr),g(M8,St,null),e(qr,lLr),e(qr,Ro),g(E8,Ro,null),e(Ro,iLr),e(Ro,F1e),e(F1e,dLr),e(Ro,cLr),e(Ro,Pn),e(Pn,mLr),e(Pn,v1e),e(v1e,fLr),e(Pn,gLr),e(Pn,T1e),e(T1e,hLr),e(Pn,uLr),e(Pn,M1e),e(M1e,pLr),e(Pn,_Lr),e(Ro,bLr),e(Ro,ve),e(ve,L5),e(L5,E1e),e(E1e,FLr),e(L5,vLr),e(L5,JW),e(JW,TLr),e(L5,MLr),e(ve,ELr),e(ve,x5),e(x5,C1e),e(C1e,CLr),e(x5,wLr),e(x5,YW),e(YW,ALr),e(x5,yLr),e(ve,LLr),e(ve,k5),e(k5,w1e),e(w1e,xLr),e(k5,kLr),e(k5,KW),e(KW,SLr),e(k5,RLr),e(ve,BLr),e(ve,S5),e(S5,A1e),e(A1e,PLr),e(S5,$Lr),e(S5,ZW),e(ZW,ILr),e(S5,qLr),e(ve,NLr),e(ve,R5),e(R5,y1e),e(y1e,jLr),e(R5,DLr),e(R5,eH),e(eH,GLr),e(R5,OLr),e(ve,VLr),e(ve,B5),e(B5,L1e),e(L1e,XLr),e(B5,zLr),e(B5,oH),e(oH,QLr),e(B5,WLr),e(ve,HLr),e(ve,P5),e(P5,x1e),e(x1e,ULr),e(P5,JLr),e(P5,rH),e(rH,YLr),e(P5,KLr),e(ve,ZLr),e(ve,$5),e($5,k1e),e(k1e,e8r),e($5,o8r),e($5,tH),e(tH,r8r),e($5,t8r),e(ve,a8r),e(ve,I5),e(I5,S1e),e(S1e,n8r),e(I5,s8r),e(I5,aH),e(aH,l8r),e(I5,i8r),e(ve,d8r),e(ve,q5),e(q5,R1e),e(R1e,c8r),e(q5,m8r),e(q5,nH),e(nH,f8r),e(q5,g8r),e(Ro,h8r),e(Ro,B1e),e(B1e,u8r),e(Ro,p8r),g(C8,Ro,null),b(c,OBe,_),b(c,pm,_),e(pm,N5),e(N5,P1e),g(w8,P1e,null),e(pm,_8r),e(pm,$1e),e($1e,b8r),b(c,VBe,_),b(c,Nr,_),g(A8,Nr,null),e(Nr,F8r),e(Nr,_m),e(_m,v8r),e(_m,sH),e(sH,T8r),e(_m,M8r),e(_m,lH),e(lH,E8r),e(_m,C8r),e(Nr,w8r),e(Nr,y8),e(y8,A8r),e(y8,I1e),e(I1e,y8r),e(y8,L8r),e(Nr,x8r),e(Nr,Rt),g(L8,Rt,null),e(Rt,k8r),e(Rt,q1e),e(q1e,S8r),e(Rt,R8r),e(Rt,bm),e(bm,B8r),e(bm,N1e),e(N1e,P8r),e(bm,$8r),e(bm,iH),e(iH,I8r),e(bm,q8r),e(Rt,N8r),e(Rt,j1e),e(j1e,j8r),e(Rt,D8r),g(x8,Rt,null),e(Nr,G8r),e(Nr,Bo),g(k8,Bo,null),e(Bo,O8r),e(Bo,D1e),e(D1e,V8r),e(Bo,X8r),e(Bo,$n),e($n,z8r),e($n,G1e),e(G1e,Q8r),e($n,W8r),e($n,O1e),e(O1e,H8r),e($n,U8r),e($n,V1e),e(V1e,J8r),e($n,Y8r),e(Bo,K8r),e(Bo,Te),e(Te,j5),e(j5,X1e),e(X1e,Z8r),e(j5,e7r),e(j5,dH),e(dH,o7r),e(j5,r7r),e(Te,t7r),e(Te,D5),e(D5,z1e),e(z1e,a7r),e(D5,n7r),e(D5,cH),e(cH,s7r),e(D5,l7r),e(Te,i7r),e(Te,G5),e(G5,Q1e),e(Q1e,d7r),e(G5,c7r),e(G5,mH),e(mH,m7r),e(G5,f7r),e(Te,g7r),e(Te,O5),e(O5,W1e),e(W1e,h7r),e(O5,u7r),e(O5,fH),e(fH,p7r),e(O5,_7r),e(Te,b7r),e(Te,V5),e(V5,H1e),e(H1e,F7r),e(V5,v7r),e(V5,gH),e(gH,T7r),e(V5,M7r),e(Te,E7r),e(Te,X5),e(X5,U1e),e(U1e,C7r),e(X5,w7r),e(X5,hH),e(hH,A7r),e(X5,y7r),e(Te,L7r),e(Te,z5),e(z5,J1e),e(J1e,x7r),e(z5,k7r),e(z5,uH),e(uH,S7r),e(z5,R7r),e(Te,B7r),e(Te,Q5),e(Q5,Y1e),e(Y1e,P7r),e(Q5,$7r),e(Q5,pH),e(pH,I7r),e(Q5,q7r),e(Te,N7r),e(Te,W5),e(W5,K1e),e(K1e,j7r),e(W5,D7r),e(W5,_H),e(_H,G7r),e(W5,O7r),e(Te,V7r),e(Te,H5),e(H5,Z1e),e(Z1e,X7r),e(H5,z7r),e(H5,bH),e(bH,Q7r),e(H5,W7r),e(Bo,H7r),e(Bo,eMe),e(eMe,U7r),e(Bo,J7r),g(S8,Bo,null),b(c,XBe,_),b(c,Fm,_),e(Fm,U5),e(U5,oMe),g(R8,oMe,null),e(Fm,Y7r),e(Fm,rMe),e(rMe,K7r),b(c,zBe,_),b(c,jr,_),g(B8,jr,null),e(jr,Z7r),e(jr,vm),e(vm,e9r),e(vm,FH),e(FH,o9r),e(vm,r9r),e(vm,vH),e(vH,t9r),e(vm,a9r),e(jr,n9r),e(jr,P8),e(P8,s9r),e(P8,tMe),e(tMe,l9r),e(P8,i9r),e(jr,d9r),e(jr,Bt),g($8,Bt,null),e(Bt,c9r),e(Bt,aMe),e(aMe,m9r),e(Bt,f9r),e(Bt,Tm),e(Tm,g9r),e(Tm,nMe),e(nMe,h9r),e(Tm,u9r),e(Tm,TH),e(TH,p9r),e(Tm,_9r),e(Bt,b9r),e(Bt,sMe),e(sMe,F9r),e(Bt,v9r),g(I8,Bt,null),e(jr,T9r),e(jr,Po),g(q8,Po,null),e(Po,M9r),e(Po,lMe),e(lMe,E9r),e(Po,C9r),e(Po,In),e(In,w9r),e(In,iMe),e(iMe,A9r),e(In,y9r),e(In,dMe),e(dMe,L9r),e(In,x9r),e(In,cMe),e(cMe,k9r),e(In,S9r),e(Po,R9r),e(Po,Be),e(Be,J5),e(J5,mMe),e(mMe,B9r),e(J5,P9r),e(J5,MH),e(MH,$9r),e(J5,I9r),e(Be,q9r),e(Be,Y5),e(Y5,fMe),e(fMe,N9r),e(Y5,j9r),e(Y5,EH),e(EH,D9r),e(Y5,G9r),e(Be,O9r),e(Be,K5),e(K5,gMe),e(gMe,V9r),e(K5,X9r),e(K5,CH),e(CH,z9r),e(K5,Q9r),e(Be,W9r),e(Be,Z5),e(Z5,hMe),e(hMe,H9r),e(Z5,U9r),e(Z5,wH),e(wH,J9r),e(Z5,Y9r),e(Be,K9r),e(Be,e3),e(e3,uMe),e(uMe,Z9r),e(e3,exr),e(e3,AH),e(AH,oxr),e(e3,rxr),e(Be,txr),e(Be,o3),e(o3,pMe),e(pMe,axr),e(o3,nxr),e(o3,yH),e(yH,sxr),e(o3,lxr),e(Be,ixr),e(Be,r3),e(r3,_Me),e(_Me,dxr),e(r3,cxr),e(r3,LH),e(LH,mxr),e(r3,fxr),e(Be,gxr),e(Be,t3),e(t3,bMe),e(bMe,hxr),e(t3,uxr),e(t3,xH),e(xH,pxr),e(t3,_xr),e(Po,bxr),e(Po,FMe),e(FMe,Fxr),e(Po,vxr),g(N8,Po,null),b(c,QBe,_),b(c,Mm,_),e(Mm,a3),e(a3,vMe),g(j8,vMe,null),e(Mm,Txr),e(Mm,TMe),e(TMe,Mxr),b(c,WBe,_),b(c,Dr,_),g(D8,Dr,null),e(Dr,Exr),e(Dr,Em),e(Em,Cxr),e(Em,kH),e(kH,wxr),e(Em,Axr),e(Em,SH),e(SH,yxr),e(Em,Lxr),e(Dr,xxr),e(Dr,G8),e(G8,kxr),e(G8,MMe),e(MMe,Sxr),e(G8,Rxr),e(Dr,Bxr),e(Dr,Pt),g(O8,Pt,null),e(Pt,Pxr),e(Pt,EMe),e(EMe,$xr),e(Pt,Ixr),e(Pt,Cm),e(Cm,qxr),e(Cm,CMe),e(CMe,Nxr),e(Cm,jxr),e(Cm,RH),e(RH,Dxr),e(Cm,Gxr),e(Pt,Oxr),e(Pt,wMe),e(wMe,Vxr),e(Pt,Xxr),g(V8,Pt,null),e(Dr,zxr),e(Dr,$o),g(X8,$o,null),e($o,Qxr),e($o,AMe),e(AMe,Wxr),e($o,Hxr),e($o,qn),e(qn,Uxr),e(qn,yMe),e(yMe,Jxr),e(qn,Yxr),e(qn,LMe),e(LMe,Kxr),e(qn,Zxr),e(qn,xMe),e(xMe,ekr),e(qn,okr),e($o,rkr),e($o,Pe),e(Pe,n3),e(n3,kMe),e(kMe,tkr),e(n3,akr),e(n3,BH),e(BH,nkr),e(n3,skr),e(Pe,lkr),e(Pe,s3),e(s3,SMe),e(SMe,ikr),e(s3,dkr),e(s3,PH),e(PH,ckr),e(s3,mkr),e(Pe,fkr),e(Pe,l3),e(l3,RMe),e(RMe,gkr),e(l3,hkr),e(l3,$H),e($H,ukr),e(l3,pkr),e(Pe,_kr),e(Pe,i3),e(i3,BMe),e(BMe,bkr),e(i3,Fkr),e(i3,IH),e(IH,vkr),e(i3,Tkr),e(Pe,Mkr),e(Pe,d3),e(d3,PMe),e(PMe,Ekr),e(d3,Ckr),e(d3,qH),e(qH,wkr),e(d3,Akr),e(Pe,ykr),e(Pe,c3),e(c3,$Me),e($Me,Lkr),e(c3,xkr),e(c3,NH),e(NH,kkr),e(c3,Skr),e(Pe,Rkr),e(Pe,m3),e(m3,IMe),e(IMe,Bkr),e(m3,Pkr),e(m3,jH),e(jH,$kr),e(m3,Ikr),e(Pe,qkr),e(Pe,f3),e(f3,qMe),e(qMe,Nkr),e(f3,jkr),e(f3,DH),e(DH,Dkr),e(f3,Gkr),e($o,Okr),e($o,NMe),e(NMe,Vkr),e($o,Xkr),g(z8,$o,null),b(c,HBe,_),b(c,wm,_),e(wm,g3),e(g3,jMe),g(Q8,jMe,null),e(wm,zkr),e(wm,DMe),e(DMe,Qkr),b(c,UBe,_),b(c,Gr,_),g(W8,Gr,null),e(Gr,Wkr),e(Gr,Am),e(Am,Hkr),e(Am,GH),e(GH,Ukr),e(Am,Jkr),e(Am,OH),e(OH,Ykr),e(Am,Kkr),e(Gr,Zkr),e(Gr,H8),e(H8,eSr),e(H8,GMe),e(GMe,oSr),e(H8,rSr),e(Gr,tSr),e(Gr,$t),g(U8,$t,null),e($t,aSr),e($t,OMe),e(OMe,nSr),e($t,sSr),e($t,ym),e(ym,lSr),e(ym,VMe),e(VMe,iSr),e(ym,dSr),e(ym,VH),e(VH,cSr),e(ym,mSr),e($t,fSr),e($t,XMe),e(XMe,gSr),e($t,hSr),g(J8,$t,null),e(Gr,uSr),e(Gr,Io),g(Y8,Io,null),e(Io,pSr),e(Io,zMe),e(zMe,_Sr),e(Io,bSr),e(Io,Nn),e(Nn,FSr),e(Nn,QMe),e(QMe,vSr),e(Nn,TSr),e(Nn,WMe),e(WMe,MSr),e(Nn,ESr),e(Nn,HMe),e(HMe,CSr),e(Nn,wSr),e(Io,ASr),e(Io,UMe),e(UMe,h3),e(h3,JMe),e(JMe,ySr),e(h3,LSr),e(h3,XH),e(XH,xSr),e(h3,kSr),e(Io,SSr),e(Io,YMe),e(YMe,RSr),e(Io,BSr),g(K8,Io,null),b(c,JBe,_),b(c,Lm,_),e(Lm,u3),e(u3,KMe),g(Z8,KMe,null),e(Lm,PSr),e(Lm,ZMe),e(ZMe,$Sr),b(c,YBe,_),b(c,Or,_),g(e7,Or,null),e(Or,ISr),e(Or,xm),e(xm,qSr),e(xm,zH),e(zH,NSr),e(xm,jSr),e(xm,QH),e(QH,DSr),e(xm,GSr),e(Or,OSr),e(Or,o7),e(o7,VSr),e(o7,e4e),e(e4e,XSr),e(o7,zSr),e(Or,QSr),e(Or,It),g(r7,It,null),e(It,WSr),e(It,o4e),e(o4e,HSr),e(It,USr),e(It,km),e(km,JSr),e(km,r4e),e(r4e,YSr),e(km,KSr),e(km,WH),e(WH,ZSr),e(km,eRr),e(It,oRr),e(It,t4e),e(t4e,rRr),e(It,tRr),g(t7,It,null),e(Or,aRr),e(Or,qo),g(a7,qo,null),e(qo,nRr),e(qo,a4e),e(a4e,sRr),e(qo,lRr),e(qo,jn),e(jn,iRr),e(jn,n4e),e(n4e,dRr),e(jn,cRr),e(jn,s4e),e(s4e,mRr),e(jn,fRr),e(jn,l4e),e(l4e,gRr),e(jn,hRr),e(qo,uRr),e(qo,n7),e(n7,p3),e(p3,i4e),e(i4e,pRr),e(p3,_Rr),e(p3,HH),e(HH,bRr),e(p3,FRr),e(n7,vRr),e(n7,_3),e(_3,d4e),e(d4e,TRr),e(_3,MRr),e(_3,UH),e(UH,ERr),e(_3,CRr),e(qo,wRr),e(qo,c4e),e(c4e,ARr),e(qo,yRr),g(s7,qo,null),b(c,KBe,_),b(c,Sm,_),e(Sm,b3),e(b3,m4e),g(l7,m4e,null),e(Sm,LRr),e(Sm,f4e),e(f4e,xRr),b(c,ZBe,_),b(c,Vr,_),g(i7,Vr,null),e(Vr,kRr),e(Vr,Rm),e(Rm,SRr),e(Rm,JH),e(JH,RRr),e(Rm,BRr),e(Rm,YH),e(YH,PRr),e(Rm,$Rr),e(Vr,IRr),e(Vr,d7),e(d7,qRr),e(d7,g4e),e(g4e,NRr),e(d7,jRr),e(Vr,DRr),e(Vr,qt),g(c7,qt,null),e(qt,GRr),e(qt,h4e),e(h4e,ORr),e(qt,VRr),e(qt,Bm),e(Bm,XRr),e(Bm,u4e),e(u4e,zRr),e(Bm,QRr),e(Bm,KH),e(KH,WRr),e(Bm,HRr),e(qt,URr),e(qt,p4e),e(p4e,JRr),e(qt,YRr),g(m7,qt,null),e(Vr,KRr),e(Vr,No),g(f7,No,null),e(No,ZRr),e(No,_4e),e(_4e,eBr),e(No,oBr),e(No,Dn),e(Dn,rBr),e(Dn,b4e),e(b4e,tBr),e(Dn,aBr),e(Dn,F4e),e(F4e,nBr),e(Dn,sBr),e(Dn,v4e),e(v4e,lBr),e(Dn,iBr),e(No,dBr),e(No,T4e),e(T4e,F3),e(F3,M4e),e(M4e,cBr),e(F3,mBr),e(F3,ZH),e(ZH,fBr),e(F3,gBr),e(No,hBr),e(No,E4e),e(E4e,uBr),e(No,pBr),g(g7,No,null),ePe=!0},p(c,[_]){const h7={};_&2&&(h7.$$scope={dirty:_,ctx:c}),Gm.$set(h7);const C4e={};_&2&&(C4e.$$scope={dirty:_,ctx:c}),Ph.$set(C4e);const w4e={};_&2&&(w4e.$$scope={dirty:_,ctx:c}),zh.$set(w4e)},i(c){ePe||(h(ge.$$.fragment,c),h(Da.$$.fragment,c),h(Ew.$$.fragment,c),h(Cw.$$.fragment,c),h(Gm.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Sw.$$.fragment,c),h(Rw.$$.fragment,c),h(Bw.$$.fragment,c),h(Iw.$$.fragment,c),h(qw.$$.fragment,c),h(Nw.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(Vw.$$.fragment,c),h(Ph.$$.fragment,c),h(Xw.$$.fragment,c),h(zw.$$.fragment,c),h(Qw.$$.fragment,c),h(Ww.$$.fragment,c),h(Jw.$$.fragment,c),h(zh.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(eA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(mA.$$.fragment,c),h(fA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(bA.$$.fragment,c),h(FA.$$.fragment,c),h(vA.$$.fragment,c),h(TA.$$.fragment,c),h(EA.$$.fragment,c),h(CA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(yA.$$.fragment,c),h(LA.$$.fragment,c),h(kA.$$.fragment,c),h(SA.$$.fragment,c),h(RA.$$.fragment,c),h(BA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(qA.$$.fragment,c),h(NA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(XA.$$.fragment,c),h(zA.$$.fragment,c),h(QA.$$.fragment,c),h(WA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(e6.$$.fragment,c),h(o6.$$.fragment,c),h(r6.$$.fragment,c),h(a6.$$.fragment,c),h(n6.$$.fragment,c),h(s6.$$.fragment,c),h(l6.$$.fragment,c),h(i6.$$.fragment,c),h(d6.$$.fragment,c),h(m6.$$.fragment,c),h(f6.$$.fragment,c),h(g6.$$.fragment,c),h(h6.$$.fragment,c),h(u6.$$.fragment,c),h(p6.$$.fragment,c),h(b6.$$.fragment,c),h(F6.$$.fragment,c),h(v6.$$.fragment,c),h(T6.$$.fragment,c),h(M6.$$.fragment,c),h(E6.$$.fragment,c),h(w6.$$.fragment,c),h(A6.$$.fragment,c),h(y6.$$.fragment,c),h(L6.$$.fragment,c),h(x6.$$.fragment,c),h(k6.$$.fragment,c),h(R6.$$.fragment,c),h(B6.$$.fragment,c),h(P6.$$.fragment,c),h($6.$$.fragment,c),h(I6.$$.fragment,c),h(q6.$$.fragment,c),h(j6.$$.fragment,c),h(D6.$$.fragment,c),h(G6.$$.fragment,c),h(O6.$$.fragment,c),h(V6.$$.fragment,c),h(X6.$$.fragment,c),h(Q6.$$.fragment,c),h(W6.$$.fragment,c),h(H6.$$.fragment,c),h(U6.$$.fragment,c),h(J6.$$.fragment,c),h(Y6.$$.fragment,c),h(Z6.$$.fragment,c),h(e0.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(s0.$$.fragment,c),h(l0.$$.fragment,c),h(i0.$$.fragment,c),h(c0.$$.fragment,c),h(m0.$$.fragment,c),h(f0.$$.fragment,c),h(h0.$$.fragment,c),h(u0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(b0.$$.fragment,c),h(F0.$$.fragment,c),h(T0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(C0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(L0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(S0.$$.fragment,c),h(R0.$$.fragment,c),h(B0.$$.fragment,c),h($0.$$.fragment,c),h(I0.$$.fragment,c),h(q0.$$.fragment,c),h(N0.$$.fragment,c),h(j0.$$.fragment,c),h(D0.$$.fragment,c),h(O0.$$.fragment,c),h(V0.$$.fragment,c),h(X0.$$.fragment,c),h(z0.$$.fragment,c),h(Q0.$$.fragment,c),h(W0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(ey.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(my.$$.fragment,c),h(fy.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(by.$$.fragment,c),h(Fy.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(Ey.$$.fragment,c),h(Cy.$$.fragment,c),h(wy.$$.fragment,c),h(yy.$$.fragment,c),h(Ly.$$.fragment,c),h(xy.$$.fragment,c),h(Sy.$$.fragment,c),h(Ry.$$.fragment,c),h(By.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(Ny.$$.fragment,c),h(jy.$$.fragment,c),h(Dy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Vy.$$.fragment,c),h(zy.$$.fragment,c),h(Qy.$$.fragment,c),h(Wy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(uL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(FL.$$.fragment,c),h(vL.$$.fragment,c),h(TL.$$.fragment,c),h(ML.$$.fragment,c),h(EL.$$.fragment,c),h(CL.$$.fragment,c),h(AL.$$.fragment,c),h(yL.$$.fragment,c),h(LL.$$.fragment,c),h(xL.$$.fragment,c),h(kL.$$.fragment,c),h(SL.$$.fragment,c),h(BL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(IL.$$.fragment,c),h(qL.$$.fragment,c),h(NL.$$.fragment,c),h(DL.$$.fragment,c),h(GL.$$.fragment,c),h(OL.$$.fragment,c),h(VL.$$.fragment,c),h(XL.$$.fragment,c),h(zL.$$.fragment,c),h(WL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(JL.$$.fragment,c),h(YL.$$.fragment,c),h(KL.$$.fragment,c),h(e8.$$.fragment,c),h(o8.$$.fragment,c),h(r8.$$.fragment,c),h(t8.$$.fragment,c),h(a8.$$.fragment,c),h(n8.$$.fragment,c),h(l8.$$.fragment,c),h(i8.$$.fragment,c),h(d8.$$.fragment,c),h(c8.$$.fragment,c),h(m8.$$.fragment,c),h(f8.$$.fragment,c),h(h8.$$.fragment,c),h(u8.$$.fragment,c),h(p8.$$.fragment,c),h(_8.$$.fragment,c),h(b8.$$.fragment,c),h(F8.$$.fragment,c),h(T8.$$.fragment,c),h(M8.$$.fragment,c),h(E8.$$.fragment,c),h(C8.$$.fragment,c),h(w8.$$.fragment,c),h(A8.$$.fragment,c),h(L8.$$.fragment,c),h(x8.$$.fragment,c),h(k8.$$.fragment,c),h(S8.$$.fragment,c),h(R8.$$.fragment,c),h(B8.$$.fragment,c),h($8.$$.fragment,c),h(I8.$$.fragment,c),h(q8.$$.fragment,c),h(N8.$$.fragment,c),h(j8.$$.fragment,c),h(D8.$$.fragment,c),h(O8.$$.fragment,c),h(V8.$$.fragment,c),h(X8.$$.fragment,c),h(z8.$$.fragment,c),h(Q8.$$.fragment,c),h(W8.$$.fragment,c),h(U8.$$.fragment,c),h(J8.$$.fragment,c),h(Y8.$$.fragment,c),h(K8.$$.fragment,c),h(Z8.$$.fragment,c),h(e7.$$.fragment,c),h(r7.$$.fragment,c),h(t7.$$.fragment,c),h(a7.$$.fragment,c),h(s7.$$.fragment,c),h(l7.$$.fragment,c),h(i7.$$.fragment,c),h(c7.$$.fragment,c),h(m7.$$.fragment,c),h(f7.$$.fragment,c),h(g7.$$.fragment,c),ePe=!0)},o(c){u(ge.$$.fragment,c),u(Da.$$.fragment,c),u(Ew.$$.fragment,c),u(Cw.$$.fragment,c),u(Gm.$$.fragment,c),u(ww.$$.fragment,c),u(Aw.$$.fragment,c),u(xw.$$.fragment,c),u(kw.$$.fragment,c),u(Sw.$$.fragment,c),u(Rw.$$.fragment,c),u(Bw.$$.fragment,c),u(Iw.$$.fragment,c),u(qw.$$.fragment,c),u(Nw.$$.fragment,c),u(jw.$$.fragment,c),u(Dw.$$.fragment,c),u(Vw.$$.fragment,c),u(Ph.$$.fragment,c),u(Xw.$$.fragment,c),u(zw.$$.fragment,c),u(Qw.$$.fragment,c),u(Ww.$$.fragment,c),u(Jw.$$.fragment,c),u(zh.$$.fragment,c),u(Yw.$$.fragment,c),u(Kw.$$.fragment,c),u(Zw.$$.fragment,c),u(eA.$$.fragment,c),u(rA.$$.fragment,c),u(tA.$$.fragment,c),u(aA.$$.fragment,c),u(nA.$$.fragment,c),u(sA.$$.fragment,c),u(lA.$$.fragment,c),u(dA.$$.fragment,c),u(cA.$$.fragment,c),u(mA.$$.fragment,c),u(fA.$$.fragment,c),u(gA.$$.fragment,c),u(hA.$$.fragment,c),u(pA.$$.fragment,c),u(_A.$$.fragment,c),u(bA.$$.fragment,c),u(FA.$$.fragment,c),u(vA.$$.fragment,c),u(TA.$$.fragment,c),u(EA.$$.fragment,c),u(CA.$$.fragment,c),u(wA.$$.fragment,c),u(AA.$$.fragment,c),u(yA.$$.fragment,c),u(LA.$$.fragment,c),u(kA.$$.fragment,c),u(SA.$$.fragment,c),u(RA.$$.fragment,c),u(BA.$$.fragment,c),u(PA.$$.fragment,c),u($A.$$.fragment,c),u(qA.$$.fragment,c),u(NA.$$.fragment,c),u(jA.$$.fragment,c),u(DA.$$.fragment,c),u(GA.$$.fragment,c),u(OA.$$.fragment,c),u(XA.$$.fragment,c),u(zA.$$.fragment,c),u(QA.$$.fragment,c),u(WA.$$.fragment,c),u(HA.$$.fragment,c),u(UA.$$.fragment,c),u(YA.$$.fragment,c),u(KA.$$.fragment,c),u(ZA.$$.fragment,c),u(e6.$$.fragment,c),u(o6.$$.fragment,c),u(r6.$$.fragment,c),u(a6.$$.fragment,c),u(n6.$$.fragment,c),u(s6.$$.fragment,c),u(l6.$$.fragment,c),u(i6.$$.fragment,c),u(d6.$$.fragment,c),u(m6.$$.fragment,c),u(f6.$$.fragment,c),u(g6.$$.fragment,c),u(h6.$$.fragment,c),u(u6.$$.fragment,c),u(p6.$$.fragment,c),u(b6.$$.fragment,c),u(F6.$$.fragment,c),u(v6.$$.fragment,c),u(T6.$$.fragment,c),u(M6.$$.fragment,c),u(E6.$$.fragment,c),u(w6.$$.fragment,c),u(A6.$$.fragment,c),u(y6.$$.fragment,c),u(L6.$$.fragment,c),u(x6.$$.fragment,c),u(k6.$$.fragment,c),u(R6.$$.fragment,c),u(B6.$$.fragment,c),u(P6.$$.fragment,c),u($6.$$.fragment,c),u(I6.$$.fragment,c),u(q6.$$.fragment,c),u(j6.$$.fragment,c),u(D6.$$.fragment,c),u(G6.$$.fragment,c),u(O6.$$.fragment,c),u(V6.$$.fragment,c),u(X6.$$.fragment,c),u(Q6.$$.fragment,c),u(W6.$$.fragment,c),u(H6.$$.fragment,c),u(U6.$$.fragment,c),u(J6.$$.fragment,c),u(Y6.$$.fragment,c),u(Z6.$$.fragment,c),u(e0.$$.fragment,c),u(o0.$$.fragment,c),u(r0.$$.fragment,c),u(t0.$$.fragment,c),u(a0.$$.fragment,c),u(s0.$$.fragment,c),u(l0.$$.fragment,c),u(i0.$$.fragment,c),u(c0.$$.fragment,c),u(m0.$$.fragment,c),u(f0.$$.fragment,c),u(h0.$$.fragment,c),u(u0.$$.fragment,c),u(p0.$$.fragment,c),u(_0.$$.fragment,c),u(b0.$$.fragment,c),u(F0.$$.fragment,c),u(T0.$$.fragment,c),u(M0.$$.fragment,c),u(E0.$$.fragment,c),u(C0.$$.fragment,c),u(w0.$$.fragment,c),u(A0.$$.fragment,c),u(L0.$$.fragment,c),u(x0.$$.fragment,c),u(k0.$$.fragment,c),u(S0.$$.fragment,c),u(R0.$$.fragment,c),u(B0.$$.fragment,c),u($0.$$.fragment,c),u(I0.$$.fragment,c),u(q0.$$.fragment,c),u(N0.$$.fragment,c),u(j0.$$.fragment,c),u(D0.$$.fragment,c),u(O0.$$.fragment,c),u(V0.$$.fragment,c),u(X0.$$.fragment,c),u(z0.$$.fragment,c),u(Q0.$$.fragment,c),u(W0.$$.fragment,c),u(U0.$$.fragment,c),u(J0.$$.fragment,c),u(Y0.$$.fragment,c),u(K0.$$.fragment,c),u(Z0.$$.fragment,c),u(ey.$$.fragment,c),u(ry.$$.fragment,c),u(ty.$$.fragment,c),u(ay.$$.fragment,c),u(ny.$$.fragment,c),u(sy.$$.fragment,c),u(ly.$$.fragment,c),u(dy.$$.fragment,c),u(cy.$$.fragment,c),u(my.$$.fragment,c),u(fy.$$.fragment,c),u(gy.$$.fragment,c),u(hy.$$.fragment,c),u(py.$$.fragment,c),u(_y.$$.fragment,c),u(by.$$.fragment,c),u(Fy.$$.fragment,c),u(vy.$$.fragment,c),u(Ty.$$.fragment,c),u(Ey.$$.fragment,c),u(Cy.$$.fragment,c),u(wy.$$.fragment,c),u(yy.$$.fragment,c),u(Ly.$$.fragment,c),u(xy.$$.fragment,c),u(Sy.$$.fragment,c),u(Ry.$$.fragment,c),u(By.$$.fragment,c),u(Py.$$.fragment,c),u($y.$$.fragment,c),u(Iy.$$.fragment,c),u(Ny.$$.fragment,c),u(jy.$$.fragment,c),u(Dy.$$.fragment,c),u(Gy.$$.fragment,c),u(Oy.$$.fragment,c),u(Vy.$$.fragment,c),u(zy.$$.fragment,c),u(Qy.$$.fragment,c),u(Wy.$$.fragment,c),u(Hy.$$.fragment,c),u(Uy.$$.fragment,c),u(Jy.$$.fragment,c),u(Ky.$$.fragment,c),u(Zy.$$.fragment,c),u(eL.$$.fragment,c),u(oL.$$.fragment,c),u(rL.$$.fragment,c),u(tL.$$.fragment,c),u(nL.$$.fragment,c),u(sL.$$.fragment,c),u(lL.$$.fragment,c),u(iL.$$.fragment,c),u(dL.$$.fragment,c),u(cL.$$.fragment,c),u(fL.$$.fragment,c),u(gL.$$.fragment,c),u(hL.$$.fragment,c),u(uL.$$.fragment,c),u(pL.$$.fragment,c),u(_L.$$.fragment,c),u(FL.$$.fragment,c),u(vL.$$.fragment,c),u(TL.$$.fragment,c),u(ML.$$.fragment,c),u(EL.$$.fragment,c),u(CL.$$.fragment,c),u(AL.$$.fragment,c),u(yL.$$.fragment,c),u(LL.$$.fragment,c),u(xL.$$.fragment,c),u(kL.$$.fragment,c),u(SL.$$.fragment,c),u(BL.$$.fragment,c),u(PL.$$.fragment,c),u($L.$$.fragment,c),u(IL.$$.fragment,c),u(qL.$$.fragment,c),u(NL.$$.fragment,c),u(DL.$$.fragment,c),u(GL.$$.fragment,c),u(OL.$$.fragment,c),u(VL.$$.fragment,c),u(XL.$$.fragment,c),u(zL.$$.fragment,c),u(WL.$$.fragment,c),u(HL.$$.fragment,c),u(UL.$$.fragment,c),u(JL.$$.fragment,c),u(YL.$$.fragment,c),u(KL.$$.fragment,c),u(e8.$$.fragment,c),u(o8.$$.fragment,c),u(r8.$$.fragment,c),u(t8.$$.fragment,c),u(a8.$$.fragment,c),u(n8.$$.fragment,c),u(l8.$$.fragment,c),u(i8.$$.fragment,c),u(d8.$$.fragment,c),u(c8.$$.fragment,c),u(m8.$$.fragment,c),u(f8.$$.fragment,c),u(h8.$$.fragment,c),u(u8.$$.fragment,c),u(p8.$$.fragment,c),u(_8.$$.fragment,c),u(b8.$$.fragment,c),u(F8.$$.fragment,c),u(T8.$$.fragment,c),u(M8.$$.fragment,c),u(E8.$$.fragment,c),u(C8.$$.fragment,c),u(w8.$$.fragment,c),u(A8.$$.fragment,c),u(L8.$$.fragment,c),u(x8.$$.fragment,c),u(k8.$$.fragment,c),u(S8.$$.fragment,c),u(R8.$$.fragment,c),u(B8.$$.fragment,c),u($8.$$.fragment,c),u(I8.$$.fragment,c),u(q8.$$.fragment,c),u(N8.$$.fragment,c),u(j8.$$.fragment,c),u(D8.$$.fragment,c),u(O8.$$.fragment,c),u(V8.$$.fragment,c),u(X8.$$.fragment,c),u(z8.$$.fragment,c),u(Q8.$$.fragment,c),u(W8.$$.fragment,c),u(U8.$$.fragment,c),u(J8.$$.fragment,c),u(Y8.$$.fragment,c),u(K8.$$.fragment,c),u(Z8.$$.fragment,c),u(e7.$$.fragment,c),u(r7.$$.fragment,c),u(t7.$$.fragment,c),u(a7.$$.fragment,c),u(s7.$$.fragment,c),u(l7.$$.fragment,c),u(i7.$$.fragment,c),u(c7.$$.fragment,c),u(m7.$$.fragment,c),u(f7.$$.fragment,c),u(g7.$$.fragment,c),ePe=!1},d(c){t(Z),c&&t(io),c&&t(de),p(ge),c&&t(Im),c&&t(ma),c&&t(xe),c&&t(co),c&&t(Nm),p(Da,c),c&&t(mo),c&&t(_e),c&&t(zo),c&&t(Ga),c&&t(ZSe),c&&t(Vi),p(Ew),c&&t(eRe),c&&t(zn),c&&t(oRe),p(Cw,c),c&&t(rRe),c&&t(p9),c&&t(tRe),p(Gm,c),c&&t(aRe),c&&t(Xi),p(ww),c&&t(nRe),c&&t(Qo),p(Aw),p(xw),p(kw),p(Sw),c&&t(sRe),c&&t(Qi),p(Rw),c&&t(lRe),c&&t(Wo),p(Bw),p(Iw),p(qw),p(Nw),c&&t(iRe),c&&t(Wi),p(jw),c&&t(dRe),c&&t(Ho),p(Dw),p(Vw),p(Ph),p(Xw),p(zw),c&&t(cRe),c&&t(Hi),p(Qw),c&&t(mRe),c&&t(Uo),p(Ww),p(Jw),p(zh),p(Yw),p(Kw),c&&t(fRe),c&&t(Ji),p(Zw),c&&t(gRe),c&&t(Jo),p(eA),p(rA),p(tA),p(aA),p(nA),c&&t(hRe),c&&t(Zi),p(sA),c&&t(uRe),c&&t(Yo),p(lA),p(dA),p(cA),p(mA),p(fA),c&&t(pRe),c&&t(rd),p(gA),c&&t(_Re),c&&t(Ko),p(hA),p(pA),p(_A),p(bA),p(FA),c&&t(bRe),c&&t(nd),p(vA),c&&t(FRe),c&&t(Zo),p(TA),p(EA),p(CA),p(wA),p(AA),c&&t(vRe),c&&t(id),p(yA),c&&t(TRe),c&&t(er),p(LA),p(kA),p(SA),p(RA),p(BA),c&&t(MRe),c&&t(md),p(PA),c&&t(ERe),c&&t(or),p($A),p(qA),p(NA),p(jA),p(DA),c&&t(CRe),c&&t(hd),p(GA),c&&t(wRe),c&&t(rr),p(OA),p(XA),p(zA),p(QA),p(WA),c&&t(ARe),c&&t(_d),p(HA),c&&t(yRe),c&&t(tr),p(UA),p(YA),p(KA),p(ZA),p(e6),c&&t(LRe),c&&t(vd),p(o6),c&&t(xRe),c&&t(ar),p(r6),p(a6),p(n6),p(s6),p(l6),c&&t(kRe),c&&t(Ed),p(i6),c&&t(SRe),c&&t(nr),p(d6),p(m6),p(f6),p(g6),p(h6),c&&t(RRe),c&&t(Ad),p(u6),c&&t(BRe),c&&t(sr),p(p6),p(b6),p(F6),p(v6),p(T6),c&&t(PRe),c&&t(xd),p(M6),c&&t($Re),c&&t(lr),p(E6),p(w6),p(A6),p(y6),p(L6),c&&t(IRe),c&&t(Rd),p(x6),c&&t(qRe),c&&t(ir),p(k6),p(R6),p(B6),p(P6),p($6),c&&t(NRe),c&&t($d),p(I6),c&&t(jRe),c&&t(dr),p(q6),p(j6),p(D6),p(G6),p(O6),c&&t(DRe),c&&t(Nd),p(V6),c&&t(GRe),c&&t(cr),p(X6),p(Q6),p(W6),p(H6),p(U6),c&&t(ORe),c&&t(Gd),p(J6),c&&t(VRe),c&&t(mr),p(Y6),p(Z6),p(e0),p(o0),p(r0),c&&t(XRe),c&&t(Xd),p(t0),c&&t(zRe),c&&t(fr),p(a0),p(s0),p(l0),p(i0),p(c0),c&&t(QRe),c&&t(Wd),p(m0),c&&t(WRe),c&&t(gr),p(f0),p(h0),p(u0),p(p0),p(_0),c&&t(HRe),c&&t(Jd),p(b0),c&&t(URe),c&&t(hr),p(F0),p(T0),p(M0),p(E0),p(C0),c&&t(JRe),c&&t(ec),p(w0),c&&t(YRe),c&&t(ur),p(A0),p(L0),p(x0),p(k0),p(S0),c&&t(KRe),c&&t(tc),p(R0),c&&t(ZRe),c&&t(pr),p(B0),p($0),p(I0),p(q0),p(N0),c&&t(eBe),c&&t(sc),p(j0),c&&t(oBe),c&&t(_r),p(D0),p(O0),p(V0),p(X0),p(z0),c&&t(rBe),c&&t(cc),p(Q0),c&&t(tBe),c&&t(br),p(W0),p(U0),p(J0),p(Y0),p(K0),c&&t(aBe),c&&t(gc),p(Z0),c&&t(nBe),c&&t(Fr),p(ey),p(ry),p(ty),p(ay),p(ny),c&&t(sBe),c&&t(pc),p(sy),c&&t(lBe),c&&t(vr),p(ly),p(dy),p(cy),p(my),p(fy),c&&t(iBe),c&&t(Fc),p(gy),c&&t(dBe),c&&t(Tr),p(hy),p(py),p(_y),p(by),p(Fy),c&&t(cBe),c&&t(Mc),p(vy),c&&t(mBe),c&&t(Mr),p(Ty),p(Ey),p(Cy),p(wy),p(yy),c&&t(fBe),c&&t(wc),p(Ly),c&&t(gBe),c&&t(Er),p(xy),p(Sy),p(Ry),p(By),p(Py),c&&t(hBe),c&&t(Lc),p($y),c&&t(uBe),c&&t(Cr),p(Iy),p(Ny),p(jy),p(Dy),p(Gy),c&&t(pBe),c&&t(Sc),p(Oy),c&&t(_Be),c&&t(wr),p(Vy),p(zy),p(Qy),p(Wy),p(Hy),c&&t(bBe),c&&t(Pc),p(Uy),c&&t(FBe),c&&t(Ar),p(Jy),p(Ky),p(Zy),p(eL),p(oL),c&&t(vBe),c&&t(qc),p(rL),c&&t(TBe),c&&t(yr),p(tL),p(nL),p(sL),p(lL),p(iL),c&&t(MBe),c&&t(Dc),p(dL),c&&t(EBe),c&&t(Lr),p(cL),p(fL),p(gL),p(hL),p(uL),c&&t(CBe),c&&t(Vc),p(pL),c&&t(wBe),c&&t(xr),p(_L),p(FL),p(vL),p(TL),p(ML),c&&t(ABe),c&&t(Qc),p(EL),c&&t(yBe),c&&t(kr),p(CL),p(AL),p(yL),p(LL),p(xL),c&&t(LBe),c&&t(Uc),p(kL),c&&t(xBe),c&&t(Sr),p(SL),p(BL),p(PL),p($L),p(IL),c&&t(kBe),c&&t(Kc),p(qL),c&&t(SBe),c&&t(Rr),p(NL),p(DL),p(GL),p(OL),p(VL),c&&t(RBe),c&&t(om),p(XL),c&&t(BBe),c&&t(Br),p(zL),p(WL),p(HL),p(UL),p(JL),c&&t(PBe),c&&t(am),p(YL),c&&t($Be),c&&t(Pr),p(KL),p(e8),p(o8),p(r8),p(t8),c&&t(IBe),c&&t(lm),p(a8),c&&t(qBe),c&&t($r),p(n8),p(l8),p(i8),p(d8),p(c8),c&&t(NBe),c&&t(cm),p(m8),c&&t(jBe),c&&t(Ir),p(f8),p(h8),p(u8),p(p8),p(_8),c&&t(DBe),c&&t(gm),p(b8),c&&t(GBe),c&&t(qr),p(F8),p(T8),p(M8),p(E8),p(C8),c&&t(OBe),c&&t(pm),p(w8),c&&t(VBe),c&&t(Nr),p(A8),p(L8),p(x8),p(k8),p(S8),c&&t(XBe),c&&t(Fm),p(R8),c&&t(zBe),c&&t(jr),p(B8),p($8),p(I8),p(q8),p(N8),c&&t(QBe),c&&t(Mm),p(j8),c&&t(WBe),c&&t(Dr),p(D8),p(O8),p(V8),p(X8),p(z8),c&&t(HBe),c&&t(wm),p(Q8),c&&t(UBe),c&&t(Gr),p(W8),p(U8),p(J8),p(Y8),p(K8),c&&t(JBe),c&&t(Lm),p(Z8),c&&t(YBe),c&&t(Or),p(e7),p(r7),p(t7),p(a7),p(s7),c&&t(KBe),c&&t(Sm),p(l7),c&&t(ZBe),c&&t(Vr),p(i7),p(c7),p(m7),p(f7),p(g7)}}}const U3t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function J3t($m){return X3t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class rwt extends D3t{constructor(Z){super();G3t(this,Z,J3t,H3t,O3t,{})}}export{rwt as default,U3t as metadata};
