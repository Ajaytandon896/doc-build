import{S as VP,i as zP,s as HP,e as s,k as h,w as d,t as i,M as BP,c as r,d as t,m as f,a as l,x as u,h as o,b as c,N as MP,F as a,g as p,y as m,L as FP,q as v,o as w,B as _}from"../chunks/vendor-ab4e3193.js";import{I as b}from"../chunks/IconCopyLink-d992940d.js";import{C as F}from"../chunks/CodeBlock-516df0c5.js";import"../chunks/CopyButton-204b56db.js";function qP(Nu){let q,Fs,j,C,Pi,aa,Su,ki,Lu,Hp,qs,Cu,Bp,ae,Ve,$i,sa,Uu,xi,Gu,Fp,Rs,Ou,qp,se,ze,ji,ra,Mu,Ai,Vu,Rp,Ws,zu,Wp,Xs,Ys,Hu,la,Di,Bu,Fu,Ti,qu,Xp,Qs,Ru,Yp,He,Ii,Wu,Xu,Ni,Yu,Qp,re,Be,Si,ia,Qu,Li,Zu,Zp,Zs,Ju,Jp,R,Ci,Ku,em,Ui,tm,am,Gi,sm,Kp,Js,rm,eh,y,Oi,lm,im,Mi,om,nm,Vi,pm,hm,zi,fm,cm,Hi,dm,um,Bi,mm,vm,Fi,wm,_m,qi,bm,ym,Ri,gm,Em,Wi,Pm,th,le,Fe,Xi,oa,km,Yi,$m,ah,ie,qe,Qi,na,xm,Zi,jm,sh,Ks,Am,rh,er,Dm,lh,pa,ih,tr,Tm,oh,ar,Im,nh,ha,ph,sr,Nm,hh,fa,fh,rr,Sm,ch,ca,dh,W,Lm,Ji,Cm,Um,Ki,Gm,Om,uh,lr,Mm,mh,ir,Vm,vh,oe,Re,eo,da,zm,to,Hm,wh,ua,ma,Bm,Fm,_h,We,qm,va,Rm,Wm,bh,or,ao,Xm,yh,A,Ym,so,Qm,Zm,ro,Jm,Km,lo,ev,tv,gh,nr,av,Eh,pr,sv,Ph,Xe,io,wa,oo,rv,lv,hr,iv,ov,_a,ba,no,nv,pv,fr,hv,fv,ya,po,cv,dv,cr,uv,kh,dr,mv,$h,Ye,vv,ho,wv,_v,xh,ur,bv,jh,ga,Ah,k,yv,fo,gv,Ev,co,Pv,kv,uo,$v,xv,mo,jv,Av,vo,Dv,Dh,ne,Qe,wo,Ea,Tv,_o,Iv,Th,pe,Ze,bo,Pa,Nv,yo,Sv,Ih,mr,Lv,Nh,X,ka,go,Eo,Cv,Uv,$a,Gv,Po,Ov,Mv,Vv,xa,ko,$o,zv,Hv,ja,Bv,xo,Fv,qv,Rv,Aa,jo,Ao,Wv,Xv,Da,Yv,Do,Qv,Zv,Sh,vr,Jv,Lh,Ta,Kv,Ia,e1,Ch,he,Je,To,Na,t1,Io,a1,Uh,wr,s1,Gh,E,No,r1,l1,So,i1,o1,Lo,n1,p1,Co,h1,f1,Uo,c1,d1,Go,u1,Oh,_r,m1,Mh,br,v1,Vh,yr,w1,zh,fe,Ke,Oo,Sa,_1,Mo,b1,Hh,et,Vo,y1,g1,zo,E1,Bh,ce,tt,Ho,La,P1,Bo,k1,Fh,Y,Fo,$1,x1,gr,j1,Ca,A1,D1,qo,T1,qh,de,at,Ro,Ua,I1,Wo,N1,Rh,Er,Xo,S1,Wh,ue,st,Yo,Ga,L1,Qo,C1,Xh,Pr,Zo,U1,Yh,kr,G1,Qh,me,rt,Jo,Oa,O1,Ko,M1,Zh,$r,V1,Jh,ve,lt,en,Ma,z1,tn,H1,Kh,xr,B1,ef,we,it,an,Va,F1,ot,sn,q1,R1,rn,W1,X1,tf,jr,Y1,af,_e,nt,ln,za,Q1,on,Z1,sf,Ar,J1,rf,D,Ha,K1,nn,ew,tw,aw,Ba,sw,pn,rw,lw,iw,Fa,ow,hn,nw,pw,hw,fn,fw,lf,Dr,cw,of,Tr,Ir,p3,nf,pt,dw,qa,uw,mw,pf,Nr,vw,hf,be,ht,cn,Ra,ww,dn,_w,ff,Sr,bw,cf,Lr,yw,df,T,un,gw,Ew,mn,Pw,kw,Wa,$w,vn,xw,jw,Aw,wn,Dw,uf,Cr,Tw,mf,ft,Iw,_n,Nw,Sw,vf,Ur,Lw,wf,Xa,_f,ct,Cw,bn,Uw,Gw,bf,dt,yn,U,Gr,Ow,Mw,Or,Vw,zw,Mr,Hw,Bw,Vr,Fw,qw,G,O,zr,Rw,Ww,Hr,Xw,Yw,Br,Qw,Zw,Fr,Jw,Kw,M,qr,e_,t_,Rr,a_,s_,Wr,r_,l_,Xr,i_,o_,V,Yr,n_,p_,Qr,h_,f_,Zr,c_,d_,Jr,u_,m_,z,Kr,v_,w_,el,__,b_,tl,y_,g_,al,E_,yf,ut,P_,gn,k_,$_,gf,sl,x_,Ef,rl,j_,Pf,mt,A_,Ya,D_,T_,kf,ll,I_,$f,vt,il,N_,Qa,S_,L_,ol,C_,Za,U_,xf,ye,wt,En,Ja,G_,Pn,O_,jf,Q,M_,kn,V_,z_,Ka,H_,B_,Af,nl,F_,Df,ge,_t,$n,es,q_,xn,R_,Tf,pl,W_,If,hl,X_,Nf,fl,Y_,Sf,bt,Q_,jn,Z_,J_,Lf,Ee,yt,An,ts,K_,Dn,eb,Cf,Z,tb,Tn,ab,sb,In,rb,lb,Uf,cl,ib,Gf,dl,ob,Of,ul,nb,Mf,ml,pb,Vf,gt,hb,Nn,fb,cb,zf,vl,db,Hf,as,Bf,ss,ub,Sn,mb,Ff,wl,vb,qf,rs,Rf,_l,wb,Wf,Pe,Et,Ln,ls,_b,Cn,bb,Xf,Pt,yb,bl,gb,Eb,Yf,kt,Pb,Un,kb,$b,Qf,ke,$t,Gn,is,xb,On,jb,Zf,yl,Ab,Jf,gl,Db,Kf,os,ec,El,Tb,tc,xt,Ib,ns,Nb,Sb,ac,Pl,Lb,sc,I,Cb,Mn,Ub,Gb,Vn,Ob,Mb,zn,Vb,zb,rc,J,Hb,Hn,Bb,Fb,Bn,qb,Rb,lc,jt,Wb,Fn,Xb,Yb,ic,$e,At,qn,ps,Qb,Rn,Zb,oc,kl,Jb,nc,N,Kb,hs,ey,ty,Wn,ay,sy,Xn,ry,ly,pc,$l,iy,hc,fs,fc,Dt,oy,Yn,ny,py,cc,xe,Tt,Qn,cs,hy,Zn,fy,dc,xl,cy,uc,K,dy,ds,uy,my,us,vy,wy,mc,ms,vs,_y,by,vc,It,yy,ws,gy,Ey,wc,je,Nt,Jn,_s,Py,Kn,ky,_c,Ae,ep,$y,xy,tp,jy,Ay,bc,St,ap,Dy,Ty,sp,Iy,yc,jl,Ny,gc,bs,ys,Sy,Ly,Ec,Lt,rp,Cy,Uy,Al,Gy,gs,lp,Oy,My,Es,Vy,ip,zy,Hy,Pc,Ps,ks,By,Fy,kc,Dl,qy,$c,x,op,Ry,Wy,np,Xy,Yy,$s,Qy,pp,Zy,Jy,Ky,Tl,e2,hp,t2,a2,fp,s2,xc,Il,r2,jc,Ct,l2,xs,i2,o2,Ac,Nl,n2,Dc,Sl,p2,Tc,Ll,h2,Ic,Ut,f2,js,c2,d2,Nc,Cl,u2,Sc,Gt,cp,De,Ul,m2,v2,dp,w2,_2,Gl,b2,y2,Te,Ie,Ol,g2,E2,up,P2,k2,Ml,$2,x2,Ne,Vl,j2,A2,mp,D2,T2,zl,I2,N2,Se,Hl,S2,L2,vp,C2,U2,Bl,G2,Lc,Fl,O2,Cc,ql,M2,Uc,Rl,V2,Gc,Wl,z2,Oc,As,wp,H2,B2,Mc,Ds,Vc,$,F2,_p,q2,R2,bp,W2,X2,yp,Y2,Q2,gp,Z2,J2,Ep,K2,zc,Le,Ot,Pp,Ts,eg,kp,tg,Hc,Xl,ag,Bc,Mt,Yl,$p,sg,rg,lg,Ql,xp,ig,og,Fc,Ce,Vt,jp,Is,ng,Ap,pg,qc,Ue,hg,Dp,fg,cg,Ns,dg,Rc,Ge,zt,Tp,Ss,ug,Ip,mg,Wc,Oe,Ht,Np,Ls,vg,Sp,wg,Xc,Zl,_g,Yc,Jl,bg,Qc,Kl,yg,Zc,ei,ti,h3,Jc,Bt,gg,Cs,Eg,Pg,Kc,ai,kg,ed,si,$g,td,ri,xg,ad,li,jg,sd,ee,Lp,Us,Ag,Dg,Cp,Gs,Tg,Ig,Up,Os,Ng,rd,P,Sg,Ms,Lg,Cg,Vs,Ug,Gg,zs,Og,Mg,Hs,Vg,zg,ii,Hg,Bg,ld,Me,Ft,Gp,Bs,Fg,Op,qg,id,oi,Rg,od,ni,Wg,nd;return aa=new b({}),sa=new b({}),ra=new b({}),ia=new b({}),oa=new b({}),na=new b({}),pa=new F({props:{code:"nvidia-smi topo -m,",highlighted:'<span class="hljs-symbol">nvidia</span>-<span class="hljs-keyword">smi</span> topo -m'}}),ha=new F({props:{code:`        GPU0    GPU1    CPU Affinity    NUMA Affinity
GPU0     X      NV2     0-23            N/A
GPU1    NV2      X      0-23            N/A,`,highlighted:`        <span class="hljs-attribute">GPU0</span>    GPU1    CPU Affinity    NUMA Affinity
<span class="hljs-attribute">GPU0</span>     X      NV2     <span class="hljs-number">0</span>-<span class="hljs-number">23</span>            N/A
<span class="hljs-attribute">GPU1</span>    NV2      X      <span class="hljs-number">0</span>-<span class="hljs-number">23</span>            N/A`}}),fa=new F({props:{code:`        GPU0    GPU1    CPU Affinity    NUMA Affinity
GPU0     X      PHB     0-11            N/A
GPU1    PHB      X      0-11            N/A,`,highlighted:`        <span class="hljs-attribute">GPU0</span>    GPU1    CPU Affinity    NUMA Affinity
<span class="hljs-attribute">GPU0</span>     X      PHB     <span class="hljs-number">0</span>-<span class="hljs-number">11</span>            N/A
<span class="hljs-attribute">GPU1</span>    PHB      X      <span class="hljs-number">0</span>-<span class="hljs-number">11</span>            N/A`}}),ca=new F({props:{code:`  X    = Self
  SYS  = Connection traversing PCIe as well as the SMP interconnect between NUMA nodes (e.g., QPI/UPI)
  NODE = Connection traversing PCIe as well as the interconnect between PCIe Host Bridges within a NUMA node
  PHB  = Connection traversing PCIe as well as a PCIe Host Bridge (typically the CPU)
  PXB  = Connection traversing multiple PCIe bridges (without traversing the PCIe Host Bridge)
  PIX  = Connection traversing at most a single PCIe bridge
  NV#  = Connection traversing a bonded set of # NVLinks,`,highlighted:`  X    = Self
  SYS  = Connection traversing PCIe <span class="hljs-keyword">as</span> well <span class="hljs-keyword">as</span> <span class="hljs-keyword">the</span> SMP interconnect between NUMA nodes (e.g., QPI/UPI)
  NODE = Connection traversing PCIe <span class="hljs-keyword">as</span> well <span class="hljs-keyword">as</span> <span class="hljs-keyword">the</span> interconnect between PCIe Host Bridges <span class="hljs-keyword">within</span> <span class="hljs-keyword">a</span> NUMA node
  PHB  = Connection traversing PCIe <span class="hljs-keyword">as</span> well <span class="hljs-keyword">as</span> <span class="hljs-keyword">a</span> PCIe Host Bridge (typically <span class="hljs-keyword">the</span> CPU)
  PXB  = Connection traversing multiple PCIe bridges (<span class="hljs-keyword">without</span> traversing <span class="hljs-keyword">the</span> PCIe Host Bridge)
  PIX  = Connection traversing <span class="hljs-keyword">at</span> most <span class="hljs-keyword">a</span> single PCIe bridge
  NV<span class="hljs-comment">#  = Connection traversing a bonded set of # NVLinks</span>`}}),da=new b({}),ga=new F({props:{code:`# DDP w/ NVLink

rm -r /tmp/test-clm; CUDA_VISIBLE_DEVICES=0,1 python -m torch.distributed.launch \\
--nproc_per_node 2 examples/pytorch/language-modeling/run_clm.py --model_name_or_path gpt2 \\
--dataset_name wikitext --dataset_config_name wikitext-2-raw-v1 --do_train \\
--output_dir /tmp/test-clm --per_device_train_batch_size 4 --max_steps 200

{'train_runtime': 101.9003, 'train_samples_per_second': 1.963, 'epoch': 0.69}

# DDP w/o NVLink

rm -r /tmp/test-clm; CUDA_VISIBLE_DEVICES=0,1 NCCL_P2P_DISABLE=1 python -m torch.distributed.launch \\
--nproc_per_node 2 examples/pytorch/language-modeling/run_clm.py --model_name_or_path gpt2 \\
--dataset_name wikitext --dataset_config_name wikitext-2-raw-v1 --do_train
--output_dir /tmp/test-clm --per_device_train_batch_size 4 --max_steps 200

{'train_runtime': 131.4367, 'train_samples_per_second': 1.522, 'epoch': 0.69},`,highlighted:`<span class="hljs-comment"># DDP w/ NVLink</span>

<span class="hljs-string">rm</span> -<span class="hljs-string">r</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span>; <span class="hljs-string">CUDA_VISIBLE_DEVICES</span>=<span class="hljs-string">0</span>,<span class="hljs-string">1</span> <span class="hljs-string">python</span> -<span class="hljs-string">m</span> <span class="hljs-string">torch</span>.<span class="hljs-string">distributed</span>.<span class="hljs-string">launch</span> \\
<span class="hljs-built_in">--nproc_per_node</span> <span class="hljs-string">2</span> <span class="hljs-string">examples</span>/<span class="hljs-string">pytorch</span>/<span class="hljs-string">language-modeling</span>/<span class="hljs-string">run_clm</span>.<span class="hljs-string">py</span> <span class="hljs-built_in">--model_name_or_path</span> <span class="hljs-string">gpt2</span> \\
<span class="hljs-built_in">--dataset_name</span> <span class="hljs-string">wikitext</span> <span class="hljs-built_in">--dataset_config_name</span> <span class="hljs-string">wikitext-2-raw-v1</span> <span class="hljs-built_in">--do_train</span> \\
<span class="hljs-built_in">--output_dir</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span> <span class="hljs-built_in">--per_device_train_batch_size</span> <span class="hljs-string">4</span> <span class="hljs-built_in">--max_steps</span> <span class="hljs-string">200</span>

{<span class="hljs-string">&#x27;train_runtime&#x27;</span>: <span class="hljs-string">101</span>.<span class="hljs-string">9003</span>, <span class="hljs-string">&#x27;train_samples_per_second&#x27;</span>: <span class="hljs-string">1</span>.<span class="hljs-string">963</span>, <span class="hljs-string">&#x27;epoch&#x27;</span>: <span class="hljs-string">0</span>.<span class="hljs-string">69</span>}

<span class="hljs-comment"># DDP w/o NVLink</span>

<span class="hljs-string">rm</span> -<span class="hljs-string">r</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span>; <span class="hljs-string">CUDA_VISIBLE_DEVICES</span>=<span class="hljs-string">0</span>,<span class="hljs-string">1</span> <span class="hljs-string">NCCL_P2P_DISABLE</span>=<span class="hljs-string">1</span> <span class="hljs-string">python</span> -<span class="hljs-string">m</span> <span class="hljs-string">torch</span>.<span class="hljs-string">distributed</span>.<span class="hljs-string">launch</span> \\
<span class="hljs-built_in">--nproc_per_node</span> <span class="hljs-string">2</span> <span class="hljs-string">examples</span>/<span class="hljs-string">pytorch</span>/<span class="hljs-string">language-modeling</span>/<span class="hljs-string">run_clm</span>.<span class="hljs-string">py</span> <span class="hljs-built_in">--model_name_or_path</span> <span class="hljs-string">gpt2</span> \\
<span class="hljs-built_in">--dataset_name</span> <span class="hljs-string">wikitext</span> <span class="hljs-built_in">--dataset_config_name</span> <span class="hljs-string">wikitext-2-raw-v1</span> <span class="hljs-built_in">--do_train</span>
<span class="hljs-built_in">--output_dir</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span> <span class="hljs-built_in">--per_device_train_batch_size</span> <span class="hljs-string">4</span> <span class="hljs-built_in">--max_steps</span> <span class="hljs-string">200</span>

{<span class="hljs-string">&#x27;train_runtime&#x27;</span>: <span class="hljs-string">131</span>.<span class="hljs-string">4367</span>, <span class="hljs-string">&#x27;train_samples_per_second&#x27;</span>: <span class="hljs-string">1</span>.<span class="hljs-string">522</span>, <span class="hljs-string">&#x27;epoch&#x27;</span>: <span class="hljs-string">0</span>.<span class="hljs-string">69</span>}`}}),Ea=new b({}),Pa=new b({}),Na=new b({}),Sa=new b({}),La=new b({}),Ua=new b({}),Ga=new b({}),Oa=new b({}),Ma=new b({}),Va=new b({}),za=new b({}),Ra=new b({}),Xa=new F({props:{code:`export BS=16
python -m torch.distributed.launch \\
    --nproc_per_node 2 examples/pytorch/text-classification/run_glue.py \\
    --model_name_or_path bert-base-cased \\
    --task_name mrpc \\
    --do_train \\
    --do_eval \\
    --max_seq_length 128 \\
    --per_device_train_batch_size $BS \\
    --learning_rate 2e-5 \\
    --num_train_epochs 3.0 \\
    --output_dir /tmp/mrpc \\
    --overwrite_output_dir \\
    --fp16,`,highlighted:`export BS=<span class="hljs-number">16</span>
python -m torch<span class="hljs-selector-class">.distributed</span><span class="hljs-selector-class">.launch</span> \\
    <span class="hljs-attr">--nproc_per_node</span> <span class="hljs-number">2</span> examples/pytorch/text-classification/run_glue<span class="hljs-selector-class">.py</span> \\
    <span class="hljs-attr">--model_name_or_path</span> bert-base-cased \\
    <span class="hljs-attr">--task_name</span> mrpc \\
    <span class="hljs-attr">--do_train</span> \\
    <span class="hljs-attr">--do_eval</span> \\
    <span class="hljs-attr">--max_seq_length</span> <span class="hljs-number">128</span> \\
    <span class="hljs-attr">--per_device_train_batch_size</span> <span class="hljs-variable">$BS</span> \\
    <span class="hljs-attr">--learning_rate</span> <span class="hljs-number">2</span>e-<span class="hljs-number">5</span> \\
    <span class="hljs-attr">--num_train_epochs</span> <span class="hljs-number">3.0</span> \\
    <span class="hljs-attr">--output_dir</span> /tmp/mrpc \\
    <span class="hljs-attr">--overwrite_output_dir</span> \\
    <span class="hljs-attr">--fp16</span>`}}),Ja=new b({}),es=new b({}),ts=new b({}),as=new F({props:{code:`from torch.cuda.amp import autocast
with autocast(dtype=torch.bfloat16):
    loss, outputs = ...,`,highlighted:`<span class="hljs-keyword">from</span> torch.cuda.amp <span class="hljs-keyword">import</span> <span class="hljs-built_in">auto</span><span class="hljs-keyword">cast</span>
with <span class="hljs-built_in">auto</span><span class="hljs-keyword">cast</span>(dtype=torch.bfloat16):
    loss, outputs = ...`}}),rs=new F({props:{code:`python -c 'import transformers; print(f"BF16 support is {transformers.file_utils.is_torch_bf16_available()}")',`,highlighted:'python -c &#x27;<span class="hljs-keyword">import</span> transformers; <span class="hljs-keyword">print</span>(f<span class="hljs-string">&quot;BF16 support is {transformers.file_utils.is_torch_bf16_available()}&quot;</span>)&#x27;'}}),ls=new b({}),is=new b({}),os=new F({props:{code:`import torch
torch.backends.cuda.matmul.allow_tf32 = True,`,highlighted:`import torch
torch<span class="hljs-selector-class">.backends</span><span class="hljs-selector-class">.cuda</span><span class="hljs-selector-class">.matmul</span><span class="hljs-selector-class">.allow_tf32</span> = True`}}),ps=new b({}),fs=new F({props:{code:"model.gradient_checkpointing_enable(),",highlighted:"model.gradient_checkpointing_enable()"}}),cs=new b({}),_s=new b({}),Ds=new F({props:{code:`
# DP
rm -r /tmp/test-clm; CUDA_VISIBLE_DEVICES=0,1 \\
python examples/pytorch/language-modeling/run_clm.py \\
--model_name_or_path gpt2 --dataset_name wikitext --dataset_config_name wikitext-2-raw-v1 \\
--do_train --output_dir /tmp/test-clm --per_device_train_batch_size 4 --max_steps 200

{'train_runtime': 110.5948, 'train_samples_per_second': 1.808, 'epoch': 0.69}

# DDP w/ NVlink
rm -r /tmp/test-clm; CUDA_VISIBLE_DEVICES=0,1 \\
python -m torch.distributed.launch --nproc_per_node 2 examples/pytorch/language-modeling/run_clm.py \\
--model_name_or_path gpt2 --dataset_name wikitext --dataset_config_name wikitext-2-raw-v1 \\
--do_train --output_dir /tmp/test-clm --per_device_train_batch_size 4 --max_steps 200

{'train_runtime': 101.9003, 'train_samples_per_second': 1.963, 'epoch': 0.69}

# DDP w/o NVlink
rm -r /tmp/test-clm; NCCL_P2P_DISABLE=1 CUDA_VISIBLE_DEVICES=0,1 \\
python -m torch.distributed.launch --nproc_per_node 2 examples/pytorch/language-modeling/run_clm.py \\
--model_name_or_path gpt2 --dataset_name wikitext --dataset_config_name wikitext-2-raw-v1 \\
--do_train --output_dir /tmp/test-clm --per_device_train_batch_size 4 --max_steps 200

{'train_runtime': 131.4367, 'train_samples_per_second': 1.522, 'epoch': 0.69},`,highlighted:`
<span class="hljs-comment"># DP</span>
<span class="hljs-string">rm</span> -<span class="hljs-string">r</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span>; <span class="hljs-string">CUDA_VISIBLE_DEVICES</span>=<span class="hljs-string">0</span>,<span class="hljs-string">1</span> \\
<span class="hljs-string">python</span> <span class="hljs-string">examples</span>/<span class="hljs-string">pytorch</span>/<span class="hljs-string">language-modeling</span>/<span class="hljs-string">run_clm</span>.<span class="hljs-string">py</span> \\
<span class="hljs-built_in">--model_name_or_path</span> <span class="hljs-string">gpt2</span> <span class="hljs-built_in">--dataset_name</span> <span class="hljs-string">wikitext</span> <span class="hljs-built_in">--dataset_config_name</span> <span class="hljs-string">wikitext-2-raw-v1</span> \\
<span class="hljs-built_in">--do_train</span> <span class="hljs-built_in">--output_dir</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span> <span class="hljs-built_in">--per_device_train_batch_size</span> <span class="hljs-string">4</span> <span class="hljs-built_in">--max_steps</span> <span class="hljs-string">200</span>

{<span class="hljs-string">&#x27;train_runtime&#x27;</span>: <span class="hljs-string">110</span>.<span class="hljs-string">5948</span>, <span class="hljs-string">&#x27;train_samples_per_second&#x27;</span>: <span class="hljs-string">1</span>.<span class="hljs-string">808</span>, <span class="hljs-string">&#x27;epoch&#x27;</span>: <span class="hljs-string">0</span>.<span class="hljs-string">69</span>}

<span class="hljs-comment"># DDP w/ NVlink</span>
<span class="hljs-string">rm</span> -<span class="hljs-string">r</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span>; <span class="hljs-string">CUDA_VISIBLE_DEVICES</span>=<span class="hljs-string">0</span>,<span class="hljs-string">1</span> \\
<span class="hljs-string">python</span> -<span class="hljs-string">m</span> <span class="hljs-string">torch</span>.<span class="hljs-string">distributed</span>.<span class="hljs-string">launch</span> <span class="hljs-built_in">--nproc_per_node</span> <span class="hljs-string">2</span> <span class="hljs-string">examples</span>/<span class="hljs-string">pytorch</span>/<span class="hljs-string">language-modeling</span>/<span class="hljs-string">run_clm</span>.<span class="hljs-string">py</span> \\
<span class="hljs-built_in">--model_name_or_path</span> <span class="hljs-string">gpt2</span> <span class="hljs-built_in">--dataset_name</span> <span class="hljs-string">wikitext</span> <span class="hljs-built_in">--dataset_config_name</span> <span class="hljs-string">wikitext-2-raw-v1</span> \\
<span class="hljs-built_in">--do_train</span> <span class="hljs-built_in">--output_dir</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span> <span class="hljs-built_in">--per_device_train_batch_size</span> <span class="hljs-string">4</span> <span class="hljs-built_in">--max_steps</span> <span class="hljs-string">200</span>

{<span class="hljs-string">&#x27;train_runtime&#x27;</span>: <span class="hljs-string">101</span>.<span class="hljs-string">9003</span>, <span class="hljs-string">&#x27;train_samples_per_second&#x27;</span>: <span class="hljs-string">1</span>.<span class="hljs-string">963</span>, <span class="hljs-string">&#x27;epoch&#x27;</span>: <span class="hljs-string">0</span>.<span class="hljs-string">69</span>}

<span class="hljs-comment"># DDP w/o NVlink</span>
<span class="hljs-string">rm</span> -<span class="hljs-string">r</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span>; <span class="hljs-string">NCCL_P2P_DISABLE</span>=<span class="hljs-string">1</span> <span class="hljs-string">CUDA_VISIBLE_DEVICES</span>=<span class="hljs-string">0</span>,<span class="hljs-string">1</span> \\
<span class="hljs-string">python</span> -<span class="hljs-string">m</span> <span class="hljs-string">torch</span>.<span class="hljs-string">distributed</span>.<span class="hljs-string">launch</span> <span class="hljs-built_in">--nproc_per_node</span> <span class="hljs-string">2</span> <span class="hljs-string">examples</span>/<span class="hljs-string">pytorch</span>/<span class="hljs-string">language-modeling</span>/<span class="hljs-string">run_clm</span>.<span class="hljs-string">py</span> \\
<span class="hljs-built_in">--model_name_or_path</span> <span class="hljs-string">gpt2</span> <span class="hljs-built_in">--dataset_name</span> <span class="hljs-string">wikitext</span> <span class="hljs-built_in">--dataset_config_name</span> <span class="hljs-string">wikitext-2-raw-v1</span> \\
<span class="hljs-built_in">--do_train</span> <span class="hljs-built_in">--output_dir</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span> <span class="hljs-built_in">--per_device_train_batch_size</span> <span class="hljs-string">4</span> <span class="hljs-built_in">--max_steps</span> <span class="hljs-string">200</span>

{<span class="hljs-string">&#x27;train_runtime&#x27;</span>: <span class="hljs-string">131</span>.<span class="hljs-string">4367</span>, <span class="hljs-string">&#x27;train_samples_per_second&#x27;</span>: <span class="hljs-string">1</span>.<span class="hljs-string">522</span>, <span class="hljs-string">&#x27;epoch&#x27;</span>: <span class="hljs-string">0</span>.<span class="hljs-string">69</span>}`}}),Ts=new b({}),Is=new b({}),Ss=new b({}),Ls=new b({}),Bs=new b({}),{c(){q=s("meta"),Fs=h(),j=s("h1"),C=s("a"),Pi=s("span"),d(aa.$$.fragment),Su=h(),ki=s("span"),Lu=i("Performance and Scalability: How To Fit a Bigger Model and Train It Faster"),Hp=h(),qs=s("p"),Cu=i("For now the software sections of this document are mainly Pytorch-specific, but the guide can be extended to other frameworks in the future."),Bp=h(),ae=s("h2"),Ve=s("a"),$i=s("span"),d(sa.$$.fragment),Uu=h(),xi=s("span"),Gu=i("Quick notes"),Fp=h(),Rs=s("p"),Ou=i("This section gives brief ideas on how to make training faster and support bigger models. Later sections will expand, demonstrate and elucidate each of these."),qp=h(),se=s("h3"),ze=s("a"),ji=s("span"),d(ra.$$.fragment),Mu=h(),Ai=s("span"),Vu=i("Faster Training"),Rp=h(),Ws=s("p"),zu=i("Hardware:"),Wp=h(),Xs=s("ul"),Ys=s("li"),Hu=i("fast connectivity between GPUs"),la=s("ul"),Di=s("li"),Bu=i("intra-node: NVLink"),Fu=h(),Ti=s("li"),qu=i("inter-node: Infiniband / Intel OPA"),Xp=h(),Qs=s("p"),Ru=i("Software:"),Yp=h(),He=s("ul"),Ii=s("li"),Wu=i("Data Parallel / Distributed Data Parallel"),Xu=h(),Ni=s("li"),Yu=i("fp16 (autocast caching)"),Qp=h(),re=s("h3"),Be=s("a"),Si=s("span"),d(ia.$$.fragment),Qu=h(),Li=s("span"),Zu=i("Bigger Models"),Zp=h(),Zs=s("p"),Ju=i("Hardware:"),Jp=h(),R=s("ul"),Ci=s("li"),Ku=i("bigger GPUs"),em=h(),Ui=s("li"),tm=i("more GPUs"),am=h(),Gi=s("li"),sm=i("more CPU and NVMe (offloaded to by DeepSpeed)"),Kp=h(),Js=s("p"),rm=i("Software:"),eh=h(),y=s("ul"),Oi=s("li"),lm=i("Deepspeed ZeRO"),im=h(),Mi=s("li"),om=i("Deepspeed ZeRO-Offload"),nm=h(),Vi=s("li"),pm=i("Megatron-LM 3D Parallelism"),hm=h(),zi=s("li"),fm=i("Pipeline Parallelism"),cm=h(),Hi=s("li"),dm=i("Tensor Parallelism"),um=h(),Bi=s("li"),mm=i("Low-memory Optimizers"),vm=h(),Fi=s("li"),wm=i("fp16/bf16 (smaller data/faster throughput)"),_m=h(),qi=s("li"),bm=i("tf32 (faster throughput)"),ym=h(),Ri=s("li"),gm=i("Gradient checkpointing"),Em=h(),Wi=s("li"),Pm=i("Sparsity"),th=h(),le=s("h2"),Fe=s("a"),Xi=s("span"),d(oa.$$.fragment),km=h(),Yi=s("span"),$m=i("Hardware"),ah=h(),ie=s("h3"),qe=s("a"),Qi=s("span"),d(na.$$.fragment),xm=h(),Zi=s("span"),jm=i("Multi-GPU Connectivity"),sh=h(),Ks=s("p"),Am=i("If you use multiple GPUs the way cards are inter-connected can have a huge impact on the total training time."),rh=h(),er=s("p"),Dm=i("If the GPUs are on the same physical node, you can run:"),lh=h(),d(pa.$$.fragment),ih=h(),tr=s("p"),Tm=i("and it will tell you how the GPUs are inter-connected."),oh=h(),ar=s("p"),Im=i("On a machine with dual-GPU and which are connected with NVLink, you will most likely see something like:"),nh=h(),d(ha.$$.fragment),ph=h(),sr=s("p"),Nm=i("on a different machine w/o NVLink we may see:"),hh=h(),d(fa.$$.fragment),fh=h(),rr=s("p"),Sm=i("The report includes this legend:"),ch=h(),d(ca.$$.fragment),dh=h(),W=s("p"),Lm=i("So the first report "),Ji=s("code"),Cm=i("NV2"),Um=i(" tells us the GPUs are interconnected with 2 NVLinks, and the second report "),Ki=s("code"),Gm=i("PHB"),Om=i(" we have a typical consumer-level PCIe+Bridge setup."),uh=h(),lr=s("p"),Mm=i("Check what type of connectivity you have on your setup. Some of these will make the communication between cards faster (e.g. NVLink), others slower (e.g. PHB)."),mh=h(),ir=s("p"),Vm=i("Depending on the type of scalability solution used, the connectivity speed could have a major or a minor impact. If the GPUs need to sync rarely, as in DDP, the impact of a slower connection will be less significant. If the GPUs need to send messages to each other often, as in ZeRO-DP, then faster connectivity becomes super important to achieve faster training."),vh=h(),oe=s("h3"),Re=s("a"),eo=s("span"),d(da.$$.fragment),zm=h(),to=s("span"),Hm=i("NVlink"),wh=h(),ua=s("p"),ma=s("a"),Bm=i("NVLink"),Fm=i(" is a wire-based serial multi-lane near-range communications link developed by Nvidia."),_h=h(),We=s("p"),qm=i("Each new generation provides a faster bandwidth, e.g. here is a quote from "),va=s("a"),Rm=i("Nvidia Ampere GA102 GPU Architecture"),Wm=i(":"),bh=h(),or=s("blockquote"),ao=s("p"),Xm=i(`Third-Generation NVLink\xAE
GA102 GPUs utilize NVIDIA\u2019s third-generation NVLink interface, which includes four x4 links,
with each link providing 14.0625 GB/sec bandwidth in each direction between two GPUs. Four
links provide 56.25 GB/sec bandwidth in each direction, and 112.5 GB/sec total bandwidth
between two GPUs. Two RTX 3090 GPUs can be connected together for SLI using NVLink.
(Note that 3-Way and 4-Way SLI configurations are not supported.)`),yh=h(),A=s("p"),Ym=i("So the higher "),so=s("code"),Qm=i("X"),Zm=i(" you get in the report of "),ro=s("code"),Jm=i("NVX"),Km=i(" in the output of "),lo=s("code"),ev=i("nvidia-smi topo -m"),tv=i(" the better. The generation will depend on your GPU architecture."),gh=h(),nr=s("p"),av=i("Let\u2019s compare the execution of a gpt2 language model training over a small sample of wikitext."),Eh=h(),pr=s("p"),sv=i("The results are:"),Ph=h(),Xe=s("table"),io=s("thead"),wa=s("tr"),oo=s("th"),rv=i("NVlink"),lv=h(),hr=s("th"),iv=i("Time"),ov=h(),_a=s("tbody"),ba=s("tr"),no=s("td"),nv=i("Y"),pv=h(),fr=s("td"),hv=i("101s"),fv=h(),ya=s("tr"),po=s("td"),cv=i("N"),dv=h(),cr=s("td"),uv=i("131s"),kh=h(),dr=s("p"),mv=i("You can see that NVLink completes the training ~23% faster."),$h=h(),Ye=s("p"),vv=i("In the second benchmark we use "),ho=s("code"),wv=i("NCCL_P2P_DISABLE=1"),_v=i(" to tell the GPUs not to use NVLink."),xh=h(),ur=s("p"),bv=i("Here is the full benchmark code and outputs:"),jh=h(),d(ga.$$.fragment),Ah=h(),k=s("p"),yv=i("Hardware: 2x TITAN RTX 24GB each + NVlink with 2 NVLinks ("),fo=s("code"),gv=i("NV2"),Ev=i(" in "),co=s("code"),Pv=i("nvidia-smi topo -m"),kv=i(`)
Software: `),uo=s("code"),$v=i("pytorch-1.8-to-be"),xv=i(" + "),mo=s("code"),jv=i("cuda-11.0"),Av=i(" / "),vo=s("code"),Dv=i("transformers==4.3.0.dev0"),Dh=h(),ne=s("h2"),Qe=s("a"),wo=s("span"),d(Ea.$$.fragment),Tv=h(),_o=s("span"),Iv=i("Software"),Th=h(),pe=s("h3"),Ze=s("a"),bo=s("span"),d(Pa.$$.fragment),Nv=h(),yo=s("span"),Sv=i("Anatomy of Model's Operations"),Ih=h(),mr=s("p"),Lv=i("Transformers architecture includes 3 main groups of operations grouped below by compute-intensity."),Nh=h(),X=s("ol"),ka=s("li"),go=s("p"),Eo=s("strong"),Cv=i("Tensor Contractions"),Uv=h(),$a=s("p"),Gv=i("Linear layers and components of Multi-Head Attention all do batched "),Po=s("strong"),Ov=i("matrix-matrix multiplications"),Mv=i(". These operations are the most compute-intensive part of training a transformer."),Vv=h(),xa=s("li"),ko=s("p"),$o=s("strong"),zv=i("Statistical Normalizations"),Hv=h(),ja=s("p"),Bv=i("Softmax and layer normalization are less compute-intensive than tensor contractions, and involve one or more "),xo=s("strong"),Fv=i("reduction operations"),qv=i(", the result of which is then applied via a map."),Rv=h(),Aa=s("li"),jo=s("p"),Ao=s("strong"),Wv=i("Element-wise Operators"),Xv=h(),Da=s("p"),Yv=i("These are the remaining operators: "),Do=s("strong"),Qv=i("biases, dropout, activations, and residual connections"),Zv=i(". These are the least compute-intensive operations."),Sh=h(),vr=s("p"),Jv=i("This knowledge can be helpful to know when analyzing performance bottlenecks."),Lh=h(),Ta=s("p"),Kv=i("This summary is derived from "),Ia=s("a"),e1=i("Data Movement Is All You Need: A Case Study on Optimizing Transformers 2020"),Ch=h(),he=s("h3"),Je=s("a"),To=s("span"),d(Na.$$.fragment),t1=h(),Io=s("span"),a1=i("Anatomy of Model's Memory"),Uh=h(),wr=s("p"),s1=i("The components on GPU memory are the following:"),Gh=h(),E=s("ol"),No=s("li"),r1=i("model weights"),l1=h(),So=s("li"),i1=i("optimizer states"),o1=h(),Lo=s("li"),n1=i("gradients"),p1=h(),Co=s("li"),h1=i("forward activations saved for gradient computation"),f1=h(),Uo=s("li"),c1=i("temporary buffers"),d1=h(),Go=s("li"),u1=i("functionality-specific memory"),Oh=h(),_r=s("p"),m1=i("A typical model trained in mixed precision with AdamW requires 18 bytes per model parameter plus activation memory."),Mh=h(),br=s("p"),v1=i("For inference there are no optimizer states and gradients, so we can subtract those. And thus we end up with 6 bytes per model parameter for mixed precision inference, plus activation memory."),Vh=h(),yr=s("p"),w1=i("Let\u2019s look at the details."),zh=h(),fe=s("h4"),Ke=s("a"),Oo=s("span"),d(Sa.$$.fragment),_1=h(),Mo=s("span"),b1=i("Model Weights"),Hh=h(),et=s("ul"),Vo=s("li"),y1=i("4 bytes * number of parameters for fp32 training"),g1=h(),zo=s("li"),E1=i("6 bytes * number of parameters for mixed precision training"),Bh=h(),ce=s("h4"),tt=s("a"),Ho=s("span"),d(La.$$.fragment),P1=h(),Bo=s("span"),k1=i("Optimizer States"),Fh=h(),Y=s("ul"),Fo=s("li"),$1=i("8 bytes * number of parameters for normal AdamW (maintains 2 states)"),x1=h(),gr=s("li"),j1=i("2 bytes * number of parameters for 8-bit AdamW optimizers like "),Ca=s("a"),A1=i("bitsandbytes"),D1=h(),qo=s("li"),T1=i("4 bytes * number of parameters for optimizers like SGD (maintains only 1 state)"),qh=h(),de=s("h4"),at=s("a"),Ro=s("span"),d(Ua.$$.fragment),I1=h(),Wo=s("span"),N1=i("Gradients"),Rh=h(),Er=s("ul"),Xo=s("li"),S1=i("4 bytes * number of parameters for either fp32 or mixed precision training"),Wh=h(),ue=s("h4"),st=s("a"),Yo=s("span"),d(Ga.$$.fragment),L1=h(),Qo=s("span"),C1=i("Forward Activations"),Xh=h(),Pr=s("ul"),Zo=s("li"),U1=i("size depends on many factors, the key ones being sequence length, hidden size and batch size."),Yh=h(),kr=s("p"),G1=i("There are the input and output that are being passed and returned by the forward and the backward functions and the forward activations saved for gradient computation."),Qh=h(),me=s("h4"),rt=s("a"),Jo=s("span"),d(Oa.$$.fragment),O1=h(),Ko=s("span"),M1=i("Temporary Memory"),Zh=h(),$r=s("p"),V1=i("Additionally there are all kinds of temporary variables which get released once the calculation is done, but in the moment these could require additional memory and could push to OOM. Therefore when coding it\u2019s crucial to think strategically about such temporary variables and sometimes to explicitly free those as soon as they are no longer needed."),Jh=h(),ve=s("h4"),lt=s("a"),en=s("span"),d(Ma.$$.fragment),z1=h(),tn=s("span"),H1=i("Functionality-specific memory"),Kh=h(),xr=s("p"),B1=i("Then your software could have special memory needs. For example, when generating text using beam search, the software needs to maintain multiple copies of inputs and outputs."),ef=h(),we=s("h3"),it=s("a"),an=s("span"),d(Va.$$.fragment),F1=h(),ot=s("span"),sn=s("code"),q1=i("forward"),R1=i(" vs "),rn=s("code"),W1=i("backward"),X1=i(" Execution Speed"),tf=h(),jr=s("p"),Y1=i("For convolutions and linear layers there are 2x flops in the backward compared to the forward, which generally translates into ~2x slower (sometimes more, because sizes in the backward tend to be more awkward). Activations are usually bandwidth-limited, and it\u2019s typical for an activation to have to read more data in the backward than in the forward (e.g. activation forward reads once, writes once, activation backward reads twice, gradOutput and output of the forward, and writes once, gradInput)."),af=h(),_e=s("h3"),nt=s("a"),ln=s("span"),d(za.$$.fragment),Q1=h(),on=s("span"),Z1=i("Floating Data Types"),sf=h(),Ar=s("p"),J1=i("Here are the commonly used floating point data types choice of which impacts both memory usage and throughput:"),rf=h(),D=s("ul"),Ha=s("li"),K1=i("fp32 ("),nn=s("code"),ew=i("float32"),tw=i(")"),aw=h(),Ba=s("li"),sw=i("fp16 ("),pn=s("code"),rw=i("float16"),lw=i(")"),iw=h(),Fa=s("li"),ow=i("bf16 ("),hn=s("code"),nw=i("bfloat16"),pw=i(")"),hw=h(),fn=s("li"),fw=i("tf32 (CUDA internal data type)"),lf=h(),Dr=s("p"),cw=i("Here is a diagram that shows how these data types correlate to each other."),of=h(),Tr=s("p"),Ir=s("img"),nf=h(),pt=s("p"),dw=i("(source: "),qa=s("a"),uw=i("NVIDIA Blog"),mw=i(")"),pf=h(),Nr=s("p"),vw=i("While fp16 and fp32 have been around for quite some time, bf16 and tf32 are only available on the Ampere architecture GPUS. TPUs support bf16 as well."),hf=h(),be=s("h4"),ht=s("a"),cn=s("span"),d(Ra.$$.fragment),ww=h(),dn=s("span"),_w=i("fp16"),ff=h(),Sr=s("p"),bw=i("AMP = Automatic Mixed Precision"),cf=h(),Lr=s("p"),yw=i("If we look at what\u2019s happening with FP16 training (mixed precision) we have:"),df=h(),T=s("ul"),un=s("li"),gw=i("the model has two copies in memory: one in half-precision for the forward/backward computations and one in full precision - no memory saved here"),Ew=h(),mn=s("li"),Pw=i("the forward activations saved for gradient computation are in half-precision - memory is saved here"),kw=h(),Wa=s("li"),$w=i("the gradients are computed in half-precision "),vn=s("em"),xw=i("but"),jw=i(" converted to full-precision for the update, no saving there"),Aw=h(),wn=s("li"),Dw=i("the optimizer states are in full precision as all the updates are done in full-precision"),uf=h(),Cr=s("p"),Tw=i("So the savings only happen for the forward activations saved for the backward computation, and there is a slight overhead because the model weights are stored both in half- and full-precision."),mf=h(),ft=s("p"),Iw=i("In \u{1F917} Transformers fp16 mixed precision is enabled by passing "),_n=s("code"),Nw=i("--fp16"),Sw=i(" to the \u{1F917} Trainer."),vf=h(),Ur=s("p"),Lw=i("Now let\u2019s look at a simple text-classification fine-tuning on 2 GPUs (I\u2019m giving the command for reference):"),wf=h(),d(Xa.$$.fragment),_f=h(),ct=s("p"),Cw=i("Since the only savings we get are in the model activations saved for the backward passed, it\u2019s logical that the bigger those activations are, the bigger the saving will be. If we try different batch sizes, I indeed get (this is with "),bn=s("code"),Uw=i("nvidia-smi"),Gw=i(" so not completely reliable as said above but it will be a fair comparison):"),bf=h(),dt=s("table"),yn=s("thead"),U=s("tr"),Gr=s("th"),Ow=i("batch size"),Mw=h(),Or=s("th"),Vw=i("w/o \u2014fp16"),zw=h(),Mr=s("th"),Hw=i("w/ \u2014fp16"),Bw=h(),Vr=s("th"),Fw=i("savings"),qw=h(),G=s("tbody"),O=s("tr"),zr=s("td"),Rw=i("8"),Ww=h(),Hr=s("td"),Xw=i("4247"),Yw=h(),Br=s("td"),Qw=i("4163"),Zw=h(),Fr=s("td"),Jw=i("84"),Kw=h(),M=s("tr"),qr=s("td"),e_=i("16"),t_=h(),Rr=s("td"),a_=i("4971"),s_=h(),Wr=s("td"),r_=i("4793"),l_=h(),Xr=s("td"),i_=i("178"),o_=h(),V=s("tr"),Yr=s("td"),n_=i("32"),p_=h(),Qr=s("td"),h_=i("6827"),f_=h(),Zr=s("td"),c_=i("6207"),d_=h(),Jr=s("td"),u_=i("620"),m_=h(),z=s("tr"),Kr=s("td"),v_=i("64"),w_=h(),el=s("td"),__=i("10037"),b_=h(),tl=s("td"),y_=i("8061"),g_=h(),al=s("td"),E_=i("1976"),yf=h(),ut=s("p"),P_=i("So there is only a real memory saving if we train at a high batch size (and it\u2019s not half) and at batch sizes lower than 8, you actually get a bigger memory footprint (because of the overhead mentioned above). The gain for FP16 training is that in each of those cases, the training with the flag "),gn=s("code"),k_=i("--fp16"),$_=i(" is twice as fast, which does require every tensor to have every dimension be a multiple of 8 (examples pad the tensors to a sequence length that is a multiple of 8)."),gf=h(),sl=s("p"),x_=i("Summary: FP16 with apex or AMP will only give you some memory savings with a reasonably high batch size."),Ef=h(),rl=s("p"),j_=i("Additionally, under mixed precision when possible, it\u2019s important that the batch size is a multiple of 8 to efficiently use tensor cores."),Pf=h(),mt=s("p"),A_=i("Note that in some situations the speed up can be as big as 5x when using mixed precision. e.g. we have observed that while using "),Ya=s("a"),D_=i("Megatron-Deepspeed"),T_=i("."),kf=h(),ll=s("p"),I_=i("Some amazing tutorials to read on mixed precision:"),$f=h(),vt=s("ul"),il=s("li"),N_=i("@sgugger wrote a great explanation of mixed precision "),Qa=s("a"),S_=i("here"),L_=h(),ol=s("li"),C_=i("Aleksey Bilogur\u2019s "),Za=s("a"),U_=i("A developer-friendly guide to mixed precision training with PyTorch"),xf=h(),ye=s("h5"),wt=s("a"),En=s("span"),d(Ja.$$.fragment),G_=h(),Pn=s("span"),O_=i("fp16 caching"),jf=h(),Q=s("p"),M_=i("pytorch "),kn=s("code"),V_=i("autocast"),z_=i(" which performs AMP include a caching feature, which speed things up by caching fp16-converted values. Here is the full description from this "),Ka=s("a"),H_=i("comment"),B_=i(":"),Af=h(),nl=s("p"),F_=i("Autocast maintains a cache of the FP16 casts of model parameters (leaves). This helps streamline parameter reuse: if the same FP32 param is used in several different FP16list ops, like several matmuls, instead of re-casting the param to FP16 on entering each matmul, the cast will occur on the first matmul, the casted FP16 copy will be cached, and for all later matmuls the FP16 copy will be reused. The cache is maintained only within a particular outermost autocast context. When you exit the autocast context the cache is dropped. For recommended usage, in which autocast wraps the forward pass, and then you exit the context before calling backward(), this means the cache only lasts the duration of the forward pass each iteration, and will be rebuilt next iteration. (The cache of FP16-casted copies MUST be rebuilt each iteration. The FP32 parameters get updated by the optimizer, so the FP16 copies must be recreated, otherwise the FP16 values will be stale.)"),Df=h(),ge=s("h5"),_t=s("a"),$n=s("span"),d(es.$$.fragment),q_=h(),xn=s("span"),R_=i("fp16 Inference"),Tf=h(),pl=s("p"),W_=i("While normally inference is done with fp16/amp as with training, it\u2019s also possible to use the full fp16 mode without using mixed precision. This is especially a good fit if the pretrained model weights are already in fp16. So a lot less memory is used: 2 bytes per parameter vs 6 bytes with mixed precision!"),If=h(),hl=s("p"),X_=i("How good the results this will deliver will depend on the model. If it can handle fp16 without overflows and accuracy issues, then it\u2019ll definitely better to use the full fp16 mode."),Nf=h(),fl=s("p"),Y_=i("For example, LayerNorm has to be done in fp32 and recent pytorch (1.10+) has been fixed to do that regardless of the input types, but earlier pytorch versions accumulate in the input type which can be an issue."),Sf=h(),bt=s("p"),Q_=i("In \u{1F917} Transformers the full fp16 inference is enabled by passing "),jn=s("code"),Z_=i("--fp16_full_eval"),J_=i(" to the \u{1F917} Trainer."),Lf=h(),Ee=s("h4"),yt=s("a"),An=s("span"),d(ts.$$.fragment),K_=h(),Dn=s("span"),eb=i("bf16"),Cf=h(),Z=s("p"),tb=i("If you own Ampere or newer hardware you can start using bf16 for your training and evaluation. While bf16 has a worse precision than fp16, it has a much much bigger dynamic range. Therefore, if in the past you were experiencing overflow issues while training the model, bf16 will prevent this from happening most of the time. Remember that in fp16 the biggest number you can have is "),Tn=s("code"),ab=i("65535"),sb=i(" and any number above that will overflow. A bf16 number can be as large as "),In=s("code"),rb=i("3.39e+38"),lb=i(" (!) which is about the same as fp32 - because both have 8-bits used for the numerical range."),Uf=h(),cl=s("p"),ib=i("Automatic Mixed Precision (AMP) is the same as with fp16, except it\u2019ll use bf16."),Gf=h(),dl=s("p"),ob=i("Thanks to the fp32-like dynamic range with bf16 mixed precision loss scaling is no longer needed."),Of=h(),ul=s("p"),nb=i("If you have tried to finetune models pre-trained under bf16 mixed precision (e.g. T5) it\u2019s very likely that you have encountered overflow issues. Now you should be able to finetune those models without any issues."),Mf=h(),ml=s("p"),pb=i("That said, also be aware that if you pre-trained a model in bf16, it\u2019s likely to have overflow issues if someone tries to finetune it in fp16 down the road. So once started on the bf16-mode path it\u2019s best to remain on it and not switch to fp16."),Vf=h(),gt=s("p"),hb=i("In \u{1F917} Transformers bf16 mixed precision is enabled by passing "),Nn=s("code"),fb=i("--bf16"),cb=i(" to the \u{1F917} Trainer."),zf=h(),vl=s("p"),db=i("If you use your own trainer, this is just:"),Hf=h(),d(as.$$.fragment),Bf=h(),ss=s("p"),ub=i("If you need to switch a tensor to bf16, it\u2019s just: "),Sn=s("code"),mb=i("t.to(dtype=torch.bfloat16)"),Ff=h(),wl=s("p"),vb=i("Here is how you can check if your setup supports bf16:"),qf=h(),d(rs.$$.fragment),Rf=h(),_l=s("p"),wb=i("On the other hand bf16 has a much worse precision than fp16, so there are certain situations where you\u2019d still want to use fp16 and not bf16."),Wf=h(),Pe=s("h5"),Et=s("a"),Ln=s("span"),d(ls.$$.fragment),_b=h(),Cn=s("span"),bb=i("bf16 Inference"),Xf=h(),Pt=s("p"),yb=i("Same as with fp16, you can do inference in either the mixed precision bf16 or using the full bf16 mode. The same caveats apply. For details see "),bl=s("a"),gb=i("fp16 Inference"),Eb=i("."),Yf=h(),kt=s("p"),Pb=i("In \u{1F917} Transformers the full bf16 inference is enabled by passing "),Un=s("code"),kb=i("--bf16_full_eval"),$b=i(" to the \u{1F917} Trainer."),Qf=h(),ke=s("h4"),$t=s("a"),Gn=s("span"),d(is.$$.fragment),xb=h(),On=s("span"),jb=i("tf32"),Zf=h(),yl=s("p"),Ab=i("The Ampere hardware uses a magical data type called tf32. It has the same numerical range as fp32 (8-bits), but instead of 23 bits precision it has only 10 bits (same as fp16). In total it uses only 19 bits."),Jf=h(),gl=s("p"),Db=i("It\u2019s magical in the sense that you can use the normal fp32 training and/or inference code and by enabling tf32 support you can get up to 3x throughput improvement. All you need to do is to add this to your code:"),Kf=h(),d(os.$$.fragment),ec=h(),El=s("p"),Tb=i("When this is done CUDA will automatically switch to using tf32 instead of fp32 where it\u2019s possible. This, of course, assumes that the used GPU is from the Ampere series."),tc=h(),xt=s("p"),Ib=i("Like all cases with reduced precision this may or may not be satisfactory for your needs, so you have to experiment and see. According to "),ns=s("a"),Nb=i("NVIDIA research"),Sb=i(" the majority of machine learning training shouldn\u2019t be impacted and showed the same perplexity and convergence as the fp32 training."),ac=h(),Pl=s("p"),Lb=i("If you\u2019re already using fp16 or bf16 mixed precision it may help with the throughput as well."),sc=h(),I=s("p"),Cb=i("You can enable this mode in the \u{1F917} Trainer with "),Mn=s("code"),Ub=i("--tf32"),Gb=i(", or disable it with "),Vn=s("code"),Ob=i("--tf32 0"),Mb=i(" or "),zn=s("code"),Vb=i("--no_tf32"),zb=i(`.
By default the PyTorch default is used.`),rc=h(),J=s("p"),Hb=i("Note: tf32 mode is internal to CUDA and can\u2019t be accessed directly via "),Hn=s("code"),Bb=i("tensor.to(dtype=torch.tf32)"),Fb=i(" as "),Bn=s("code"),qb=i("torch.tf32"),Rb=i(" doesn\u2019t exit."),lc=h(),jt=s("p"),Wb=i("Note: you need "),Fn=s("code"),Xb=i("torch>=1.7"),Yb=i(" to enjoy this feature."),ic=h(),$e=s("h3"),At=s("a"),qn=s("span"),d(ps.$$.fragment),Qb=h(),Rn=s("span"),Zb=i("Gradient Checkpointing"),oc=h(),kl=s("p"),Jb=i("One way to use significantly less GPU memory is to enabled \u201CGradient Checkpointing\u201D (also known as \u201Cactivation checkpointing\u201D). When enabled, a lot of memory can be freed at the cost of small decrease in the training speed due to recomputing parts of the graph during back-propagation."),nc=h(),N=s("p"),Kb=i("This technique was first shared in the paper: "),hs=s("a"),ey=i("Training Deep Nets with Sublinear Memory Cost"),ty=i(". The paper will also give you the exact details on the savings, but it\u2019s in the ballpark of "),Wn=s("code"),ay=i("O(sqrt(n))"),sy=i(", where "),Xn=s("code"),ry=i("n"),ly=i(" is the number of feed-forward layers."),pc=h(),$l=s("p"),iy=i("To activate this feature in \u{1F917} Transformers for models that support it, use:"),hc=h(),d(fs.$$.fragment),fc=h(),Dt=s("p"),oy=i("or add "),Yn=s("code"),ny=i("--gradient_checkpointing"),py=i(" to the Trainer arguments."),cc=h(),xe=s("h3"),Tt=s("a"),Qn=s("span"),d(cs.$$.fragment),hy=h(),Zn=s("span"),fy=i("Batch sizes"),dc=h(),xl=s("p"),cy=i("One gets the most efficient performance when batch sizes and input/output neuron counts are divisible by a certain number, which typically starts at 8, but can be much higher as well. That number varies a lot depending on the specific hardware being used and the dtype of the model."),uc=h(),K=s("p"),dy=i("For example for fully connected layers (which correspond to GEMMs), NVIDIA provides recommendations for "),ds=s("a"),uy=i("input/output neuron counts"),my=i(" and "),us=s("a"),vy=i("batch size"),wy=i("."),mc=h(),ms=s("p"),vs=s("a"),_y=i("Tensor Core Requirements"),by=i(" define the multiplier based on the dtype and the hardware. For example, for fp16 a multiple of 8 is recommended, but on A100 it\u2019s 64!"),vc=h(),It=s("p"),yy=i("For parameters that are small, there is also "),ws=s("a"),gy=i("Dimension Quantization Effects"),Ey=i(" to consider, this is where tiling happens and the right multiplier can have a significant speedup."),wc=h(),je=s("h3"),Nt=s("a"),Jn=s("span"),d(_s.$$.fragment),Py=h(),Kn=s("span"),ky=i("DP vs DDP"),_c=h(),Ae=s("p"),ep=s("code"),$y=i("DistributedDataParallel"),xy=i(" (DDP) is typically faster than "),tp=s("code"),jy=i("DataParallel"),Ay=i(" (DP), but it is not always the case:"),bc=h(),St=s("ul"),ap=s("li"),Dy=i("while DP is python threads-based, DDP is multiprocess-based - and as such it has no python threads limitations, such as GIL"),Ty=h(),sp=s("li"),Iy=i("on the other hand a slow inter-connectivity between the GPU cards could lead to an actual slower outcome with DDP"),yc=h(),jl=s("p"),Ny=i("Here are the main differences in the inter-GPU communication overhead between the two modes:"),gc=h(),bs=s("p"),ys=s("a"),Sy=i("DDP"),Ly=i(":"),Ec=h(),Lt=s("ul"),rp=s("li"),Cy=i("At the start time the main process replicates the model once from gpu 0 to the rest of gpus"),Uy=h(),Al=s("li"),Gy=i("Then for each batch:"),gs=s("ol"),lp=s("li"),Oy=i("each gpu consumes each own mini-batch of data directly"),My=h(),Es=s("li"),Vy=i("during "),ip=s("code"),zy=i("backward"),Hy=i(", once the local gradients are ready, they are then averaged across all processes"),Pc=h(),Ps=s("p"),ks=s("a"),By=i("DP"),Fy=i(":"),kc=h(),Dl=s("p"),qy=i("For each batch:"),$c=h(),x=s("ol"),op=s("li"),Ry=i("gpu 0 reads the batch of data and then sends a mini-batch to each gpu"),Wy=h(),np=s("li"),Xy=i("replicates the up-to-date model from gpu 0 to each gpu"),Yy=h(),$s=s("li"),Qy=i("runs "),pp=s("code"),Zy=i("forward"),Jy=i(" and sends output from each gpu to gpu 0, computes loss"),Ky=h(),Tl=s("li"),e2=i("scatters loss from gpu 0 to all gpus, runs "),hp=s("code"),t2=i("backward"),a2=h(),fp=s("li"),s2=i("sends gradients from each gpu to gpu 0 and averages those"),xc=h(),Il=s("p"),r2=i("The only communication DDP performs per batch is sending gradients, whereas DP does 5 different data exchanges per batch."),jc=h(),Ct=s("p"),l2=i("DP copies data within the process via python threads, whereas DDP copies data via "),xs=s("a"),i2=i("torch.distributed"),o2=i("."),Ac=h(),Nl=s("p"),n2=i("Under DP gpu 0 performs a lot more work than the rest of the gpus, thus resulting in under-utilization of gpus."),Dc=h(),Sl=s("p"),p2=i("You can use DDP across multiple machines, but this is not the case with DP."),Tc=h(),Ll=s("p"),h2=i("There are other differences between DP and DDP but they aren\u2019t relevant to this discussion."),Ic=h(),Ut=s("p"),f2=i("If you want to go really deep into understanding these 2 modes, this "),js=s("a"),c2=i("article"),d2=i(" is highly recommended, as it has great diagrams, includes multiple benchmarks and profiler outputs on various hardware, explains all the nuances that you may need to know."),Nc=h(),Cl=s("p"),u2=i("Let\u2019s look at an actual benchmark:"),Sc=h(),Gt=s("table"),cp=s("thead"),De=s("tr"),Ul=s("th"),m2=i("Type"),v2=h(),dp=s("th"),w2=i("NVlink"),_2=h(),Gl=s("th"),b2=i("Time"),y2=h(),Te=s("tbody"),Ie=s("tr"),Ol=s("td"),g2=i("2:DP"),E2=h(),up=s("td"),P2=i("Y"),k2=h(),Ml=s("td"),$2=i("110s"),x2=h(),Ne=s("tr"),Vl=s("td"),j2=i("2:DDP"),A2=h(),mp=s("td"),D2=i("Y"),T2=h(),zl=s("td"),I2=i("101s"),N2=h(),Se=s("tr"),Hl=s("td"),S2=i("2:DDP"),L2=h(),vp=s("td"),C2=i("N"),U2=h(),Bl=s("td"),G2=i("131s"),Lc=h(),Fl=s("p"),O2=i("Analysis:"),Cc=h(),ql=s("p"),M2=i("Here DP is ~10% slower than DDP w/ NVlink, but ~15% faster than DDP w/o NVlink"),Uc=h(),Rl=s("p"),V2=i("The real difference will depend on how much data each GPU needs to sync with the others - the more there is to sync, the more a slow link will slow down the total runtime."),Gc=h(),Wl=s("p"),z2=i("Here is the full benchmark code and outputs:"),Oc=h(),As=s("p"),wp=s("code"),H2=i("NCCL_P2P_DISABLE=1"),B2=i(" was used to disable the NVLink feature on the corresponding benchmark."),Mc=h(),d(Ds.$$.fragment),Vc=h(),$=s("p"),F2=i("Hardware: 2x TITAN RTX 24GB each + NVlink with 2 NVLinks ("),_p=s("code"),q2=i("NV2"),R2=i(" in "),bp=s("code"),W2=i("nvidia-smi topo -m"),X2=i(`)
Software: `),yp=s("code"),Y2=i("pytorch-1.8-to-be"),Q2=i(" + "),gp=s("code"),Z2=i("cuda-11.0"),J2=i(" / "),Ep=s("code"),K2=i("transformers==4.3.0.dev0"),zc=h(),Le=s("h3"),Ot=s("a"),Pp=s("span"),d(Ts.$$.fragment),eg=h(),kp=s("span"),tg=i("DataLoader"),Hc=h(),Xl=s("p"),ag=i("One of the important requirements to reach great training speed is the ability to feed the GPU at the maximum speed it can handle. By default everything happens in the main process and it might not be able to read the data from disk fast enough, and thus create a bottleneck, leading to GPU under-utilization."),Bc=h(),Mt=s("ul"),Yl=s("li"),$p=s("code"),sg=i("DataLoader(pin_memory=True, ...)"),rg=i(" which ensures that the data gets preloaded into the pinned memory on CPU and typically leads to much faster transfers from CPU to GPU memory."),lg=h(),Ql=s("li"),xp=s("code"),ig=i("DataLoader(num_workers=4, ...)"),og=i(" - spawn several workers to pre-load data faster - during training watch the GPU utilization stats and if it\u2019s far from 100% experiment with raising the number of workers. Of course, the problem could be elsewhere so a very big number of workers won\u2019t necessarily lead to a better performance."),Fc=h(),Ce=s("h3"),Vt=s("a"),jp=s("span"),d(Is.$$.fragment),ng=h(),Ap=s("span"),pg=i("Faster optimizer"),qc=h(),Ue=s("p"),hg=i("pytorch-nightly introduced "),Dp=s("code"),fg=i("torch.optim._multi_tensor"),cg=i(" which should significantly speed up the optimizers for situations with lots of small feature tensors. It should eventually become the default, but if you want to experiment with it sooner and don\u2019t mind using the bleed-edge, see: "),Ns=s("a"),dg=i("https://github.com/huggingface/transformers/issues/9965"),Rc=h(),Ge=s("h3"),zt=s("a"),Tp=s("span"),d(Ss.$$.fragment),ug=h(),Ip=s("span"),mg=i("Sparsity"),Wc=h(),Oe=s("h4"),Ht=s("a"),Np=s("span"),d(Ls.$$.fragment),vg=h(),Sp=s("span"),wg=i("Mixture of Experts"),Xc=h(),Zl=s("p"),_g=i(`Quite a few of the recent papers reported a 4-5x training speedup and a faster inference by integrating
Mixture of Experts (MoE) into the Transformer models.`),Yc=h(),Jl=s("p"),bg=i("Since it has been discovered that more parameters lead to better performance, this technique allows to increase the number of parameters by an order of magnitude without increasing training costs."),Qc=h(),Kl=s("p"),yg=i("In this approach every other FFN layer is replaced with a MoE Layer which consists of many experts, with a gated function that trains each expert in a balanced way depending on the input token\u2019s position in a sequence."),Zc=h(),ei=s("p"),ti=s("img"),Jc=h(),Bt=s("p"),gg=i("(source: "),Cs=s("a"),Eg=i("GLAM"),Pg=i(")"),Kc=h(),ai=s("p"),kg=i("You can find exhaustive details and comparison tables in the papers listed at the end of this section."),ed=h(),si=s("p"),$g=i("The main drawback of this approach is that it requires staggering amounts of GPU memory - almost an order of magnitude larger than its dense equivalent. Various distillation and approaches are proposed to how to overcome the much higher memory requirements."),td=h(),ri=s("p"),xg=i("There is direct trade-off though, you can use just a few experts with a 2-3x smaller base model instead of dozens or hundreds experts leading to a 5x smaller model and thus increase the training speed moderately while increasing the memory requirements moderately as well."),ad=h(),li=s("p"),jg=i("Most related papers and implementations are built around Tensorflow/TPUs:"),sd=h(),ee=s("ul"),Lp=s("li"),Us=s("a"),Ag=i("GShard: Scaling Giant Models with Conditional Computation and Automatic Sharding"),Dg=h(),Cp=s("li"),Gs=s("a"),Tg=i("Switch Transformers: Scaling to Trillion Parameter Models with Simple and Efficient Sparsity"),Ig=h(),Up=s("li"),Os=s("a"),Ng=i("GLaM: Generalist Language Model (GLaM)"),rd=h(),P=s("p"),Sg=i("And for Pytorch DeepSpeed has built one as well: "),Ms=s("a"),Lg=i("Mixture of Experts"),Cg=i(" - blog posts:  "),Vs=s("a"),Ug=i("1"),Gg=i(", "),zs=s("a"),Og=i("2"),Mg=i(" and specific deployment with large transformer-based natural language generation models: "),Hs=s("a"),Vg=i("blog post"),zg=i(", "),ii=s("a"),Hg=i("Megatron-Deepspeed branch"),Bg=i("."),ld=h(),Me=s("h2"),Ft=s("a"),Gp=s("span"),d(Bs.$$.fragment),Fg=h(),Op=s("span"),qg=i("Contribute"),id=h(),oi=s("p"),Rg=i("This document is far from being complete and a lot more needs to be added, so if you have additions or corrections to make please don\u2019t hesitate to open a PR or if you aren\u2019t sure start an Issue and we can discuss the details there."),od=h(),ni=s("p"),Wg=i("When making contributions that A is better than B, please try to include a reproducible benchmark and/or a link to the source of that information (unless it comes directly from you)."),this.h()},l(e){const n=BP('[data-svelte="svelte-1phssyn"]',document.head);q=r(n,"META",{name:!0,content:!0}),n.forEach(t),Fs=f(e),j=r(e,"H1",{class:!0});var pd=l(j);C=r(pd,"A",{id:!0,class:!0,href:!0});var f3=l(C);Pi=r(f3,"SPAN",{});var c3=l(Pi);u(aa.$$.fragment,c3),c3.forEach(t),f3.forEach(t),Su=f(pd),ki=r(pd,"SPAN",{});var d3=l(ki);Lu=o(d3,"Performance and Scalability: How To Fit a Bigger Model and Train It Faster"),d3.forEach(t),pd.forEach(t),Hp=f(e),qs=r(e,"P",{});var u3=l(qs);Cu=o(u3,"For now the software sections of this document are mainly Pytorch-specific, but the guide can be extended to other frameworks in the future."),u3.forEach(t),Bp=f(e),ae=r(e,"H2",{class:!0});var hd=l(ae);Ve=r(hd,"A",{id:!0,class:!0,href:!0});var m3=l(Ve);$i=r(m3,"SPAN",{});var v3=l($i);u(sa.$$.fragment,v3),v3.forEach(t),m3.forEach(t),Uu=f(hd),xi=r(hd,"SPAN",{});var w3=l(xi);Gu=o(w3,"Quick notes"),w3.forEach(t),hd.forEach(t),Fp=f(e),Rs=r(e,"P",{});var _3=l(Rs);Ou=o(_3,"This section gives brief ideas on how to make training faster and support bigger models. Later sections will expand, demonstrate and elucidate each of these."),_3.forEach(t),qp=f(e),se=r(e,"H3",{class:!0});var fd=l(se);ze=r(fd,"A",{id:!0,class:!0,href:!0});var b3=l(ze);ji=r(b3,"SPAN",{});var y3=l(ji);u(ra.$$.fragment,y3),y3.forEach(t),b3.forEach(t),Mu=f(fd),Ai=r(fd,"SPAN",{});var g3=l(Ai);Vu=o(g3,"Faster Training"),g3.forEach(t),fd.forEach(t),Rp=f(e),Ws=r(e,"P",{});var E3=l(Ws);zu=o(E3,"Hardware:"),E3.forEach(t),Wp=f(e),Xs=r(e,"UL",{});var P3=l(Xs);Ys=r(P3,"LI",{});var Xg=l(Ys);Hu=o(Xg,"fast connectivity between GPUs"),la=r(Xg,"UL",{});var cd=l(la);Di=r(cd,"LI",{});var k3=l(Di);Bu=o(k3,"intra-node: NVLink"),k3.forEach(t),Fu=f(cd),Ti=r(cd,"LI",{});var $3=l(Ti);qu=o($3,"inter-node: Infiniband / Intel OPA"),$3.forEach(t),cd.forEach(t),Xg.forEach(t),P3.forEach(t),Xp=f(e),Qs=r(e,"P",{});var x3=l(Qs);Ru=o(x3,"Software:"),x3.forEach(t),Yp=f(e),He=r(e,"UL",{});var dd=l(He);Ii=r(dd,"LI",{});var j3=l(Ii);Wu=o(j3,"Data Parallel / Distributed Data Parallel"),j3.forEach(t),Xu=f(dd),Ni=r(dd,"LI",{});var A3=l(Ni);Yu=o(A3,"fp16 (autocast caching)"),A3.forEach(t),dd.forEach(t),Qp=f(e),re=r(e,"H3",{class:!0});var ud=l(re);Be=r(ud,"A",{id:!0,class:!0,href:!0});var D3=l(Be);Si=r(D3,"SPAN",{});var T3=l(Si);u(ia.$$.fragment,T3),T3.forEach(t),D3.forEach(t),Qu=f(ud),Li=r(ud,"SPAN",{});var I3=l(Li);Zu=o(I3,"Bigger Models"),I3.forEach(t),ud.forEach(t),Zp=f(e),Zs=r(e,"P",{});var N3=l(Zs);Ju=o(N3,"Hardware:"),N3.forEach(t),Jp=f(e),R=r(e,"UL",{});var pi=l(R);Ci=r(pi,"LI",{});var S3=l(Ci);Ku=o(S3,"bigger GPUs"),S3.forEach(t),em=f(pi),Ui=r(pi,"LI",{});var L3=l(Ui);tm=o(L3,"more GPUs"),L3.forEach(t),am=f(pi),Gi=r(pi,"LI",{});var C3=l(Gi);sm=o(C3,"more CPU and NVMe (offloaded to by DeepSpeed)"),C3.forEach(t),pi.forEach(t),Kp=f(e),Js=r(e,"P",{});var U3=l(Js);rm=o(U3,"Software:"),U3.forEach(t),eh=f(e),y=r(e,"UL",{});var g=l(y);Oi=r(g,"LI",{});var G3=l(Oi);lm=o(G3,"Deepspeed ZeRO"),G3.forEach(t),im=f(g),Mi=r(g,"LI",{});var O3=l(Mi);om=o(O3,"Deepspeed ZeRO-Offload"),O3.forEach(t),nm=f(g),Vi=r(g,"LI",{});var M3=l(Vi);pm=o(M3,"Megatron-LM 3D Parallelism"),M3.forEach(t),hm=f(g),zi=r(g,"LI",{});var V3=l(zi);fm=o(V3,"Pipeline Parallelism"),V3.forEach(t),cm=f(g),Hi=r(g,"LI",{});var z3=l(Hi);dm=o(z3,"Tensor Parallelism"),z3.forEach(t),um=f(g),Bi=r(g,"LI",{});var H3=l(Bi);mm=o(H3,"Low-memory Optimizers"),H3.forEach(t),vm=f(g),Fi=r(g,"LI",{});var B3=l(Fi);wm=o(B3,"fp16/bf16 (smaller data/faster throughput)"),B3.forEach(t),_m=f(g),qi=r(g,"LI",{});var F3=l(qi);bm=o(F3,"tf32 (faster throughput)"),F3.forEach(t),ym=f(g),Ri=r(g,"LI",{});var q3=l(Ri);gm=o(q3,"Gradient checkpointing"),q3.forEach(t),Em=f(g),Wi=r(g,"LI",{});var R3=l(Wi);Pm=o(R3,"Sparsity"),R3.forEach(t),g.forEach(t),th=f(e),le=r(e,"H2",{class:!0});var md=l(le);Fe=r(md,"A",{id:!0,class:!0,href:!0});var W3=l(Fe);Xi=r(W3,"SPAN",{});var X3=l(Xi);u(oa.$$.fragment,X3),X3.forEach(t),W3.forEach(t),km=f(md),Yi=r(md,"SPAN",{});var Y3=l(Yi);$m=o(Y3,"Hardware"),Y3.forEach(t),md.forEach(t),ah=f(e),ie=r(e,"H3",{class:!0});var vd=l(ie);qe=r(vd,"A",{id:!0,class:!0,href:!0});var Q3=l(qe);Qi=r(Q3,"SPAN",{});var Z3=l(Qi);u(na.$$.fragment,Z3),Z3.forEach(t),Q3.forEach(t),xm=f(vd),Zi=r(vd,"SPAN",{});var J3=l(Zi);jm=o(J3,"Multi-GPU Connectivity"),J3.forEach(t),vd.forEach(t),sh=f(e),Ks=r(e,"P",{});var K3=l(Ks);Am=o(K3,"If you use multiple GPUs the way cards are inter-connected can have a huge impact on the total training time."),K3.forEach(t),rh=f(e),er=r(e,"P",{});var eE=l(er);Dm=o(eE,"If the GPUs are on the same physical node, you can run:"),eE.forEach(t),lh=f(e),u(pa.$$.fragment,e),ih=f(e),tr=r(e,"P",{});var tE=l(tr);Tm=o(tE,"and it will tell you how the GPUs are inter-connected."),tE.forEach(t),oh=f(e),ar=r(e,"P",{});var aE=l(ar);Im=o(aE,"On a machine with dual-GPU and which are connected with NVLink, you will most likely see something like:"),aE.forEach(t),nh=f(e),u(ha.$$.fragment,e),ph=f(e),sr=r(e,"P",{});var sE=l(sr);Nm=o(sE,"on a different machine w/o NVLink we may see:"),sE.forEach(t),hh=f(e),u(fa.$$.fragment,e),fh=f(e),rr=r(e,"P",{});var rE=l(rr);Sm=o(rE,"The report includes this legend:"),rE.forEach(t),ch=f(e),u(ca.$$.fragment,e),dh=f(e),W=r(e,"P",{});var hi=l(W);Lm=o(hi,"So the first report "),Ji=r(hi,"CODE",{});var lE=l(Ji);Cm=o(lE,"NV2"),lE.forEach(t),Um=o(hi," tells us the GPUs are interconnected with 2 NVLinks, and the second report "),Ki=r(hi,"CODE",{});var iE=l(Ki);Gm=o(iE,"PHB"),iE.forEach(t),Om=o(hi," we have a typical consumer-level PCIe+Bridge setup."),hi.forEach(t),uh=f(e),lr=r(e,"P",{});var oE=l(lr);Mm=o(oE,"Check what type of connectivity you have on your setup. Some of these will make the communication between cards faster (e.g. NVLink), others slower (e.g. PHB)."),oE.forEach(t),mh=f(e),ir=r(e,"P",{});var nE=l(ir);Vm=o(nE,"Depending on the type of scalability solution used, the connectivity speed could have a major or a minor impact. If the GPUs need to sync rarely, as in DDP, the impact of a slower connection will be less significant. If the GPUs need to send messages to each other often, as in ZeRO-DP, then faster connectivity becomes super important to achieve faster training."),nE.forEach(t),vh=f(e),oe=r(e,"H3",{class:!0});var wd=l(oe);Re=r(wd,"A",{id:!0,class:!0,href:!0});var pE=l(Re);eo=r(pE,"SPAN",{});var hE=l(eo);u(da.$$.fragment,hE),hE.forEach(t),pE.forEach(t),zm=f(wd),to=r(wd,"SPAN",{});var fE=l(to);Hm=o(fE,"NVlink"),fE.forEach(t),wd.forEach(t),wh=f(e),ua=r(e,"P",{});var Yg=l(ua);ma=r(Yg,"A",{href:!0,rel:!0});var cE=l(ma);Bm=o(cE,"NVLink"),cE.forEach(t),Fm=o(Yg," is a wire-based serial multi-lane near-range communications link developed by Nvidia."),Yg.forEach(t),_h=f(e),We=r(e,"P",{});var _d=l(We);qm=o(_d,"Each new generation provides a faster bandwidth, e.g. here is a quote from "),va=r(_d,"A",{href:!0,rel:!0});var dE=l(va);Rm=o(dE,"Nvidia Ampere GA102 GPU Architecture"),dE.forEach(t),Wm=o(_d,":"),_d.forEach(t),bh=f(e),or=r(e,"BLOCKQUOTE",{});var uE=l(or);ao=r(uE,"P",{});var mE=l(ao);Xm=o(mE,`Third-Generation NVLink\xAE
GA102 GPUs utilize NVIDIA\u2019s third-generation NVLink interface, which includes four x4 links,
with each link providing 14.0625 GB/sec bandwidth in each direction between two GPUs. Four
links provide 56.25 GB/sec bandwidth in each direction, and 112.5 GB/sec total bandwidth
between two GPUs. Two RTX 3090 GPUs can be connected together for SLI using NVLink.
(Note that 3-Way and 4-Way SLI configurations are not supported.)`),mE.forEach(t),uE.forEach(t),yh=f(e),A=r(e,"P",{});var qt=l(A);Ym=o(qt,"So the higher "),so=r(qt,"CODE",{});var vE=l(so);Qm=o(vE,"X"),vE.forEach(t),Zm=o(qt," you get in the report of "),ro=r(qt,"CODE",{});var wE=l(ro);Jm=o(wE,"NVX"),wE.forEach(t),Km=o(qt," in the output of "),lo=r(qt,"CODE",{});var _E=l(lo);ev=o(_E,"nvidia-smi topo -m"),_E.forEach(t),tv=o(qt," the better. The generation will depend on your GPU architecture."),qt.forEach(t),gh=f(e),nr=r(e,"P",{});var bE=l(nr);av=o(bE,"Let\u2019s compare the execution of a gpt2 language model training over a small sample of wikitext."),bE.forEach(t),Eh=f(e),pr=r(e,"P",{});var yE=l(pr);sv=o(yE,"The results are:"),yE.forEach(t),Ph=f(e),Xe=r(e,"TABLE",{});var bd=l(Xe);io=r(bd,"THEAD",{});var gE=l(io);wa=r(gE,"TR",{});var yd=l(wa);oo=r(yd,"TH",{});var EE=l(oo);rv=o(EE,"NVlink"),EE.forEach(t),lv=f(yd),hr=r(yd,"TH",{align:!0});var PE=l(hr);iv=o(PE,"Time"),PE.forEach(t),yd.forEach(t),gE.forEach(t),ov=f(bd),_a=r(bd,"TBODY",{});var gd=l(_a);ba=r(gd,"TR",{});var Ed=l(ba);no=r(Ed,"TD",{});var kE=l(no);nv=o(kE,"Y"),kE.forEach(t),pv=f(Ed),fr=r(Ed,"TD",{align:!0});var $E=l(fr);hv=o($E,"101s"),$E.forEach(t),Ed.forEach(t),fv=f(gd),ya=r(gd,"TR",{});var Pd=l(ya);po=r(Pd,"TD",{});var xE=l(po);cv=o(xE,"N"),xE.forEach(t),dv=f(Pd),cr=r(Pd,"TD",{align:!0});var jE=l(cr);uv=o(jE,"131s"),jE.forEach(t),Pd.forEach(t),gd.forEach(t),bd.forEach(t),kh=f(e),dr=r(e,"P",{});var AE=l(dr);mv=o(AE,"You can see that NVLink completes the training ~23% faster."),AE.forEach(t),$h=f(e),Ye=r(e,"P",{});var kd=l(Ye);vv=o(kd,"In the second benchmark we use "),ho=r(kd,"CODE",{});var DE=l(ho);wv=o(DE,"NCCL_P2P_DISABLE=1"),DE.forEach(t),_v=o(kd," to tell the GPUs not to use NVLink."),kd.forEach(t),xh=f(e),ur=r(e,"P",{});var TE=l(ur);bv=o(TE,"Here is the full benchmark code and outputs:"),TE.forEach(t),jh=f(e),u(ga.$$.fragment,e),Ah=f(e),k=r(e,"P",{});var H=l(k);yv=o(H,"Hardware: 2x TITAN RTX 24GB each + NVlink with 2 NVLinks ("),fo=r(H,"CODE",{});var IE=l(fo);gv=o(IE,"NV2"),IE.forEach(t),Ev=o(H," in "),co=r(H,"CODE",{});var NE=l(co);Pv=o(NE,"nvidia-smi topo -m"),NE.forEach(t),kv=o(H,`)
Software: `),uo=r(H,"CODE",{});var SE=l(uo);$v=o(SE,"pytorch-1.8-to-be"),SE.forEach(t),xv=o(H," + "),mo=r(H,"CODE",{});var LE=l(mo);jv=o(LE,"cuda-11.0"),LE.forEach(t),Av=o(H," / "),vo=r(H,"CODE",{});var CE=l(vo);Dv=o(CE,"transformers==4.3.0.dev0"),CE.forEach(t),H.forEach(t),Dh=f(e),ne=r(e,"H2",{class:!0});var $d=l(ne);Qe=r($d,"A",{id:!0,class:!0,href:!0});var UE=l(Qe);wo=r(UE,"SPAN",{});var GE=l(wo);u(Ea.$$.fragment,GE),GE.forEach(t),UE.forEach(t),Tv=f($d),_o=r($d,"SPAN",{});var OE=l(_o);Iv=o(OE,"Software"),OE.forEach(t),$d.forEach(t),Th=f(e),pe=r(e,"H3",{class:!0});var xd=l(pe);Ze=r(xd,"A",{id:!0,class:!0,href:!0});var ME=l(Ze);bo=r(ME,"SPAN",{});var VE=l(bo);u(Pa.$$.fragment,VE),VE.forEach(t),ME.forEach(t),Nv=f(xd),yo=r(xd,"SPAN",{});var zE=l(yo);Sv=o(zE,"Anatomy of Model's Operations"),zE.forEach(t),xd.forEach(t),Ih=f(e),mr=r(e,"P",{});var HE=l(mr);Lv=o(HE,"Transformers architecture includes 3 main groups of operations grouped below by compute-intensity."),HE.forEach(t),Nh=f(e),X=r(e,"OL",{});var fi=l(X);ka=r(fi,"LI",{});var jd=l(ka);go=r(jd,"P",{});var BE=l(go);Eo=r(BE,"STRONG",{});var FE=l(Eo);Cv=o(FE,"Tensor Contractions"),FE.forEach(t),BE.forEach(t),Uv=f(jd),$a=r(jd,"P",{});var Ad=l($a);Gv=o(Ad,"Linear layers and components of Multi-Head Attention all do batched "),Po=r(Ad,"STRONG",{});var qE=l(Po);Ov=o(qE,"matrix-matrix multiplications"),qE.forEach(t),Mv=o(Ad,". These operations are the most compute-intensive part of training a transformer."),Ad.forEach(t),jd.forEach(t),Vv=f(fi),xa=r(fi,"LI",{});var Dd=l(xa);ko=r(Dd,"P",{});var RE=l(ko);$o=r(RE,"STRONG",{});var WE=l($o);zv=o(WE,"Statistical Normalizations"),WE.forEach(t),RE.forEach(t),Hv=f(Dd),ja=r(Dd,"P",{});var Td=l(ja);Bv=o(Td,"Softmax and layer normalization are less compute-intensive than tensor contractions, and involve one or more "),xo=r(Td,"STRONG",{});var XE=l(xo);Fv=o(XE,"reduction operations"),XE.forEach(t),qv=o(Td,", the result of which is then applied via a map."),Td.forEach(t),Dd.forEach(t),Rv=f(fi),Aa=r(fi,"LI",{});var Id=l(Aa);jo=r(Id,"P",{});var YE=l(jo);Ao=r(YE,"STRONG",{});var QE=l(Ao);Wv=o(QE,"Element-wise Operators"),QE.forEach(t),YE.forEach(t),Xv=f(Id),Da=r(Id,"P",{});var Nd=l(Da);Yv=o(Nd,"These are the remaining operators: "),Do=r(Nd,"STRONG",{});var ZE=l(Do);Qv=o(ZE,"biases, dropout, activations, and residual connections"),ZE.forEach(t),Zv=o(Nd,". These are the least compute-intensive operations."),Nd.forEach(t),Id.forEach(t),fi.forEach(t),Sh=f(e),vr=r(e,"P",{});var JE=l(vr);Jv=o(JE,"This knowledge can be helpful to know when analyzing performance bottlenecks."),JE.forEach(t),Lh=f(e),Ta=r(e,"P",{});var Qg=l(Ta);Kv=o(Qg,"This summary is derived from "),Ia=r(Qg,"A",{href:!0,rel:!0});var KE=l(Ia);e1=o(KE,"Data Movement Is All You Need: A Case Study on Optimizing Transformers 2020"),KE.forEach(t),Qg.forEach(t),Ch=f(e),he=r(e,"H3",{class:!0});var Sd=l(he);Je=r(Sd,"A",{id:!0,class:!0,href:!0});var e6=l(Je);To=r(e6,"SPAN",{});var t6=l(To);u(Na.$$.fragment,t6),t6.forEach(t),e6.forEach(t),t1=f(Sd),Io=r(Sd,"SPAN",{});var a6=l(Io);a1=o(a6,"Anatomy of Model's Memory"),a6.forEach(t),Sd.forEach(t),Uh=f(e),wr=r(e,"P",{});var s6=l(wr);s1=o(s6,"The components on GPU memory are the following:"),s6.forEach(t),Gh=f(e),E=r(e,"OL",{});var S=l(E);No=r(S,"LI",{});var r6=l(No);r1=o(r6,"model weights"),r6.forEach(t),l1=f(S),So=r(S,"LI",{});var l6=l(So);i1=o(l6,"optimizer states"),l6.forEach(t),o1=f(S),Lo=r(S,"LI",{});var i6=l(Lo);n1=o(i6,"gradients"),i6.forEach(t),p1=f(S),Co=r(S,"LI",{});var o6=l(Co);h1=o(o6,"forward activations saved for gradient computation"),o6.forEach(t),f1=f(S),Uo=r(S,"LI",{});var n6=l(Uo);c1=o(n6,"temporary buffers"),n6.forEach(t),d1=f(S),Go=r(S,"LI",{});var p6=l(Go);u1=o(p6,"functionality-specific memory"),p6.forEach(t),S.forEach(t),Oh=f(e),_r=r(e,"P",{});var h6=l(_r);m1=o(h6,"A typical model trained in mixed precision with AdamW requires 18 bytes per model parameter plus activation memory."),h6.forEach(t),Mh=f(e),br=r(e,"P",{});var f6=l(br);v1=o(f6,"For inference there are no optimizer states and gradients, so we can subtract those. And thus we end up with 6 bytes per model parameter for mixed precision inference, plus activation memory."),f6.forEach(t),Vh=f(e),yr=r(e,"P",{});var c6=l(yr);w1=o(c6,"Let\u2019s look at the details."),c6.forEach(t),zh=f(e),fe=r(e,"H4",{class:!0});var Ld=l(fe);Ke=r(Ld,"A",{id:!0,class:!0,href:!0});var d6=l(Ke);Oo=r(d6,"SPAN",{});var u6=l(Oo);u(Sa.$$.fragment,u6),u6.forEach(t),d6.forEach(t),_1=f(Ld),Mo=r(Ld,"SPAN",{});var m6=l(Mo);b1=o(m6,"Model Weights"),m6.forEach(t),Ld.forEach(t),Hh=f(e),et=r(e,"UL",{});var Cd=l(et);Vo=r(Cd,"LI",{});var v6=l(Vo);y1=o(v6,"4 bytes * number of parameters for fp32 training"),v6.forEach(t),g1=f(Cd),zo=r(Cd,"LI",{});var w6=l(zo);E1=o(w6,"6 bytes * number of parameters for mixed precision training"),w6.forEach(t),Cd.forEach(t),Bh=f(e),ce=r(e,"H4",{class:!0});var Ud=l(ce);tt=r(Ud,"A",{id:!0,class:!0,href:!0});var _6=l(tt);Ho=r(_6,"SPAN",{});var b6=l(Ho);u(La.$$.fragment,b6),b6.forEach(t),_6.forEach(t),P1=f(Ud),Bo=r(Ud,"SPAN",{});var y6=l(Bo);k1=o(y6,"Optimizer States"),y6.forEach(t),Ud.forEach(t),Fh=f(e),Y=r(e,"UL",{});var ci=l(Y);Fo=r(ci,"LI",{});var g6=l(Fo);$1=o(g6,"8 bytes * number of parameters for normal AdamW (maintains 2 states)"),g6.forEach(t),x1=f(ci),gr=r(ci,"LI",{});var Zg=l(gr);j1=o(Zg,"2 bytes * number of parameters for 8-bit AdamW optimizers like "),Ca=r(Zg,"A",{href:!0,rel:!0});var E6=l(Ca);A1=o(E6,"bitsandbytes"),E6.forEach(t),Zg.forEach(t),D1=f(ci),qo=r(ci,"LI",{});var P6=l(qo);T1=o(P6,"4 bytes * number of parameters for optimizers like SGD (maintains only 1 state)"),P6.forEach(t),ci.forEach(t),qh=f(e),de=r(e,"H4",{class:!0});var Gd=l(de);at=r(Gd,"A",{id:!0,class:!0,href:!0});var k6=l(at);Ro=r(k6,"SPAN",{});var $6=l(Ro);u(Ua.$$.fragment,$6),$6.forEach(t),k6.forEach(t),I1=f(Gd),Wo=r(Gd,"SPAN",{});var x6=l(Wo);N1=o(x6,"Gradients"),x6.forEach(t),Gd.forEach(t),Rh=f(e),Er=r(e,"UL",{});var j6=l(Er);Xo=r(j6,"LI",{});var A6=l(Xo);S1=o(A6,"4 bytes * number of parameters for either fp32 or mixed precision training"),A6.forEach(t),j6.forEach(t),Wh=f(e),ue=r(e,"H4",{class:!0});var Od=l(ue);st=r(Od,"A",{id:!0,class:!0,href:!0});var D6=l(st);Yo=r(D6,"SPAN",{});var T6=l(Yo);u(Ga.$$.fragment,T6),T6.forEach(t),D6.forEach(t),L1=f(Od),Qo=r(Od,"SPAN",{});var I6=l(Qo);C1=o(I6,"Forward Activations"),I6.forEach(t),Od.forEach(t),Xh=f(e),Pr=r(e,"UL",{});var N6=l(Pr);Zo=r(N6,"LI",{});var S6=l(Zo);U1=o(S6,"size depends on many factors, the key ones being sequence length, hidden size and batch size."),S6.forEach(t),N6.forEach(t),Yh=f(e),kr=r(e,"P",{});var L6=l(kr);G1=o(L6,"There are the input and output that are being passed and returned by the forward and the backward functions and the forward activations saved for gradient computation."),L6.forEach(t),Qh=f(e),me=r(e,"H4",{class:!0});var Md=l(me);rt=r(Md,"A",{id:!0,class:!0,href:!0});var C6=l(rt);Jo=r(C6,"SPAN",{});var U6=l(Jo);u(Oa.$$.fragment,U6),U6.forEach(t),C6.forEach(t),O1=f(Md),Ko=r(Md,"SPAN",{});var G6=l(Ko);M1=o(G6,"Temporary Memory"),G6.forEach(t),Md.forEach(t),Zh=f(e),$r=r(e,"P",{});var O6=l($r);V1=o(O6,"Additionally there are all kinds of temporary variables which get released once the calculation is done, but in the moment these could require additional memory and could push to OOM. Therefore when coding it\u2019s crucial to think strategically about such temporary variables and sometimes to explicitly free those as soon as they are no longer needed."),O6.forEach(t),Jh=f(e),ve=r(e,"H4",{class:!0});var Vd=l(ve);lt=r(Vd,"A",{id:!0,class:!0,href:!0});var M6=l(lt);en=r(M6,"SPAN",{});var V6=l(en);u(Ma.$$.fragment,V6),V6.forEach(t),M6.forEach(t),z1=f(Vd),tn=r(Vd,"SPAN",{});var z6=l(tn);H1=o(z6,"Functionality-specific memory"),z6.forEach(t),Vd.forEach(t),Kh=f(e),xr=r(e,"P",{});var H6=l(xr);B1=o(H6,"Then your software could have special memory needs. For example, when generating text using beam search, the software needs to maintain multiple copies of inputs and outputs."),H6.forEach(t),ef=f(e),we=r(e,"H3",{class:!0});var zd=l(we);it=r(zd,"A",{id:!0,class:!0,href:!0});var B6=l(it);an=r(B6,"SPAN",{});var F6=l(an);u(Va.$$.fragment,F6),F6.forEach(t),B6.forEach(t),F1=f(zd),ot=r(zd,"SPAN",{});var Mp=l(ot);sn=r(Mp,"CODE",{});var q6=l(sn);q1=o(q6,"forward"),q6.forEach(t),R1=o(Mp," vs "),rn=r(Mp,"CODE",{});var R6=l(rn);W1=o(R6,"backward"),R6.forEach(t),X1=o(Mp," Execution Speed"),Mp.forEach(t),zd.forEach(t),tf=f(e),jr=r(e,"P",{});var W6=l(jr);Y1=o(W6,"For convolutions and linear layers there are 2x flops in the backward compared to the forward, which generally translates into ~2x slower (sometimes more, because sizes in the backward tend to be more awkward). Activations are usually bandwidth-limited, and it\u2019s typical for an activation to have to read more data in the backward than in the forward (e.g. activation forward reads once, writes once, activation backward reads twice, gradOutput and output of the forward, and writes once, gradInput)."),W6.forEach(t),af=f(e),_e=r(e,"H3",{class:!0});var Hd=l(_e);nt=r(Hd,"A",{id:!0,class:!0,href:!0});var X6=l(nt);ln=r(X6,"SPAN",{});var Y6=l(ln);u(za.$$.fragment,Y6),Y6.forEach(t),X6.forEach(t),Q1=f(Hd),on=r(Hd,"SPAN",{});var Q6=l(on);Z1=o(Q6,"Floating Data Types"),Q6.forEach(t),Hd.forEach(t),sf=f(e),Ar=r(e,"P",{});var Z6=l(Ar);J1=o(Z6,"Here are the commonly used floating point data types choice of which impacts both memory usage and throughput:"),Z6.forEach(t),rf=f(e),D=r(e,"UL",{});var Rt=l(D);Ha=r(Rt,"LI",{});var Bd=l(Ha);K1=o(Bd,"fp32 ("),nn=r(Bd,"CODE",{});var J6=l(nn);ew=o(J6,"float32"),J6.forEach(t),tw=o(Bd,")"),Bd.forEach(t),aw=f(Rt),Ba=r(Rt,"LI",{});var Fd=l(Ba);sw=o(Fd,"fp16 ("),pn=r(Fd,"CODE",{});var K6=l(pn);rw=o(K6,"float16"),K6.forEach(t),lw=o(Fd,")"),Fd.forEach(t),iw=f(Rt),Fa=r(Rt,"LI",{});var qd=l(Fa);ow=o(qd,"bf16 ("),hn=r(qd,"CODE",{});var e0=l(hn);nw=o(e0,"bfloat16"),e0.forEach(t),pw=o(qd,")"),qd.forEach(t),hw=f(Rt),fn=r(Rt,"LI",{});var t0=l(fn);fw=o(t0,"tf32 (CUDA internal data type)"),t0.forEach(t),Rt.forEach(t),lf=f(e),Dr=r(e,"P",{});var a0=l(Dr);cw=o(a0,"Here is a diagram that shows how these data types correlate to each other."),a0.forEach(t),of=f(e),Tr=r(e,"P",{});var s0=l(Tr);Ir=r(s0,"IMG",{src:!0,alt:!0}),s0.forEach(t),nf=f(e),pt=r(e,"P",{});var Rd=l(pt);dw=o(Rd,"(source: "),qa=r(Rd,"A",{href:!0,rel:!0});var r0=l(qa);uw=o(r0,"NVIDIA Blog"),r0.forEach(t),mw=o(Rd,")"),Rd.forEach(t),pf=f(e),Nr=r(e,"P",{});var l0=l(Nr);vw=o(l0,"While fp16 and fp32 have been around for quite some time, bf16 and tf32 are only available on the Ampere architecture GPUS. TPUs support bf16 as well."),l0.forEach(t),hf=f(e),be=r(e,"H4",{class:!0});var Wd=l(be);ht=r(Wd,"A",{id:!0,class:!0,href:!0});var i0=l(ht);cn=r(i0,"SPAN",{});var o0=l(cn);u(Ra.$$.fragment,o0),o0.forEach(t),i0.forEach(t),ww=f(Wd),dn=r(Wd,"SPAN",{});var n0=l(dn);_w=o(n0,"fp16"),n0.forEach(t),Wd.forEach(t),ff=f(e),Sr=r(e,"P",{});var p0=l(Sr);bw=o(p0,"AMP = Automatic Mixed Precision"),p0.forEach(t),cf=f(e),Lr=r(e,"P",{});var h0=l(Lr);yw=o(h0,"If we look at what\u2019s happening with FP16 training (mixed precision) we have:"),h0.forEach(t),df=f(e),T=r(e,"UL",{});var Wt=l(T);un=r(Wt,"LI",{});var f0=l(un);gw=o(f0,"the model has two copies in memory: one in half-precision for the forward/backward computations and one in full precision - no memory saved here"),f0.forEach(t),Ew=f(Wt),mn=r(Wt,"LI",{});var c0=l(mn);Pw=o(c0,"the forward activations saved for gradient computation are in half-precision - memory is saved here"),c0.forEach(t),kw=f(Wt),Wa=r(Wt,"LI",{});var Xd=l(Wa);$w=o(Xd,"the gradients are computed in half-precision "),vn=r(Xd,"EM",{});var d0=l(vn);xw=o(d0,"but"),d0.forEach(t),jw=o(Xd," converted to full-precision for the update, no saving there"),Xd.forEach(t),Aw=f(Wt),wn=r(Wt,"LI",{});var u0=l(wn);Dw=o(u0,"the optimizer states are in full precision as all the updates are done in full-precision"),u0.forEach(t),Wt.forEach(t),uf=f(e),Cr=r(e,"P",{});var m0=l(Cr);Tw=o(m0,"So the savings only happen for the forward activations saved for the backward computation, and there is a slight overhead because the model weights are stored both in half- and full-precision."),m0.forEach(t),mf=f(e),ft=r(e,"P",{});var Yd=l(ft);Iw=o(Yd,"In \u{1F917} Transformers fp16 mixed precision is enabled by passing "),_n=r(Yd,"CODE",{});var v0=l(_n);Nw=o(v0,"--fp16"),v0.forEach(t),Sw=o(Yd," to the \u{1F917} Trainer."),Yd.forEach(t),vf=f(e),Ur=r(e,"P",{});var w0=l(Ur);Lw=o(w0,"Now let\u2019s look at a simple text-classification fine-tuning on 2 GPUs (I\u2019m giving the command for reference):"),w0.forEach(t),wf=f(e),u(Xa.$$.fragment,e),_f=f(e),ct=r(e,"P",{});var Qd=l(ct);Cw=o(Qd,"Since the only savings we get are in the model activations saved for the backward passed, it\u2019s logical that the bigger those activations are, the bigger the saving will be. If we try different batch sizes, I indeed get (this is with "),bn=r(Qd,"CODE",{});var _0=l(bn);Uw=o(_0,"nvidia-smi"),_0.forEach(t),Gw=o(Qd," so not completely reliable as said above but it will be a fair comparison):"),Qd.forEach(t),bf=f(e),dt=r(e,"TABLE",{});var Zd=l(dt);yn=r(Zd,"THEAD",{});var b0=l(yn);U=r(b0,"TR",{});var Xt=l(U);Gr=r(Xt,"TH",{align:!0});var y0=l(Gr);Ow=o(y0,"batch size"),y0.forEach(t),Mw=f(Xt),Or=r(Xt,"TH",{align:!0});var g0=l(Or);Vw=o(g0,"w/o \u2014fp16"),g0.forEach(t),zw=f(Xt),Mr=r(Xt,"TH",{align:!0});var E0=l(Mr);Hw=o(E0,"w/ \u2014fp16"),E0.forEach(t),Bw=f(Xt),Vr=r(Xt,"TH",{align:!0});var P0=l(Vr);Fw=o(P0,"savings"),P0.forEach(t),Xt.forEach(t),b0.forEach(t),qw=f(Zd),G=r(Zd,"TBODY",{});var Yt=l(G);O=r(Yt,"TR",{});var Qt=l(O);zr=r(Qt,"TD",{align:!0});var k0=l(zr);Rw=o(k0,"8"),k0.forEach(t),Ww=f(Qt),Hr=r(Qt,"TD",{align:!0});var $0=l(Hr);Xw=o($0,"4247"),$0.forEach(t),Yw=f(Qt),Br=r(Qt,"TD",{align:!0});var x0=l(Br);Qw=o(x0,"4163"),x0.forEach(t),Zw=f(Qt),Fr=r(Qt,"TD",{align:!0});var j0=l(Fr);Jw=o(j0,"84"),j0.forEach(t),Qt.forEach(t),Kw=f(Yt),M=r(Yt,"TR",{});var Zt=l(M);qr=r(Zt,"TD",{align:!0});var A0=l(qr);e_=o(A0,"16"),A0.forEach(t),t_=f(Zt),Rr=r(Zt,"TD",{align:!0});var D0=l(Rr);a_=o(D0,"4971"),D0.forEach(t),s_=f(Zt),Wr=r(Zt,"TD",{align:!0});var T0=l(Wr);r_=o(T0,"4793"),T0.forEach(t),l_=f(Zt),Xr=r(Zt,"TD",{align:!0});var I0=l(Xr);i_=o(I0,"178"),I0.forEach(t),Zt.forEach(t),o_=f(Yt),V=r(Yt,"TR",{});var Jt=l(V);Yr=r(Jt,"TD",{align:!0});var N0=l(Yr);n_=o(N0,"32"),N0.forEach(t),p_=f(Jt),Qr=r(Jt,"TD",{align:!0});var S0=l(Qr);h_=o(S0,"6827"),S0.forEach(t),f_=f(Jt),Zr=r(Jt,"TD",{align:!0});var L0=l(Zr);c_=o(L0,"6207"),L0.forEach(t),d_=f(Jt),Jr=r(Jt,"TD",{align:!0});var C0=l(Jr);u_=o(C0,"620"),C0.forEach(t),Jt.forEach(t),m_=f(Yt),z=r(Yt,"TR",{});var Kt=l(z);Kr=r(Kt,"TD",{align:!0});var U0=l(Kr);v_=o(U0,"64"),U0.forEach(t),w_=f(Kt),el=r(Kt,"TD",{align:!0});var G0=l(el);__=o(G0,"10037"),G0.forEach(t),b_=f(Kt),tl=r(Kt,"TD",{align:!0});var O0=l(tl);y_=o(O0,"8061"),O0.forEach(t),g_=f(Kt),al=r(Kt,"TD",{align:!0});var M0=l(al);E_=o(M0,"1976"),M0.forEach(t),Kt.forEach(t),Yt.forEach(t),Zd.forEach(t),yf=f(e),ut=r(e,"P",{});var Jd=l(ut);P_=o(Jd,"So there is only a real memory saving if we train at a high batch size (and it\u2019s not half) and at batch sizes lower than 8, you actually get a bigger memory footprint (because of the overhead mentioned above). The gain for FP16 training is that in each of those cases, the training with the flag "),gn=r(Jd,"CODE",{});var V0=l(gn);k_=o(V0,"--fp16"),V0.forEach(t),$_=o(Jd," is twice as fast, which does require every tensor to have every dimension be a multiple of 8 (examples pad the tensors to a sequence length that is a multiple of 8)."),Jd.forEach(t),gf=f(e),sl=r(e,"P",{});var z0=l(sl);x_=o(z0,"Summary: FP16 with apex or AMP will only give you some memory savings with a reasonably high batch size."),z0.forEach(t),Ef=f(e),rl=r(e,"P",{});var H0=l(rl);j_=o(H0,"Additionally, under mixed precision when possible, it\u2019s important that the batch size is a multiple of 8 to efficiently use tensor cores."),H0.forEach(t),Pf=f(e),mt=r(e,"P",{});var Kd=l(mt);A_=o(Kd,"Note that in some situations the speed up can be as big as 5x when using mixed precision. e.g. we have observed that while using "),Ya=r(Kd,"A",{href:!0,rel:!0});var B0=l(Ya);D_=o(B0,"Megatron-Deepspeed"),B0.forEach(t),T_=o(Kd,"."),Kd.forEach(t),kf=f(e),ll=r(e,"P",{});var F0=l(ll);I_=o(F0,"Some amazing tutorials to read on mixed precision:"),F0.forEach(t),$f=f(e),vt=r(e,"UL",{});var eu=l(vt);il=r(eu,"LI",{});var Jg=l(il);N_=o(Jg,"@sgugger wrote a great explanation of mixed precision "),Qa=r(Jg,"A",{href:!0,rel:!0});var q0=l(Qa);S_=o(q0,"here"),q0.forEach(t),Jg.forEach(t),L_=f(eu),ol=r(eu,"LI",{});var Kg=l(ol);C_=o(Kg,"Aleksey Bilogur\u2019s "),Za=r(Kg,"A",{href:!0,rel:!0});var R0=l(Za);U_=o(R0,"A developer-friendly guide to mixed precision training with PyTorch"),R0.forEach(t),Kg.forEach(t),eu.forEach(t),xf=f(e),ye=r(e,"H5",{class:!0});var tu=l(ye);wt=r(tu,"A",{id:!0,class:!0,href:!0});var W0=l(wt);En=r(W0,"SPAN",{});var X0=l(En);u(Ja.$$.fragment,X0),X0.forEach(t),W0.forEach(t),G_=f(tu),Pn=r(tu,"SPAN",{});var Y0=l(Pn);O_=o(Y0,"fp16 caching"),Y0.forEach(t),tu.forEach(t),jf=f(e),Q=r(e,"P",{});var di=l(Q);M_=o(di,"pytorch "),kn=r(di,"CODE",{});var Q0=l(kn);V_=o(Q0,"autocast"),Q0.forEach(t),z_=o(di," which performs AMP include a caching feature, which speed things up by caching fp16-converted values. Here is the full description from this "),Ka=r(di,"A",{href:!0,rel:!0});var Z0=l(Ka);H_=o(Z0,"comment"),Z0.forEach(t),B_=o(di,":"),di.forEach(t),Af=f(e),nl=r(e,"P",{});var J0=l(nl);F_=o(J0,"Autocast maintains a cache of the FP16 casts of model parameters (leaves). This helps streamline parameter reuse: if the same FP32 param is used in several different FP16list ops, like several matmuls, instead of re-casting the param to FP16 on entering each matmul, the cast will occur on the first matmul, the casted FP16 copy will be cached, and for all later matmuls the FP16 copy will be reused. The cache is maintained only within a particular outermost autocast context. When you exit the autocast context the cache is dropped. For recommended usage, in which autocast wraps the forward pass, and then you exit the context before calling backward(), this means the cache only lasts the duration of the forward pass each iteration, and will be rebuilt next iteration. (The cache of FP16-casted copies MUST be rebuilt each iteration. The FP32 parameters get updated by the optimizer, so the FP16 copies must be recreated, otherwise the FP16 values will be stale.)"),J0.forEach(t),Df=f(e),ge=r(e,"H5",{class:!0});var au=l(ge);_t=r(au,"A",{id:!0,class:!0,href:!0});var K0=l(_t);$n=r(K0,"SPAN",{});var e4=l($n);u(es.$$.fragment,e4),e4.forEach(t),K0.forEach(t),q_=f(au),xn=r(au,"SPAN",{});var t4=l(xn);R_=o(t4,"fp16 Inference"),t4.forEach(t),au.forEach(t),Tf=f(e),pl=r(e,"P",{});var a4=l(pl);W_=o(a4,"While normally inference is done with fp16/amp as with training, it\u2019s also possible to use the full fp16 mode without using mixed precision. This is especially a good fit if the pretrained model weights are already in fp16. So a lot less memory is used: 2 bytes per parameter vs 6 bytes with mixed precision!"),a4.forEach(t),If=f(e),hl=r(e,"P",{});var s4=l(hl);X_=o(s4,"How good the results this will deliver will depend on the model. If it can handle fp16 without overflows and accuracy issues, then it\u2019ll definitely better to use the full fp16 mode."),s4.forEach(t),Nf=f(e),fl=r(e,"P",{});var r4=l(fl);Y_=o(r4,"For example, LayerNorm has to be done in fp32 and recent pytorch (1.10+) has been fixed to do that regardless of the input types, but earlier pytorch versions accumulate in the input type which can be an issue."),r4.forEach(t),Sf=f(e),bt=r(e,"P",{});var su=l(bt);Q_=o(su,"In \u{1F917} Transformers the full fp16 inference is enabled by passing "),jn=r(su,"CODE",{});var l4=l(jn);Z_=o(l4,"--fp16_full_eval"),l4.forEach(t),J_=o(su," to the \u{1F917} Trainer."),su.forEach(t),Lf=f(e),Ee=r(e,"H4",{class:!0});var ru=l(Ee);yt=r(ru,"A",{id:!0,class:!0,href:!0});var i4=l(yt);An=r(i4,"SPAN",{});var o4=l(An);u(ts.$$.fragment,o4),o4.forEach(t),i4.forEach(t),K_=f(ru),Dn=r(ru,"SPAN",{});var n4=l(Dn);eb=o(n4,"bf16"),n4.forEach(t),ru.forEach(t),Cf=f(e),Z=r(e,"P",{});var ui=l(Z);tb=o(ui,"If you own Ampere or newer hardware you can start using bf16 for your training and evaluation. While bf16 has a worse precision than fp16, it has a much much bigger dynamic range. Therefore, if in the past you were experiencing overflow issues while training the model, bf16 will prevent this from happening most of the time. Remember that in fp16 the biggest number you can have is "),Tn=r(ui,"CODE",{});var p4=l(Tn);ab=o(p4,"65535"),p4.forEach(t),sb=o(ui," and any number above that will overflow. A bf16 number can be as large as "),In=r(ui,"CODE",{});var h4=l(In);rb=o(h4,"3.39e+38"),h4.forEach(t),lb=o(ui," (!) which is about the same as fp32 - because both have 8-bits used for the numerical range."),ui.forEach(t),Uf=f(e),cl=r(e,"P",{});var f4=l(cl);ib=o(f4,"Automatic Mixed Precision (AMP) is the same as with fp16, except it\u2019ll use bf16."),f4.forEach(t),Gf=f(e),dl=r(e,"P",{});var c4=l(dl);ob=o(c4,"Thanks to the fp32-like dynamic range with bf16 mixed precision loss scaling is no longer needed."),c4.forEach(t),Of=f(e),ul=r(e,"P",{});var d4=l(ul);nb=o(d4,"If you have tried to finetune models pre-trained under bf16 mixed precision (e.g. T5) it\u2019s very likely that you have encountered overflow issues. Now you should be able to finetune those models without any issues."),d4.forEach(t),Mf=f(e),ml=r(e,"P",{});var u4=l(ml);pb=o(u4,"That said, also be aware that if you pre-trained a model in bf16, it\u2019s likely to have overflow issues if someone tries to finetune it in fp16 down the road. So once started on the bf16-mode path it\u2019s best to remain on it and not switch to fp16."),u4.forEach(t),Vf=f(e),gt=r(e,"P",{});var lu=l(gt);hb=o(lu,"In \u{1F917} Transformers bf16 mixed precision is enabled by passing "),Nn=r(lu,"CODE",{});var m4=l(Nn);fb=o(m4,"--bf16"),m4.forEach(t),cb=o(lu," to the \u{1F917} Trainer."),lu.forEach(t),zf=f(e),vl=r(e,"P",{});var v4=l(vl);db=o(v4,"If you use your own trainer, this is just:"),v4.forEach(t),Hf=f(e),u(as.$$.fragment,e),Bf=f(e),ss=r(e,"P",{});var e3=l(ss);ub=o(e3,"If you need to switch a tensor to bf16, it\u2019s just: "),Sn=r(e3,"CODE",{});var w4=l(Sn);mb=o(w4,"t.to(dtype=torch.bfloat16)"),w4.forEach(t),e3.forEach(t),Ff=f(e),wl=r(e,"P",{});var _4=l(wl);vb=o(_4,"Here is how you can check if your setup supports bf16:"),_4.forEach(t),qf=f(e),u(rs.$$.fragment,e),Rf=f(e),_l=r(e,"P",{});var b4=l(_l);wb=o(b4,"On the other hand bf16 has a much worse precision than fp16, so there are certain situations where you\u2019d still want to use fp16 and not bf16."),b4.forEach(t),Wf=f(e),Pe=r(e,"H5",{class:!0});var iu=l(Pe);Et=r(iu,"A",{id:!0,class:!0,href:!0});var y4=l(Et);Ln=r(y4,"SPAN",{});var g4=l(Ln);u(ls.$$.fragment,g4),g4.forEach(t),y4.forEach(t),_b=f(iu),Cn=r(iu,"SPAN",{});var E4=l(Cn);bb=o(E4,"bf16 Inference"),E4.forEach(t),iu.forEach(t),Xf=f(e),Pt=r(e,"P",{});var ou=l(Pt);yb=o(ou,"Same as with fp16, you can do inference in either the mixed precision bf16 or using the full bf16 mode. The same caveats apply. For details see "),bl=r(ou,"A",{href:!0});var P4=l(bl);gb=o(P4,"fp16 Inference"),P4.forEach(t),Eb=o(ou,"."),ou.forEach(t),Yf=f(e),kt=r(e,"P",{});var nu=l(kt);Pb=o(nu,"In \u{1F917} Transformers the full bf16 inference is enabled by passing "),Un=r(nu,"CODE",{});var k4=l(Un);kb=o(k4,"--bf16_full_eval"),k4.forEach(t),$b=o(nu," to the \u{1F917} Trainer."),nu.forEach(t),Qf=f(e),ke=r(e,"H4",{class:!0});var pu=l(ke);$t=r(pu,"A",{id:!0,class:!0,href:!0});var $4=l($t);Gn=r($4,"SPAN",{});var x4=l(Gn);u(is.$$.fragment,x4),x4.forEach(t),$4.forEach(t),xb=f(pu),On=r(pu,"SPAN",{});var j4=l(On);jb=o(j4,"tf32"),j4.forEach(t),pu.forEach(t),Zf=f(e),yl=r(e,"P",{});var A4=l(yl);Ab=o(A4,"The Ampere hardware uses a magical data type called tf32. It has the same numerical range as fp32 (8-bits), but instead of 23 bits precision it has only 10 bits (same as fp16). In total it uses only 19 bits."),A4.forEach(t),Jf=f(e),gl=r(e,"P",{});var D4=l(gl);Db=o(D4,"It\u2019s magical in the sense that you can use the normal fp32 training and/or inference code and by enabling tf32 support you can get up to 3x throughput improvement. All you need to do is to add this to your code:"),D4.forEach(t),Kf=f(e),u(os.$$.fragment,e),ec=f(e),El=r(e,"P",{});var T4=l(El);Tb=o(T4,"When this is done CUDA will automatically switch to using tf32 instead of fp32 where it\u2019s possible. This, of course, assumes that the used GPU is from the Ampere series."),T4.forEach(t),tc=f(e),xt=r(e,"P",{});var hu=l(xt);Ib=o(hu,"Like all cases with reduced precision this may or may not be satisfactory for your needs, so you have to experiment and see. According to "),ns=r(hu,"A",{href:!0,rel:!0});var I4=l(ns);Nb=o(I4,"NVIDIA research"),I4.forEach(t),Sb=o(hu," the majority of machine learning training shouldn\u2019t be impacted and showed the same perplexity and convergence as the fp32 training."),hu.forEach(t),ac=f(e),Pl=r(e,"P",{});var N4=l(Pl);Lb=o(N4,"If you\u2019re already using fp16 or bf16 mixed precision it may help with the throughput as well."),N4.forEach(t),sc=f(e),I=r(e,"P",{});var ea=l(I);Cb=o(ea,"You can enable this mode in the \u{1F917} Trainer with "),Mn=r(ea,"CODE",{});var S4=l(Mn);Ub=o(S4,"--tf32"),S4.forEach(t),Gb=o(ea,", or disable it with "),Vn=r(ea,"CODE",{});var L4=l(Vn);Ob=o(L4,"--tf32 0"),L4.forEach(t),Mb=o(ea," or "),zn=r(ea,"CODE",{});var C4=l(zn);Vb=o(C4,"--no_tf32"),C4.forEach(t),zb=o(ea,`.
By default the PyTorch default is used.`),ea.forEach(t),rc=f(e),J=r(e,"P",{});var mi=l(J);Hb=o(mi,"Note: tf32 mode is internal to CUDA and can\u2019t be accessed directly via "),Hn=r(mi,"CODE",{});var U4=l(Hn);Bb=o(U4,"tensor.to(dtype=torch.tf32)"),U4.forEach(t),Fb=o(mi," as "),Bn=r(mi,"CODE",{});var G4=l(Bn);qb=o(G4,"torch.tf32"),G4.forEach(t),Rb=o(mi," doesn\u2019t exit."),mi.forEach(t),lc=f(e),jt=r(e,"P",{});var fu=l(jt);Wb=o(fu,"Note: you need "),Fn=r(fu,"CODE",{});var O4=l(Fn);Xb=o(O4,"torch>=1.7"),O4.forEach(t),Yb=o(fu," to enjoy this feature."),fu.forEach(t),ic=f(e),$e=r(e,"H3",{class:!0});var cu=l($e);At=r(cu,"A",{id:!0,class:!0,href:!0});var M4=l(At);qn=r(M4,"SPAN",{});var V4=l(qn);u(ps.$$.fragment,V4),V4.forEach(t),M4.forEach(t),Qb=f(cu),Rn=r(cu,"SPAN",{});var z4=l(Rn);Zb=o(z4,"Gradient Checkpointing"),z4.forEach(t),cu.forEach(t),oc=f(e),kl=r(e,"P",{});var H4=l(kl);Jb=o(H4,"One way to use significantly less GPU memory is to enabled \u201CGradient Checkpointing\u201D (also known as \u201Cactivation checkpointing\u201D). When enabled, a lot of memory can be freed at the cost of small decrease in the training speed due to recomputing parts of the graph during back-propagation."),H4.forEach(t),nc=f(e),N=r(e,"P",{});var ta=l(N);Kb=o(ta,"This technique was first shared in the paper: "),hs=r(ta,"A",{href:!0,rel:!0});var B4=l(hs);ey=o(B4,"Training Deep Nets with Sublinear Memory Cost"),B4.forEach(t),ty=o(ta,". The paper will also give you the exact details on the savings, but it\u2019s in the ballpark of "),Wn=r(ta,"CODE",{});var F4=l(Wn);ay=o(F4,"O(sqrt(n))"),F4.forEach(t),sy=o(ta,", where "),Xn=r(ta,"CODE",{});var q4=l(Xn);ry=o(q4,"n"),q4.forEach(t),ly=o(ta," is the number of feed-forward layers."),ta.forEach(t),pc=f(e),$l=r(e,"P",{});var R4=l($l);iy=o(R4,"To activate this feature in \u{1F917} Transformers for models that support it, use:"),R4.forEach(t),hc=f(e),u(fs.$$.fragment,e),fc=f(e),Dt=r(e,"P",{});var du=l(Dt);oy=o(du,"or add "),Yn=r(du,"CODE",{});var W4=l(Yn);ny=o(W4,"--gradient_checkpointing"),W4.forEach(t),py=o(du," to the Trainer arguments."),du.forEach(t),cc=f(e),xe=r(e,"H3",{class:!0});var uu=l(xe);Tt=r(uu,"A",{id:!0,class:!0,href:!0});var X4=l(Tt);Qn=r(X4,"SPAN",{});var Y4=l(Qn);u(cs.$$.fragment,Y4),Y4.forEach(t),X4.forEach(t),hy=f(uu),Zn=r(uu,"SPAN",{});var Q4=l(Zn);fy=o(Q4,"Batch sizes"),Q4.forEach(t),uu.forEach(t),dc=f(e),xl=r(e,"P",{});var Z4=l(xl);cy=o(Z4,"One gets the most efficient performance when batch sizes and input/output neuron counts are divisible by a certain number, which typically starts at 8, but can be much higher as well. That number varies a lot depending on the specific hardware being used and the dtype of the model."),Z4.forEach(t),uc=f(e),K=r(e,"P",{});var vi=l(K);dy=o(vi,"For example for fully connected layers (which correspond to GEMMs), NVIDIA provides recommendations for "),ds=r(vi,"A",{href:!0,rel:!0});var J4=l(ds);uy=o(J4,"input/output neuron counts"),J4.forEach(t),my=o(vi," and "),us=r(vi,"A",{href:!0,rel:!0});var K4=l(us);vy=o(K4,"batch size"),K4.forEach(t),wy=o(vi,"."),vi.forEach(t),mc=f(e),ms=r(e,"P",{});var t3=l(ms);vs=r(t3,"A",{href:!0,rel:!0});var e5=l(vs);_y=o(e5,"Tensor Core Requirements"),e5.forEach(t),by=o(t3," define the multiplier based on the dtype and the hardware. For example, for fp16 a multiple of 8 is recommended, but on A100 it\u2019s 64!"),t3.forEach(t),vc=f(e),It=r(e,"P",{});var mu=l(It);yy=o(mu,"For parameters that are small, there is also "),ws=r(mu,"A",{href:!0,rel:!0});var t5=l(ws);gy=o(t5,"Dimension Quantization Effects"),t5.forEach(t),Ey=o(mu," to consider, this is where tiling happens and the right multiplier can have a significant speedup."),mu.forEach(t),wc=f(e),je=r(e,"H3",{class:!0});var vu=l(je);Nt=r(vu,"A",{id:!0,class:!0,href:!0});var a5=l(Nt);Jn=r(a5,"SPAN",{});var s5=l(Jn);u(_s.$$.fragment,s5),s5.forEach(t),a5.forEach(t),Py=f(vu),Kn=r(vu,"SPAN",{});var r5=l(Kn);ky=o(r5,"DP vs DDP"),r5.forEach(t),vu.forEach(t),_c=f(e),Ae=r(e,"P",{});var Vp=l(Ae);ep=r(Vp,"CODE",{});var l5=l(ep);$y=o(l5,"DistributedDataParallel"),l5.forEach(t),xy=o(Vp," (DDP) is typically faster than "),tp=r(Vp,"CODE",{});var i5=l(tp);jy=o(i5,"DataParallel"),i5.forEach(t),Ay=o(Vp," (DP), but it is not always the case:"),Vp.forEach(t),bc=f(e),St=r(e,"UL",{});var wu=l(St);ap=r(wu,"LI",{});var o5=l(ap);Dy=o(o5,"while DP is python threads-based, DDP is multiprocess-based - and as such it has no python threads limitations, such as GIL"),o5.forEach(t),Ty=f(wu),sp=r(wu,"LI",{});var n5=l(sp);Iy=o(n5,"on the other hand a slow inter-connectivity between the GPU cards could lead to an actual slower outcome with DDP"),n5.forEach(t),wu.forEach(t),yc=f(e),jl=r(e,"P",{});var p5=l(jl);Ny=o(p5,"Here are the main differences in the inter-GPU communication overhead between the two modes:"),p5.forEach(t),gc=f(e),bs=r(e,"P",{});var a3=l(bs);ys=r(a3,"A",{href:!0,rel:!0});var h5=l(ys);Sy=o(h5,"DDP"),h5.forEach(t),Ly=o(a3,":"),a3.forEach(t),Ec=f(e),Lt=r(e,"UL",{});var _u=l(Lt);rp=r(_u,"LI",{});var f5=l(rp);Cy=o(f5,"At the start time the main process replicates the model once from gpu 0 to the rest of gpus"),f5.forEach(t),Uy=f(_u),Al=r(_u,"LI",{});var s3=l(Al);Gy=o(s3,"Then for each batch:"),gs=r(s3,"OL",{});var bu=l(gs);lp=r(bu,"LI",{});var c5=l(lp);Oy=o(c5,"each gpu consumes each own mini-batch of data directly"),c5.forEach(t),My=f(bu),Es=r(bu,"LI",{});var yu=l(Es);Vy=o(yu,"during "),ip=r(yu,"CODE",{});var d5=l(ip);zy=o(d5,"backward"),d5.forEach(t),Hy=o(yu,", once the local gradients are ready, they are then averaged across all processes"),yu.forEach(t),bu.forEach(t),s3.forEach(t),_u.forEach(t),Pc=f(e),Ps=r(e,"P",{});var r3=l(Ps);ks=r(r3,"A",{href:!0,rel:!0});var u5=l(ks);By=o(u5,"DP"),u5.forEach(t),Fy=o(r3,":"),r3.forEach(t),kc=f(e),Dl=r(e,"P",{});var m5=l(Dl);qy=o(m5,"For each batch:"),m5.forEach(t),$c=f(e),x=r(e,"OL",{});var te=l(x);op=r(te,"LI",{});var v5=l(op);Ry=o(v5,"gpu 0 reads the batch of data and then sends a mini-batch to each gpu"),v5.forEach(t),Wy=f(te),np=r(te,"LI",{});var w5=l(np);Xy=o(w5,"replicates the up-to-date model from gpu 0 to each gpu"),w5.forEach(t),Yy=f(te),$s=r(te,"LI",{});var gu=l($s);Qy=o(gu,"runs "),pp=r(gu,"CODE",{});var _5=l(pp);Zy=o(_5,"forward"),_5.forEach(t),Jy=o(gu," and sends output from each gpu to gpu 0, computes loss"),gu.forEach(t),Ky=f(te),Tl=r(te,"LI",{});var l3=l(Tl);e2=o(l3,"scatters loss from gpu 0 to all gpus, runs "),hp=r(l3,"CODE",{});var b5=l(hp);t2=o(b5,"backward"),b5.forEach(t),l3.forEach(t),a2=f(te),fp=r(te,"LI",{});var y5=l(fp);s2=o(y5,"sends gradients from each gpu to gpu 0 and averages those"),y5.forEach(t),te.forEach(t),xc=f(e),Il=r(e,"P",{});var g5=l(Il);r2=o(g5,"The only communication DDP performs per batch is sending gradients, whereas DP does 5 different data exchanges per batch."),g5.forEach(t),jc=f(e),Ct=r(e,"P",{});var Eu=l(Ct);l2=o(Eu,"DP copies data within the process via python threads, whereas DDP copies data via "),xs=r(Eu,"A",{href:!0,rel:!0});var E5=l(xs);i2=o(E5,"torch.distributed"),E5.forEach(t),o2=o(Eu,"."),Eu.forEach(t),Ac=f(e),Nl=r(e,"P",{});var P5=l(Nl);n2=o(P5,"Under DP gpu 0 performs a lot more work than the rest of the gpus, thus resulting in under-utilization of gpus."),P5.forEach(t),Dc=f(e),Sl=r(e,"P",{});var k5=l(Sl);p2=o(k5,"You can use DDP across multiple machines, but this is not the case with DP."),k5.forEach(t),Tc=f(e),Ll=r(e,"P",{});var $5=l(Ll);h2=o($5,"There are other differences between DP and DDP but they aren\u2019t relevant to this discussion."),$5.forEach(t),Ic=f(e),Ut=r(e,"P",{});var Pu=l(Ut);f2=o(Pu,"If you want to go really deep into understanding these 2 modes, this "),js=r(Pu,"A",{href:!0,rel:!0});var x5=l(js);c2=o(x5,"article"),x5.forEach(t),d2=o(Pu," is highly recommended, as it has great diagrams, includes multiple benchmarks and profiler outputs on various hardware, explains all the nuances that you may need to know."),Pu.forEach(t),Nc=f(e),Cl=r(e,"P",{});var j5=l(Cl);u2=o(j5,"Let\u2019s look at an actual benchmark:"),j5.forEach(t),Sc=f(e),Gt=r(e,"TABLE",{});var ku=l(Gt);cp=r(ku,"THEAD",{});var A5=l(cp);De=r(A5,"TR",{});var wi=l(De);Ul=r(wi,"TH",{align:!0});var D5=l(Ul);m2=o(D5,"Type"),D5.forEach(t),v2=f(wi),dp=r(wi,"TH",{});var T5=l(dp);w2=o(T5,"NVlink"),T5.forEach(t),_2=f(wi),Gl=r(wi,"TH",{align:!0});var I5=l(Gl);b2=o(I5,"Time"),I5.forEach(t),wi.forEach(t),A5.forEach(t),y2=f(ku),Te=r(ku,"TBODY",{});var _i=l(Te);Ie=r(_i,"TR",{});var bi=l(Ie);Ol=r(bi,"TD",{align:!0});var N5=l(Ol);g2=o(N5,"2:DP"),N5.forEach(t),E2=f(bi),up=r(bi,"TD",{});var S5=l(up);P2=o(S5,"Y"),S5.forEach(t),k2=f(bi),Ml=r(bi,"TD",{align:!0});var L5=l(Ml);$2=o(L5,"110s"),L5.forEach(t),bi.forEach(t),x2=f(_i),Ne=r(_i,"TR",{});var yi=l(Ne);Vl=r(yi,"TD",{align:!0});var C5=l(Vl);j2=o(C5,"2:DDP"),C5.forEach(t),A2=f(yi),mp=r(yi,"TD",{});var U5=l(mp);D2=o(U5,"Y"),U5.forEach(t),T2=f(yi),zl=r(yi,"TD",{align:!0});var G5=l(zl);I2=o(G5,"101s"),G5.forEach(t),yi.forEach(t),N2=f(_i),Se=r(_i,"TR",{});var gi=l(Se);Hl=r(gi,"TD",{align:!0});var O5=l(Hl);S2=o(O5,"2:DDP"),O5.forEach(t),L2=f(gi),vp=r(gi,"TD",{});var M5=l(vp);C2=o(M5,"N"),M5.forEach(t),U2=f(gi),Bl=r(gi,"TD",{align:!0});var V5=l(Bl);G2=o(V5,"131s"),V5.forEach(t),gi.forEach(t),_i.forEach(t),ku.forEach(t),Lc=f(e),Fl=r(e,"P",{});var z5=l(Fl);O2=o(z5,"Analysis:"),z5.forEach(t),Cc=f(e),ql=r(e,"P",{});var H5=l(ql);M2=o(H5,"Here DP is ~10% slower than DDP w/ NVlink, but ~15% faster than DDP w/o NVlink"),H5.forEach(t),Uc=f(e),Rl=r(e,"P",{});var B5=l(Rl);V2=o(B5,"The real difference will depend on how much data each GPU needs to sync with the others - the more there is to sync, the more a slow link will slow down the total runtime."),B5.forEach(t),Gc=f(e),Wl=r(e,"P",{});var F5=l(Wl);z2=o(F5,"Here is the full benchmark code and outputs:"),F5.forEach(t),Oc=f(e),As=r(e,"P",{});var i3=l(As);wp=r(i3,"CODE",{});var q5=l(wp);H2=o(q5,"NCCL_P2P_DISABLE=1"),q5.forEach(t),B2=o(i3," was used to disable the NVLink feature on the corresponding benchmark."),i3.forEach(t),Mc=f(e),u(Ds.$$.fragment,e),Vc=f(e),$=r(e,"P",{});var B=l($);F2=o(B,"Hardware: 2x TITAN RTX 24GB each + NVlink with 2 NVLinks ("),_p=r(B,"CODE",{});var R5=l(_p);q2=o(R5,"NV2"),R5.forEach(t),R2=o(B," in "),bp=r(B,"CODE",{});var W5=l(bp);W2=o(W5,"nvidia-smi topo -m"),W5.forEach(t),X2=o(B,`)
Software: `),yp=r(B,"CODE",{});var X5=l(yp);Y2=o(X5,"pytorch-1.8-to-be"),X5.forEach(t),Q2=o(B," + "),gp=r(B,"CODE",{});var Y5=l(gp);Z2=o(Y5,"cuda-11.0"),Y5.forEach(t),J2=o(B," / "),Ep=r(B,"CODE",{});var Q5=l(Ep);K2=o(Q5,"transformers==4.3.0.dev0"),Q5.forEach(t),B.forEach(t),zc=f(e),Le=r(e,"H3",{class:!0});var $u=l(Le);Ot=r($u,"A",{id:!0,class:!0,href:!0});var Z5=l(Ot);Pp=r(Z5,"SPAN",{});var J5=l(Pp);u(Ts.$$.fragment,J5),J5.forEach(t),Z5.forEach(t),eg=f($u),kp=r($u,"SPAN",{});var K5=l(kp);tg=o(K5,"DataLoader"),K5.forEach(t),$u.forEach(t),Hc=f(e),Xl=r(e,"P",{});var eP=l(Xl);ag=o(eP,"One of the important requirements to reach great training speed is the ability to feed the GPU at the maximum speed it can handle. By default everything happens in the main process and it might not be able to read the data from disk fast enough, and thus create a bottleneck, leading to GPU under-utilization."),eP.forEach(t),Bc=f(e),Mt=r(e,"UL",{});var xu=l(Mt);Yl=r(xu,"LI",{});var o3=l(Yl);$p=r(o3,"CODE",{});var tP=l($p);sg=o(tP,"DataLoader(pin_memory=True, ...)"),tP.forEach(t),rg=o(o3," which ensures that the data gets preloaded into the pinned memory on CPU and typically leads to much faster transfers from CPU to GPU memory."),o3.forEach(t),lg=f(xu),Ql=r(xu,"LI",{});var n3=l(Ql);xp=r(n3,"CODE",{});var aP=l(xp);ig=o(aP,"DataLoader(num_workers=4, ...)"),aP.forEach(t),og=o(n3," - spawn several workers to pre-load data faster - during training watch the GPU utilization stats and if it\u2019s far from 100% experiment with raising the number of workers. Of course, the problem could be elsewhere so a very big number of workers won\u2019t necessarily lead to a better performance."),n3.forEach(t),xu.forEach(t),Fc=f(e),Ce=r(e,"H3",{class:!0});var ju=l(Ce);Vt=r(ju,"A",{id:!0,class:!0,href:!0});var sP=l(Vt);jp=r(sP,"SPAN",{});var rP=l(jp);u(Is.$$.fragment,rP),rP.forEach(t),sP.forEach(t),ng=f(ju),Ap=r(ju,"SPAN",{});var lP=l(Ap);pg=o(lP,"Faster optimizer"),lP.forEach(t),ju.forEach(t),qc=f(e),Ue=r(e,"P",{});var zp=l(Ue);hg=o(zp,"pytorch-nightly introduced "),Dp=r(zp,"CODE",{});var iP=l(Dp);fg=o(iP,"torch.optim._multi_tensor"),iP.forEach(t),cg=o(zp," which should significantly speed up the optimizers for situations with lots of small feature tensors. It should eventually become the default, but if you want to experiment with it sooner and don\u2019t mind using the bleed-edge, see: "),Ns=r(zp,"A",{href:!0,rel:!0});var oP=l(Ns);dg=o(oP,"https://github.com/huggingface/transformers/issues/9965"),oP.forEach(t),zp.forEach(t),Rc=f(e),Ge=r(e,"H3",{class:!0});var Au=l(Ge);zt=r(Au,"A",{id:!0,class:!0,href:!0});var nP=l(zt);Tp=r(nP,"SPAN",{});var pP=l(Tp);u(Ss.$$.fragment,pP),pP.forEach(t),nP.forEach(t),ug=f(Au),Ip=r(Au,"SPAN",{});var hP=l(Ip);mg=o(hP,"Sparsity"),hP.forEach(t),Au.forEach(t),Wc=f(e),Oe=r(e,"H4",{class:!0});var Du=l(Oe);Ht=r(Du,"A",{id:!0,class:!0,href:!0});var fP=l(Ht);Np=r(fP,"SPAN",{});var cP=l(Np);u(Ls.$$.fragment,cP),cP.forEach(t),fP.forEach(t),vg=f(Du),Sp=r(Du,"SPAN",{});var dP=l(Sp);wg=o(dP,"Mixture of Experts"),dP.forEach(t),Du.forEach(t),Xc=f(e),Zl=r(e,"P",{});var uP=l(Zl);_g=o(uP,`Quite a few of the recent papers reported a 4-5x training speedup and a faster inference by integrating
Mixture of Experts (MoE) into the Transformer models.`),uP.forEach(t),Yc=f(e),Jl=r(e,"P",{});var mP=l(Jl);bg=o(mP,"Since it has been discovered that more parameters lead to better performance, this technique allows to increase the number of parameters by an order of magnitude without increasing training costs."),mP.forEach(t),Qc=f(e),Kl=r(e,"P",{});var vP=l(Kl);yg=o(vP,"In this approach every other FFN layer is replaced with a MoE Layer which consists of many experts, with a gated function that trains each expert in a balanced way depending on the input token\u2019s position in a sequence."),vP.forEach(t),Zc=f(e),ei=r(e,"P",{});var wP=l(ei);ti=r(wP,"IMG",{src:!0,alt:!0}),wP.forEach(t),Jc=f(e),Bt=r(e,"P",{});var Tu=l(Bt);gg=o(Tu,"(source: "),Cs=r(Tu,"A",{href:!0,rel:!0});var _P=l(Cs);Eg=o(_P,"GLAM"),_P.forEach(t),Pg=o(Tu,")"),Tu.forEach(t),Kc=f(e),ai=r(e,"P",{});var bP=l(ai);kg=o(bP,"You can find exhaustive details and comparison tables in the papers listed at the end of this section."),bP.forEach(t),ed=f(e),si=r(e,"P",{});var yP=l(si);$g=o(yP,"The main drawback of this approach is that it requires staggering amounts of GPU memory - almost an order of magnitude larger than its dense equivalent. Various distillation and approaches are proposed to how to overcome the much higher memory requirements."),yP.forEach(t),td=f(e),ri=r(e,"P",{});var gP=l(ri);xg=o(gP,"There is direct trade-off though, you can use just a few experts with a 2-3x smaller base model instead of dozens or hundreds experts leading to a 5x smaller model and thus increase the training speed moderately while increasing the memory requirements moderately as well."),gP.forEach(t),ad=f(e),li=r(e,"P",{});var EP=l(li);jg=o(EP,"Most related papers and implementations are built around Tensorflow/TPUs:"),EP.forEach(t),sd=f(e),ee=r(e,"UL",{});var Ei=l(ee);Lp=r(Ei,"LI",{});var PP=l(Lp);Us=r(PP,"A",{href:!0,rel:!0});var kP=l(Us);Ag=o(kP,"GShard: Scaling Giant Models with Conditional Computation and Automatic Sharding"),kP.forEach(t),PP.forEach(t),Dg=f(Ei),Cp=r(Ei,"LI",{});var $P=l(Cp);Gs=r($P,"A",{href:!0,rel:!0});var xP=l(Gs);Tg=o(xP,"Switch Transformers: Scaling to Trillion Parameter Models with Simple and Efficient Sparsity"),xP.forEach(t),$P.forEach(t),Ig=f(Ei),Up=r(Ei,"LI",{});var jP=l(Up);Os=r(jP,"A",{href:!0,rel:!0});var AP=l(Os);Ng=o(AP,"GLaM: Generalist Language Model (GLaM)"),AP.forEach(t),jP.forEach(t),Ei.forEach(t),rd=f(e),P=r(e,"P",{});var L=l(P);Sg=o(L,"And for Pytorch DeepSpeed has built one as well: "),Ms=r(L,"A",{href:!0,rel:!0});var DP=l(Ms);Lg=o(DP,"Mixture of Experts"),DP.forEach(t),Cg=o(L," - blog posts:  "),Vs=r(L,"A",{href:!0,rel:!0});var TP=l(Vs);Ug=o(TP,"1"),TP.forEach(t),Gg=o(L,", "),zs=r(L,"A",{href:!0,rel:!0});var IP=l(zs);Og=o(IP,"2"),IP.forEach(t),Mg=o(L," and specific deployment with large transformer-based natural language generation models: "),Hs=r(L,"A",{href:!0,rel:!0});var NP=l(Hs);Vg=o(NP,"blog post"),NP.forEach(t),zg=o(L,", "),ii=r(L,"A",{href:!0});var SP=l(ii);Hg=o(SP,"Megatron-Deepspeed branch"),SP.forEach(t),Bg=o(L,"."),L.forEach(t),ld=f(e),Me=r(e,"H2",{class:!0});var Iu=l(Me);Ft=r(Iu,"A",{id:!0,class:!0,href:!0});var LP=l(Ft);Gp=r(LP,"SPAN",{});var CP=l(Gp);u(Bs.$$.fragment,CP),CP.forEach(t),LP.forEach(t),Fg=f(Iu),Op=r(Iu,"SPAN",{});var UP=l(Op);qg=o(UP,"Contribute"),UP.forEach(t),Iu.forEach(t),id=f(e),oi=r(e,"P",{});var GP=l(oi);Rg=o(GP,"This document is far from being complete and a lot more needs to be added, so if you have additions or corrections to make please don\u2019t hesitate to open a PR or if you aren\u2019t sure start an Issue and we can discuss the details there."),GP.forEach(t),od=f(e),ni=r(e,"P",{});var OP=l(ni);Wg=o(OP,"When making contributions that A is better than B, please try to include a reproducible benchmark and/or a link to the source of that information (unless it comes directly from you)."),OP.forEach(t),this.h()},h(){c(q,"name","hf:doc:metadata"),c(q,"content",JSON.stringify(RP)),c(C,"id","performance-and-scalability-how-to-fit-a-bigger-model-and-train-it-faster"),c(C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C,"href","#performance-and-scalability-how-to-fit-a-bigger-model-and-train-it-faster"),c(j,"class","relative group"),c(Ve,"id","quick-notes"),c(Ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ve,"href","#quick-notes"),c(ae,"class","relative group"),c(ze,"id","faster-training"),c(ze,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ze,"href","#faster-training"),c(se,"class","relative group"),c(Be,"id","bigger-models"),c(Be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Be,"href","#bigger-models"),c(re,"class","relative group"),c(Fe,"id","hardware"),c(Fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fe,"href","#hardware"),c(le,"class","relative group"),c(qe,"id","multigpu-connectivity"),c(qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qe,"href","#multigpu-connectivity"),c(ie,"class","relative group"),c(Re,"id","nvlink"),c(Re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Re,"href","#nvlink"),c(oe,"class","relative group"),c(ma,"href","https://en.wikipedia.org/wiki/NVLink"),c(ma,"rel","nofollow"),c(va,"href","https://www.nvidia.com/content/dam/en-zz/Solutions/geforce/ampere/pdf/NVIDIA-ampere-GA102-GPU-Architecture-Whitepaper-V1.pdf"),c(va,"rel","nofollow"),c(hr,"align","right"),c(fr,"align","right"),c(cr,"align","right"),c(Qe,"id","software"),c(Qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qe,"href","#software"),c(ne,"class","relative group"),c(Ze,"id","anatomy-of-models-operations"),c(Ze,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ze,"href","#anatomy-of-models-operations"),c(pe,"class","relative group"),c(Ia,"href","https://arxiv.org/abs/2007.00072"),c(Ia,"rel","nofollow"),c(Je,"id","anatomy-of-models-memory"),c(Je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Je,"href","#anatomy-of-models-memory"),c(he,"class","relative group"),c(Ke,"id","model-weights"),c(Ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ke,"href","#model-weights"),c(fe,"class","relative group"),c(tt,"id","optimizer-states"),c(tt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tt,"href","#optimizer-states"),c(ce,"class","relative group"),c(Ca,"href","https://github.com/facebookresearch/bitsandbytes"),c(Ca,"rel","nofollow"),c(at,"id","gradients"),c(at,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(at,"href","#gradients"),c(de,"class","relative group"),c(st,"id","forward-activations"),c(st,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(st,"href","#forward-activations"),c(ue,"class","relative group"),c(rt,"id","temporary-memory"),c(rt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rt,"href","#temporary-memory"),c(me,"class","relative group"),c(lt,"id","functionalityspecific-memory"),c(lt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lt,"href","#functionalityspecific-memory"),c(ve,"class","relative group"),c(it,"id","forward-vs-backward-execution-speed"),c(it,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(it,"href","#forward-vs-backward-execution-speed"),c(we,"class","relative group"),c(nt,"id","floating-data-types"),c(nt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nt,"href","#floating-data-types"),c(_e,"class","relative group"),MP(Ir.src,p3="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/tf32-bf16-fp16-fp32.png")||c(Ir,"src",p3),c(Ir,"alt","data types"),c(qa,"href","https://developer.nvidia.com/blog/accelerating-ai-training-with-tf32-tensor-cores/"),c(qa,"rel","nofollow"),c(ht,"id","fp16"),c(ht,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ht,"href","#fp16"),c(be,"class","relative group"),c(Gr,"align","right"),c(Or,"align","right"),c(Mr,"align","right"),c(Vr,"align","right"),c(zr,"align","right"),c(Hr,"align","right"),c(Br,"align","right"),c(Fr,"align","right"),c(qr,"align","right"),c(Rr,"align","right"),c(Wr,"align","right"),c(Xr,"align","right"),c(Yr,"align","right"),c(Qr,"align","right"),c(Zr,"align","right"),c(Jr,"align","right"),c(Kr,"align","right"),c(el,"align","right"),c(tl,"align","right"),c(al,"align","right"),c(Ya,"href","https://github.com/bigscience-workshop/Megatron-DeepSpeed"),c(Ya,"rel","nofollow"),c(Qa,"href","https://docs.fast.ai/callback.fp16.html#A-little-bit-of-theory"),c(Qa,"rel","nofollow"),c(Za,"href","https://spell.ml/blog/mixed-precision-training-with-pytorch-Xuk7YBEAACAASJam"),c(Za,"rel","nofollow"),c(wt,"id","fp16-caching"),c(wt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wt,"href","#fp16-caching"),c(ye,"class","relative group"),c(Ka,"href","https://discuss.pytorch.org/t/autocast-and-torch-no-grad-unexpected-behaviour/93475/3"),c(Ka,"rel","nofollow"),c(_t,"id","fp16-inference"),c(_t,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_t,"href","#fp16-inference"),c(ge,"class","relative group"),c(yt,"id","bf16"),c(yt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yt,"href","#bf16"),c(Ee,"class","relative group"),c(Et,"id","bf16-inference"),c(Et,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Et,"href","#bf16-inference"),c(Pe,"class","relative group"),c(bl,"href","#fp16-inference"),c($t,"id","tf32"),c($t,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($t,"href","#tf32"),c(ke,"class","relative group"),c(ns,"href","https://developer.nvidia.com/blog/accelerating-ai-training-with-tf32-tensor-cores/"),c(ns,"rel","nofollow"),c(At,"id","gradient-checkpointing"),c(At,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(At,"href","#gradient-checkpointing"),c($e,"class","relative group"),c(hs,"href","https://arxiv.org/abs/1604.06174"),c(hs,"rel","nofollow"),c(Tt,"id","batch-sizes"),c(Tt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tt,"href","#batch-sizes"),c(xe,"class","relative group"),c(ds,"href","https://docs.nvidia.com/deeplearning/performance/dl-performance-fully-connected/index.html#input-features"),c(ds,"rel","nofollow"),c(us,"href","https://docs.nvidia.com/deeplearning/performance/dl-performance-fully-connected/index.html#batch-size"),c(us,"rel","nofollow"),c(vs,"href","https://docs.nvidia.com/deeplearning/performance/dl-performance-matrix-multiplication/index.html#requirements-tc"),c(vs,"rel","nofollow"),c(ws,"href","https://docs.nvidia.com/deeplearning/performance/dl-performance-matrix-multiplication/index.html#dim-quantization"),c(ws,"rel","nofollow"),c(Nt,"id","dp-vs-ddp"),c(Nt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nt,"href","#dp-vs-ddp"),c(je,"class","relative group"),c(ys,"href","https://pytorch.org/docs/master/notes/ddp.html"),c(ys,"rel","nofollow"),c(ks,"href","https://pytorch.org/docs/master/generated/torch.nn.DataParallel.html"),c(ks,"rel","nofollow"),c(xs,"href","https://pytorch.org/docs/master/distributed.html"),c(xs,"rel","nofollow"),c(js,"href","https://www.telesens.co/2019/04/04/distributed-data-parallel-training-using-pytorch-on-aws/"),c(js,"rel","nofollow"),c(Ul,"align","left"),c(Gl,"align","right"),c(Ol,"align","left"),c(Ml,"align","right"),c(Vl,"align","left"),c(zl,"align","right"),c(Hl,"align","left"),c(Bl,"align","right"),c(Ot,"id","dataloader"),c(Ot,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ot,"href","#dataloader"),c(Le,"class","relative group"),c(Vt,"id","faster-optimizer"),c(Vt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vt,"href","#faster-optimizer"),c(Ce,"class","relative group"),c(Ns,"href","https://github.com/huggingface/transformers/issues/9965"),c(Ns,"rel","nofollow"),c(zt,"id","sparsity"),c(zt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zt,"href","#sparsity"),c(Ge,"class","relative group"),c(Ht,"id","mixture-of-experts"),c(Ht,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ht,"href","#mixture-of-experts"),c(Oe,"class","relative group"),MP(ti.src,h3="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/perf-moe-transformer.png")||c(ti,"src",h3),c(ti,"alt","MoE Transformer 2x block"),c(Cs,"href","https://ai.googleblog.com/2021/12/more-efficient-in-context-learning-with.html"),c(Cs,"rel","nofollow"),c(Us,"href","https://arxiv.org/abs/2006.16668"),c(Us,"rel","nofollow"),c(Gs,"href","https://arxiv.org/abs/2101.03961"),c(Gs,"rel","nofollow"),c(Os,"href","https://ai.googleblog.com/2021/12/more-efficient-in-context-learning-with.html"),c(Os,"rel","nofollow"),c(Ms,"href","https://www.deepspeed.ai/tutorials/mixture-of-experts/"),c(Ms,"rel","nofollow"),c(Vs,"href","https://www.microsoft.com/en-us/research/blog/deepspeed-powers-8x-larger-moe-model-training-with-high-performance/"),c(Vs,"rel","nofollow"),c(zs,"href","https://www.microsoft.com/en-us/research/publication/scalable-and-efficient-moe-training-for-multitask-multilingual-models/"),c(zs,"rel","nofollow"),c(Hs,"href","https://www.deepspeed.ai/news/2021/12/09/deepspeed-moe-nlg.html"),c(Hs,"rel","nofollow"),c(ii,"href","Thttps://github.com/microsoft/Megatron-DeepSpeed/tree/moe-training"),c(Ft,"id","contribute"),c(Ft,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ft,"href","#contribute"),c(Me,"class","relative group")},m(e,n){a(document.head,q),p(e,Fs,n),p(e,j,n),a(j,C),a(C,Pi),m(aa,Pi,null),a(j,Su),a(j,ki),a(ki,Lu),p(e,Hp,n),p(e,qs,n),a(qs,Cu),p(e,Bp,n),p(e,ae,n),a(ae,Ve),a(Ve,$i),m(sa,$i,null),a(ae,Uu),a(ae,xi),a(xi,Gu),p(e,Fp,n),p(e,Rs,n),a(Rs,Ou),p(e,qp,n),p(e,se,n),a(se,ze),a(ze,ji),m(ra,ji,null),a(se,Mu),a(se,Ai),a(Ai,Vu),p(e,Rp,n),p(e,Ws,n),a(Ws,zu),p(e,Wp,n),p(e,Xs,n),a(Xs,Ys),a(Ys,Hu),a(Ys,la),a(la,Di),a(Di,Bu),a(la,Fu),a(la,Ti),a(Ti,qu),p(e,Xp,n),p(e,Qs,n),a(Qs,Ru),p(e,Yp,n),p(e,He,n),a(He,Ii),a(Ii,Wu),a(He,Xu),a(He,Ni),a(Ni,Yu),p(e,Qp,n),p(e,re,n),a(re,Be),a(Be,Si),m(ia,Si,null),a(re,Qu),a(re,Li),a(Li,Zu),p(e,Zp,n),p(e,Zs,n),a(Zs,Ju),p(e,Jp,n),p(e,R,n),a(R,Ci),a(Ci,Ku),a(R,em),a(R,Ui),a(Ui,tm),a(R,am),a(R,Gi),a(Gi,sm),p(e,Kp,n),p(e,Js,n),a(Js,rm),p(e,eh,n),p(e,y,n),a(y,Oi),a(Oi,lm),a(y,im),a(y,Mi),a(Mi,om),a(y,nm),a(y,Vi),a(Vi,pm),a(y,hm),a(y,zi),a(zi,fm),a(y,cm),a(y,Hi),a(Hi,dm),a(y,um),a(y,Bi),a(Bi,mm),a(y,vm),a(y,Fi),a(Fi,wm),a(y,_m),a(y,qi),a(qi,bm),a(y,ym),a(y,Ri),a(Ri,gm),a(y,Em),a(y,Wi),a(Wi,Pm),p(e,th,n),p(e,le,n),a(le,Fe),a(Fe,Xi),m(oa,Xi,null),a(le,km),a(le,Yi),a(Yi,$m),p(e,ah,n),p(e,ie,n),a(ie,qe),a(qe,Qi),m(na,Qi,null),a(ie,xm),a(ie,Zi),a(Zi,jm),p(e,sh,n),p(e,Ks,n),a(Ks,Am),p(e,rh,n),p(e,er,n),a(er,Dm),p(e,lh,n),m(pa,e,n),p(e,ih,n),p(e,tr,n),a(tr,Tm),p(e,oh,n),p(e,ar,n),a(ar,Im),p(e,nh,n),m(ha,e,n),p(e,ph,n),p(e,sr,n),a(sr,Nm),p(e,hh,n),m(fa,e,n),p(e,fh,n),p(e,rr,n),a(rr,Sm),p(e,ch,n),m(ca,e,n),p(e,dh,n),p(e,W,n),a(W,Lm),a(W,Ji),a(Ji,Cm),a(W,Um),a(W,Ki),a(Ki,Gm),a(W,Om),p(e,uh,n),p(e,lr,n),a(lr,Mm),p(e,mh,n),p(e,ir,n),a(ir,Vm),p(e,vh,n),p(e,oe,n),a(oe,Re),a(Re,eo),m(da,eo,null),a(oe,zm),a(oe,to),a(to,Hm),p(e,wh,n),p(e,ua,n),a(ua,ma),a(ma,Bm),a(ua,Fm),p(e,_h,n),p(e,We,n),a(We,qm),a(We,va),a(va,Rm),a(We,Wm),p(e,bh,n),p(e,or,n),a(or,ao),a(ao,Xm),p(e,yh,n),p(e,A,n),a(A,Ym),a(A,so),a(so,Qm),a(A,Zm),a(A,ro),a(ro,Jm),a(A,Km),a(A,lo),a(lo,ev),a(A,tv),p(e,gh,n),p(e,nr,n),a(nr,av),p(e,Eh,n),p(e,pr,n),a(pr,sv),p(e,Ph,n),p(e,Xe,n),a(Xe,io),a(io,wa),a(wa,oo),a(oo,rv),a(wa,lv),a(wa,hr),a(hr,iv),a(Xe,ov),a(Xe,_a),a(_a,ba),a(ba,no),a(no,nv),a(ba,pv),a(ba,fr),a(fr,hv),a(_a,fv),a(_a,ya),a(ya,po),a(po,cv),a(ya,dv),a(ya,cr),a(cr,uv),p(e,kh,n),p(e,dr,n),a(dr,mv),p(e,$h,n),p(e,Ye,n),a(Ye,vv),a(Ye,ho),a(ho,wv),a(Ye,_v),p(e,xh,n),p(e,ur,n),a(ur,bv),p(e,jh,n),m(ga,e,n),p(e,Ah,n),p(e,k,n),a(k,yv),a(k,fo),a(fo,gv),a(k,Ev),a(k,co),a(co,Pv),a(k,kv),a(k,uo),a(uo,$v),a(k,xv),a(k,mo),a(mo,jv),a(k,Av),a(k,vo),a(vo,Dv),p(e,Dh,n),p(e,ne,n),a(ne,Qe),a(Qe,wo),m(Ea,wo,null),a(ne,Tv),a(ne,_o),a(_o,Iv),p(e,Th,n),p(e,pe,n),a(pe,Ze),a(Ze,bo),m(Pa,bo,null),a(pe,Nv),a(pe,yo),a(yo,Sv),p(e,Ih,n),p(e,mr,n),a(mr,Lv),p(e,Nh,n),p(e,X,n),a(X,ka),a(ka,go),a(go,Eo),a(Eo,Cv),a(ka,Uv),a(ka,$a),a($a,Gv),a($a,Po),a(Po,Ov),a($a,Mv),a(X,Vv),a(X,xa),a(xa,ko),a(ko,$o),a($o,zv),a(xa,Hv),a(xa,ja),a(ja,Bv),a(ja,xo),a(xo,Fv),a(ja,qv),a(X,Rv),a(X,Aa),a(Aa,jo),a(jo,Ao),a(Ao,Wv),a(Aa,Xv),a(Aa,Da),a(Da,Yv),a(Da,Do),a(Do,Qv),a(Da,Zv),p(e,Sh,n),p(e,vr,n),a(vr,Jv),p(e,Lh,n),p(e,Ta,n),a(Ta,Kv),a(Ta,Ia),a(Ia,e1),p(e,Ch,n),p(e,he,n),a(he,Je),a(Je,To),m(Na,To,null),a(he,t1),a(he,Io),a(Io,a1),p(e,Uh,n),p(e,wr,n),a(wr,s1),p(e,Gh,n),p(e,E,n),a(E,No),a(No,r1),a(E,l1),a(E,So),a(So,i1),a(E,o1),a(E,Lo),a(Lo,n1),a(E,p1),a(E,Co),a(Co,h1),a(E,f1),a(E,Uo),a(Uo,c1),a(E,d1),a(E,Go),a(Go,u1),p(e,Oh,n),p(e,_r,n),a(_r,m1),p(e,Mh,n),p(e,br,n),a(br,v1),p(e,Vh,n),p(e,yr,n),a(yr,w1),p(e,zh,n),p(e,fe,n),a(fe,Ke),a(Ke,Oo),m(Sa,Oo,null),a(fe,_1),a(fe,Mo),a(Mo,b1),p(e,Hh,n),p(e,et,n),a(et,Vo),a(Vo,y1),a(et,g1),a(et,zo),a(zo,E1),p(e,Bh,n),p(e,ce,n),a(ce,tt),a(tt,Ho),m(La,Ho,null),a(ce,P1),a(ce,Bo),a(Bo,k1),p(e,Fh,n),p(e,Y,n),a(Y,Fo),a(Fo,$1),a(Y,x1),a(Y,gr),a(gr,j1),a(gr,Ca),a(Ca,A1),a(Y,D1),a(Y,qo),a(qo,T1),p(e,qh,n),p(e,de,n),a(de,at),a(at,Ro),m(Ua,Ro,null),a(de,I1),a(de,Wo),a(Wo,N1),p(e,Rh,n),p(e,Er,n),a(Er,Xo),a(Xo,S1),p(e,Wh,n),p(e,ue,n),a(ue,st),a(st,Yo),m(Ga,Yo,null),a(ue,L1),a(ue,Qo),a(Qo,C1),p(e,Xh,n),p(e,Pr,n),a(Pr,Zo),a(Zo,U1),p(e,Yh,n),p(e,kr,n),a(kr,G1),p(e,Qh,n),p(e,me,n),a(me,rt),a(rt,Jo),m(Oa,Jo,null),a(me,O1),a(me,Ko),a(Ko,M1),p(e,Zh,n),p(e,$r,n),a($r,V1),p(e,Jh,n),p(e,ve,n),a(ve,lt),a(lt,en),m(Ma,en,null),a(ve,z1),a(ve,tn),a(tn,H1),p(e,Kh,n),p(e,xr,n),a(xr,B1),p(e,ef,n),p(e,we,n),a(we,it),a(it,an),m(Va,an,null),a(we,F1),a(we,ot),a(ot,sn),a(sn,q1),a(ot,R1),a(ot,rn),a(rn,W1),a(ot,X1),p(e,tf,n),p(e,jr,n),a(jr,Y1),p(e,af,n),p(e,_e,n),a(_e,nt),a(nt,ln),m(za,ln,null),a(_e,Q1),a(_e,on),a(on,Z1),p(e,sf,n),p(e,Ar,n),a(Ar,J1),p(e,rf,n),p(e,D,n),a(D,Ha),a(Ha,K1),a(Ha,nn),a(nn,ew),a(Ha,tw),a(D,aw),a(D,Ba),a(Ba,sw),a(Ba,pn),a(pn,rw),a(Ba,lw),a(D,iw),a(D,Fa),a(Fa,ow),a(Fa,hn),a(hn,nw),a(Fa,pw),a(D,hw),a(D,fn),a(fn,fw),p(e,lf,n),p(e,Dr,n),a(Dr,cw),p(e,of,n),p(e,Tr,n),a(Tr,Ir),p(e,nf,n),p(e,pt,n),a(pt,dw),a(pt,qa),a(qa,uw),a(pt,mw),p(e,pf,n),p(e,Nr,n),a(Nr,vw),p(e,hf,n),p(e,be,n),a(be,ht),a(ht,cn),m(Ra,cn,null),a(be,ww),a(be,dn),a(dn,_w),p(e,ff,n),p(e,Sr,n),a(Sr,bw),p(e,cf,n),p(e,Lr,n),a(Lr,yw),p(e,df,n),p(e,T,n),a(T,un),a(un,gw),a(T,Ew),a(T,mn),a(mn,Pw),a(T,kw),a(T,Wa),a(Wa,$w),a(Wa,vn),a(vn,xw),a(Wa,jw),a(T,Aw),a(T,wn),a(wn,Dw),p(e,uf,n),p(e,Cr,n),a(Cr,Tw),p(e,mf,n),p(e,ft,n),a(ft,Iw),a(ft,_n),a(_n,Nw),a(ft,Sw),p(e,vf,n),p(e,Ur,n),a(Ur,Lw),p(e,wf,n),m(Xa,e,n),p(e,_f,n),p(e,ct,n),a(ct,Cw),a(ct,bn),a(bn,Uw),a(ct,Gw),p(e,bf,n),p(e,dt,n),a(dt,yn),a(yn,U),a(U,Gr),a(Gr,Ow),a(U,Mw),a(U,Or),a(Or,Vw),a(U,zw),a(U,Mr),a(Mr,Hw),a(U,Bw),a(U,Vr),a(Vr,Fw),a(dt,qw),a(dt,G),a(G,O),a(O,zr),a(zr,Rw),a(O,Ww),a(O,Hr),a(Hr,Xw),a(O,Yw),a(O,Br),a(Br,Qw),a(O,Zw),a(O,Fr),a(Fr,Jw),a(G,Kw),a(G,M),a(M,qr),a(qr,e_),a(M,t_),a(M,Rr),a(Rr,a_),a(M,s_),a(M,Wr),a(Wr,r_),a(M,l_),a(M,Xr),a(Xr,i_),a(G,o_),a(G,V),a(V,Yr),a(Yr,n_),a(V,p_),a(V,Qr),a(Qr,h_),a(V,f_),a(V,Zr),a(Zr,c_),a(V,d_),a(V,Jr),a(Jr,u_),a(G,m_),a(G,z),a(z,Kr),a(Kr,v_),a(z,w_),a(z,el),a(el,__),a(z,b_),a(z,tl),a(tl,y_),a(z,g_),a(z,al),a(al,E_),p(e,yf,n),p(e,ut,n),a(ut,P_),a(ut,gn),a(gn,k_),a(ut,$_),p(e,gf,n),p(e,sl,n),a(sl,x_),p(e,Ef,n),p(e,rl,n),a(rl,j_),p(e,Pf,n),p(e,mt,n),a(mt,A_),a(mt,Ya),a(Ya,D_),a(mt,T_),p(e,kf,n),p(e,ll,n),a(ll,I_),p(e,$f,n),p(e,vt,n),a(vt,il),a(il,N_),a(il,Qa),a(Qa,S_),a(vt,L_),a(vt,ol),a(ol,C_),a(ol,Za),a(Za,U_),p(e,xf,n),p(e,ye,n),a(ye,wt),a(wt,En),m(Ja,En,null),a(ye,G_),a(ye,Pn),a(Pn,O_),p(e,jf,n),p(e,Q,n),a(Q,M_),a(Q,kn),a(kn,V_),a(Q,z_),a(Q,Ka),a(Ka,H_),a(Q,B_),p(e,Af,n),p(e,nl,n),a(nl,F_),p(e,Df,n),p(e,ge,n),a(ge,_t),a(_t,$n),m(es,$n,null),a(ge,q_),a(ge,xn),a(xn,R_),p(e,Tf,n),p(e,pl,n),a(pl,W_),p(e,If,n),p(e,hl,n),a(hl,X_),p(e,Nf,n),p(e,fl,n),a(fl,Y_),p(e,Sf,n),p(e,bt,n),a(bt,Q_),a(bt,jn),a(jn,Z_),a(bt,J_),p(e,Lf,n),p(e,Ee,n),a(Ee,yt),a(yt,An),m(ts,An,null),a(Ee,K_),a(Ee,Dn),a(Dn,eb),p(e,Cf,n),p(e,Z,n),a(Z,tb),a(Z,Tn),a(Tn,ab),a(Z,sb),a(Z,In),a(In,rb),a(Z,lb),p(e,Uf,n),p(e,cl,n),a(cl,ib),p(e,Gf,n),p(e,dl,n),a(dl,ob),p(e,Of,n),p(e,ul,n),a(ul,nb),p(e,Mf,n),p(e,ml,n),a(ml,pb),p(e,Vf,n),p(e,gt,n),a(gt,hb),a(gt,Nn),a(Nn,fb),a(gt,cb),p(e,zf,n),p(e,vl,n),a(vl,db),p(e,Hf,n),m(as,e,n),p(e,Bf,n),p(e,ss,n),a(ss,ub),a(ss,Sn),a(Sn,mb),p(e,Ff,n),p(e,wl,n),a(wl,vb),p(e,qf,n),m(rs,e,n),p(e,Rf,n),p(e,_l,n),a(_l,wb),p(e,Wf,n),p(e,Pe,n),a(Pe,Et),a(Et,Ln),m(ls,Ln,null),a(Pe,_b),a(Pe,Cn),a(Cn,bb),p(e,Xf,n),p(e,Pt,n),a(Pt,yb),a(Pt,bl),a(bl,gb),a(Pt,Eb),p(e,Yf,n),p(e,kt,n),a(kt,Pb),a(kt,Un),a(Un,kb),a(kt,$b),p(e,Qf,n),p(e,ke,n),a(ke,$t),a($t,Gn),m(is,Gn,null),a(ke,xb),a(ke,On),a(On,jb),p(e,Zf,n),p(e,yl,n),a(yl,Ab),p(e,Jf,n),p(e,gl,n),a(gl,Db),p(e,Kf,n),m(os,e,n),p(e,ec,n),p(e,El,n),a(El,Tb),p(e,tc,n),p(e,xt,n),a(xt,Ib),a(xt,ns),a(ns,Nb),a(xt,Sb),p(e,ac,n),p(e,Pl,n),a(Pl,Lb),p(e,sc,n),p(e,I,n),a(I,Cb),a(I,Mn),a(Mn,Ub),a(I,Gb),a(I,Vn),a(Vn,Ob),a(I,Mb),a(I,zn),a(zn,Vb),a(I,zb),p(e,rc,n),p(e,J,n),a(J,Hb),a(J,Hn),a(Hn,Bb),a(J,Fb),a(J,Bn),a(Bn,qb),a(J,Rb),p(e,lc,n),p(e,jt,n),a(jt,Wb),a(jt,Fn),a(Fn,Xb),a(jt,Yb),p(e,ic,n),p(e,$e,n),a($e,At),a(At,qn),m(ps,qn,null),a($e,Qb),a($e,Rn),a(Rn,Zb),p(e,oc,n),p(e,kl,n),a(kl,Jb),p(e,nc,n),p(e,N,n),a(N,Kb),a(N,hs),a(hs,ey),a(N,ty),a(N,Wn),a(Wn,ay),a(N,sy),a(N,Xn),a(Xn,ry),a(N,ly),p(e,pc,n),p(e,$l,n),a($l,iy),p(e,hc,n),m(fs,e,n),p(e,fc,n),p(e,Dt,n),a(Dt,oy),a(Dt,Yn),a(Yn,ny),a(Dt,py),p(e,cc,n),p(e,xe,n),a(xe,Tt),a(Tt,Qn),m(cs,Qn,null),a(xe,hy),a(xe,Zn),a(Zn,fy),p(e,dc,n),p(e,xl,n),a(xl,cy),p(e,uc,n),p(e,K,n),a(K,dy),a(K,ds),a(ds,uy),a(K,my),a(K,us),a(us,vy),a(K,wy),p(e,mc,n),p(e,ms,n),a(ms,vs),a(vs,_y),a(ms,by),p(e,vc,n),p(e,It,n),a(It,yy),a(It,ws),a(ws,gy),a(It,Ey),p(e,wc,n),p(e,je,n),a(je,Nt),a(Nt,Jn),m(_s,Jn,null),a(je,Py),a(je,Kn),a(Kn,ky),p(e,_c,n),p(e,Ae,n),a(Ae,ep),a(ep,$y),a(Ae,xy),a(Ae,tp),a(tp,jy),a(Ae,Ay),p(e,bc,n),p(e,St,n),a(St,ap),a(ap,Dy),a(St,Ty),a(St,sp),a(sp,Iy),p(e,yc,n),p(e,jl,n),a(jl,Ny),p(e,gc,n),p(e,bs,n),a(bs,ys),a(ys,Sy),a(bs,Ly),p(e,Ec,n),p(e,Lt,n),a(Lt,rp),a(rp,Cy),a(Lt,Uy),a(Lt,Al),a(Al,Gy),a(Al,gs),a(gs,lp),a(lp,Oy),a(gs,My),a(gs,Es),a(Es,Vy),a(Es,ip),a(ip,zy),a(Es,Hy),p(e,Pc,n),p(e,Ps,n),a(Ps,ks),a(ks,By),a(Ps,Fy),p(e,kc,n),p(e,Dl,n),a(Dl,qy),p(e,$c,n),p(e,x,n),a(x,op),a(op,Ry),a(x,Wy),a(x,np),a(np,Xy),a(x,Yy),a(x,$s),a($s,Qy),a($s,pp),a(pp,Zy),a($s,Jy),a(x,Ky),a(x,Tl),a(Tl,e2),a(Tl,hp),a(hp,t2),a(x,a2),a(x,fp),a(fp,s2),p(e,xc,n),p(e,Il,n),a(Il,r2),p(e,jc,n),p(e,Ct,n),a(Ct,l2),a(Ct,xs),a(xs,i2),a(Ct,o2),p(e,Ac,n),p(e,Nl,n),a(Nl,n2),p(e,Dc,n),p(e,Sl,n),a(Sl,p2),p(e,Tc,n),p(e,Ll,n),a(Ll,h2),p(e,Ic,n),p(e,Ut,n),a(Ut,f2),a(Ut,js),a(js,c2),a(Ut,d2),p(e,Nc,n),p(e,Cl,n),a(Cl,u2),p(e,Sc,n),p(e,Gt,n),a(Gt,cp),a(cp,De),a(De,Ul),a(Ul,m2),a(De,v2),a(De,dp),a(dp,w2),a(De,_2),a(De,Gl),a(Gl,b2),a(Gt,y2),a(Gt,Te),a(Te,Ie),a(Ie,Ol),a(Ol,g2),a(Ie,E2),a(Ie,up),a(up,P2),a(Ie,k2),a(Ie,Ml),a(Ml,$2),a(Te,x2),a(Te,Ne),a(Ne,Vl),a(Vl,j2),a(Ne,A2),a(Ne,mp),a(mp,D2),a(Ne,T2),a(Ne,zl),a(zl,I2),a(Te,N2),a(Te,Se),a(Se,Hl),a(Hl,S2),a(Se,L2),a(Se,vp),a(vp,C2),a(Se,U2),a(Se,Bl),a(Bl,G2),p(e,Lc,n),p(e,Fl,n),a(Fl,O2),p(e,Cc,n),p(e,ql,n),a(ql,M2),p(e,Uc,n),p(e,Rl,n),a(Rl,V2),p(e,Gc,n),p(e,Wl,n),a(Wl,z2),p(e,Oc,n),p(e,As,n),a(As,wp),a(wp,H2),a(As,B2),p(e,Mc,n),m(Ds,e,n),p(e,Vc,n),p(e,$,n),a($,F2),a($,_p),a(_p,q2),a($,R2),a($,bp),a(bp,W2),a($,X2),a($,yp),a(yp,Y2),a($,Q2),a($,gp),a(gp,Z2),a($,J2),a($,Ep),a(Ep,K2),p(e,zc,n),p(e,Le,n),a(Le,Ot),a(Ot,Pp),m(Ts,Pp,null),a(Le,eg),a(Le,kp),a(kp,tg),p(e,Hc,n),p(e,Xl,n),a(Xl,ag),p(e,Bc,n),p(e,Mt,n),a(Mt,Yl),a(Yl,$p),a($p,sg),a(Yl,rg),a(Mt,lg),a(Mt,Ql),a(Ql,xp),a(xp,ig),a(Ql,og),p(e,Fc,n),p(e,Ce,n),a(Ce,Vt),a(Vt,jp),m(Is,jp,null),a(Ce,ng),a(Ce,Ap),a(Ap,pg),p(e,qc,n),p(e,Ue,n),a(Ue,hg),a(Ue,Dp),a(Dp,fg),a(Ue,cg),a(Ue,Ns),a(Ns,dg),p(e,Rc,n),p(e,Ge,n),a(Ge,zt),a(zt,Tp),m(Ss,Tp,null),a(Ge,ug),a(Ge,Ip),a(Ip,mg),p(e,Wc,n),p(e,Oe,n),a(Oe,Ht),a(Ht,Np),m(Ls,Np,null),a(Oe,vg),a(Oe,Sp),a(Sp,wg),p(e,Xc,n),p(e,Zl,n),a(Zl,_g),p(e,Yc,n),p(e,Jl,n),a(Jl,bg),p(e,Qc,n),p(e,Kl,n),a(Kl,yg),p(e,Zc,n),p(e,ei,n),a(ei,ti),p(e,Jc,n),p(e,Bt,n),a(Bt,gg),a(Bt,Cs),a(Cs,Eg),a(Bt,Pg),p(e,Kc,n),p(e,ai,n),a(ai,kg),p(e,ed,n),p(e,si,n),a(si,$g),p(e,td,n),p(e,ri,n),a(ri,xg),p(e,ad,n),p(e,li,n),a(li,jg),p(e,sd,n),p(e,ee,n),a(ee,Lp),a(Lp,Us),a(Us,Ag),a(ee,Dg),a(ee,Cp),a(Cp,Gs),a(Gs,Tg),a(ee,Ig),a(ee,Up),a(Up,Os),a(Os,Ng),p(e,rd,n),p(e,P,n),a(P,Sg),a(P,Ms),a(Ms,Lg),a(P,Cg),a(P,Vs),a(Vs,Ug),a(P,Gg),a(P,zs),a(zs,Og),a(P,Mg),a(P,Hs),a(Hs,Vg),a(P,zg),a(P,ii),a(ii,Hg),a(P,Bg),p(e,ld,n),p(e,Me,n),a(Me,Ft),a(Ft,Gp),m(Bs,Gp,null),a(Me,Fg),a(Me,Op),a(Op,qg),p(e,id,n),p(e,oi,n),a(oi,Rg),p(e,od,n),p(e,ni,n),a(ni,Wg),nd=!0},p:FP,i(e){nd||(v(aa.$$.fragment,e),v(sa.$$.fragment,e),v(ra.$$.fragment,e),v(ia.$$.fragment,e),v(oa.$$.fragment,e),v(na.$$.fragment,e),v(pa.$$.fragment,e),v(ha.$$.fragment,e),v(fa.$$.fragment,e),v(ca.$$.fragment,e),v(da.$$.fragment,e),v(ga.$$.fragment,e),v(Ea.$$.fragment,e),v(Pa.$$.fragment,e),v(Na.$$.fragment,e),v(Sa.$$.fragment,e),v(La.$$.fragment,e),v(Ua.$$.fragment,e),v(Ga.$$.fragment,e),v(Oa.$$.fragment,e),v(Ma.$$.fragment,e),v(Va.$$.fragment,e),v(za.$$.fragment,e),v(Ra.$$.fragment,e),v(Xa.$$.fragment,e),v(Ja.$$.fragment,e),v(es.$$.fragment,e),v(ts.$$.fragment,e),v(as.$$.fragment,e),v(rs.$$.fragment,e),v(ls.$$.fragment,e),v(is.$$.fragment,e),v(os.$$.fragment,e),v(ps.$$.fragment,e),v(fs.$$.fragment,e),v(cs.$$.fragment,e),v(_s.$$.fragment,e),v(Ds.$$.fragment,e),v(Ts.$$.fragment,e),v(Is.$$.fragment,e),v(Ss.$$.fragment,e),v(Ls.$$.fragment,e),v(Bs.$$.fragment,e),nd=!0)},o(e){w(aa.$$.fragment,e),w(sa.$$.fragment,e),w(ra.$$.fragment,e),w(ia.$$.fragment,e),w(oa.$$.fragment,e),w(na.$$.fragment,e),w(pa.$$.fragment,e),w(ha.$$.fragment,e),w(fa.$$.fragment,e),w(ca.$$.fragment,e),w(da.$$.fragment,e),w(ga.$$.fragment,e),w(Ea.$$.fragment,e),w(Pa.$$.fragment,e),w(Na.$$.fragment,e),w(Sa.$$.fragment,e),w(La.$$.fragment,e),w(Ua.$$.fragment,e),w(Ga.$$.fragment,e),w(Oa.$$.fragment,e),w(Ma.$$.fragment,e),w(Va.$$.fragment,e),w(za.$$.fragment,e),w(Ra.$$.fragment,e),w(Xa.$$.fragment,e),w(Ja.$$.fragment,e),w(es.$$.fragment,e),w(ts.$$.fragment,e),w(as.$$.fragment,e),w(rs.$$.fragment,e),w(ls.$$.fragment,e),w(is.$$.fragment,e),w(os.$$.fragment,e),w(ps.$$.fragment,e),w(fs.$$.fragment,e),w(cs.$$.fragment,e),w(_s.$$.fragment,e),w(Ds.$$.fragment,e),w(Ts.$$.fragment,e),w(Is.$$.fragment,e),w(Ss.$$.fragment,e),w(Ls.$$.fragment,e),w(Bs.$$.fragment,e),nd=!1},d(e){t(q),e&&t(Fs),e&&t(j),_(aa),e&&t(Hp),e&&t(qs),e&&t(Bp),e&&t(ae),_(sa),e&&t(Fp),e&&t(Rs),e&&t(qp),e&&t(se),_(ra),e&&t(Rp),e&&t(Ws),e&&t(Wp),e&&t(Xs),e&&t(Xp),e&&t(Qs),e&&t(Yp),e&&t(He),e&&t(Qp),e&&t(re),_(ia),e&&t(Zp),e&&t(Zs),e&&t(Jp),e&&t(R),e&&t(Kp),e&&t(Js),e&&t(eh),e&&t(y),e&&t(th),e&&t(le),_(oa),e&&t(ah),e&&t(ie),_(na),e&&t(sh),e&&t(Ks),e&&t(rh),e&&t(er),e&&t(lh),_(pa,e),e&&t(ih),e&&t(tr),e&&t(oh),e&&t(ar),e&&t(nh),_(ha,e),e&&t(ph),e&&t(sr),e&&t(hh),_(fa,e),e&&t(fh),e&&t(rr),e&&t(ch),_(ca,e),e&&t(dh),e&&t(W),e&&t(uh),e&&t(lr),e&&t(mh),e&&t(ir),e&&t(vh),e&&t(oe),_(da),e&&t(wh),e&&t(ua),e&&t(_h),e&&t(We),e&&t(bh),e&&t(or),e&&t(yh),e&&t(A),e&&t(gh),e&&t(nr),e&&t(Eh),e&&t(pr),e&&t(Ph),e&&t(Xe),e&&t(kh),e&&t(dr),e&&t($h),e&&t(Ye),e&&t(xh),e&&t(ur),e&&t(jh),_(ga,e),e&&t(Ah),e&&t(k),e&&t(Dh),e&&t(ne),_(Ea),e&&t(Th),e&&t(pe),_(Pa),e&&t(Ih),e&&t(mr),e&&t(Nh),e&&t(X),e&&t(Sh),e&&t(vr),e&&t(Lh),e&&t(Ta),e&&t(Ch),e&&t(he),_(Na),e&&t(Uh),e&&t(wr),e&&t(Gh),e&&t(E),e&&t(Oh),e&&t(_r),e&&t(Mh),e&&t(br),e&&t(Vh),e&&t(yr),e&&t(zh),e&&t(fe),_(Sa),e&&t(Hh),e&&t(et),e&&t(Bh),e&&t(ce),_(La),e&&t(Fh),e&&t(Y),e&&t(qh),e&&t(de),_(Ua),e&&t(Rh),e&&t(Er),e&&t(Wh),e&&t(ue),_(Ga),e&&t(Xh),e&&t(Pr),e&&t(Yh),e&&t(kr),e&&t(Qh),e&&t(me),_(Oa),e&&t(Zh),e&&t($r),e&&t(Jh),e&&t(ve),_(Ma),e&&t(Kh),e&&t(xr),e&&t(ef),e&&t(we),_(Va),e&&t(tf),e&&t(jr),e&&t(af),e&&t(_e),_(za),e&&t(sf),e&&t(Ar),e&&t(rf),e&&t(D),e&&t(lf),e&&t(Dr),e&&t(of),e&&t(Tr),e&&t(nf),e&&t(pt),e&&t(pf),e&&t(Nr),e&&t(hf),e&&t(be),_(Ra),e&&t(ff),e&&t(Sr),e&&t(cf),e&&t(Lr),e&&t(df),e&&t(T),e&&t(uf),e&&t(Cr),e&&t(mf),e&&t(ft),e&&t(vf),e&&t(Ur),e&&t(wf),_(Xa,e),e&&t(_f),e&&t(ct),e&&t(bf),e&&t(dt),e&&t(yf),e&&t(ut),e&&t(gf),e&&t(sl),e&&t(Ef),e&&t(rl),e&&t(Pf),e&&t(mt),e&&t(kf),e&&t(ll),e&&t($f),e&&t(vt),e&&t(xf),e&&t(ye),_(Ja),e&&t(jf),e&&t(Q),e&&t(Af),e&&t(nl),e&&t(Df),e&&t(ge),_(es),e&&t(Tf),e&&t(pl),e&&t(If),e&&t(hl),e&&t(Nf),e&&t(fl),e&&t(Sf),e&&t(bt),e&&t(Lf),e&&t(Ee),_(ts),e&&t(Cf),e&&t(Z),e&&t(Uf),e&&t(cl),e&&t(Gf),e&&t(dl),e&&t(Of),e&&t(ul),e&&t(Mf),e&&t(ml),e&&t(Vf),e&&t(gt),e&&t(zf),e&&t(vl),e&&t(Hf),_(as,e),e&&t(Bf),e&&t(ss),e&&t(Ff),e&&t(wl),e&&t(qf),_(rs,e),e&&t(Rf),e&&t(_l),e&&t(Wf),e&&t(Pe),_(ls),e&&t(Xf),e&&t(Pt),e&&t(Yf),e&&t(kt),e&&t(Qf),e&&t(ke),_(is),e&&t(Zf),e&&t(yl),e&&t(Jf),e&&t(gl),e&&t(Kf),_(os,e),e&&t(ec),e&&t(El),e&&t(tc),e&&t(xt),e&&t(ac),e&&t(Pl),e&&t(sc),e&&t(I),e&&t(rc),e&&t(J),e&&t(lc),e&&t(jt),e&&t(ic),e&&t($e),_(ps),e&&t(oc),e&&t(kl),e&&t(nc),e&&t(N),e&&t(pc),e&&t($l),e&&t(hc),_(fs,e),e&&t(fc),e&&t(Dt),e&&t(cc),e&&t(xe),_(cs),e&&t(dc),e&&t(xl),e&&t(uc),e&&t(K),e&&t(mc),e&&t(ms),e&&t(vc),e&&t(It),e&&t(wc),e&&t(je),_(_s),e&&t(_c),e&&t(Ae),e&&t(bc),e&&t(St),e&&t(yc),e&&t(jl),e&&t(gc),e&&t(bs),e&&t(Ec),e&&t(Lt),e&&t(Pc),e&&t(Ps),e&&t(kc),e&&t(Dl),e&&t($c),e&&t(x),e&&t(xc),e&&t(Il),e&&t(jc),e&&t(Ct),e&&t(Ac),e&&t(Nl),e&&t(Dc),e&&t(Sl),e&&t(Tc),e&&t(Ll),e&&t(Ic),e&&t(Ut),e&&t(Nc),e&&t(Cl),e&&t(Sc),e&&t(Gt),e&&t(Lc),e&&t(Fl),e&&t(Cc),e&&t(ql),e&&t(Uc),e&&t(Rl),e&&t(Gc),e&&t(Wl),e&&t(Oc),e&&t(As),e&&t(Mc),_(Ds,e),e&&t(Vc),e&&t($),e&&t(zc),e&&t(Le),_(Ts),e&&t(Hc),e&&t(Xl),e&&t(Bc),e&&t(Mt),e&&t(Fc),e&&t(Ce),_(Is),e&&t(qc),e&&t(Ue),e&&t(Rc),e&&t(Ge),_(Ss),e&&t(Wc),e&&t(Oe),_(Ls),e&&t(Xc),e&&t(Zl),e&&t(Yc),e&&t(Jl),e&&t(Qc),e&&t(Kl),e&&t(Zc),e&&t(ei),e&&t(Jc),e&&t(Bt),e&&t(Kc),e&&t(ai),e&&t(ed),e&&t(si),e&&t(td),e&&t(ri),e&&t(ad),e&&t(li),e&&t(sd),e&&t(ee),e&&t(rd),e&&t(P),e&&t(ld),e&&t(Me),_(Bs),e&&t(id),e&&t(oi),e&&t(od),e&&t(ni)}}}const RP={local:"performance-and-scalability-how-to-fit-a-bigger-model-and-train-it-faster",sections:[{local:"quick-notes",sections:[{local:"faster-training",title:"Faster Training"},{local:"bigger-models",title:"Bigger Models"}],title:"Quick notes"},{local:"hardware",sections:[{local:"multigpu-connectivity",title:"Multi-GPU Connectivity"},{local:"nvlink",title:"NVlink"}],title:"Hardware"},{local:"software",sections:[{local:"anatomy-of-models-operations",title:"Anatomy of Model's Operations"},{local:"anatomy-of-models-memory",sections:[{local:"model-weights",title:"Model Weights"},{local:"optimizer-states",title:"Optimizer States"},{local:"gradients",title:"Gradients"},{local:"forward-activations",title:"Forward Activations"},{local:"temporary-memory",title:"Temporary Memory"},{local:"functionalityspecific-memory",title:"Functionality-specific memory"}],title:"Anatomy of Model's Memory"},{local:"forward-vs-backward-execution-speed",title:"`forward` vs `backward` Execution Speed"},{local:"floating-data-types",sections:[{local:"fp16",sections:[{local:"fp16-caching",title:"fp16 caching"},{local:"fp16-inference",title:"fp16 Inference"}],title:"fp16"},{local:"bf16",sections:[{local:"bf16-inference",title:"bf16 Inference"}],title:"bf16"},{local:"tf32",title:"tf32"}],title:"Floating Data Types"},{local:"gradient-checkpointing",title:"Gradient Checkpointing"},{local:"batch-sizes",title:"Batch sizes"},{local:"dp-vs-ddp",title:"DP vs DDP"},{local:"dataloader",title:"DataLoader"},{local:"faster-optimizer",title:"Faster optimizer"},{local:"sparsity",sections:[{local:"mixture-of-experts",title:"Mixture of Experts"}],title:"Sparsity"}],title:"Software"},{local:"contribute",title:"Contribute"}],title:"Performance and Scalability: How To Fit a Bigger Model and Train It Faster"};function WP(Nu,q,Fs){let{fw:j}=q;return Nu.$$set=C=>{"fw"in C&&Fs(0,j=C.fw)},[j]}class JP extends VP{constructor(q){super();zP(this,q,WP,qP,HP,{fw:0})}}export{JP as default,RP as metadata};
