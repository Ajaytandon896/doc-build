import{S as rq,i as lq,s as aq,e as l,k as f,w as d,t as o,L as iq,c as a,d as s,m as h,a as i,x as c,h as r,b as u,J as t,g as p,y as m,q as _,o as v,B as w}from"../chunks/vendor-b1433968.js";import{T as PE}from"../chunks/Tip-c3840994.js";import{I as E}from"../chunks/IconCopyLink-7029626d.js";import{C as y}from"../chunks/CodeBlock-a320dbd7.js";import"../chunks/CopyButton-f65cb278.js";function nq(_e){let $,x,g,b,A,j,z,D;return{c(){$=l("p"),x=o("This plugin doesn\u2019t work with "),g=l("code"),b=o("-n"),A=o(" flag from "),j=l("code"),z=o("pytest-xdist"),D=o(".")},l(O){$=a(O,"P",{});var k=i($);x=r(k,"This plugin doesn\u2019t work with "),g=a(k,"CODE",{});var q=i(g);b=r(q,"-n"),q.forEach(s),A=r(k," flag from "),j=a(k,"CODE",{});var R=i(j);z=r(R,"pytest-xdist"),R.forEach(s),D=r(k,"."),k.forEach(s)},m(O,k){p(O,$,k),t($,x),t($,g),t(g,b),t($,A),t($,j),t(j,z),t($,D)},d(O){O&&s($)}}}function pq(_e){let $,x,g,b,A,j,z,D;return{c(){$=l("p"),x=o("There is another plugin "),g=l("code"),b=o("pytest-repeat"),A=o(", but it doesn\u2019t work with "),j=l("code"),z=o("unittest"),D=o(".")},l(O){$=a(O,"P",{});var k=i($);x=r(k,"There is another plugin "),g=a(k,"CODE",{});var q=i(g);b=r(q,"pytest-repeat"),q.forEach(s),A=r(k,", but it doesn\u2019t work with "),j=a(k,"CODE",{});var R=i(j);z=r(R,"unittest"),R.forEach(s),D=r(k,"."),k.forEach(s)},m(O,k){p(O,$,k),t($,x),t($,g),t(g,b),t($,A),t($,j),t(j,z),t($,D)},d(O){O&&s($)}}}function fq(_e){let $,x,g,b,A,j,z,D,O,k,q,R,Nt,$e;return{c(){$=l("p"),x=o("In order to run the equivalent of "),g=l("code"),b=o("rm -r"),A=o(` safely, only subdirs of the project repository checkout are allowed if
an explicit obj:`),j=l("em"),z=o("tmp_dir"),D=o(" is used, so that by mistake no "),O=l("code"),k=o("/tmp"),q=o(` or similar important part of the filesystem will
get nuked. i.e. please always pass paths that start with `),R=l("code"),Nt=o("./"),$e=o(".")},l(Be){$=a(Be,"P",{});var S=i($);x=r(S,"In order to run the equivalent of "),g=a(S,"CODE",{});var ve=i(g);b=r(ve,"rm -r"),ve.forEach(s),A=r(S,` safely, only subdirs of the project repository checkout are allowed if
an explicit obj:`),j=a(S,"EM",{});var Ye=i(j);z=r(Ye,"tmp_dir"),Ye.forEach(s),D=r(S," is used, so that by mistake no "),O=a(S,"CODE",{});var Ht=i(O);k=r(Ht,"/tmp"),Ht.forEach(s),q=r(S,` or similar important part of the filesystem will
get nuked. i.e. please always pass paths that start with `),R=a(S,"CODE",{});var si=i(R);Nt=r(si,"./"),si.forEach(s),$e=r(S,"."),S.forEach(s)},m(Be,S){p(Be,$,S),t($,x),t($,g),t(g,b),t($,A),t($,j),t(j,z),t($,D),t($,O),t(O,k),t($,q),t($,R),t(R,Nt),t($,$e)},d(Be){Be&&s($)}}}function hq(_e){let $,x;return{c(){$=l("p"),x=o(`Each test can register multiple temporary directories and they all will get auto-removed, unless requested
otherwise.`)},l(g){$=a(g,"P",{});var b=i($);x=r(b,`Each test can register multiple temporary directories and they all will get auto-removed, unless requested
otherwise.`),b.forEach(s)},m(g,b){p(g,$,b),t($,x)},d(g){g&&s($)}}}function uq(_e){let $,x,g,b,A,j,z,D,O,k,q,R,Nt,$e,Be,S,ve,Ye,Ht,si,OE,IE,oi,fp,TE,AE,fm,Ve,zt,hp,Uo,DE,up,SE,hm,Rt,No,Ho,qE,zo,LE,UE,NE,Ro,HE,dp,zE,RE,GE,Go,Fo,FE,Mo,ME,WE,BE,Je,cp,ri,Wo,YE,VE,JE,mp,L,Bo,XE,ZE,_p,KE,QE,vp,eg,tg,wp,sg,og,yp,rg,lg,$p,ag,ig,ng,Ep,Ee,Yo,pg,fg,gp,hg,ug,bp,dg,cg,um,Vo,dm,Gt,mg,Jo,_g,vg,cm,Xe,Ft,kp,Xo,wg,Cp,yg,mm,Ze,Mt,jp,Zo,$g,xp,Eg,_m,Wt,gg,Ko,bg,kg,vm,li,Cg,wm,ai,jg,ym,Qo,$m,ii,xg,Em,er,gm,ni,Pg,bm,tr,km,pi,Og,Cm,Q,Pp,Ig,Tg,Op,Ag,Dg,Ip,Sg,qg,Tp,Lg,jm,Ke,Bt,Ap,sr,Ug,Dp,Ng,xm,fi,Hg,Pm,or,Om,hi,zg,Im,rr,Tm,Qe,Yt,Sp,lr,Rg,qp,Gg,Am,ui,Fg,Dm,ar,Sm,et,Vt,Lp,ir,Mg,Up,Wg,qm,di,Bg,Lm,nr,Um,ci,Yg,Nm,ge,mi,Np,Vg,Jg,Xg,_i,Hp,Zg,Kg,Qg,vi,zp,eb,tb,Hm,wi,sb,zm,pr,Rm,yi,ob,Gm,Jt,rb,Rp,lb,ab,Fm,fr,Mm,$i,ib,Wm,Xt,nb,Gp,pb,fb,Bm,hr,Ym,ee,hb,Fp,ub,db,Mp,cb,mb,Wp,_b,vb,Vm,Zt,wb,Bp,yb,$b,Jm,ur,Xm,Ei,Eb,Zm,dr,Km,be,gb,Yp,bb,kb,Vp,Cb,jb,Qm,cr,e_,Kt,xb,Jp,Pb,Ob,t_,Qt,Ib,Xp,Tb,Ab,s_,mr,o_,tt,es,Zp,_r,Db,Kp,Sb,r_,ts,qb,vr,Lb,Ub,l_,wr,a_,yr,i_,gi,Nb,n_,st,ss,Qp,$r,Hb,ef,zb,p_,Er,gr,Rb,Gb,f_,br,h_,ot,Fb,tf,Mb,Wb,sf,Bb,u_,ke,Yb,of,Vb,Jb,rf,Xb,Zb,d_,kr,c_,Ce,Kb,lf,Qb,e3,af,t3,s3,m_,Cr,__,bi,o3,v_,jr,xr,r3,l3,w_,rt,os,nf,Pr,a3,pf,i3,y_,rs,n3,ff,p3,f3,$_,Or,E_,lt,ls,hf,Ir,h3,uf,u3,g_,ki,d3,b_,Tr,k_,at,as,df,Ar,c3,cf,m3,C_,M,_3,mf,v3,w3,_f,y3,$3,vf,E3,g3,wf,b3,k3,j_,we,yf,C3,j3,$f,x3,P3,Ef,O3,I3,x_,je,T3,gf,A3,D3,Dr,S3,q3,P_,it,is,bf,Sr,L3,kf,U3,O_,Ci,N3,I_,nt,ns,Cf,qr,H3,jf,z3,T_,ji,xi,Lr,R3,G3,A_,Ur,D_,Pi,F3,S_,Nr,q_,ps,L_,fs,U_,pt,hs,xf,Hr,M3,Pf,W3,N_,zr,H_,us,B3,Of,Y3,V3,z_,ds,J3,If,X3,Z3,R_,Rr,G_,Oi,K3,F_,Gr,M_,cs,Q3,Tf,e2,t2,W_,Fr,B_,Ii,s2,Y_,Mr,V_,I,o2,Af,r2,l2,Df,a2,i2,Sf,n2,p2,qf,f2,h2,Lf,u2,d2,Wr,c2,m2,J_,te,_2,Uf,v2,w2,Br,y2,$2,Nf,E2,g2,X_,ft,ms,Hf,Yr,b2,zf,k2,Z_,ht,_s,Rf,Vr,C2,Gf,j2,K_,Jr,Xr,x2,P2,Q_,Zr,ev,Ti,O2,tv,Kr,sv,Ai,I2,ov,ut,vs,Ff,Qr,T2,Mf,A2,rv,xe,D2,Wf,S2,q2,Bf,L2,U2,lv,el,av,dt,ws,Yf,tl,N2,Vf,H2,iv,sl,ol,z2,R2,nv,rl,pv,ll,fv,ct,ys,Jf,al,G2,Xf,F2,hv,$s,M2,Zf,W2,B2,uv,il,dv,se,Y2,Kf,V2,J2,Qf,X2,Z2,eh,K2,Q2,cv,nl,mv,Di,e5,_v,Si,t5,vv,U,qi,th,s5,o5,r5,Es,sh,l5,a5,oh,i5,n5,p5,gs,rh,f5,h5,lh,u5,d5,c5,bs,ah,m5,_5,ih,v5,w5,y5,ks,nh,$5,E5,ph,g5,b5,k5,Cs,fh,C5,j5,hh,x5,P5,wv,Li,O5,yv,C,I5,uh,T5,A5,dh,D5,S5,ch,q5,L5,mh,U5,N5,_h,H5,z5,vh,R5,G5,wh,F5,M5,yh,W5,B5,$h,Y5,V5,Eh,J5,X5,$v,Ui,Z5,Ev,pl,gv,Pe,K5,gh,Q5,ek,bh,tk,sk,bv,fl,kv,Ni,ok,Cv,hl,jv,Oe,rk,kh,lk,ak,Ch,ik,nk,xv,ul,Pv,js,pk,jh,fk,hk,Ov,Hi,uk,Iv,zi,xh,dk,Tv,dl,Av,mt,xs,Ph,cl,ck,Oh,mk,Dv,_t,Ih,_k,vk,Th,wk,yk,Sv,Ri,$k,qv,Ps,Ah,ml,Ek,gk,Dh,_l,bk,Lv,Os,kk,Sh,Ck,jk,Uv,Gi,xk,Nv,vl,Hv,vt,Is,qh,wl,Pk,Lh,Ok,zv,Ie,Ik,Uh,Tk,Ak,Nh,Dk,Sk,Rv,W,qk,Hh,Lk,Uk,zh,Nk,Hk,Rh,zk,Rk,Gh,Gk,Fk,Gv,yl,Fv,Fi,Mk,Mv,$l,Wv,wt,Ts,Fh,El,Wk,Mh,Bk,Bv,Mi,Yk,Yv,gl,Vv,yt,As,Wh,bl,Vk,Bh,Jk,Jv,Wi,Xk,Xv,kl,Zv,Bi,Zk,Kv,Yi,Kk,Qv,Cl,e1,$t,Ds,Yh,jl,Qk,Vh,e4,t1,Te,t4,Jh,s4,o4,Xh,r4,l4,s1,oe,a4,xl,i4,n4,Zh,p4,f4,Kh,h4,u4,o1,Et,Ss,Qh,Pl,d4,eu,c4,r1,Vi,m4,l1,Ol,a1,qs,_4,tu,v4,w4,i1,Ae,y4,su,$4,E4,ou,g4,b4,n1,Il,p1,Ls,k4,ru,C4,j4,f1,Tl,h1,Us,x4,lu,P4,O4,u1,Al,d1,Ji,I4,c1,Dl,m1,Xi,T4,_1,Sl,v1,B,A4,ql,D4,S4,au,q4,L4,iu,U4,N4,nu,H4,z4,w1,re,R4,pu,G4,F4,fu,M4,W4,hu,B4,Y4,y1,De,V4,uu,J4,X4,du,Z4,K4,$1,Ll,E1,le,Q4,cu,e0,t0,mu,s0,o0,_u,r0,l0,g1,Ul,b1,Zi,a0,k1,Nl,C1,Ki,i0,j1,Hl,x1,Qi,n0,P1,gt,Ns,vu,zl,p0,wu,f0,O1,Hs,h0,yu,u0,d0,I1,zs,Rl,en,$u,c0,m0,_0,G,Gl,Eu,v0,w0,gu,y0,$0,tn,bu,E0,g0,b0,Rs,ku,k0,C0,Cu,j0,x0,P0,Gs,ju,O0,I0,xu,T0,A0,D0,sn,Pu,S0,q0,L0,Se,Ou,U0,N0,Iu,H0,z0,Tu,R0,G0,F0,Fl,Ml,M0,Au,W0,B0,Y0,F,Du,Su,V0,J0,qu,Lu,X0,Z0,Uu,Nu,K0,Q0,Hu,zu,e6,t6,Ru,Gu,s6,o6,Fu,Mu,r6,T1,Fs,l6,Wu,a6,i6,A1,Wl,D1,Y,n6,Bu,p6,f6,Yu,h6,u6,Vu,d6,c6,Ju,m6,_6,S1,Bl,q1,bt,Ms,Xu,Yl,v6,Zu,w6,L1,Ws,y6,Ku,$6,E6,U1,on,g6,N1,qe,b6,Qu,k6,C6,ed,j6,x6,H1,rn,P6,z1,Vl,R1,Bs,O6,td,I6,T6,G1,ln,sd,A6,F1,Jl,M1,Xl,od,D6,S6,W1,an,rd,q6,B1,Zl,Y1,nn,L6,V1,pn,Kl,kt,U6,ld,N6,H6,ad,z6,R6,G6,ye,fn,id,F6,M6,W6,hn,nd,B6,Y6,V6,un,pd,J6,X6,Z6,dn,fd,K6,Q6,J1,Ys,X1,Vs,Z1,Ct,Js,hd,Ql,e7,ud,t7,K1,Le,s7,dd,o7,r7,cd,l7,a7,Q1,ea,ew,jt,Xs,md,ta,i7,_d,n7,tw,Zs,p7,vd,f7,h7,sw,cn,u7,ow,Ks,wd,sa,d7,yd,c7,m7,_7,$d,oa,v7,Ed,w7,y7,rw,ae,$7,gd,E7,g7,bd,b7,k7,kd,C7,j7,lw,xt,Qs,Cd,ra,x7,jd,P7,aw,mn,xd,O7,iw,la,nw,_n,I7,pw,aa,fw,eo,T7,Pd,A7,D7,hw,ia,uw,vn,Od,S7,dw,na,cw,wn,q7,mw,pa,_w,to,L7,Id,U7,N7,vw,fa,ww,yn,Td,H7,yw,ha,$w,$n,Ad,z7,Ew,ua,gw,En,R7,bw,da,kw,gn,G7,Cw,ca,jw,so,F7,ma,M7,W7,xw,Pt,oo,Dd,_a,B7,Sd,Y7,Pw,bn,V7,Ow,va,Iw,Ue,J7,qd,X7,Z7,Ld,K7,Q7,Tw,wa,Aw,ie,e8,Ud,t8,s8,Nd,o8,r8,Hd,l8,a8,Dw,ya,Sw,kn,i8,qw,Cn,n8,Lw,jn,p8,Uw,ne,zd,f8,h8,Rd,u8,d8,Ot,c8,Gd,m8,_8,Fd,v8,w8,y8,Md,$8,Nw,Ne,E8,Wd,g8,b8,Bd,k8,C8,Hw,$a,zw,He,j8,Ea,x8,P8,ga,O8,I8,Rw,ro,T8,Yd,A8,D8,Gw,xn,S8,Fw,It,lo,Vd,ba,q8,Jd,L8,Mw,V,U8,Xd,N8,H8,Zd,z8,R8,Kd,G8,F8,ka,M8,W8,Ww,Ca,Bw,ao,B8,Qd,Y8,V8,Yw,ja,Vw,io,J8,ec,X8,Z8,Jw,xa,Xw,T,K8,tc,Q8,e9,sc,t9,s9,oc,o9,r9,rc,l9,a9,lc,i9,n9,ac,p9,f9,Zw,no,h9,ic,u9,d9,Kw,Pa,Qw,Pn,c9,ey,Oa,ty,ze,m9,nc,_9,v9,pc,w9,y9,sy,Ia,oy,po,$9,fc,E9,g9,ry,Ta,ly,On,b9,ay,Tt,fo,hc,Aa,k9,uc,C9,iy,ho,j9,dc,x9,P9,ny,Da,py,At,uo,cc,Sa,O9,mc,I9,fy,qa,T9,_c,A9,hy,La,uy,pe,D9,vc,S9,q9,wc,L9,U9,yc,N9,H9,dy,Ua,cy,N,z9,$c,R9,G9,Ec,F9,M9,gc,W9,B9,bc,Y9,V9,kc,J9,X9,my,co,Z9,Cc,K9,Q9,_y,Dt,mo,jc,Na,eC,xc,tC,vy,In,sC,wy,Ha,yy,St,_o,Pc,za,oC,Oc,rC,$y,Tn,lC,Ey,Ra,gy,qt,vo,Ic,Ga,aC,Tc,iC,by,An,nC,ky,fe,Fa,pC,Ac,fC,hC,uC,H,dC,Dc,cC,mC,Sc,_C,vC,qc,wC,yC,Lc,$C,EC,Ma,gC,bC,Uc,kC,CC,Nc,jC,xC,Wa,PC,Ba,OC,IC,Cy,Lt,wo,Hc,Ya,TC,zc,AC,jy,Dn,DC,xy,he,Rc,SC,qC,Gc,LC,UC,Fc,NC,HC,Mc,zC,Py,Sn,RC,Oy,qn,GC,Iy,Ln,FC,Ty,Un,MC,Ay,yo,Nn,Wc,WC,BC,YC,Ut,VC,Bc,JC,XC,Yc,ZC,KC,Dy,Hn,QC,Sy,Va,qy,zn,ej,Ly,Ja,Uy,$o,tj,Vc,sj,oj,Ny,Eo,rj,Jc,lj,aj,Hy,Rn,ij,zy,go,Xc,Xa,nj,pj,Zc,Za,fj,Ry;return j=new E({}),Uo=new E({}),Vo=new y({props:{code:`RUN_SLOW=1 pytest tests/
RUN_SLOW=1 pytest examples/,`,highlighted:`RUN_SLOW=1 pytest tests/
RUN_SLOW=1 pytest examples/`}}),Xo=new E({}),Zo=new E({}),Qo=new y({props:{code:"pytest,",highlighted:"pytest"}}),er=new y({props:{code:"make test,",highlighted:'make <span class="hljs-built_in">test</span>'}}),tr=new y({props:{code:"python -m pytest -n auto --dist=loadfile -s -v ./tests/,",highlighted:"python -m pytest -n auto --dist=loadfile -s -v ./tests/"}}),sr=new E({}),or=new y({props:{code:"pytest --collect-only -q,",highlighted:"pytest --collect-only -q"}}),rr=new y({props:{code:"pytest tests/test_optimization.py --collect-only -q,",highlighted:"pytest tests/test_optimization.py --collect-only -q"}}),lr=new E({}),ar=new y({props:{code:"pytest tests/test_logging.py,",highlighted:"pytest tests/test_logging.py"}}),ir=new E({}),nr=new y({props:{code:"pytest tests/test_optimization.py::OptimizationTest::test_adam_w,",highlighted:"pytest tests/test_optimization.py::OptimizationTest::test_adam_w"}}),pr=new y({props:{code:"pytest tests/test_optimization.py::OptimizationTest,",highlighted:"pytest tests/test_optimization.py::OptimizationTest"}}),fr=new y({props:{code:"pytest tests/test_optimization.py::OptimizationTest --collect-only -q,",highlighted:"pytest tests/test_optimization.py::OptimizationTest --collect-only -q"}}),hr=new y({props:{code:"pytest -k adam tests/test_optimization.py,",highlighted:"pytest -k adam tests/test_optimization.py"}}),ur=new y({props:{code:'pytest -k "not adam" tests/test_optimization.py,',highlighted:'pytest -k <span class="hljs-string">&quot;not adam&quot;</span> tests/test_optimization.py'}}),dr=new y({props:{code:'pytest -k "ada and not adam" tests/test_optimization.py,',highlighted:'pytest -k <span class="hljs-string">&quot;ada and not adam&quot;</span> tests/test_optimization.py'}}),cr=new y({props:{code:'pytest -k "test_adam_w or test_adam_w" tests/test_optimization.py,',highlighted:'pytest -k <span class="hljs-string">&quot;test_adam_w or test_adam_w&quot;</span> tests/test_optimization.py'}}),mr=new y({props:{code:'pytest -k "test and ada" tests/test_optimization.py,',highlighted:'pytest -k <span class="hljs-string">&quot;test and ada&quot;</span> tests/test_optimization.py'}}),_r=new E({}),wr=new y({props:{code:"pip install pytest-picked,",highlighted:"pip install pytest-picked"}}),yr=new y({props:{code:"pytest --picked,",highlighted:"pytest --picked"}}),$r=new E({}),br=new y({props:{code:"pip install pytest-xdist,",highlighted:"pip install pytest-xdist"}}),kr=new y({props:{code:`[tool:pytest]
looponfailroots = transformers tests,`,highlighted:`<span class="hljs-section">[tool:pytest]</span>
<span class="hljs-attr">looponfailroots</span> = transformers tests`}}),Cr=new y({props:{code:`[pytest]
looponfailroots = transformers tests,`,highlighted:`<span class="hljs-section">[pytest]</span>
<span class="hljs-attr">looponfailroots</span> = transformers tests`}}),Pr=new E({}),Or=new y({props:{code:"pytest *ls -1 tests/*py | grep -v test_modeling*,",highlighted:'pytest *<span class="hljs-built_in">ls</span> -1 tests/*py | grep -v test_modeling*'}}),Ir=new E({}),Tr=new y({props:{code:"pytest --cache-clear tests,",highlighted:"pytest --cache-clear tests"}}),Ar=new E({}),Sr=new E({}),qr=new E({}),Ur=new y({props:{code:"pip install pytest-flakefinder,",highlighted:"pip install pytest-flakefinder"}}),Nr=new y({props:{code:"pytest --flake-finder --flake-runs=5 tests/test_failing_test.py,",highlighted:"pytest --flake-finder --flake-runs=5 tests/test_failing_test.py"}}),ps=new PE({props:{$$slots:{default:[nq]},$$scope:{ctx:_e}}}),fs=new PE({props:{$$slots:{default:[pq]},$$scope:{ctx:_e}}}),Hr=new E({}),zr=new y({props:{code:"pip install pytest-random-order,",highlighted:"pip install pytest-random-order"}}),Rr=new y({props:{code:`pytest tests
[...]
Using --random-order-bucket=module
Using --random-order-seed=573663,`,highlighted:`pytest tests
[...]
Using --random-order-bucket=module
Using --random-order-seed=573663`}}),Gr=new y({props:{code:`pytest --random-order-seed=573663
[...]
Using --random-order-bucket=module
Using --random-order-seed=573663,`,highlighted:`pytest --random-order-seed=573663
[...]
Using --random-order-bucket=module
Using --random-order-seed=573663`}}),Fr=new y({props:{code:"pytest --random-order-bucket=none tests/test_a.py tests/test_c.py tests/test_b.py,",highlighted:"pytest --random-order-bucket=none tests/test_a.py tests/test_c.py tests/test_b.py"}}),Mr=new y({props:{code:"pytest --random-order-bucket=none,",highlighted:"pytest --random-order-bucket=none"}}),Yr=new E({}),Vr=new E({}),Zr=new y({props:{code:"pip install pytest-sugar,",highlighted:"pip install pytest-sugar"}}),Kr=new y({props:{code:"pytest -p no:sugar,",highlighted:"pytest -p no:sugar"}}),Qr=new E({}),el=new y({props:{code:"pytest --pspec tests/test_optimization.py,",highlighted:"pytest --pspec tests/test_optimization.py"}}),tl=new E({}),rl=new y({props:{code:"pip install pytest-instafail,",highlighted:"pip install pytest-instafail"}}),ll=new y({props:{code:"pytest --instafail,",highlighted:"pytest --instafail"}}),al=new E({}),il=new y({props:{code:'CUDA_VISIBLE_DEVICES="" pytest tests/test_logging.py,',highlighted:'CUDA_VISIBLE_DEVICES=<span class="hljs-string">&quot;&quot;</span> pytest tests/test_logging.py'}}),nl=new y({props:{code:'CUDA_VISIBLE_DEVICES="1" pytest tests/test_logging.py,',highlighted:'CUDA_VISIBLE_DEVICES=<span class="hljs-string">&quot;1&quot;</span> pytest tests/test_logging.py'}}),pl=new y({props:{code:`@require_torch_multi_gpu
def test_example_with_multi_gpu():,`,highlighted:`<span class="hljs-meta">@require_torch_multi_gpu</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_example_with_multi_gpu</span>():`}}),fl=new y({props:{code:`@require_tf
def test_tf_thing_with_tensorflow():,`,highlighted:`<span class="hljs-meta">@require_tf</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_tf_thing_with_tensorflow</span>():`}}),hl=new y({props:{code:`@require_torch_gpu
@slow
def test_example_slow_on_gpu():,`,highlighted:`<span class="hljs-meta">@require_torch_gpu</span>
<span class="hljs-meta">@slow</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_example_slow_on_gpu</span>():`}}),ul=new y({props:{code:`@parameterized.expand(...)
@require_torch_multi_gpu
def test_integration_foo():,`,highlighted:`<span class="hljs-meta">@parameterized.expand(<span class="hljs-params">...</span>)</span>
<span class="hljs-meta">@require_torch_multi_gpu</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_integration_foo</span>():`}}),dl=new y({props:{code:`from transformers.testing_utils import get_gpu_count
n_gpu = get_gpu_count() # works with torch and tf,`,highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> get_gpu_count
n_gpu = get_gpu_count() <span class="hljs-comment"># works with torch and tf</span>`}}),cl=new E({}),vl=new y({props:{code:"CUDA_VISIBLE_DEVICES=0,1 RUN_SLOW=1 pytest -sv tests/test_trainer_distributed.py,",highlighted:"CUDA_VISIBLE_DEVICES=0,1 RUN_SLOW=1 pytest -sv tests/test_trainer_distributed.py"}}),wl=new E({}),yl=new y({props:{code:"pytest -s tests/test_logging.py,",highlighted:"pytest -s tests/test_logging.py"}}),$l=new y({props:{code:"py.test tests --junitxml=result.xml,",highlighted:"py.test tests --junitxml=result.xml"}}),El=new E({}),gl=new y({props:{code:"pytest --color=no tests/test_logging.py,",highlighted:"pytest --color=no tests/test_logging.py"}}),bl=new E({}),kl=new y({props:{code:"pytest --pastebin=failed tests/test_logging.py,",highlighted:"pytest --pastebin=failed tests/test_logging.py"}}),Cl=new y({props:{code:"pytest --pastebin=all tests/test_logging.py,",highlighted:"pytest --pastebin=all tests/test_logging.py"}}),jl=new E({}),Pl=new E({}),Ol=new y({props:{code:`# test_this1.py
import unittest
from parameterized import parameterized
class TestMathUnitTest(unittest.TestCase):
    @parameterized.expand([
        ("negative", -1.5, -2.0),
        ("integer", 1, 1.0),
        ("large fraction", 1.6, 1),
    ])
    def test_floor(self, name, input, expected):
        assert_equal(math.floor(input), expected),`,highlighted:`<span class="hljs-comment"># test_this1.py</span>
<span class="hljs-keyword">import</span> unittest
<span class="hljs-keyword">from</span> parameterized <span class="hljs-keyword">import</span> parameterized
<span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMathUnitTest</span>(unittest.TestCase):
<span class="hljs-meta">    @parameterized.expand(<span class="hljs-params">[
        (<span class="hljs-params"><span class="hljs-string">&quot;negative&quot;</span>, -<span class="hljs-number">1.5</span>, -<span class="hljs-number">2.0</span></span>),
        (<span class="hljs-params"><span class="hljs-string">&quot;integer&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1.0</span></span>),
        (<span class="hljs-params"><span class="hljs-string">&quot;large fraction&quot;</span>, <span class="hljs-number">1.6</span>, <span class="hljs-number">1</span></span>),
    ]</span>)</span>
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_floor</span>(<span class="hljs-params">self, name, <span class="hljs-built_in">input</span>, expected</span>):
        assert_equal(math.floor(<span class="hljs-built_in">input</span>), expected)`}}),Il=new y({props:{code:'pytest -k "negative and integer" tests/test_mytest.py,',highlighted:'pytest -k <span class="hljs-string">&quot;negative and integer&quot;</span> tests/test_mytest.py'}}),Tl=new y({props:{code:'pytest -k "not negative" tests/test_mytest.py,',highlighted:'pytest -k <span class="hljs-string">&quot;not negative&quot;</span> tests/test_mytest.py'}}),Al=new y({props:{code:"pytest test_this1.py --collect-only -q,",highlighted:"pytest test_this1.py --collect-only -q"}}),Dl=new y({props:{code:`test_this1.py::TestMathUnitTest::test_floor_0_negative
test_this1.py::TestMathUnitTest::test_floor_1_integer
test_this1.py::TestMathUnitTest::test_floor_2_large_fraction,`,highlighted:`test_this1.py::TestMathUnitTest::test_floor_0_negative
test_this1.py::TestMathUnitTest::test_floor_1_integer
test_this1.py::TestMathUnitTest::test_floor_2_large_fraction`}}),Sl=new y({props:{code:"pytest test_this1.py::TestMathUnitTest::test_floor_0_negative  test_this1.py::TestMathUnitTest::test_floor_1_integer,",highlighted:"pytest test_this1.py::TestMathUnitTest::test_floor_0_negative  test_this1.py::TestMathUnitTest::test_floor_1_integer"}}),Ll=new y({props:{code:`# test_this2.py
import pytest
@pytest.mark.parametrize(
    "name, input, expected",
    [
        ("negative", -1.5, -2.0),
        ("integer", 1, 1.0),
        ("large fraction", 1.6, 1),
    ],
)
def test_floor(name, input, expected):
    assert_equal(math.floor(input), expected),`,highlighted:`<span class="hljs-comment"># test_this2.py</span>
<span class="hljs-keyword">import</span> pytest
<span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params">
    <span class="hljs-string">&quot;name, input, expected&quot;</span>,
    [
        (<span class="hljs-params"><span class="hljs-string">&quot;negative&quot;</span>, -<span class="hljs-number">1.5</span>, -<span class="hljs-number">2.0</span></span>),
        (<span class="hljs-params"><span class="hljs-string">&quot;integer&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1.0</span></span>),
        (<span class="hljs-params"><span class="hljs-string">&quot;large fraction&quot;</span>, <span class="hljs-number">1.6</span>, <span class="hljs-number">1</span></span>),
    ],
</span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_floor</span>(<span class="hljs-params">name, <span class="hljs-built_in">input</span>, expected</span>):
    assert_equal(math.floor(<span class="hljs-built_in">input</span>), expected)`}}),Ul=new y({props:{code:"pytest test_this2.py --collect-only -q,",highlighted:"pytest test_this2.py --collect-only -q"}}),Nl=new y({props:{code:`test_this2.py::test_floor[integer-1-1.0]
test_this2.py::test_floor[negative--1.5--2.0]
test_this2.py::test_floor[large fraction-1.6-1],`,highlighted:`test_this2.py::test_floor[integer-1-1.0]
test_this2.py::test_floor[negative--1.5--2.0]
test_this2.py::test_floor[large fraction-1.6-1]`}}),Hl=new y({props:{code:"pytest test_this2.py::test_floor[negative--1.5--2.0] test_this2.py::test_floor[integer-1-1.0],",highlighted:"pytest test_this2.py::test_floor[negative--1.5--2.0] test_this2.py::test_floor[integer-1-1.0]"}}),zl=new E({}),Wl=new y({props:{code:`from transformers.testing_utils import TestCasePlus
class PathExampleTest(TestCasePlus):
    def test_something_involving_local_locations(self):
        data_dir = self.tests_dir / "fixtures/tests_samples/wmt_en_ro",`,highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> TestCasePlus
<span class="hljs-keyword">class</span> <span class="hljs-title class_">PathExampleTest</span>(<span class="hljs-title class_ inherited__">TestCasePlus</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_something_involving_local_locations</span>(<span class="hljs-params">self</span>):
        data_dir = self.tests_dir / <span class="hljs-string">&quot;fixtures/tests_samples/wmt_en_ro&quot;</span>`}}),Bl=new y({props:{code:`from transformers.testing_utils import TestCasePlus
class PathExampleTest(TestCasePlus):
    def test_something_involving_stringified_locations(self):
        examples_dir = self.examples_dir_str,`,highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> TestCasePlus
<span class="hljs-keyword">class</span> <span class="hljs-title class_">PathExampleTest</span>(<span class="hljs-title class_ inherited__">TestCasePlus</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_something_involving_stringified_locations</span>(<span class="hljs-params">self</span>):
        examples_dir = self.examples_dir_str`}}),Yl=new E({}),Vl=new y({props:{code:`from transformers.testing_utils import TestCasePlus
class ExamplesTests(TestCasePlus):
    def test_whatever(self):
        tmp_dir = self.get_auto_remove_tmp_dir(),`,highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> TestCasePlus
<span class="hljs-keyword">class</span> <span class="hljs-title class_">ExamplesTests</span>(<span class="hljs-title class_ inherited__">TestCasePlus</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_whatever</span>(<span class="hljs-params">self</span>):
        tmp_dir = self.get_auto_remove_tmp_dir()`}}),Jl=new y({props:{code:`def test_whatever(self):
    tmp_dir = self.get_auto_remove_tmp_dir(),`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_whatever</span>(<span class="hljs-params">self</span>):
    tmp_dir = self.get_auto_remove_tmp_dir()`}}),Zl=new y({props:{code:`def test_whatever(self):
    tmp_dir = self.get_auto_remove_tmp_dir("./xxx"),`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_whatever</span>(<span class="hljs-params">self</span>):
    tmp_dir = self.get_auto_remove_tmp_dir(<span class="hljs-string">&quot;./xxx&quot;</span>)`}}),Ys=new PE({props:{$$slots:{default:[fq]},$$scope:{ctx:_e}}}),Vs=new PE({props:{$$slots:{default:[hq]},$$scope:{ctx:_e}}}),Ql=new E({}),ea=new y({props:{code:`import os
from transformers.testing_utils import ExtendSysPath
bindir = os.path.abspath(os.path.dirname(__file__))
with ExtendSysPath(f"{bindir}/.."):
    from test_trainer import TrainerIntegrationCommon  # noqa,`,highlighted:`<span class="hljs-keyword">import</span> os
<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> ExtendSysPath
bindir = os.path.abspath(os.path.dirname(__file__))
<span class="hljs-keyword">with</span> ExtendSysPath(<span class="hljs-string">f&quot;<span class="hljs-subst">{bindir}</span>/..&quot;</span>):
    <span class="hljs-keyword">from</span> test_trainer <span class="hljs-keyword">import</span> TrainerIntegrationCommon  <span class="hljs-comment"># noqa</span>`}}),ta=new E({}),ra=new E({}),la=new y({props:{code:`@unittest.skip("this bug needs to be fixed")
def test_feature_x():,`,highlighted:`<span class="hljs-meta">@unittest.skip(<span class="hljs-params"><span class="hljs-string">&quot;this bug needs to be fixed&quot;</span></span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_feature_x</span>():`}}),aa=new y({props:{code:'@pytest.mark.skip(reason="this bug needs to be fixed"),',highlighted:'<span class="hljs-meta">@pytest.mark.skip(<span class="hljs-params">reason=<span class="hljs-string">&quot;this bug needs to be fixed&quot;</span></span>)</span>'}}),ia=new y({props:{code:`@pytest.mark.xfail
def test_feature_x():,`,highlighted:`<span class="hljs-meta">@pytest.mark.xfail</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_feature_x</span>():`}}),na=new y({props:{code:`def test_feature_x():
    if not has_something():
        pytest.skip("unsupported configuration"),`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_feature_x</span>():
    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> has_something():
        pytest.skip(<span class="hljs-string">&quot;unsupported configuration&quot;</span>)`}}),pa=new y({props:{code:`import pytest
if not pytest.config.getoption("--custom-flag"):
    pytest.skip("--custom-flag is missing, skipping tests", allow_module_level=True),`,highlighted:`<span class="hljs-keyword">import</span> pytest
<span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> pytest.config.getoption(<span class="hljs-string">&quot;--custom-flag&quot;</span>):
    pytest.skip(<span class="hljs-string">&quot;--custom-flag is missing, skipping tests&quot;</span>, allow_module_level=<span class="hljs-literal">True</span>)`}}),fa=new y({props:{code:`def test_feature_x():
    pytest.xfail("expected to fail until bug XYZ is fixed"),`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_feature_x</span>():
    pytest.xfail(<span class="hljs-string">&quot;expected to fail until bug XYZ is fixed&quot;</span>)`}}),ha=new y({props:{code:'docutils = pytest.importorskip("docutils", minversion="0.3"),',highlighted:'docutils = pytest.importorskip(<span class="hljs-string">&quot;docutils&quot;</span>, minversion=<span class="hljs-string">&quot;0.3&quot;</span>)'}}),ua=new y({props:{code:`@pytest.mark.skipif(sys.version_info < (3,6), reason="requires python3.6 or higher")
def test_feature_x():,`,highlighted:`<span class="hljs-meta">@pytest.mark.skipif(<span class="hljs-params">sys.version_info &lt; (<span class="hljs-params"><span class="hljs-number">3</span>,<span class="hljs-number">6</span></span>), reason=<span class="hljs-string">&quot;requires python3.6 or higher&quot;</span></span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_feature_x</span>():`}}),da=new y({props:{code:`@unittest.skipIf(torch_device == "cpu", "Can't do half precision")
def test_feature_x():,`,highlighted:`<span class="hljs-meta">@unittest.skipIf(<span class="hljs-params">torch_device == <span class="hljs-string">&quot;cpu&quot;</span>, <span class="hljs-string">&quot;Can&#x27;t do half precision&quot;</span></span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_feature_x</span>():`}}),ca=new y({props:{code:`@pytest.mark.skipif(sys.platform == 'win32', reason="does not run on windows")
class TestClass():
    def test_feature_x(self):,`,highlighted:`<span class="hljs-meta">@pytest.mark.skipif(<span class="hljs-params">sys.platform == <span class="hljs-string">&#x27;win32&#x27;</span>, reason=<span class="hljs-string">&quot;does not run on windows&quot;</span></span>)</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">TestClass</span>():
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_feature_x</span>(<span class="hljs-params">self</span>):`}}),_a=new E({}),va=new y({props:{code:`from transformers.testing_utils import slow
@slow
def test_integration_foo():,`,highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> slow
<span class="hljs-meta">@slow</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_integration_foo</span>():`}}),wa=new y({props:{code:"RUN_SLOW=1 pytest tests,",highlighted:"RUN_SLOW=1 pytest tests"}}),ya=new y({props:{code:`@parameterized.expand(...)
@slow
def test_integration_foo():,`,highlighted:`<span class="hljs-meta">@parameterized.expand(<span class="hljs-params">...</span>)</span>
<span class="hljs-meta">@slow</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_integration_foo</span>():`}}),$a=new y({props:{code:"grep tiny tests examples,",highlighted:"grep tiny tests examples"}}),ba=new E({}),Ca=new y({props:{code:`import sys
def print_to_stdout(s): print(s)
def print_to_stderr(s): sys.stderr.write(s)
def test_result_and_stdout(capsys):
    msg = "Hello"
    print_to_stdout(msg)
    print_to_stderr(msg)
    out, err = capsys.readouterr() # consume the captured output streams
    # optional: if you want to replay the consumed streams:
    sys.stdout.write(out)
    sys.stderr.write(err)
    # test:
    assert msg in out
    assert msg in err,`,highlighted:`<span class="hljs-keyword">import</span> sys
<span class="hljs-keyword">def</span> <span class="hljs-title function_">print_to_stdout</span>(<span class="hljs-params">s</span>): <span class="hljs-built_in">print</span>(s)
<span class="hljs-keyword">def</span> <span class="hljs-title function_">print_to_stderr</span>(<span class="hljs-params">s</span>): sys.stderr.write(s)
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_result_and_stdout</span>(<span class="hljs-params">capsys</span>):
    msg = <span class="hljs-string">&quot;Hello&quot;</span>
    print_to_stdout(msg)
    print_to_stderr(msg)
    out, err = capsys.readouterr() <span class="hljs-comment"># consume the captured output streams</span>
    <span class="hljs-comment"># optional: if you want to replay the consumed streams:</span>
    sys.stdout.write(out)
    sys.stderr.write(err)
    <span class="hljs-comment"># test:</span>
    <span class="hljs-keyword">assert</span> msg <span class="hljs-keyword">in</span> out
    <span class="hljs-keyword">assert</span> msg <span class="hljs-keyword">in</span> err`}}),ja=new y({props:{code:`def raise_exception(msg): raise ValueError(msg)
def test_something_exception():
    msg = "Not a good value"
    error = ''
    try:
        raise_exception(msg)
    except Exception as e:
        error = str(e)
        assert msg in error, f"{msg} is in the exception:\\n{error}",`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">raise_exception</span>(<span class="hljs-params">msg</span>): <span class="hljs-keyword">raise</span> ValueError(msg)
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_something_exception</span>():
    msg = <span class="hljs-string">&quot;Not a good value&quot;</span>
    error = <span class="hljs-string">&#x27;&#x27;</span>
    <span class="hljs-keyword">try</span>:
        raise_exception(msg)
    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:
        error = <span class="hljs-built_in">str</span>(e)
        <span class="hljs-keyword">assert</span> msg <span class="hljs-keyword">in</span> error, <span class="hljs-string">f&quot;<span class="hljs-subst">{msg}</span> is in the exception:\\n<span class="hljs-subst">{error}</span>&quot;</span>`}}),xa=new y({props:{code:`from io import StringIO
from contextlib import redirect_stdout
def print_to_stdout(s): print(s)
def test_result_and_stdout():
    msg = "Hello"
    buffer = StringIO()
    with redirect_stdout(buffer):
        print_to_stdout(msg)
    out = buffer.getvalue()
    # optional: if you want to replay the consumed streams:
    sys.stdout.write(out)
    # test:
    assert msg in out,`,highlighted:`<span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> StringIO
<span class="hljs-keyword">from</span> contextlib <span class="hljs-keyword">import</span> redirect_stdout
<span class="hljs-keyword">def</span> <span class="hljs-title function_">print_to_stdout</span>(<span class="hljs-params">s</span>): <span class="hljs-built_in">print</span>(s)
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_result_and_stdout</span>():
    msg = <span class="hljs-string">&quot;Hello&quot;</span>
    buffer = StringIO()
    <span class="hljs-keyword">with</span> redirect_stdout(buffer):
        print_to_stdout(msg)
    out = buffer.getvalue()
    <span class="hljs-comment"># optional: if you want to replay the consumed streams:</span>
    sys.stdout.write(out)
    <span class="hljs-comment"># test:</span>
    <span class="hljs-keyword">assert</span> msg <span class="hljs-keyword">in</span> out`}}),Pa=new y({props:{code:`from transformers.testing_utils import CaptureStdout
with CaptureStdout() as cs:
    function_that_writes_to_stdout()
print(cs.out),`,highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> CaptureStdout
<span class="hljs-keyword">with</span> CaptureStdout() <span class="hljs-keyword">as</span> cs:
    function_that_writes_to_stdout()
<span class="hljs-built_in">print</span>(cs.out)`}}),Oa=new y({props:{code:`from transformers.testing_utils import CaptureStdout
msg = "Secret message\\r"
final = "Hello World"
with CaptureStdout() as cs:
    print(msg + final)
assert cs.out == final+"\\n", f"captured: {cs.out}, expecting {final}",`,highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> CaptureStdout
msg = <span class="hljs-string">&quot;Secret message\\r&quot;</span>
final = <span class="hljs-string">&quot;Hello World&quot;</span>
<span class="hljs-keyword">with</span> CaptureStdout() <span class="hljs-keyword">as</span> cs:
    <span class="hljs-built_in">print</span>(msg + final)
<span class="hljs-keyword">assert</span> cs.out == final+<span class="hljs-string">&quot;\\n&quot;</span>, <span class="hljs-string">f&quot;captured: <span class="hljs-subst">{cs.out}</span>, expecting <span class="hljs-subst">{final}</span>&quot;</span>`}}),Ia=new y({props:{code:`from transformers.testing_utils import CaptureStderr
with CaptureStderr() as cs:
    function_that_writes_to_stderr()
print(cs.err),`,highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> CaptureStderr
<span class="hljs-keyword">with</span> CaptureStderr() <span class="hljs-keyword">as</span> cs:
    function_that_writes_to_stderr()
<span class="hljs-built_in">print</span>(cs.err)`}}),Ta=new y({props:{code:`from transformers.testing_utils import CaptureStd
with CaptureStd() as cs:
    function_that_writes_to_stdout_and_stderr()
print(cs.err, cs.out),`,highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> CaptureStd
<span class="hljs-keyword">with</span> CaptureStd() <span class="hljs-keyword">as</span> cs:
    function_that_writes_to_stdout_and_stderr()
<span class="hljs-built_in">print</span>(cs.err, cs.out)`}}),Aa=new E({}),Da=new y({props:{code:`from transformers import logging
from transformers.testing_utils import CaptureLogger

msg = "Testing 1, 2, 3"
logging.set_verbosity_info()
logger = logging.get_logger("transformers.models.bart.tokenization_bart")
with CaptureLogger(logger) as cl:
    logger.info(msg)
assert cl.out, msg+"\\n",`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> logging
<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> CaptureLogger

msg = <span class="hljs-string">&quot;Testing 1, 2, 3&quot;</span>
logging.set_verbosity_info()
logger = logging.get_logger(<span class="hljs-string">&quot;transformers.models.bart.tokenization_bart&quot;</span>)
<span class="hljs-keyword">with</span> CaptureLogger(logger) <span class="hljs-keyword">as</span> cl:
    logger.info(msg)
<span class="hljs-keyword">assert</span> cl.out, msg+<span class="hljs-string">&quot;\\n&quot;</span>`}}),Sa=new E({}),La=new y({props:{code:`from transformers.testing_utils import mockenv
class HfArgumentParserTest(unittest.TestCase):
    @mockenv(TRANSFORMERS_VERBOSITY="error")
    def test_env_override(self):
        env_level_str = os.getenv("TRANSFORMERS_VERBOSITY", None),`,highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> mockenv
<span class="hljs-keyword">class</span> <span class="hljs-title class_">HfArgumentParserTest</span>(unittest.TestCase):
<span class="hljs-meta">    @mockenv(<span class="hljs-params">TRANSFORMERS_VERBOSITY=<span class="hljs-string">&quot;error&quot;</span></span>)</span>
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_env_override</span>(<span class="hljs-params">self</span>):
        env_level_str = os.getenv(<span class="hljs-string">&quot;TRANSFORMERS_VERBOSITY&quot;</span>, <span class="hljs-literal">None</span>)`}}),Ua=new y({props:{code:`from transformers.testing_utils import TestCasePlus
class EnvExampleTest(TestCasePlus):
    def test_external_prog(self):
        env = self.get_env()
        # now call the external program, passing \`env\` to it,`,highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> TestCasePlus
<span class="hljs-keyword">class</span> <span class="hljs-title class_">EnvExampleTest</span>(<span class="hljs-title class_ inherited__">TestCasePlus</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_external_prog</span>(<span class="hljs-params">self</span>):
        env = self.get_env()
        <span class="hljs-comment"># now call the external program, passing \`env\` to it</span>`}}),Na=new E({}),Ha=new y({props:{code:`seed = 42

# python RNG
import random
random.seed(seed)

# pytorch RNGs
import torch
torch.manual_seed(seed)
torch.backends.cudnn.deterministic = True
if torch.cuda.is_available(): torch.cuda.manual_seed_all(seed)

# numpy RNG
import numpy as np
np.random.seed(seed)

# tf RNG
tf.random.set_seed(seed),`,highlighted:`seed = <span class="hljs-number">42</span>

<span class="hljs-comment"># python RNG</span>
<span class="hljs-keyword">import</span> random
random.seed(seed)

<span class="hljs-comment"># pytorch RNGs</span>
<span class="hljs-keyword">import</span> torch
torch.manual_seed(seed)
torch.backends.cudnn.deterministic = <span class="hljs-literal">True</span>
<span class="hljs-keyword">if</span> torch.cuda.is_available(): torch.cuda.manual_seed_all(seed)

<span class="hljs-comment"># numpy RNG</span>
<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np
np.random.seed(seed)

<span class="hljs-comment"># tf RNG</span>
tf.random.set_seed(seed)`}}),za=new E({}),Ra=new y({props:{code:"pytest tests/test_logging.py -W error::UserWarning --pdb,",highlighted:"pytest tests/test_logging.py -W error::UserWarning --pdb"}}),Ga=new E({}),Ya=new E({}),Va=new y({props:{code:`- run:
    name: run CI experiment
    command: |
        set +euo pipefail
        echo "setting run-all-despite-any-errors-mode"
        this_command_will_fail
        echo "but bash continues to run"
        # emulate another failure
        false
        # but the last command must be a success
        echo "during experiment do not remove: reporting success to CI, even if there were failures",`,highlighted:`<span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span>
    <span class="hljs-attr">name:</span> <span class="hljs-string">run</span> <span class="hljs-string">CI</span> <span class="hljs-string">experiment</span>
    <span class="hljs-attr">command:</span> <span class="hljs-string">|
        set +euo pipefail
        echo &quot;setting run-all-despite-any-errors-mode&quot;
        this_command_will_fail
        echo &quot;but bash continues to run&quot;
        # emulate another failure
        false
        # but the last command must be a success
        echo &quot;during experiment do not remove: reporting success to CI, even if there were failures&quot;</span>`}}),Ja=new y({props:{code:"cmd_that_may_fail || true,",highlighted:'cmd_that_may_fail || <span class="hljs-literal">true</span>'}}),{c(){$=l("meta"),x=f(),g=l("h1"),b=l("a"),A=l("span"),d(j.$$.fragment),z=f(),D=l("span"),O=o("Testing"),k=f(),q=l("p"),R=o("Let\u2019s take a look at how \u{1F917} Transformer models are tested and how you can write new tests and improve the existing ones."),Nt=f(),$e=l("p"),Be=o("There are 2 test suites in the repository:"),S=f(),ve=l("ol"),Ye=l("li"),Ht=l("code"),si=o("tests"),OE=o(" \u2014 tests for the general API"),IE=f(),oi=l("li"),fp=l("code"),TE=o("examples"),AE=o(" \u2014 tests primarily for various applications that aren\u2019t part of the API"),fm=f(),Ve=l("h2"),zt=l("a"),hp=l("span"),d(Uo.$$.fragment),DE=f(),up=l("span"),SE=o("How transformers are tested"),hm=f(),Rt=l("ol"),No=l("li"),Ho=l("p"),qE=o(`Once a PR is submitted it gets tested with 9 CircleCi jobs. Every new commit to that PR gets retested. These jobs
are defined in this `),zo=l("a"),LE=o("config file"),UE=o(`, so that if needed you can reproduce the same
environment on your machine.`),NE=f(),Ro=l("p"),HE=o("These CI jobs don\u2019t run "),dp=l("code"),zE=o("@slow"),RE=o(" tests."),GE=f(),Go=l("li"),Fo=l("p"),FE=o("There are 3 jobs run by "),Mo=l("a"),ME=o("github actions"),WE=o(":"),BE=f(),Je=l("ul"),cp=l("li"),ri=l("p"),Wo=l("a"),YE=o("torch hub integration"),VE=o(`: checks whether torch hub
integration works.`),JE=f(),mp=l("li"),L=l("p"),Bo=l("a"),XE=o("self-hosted (push)"),ZE=o(`: runs fast tests on GPU only on commits on
`),_p=l("code"),KE=o("master"),QE=o(". It only runs if a commit on "),vp=l("code"),eg=o("master"),tg=o(" has updated the code in one of the following folders: "),wp=l("code"),sg=o("src"),og=o(`,
`),yp=l("code"),rg=o("tests"),lg=o(", "),$p=l("code"),ag=o(".github"),ig=o(" (to prevent running on added model cards, notebooks, etc.)"),ng=f(),Ep=l("li"),Ee=l("p"),Yo=l("a"),pg=o("self-hosted runner"),fg=o(`: runs normal and slow tests on GPU in
`),gp=l("code"),hg=o("tests"),ug=o(" and "),bp=l("code"),dg=o("examples"),cg=o(":"),um=f(),d(Vo.$$.fragment),dm=f(),Gt=l("p"),mg=o("The results can be observed "),Jo=l("a"),_g=o("here"),vg=o("."),cm=f(),Xe=l("h2"),Ft=l("a"),kp=l("span"),d(Xo.$$.fragment),wg=f(),Cp=l("span"),yg=o("Running tests"),mm=f(),Ze=l("h3"),Mt=l("a"),jp=l("span"),d(Zo.$$.fragment),$g=f(),xp=l("span"),Eg=o("Choosing which tests to run"),_m=f(),Wt=l("p"),gg=o(`This document goes into many details of how tests can be run. If after reading everything, you need even more details
you will find them `),Ko=l("a"),bg=o("here"),kg=o("."),vm=f(),li=l("p"),Cg=o("Here are some most useful ways of running tests."),wm=f(),ai=l("p"),jg=o("Run all:"),ym=f(),d(Qo.$$.fragment),$m=f(),ii=l("p"),xg=o("or:"),Em=f(),d(er.$$.fragment),gm=f(),ni=l("p"),Pg=o("Note that the latter is defined as:"),bm=f(),d(tr.$$.fragment),km=f(),pi=l("p"),Og=o("which tells pytest to:"),Cm=f(),Q=l("ul"),Pp=l("li"),Ig=o("run as many test processes as they are CPU cores (which could be too many if you don\u2019t have a ton of RAM!)"),Tg=f(),Op=l("li"),Ag=o("ensure that all tests from the same file will be run by the same test process"),Dg=f(),Ip=l("li"),Sg=o("do not capture output"),qg=f(),Tp=l("li"),Lg=o("run in verbose mode"),jm=f(),Ke=l("h3"),Bt=l("a"),Ap=l("span"),d(sr.$$.fragment),Ug=f(),Dp=l("span"),Ng=o("Getting the list of all tests"),xm=f(),fi=l("p"),Hg=o("All tests of the test suite:"),Pm=f(),d(or.$$.fragment),Om=f(),hi=l("p"),zg=o("All tests of a given test file:"),Im=f(),d(rr.$$.fragment),Tm=f(),Qe=l("h3"),Yt=l("a"),Sp=l("span"),d(lr.$$.fragment),Rg=f(),qp=l("span"),Gg=o("Run a specific test module"),Am=f(),ui=l("p"),Fg=o("To run an individual test module:"),Dm=f(),d(ar.$$.fragment),Sm=f(),et=l("h3"),Vt=l("a"),Lp=l("span"),d(ir.$$.fragment),Mg=f(),Up=l("span"),Wg=o("Run specific tests"),qm=f(),di=l("p"),Bg=o(`Since unittest is used inside most of the tests, to run specific subtests you need to know the name of the unittest
class containing those tests. For example, it could be:`),Lm=f(),d(nr.$$.fragment),Um=f(),ci=l("p"),Yg=o("Here:"),Nm=f(),ge=l("ul"),mi=l("li"),Np=l("code"),Vg=o("tests/test_optimization.py"),Jg=o(" - the file with tests"),Xg=f(),_i=l("li"),Hp=l("code"),Zg=o("OptimizationTest"),Kg=o(" - the name of the class"),Qg=f(),vi=l("li"),zp=l("code"),eb=o("test_adam_w"),tb=o(" - the name of the specific test function"),Hm=f(),wi=l("p"),sb=o("If the file contains multiple classes, you can choose to run only tests of a given class. For example:"),zm=f(),d(pr.$$.fragment),Rm=f(),yi=l("p"),ob=o("will run all the tests inside that class."),Gm=f(),Jt=l("p"),rb=o("As mentioned earlier you can see what tests are contained inside the "),Rp=l("code"),lb=o("OptimizationTest"),ab=o(" class by running:"),Fm=f(),d(fr.$$.fragment),Mm=f(),$i=l("p"),ib=o("You can run tests by keyword expressions."),Wm=f(),Xt=l("p"),nb=o("To run only tests whose name contains "),Gp=l("code"),pb=o("adam"),fb=o(":"),Bm=f(),d(hr.$$.fragment),Ym=f(),ee=l("p"),hb=o("Logical "),Fp=l("code"),ub=o("and"),db=o(" and "),Mp=l("code"),cb=o("or"),mb=o(" can be used to indicate whether all keywords should match or either. "),Wp=l("code"),_b=o("not"),vb=o(` can be used to
negate.`),Vm=f(),Zt=l("p"),wb=o("To run all tests except those whose name contains "),Bp=l("code"),yb=o("adam"),$b=o(":"),Jm=f(),d(ur.$$.fragment),Xm=f(),Ei=l("p"),Eb=o("And you can combine the two patterns in one:"),Zm=f(),d(dr.$$.fragment),Km=f(),be=l("p"),gb=o("For example to run both "),Yp=l("code"),bb=o("test_adafactor"),kb=o(" and "),Vp=l("code"),Cb=o("test_adam_w"),jb=o(" you can use:"),Qm=f(),d(cr.$$.fragment),e_=f(),Kt=l("p"),xb=o("Note that we use "),Jp=l("code"),Pb=o("or"),Ob=o(" here, since we want either of the keywords to match to include both."),t_=f(),Qt=l("p"),Ib=o("If you want to include only tests that include both patterns, "),Xp=l("code"),Tb=o("and"),Ab=o(" is to be used:"),s_=f(),d(mr.$$.fragment),o_=f(),tt=l("h3"),es=l("a"),Zp=l("span"),d(_r.$$.fragment),Db=f(),Kp=l("span"),Sb=o("Run only modified tests"),r_=f(),ts=l("p"),qb=o("You can run the tests related to the unstaged files or the current branch (according to Git) by using "),vr=l("a"),Lb=o("pytest-picked"),Ub=o(`. This is a great way of quickly testing your changes didn\u2019t break
anything, since it won\u2019t run the tests related to files you didn\u2019t touch.`),l_=f(),d(wr.$$.fragment),a_=f(),d(yr.$$.fragment),i_=f(),gi=l("p"),Nb=o("All tests will be run from files and folders which are modified, but not yet committed."),n_=f(),st=l("h3"),ss=l("a"),Qp=l("span"),d($r.$$.fragment),Hb=f(),ef=l("span"),zb=o("Automatically rerun failed tests on source modification"),p_=f(),Er=l("p"),gr=l("a"),Rb=o("pytest-xdist"),Gb=o(` provides a very useful feature of detecting all failed
tests, and then waiting for you to modify files and continuously re-rerun those failing tests until they pass while you
fix them. So that you don\u2019t need to re start pytest after you made the fix. This is repeated until all tests pass after
which again a full run is performed.`),f_=f(),d(br.$$.fragment),h_=f(),ot=l("p"),Fb=o("To enter the mode: "),tf=l("code"),Mb=o("pytest -f"),Wb=o(" or "),sf=l("code"),Bb=o("pytest --looponfail"),u_=f(),ke=l("p"),Yb=o("File changes are detected by looking at "),of=l("code"),Vb=o("looponfailroots"),Jb=o(` root directories and all of their contents (recursively).
If the default for this value does not work for you, you can change it in your project by setting a configuration
option in `),rf=l("code"),Xb=o("setup.cfg"),Zb=o(":"),d_=f(),d(kr.$$.fragment),c_=f(),Ce=l("p"),Kb=o("or "),lf=l("code"),Qb=o("pytest.ini"),e3=o("/"),af=l("code"),t3=o("tox.ini"),s3=o(" files:"),m_=f(),d(Cr.$$.fragment),__=f(),bi=l("p"),o3=o(`This would lead to only looking for file changes in the respective directories, specified relatively to the ini-file\u2019s
directory.`),v_=f(),jr=l("p"),xr=l("a"),r3=o("pytest-watch"),l3=o(" is an alternative implementation of this functionality."),w_=f(),rt=l("h3"),os=l("a"),nf=l("span"),d(Pr.$$.fragment),a3=f(),pf=l("span"),i3=o("Skip a test module"),y_=f(),rs=l("p"),n3=o(`If you want to run all test modules, except a few you can exclude them by giving an explicit list of tests to run. For
example, to run all except `),ff=l("code"),p3=o("test_modeling_*.py"),f3=o(" tests:"),$_=f(),d(Or.$$.fragment),E_=f(),lt=l("h3"),ls=l("a"),hf=l("span"),d(Ir.$$.fragment),h3=f(),uf=l("span"),u3=o("Clearing state"),g_=f(),ki=l("p"),d3=o("CI builds and when isolation is important (against speed), cache should be cleared:"),b_=f(),d(Tr.$$.fragment),k_=f(),at=l("h3"),as=l("a"),df=l("span"),d(Ar.$$.fragment),c3=f(),cf=l("span"),m3=o("Running tests in parallel"),C_=f(),M=l("p"),_3=o("As mentioned earlier "),mf=l("code"),v3=o("make test"),w3=o(" runs tests in parallel via "),_f=l("code"),y3=o("pytest-xdist"),$3=o(" plugin ("),vf=l("code"),E3=o("-n X"),g3=o(" argument, e.g. "),wf=l("code"),b3=o("-n 2"),k3=o(`
to run 2 parallel jobs).`),j_=f(),we=l("p"),yf=l("code"),C3=o("pytest-xdist"),j3=o("\u2019s "),$f=l("code"),x3=o("--dist="),P3=o(" option allows one to control how the tests are grouped. "),Ef=l("code"),O3=o("--dist=loadfile"),I3=o(` puts the
tests located in one file onto the same process.`),x_=f(),je=l("p"),T3=o("Since the order of executed tests is different and unpredictable, if running the test suite with "),gf=l("code"),A3=o("pytest-xdist"),D3=o(`
produces failures (meaning we have some undetected coupled tests), use `),Dr=l("a"),S3=o("pytest-replay"),q3=o(` to replay the tests in the same order, which should help with then somehow
reducing that failing sequence to a minimum.`),P_=f(),it=l("h3"),is=l("a"),bf=l("span"),d(Sr.$$.fragment),L3=f(),kf=l("span"),U3=o("Test order and repetition"),O_=f(),Ci=l("p"),N3=o(`It\u2019s good to repeat the tests several times, in sequence, randomly, or in sets, to detect any potential
inter-dependency and state-related bugs (tear down). And the straightforward multiple repetition is just good to detect
some problems that get uncovered by randomness of DL.`),I_=f(),nt=l("h4"),ns=l("a"),Cf=l("span"),d(qr.$$.fragment),H3=f(),jf=l("span"),z3=o("Repeat tests"),T_=f(),ji=l("ul"),xi=l("li"),Lr=l("a"),R3=o("pytest-flakefinder"),G3=o(":"),A_=f(),d(Ur.$$.fragment),D_=f(),Pi=l("p"),F3=o("And then run every test multiple times (50 by default):"),S_=f(),d(Nr.$$.fragment),q_=f(),d(ps.$$.fragment),L_=f(),d(fs.$$.fragment),U_=f(),pt=l("h4"),hs=l("a"),xf=l("span"),d(Hr.$$.fragment),M3=f(),Pf=l("span"),W3=o("Run tests in a random order"),N_=f(),d(zr.$$.fragment),H_=f(),us=l("p"),B3=o("Important: the presence of "),Of=l("code"),Y3=o("pytest-random-order"),V3=o(` will automatically randomize tests, no configuration change or
command line options is required.`),z_=f(),ds=l("p"),J3=o(`As explained earlier this allows detection of coupled tests - where one test\u2019s state affects the state of another. When
`),If=l("code"),X3=o("pytest-random-order"),Z3=o(" is installed it will print the random seed it used for that session, e.g:"),R_=f(),d(Rr.$$.fragment),G_=f(),Oi=l("p"),K3=o("So that if the given particular sequence fails, you can reproduce it by adding that exact seed, e.g.:"),F_=f(),d(Gr.$$.fragment),M_=f(),cs=l("p"),Q3=o(`It will only reproduce the exact order if you use the exact same list of tests (or no list at all). Once you start to
manually narrowing down the list you can no longer rely on the seed, but have to list them manually in the exact order
they failed and tell pytest to not randomize them instead using `),Tf=l("code"),e2=o("--random-order-bucket=none"),t2=o(", e.g.:"),W_=f(),d(Fr.$$.fragment),B_=f(),Ii=l("p"),s2=o("To disable the shuffling for all tests:"),Y_=f(),d(Mr.$$.fragment),V_=f(),I=l("p"),o2=o("By default "),Af=l("code"),r2=o("--random-order-bucket=module"),l2=o(` is implied, which will shuffle the files on the module levels. It can also
shuffle on `),Df=l("code"),a2=o("class"),i2=o(", "),Sf=l("code"),n2=o("package"),p2=o(", "),qf=l("code"),f2=o("global"),h2=o(" and "),Lf=l("code"),u2=o("none"),d2=o(` levels. For the complete details please see its
`),Wr=l("a"),c2=o("documentation"),m2=o("."),J_=f(),te=l("p"),_2=o("Another randomization alternative is: "),Uf=l("code"),v2=o("pytest-randomly"),w2=o("("),Br=l("a"),y2=o("https://github.com/pytest-dev/pytest-randomly"),$2=o(`). This
module has a very similar functionality/interface, but it doesn\u2019t have the bucket modes available in
`),Nf=l("code"),E2=o("pytest-random-order"),g2=o(". It has the same problem of imposing itself once installed."),X_=f(),ft=l("h3"),ms=l("a"),Hf=l("span"),d(Yr.$$.fragment),b2=f(),zf=l("span"),k2=o("Look and feel variations"),Z_=f(),ht=l("h4"),_s=l("a"),Rf=l("span"),d(Vr.$$.fragment),C2=f(),Gf=l("span"),j2=o("pytest-sugar"),K_=f(),Jr=l("p"),Xr=l("a"),x2=o("pytest-sugar"),P2=o(` is a plugin that improves the look-n-feel, adds a
progressbar, and show tests that fail and the assert instantly. It gets activated automatically upon installation.`),Q_=f(),d(Zr.$$.fragment),ev=f(),Ti=l("p"),O2=o("To run tests without it, run:"),tv=f(),d(Kr.$$.fragment),sv=f(),Ai=l("p"),I2=o("or uninstall it."),ov=f(),ut=l("h4"),vs=l("a"),Ff=l("span"),d(Qr.$$.fragment),T2=f(),Mf=l("span"),A2=o("Report each sub-test name and its progress"),rv=f(),xe=l("p"),D2=o("For a single or a group of tests via "),Wf=l("code"),S2=o("pytest"),q2=o(" (after "),Bf=l("code"),L2=o("pip install pytest-pspec"),U2=o("):"),lv=f(),d(el.$$.fragment),av=f(),dt=l("h4"),ws=l("a"),Yf=l("span"),d(tl.$$.fragment),N2=f(),Vf=l("span"),H2=o("Instantly shows failed tests"),iv=f(),sl=l("p"),ol=l("a"),z2=o("pytest-instafail"),R2=o(` shows failures and errors instantly instead of
waiting until the end of test session.`),nv=f(),d(rl.$$.fragment),pv=f(),d(ll.$$.fragment),fv=f(),ct=l("h3"),ys=l("a"),Jf=l("span"),d(al.$$.fragment),G2=f(),Xf=l("span"),F2=o("To GPU or not to GPU"),hv=f(),$s=l("p"),M2=o("On a GPU-enabled setup, to test in CPU-only mode add "),Zf=l("code"),W2=o('CUDA_VISIBLE_DEVICES=""'),B2=o(":"),uv=f(),d(il.$$.fragment),dv=f(),se=l("p"),Y2=o("or if you have multiple gpus, you can specify which one is to be used by "),Kf=l("code"),V2=o("pytest"),J2=o(`. For example, to use only the
second gpu if you have gpus `),Qf=l("code"),X2=o("0"),Z2=o(" and "),eh=l("code"),K2=o("1"),Q2=o(", you can run:"),cv=f(),d(nl.$$.fragment),mv=f(),Di=l("p"),e5=o("This is handy when you want to run different tasks on different GPUs."),_v=f(),Si=l("p"),t5=o(`Some tests must be run on CPU-only, others on either CPU or GPU or TPU, yet others on multiple-GPUs. The following skip
decorators are used to set the requirements of tests CPU/GPU/TPU-wise:`),vv=f(),U=l("ul"),qi=l("li"),th=l("code"),s5=o("require_torch"),o5=o(" - this test will run only under torch"),r5=f(),Es=l("li"),sh=l("code"),l5=o("require_torch_gpu"),a5=o(" - as "),oh=l("code"),i5=o("require_torch"),n5=o(" plus requires at least 1 GPU"),p5=f(),gs=l("li"),rh=l("code"),f5=o("require_torch_multi_gpu"),h5=o(" - as "),lh=l("code"),u5=o("require_torch"),d5=o(" plus requires at least 2 GPUs"),c5=f(),bs=l("li"),ah=l("code"),m5=o("require_torch_non_multi_gpu"),_5=o(" - as "),ih=l("code"),v5=o("require_torch"),w5=o(" plus requires 0 or 1 GPUs"),y5=f(),ks=l("li"),nh=l("code"),$5=o("require_torch_up_to_2_gpus"),E5=o(" - as "),ph=l("code"),g5=o("require_torch"),b5=o(" plus requires 0 or 1 or 2 GPUs"),k5=f(),Cs=l("li"),fh=l("code"),C5=o("require_torch_tpu"),j5=o(" - as "),hh=l("code"),x5=o("require_torch"),P5=o(" plus requires at least 1 TPU"),wv=f(),Li=l("p"),O5=o("Let\u2019s depict the GPU requirements in the following table:"),yv=f(),C=l("p"),I5=o(`| n gpus | decorator                      |
|--------+--------------------------------|
| `),uh=l("code"),T5=o(">= 0"),A5=o(" | "),dh=l("code"),D5=o("@require_torch"),S5=o(`               |
| `),ch=l("code"),q5=o(">= 1"),L5=o(" | "),mh=l("code"),U5=o("@require_torch_gpu"),N5=o(`           |
| `),_h=l("code"),H5=o(">= 2"),z5=o(" | "),vh=l("code"),R5=o("@require_torch_multi_gpu"),G5=o(`     |
| `),wh=l("code"),F5=o("< 2"),M5=o("  | "),yh=l("code"),W5=o("@require_torch_non_multi_gpu"),B5=o(` |
| `),$h=l("code"),Y5=o("< 3"),V5=o("  | "),Eh=l("code"),J5=o("@require_torch_up_to_2_gpus"),X5=o("  |"),$v=f(),Ui=l("p"),Z5=o("For example, here is a test that must be run only when there are 2 or more GPUs available and pytorch is installed:"),Ev=f(),d(pl.$$.fragment),gv=f(),Pe=l("p"),K5=o("If a test requires "),gh=l("code"),Q5=o("tensorflow"),ek=o(" use the "),bh=l("code"),tk=o("require_tf"),sk=o(" decorator. For example:"),bv=f(),d(fl.$$.fragment),kv=f(),Ni=l("p"),ok=o(`These decorators can be stacked. For example, if a test is slow and requires at least one GPU under pytorch, here is
how to set it up:`),Cv=f(),d(hl.$$.fragment),jv=f(),Oe=l("p"),rk=o("Some decorators like "),kh=l("code"),lk=o("@parametrized"),ak=o(" rewrite test names, therefore "),Ch=l("code"),ik=o("@require_*"),nk=o(` skip decorators have to be listed
last for them to work correctly. Here is an example of the correct usage:`),xv=f(),d(ul.$$.fragment),Pv=f(),js=l("p"),pk=o("This order problem doesn\u2019t exist with "),jh=l("code"),fk=o("@pytest.mark.parametrize"),hk=o(`, you can put it first or last and it will still
work. But it only works with non-unittests.`),Ov=f(),Hi=l("p"),uk=o("Inside tests:"),Iv=f(),zi=l("ul"),xh=l("li"),dk=o("How many GPUs are available:"),Tv=f(),d(dl.$$.fragment),Av=f(),mt=l("h3"),xs=l("a"),Ph=l("span"),d(cl.$$.fragment),ck=f(),Oh=l("span"),mk=o("Distributed training"),Dv=f(),_t=l("p"),Ih=l("code"),_k=o("pytest"),vk=o(` can\u2019t deal with distributed training directly. If this is attempted - the sub-processes don\u2019t do the right
thing and end up thinking they are `),Th=l("code"),wk=o("pytest"),yk=o(` and start running the test suite in loops. It works, however, if one
spawns a normal process that then spawns off multiple workers and manages the IO pipes.`),Sv=f(),Ri=l("p"),$k=o("Here are some tests that use it:"),qv=f(),Ps=l("ul"),Ah=l("li"),ml=l("a"),Ek=o("test_trainer_distributed.py"),gk=f(),Dh=l("li"),_l=l("a"),bk=o("test_deepspeed.py"),Lv=f(),Os=l("p"),kk=o("To jump right into the execution point, search for the "),Sh=l("code"),Ck=o("execute_subprocess_async"),jk=o(" call in those tests."),Uv=f(),Gi=l("p"),xk=o("You will need at least 2 GPUs to see these tests in action:"),Nv=f(),d(vl.$$.fragment),Hv=f(),vt=l("h3"),Is=l("a"),qh=l("span"),d(wl.$$.fragment),Pk=f(),Lh=l("span"),Ok=o("Output capture"),zv=f(),Ie=l("p"),Ik=o("During test execution any output sent to "),Uh=l("code"),Tk=o("stdout"),Ak=o(" and "),Nh=l("code"),Dk=o("stderr"),Sk=o(` is captured. If a test or a setup method fails, its
according captured output will usually be shown along with the failure traceback.`),Rv=f(),W=l("p"),qk=o("To disable output capturing and to get the "),Hh=l("code"),Lk=o("stdout"),Uk=o(" and "),zh=l("code"),Nk=o("stderr"),Hk=o(" normally, use "),Rh=l("code"),zk=o("-s"),Rk=o(" or "),Gh=l("code"),Gk=o("--capture=no"),Fk=o(":"),Gv=f(),d(yl.$$.fragment),Fv=f(),Fi=l("p"),Mk=o("To send test results to JUnit format output:"),Mv=f(),d($l.$$.fragment),Wv=f(),wt=l("h3"),Ts=l("a"),Fh=l("span"),d(El.$$.fragment),Wk=f(),Mh=l("span"),Bk=o("Color control"),Bv=f(),Mi=l("p"),Yk=o("To have no color (e.g., yellow on white background is not readable):"),Yv=f(),d(gl.$$.fragment),Vv=f(),yt=l("h3"),As=l("a"),Wh=l("span"),d(bl.$$.fragment),Vk=f(),Bh=l("span"),Jk=o("Sending test report to online pastebin service"),Jv=f(),Wi=l("p"),Xk=o("Creating a URL for each test failure:"),Xv=f(),d(kl.$$.fragment),Zv=f(),Bi=l("p"),Zk=o(`This will submit test run information to a remote Paste service and provide a URL for each failure. You may select
tests as usual or add for example -x if you only want to send one particular failure.`),Kv=f(),Yi=l("p"),Kk=o("Creating a URL for a whole test session log:"),Qv=f(),d(Cl.$$.fragment),e1=f(),$t=l("h2"),Ds=l("a"),Yh=l("span"),d(jl.$$.fragment),Qk=f(),Vh=l("span"),e4=o("Writing tests"),t1=f(),Te=l("p"),t4=o("\u{1F917} transformers tests are based on "),Jh=l("code"),s4=o("unittest"),o4=o(", but run by "),Xh=l("code"),r4=o("pytest"),l4=o(`, so most of the time features from both systems
can be used.`),s1=f(),oe=l("p"),a4=o("You can read "),xl=l("a"),i4=o("here"),n4=o(` which features are supported, but the important
thing to remember is that most `),Zh=l("code"),p4=o("pytest"),f4=o(` fixtures don\u2019t work. Neither parametrization, but we use the module
`),Kh=l("code"),h4=o("parameterized"),u4=o(" that works in a similar way."),o1=f(),Et=l("h3"),Ss=l("a"),Qh=l("span"),d(Pl.$$.fragment),d4=f(),eu=l("span"),c4=o("Parametrization"),r1=f(),Vi=l("p"),m4=o(`Often, there is a need to run the same test multiple times, but with different arguments. It could be done from within
the test, but then there is no way of running that test for just one set of arguments.`),l1=f(),d(Ol.$$.fragment),a1=f(),qs=l("p"),_4=o("Now, by default this test will be run 3 times, each time with the last 3 arguments of "),tu=l("code"),v4=o("test_floor"),w4=o(` being assigned the
corresponding arguments in the parameter list.`),i1=f(),Ae=l("p"),y4=o("and you could run just the "),su=l("code"),$4=o("negative"),E4=o(" and "),ou=l("code"),g4=o("integer"),b4=o(" sets of params with:"),n1=f(),d(Il.$$.fragment),p1=f(),Ls=l("p"),k4=o("or all but "),ru=l("code"),C4=o("negative"),j4=o(" sub-tests, with:"),f1=f(),d(Tl.$$.fragment),h1=f(),Us=l("p"),x4=o("Besides using the "),lu=l("code"),P4=o("-k"),O4=o(` filter that was just mentioned, you can find out the exact name of each sub-test and run any
or all of them using their exact names.`),u1=f(),d(Al.$$.fragment),d1=f(),Ji=l("p"),I4=o("and it will list:"),c1=f(),d(Dl.$$.fragment),m1=f(),Xi=l("p"),T4=o("So now you can run just 2 specific sub-tests:"),_1=f(),d(Sl.$$.fragment),v1=f(),B=l("p"),A4=o("The module "),ql=l("a"),D4=o("parameterized"),S4=o(` which is already in the developer dependencies
of `),au=l("code"),q4=o("transformers"),L4=o(" works for both: "),iu=l("code"),U4=o("unittests"),N4=o(" and "),nu=l("code"),H4=o("pytest"),z4=o(" tests."),w1=f(),re=l("p"),R4=o("If, however, the test is not a "),pu=l("code"),G4=o("unittest"),F4=o(", you may use "),fu=l("code"),M4=o("pytest.mark.parametrize"),W4=o(` (or you may see it being used in
some existing tests, mostly under `),hu=l("code"),B4=o("examples"),Y4=o(")."),y1=f(),De=l("p"),V4=o("Here is the same example, this time using "),uu=l("code"),J4=o("pytest"),X4=o("\u2019s "),du=l("code"),Z4=o("parametrize"),K4=o(" marker:"),$1=f(),d(Ll.$$.fragment),E1=f(),le=l("p"),Q4=o("Same as with "),cu=l("code"),e0=o("parameterized"),t0=o(", with "),mu=l("code"),s0=o("pytest.mark.parametrize"),o0=o(` you can have a fine control over which sub-tests are
run, if the `),_u=l("code"),r0=o("-k"),l0=o(` filter doesn\u2019t do the job. Except, this parametrization function creates a slightly different set of
names for the sub-tests. Here is what they look like:`),g1=f(),d(Ul.$$.fragment),b1=f(),Zi=l("p"),a0=o("and it will list:"),k1=f(),d(Nl.$$.fragment),C1=f(),Ki=l("p"),i0=o("So now you can run just the specific test:"),j1=f(),d(Hl.$$.fragment),x1=f(),Qi=l("p"),n0=o("as in the previous example."),P1=f(),gt=l("h3"),Ns=l("a"),vu=l("span"),d(zl.$$.fragment),p0=f(),wu=l("span"),f0=o("Files and directories"),O1=f(),Hs=l("p"),h0=o(`In tests often we need to know where things are relative to the current test file, and it\u2019s not trivial since the test
could be invoked from more than one directory or could reside in sub-directories with different depths. A helper class
`),yu=l("code"),u0=o("transformers.test_utils.TestCasePlus"),d0=o(` solves this problem by sorting out all the basic paths and provides easy
accessors to them:`),I1=f(),zs=l("ul"),Rl=l("li"),en=l("p"),$u=l("code"),c0=o("pathlib"),m0=o(" objects (all fully resolved):"),_0=f(),G=l("ul"),Gl=l("li"),Eu=l("code"),v0=o("test_file_path"),w0=o(" - the current test file path, i.e. "),gu=l("code"),y0=o("__file__"),$0=f(),tn=l("li"),bu=l("code"),E0=o("test_file_dir"),g0=o(" - the directory containing the current test file"),b0=f(),Rs=l("li"),ku=l("code"),k0=o("tests_dir"),C0=o(" - the directory of the "),Cu=l("code"),j0=o("tests"),x0=o(" test suite"),P0=f(),Gs=l("li"),ju=l("code"),O0=o("examples_dir"),I0=o(" - the directory of the "),xu=l("code"),T0=o("examples"),A0=o(" test suite"),D0=f(),sn=l("li"),Pu=l("code"),S0=o("repo_root_dir"),q0=o(" - the directory of the repository"),L0=f(),Se=l("li"),Ou=l("code"),U0=o("src_dir"),N0=o(" - the directory of "),Iu=l("code"),H0=o("src"),z0=o(" (i.e. where the "),Tu=l("code"),R0=o("transformers"),G0=o(" sub-dir resides)"),F0=f(),Fl=l("li"),Ml=l("p"),M0=o("stringified paths---same as above but these return paths as strings, rather than "),Au=l("code"),W0=o("pathlib"),B0=o(" objects:"),Y0=f(),F=l("ul"),Du=l("li"),Su=l("code"),V0=o("test_file_path_str"),J0=f(),qu=l("li"),Lu=l("code"),X0=o("test_file_dir_str"),Z0=f(),Uu=l("li"),Nu=l("code"),K0=o("tests_dir_str"),Q0=f(),Hu=l("li"),zu=l("code"),e6=o("examples_dir_str"),t6=f(),Ru=l("li"),Gu=l("code"),s6=o("repo_root_dir_str"),o6=f(),Fu=l("li"),Mu=l("code"),r6=o("src_dir_str"),T1=f(),Fs=l("p"),l6=o(`To start using those all you need is to make sure that the test resides in a subclass of
`),Wu=l("code"),a6=o("transformers.test_utils.TestCasePlus"),i6=o(". For example:"),A1=f(),d(Wl.$$.fragment),D1=f(),Y=l("p"),n6=o("If you don\u2019t need to manipulate paths via "),Bu=l("code"),p6=o("pathlib"),f6=o(` or you just need a path as a string, you can always invoked
`),Yu=l("code"),h6=o("str()"),u6=o(" on the "),Vu=l("code"),d6=o("pathlib"),c6=o(" object or use the accessors ending with "),Ju=l("code"),m6=o("_str"),_6=o(". For example:"),S1=f(),d(Bl.$$.fragment),q1=f(),bt=l("h3"),Ms=l("a"),Xu=l("span"),d(Yl.$$.fragment),v6=f(),Zu=l("span"),w6=o("Temporary files and directories"),L1=f(),Ws=l("p"),y6=o(`Using unique temporary files and directories are essential for parallel test running, so that the tests won\u2019t overwrite
each other\u2019s data. Also we want to get the temporary files and directories removed at the end of each test that created
them. Therefore, using packages like `),Ku=l("code"),$6=o("tempfile"),E6=o(", which address these needs is essential."),U1=f(),on=l("p"),g6=o(`However, when debugging tests, you need to be able to see what goes into the temporary file or directory and you want
to know it\u2019s exact path and not having it randomized on every test re-run.`),N1=f(),qe=l("p"),b6=o("A helper class "),Qu=l("code"),k6=o("transformers.test_utils.TestCasePlus"),C6=o(` is best used for such purposes. It\u2019s a sub-class of
`),ed=l("code"),j6=o("unittest.TestCase"),x6=o(", so we can easily inherit from it in the test modules."),H1=f(),rn=l("p"),P6=o("Here is an example of its usage:"),z1=f(),d(Vl.$$.fragment),R1=f(),Bs=l("p"),O6=o("This code creates a unique temporary directory, and sets "),td=l("code"),I6=o("tmp_dir"),T6=o(" to its location."),G1=f(),ln=l("ul"),sd=l("li"),A6=o("Create a unique temporary dir:"),F1=f(),d(Jl.$$.fragment),M1=f(),Xl=l("p"),od=l("code"),D6=o("tmp_dir"),S6=o(` will contain the path to the created temporary dir. It will be automatically removed at the end of the
test.`),W1=f(),an=l("ul"),rd=l("li"),q6=o("Create a temporary dir of my choice, ensure it\u2019s empty before the test starts and don\u2019t empty it after the test."),B1=f(),d(Zl.$$.fragment),Y1=f(),nn=l("p"),L6=o(`This is useful for debug when you want to monitor a specific directory and want to make sure the previous tests didn\u2019t
leave any data in there.`),V1=f(),pn=l("ul"),Kl=l("li"),kt=l("p"),U6=o("You can override the default behavior by directly overriding the "),ld=l("code"),N6=o("before"),H6=o(" and "),ad=l("code"),z6=o("after"),R6=o(` args, leading to one of the
following behaviors:`),G6=f(),ye=l("ul"),fn=l("li"),id=l("code"),F6=o("before=True"),M6=o(": the temporary dir will always be cleared at the beginning of the test."),W6=f(),hn=l("li"),nd=l("code"),B6=o("before=False"),Y6=o(": if the temporary dir already existed, any existing files will remain there."),V6=f(),un=l("li"),pd=l("code"),J6=o("after=True"),X6=o(": the temporary dir will always be deleted at the end of the test."),Z6=f(),dn=l("li"),fd=l("code"),K6=o("after=False"),Q6=o(": the temporary dir will always be left intact at the end of the test."),J1=f(),d(Ys.$$.fragment),X1=f(),d(Vs.$$.fragment),Z1=f(),Ct=l("h3"),Js=l("a"),hd=l("span"),d(Ql.$$.fragment),e7=f(),ud=l("span"),t7=o("Temporary sys.path override"),K1=f(),Le=l("p"),s7=o("If you need to temporary override "),dd=l("code"),o7=o("sys.path"),r7=o(` to import from another test for example, you can use the
`),cd=l("code"),l7=o("ExtendSysPath"),a7=o(" context manager. Example:"),Q1=f(),d(ea.$$.fragment),ew=f(),jt=l("h3"),Xs=l("a"),md=l("span"),d(ta.$$.fragment),i7=f(),_d=l("span"),n7=o("Skipping tests"),tw=f(),Zs=l("p"),p7=o(`This is useful when a bug is found and a new test is written, yet the bug is not fixed yet. In order to be able to
commit it to the main repository we need make sure it\u2019s skipped during `),vd=l("code"),f7=o("make test"),h7=o("."),sw=f(),cn=l("p"),u7=o("Methods:"),ow=f(),Ks=l("ul"),wd=l("li"),sa=l("p"),d7=o("A "),yd=l("strong"),c7=o("skip"),m7=o(` means that you expect your test to pass only if some conditions are met, otherwise pytest should skip
running the test altogether. Common examples are skipping windows-only tests on non-windows platforms, or skipping
tests that depend on an external resource which is not available at the moment (for example a database).`),_7=f(),$d=l("li"),oa=l("p"),v7=o("A "),Ed=l("strong"),w7=o("xfail"),y7=o(` means that you expect a test to fail for some reason. A common example is a test for a feature not yet
implemented, or a bug not yet fixed. When a test passes despite being expected to fail (marked with
pytest.mark.xfail), it\u2019s an xpass and will be reported in the test summary.`),rw=f(),ae=l("p"),$7=o("One of the important differences between the two is that "),gd=l("code"),E7=o("skip"),g7=o(" doesn\u2019t run the test, and "),bd=l("code"),b7=o("xfail"),k7=o(` does. So if the
code that\u2019s buggy causes some bad state that will affect other tests, do not use `),kd=l("code"),C7=o("xfail"),j7=o("."),lw=f(),xt=l("h4"),Qs=l("a"),Cd=l("span"),d(ra.$$.fragment),x7=f(),jd=l("span"),P7=o("Implementation"),aw=f(),mn=l("ul"),xd=l("li"),O7=o("Here is how to skip whole test unconditionally:"),iw=f(),d(la.$$.fragment),nw=f(),_n=l("p"),I7=o("or via pytest:"),pw=f(),d(aa.$$.fragment),fw=f(),eo=l("p"),T7=o("or the "),Pd=l("code"),A7=o("xfail"),D7=o(" way:"),hw=f(),d(ia.$$.fragment),uw=f(),vn=l("ul"),Od=l("li"),S7=o("Here is how to skip a test based on some internal check inside the test:"),dw=f(),d(na.$$.fragment),cw=f(),wn=l("p"),q7=o("or the whole module:"),mw=f(),d(pa.$$.fragment),_w=f(),to=l("p"),L7=o("or the "),Id=l("code"),U7=o("xfail"),N7=o(" way:"),vw=f(),d(fa.$$.fragment),ww=f(),yn=l("ul"),Td=l("li"),H7=o("Here is how to skip all tests in a module if some import is missing:"),yw=f(),d(ha.$$.fragment),$w=f(),$n=l("ul"),Ad=l("li"),z7=o("Skip a test based on a condition:"),Ew=f(),d(ua.$$.fragment),gw=f(),En=l("p"),R7=o("or:"),bw=f(),d(da.$$.fragment),kw=f(),gn=l("p"),G7=o("or skip the whole module:"),Cw=f(),d(ca.$$.fragment),jw=f(),so=l("p"),F7=o("More details, example and ways are "),ma=l("a"),M7=o("here"),W7=o("."),xw=f(),Pt=l("h3"),oo=l("a"),Dd=l("span"),d(_a.$$.fragment),B7=f(),Sd=l("span"),Y7=o("Slow tests"),Pw=f(),bn=l("p"),V7=o(`The library of tests is ever-growing, and some of the tests take minutes to run, therefore we can\u2019t afford waiting for
an hour for the test suite to complete on CI. Therefore, with some exceptions for essential tests, slow tests should be
marked as in the example below:`),Ow=f(),d(va.$$.fragment),Iw=f(),Ue=l("p"),J7=o("Once a test is marked as "),qd=l("code"),X7=o("@slow"),Z7=o(", to run such tests set "),Ld=l("code"),K7=o("RUN_SLOW=1"),Q7=o(" env var, e.g.:"),Tw=f(),d(wa.$$.fragment),Aw=f(),ie=l("p"),e8=o("Some decorators like "),Ud=l("code"),t8=o("@parameterized"),s8=o(" rewrite test names, therefore "),Nd=l("code"),o8=o("@slow"),r8=o(` and the rest of the skip decorators
`),Hd=l("code"),l8=o("@require_*"),a8=o(" have to be listed last for them to work correctly. Here is an example of the correct usage:"),Dw=f(),d(ya.$$.fragment),Sw=f(),kn=l("p"),i8=o(`As explained at the beginning of this document, slow tests get to run on a scheduled basis, rather than in PRs CI
checks. So it\u2019s possible that some problems will be missed during a PR submission and get merged. Such problems will
get caught during the next scheduled CI job. But it also means that it\u2019s important to run the slow tests on your
machine before submitting the PR.`),qw=f(),Cn=l("p"),n8=o("Here is a rough decision making mechanism for choosing which tests should be marked as slow:"),Lw=f(),jn=l("p"),p8=o(`If the test is focused on one of the library\u2019s internal components (e.g., modeling files, tokenization files,
pipelines), then we should run that test in the non-slow test suite. If it\u2019s focused on an other aspect of the library,
such as the documentation or the examples, then we should run these tests in the slow test suite. And then, to refine
this approach we should have exceptions:`),Uw=f(),ne=l("ul"),zd=l("li"),f8=o(`All tests that need to download a heavy set of weights or a dataset that is larger than ~50MB (e.g., model or
tokenizer integration tests, pipeline integration tests) should be set to slow. If you\u2019re adding a new model, you
should create and upload to the hub a tiny version of it (with random weights) for integration tests. This is
discussed in the following paragraphs.`),h8=f(),Rd=l("li"),u8=o("All tests that need to do a training not specifically optimized to be fast should be set to slow."),d8=f(),Ot=l("li"),c8=o(`We can introduce exceptions if some of these should-be-non-slow tests are excruciatingly slow, and set them to
`),Gd=l("code"),m8=o("@slow"),_8=o(`. Auto-modeling tests, which save and load large files to disk, are a good example of tests that are marked
as `),Fd=l("code"),v8=o("@slow"),w8=o("."),y8=f(),Md=l("li"),$8=o("If a test completes under 1 second on CI (including downloads if any) then it should be a normal test regardless."),Nw=f(),Ne=l("p"),E8=o(`Collectively, all the non-slow tests need to cover entirely the different internals, while remaining fast. For example,
a significant coverage can be achieved by testing with specially created tiny models with random weights. Such models
have the very minimal number of layers (e.g., 2), vocab size (e.g., 1000), etc. Then the `),Wd=l("code"),g8=o("@slow"),b8=o(` tests can use large
slow models to do qualitative testing. To see the use of these simply look for `),Bd=l("em"),k8=o("tiny"),C8=o(" models with:"),Hw=f(),d($a.$$.fragment),zw=f(),He=l("p"),j8=o("Here is a an example of a "),Ea=l("a"),x8=o("script"),P8=o(` that created the tiny model
`),ga=l("a"),O8=o("stas/tiny-wmt19-en-de"),I8=o(`. You can easily adjust it to your specific
model\u2019s architecture.`),Rw=f(),ro=l("p"),T8=o(`It\u2019s easy to measure the run-time incorrectly if for example there is an overheard of downloading a huge model, but if
you test it locally the downloaded files would be cached and thus the download time not measured. Hence check the
execution speed report in CI logs instead (the output of `),Yd=l("code"),A8=o("pytest --durations=0 tests"),D8=o(")."),Gw=f(),xn=l("p"),S8=o(`That report is also useful to find slow outliers that aren\u2019t marked as such, or which need to be re-written to be fast.
If you notice that the test suite starts getting slow on CI, the top listing of this report will show the slowest
tests.`),Fw=f(),It=l("h3"),lo=l("a"),Vd=l("span"),d(ba.$$.fragment),q8=f(),Jd=l("span"),L8=o("Testing the stdout/stderr output"),Mw=f(),V=l("p"),U8=o("In order to test functions that write to "),Xd=l("code"),N8=o("stdout"),H8=o(" and/or "),Zd=l("code"),z8=o("stderr"),R8=o(`, the test can access those streams using the
`),Kd=l("code"),G8=o("pytest"),F8=o("\u2019s "),ka=l("a"),M8=o("capsys system"),W8=o(". Here is how this is accomplished:"),Ww=f(),d(Ca.$$.fragment),Bw=f(),ao=l("p"),B8=o("And, of course, most of the time, "),Qd=l("code"),Y8=o("stderr"),V8=o(` will come as a part of an exception, so try/except has to be used in such
a case:`),Yw=f(),d(ja.$$.fragment),Vw=f(),io=l("p"),J8=o("Another approach to capturing stdout is via "),ec=l("code"),X8=o("contextlib.redirect_stdout"),Z8=o(":"),Jw=f(),d(xa.$$.fragment),Xw=f(),T=l("p"),K8=o("An important potential issue with capturing stdout is that it may contain "),tc=l("code"),Q8=o("\\r"),e9=o(" characters that in normal "),sc=l("code"),t9=o("print"),s9=o(`
reset everything that has been printed so far. There is no problem with `),oc=l("code"),o9=o("pytest"),r9=o(", but with "),rc=l("code"),l9=o("pytest -s"),a9=o(` these
characters get included in the buffer, so to be able to have the test run with and without `),lc=l("code"),i9=o("-s"),n9=o(`, you have to make an
extra cleanup to the captured output, using `),ac=l("code"),p9=o("re.sub(r'~.*\\r', '', buf, 0, re.M)"),f9=o("."),Zw=f(),no=l("p"),h9=o(`But, then we have a helper context manager wrapper to automatically take care of it all, regardless of whether it has
some `),ic=l("code"),u9=o("\\r"),d9=o("\u2019s in it or not, so it\u2019s a simple:"),Kw=f(),d(Pa.$$.fragment),Qw=f(),Pn=l("p"),c9=o("Here is a full test example:"),ey=f(),d(Oa.$$.fragment),ty=f(),ze=l("p"),m9=o("If you\u2019d like to capture "),nc=l("code"),_9=o("stderr"),v9=o(" use the "),pc=l("code"),w9=o("CaptureStderr"),y9=o(" class instead:"),sy=f(),d(Ia.$$.fragment),oy=f(),po=l("p"),$9=o("If you need to capture both streams at once, use the parent "),fc=l("code"),E9=o("CaptureStd"),g9=o(" class:"),ry=f(),d(Ta.$$.fragment),ly=f(),On=l("p"),b9=o(`Also, to aid debugging test issues, by default these context managers automatically replay the captured streams on exit
from the context.`),ay=f(),Tt=l("h3"),fo=l("a"),hc=l("span"),d(Aa.$$.fragment),k9=f(),uc=l("span"),C9=o("Capturing logger stream"),iy=f(),ho=l("p"),j9=o("If you need to validate the output of a logger, you can use "),dc=l("code"),x9=o("CaptureLogger"),P9=o(":"),ny=f(),d(Da.$$.fragment),py=f(),At=l("h3"),uo=l("a"),cc=l("span"),d(Sa.$$.fragment),O9=f(),mc=l("span"),I9=o("Testing with environment variables"),fy=f(),qa=l("p"),T9=o(`If you want to test the impact of environment variables for a specific test you can use a helper decorator
`),_c=l("code"),A9=o("transformers.testing_utils.mockenv"),hy=f(),d(La.$$.fragment),uy=f(),pe=l("p"),D9=o("At times an external program needs to be called, which requires setting "),vc=l("code"),S9=o("PYTHONPATH"),q9=o(" in "),wc=l("code"),L9=o("os.environ"),U9=o(` to include
multiple local paths. A helper class `),yc=l("code"),N9=o("transformers.test_utils.TestCasePlus"),H9=o(" comes to help:"),dy=f(),d(Ua.$$.fragment),cy=f(),N=l("p"),z9=o("Depending on whether the test file was under the "),$c=l("code"),R9=o("tests"),G9=o(" test suite or "),Ec=l("code"),F9=o("examples"),M9=o(` it\u2019ll correctly set up
`),gc=l("code"),W9=o("env[PYTHONPATH]"),B9=o(" to include one of these two directories, and also the "),bc=l("code"),Y9=o("src"),V9=o(` directory to ensure the testing is
done against the current repo, and finally with whatever `),kc=l("code"),J9=o("env[PYTHONPATH]"),X9=o(` was already set to before the test was
called if anything.`),my=f(),co=l("p"),Z9=o("This helper method creates a copy of the "),Cc=l("code"),K9=o("os.environ"),Q9=o(" object, so the original remains intact."),_y=f(),Dt=l("h3"),mo=l("a"),jc=l("span"),d(Na.$$.fragment),eC=f(),xc=l("span"),tC=o("Getting reproducible results"),vy=f(),In=l("p"),sC=o(`In some situations you may want to remove randomness for your tests. To get identical reproducable results set, you
will need to fix the seed:`),wy=f(),d(Ha.$$.fragment),yy=f(),St=l("h3"),_o=l("a"),Pc=l("span"),d(za.$$.fragment),oC=f(),Oc=l("span"),rC=o("Debugging tests"),$y=f(),Tn=l("p"),lC=o("To start a debugger at the point of the warning, do this:"),Ey=f(),d(Ra.$$.fragment),gy=f(),qt=l("h2"),vo=l("a"),Ic=l("span"),d(Ga.$$.fragment),aC=f(),Tc=l("span"),iC=o("Working with github actions workflows"),by=f(),An=l("p"),nC=o("To trigger a self-push workflow CI job, you must:"),ky=f(),fe=l("ol"),Fa=l("li"),pC=o("Create a new branch on "),Ac=l("code"),fC=o("transformers"),hC=o(" origin (not a fork!)."),uC=f(),H=l("li"),dC=o("The branch name has to start with either "),Dc=l("code"),cC=o("ci_"),mC=o(" or "),Sc=l("code"),_C=o("ci-"),vC=o(" ("),qc=l("code"),wC=o("master"),yC=o(` triggers it too, but we can\u2019t do PRs on
`),Lc=l("code"),$C=o("master"),EC=o(`). It also gets triggered only for specific paths - you can find the up-to-date definition in case it
changed since this document has been written `),Ma=l("a"),gC=o("here"),bC=o(" under "),Uc=l("em"),kC=o("push:"),CC=f(),Nc=l("li"),jC=o("Create a PR from this branch."),xC=f(),Wa=l("li"),PC=o("Then you can see the job appear "),Ba=l("a"),OC=o("here"),IC=o(`. It may not run right away if there
is a backlog.`),Cy=f(),Lt=l("h2"),wo=l("a"),Hc=l("span"),d(Ya.$$.fragment),TC=f(),zc=l("span"),AC=o("Testing Experimental CI Features"),jy=f(),Dn=l("p"),DC=o(`Testing CI features can be potentially problematic as it can interfere with the normal CI functioning. Therefore if a
new CI feature is to be added, it should be done as following.`),xy=f(),he=l("ol"),Rc=l("li"),SC=o("Create a new dedicated job that tests what needs to be tested"),qC=f(),Gc=l("li"),LC=o("The new job must always succeed so that it gives us a green \u2713 (details below)."),UC=f(),Fc=l("li"),NC=o(`Let it run for some days to see that a variety of different PR types get to run on it (user fork branches,
non-forked branches, branches originating from github.com UI direct file edit, various forced pushes, etc. - there
are so many) while monitoring the experimental job\u2019s logs (not the overall job green as it\u2019s purposefully always
green)`),HC=f(),Mc=l("li"),zC=o("When it\u2019s clear that everything is solid, then merge the new changes into existing jobs."),Py=f(),Sn=l("p"),RC=o("That way experiments on CI functionality itself won\u2019t interfere with the normal workflow."),Oy=f(),qn=l("p"),GC=o("Now how can we make the job always succeed while the new CI feature is being developed?"),Iy=f(),Ln=l("p"),FC=o(`Some CIs, like TravisCI support ignore-step-failure and will report the overall job as successful, but CircleCI and
Github Actions as of this writing don\u2019t support that.`),Ty=f(),Un=l("p"),MC=o("So the following workaround can be used:"),Ay=f(),yo=l("ol"),Nn=l("li"),Wc=l("code"),WC=o("set +euo pipefail"),BC=o(" at the beginning of the run command to suppress most potential failures in the bash script."),YC=f(),Ut=l("li"),VC=o("the last command must be a success: "),Bc=l("code"),JC=o('echo "done"'),XC=o(" or just "),Yc=l("code"),ZC=o("true"),KC=o(" will do"),Dy=f(),Hn=l("p"),QC=o("Here is an example:"),Sy=f(),d(Va.$$.fragment),qy=f(),zn=l("p"),ej=o("For simple commands you could also do:"),Ly=f(),d(Ja.$$.fragment),Uy=f(),$o=l("p"),tj=o(`Of course, once satisfied with the results, integrate the experimental step or job with the rest of the normal jobs,
while removing `),Vc=l("code"),sj=o("set +euo pipefail"),oj=o(` or any other things you may have added to ensure that the experimental job doesn\u2019t
interfere with the normal CI functioning.`),Ny=f(),Eo=l("p"),rj=o("This whole process would have been much easier if we only could set something like "),Jc=l("code"),lj=o("allow-failure"),aj=o(` for the
experimental step, and let it fail without impacting the overall status of PRs. But as mentioned earlier CircleCI and
Github Actions don\u2019t support it at the moment.`),Hy=f(),Rn=l("p"),ij=o("You can vote for this feature and see where it is at at these CI-specific threads:"),zy=f(),go=l("ul"),Xc=l("li"),Xa=l("a"),nj=o("Github Actions:"),pj=f(),Zc=l("li"),Za=l("a"),fj=o("CircleCI:"),this.h()},l(e){const n=iq('[data-svelte="svelte-1phssyn"]',document.head);$=a(n,"META",{name:!0,content:!0}),n.forEach(s),x=h(e),g=a(e,"H1",{class:!0});var Ka=i(g);b=a(Ka,"A",{id:!0,class:!0,href:!0});var Kc=i(b);A=a(Kc,"SPAN",{});var Qc=i(A);c(j.$$.fragment,Qc),Qc.forEach(s),Kc.forEach(s),z=h(Ka),D=a(Ka,"SPAN",{});var em=i(D);O=r(em,"Testing"),em.forEach(s),Ka.forEach(s),k=h(e),q=a(e,"P",{});var Dj=i(q);R=r(Dj,"Let\u2019s take a look at how \u{1F917} Transformer models are tested and how you can write new tests and improve the existing ones."),Dj.forEach(s),Nt=h(e),$e=a(e,"P",{});var Sj=i($e);Be=r(Sj,"There are 2 test suites in the repository:"),Sj.forEach(s),S=h(e),ve=a(e,"OL",{});var Gy=i(ve);Ye=a(Gy,"LI",{});var hj=i(Ye);Ht=a(hj,"CODE",{});var qj=i(Ht);si=r(qj,"tests"),qj.forEach(s),OE=r(hj," \u2014 tests for the general API"),hj.forEach(s),IE=h(Gy),oi=a(Gy,"LI",{});var uj=i(oi);fp=a(uj,"CODE",{});var Lj=i(fp);TE=r(Lj,"examples"),Lj.forEach(s),AE=r(uj," \u2014 tests primarily for various applications that aren\u2019t part of the API"),uj.forEach(s),Gy.forEach(s),fm=h(e),Ve=a(e,"H2",{class:!0});var Fy=i(Ve);zt=a(Fy,"A",{id:!0,class:!0,href:!0});var Uj=i(zt);hp=a(Uj,"SPAN",{});var Nj=i(hp);c(Uo.$$.fragment,Nj),Nj.forEach(s),Uj.forEach(s),DE=h(Fy),up=a(Fy,"SPAN",{});var Hj=i(up);SE=r(Hj,"How transformers are tested"),Hj.forEach(s),Fy.forEach(s),hm=h(e),Rt=a(e,"OL",{});var My=i(Rt);No=a(My,"LI",{});var Wy=i(No);Ho=a(Wy,"P",{});var By=i(Ho);qE=r(By,`Once a PR is submitted it gets tested with 9 CircleCi jobs. Every new commit to that PR gets retested. These jobs
are defined in this `),zo=a(By,"A",{href:!0,rel:!0});var zj=i(zo);LE=r(zj,"config file"),zj.forEach(s),UE=r(By,`, so that if needed you can reproduce the same
environment on your machine.`),By.forEach(s),NE=h(Wy),Ro=a(Wy,"P",{});var Yy=i(Ro);HE=r(Yy,"These CI jobs don\u2019t run "),dp=a(Yy,"CODE",{});var Rj=i(dp);zE=r(Rj,"@slow"),Rj.forEach(s),RE=r(Yy," tests."),Yy.forEach(s),Wy.forEach(s),GE=h(My),Go=a(My,"LI",{});var Vy=i(Go);Fo=a(Vy,"P",{});var Jy=i(Fo);FE=r(Jy,"There are 3 jobs run by "),Mo=a(Jy,"A",{href:!0,rel:!0});var Gj=i(Mo);ME=r(Gj,"github actions"),Gj.forEach(s),WE=r(Jy,":"),Jy.forEach(s),BE=h(Vy),Je=a(Vy,"UL",{});var Gn=i(Je);cp=a(Gn,"LI",{});var Fj=i(cp);ri=a(Fj,"P",{});var dj=i(ri);Wo=a(dj,"A",{href:!0,rel:!0});var Mj=i(Wo);YE=r(Mj,"torch hub integration"),Mj.forEach(s),VE=r(dj,`: checks whether torch hub
integration works.`),dj.forEach(s),Fj.forEach(s),JE=h(Gn),mp=a(Gn,"LI",{});var Wj=i(mp);L=a(Wj,"P",{});var Z=i(L);Bo=a(Z,"A",{href:!0,rel:!0});var Bj=i(Bo);XE=r(Bj,"self-hosted (push)"),Bj.forEach(s),ZE=r(Z,`: runs fast tests on GPU only on commits on
`),_p=a(Z,"CODE",{});var Yj=i(_p);KE=r(Yj,"master"),Yj.forEach(s),QE=r(Z,". It only runs if a commit on "),vp=a(Z,"CODE",{});var Vj=i(vp);eg=r(Vj,"master"),Vj.forEach(s),tg=r(Z," has updated the code in one of the following folders: "),wp=a(Z,"CODE",{});var Jj=i(wp);sg=r(Jj,"src"),Jj.forEach(s),og=r(Z,`,
`),yp=a(Z,"CODE",{});var Xj=i(yp);rg=r(Xj,"tests"),Xj.forEach(s),lg=r(Z,", "),$p=a(Z,"CODE",{});var Zj=i($p);ag=r(Zj,".github"),Zj.forEach(s),ig=r(Z," (to prevent running on added model cards, notebooks, etc.)"),Z.forEach(s),Wj.forEach(s),ng=h(Gn),Ep=a(Gn,"LI",{});var Kj=i(Ep);Ee=a(Kj,"P",{});var Qa=i(Ee);Yo=a(Qa,"A",{href:!0,rel:!0});var Qj=i(Yo);pg=r(Qj,"self-hosted runner"),Qj.forEach(s),fg=r(Qa,`: runs normal and slow tests on GPU in
`),gp=a(Qa,"CODE",{});var ex=i(gp);hg=r(ex,"tests"),ex.forEach(s),ug=r(Qa," and "),bp=a(Qa,"CODE",{});var tx=i(bp);dg=r(tx,"examples"),tx.forEach(s),cg=r(Qa,":"),Qa.forEach(s),Kj.forEach(s),Gn.forEach(s),Vy.forEach(s),My.forEach(s),um=h(e),c(Vo.$$.fragment,e),dm=h(e),Gt=a(e,"P",{});var Xy=i(Gt);mg=r(Xy,"The results can be observed "),Jo=a(Xy,"A",{href:!0,rel:!0});var sx=i(Jo);_g=r(sx,"here"),sx.forEach(s),vg=r(Xy,"."),Xy.forEach(s),cm=h(e),Xe=a(e,"H2",{class:!0});var Zy=i(Xe);Ft=a(Zy,"A",{id:!0,class:!0,href:!0});var ox=i(Ft);kp=a(ox,"SPAN",{});var rx=i(kp);c(Xo.$$.fragment,rx),rx.forEach(s),ox.forEach(s),wg=h(Zy),Cp=a(Zy,"SPAN",{});var lx=i(Cp);yg=r(lx,"Running tests"),lx.forEach(s),Zy.forEach(s),mm=h(e),Ze=a(e,"H3",{class:!0});var Ky=i(Ze);Mt=a(Ky,"A",{id:!0,class:!0,href:!0});var ax=i(Mt);jp=a(ax,"SPAN",{});var ix=i(jp);c(Zo.$$.fragment,ix),ix.forEach(s),ax.forEach(s),$g=h(Ky),xp=a(Ky,"SPAN",{});var nx=i(xp);Eg=r(nx,"Choosing which tests to run"),nx.forEach(s),Ky.forEach(s),_m=h(e),Wt=a(e,"P",{});var Qy=i(Wt);gg=r(Qy,`This document goes into many details of how tests can be run. If after reading everything, you need even more details
you will find them `),Ko=a(Qy,"A",{href:!0,rel:!0});var px=i(Ko);bg=r(px,"here"),px.forEach(s),kg=r(Qy,"."),Qy.forEach(s),vm=h(e),li=a(e,"P",{});var fx=i(li);Cg=r(fx,"Here are some most useful ways of running tests."),fx.forEach(s),wm=h(e),ai=a(e,"P",{});var hx=i(ai);jg=r(hx,"Run all:"),hx.forEach(s),ym=h(e),c(Qo.$$.fragment,e),$m=h(e),ii=a(e,"P",{});var ux=i(ii);xg=r(ux,"or:"),ux.forEach(s),Em=h(e),c(er.$$.fragment,e),gm=h(e),ni=a(e,"P",{});var dx=i(ni);Pg=r(dx,"Note that the latter is defined as:"),dx.forEach(s),bm=h(e),c(tr.$$.fragment,e),km=h(e),pi=a(e,"P",{});var cx=i(pi);Og=r(cx,"which tells pytest to:"),cx.forEach(s),Cm=h(e),Q=a(e,"UL",{});var bo=i(Q);Pp=a(bo,"LI",{});var mx=i(Pp);Ig=r(mx,"run as many test processes as they are CPU cores (which could be too many if you don\u2019t have a ton of RAM!)"),mx.forEach(s),Tg=h(bo),Op=a(bo,"LI",{});var _x=i(Op);Ag=r(_x,"ensure that all tests from the same file will be run by the same test process"),_x.forEach(s),Dg=h(bo),Ip=a(bo,"LI",{});var vx=i(Ip);Sg=r(vx,"do not capture output"),vx.forEach(s),qg=h(bo),Tp=a(bo,"LI",{});var wx=i(Tp);Lg=r(wx,"run in verbose mode"),wx.forEach(s),bo.forEach(s),jm=h(e),Ke=a(e,"H3",{class:!0});var e$=i(Ke);Bt=a(e$,"A",{id:!0,class:!0,href:!0});var yx=i(Bt);Ap=a(yx,"SPAN",{});var $x=i(Ap);c(sr.$$.fragment,$x),$x.forEach(s),yx.forEach(s),Ug=h(e$),Dp=a(e$,"SPAN",{});var Ex=i(Dp);Ng=r(Ex,"Getting the list of all tests"),Ex.forEach(s),e$.forEach(s),xm=h(e),fi=a(e,"P",{});var gx=i(fi);Hg=r(gx,"All tests of the test suite:"),gx.forEach(s),Pm=h(e),c(or.$$.fragment,e),Om=h(e),hi=a(e,"P",{});var bx=i(hi);zg=r(bx,"All tests of a given test file:"),bx.forEach(s),Im=h(e),c(rr.$$.fragment,e),Tm=h(e),Qe=a(e,"H3",{class:!0});var t$=i(Qe);Yt=a(t$,"A",{id:!0,class:!0,href:!0});var kx=i(Yt);Sp=a(kx,"SPAN",{});var Cx=i(Sp);c(lr.$$.fragment,Cx),Cx.forEach(s),kx.forEach(s),Rg=h(t$),qp=a(t$,"SPAN",{});var jx=i(qp);Gg=r(jx,"Run a specific test module"),jx.forEach(s),t$.forEach(s),Am=h(e),ui=a(e,"P",{});var xx=i(ui);Fg=r(xx,"To run an individual test module:"),xx.forEach(s),Dm=h(e),c(ar.$$.fragment,e),Sm=h(e),et=a(e,"H3",{class:!0});var s$=i(et);Vt=a(s$,"A",{id:!0,class:!0,href:!0});var Px=i(Vt);Lp=a(Px,"SPAN",{});var Ox=i(Lp);c(ir.$$.fragment,Ox),Ox.forEach(s),Px.forEach(s),Mg=h(s$),Up=a(s$,"SPAN",{});var Ix=i(Up);Wg=r(Ix,"Run specific tests"),Ix.forEach(s),s$.forEach(s),qm=h(e),di=a(e,"P",{});var Tx=i(di);Bg=r(Tx,`Since unittest is used inside most of the tests, to run specific subtests you need to know the name of the unittest
class containing those tests. For example, it could be:`),Tx.forEach(s),Lm=h(e),c(nr.$$.fragment,e),Um=h(e),ci=a(e,"P",{});var Ax=i(ci);Yg=r(Ax,"Here:"),Ax.forEach(s),Nm=h(e),ge=a(e,"UL",{});var Fn=i(ge);mi=a(Fn,"LI",{});var cj=i(mi);Np=a(cj,"CODE",{});var Dx=i(Np);Vg=r(Dx,"tests/test_optimization.py"),Dx.forEach(s),Jg=r(cj," - the file with tests"),cj.forEach(s),Xg=h(Fn),_i=a(Fn,"LI",{});var mj=i(_i);Hp=a(mj,"CODE",{});var Sx=i(Hp);Zg=r(Sx,"OptimizationTest"),Sx.forEach(s),Kg=r(mj," - the name of the class"),mj.forEach(s),Qg=h(Fn),vi=a(Fn,"LI",{});var _j=i(vi);zp=a(_j,"CODE",{});var qx=i(zp);eb=r(qx,"test_adam_w"),qx.forEach(s),tb=r(_j," - the name of the specific test function"),_j.forEach(s),Fn.forEach(s),Hm=h(e),wi=a(e,"P",{});var Lx=i(wi);sb=r(Lx,"If the file contains multiple classes, you can choose to run only tests of a given class. For example:"),Lx.forEach(s),zm=h(e),c(pr.$$.fragment,e),Rm=h(e),yi=a(e,"P",{});var Ux=i(yi);ob=r(Ux,"will run all the tests inside that class."),Ux.forEach(s),Gm=h(e),Jt=a(e,"P",{});var o$=i(Jt);rb=r(o$,"As mentioned earlier you can see what tests are contained inside the "),Rp=a(o$,"CODE",{});var Nx=i(Rp);lb=r(Nx,"OptimizationTest"),Nx.forEach(s),ab=r(o$," class by running:"),o$.forEach(s),Fm=h(e),c(fr.$$.fragment,e),Mm=h(e),$i=a(e,"P",{});var Hx=i($i);ib=r(Hx,"You can run tests by keyword expressions."),Hx.forEach(s),Wm=h(e),Xt=a(e,"P",{});var r$=i(Xt);nb=r(r$,"To run only tests whose name contains "),Gp=a(r$,"CODE",{});var zx=i(Gp);pb=r(zx,"adam"),zx.forEach(s),fb=r(r$,":"),r$.forEach(s),Bm=h(e),c(hr.$$.fragment,e),Ym=h(e),ee=a(e,"P",{});var ko=i(ee);hb=r(ko,"Logical "),Fp=a(ko,"CODE",{});var Rx=i(Fp);ub=r(Rx,"and"),Rx.forEach(s),db=r(ko," and "),Mp=a(ko,"CODE",{});var Gx=i(Mp);cb=r(Gx,"or"),Gx.forEach(s),mb=r(ko," can be used to indicate whether all keywords should match or either. "),Wp=a(ko,"CODE",{});var Fx=i(Wp);_b=r(Fx,"not"),Fx.forEach(s),vb=r(ko,` can be used to
negate.`),ko.forEach(s),Vm=h(e),Zt=a(e,"P",{});var l$=i(Zt);wb=r(l$,"To run all tests except those whose name contains "),Bp=a(l$,"CODE",{});var Mx=i(Bp);yb=r(Mx,"adam"),Mx.forEach(s),$b=r(l$,":"),l$.forEach(s),Jm=h(e),c(ur.$$.fragment,e),Xm=h(e),Ei=a(e,"P",{});var Wx=i(Ei);Eb=r(Wx,"And you can combine the two patterns in one:"),Wx.forEach(s),Zm=h(e),c(dr.$$.fragment,e),Km=h(e),be=a(e,"P",{});var Mn=i(be);gb=r(Mn,"For example to run both "),Yp=a(Mn,"CODE",{});var Bx=i(Yp);bb=r(Bx,"test_adafactor"),Bx.forEach(s),kb=r(Mn," and "),Vp=a(Mn,"CODE",{});var Yx=i(Vp);Cb=r(Yx,"test_adam_w"),Yx.forEach(s),jb=r(Mn," you can use:"),Mn.forEach(s),Qm=h(e),c(cr.$$.fragment,e),e_=h(e),Kt=a(e,"P",{});var a$=i(Kt);xb=r(a$,"Note that we use "),Jp=a(a$,"CODE",{});var Vx=i(Jp);Pb=r(Vx,"or"),Vx.forEach(s),Ob=r(a$," here, since we want either of the keywords to match to include both."),a$.forEach(s),t_=h(e),Qt=a(e,"P",{});var i$=i(Qt);Ib=r(i$,"If you want to include only tests that include both patterns, "),Xp=a(i$,"CODE",{});var Jx=i(Xp);Tb=r(Jx,"and"),Jx.forEach(s),Ab=r(i$," is to be used:"),i$.forEach(s),s_=h(e),c(mr.$$.fragment,e),o_=h(e),tt=a(e,"H3",{class:!0});var n$=i(tt);es=a(n$,"A",{id:!0,class:!0,href:!0});var Xx=i(es);Zp=a(Xx,"SPAN",{});var Zx=i(Zp);c(_r.$$.fragment,Zx),Zx.forEach(s),Xx.forEach(s),Db=h(n$),Kp=a(n$,"SPAN",{});var Kx=i(Kp);Sb=r(Kx,"Run only modified tests"),Kx.forEach(s),n$.forEach(s),r_=h(e),ts=a(e,"P",{});var p$=i(ts);qb=r(p$,"You can run the tests related to the unstaged files or the current branch (according to Git) by using "),vr=a(p$,"A",{href:!0,rel:!0});var Qx=i(vr);Lb=r(Qx,"pytest-picked"),Qx.forEach(s),Ub=r(p$,`. This is a great way of quickly testing your changes didn\u2019t break
anything, since it won\u2019t run the tests related to files you didn\u2019t touch.`),p$.forEach(s),l_=h(e),c(wr.$$.fragment,e),a_=h(e),c(yr.$$.fragment,e),i_=h(e),gi=a(e,"P",{});var eP=i(gi);Nb=r(eP,"All tests will be run from files and folders which are modified, but not yet committed."),eP.forEach(s),n_=h(e),st=a(e,"H3",{class:!0});var f$=i(st);ss=a(f$,"A",{id:!0,class:!0,href:!0});var tP=i(ss);Qp=a(tP,"SPAN",{});var sP=i(Qp);c($r.$$.fragment,sP),sP.forEach(s),tP.forEach(s),Hb=h(f$),ef=a(f$,"SPAN",{});var oP=i(ef);zb=r(oP,"Automatically rerun failed tests on source modification"),oP.forEach(s),f$.forEach(s),p_=h(e),Er=a(e,"P",{});var vj=i(Er);gr=a(vj,"A",{href:!0,rel:!0});var rP=i(gr);Rb=r(rP,"pytest-xdist"),rP.forEach(s),Gb=r(vj,` provides a very useful feature of detecting all failed
tests, and then waiting for you to modify files and continuously re-rerun those failing tests until they pass while you
fix them. So that you don\u2019t need to re start pytest after you made the fix. This is repeated until all tests pass after
which again a full run is performed.`),vj.forEach(s),f_=h(e),c(br.$$.fragment,e),h_=h(e),ot=a(e,"P",{});var tm=i(ot);Fb=r(tm,"To enter the mode: "),tf=a(tm,"CODE",{});var lP=i(tf);Mb=r(lP,"pytest -f"),lP.forEach(s),Wb=r(tm," or "),sf=a(tm,"CODE",{});var aP=i(sf);Bb=r(aP,"pytest --looponfail"),aP.forEach(s),tm.forEach(s),u_=h(e),ke=a(e,"P",{});var Wn=i(ke);Yb=r(Wn,"File changes are detected by looking at "),of=a(Wn,"CODE",{});var iP=i(of);Vb=r(iP,"looponfailroots"),iP.forEach(s),Jb=r(Wn,` root directories and all of their contents (recursively).
If the default for this value does not work for you, you can change it in your project by setting a configuration
option in `),rf=a(Wn,"CODE",{});var nP=i(rf);Xb=r(nP,"setup.cfg"),nP.forEach(s),Zb=r(Wn,":"),Wn.forEach(s),d_=h(e),c(kr.$$.fragment,e),c_=h(e),Ce=a(e,"P",{});var Bn=i(Ce);Kb=r(Bn,"or "),lf=a(Bn,"CODE",{});var pP=i(lf);Qb=r(pP,"pytest.ini"),pP.forEach(s),e3=r(Bn,"/"),af=a(Bn,"CODE",{});var fP=i(af);t3=r(fP,"tox.ini"),fP.forEach(s),s3=r(Bn," files:"),Bn.forEach(s),m_=h(e),c(Cr.$$.fragment,e),__=h(e),bi=a(e,"P",{});var hP=i(bi);o3=r(hP,`This would lead to only looking for file changes in the respective directories, specified relatively to the ini-file\u2019s
directory.`),hP.forEach(s),v_=h(e),jr=a(e,"P",{});var wj=i(jr);xr=a(wj,"A",{href:!0,rel:!0});var uP=i(xr);r3=r(uP,"pytest-watch"),uP.forEach(s),l3=r(wj," is an alternative implementation of this functionality."),wj.forEach(s),w_=h(e),rt=a(e,"H3",{class:!0});var h$=i(rt);os=a(h$,"A",{id:!0,class:!0,href:!0});var dP=i(os);nf=a(dP,"SPAN",{});var cP=i(nf);c(Pr.$$.fragment,cP),cP.forEach(s),dP.forEach(s),a3=h(h$),pf=a(h$,"SPAN",{});var mP=i(pf);i3=r(mP,"Skip a test module"),mP.forEach(s),h$.forEach(s),y_=h(e),rs=a(e,"P",{});var u$=i(rs);n3=r(u$,`If you want to run all test modules, except a few you can exclude them by giving an explicit list of tests to run. For
example, to run all except `),ff=a(u$,"CODE",{});var _P=i(ff);p3=r(_P,"test_modeling_*.py"),_P.forEach(s),f3=r(u$," tests:"),u$.forEach(s),$_=h(e),c(Or.$$.fragment,e),E_=h(e),lt=a(e,"H3",{class:!0});var d$=i(lt);ls=a(d$,"A",{id:!0,class:!0,href:!0});var vP=i(ls);hf=a(vP,"SPAN",{});var wP=i(hf);c(Ir.$$.fragment,wP),wP.forEach(s),vP.forEach(s),h3=h(d$),uf=a(d$,"SPAN",{});var yP=i(uf);u3=r(yP,"Clearing state"),yP.forEach(s),d$.forEach(s),g_=h(e),ki=a(e,"P",{});var $P=i(ki);d3=r($P,"CI builds and when isolation is important (against speed), cache should be cleared:"),$P.forEach(s),b_=h(e),c(Tr.$$.fragment,e),k_=h(e),at=a(e,"H3",{class:!0});var c$=i(at);as=a(c$,"A",{id:!0,class:!0,href:!0});var EP=i(as);df=a(EP,"SPAN",{});var gP=i(df);c(Ar.$$.fragment,gP),gP.forEach(s),EP.forEach(s),c3=h(c$),cf=a(c$,"SPAN",{});var bP=i(cf);m3=r(bP,"Running tests in parallel"),bP.forEach(s),c$.forEach(s),C_=h(e),M=a(e,"P",{});var Re=i(M);_3=r(Re,"As mentioned earlier "),mf=a(Re,"CODE",{});var kP=i(mf);v3=r(kP,"make test"),kP.forEach(s),w3=r(Re," runs tests in parallel via "),_f=a(Re,"CODE",{});var CP=i(_f);y3=r(CP,"pytest-xdist"),CP.forEach(s),$3=r(Re," plugin ("),vf=a(Re,"CODE",{});var jP=i(vf);E3=r(jP,"-n X"),jP.forEach(s),g3=r(Re," argument, e.g. "),wf=a(Re,"CODE",{});var xP=i(wf);b3=r(xP,"-n 2"),xP.forEach(s),k3=r(Re,`
to run 2 parallel jobs).`),Re.forEach(s),j_=h(e),we=a(e,"P",{});var ei=i(we);yf=a(ei,"CODE",{});var PP=i(yf);C3=r(PP,"pytest-xdist"),PP.forEach(s),j3=r(ei,"\u2019s "),$f=a(ei,"CODE",{});var OP=i($f);x3=r(OP,"--dist="),OP.forEach(s),P3=r(ei," option allows one to control how the tests are grouped. "),Ef=a(ei,"CODE",{});var IP=i(Ef);O3=r(IP,"--dist=loadfile"),IP.forEach(s),I3=r(ei,` puts the
tests located in one file onto the same process.`),ei.forEach(s),x_=h(e),je=a(e,"P",{});var Yn=i(je);T3=r(Yn,"Since the order of executed tests is different and unpredictable, if running the test suite with "),gf=a(Yn,"CODE",{});var TP=i(gf);A3=r(TP,"pytest-xdist"),TP.forEach(s),D3=r(Yn,`
produces failures (meaning we have some undetected coupled tests), use `),Dr=a(Yn,"A",{href:!0,rel:!0});var AP=i(Dr);S3=r(AP,"pytest-replay"),AP.forEach(s),q3=r(Yn,` to replay the tests in the same order, which should help with then somehow
reducing that failing sequence to a minimum.`),Yn.forEach(s),P_=h(e),it=a(e,"H3",{class:!0});var m$=i(it);is=a(m$,"A",{id:!0,class:!0,href:!0});var DP=i(is);bf=a(DP,"SPAN",{});var SP=i(bf);c(Sr.$$.fragment,SP),SP.forEach(s),DP.forEach(s),L3=h(m$),kf=a(m$,"SPAN",{});var qP=i(kf);U3=r(qP,"Test order and repetition"),qP.forEach(s),m$.forEach(s),O_=h(e),Ci=a(e,"P",{});var LP=i(Ci);N3=r(LP,`It\u2019s good to repeat the tests several times, in sequence, randomly, or in sets, to detect any potential
inter-dependency and state-related bugs (tear down). And the straightforward multiple repetition is just good to detect
some problems that get uncovered by randomness of DL.`),LP.forEach(s),I_=h(e),nt=a(e,"H4",{class:!0});var _$=i(nt);ns=a(_$,"A",{id:!0,class:!0,href:!0});var UP=i(ns);Cf=a(UP,"SPAN",{});var NP=i(Cf);c(qr.$$.fragment,NP),NP.forEach(s),UP.forEach(s),H3=h(_$),jf=a(_$,"SPAN",{});var HP=i(jf);z3=r(HP,"Repeat tests"),HP.forEach(s),_$.forEach(s),T_=h(e),ji=a(e,"UL",{});var zP=i(ji);xi=a(zP,"LI",{});var yj=i(xi);Lr=a(yj,"A",{href:!0,rel:!0});var RP=i(Lr);R3=r(RP,"pytest-flakefinder"),RP.forEach(s),G3=r(yj,":"),yj.forEach(s),zP.forEach(s),A_=h(e),c(Ur.$$.fragment,e),D_=h(e),Pi=a(e,"P",{});var GP=i(Pi);F3=r(GP,"And then run every test multiple times (50 by default):"),GP.forEach(s),S_=h(e),c(Nr.$$.fragment,e),q_=h(e),c(ps.$$.fragment,e),L_=h(e),c(fs.$$.fragment,e),U_=h(e),pt=a(e,"H4",{class:!0});var v$=i(pt);hs=a(v$,"A",{id:!0,class:!0,href:!0});var FP=i(hs);xf=a(FP,"SPAN",{});var MP=i(xf);c(Hr.$$.fragment,MP),MP.forEach(s),FP.forEach(s),M3=h(v$),Pf=a(v$,"SPAN",{});var WP=i(Pf);W3=r(WP,"Run tests in a random order"),WP.forEach(s),v$.forEach(s),N_=h(e),c(zr.$$.fragment,e),H_=h(e),us=a(e,"P",{});var w$=i(us);B3=r(w$,"Important: the presence of "),Of=a(w$,"CODE",{});var BP=i(Of);Y3=r(BP,"pytest-random-order"),BP.forEach(s),V3=r(w$,` will automatically randomize tests, no configuration change or
command line options is required.`),w$.forEach(s),z_=h(e),ds=a(e,"P",{});var y$=i(ds);J3=r(y$,`As explained earlier this allows detection of coupled tests - where one test\u2019s state affects the state of another. When
`),If=a(y$,"CODE",{});var YP=i(If);X3=r(YP,"pytest-random-order"),YP.forEach(s),Z3=r(y$," is installed it will print the random seed it used for that session, e.g:"),y$.forEach(s),R_=h(e),c(Rr.$$.fragment,e),G_=h(e),Oi=a(e,"P",{});var VP=i(Oi);K3=r(VP,"So that if the given particular sequence fails, you can reproduce it by adding that exact seed, e.g.:"),VP.forEach(s),F_=h(e),c(Gr.$$.fragment,e),M_=h(e),cs=a(e,"P",{});var $$=i(cs);Q3=r($$,`It will only reproduce the exact order if you use the exact same list of tests (or no list at all). Once you start to
manually narrowing down the list you can no longer rely on the seed, but have to list them manually in the exact order
they failed and tell pytest to not randomize them instead using `),Tf=a($$,"CODE",{});var JP=i(Tf);e2=r(JP,"--random-order-bucket=none"),JP.forEach(s),t2=r($$,", e.g.:"),$$.forEach(s),W_=h(e),c(Fr.$$.fragment,e),B_=h(e),Ii=a(e,"P",{});var XP=i(Ii);s2=r(XP,"To disable the shuffling for all tests:"),XP.forEach(s),Y_=h(e),c(Mr.$$.fragment,e),V_=h(e),I=a(e,"P",{});var J=i(I);o2=r(J,"By default "),Af=a(J,"CODE",{});var ZP=i(Af);r2=r(ZP,"--random-order-bucket=module"),ZP.forEach(s),l2=r(J,` is implied, which will shuffle the files on the module levels. It can also
shuffle on `),Df=a(J,"CODE",{});var KP=i(Df);a2=r(KP,"class"),KP.forEach(s),i2=r(J,", "),Sf=a(J,"CODE",{});var QP=i(Sf);n2=r(QP,"package"),QP.forEach(s),p2=r(J,", "),qf=a(J,"CODE",{});var eO=i(qf);f2=r(eO,"global"),eO.forEach(s),h2=r(J," and "),Lf=a(J,"CODE",{});var tO=i(Lf);u2=r(tO,"none"),tO.forEach(s),d2=r(J,` levels. For the complete details please see its
`),Wr=a(J,"A",{href:!0,rel:!0});var sO=i(Wr);c2=r(sO,"documentation"),sO.forEach(s),m2=r(J,"."),J.forEach(s),J_=h(e),te=a(e,"P",{});var Co=i(te);_2=r(Co,"Another randomization alternative is: "),Uf=a(Co,"CODE",{});var oO=i(Uf);v2=r(oO,"pytest-randomly"),oO.forEach(s),w2=r(Co,"("),Br=a(Co,"A",{href:!0,rel:!0});var rO=i(Br);y2=r(rO,"https://github.com/pytest-dev/pytest-randomly"),rO.forEach(s),$2=r(Co,`). This
module has a very similar functionality/interface, but it doesn\u2019t have the bucket modes available in
`),Nf=a(Co,"CODE",{});var lO=i(Nf);E2=r(lO,"pytest-random-order"),lO.forEach(s),g2=r(Co,". It has the same problem of imposing itself once installed."),Co.forEach(s),X_=h(e),ft=a(e,"H3",{class:!0});var E$=i(ft);ms=a(E$,"A",{id:!0,class:!0,href:!0});var aO=i(ms);Hf=a(aO,"SPAN",{});var iO=i(Hf);c(Yr.$$.fragment,iO),iO.forEach(s),aO.forEach(s),b2=h(E$),zf=a(E$,"SPAN",{});var nO=i(zf);k2=r(nO,"Look and feel variations"),nO.forEach(s),E$.forEach(s),Z_=h(e),ht=a(e,"H4",{class:!0});var g$=i(ht);_s=a(g$,"A",{id:!0,class:!0,href:!0});var pO=i(_s);Rf=a(pO,"SPAN",{});var fO=i(Rf);c(Vr.$$.fragment,fO),fO.forEach(s),pO.forEach(s),C2=h(g$),Gf=a(g$,"SPAN",{});var hO=i(Gf);j2=r(hO,"pytest-sugar"),hO.forEach(s),g$.forEach(s),K_=h(e),Jr=a(e,"P",{});var $j=i(Jr);Xr=a($j,"A",{href:!0,rel:!0});var uO=i(Xr);x2=r(uO,"pytest-sugar"),uO.forEach(s),P2=r($j,` is a plugin that improves the look-n-feel, adds a
progressbar, and show tests that fail and the assert instantly. It gets activated automatically upon installation.`),$j.forEach(s),Q_=h(e),c(Zr.$$.fragment,e),ev=h(e),Ti=a(e,"P",{});var dO=i(Ti);O2=r(dO,"To run tests without it, run:"),dO.forEach(s),tv=h(e),c(Kr.$$.fragment,e),sv=h(e),Ai=a(e,"P",{});var cO=i(Ai);I2=r(cO,"or uninstall it."),cO.forEach(s),ov=h(e),ut=a(e,"H4",{class:!0});var b$=i(ut);vs=a(b$,"A",{id:!0,class:!0,href:!0});var mO=i(vs);Ff=a(mO,"SPAN",{});var _O=i(Ff);c(Qr.$$.fragment,_O),_O.forEach(s),mO.forEach(s),T2=h(b$),Mf=a(b$,"SPAN",{});var vO=i(Mf);A2=r(vO,"Report each sub-test name and its progress"),vO.forEach(s),b$.forEach(s),rv=h(e),xe=a(e,"P",{});var Vn=i(xe);D2=r(Vn,"For a single or a group of tests via "),Wf=a(Vn,"CODE",{});var wO=i(Wf);S2=r(wO,"pytest"),wO.forEach(s),q2=r(Vn," (after "),Bf=a(Vn,"CODE",{});var yO=i(Bf);L2=r(yO,"pip install pytest-pspec"),yO.forEach(s),U2=r(Vn,"):"),Vn.forEach(s),lv=h(e),c(el.$$.fragment,e),av=h(e),dt=a(e,"H4",{class:!0});var k$=i(dt);ws=a(k$,"A",{id:!0,class:!0,href:!0});var $O=i(ws);Yf=a($O,"SPAN",{});var EO=i(Yf);c(tl.$$.fragment,EO),EO.forEach(s),$O.forEach(s),N2=h(k$),Vf=a(k$,"SPAN",{});var gO=i(Vf);H2=r(gO,"Instantly shows failed tests"),gO.forEach(s),k$.forEach(s),iv=h(e),sl=a(e,"P",{});var Ej=i(sl);ol=a(Ej,"A",{href:!0,rel:!0});var bO=i(ol);z2=r(bO,"pytest-instafail"),bO.forEach(s),R2=r(Ej,` shows failures and errors instantly instead of
waiting until the end of test session.`),Ej.forEach(s),nv=h(e),c(rl.$$.fragment,e),pv=h(e),c(ll.$$.fragment,e),fv=h(e),ct=a(e,"H3",{class:!0});var C$=i(ct);ys=a(C$,"A",{id:!0,class:!0,href:!0});var kO=i(ys);Jf=a(kO,"SPAN",{});var CO=i(Jf);c(al.$$.fragment,CO),CO.forEach(s),kO.forEach(s),G2=h(C$),Xf=a(C$,"SPAN",{});var jO=i(Xf);F2=r(jO,"To GPU or not to GPU"),jO.forEach(s),C$.forEach(s),hv=h(e),$s=a(e,"P",{});var j$=i($s);M2=r(j$,"On a GPU-enabled setup, to test in CPU-only mode add "),Zf=a(j$,"CODE",{});var xO=i(Zf);W2=r(xO,'CUDA_VISIBLE_DEVICES=""'),xO.forEach(s),B2=r(j$,":"),j$.forEach(s),uv=h(e),c(il.$$.fragment,e),dv=h(e),se=a(e,"P",{});var jo=i(se);Y2=r(jo,"or if you have multiple gpus, you can specify which one is to be used by "),Kf=a(jo,"CODE",{});var PO=i(Kf);V2=r(PO,"pytest"),PO.forEach(s),J2=r(jo,`. For example, to use only the
second gpu if you have gpus `),Qf=a(jo,"CODE",{});var OO=i(Qf);X2=r(OO,"0"),OO.forEach(s),Z2=r(jo," and "),eh=a(jo,"CODE",{});var IO=i(eh);K2=r(IO,"1"),IO.forEach(s),Q2=r(jo,", you can run:"),jo.forEach(s),cv=h(e),c(nl.$$.fragment,e),mv=h(e),Di=a(e,"P",{});var TO=i(Di);e5=r(TO,"This is handy when you want to run different tasks on different GPUs."),TO.forEach(s),_v=h(e),Si=a(e,"P",{});var AO=i(Si);t5=r(AO,`Some tests must be run on CPU-only, others on either CPU or GPU or TPU, yet others on multiple-GPUs. The following skip
decorators are used to set the requirements of tests CPU/GPU/TPU-wise:`),AO.forEach(s),vv=h(e),U=a(e,"UL",{});var ue=i(U);qi=a(ue,"LI",{});var gj=i(qi);th=a(gj,"CODE",{});var DO=i(th);s5=r(DO,"require_torch"),DO.forEach(s),o5=r(gj," - this test will run only under torch"),gj.forEach(s),r5=h(ue),Es=a(ue,"LI",{});var sm=i(Es);sh=a(sm,"CODE",{});var SO=i(sh);l5=r(SO,"require_torch_gpu"),SO.forEach(s),a5=r(sm," - as "),oh=a(sm,"CODE",{});var qO=i(oh);i5=r(qO,"require_torch"),qO.forEach(s),n5=r(sm," plus requires at least 1 GPU"),sm.forEach(s),p5=h(ue),gs=a(ue,"LI",{});var om=i(gs);rh=a(om,"CODE",{});var LO=i(rh);f5=r(LO,"require_torch_multi_gpu"),LO.forEach(s),h5=r(om," - as "),lh=a(om,"CODE",{});var UO=i(lh);u5=r(UO,"require_torch"),UO.forEach(s),d5=r(om," plus requires at least 2 GPUs"),om.forEach(s),c5=h(ue),bs=a(ue,"LI",{});var rm=i(bs);ah=a(rm,"CODE",{});var NO=i(ah);m5=r(NO,"require_torch_non_multi_gpu"),NO.forEach(s),_5=r(rm," - as "),ih=a(rm,"CODE",{});var HO=i(ih);v5=r(HO,"require_torch"),HO.forEach(s),w5=r(rm," plus requires 0 or 1 GPUs"),rm.forEach(s),y5=h(ue),ks=a(ue,"LI",{});var lm=i(ks);nh=a(lm,"CODE",{});var zO=i(nh);$5=r(zO,"require_torch_up_to_2_gpus"),zO.forEach(s),E5=r(lm," - as "),ph=a(lm,"CODE",{});var RO=i(ph);g5=r(RO,"require_torch"),RO.forEach(s),b5=r(lm," plus requires 0 or 1 or 2 GPUs"),lm.forEach(s),k5=h(ue),Cs=a(ue,"LI",{});var am=i(Cs);fh=a(am,"CODE",{});var GO=i(fh);C5=r(GO,"require_torch_tpu"),GO.forEach(s),j5=r(am," - as "),hh=a(am,"CODE",{});var FO=i(hh);x5=r(FO,"require_torch"),FO.forEach(s),P5=r(am," plus requires at least 1 TPU"),am.forEach(s),ue.forEach(s),wv=h(e),Li=a(e,"P",{});var MO=i(Li);O5=r(MO,"Let\u2019s depict the GPU requirements in the following table:"),MO.forEach(s),yv=h(e),C=a(e,"P",{});var P=i(C);I5=r(P,`| n gpus | decorator                      |
|--------+--------------------------------|
| `),uh=a(P,"CODE",{});var WO=i(uh);T5=r(WO,">= 0"),WO.forEach(s),A5=r(P," | "),dh=a(P,"CODE",{});var BO=i(dh);D5=r(BO,"@require_torch"),BO.forEach(s),S5=r(P,`               |
| `),ch=a(P,"CODE",{});var YO=i(ch);q5=r(YO,">= 1"),YO.forEach(s),L5=r(P," | "),mh=a(P,"CODE",{});var VO=i(mh);U5=r(VO,"@require_torch_gpu"),VO.forEach(s),N5=r(P,`           |
| `),_h=a(P,"CODE",{});var JO=i(_h);H5=r(JO,">= 2"),JO.forEach(s),z5=r(P," | "),vh=a(P,"CODE",{});var XO=i(vh);R5=r(XO,"@require_torch_multi_gpu"),XO.forEach(s),G5=r(P,`     |
| `),wh=a(P,"CODE",{});var ZO=i(wh);F5=r(ZO,"< 2"),ZO.forEach(s),M5=r(P,"  | "),yh=a(P,"CODE",{});var KO=i(yh);W5=r(KO,"@require_torch_non_multi_gpu"),KO.forEach(s),B5=r(P,` |
| `),$h=a(P,"CODE",{});var QO=i($h);Y5=r(QO,"< 3"),QO.forEach(s),V5=r(P,"  | "),Eh=a(P,"CODE",{});var eI=i(Eh);J5=r(eI,"@require_torch_up_to_2_gpus"),eI.forEach(s),X5=r(P,"  |"),P.forEach(s),$v=h(e),Ui=a(e,"P",{});var tI=i(Ui);Z5=r(tI,"For example, here is a test that must be run only when there are 2 or more GPUs available and pytorch is installed:"),tI.forEach(s),Ev=h(e),c(pl.$$.fragment,e),gv=h(e),Pe=a(e,"P",{});var Jn=i(Pe);K5=r(Jn,"If a test requires "),gh=a(Jn,"CODE",{});var sI=i(gh);Q5=r(sI,"tensorflow"),sI.forEach(s),ek=r(Jn," use the "),bh=a(Jn,"CODE",{});var oI=i(bh);tk=r(oI,"require_tf"),oI.forEach(s),sk=r(Jn," decorator. For example:"),Jn.forEach(s),bv=h(e),c(fl.$$.fragment,e),kv=h(e),Ni=a(e,"P",{});var rI=i(Ni);ok=r(rI,`These decorators can be stacked. For example, if a test is slow and requires at least one GPU under pytorch, here is
how to set it up:`),rI.forEach(s),Cv=h(e),c(hl.$$.fragment,e),jv=h(e),Oe=a(e,"P",{});var Xn=i(Oe);rk=r(Xn,"Some decorators like "),kh=a(Xn,"CODE",{});var lI=i(kh);lk=r(lI,"@parametrized"),lI.forEach(s),ak=r(Xn," rewrite test names, therefore "),Ch=a(Xn,"CODE",{});var aI=i(Ch);ik=r(aI,"@require_*"),aI.forEach(s),nk=r(Xn,` skip decorators have to be listed
last for them to work correctly. Here is an example of the correct usage:`),Xn.forEach(s),xv=h(e),c(ul.$$.fragment,e),Pv=h(e),js=a(e,"P",{});var x$=i(js);pk=r(x$,"This order problem doesn\u2019t exist with "),jh=a(x$,"CODE",{});var iI=i(jh);fk=r(iI,"@pytest.mark.parametrize"),iI.forEach(s),hk=r(x$,`, you can put it first or last and it will still
work. But it only works with non-unittests.`),x$.forEach(s),Ov=h(e),Hi=a(e,"P",{});var nI=i(Hi);uk=r(nI,"Inside tests:"),nI.forEach(s),Iv=h(e),zi=a(e,"UL",{});var pI=i(zi);xh=a(pI,"LI",{});var fI=i(xh);dk=r(fI,"How many GPUs are available:"),fI.forEach(s),pI.forEach(s),Tv=h(e),c(dl.$$.fragment,e),Av=h(e),mt=a(e,"H3",{class:!0});var P$=i(mt);xs=a(P$,"A",{id:!0,class:!0,href:!0});var hI=i(xs);Ph=a(hI,"SPAN",{});var uI=i(Ph);c(cl.$$.fragment,uI),uI.forEach(s),hI.forEach(s),ck=h(P$),Oh=a(P$,"SPAN",{});var dI=i(Oh);mk=r(dI,"Distributed training"),dI.forEach(s),P$.forEach(s),Dv=h(e),_t=a(e,"P",{});var im=i(_t);Ih=a(im,"CODE",{});var cI=i(Ih);_k=r(cI,"pytest"),cI.forEach(s),vk=r(im,` can\u2019t deal with distributed training directly. If this is attempted - the sub-processes don\u2019t do the right
thing and end up thinking they are `),Th=a(im,"CODE",{});var mI=i(Th);wk=r(mI,"pytest"),mI.forEach(s),yk=r(im,` and start running the test suite in loops. It works, however, if one
spawns a normal process that then spawns off multiple workers and manages the IO pipes.`),im.forEach(s),Sv=h(e),Ri=a(e,"P",{});var _I=i(Ri);$k=r(_I,"Here are some tests that use it:"),_I.forEach(s),qv=h(e),Ps=a(e,"UL",{});var O$=i(Ps);Ah=a(O$,"LI",{});var vI=i(Ah);ml=a(vI,"A",{href:!0,rel:!0});var wI=i(ml);Ek=r(wI,"test_trainer_distributed.py"),wI.forEach(s),vI.forEach(s),gk=h(O$),Dh=a(O$,"LI",{});var yI=i(Dh);_l=a(yI,"A",{href:!0,rel:!0});var $I=i(_l);bk=r($I,"test_deepspeed.py"),$I.forEach(s),yI.forEach(s),O$.forEach(s),Lv=h(e),Os=a(e,"P",{});var I$=i(Os);kk=r(I$,"To jump right into the execution point, search for the "),Sh=a(I$,"CODE",{});var EI=i(Sh);Ck=r(EI,"execute_subprocess_async"),EI.forEach(s),jk=r(I$," call in those tests."),I$.forEach(s),Uv=h(e),Gi=a(e,"P",{});var gI=i(Gi);xk=r(gI,"You will need at least 2 GPUs to see these tests in action:"),gI.forEach(s),Nv=h(e),c(vl.$$.fragment,e),Hv=h(e),vt=a(e,"H3",{class:!0});var T$=i(vt);Is=a(T$,"A",{id:!0,class:!0,href:!0});var bI=i(Is);qh=a(bI,"SPAN",{});var kI=i(qh);c(wl.$$.fragment,kI),kI.forEach(s),bI.forEach(s),Pk=h(T$),Lh=a(T$,"SPAN",{});var CI=i(Lh);Ok=r(CI,"Output capture"),CI.forEach(s),T$.forEach(s),zv=h(e),Ie=a(e,"P",{});var Zn=i(Ie);Ik=r(Zn,"During test execution any output sent to "),Uh=a(Zn,"CODE",{});var jI=i(Uh);Tk=r(jI,"stdout"),jI.forEach(s),Ak=r(Zn," and "),Nh=a(Zn,"CODE",{});var xI=i(Nh);Dk=r(xI,"stderr"),xI.forEach(s),Sk=r(Zn,` is captured. If a test or a setup method fails, its
according captured output will usually be shown along with the failure traceback.`),Zn.forEach(s),Rv=h(e),W=a(e,"P",{});var Ge=i(W);qk=r(Ge,"To disable output capturing and to get the "),Hh=a(Ge,"CODE",{});var PI=i(Hh);Lk=r(PI,"stdout"),PI.forEach(s),Uk=r(Ge," and "),zh=a(Ge,"CODE",{});var OI=i(zh);Nk=r(OI,"stderr"),OI.forEach(s),Hk=r(Ge," normally, use "),Rh=a(Ge,"CODE",{});var II=i(Rh);zk=r(II,"-s"),II.forEach(s),Rk=r(Ge," or "),Gh=a(Ge,"CODE",{});var TI=i(Gh);Gk=r(TI,"--capture=no"),TI.forEach(s),Fk=r(Ge,":"),Ge.forEach(s),Gv=h(e),c(yl.$$.fragment,e),Fv=h(e),Fi=a(e,"P",{});var AI=i(Fi);Mk=r(AI,"To send test results to JUnit format output:"),AI.forEach(s),Mv=h(e),c($l.$$.fragment,e),Wv=h(e),wt=a(e,"H3",{class:!0});var A$=i(wt);Ts=a(A$,"A",{id:!0,class:!0,href:!0});var DI=i(Ts);Fh=a(DI,"SPAN",{});var SI=i(Fh);c(El.$$.fragment,SI),SI.forEach(s),DI.forEach(s),Wk=h(A$),Mh=a(A$,"SPAN",{});var qI=i(Mh);Bk=r(qI,"Color control"),qI.forEach(s),A$.forEach(s),Bv=h(e),Mi=a(e,"P",{});var LI=i(Mi);Yk=r(LI,"To have no color (e.g., yellow on white background is not readable):"),LI.forEach(s),Yv=h(e),c(gl.$$.fragment,e),Vv=h(e),yt=a(e,"H3",{class:!0});var D$=i(yt);As=a(D$,"A",{id:!0,class:!0,href:!0});var UI=i(As);Wh=a(UI,"SPAN",{});var NI=i(Wh);c(bl.$$.fragment,NI),NI.forEach(s),UI.forEach(s),Vk=h(D$),Bh=a(D$,"SPAN",{});var HI=i(Bh);Jk=r(HI,"Sending test report to online pastebin service"),HI.forEach(s),D$.forEach(s),Jv=h(e),Wi=a(e,"P",{});var zI=i(Wi);Xk=r(zI,"Creating a URL for each test failure:"),zI.forEach(s),Xv=h(e),c(kl.$$.fragment,e),Zv=h(e),Bi=a(e,"P",{});var RI=i(Bi);Zk=r(RI,`This will submit test run information to a remote Paste service and provide a URL for each failure. You may select
tests as usual or add for example -x if you only want to send one particular failure.`),RI.forEach(s),Kv=h(e),Yi=a(e,"P",{});var GI=i(Yi);Kk=r(GI,"Creating a URL for a whole test session log:"),GI.forEach(s),Qv=h(e),c(Cl.$$.fragment,e),e1=h(e),$t=a(e,"H2",{class:!0});var S$=i($t);Ds=a(S$,"A",{id:!0,class:!0,href:!0});var FI=i(Ds);Yh=a(FI,"SPAN",{});var MI=i(Yh);c(jl.$$.fragment,MI),MI.forEach(s),FI.forEach(s),Qk=h(S$),Vh=a(S$,"SPAN",{});var WI=i(Vh);e4=r(WI,"Writing tests"),WI.forEach(s),S$.forEach(s),t1=h(e),Te=a(e,"P",{});var Kn=i(Te);t4=r(Kn,"\u{1F917} transformers tests are based on "),Jh=a(Kn,"CODE",{});var BI=i(Jh);s4=r(BI,"unittest"),BI.forEach(s),o4=r(Kn,", but run by "),Xh=a(Kn,"CODE",{});var YI=i(Xh);r4=r(YI,"pytest"),YI.forEach(s),l4=r(Kn,`, so most of the time features from both systems
can be used.`),Kn.forEach(s),s1=h(e),oe=a(e,"P",{});var xo=i(oe);a4=r(xo,"You can read "),xl=a(xo,"A",{href:!0,rel:!0});var VI=i(xl);i4=r(VI,"here"),VI.forEach(s),n4=r(xo,` which features are supported, but the important
thing to remember is that most `),Zh=a(xo,"CODE",{});var JI=i(Zh);p4=r(JI,"pytest"),JI.forEach(s),f4=r(xo,` fixtures don\u2019t work. Neither parametrization, but we use the module
`),Kh=a(xo,"CODE",{});var XI=i(Kh);h4=r(XI,"parameterized"),XI.forEach(s),u4=r(xo," that works in a similar way."),xo.forEach(s),o1=h(e),Et=a(e,"H3",{class:!0});var q$=i(Et);Ss=a(q$,"A",{id:!0,class:!0,href:!0});var ZI=i(Ss);Qh=a(ZI,"SPAN",{});var KI=i(Qh);c(Pl.$$.fragment,KI),KI.forEach(s),ZI.forEach(s),d4=h(q$),eu=a(q$,"SPAN",{});var QI=i(eu);c4=r(QI,"Parametrization"),QI.forEach(s),q$.forEach(s),r1=h(e),Vi=a(e,"P",{});var eT=i(Vi);m4=r(eT,`Often, there is a need to run the same test multiple times, but with different arguments. It could be done from within
the test, but then there is no way of running that test for just one set of arguments.`),eT.forEach(s),l1=h(e),c(Ol.$$.fragment,e),a1=h(e),qs=a(e,"P",{});var L$=i(qs);_4=r(L$,"Now, by default this test will be run 3 times, each time with the last 3 arguments of "),tu=a(L$,"CODE",{});var tT=i(tu);v4=r(tT,"test_floor"),tT.forEach(s),w4=r(L$,` being assigned the
corresponding arguments in the parameter list.`),L$.forEach(s),i1=h(e),Ae=a(e,"P",{});var Qn=i(Ae);y4=r(Qn,"and you could run just the "),su=a(Qn,"CODE",{});var sT=i(su);$4=r(sT,"negative"),sT.forEach(s),E4=r(Qn," and "),ou=a(Qn,"CODE",{});var oT=i(ou);g4=r(oT,"integer"),oT.forEach(s),b4=r(Qn," sets of params with:"),Qn.forEach(s),n1=h(e),c(Il.$$.fragment,e),p1=h(e),Ls=a(e,"P",{});var U$=i(Ls);k4=r(U$,"or all but "),ru=a(U$,"CODE",{});var rT=i(ru);C4=r(rT,"negative"),rT.forEach(s),j4=r(U$," sub-tests, with:"),U$.forEach(s),f1=h(e),c(Tl.$$.fragment,e),h1=h(e),Us=a(e,"P",{});var N$=i(Us);x4=r(N$,"Besides using the "),lu=a(N$,"CODE",{});var lT=i(lu);P4=r(lT,"-k"),lT.forEach(s),O4=r(N$,` filter that was just mentioned, you can find out the exact name of each sub-test and run any
or all of them using their exact names.`),N$.forEach(s),u1=h(e),c(Al.$$.fragment,e),d1=h(e),Ji=a(e,"P",{});var aT=i(Ji);I4=r(aT,"and it will list:"),aT.forEach(s),c1=h(e),c(Dl.$$.fragment,e),m1=h(e),Xi=a(e,"P",{});var iT=i(Xi);T4=r(iT,"So now you can run just 2 specific sub-tests:"),iT.forEach(s),_1=h(e),c(Sl.$$.fragment,e),v1=h(e),B=a(e,"P",{});var Fe=i(B);A4=r(Fe,"The module "),ql=a(Fe,"A",{href:!0,rel:!0});var nT=i(ql);D4=r(nT,"parameterized"),nT.forEach(s),S4=r(Fe,` which is already in the developer dependencies
of `),au=a(Fe,"CODE",{});var pT=i(au);q4=r(pT,"transformers"),pT.forEach(s),L4=r(Fe," works for both: "),iu=a(Fe,"CODE",{});var fT=i(iu);U4=r(fT,"unittests"),fT.forEach(s),N4=r(Fe," and "),nu=a(Fe,"CODE",{});var hT=i(nu);H4=r(hT,"pytest"),hT.forEach(s),z4=r(Fe," tests."),Fe.forEach(s),w1=h(e),re=a(e,"P",{});var Po=i(re);R4=r(Po,"If, however, the test is not a "),pu=a(Po,"CODE",{});var uT=i(pu);G4=r(uT,"unittest"),uT.forEach(s),F4=r(Po,", you may use "),fu=a(Po,"CODE",{});var dT=i(fu);M4=r(dT,"pytest.mark.parametrize"),dT.forEach(s),W4=r(Po,` (or you may see it being used in
some existing tests, mostly under `),hu=a(Po,"CODE",{});var cT=i(hu);B4=r(cT,"examples"),cT.forEach(s),Y4=r(Po,")."),Po.forEach(s),y1=h(e),De=a(e,"P",{});var ep=i(De);V4=r(ep,"Here is the same example, this time using "),uu=a(ep,"CODE",{});var mT=i(uu);J4=r(mT,"pytest"),mT.forEach(s),X4=r(ep,"\u2019s "),du=a(ep,"CODE",{});var _T=i(du);Z4=r(_T,"parametrize"),_T.forEach(s),K4=r(ep," marker:"),ep.forEach(s),$1=h(e),c(Ll.$$.fragment,e),E1=h(e),le=a(e,"P",{});var Oo=i(le);Q4=r(Oo,"Same as with "),cu=a(Oo,"CODE",{});var vT=i(cu);e0=r(vT,"parameterized"),vT.forEach(s),t0=r(Oo,", with "),mu=a(Oo,"CODE",{});var wT=i(mu);s0=r(wT,"pytest.mark.parametrize"),wT.forEach(s),o0=r(Oo,` you can have a fine control over which sub-tests are
run, if the `),_u=a(Oo,"CODE",{});var yT=i(_u);r0=r(yT,"-k"),yT.forEach(s),l0=r(Oo,` filter doesn\u2019t do the job. Except, this parametrization function creates a slightly different set of
names for the sub-tests. Here is what they look like:`),Oo.forEach(s),g1=h(e),c(Ul.$$.fragment,e),b1=h(e),Zi=a(e,"P",{});var $T=i(Zi);a0=r($T,"and it will list:"),$T.forEach(s),k1=h(e),c(Nl.$$.fragment,e),C1=h(e),Ki=a(e,"P",{});var ET=i(Ki);i0=r(ET,"So now you can run just the specific test:"),ET.forEach(s),j1=h(e),c(Hl.$$.fragment,e),x1=h(e),Qi=a(e,"P",{});var gT=i(Qi);n0=r(gT,"as in the previous example."),gT.forEach(s),P1=h(e),gt=a(e,"H3",{class:!0});var H$=i(gt);Ns=a(H$,"A",{id:!0,class:!0,href:!0});var bT=i(Ns);vu=a(bT,"SPAN",{});var kT=i(vu);c(zl.$$.fragment,kT),kT.forEach(s),bT.forEach(s),p0=h(H$),wu=a(H$,"SPAN",{});var CT=i(wu);f0=r(CT,"Files and directories"),CT.forEach(s),H$.forEach(s),O1=h(e),Hs=a(e,"P",{});var z$=i(Hs);h0=r(z$,`In tests often we need to know where things are relative to the current test file, and it\u2019s not trivial since the test
could be invoked from more than one directory or could reside in sub-directories with different depths. A helper class
`),yu=a(z$,"CODE",{});var jT=i(yu);u0=r(jT,"transformers.test_utils.TestCasePlus"),jT.forEach(s),d0=r(z$,` solves this problem by sorting out all the basic paths and provides easy
accessors to them:`),z$.forEach(s),I1=h(e),zs=a(e,"UL",{});var R$=i(zs);Rl=a(R$,"LI",{});var G$=i(Rl);en=a(G$,"P",{});var bj=i(en);$u=a(bj,"CODE",{});var xT=i($u);c0=r(xT,"pathlib"),xT.forEach(s),m0=r(bj," objects (all fully resolved):"),bj.forEach(s),_0=h(G$),G=a(G$,"UL",{});var de=i(G);Gl=a(de,"LI",{});var F$=i(Gl);Eu=a(F$,"CODE",{});var PT=i(Eu);v0=r(PT,"test_file_path"),PT.forEach(s),w0=r(F$," - the current test file path, i.e. "),gu=a(F$,"CODE",{});var OT=i(gu);y0=r(OT,"__file__"),OT.forEach(s),F$.forEach(s),$0=h(de),tn=a(de,"LI",{});var kj=i(tn);bu=a(kj,"CODE",{});var IT=i(bu);E0=r(IT,"test_file_dir"),IT.forEach(s),g0=r(kj," - the directory containing the current test file"),kj.forEach(s),b0=h(de),Rs=a(de,"LI",{});var nm=i(Rs);ku=a(nm,"CODE",{});var TT=i(ku);k0=r(TT,"tests_dir"),TT.forEach(s),C0=r(nm," - the directory of the "),Cu=a(nm,"CODE",{});var AT=i(Cu);j0=r(AT,"tests"),AT.forEach(s),x0=r(nm," test suite"),nm.forEach(s),P0=h(de),Gs=a(de,"LI",{});var pm=i(Gs);ju=a(pm,"CODE",{});var DT=i(ju);O0=r(DT,"examples_dir"),DT.forEach(s),I0=r(pm," - the directory of the "),xu=a(pm,"CODE",{});var ST=i(xu);T0=r(ST,"examples"),ST.forEach(s),A0=r(pm," test suite"),pm.forEach(s),D0=h(de),sn=a(de,"LI",{});var Cj=i(sn);Pu=a(Cj,"CODE",{});var qT=i(Pu);S0=r(qT,"repo_root_dir"),qT.forEach(s),q0=r(Cj," - the directory of the repository"),Cj.forEach(s),L0=h(de),Se=a(de,"LI",{});var ti=i(Se);Ou=a(ti,"CODE",{});var LT=i(Ou);U0=r(LT,"src_dir"),LT.forEach(s),N0=r(ti," - the directory of "),Iu=a(ti,"CODE",{});var UT=i(Iu);H0=r(UT,"src"),UT.forEach(s),z0=r(ti," (i.e. where the "),Tu=a(ti,"CODE",{});var NT=i(Tu);R0=r(NT,"transformers"),NT.forEach(s),G0=r(ti," sub-dir resides)"),ti.forEach(s),de.forEach(s),G$.forEach(s),F0=h(R$),Fl=a(R$,"LI",{});var M$=i(Fl);Ml=a(M$,"P",{});var W$=i(Ml);M0=r(W$,"stringified paths---same as above but these return paths as strings, rather than "),Au=a(W$,"CODE",{});var HT=i(Au);W0=r(HT,"pathlib"),HT.forEach(s),B0=r(W$," objects:"),W$.forEach(s),Y0=h(M$),F=a(M$,"UL",{});var ce=i(F);Du=a(ce,"LI",{});var zT=i(Du);Su=a(zT,"CODE",{});var RT=i(Su);V0=r(RT,"test_file_path_str"),RT.forEach(s),zT.forEach(s),J0=h(ce),qu=a(ce,"LI",{});var GT=i(qu);Lu=a(GT,"CODE",{});var FT=i(Lu);X0=r(FT,"test_file_dir_str"),FT.forEach(s),GT.forEach(s),Z0=h(ce),Uu=a(ce,"LI",{});var MT=i(Uu);Nu=a(MT,"CODE",{});var WT=i(Nu);K0=r(WT,"tests_dir_str"),WT.forEach(s),MT.forEach(s),Q0=h(ce),Hu=a(ce,"LI",{});var BT=i(Hu);zu=a(BT,"CODE",{});var YT=i(zu);e6=r(YT,"examples_dir_str"),YT.forEach(s),BT.forEach(s),t6=h(ce),Ru=a(ce,"LI",{});var VT=i(Ru);Gu=a(VT,"CODE",{});var JT=i(Gu);s6=r(JT,"repo_root_dir_str"),JT.forEach(s),VT.forEach(s),o6=h(ce),Fu=a(ce,"LI",{});var XT=i(Fu);Mu=a(XT,"CODE",{});var ZT=i(Mu);r6=r(ZT,"src_dir_str"),ZT.forEach(s),XT.forEach(s),ce.forEach(s),M$.forEach(s),R$.forEach(s),T1=h(e),Fs=a(e,"P",{});var B$=i(Fs);l6=r(B$,`To start using those all you need is to make sure that the test resides in a subclass of
`),Wu=a(B$,"CODE",{});var KT=i(Wu);a6=r(KT,"transformers.test_utils.TestCasePlus"),KT.forEach(s),i6=r(B$,". For example:"),B$.forEach(s),A1=h(e),c(Wl.$$.fragment,e),D1=h(e),Y=a(e,"P",{});var Me=i(Y);n6=r(Me,"If you don\u2019t need to manipulate paths via "),Bu=a(Me,"CODE",{});var QT=i(Bu);p6=r(QT,"pathlib"),QT.forEach(s),f6=r(Me,` or you just need a path as a string, you can always invoked
`),Yu=a(Me,"CODE",{});var eA=i(Yu);h6=r(eA,"str()"),eA.forEach(s),u6=r(Me," on the "),Vu=a(Me,"CODE",{});var tA=i(Vu);d6=r(tA,"pathlib"),tA.forEach(s),c6=r(Me," object or use the accessors ending with "),Ju=a(Me,"CODE",{});var sA=i(Ju);m6=r(sA,"_str"),sA.forEach(s),_6=r(Me,". For example:"),Me.forEach(s),S1=h(e),c(Bl.$$.fragment,e),q1=h(e),bt=a(e,"H3",{class:!0});var Y$=i(bt);Ms=a(Y$,"A",{id:!0,class:!0,href:!0});var oA=i(Ms);Xu=a(oA,"SPAN",{});var rA=i(Xu);c(Yl.$$.fragment,rA),rA.forEach(s),oA.forEach(s),v6=h(Y$),Zu=a(Y$,"SPAN",{});var lA=i(Zu);w6=r(lA,"Temporary files and directories"),lA.forEach(s),Y$.forEach(s),L1=h(e),Ws=a(e,"P",{});var V$=i(Ws);y6=r(V$,`Using unique temporary files and directories are essential for parallel test running, so that the tests won\u2019t overwrite
each other\u2019s data. Also we want to get the temporary files and directories removed at the end of each test that created
them. Therefore, using packages like `),Ku=a(V$,"CODE",{});var aA=i(Ku);$6=r(aA,"tempfile"),aA.forEach(s),E6=r(V$,", which address these needs is essential."),V$.forEach(s),U1=h(e),on=a(e,"P",{});var iA=i(on);g6=r(iA,`However, when debugging tests, you need to be able to see what goes into the temporary file or directory and you want
to know it\u2019s exact path and not having it randomized on every test re-run.`),iA.forEach(s),N1=h(e),qe=a(e,"P",{});var tp=i(qe);b6=r(tp,"A helper class "),Qu=a(tp,"CODE",{});var nA=i(Qu);k6=r(nA,"transformers.test_utils.TestCasePlus"),nA.forEach(s),C6=r(tp,` is best used for such purposes. It\u2019s a sub-class of
`),ed=a(tp,"CODE",{});var pA=i(ed);j6=r(pA,"unittest.TestCase"),pA.forEach(s),x6=r(tp,", so we can easily inherit from it in the test modules."),tp.forEach(s),H1=h(e),rn=a(e,"P",{});var fA=i(rn);P6=r(fA,"Here is an example of its usage:"),fA.forEach(s),z1=h(e),c(Vl.$$.fragment,e),R1=h(e),Bs=a(e,"P",{});var J$=i(Bs);O6=r(J$,"This code creates a unique temporary directory, and sets "),td=a(J$,"CODE",{});var hA=i(td);I6=r(hA,"tmp_dir"),hA.forEach(s),T6=r(J$," to its location."),J$.forEach(s),G1=h(e),ln=a(e,"UL",{});var uA=i(ln);sd=a(uA,"LI",{});var dA=i(sd);A6=r(dA,"Create a unique temporary dir:"),dA.forEach(s),uA.forEach(s),F1=h(e),c(Jl.$$.fragment,e),M1=h(e),Xl=a(e,"P",{});var jj=i(Xl);od=a(jj,"CODE",{});var cA=i(od);D6=r(cA,"tmp_dir"),cA.forEach(s),S6=r(jj,` will contain the path to the created temporary dir. It will be automatically removed at the end of the
test.`),jj.forEach(s),W1=h(e),an=a(e,"UL",{});var mA=i(an);rd=a(mA,"LI",{});var _A=i(rd);q6=r(_A,"Create a temporary dir of my choice, ensure it\u2019s empty before the test starts and don\u2019t empty it after the test."),_A.forEach(s),mA.forEach(s),B1=h(e),c(Zl.$$.fragment,e),Y1=h(e),nn=a(e,"P",{});var vA=i(nn);L6=r(vA,`This is useful for debug when you want to monitor a specific directory and want to make sure the previous tests didn\u2019t
leave any data in there.`),vA.forEach(s),V1=h(e),pn=a(e,"UL",{});var wA=i(pn);Kl=a(wA,"LI",{});var X$=i(Kl);kt=a(X$,"P",{});var sp=i(kt);U6=r(sp,"You can override the default behavior by directly overriding the "),ld=a(sp,"CODE",{});var yA=i(ld);N6=r(yA,"before"),yA.forEach(s),H6=r(sp," and "),ad=a(sp,"CODE",{});var $A=i(ad);z6=r($A,"after"),$A.forEach(s),R6=r(sp,` args, leading to one of the
following behaviors:`),sp.forEach(s),G6=h(X$),ye=a(X$,"UL",{});var Io=i(ye);fn=a(Io,"LI",{});var xj=i(fn);id=a(xj,"CODE",{});var EA=i(id);F6=r(EA,"before=True"),EA.forEach(s),M6=r(xj,": the temporary dir will always be cleared at the beginning of the test."),xj.forEach(s),W6=h(Io),hn=a(Io,"LI",{});var Pj=i(hn);nd=a(Pj,"CODE",{});var gA=i(nd);B6=r(gA,"before=False"),gA.forEach(s),Y6=r(Pj,": if the temporary dir already existed, any existing files will remain there."),Pj.forEach(s),V6=h(Io),un=a(Io,"LI",{});var Oj=i(un);pd=a(Oj,"CODE",{});var bA=i(pd);J6=r(bA,"after=True"),bA.forEach(s),X6=r(Oj,": the temporary dir will always be deleted at the end of the test."),Oj.forEach(s),Z6=h(Io),dn=a(Io,"LI",{});var Ij=i(dn);fd=a(Ij,"CODE",{});var kA=i(fd);K6=r(kA,"after=False"),kA.forEach(s),Q6=r(Ij,": the temporary dir will always be left intact at the end of the test."),Ij.forEach(s),Io.forEach(s),X$.forEach(s),wA.forEach(s),J1=h(e),c(Ys.$$.fragment,e),X1=h(e),c(Vs.$$.fragment,e),Z1=h(e),Ct=a(e,"H3",{class:!0});var Z$=i(Ct);Js=a(Z$,"A",{id:!0,class:!0,href:!0});var CA=i(Js);hd=a(CA,"SPAN",{});var jA=i(hd);c(Ql.$$.fragment,jA),jA.forEach(s),CA.forEach(s),e7=h(Z$),ud=a(Z$,"SPAN",{});var xA=i(ud);t7=r(xA,"Temporary sys.path override"),xA.forEach(s),Z$.forEach(s),K1=h(e),Le=a(e,"P",{});var op=i(Le);s7=r(op,"If you need to temporary override "),dd=a(op,"CODE",{});var PA=i(dd);o7=r(PA,"sys.path"),PA.forEach(s),r7=r(op,` to import from another test for example, you can use the
`),cd=a(op,"CODE",{});var OA=i(cd);l7=r(OA,"ExtendSysPath"),OA.forEach(s),a7=r(op," context manager. Example:"),op.forEach(s),Q1=h(e),c(ea.$$.fragment,e),ew=h(e),jt=a(e,"H3",{class:!0});var K$=i(jt);Xs=a(K$,"A",{id:!0,class:!0,href:!0});var IA=i(Xs);md=a(IA,"SPAN",{});var TA=i(md);c(ta.$$.fragment,TA),TA.forEach(s),IA.forEach(s),i7=h(K$),_d=a(K$,"SPAN",{});var AA=i(_d);n7=r(AA,"Skipping tests"),AA.forEach(s),K$.forEach(s),tw=h(e),Zs=a(e,"P",{});var Q$=i(Zs);p7=r(Q$,`This is useful when a bug is found and a new test is written, yet the bug is not fixed yet. In order to be able to
commit it to the main repository we need make sure it\u2019s skipped during `),vd=a(Q$,"CODE",{});var DA=i(vd);f7=r(DA,"make test"),DA.forEach(s),h7=r(Q$,"."),Q$.forEach(s),sw=h(e),cn=a(e,"P",{});var SA=i(cn);u7=r(SA,"Methods:"),SA.forEach(s),ow=h(e),Ks=a(e,"UL",{});var eE=i(Ks);wd=a(eE,"LI",{});var qA=i(wd);sa=a(qA,"P",{});var tE=i(sa);d7=r(tE,"A "),yd=a(tE,"STRONG",{});var LA=i(yd);c7=r(LA,"skip"),LA.forEach(s),m7=r(tE,` means that you expect your test to pass only if some conditions are met, otherwise pytest should skip
running the test altogether. Common examples are skipping windows-only tests on non-windows platforms, or skipping
tests that depend on an external resource which is not available at the moment (for example a database).`),tE.forEach(s),qA.forEach(s),_7=h(eE),$d=a(eE,"LI",{});var UA=i($d);oa=a(UA,"P",{});var sE=i(oa);v7=r(sE,"A "),Ed=a(sE,"STRONG",{});var NA=i(Ed);w7=r(NA,"xfail"),NA.forEach(s),y7=r(sE,` means that you expect a test to fail for some reason. A common example is a test for a feature not yet
implemented, or a bug not yet fixed. When a test passes despite being expected to fail (marked with
pytest.mark.xfail), it\u2019s an xpass and will be reported in the test summary.`),sE.forEach(s),UA.forEach(s),eE.forEach(s),rw=h(e),ae=a(e,"P",{});var To=i(ae);$7=r(To,"One of the important differences between the two is that "),gd=a(To,"CODE",{});var HA=i(gd);E7=r(HA,"skip"),HA.forEach(s),g7=r(To," doesn\u2019t run the test, and "),bd=a(To,"CODE",{});var zA=i(bd);b7=r(zA,"xfail"),zA.forEach(s),k7=r(To,` does. So if the
code that\u2019s buggy causes some bad state that will affect other tests, do not use `),kd=a(To,"CODE",{});var RA=i(kd);C7=r(RA,"xfail"),RA.forEach(s),j7=r(To,"."),To.forEach(s),lw=h(e),xt=a(e,"H4",{class:!0});var oE=i(xt);Qs=a(oE,"A",{id:!0,class:!0,href:!0});var GA=i(Qs);Cd=a(GA,"SPAN",{});var FA=i(Cd);c(ra.$$.fragment,FA),FA.forEach(s),GA.forEach(s),x7=h(oE),jd=a(oE,"SPAN",{});var MA=i(jd);P7=r(MA,"Implementation"),MA.forEach(s),oE.forEach(s),aw=h(e),mn=a(e,"UL",{});var WA=i(mn);xd=a(WA,"LI",{});var BA=i(xd);O7=r(BA,"Here is how to skip whole test unconditionally:"),BA.forEach(s),WA.forEach(s),iw=h(e),c(la.$$.fragment,e),nw=h(e),_n=a(e,"P",{});var YA=i(_n);I7=r(YA,"or via pytest:"),YA.forEach(s),pw=h(e),c(aa.$$.fragment,e),fw=h(e),eo=a(e,"P",{});var rE=i(eo);T7=r(rE,"or the "),Pd=a(rE,"CODE",{});var VA=i(Pd);A7=r(VA,"xfail"),VA.forEach(s),D7=r(rE," way:"),rE.forEach(s),hw=h(e),c(ia.$$.fragment,e),uw=h(e),vn=a(e,"UL",{});var JA=i(vn);Od=a(JA,"LI",{});var XA=i(Od);S7=r(XA,"Here is how to skip a test based on some internal check inside the test:"),XA.forEach(s),JA.forEach(s),dw=h(e),c(na.$$.fragment,e),cw=h(e),wn=a(e,"P",{});var ZA=i(wn);q7=r(ZA,"or the whole module:"),ZA.forEach(s),mw=h(e),c(pa.$$.fragment,e),_w=h(e),to=a(e,"P",{});var lE=i(to);L7=r(lE,"or the "),Id=a(lE,"CODE",{});var KA=i(Id);U7=r(KA,"xfail"),KA.forEach(s),N7=r(lE," way:"),lE.forEach(s),vw=h(e),c(fa.$$.fragment,e),ww=h(e),yn=a(e,"UL",{});var QA=i(yn);Td=a(QA,"LI",{});var eD=i(Td);H7=r(eD,"Here is how to skip all tests in a module if some import is missing:"),eD.forEach(s),QA.forEach(s),yw=h(e),c(ha.$$.fragment,e),$w=h(e),$n=a(e,"UL",{});var tD=i($n);Ad=a(tD,"LI",{});var sD=i(Ad);z7=r(sD,"Skip a test based on a condition:"),sD.forEach(s),tD.forEach(s),Ew=h(e),c(ua.$$.fragment,e),gw=h(e),En=a(e,"P",{});var oD=i(En);R7=r(oD,"or:"),oD.forEach(s),bw=h(e),c(da.$$.fragment,e),kw=h(e),gn=a(e,"P",{});var rD=i(gn);G7=r(rD,"or skip the whole module:"),rD.forEach(s),Cw=h(e),c(ca.$$.fragment,e),jw=h(e),so=a(e,"P",{});var aE=i(so);F7=r(aE,"More details, example and ways are "),ma=a(aE,"A",{href:!0,rel:!0});var lD=i(ma);M7=r(lD,"here"),lD.forEach(s),W7=r(aE,"."),aE.forEach(s),xw=h(e),Pt=a(e,"H3",{class:!0});var iE=i(Pt);oo=a(iE,"A",{id:!0,class:!0,href:!0});var aD=i(oo);Dd=a(aD,"SPAN",{});var iD=i(Dd);c(_a.$$.fragment,iD),iD.forEach(s),aD.forEach(s),B7=h(iE),Sd=a(iE,"SPAN",{});var nD=i(Sd);Y7=r(nD,"Slow tests"),nD.forEach(s),iE.forEach(s),Pw=h(e),bn=a(e,"P",{});var pD=i(bn);V7=r(pD,`The library of tests is ever-growing, and some of the tests take minutes to run, therefore we can\u2019t afford waiting for
an hour for the test suite to complete on CI. Therefore, with some exceptions for essential tests, slow tests should be
marked as in the example below:`),pD.forEach(s),Ow=h(e),c(va.$$.fragment,e),Iw=h(e),Ue=a(e,"P",{});var rp=i(Ue);J7=r(rp,"Once a test is marked as "),qd=a(rp,"CODE",{});var fD=i(qd);X7=r(fD,"@slow"),fD.forEach(s),Z7=r(rp,", to run such tests set "),Ld=a(rp,"CODE",{});var hD=i(Ld);K7=r(hD,"RUN_SLOW=1"),hD.forEach(s),Q7=r(rp," env var, e.g.:"),rp.forEach(s),Tw=h(e),c(wa.$$.fragment,e),Aw=h(e),ie=a(e,"P",{});var Ao=i(ie);e8=r(Ao,"Some decorators like "),Ud=a(Ao,"CODE",{});var uD=i(Ud);t8=r(uD,"@parameterized"),uD.forEach(s),s8=r(Ao," rewrite test names, therefore "),Nd=a(Ao,"CODE",{});var dD=i(Nd);o8=r(dD,"@slow"),dD.forEach(s),r8=r(Ao,` and the rest of the skip decorators
`),Hd=a(Ao,"CODE",{});var cD=i(Hd);l8=r(cD,"@require_*"),cD.forEach(s),a8=r(Ao," have to be listed last for them to work correctly. Here is an example of the correct usage:"),Ao.forEach(s),Dw=h(e),c(ya.$$.fragment,e),Sw=h(e),kn=a(e,"P",{});var mD=i(kn);i8=r(mD,`As explained at the beginning of this document, slow tests get to run on a scheduled basis, rather than in PRs CI
checks. So it\u2019s possible that some problems will be missed during a PR submission and get merged. Such problems will
get caught during the next scheduled CI job. But it also means that it\u2019s important to run the slow tests on your
machine before submitting the PR.`),mD.forEach(s),qw=h(e),Cn=a(e,"P",{});var _D=i(Cn);n8=r(_D,"Here is a rough decision making mechanism for choosing which tests should be marked as slow:"),_D.forEach(s),Lw=h(e),jn=a(e,"P",{});var vD=i(jn);p8=r(vD,`If the test is focused on one of the library\u2019s internal components (e.g., modeling files, tokenization files,
pipelines), then we should run that test in the non-slow test suite. If it\u2019s focused on an other aspect of the library,
such as the documentation or the examples, then we should run these tests in the slow test suite. And then, to refine
this approach we should have exceptions:`),vD.forEach(s),Uw=h(e),ne=a(e,"UL",{});var Do=i(ne);zd=a(Do,"LI",{});var wD=i(zd);f8=r(wD,`All tests that need to download a heavy set of weights or a dataset that is larger than ~50MB (e.g., model or
tokenizer integration tests, pipeline integration tests) should be set to slow. If you\u2019re adding a new model, you
should create and upload to the hub a tiny version of it (with random weights) for integration tests. This is
discussed in the following paragraphs.`),wD.forEach(s),h8=h(Do),Rd=a(Do,"LI",{});var yD=i(Rd);u8=r(yD,"All tests that need to do a training not specifically optimized to be fast should be set to slow."),yD.forEach(s),d8=h(Do),Ot=a(Do,"LI",{});var lp=i(Ot);c8=r(lp,`We can introduce exceptions if some of these should-be-non-slow tests are excruciatingly slow, and set them to
`),Gd=a(lp,"CODE",{});var $D=i(Gd);m8=r($D,"@slow"),$D.forEach(s),_8=r(lp,`. Auto-modeling tests, which save and load large files to disk, are a good example of tests that are marked
as `),Fd=a(lp,"CODE",{});var ED=i(Fd);v8=r(ED,"@slow"),ED.forEach(s),w8=r(lp,"."),lp.forEach(s),y8=h(Do),Md=a(Do,"LI",{});var gD=i(Md);$8=r(gD,"If a test completes under 1 second on CI (including downloads if any) then it should be a normal test regardless."),gD.forEach(s),Do.forEach(s),Nw=h(e),Ne=a(e,"P",{});var ap=i(Ne);E8=r(ap,`Collectively, all the non-slow tests need to cover entirely the different internals, while remaining fast. For example,
a significant coverage can be achieved by testing with specially created tiny models with random weights. Such models
have the very minimal number of layers (e.g., 2), vocab size (e.g., 1000), etc. Then the `),Wd=a(ap,"CODE",{});var bD=i(Wd);g8=r(bD,"@slow"),bD.forEach(s),b8=r(ap,` tests can use large
slow models to do qualitative testing. To see the use of these simply look for `),Bd=a(ap,"EM",{});var kD=i(Bd);k8=r(kD,"tiny"),kD.forEach(s),C8=r(ap," models with:"),ap.forEach(s),Hw=h(e),c($a.$$.fragment,e),zw=h(e),He=a(e,"P",{});var ip=i(He);j8=r(ip,"Here is a an example of a "),Ea=a(ip,"A",{href:!0,rel:!0});var CD=i(Ea);x8=r(CD,"script"),CD.forEach(s),P8=r(ip,` that created the tiny model
`),ga=a(ip,"A",{href:!0,rel:!0});var jD=i(ga);O8=r(jD,"stas/tiny-wmt19-en-de"),jD.forEach(s),I8=r(ip,`. You can easily adjust it to your specific
model\u2019s architecture.`),ip.forEach(s),Rw=h(e),ro=a(e,"P",{});var nE=i(ro);T8=r(nE,`It\u2019s easy to measure the run-time incorrectly if for example there is an overheard of downloading a huge model, but if
you test it locally the downloaded files would be cached and thus the download time not measured. Hence check the
execution speed report in CI logs instead (the output of `),Yd=a(nE,"CODE",{});var xD=i(Yd);A8=r(xD,"pytest --durations=0 tests"),xD.forEach(s),D8=r(nE,")."),nE.forEach(s),Gw=h(e),xn=a(e,"P",{});var PD=i(xn);S8=r(PD,`That report is also useful to find slow outliers that aren\u2019t marked as such, or which need to be re-written to be fast.
If you notice that the test suite starts getting slow on CI, the top listing of this report will show the slowest
tests.`),PD.forEach(s),Fw=h(e),It=a(e,"H3",{class:!0});var pE=i(It);lo=a(pE,"A",{id:!0,class:!0,href:!0});var OD=i(lo);Vd=a(OD,"SPAN",{});var ID=i(Vd);c(ba.$$.fragment,ID),ID.forEach(s),OD.forEach(s),q8=h(pE),Jd=a(pE,"SPAN",{});var TD=i(Jd);L8=r(TD,"Testing the stdout/stderr output"),TD.forEach(s),pE.forEach(s),Mw=h(e),V=a(e,"P",{});var We=i(V);U8=r(We,"In order to test functions that write to "),Xd=a(We,"CODE",{});var AD=i(Xd);N8=r(AD,"stdout"),AD.forEach(s),H8=r(We," and/or "),Zd=a(We,"CODE",{});var DD=i(Zd);z8=r(DD,"stderr"),DD.forEach(s),R8=r(We,`, the test can access those streams using the
`),Kd=a(We,"CODE",{});var SD=i(Kd);G8=r(SD,"pytest"),SD.forEach(s),F8=r(We,"\u2019s "),ka=a(We,"A",{href:!0,rel:!0});var qD=i(ka);M8=r(qD,"capsys system"),qD.forEach(s),W8=r(We,". Here is how this is accomplished:"),We.forEach(s),Ww=h(e),c(Ca.$$.fragment,e),Bw=h(e),ao=a(e,"P",{});var fE=i(ao);B8=r(fE,"And, of course, most of the time, "),Qd=a(fE,"CODE",{});var LD=i(Qd);Y8=r(LD,"stderr"),LD.forEach(s),V8=r(fE,` will come as a part of an exception, so try/except has to be used in such
a case:`),fE.forEach(s),Yw=h(e),c(ja.$$.fragment,e),Vw=h(e),io=a(e,"P",{});var hE=i(io);J8=r(hE,"Another approach to capturing stdout is via "),ec=a(hE,"CODE",{});var UD=i(ec);X8=r(UD,"contextlib.redirect_stdout"),UD.forEach(s),Z8=r(hE,":"),hE.forEach(s),Jw=h(e),c(xa.$$.fragment,e),Xw=h(e),T=a(e,"P",{});var X=i(T);K8=r(X,"An important potential issue with capturing stdout is that it may contain "),tc=a(X,"CODE",{});var ND=i(tc);Q8=r(ND,"\\r"),ND.forEach(s),e9=r(X," characters that in normal "),sc=a(X,"CODE",{});var HD=i(sc);t9=r(HD,"print"),HD.forEach(s),s9=r(X,`
reset everything that has been printed so far. There is no problem with `),oc=a(X,"CODE",{});var zD=i(oc);o9=r(zD,"pytest"),zD.forEach(s),r9=r(X,", but with "),rc=a(X,"CODE",{});var RD=i(rc);l9=r(RD,"pytest -s"),RD.forEach(s),a9=r(X,` these
characters get included in the buffer, so to be able to have the test run with and without `),lc=a(X,"CODE",{});var GD=i(lc);i9=r(GD,"-s"),GD.forEach(s),n9=r(X,`, you have to make an
extra cleanup to the captured output, using `),ac=a(X,"CODE",{});var FD=i(ac);p9=r(FD,"re.sub(r'~.*\\r', '', buf, 0, re.M)"),FD.forEach(s),f9=r(X,"."),X.forEach(s),Zw=h(e),no=a(e,"P",{});var uE=i(no);h9=r(uE,`But, then we have a helper context manager wrapper to automatically take care of it all, regardless of whether it has
some `),ic=a(uE,"CODE",{});var MD=i(ic);u9=r(MD,"\\r"),MD.forEach(s),d9=r(uE,"\u2019s in it or not, so it\u2019s a simple:"),uE.forEach(s),Kw=h(e),c(Pa.$$.fragment,e),Qw=h(e),Pn=a(e,"P",{});var WD=i(Pn);c9=r(WD,"Here is a full test example:"),WD.forEach(s),ey=h(e),c(Oa.$$.fragment,e),ty=h(e),ze=a(e,"P",{});var np=i(ze);m9=r(np,"If you\u2019d like to capture "),nc=a(np,"CODE",{});var BD=i(nc);_9=r(BD,"stderr"),BD.forEach(s),v9=r(np," use the "),pc=a(np,"CODE",{});var YD=i(pc);w9=r(YD,"CaptureStderr"),YD.forEach(s),y9=r(np," class instead:"),np.forEach(s),sy=h(e),c(Ia.$$.fragment,e),oy=h(e),po=a(e,"P",{});var dE=i(po);$9=r(dE,"If you need to capture both streams at once, use the parent "),fc=a(dE,"CODE",{});var VD=i(fc);E9=r(VD,"CaptureStd"),VD.forEach(s),g9=r(dE," class:"),dE.forEach(s),ry=h(e),c(Ta.$$.fragment,e),ly=h(e),On=a(e,"P",{});var JD=i(On);b9=r(JD,`Also, to aid debugging test issues, by default these context managers automatically replay the captured streams on exit
from the context.`),JD.forEach(s),ay=h(e),Tt=a(e,"H3",{class:!0});var cE=i(Tt);fo=a(cE,"A",{id:!0,class:!0,href:!0});var XD=i(fo);hc=a(XD,"SPAN",{});var ZD=i(hc);c(Aa.$$.fragment,ZD),ZD.forEach(s),XD.forEach(s),k9=h(cE),uc=a(cE,"SPAN",{});var KD=i(uc);C9=r(KD,"Capturing logger stream"),KD.forEach(s),cE.forEach(s),iy=h(e),ho=a(e,"P",{});var mE=i(ho);j9=r(mE,"If you need to validate the output of a logger, you can use "),dc=a(mE,"CODE",{});var QD=i(dc);x9=r(QD,"CaptureLogger"),QD.forEach(s),P9=r(mE,":"),mE.forEach(s),ny=h(e),c(Da.$$.fragment,e),py=h(e),At=a(e,"H3",{class:!0});var _E=i(At);uo=a(_E,"A",{id:!0,class:!0,href:!0});var eS=i(uo);cc=a(eS,"SPAN",{});var tS=i(cc);c(Sa.$$.fragment,tS),tS.forEach(s),eS.forEach(s),O9=h(_E),mc=a(_E,"SPAN",{});var sS=i(mc);I9=r(sS,"Testing with environment variables"),sS.forEach(s),_E.forEach(s),fy=h(e),qa=a(e,"P",{});var Tj=i(qa);T9=r(Tj,`If you want to test the impact of environment variables for a specific test you can use a helper decorator
`),_c=a(Tj,"CODE",{});var oS=i(_c);A9=r(oS,"transformers.testing_utils.mockenv"),oS.forEach(s),Tj.forEach(s),hy=h(e),c(La.$$.fragment,e),uy=h(e),pe=a(e,"P",{});var So=i(pe);D9=r(So,"At times an external program needs to be called, which requires setting "),vc=a(So,"CODE",{});var rS=i(vc);S9=r(rS,"PYTHONPATH"),rS.forEach(s),q9=r(So," in "),wc=a(So,"CODE",{});var lS=i(wc);L9=r(lS,"os.environ"),lS.forEach(s),U9=r(So,` to include
multiple local paths. A helper class `),yc=a(So,"CODE",{});var aS=i(yc);N9=r(aS,"transformers.test_utils.TestCasePlus"),aS.forEach(s),H9=r(So," comes to help:"),So.forEach(s),dy=h(e),c(Ua.$$.fragment,e),cy=h(e),N=a(e,"P",{});var me=i(N);z9=r(me,"Depending on whether the test file was under the "),$c=a(me,"CODE",{});var iS=i($c);R9=r(iS,"tests"),iS.forEach(s),G9=r(me," test suite or "),Ec=a(me,"CODE",{});var nS=i(Ec);F9=r(nS,"examples"),nS.forEach(s),M9=r(me,` it\u2019ll correctly set up
`),gc=a(me,"CODE",{});var pS=i(gc);W9=r(pS,"env[PYTHONPATH]"),pS.forEach(s),B9=r(me," to include one of these two directories, and also the "),bc=a(me,"CODE",{});var fS=i(bc);Y9=r(fS,"src"),fS.forEach(s),V9=r(me,` directory to ensure the testing is
done against the current repo, and finally with whatever `),kc=a(me,"CODE",{});var hS=i(kc);J9=r(hS,"env[PYTHONPATH]"),hS.forEach(s),X9=r(me,` was already set to before the test was
called if anything.`),me.forEach(s),my=h(e),co=a(e,"P",{});var vE=i(co);Z9=r(vE,"This helper method creates a copy of the "),Cc=a(vE,"CODE",{});var uS=i(Cc);K9=r(uS,"os.environ"),uS.forEach(s),Q9=r(vE," object, so the original remains intact."),vE.forEach(s),_y=h(e),Dt=a(e,"H3",{class:!0});var wE=i(Dt);mo=a(wE,"A",{id:!0,class:!0,href:!0});var dS=i(mo);jc=a(dS,"SPAN",{});var cS=i(jc);c(Na.$$.fragment,cS),cS.forEach(s),dS.forEach(s),eC=h(wE),xc=a(wE,"SPAN",{});var mS=i(xc);tC=r(mS,"Getting reproducible results"),mS.forEach(s),wE.forEach(s),vy=h(e),In=a(e,"P",{});var _S=i(In);sC=r(_S,`In some situations you may want to remove randomness for your tests. To get identical reproducable results set, you
will need to fix the seed:`),_S.forEach(s),wy=h(e),c(Ha.$$.fragment,e),yy=h(e),St=a(e,"H3",{class:!0});var yE=i(St);_o=a(yE,"A",{id:!0,class:!0,href:!0});var vS=i(_o);Pc=a(vS,"SPAN",{});var wS=i(Pc);c(za.$$.fragment,wS),wS.forEach(s),vS.forEach(s),oC=h(yE),Oc=a(yE,"SPAN",{});var yS=i(Oc);rC=r(yS,"Debugging tests"),yS.forEach(s),yE.forEach(s),$y=h(e),Tn=a(e,"P",{});var $S=i(Tn);lC=r($S,"To start a debugger at the point of the warning, do this:"),$S.forEach(s),Ey=h(e),c(Ra.$$.fragment,e),gy=h(e),qt=a(e,"H2",{class:!0});var $E=i(qt);vo=a($E,"A",{id:!0,class:!0,href:!0});var ES=i(vo);Ic=a(ES,"SPAN",{});var gS=i(Ic);c(Ga.$$.fragment,gS),gS.forEach(s),ES.forEach(s),aC=h($E),Tc=a($E,"SPAN",{});var bS=i(Tc);iC=r(bS,"Working with github actions workflows"),bS.forEach(s),$E.forEach(s),by=h(e),An=a(e,"P",{});var kS=i(An);nC=r(kS,"To trigger a self-push workflow CI job, you must:"),kS.forEach(s),ky=h(e),fe=a(e,"OL",{});var qo=i(fe);Fa=a(qo,"LI",{});var EE=i(Fa);pC=r(EE,"Create a new branch on "),Ac=a(EE,"CODE",{});var CS=i(Ac);fC=r(CS,"transformers"),CS.forEach(s),hC=r(EE," origin (not a fork!)."),EE.forEach(s),uC=h(qo),H=a(qo,"LI",{});var K=i(H);dC=r(K,"The branch name has to start with either "),Dc=a(K,"CODE",{});var jS=i(Dc);cC=r(jS,"ci_"),jS.forEach(s),mC=r(K," or "),Sc=a(K,"CODE",{});var xS=i(Sc);_C=r(xS,"ci-"),xS.forEach(s),vC=r(K," ("),qc=a(K,"CODE",{});var PS=i(qc);wC=r(PS,"master"),PS.forEach(s),yC=r(K,` triggers it too, but we can\u2019t do PRs on
`),Lc=a(K,"CODE",{});var OS=i(Lc);$C=r(OS,"master"),OS.forEach(s),EC=r(K,`). It also gets triggered only for specific paths - you can find the up-to-date definition in case it
changed since this document has been written `),Ma=a(K,"A",{href:!0,rel:!0});var IS=i(Ma);gC=r(IS,"here"),IS.forEach(s),bC=r(K," under "),Uc=a(K,"EM",{});var TS=i(Uc);kC=r(TS,"push:"),TS.forEach(s),K.forEach(s),CC=h(qo),Nc=a(qo,"LI",{});var AS=i(Nc);jC=r(AS,"Create a PR from this branch."),AS.forEach(s),xC=h(qo),Wa=a(qo,"LI",{});var gE=i(Wa);PC=r(gE,"Then you can see the job appear "),Ba=a(gE,"A",{href:!0,rel:!0});var DS=i(Ba);OC=r(DS,"here"),DS.forEach(s),IC=r(gE,`. It may not run right away if there
is a backlog.`),gE.forEach(s),qo.forEach(s),Cy=h(e),Lt=a(e,"H2",{class:!0});var bE=i(Lt);wo=a(bE,"A",{id:!0,class:!0,href:!0});var SS=i(wo);Hc=a(SS,"SPAN",{});var qS=i(Hc);c(Ya.$$.fragment,qS),qS.forEach(s),SS.forEach(s),TC=h(bE),zc=a(bE,"SPAN",{});var LS=i(zc);AC=r(LS,"Testing Experimental CI Features"),LS.forEach(s),bE.forEach(s),jy=h(e),Dn=a(e,"P",{});var US=i(Dn);DC=r(US,`Testing CI features can be potentially problematic as it can interfere with the normal CI functioning. Therefore if a
new CI feature is to be added, it should be done as following.`),US.forEach(s),xy=h(e),he=a(e,"OL",{});var Lo=i(he);Rc=a(Lo,"LI",{});var NS=i(Rc);SC=r(NS,"Create a new dedicated job that tests what needs to be tested"),NS.forEach(s),qC=h(Lo),Gc=a(Lo,"LI",{});var HS=i(Gc);LC=r(HS,"The new job must always succeed so that it gives us a green \u2713 (details below)."),HS.forEach(s),UC=h(Lo),Fc=a(Lo,"LI",{});var zS=i(Fc);NC=r(zS,`Let it run for some days to see that a variety of different PR types get to run on it (user fork branches,
non-forked branches, branches originating from github.com UI direct file edit, various forced pushes, etc. - there
are so many) while monitoring the experimental job\u2019s logs (not the overall job green as it\u2019s purposefully always
green)`),zS.forEach(s),HC=h(Lo),Mc=a(Lo,"LI",{});var RS=i(Mc);zC=r(RS,"When it\u2019s clear that everything is solid, then merge the new changes into existing jobs."),RS.forEach(s),Lo.forEach(s),Py=h(e),Sn=a(e,"P",{});var GS=i(Sn);RC=r(GS,"That way experiments on CI functionality itself won\u2019t interfere with the normal workflow."),GS.forEach(s),Oy=h(e),qn=a(e,"P",{});var FS=i(qn);GC=r(FS,"Now how can we make the job always succeed while the new CI feature is being developed?"),FS.forEach(s),Iy=h(e),Ln=a(e,"P",{});var MS=i(Ln);FC=r(MS,`Some CIs, like TravisCI support ignore-step-failure and will report the overall job as successful, but CircleCI and
Github Actions as of this writing don\u2019t support that.`),MS.forEach(s),Ty=h(e),Un=a(e,"P",{});var WS=i(Un);MC=r(WS,"So the following workaround can be used:"),WS.forEach(s),Ay=h(e),yo=a(e,"OL",{});var kE=i(yo);Nn=a(kE,"LI",{});var Aj=i(Nn);Wc=a(Aj,"CODE",{});var BS=i(Wc);WC=r(BS,"set +euo pipefail"),BS.forEach(s),BC=r(Aj," at the beginning of the run command to suppress most potential failures in the bash script."),Aj.forEach(s),YC=h(kE),Ut=a(kE,"LI",{});var pp=i(Ut);VC=r(pp,"the last command must be a success: "),Bc=a(pp,"CODE",{});var YS=i(Bc);JC=r(YS,'echo "done"'),YS.forEach(s),XC=r(pp," or just "),Yc=a(pp,"CODE",{});var VS=i(Yc);ZC=r(VS,"true"),VS.forEach(s),KC=r(pp," will do"),pp.forEach(s),kE.forEach(s),Dy=h(e),Hn=a(e,"P",{});var JS=i(Hn);QC=r(JS,"Here is an example:"),JS.forEach(s),Sy=h(e),c(Va.$$.fragment,e),qy=h(e),zn=a(e,"P",{});var XS=i(zn);ej=r(XS,"For simple commands you could also do:"),XS.forEach(s),Ly=h(e),c(Ja.$$.fragment,e),Uy=h(e),$o=a(e,"P",{});var CE=i($o);tj=r(CE,`Of course, once satisfied with the results, integrate the experimental step or job with the rest of the normal jobs,
while removing `),Vc=a(CE,"CODE",{});var ZS=i(Vc);sj=r(ZS,"set +euo pipefail"),ZS.forEach(s),oj=r(CE,` or any other things you may have added to ensure that the experimental job doesn\u2019t
interfere with the normal CI functioning.`),CE.forEach(s),Ny=h(e),Eo=a(e,"P",{});var jE=i(Eo);rj=r(jE,"This whole process would have been much easier if we only could set something like "),Jc=a(jE,"CODE",{});var KS=i(Jc);lj=r(KS,"allow-failure"),KS.forEach(s),aj=r(jE,` for the
experimental step, and let it fail without impacting the overall status of PRs. But as mentioned earlier CircleCI and
Github Actions don\u2019t support it at the moment.`),jE.forEach(s),Hy=h(e),Rn=a(e,"P",{});var QS=i(Rn);ij=r(QS,"You can vote for this feature and see where it is at at these CI-specific threads:"),QS.forEach(s),zy=h(e),go=a(e,"UL",{});var xE=i(go);Xc=a(xE,"LI",{});var eq=i(Xc);Xa=a(eq,"A",{href:!0,rel:!0});var tq=i(Xa);nj=r(tq,"Github Actions:"),tq.forEach(s),eq.forEach(s),pj=h(xE),Zc=a(xE,"LI",{});var sq=i(Zc);Za=a(sq,"A",{href:!0,rel:!0});var oq=i(Za);fj=r(oq,"CircleCI:"),oq.forEach(s),sq.forEach(s),xE.forEach(s),this.h()},h(){u($,"name","hf:doc:metadata"),u($,"content",JSON.stringify(dq)),u(b,"id","testing"),u(b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(b,"href","#testing"),u(g,"class","relative group"),u(zt,"id","how-transformers-are-tested"),u(zt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(zt,"href","#how-transformers-are-tested"),u(Ve,"class","relative group"),u(zo,"href","https://github.com/huggingface/transformers-doc2mdx/tree/master/.circleci/config.yml"),u(zo,"rel","nofollow"),u(Mo,"href","https://github.com/huggingface/transformers/actions"),u(Mo,"rel","nofollow"),u(Wo,"href","https://github.com/huggingface/transformers-doc2mdx/tree/master/.github/workflows/github-torch-hub.yml"),u(Wo,"rel","nofollow"),u(Bo,"href","https://github.com/huggingface/transformers-doc2mdx/tree/master/.github/workflows/self-push.yml"),u(Bo,"rel","nofollow"),u(Yo,"href","https://github.com/huggingface/transformers-doc2mdx/tree/master/.github/workflows/self-scheduled.yml"),u(Yo,"rel","nofollow"),u(Jo,"href","https://github.com/huggingface/transformers/actions"),u(Jo,"rel","nofollow"),u(Ft,"id","running-tests"),u(Ft,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Ft,"href","#running-tests"),u(Xe,"class","relative group"),u(Mt,"id","choosing-which-tests-to-run"),u(Mt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Mt,"href","#choosing-which-tests-to-run"),u(Ze,"class","relative group"),u(Ko,"href","https://docs.pytest.org/en/latest/usage.html"),u(Ko,"rel","nofollow"),u(Bt,"id","getting-the-list-of-all-tests"),u(Bt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Bt,"href","#getting-the-list-of-all-tests"),u(Ke,"class","relative group"),u(Yt,"id","run-a-specific-test-module"),u(Yt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Yt,"href","#run-a-specific-test-module"),u(Qe,"class","relative group"),u(Vt,"id","run-specific-tests"),u(Vt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Vt,"href","#run-specific-tests"),u(et,"class","relative group"),u(es,"id","run-only-modified-tests"),u(es,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(es,"href","#run-only-modified-tests"),u(tt,"class","relative group"),u(vr,"href","https://github.com/anapaulagomes/pytest-picked"),u(vr,"rel","nofollow"),u(ss,"id","automatically-rerun-failed-tests-on-source-modification"),u(ss,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ss,"href","#automatically-rerun-failed-tests-on-source-modification"),u(st,"class","relative group"),u(gr,"href","https://github.com/pytest-dev/pytest-xdist"),u(gr,"rel","nofollow"),u(xr,"href","https://github.com/joeyespo/pytest-watch"),u(xr,"rel","nofollow"),u(os,"id","skip-a-test-module"),u(os,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(os,"href","#skip-a-test-module"),u(rt,"class","relative group"),u(ls,"id","clearing-state"),u(ls,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ls,"href","#clearing-state"),u(lt,"class","relative group"),u(as,"id","running-tests-in-parallel"),u(as,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(as,"href","#running-tests-in-parallel"),u(at,"class","relative group"),u(Dr,"href","https://github.com/ESSS/pytest-replay"),u(Dr,"rel","nofollow"),u(is,"id","test-order-and-repetition"),u(is,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(is,"href","#test-order-and-repetition"),u(it,"class","relative group"),u(ns,"id","repeat-tests"),u(ns,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ns,"href","#repeat-tests"),u(nt,"class","relative group"),u(Lr,"href","https://github.com/dropbox/pytest-flakefinder"),u(Lr,"rel","nofollow"),u(hs,"id","run-tests-in-a-random-order"),u(hs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(hs,"href","#run-tests-in-a-random-order"),u(pt,"class","relative group"),u(Wr,"href","https://github.com/jbasko/pytest-random-order"),u(Wr,"rel","nofollow"),u(Br,"href","https://github.com/pytest-dev/pytest-randomly"),u(Br,"rel","nofollow"),u(ms,"id","look-and-feel-variations"),u(ms,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ms,"href","#look-and-feel-variations"),u(ft,"class","relative group"),u(_s,"id","pytestsugar"),u(_s,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(_s,"href","#pytestsugar"),u(ht,"class","relative group"),u(Xr,"href","https://github.com/Frozenball/pytest-sugar"),u(Xr,"rel","nofollow"),u(vs,"id","report-each-subtest-name-and-its-progress"),u(vs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(vs,"href","#report-each-subtest-name-and-its-progress"),u(ut,"class","relative group"),u(ws,"id","instantly-shows-failed-tests"),u(ws,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ws,"href","#instantly-shows-failed-tests"),u(dt,"class","relative group"),u(ol,"href","https://github.com/pytest-dev/pytest-instafail"),u(ol,"rel","nofollow"),u(ys,"id","to-gpu-or-not-to-gpu"),u(ys,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ys,"href","#to-gpu-or-not-to-gpu"),u(ct,"class","relative group"),u(xs,"id","distributed-training"),u(xs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(xs,"href","#distributed-training"),u(mt,"class","relative group"),u(ml,"href","https://github.com/huggingface/transformers-doc2mdx/tree/master/tests/test_trainer_distributed.py"),u(ml,"rel","nofollow"),u(_l,"href","https://github.com/huggingface/transformers-doc2mdx/tree/master/tests/deepspeed/test_deepspeed.py"),u(_l,"rel","nofollow"),u(Is,"id","output-capture"),u(Is,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Is,"href","#output-capture"),u(vt,"class","relative group"),u(Ts,"id","color-control"),u(Ts,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Ts,"href","#color-control"),u(wt,"class","relative group"),u(As,"id","sending-test-report-to-online-pastebin-service"),u(As,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(As,"href","#sending-test-report-to-online-pastebin-service"),u(yt,"class","relative group"),u(Ds,"id","writing-tests"),u(Ds,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Ds,"href","#writing-tests"),u($t,"class","relative group"),u(xl,"href","https://docs.pytest.org/en/stable/unittest.html"),u(xl,"rel","nofollow"),u(Ss,"id","parametrization"),u(Ss,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Ss,"href","#parametrization"),u(Et,"class","relative group"),u(ql,"href","https://pypi.org/project/parameterized/"),u(ql,"rel","nofollow"),u(Ns,"id","files-and-directories"),u(Ns,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Ns,"href","#files-and-directories"),u(gt,"class","relative group"),u(Ms,"id","temporary-files-and-directories"),u(Ms,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Ms,"href","#temporary-files-and-directories"),u(bt,"class","relative group"),u(Js,"id","temporary-syspath-override"),u(Js,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Js,"href","#temporary-syspath-override"),u(Ct,"class","relative group"),u(Xs,"id","skipping-tests"),u(Xs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Xs,"href","#skipping-tests"),u(jt,"class","relative group"),u(Qs,"id","implementation"),u(Qs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Qs,"href","#implementation"),u(xt,"class","relative group"),u(ma,"href","https://docs.pytest.org/en/latest/skipping.html"),u(ma,"rel","nofollow"),u(oo,"id","slow-tests"),u(oo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(oo,"href","#slow-tests"),u(Pt,"class","relative group"),u(Ea,"href","https://github.com/huggingface/transformers-doc2mdx/tree/master/scripts/fsmt/fsmt-make-tiny-model.py"),u(Ea,"rel","nofollow"),u(ga,"href","https://huggingface.co/stas/tiny-wmt19-en-de"),u(ga,"rel","nofollow"),u(lo,"id","testing-the-stdoutstderr-output"),u(lo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(lo,"href","#testing-the-stdoutstderr-output"),u(It,"class","relative group"),u(ka,"href","https://docs.pytest.org/en/latest/capture.html"),u(ka,"rel","nofollow"),u(fo,"id","capturing-logger-stream"),u(fo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(fo,"href","#capturing-logger-stream"),u(Tt,"class","relative group"),u(uo,"id","testing-with-environment-variables"),u(uo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(uo,"href","#testing-with-environment-variables"),u(At,"class","relative group"),u(mo,"id","getting-reproducible-results"),u(mo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(mo,"href","#getting-reproducible-results"),u(Dt,"class","relative group"),u(_o,"id","debugging-tests"),u(_o,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(_o,"href","#debugging-tests"),u(St,"class","relative group"),u(vo,"id","working-with-github-actions-workflows"),u(vo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(vo,"href","#working-with-github-actions-workflows"),u(qt,"class","relative group"),u(Ma,"href","https://github.com/huggingface/transformers/blob/master/.github/workflows/self-push.yml"),u(Ma,"rel","nofollow"),u(Ba,"href","https://github.com/huggingface/transformers/actions/workflows/self-push.yml"),u(Ba,"rel","nofollow"),u(wo,"id","testing-experimental-ci-features"),u(wo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(wo,"href","#testing-experimental-ci-features"),u(Lt,"class","relative group"),u(Xa,"href","https://github.com/actions/toolkit/issues/399"),u(Xa,"rel","nofollow"),u(Za,"href","https://ideas.circleci.com/ideas/CCI-I-344"),u(Za,"rel","nofollow")},m(e,n){t(document.head,$),p(e,x,n),p(e,g,n),t(g,b),t(b,A),m(j,A,null),t(g,z),t(g,D),t(D,O),p(e,k,n),p(e,q,n),t(q,R),p(e,Nt,n),p(e,$e,n),t($e,Be),p(e,S,n),p(e,ve,n),t(ve,Ye),t(Ye,Ht),t(Ht,si),t(Ye,OE),t(ve,IE),t(ve,oi),t(oi,fp),t(fp,TE),t(oi,AE),p(e,fm,n),p(e,Ve,n),t(Ve,zt),t(zt,hp),m(Uo,hp,null),t(Ve,DE),t(Ve,up),t(up,SE),p(e,hm,n),p(e,Rt,n),t(Rt,No),t(No,Ho),t(Ho,qE),t(Ho,zo),t(zo,LE),t(Ho,UE),t(No,NE),t(No,Ro),t(Ro,HE),t(Ro,dp),t(dp,zE),t(Ro,RE),t(Rt,GE),t(Rt,Go),t(Go,Fo),t(Fo,FE),t(Fo,Mo),t(Mo,ME),t(Fo,WE),t(Go,BE),t(Go,Je),t(Je,cp),t(cp,ri),t(ri,Wo),t(Wo,YE),t(ri,VE),t(Je,JE),t(Je,mp),t(mp,L),t(L,Bo),t(Bo,XE),t(L,ZE),t(L,_p),t(_p,KE),t(L,QE),t(L,vp),t(vp,eg),t(L,tg),t(L,wp),t(wp,sg),t(L,og),t(L,yp),t(yp,rg),t(L,lg),t(L,$p),t($p,ag),t(L,ig),t(Je,ng),t(Je,Ep),t(Ep,Ee),t(Ee,Yo),t(Yo,pg),t(Ee,fg),t(Ee,gp),t(gp,hg),t(Ee,ug),t(Ee,bp),t(bp,dg),t(Ee,cg),p(e,um,n),m(Vo,e,n),p(e,dm,n),p(e,Gt,n),t(Gt,mg),t(Gt,Jo),t(Jo,_g),t(Gt,vg),p(e,cm,n),p(e,Xe,n),t(Xe,Ft),t(Ft,kp),m(Xo,kp,null),t(Xe,wg),t(Xe,Cp),t(Cp,yg),p(e,mm,n),p(e,Ze,n),t(Ze,Mt),t(Mt,jp),m(Zo,jp,null),t(Ze,$g),t(Ze,xp),t(xp,Eg),p(e,_m,n),p(e,Wt,n),t(Wt,gg),t(Wt,Ko),t(Ko,bg),t(Wt,kg),p(e,vm,n),p(e,li,n),t(li,Cg),p(e,wm,n),p(e,ai,n),t(ai,jg),p(e,ym,n),m(Qo,e,n),p(e,$m,n),p(e,ii,n),t(ii,xg),p(e,Em,n),m(er,e,n),p(e,gm,n),p(e,ni,n),t(ni,Pg),p(e,bm,n),m(tr,e,n),p(e,km,n),p(e,pi,n),t(pi,Og),p(e,Cm,n),p(e,Q,n),t(Q,Pp),t(Pp,Ig),t(Q,Tg),t(Q,Op),t(Op,Ag),t(Q,Dg),t(Q,Ip),t(Ip,Sg),t(Q,qg),t(Q,Tp),t(Tp,Lg),p(e,jm,n),p(e,Ke,n),t(Ke,Bt),t(Bt,Ap),m(sr,Ap,null),t(Ke,Ug),t(Ke,Dp),t(Dp,Ng),p(e,xm,n),p(e,fi,n),t(fi,Hg),p(e,Pm,n),m(or,e,n),p(e,Om,n),p(e,hi,n),t(hi,zg),p(e,Im,n),m(rr,e,n),p(e,Tm,n),p(e,Qe,n),t(Qe,Yt),t(Yt,Sp),m(lr,Sp,null),t(Qe,Rg),t(Qe,qp),t(qp,Gg),p(e,Am,n),p(e,ui,n),t(ui,Fg),p(e,Dm,n),m(ar,e,n),p(e,Sm,n),p(e,et,n),t(et,Vt),t(Vt,Lp),m(ir,Lp,null),t(et,Mg),t(et,Up),t(Up,Wg),p(e,qm,n),p(e,di,n),t(di,Bg),p(e,Lm,n),m(nr,e,n),p(e,Um,n),p(e,ci,n),t(ci,Yg),p(e,Nm,n),p(e,ge,n),t(ge,mi),t(mi,Np),t(Np,Vg),t(mi,Jg),t(ge,Xg),t(ge,_i),t(_i,Hp),t(Hp,Zg),t(_i,Kg),t(ge,Qg),t(ge,vi),t(vi,zp),t(zp,eb),t(vi,tb),p(e,Hm,n),p(e,wi,n),t(wi,sb),p(e,zm,n),m(pr,e,n),p(e,Rm,n),p(e,yi,n),t(yi,ob),p(e,Gm,n),p(e,Jt,n),t(Jt,rb),t(Jt,Rp),t(Rp,lb),t(Jt,ab),p(e,Fm,n),m(fr,e,n),p(e,Mm,n),p(e,$i,n),t($i,ib),p(e,Wm,n),p(e,Xt,n),t(Xt,nb),t(Xt,Gp),t(Gp,pb),t(Xt,fb),p(e,Bm,n),m(hr,e,n),p(e,Ym,n),p(e,ee,n),t(ee,hb),t(ee,Fp),t(Fp,ub),t(ee,db),t(ee,Mp),t(Mp,cb),t(ee,mb),t(ee,Wp),t(Wp,_b),t(ee,vb),p(e,Vm,n),p(e,Zt,n),t(Zt,wb),t(Zt,Bp),t(Bp,yb),t(Zt,$b),p(e,Jm,n),m(ur,e,n),p(e,Xm,n),p(e,Ei,n),t(Ei,Eb),p(e,Zm,n),m(dr,e,n),p(e,Km,n),p(e,be,n),t(be,gb),t(be,Yp),t(Yp,bb),t(be,kb),t(be,Vp),t(Vp,Cb),t(be,jb),p(e,Qm,n),m(cr,e,n),p(e,e_,n),p(e,Kt,n),t(Kt,xb),t(Kt,Jp),t(Jp,Pb),t(Kt,Ob),p(e,t_,n),p(e,Qt,n),t(Qt,Ib),t(Qt,Xp),t(Xp,Tb),t(Qt,Ab),p(e,s_,n),m(mr,e,n),p(e,o_,n),p(e,tt,n),t(tt,es),t(es,Zp),m(_r,Zp,null),t(tt,Db),t(tt,Kp),t(Kp,Sb),p(e,r_,n),p(e,ts,n),t(ts,qb),t(ts,vr),t(vr,Lb),t(ts,Ub),p(e,l_,n),m(wr,e,n),p(e,a_,n),m(yr,e,n),p(e,i_,n),p(e,gi,n),t(gi,Nb),p(e,n_,n),p(e,st,n),t(st,ss),t(ss,Qp),m($r,Qp,null),t(st,Hb),t(st,ef),t(ef,zb),p(e,p_,n),p(e,Er,n),t(Er,gr),t(gr,Rb),t(Er,Gb),p(e,f_,n),m(br,e,n),p(e,h_,n),p(e,ot,n),t(ot,Fb),t(ot,tf),t(tf,Mb),t(ot,Wb),t(ot,sf),t(sf,Bb),p(e,u_,n),p(e,ke,n),t(ke,Yb),t(ke,of),t(of,Vb),t(ke,Jb),t(ke,rf),t(rf,Xb),t(ke,Zb),p(e,d_,n),m(kr,e,n),p(e,c_,n),p(e,Ce,n),t(Ce,Kb),t(Ce,lf),t(lf,Qb),t(Ce,e3),t(Ce,af),t(af,t3),t(Ce,s3),p(e,m_,n),m(Cr,e,n),p(e,__,n),p(e,bi,n),t(bi,o3),p(e,v_,n),p(e,jr,n),t(jr,xr),t(xr,r3),t(jr,l3),p(e,w_,n),p(e,rt,n),t(rt,os),t(os,nf),m(Pr,nf,null),t(rt,a3),t(rt,pf),t(pf,i3),p(e,y_,n),p(e,rs,n),t(rs,n3),t(rs,ff),t(ff,p3),t(rs,f3),p(e,$_,n),m(Or,e,n),p(e,E_,n),p(e,lt,n),t(lt,ls),t(ls,hf),m(Ir,hf,null),t(lt,h3),t(lt,uf),t(uf,u3),p(e,g_,n),p(e,ki,n),t(ki,d3),p(e,b_,n),m(Tr,e,n),p(e,k_,n),p(e,at,n),t(at,as),t(as,df),m(Ar,df,null),t(at,c3),t(at,cf),t(cf,m3),p(e,C_,n),p(e,M,n),t(M,_3),t(M,mf),t(mf,v3),t(M,w3),t(M,_f),t(_f,y3),t(M,$3),t(M,vf),t(vf,E3),t(M,g3),t(M,wf),t(wf,b3),t(M,k3),p(e,j_,n),p(e,we,n),t(we,yf),t(yf,C3),t(we,j3),t(we,$f),t($f,x3),t(we,P3),t(we,Ef),t(Ef,O3),t(we,I3),p(e,x_,n),p(e,je,n),t(je,T3),t(je,gf),t(gf,A3),t(je,D3),t(je,Dr),t(Dr,S3),t(je,q3),p(e,P_,n),p(e,it,n),t(it,is),t(is,bf),m(Sr,bf,null),t(it,L3),t(it,kf),t(kf,U3),p(e,O_,n),p(e,Ci,n),t(Ci,N3),p(e,I_,n),p(e,nt,n),t(nt,ns),t(ns,Cf),m(qr,Cf,null),t(nt,H3),t(nt,jf),t(jf,z3),p(e,T_,n),p(e,ji,n),t(ji,xi),t(xi,Lr),t(Lr,R3),t(xi,G3),p(e,A_,n),m(Ur,e,n),p(e,D_,n),p(e,Pi,n),t(Pi,F3),p(e,S_,n),m(Nr,e,n),p(e,q_,n),m(ps,e,n),p(e,L_,n),m(fs,e,n),p(e,U_,n),p(e,pt,n),t(pt,hs),t(hs,xf),m(Hr,xf,null),t(pt,M3),t(pt,Pf),t(Pf,W3),p(e,N_,n),m(zr,e,n),p(e,H_,n),p(e,us,n),t(us,B3),t(us,Of),t(Of,Y3),t(us,V3),p(e,z_,n),p(e,ds,n),t(ds,J3),t(ds,If),t(If,X3),t(ds,Z3),p(e,R_,n),m(Rr,e,n),p(e,G_,n),p(e,Oi,n),t(Oi,K3),p(e,F_,n),m(Gr,e,n),p(e,M_,n),p(e,cs,n),t(cs,Q3),t(cs,Tf),t(Tf,e2),t(cs,t2),p(e,W_,n),m(Fr,e,n),p(e,B_,n),p(e,Ii,n),t(Ii,s2),p(e,Y_,n),m(Mr,e,n),p(e,V_,n),p(e,I,n),t(I,o2),t(I,Af),t(Af,r2),t(I,l2),t(I,Df),t(Df,a2),t(I,i2),t(I,Sf),t(Sf,n2),t(I,p2),t(I,qf),t(qf,f2),t(I,h2),t(I,Lf),t(Lf,u2),t(I,d2),t(I,Wr),t(Wr,c2),t(I,m2),p(e,J_,n),p(e,te,n),t(te,_2),t(te,Uf),t(Uf,v2),t(te,w2),t(te,Br),t(Br,y2),t(te,$2),t(te,Nf),t(Nf,E2),t(te,g2),p(e,X_,n),p(e,ft,n),t(ft,ms),t(ms,Hf),m(Yr,Hf,null),t(ft,b2),t(ft,zf),t(zf,k2),p(e,Z_,n),p(e,ht,n),t(ht,_s),t(_s,Rf),m(Vr,Rf,null),t(ht,C2),t(ht,Gf),t(Gf,j2),p(e,K_,n),p(e,Jr,n),t(Jr,Xr),t(Xr,x2),t(Jr,P2),p(e,Q_,n),m(Zr,e,n),p(e,ev,n),p(e,Ti,n),t(Ti,O2),p(e,tv,n),m(Kr,e,n),p(e,sv,n),p(e,Ai,n),t(Ai,I2),p(e,ov,n),p(e,ut,n),t(ut,vs),t(vs,Ff),m(Qr,Ff,null),t(ut,T2),t(ut,Mf),t(Mf,A2),p(e,rv,n),p(e,xe,n),t(xe,D2),t(xe,Wf),t(Wf,S2),t(xe,q2),t(xe,Bf),t(Bf,L2),t(xe,U2),p(e,lv,n),m(el,e,n),p(e,av,n),p(e,dt,n),t(dt,ws),t(ws,Yf),m(tl,Yf,null),t(dt,N2),t(dt,Vf),t(Vf,H2),p(e,iv,n),p(e,sl,n),t(sl,ol),t(ol,z2),t(sl,R2),p(e,nv,n),m(rl,e,n),p(e,pv,n),m(ll,e,n),p(e,fv,n),p(e,ct,n),t(ct,ys),t(ys,Jf),m(al,Jf,null),t(ct,G2),t(ct,Xf),t(Xf,F2),p(e,hv,n),p(e,$s,n),t($s,M2),t($s,Zf),t(Zf,W2),t($s,B2),p(e,uv,n),m(il,e,n),p(e,dv,n),p(e,se,n),t(se,Y2),t(se,Kf),t(Kf,V2),t(se,J2),t(se,Qf),t(Qf,X2),t(se,Z2),t(se,eh),t(eh,K2),t(se,Q2),p(e,cv,n),m(nl,e,n),p(e,mv,n),p(e,Di,n),t(Di,e5),p(e,_v,n),p(e,Si,n),t(Si,t5),p(e,vv,n),p(e,U,n),t(U,qi),t(qi,th),t(th,s5),t(qi,o5),t(U,r5),t(U,Es),t(Es,sh),t(sh,l5),t(Es,a5),t(Es,oh),t(oh,i5),t(Es,n5),t(U,p5),t(U,gs),t(gs,rh),t(rh,f5),t(gs,h5),t(gs,lh),t(lh,u5),t(gs,d5),t(U,c5),t(U,bs),t(bs,ah),t(ah,m5),t(bs,_5),t(bs,ih),t(ih,v5),t(bs,w5),t(U,y5),t(U,ks),t(ks,nh),t(nh,$5),t(ks,E5),t(ks,ph),t(ph,g5),t(ks,b5),t(U,k5),t(U,Cs),t(Cs,fh),t(fh,C5),t(Cs,j5),t(Cs,hh),t(hh,x5),t(Cs,P5),p(e,wv,n),p(e,Li,n),t(Li,O5),p(e,yv,n),p(e,C,n),t(C,I5),t(C,uh),t(uh,T5),t(C,A5),t(C,dh),t(dh,D5),t(C,S5),t(C,ch),t(ch,q5),t(C,L5),t(C,mh),t(mh,U5),t(C,N5),t(C,_h),t(_h,H5),t(C,z5),t(C,vh),t(vh,R5),t(C,G5),t(C,wh),t(wh,F5),t(C,M5),t(C,yh),t(yh,W5),t(C,B5),t(C,$h),t($h,Y5),t(C,V5),t(C,Eh),t(Eh,J5),t(C,X5),p(e,$v,n),p(e,Ui,n),t(Ui,Z5),p(e,Ev,n),m(pl,e,n),p(e,gv,n),p(e,Pe,n),t(Pe,K5),t(Pe,gh),t(gh,Q5),t(Pe,ek),t(Pe,bh),t(bh,tk),t(Pe,sk),p(e,bv,n),m(fl,e,n),p(e,kv,n),p(e,Ni,n),t(Ni,ok),p(e,Cv,n),m(hl,e,n),p(e,jv,n),p(e,Oe,n),t(Oe,rk),t(Oe,kh),t(kh,lk),t(Oe,ak),t(Oe,Ch),t(Ch,ik),t(Oe,nk),p(e,xv,n),m(ul,e,n),p(e,Pv,n),p(e,js,n),t(js,pk),t(js,jh),t(jh,fk),t(js,hk),p(e,Ov,n),p(e,Hi,n),t(Hi,uk),p(e,Iv,n),p(e,zi,n),t(zi,xh),t(xh,dk),p(e,Tv,n),m(dl,e,n),p(e,Av,n),p(e,mt,n),t(mt,xs),t(xs,Ph),m(cl,Ph,null),t(mt,ck),t(mt,Oh),t(Oh,mk),p(e,Dv,n),p(e,_t,n),t(_t,Ih),t(Ih,_k),t(_t,vk),t(_t,Th),t(Th,wk),t(_t,yk),p(e,Sv,n),p(e,Ri,n),t(Ri,$k),p(e,qv,n),p(e,Ps,n),t(Ps,Ah),t(Ah,ml),t(ml,Ek),t(Ps,gk),t(Ps,Dh),t(Dh,_l),t(_l,bk),p(e,Lv,n),p(e,Os,n),t(Os,kk),t(Os,Sh),t(Sh,Ck),t(Os,jk),p(e,Uv,n),p(e,Gi,n),t(Gi,xk),p(e,Nv,n),m(vl,e,n),p(e,Hv,n),p(e,vt,n),t(vt,Is),t(Is,qh),m(wl,qh,null),t(vt,Pk),t(vt,Lh),t(Lh,Ok),p(e,zv,n),p(e,Ie,n),t(Ie,Ik),t(Ie,Uh),t(Uh,Tk),t(Ie,Ak),t(Ie,Nh),t(Nh,Dk),t(Ie,Sk),p(e,Rv,n),p(e,W,n),t(W,qk),t(W,Hh),t(Hh,Lk),t(W,Uk),t(W,zh),t(zh,Nk),t(W,Hk),t(W,Rh),t(Rh,zk),t(W,Rk),t(W,Gh),t(Gh,Gk),t(W,Fk),p(e,Gv,n),m(yl,e,n),p(e,Fv,n),p(e,Fi,n),t(Fi,Mk),p(e,Mv,n),m($l,e,n),p(e,Wv,n),p(e,wt,n),t(wt,Ts),t(Ts,Fh),m(El,Fh,null),t(wt,Wk),t(wt,Mh),t(Mh,Bk),p(e,Bv,n),p(e,Mi,n),t(Mi,Yk),p(e,Yv,n),m(gl,e,n),p(e,Vv,n),p(e,yt,n),t(yt,As),t(As,Wh),m(bl,Wh,null),t(yt,Vk),t(yt,Bh),t(Bh,Jk),p(e,Jv,n),p(e,Wi,n),t(Wi,Xk),p(e,Xv,n),m(kl,e,n),p(e,Zv,n),p(e,Bi,n),t(Bi,Zk),p(e,Kv,n),p(e,Yi,n),t(Yi,Kk),p(e,Qv,n),m(Cl,e,n),p(e,e1,n),p(e,$t,n),t($t,Ds),t(Ds,Yh),m(jl,Yh,null),t($t,Qk),t($t,Vh),t(Vh,e4),p(e,t1,n),p(e,Te,n),t(Te,t4),t(Te,Jh),t(Jh,s4),t(Te,o4),t(Te,Xh),t(Xh,r4),t(Te,l4),p(e,s1,n),p(e,oe,n),t(oe,a4),t(oe,xl),t(xl,i4),t(oe,n4),t(oe,Zh),t(Zh,p4),t(oe,f4),t(oe,Kh),t(Kh,h4),t(oe,u4),p(e,o1,n),p(e,Et,n),t(Et,Ss),t(Ss,Qh),m(Pl,Qh,null),t(Et,d4),t(Et,eu),t(eu,c4),p(e,r1,n),p(e,Vi,n),t(Vi,m4),p(e,l1,n),m(Ol,e,n),p(e,a1,n),p(e,qs,n),t(qs,_4),t(qs,tu),t(tu,v4),t(qs,w4),p(e,i1,n),p(e,Ae,n),t(Ae,y4),t(Ae,su),t(su,$4),t(Ae,E4),t(Ae,ou),t(ou,g4),t(Ae,b4),p(e,n1,n),m(Il,e,n),p(e,p1,n),p(e,Ls,n),t(Ls,k4),t(Ls,ru),t(ru,C4),t(Ls,j4),p(e,f1,n),m(Tl,e,n),p(e,h1,n),p(e,Us,n),t(Us,x4),t(Us,lu),t(lu,P4),t(Us,O4),p(e,u1,n),m(Al,e,n),p(e,d1,n),p(e,Ji,n),t(Ji,I4),p(e,c1,n),m(Dl,e,n),p(e,m1,n),p(e,Xi,n),t(Xi,T4),p(e,_1,n),m(Sl,e,n),p(e,v1,n),p(e,B,n),t(B,A4),t(B,ql),t(ql,D4),t(B,S4),t(B,au),t(au,q4),t(B,L4),t(B,iu),t(iu,U4),t(B,N4),t(B,nu),t(nu,H4),t(B,z4),p(e,w1,n),p(e,re,n),t(re,R4),t(re,pu),t(pu,G4),t(re,F4),t(re,fu),t(fu,M4),t(re,W4),t(re,hu),t(hu,B4),t(re,Y4),p(e,y1,n),p(e,De,n),t(De,V4),t(De,uu),t(uu,J4),t(De,X4),t(De,du),t(du,Z4),t(De,K4),p(e,$1,n),m(Ll,e,n),p(e,E1,n),p(e,le,n),t(le,Q4),t(le,cu),t(cu,e0),t(le,t0),t(le,mu),t(mu,s0),t(le,o0),t(le,_u),t(_u,r0),t(le,l0),p(e,g1,n),m(Ul,e,n),p(e,b1,n),p(e,Zi,n),t(Zi,a0),p(e,k1,n),m(Nl,e,n),p(e,C1,n),p(e,Ki,n),t(Ki,i0),p(e,j1,n),m(Hl,e,n),p(e,x1,n),p(e,Qi,n),t(Qi,n0),p(e,P1,n),p(e,gt,n),t(gt,Ns),t(Ns,vu),m(zl,vu,null),t(gt,p0),t(gt,wu),t(wu,f0),p(e,O1,n),p(e,Hs,n),t(Hs,h0),t(Hs,yu),t(yu,u0),t(Hs,d0),p(e,I1,n),p(e,zs,n),t(zs,Rl),t(Rl,en),t(en,$u),t($u,c0),t(en,m0),t(Rl,_0),t(Rl,G),t(G,Gl),t(Gl,Eu),t(Eu,v0),t(Gl,w0),t(Gl,gu),t(gu,y0),t(G,$0),t(G,tn),t(tn,bu),t(bu,E0),t(tn,g0),t(G,b0),t(G,Rs),t(Rs,ku),t(ku,k0),t(Rs,C0),t(Rs,Cu),t(Cu,j0),t(Rs,x0),t(G,P0),t(G,Gs),t(Gs,ju),t(ju,O0),t(Gs,I0),t(Gs,xu),t(xu,T0),t(Gs,A0),t(G,D0),t(G,sn),t(sn,Pu),t(Pu,S0),t(sn,q0),t(G,L0),t(G,Se),t(Se,Ou),t(Ou,U0),t(Se,N0),t(Se,Iu),t(Iu,H0),t(Se,z0),t(Se,Tu),t(Tu,R0),t(Se,G0),t(zs,F0),t(zs,Fl),t(Fl,Ml),t(Ml,M0),t(Ml,Au),t(Au,W0),t(Ml,B0),t(Fl,Y0),t(Fl,F),t(F,Du),t(Du,Su),t(Su,V0),t(F,J0),t(F,qu),t(qu,Lu),t(Lu,X0),t(F,Z0),t(F,Uu),t(Uu,Nu),t(Nu,K0),t(F,Q0),t(F,Hu),t(Hu,zu),t(zu,e6),t(F,t6),t(F,Ru),t(Ru,Gu),t(Gu,s6),t(F,o6),t(F,Fu),t(Fu,Mu),t(Mu,r6),p(e,T1,n),p(e,Fs,n),t(Fs,l6),t(Fs,Wu),t(Wu,a6),t(Fs,i6),p(e,A1,n),m(Wl,e,n),p(e,D1,n),p(e,Y,n),t(Y,n6),t(Y,Bu),t(Bu,p6),t(Y,f6),t(Y,Yu),t(Yu,h6),t(Y,u6),t(Y,Vu),t(Vu,d6),t(Y,c6),t(Y,Ju),t(Ju,m6),t(Y,_6),p(e,S1,n),m(Bl,e,n),p(e,q1,n),p(e,bt,n),t(bt,Ms),t(Ms,Xu),m(Yl,Xu,null),t(bt,v6),t(bt,Zu),t(Zu,w6),p(e,L1,n),p(e,Ws,n),t(Ws,y6),t(Ws,Ku),t(Ku,$6),t(Ws,E6),p(e,U1,n),p(e,on,n),t(on,g6),p(e,N1,n),p(e,qe,n),t(qe,b6),t(qe,Qu),t(Qu,k6),t(qe,C6),t(qe,ed),t(ed,j6),t(qe,x6),p(e,H1,n),p(e,rn,n),t(rn,P6),p(e,z1,n),m(Vl,e,n),p(e,R1,n),p(e,Bs,n),t(Bs,O6),t(Bs,td),t(td,I6),t(Bs,T6),p(e,G1,n),p(e,ln,n),t(ln,sd),t(sd,A6),p(e,F1,n),m(Jl,e,n),p(e,M1,n),p(e,Xl,n),t(Xl,od),t(od,D6),t(Xl,S6),p(e,W1,n),p(e,an,n),t(an,rd),t(rd,q6),p(e,B1,n),m(Zl,e,n),p(e,Y1,n),p(e,nn,n),t(nn,L6),p(e,V1,n),p(e,pn,n),t(pn,Kl),t(Kl,kt),t(kt,U6),t(kt,ld),t(ld,N6),t(kt,H6),t(kt,ad),t(ad,z6),t(kt,R6),t(Kl,G6),t(Kl,ye),t(ye,fn),t(fn,id),t(id,F6),t(fn,M6),t(ye,W6),t(ye,hn),t(hn,nd),t(nd,B6),t(hn,Y6),t(ye,V6),t(ye,un),t(un,pd),t(pd,J6),t(un,X6),t(ye,Z6),t(ye,dn),t(dn,fd),t(fd,K6),t(dn,Q6),p(e,J1,n),m(Ys,e,n),p(e,X1,n),m(Vs,e,n),p(e,Z1,n),p(e,Ct,n),t(Ct,Js),t(Js,hd),m(Ql,hd,null),t(Ct,e7),t(Ct,ud),t(ud,t7),p(e,K1,n),p(e,Le,n),t(Le,s7),t(Le,dd),t(dd,o7),t(Le,r7),t(Le,cd),t(cd,l7),t(Le,a7),p(e,Q1,n),m(ea,e,n),p(e,ew,n),p(e,jt,n),t(jt,Xs),t(Xs,md),m(ta,md,null),t(jt,i7),t(jt,_d),t(_d,n7),p(e,tw,n),p(e,Zs,n),t(Zs,p7),t(Zs,vd),t(vd,f7),t(Zs,h7),p(e,sw,n),p(e,cn,n),t(cn,u7),p(e,ow,n),p(e,Ks,n),t(Ks,wd),t(wd,sa),t(sa,d7),t(sa,yd),t(yd,c7),t(sa,m7),t(Ks,_7),t(Ks,$d),t($d,oa),t(oa,v7),t(oa,Ed),t(Ed,w7),t(oa,y7),p(e,rw,n),p(e,ae,n),t(ae,$7),t(ae,gd),t(gd,E7),t(ae,g7),t(ae,bd),t(bd,b7),t(ae,k7),t(ae,kd),t(kd,C7),t(ae,j7),p(e,lw,n),p(e,xt,n),t(xt,Qs),t(Qs,Cd),m(ra,Cd,null),t(xt,x7),t(xt,jd),t(jd,P7),p(e,aw,n),p(e,mn,n),t(mn,xd),t(xd,O7),p(e,iw,n),m(la,e,n),p(e,nw,n),p(e,_n,n),t(_n,I7),p(e,pw,n),m(aa,e,n),p(e,fw,n),p(e,eo,n),t(eo,T7),t(eo,Pd),t(Pd,A7),t(eo,D7),p(e,hw,n),m(ia,e,n),p(e,uw,n),p(e,vn,n),t(vn,Od),t(Od,S7),p(e,dw,n),m(na,e,n),p(e,cw,n),p(e,wn,n),t(wn,q7),p(e,mw,n),m(pa,e,n),p(e,_w,n),p(e,to,n),t(to,L7),t(to,Id),t(Id,U7),t(to,N7),p(e,vw,n),m(fa,e,n),p(e,ww,n),p(e,yn,n),t(yn,Td),t(Td,H7),p(e,yw,n),m(ha,e,n),p(e,$w,n),p(e,$n,n),t($n,Ad),t(Ad,z7),p(e,Ew,n),m(ua,e,n),p(e,gw,n),p(e,En,n),t(En,R7),p(e,bw,n),m(da,e,n),p(e,kw,n),p(e,gn,n),t(gn,G7),p(e,Cw,n),m(ca,e,n),p(e,jw,n),p(e,so,n),t(so,F7),t(so,ma),t(ma,M7),t(so,W7),p(e,xw,n),p(e,Pt,n),t(Pt,oo),t(oo,Dd),m(_a,Dd,null),t(Pt,B7),t(Pt,Sd),t(Sd,Y7),p(e,Pw,n),p(e,bn,n),t(bn,V7),p(e,Ow,n),m(va,e,n),p(e,Iw,n),p(e,Ue,n),t(Ue,J7),t(Ue,qd),t(qd,X7),t(Ue,Z7),t(Ue,Ld),t(Ld,K7),t(Ue,Q7),p(e,Tw,n),m(wa,e,n),p(e,Aw,n),p(e,ie,n),t(ie,e8),t(ie,Ud),t(Ud,t8),t(ie,s8),t(ie,Nd),t(Nd,o8),t(ie,r8),t(ie,Hd),t(Hd,l8),t(ie,a8),p(e,Dw,n),m(ya,e,n),p(e,Sw,n),p(e,kn,n),t(kn,i8),p(e,qw,n),p(e,Cn,n),t(Cn,n8),p(e,Lw,n),p(e,jn,n),t(jn,p8),p(e,Uw,n),p(e,ne,n),t(ne,zd),t(zd,f8),t(ne,h8),t(ne,Rd),t(Rd,u8),t(ne,d8),t(ne,Ot),t(Ot,c8),t(Ot,Gd),t(Gd,m8),t(Ot,_8),t(Ot,Fd),t(Fd,v8),t(Ot,w8),t(ne,y8),t(ne,Md),t(Md,$8),p(e,Nw,n),p(e,Ne,n),t(Ne,E8),t(Ne,Wd),t(Wd,g8),t(Ne,b8),t(Ne,Bd),t(Bd,k8),t(Ne,C8),p(e,Hw,n),m($a,e,n),p(e,zw,n),p(e,He,n),t(He,j8),t(He,Ea),t(Ea,x8),t(He,P8),t(He,ga),t(ga,O8),t(He,I8),p(e,Rw,n),p(e,ro,n),t(ro,T8),t(ro,Yd),t(Yd,A8),t(ro,D8),p(e,Gw,n),p(e,xn,n),t(xn,S8),p(e,Fw,n),p(e,It,n),t(It,lo),t(lo,Vd),m(ba,Vd,null),t(It,q8),t(It,Jd),t(Jd,L8),p(e,Mw,n),p(e,V,n),t(V,U8),t(V,Xd),t(Xd,N8),t(V,H8),t(V,Zd),t(Zd,z8),t(V,R8),t(V,Kd),t(Kd,G8),t(V,F8),t(V,ka),t(ka,M8),t(V,W8),p(e,Ww,n),m(Ca,e,n),p(e,Bw,n),p(e,ao,n),t(ao,B8),t(ao,Qd),t(Qd,Y8),t(ao,V8),p(e,Yw,n),m(ja,e,n),p(e,Vw,n),p(e,io,n),t(io,J8),t(io,ec),t(ec,X8),t(io,Z8),p(e,Jw,n),m(xa,e,n),p(e,Xw,n),p(e,T,n),t(T,K8),t(T,tc),t(tc,Q8),t(T,e9),t(T,sc),t(sc,t9),t(T,s9),t(T,oc),t(oc,o9),t(T,r9),t(T,rc),t(rc,l9),t(T,a9),t(T,lc),t(lc,i9),t(T,n9),t(T,ac),t(ac,p9),t(T,f9),p(e,Zw,n),p(e,no,n),t(no,h9),t(no,ic),t(ic,u9),t(no,d9),p(e,Kw,n),m(Pa,e,n),p(e,Qw,n),p(e,Pn,n),t(Pn,c9),p(e,ey,n),m(Oa,e,n),p(e,ty,n),p(e,ze,n),t(ze,m9),t(ze,nc),t(nc,_9),t(ze,v9),t(ze,pc),t(pc,w9),t(ze,y9),p(e,sy,n),m(Ia,e,n),p(e,oy,n),p(e,po,n),t(po,$9),t(po,fc),t(fc,E9),t(po,g9),p(e,ry,n),m(Ta,e,n),p(e,ly,n),p(e,On,n),t(On,b9),p(e,ay,n),p(e,Tt,n),t(Tt,fo),t(fo,hc),m(Aa,hc,null),t(Tt,k9),t(Tt,uc),t(uc,C9),p(e,iy,n),p(e,ho,n),t(ho,j9),t(ho,dc),t(dc,x9),t(ho,P9),p(e,ny,n),m(Da,e,n),p(e,py,n),p(e,At,n),t(At,uo),t(uo,cc),m(Sa,cc,null),t(At,O9),t(At,mc),t(mc,I9),p(e,fy,n),p(e,qa,n),t(qa,T9),t(qa,_c),t(_c,A9),p(e,hy,n),m(La,e,n),p(e,uy,n),p(e,pe,n),t(pe,D9),t(pe,vc),t(vc,S9),t(pe,q9),t(pe,wc),t(wc,L9),t(pe,U9),t(pe,yc),t(yc,N9),t(pe,H9),p(e,dy,n),m(Ua,e,n),p(e,cy,n),p(e,N,n),t(N,z9),t(N,$c),t($c,R9),t(N,G9),t(N,Ec),t(Ec,F9),t(N,M9),t(N,gc),t(gc,W9),t(N,B9),t(N,bc),t(bc,Y9),t(N,V9),t(N,kc),t(kc,J9),t(N,X9),p(e,my,n),p(e,co,n),t(co,Z9),t(co,Cc),t(Cc,K9),t(co,Q9),p(e,_y,n),p(e,Dt,n),t(Dt,mo),t(mo,jc),m(Na,jc,null),t(Dt,eC),t(Dt,xc),t(xc,tC),p(e,vy,n),p(e,In,n),t(In,sC),p(e,wy,n),m(Ha,e,n),p(e,yy,n),p(e,St,n),t(St,_o),t(_o,Pc),m(za,Pc,null),t(St,oC),t(St,Oc),t(Oc,rC),p(e,$y,n),p(e,Tn,n),t(Tn,lC),p(e,Ey,n),m(Ra,e,n),p(e,gy,n),p(e,qt,n),t(qt,vo),t(vo,Ic),m(Ga,Ic,null),t(qt,aC),t(qt,Tc),t(Tc,iC),p(e,by,n),p(e,An,n),t(An,nC),p(e,ky,n),p(e,fe,n),t(fe,Fa),t(Fa,pC),t(Fa,Ac),t(Ac,fC),t(Fa,hC),t(fe,uC),t(fe,H),t(H,dC),t(H,Dc),t(Dc,cC),t(H,mC),t(H,Sc),t(Sc,_C),t(H,vC),t(H,qc),t(qc,wC),t(H,yC),t(H,Lc),t(Lc,$C),t(H,EC),t(H,Ma),t(Ma,gC),t(H,bC),t(H,Uc),t(Uc,kC),t(fe,CC),t(fe,Nc),t(Nc,jC),t(fe,xC),t(fe,Wa),t(Wa,PC),t(Wa,Ba),t(Ba,OC),t(Wa,IC),p(e,Cy,n),p(e,Lt,n),t(Lt,wo),t(wo,Hc),m(Ya,Hc,null),t(Lt,TC),t(Lt,zc),t(zc,AC),p(e,jy,n),p(e,Dn,n),t(Dn,DC),p(e,xy,n),p(e,he,n),t(he,Rc),t(Rc,SC),t(he,qC),t(he,Gc),t(Gc,LC),t(he,UC),t(he,Fc),t(Fc,NC),t(he,HC),t(he,Mc),t(Mc,zC),p(e,Py,n),p(e,Sn,n),t(Sn,RC),p(e,Oy,n),p(e,qn,n),t(qn,GC),p(e,Iy,n),p(e,Ln,n),t(Ln,FC),p(e,Ty,n),p(e,Un,n),t(Un,MC),p(e,Ay,n),p(e,yo,n),t(yo,Nn),t(Nn,Wc),t(Wc,WC),t(Nn,BC),t(yo,YC),t(yo,Ut),t(Ut,VC),t(Ut,Bc),t(Bc,JC),t(Ut,XC),t(Ut,Yc),t(Yc,ZC),t(Ut,KC),p(e,Dy,n),p(e,Hn,n),t(Hn,QC),p(e,Sy,n),m(Va,e,n),p(e,qy,n),p(e,zn,n),t(zn,ej),p(e,Ly,n),m(Ja,e,n),p(e,Uy,n),p(e,$o,n),t($o,tj),t($o,Vc),t(Vc,sj),t($o,oj),p(e,Ny,n),p(e,Eo,n),t(Eo,rj),t(Eo,Jc),t(Jc,lj),t(Eo,aj),p(e,Hy,n),p(e,Rn,n),t(Rn,ij),p(e,zy,n),p(e,go,n),t(go,Xc),t(Xc,Xa),t(Xa,nj),t(go,pj),t(go,Zc),t(Zc,Za),t(Za,fj),Ry=!0},p(e,[n]){const Ka={};n&2&&(Ka.$$scope={dirty:n,ctx:e}),ps.$set(Ka);const Kc={};n&2&&(Kc.$$scope={dirty:n,ctx:e}),fs.$set(Kc);const Qc={};n&2&&(Qc.$$scope={dirty:n,ctx:e}),Ys.$set(Qc);const em={};n&2&&(em.$$scope={dirty:n,ctx:e}),Vs.$set(em)},i(e){Ry||(_(j.$$.fragment,e),_(Uo.$$.fragment,e),_(Vo.$$.fragment,e),_(Xo.$$.fragment,e),_(Zo.$$.fragment,e),_(Qo.$$.fragment,e),_(er.$$.fragment,e),_(tr.$$.fragment,e),_(sr.$$.fragment,e),_(or.$$.fragment,e),_(rr.$$.fragment,e),_(lr.$$.fragment,e),_(ar.$$.fragment,e),_(ir.$$.fragment,e),_(nr.$$.fragment,e),_(pr.$$.fragment,e),_(fr.$$.fragment,e),_(hr.$$.fragment,e),_(ur.$$.fragment,e),_(dr.$$.fragment,e),_(cr.$$.fragment,e),_(mr.$$.fragment,e),_(_r.$$.fragment,e),_(wr.$$.fragment,e),_(yr.$$.fragment,e),_($r.$$.fragment,e),_(br.$$.fragment,e),_(kr.$$.fragment,e),_(Cr.$$.fragment,e),_(Pr.$$.fragment,e),_(Or.$$.fragment,e),_(Ir.$$.fragment,e),_(Tr.$$.fragment,e),_(Ar.$$.fragment,e),_(Sr.$$.fragment,e),_(qr.$$.fragment,e),_(Ur.$$.fragment,e),_(Nr.$$.fragment,e),_(ps.$$.fragment,e),_(fs.$$.fragment,e),_(Hr.$$.fragment,e),_(zr.$$.fragment,e),_(Rr.$$.fragment,e),_(Gr.$$.fragment,e),_(Fr.$$.fragment,e),_(Mr.$$.fragment,e),_(Yr.$$.fragment,e),_(Vr.$$.fragment,e),_(Zr.$$.fragment,e),_(Kr.$$.fragment,e),_(Qr.$$.fragment,e),_(el.$$.fragment,e),_(tl.$$.fragment,e),_(rl.$$.fragment,e),_(ll.$$.fragment,e),_(al.$$.fragment,e),_(il.$$.fragment,e),_(nl.$$.fragment,e),_(pl.$$.fragment,e),_(fl.$$.fragment,e),_(hl.$$.fragment,e),_(ul.$$.fragment,e),_(dl.$$.fragment,e),_(cl.$$.fragment,e),_(vl.$$.fragment,e),_(wl.$$.fragment,e),_(yl.$$.fragment,e),_($l.$$.fragment,e),_(El.$$.fragment,e),_(gl.$$.fragment,e),_(bl.$$.fragment,e),_(kl.$$.fragment,e),_(Cl.$$.fragment,e),_(jl.$$.fragment,e),_(Pl.$$.fragment,e),_(Ol.$$.fragment,e),_(Il.$$.fragment,e),_(Tl.$$.fragment,e),_(Al.$$.fragment,e),_(Dl.$$.fragment,e),_(Sl.$$.fragment,e),_(Ll.$$.fragment,e),_(Ul.$$.fragment,e),_(Nl.$$.fragment,e),_(Hl.$$.fragment,e),_(zl.$$.fragment,e),_(Wl.$$.fragment,e),_(Bl.$$.fragment,e),_(Yl.$$.fragment,e),_(Vl.$$.fragment,e),_(Jl.$$.fragment,e),_(Zl.$$.fragment,e),_(Ys.$$.fragment,e),_(Vs.$$.fragment,e),_(Ql.$$.fragment,e),_(ea.$$.fragment,e),_(ta.$$.fragment,e),_(ra.$$.fragment,e),_(la.$$.fragment,e),_(aa.$$.fragment,e),_(ia.$$.fragment,e),_(na.$$.fragment,e),_(pa.$$.fragment,e),_(fa.$$.fragment,e),_(ha.$$.fragment,e),_(ua.$$.fragment,e),_(da.$$.fragment,e),_(ca.$$.fragment,e),_(_a.$$.fragment,e),_(va.$$.fragment,e),_(wa.$$.fragment,e),_(ya.$$.fragment,e),_($a.$$.fragment,e),_(ba.$$.fragment,e),_(Ca.$$.fragment,e),_(ja.$$.fragment,e),_(xa.$$.fragment,e),_(Pa.$$.fragment,e),_(Oa.$$.fragment,e),_(Ia.$$.fragment,e),_(Ta.$$.fragment,e),_(Aa.$$.fragment,e),_(Da.$$.fragment,e),_(Sa.$$.fragment,e),_(La.$$.fragment,e),_(Ua.$$.fragment,e),_(Na.$$.fragment,e),_(Ha.$$.fragment,e),_(za.$$.fragment,e),_(Ra.$$.fragment,e),_(Ga.$$.fragment,e),_(Ya.$$.fragment,e),_(Va.$$.fragment,e),_(Ja.$$.fragment,e),Ry=!0)},o(e){v(j.$$.fragment,e),v(Uo.$$.fragment,e),v(Vo.$$.fragment,e),v(Xo.$$.fragment,e),v(Zo.$$.fragment,e),v(Qo.$$.fragment,e),v(er.$$.fragment,e),v(tr.$$.fragment,e),v(sr.$$.fragment,e),v(or.$$.fragment,e),v(rr.$$.fragment,e),v(lr.$$.fragment,e),v(ar.$$.fragment,e),v(ir.$$.fragment,e),v(nr.$$.fragment,e),v(pr.$$.fragment,e),v(fr.$$.fragment,e),v(hr.$$.fragment,e),v(ur.$$.fragment,e),v(dr.$$.fragment,e),v(cr.$$.fragment,e),v(mr.$$.fragment,e),v(_r.$$.fragment,e),v(wr.$$.fragment,e),v(yr.$$.fragment,e),v($r.$$.fragment,e),v(br.$$.fragment,e),v(kr.$$.fragment,e),v(Cr.$$.fragment,e),v(Pr.$$.fragment,e),v(Or.$$.fragment,e),v(Ir.$$.fragment,e),v(Tr.$$.fragment,e),v(Ar.$$.fragment,e),v(Sr.$$.fragment,e),v(qr.$$.fragment,e),v(Ur.$$.fragment,e),v(Nr.$$.fragment,e),v(ps.$$.fragment,e),v(fs.$$.fragment,e),v(Hr.$$.fragment,e),v(zr.$$.fragment,e),v(Rr.$$.fragment,e),v(Gr.$$.fragment,e),v(Fr.$$.fragment,e),v(Mr.$$.fragment,e),v(Yr.$$.fragment,e),v(Vr.$$.fragment,e),v(Zr.$$.fragment,e),v(Kr.$$.fragment,e),v(Qr.$$.fragment,e),v(el.$$.fragment,e),v(tl.$$.fragment,e),v(rl.$$.fragment,e),v(ll.$$.fragment,e),v(al.$$.fragment,e),v(il.$$.fragment,e),v(nl.$$.fragment,e),v(pl.$$.fragment,e),v(fl.$$.fragment,e),v(hl.$$.fragment,e),v(ul.$$.fragment,e),v(dl.$$.fragment,e),v(cl.$$.fragment,e),v(vl.$$.fragment,e),v(wl.$$.fragment,e),v(yl.$$.fragment,e),v($l.$$.fragment,e),v(El.$$.fragment,e),v(gl.$$.fragment,e),v(bl.$$.fragment,e),v(kl.$$.fragment,e),v(Cl.$$.fragment,e),v(jl.$$.fragment,e),v(Pl.$$.fragment,e),v(Ol.$$.fragment,e),v(Il.$$.fragment,e),v(Tl.$$.fragment,e),v(Al.$$.fragment,e),v(Dl.$$.fragment,e),v(Sl.$$.fragment,e),v(Ll.$$.fragment,e),v(Ul.$$.fragment,e),v(Nl.$$.fragment,e),v(Hl.$$.fragment,e),v(zl.$$.fragment,e),v(Wl.$$.fragment,e),v(Bl.$$.fragment,e),v(Yl.$$.fragment,e),v(Vl.$$.fragment,e),v(Jl.$$.fragment,e),v(Zl.$$.fragment,e),v(Ys.$$.fragment,e),v(Vs.$$.fragment,e),v(Ql.$$.fragment,e),v(ea.$$.fragment,e),v(ta.$$.fragment,e),v(ra.$$.fragment,e),v(la.$$.fragment,e),v(aa.$$.fragment,e),v(ia.$$.fragment,e),v(na.$$.fragment,e),v(pa.$$.fragment,e),v(fa.$$.fragment,e),v(ha.$$.fragment,e),v(ua.$$.fragment,e),v(da.$$.fragment,e),v(ca.$$.fragment,e),v(_a.$$.fragment,e),v(va.$$.fragment,e),v(wa.$$.fragment,e),v(ya.$$.fragment,e),v($a.$$.fragment,e),v(ba.$$.fragment,e),v(Ca.$$.fragment,e),v(ja.$$.fragment,e),v(xa.$$.fragment,e),v(Pa.$$.fragment,e),v(Oa.$$.fragment,e),v(Ia.$$.fragment,e),v(Ta.$$.fragment,e),v(Aa.$$.fragment,e),v(Da.$$.fragment,e),v(Sa.$$.fragment,e),v(La.$$.fragment,e),v(Ua.$$.fragment,e),v(Na.$$.fragment,e),v(Ha.$$.fragment,e),v(za.$$.fragment,e),v(Ra.$$.fragment,e),v(Ga.$$.fragment,e),v(Ya.$$.fragment,e),v(Va.$$.fragment,e),v(Ja.$$.fragment,e),Ry=!1},d(e){s($),e&&s(x),e&&s(g),w(j),e&&s(k),e&&s(q),e&&s(Nt),e&&s($e),e&&s(S),e&&s(ve),e&&s(fm),e&&s(Ve),w(Uo),e&&s(hm),e&&s(Rt),e&&s(um),w(Vo,e),e&&s(dm),e&&s(Gt),e&&s(cm),e&&s(Xe),w(Xo),e&&s(mm),e&&s(Ze),w(Zo),e&&s(_m),e&&s(Wt),e&&s(vm),e&&s(li),e&&s(wm),e&&s(ai),e&&s(ym),w(Qo,e),e&&s($m),e&&s(ii),e&&s(Em),w(er,e),e&&s(gm),e&&s(ni),e&&s(bm),w(tr,e),e&&s(km),e&&s(pi),e&&s(Cm),e&&s(Q),e&&s(jm),e&&s(Ke),w(sr),e&&s(xm),e&&s(fi),e&&s(Pm),w(or,e),e&&s(Om),e&&s(hi),e&&s(Im),w(rr,e),e&&s(Tm),e&&s(Qe),w(lr),e&&s(Am),e&&s(ui),e&&s(Dm),w(ar,e),e&&s(Sm),e&&s(et),w(ir),e&&s(qm),e&&s(di),e&&s(Lm),w(nr,e),e&&s(Um),e&&s(ci),e&&s(Nm),e&&s(ge),e&&s(Hm),e&&s(wi),e&&s(zm),w(pr,e),e&&s(Rm),e&&s(yi),e&&s(Gm),e&&s(Jt),e&&s(Fm),w(fr,e),e&&s(Mm),e&&s($i),e&&s(Wm),e&&s(Xt),e&&s(Bm),w(hr,e),e&&s(Ym),e&&s(ee),e&&s(Vm),e&&s(Zt),e&&s(Jm),w(ur,e),e&&s(Xm),e&&s(Ei),e&&s(Zm),w(dr,e),e&&s(Km),e&&s(be),e&&s(Qm),w(cr,e),e&&s(e_),e&&s(Kt),e&&s(t_),e&&s(Qt),e&&s(s_),w(mr,e),e&&s(o_),e&&s(tt),w(_r),e&&s(r_),e&&s(ts),e&&s(l_),w(wr,e),e&&s(a_),w(yr,e),e&&s(i_),e&&s(gi),e&&s(n_),e&&s(st),w($r),e&&s(p_),e&&s(Er),e&&s(f_),w(br,e),e&&s(h_),e&&s(ot),e&&s(u_),e&&s(ke),e&&s(d_),w(kr,e),e&&s(c_),e&&s(Ce),e&&s(m_),w(Cr,e),e&&s(__),e&&s(bi),e&&s(v_),e&&s(jr),e&&s(w_),e&&s(rt),w(Pr),e&&s(y_),e&&s(rs),e&&s($_),w(Or,e),e&&s(E_),e&&s(lt),w(Ir),e&&s(g_),e&&s(ki),e&&s(b_),w(Tr,e),e&&s(k_),e&&s(at),w(Ar),e&&s(C_),e&&s(M),e&&s(j_),e&&s(we),e&&s(x_),e&&s(je),e&&s(P_),e&&s(it),w(Sr),e&&s(O_),e&&s(Ci),e&&s(I_),e&&s(nt),w(qr),e&&s(T_),e&&s(ji),e&&s(A_),w(Ur,e),e&&s(D_),e&&s(Pi),e&&s(S_),w(Nr,e),e&&s(q_),w(ps,e),e&&s(L_),w(fs,e),e&&s(U_),e&&s(pt),w(Hr),e&&s(N_),w(zr,e),e&&s(H_),e&&s(us),e&&s(z_),e&&s(ds),e&&s(R_),w(Rr,e),e&&s(G_),e&&s(Oi),e&&s(F_),w(Gr,e),e&&s(M_),e&&s(cs),e&&s(W_),w(Fr,e),e&&s(B_),e&&s(Ii),e&&s(Y_),w(Mr,e),e&&s(V_),e&&s(I),e&&s(J_),e&&s(te),e&&s(X_),e&&s(ft),w(Yr),e&&s(Z_),e&&s(ht),w(Vr),e&&s(K_),e&&s(Jr),e&&s(Q_),w(Zr,e),e&&s(ev),e&&s(Ti),e&&s(tv),w(Kr,e),e&&s(sv),e&&s(Ai),e&&s(ov),e&&s(ut),w(Qr),e&&s(rv),e&&s(xe),e&&s(lv),w(el,e),e&&s(av),e&&s(dt),w(tl),e&&s(iv),e&&s(sl),e&&s(nv),w(rl,e),e&&s(pv),w(ll,e),e&&s(fv),e&&s(ct),w(al),e&&s(hv),e&&s($s),e&&s(uv),w(il,e),e&&s(dv),e&&s(se),e&&s(cv),w(nl,e),e&&s(mv),e&&s(Di),e&&s(_v),e&&s(Si),e&&s(vv),e&&s(U),e&&s(wv),e&&s(Li),e&&s(yv),e&&s(C),e&&s($v),e&&s(Ui),e&&s(Ev),w(pl,e),e&&s(gv),e&&s(Pe),e&&s(bv),w(fl,e),e&&s(kv),e&&s(Ni),e&&s(Cv),w(hl,e),e&&s(jv),e&&s(Oe),e&&s(xv),w(ul,e),e&&s(Pv),e&&s(js),e&&s(Ov),e&&s(Hi),e&&s(Iv),e&&s(zi),e&&s(Tv),w(dl,e),e&&s(Av),e&&s(mt),w(cl),e&&s(Dv),e&&s(_t),e&&s(Sv),e&&s(Ri),e&&s(qv),e&&s(Ps),e&&s(Lv),e&&s(Os),e&&s(Uv),e&&s(Gi),e&&s(Nv),w(vl,e),e&&s(Hv),e&&s(vt),w(wl),e&&s(zv),e&&s(Ie),e&&s(Rv),e&&s(W),e&&s(Gv),w(yl,e),e&&s(Fv),e&&s(Fi),e&&s(Mv),w($l,e),e&&s(Wv),e&&s(wt),w(El),e&&s(Bv),e&&s(Mi),e&&s(Yv),w(gl,e),e&&s(Vv),e&&s(yt),w(bl),e&&s(Jv),e&&s(Wi),e&&s(Xv),w(kl,e),e&&s(Zv),e&&s(Bi),e&&s(Kv),e&&s(Yi),e&&s(Qv),w(Cl,e),e&&s(e1),e&&s($t),w(jl),e&&s(t1),e&&s(Te),e&&s(s1),e&&s(oe),e&&s(o1),e&&s(Et),w(Pl),e&&s(r1),e&&s(Vi),e&&s(l1),w(Ol,e),e&&s(a1),e&&s(qs),e&&s(i1),e&&s(Ae),e&&s(n1),w(Il,e),e&&s(p1),e&&s(Ls),e&&s(f1),w(Tl,e),e&&s(h1),e&&s(Us),e&&s(u1),w(Al,e),e&&s(d1),e&&s(Ji),e&&s(c1),w(Dl,e),e&&s(m1),e&&s(Xi),e&&s(_1),w(Sl,e),e&&s(v1),e&&s(B),e&&s(w1),e&&s(re),e&&s(y1),e&&s(De),e&&s($1),w(Ll,e),e&&s(E1),e&&s(le),e&&s(g1),w(Ul,e),e&&s(b1),e&&s(Zi),e&&s(k1),w(Nl,e),e&&s(C1),e&&s(Ki),e&&s(j1),w(Hl,e),e&&s(x1),e&&s(Qi),e&&s(P1),e&&s(gt),w(zl),e&&s(O1),e&&s(Hs),e&&s(I1),e&&s(zs),e&&s(T1),e&&s(Fs),e&&s(A1),w(Wl,e),e&&s(D1),e&&s(Y),e&&s(S1),w(Bl,e),e&&s(q1),e&&s(bt),w(Yl),e&&s(L1),e&&s(Ws),e&&s(U1),e&&s(on),e&&s(N1),e&&s(qe),e&&s(H1),e&&s(rn),e&&s(z1),w(Vl,e),e&&s(R1),e&&s(Bs),e&&s(G1),e&&s(ln),e&&s(F1),w(Jl,e),e&&s(M1),e&&s(Xl),e&&s(W1),e&&s(an),e&&s(B1),w(Zl,e),e&&s(Y1),e&&s(nn),e&&s(V1),e&&s(pn),e&&s(J1),w(Ys,e),e&&s(X1),w(Vs,e),e&&s(Z1),e&&s(Ct),w(Ql),e&&s(K1),e&&s(Le),e&&s(Q1),w(ea,e),e&&s(ew),e&&s(jt),w(ta),e&&s(tw),e&&s(Zs),e&&s(sw),e&&s(cn),e&&s(ow),e&&s(Ks),e&&s(rw),e&&s(ae),e&&s(lw),e&&s(xt),w(ra),e&&s(aw),e&&s(mn),e&&s(iw),w(la,e),e&&s(nw),e&&s(_n),e&&s(pw),w(aa,e),e&&s(fw),e&&s(eo),e&&s(hw),w(ia,e),e&&s(uw),e&&s(vn),e&&s(dw),w(na,e),e&&s(cw),e&&s(wn),e&&s(mw),w(pa,e),e&&s(_w),e&&s(to),e&&s(vw),w(fa,e),e&&s(ww),e&&s(yn),e&&s(yw),w(ha,e),e&&s($w),e&&s($n),e&&s(Ew),w(ua,e),e&&s(gw),e&&s(En),e&&s(bw),w(da,e),e&&s(kw),e&&s(gn),e&&s(Cw),w(ca,e),e&&s(jw),e&&s(so),e&&s(xw),e&&s(Pt),w(_a),e&&s(Pw),e&&s(bn),e&&s(Ow),w(va,e),e&&s(Iw),e&&s(Ue),e&&s(Tw),w(wa,e),e&&s(Aw),e&&s(ie),e&&s(Dw),w(ya,e),e&&s(Sw),e&&s(kn),e&&s(qw),e&&s(Cn),e&&s(Lw),e&&s(jn),e&&s(Uw),e&&s(ne),e&&s(Nw),e&&s(Ne),e&&s(Hw),w($a,e),e&&s(zw),e&&s(He),e&&s(Rw),e&&s(ro),e&&s(Gw),e&&s(xn),e&&s(Fw),e&&s(It),w(ba),e&&s(Mw),e&&s(V),e&&s(Ww),w(Ca,e),e&&s(Bw),e&&s(ao),e&&s(Yw),w(ja,e),e&&s(Vw),e&&s(io),e&&s(Jw),w(xa,e),e&&s(Xw),e&&s(T),e&&s(Zw),e&&s(no),e&&s(Kw),w(Pa,e),e&&s(Qw),e&&s(Pn),e&&s(ey),w(Oa,e),e&&s(ty),e&&s(ze),e&&s(sy),w(Ia,e),e&&s(oy),e&&s(po),e&&s(ry),w(Ta,e),e&&s(ly),e&&s(On),e&&s(ay),e&&s(Tt),w(Aa),e&&s(iy),e&&s(ho),e&&s(ny),w(Da,e),e&&s(py),e&&s(At),w(Sa),e&&s(fy),e&&s(qa),e&&s(hy),w(La,e),e&&s(uy),e&&s(pe),e&&s(dy),w(Ua,e),e&&s(cy),e&&s(N),e&&s(my),e&&s(co),e&&s(_y),e&&s(Dt),w(Na),e&&s(vy),e&&s(In),e&&s(wy),w(Ha,e),e&&s(yy),e&&s(St),w(za),e&&s($y),e&&s(Tn),e&&s(Ey),w(Ra,e),e&&s(gy),e&&s(qt),w(Ga),e&&s(by),e&&s(An),e&&s(ky),e&&s(fe),e&&s(Cy),e&&s(Lt),w(Ya),e&&s(jy),e&&s(Dn),e&&s(xy),e&&s(he),e&&s(Py),e&&s(Sn),e&&s(Oy),e&&s(qn),e&&s(Iy),e&&s(Ln),e&&s(Ty),e&&s(Un),e&&s(Ay),e&&s(yo),e&&s(Dy),e&&s(Hn),e&&s(Sy),w(Va,e),e&&s(qy),e&&s(zn),e&&s(Ly),w(Ja,e),e&&s(Uy),e&&s($o),e&&s(Ny),e&&s(Eo),e&&s(Hy),e&&s(Rn),e&&s(zy),e&&s(go)}}}const dq={local:"testing",sections:[{local:"how-transformers-are-tested",title:"How transformers are tested"},{local:"running-tests",sections:[{local:"choosing-which-tests-to-run",title:"Choosing which tests to run"},{local:"getting-the-list-of-all-tests",title:"Getting the list of all tests"},{local:"run-a-specific-test-module",title:"Run a specific test module"},{local:"run-specific-tests",title:"Run specific tests"},{local:"run-only-modified-tests",title:"Run only modified tests"},{local:"automatically-rerun-failed-tests-on-source-modification",title:"Automatically rerun failed tests on source modification"},{local:"skip-a-test-module",title:"Skip a test module"},{local:"clearing-state",title:"Clearing state"},{local:"running-tests-in-parallel",title:"Running tests in parallel"},{local:"test-order-and-repetition",sections:[{local:"repeat-tests",title:"Repeat tests"},{local:"run-tests-in-a-random-order",title:"Run tests in a random order"}],title:"Test order and repetition"},{local:"look-and-feel-variations",sections:[{local:"pytestsugar",title:"pytest-sugar"},{local:"report-each-subtest-name-and-its-progress",title:"Report each sub-test name and its progress"},{local:"instantly-shows-failed-tests",title:"Instantly shows failed tests"}],title:"Look and feel variations"},{local:"to-gpu-or-not-to-gpu",title:"To GPU or not to GPU"},{local:"distributed-training",title:"Distributed training"},{local:"output-capture",title:"Output capture"},{local:"color-control",title:"Color control"},{local:"sending-test-report-to-online-pastebin-service",title:"Sending test report to online pastebin service"}],title:"Running tests"},{local:"writing-tests",sections:[{local:"parametrization",title:"Parametrization"},{local:"files-and-directories",title:"Files and directories"},{local:"temporary-files-and-directories",title:"Temporary files and directories"},{local:"temporary-syspath-override",title:"Temporary sys.path override"},{local:"skipping-tests",sections:[{local:"implementation",title:"Implementation"}],title:"Skipping tests"},{local:"slow-tests",title:"Slow tests"},{local:"testing-the-stdoutstderr-output",title:"Testing the stdout/stderr output"},{local:"capturing-logger-stream",title:"Capturing logger stream"},{local:"testing-with-environment-variables",title:"Testing with environment variables"},{local:"getting-reproducible-results",title:"Getting reproducible results"},{local:"debugging-tests",title:"Debugging tests"}],title:"Writing tests"},{local:"working-with-github-actions-workflows",title:"Working with github actions workflows"},{local:"testing-experimental-ci-features",title:"Testing Experimental CI Features"}],title:"Testing"};function cq(_e,$,x){let{fw:g}=$;return _e.$$set=b=>{"fw"in b&&x(0,g=b.fw)},[g]}class $q extends rq{constructor($){super();lq(this,$,cq,uq,aq,{fw:0})}}export{$q as default,dq as metadata};
