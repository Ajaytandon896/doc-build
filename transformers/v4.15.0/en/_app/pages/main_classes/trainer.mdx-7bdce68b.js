import{S as KC,i as QC,s as eI,e as n,k as l,w as h,t as r,L as tI,c as s,d as o,m as d,a as i,x as u,h as a,b as p,J as e,g as m,y as f,q as g,o as _,B as v}from"../../chunks/vendor-b1433968.js";import{T as Rv}from"../../chunks/Tip-c3840994.js";import{D as k}from"../../chunks/Docstring-ff504c58.js";import{C as F}from"../../chunks/CodeBlock-a320dbd7.js";import{I as ue}from"../../chunks/IconCopyLink-7029626d.js";import"../../chunks/CopyButton-f65cb278.js";function oI(Ye){let E,L,x,S,fe,W,R,H,ge,ee,j,se,ie,te,le,Y,Ze,_e,z,O,rt,oe,at,nt,ve,Vr,Yr,Je,Ae,Zr,be,Jr,Xr;return{c(){E=n("p"),L=r("The "),x=n("a"),S=r("Trainer"),fe=r(` class is optimized for \u{1F917} Transformers models and can have surprising behaviors
when you use it on other models. When using it on your own model, make sure:`),W=l(),R=n("ul"),H=n("li"),ge=r("your model always return tuples or subclasses of "),ee=n("a"),j=r("ModelOutput"),se=r("."),ie=l(),te=n("li"),le=r("your model can compute the loss if a "),Y=n("code"),Ze=r("labels"),_e=r(` argument is provided and that loss is returned as the first
element of the tuple (if your model returns tuples)`),z=l(),O=n("li"),rt=r("your model can accept multiple label arguments (use the "),oe=n("code"),at=r("label_names"),nt=r(" in your "),ve=n("a"),Vr=r("TrainingArguments"),Yr=r(" to indicate their name to the "),Je=n("a"),Ae=r("Trainer"),Zr=r(") but none of them should be named "),be=n("code"),Jr=r('"label"'),Xr=r("."),this.h()},l(Z){E=s(Z,"P",{});var B=i(E);L=a(B,"The "),x=s(B,"A",{href:!0});var ys=i(x);S=a(ys,"Trainer"),ys.forEach(o),fe=a(B,` class is optimized for \u{1F917} Transformers models and can have surprising behaviors
when you use it on other models. When using it on your own model, make sure:`),B.forEach(o),W=d(Z),R=s(Z,"UL",{});var ye=i(R);H=s(ye,"LI",{});var Oo=i(H);ge=a(Oo,"your model always return tuples or subclasses of "),ee=s(Oo,"A",{href:!0});var ws=i(ee);j=a(ws,"ModelOutput"),ws.forEach(o),se=a(Oo,"."),Oo.forEach(o),ie=d(ye),te=s(ye,"LI",{});var Bt=i(te);le=a(Bt,"your model can compute the loss if a "),Y=s(Bt,"CODE",{});var q=i(Y);Ze=a(q,"labels"),q.forEach(o),_e=a(Bt,` argument is provided and that loss is returned as the first
element of the tuple (if your model returns tuples)`),Bt.forEach(o),z=d(ye),O=s(ye,"LI",{});var V=i(O);rt=a(V,"your model can accept multiple label arguments (use the "),oe=s(V,"CODE",{});var Co=i(oe);at=a(Co,"label_names"),Co.forEach(o),nt=a(V," in your "),ve=s(V,"A",{href:!0});var Ts=i(ve);Vr=a(Ts,"TrainingArguments"),Ts.forEach(o),Yr=a(V," to indicate their name to the "),Je=s(V,"A",{href:!0});var Es=i(Je);Ae=a(Es,"Trainer"),Es.forEach(o),Zr=a(V,") but none of them should be named "),be=s(V,"CODE",{});var ks=i(be);Jr=a(ks,'"label"'),ks.forEach(o),Xr=a(V,"."),V.forEach(o),ye.forEach(o),this.h()},h(){p(x,"href","/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer"),p(ee,"href","/docs/transformers/v4.15.0/en/main_classes/output#transformers.file_utils.ModelOutput"),p(ve,"href","/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.TrainingArguments"),p(Je,"href","/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer")},m(Z,B){m(Z,E,B),e(E,L),e(E,x),e(x,S),e(E,fe),m(Z,W,B),m(Z,R,B),e(R,H),e(H,ge),e(H,ee),e(ee,j),e(H,se),e(R,ie),e(R,te),e(te,le),e(te,Y),e(Y,Ze),e(te,_e),e(R,z),e(R,O),e(O,rt),e(O,oe),e(oe,at),e(O,nt),e(O,ve),e(ve,Vr),e(O,Yr),e(O,Je),e(Je,Ae),e(O,Zr),e(O,be),e(be,Jr),e(O,Xr)},d(Z){Z&&o(E),Z&&o(W),Z&&o(R)}}}function rI(Ye){let E,L,x,S,fe,W,R,H,ge,ee,j,se,ie,te,le,Y,Ze;return{c(){E=n("p"),L=r("To use this method, you need to have provided a "),x=n("code"),S=r("model_init"),fe=r(` when initializing your
`),W=n("a"),R=r("Trainer"),H=r(`: we need to reinitialize the model at each new run. This is incompatible
with the `),ge=n("code"),ee=r("optimizers"),j=r(" argument, so you need to subclass "),se=n("a"),ie=r("Trainer"),te=r(` and override the
method `),le=n("a"),Y=r("create_optimizer_and_scheduler()"),Ze=r(" for custom optimizer/scheduler."),this.h()},l(_e){E=s(_e,"P",{});var z=i(E);L=a(z,"To use this method, you need to have provided a "),x=s(z,"CODE",{});var O=i(x);S=a(O,"model_init"),O.forEach(o),fe=a(z,` when initializing your
`),W=s(z,"A",{href:!0});var rt=i(W);R=a(rt,"Trainer"),rt.forEach(o),H=a(z,`: we need to reinitialize the model at each new run. This is incompatible
with the `),ge=s(z,"CODE",{});var oe=i(ge);ee=a(oe,"optimizers"),oe.forEach(o),j=a(z," argument, so you need to subclass "),se=s(z,"A",{href:!0});var at=i(se);ie=a(at,"Trainer"),at.forEach(o),te=a(z,` and override the
method `),le=s(z,"A",{href:!0});var nt=i(le);Y=a(nt,"create_optimizer_and_scheduler()"),nt.forEach(o),Ze=a(z," for custom optimizer/scheduler."),z.forEach(o),this.h()},h(){p(W,"href","/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer"),p(se,"href","/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer"),p(le,"href","/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer.create_optimizer_and_scheduler")},m(_e,z){m(_e,E,z),e(E,L),e(E,x),e(x,S),e(E,fe),e(E,W),e(W,R),e(E,H),e(E,ge),e(ge,ee),e(E,j),e(E,se),e(se,ie),e(E,te),e(E,le),e(le,Y),e(E,Ze)},d(_e){_e&&o(E)}}}function aI(Ye){let E,L;return{c(){E=n("p"),L=r(`If your predictions or labels have different sequence length (for instance because you\u2019re doing dynamic
padding in a token classification task) the predictions will be padded (on the right) to allow for
concatenation into one array. The padding index is -100.`)},l(x){E=s(x,"P",{});var S=i(E);L=a(S,`If your predictions or labels have different sequence length (for instance because you\u2019re doing dynamic
padding in a token classification task) the predictions will be padded (on the right) to allow for
concatenation into one array. The padding index is -100.`),S.forEach(o)},m(x,S){m(x,E,S),e(E,L)},d(x){x&&o(E)}}}function nI(Ye){let E,L;return{c(){E=n("p"),L=r(`If your predictions or labels have different sequence lengths (for instance because you\u2019re doing dynamic
padding in a token classification task) the predictions will be padded (on the right) to allow for
concatenation into one array. The padding index is -100.`)},l(x){E=s(x,"P",{});var S=i(E);L=a(S,`If your predictions or labels have different sequence lengths (for instance because you\u2019re doing dynamic
padding in a token classification task) the predictions will be padded (on the right) to allow for
concatenation into one array. The padding index is -100.`),S.forEach(o)},m(x,S){m(x,E,S),e(E,L)},d(x){x&&o(E)}}}function sI(Ye){let E,L,x,S,fe,W,R,H,ge,ee,j,se,ie,te,le,Y,Ze,_e,z,O,rt,oe,at,nt,ve,Vr,Yr,Je,Ae,Zr,be,Jr,Xr,Z,B,ys,ye,Oo,ws,Bt,q,V,Co,Ts,Es,ks,$s,id,jv,Mv,Gv,xs,ld,Hv,Bv,Vv,As,dd,Yv,Zv,Jv,st,cd,Xv,Kv,md,Qv,eb,pd,tb,ob,rb,qs,hd,ab,nb,sb,Ds,ud,ib,lb,db,Ss,fd,cb,mb,pb,Ps,gd,hb,ub,fb,Os,_d,gb,_b,vb,Cs,vd,bb,yb,wb,Is,bd,Tb,Eb,cf,Io,mf,zo,kb,zs,$b,xb,pf,Kr,hf,it,Ab,Ns,qb,Db,Ls,Sb,Pb,uf,Vt,No,yd,Qr,Ob,wd,Cb,ff,b,ea,Ib,Td,zb,Nb,Ed,Lb,Ub,we,Lo,kd,Fb,Wb,Us,Rb,jb,Mb,J,$d,Gb,Hb,xd,Bb,Vb,Ad,Yb,Zb,qd,Jb,Xb,Dd,Kb,Qb,Sd,e1,t1,o1,Fs,Pd,r1,a1,n1,qe,Od,s1,i1,Cd,l1,d1,Id,c1,m1,zd,p1,h1,u1,De,Nd,f1,g1,Ld,_1,v1,Ud,b1,y1,Fd,w1,T1,E1,Uo,ta,k1,oa,$1,Wd,x1,A1,q1,Fo,ra,D1,aa,S1,Rd,P1,O1,C1,lt,na,I1,jd,z1,N1,Md,L1,U1,dt,sa,F1,Gd,W1,R1,ia,j1,Hd,M1,G1,H1,ct,la,B1,Bd,V1,Y1,Xe,Z1,Vd,J1,X1,Yd,K1,Q1,Zd,ey,ty,oy,Wo,da,ry,Jd,ay,ny,Se,ca,sy,Xd,iy,ly,ma,dy,Kd,cy,my,py,Qd,hy,uy,mt,pa,fy,Yt,gy,ec,_y,vy,tc,by,yy,wy,oc,Ty,Ey,Ro,ha,ky,ua,$y,Ws,xy,Ay,qy,pt,fa,Dy,ga,Sy,rc,Py,Oy,Cy,ac,Iy,zy,ht,_a,Ny,va,Ly,nc,Uy,Fy,Wy,sc,Ry,jy,Pe,ba,My,ya,Gy,ic,Hy,By,Vy,Zt,Yy,lc,Zy,Jy,dc,Xy,Ky,Qy,cc,e0,t0,ut,wa,o0,Te,r0,mc,a0,n0,pc,s0,i0,hc,l0,d0,uc,c0,m0,p0,jo,h0,Mo,Ta,u0,Ea,f0,fc,g0,_0,v0,Go,ka,b0,gc,y0,w0,Ho,$a,T0,xa,E0,_c,k0,$0,x0,ft,Aa,A0,qa,q0,vc,D0,S0,P0,bc,O0,C0,$,Da,I0,yc,z0,N0,wc,L0,U0,Tc,F0,W0,Jt,R0,Ec,j0,M0,kc,G0,H0,B0,$c,V0,Y0,Sa,Z0,xc,Ac,J0,X0,Ke,Ee,K0,qc,Q0,e2,Dc,t2,o2,Sc,r2,a2,Pc,n2,s2,i2,Xt,l2,Oc,d2,c2,Cc,m2,p2,h2,Rs,Ic,u2,f2,g2,gt,zc,_2,v2,Nc,b2,y2,Lc,w2,T2,E2,Uc,k2,$2,Fc,x2,A2,Pa,q2,Wc,D2,S2,P2,Qe,O2,Rc,C2,I2,jc,z2,N2,Mc,L2,U2,F2,re,W2,js,R2,j2,Gc,M2,G2,Hc,H2,B2,Bc,V2,Y2,Vc,Z2,J2,X2,C,K2,Yc,Q2,ew,Zc,tw,ow,Jc,rw,aw,Xc,nw,sw,Oa,iw,lw,Kc,dw,cw,Qc,mw,pw,em,hw,uw,tm,fw,gw,om,_w,vw,bw,ke,yw,Ms,ww,Tw,rm,Ew,kw,Gs,$w,xw,am,Aw,qw,Dw,nm,Sw,Pw,Bo,Ca,Ow,sm,Cw,Iw,_t,Ia,zw,za,Nw,im,Lw,Uw,Fw,Hs,Ww,lm,Rw,jw,vt,Na,Mw,La,Gw,dm,Hw,Bw,Vw,Ua,Yw,cm,Zw,Jw,Xw,X,Fa,Kw,mm,Qw,e4,Wa,t4,pm,o4,r4,a4,Vo,n4,Ra,s4,hm,i4,l4,d4,Kt,Qt,c4,um,m4,p4,fm,h4,u4,f4,eo,g4,gm,_4,v4,_m,b4,y4,w4,to,T4,vm,E4,k4,bm,$4,x4,A4,bt,ja,q4,oo,D4,ym,S4,P4,wm,O4,C4,I4,Tm,z4,N4,yt,Ma,L4,ro,U4,Em,F4,W4,km,R4,j4,M4,$m,G4,H4,Yo,Ga,B4,et,V4,xm,Y4,Z4,Am,J4,X4,qm,K4,Q4,eT,Zo,Ha,tT,Ba,oT,Dm,rT,aT,nT,Oe,Va,sT,Ya,iT,Sm,lT,dT,cT,Pm,mT,pT,Za,hT,Om,uT,fT,gT,wt,Ja,_T,Xa,vT,Cm,bT,yT,wT,Im,TT,ET,Tt,Ka,kT,zm,$T,xT,Nm,AT,qT,Jo,Qa,DT,Lm,ST,PT,Et,en,OT,Um,CT,IT,Fm,zT,gf,ao,Xo,Wm,tn,NT,Rm,LT,_f,no,Ce,on,UT,jm,FT,WT,rn,RT,Mm,jT,MT,GT,Gm,HT,BT,K,an,VT,Hm,YT,ZT,nn,JT,Bm,XT,KT,QT,Ko,eE,sn,tE,Vm,oE,rE,aE,so,io,nE,Ym,sE,iE,Zm,lE,dE,cE,lo,mE,Jm,pE,hE,Xm,uE,fE,gE,co,_E,Km,vE,bE,Qm,yE,wE,vf,mo,Qo,ep,ln,TE,tp,EE,bf,N,dn,kE,cn,$E,op,xE,AE,qE,po,DE,Bs,SE,PE,mn,OE,CE,IE,de,pn,zE,rp,NE,LE,ho,UE,ap,FE,WE,np,RE,jE,ME,uo,GE,sp,HE,BE,ip,VE,YE,ZE,hn,JE,lp,XE,KE,QE,er,un,e5,dp,t5,o5,kt,fn,r5,cp,a5,n5,fo,s5,mp,i5,l5,pp,d5,c5,m5,tr,gn,p5,_n,h5,hp,u5,f5,g5,or,vn,_5,up,v5,b5,rr,bn,y5,fp,w5,yf,go,ar,gp,yn,T5,_p,E5,wf,ae,wn,k5,Tn,$5,vp,x5,A5,q5,_o,D5,Vs,S5,P5,En,O5,C5,I5,ne,z5,bp,N5,L5,yp,U5,F5,wp,W5,R5,Tp,j5,M5,Ep,G5,H5,B5,D,V5,kp,Y5,Z5,$p,J5,X5,xp,K5,Q5,Ap,ek,tk,qp,ok,rk,Dp,ak,nk,Sp,sk,ik,Pp,lk,dk,Op,ck,mk,Cp,pk,hk,Ip,uk,fk,zp,gk,_k,Np,vk,bk,Tf,vo,nr,Lp,kn,yk,Up,wk,Ef,ce,Tk,Ys,Ek,kk,Fp,$k,xk,Zs,Ak,qk,Wp,Dk,Sk,kf,sr,Pk,Js,Ok,Ck,$f,ir,Xs,Rp,Ik,zk,Nk,Ks,jp,Lk,Uk,xf,Ie,Fk,Mp,Wk,Rk,Gp,jk,Mk,Qs,Gk,Hk,Af,lr,dr,Hp,Bk,Vk,Bp,Yk,Zk,Jk,ei,Vp,Xk,Kk,qf,bo,cr,Yp,$n,Qk,Zp,e3,Df,ze,t3,ti,o3,r3,Jp,a3,n3,Xp,s3,i3,Sf,$t,l3,Kp,d3,c3,oi,m3,p3,Pf,mr,ri,Qp,h3,u3,f3,ai,eh,g3,_3,Of,Ne,v3,ni,b3,y3,th,w3,T3,oh,E3,k3,Cf,Q,$3,si,x3,A3,rh,q3,D3,ah,S3,P3,nh,O3,C3,ii,I3,z3,If,li,N3,zf,xn,Nf,di,L3,Lf,An,Uf,ci,U3,Ff,qn,Wf,mi,F3,Rf,pi,W3,jf,Dn,Mf,pr,R3,sh,j3,M3,Gf,yo,hr,ih,Sn,G3,lh,H3,Hf,me,B3,hi,V3,Y3,dh,Z3,J3,ch,X3,K3,mh,Q3,e$,Bf,xt,t$,Pn,o$,r$,ph,a$,n$,Vf,wo,ur,hh,On,s$,uh,i$,Yf,fr,l$,ui,d$,c$,Zf,Le,m$,Cn,p$,h$,In,u$,f$,zn,g$,_$,Jf,fi,v$,Xf,gi,Kf,To,gr,fh,Nn,b$,gh,y$,Qf,_i,w$,eg,At,T$,Ln,E$,k$,Un,$$,x$,tg,vi,A$,og,Fn,rg,bi,q$,ag,qt,D$,_h,S$,P$,vh,O$,C$,ng,Eo,_r,bh,Wn,I$,yh,z$,sg,yi,N$,ig,Ue,L$,wh,U$,F$,Th,W$,R$,Eh,j$,M$,lg,Dt,G$,kh,H$,B$,$h,V$,Y$,dg,Rn,cg,vr,Z$,jn,J$,X$,mg,ko,br,xh,Mn,K$,Ah,Q$,pg,wi,ex,hg,Gn,ug,St,tx,qh,ox,rx,Dh,ax,nx,fg,Ti,sx,gg,Hn,_g,Ei,ix,vg,yr,lx,Sh,dx,cx,bg,tt,Ph,mx,px,Oh,hx,ux,Ch,fx,gx,yg,ki,_x,wg,Bn,Tg,$i,vx,Eg,Fe,bx,Ih,yx,wx,zh,Tx,Ex,Nh,kx,$x,kg,$o,wr,Lh,Vn,xx,Uh,Ax,$g,Pt,qx,Fh,Dx,Sx,Wh,Px,Ox,xg,xi,Cx,Ag,Ai,Ix,qg,Tr,zx,Rh,Nx,Lx,Dg,Yn,Sg,M,Ux,jh,Fx,Wx,Mh,Rx,jx,Gh,Mx,Gx,Hh,Hx,Bx,Bh,Vx,Yx,Vh,Zx,Jx,Pg,qi,Xx,Og,xo,Er,Yh,Zn,Kx,Zh,Qx,Cg,We,e6,Jn,t6,o6,Di,r6,a6,Xn,n6,s6,Ig,Re,Jh,i6,l6,Xh,d6,c6,Kh,m6,p6,Qh,h6,zg,Si,u6,Ng,Kn,eu,f6,g6,Lg,Pi,_6,Ug,Qn,Fg,Ot,v6,tu,b6,y6,ou,w6,T6,Wg,es,Rg,Ct,E6,ru,k6,$6,ts,x6,A6,jg,kr,q6,Oi,D6,S6,Mg,Ci,P6,Gg,os,au,O6,C6,Hg,rs,Bg,Ii,I6,Vg,as,Yg,ns,nu,z6,N6,Zg,ss,Jg,zi,L6,Xg,is,Kg,Ni,U6,Qg,$r,F6,ls,W6,R6,e_,ds,su,j6,M6,t_,It,G6,iu,H6,B6,lu,V6,Y6,o_,xr,Z6,du,J6,X6,r_,cs,a_,Li,K6,n_,je,cu,Q6,eA,mu,tA,oA,ms,rA,pu,aA,nA,sA,ps,iA,hu,lA,dA,s_,hs,ot,cA,uu,mA,pA,fu,hA,uA,gu,fA,gA,i_,Ar,_A,_u,vA,bA,l_,us,d_,Ao,vu,yA,wA,bu,TA,EA,c_,zt,kA,yu,$A,xA,wu,AA,qA,m_,Ui,DA,p_,pe,Tu,SA,PA,Eu,OA,CA,fs,IA,ku,zA,NA,LA,qo,UA,$u,FA,WA,xu,RA,jA,MA,Au,GA,h_,Fi,HA,u_,qr,Do,BA,qu,VA,YA,Du,ZA,JA,XA,$e,KA,Su,QA,e9,Pu,t9,o9,Ou,r9,a9,Cu,n9,s9,f_,Wi,i9,g_,y,l9,Ri,d9,Iu,c9,ji,m9,zu,p9,Mi,h9,Nu,u9,Gi,f9,Lu,g9,Hi,_9,Uu,v9,Bi,b9,Fu,y9,Vi,w9,Wu,T9,Yi,E9,Ru,k9,Zi,$9,ju,x9,Ji,A9,Mu,q9,Xi,D9,Gu,S9,Ki,P9,Hu,O9,Qi,C9,Bu,I9,el,z9,Vu,N9,tl,L9,Yu,U9,ol,F9,Zu,W9,rl,R9,Ju,j9,al,M9,Xu,G9,nl,H9,Ku,B9,sl,V9,Qu,Y9,il,Z9,ef,J9,ll,X9,tf,K9,dl,Q9,of,eq,__;return W=new ue({}),Io=new Rv({props:{warning:"&lcub;true}",$$slots:{default:[oI]},$$scope:{ctx:Ye}}}),Kr=new F({props:{code:`from torch import nn
from transformers import Trainer

class MultilabelTrainer(Trainer):
    def compute_loss(self, model, inputs, return_outputs=False):
        labels = inputs.get("labels")
        outputs = model(**inputs)
        logits = outputs.get('logits')
        loss_fct = nn.BCEWithLogitsLoss()
        loss = loss_fct(logits.view(-1, self.model.config.num_labels),
                        labels.float().view(-1, self.model.config.num_labels))
        return (loss, outputs) if return_outputs else loss,`,highlighted:`<span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn
<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Trainer

<span class="hljs-keyword">class</span> <span class="hljs-title class_">MultilabelTrainer</span>(<span class="hljs-title class_ inherited__">Trainer</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">compute_loss</span>(<span class="hljs-params">self, model, inputs, return_outputs=<span class="hljs-literal">False</span></span>):
        labels = inputs.get(<span class="hljs-string">&quot;labels&quot;</span>)
        outputs = model(**inputs)
        logits = outputs.get(<span class="hljs-string">&#x27;logits&#x27;</span>)
        loss_fct = nn.BCEWithLogitsLoss()
        loss = loss_fct(logits.view(-<span class="hljs-number">1</span>, self.model.config.num_labels),
                        labels.<span class="hljs-built_in">float</span>().view(-<span class="hljs-number">1</span>, self.model.config.num_labels))
        <span class="hljs-keyword">return</span> (loss, outputs) <span class="hljs-keyword">if</span> return_outputs <span class="hljs-keyword">else</span> loss`}}),Qr=new ue({}),ea=new k({props:{name:"class transformers.Trainer",anchor:"transformers.Trainer",parameters:[{name:"model",val:": typing.Union[transformers.modeling_utils.PreTrainedModel, torch.nn.modules.module.Module] = None"},{name:"args",val:": TrainingArguments = None"},{name:"data_collator",val:": typing.Optional[DataCollator] = None"},{name:"train_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"},{name:"eval_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"},{name:"tokenizer",val:": typing.Optional[transformers.tokenization_utils_base.PreTrainedTokenizerBase] = None"},{name:"model_init",val:": typing.Callable[[], transformers.modeling_utils.PreTrainedModel] = None"},{name:"compute_metrics",val:": typing.Union[typing.Callable[[transformers.trainer_utils.EvalPrediction], typing.Dict], NoneType] = None"},{name:"callbacks",val:": typing.Optional[typing.List[transformers.trainer_callback.TrainerCallback]] = None"},{name:"optimizers",val:": typing.Tuple[torch.optim.optimizer.Optimizer, torch.optim.lr_scheduler.LambdaLR] = (None, None)"}],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/trainer.py#L197",parametersDescription:[{anchor:"transformers.Trainer.model",description:`<strong>model</strong> (<a href="/docs/transformers/v4.15.0/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <code>torch.nn.Module</code>, <em>optional</em>) &#x2014;
The model to train, evaluate or use for predictions. If not provided, a <code>model_init</code> must be passed.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p><a href="/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer">Trainer</a> is optimized to work with the <a href="/docs/transformers/v4.15.0/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a>
provided by the library. You can still use your own models defined as <code>torch.nn.Module</code> as long as
they work the same way as the &#x1F917; Transformers models.</p>

					</div>`,name:"model"},{anchor:"transformers.Trainer.args",description:`<strong>args</strong> (<a href="/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.TrainingArguments">TrainingArguments</a>, <em>optional</em>) &#x2014;
The arguments to tweak for training. Will default to a basic instance of
<a href="/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.TrainingArguments">TrainingArguments</a> with the <code>output_dir</code> set to a directory named <em>tmp_trainer</em> in
the current directory if not provided.`,name:"args"},{anchor:"transformers.Trainer.data_collator",description:`<strong>data_collator</strong> (<code>DataCollator</code>, <em>optional</em>) &#x2014;
The function to use to form a batch from a list of elements of <code>train_dataset</code> or <code>eval_dataset</code>.
Will default to <a href="/docs/transformers/v4.15.0/en/main_classes/data_collator#transformers.default_data_collator">default_data_collator()</a> if no <code>tokenizer</code> is provided, an instance of
<a href="/docs/transformers/v4.15.0/en/main_classes/data_collator#transformers.DataCollatorWithPadding">DataCollatorWithPadding</a> otherwise.`,name:"data_collator"},{anchor:"transformers.Trainer.train_dataset",description:`<strong>train_dataset</strong> (<code>torch.utils.data.Dataset</code> or <code>torch.utils.data.IterableDataset</code>, <em>optional</em>) &#x2014;
The dataset to use for training. If it is an <code>datasets.Dataset</code>, columns not accepted by the
<code>model.forward()</code> method are automatically removed.</p>
<p>Note that if it&#x2019;s a <code>torch.utils.data.IterableDataset</code> with some randomization and you are training in
a distributed fashion, your iterable dataset should either use a internal attribute <code>generator</code> that
is a <code>torch.Generator</code> for the randomization that must be identical on all processes (and the Trainer
will manually set the seed of this <code>generator</code> at each epoch) or have a <code>set_epoch()</code> method that
internally sets the seed of the RNGs used.`,name:"train_dataset"},{anchor:"transformers.Trainer.eval_dataset",description:`<strong>eval_dataset</strong> (<code>torch.utils.data.Dataset</code>, <em>optional</em>) &#x2014;
The dataset to use for evaluation. If it is an <code>datasets.Dataset</code>, columns not accepted by the
<code>model.forward()</code> method are automatically removed.`,name:"eval_dataset"},{anchor:"transformers.Trainer.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/v4.15.0/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase">PreTrainedTokenizerBase</a>, <em>optional</em>) &#x2014;
The tokenizer used to preprocess the data. If provided, will be used to automatically pad the inputs the
maximum length when batching inputs, and it will be saved along the model to make it easier to rerun an
interrupted training or reuse the fine-tuned model.`,name:"tokenizer"},{anchor:"transformers.Trainer.model_init",description:`<strong>model_init</strong> (<code>Callable[[], PreTrainedModel]</code>, <em>optional</em>) &#x2014;
A function that instantiates the model to be used. If provided, each call to
<a href="/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer.train">train()</a> will start from a new instance of the model as given by this function.</p>
<p>The function may have zero argument, or a single one containing the optuna/Ray Tune/SigOpt trial object, to
be able to choose different architectures according to hyper parameters (such as layer count, sizes of
inner layers, dropout probabilities etc).`,name:"model_init"},{anchor:"transformers.Trainer.compute_metrics",description:`<strong>compute_metrics</strong> (<code>Callable[[EvalPrediction], Dict]</code>, <em>optional</em>) &#x2014;
The function that will be used to compute metrics at evaluation. Must take a
<a href="/docs/transformers/v4.15.0/en/internal/trainer_utils#transformers.EvalPrediction">EvalPrediction</a> and return a dictionary string to metric values.`,name:"compute_metrics"},{anchor:"transformers.Trainer.callbacks",description:`<strong>callbacks</strong> (List of <a href="/docs/transformers/v4.15.0/en/main_classes/callback#transformers.TrainerCallback">TrainerCallback</a>, <em>optional</em>) &#x2014;
A list of callbacks to customize the training loop. Will add those to the list of default callbacks
detailed in <a href="callback">here</a>.</p>
<p>If you want to remove one of the default callbacks used, use the <a href="/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer.remove_callback">Trainer.remove_callback()</a> method.`,name:"callbacks"},{anchor:"transformers.Trainer.optimizers",description:`<strong>optimizers</strong> (<code>Tuple[torch.optim.Optimizer, torch.optim.lr_scheduler.LambdaLR]</code>, <em>optional</em>) &#x2014; A tuple
containing the optimizer and the scheduler to use. Will default to an instance of
<a href="/docs/transformers/v4.15.0/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> on your model and a scheduler given by
<a href="/docs/transformers/v4.15.0/en/main_classes/optimizer_schedules#transformers.get_linear_schedule_with_warmup">get_linear_schedule_with_warmup()</a> controlled by <code>args</code>.`,name:"optimizers"}]}}),ta=new k({props:{name:"add_callback",anchor:"transformers.Trainer.add_callback",parameters:[{name:"callback",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/trainer.py#L494",parametersDescription:[{anchor:"transformers.Trainer.add_callback.callback",description:`<strong>callback</strong> (<code>type</code> or <code>TrainerCallback</code>) &#x2014;
A <code>TrainerCallback</code> class or an instance of a <code>TrainerCallback</code>.
In the first case, will instantiate a member of that class.`,name:"callback"}]}}),ra=new k({props:{name:"autocast_smart_context_manager",anchor:"transformers.Trainer.autocast_smart_context_manager",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/trainer.py#L1849"}}),na=new k({props:{name:"compute_loss",anchor:"transformers.Trainer.compute_loss",parameters:[{name:"model",val:""},{name:"inputs",val:""},{name:"return_outputs",val:" = False"}],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/trainer.py#L1913"}}),sa=new k({props:{name:"create_optimizer",anchor:"transformers.Trainer.create_optimizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/trainer.py#L804"}}),la=new k({props:{name:"create_optimizer_and_scheduler",anchor:"transformers.Trainer.create_optimizer_and_scheduler",parameters:[{name:"num_training_steps",val:": int"}],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/trainer.py#L793"}}),da=new k({props:{name:"create_scheduler",anchor:"transformers.Trainer.create_scheduler",parameters:[{name:"num_training_steps",val:": int"},{name:"optimizer",val:": Optimizer = None"}],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/trainer.py#L849",parametersDescription:[{anchor:"transformers.Trainer.create_scheduler.num_training_steps",description:"<strong>num_training_steps</strong> (int) &#x2014; The number of training steps to do.",name:"num_training_steps"}]}}),ca=new k({props:{name:"evaluate",anchor:"transformers.Trainer.evaluate",parameters:[{name:"eval_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'eval'"}],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/trainer.py#L2121",parametersDescription:[{anchor:"transformers.Trainer.evaluate.eval_dataset",description:`<strong>eval_dataset</strong> (<code>Dataset</code>, <em>optional</em>) &#x2014;
Pass a dataset if you wish to override <code>self.eval_dataset</code>. If it is an <code>datasets.Dataset</code>,
columns not accepted by the <code>model.forward()</code> method are automatically removed. It must implement the
<code>__len__</code> method.`,name:"eval_dataset"},{anchor:"transformers.Trainer.evaluate.ignore_keys",description:`<strong>ignore_keys</strong> (<code>Lst[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions.`,name:"ignore_keys"},{anchor:"transformers.Trainer.evaluate.metric_key_prefix",description:`<strong>metric_key_prefix</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;eval&quot;</code>) &#x2014;
An optional prefix to be used as the metrics key prefix. For example the metrics &#x201C;bleu&#x201D; will be named
&#x201C;eval_bleu&#x201D; if the prefix is &#x201C;eval&#x201D; (default)`,name:"metric_key_prefix"}],returnDescription:`
<p>A dictionary containing the evaluation loss and the potential metrics computed from the predictions. The
dictionary also contains the epoch number which comes from the training state.</p>
`}}),pa=new k({props:{name:"evaluation_loop",anchor:"transformers.Trainer.evaluation_loop",parameters:[{name:"dataloader",val:": DataLoader"},{name:"description",val:": str"},{name:"prediction_loss_only",val:": typing.Optional[bool] = None"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'eval'"}],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/trainer.py#L2249"}}),ha=new k({props:{name:"floating_point_ops",anchor:"transformers.Trainer.floating_point_ops",parameters:[{name:"inputs",val:": typing.Dict[str, typing.Union[torch.Tensor, typing.Any]]"}],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/trainer.py#L2565",parametersDescription:[{anchor:"transformers.Trainer.floating_point_ops.inputs",description:`<strong>inputs</strong> (<code>Dict[str, Union[torch.Tensor, Any]]</code>) &#x2014;
The inputs and targets of the model.`,name:"inputs"}],returnDescription:`
<p>The number of floating-point operations.</p>
`,returnType:`
<p><code>int</code></p>
`}}),fa=new k({props:{name:"get_eval_dataloader",anchor:"transformers.Trainer.get_eval_dataloader",parameters:[{name:"eval_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"}],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/trainer.py#L703",parametersDescription:[{anchor:"transformers.Trainer.get_eval_dataloader.eval_dataset",description:`<strong>eval_dataset</strong> (<code>torch.utils.data.Dataset</code>, <em>optional</em>) &#x2014;
If provided, will override <code>self.eval_dataset</code>. If it is an <code>datasets.Dataset</code>, columns not
accepted by the <code>model.forward()</code> method are automatically removed. It must implement <code>__len__</code>.`,name:"eval_dataset"}]}}),_a=new k({props:{name:"get_test_dataloader",anchor:"transformers.Trainer.get_test_dataloader",parameters:[{name:"test_dataset",val:": Dataset"}],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/trainer.py#L750",parametersDescription:[{anchor:"transformers.Trainer.get_test_dataloader.test_dataset",description:`<strong>test_dataset</strong> (<code>torch.utils.data.Dataset</code>, <em>optional</em>) &#x2014;
The test dataset to use. If it is an <code>datasets.Dataset</code>, columns not accepted by the
<code>model.forward()</code> method are automatically removed. It must implement <code>__len__</code>.`,name:"test_dataset"}]}}),ba=new k({props:{name:"get_train_dataloader",anchor:"transformers.Trainer.get_train_dataloader",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/trainer.py#L628"}}),wa=new k({props:{name:"hyperparameter_search",anchor:"transformers.Trainer.hyperparameter_search",parameters:[{name:"hp_space",val:": typing.Union[typing.Callable[[ForwardRef('optuna.Trial')], typing.Dict[str, float]], NoneType] = None"},{name:"compute_objective",val:": typing.Union[typing.Callable[[typing.Dict[str, float]], float], NoneType] = None"},{name:"n_trials",val:": int = 20"},{name:"direction",val:": str = 'minimize'"},{name:"backend",val:": typing.Union[ForwardRef('str'), transformers.trainer_utils.HPSearchBackend, NoneType] = None"},{name:"hp_name",val:": typing.Union[typing.Callable[[ForwardRef('optuna.Trial')], str], NoneType] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/trainer.py#L1712",parametersDescription:[{anchor:"transformers.Trainer.hyperparameter_search.hp_space",description:`<strong>hp_space</strong> (<code>Callable[[&quot;optuna.Trial&quot;], Dict[str, float]]</code>, <em>optional</em>) &#x2014;
A function that defines the hyperparameter search space. Will default to
<code>default_hp_space_optuna()</code> or
<code>default_hp_space_ray()</code> or
<code>default_hp_space_sigopt()</code> depending on your backend.`,name:"hp_space"},{anchor:"transformers.Trainer.hyperparameter_search.compute_objective",description:`<strong>compute_objective</strong> (<code>Callable[[Dict[str, float]], float]</code>, <em>optional</em>) &#x2014;
A function computing the objective to minimize or maximize from the metrics returned by the
<code>evaluate</code> method. Will default to <code>default_compute_objective()</code>.`,name:"compute_objective"},{anchor:"transformers.Trainer.hyperparameter_search.n_trials",description:`<strong>n_trials</strong> (<code>int</code>, <em>optional</em>, defaults to 100) &#x2014;
The number of trial runs to test.`,name:"n_trials"},{anchor:"transformers.Trainer.hyperparameter_search.direction(str,",description:`<strong>direction(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;minimize&quot;</code>) &#x2014;
Whether to optimize greater or lower objects. Can be <code>&quot;minimize&quot;</code> or <code>&quot;maximize&quot;</code>, you should
pick <code>&quot;minimize&quot;</code> when optimizing the validation loss, <code>&quot;maximize&quot;</code> when optimizing one or
several metrics.`,name:"direction(str,"},{anchor:"transformers.Trainer.hyperparameter_search.backend(str",description:`<strong>backend(<code>str</code></strong> or <code>HPSearchBackend</code>, <em>optional</em>) &#x2014;
The backend to use for hyperparameter search. Will default to optuna or Ray Tune or SigOpt, depending
on which one is installed. If all are installed, will default to optuna.
kwargs &#x2014;
Additional keyword arguments passed along to <code>optuna.create_study</code> or <code>ray.tune.run</code>. For
more information see:</p>
<ul>
<li>the documentation of <a href="https://optuna.readthedocs.io/en/stable/reference/generated/optuna.study.create_study.html" rel="nofollow">optuna.create_study</a></li>
<li>the documentation of <a href="https://docs.ray.io/en/latest/tune/api_docs/execution.html#tune-run" rel="nofollow">tune.run</a></li>
<li>the documentation of <a href="https://app.sigopt.com/docs/endpoints/experiments/create" rel="nofollow">sigopt</a></li>
</ul>`,name:"backend(str"}],returnDescription:`
<p>All the information about the best run.</p>
`,returnType:`
<p><code>trainer_utils.BestRun</code></p>
`}}),jo=new Rv({props:{warning:"&lcub;true}",$$slots:{default:[rI]},$$scope:{ctx:Ye}}}),Ta=new k({props:{name:"init_git_repo",anchor:"transformers.Trainer.init_git_repo",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/trainer.py#L2583"}}),ka=new k({props:{name:"is_local_process_zero",anchor:"transformers.Trainer.is_local_process_zero",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/trainer.py#L1937"}}),$a=new k({props:{name:"is_world_process_zero",anchor:"transformers.Trainer.is_world_process_zero",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/trainer.py#L1944"}}),Aa=new k({props:{name:"log",anchor:"transformers.Trainer.log",parameters:[{name:"logs",val:": typing.Dict[str, float]"}],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/trainer.py#L1803",parametersDescription:[{anchor:"transformers.Trainer.log.logs",description:`<strong>logs</strong> (<code>Dict[str, float]</code>) &#x2014;
The values to log.`,name:"logs"}]}}),Da=new k({props:{name:"log_metrics",anchor:"transformers.trainer_pt_utils.log_metrics",parameters:[{name:"split",val:""},{name:"metrics",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/trainer_pt_utils.py#L857",parametersDescription:[{anchor:"transformers.trainer_pt_utils.log_metrics.split",description:`<strong>split</strong> (<code>str</code>) &#x2014;
Mode/split name: one of <code>train</code>, <code>eval</code>, <code>test</code>`,name:"split"},{anchor:"transformers.trainer_pt_utils.log_metrics.metrics",description:`<strong>metrics</strong> (<code>Dict[str, float]</code>) &#x2014;
The metrics returned from train/evaluate/predictmetrics: metrics dict`,name:"metrics"}]}}),Sa=new F({props:{code:`init_mem_cpu_alloc_delta   =     1301MB
init_mem_cpu_peaked_delta  =      154MB
init_mem_gpu_alloc_delta   =      230MB
init_mem_gpu_peaked_delta  =        0MB
train_mem_cpu_alloc_delta  =     1345MB
train_mem_cpu_peaked_delta =        0MB
train_mem_gpu_alloc_delta  =      693MB
train_mem_gpu_peaked_delta =        7MB,`,highlighted:`init_mem_cpu_alloc_delta   =     1301MB
init_mem_cpu_peaked_delta  =      154MB
init_mem_gpu_alloc_delta   =      230MB
init_mem_gpu_peaked_delta  =        0MB
train_mem_cpu_alloc_delta  =     1345MB
train_mem_cpu_peaked_delta =        0MB
train_mem_gpu_alloc_delta  =      693MB
train_mem_gpu_peaked_delta =        7MB`}}),Ca=new k({props:{name:"metrics_format",anchor:"transformers.trainer_pt_utils.metrics_format",parameters:[{name:"metrics",val:": typing.Dict[str, float]"}],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/trainer_pt_utils.py#L831",parametersDescription:[{anchor:"transformers.trainer_pt_utils.metrics_format.metrics",description:`<strong>metrics</strong> (<code>Dict[str, float]</code>) &#x2014;
The metrics returned from train/evaluate/predict`,name:"metrics"}],returnDescription:`
<p>The reformatted metrics</p>
`,returnType:`
<p>metrics (<code>Dict[str, float]</code>)</p>
`}}),Ia=new k({props:{name:"num_examples",anchor:"transformers.Trainer.num_examples",parameters:[{name:"dataloader",val:": DataLoader"}],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/trainer.py#L866"}}),Na=new k({props:{name:"pop_callback",anchor:"transformers.Trainer.pop_callback",parameters:[{name:"callback",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/trainer.py#L505",parametersDescription:[{anchor:"transformers.Trainer.pop_callback.callback",description:`<strong>callback</strong> (<code>type</code> or <code>TrainerCallback</code>) &#x2014;
A <code>TrainerCallback</code> class or an instance of a <code>TrainerCallback</code>.
In the first case, will pop the first member of that class found in the list of callbacks.`,name:"callback"}],returnDescription:`
<p>The callback removed, if found.</p>
`,returnType:`
<p><code>TrainerCallback</code></p>
`}}),Fa=new k({props:{name:"predict",anchor:"transformers.Trainer.predict",parameters:[{name:"test_dataset",val:": Dataset"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'test'"}],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/trainer.py#L2190",parametersDescription:[{anchor:"transformers.Trainer.predict.test_dataset",description:`<strong>test_dataset</strong> (<code>Dataset</code>) &#x2014;
Dataset to run the predictions on. If it is an <code>datasets.Dataset</code>, columns not accepted by the
<code>model.forward()</code> method are automatically removed. Has to implement the method <code>__len__</code>`,name:"test_dataset"},{anchor:"transformers.Trainer.predict.ignore_keys",description:`<strong>ignore_keys</strong> (<code>Lst[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions.`,name:"ignore_keys"},{anchor:"transformers.Trainer.predict.metric_key_prefix",description:`<strong>metric_key_prefix</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;test&quot;</code>) &#x2014;
An optional prefix to be used as the metrics key prefix. For example the metrics &#x201C;bleu&#x201D; will be named
&#x201C;test_bleu&#x201D; if the prefix is &#x201C;test&#x201D; (default)`,name:"metric_key_prefix"}]}}),Vo=new Rv({props:{$$slots:{default:[aI]},$$scope:{ctx:Ye}}}),ja=new k({props:{name:"prediction_loop",anchor:"transformers.Trainer.prediction_loop",parameters:[{name:"dataloader",val:": DataLoader"},{name:"description",val:": str"},{name:"prediction_loss_only",val:": typing.Optional[bool] = None"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'eval'"}],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/trainer.py#L2749"}}),Ma=new k({props:{name:"prediction_step",anchor:"transformers.Trainer.prediction_step",parameters:[{name:"model",val:": Module"},{name:"inputs",val:": typing.Dict[str, typing.Union[torch.Tensor, typing.Any]]"},{name:"prediction_loss_only",val:": bool"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"}],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/trainer.py#L2468",parametersDescription:[{anchor:"transformers.Trainer.prediction_step.model",description:`<strong>model</strong> (<code>nn.Module</code>) &#x2014;
The model to evaluate.`,name:"model"},{anchor:"transformers.Trainer.prediction_step.inputs",description:`<strong>inputs</strong> (<code>Dict[str, Union[torch.Tensor, Any]]</code>) &#x2014;
The inputs and targets of the model.</p>
<p>The dictionary will be unpacked before being fed to the model. Most models expect the targets under the
argument <code>labels</code>. Check your model&#x2019;s documentation for all accepted arguments.`,name:"inputs"},{anchor:"transformers.Trainer.prediction_step.prediction_loss_only",description:`<strong>prediction_loss_only</strong> (<code>bool</code>) &#x2014;
Whether or not to return the loss only.`,name:"prediction_loss_only"},{anchor:"transformers.Trainer.prediction_step.ignore_keys",description:`<strong>ignore_keys</strong> (<code>Lst[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions.`,name:"ignore_keys"}],returnDescription:`
<p>A tuple with the loss,
logits and labels (each being optional).</p>
`,returnType:`
<p>Tuple[Optional[torch.Tensor], Optional[torch.Tensor], Optional[torch.Tensor]]</p>
`}}),Ga=new k({props:{name:"push_to_hub",anchor:"transformers.Trainer.push_to_hub",parameters:[{name:"commit_message",val:": typing.Optional[str] = 'End of training'"},{name:"blocking",val:": bool = True"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/trainer.py#L2700",parametersDescription:[{anchor:"transformers.Trainer.push_to_hub.commit_message",description:`<strong>commit_message</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;End of training&quot;</code>) &#x2014;
Message to commit while pushing.`,name:"commit_message"},{anchor:"transformers.Trainer.push_to_hub.blocking",description:`<strong>blocking</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether the function should return only when the <code>git push</code> has finished.
kwargs &#x2014;
Additional keyword arguments passed along to <code>create_model_card()</code>.`,name:"blocking"}],returnDescription:`
<p>The url of the commit of your model in the given repository if <code>blocking=False</code>, a tuple with the url
of the commit and an object to track the progress of the commit if <code>blocking=True</code></p>
`}}),Ha=new k({props:{name:"remove_callback",anchor:"transformers.Trainer.remove_callback",parameters:[{name:"callback",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/trainer.py#L521",parametersDescription:[{anchor:"transformers.Trainer.remove_callback.callback",description:`<strong>callback</strong> (<code>type</code> or <code>TrainerCallback</code>) &#x2014;
A <code>TrainerCallback</code> class or an instance of a <code>TrainerCallback</code>.
In the first case, will remove the first member of that class found in the list of callbacks.`,name:"callback"}]}}),Va=new k({props:{name:"save_metrics",anchor:"transformers.trainer_pt_utils.save_metrics",parameters:[{name:"split",val:""},{name:"metrics",val:""},{name:"combined",val:" = True"}],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/trainer_pt_utils.py#L948",parametersDescription:[{anchor:"transformers.trainer_pt_utils.save_metrics.split",description:`<strong>split</strong> (<code>str</code>) &#x2014;
Mode/split name: one of <code>train</code>, <code>eval</code>, <code>test</code>, <code>all</code>`,name:"split"},{anchor:"transformers.trainer_pt_utils.save_metrics.metrics",description:`<strong>metrics</strong> (<code>Dict[str, float]</code>) &#x2014;
The metrics returned from train/evaluate/predict`,name:"metrics"},{anchor:"transformers.trainer_pt_utils.save_metrics.combined",description:`<strong>combined</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Creates combined metrics by updating <code>all_results.json</code> with metrics of this call`,name:"combined"}]}}),Ja=new k({props:{name:"save_model",anchor:"transformers.Trainer.save_model",parameters:[{name:"output_dir",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/trainer.py#L1956"}}),Ka=new k({props:{name:"save_state",anchor:"transformers.trainer_pt_utils.save_state",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/trainer_pt_utils.py#L986"}}),Qa=new k({props:{name:"train",anchor:"transformers.Trainer.train",parameters:[{name:"resume_from_checkpoint",val:": typing.Union[str, bool, NoneType] = None"},{name:"trial",val:": typing.Union[ForwardRef('optuna.Trial'), typing.Dict[str, typing.Any]] = None"},{name:"ignore_keys_for_eval",val:": typing.Optional[typing.List[str]] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/trainer.py#L1026",parametersDescription:[{anchor:"transformers.Trainer.train.resume_from_checkpoint",description:`<strong>resume_from_checkpoint</strong> (<code>str</code> or <code>bool</code>, <em>optional</em>) &#x2014;
If a <code>str</code>, local path to a saved checkpoint as saved by a previous instance of
<a href="/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer">Trainer</a>. If a <code>bool</code> and equals <em>True</em>, load the last checkpoint in
<em>args.output_dir</em> as saved by a previous instance of <a href="/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer">Trainer</a>. If present,
training will resume from the model/optimizer/scheduler states loaded here.`,name:"resume_from_checkpoint"},{anchor:"transformers.Trainer.train.trial",description:`<strong>trial</strong> (<code>optuna.Trial</code> or <code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The trial run or the hyperparameter dictionary for hyperparameter search.`,name:"trial"},{anchor:"transformers.Trainer.train.ignore_keys_for_eval",description:`<strong>ignore_keys_for_eval</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions for evaluation during the training.
kwargs &#x2014;
Additional keyword arguments used to hide deprecated arguments`,name:"ignore_keys_for_eval"}]}}),en=new k({props:{name:"training_step",anchor:"transformers.Trainer.training_step",parameters:[{name:"model",val:": Module"},{name:"inputs",val:": typing.Dict[str, typing.Union[torch.Tensor, typing.Any]]"}],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/trainer.py#L1864",parametersDescription:[{anchor:"transformers.Trainer.training_step.model",description:`<strong>model</strong> (<code>nn.Module</code>) &#x2014;
The model to train.`,name:"model"},{anchor:"transformers.Trainer.training_step.inputs",description:`<strong>inputs</strong> (<code>Dict[str, Union[torch.Tensor, Any]]</code>) &#x2014;
The inputs and targets of the model.</p>
<p>The dictionary will be unpacked before being fed to the model. Most models expect the targets under the
argument <code>labels</code>. Check your model&#x2019;s documentation for all accepted arguments.`,name:"inputs"}],returnDescription:`
<p>The tensor with training loss on this batch.</p>
`,returnType:`
<p><code>torch.Tensor</code></p>
`}}),tn=new ue({}),on=new k({props:{name:"evaluate",anchor:"transformers.Seq2SeqTrainer.evaluate",parameters:[{name:"eval_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'eval'"},{name:"max_length",val:": typing.Optional[int] = None"},{name:"num_beams",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/trainer_seq2seq.py#L31",parametersDescription:[{anchor:"transformers.Seq2SeqTrainer.evaluate.eval_dataset",description:`<strong>eval_dataset</strong> (<code>Dataset</code>, <em>optional</em>) &#x2014;
Pass a dataset if you wish to override <code>self.eval_dataset</code>. If it is an <code>datasets.Dataset</code>,
columns not accepted by the <code>model.forward()</code> method are automatically removed. It must implement the
<code>__len__</code> method.`,name:"eval_dataset"},{anchor:"transformers.Seq2SeqTrainer.evaluate.ignore_keys",description:`<strong>ignore_keys</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions.`,name:"ignore_keys"},{anchor:"transformers.Seq2SeqTrainer.evaluate.metric_key_prefix",description:`<strong>metric_key_prefix</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;eval&quot;</code>) &#x2014;
An optional prefix to be used as the metrics key prefix. For example the metrics &#x201C;bleu&#x201D; will be named
&#x201C;eval_bleu&#x201D; if the prefix is <code>&quot;eval&quot;</code> (default)`,name:"metric_key_prefix"},{anchor:"transformers.Seq2SeqTrainer.evaluate.max_length",description:`<strong>max_length</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The maximum target length to use when predicting with the generate method.`,name:"max_length"},{anchor:"transformers.Seq2SeqTrainer.evaluate.num_beams",description:`<strong>num_beams</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of beams for beam search that will be used when predicting with the generate method. 1 means no
beam search.`,name:"num_beams"}],returnDescription:`
<p>A dictionary containing the evaluation loss and the potential metrics computed from the predictions. The
dictionary also contains the epoch number which comes from the training state.</p>
`}}),an=new k({props:{name:"predict",anchor:"transformers.Seq2SeqTrainer.predict",parameters:[{name:"test_dataset",val:": Dataset"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'eval'"},{name:"max_length",val:": typing.Optional[int] = None"},{name:"num_beams",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/trainer_seq2seq.py#L72",parametersDescription:[{anchor:"transformers.Seq2SeqTrainer.predict.test_dataset",description:`<strong>test_dataset</strong> (<code>Dataset</code>) &#x2014;
Dataset to run the predictions on. If it is an <code>datasets.Dataset</code>, columns not accepted by the
<code>model.forward()</code> method are automatically removed. Has to implement the method <code>__len__</code>`,name:"test_dataset"},{anchor:"transformers.Seq2SeqTrainer.predict.ignore_keys",description:`<strong>ignore_keys</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions.`,name:"ignore_keys"},{anchor:"transformers.Seq2SeqTrainer.predict.metric_key_prefix",description:`<strong>metric_key_prefix</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;eval&quot;</code>) &#x2014;
An optional prefix to be used as the metrics key prefix. For example the metrics &#x201C;bleu&#x201D; will be named
&#x201C;eval_bleu&#x201D; if the prefix is <code>&quot;eval&quot;</code> (default)`,name:"metric_key_prefix"},{anchor:"transformers.Seq2SeqTrainer.predict.max_length",description:`<strong>max_length</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The maximum target length to use when predicting with the generate method.`,name:"max_length"},{anchor:"transformers.Seq2SeqTrainer.predict.num_beams",description:`<strong>num_beams</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of beams for beam search that will be used when predicting with the generate method. 1 means no
beam search.`,name:"num_beams"}]}}),Ko=new Rv({props:{$$slots:{default:[nI]},$$scope:{ctx:Ye}}}),ln=new ue({}),dn=new k({props:{name:"class transformers.TrainingArguments",anchor:"transformers.TrainingArguments",parameters:[{name:"output_dir",val:": str"},{name:"overwrite_output_dir",val:": bool = False"},{name:"do_train",val:": bool = False"},{name:"do_eval",val:": bool = False"},{name:"do_predict",val:": bool = False"},{name:"evaluation_strategy",val:": IntervalStrategy = 'no'"},{name:"prediction_loss_only",val:": bool = False"},{name:"per_device_train_batch_size",val:": int = 8"},{name:"per_device_eval_batch_size",val:": int = 8"},{name:"per_gpu_train_batch_size",val:": typing.Optional[int] = None"},{name:"per_gpu_eval_batch_size",val:": typing.Optional[int] = None"},{name:"gradient_accumulation_steps",val:": int = 1"},{name:"eval_accumulation_steps",val:": typing.Optional[int] = None"},{name:"learning_rate",val:": float = 5e-05"},{name:"weight_decay",val:": float = 0.0"},{name:"adam_beta1",val:": float = 0.9"},{name:"adam_beta2",val:": float = 0.999"},{name:"adam_epsilon",val:": float = 1e-08"},{name:"max_grad_norm",val:": float = 1.0"},{name:"num_train_epochs",val:": float = 3.0"},{name:"max_steps",val:": int = -1"},{name:"lr_scheduler_type",val:": SchedulerType = 'linear'"},{name:"warmup_ratio",val:": float = 0.0"},{name:"warmup_steps",val:": int = 0"},{name:"log_level",val:": typing.Optional[str] = 'passive'"},{name:"log_level_replica",val:": typing.Optional[str] = 'passive'"},{name:"log_on_each_node",val:": bool = True"},{name:"logging_dir",val:": typing.Optional[str] = None"},{name:"logging_strategy",val:": IntervalStrategy = 'steps'"},{name:"logging_first_step",val:": bool = False"},{name:"logging_steps",val:": int = 500"},{name:"logging_nan_inf_filter",val:": str = True"},{name:"save_strategy",val:": IntervalStrategy = 'steps'"},{name:"save_steps",val:": int = 500"},{name:"save_total_limit",val:": typing.Optional[int] = None"},{name:"save_on_each_node",val:": bool = False"},{name:"no_cuda",val:": bool = False"},{name:"seed",val:": int = 42"},{name:"bf16",val:": bool = False"},{name:"fp16",val:": bool = False"},{name:"fp16_opt_level",val:": str = 'O1'"},{name:"half_precision_backend",val:": str = 'auto'"},{name:"bf16_full_eval",val:": bool = False"},{name:"fp16_full_eval",val:": bool = False"},{name:"tf32",val:": bool = None"},{name:"local_rank",val:": int = -1"},{name:"xpu_backend",val:": str = None"},{name:"tpu_num_cores",val:": typing.Optional[int] = None"},{name:"tpu_metrics_debug",val:": bool = False"},{name:"debug",val:": str = ''"},{name:"dataloader_drop_last",val:": bool = False"},{name:"eval_steps",val:": int = None"},{name:"dataloader_num_workers",val:": int = 0"},{name:"past_index",val:": int = -1"},{name:"run_name",val:": typing.Optional[str] = None"},{name:"disable_tqdm",val:": typing.Optional[bool] = None"},{name:"remove_unused_columns",val:": typing.Optional[bool] = True"},{name:"label_names",val:": typing.Optional[typing.List[str]] = None"},{name:"load_best_model_at_end",val:": typing.Optional[bool] = False"},{name:"metric_for_best_model",val:": typing.Optional[str] = None"},{name:"greater_is_better",val:": typing.Optional[bool] = None"},{name:"ignore_data_skip",val:": bool = False"},{name:"sharded_ddp",val:": str = ''"},{name:"deepspeed",val:": typing.Optional[str] = None"},{name:"label_smoothing_factor",val:": float = 0.0"},{name:"adafactor",val:": bool = False"},{name:"group_by_length",val:": bool = False"},{name:"length_column_name",val:": typing.Optional[str] = 'length'"},{name:"report_to",val:": typing.Optional[typing.List[str]] = None"},{name:"ddp_find_unused_parameters",val:": typing.Optional[bool] = None"},{name:"ddp_bucket_cap_mb",val:": typing.Optional[int] = None"},{name:"dataloader_pin_memory",val:": bool = True"},{name:"skip_memory_metrics",val:": bool = True"},{name:"use_legacy_prediction_loop",val:": bool = False"},{name:"push_to_hub",val:": bool = False"},{name:"resume_from_checkpoint",val:": typing.Optional[str] = None"},{name:"hub_model_id",val:": str = None"},{name:"hub_strategy",val:": HubStrategy = 'every_save'"},{name:"hub_token",val:": str = None"},{name:"gradient_checkpointing",val:": bool = False"},{name:"fp16_backend",val:": str = 'auto'"},{name:"push_to_hub_model_id",val:": str = None"},{name:"push_to_hub_organization",val:": str = None"},{name:"push_to_hub_token",val:": str = None"},{name:"mp_parameters",val:": str = ''"}],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/training_args.py#L73",parametersDescription:[{anchor:"transformers.TrainingArguments.output_dir",description:`<strong>output_dir</strong> (<code>str</code>) &#x2014;
The output directory where the model predictions and checkpoints will be written.`,name:"output_dir"},{anchor:"transformers.TrainingArguments.overwrite_output_dir",description:`<strong>overwrite_output_dir</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, overwrite the content of the output directory. Use this to continue training if
<code>output_dir</code> points to a checkpoint directory.`,name:"overwrite_output_dir"},{anchor:"transformers.TrainingArguments.do_train",description:`<strong>do_train</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to run training or not. This argument is not directly used by <a href="/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s
intended to be used by your training/evaluation scripts instead. See the <a href="https://github.com/huggingface/transformers/tree/master/examples" rel="nofollow">example scripts</a> for more details.`,name:"do_train"},{anchor:"transformers.TrainingArguments.do_eval",description:`<strong>do_eval</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to run evaluation on the validation set or not. Will be set to <code>True</code> if
<code>evaluation_strategy</code> is different from <code>&quot;no&quot;</code>. This argument is not directly used by
<a href="/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s intended to be used by your training/evaluation scripts instead. See
the <a href="https://github.com/huggingface/transformers/tree/master/examples" rel="nofollow">example scripts</a> for more
details.`,name:"do_eval"},{anchor:"transformers.TrainingArguments.do_predict",description:`<strong>do_predict</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to run predictions on the test set or not. This argument is not directly used by
<a href="/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s intended to be used by your training/evaluation scripts instead. See
the <a href="https://github.com/huggingface/transformers/tree/master/examples" rel="nofollow">example scripts</a> for more
details.`,name:"do_predict"},{anchor:"transformers.TrainingArguments.evaluation_strategy",description:`<strong>evaluation_strategy</strong> (<code>str</code> or <a href="/docs/transformers/v4.15.0/en/internal/trainer_utils#transformers.IntervalStrategy">IntervalStrategy</a>, <em>optional</em>, defaults to <code>&quot;no&quot;</code>) &#x2014;
The evaluation strategy to adopt during training. Possible values are:</p>
<ul>
<li><code>&quot;no&quot;</code>: No evaluation is done during training.</li>
<li><code>&quot;steps&quot;</code>: Evaluation is done (and logged) every <code>eval_steps</code>.</li>
<li><code>&quot;epoch&quot;</code>: Evaluation is done at the end of each epoch.</li>
</ul>`,name:"evaluation_strategy"},{anchor:"transformers.TrainingArguments.prediction_loss_only",description:`<strong>prediction_loss_only</strong> (<code>bool</code>, <em>optional</em>, defaults to <em>False</em>) &#x2014;
When performing evaluation and generating predictions, only returns the loss.`,name:"prediction_loss_only"},{anchor:"transformers.TrainingArguments.per_device_train_batch_size",description:`<strong>per_device_train_batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
The batch size per GPU/TPU core/CPU for training.`,name:"per_device_train_batch_size"},{anchor:"transformers.TrainingArguments.per_device_eval_batch_size",description:`<strong>per_device_eval_batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
The batch size per GPU/TPU core/CPU for evaluation.`,name:"per_device_eval_batch_size"},{anchor:"transformers.TrainingArguments.gradient_accumulation_steps",description:`<strong>gradient_accumulation_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Number of updates steps to accumulate the gradients for, before performing a backward/update pass.</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>When using gradient accumulation, one step is counted as one step with backward pass. Therefore,
logging, evaluation, save will be conducted every <code>gradient_accumulation_steps * xxx_step</code> training
examples.</p>

					</div>`,name:"gradient_accumulation_steps"},{anchor:"transformers.TrainingArguments.eval_accumulation_steps",description:`<strong>eval_accumulation_steps</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of predictions steps to accumulate the output tensors for, before moving the results to the CPU. If
left unset, the whole predictions are accumulated on GPU/TPU before being moved to the CPU (faster but
requires more memory).`,name:"eval_accumulation_steps"},{anchor:"transformers.TrainingArguments.learning_rate",description:`<strong>learning_rate</strong> (<code>float</code>, <em>optional</em>, defaults to 5e-5) &#x2014;
The initial learning rate for <a href="/docs/transformers/v4.15.0/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> optimizer.`,name:"learning_rate"},{anchor:"transformers.TrainingArguments.weight_decay",description:`<strong>weight_decay</strong> (<code>float</code>, <em>optional</em>, defaults to 0) &#x2014;
The weight decay to apply (if not zero) to all layers except all bias and LayerNorm weights in
<a href="/docs/transformers/v4.15.0/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> optimizer.`,name:"weight_decay"},{anchor:"transformers.TrainingArguments.adam_beta1",description:`<strong>adam_beta1</strong> (<code>float</code>, <em>optional</em>, defaults to 0.9) &#x2014;
The beta1 hyperparameter for the <a href="/docs/transformers/v4.15.0/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> optimizer.`,name:"adam_beta1"},{anchor:"transformers.TrainingArguments.adam_beta2",description:`<strong>adam_beta2</strong> (<code>float</code>, <em>optional</em>, defaults to 0.999) &#x2014;
The beta2 hyperparameter for the <a href="/docs/transformers/v4.15.0/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> optimizer.`,name:"adam_beta2"},{anchor:"transformers.TrainingArguments.adam_epsilon",description:`<strong>adam_epsilon</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-8) &#x2014;
The epsilon hyperparameter for the <a href="/docs/transformers/v4.15.0/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> optimizer.`,name:"adam_epsilon"},{anchor:"transformers.TrainingArguments.max_grad_norm",description:`<strong>max_grad_norm</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Maximum gradient norm (for gradient clipping).`,name:"max_grad_norm"},{anchor:"transformers.TrainingArguments.num_train_epochs(float,",description:`<strong>num_train_epochs(<code>float</code>,</strong> <em>optional</em>, defaults to 3.0) &#x2014;
Total number of training epochs to perform (if not an integer, will perform the decimal part percents of
the last epoch before stopping training).`,name:"num_train_epochs(float,"},{anchor:"transformers.TrainingArguments.max_steps",description:`<strong>max_steps</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
If set to a positive number, the total number of training steps to perform. Overrides
<code>num_train_epochs</code>. In case of using a finite iterable dataset the training may stop before reaching
the set number of steps when all data is exhausted`,name:"max_steps"},{anchor:"transformers.TrainingArguments.lr_scheduler_type",description:`<strong>lr_scheduler_type</strong> (<code>str</code> or <a href="/docs/transformers/v4.15.0/en/main_classes/optimizer_schedules#transformers.SchedulerType">SchedulerType</a>, <em>optional</em>, defaults to <code>&quot;linear&quot;</code>) &#x2014;
The scheduler type to use. See the documentation of <a href="/docs/transformers/v4.15.0/en/main_classes/optimizer_schedules#transformers.SchedulerType">SchedulerType</a> for all possible
values.`,name:"lr_scheduler_type"},{anchor:"transformers.TrainingArguments.warmup_ratio",description:`<strong>warmup_ratio</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
Ratio of total training steps used for a linear warmup from 0 to <code>learning_rate</code>.`,name:"warmup_ratio"},{anchor:"transformers.TrainingArguments.warmup_steps",description:`<strong>warmup_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
Number of steps used for a linear warmup from 0 to <code>learning_rate</code>. Overrides any effect of
<code>warmup_ratio</code>.`,name:"warmup_steps"},{anchor:"transformers.TrainingArguments.log_level",description:`<strong>log_level</strong> (<code>str</code>, <em>optional</em>, defaults to <code>passive</code>) &#x2014;
Logger log level to use on the main process. Possible choices are the log levels as strings: &#x2018;debug&#x2019;,
&#x2018;info&#x2019;, &#x2018;warning&#x2019;, &#x2018;error&#x2019; and &#x2018;critical&#x2019;, plus a &#x2018;passive&#x2019; level which doesn&#x2019;t set anything and lets the
application set the level.`,name:"log_level"},{anchor:"transformers.TrainingArguments.log_level_replica",description:`<strong>log_level_replica</strong> (<code>str</code>, <em>optional</em>, defaults to <code>passive</code>) &#x2014;
Logger log level to use on replicas. Same choices as <code>log_level</code>&#x201D;`,name:"log_level_replica"},{anchor:"transformers.TrainingArguments.log_on_each_node",description:`<strong>log_on_each_node</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
In multinode distributed training, whether to log using <code>log_level</code> once per node, or only on the main
node.`,name:"log_on_each_node"},{anchor:"transformers.TrainingArguments.logging_dir",description:`<strong>logging_dir</strong> (<code>str</code>, <em>optional</em>) &#x2014;
<a href="https://www.tensorflow.org/tensorboard" rel="nofollow">TensorBoard</a> log directory. Will default to
*output_dir/runs/<strong>CURRENT_DATETIME_HOSTNAME*</strong>.`,name:"logging_dir"},{anchor:"transformers.TrainingArguments.logging_strategy",description:`<strong>logging_strategy</strong> (<code>str</code> or <a href="/docs/transformers/v4.15.0/en/internal/trainer_utils#transformers.IntervalStrategy">IntervalStrategy</a>, <em>optional</em>, defaults to <code>&quot;steps&quot;</code>) &#x2014;
The logging strategy to adopt during training. Possible values are:</p>
<ul>
<li><code>&quot;no&quot;</code>: No logging is done during training.</li>
<li><code>&quot;epoch&quot;</code>: Logging is done at the end of each epoch.</li>
<li><code>&quot;steps&quot;</code>: Logging is done every <code>logging_steps</code>.</li>
</ul>`,name:"logging_strategy"},{anchor:"transformers.TrainingArguments.logging_first_step",description:`<strong>logging_first_step</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to log and evaluate the first <code>global_step</code> or not.`,name:"logging_first_step"},{anchor:"transformers.TrainingArguments.logging_steps",description:`<strong>logging_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 500) &#x2014;
Number of update steps between two logs if <code>logging_strategy=&quot;steps&quot;</code>.`,name:"logging_steps"},{anchor:"transformers.TrainingArguments.logging_nan_inf_filter",description:`<strong>logging_nan_inf_filter</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to filter <code>nan</code> and <code>inf</code> losses for logging. If set to obj:<em>True</em> the loss of every step
that is <code>nan</code> or <code>inf</code> is filtered and the average loss of the current logging window is taken
instead.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p><code>logging_nan_inf_filter</code> only influences the logging of loss values, it does not change the
behavior the gradient is computed or applied to the model.</p>

					</div>`,name:"logging_nan_inf_filter"},{anchor:"transformers.TrainingArguments.save_strategy",description:`<strong>save_strategy</strong> (<code>str</code> or <a href="/docs/transformers/v4.15.0/en/internal/trainer_utils#transformers.IntervalStrategy">IntervalStrategy</a>, <em>optional</em>, defaults to <code>&quot;steps&quot;</code>) &#x2014;
The checkpoint save strategy to adopt during training. Possible values are:</p>
<ul>
<li><code>&quot;no&quot;</code>: No save is done during training.</li>
<li><code>&quot;epoch&quot;</code>: Save is done at the end of each epoch.</li>
<li><code>&quot;steps&quot;</code>: Save is done every <code>save_steps</code>.</li>
</ul>`,name:"save_strategy"},{anchor:"transformers.TrainingArguments.save_steps",description:`<strong>save_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 500) &#x2014;
Number of updates steps before two checkpoint saves if <code>save_strategy=&quot;steps&quot;</code>.`,name:"save_steps"},{anchor:"transformers.TrainingArguments.save_total_limit",description:`<strong>save_total_limit</strong> (<code>int</code>, <em>optional</em>) &#x2014;
If a value is passed, will limit the total amount of checkpoints. Deletes the older checkpoints in
<code>output_dir</code>.`,name:"save_total_limit"},{anchor:"transformers.TrainingArguments.save_on_each_node",description:`<strong>save_on_each_node</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
When doing multi-node distributed training, whether to save models and checkpoints on each node, or only on
the main one.</p>
<p>This should not be activated when the different nodes use the same storage as the files will be saved with
the same names for each node.`,name:"save_on_each_node"},{anchor:"transformers.TrainingArguments.no_cuda",description:`<strong>no_cuda</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to not use CUDA even when it is available or not.`,name:"no_cuda"},{anchor:"transformers.TrainingArguments.seed",description:`<strong>seed</strong> (<code>int</code>, <em>optional</em>, defaults to 42) &#x2014;
Random seed that will be set at the beginning of training. To ensure reproducibility across runs, use the
<code>model_init</code> function to instantiate the model if it has some randomly
initialized parameters.`,name:"seed"},{anchor:"transformers.TrainingArguments.bf16",description:`<strong>bf16</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use bf16 16-bit (mixed) precision training instead of 32-bit training. Requires Ampere or higher
NVIDIA architecture. This is an experimental API and it may change.`,name:"bf16"},{anchor:"transformers.TrainingArguments.fp16",description:`<strong>fp16</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use fp16 16-bit (mixed) precision training instead of 32-bit training.`,name:"fp16"},{anchor:"transformers.TrainingArguments.fp16_opt_level",description:`<strong>fp16_opt_level</strong> (<code>str</code>, <em>optional</em>, defaults to &#x2018;O1&#x2019;) &#x2014;
For <code>fp16</code> training, Apex AMP optimization level selected in [&#x2018;O0&#x2019;, &#x2018;O1&#x2019;, &#x2018;O2&#x2019;, and &#x2018;O3&#x2019;]. See details
on the <a href="https://nvidia.github.io/apex/amp" rel="nofollow">Apex documentation</a>.`,name:"fp16_opt_level"},{anchor:"transformers.TrainingArguments.fp16_backend",description:`<strong>fp16_backend</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;auto&quot;</code>) &#x2014;
This argument is deprecated. Use <code>half_precision_backend</code> instead.`,name:"fp16_backend"},{anchor:"transformers.TrainingArguments.half_precision_backend",description:`<strong>half_precision_backend</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;auto&quot;</code>) &#x2014;
The backend to use for mixed precision training. Must be one of <code>&quot;auto&quot;</code>, <code>&quot;amp&quot;</code> or
<code>&quot;apex&quot;</code>. <code>&quot;auto&quot;</code> will use AMP or APEX depending on the PyTorch version detected, while the
other choices will force the requested backend.`,name:"half_precision_backend"},{anchor:"transformers.TrainingArguments.bf16_full_eval",description:`<strong>bf16_full_eval</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use full bfloat16 evaluation instead of 32-bit. This will be faster and save memory but can harm
metric values. This is an experimental API and it may change.`,name:"bf16_full_eval"},{anchor:"transformers.TrainingArguments.fp16_full_eval",description:`<strong>fp16_full_eval</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use full float16 evaluation instead of 32-bit. This will be faster and save memory but can harm
metric values.`,name:"fp16_full_eval"},{anchor:"transformers.TrainingArguments.tf32",description:`<strong>tf32</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to enable tf32 mode, available in Ampere and newer GPU architectures. This is an experimental API
and it may change.`,name:"tf32"},{anchor:"transformers.TrainingArguments.local_rank",description:`<strong>local_rank</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Rank of the process during distributed training.`,name:"local_rank"},{anchor:"transformers.TrainingArguments.xpu_backend",description:`<strong>xpu_backend</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The backend to use for xpu distributed training. Must be one of <code>&quot;mpi&quot;</code> or <code>&quot;ccl&quot;</code>.`,name:"xpu_backend"},{anchor:"transformers.TrainingArguments.tpu_num_cores",description:`<strong>tpu_num_cores</strong> (<code>int</code>, <em>optional</em>) &#x2014;
When training on TPU, the number of TPU cores (automatically passed by launcher script).`,name:"tpu_num_cores"},{anchor:"transformers.TrainingArguments.dataloader_drop_last",description:`<strong>dataloader_drop_last</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to drop the last incomplete batch (if the length of the dataset is not divisible by the batch size)
or not.`,name:"dataloader_drop_last"},{anchor:"transformers.TrainingArguments.eval_steps",description:`<strong>eval_steps</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of update steps between two evaluations if <code>evaluation_strategy=&quot;steps&quot;</code>. Will default to the
same value as <code>logging_steps</code> if not set.`,name:"eval_steps"},{anchor:"transformers.TrainingArguments.dataloader_num_workers",description:`<strong>dataloader_num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
Number of subprocesses to use for data loading (PyTorch only). 0 means that the data will be loaded in the
main process.`,name:"dataloader_num_workers"},{anchor:"transformers.TrainingArguments.past_index",description:`<strong>past_index</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Some models like <a href="../model_doc/transformerxl">TransformerXL</a> or <a href="../model_doc/xlnet">XLNet</a> can
make use of the past hidden states for their predictions. If this argument is set to a positive int, the
<code>Trainer</code> will use the corresponding output (usually index 2) as the past state and feed it to the model
at the next training step under the keyword argument <code>mems</code>.`,name:"past_index"},{anchor:"transformers.TrainingArguments.run_name",description:`<strong>run_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
A descriptor for the run. Typically used for <a href="https://www.wandb.com/" rel="nofollow">wandb</a> logging.`,name:"run_name"},{anchor:"transformers.TrainingArguments.disable_tqdm",description:`<strong>disable_tqdm</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to disable the tqdm progress bars and table of metrics produced by
<code>NotebookTrainingTracker</code> in Jupyter Notebooks. Will default to <code>True</code>
if the logging level is set to warn or lower (default), <code>False</code> otherwise.`,name:"disable_tqdm"},{anchor:"transformers.TrainingArguments.remove_unused_columns",description:`<strong>remove_unused_columns</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
If using <code>datasets.Dataset</code> datasets, whether or not to automatically remove the columns unused by the
model forward method.</p>
<p>(Note that this behavior is not implemented for <code>TFTrainer</code> yet.)`,name:"remove_unused_columns"},{anchor:"transformers.TrainingArguments.label_names",description:`<strong>label_names</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
The list of keys in your dictionary of inputs that correspond to the labels.</p>
<p>Will eventually default to <code>[&quot;labels&quot;]</code> except if the model used is one of the
<code>XxxForQuestionAnswering</code> in which case it will default to <code>[&quot;start_positions&quot;, &quot;end_positions&quot;]</code>.`,name:"label_names"},{anchor:"transformers.TrainingArguments.load_best_model_at_end",description:`<strong>load_best_model_at_end</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to load the best model found during training at the end of training.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When set to <code>True</code>, the parameters <code>save_strategy</code> needs to be the same as
<code>eval_strategy</code>, and in the case it is &#x201C;steps&#x201D;, <code>save_steps</code> must be a round multiple of
<code>eval_steps</code>.</p>

					</div>`,name:"load_best_model_at_end"},{anchor:"transformers.TrainingArguments.metric_for_best_model",description:`<strong>metric_for_best_model</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Use in conjunction with <code>load_best_model_at_end</code> to specify the metric to use to compare two different
models. Must be the name of a metric returned by the evaluation with or without the prefix <code>&quot;eval_&quot;</code>.
Will default to <code>&quot;loss&quot;</code> if unspecified and <code>load_best_model_at_end=True</code> (to use the evaluation
loss).</p>
<p>If you set this value, <code>greater_is_better</code> will default to <code>True</code>. Don&#x2019;t forget to set it to
<code>False</code> if your metric is better when lower.`,name:"metric_for_best_model"},{anchor:"transformers.TrainingArguments.greater_is_better",description:`<strong>greater_is_better</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Use in conjunction with <code>load_best_model_at_end</code> and <code>metric_for_best_model</code> to specify if better
models should have a greater metric or not. Will default to:</p>
<ul>
<li><code>True</code> if <code>metric_for_best_model</code> is set to a value that isn&#x2019;t <code>&quot;loss&quot;</code> or
<code>&quot;eval_loss&quot;</code>.</li>
<li><code>False</code> if <code>metric_for_best_model</code> is not set, or set to <code>&quot;loss&quot;</code> or <code>&quot;eval_loss&quot;</code>.</li>
</ul>`,name:"greater_is_better"},{anchor:"transformers.TrainingArguments.ignore_data_skip",description:`<strong>ignore_data_skip</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
When resuming training, whether or not to skip the epochs and batches to get the data loading at the same
stage as in the previous training. If set to <code>True</code>, the training will begin faster (as that skipping
step can take a long time) but will not yield the same results as the interrupted training would have.`,name:"ignore_data_skip"},{anchor:"transformers.TrainingArguments.sharded_ddp",description:`<strong>sharded_ddp</strong> (<code>bool</code>, <code>str</code> or list of <code>ShardedDDPOption</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Use Sharded DDP training from <a href="https://github.com/facebookresearch/fairscale" rel="nofollow">FairScale</a> (in distributed
training only). This is an experimental feature.</p>
<p>A list of options along the following:</p>
<ul>
<li><code>&quot;simple&quot;</code>: to use first instance of sharded DDP released by fairscale (<code>ShardedDDP</code>) similar
to ZeRO-2.</li>
<li><code>&quot;zero_dp_2&quot;</code>: to use the second instance of sharded DPP released by fairscale
(<code>FullyShardedDDP</code>) in Zero-2 mode (with <code>reshard_after_forward=False</code>).</li>
<li><code>&quot;zero_dp_3&quot;</code>: to use the second instance of sharded DPP released by fairscale
(<code>FullyShardedDDP</code>) in Zero-3 mode (with <code>reshard_after_forward=True</code>).</li>
<li><code>&quot;offload&quot;</code>: to add ZeRO-offload (only compatible with <code>&quot;zero_dp_2&quot;</code> and <code>&quot;zero_dp_3&quot;</code>).</li>
</ul>
<p>If a string is passed, it will be split on space. If a bool is passed, it will be converted to an empty
list for <code>False</code> and <code>[&quot;simple&quot;]</code> for <code>True</code>.`,name:"sharded_ddp"},{anchor:"transformers.TrainingArguments.deepspeed",description:`<strong>deepspeed</strong> (<code>str</code> or <code>dict</code>, <em>optional</em>) &#x2014;
Use <a href="https://github.com/microsoft/deepspeed" rel="nofollow">Deepspeed</a>. This is an experimental feature and its API may
evolve in the future. The value is either the location of DeepSpeed json config file (e.g.,
<code>ds_config.json</code>) or an already loaded json file as a <code>dict</code>&#x201D;`,name:"deepspeed"},{anchor:"transformers.TrainingArguments.label_smoothing_factor",description:`<strong>label_smoothing_factor</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The label smoothing factor to use. Zero means no label smoothing, otherwise the underlying onehot-encoded
labels are changed from 0s and 1s to <code>label_smoothing_factor/num_labels</code> and <code>1 - label_smoothing_factor + label_smoothing_factor/num_labels</code> respectively.`,name:"label_smoothing_factor"},{anchor:"transformers.TrainingArguments.debug",description:`<strong>debug</strong> (<code>str</code> or list of <code>DebugOption</code>, <em>optional</em>, defaults to <code>&quot;&quot;</code>) &#x2014;
Enable one or more debug features. This is an experimental feature.</p>
<p>Possible options are:</p>
<ul>
<li><code>&quot;underflow_overflow&quot;</code>: detects overflow in model&#x2019;s input/outputs and reports the last frames that
led to the event</li>
<li><code>&quot;tpu_metrics_debug&quot;</code>: print debug metrics on TPU</li>
</ul>
<p>The options should be separated by whitespaces.`,name:"debug"},{anchor:"transformers.TrainingArguments.adafactor",description:`<strong>adafactor</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to use the <a href="/docs/transformers/v4.15.0/en/main_classes/optimizer_schedules#transformers.Adafactor">Adafactor</a> optimizer instead of
<a href="/docs/transformers/v4.15.0/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a>.`,name:"adafactor"},{anchor:"transformers.TrainingArguments.group_by_length",description:`<strong>group_by_length</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to group together samples of roughly the same length in the training dataset (to minimize
padding applied and be more efficient). Only useful if applying dynamic padding.`,name:"group_by_length"},{anchor:"transformers.TrainingArguments.length_column_name",description:`<strong>length_column_name</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;length&quot;</code>) &#x2014;
Column name for precomputed lengths. If the column exists, grouping by length will use these values rather
than computing them on train startup. Ignored unless <code>group_by_length</code> is <code>True</code> and the dataset
is an instance of <code>Dataset</code>.`,name:"length_column_name"},{anchor:"transformers.TrainingArguments.report_to",description:`<strong>report_to</strong> (<code>str</code> or <code>List[str]</code>, <em>optional</em>, defaults to <code>&quot;all&quot;</code>) &#x2014;
The list of integrations to report the results and logs to. Supported platforms are <code>&quot;azure_ml&quot;</code>,
<code>&quot;comet_ml&quot;</code>, <code>&quot;mlflow&quot;</code>, <code>&quot;tensorboard&quot;</code> and <code>&quot;wandb&quot;</code>. Use <code>&quot;all&quot;</code> to report to
all integrations installed, <code>&quot;none&quot;</code> for no integrations.`,name:"report_to"},{anchor:"transformers.TrainingArguments.ddp_find_unused_parameters",description:`<strong>ddp_find_unused_parameters</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
When using distributed training, the value of the flag <code>find_unused_parameters</code> passed to
<code>DistributedDataParallel</code>. Will default to <code>False</code> if gradient checkpointing is used, <code>True</code>
otherwise.`,name:"ddp_find_unused_parameters"},{anchor:"transformers.TrainingArguments.ddp_bucket_cap_mb",description:`<strong>ddp_bucket_cap_mb</strong> (<code>int</code>, <em>optional</em>) &#x2014;
When using distributed training, the value of the flag <code>bucket_cap_mb</code> passed to
<code>DistributedDataParallel</code>.`,name:"ddp_bucket_cap_mb"},{anchor:"transformers.TrainingArguments.dataloader_pin_memory",description:`<strong>dataloader_pin_memory</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether you want to pin memory in data loaders or not. Will default to <code>True</code>.`,name:"dataloader_pin_memory"},{anchor:"transformers.TrainingArguments.skip_memory_metrics",description:`<strong>skip_memory_metrics</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to skip adding of memory profiler reports to metrics. This is skipped by default because it slows
down the training and evaluation speed.`,name:"skip_memory_metrics"},{anchor:"transformers.TrainingArguments.push_to_hub",description:`<strong>push_to_hub</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to upload the trained model to the hub after training. If this is activated, and
<code>output_dir</code> exists, it needs to be a local clone of the repository to which the
<a href="/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer">Trainer</a> will be pushed.`,name:"push_to_hub"},{anchor:"transformers.TrainingArguments.resume_from_checkpoint",description:`<strong>resume_from_checkpoint</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The path to a folder with a valid checkpoint for your model. This argument is not directly used by
<a href="/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s intended to be used by your training/evaluation scripts instead. See
the <a href="https://github.com/huggingface/transformers/tree/master/examples" rel="nofollow">example scripts</a> for more
details.`,name:"resume_from_checkpoint"},{anchor:"transformers.TrainingArguments.hub_model_id",description:`<strong>hub_model_id</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The name of the repository to keep in sync with the local <em>output_dir</em>. It can be a simple model ID in
which case the model will be pushed in your namespace. Otherwise it should be the whole repository name,
for instance <code>&quot;user_name/model&quot;</code>, which allows you to push to an organization you are a member of with
<code>&quot;organization_name/model&quot;</code>. Will default to <code>user_name/output_dir_name</code> with <em>output_dir_name</em>
being the name of <code>output_dir</code>.</p>
<p>Will default to to the name of <code>output_dir</code>.`,name:"hub_model_id"},{anchor:"transformers.TrainingArguments.hub_strategy",description:`<strong>hub_strategy</strong> (<code>str</code> or <code>HubStrategy</code>, <em>optional</em>, defaults to <code>&quot;every_save&quot;</code>) &#x2014;
Defines the scope of what is pushed to the Hub and when. Possible values are:</p>
<ul>
<li><code>&quot;end&quot;</code>: push the model, its configuration, the tokenizer (if passed along to the
<a href="/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer">Trainer</a>) and a draft of a model card at the end of training.</li>
<li><code>&quot;every_save&quot;</code>: push the model, its configuration, the tokenizer (if passed along to the
<a href="/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer">Trainer</a>) and a draft of a model card each time there is a model save. The pushes
are asynchronous to not block training, and in case the save are very frequent, a new push is only
attempted if the previous one is finished. A last push is made with the final model at the end of
training.</li>
<li><code>&quot;checkpoint&quot;</code>: like <code>&quot;every_save&quot;</code> but the latest checkpoint is also pushed in a subfolder
named last-checkpoint, allowing you to resume training easily with
<code>trainer.train(resume_from_checkpoint=&quot;last-checkpoint&quot;)</code>.</li>
<li><code>&quot;all_checkpoints&quot;</code>: like <code>&quot;checkpoint&quot;</code> but all checkpoints are pushed like they appear in the
output folder (so you will get one checkpoint folder per folder in your final repository)</li>
</ul>`,name:"hub_strategy"},{anchor:"transformers.TrainingArguments.hub_token",description:`<strong>hub_token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The token to use to push the model to the Hub. Will default to the token in the cache folder obtained with
<code>huggingface-cli login</code>.`,name:"hub_token"},{anchor:"transformers.TrainingArguments.gradient_checkpointing",description:`<strong>gradient_checkpointing</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If True, use gradient checkpointing to save memory at the expense of slower backward pass.`,name:"gradient_checkpointing"}]}}),pn=new k({props:{name:"get_process_log_level",anchor:"transformers.TrainingArguments.get_process_log_level",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/training_args.py#L1168"}}),un=new k({props:{name:"get_warmup_steps",anchor:"transformers.TrainingArguments.get_warmup_steps",parameters:[{name:"num_training_steps",val:": int"}],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/training_args.py#L1253"}}),fn=new k({props:{name:"main_process_first",anchor:"transformers.TrainingArguments.main_process_first",parameters:[{name:"local",val:" = True"},{name:"desc",val:" = 'work'"}],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/training_args.py#L1200",parametersDescription:[{anchor:"transformers.TrainingArguments.main_process_first.local",description:`<strong>local</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
if <code>True</code> first means process of rank 0 of each node if <code>False</code> first means process of rank 0
of node rank 0 In multi-node environment with a shared filesystem you most likely will want to use
<code>local=False</code> so that only the main process of the first node will do the processing. If however, the
filesystem is not shared, then the main process of each node will need to do the processing, which is
the default behavior.`,name:"local"},{anchor:"transformers.TrainingArguments.main_process_first.desc",description:`<strong>desc</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;work&quot;</code>) &#x2014;
a work description to be used in debug logs`,name:"desc"}]}}),gn=new k({props:{name:"to_dict",anchor:"transformers.TrainingArguments.to_dict",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/training_args.py#L1262"}}),vn=new k({props:{name:"to_json_string",anchor:"transformers.TrainingArguments.to_json_string",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/training_args.py#L1277"}}),bn=new k({props:{name:"to_sanitized_dict",anchor:"transformers.TrainingArguments.to_sanitized_dict",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/training_args.py#L1283"}}),yn=new ue({}),wn=new k({props:{name:"class transformers.Seq2SeqTrainingArguments",anchor:"transformers.Seq2SeqTrainingArguments",parameters:[{name:"output_dir",val:": str"},{name:"overwrite_output_dir",val:": bool = False"},{name:"do_train",val:": bool = False"},{name:"do_eval",val:": bool = False"},{name:"do_predict",val:": bool = False"},{name:"evaluation_strategy",val:": IntervalStrategy = 'no'"},{name:"prediction_loss_only",val:": bool = False"},{name:"per_device_train_batch_size",val:": int = 8"},{name:"per_device_eval_batch_size",val:": int = 8"},{name:"per_gpu_train_batch_size",val:": typing.Optional[int] = None"},{name:"per_gpu_eval_batch_size",val:": typing.Optional[int] = None"},{name:"gradient_accumulation_steps",val:": int = 1"},{name:"eval_accumulation_steps",val:": typing.Optional[int] = None"},{name:"learning_rate",val:": float = 5e-05"},{name:"weight_decay",val:": float = 0.0"},{name:"adam_beta1",val:": float = 0.9"},{name:"adam_beta2",val:": float = 0.999"},{name:"adam_epsilon",val:": float = 1e-08"},{name:"max_grad_norm",val:": float = 1.0"},{name:"num_train_epochs",val:": float = 3.0"},{name:"max_steps",val:": int = -1"},{name:"lr_scheduler_type",val:": SchedulerType = 'linear'"},{name:"warmup_ratio",val:": float = 0.0"},{name:"warmup_steps",val:": int = 0"},{name:"log_level",val:": typing.Optional[str] = 'passive'"},{name:"log_level_replica",val:": typing.Optional[str] = 'passive'"},{name:"log_on_each_node",val:": bool = True"},{name:"logging_dir",val:": typing.Optional[str] = None"},{name:"logging_strategy",val:": IntervalStrategy = 'steps'"},{name:"logging_first_step",val:": bool = False"},{name:"logging_steps",val:": int = 500"},{name:"logging_nan_inf_filter",val:": str = True"},{name:"save_strategy",val:": IntervalStrategy = 'steps'"},{name:"save_steps",val:": int = 500"},{name:"save_total_limit",val:": typing.Optional[int] = None"},{name:"save_on_each_node",val:": bool = False"},{name:"no_cuda",val:": bool = False"},{name:"seed",val:": int = 42"},{name:"bf16",val:": bool = False"},{name:"fp16",val:": bool = False"},{name:"fp16_opt_level",val:": str = 'O1'"},{name:"half_precision_backend",val:": str = 'auto'"},{name:"bf16_full_eval",val:": bool = False"},{name:"fp16_full_eval",val:": bool = False"},{name:"tf32",val:": bool = None"},{name:"local_rank",val:": int = -1"},{name:"xpu_backend",val:": str = None"},{name:"tpu_num_cores",val:": typing.Optional[int] = None"},{name:"tpu_metrics_debug",val:": bool = False"},{name:"debug",val:": str = ''"},{name:"dataloader_drop_last",val:": bool = False"},{name:"eval_steps",val:": int = None"},{name:"dataloader_num_workers",val:": int = 0"},{name:"past_index",val:": int = -1"},{name:"run_name",val:": typing.Optional[str] = None"},{name:"disable_tqdm",val:": typing.Optional[bool] = None"},{name:"remove_unused_columns",val:": typing.Optional[bool] = True"},{name:"label_names",val:": typing.Optional[typing.List[str]] = None"},{name:"load_best_model_at_end",val:": typing.Optional[bool] = False"},{name:"metric_for_best_model",val:": typing.Optional[str] = None"},{name:"greater_is_better",val:": typing.Optional[bool] = None"},{name:"ignore_data_skip",val:": bool = False"},{name:"sharded_ddp",val:": str = ''"},{name:"deepspeed",val:": typing.Optional[str] = None"},{name:"label_smoothing_factor",val:": float = 0.0"},{name:"adafactor",val:": bool = False"},{name:"group_by_length",val:": bool = False"},{name:"length_column_name",val:": typing.Optional[str] = 'length'"},{name:"report_to",val:": typing.Optional[typing.List[str]] = None"},{name:"ddp_find_unused_parameters",val:": typing.Optional[bool] = None"},{name:"ddp_bucket_cap_mb",val:": typing.Optional[int] = None"},{name:"dataloader_pin_memory",val:": bool = True"},{name:"skip_memory_metrics",val:": bool = True"},{name:"use_legacy_prediction_loop",val:": bool = False"},{name:"push_to_hub",val:": bool = False"},{name:"resume_from_checkpoint",val:": typing.Optional[str] = None"},{name:"hub_model_id",val:": str = None"},{name:"hub_strategy",val:": HubStrategy = 'every_save'"},{name:"hub_token",val:": str = None"},{name:"gradient_checkpointing",val:": bool = False"},{name:"fp16_backend",val:": str = 'auto'"},{name:"push_to_hub_model_id",val:": str = None"},{name:"push_to_hub_organization",val:": str = None"},{name:"push_to_hub_token",val:": str = None"},{name:"mp_parameters",val:": str = ''"},{name:"sortish_sampler",val:": bool = False"},{name:"predict_with_generate",val:": bool = False"},{name:"generation_max_length",val:": typing.Optional[int] = None"},{name:"generation_num_beams",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/v4.15.0/src/transformers/training_args_seq2seq.py#L28",parametersDescription:[{anchor:"transformers.Seq2SeqTrainingArguments.output_dir",description:`<strong>output_dir</strong> (<code>str</code>) &#x2014;
The output directory where the model predictions and checkpoints will be written.`,name:"output_dir"},{anchor:"transformers.Seq2SeqTrainingArguments.overwrite_output_dir",description:`<strong>overwrite_output_dir</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, overwrite the content of the output directory. Use this to continue training if
<code>output_dir</code> points to a checkpoint directory.`,name:"overwrite_output_dir"},{anchor:"transformers.Seq2SeqTrainingArguments.do_train",description:`<strong>do_train</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to run training or not. This argument is not directly used by <a href="/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s
intended to be used by your training/evaluation scripts instead. See the <a href="https://github.com/huggingface/transformers/tree/master/examples" rel="nofollow">example scripts</a> for more details.`,name:"do_train"},{anchor:"transformers.Seq2SeqTrainingArguments.do_eval",description:`<strong>do_eval</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to run evaluation on the validation set or not. Will be set to <code>True</code> if
<code>evaluation_strategy</code> is different from <code>&quot;no&quot;</code>. This argument is not directly used by
<a href="/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s intended to be used by your training/evaluation scripts instead. See
the <a href="https://github.com/huggingface/transformers/tree/master/examples" rel="nofollow">example scripts</a> for more
details.`,name:"do_eval"},{anchor:"transformers.Seq2SeqTrainingArguments.do_predict",description:`<strong>do_predict</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to run predictions on the test set or not. This argument is not directly used by
<a href="/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s intended to be used by your training/evaluation scripts instead. See
the <a href="https://github.com/huggingface/transformers/tree/master/examples" rel="nofollow">example scripts</a> for more
details.`,name:"do_predict"},{anchor:"transformers.Seq2SeqTrainingArguments.evaluation_strategy",description:`<strong>evaluation_strategy</strong> (<code>str</code> or <a href="/docs/transformers/v4.15.0/en/internal/trainer_utils#transformers.IntervalStrategy">IntervalStrategy</a>, <em>optional</em>, defaults to <code>&quot;no&quot;</code>) &#x2014;
The evaluation strategy to adopt during training. Possible values are:</p>
<ul>
<li><code>&quot;no&quot;</code>: No evaluation is done during training.</li>
<li><code>&quot;steps&quot;</code>: Evaluation is done (and logged) every <code>eval_steps</code>.</li>
<li><code>&quot;epoch&quot;</code>: Evaluation is done at the end of each epoch.</li>
</ul>`,name:"evaluation_strategy"},{anchor:"transformers.Seq2SeqTrainingArguments.prediction_loss_only",description:`<strong>prediction_loss_only</strong> (<code>bool</code>, <em>optional</em>, defaults to <em>False</em>) &#x2014;
When performing evaluation and generating predictions, only returns the loss.`,name:"prediction_loss_only"},{anchor:"transformers.Seq2SeqTrainingArguments.per_device_train_batch_size",description:`<strong>per_device_train_batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
The batch size per GPU/TPU core/CPU for training.`,name:"per_device_train_batch_size"},{anchor:"transformers.Seq2SeqTrainingArguments.per_device_eval_batch_size",description:`<strong>per_device_eval_batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
The batch size per GPU/TPU core/CPU for evaluation.`,name:"per_device_eval_batch_size"},{anchor:"transformers.Seq2SeqTrainingArguments.gradient_accumulation_steps",description:`<strong>gradient_accumulation_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Number of updates steps to accumulate the gradients for, before performing a backward/update pass.</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>When using gradient accumulation, one step is counted as one step with backward pass. Therefore,
logging, evaluation, save will be conducted every <code>gradient_accumulation_steps * xxx_step</code> training
examples.</p>

					</div>`,name:"gradient_accumulation_steps"},{anchor:"transformers.Seq2SeqTrainingArguments.eval_accumulation_steps",description:`<strong>eval_accumulation_steps</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of predictions steps to accumulate the output tensors for, before moving the results to the CPU. If
left unset, the whole predictions are accumulated on GPU/TPU before being moved to the CPU (faster but
requires more memory).`,name:"eval_accumulation_steps"},{anchor:"transformers.Seq2SeqTrainingArguments.learning_rate",description:`<strong>learning_rate</strong> (<code>float</code>, <em>optional</em>, defaults to 5e-5) &#x2014;
The initial learning rate for <a href="/docs/transformers/v4.15.0/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> optimizer.`,name:"learning_rate"},{anchor:"transformers.Seq2SeqTrainingArguments.weight_decay",description:`<strong>weight_decay</strong> (<code>float</code>, <em>optional</em>, defaults to 0) &#x2014;
The weight decay to apply (if not zero) to all layers except all bias and LayerNorm weights in
<a href="/docs/transformers/v4.15.0/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> optimizer.`,name:"weight_decay"},{anchor:"transformers.Seq2SeqTrainingArguments.adam_beta1",description:`<strong>adam_beta1</strong> (<code>float</code>, <em>optional</em>, defaults to 0.9) &#x2014;
The beta1 hyperparameter for the <a href="/docs/transformers/v4.15.0/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> optimizer.`,name:"adam_beta1"},{anchor:"transformers.Seq2SeqTrainingArguments.adam_beta2",description:`<strong>adam_beta2</strong> (<code>float</code>, <em>optional</em>, defaults to 0.999) &#x2014;
The beta2 hyperparameter for the <a href="/docs/transformers/v4.15.0/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> optimizer.`,name:"adam_beta2"},{anchor:"transformers.Seq2SeqTrainingArguments.adam_epsilon",description:`<strong>adam_epsilon</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-8) &#x2014;
The epsilon hyperparameter for the <a href="/docs/transformers/v4.15.0/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> optimizer.`,name:"adam_epsilon"},{anchor:"transformers.Seq2SeqTrainingArguments.max_grad_norm",description:`<strong>max_grad_norm</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Maximum gradient norm (for gradient clipping).`,name:"max_grad_norm"},{anchor:"transformers.Seq2SeqTrainingArguments.num_train_epochs(float,",description:`<strong>num_train_epochs(<code>float</code>,</strong> <em>optional</em>, defaults to 3.0) &#x2014;
Total number of training epochs to perform (if not an integer, will perform the decimal part percents of
the last epoch before stopping training).`,name:"num_train_epochs(float,"},{anchor:"transformers.Seq2SeqTrainingArguments.max_steps",description:`<strong>max_steps</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
If set to a positive number, the total number of training steps to perform. Overrides
<code>num_train_epochs</code>. In case of using a finite iterable dataset the training may stop before reaching
the set number of steps when all data is exhausted`,name:"max_steps"},{anchor:"transformers.Seq2SeqTrainingArguments.lr_scheduler_type",description:`<strong>lr_scheduler_type</strong> (<code>str</code> or <a href="/docs/transformers/v4.15.0/en/main_classes/optimizer_schedules#transformers.SchedulerType">SchedulerType</a>, <em>optional</em>, defaults to <code>&quot;linear&quot;</code>) &#x2014;
The scheduler type to use. See the documentation of <a href="/docs/transformers/v4.15.0/en/main_classes/optimizer_schedules#transformers.SchedulerType">SchedulerType</a> for all possible
values.`,name:"lr_scheduler_type"},{anchor:"transformers.Seq2SeqTrainingArguments.warmup_ratio",description:`<strong>warmup_ratio</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
Ratio of total training steps used for a linear warmup from 0 to <code>learning_rate</code>.`,name:"warmup_ratio"},{anchor:"transformers.Seq2SeqTrainingArguments.warmup_steps",description:`<strong>warmup_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
Number of steps used for a linear warmup from 0 to <code>learning_rate</code>. Overrides any effect of
<code>warmup_ratio</code>.`,name:"warmup_steps"},{anchor:"transformers.Seq2SeqTrainingArguments.log_level",description:`<strong>log_level</strong> (<code>str</code>, <em>optional</em>, defaults to <code>passive</code>) &#x2014;
Logger log level to use on the main process. Possible choices are the log levels as strings: &#x2018;debug&#x2019;,
&#x2018;info&#x2019;, &#x2018;warning&#x2019;, &#x2018;error&#x2019; and &#x2018;critical&#x2019;, plus a &#x2018;passive&#x2019; level which doesn&#x2019;t set anything and lets the
application set the level.`,name:"log_level"},{anchor:"transformers.Seq2SeqTrainingArguments.log_level_replica",description:`<strong>log_level_replica</strong> (<code>str</code>, <em>optional</em>, defaults to <code>passive</code>) &#x2014;
Logger log level to use on replicas. Same choices as <code>log_level</code>&#x201D;`,name:"log_level_replica"},{anchor:"transformers.Seq2SeqTrainingArguments.log_on_each_node",description:`<strong>log_on_each_node</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
In multinode distributed training, whether to log using <code>log_level</code> once per node, or only on the main
node.`,name:"log_on_each_node"},{anchor:"transformers.Seq2SeqTrainingArguments.logging_dir",description:`<strong>logging_dir</strong> (<code>str</code>, <em>optional</em>) &#x2014;
<a href="https://www.tensorflow.org/tensorboard" rel="nofollow">TensorBoard</a> log directory. Will default to
*output_dir/runs/<strong>CURRENT_DATETIME_HOSTNAME*</strong>.`,name:"logging_dir"},{anchor:"transformers.Seq2SeqTrainingArguments.logging_strategy",description:`<strong>logging_strategy</strong> (<code>str</code> or <a href="/docs/transformers/v4.15.0/en/internal/trainer_utils#transformers.IntervalStrategy">IntervalStrategy</a>, <em>optional</em>, defaults to <code>&quot;steps&quot;</code>) &#x2014;
The logging strategy to adopt during training. Possible values are:</p>
<ul>
<li><code>&quot;no&quot;</code>: No logging is done during training.</li>
<li><code>&quot;epoch&quot;</code>: Logging is done at the end of each epoch.</li>
<li><code>&quot;steps&quot;</code>: Logging is done every <code>logging_steps</code>.</li>
</ul>`,name:"logging_strategy"},{anchor:"transformers.Seq2SeqTrainingArguments.logging_first_step",description:`<strong>logging_first_step</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to log and evaluate the first <code>global_step</code> or not.`,name:"logging_first_step"},{anchor:"transformers.Seq2SeqTrainingArguments.logging_steps",description:`<strong>logging_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 500) &#x2014;
Number of update steps between two logs if <code>logging_strategy=&quot;steps&quot;</code>.`,name:"logging_steps"},{anchor:"transformers.Seq2SeqTrainingArguments.logging_nan_inf_filter",description:`<strong>logging_nan_inf_filter</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to filter <code>nan</code> and <code>inf</code> losses for logging. If set to obj:<em>True</em> the loss of every step
that is <code>nan</code> or <code>inf</code> is filtered and the average loss of the current logging window is taken
instead.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p><code>logging_nan_inf_filter</code> only influences the logging of loss values, it does not change the
behavior the gradient is computed or applied to the model.</p>

					</div>`,name:"logging_nan_inf_filter"},{anchor:"transformers.Seq2SeqTrainingArguments.save_strategy",description:`<strong>save_strategy</strong> (<code>str</code> or <a href="/docs/transformers/v4.15.0/en/internal/trainer_utils#transformers.IntervalStrategy">IntervalStrategy</a>, <em>optional</em>, defaults to <code>&quot;steps&quot;</code>) &#x2014;
The checkpoint save strategy to adopt during training. Possible values are:</p>
<ul>
<li><code>&quot;no&quot;</code>: No save is done during training.</li>
<li><code>&quot;epoch&quot;</code>: Save is done at the end of each epoch.</li>
<li><code>&quot;steps&quot;</code>: Save is done every <code>save_steps</code>.</li>
</ul>`,name:"save_strategy"},{anchor:"transformers.Seq2SeqTrainingArguments.save_steps",description:`<strong>save_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 500) &#x2014;
Number of updates steps before two checkpoint saves if <code>save_strategy=&quot;steps&quot;</code>.`,name:"save_steps"},{anchor:"transformers.Seq2SeqTrainingArguments.save_total_limit",description:`<strong>save_total_limit</strong> (<code>int</code>, <em>optional</em>) &#x2014;
If a value is passed, will limit the total amount of checkpoints. Deletes the older checkpoints in
<code>output_dir</code>.`,name:"save_total_limit"},{anchor:"transformers.Seq2SeqTrainingArguments.save_on_each_node",description:`<strong>save_on_each_node</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
When doing multi-node distributed training, whether to save models and checkpoints on each node, or only on
the main one.</p>
<p>This should not be activated when the different nodes use the same storage as the files will be saved with
the same names for each node.`,name:"save_on_each_node"},{anchor:"transformers.Seq2SeqTrainingArguments.no_cuda",description:`<strong>no_cuda</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to not use CUDA even when it is available or not.`,name:"no_cuda"},{anchor:"transformers.Seq2SeqTrainingArguments.seed",description:`<strong>seed</strong> (<code>int</code>, <em>optional</em>, defaults to 42) &#x2014;
Random seed that will be set at the beginning of training. To ensure reproducibility across runs, use the
<code>model_init</code> function to instantiate the model if it has some randomly
initialized parameters.`,name:"seed"},{anchor:"transformers.Seq2SeqTrainingArguments.bf16",description:`<strong>bf16</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use bf16 16-bit (mixed) precision training instead of 32-bit training. Requires Ampere or higher
NVIDIA architecture. This is an experimental API and it may change.`,name:"bf16"},{anchor:"transformers.Seq2SeqTrainingArguments.fp16",description:`<strong>fp16</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use fp16 16-bit (mixed) precision training instead of 32-bit training.`,name:"fp16"},{anchor:"transformers.Seq2SeqTrainingArguments.fp16_opt_level",description:`<strong>fp16_opt_level</strong> (<code>str</code>, <em>optional</em>, defaults to &#x2018;O1&#x2019;) &#x2014;
For <code>fp16</code> training, Apex AMP optimization level selected in [&#x2018;O0&#x2019;, &#x2018;O1&#x2019;, &#x2018;O2&#x2019;, and &#x2018;O3&#x2019;]. See details
on the <a href="https://nvidia.github.io/apex/amp" rel="nofollow">Apex documentation</a>.`,name:"fp16_opt_level"},{anchor:"transformers.Seq2SeqTrainingArguments.fp16_backend",description:`<strong>fp16_backend</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;auto&quot;</code>) &#x2014;
This argument is deprecated. Use <code>half_precision_backend</code> instead.`,name:"fp16_backend"},{anchor:"transformers.Seq2SeqTrainingArguments.half_precision_backend",description:`<strong>half_precision_backend</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;auto&quot;</code>) &#x2014;
The backend to use for mixed precision training. Must be one of <code>&quot;auto&quot;</code>, <code>&quot;amp&quot;</code> or
<code>&quot;apex&quot;</code>. <code>&quot;auto&quot;</code> will use AMP or APEX depending on the PyTorch version detected, while the
other choices will force the requested backend.`,name:"half_precision_backend"},{anchor:"transformers.Seq2SeqTrainingArguments.bf16_full_eval",description:`<strong>bf16_full_eval</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use full bfloat16 evaluation instead of 32-bit. This will be faster and save memory but can harm
metric values. This is an experimental API and it may change.`,name:"bf16_full_eval"},{anchor:"transformers.Seq2SeqTrainingArguments.fp16_full_eval",description:`<strong>fp16_full_eval</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use full float16 evaluation instead of 32-bit. This will be faster and save memory but can harm
metric values.`,name:"fp16_full_eval"},{anchor:"transformers.Seq2SeqTrainingArguments.tf32",description:`<strong>tf32</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to enable tf32 mode, available in Ampere and newer GPU architectures. This is an experimental API
and it may change.`,name:"tf32"},{anchor:"transformers.Seq2SeqTrainingArguments.local_rank",description:`<strong>local_rank</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Rank of the process during distributed training.`,name:"local_rank"},{anchor:"transformers.Seq2SeqTrainingArguments.xpu_backend",description:`<strong>xpu_backend</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The backend to use for xpu distributed training. Must be one of <code>&quot;mpi&quot;</code> or <code>&quot;ccl&quot;</code>.`,name:"xpu_backend"},{anchor:"transformers.Seq2SeqTrainingArguments.tpu_num_cores",description:`<strong>tpu_num_cores</strong> (<code>int</code>, <em>optional</em>) &#x2014;
When training on TPU, the number of TPU cores (automatically passed by launcher script).`,name:"tpu_num_cores"},{anchor:"transformers.Seq2SeqTrainingArguments.dataloader_drop_last",description:`<strong>dataloader_drop_last</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to drop the last incomplete batch (if the length of the dataset is not divisible by the batch size)
or not.`,name:"dataloader_drop_last"},{anchor:"transformers.Seq2SeqTrainingArguments.eval_steps",description:`<strong>eval_steps</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of update steps between two evaluations if <code>evaluation_strategy=&quot;steps&quot;</code>. Will default to the
same value as <code>logging_steps</code> if not set.`,name:"eval_steps"},{anchor:"transformers.Seq2SeqTrainingArguments.dataloader_num_workers",description:`<strong>dataloader_num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
Number of subprocesses to use for data loading (PyTorch only). 0 means that the data will be loaded in the
main process.`,name:"dataloader_num_workers"},{anchor:"transformers.Seq2SeqTrainingArguments.past_index",description:`<strong>past_index</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Some models like <a href="../model_doc/transformerxl">TransformerXL</a> or <a href="../model_doc/xlnet">XLNet</a> can
make use of the past hidden states for their predictions. If this argument is set to a positive int, the
<code>Trainer</code> will use the corresponding output (usually index 2) as the past state and feed it to the model
at the next training step under the keyword argument <code>mems</code>.`,name:"past_index"},{anchor:"transformers.Seq2SeqTrainingArguments.run_name",description:`<strong>run_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
A descriptor for the run. Typically used for <a href="https://www.wandb.com/" rel="nofollow">wandb</a> logging.`,name:"run_name"},{anchor:"transformers.Seq2SeqTrainingArguments.disable_tqdm",description:`<strong>disable_tqdm</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to disable the tqdm progress bars and table of metrics produced by
<code>NotebookTrainingTracker</code> in Jupyter Notebooks. Will default to <code>True</code>
if the logging level is set to warn or lower (default), <code>False</code> otherwise.`,name:"disable_tqdm"},{anchor:"transformers.Seq2SeqTrainingArguments.remove_unused_columns",description:`<strong>remove_unused_columns</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
If using <code>datasets.Dataset</code> datasets, whether or not to automatically remove the columns unused by the
model forward method.</p>
<p>(Note that this behavior is not implemented for <code>TFTrainer</code> yet.)`,name:"remove_unused_columns"},{anchor:"transformers.Seq2SeqTrainingArguments.label_names",description:`<strong>label_names</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
The list of keys in your dictionary of inputs that correspond to the labels.</p>
<p>Will eventually default to <code>[&quot;labels&quot;]</code> except if the model used is one of the
<code>XxxForQuestionAnswering</code> in which case it will default to <code>[&quot;start_positions&quot;, &quot;end_positions&quot;]</code>.`,name:"label_names"},{anchor:"transformers.Seq2SeqTrainingArguments.load_best_model_at_end",description:`<strong>load_best_model_at_end</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to load the best model found during training at the end of training.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When set to <code>True</code>, the parameters <code>save_strategy</code> needs to be the same as
<code>eval_strategy</code>, and in the case it is &#x201C;steps&#x201D;, <code>save_steps</code> must be a round multiple of
<code>eval_steps</code>.</p>

					</div>`,name:"load_best_model_at_end"},{anchor:"transformers.Seq2SeqTrainingArguments.metric_for_best_model",description:`<strong>metric_for_best_model</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Use in conjunction with <code>load_best_model_at_end</code> to specify the metric to use to compare two different
models. Must be the name of a metric returned by the evaluation with or without the prefix <code>&quot;eval_&quot;</code>.
Will default to <code>&quot;loss&quot;</code> if unspecified and <code>load_best_model_at_end=True</code> (to use the evaluation
loss).</p>
<p>If you set this value, <code>greater_is_better</code> will default to <code>True</code>. Don&#x2019;t forget to set it to
<code>False</code> if your metric is better when lower.`,name:"metric_for_best_model"},{anchor:"transformers.Seq2SeqTrainingArguments.greater_is_better",description:`<strong>greater_is_better</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Use in conjunction with <code>load_best_model_at_end</code> and <code>metric_for_best_model</code> to specify if better
models should have a greater metric or not. Will default to:</p>
<ul>
<li><code>True</code> if <code>metric_for_best_model</code> is set to a value that isn&#x2019;t <code>&quot;loss&quot;</code> or
<code>&quot;eval_loss&quot;</code>.</li>
<li><code>False</code> if <code>metric_for_best_model</code> is not set, or set to <code>&quot;loss&quot;</code> or <code>&quot;eval_loss&quot;</code>.</li>
</ul>`,name:"greater_is_better"},{anchor:"transformers.Seq2SeqTrainingArguments.ignore_data_skip",description:`<strong>ignore_data_skip</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
When resuming training, whether or not to skip the epochs and batches to get the data loading at the same
stage as in the previous training. If set to <code>True</code>, the training will begin faster (as that skipping
step can take a long time) but will not yield the same results as the interrupted training would have.`,name:"ignore_data_skip"},{anchor:"transformers.Seq2SeqTrainingArguments.sharded_ddp",description:`<strong>sharded_ddp</strong> (<code>bool</code>, <code>str</code> or list of <code>ShardedDDPOption</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Use Sharded DDP training from <a href="https://github.com/facebookresearch/fairscale" rel="nofollow">FairScale</a> (in distributed
training only). This is an experimental feature.</p>
<p>A list of options along the following:</p>
<ul>
<li><code>&quot;simple&quot;</code>: to use first instance of sharded DDP released by fairscale (<code>ShardedDDP</code>) similar
to ZeRO-2.</li>
<li><code>&quot;zero_dp_2&quot;</code>: to use the second instance of sharded DPP released by fairscale
(<code>FullyShardedDDP</code>) in Zero-2 mode (with <code>reshard_after_forward=False</code>).</li>
<li><code>&quot;zero_dp_3&quot;</code>: to use the second instance of sharded DPP released by fairscale
(<code>FullyShardedDDP</code>) in Zero-3 mode (with <code>reshard_after_forward=True</code>).</li>
<li><code>&quot;offload&quot;</code>: to add ZeRO-offload (only compatible with <code>&quot;zero_dp_2&quot;</code> and <code>&quot;zero_dp_3&quot;</code>).</li>
</ul>
<p>If a string is passed, it will be split on space. If a bool is passed, it will be converted to an empty
list for <code>False</code> and <code>[&quot;simple&quot;]</code> for <code>True</code>.`,name:"sharded_ddp"},{anchor:"transformers.Seq2SeqTrainingArguments.deepspeed",description:`<strong>deepspeed</strong> (<code>str</code> or <code>dict</code>, <em>optional</em>) &#x2014;
Use <a href="https://github.com/microsoft/deepspeed" rel="nofollow">Deepspeed</a>. This is an experimental feature and its API may
evolve in the future. The value is either the location of DeepSpeed json config file (e.g.,
<code>ds_config.json</code>) or an already loaded json file as a <code>dict</code>&#x201D;`,name:"deepspeed"},{anchor:"transformers.Seq2SeqTrainingArguments.label_smoothing_factor",description:`<strong>label_smoothing_factor</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The label smoothing factor to use. Zero means no label smoothing, otherwise the underlying onehot-encoded
labels are changed from 0s and 1s to <code>label_smoothing_factor/num_labels</code> and <code>1 - label_smoothing_factor + label_smoothing_factor/num_labels</code> respectively.`,name:"label_smoothing_factor"},{anchor:"transformers.Seq2SeqTrainingArguments.debug",description:`<strong>debug</strong> (<code>str</code> or list of <code>DebugOption</code>, <em>optional</em>, defaults to <code>&quot;&quot;</code>) &#x2014;
Enable one or more debug features. This is an experimental feature.</p>
<p>Possible options are:</p>
<ul>
<li><code>&quot;underflow_overflow&quot;</code>: detects overflow in model&#x2019;s input/outputs and reports the last frames that
led to the event</li>
<li><code>&quot;tpu_metrics_debug&quot;</code>: print debug metrics on TPU</li>
</ul>
<p>The options should be separated by whitespaces.`,name:"debug"},{anchor:"transformers.Seq2SeqTrainingArguments.adafactor",description:`<strong>adafactor</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to use the <a href="/docs/transformers/v4.15.0/en/main_classes/optimizer_schedules#transformers.Adafactor">Adafactor</a> optimizer instead of
<a href="/docs/transformers/v4.15.0/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a>.`,name:"adafactor"},{anchor:"transformers.Seq2SeqTrainingArguments.group_by_length",description:`<strong>group_by_length</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to group together samples of roughly the same length in the training dataset (to minimize
padding applied and be more efficient). Only useful if applying dynamic padding.`,name:"group_by_length"},{anchor:"transformers.Seq2SeqTrainingArguments.length_column_name",description:`<strong>length_column_name</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;length&quot;</code>) &#x2014;
Column name for precomputed lengths. If the column exists, grouping by length will use these values rather
than computing them on train startup. Ignored unless <code>group_by_length</code> is <code>True</code> and the dataset
is an instance of <code>Dataset</code>.`,name:"length_column_name"},{anchor:"transformers.Seq2SeqTrainingArguments.report_to",description:`<strong>report_to</strong> (<code>str</code> or <code>List[str]</code>, <em>optional</em>, defaults to <code>&quot;all&quot;</code>) &#x2014;
The list of integrations to report the results and logs to. Supported platforms are <code>&quot;azure_ml&quot;</code>,
<code>&quot;comet_ml&quot;</code>, <code>&quot;mlflow&quot;</code>, <code>&quot;tensorboard&quot;</code> and <code>&quot;wandb&quot;</code>. Use <code>&quot;all&quot;</code> to report to
all integrations installed, <code>&quot;none&quot;</code> for no integrations.`,name:"report_to"},{anchor:"transformers.Seq2SeqTrainingArguments.ddp_find_unused_parameters",description:`<strong>ddp_find_unused_parameters</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
When using distributed training, the value of the flag <code>find_unused_parameters</code> passed to
<code>DistributedDataParallel</code>. Will default to <code>False</code> if gradient checkpointing is used, <code>True</code>
otherwise.`,name:"ddp_find_unused_parameters"},{anchor:"transformers.Seq2SeqTrainingArguments.ddp_bucket_cap_mb",description:`<strong>ddp_bucket_cap_mb</strong> (<code>int</code>, <em>optional</em>) &#x2014;
When using distributed training, the value of the flag <code>bucket_cap_mb</code> passed to
<code>DistributedDataParallel</code>.`,name:"ddp_bucket_cap_mb"},{anchor:"transformers.Seq2SeqTrainingArguments.dataloader_pin_memory",description:`<strong>dataloader_pin_memory</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether you want to pin memory in data loaders or not. Will default to <code>True</code>.`,name:"dataloader_pin_memory"},{anchor:"transformers.Seq2SeqTrainingArguments.skip_memory_metrics",description:`<strong>skip_memory_metrics</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to skip adding of memory profiler reports to metrics. This is skipped by default because it slows
down the training and evaluation speed.`,name:"skip_memory_metrics"},{anchor:"transformers.Seq2SeqTrainingArguments.push_to_hub",description:`<strong>push_to_hub</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to upload the trained model to the hub after training. If this is activated, and
<code>output_dir</code> exists, it needs to be a local clone of the repository to which the
<a href="/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer">Trainer</a> will be pushed.`,name:"push_to_hub"},{anchor:"transformers.Seq2SeqTrainingArguments.resume_from_checkpoint",description:`<strong>resume_from_checkpoint</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The path to a folder with a valid checkpoint for your model. This argument is not directly used by
<a href="/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s intended to be used by your training/evaluation scripts instead. See
the <a href="https://github.com/huggingface/transformers/tree/master/examples" rel="nofollow">example scripts</a> for more
details.`,name:"resume_from_checkpoint"},{anchor:"transformers.Seq2SeqTrainingArguments.hub_model_id",description:`<strong>hub_model_id</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The name of the repository to keep in sync with the local <em>output_dir</em>. It can be a simple model ID in
which case the model will be pushed in your namespace. Otherwise it should be the whole repository name,
for instance <code>&quot;user_name/model&quot;</code>, which allows you to push to an organization you are a member of with
<code>&quot;organization_name/model&quot;</code>. Will default to <code>user_name/output_dir_name</code> with <em>output_dir_name</em>
being the name of <code>output_dir</code>.</p>
<p>Will default to to the name of <code>output_dir</code>.`,name:"hub_model_id"},{anchor:"transformers.Seq2SeqTrainingArguments.hub_strategy",description:`<strong>hub_strategy</strong> (<code>str</code> or <code>HubStrategy</code>, <em>optional</em>, defaults to <code>&quot;every_save&quot;</code>) &#x2014;
Defines the scope of what is pushed to the Hub and when. Possible values are:</p>
<ul>
<li><code>&quot;end&quot;</code>: push the model, its configuration, the tokenizer (if passed along to the
<a href="/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer">Trainer</a>) and a draft of a model card at the end of training.</li>
<li><code>&quot;every_save&quot;</code>: push the model, its configuration, the tokenizer (if passed along to the
<a href="/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer">Trainer</a>) and a draft of a model card each time there is a model save. The pushes
are asynchronous to not block training, and in case the save are very frequent, a new push is only
attempted if the previous one is finished. A last push is made with the final model at the end of
training.</li>
<li><code>&quot;checkpoint&quot;</code>: like <code>&quot;every_save&quot;</code> but the latest checkpoint is also pushed in a subfolder
named last-checkpoint, allowing you to resume training easily with
<code>trainer.train(resume_from_checkpoint=&quot;last-checkpoint&quot;)</code>.</li>
<li><code>&quot;all_checkpoints&quot;</code>: like <code>&quot;checkpoint&quot;</code> but all checkpoints are pushed like they appear in the
output folder (so you will get one checkpoint folder per folder in your final repository)</li>
</ul>`,name:"hub_strategy"},{anchor:"transformers.Seq2SeqTrainingArguments.hub_token",description:`<strong>hub_token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The token to use to push the model to the Hub. Will default to the token in the cache folder obtained with
<code>huggingface-cli login</code>.`,name:"hub_token"},{anchor:"transformers.Seq2SeqTrainingArguments.gradient_checkpointing",description:`<strong>gradient_checkpointing</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If True, use gradient checkpointing to save memory at the expense of slower backward pass.`,name:"gradient_checkpointing"}]}}),kn=new ue({}),$n=new ue({}),xn=new F({props:{code:`[...]
logger = logging.getLogger(__name__)

# Setup logging
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    datefmt="%m/%d/%Y %H:%M:%S",
    handlers=[logging.StreamHandler(sys.stdout)],
)

# set the main code and the modules it uses to the same log-level according to the node
log_level = training_args.get_process_log_level()
logger.setLevel(log_level)
datasets.utils.logging.set_verbosity(log_level)
transformers.utils.logging.set_verbosity(log_level)

trainer = Trainer(...),`,highlighted:`[...]
logger = logging.getLogger(__name__)

<span class="hljs-comment"># Setup logging</span>
logging.basicConfig(
    <span class="hljs-built_in">format</span>=<span class="hljs-string">&quot;%(asctime)s - %(levelname)s - %(name)s - %(message)s&quot;</span>,
    datefmt=<span class="hljs-string">&quot;%m/%d/%Y %H:%M:%S&quot;</span>,
    handlers=[logging.StreamHandler(sys.stdout)],
)

<span class="hljs-comment"># set the main code and the modules it uses to the same log-level according to the node</span>
log_level = training_args.get_process_log_level()
logger.setLevel(log_level)
datasets.utils.logging.set_verbosity(log_level)
transformers.utils.logging.set_verbosity(log_level)

trainer = Trainer(...)`}}),An=new F({props:{code:"my_app.py ... --log_level warning --log_level_replica error,",highlighted:"my_app.py ... --log_level warning --log_level_replica error"}}),qn=new F({props:{code:"my_app.py ... --log_level warning --log_level_replica error --log_on_each_node 0,",highlighted:"my_app.py ... --log_level warning --log_level_replica error --log_on_each_node 0"}}),Dn=new F({props:{code:"my_app.py ... --log_level error --log_level_replica error --log_on_each_node 0,",highlighted:"my_app.py ... --log_level error --log_level_replica error --log_on_each_node 0"}}),Sn=new ue({}),On=new ue({}),Nn=new ue({}),Fn=new F({props:{code:`pip install fairscale
pip install deepspeed,`,highlighted:`pip install fairscale
pip install deepspeed`}}),Wn=new ue({}),Rn=new F({props:{code:"which nvcc,",highlighted:'<span class="hljs-built_in">which</span> nvcc'}}),Mn=new ue({}),Gn=new F({props:{code:`/usr/local/cuda-10.2
/usr/local/cuda-11.0,`,highlighted:`/usr/local/cuda-10.2
/usr/local/cuda-11.0`}}),Hn=new F({props:{code:`echo $PATH
echo $LD_LIBRARY_PATH,`,highlighted:`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span>
<span class="hljs-built_in">echo</span> <span class="hljs-variable">$LD_LIBRARY_PATH</span>`}}),Bn=new F({props:{code:`export PATH=/usr/local/cuda-10.2/bin:$PATH
export LD_LIBRARY_PATH=/usr/local/cuda-10.2/lib64:$LD_LIBRARY_PATH,`,highlighted:`<span class="hljs-built_in">export</span> PATH=/usr/local/cuda-10.2/bin:<span class="hljs-variable">$PATH</span>
<span class="hljs-built_in">export</span> LD_LIBRARY_PATH=/usr/local/cuda-10.2/lib64:<span class="hljs-variable">$LD_LIBRARY_PATH</span>`}}),Vn=new ue({}),Yn=new F({props:{code:`sudo ln -s /usr/bin/gcc-7  /usr/local/cuda-10.2/bin/gcc
sudo ln -s /usr/bin/g++-7  /usr/local/cuda-10.2/bin/g++,`,highlighted:`sudo <span class="hljs-built_in">ln</span> -s /usr/bin/gcc-7  /usr/local/cuda-10.2/bin/gcc
sudo <span class="hljs-built_in">ln</span> -s /usr/bin/g++-7  /usr/local/cuda-10.2/bin/g++`}}),Zn=new ue({}),Qn=new F({props:{code:"pip install fairscale,",highlighted:"pip install fairscale"}}),es=new F({props:{code:"pip install transformers[fairscale],",highlighted:"pip install transformers[fairscale]"}}),rs=new F({props:{code:"pip install fairscale --no-build-isolation .,",highlighted:"pip install fairscale --no-build-isolation ."}}),as=new F({props:{code:`git clone https://github.com/facebookresearch/fairscale/
cd fairscale
rm -r dist build
python setup.py bdist_wheel
pip uninstall -y fairscale
pip install dist/fairscale-*.whl,`,highlighted:`git <span class="hljs-built_in">clone</span> https://github.com/facebookresearch/fairscale/
<span class="hljs-built_in">cd</span> fairscale
<span class="hljs-built_in">rm</span> -r dist build
python setup.py bdist_wheel
pip uninstall -y fairscale
pip install dist/fairscale-*.whl`}}),ss=new F({props:{code:`pip uninstall -y fairscale; pip install fairscale --pre \\
-f https://download.pytorch.org/whl/nightly/cu110/torch_nightly \\
--no-cache --no-build-isolation,`,highlighted:`pip uninstall -y fairscale; pip install fairscale --pre \\
-f https://download.pytorch.org/whl/nightly/cu110/torch_nightly \\
--no-cache --no-build-isolation`}}),is=new F({props:{code:`pip install -v --disable-pip-version-check . \\
-f https://download.pytorch.org/whl/nightly/cu110/torch_nightly --pre,`,highlighted:`pip install -v --disable-pip-version-check . \\
-f https://download.pytorch.org/whl/nightly/cu110/torch_nightly --pre`}}),cs=new F({props:{code:`python -m torch.distributed.launch --nproc_per_node=2 examples/pytorch/translation/run_translation.py \\
--model_name_or_path t5-small --per_device_train_batch_size 1   \\
--output_dir output_dir --overwrite_output_dir \\
--do_train --max_train_samples 500 --num_train_epochs 1 \\
--dataset_name wmt16 --dataset_config "ro-en" \\
--source_lang en --target_lang ro \\
--fp16 --sharded_ddp simple,`,highlighted:`python -m torch.distributed.launch --nproc_per_node=2 examples/pytorch/translation/run_translation.py \\
--model_name_or_path t5-small --per_device_train_batch_size 1   \\
--output_dir output_dir --overwrite_output_dir \\
--do_train --max_train_samples 500 --num_train_epochs 1 \\
--dataset_name wmt16 --dataset_config <span class="hljs-string">&quot;ro-en&quot;</span> \\
--source_lang en --target_lang ro \\
--fp16 --sharded_ddp simple`}}),us=new F({props:{code:`python -m torch.distributed.launch --nproc_per_node=2 examples/pytorch/translation/run_translation.py \\
--model_name_or_path t5-small --per_device_train_batch_size 1   \\
--output_dir output_dir --overwrite_output_dir \\
--do_train --max_train_samples 500 --num_train_epochs 1 \\
--dataset_name wmt16 --dataset_config "ro-en" \\
--source_lang en --target_lang ro \\
--fp16 --sharded_ddp zero_dp_2,`,highlighted:`python -m torch.distributed.launch --nproc_per_node=2 examples/pytorch/translation/run_translation.py \\
--model_name_or_path t5-small --per_device_train_batch_size 1   \\
--output_dir output_dir --overwrite_output_dir \\
--do_train --max_train_samples 500 --num_train_epochs 1 \\
--dataset_name wmt16 --dataset_config <span class="hljs-string">&quot;ro-en&quot;</span> \\
--source_lang en --target_lang ro \\
--fp16 --sharded_ddp zero_dp_2`}}),{c(){E=n("meta"),L=l(),x=n("h1"),S=n("a"),fe=n("span"),h(W.$$.fragment),R=l(),H=n("span"),ge=r("Trainer"),ee=l(),j=n("p"),se=r("The "),ie=n("a"),te=r("Trainer"),le=r(" class provides an API for feature-complete training in PyTorch for most standard use cases. It\u2019s used in most of the "),Y=n("a"),Ze=r("example scripts"),_e=r("."),z=l(),O=n("p"),rt=r("Before instantiating your "),oe=n("a"),at=r("Trainer"),nt=r(", create a "),ve=n("a"),Vr=r("TrainingArguments"),Yr=r(" to access all the points of customization during training."),Je=l(),Ae=n("p"),Zr=r("The API supports distributed training on multiple GPUs/TPUs, mixed precision through "),be=n("a"),Jr=r("NVIDIA Apex"),Xr=r(" and Native AMP for PyTorch."),Z=l(),B=n("p"),ys=r("The "),ye=n("a"),Oo=r("Trainer"),ws=r(" contains the basic training loop which supports the above features. To inject custom behavior you can subclass them and override the following methods:"),Bt=l(),q=n("ul"),V=n("li"),Co=n("strong"),Ts=r("get_train_dataloader"),Es=r(" \u2014 Creates the training DataLoader."),ks=l(),$s=n("li"),id=n("strong"),jv=r("get_eval_dataloader"),Mv=r(" \u2014 Creates the evaluation DataLoader."),Gv=l(),xs=n("li"),ld=n("strong"),Hv=r("get_test_dataloader"),Bv=r(" \u2014 Creates the test DataLoader."),Vv=l(),As=n("li"),dd=n("strong"),Yv=r("log"),Zv=r(" \u2014 Logs information on the various objects watching training."),Jv=l(),st=n("li"),cd=n("strong"),Xv=r("create_optimizer_and_scheduler"),Kv=r(` \u2014 Sets up the optimizer and learning rate scheduler if they were not passed at
init. Note, that you can also subclass or override the `),md=n("code"),Qv=r("create_optimizer"),eb=r(" and "),pd=n("code"),tb=r("create_scheduler"),ob=r(` methods
separately.`),rb=l(),qs=n("li"),hd=n("strong"),ab=r("create_optimizer"),nb=r(" \u2014 Sets up the optimizer if it wasn\u2019t passed at init."),sb=l(),Ds=n("li"),ud=n("strong"),ib=r("create_scheduler"),lb=r(" \u2014 Sets up the learning rate scheduler if it wasn\u2019t passed at init."),db=l(),Ss=n("li"),fd=n("strong"),cb=r("compute_loss"),mb=r(" - Computes the loss on a batch of training inputs."),pb=l(),Ps=n("li"),gd=n("strong"),hb=r("training_step"),ub=r(" \u2014 Performs a training step."),fb=l(),Os=n("li"),_d=n("strong"),gb=r("prediction_step"),_b=r(" \u2014 Performs an evaluation/test step."),vb=l(),Cs=n("li"),vd=n("strong"),bb=r("evaluate"),yb=r(" \u2014 Runs an evaluation loop and returns metrics."),wb=l(),Is=n("li"),bd=n("strong"),Tb=r("predict"),Eb=r(" \u2014 Returns predictions (with metrics if labels are available) on a test set."),cf=l(),h(Io.$$.fragment),mf=l(),zo=n("p"),kb=r("Here is an example of how to customize "),zs=n("a"),$b=r("Trainer"),xb=r(" using a custom loss function for multi-label classification:"),pf=l(),h(Kr.$$.fragment),hf=l(),it=n("p"),Ab=r("Another way to customize the training loop behavior for the PyTorch "),Ns=n("a"),qb=r("Trainer"),Db=r(" is to use "),Ls=n("a"),Sb=r("callbacks"),Pb=r(" that can inspect the training loop state (for progress reporting, logging on TensorBoard or other ML platforms\u2026) and take decisions (like early stopping)."),uf=l(),Vt=n("h2"),No=n("a"),yd=n("span"),h(Qr.$$.fragment),Ob=l(),wd=n("span"),Cb=r("Trainer"),ff=l(),b=n("div"),h(ea.$$.fragment),Ib=l(),Td=n("p"),zb=r("Trainer is a simple but feature-complete training and eval loop for PyTorch, optimized for \u{1F917} Transformers."),Nb=l(),Ed=n("p"),Lb=r("Important attributes:"),Ub=l(),we=n("ul"),Lo=n("li"),kd=n("strong"),Fb=r("model"),Wb=r(` \u2014 Always points to the core model. If using a transformers model, it will be a
`),Us=n("a"),Rb=r("PreTrainedModel"),jb=r(" subclass."),Mb=l(),J=n("li"),$d=n("strong"),Gb=r("model_wrapped"),Hb=r(` \u2014 Always points to the most external model in case one or more other modules wrap the
original model. This is the model that should be used for the forward pass. For example, under `),xd=n("code"),Bb=r("DeepSpeed"),Vb=r(`,
the inner model is wrapped in `),Ad=n("code"),Yb=r("DeepSpeed"),Zb=r(" and then again in "),qd=n("code"),Jb=r("torch.nn.DistributedDataParallel"),Xb=r(`. If the
inner model hasn\u2019t been wrapped, then `),Dd=n("code"),Kb=r("self.model_wrapped"),Qb=r(" is the same as "),Sd=n("code"),e1=r("self.model"),t1=r("."),o1=l(),Fs=n("li"),Pd=n("strong"),r1=r("is_model_parallel"),a1=r(` \u2014 Whether or not a model has been switched to a model parallel mode (different from
data parallelism, this means some of the model layers are split on different GPUs).`),n1=l(),qe=n("li"),Od=n("strong"),s1=r("place_model_on_device"),i1=r(` \u2014 Whether or not to automatically place the model on the device - it will be set
to `),Cd=n("code"),l1=r("False"),d1=r(` if model parallel or deepspeed is used, or if the default
`),Id=n("code"),c1=r("TrainingArguments.place_model_on_device"),m1=r(" is overridden to return "),zd=n("code"),p1=r("False"),h1=r(" ."),u1=l(),De=n("li"),Nd=n("strong"),f1=r("is_in_train"),g1=r(" \u2014 Whether or not a model is currently running "),Ld=n("code"),_1=r("train"),v1=r(" (e.g. when "),Ud=n("code"),b1=r("evaluate"),y1=r(` is called
while in `),Fd=n("code"),w1=r("train"),T1=r(")"),E1=l(),Uo=n("div"),h(ta.$$.fragment),k1=l(),oa=n("p"),$1=r("Add a callback to the current list of "),Wd=n("code"),x1=r("TrainerCallback"),A1=r("."),q1=l(),Fo=n("div"),h(ra.$$.fragment),D1=l(),aa=n("p"),S1=r("A helper wrapper that creates an appropriate context manager for "),Rd=n("code"),P1=r("autocast"),O1=r(` while feeding it the desired
arguments, depending on the situation.`),C1=l(),lt=n("div"),h(na.$$.fragment),I1=l(),jd=n("p"),z1=r("How the loss is computed by Trainer. By default, all models return the loss in the first element."),N1=l(),Md=n("p"),L1=r("Subclass and override for custom behavior."),U1=l(),dt=n("div"),h(sa.$$.fragment),F1=l(),Gd=n("p"),W1=r("Setup the optimizer."),R1=l(),ia=n("p"),j1=r(`We provide a reasonable default that works well. If you want to use something else, you can pass a tuple in the
Trainer\u2019s init through `),Hd=n("code"),M1=r("optimizers"),G1=r(", or subclass and override this method in a subclass."),H1=l(),ct=n("div"),h(la.$$.fragment),B1=l(),Bd=n("p"),V1=r("Setup the optimizer and the learning rate scheduler."),Y1=l(),Xe=n("p"),Z1=r(`We provide a reasonable default that works well. If you want to use something else, you can pass a tuple in the
Trainer\u2019s init through `),Vd=n("code"),J1=r("optimizers"),X1=r(", or subclass and override this method (or "),Yd=n("code"),K1=r("create_optimizer"),Q1=r(`
and/or `),Zd=n("code"),ey=r("create_scheduler"),ty=r(") in a subclass."),oy=l(),Wo=n("div"),h(da.$$.fragment),ry=l(),Jd=n("p"),ay=r(`Setup the scheduler. The optimizer of the trainer must have been set up either before this method is called or
passed as an argument.`),ny=l(),Se=n("div"),h(ca.$$.fragment),sy=l(),Xd=n("p"),iy=r("Run evaluation and returns metrics."),ly=l(),ma=n("p"),dy=r(`The calling script will be responsible for providing a method to compute metrics, as they are task-dependent
(pass it to the init `),Kd=n("code"),cy=r("compute_metrics"),my=r(" argument)."),py=l(),Qd=n("p"),hy=r("You can also subclass and override this method to inject custom behavior."),uy=l(),mt=n("div"),h(pa.$$.fragment),fy=l(),Yt=n("p"),gy=r("Prediction/evaluation loop, shared by "),ec=n("code"),_y=r("Trainer.evaluate()"),vy=r(" and "),tc=n("code"),by=r("Trainer.predict()"),yy=r("."),wy=l(),oc=n("p"),Ty=r("Works both with or without labels."),Ey=l(),Ro=n("div"),h(ha.$$.fragment),ky=l(),ua=n("p"),$y=r("For models that inherit from "),Ws=n("a"),xy=r("PreTrainedModel"),Ay=r(`, uses that method to compute the number of
floating point operations for every backward + forward pass. If using another model, either implement such a
method in the model or subclass and override this method.`),qy=l(),pt=n("div"),h(fa.$$.fragment),Dy=l(),ga=n("p"),Sy=r("Returns the evaluation "),rc=n("code"),Py=r("DataLoader"),Oy=r("."),Cy=l(),ac=n("p"),Iy=r("Subclass and override this method if you want to inject some custom behavior."),zy=l(),ht=n("div"),h(_a.$$.fragment),Ny=l(),va=n("p"),Ly=r("Returns the test "),nc=n("code"),Uy=r("DataLoader"),Fy=r("."),Wy=l(),sc=n("p"),Ry=r("Subclass and override this method if you want to inject some custom behavior."),jy=l(),Pe=n("div"),h(ba.$$.fragment),My=l(),ya=n("p"),Gy=r("Returns the training "),ic=n("code"),Hy=r("DataLoader"),By=r("."),Vy=l(),Zt=n("p"),Yy=r("Will use no sampler if "),lc=n("code"),Zy=r("self.train_dataset"),Jy=r(" does not implement "),dc=n("code"),Xy=r("__len__"),Ky=r(`, a random sampler (adapted
to distributed training if necessary) otherwise.`),Qy=l(),cc=n("p"),e0=r("Subclass and override this method if you want to inject some custom behavior."),t0=l(),ut=n("div"),h(wa.$$.fragment),o0=l(),Te=n("p"),r0=r("Launch an hyperparameter search using "),mc=n("code"),a0=r("optuna"),n0=r(" or "),pc=n("code"),s0=r("Ray Tune"),i0=r(" or "),hc=n("code"),l0=r("SigOpt"),d0=r(`. The optimized quantity is
determined by `),uc=n("code"),c0=r("compute_objective"),m0=r(`, which defaults to a function returning the evaluation loss when no
metric is provided, the sum of all metrics otherwise.`),p0=l(),h(jo.$$.fragment),h0=l(),Mo=n("div"),h(Ta.$$.fragment),u0=l(),Ea=n("p"),f0=r("Initializes a git repo in "),fc=n("code"),g0=r("self.args.hub_model_id"),_0=r("."),v0=l(),Go=n("div"),h(ka.$$.fragment),b0=l(),gc=n("p"),y0=r(`Whether or not this process is the local (e.g., on one machine if training in a distributed fashion on several
machines) main process.`),w0=l(),Ho=n("div"),h($a.$$.fragment),T0=l(),xa=n("p"),E0=r(`Whether or not this process is the global main process (when training in a distributed fashion on several
machines, this is only going to be `),_c=n("code"),k0=r("True"),$0=r(" for one process)."),x0=l(),ft=n("div"),h(Aa.$$.fragment),A0=l(),qa=n("p"),q0=r("Log "),vc=n("code"),D0=r("logs"),S0=r(" on the various objects watching training."),P0=l(),bc=n("p"),O0=r("Subclass and override this method to inject custom behavior."),C0=l(),$=n("div"),h(Da.$$.fragment),I0=l(),yc=n("p"),z0=r("Log metrics in a specially formatted way"),N0=l(),wc=n("p"),L0=r("Under distributed environment this is done only for a process with rank 0."),U0=l(),Tc=n("p"),F0=r("Notes on memory reports:"),W0=l(),Jt=n("p"),R0=r("In order to get memory usage report you need to install "),Ec=n("code"),j0=r("psutil"),M0=r(". You can do that with "),kc=n("code"),G0=r("pip install psutil"),H0=r("."),B0=l(),$c=n("p"),V0=r("Now when this method is run, you will see a report that will include: :"),Y0=l(),h(Sa.$$.fragment),Z0=l(),xc=n("p"),Ac=n("strong"),J0=r("Understanding the reports:"),X0=l(),Ke=n("ul"),Ee=n("li"),K0=r("the first segment, e.g., "),qc=n("code"),Q0=r("train__"),e2=r(", tells you which stage the metrics are for. Reports starting with "),Dc=n("code"),t2=r("init_"),o2=r(`
will be added to the first stage that gets run. So that if only evaluation is run, the memory usage for the
`),Sc=n("code"),r2=r("__init__"),a2=r(" will be reported along with the "),Pc=n("code"),n2=r("eval_"),s2=r(" metrics."),i2=l(),Xt=n("li"),l2=r("the third segment, is either "),Oc=n("code"),d2=r("cpu"),c2=r(" or "),Cc=n("code"),m2=r("gpu"),p2=r(`, tells you whether it\u2019s the general RAM or the gpu0 memory
metric.`),h2=l(),Rs=n("li"),Ic=n("code"),u2=r("*_alloc_delta"),f2=r(` - is the difference in the used/allocated memory counter between the end and the start of the
stage - it can be negative if a function released more memory than it allocated.`),g2=l(),gt=n("li"),zc=n("code"),_2=r("*_peaked_delta"),v2=r(` - is any extra memory that was consumed and then freed - relative to the current allocated
memory counter - it is never negative. When you look at the metrics of any stage you add up `),Nc=n("code"),b2=r("alloc_delta"),y2=r(` +
`),Lc=n("code"),w2=r("peaked_delta"),T2=r(" and you know how much memory was needed to complete that stage."),E2=l(),Uc=n("p"),k2=r(`The reporting happens only for process of rank 0 and gpu 0 (if there is a gpu). Typically this is enough since the
main process does the bulk of work, but it could be not quite so if model parallel is used and then other GPUs may
use a different amount of gpu memory. This is also not the same under DataParallel where gpu0 may require much more
memory than the rest since it stores the gradient and optimizer states for all participating GPUS. Perhaps in the
future these reports will evolve to measure those too.`),$2=l(),Fc=n("p"),x2=r(`The CPU RAM metric measures RSS (Resident Set Size) includes both the memory which is unique to the process and the
memory shared with other processes. It is important to note that it does not include swapped out memory, so the
reports could be imprecise.`),A2=l(),Pa=n("p"),q2=r(`The CPU peak memory is measured using a sampling thread. Due to python\u2019s GIL it may miss some of the peak memory if
that thread didn\u2019t get a chance to run when the highest memory was used. Therefore this report can be less than
reality. Using `),Wc=n("code"),D2=r("tracemalloc"),S2=r(` would have reported the exact peak memory, but it doesn\u2019t report memory allocations
outside of python. So if some C++ CUDA extension allocated its own memory it won\u2019t be reported. And therefore it
was dropped in favor of the memory sampling approach, which reads the current process memory usage.`),P2=l(),Qe=n("p"),O2=r("The GPU allocated and peak memory reporting is done with "),Rc=n("code"),C2=r("torch.cuda.memory_allocated()"),I2=r(` and
`),jc=n("code"),z2=r("torch.cuda.max_memory_allocated()"),N2=r(`. This metric reports only \u201Cdeltas\u201D for pytorch-specific allocations, as
`),Mc=n("code"),L2=r("torch.cuda"),U2=r(` memory management system doesn\u2019t track any memory allocated outside of pytorch. For example, the
very first cuda call typically loads CUDA kernels, which may take from 0.5 to 2GB of GPU memory.`),F2=l(),re=n("p"),W2=r("Note that this tracker doesn\u2019t account for memory allocations outside of "),js=n("a"),R2=r("Trainer"),j2=r(`\u2019s
`),Gc=n("code"),M2=r("__init__"),G2=r(", "),Hc=n("code"),H2=r("train"),B2=r(", "),Bc=n("code"),V2=r("evaluate"),Y2=r(" and "),Vc=n("code"),Z2=r("predict"),J2=r(" calls."),X2=l(),C=n("p"),K2=r("Because "),Yc=n("code"),Q2=r("evaluation"),ew=r(" calls may happen during "),Zc=n("code"),tw=r("train"),ow=r(`, we can\u2019t handle nested invocations because
`),Jc=n("code"),rw=r("torch.cuda.max_memory_allocated"),aw=r(" is a single counter, so if it gets reset by a nested eval call, "),Xc=n("code"),nw=r("train"),sw=r(`\u2019s
tracker will report incorrect info. If this `),Oa=n("a"),iw=r("pytorch issue"),lw=r(`
gets resolved it will be possible to change this class to be re-entrant. Until then we will only track the outer
level of `),Kc=n("code"),dw=r("train"),cw=r(", "),Qc=n("code"),mw=r("evaluate"),pw=r(" and "),em=n("code"),hw=r("predict"),uw=r(" methods. Which means that if "),tm=n("code"),fw=r("eval"),gw=r(" is called during "),om=n("code"),_w=r("train"),vw=r(`,
it\u2019s the latter that will account for its memory usage and that of the former.`),bw=l(),ke=n("p"),yw=r("This also means that if any other tool that is used along the "),Ms=n("a"),ww=r("Trainer"),Tw=r(` calls
`),rm=n("code"),Ew=r("torch.cuda.reset_peak_memory_stats"),kw=r(`, the gpu peak memory stats could be invalid. And the
`),Gs=n("a"),$w=r("Trainer"),xw=r(` will disrupt the normal behavior of any such tools that rely on calling
`),am=n("code"),Aw=r("torch.cuda.reset_peak_memory_stats"),qw=r(" themselves."),Dw=l(),nm=n("p"),Sw=r("For best performance you may want to consider turning the memory profiling off for production runs."),Pw=l(),Bo=n("div"),h(Ca.$$.fragment),Ow=l(),sm=n("p"),Cw=r("Reformat Trainer metrics values to a human-readable format"),Iw=l(),_t=n("div"),h(Ia.$$.fragment),zw=l(),za=n("p"),Nw=r("Helper to get number of samples in a "),im=n("code"),Lw=r("DataLoader"),Uw=r(" by accessing its dataset."),Fw=l(),Hs=n("p"),Ww=r("Will raise an exception if the underlying dataset does not implement method "),lm=n("code"),Rw=r("__len__"),jw=l(),vt=n("div"),h(Na.$$.fragment),Mw=l(),La=n("p"),Gw=r("Remove a callback from the current list of "),dm=n("code"),Hw=r("TrainerCallback"),Bw=r(" and returns it."),Vw=l(),Ua=n("p"),Yw=r("If the callback is not found, returns "),cm=n("code"),Zw=r("None"),Jw=r(" (and no error is raised)."),Xw=l(),X=n("div"),h(Fa.$$.fragment),Kw=l(),mm=n("p"),Qw=r("Run prediction and returns predictions and potential metrics."),e4=l(),Wa=n("p"),t4=r(`Depending on the dataset and your use case, your test dataset may contain labels. In that case, this method
will also return metrics, like in `),pm=n("code"),o4=r("evaluate()"),r4=r("."),a4=l(),h(Vo.$$.fragment),n4=l(),Ra=n("p"),s4=r("Returns: "),hm=n("em"),i4=r("NamedTuple"),l4=r(" A namedtuple with the following keys:"),d4=l(),Kt=n("ul"),Qt=n("li"),c4=r("predictions ("),um=n("code"),m4=r("np.ndarray"),p4=r("): The predictions on "),fm=n("code"),h4=r("test_dataset"),u4=r("."),f4=l(),eo=n("li"),g4=r("label_ids ("),gm=n("code"),_4=r("np.ndarray"),v4=r(", "),_m=n("em"),b4=r("optional"),y4=r("): The labels (if the dataset contained some)."),w4=l(),to=n("li"),T4=r("metrics ("),vm=n("code"),E4=r("Dict[str, float]"),k4=r(", "),bm=n("em"),$4=r("optional"),x4=r(`): The potential dictionary of metrics (if the dataset
contained labels).`),A4=l(),bt=n("div"),h(ja.$$.fragment),q4=l(),oo=n("p"),D4=r("Prediction/evaluation loop, shared by "),ym=n("code"),S4=r("Trainer.evaluate()"),P4=r(" and "),wm=n("code"),O4=r("Trainer.predict()"),C4=r("."),I4=l(),Tm=n("p"),z4=r("Works both with or without labels."),N4=l(),yt=n("div"),h(Ma.$$.fragment),L4=l(),ro=n("p"),U4=r("Perform an evaluation step on "),Em=n("code"),F4=r("model"),W4=r(" using obj:"),km=n("em"),R4=r("inputs"),j4=r("."),M4=l(),$m=n("p"),G4=r("Subclass and override to inject custom behavior."),H4=l(),Yo=n("div"),h(Ga.$$.fragment),B4=l(),et=n("p"),V4=r("Upload "),xm=n("em"),Y4=r("self.model"),Z4=r(" and "),Am=n("em"),J4=r("self.tokenizer"),X4=r(" to the \u{1F917} model hub on the repo "),qm=n("em"),K4=r("self.args.hub_model_id"),Q4=r("."),eT=l(),Zo=n("div"),h(Ha.$$.fragment),tT=l(),Ba=n("p"),oT=r("Remove a callback from the current list of "),Dm=n("code"),rT=r("TrainerCallback"),aT=r("."),nT=l(),Oe=n("div"),h(Va.$$.fragment),sT=l(),Ya=n("p"),iT=r("Save metrics into a json file for that split, e.g. "),Sm=n("code"),lT=r("train_results.json"),dT=r("."),cT=l(),Pm=n("p"),mT=r("Under distributed environment this is done only for a process with rank 0."),pT=l(),Za=n("p"),hT=r("To understand the metrics please read the docstring of "),Om=n("code"),uT=r("log_metrics()"),fT=r(`. The only
difference is that raw unformatted numbers are saved in the current method.`),gT=l(),wt=n("div"),h(Ja.$$.fragment),_T=l(),Xa=n("p"),vT=r("Will save the model, so you can reload it using "),Cm=n("code"),bT=r("from_pretrained()"),yT=r("."),wT=l(),Im=n("p"),TT=r("Will only save from the main process."),ET=l(),Tt=n("div"),h(Ka.$$.fragment),kT=l(),zm=n("p"),$T=r("Saves the Trainer state, since Trainer.save_model saves only the tokenizer with the model"),xT=l(),Nm=n("p"),AT=r("Under distributed environment this is done only for a process with rank 0."),qT=l(),Jo=n("div"),h(Qa.$$.fragment),DT=l(),Lm=n("p"),ST=r("Main training entry point."),PT=l(),Et=n("div"),h(en.$$.fragment),OT=l(),Um=n("p"),CT=r("Perform a training step on a batch of inputs."),IT=l(),Fm=n("p"),zT=r("Subclass and override to inject custom behavior."),gf=l(),ao=n("h2"),Xo=n("a"),Wm=n("span"),h(tn.$$.fragment),NT=l(),Rm=n("span"),LT=r("Seq2SeqTrainer"),_f=l(),no=n("div"),Ce=n("div"),h(on.$$.fragment),UT=l(),jm=n("p"),FT=r("Run evaluation and returns metrics."),WT=l(),rn=n("p"),RT=r(`The calling script will be responsible for providing a method to compute metrics, as they are task-dependent
(pass it to the init `),Mm=n("code"),jT=r("compute_metrics"),MT=r(" argument)."),GT=l(),Gm=n("p"),HT=r("You can also subclass and override this method to inject custom behavior."),BT=l(),K=n("div"),h(an.$$.fragment),VT=l(),Hm=n("p"),YT=r("Run prediction and returns predictions and potential metrics."),ZT=l(),nn=n("p"),JT=r(`Depending on the dataset and your use case, your test dataset may contain labels. In that case, this method
will also return metrics, like in `),Bm=n("code"),XT=r("evaluate()"),KT=r("."),QT=l(),h(Ko.$$.fragment),eE=l(),sn=n("p"),tE=r("Returns: "),Vm=n("em"),oE=r("NamedTuple"),rE=r(" A namedtuple with the following keys:"),aE=l(),so=n("ul"),io=n("li"),nE=r("predictions ("),Ym=n("code"),sE=r("np.ndarray"),iE=r("): The predictions on "),Zm=n("code"),lE=r("test_dataset"),dE=r("."),cE=l(),lo=n("li"),mE=r("label_ids ("),Jm=n("code"),pE=r("np.ndarray"),hE=r(", "),Xm=n("em"),uE=r("optional"),fE=r("): The labels (if the dataset contained some)."),gE=l(),co=n("li"),_E=r("metrics ("),Km=n("code"),vE=r("Dict[str, float]"),bE=r(", "),Qm=n("em"),yE=r("optional"),wE=r(`): The potential dictionary of metrics (if the dataset
contained labels).`),vf=l(),mo=n("h2"),Qo=n("a"),ep=n("span"),h(ln.$$.fragment),TE=l(),tp=n("span"),EE=r("TrainingArguments"),bf=l(),N=n("div"),h(dn.$$.fragment),kE=l(),cn=n("p"),$E=r("TrainingArguments is the subset of the arguments we use in our example scripts "),op=n("strong"),xE=r(`which relate to the training loop
itself`),AE=r("."),qE=l(),po=n("p"),DE=r("Using "),Bs=n("a"),SE=r("HfArgumentParser"),PE=r(" we can turn this class into "),mn=n("a"),OE=r("argparse"),CE=r(` arguments that can be specified on the command
line.`),IE=l(),de=n("div"),h(pn.$$.fragment),zE=l(),rp=n("p"),NE=r(`Returns the log level to be used depending on whether this process is the main process of node 0, main process
of node non-0, or a non-main process.`),LE=l(),ho=n("p"),UE=r("For the main process the log level defaults to "),ap=n("code"),FE=r("logging.INFO"),WE=r(" unless overridden by "),np=n("code"),RE=r("log_level"),jE=r(" argument."),ME=l(),uo=n("p"),GE=r("For the replica processes the log level defaults to "),sp=n("code"),HE=r("logging.WARNING"),BE=r(` unless overridden by
`),ip=n("code"),VE=r("log_level_replica"),YE=r(" argument."),ZE=l(),hn=n("p"),JE=r(`The choice between the main and replica process settings is made according to the return value of
`),lp=n("code"),XE=r("should_log"),KE=r("."),QE=l(),er=n("div"),h(un.$$.fragment),e5=l(),dp=n("p"),t5=r("Get number of steps used for a linear warmup."),o5=l(),kt=n("div"),h(fn.$$.fragment),r5=l(),cp=n("p"),a5=r(`A context manager for torch distributed environment where on needs to do something on the main process,
while blocking replicas, and when it\u2019s finished releasing the replicas.`),n5=l(),fo=n("p"),s5=r("One such use is for "),mp=n("code"),i5=r("datasets"),l5=r("\u2019s "),pp=n("code"),d5=r("map"),c5=r(` feature which to be efficient should be run once on the main
process, which upon completion saves a cached version of results and which then automatically gets loaded
by the replicas.`),m5=l(),tr=n("div"),h(gn.$$.fragment),p5=l(),_n=n("p"),h5=r("Serializes this instance while replace "),hp=n("code"),u5=r("Enum"),f5=r(` by their values (for JSON serialization support). It obfuscates
the token values by removing their value.`),g5=l(),or=n("div"),h(vn.$$.fragment),_5=l(),up=n("p"),v5=r("Serializes this instance to a JSON string."),b5=l(),rr=n("div"),h(bn.$$.fragment),y5=l(),fp=n("p"),w5=r("Sanitized serialization to use with TensorBoard\u2019s hparams"),yf=l(),go=n("h2"),ar=n("a"),gp=n("span"),h(yn.$$.fragment),T5=l(),_p=n("span"),E5=r("Seq2SeqTrainingArguments"),wf=l(),ae=n("div"),h(wn.$$.fragment),k5=l(),Tn=n("p"),$5=r("TrainingArguments is the subset of the arguments we use in our example scripts "),vp=n("strong"),x5=r(`which relate to the training loop
itself`),A5=r("."),q5=l(),_o=n("p"),D5=r("Using "),Vs=n("a"),S5=r("HfArgumentParser"),P5=r(" we can turn this class into "),En=n("a"),O5=r("argparse"),C5=r(` arguments that can be specified on the command
line.`),I5=l(),ne=n("p"),z5=r("sortish_sampler ("),bp=n("code"),N5=r("bool"),L5=r(", "),yp=n("em"),U5=r("optional"),F5=r(", defaults to "),wp=n("code"),W5=r("False"),R5=r(`):
Whether to use a `),Tp=n("em"),j5=r("sortish sampler"),M5=r(" or not. Only possible if the underlying datasets are "),Ep=n("em"),G5=r("Seq2SeqDataset"),H5=r(` for
now but will become generally available in the near future.`),B5=l(),D=n("p"),V5=r(`It sorts the inputs according to lengths in order to minimize the padding size, with a bit of randomness for
the training set.
predict_with_generate (`),kp=n("code"),Y5=r("bool"),Z5=r(", "),$p=n("em"),J5=r("optional"),X5=r(", defaults to "),xp=n("code"),K5=r("False"),Q5=r(`):
Whether to use generate to calculate generative metrics (ROUGE, BLEU).
generation_max_length (`),Ap=n("code"),ek=r("int"),tk=r(", "),qp=n("em"),ok=r("optional"),rk=r(`):
The `),Dp=n("code"),ak=r("max_length"),nk=r(" to use on each evaluation loop when "),Sp=n("code"),sk=r("predict_with_generate=True"),ik=r(`. Will default to
the `),Pp=n("code"),lk=r("max_length"),dk=r(` value of the model configuration.
generation_num_beams (`),Op=n("code"),ck=r("int"),mk=r(", "),Cp=n("em"),pk=r("optional"),hk=r(`):
The `),Ip=n("code"),uk=r("num_beams"),fk=r(" to use on each evaluation loop when "),zp=n("code"),gk=r("predict_with_generate=True"),_k=r(`. Will default to the
`),Np=n("code"),vk=r("num_beams"),bk=r(" value of the model configuration."),Tf=l(),vo=n("h2"),nr=n("a"),Lp=n("span"),h(kn.$$.fragment),yk=l(),Up=n("span"),wk=r("Checkpoints"),Ef=l(),ce=n("p"),Tk=r("By default, "),Ys=n("a"),Ek=r("Trainer"),kk=r(" will save all checkpoints in the "),Fp=n("code"),$k=r("output_dir"),xk=r(` you set in the
`),Zs=n("a"),Ak=r("TrainingArguments"),qk=r(" you are using. Those will go in subfolder named "),Wp=n("code"),Dk=r("checkpoint-xxx"),Sk=r(` with xxx
being the step at which the training was at.`),kf=l(),sr=n("p"),Pk=r("Resuming training from a checkpoint can be done when calling "),Js=n("a"),Ok=r("Trainer.train()"),Ck=r(" with either:"),$f=l(),ir=n("ul"),Xs=n("li"),Rp=n("code"),Ik=r("resume_from_checkpoint=True"),zk=r(" which will resume training from the latest checkpoint"),Nk=l(),Ks=n("li"),jp=n("code"),Lk=r("resume_from_checkpoint=checkpoint_dir"),Uk=r(` which will resume training from the specific checkpoint in the directory
passed.`),xf=l(),Ie=n("p"),Fk=r("In addition, you can easily save your checkpoints on the Model Hub when using "),Mp=n("code"),Wk=r("push_to_hub=True"),Rk=r(`. By default, all
the models saved in intermediate checkpoints are saved in different commits, but not the optimizer state. You can adapt
the `),Gp=n("code"),jk=r("hub-strategy"),Mk=r(" value of your "),Qs=n("a"),Gk=r("TrainingArguments"),Hk=r(" to either:"),Af=l(),lr=n("ul"),dr=n("li"),Hp=n("code"),Bk=r('"checkpoint"'),Vk=r(`: the latest checkpoint is also pushed in a subfolder named last-checkpoint, allowing you to
resume training easily with `),Bp=n("code"),Yk=r('trainer.train(resume_from_checkpoint="output_dir/last-checkpoint")'),Zk=r("."),Jk=l(),ei=n("li"),Vp=n("code"),Xk=r('"all_checkpoints"'),Kk=r(`: all checkpoints are pushed like they appear in the output folder (so you will get one
checkpoint folder per folder in your final repository)`),qf=l(),bo=n("h2"),cr=n("a"),Yp=n("span"),h($n.$$.fragment),Qk=l(),Zp=n("span"),e3=r("Logging"),Df=l(),ze=n("p"),t3=r("By default "),ti=n("a"),o3=r("Trainer"),r3=r(" will use "),Jp=n("code"),a3=r("logging.INFO"),n3=r(" for the main process and "),Xp=n("code"),s3=r("logging.WARNING"),i3=r(" for the replicas if any."),Sf=l(),$t=n("p"),l3=r("These defaults can be overridden to use any of the 5 "),Kp=n("code"),d3=r("logging"),c3=r(" levels with "),oi=n("a"),m3=r("TrainingArguments"),p3=r(`\u2019s
arguments:`),Pf=l(),mr=n("ul"),ri=n("li"),Qp=n("code"),h3=r("log_level"),u3=r(" - for the main process"),f3=l(),ai=n("li"),eh=n("code"),g3=r("log_level_replica"),_3=r(" - for the replicas"),Of=l(),Ne=n("p"),v3=r("Further, if "),ni=n("a"),b3=r("TrainingArguments"),y3=r("\u2019s "),th=n("code"),w3=r("log_on_each_node"),T3=r(" is set to "),oh=n("code"),E3=r("False"),k3=r(` only the main node will
use the log level settings for its main process, all other nodes will use the log level settings for replicas.`),Cf=l(),Q=n("p"),$3=r("Note that "),si=n("a"),x3=r("Trainer"),A3=r(" is going to set "),rh=n("code"),q3=r("transformers"),D3=r(`\u2019s log level separately for each node in its
`),ah=n("code"),S3=r("Trainer.__init__()"),P3=r(`. So you may want to set this sooner (see the next example) if you tap into other
`),nh=n("code"),O3=r("transformers"),C3=r(" functionality before creating the "),ii=n("a"),I3=r("Trainer"),z3=r(" object."),If=l(),li=n("p"),N3=r("Here is an example of how this can be used in an application:"),zf=l(),h(xn.$$.fragment),Nf=l(),di=n("p"),L3=r(`And then if you only want to see warnings on the main node and all other nodes to not print any most likely duplicated
warnings you could run it as:`),Lf=l(),h(An.$$.fragment),Uf=l(),ci=n("p"),U3=r(`In the multi-node environment if you also don\u2019t want the logs to repeat for each node\u2019s main process, you will want to
change the above to:`),Ff=l(),h(qn.$$.fragment),Wf=l(),mi=n("p"),F3=r(`and then only the main process of the first node will log at the \u201Cwarning\u201D level, and all other processes on the main
node and all processes on other nodes will log at the \u201Cerror\u201D level.`),Rf=l(),pi=n("p"),W3=r("If you need your application to be as quiet as possible you could do:"),jf=l(),h(Dn.$$.fragment),Mf=l(),pr=n("p"),R3=r("(add "),sh=n("code"),j3=r("--log_on_each_node 0"),M3=r(" if on multi-node environment)"),Gf=l(),yo=n("h2"),hr=n("a"),ih=n("span"),h(Sn.$$.fragment),G3=l(),lh=n("span"),H3=r("Randomness"),Hf=l(),me=n("p"),B3=r("When resuming from a checkpoint generated by "),hi=n("a"),V3=r("Trainer"),Y3=r(` all efforts are made to restore the
`),dh=n("em"),Z3=r("python"),J3=r(", "),ch=n("em"),X3=r("numpy"),K3=r(" and "),mh=n("em"),Q3=r("pytorch"),e$=r(` RNG states to the same states as they were at the moment of saving that checkpoint,
which should make the \u201Cstop and resume\u201D style of training as close as possible to non-stop training.`),Bf=l(),xt=n("p"),t$=r(`However, due to various default non-deterministic pytorch settings this might not fully work. If you want full
determinism please refer to `),Pn=n("a"),o$=r("Controlling sources of randomness"),r$=r(`. As explained in the document, that some of those settings
that make things deterministic (.e.g., `),ph=n("code"),a$=r("torch.backends.cudnn.deterministic"),n$=r(`) may slow things down, therefore this
can\u2019t be done by default, but you can enable those yourself if needed.`),Vf=l(),wo=n("h2"),ur=n("a"),hh=n("span"),h(On.$$.fragment),s$=l(),uh=n("span"),i$=r("Trainer Integrations"),Yf=l(),fr=n("p"),l$=r("The "),ui=n("a"),d$=r("Trainer"),c$=r(` has been extended to support libraries that may dramatically improve your training
time and fit much bigger models.`),Zf=l(),Le=n("p"),m$=r("Currently it supports third party solutions, "),Cn=n("a"),p$=r("DeepSpeed"),h$=r(" and "),In=n("a"),u$=r("FairScale"),f$=r(", which implement parts of the paper "),zn=n("a"),g$=r(`ZeRO: Memory Optimizations
Toward Training Trillion Parameter Models, by Samyam Rajbhandari, Jeff Rasley, Olatunji Ruwase, Yuxiong He`),_$=r("."),Jf=l(),fi=n("p"),v$=r("This provided support is new and experimental as of this writing."),Xf=l(),gi=n("a"),Kf=l(),To=n("h3"),gr=n("a"),fh=n("span"),h(Nn.$$.fragment),b$=l(),gh=n("span"),y$=r("CUDA Extension Installation Notes"),Qf=l(),_i=n("p"),w$=r("As of this writing, both FairScale and Deepspeed require compilation of CUDA C++ code, before they can be used."),eg=l(),At=n("p"),T$=r("While all installation issues should be dealt with through the corresponding GitHub Issues of "),Ln=n("a"),E$=r("FairScale"),k$=r(" and "),Un=n("a"),$$=r("Deepspeed"),x$=r(`, there are a few common issues that one may encounter while building
any PyTorch extension that needs to build CUDA extensions.`),tg=l(),vi=n("p"),A$=r("Therefore, if you encounter a CUDA-related build issue while doing one of the following or both:"),og=l(),h(Fn.$$.fragment),rg=l(),bi=n("p"),q$=r("please, read the following notes first."),ag=l(),qt=n("p"),D$=r("In these notes we give examples for what to do when "),_h=n("code"),S$=r("pytorch"),P$=r(" has been built with CUDA "),vh=n("code"),O$=r("10.2"),C$=r(`. If your situation is
different remember to adjust the version number to the one you are after.`),ng=l(),Eo=n("h4"),_r=n("a"),bh=n("span"),h(Wn.$$.fragment),I$=l(),yh=n("span"),z$=r("Possible problem #1"),sg=l(),yi=n("p"),N$=r(`While, Pytorch comes with its own CUDA toolkit, to build these two projects you must have an identical version of CUDA
installed system-wide.`),ig=l(),Ue=n("p"),L$=r("For example, if you installed "),wh=n("code"),U$=r("pytorch"),F$=r(" with "),Th=n("code"),W$=r("cudatoolkit==10.2"),R$=r(` in the Python environment, you also need to have
CUDA `),Eh=n("code"),j$=r("10.2"),M$=r(" installed system-wide."),lg=l(),Dt=n("p"),G$=r("The exact location may vary from system to system, but "),kh=n("code"),H$=r("/usr/local/cuda-10.2"),B$=r(` is the most common location on many
Unix systems. When CUDA is correctly set up and added to the `),$h=n("code"),V$=r("PATH"),Y$=r(` environment variable, one can find the
installation location by doing:`),dg=l(),h(Rn.$$.fragment),cg=l(),vr=n("p"),Z$=r(`If you don\u2019t have CUDA installed system-wide, install it first. You will find the instructions by using your favorite
search engine. For example, if you\u2019re on Ubuntu you may want to search for: `),jn=n("a"),J$=r("ubuntu cuda 10.2 install"),X$=r("."),mg=l(),ko=n("h4"),br=n("a"),xh=n("span"),h(Mn.$$.fragment),K$=l(),Ah=n("span"),Q$=r("Possible problem #2"),pg=l(),wi=n("p"),ex=r(`Another possible common problem is that you may have more than one CUDA toolkit installed system-wide. For example you
may have:`),hg=l(),h(Gn.$$.fragment),ug=l(),St=n("p"),tx=r("Now, in this situation you need to make sure that your "),qh=n("code"),ox=r("PATH"),rx=r(" and "),Dh=n("code"),ax=r("LD_LIBRARY_PATH"),nx=r(` environment variables contain
the correct paths to the desired CUDA version. Typically, package installers will set these to contain whatever the
last version was installed. If you encounter the problem, where the package build fails because it can\u2019t find the right
CUDA version despite you having it installed system-wide, it means that you need to adjust the 2 aforementioned
environment variables.`),fg=l(),Ti=n("p"),sx=r("First, you may look at their contents:"),gg=l(),h(Hn.$$.fragment),_g=l(),Ei=n("p"),ix=r("so you get an idea of what is inside."),vg=l(),yr=n("p"),lx=r("It\u2019s possible that "),Sh=n("code"),dx=r("LD_LIBRARY_PATH"),cx=r(" is empty."),bg=l(),tt=n("p"),Ph=n("code"),mx=r("PATH"),px=r(" lists the locations of where executables can be found and "),Oh=n("code"),hx=r("LD_LIBRARY_PATH"),ux=r(` is for where shared libraries
are to looked for. In both cases, earlier entries have priority over the later ones. `),Ch=n("code"),fx=r(":"),gx=r(` is used to separate multiple
entries.`),yg=l(),ki=n("p"),_x=r(`Now, to tell the build program where to find the specific CUDA toolkit, insert the desired paths to be listed first by
doing:`),wg=l(),h(Bn.$$.fragment),Tg=l(),$i=n("p"),vx=r("Note that we aren\u2019t overwriting the existing values, but prepending instead."),Eg=l(),Fe=n("p"),bx=r(`Of course, adjust the version number, the full path if need be. Check that the directories you assign actually do
exist. `),Ih=n("code"),yx=r("lib64"),wx=r(" sub-directory is where the various CUDA "),zh=n("code"),Tx=r(".so"),Ex=r(" objects, like "),Nh=n("code"),kx=r("libcudart.so"),$x=r(` reside, it\u2019s unlikely
that your system will have it named differently, but if it is adjust it to reflect your reality.`),kg=l(),$o=n("h4"),wr=n("a"),Lh=n("span"),h(Vn.$$.fragment),xx=l(),Uh=n("span"),Ax=r("Possible problem #3"),$g=l(),Pt=n("p"),qx=r("Some older CUDA versions may refuse to build with newer compilers. For example, you my have "),Fh=n("code"),Dx=r("gcc-9"),Sx=r(` but it wants
`),Wh=n("code"),Px=r("gcc-7"),Ox=r("."),xg=l(),xi=n("p"),Cx=r("There are various ways to go about it."),Ag=l(),Ai=n("p"),Ix=r("If you can install the latest CUDA toolkit it typically should support the newer compiler."),qg=l(),Tr=n("p"),zx=r(`Alternatively, you could install the lower version of the compiler in addition to the one you already have, or you may
already have it but it\u2019s not the default one, so the build system can\u2019t see it. If you have `),Rh=n("code"),Nx=r("gcc-7"),Lx=r(` installed but the
build system complains it can\u2019t find it, the following might do the trick:`),Dg=l(),h(Yn.$$.fragment),Sg=l(),M=n("p"),Ux=r("Here, we are making a symlink to "),jh=n("code"),Fx=r("gcc-7"),Wx=r(" from "),Mh=n("code"),Rx=r("/usr/local/cuda-10.2/bin/gcc"),jx=r(` and since
`),Gh=n("code"),Mx=r("/usr/local/cuda-10.2/bin/"),Gx=r(" should be in the "),Hh=n("code"),Hx=r("PATH"),Bx=r(` environment variable (see the previous problem\u2019s solution), it
should find `),Bh=n("code"),Vx=r("gcc-7"),Yx=r(" (and "),Vh=n("code"),Zx=r("g++7"),Jx=r(") and then the build will succeed."),Pg=l(),qi=n("p"),Xx=r("As always make sure to edit the paths in the example to match your situation."),Og=l(),xo=n("h3"),Er=n("a"),Yh=n("span"),h(Zn.$$.fragment),Kx=l(),Zh=n("span"),Qx=r("FairScale"),Cg=l(),We=n("p"),e6=r("By integrating "),Jn=n("a"),t6=r("FairScale"),o6=r(" the "),Di=n("a"),r6=r("Trainer"),a6=r(`
provides support for the following features from `),Xn=n("a"),n6=r("the ZeRO paper"),s6=r(":"),Ig=l(),Re=n("ol"),Jh=n("li"),i6=r("Optimizer State Sharding"),l6=l(),Xh=n("li"),d6=r("Gradient Sharding"),c6=l(),Kh=n("li"),m6=r("Model Parameters Sharding (new and very experimental)"),p6=l(),Qh=n("li"),h6=r("CPU offload (new and very experimental)"),zg=l(),Si=n("p"),u6=r("You will need at least two GPUs to use this feature."),Ng=l(),Kn=n("p"),eu=n("strong"),f6=r("Installation"),g6=r(":"),Lg=l(),Pi=n("p"),_6=r("Install the library via pypi:"),Ug=l(),h(Qn.$$.fragment),Fg=l(),Ot=n("p"),v6=r("or via "),tu=n("code"),b6=r("transformers"),y6=r("\u2019 "),ou=n("code"),w6=r("extras"),T6=r(":"),Wg=l(),h(es.$$.fragment),Rg=l(),Ct=n("p"),E6=r("(available starting from "),ru=n("code"),k6=r("transformers==4.6.0"),$6=r(") or find more details on "),ts=n("a"),x6=r("the FairScale\u2019s GitHub page"),A6=r("."),jg=l(),kr=n("p"),q6=r("If you\u2019re still struggling with the build, first make sure to read "),Oi=n("a"),D6=r("CUDA Extension Installation Notes"),S6=r("."),Mg=l(),Ci=n("p"),P6=r("If it\u2019s still not resolved the build issue, here are a few more ideas."),Gg=l(),os=n("p"),au=n("code"),O6=r("fairscale"),C6=r(` seems to have an issue with the recently introduced by pip build isolation feature. If you have a problem
with it, you may want to try one of:`),Hg=l(),h(rs.$$.fragment),Bg=l(),Ii=n("p"),I6=r("or:"),Vg=l(),h(as.$$.fragment),Yg=l(),ns=n("p"),nu=n("code"),z6=r("fairscale"),N6=r(" also has issues with building against pytorch-nightly, so if you use it you may have to try one of:"),Zg=l(),h(ss.$$.fragment),Jg=l(),zi=n("p"),L6=r("or:"),Xg=l(),h(is.$$.fragment),Kg=l(),Ni=n("p"),U6=r("Of course, adjust the urls to match the cuda version you use."),Qg=l(),$r=n("p"),F6=r(`If after trying everything suggested you still encounter build issues, please, proceed with the GitHub Issue of
`),ls=n("a"),W6=r("FairScale"),R6=r("."),e_=l(),ds=n("p"),su=n("strong"),j6=r("Usage"),M6=r(":"),t_=l(),It=n("p"),G6=r("To use the first version of Sharded data-parallelism, add "),iu=n("code"),H6=r("--sharded_ddp simple"),B6=r(` to the command line arguments, and
make sure you have added the distributed launcher `),lu=n("code"),V6=r("-m torch.distributed.launch --nproc_per_node=NUMBER_OF_GPUS_YOU_HAVE"),Y6=r(" if you haven\u2019t been using it already."),o_=l(),xr=n("p"),Z6=r("For example here is how you could use it for "),du=n("code"),J6=r("run_translation.py"),X6=r(" with 2 GPUs:"),r_=l(),h(cs.$$.fragment),a_=l(),Li=n("p"),K6=r("Notes:"),n_=l(),je=n("ul"),cu=n("li"),Q6=r("This feature requires distributed training (so multiple GPUs)."),eA=l(),mu=n("li"),tA=r("It is not implemented for TPUs."),oA=l(),ms=n("li"),rA=r("It works with "),pu=n("code"),aA=r("--fp16"),nA=r(" too, to make things even faster."),sA=l(),ps=n("li"),iA=r("One of the main benefits of enabling "),hu=n("code"),lA=r("--sharded_ddp simple"),dA=r(` is that it uses a lot less GPU memory, so you should be
able to use significantly larger batch sizes using the same hardware (e.g. 3x and even bigger) which should lead to
significantly shorter training time.`),s_=l(),hs=n("ol"),ot=n("li"),cA=r("To use the second version of Sharded data-parallelism, add "),uu=n("code"),mA=r("--sharded_ddp zero_dp_2"),pA=r(" or "),fu=n("code"),hA=r("--sharded_ddp zero_dp_3"),uA=r(" to the command line arguments, and make sure you have added the distributed launcher "),gu=n("code"),fA=r("-m torch.distributed.launch --nproc_per_node=NUMBER_OF_GPUS_YOU_HAVE"),gA=r(" if you haven\u2019t been using it already."),i_=l(),Ar=n("p"),_A=r("For example here is how you could use it for "),_u=n("code"),vA=r("run_translation.py"),bA=r(" with 2 GPUs:"),l_=l(),h(us.$$.fragment),d_=l(),Ao=n("p"),vu=n("code"),yA=r("zero_dp_2"),wA=r(" is an optimized version of the simple wrapper, while "),bu=n("code"),TA=r("zero_dp_3"),EA=r(` fully shards model weights,
gradients and optimizer states.`),c_=l(),zt=n("p"),kA=r("Both are compatible with adding "),yu=n("code"),$A=r("cpu_offload"),xA=r(" to enable ZeRO-offload (activate it like this: "),wu=n("code"),AA=r('--sharded_ddp "zero_dp_2 cpu_offload"'),qA=r(")."),m_=l(),Ui=n("p"),DA=r("Notes:"),p_=l(),pe=n("ul"),Tu=n("li"),SA=r("This feature requires distributed training (so multiple GPUs)."),PA=l(),Eu=n("li"),OA=r("It is not implemented for TPUs."),CA=l(),fs=n("li"),IA=r("It works with "),ku=n("code"),zA=r("--fp16"),NA=r(" too, to make things even faster."),LA=l(),qo=n("li"),UA=r("The "),$u=n("code"),FA=r("cpu_offload"),WA=r(" additional option requires "),xu=n("code"),RA=r("--fp16"),jA=r("."),MA=l(),Au=n("li"),GA=r(`This is an area of active development, so make sure you have a source install of fairscale to use this feature as
some bugs you encounter may have been fixed there already.`),h_=l(),Fi=n("p"),HA=r("Known caveats:"),u_=l(),qr=n("ul"),Do=n("li"),BA=r("This feature is incompatible with "),qu=n("code"),VA=r("--predict_with_generate"),YA=r(" in the "),Du=n("em"),ZA=r("run_translation.py"),JA=r(" script."),XA=l(),$e=n("li"),KA=r("Using "),Su=n("code"),QA=r("--sharded_ddp zero_dp_3"),e9=r(` requires wrapping each layer of the model in the special container
`),Pu=n("code"),t9=r("FullyShardedDataParallelism"),o9=r(" of fairscale. It should be used with the option "),Ou=n("code"),r9=r("auto_wrap"),a9=r(` if you are not
doing this yourself: `),Cu=n("code"),n9=r('--sharded_ddp "zero_dp_3 auto_wrap"'),s9=r("."),f_=l(),Wi=n("p"),i9=r("Sections that were moved:"),g_=l(),y=n("p"),l9=r("[ "),Ri=n("a"),d9=r("DeepSpeed"),Iu=n("a"),c9=r(`
| `),ji=n("a"),m9=r("Installation"),zu=n("a"),p9=r(`
| `),Mi=n("a"),h9=r("Deployment with multiple GPUs"),Nu=n("a"),u9=r(`
| `),Gi=n("a"),f9=r("Deployment with one GPU"),Lu=n("a"),g9=r(`
| `),Hi=n("a"),_9=r("Deployment in Notebooks"),Uu=n("a"),v9=r(`
| `),Bi=n("a"),b9=r("Configuration"),Fu=n("a"),y9=r(`
| `),Vi=n("a"),w9=r("Passing Configuration"),Wu=n("a"),T9=r(`
| `),Yi=n("a"),E9=r("Shared Configuration"),Ru=n("a"),k9=r(`
| `),Zi=n("a"),$9=r("ZeRO"),ju=n("a"),x9=r(`
| `),Ji=n("a"),A9=r("ZeRO-2 Config"),Mu=n("a"),q9=r(`
| `),Xi=n("a"),D9=r("ZeRO-3 Config"),Gu=n("a"),S9=r(`
| `),Ki=n("a"),P9=r("NVMe Support"),Hu=n("a"),O9=r(`
| `),Qi=n("a"),C9=r("ZeRO-2 vs ZeRO-3 Performance"),Bu=n("a"),I9=r(`
| `),el=n("a"),z9=r("ZeRO-2 Example"),Vu=n("a"),N9=r(`
| `),tl=n("a"),L9=r("ZeRO-3 Example"),Yu=n("a"),U9=r(`
| `),ol=n("a"),F9=r("Optimizer"),Zu=n("a"),W9=r(`
| `),rl=n("a"),R9=r("Scheduler"),Ju=n("a"),j9=r(`
| `),al=n("a"),M9=r("fp32 Precision"),Xu=n("a"),G9=r(`
| `),nl=n("a"),H9=r("Automatic Mixed Precision"),Ku=n("a"),B9=r(`
| `),sl=n("a"),V9=r("Batch Size"),Qu=n("a"),Y9=r(`
| `),il=n("a"),Z9=r("Gradient Accumulation"),ef=n("a"),J9=r(`
| `),ll=n("a"),X9=r("Gradient Clipping"),tf=n("a"),K9=r(`
| `),dl=n("a"),Q9=r("Getting The Model Weights Out"),of=n("a"),eq=r(`
]`),this.h()},l(t){const c=tI('[data-svelte="svelte-1phssyn"]',document.head);E=s(c,"META",{name:!0,content:!0}),c.forEach(o),L=d(t),x=s(t,"H1",{class:!0});var gs=i(x);S=s(gs,"A",{id:!0,class:!0,href:!0});var rf=i(S);fe=s(rf,"SPAN",{});var af=i(fe);u(W.$$.fragment,af),af.forEach(o),rf.forEach(o),R=d(gs),H=s(gs,"SPAN",{});var nf=i(H);ge=a(nf,"Trainer"),nf.forEach(o),gs.forEach(o),ee=d(t),j=s(t,"P",{});var cl=i(j);se=a(cl,"The "),ie=s(cl,"A",{href:!0});var kq=i(ie);te=a(kq,"Trainer"),kq.forEach(o),le=a(cl," class provides an API for feature-complete training in PyTorch for most standard use cases. It\u2019s used in most of the "),Y=s(cl,"A",{href:!0});var $q=i(Y);Ze=a($q,"example scripts"),$q.forEach(o),_e=a(cl,"."),cl.forEach(o),z=d(t),O=s(t,"P",{});var ml=i(O);rt=a(ml,"Before instantiating your "),oe=s(ml,"A",{href:!0});var xq=i(oe);at=a(xq,"Trainer"),xq.forEach(o),nt=a(ml,", create a "),ve=s(ml,"A",{href:!0});var Aq=i(ve);Vr=a(Aq,"TrainingArguments"),Aq.forEach(o),Yr=a(ml," to access all the points of customization during training."),ml.forEach(o),Je=d(t),Ae=s(t,"P",{});var v_=i(Ae);Zr=a(v_,"The API supports distributed training on multiple GPUs/TPUs, mixed precision through "),be=s(v_,"A",{href:!0,rel:!0});var qq=i(be);Jr=a(qq,"NVIDIA Apex"),qq.forEach(o),Xr=a(v_," and Native AMP for PyTorch."),v_.forEach(o),Z=d(t),B=s(t,"P",{});var b_=i(B);ys=a(b_,"The "),ye=s(b_,"A",{href:!0});var Dq=i(ye);Oo=a(Dq,"Trainer"),Dq.forEach(o),ws=a(b_," contains the basic training loop which supports the above features. To inject custom behavior you can subclass them and override the following methods:"),b_.forEach(o),Bt=d(t),q=s(t,"UL",{});var I=i(q);V=s(I,"LI",{});var tq=i(V);Co=s(tq,"STRONG",{});var Sq=i(Co);Ts=a(Sq,"get_train_dataloader"),Sq.forEach(o),Es=a(tq," \u2014 Creates the training DataLoader."),tq.forEach(o),ks=d(I),$s=s(I,"LI",{});var oq=i($s);id=s(oq,"STRONG",{});var Pq=i(id);jv=a(Pq,"get_eval_dataloader"),Pq.forEach(o),Mv=a(oq," \u2014 Creates the evaluation DataLoader."),oq.forEach(o),Gv=d(I),xs=s(I,"LI",{});var rq=i(xs);ld=s(rq,"STRONG",{});var Oq=i(ld);Hv=a(Oq,"get_test_dataloader"),Oq.forEach(o),Bv=a(rq," \u2014 Creates the test DataLoader."),rq.forEach(o),Vv=d(I),As=s(I,"LI",{});var aq=i(As);dd=s(aq,"STRONG",{});var Cq=i(dd);Yv=a(Cq,"log"),Cq.forEach(o),Zv=a(aq," \u2014 Logs information on the various objects watching training."),aq.forEach(o),Jv=d(I),st=s(I,"LI",{});var _s=i(st);cd=s(_s,"STRONG",{});var Iq=i(cd);Xv=a(Iq,"create_optimizer_and_scheduler"),Iq.forEach(o),Kv=a(_s,` \u2014 Sets up the optimizer and learning rate scheduler if they were not passed at
init. Note, that you can also subclass or override the `),md=s(_s,"CODE",{});var zq=i(md);Qv=a(zq,"create_optimizer"),zq.forEach(o),eb=a(_s," and "),pd=s(_s,"CODE",{});var Nq=i(pd);tb=a(Nq,"create_scheduler"),Nq.forEach(o),ob=a(_s,` methods
separately.`),_s.forEach(o),rb=d(I),qs=s(I,"LI",{});var nq=i(qs);hd=s(nq,"STRONG",{});var Lq=i(hd);ab=a(Lq,"create_optimizer"),Lq.forEach(o),nb=a(nq," \u2014 Sets up the optimizer if it wasn\u2019t passed at init."),nq.forEach(o),sb=d(I),Ds=s(I,"LI",{});var sq=i(Ds);ud=s(sq,"STRONG",{});var Uq=i(ud);ib=a(Uq,"create_scheduler"),Uq.forEach(o),lb=a(sq," \u2014 Sets up the learning rate scheduler if it wasn\u2019t passed at init."),sq.forEach(o),db=d(I),Ss=s(I,"LI",{});var iq=i(Ss);fd=s(iq,"STRONG",{});var Fq=i(fd);cb=a(Fq,"compute_loss"),Fq.forEach(o),mb=a(iq," - Computes the loss on a batch of training inputs."),iq.forEach(o),pb=d(I),Ps=s(I,"LI",{});var lq=i(Ps);gd=s(lq,"STRONG",{});var Wq=i(gd);hb=a(Wq,"training_step"),Wq.forEach(o),ub=a(lq," \u2014 Performs a training step."),lq.forEach(o),fb=d(I),Os=s(I,"LI",{});var dq=i(Os);_d=s(dq,"STRONG",{});var Rq=i(_d);gb=a(Rq,"prediction_step"),Rq.forEach(o),_b=a(dq," \u2014 Performs an evaluation/test step."),dq.forEach(o),vb=d(I),Cs=s(I,"LI",{});var cq=i(Cs);vd=s(cq,"STRONG",{});var jq=i(vd);bb=a(jq,"evaluate"),jq.forEach(o),yb=a(cq," \u2014 Runs an evaluation loop and returns metrics."),cq.forEach(o),wb=d(I),Is=s(I,"LI",{});var mq=i(Is);bd=s(mq,"STRONG",{});var Mq=i(bd);Tb=a(Mq,"predict"),Mq.forEach(o),Eb=a(mq," \u2014 Returns predictions (with metrics if labels are available) on a test set."),mq.forEach(o),I.forEach(o),cf=d(t),u(Io.$$.fragment,t),mf=d(t),zo=s(t,"P",{});var y_=i(zo);kb=a(y_,"Here is an example of how to customize "),zs=s(y_,"A",{href:!0});var Gq=i(zs);$b=a(Gq,"Trainer"),Gq.forEach(o),xb=a(y_," using a custom loss function for multi-label classification:"),y_.forEach(o),pf=d(t),u(Kr.$$.fragment,t),hf=d(t),it=s(t,"P",{});var pl=i(it);Ab=a(pl,"Another way to customize the training loop behavior for the PyTorch "),Ns=s(pl,"A",{href:!0});var Hq=i(Ns);qb=a(Hq,"Trainer"),Hq.forEach(o),Db=a(pl," is to use "),Ls=s(pl,"A",{href:!0});var Bq=i(Ls);Sb=a(Bq,"callbacks"),Bq.forEach(o),Pb=a(pl," that can inspect the training loop state (for progress reporting, logging on TensorBoard or other ML platforms\u2026) and take decisions (like early stopping)."),pl.forEach(o),uf=d(t),Vt=s(t,"H2",{class:!0});var w_=i(Vt);No=s(w_,"A",{id:!0,class:!0,href:!0});var Vq=i(No);yd=s(Vq,"SPAN",{});var Yq=i(yd);u(Qr.$$.fragment,Yq),Yq.forEach(o),Vq.forEach(o),Ob=d(w_),wd=s(w_,"SPAN",{});var Zq=i(wd);Cb=a(Zq,"Trainer"),Zq.forEach(o),w_.forEach(o),ff=d(t),b=s(t,"DIV",{class:!0});var T=i(b);u(ea.$$.fragment,T),Ib=d(T),Td=s(T,"P",{});var Jq=i(Td);zb=a(Jq,"Trainer is a simple but feature-complete training and eval loop for PyTorch, optimized for \u{1F917} Transformers."),Jq.forEach(o),Nb=d(T),Ed=s(T,"P",{});var Xq=i(Ed);Lb=a(Xq,"Important attributes:"),Xq.forEach(o),Ub=d(T),we=s(T,"UL",{});var Nt=i(we);Lo=s(Nt,"LI",{});var sf=i(Lo);kd=s(sf,"STRONG",{});var Kq=i(kd);Fb=a(Kq,"model"),Kq.forEach(o),Wb=a(sf,` \u2014 Always points to the core model. If using a transformers model, it will be a
`),Us=s(sf,"A",{href:!0});var Qq=i(Us);Rb=a(Qq,"PreTrainedModel"),Qq.forEach(o),jb=a(sf," subclass."),sf.forEach(o),Mb=d(Nt),J=s(Nt,"LI",{});var xe=i(J);$d=s(xe,"STRONG",{});var e7=i($d);Gb=a(e7,"model_wrapped"),e7.forEach(o),Hb=a(xe,` \u2014 Always points to the most external model in case one or more other modules wrap the
original model. This is the model that should be used for the forward pass. For example, under `),xd=s(xe,"CODE",{});var t7=i(xd);Bb=a(t7,"DeepSpeed"),t7.forEach(o),Vb=a(xe,`,
the inner model is wrapped in `),Ad=s(xe,"CODE",{});var o7=i(Ad);Yb=a(o7,"DeepSpeed"),o7.forEach(o),Zb=a(xe," and then again in "),qd=s(xe,"CODE",{});var r7=i(qd);Jb=a(r7,"torch.nn.DistributedDataParallel"),r7.forEach(o),Xb=a(xe,`. If the
inner model hasn\u2019t been wrapped, then `),Dd=s(xe,"CODE",{});var a7=i(Dd);Kb=a(a7,"self.model_wrapped"),a7.forEach(o),Qb=a(xe," is the same as "),Sd=s(xe,"CODE",{});var n7=i(Sd);e1=a(n7,"self.model"),n7.forEach(o),t1=a(xe,"."),xe.forEach(o),o1=d(Nt),Fs=s(Nt,"LI",{});var pq=i(Fs);Pd=s(pq,"STRONG",{});var s7=i(Pd);r1=a(s7,"is_model_parallel"),s7.forEach(o),a1=a(pq,` \u2014 Whether or not a model has been switched to a model parallel mode (different from
data parallelism, this means some of the model layers are split on different GPUs).`),pq.forEach(o),n1=d(Nt),qe=s(Nt,"LI",{});var So=i(qe);Od=s(So,"STRONG",{});var i7=i(Od);s1=a(i7,"place_model_on_device"),i7.forEach(o),i1=a(So,` \u2014 Whether or not to automatically place the model on the device - it will be set
to `),Cd=s(So,"CODE",{});var l7=i(Cd);l1=a(l7,"False"),l7.forEach(o),d1=a(So,` if model parallel or deepspeed is used, or if the default
`),Id=s(So,"CODE",{});var d7=i(Id);c1=a(d7,"TrainingArguments.place_model_on_device"),d7.forEach(o),m1=a(So," is overridden to return "),zd=s(So,"CODE",{});var c7=i(zd);p1=a(c7,"False"),c7.forEach(o),h1=a(So," ."),So.forEach(o),u1=d(Nt),De=s(Nt,"LI",{});var Po=i(De);Nd=s(Po,"STRONG",{});var m7=i(Nd);f1=a(m7,"is_in_train"),m7.forEach(o),g1=a(Po," \u2014 Whether or not a model is currently running "),Ld=s(Po,"CODE",{});var p7=i(Ld);_1=a(p7,"train"),p7.forEach(o),v1=a(Po," (e.g. when "),Ud=s(Po,"CODE",{});var h7=i(Ud);b1=a(h7,"evaluate"),h7.forEach(o),y1=a(Po,` is called
while in `),Fd=s(Po,"CODE",{});var u7=i(Fd);w1=a(u7,"train"),u7.forEach(o),T1=a(Po,")"),Po.forEach(o),Nt.forEach(o),E1=d(T),Uo=s(T,"DIV",{class:!0});var T_=i(Uo);u(ta.$$.fragment,T_),k1=d(T_),oa=s(T_,"P",{});var E_=i(oa);$1=a(E_,"Add a callback to the current list of "),Wd=s(E_,"CODE",{});var f7=i(Wd);x1=a(f7,"TrainerCallback"),f7.forEach(o),A1=a(E_,"."),E_.forEach(o),T_.forEach(o),q1=d(T),Fo=s(T,"DIV",{class:!0});var k_=i(Fo);u(ra.$$.fragment,k_),D1=d(k_),aa=s(k_,"P",{});var $_=i(aa);S1=a($_,"A helper wrapper that creates an appropriate context manager for "),Rd=s($_,"CODE",{});var g7=i(Rd);P1=a(g7,"autocast"),g7.forEach(o),O1=a($_,` while feeding it the desired
arguments, depending on the situation.`),$_.forEach(o),k_.forEach(o),C1=d(T),lt=s(T,"DIV",{class:!0});var hl=i(lt);u(na.$$.fragment,hl),I1=d(hl),jd=s(hl,"P",{});var _7=i(jd);z1=a(_7,"How the loss is computed by Trainer. By default, all models return the loss in the first element."),_7.forEach(o),N1=d(hl),Md=s(hl,"P",{});var v7=i(Md);L1=a(v7,"Subclass and override for custom behavior."),v7.forEach(o),hl.forEach(o),U1=d(T),dt=s(T,"DIV",{class:!0});var ul=i(dt);u(sa.$$.fragment,ul),F1=d(ul),Gd=s(ul,"P",{});var b7=i(Gd);W1=a(b7,"Setup the optimizer."),b7.forEach(o),R1=d(ul),ia=s(ul,"P",{});var x_=i(ia);j1=a(x_,`We provide a reasonable default that works well. If you want to use something else, you can pass a tuple in the
Trainer\u2019s init through `),Hd=s(x_,"CODE",{});var y7=i(Hd);M1=a(y7,"optimizers"),y7.forEach(o),G1=a(x_,", or subclass and override this method in a subclass."),x_.forEach(o),ul.forEach(o),H1=d(T),ct=s(T,"DIV",{class:!0});var fl=i(ct);u(la.$$.fragment,fl),B1=d(fl),Bd=s(fl,"P",{});var w7=i(Bd);V1=a(w7,"Setup the optimizer and the learning rate scheduler."),w7.forEach(o),Y1=d(fl),Xe=s(fl,"P",{});var Dr=i(Xe);Z1=a(Dr,`We provide a reasonable default that works well. If you want to use something else, you can pass a tuple in the
Trainer\u2019s init through `),Vd=s(Dr,"CODE",{});var T7=i(Vd);J1=a(T7,"optimizers"),T7.forEach(o),X1=a(Dr,", or subclass and override this method (or "),Yd=s(Dr,"CODE",{});var E7=i(Yd);K1=a(E7,"create_optimizer"),E7.forEach(o),Q1=a(Dr,`
and/or `),Zd=s(Dr,"CODE",{});var k7=i(Zd);ey=a(k7,"create_scheduler"),k7.forEach(o),ty=a(Dr,") in a subclass."),Dr.forEach(o),fl.forEach(o),oy=d(T),Wo=s(T,"DIV",{class:!0});var A_=i(Wo);u(da.$$.fragment,A_),ry=d(A_),Jd=s(A_,"P",{});var $7=i(Jd);ay=a($7,`Setup the scheduler. The optimizer of the trainer must have been set up either before this method is called or
passed as an argument.`),$7.forEach(o),A_.forEach(o),ny=d(T),Se=s(T,"DIV",{class:!0});var Sr=i(Se);u(ca.$$.fragment,Sr),sy=d(Sr),Xd=s(Sr,"P",{});var x7=i(Xd);iy=a(x7,"Run evaluation and returns metrics."),x7.forEach(o),ly=d(Sr),ma=s(Sr,"P",{});var q_=i(ma);dy=a(q_,`The calling script will be responsible for providing a method to compute metrics, as they are task-dependent
(pass it to the init `),Kd=s(q_,"CODE",{});var A7=i(Kd);cy=a(A7,"compute_metrics"),A7.forEach(o),my=a(q_," argument)."),q_.forEach(o),py=d(Sr),Qd=s(Sr,"P",{});var q7=i(Qd);hy=a(q7,"You can also subclass and override this method to inject custom behavior."),q7.forEach(o),Sr.forEach(o),uy=d(T),mt=s(T,"DIV",{class:!0});var gl=i(mt);u(pa.$$.fragment,gl),fy=d(gl),Yt=s(gl,"P",{});var _l=i(Yt);gy=a(_l,"Prediction/evaluation loop, shared by "),ec=s(_l,"CODE",{});var D7=i(ec);_y=a(D7,"Trainer.evaluate()"),D7.forEach(o),vy=a(_l," and "),tc=s(_l,"CODE",{});var S7=i(tc);by=a(S7,"Trainer.predict()"),S7.forEach(o),yy=a(_l,"."),_l.forEach(o),wy=d(gl),oc=s(gl,"P",{});var P7=i(oc);Ty=a(P7,"Works both with or without labels."),P7.forEach(o),gl.forEach(o),Ey=d(T),Ro=s(T,"DIV",{class:!0});var D_=i(Ro);u(ha.$$.fragment,D_),ky=d(D_),ua=s(D_,"P",{});var S_=i(ua);$y=a(S_,"For models that inherit from "),Ws=s(S_,"A",{href:!0});var O7=i(Ws);xy=a(O7,"PreTrainedModel"),O7.forEach(o),Ay=a(S_,`, uses that method to compute the number of
floating point operations for every backward + forward pass. If using another model, either implement such a
method in the model or subclass and override this method.`),S_.forEach(o),D_.forEach(o),qy=d(T),pt=s(T,"DIV",{class:!0});var vl=i(pt);u(fa.$$.fragment,vl),Dy=d(vl),ga=s(vl,"P",{});var P_=i(ga);Sy=a(P_,"Returns the evaluation "),rc=s(P_,"CODE",{});var C7=i(rc);Py=a(C7,"DataLoader"),C7.forEach(o),Oy=a(P_,"."),P_.forEach(o),Cy=d(vl),ac=s(vl,"P",{});var I7=i(ac);Iy=a(I7,"Subclass and override this method if you want to inject some custom behavior."),I7.forEach(o),vl.forEach(o),zy=d(T),ht=s(T,"DIV",{class:!0});var bl=i(ht);u(_a.$$.fragment,bl),Ny=d(bl),va=s(bl,"P",{});var O_=i(va);Ly=a(O_,"Returns the test "),nc=s(O_,"CODE",{});var z7=i(nc);Uy=a(z7,"DataLoader"),z7.forEach(o),Fy=a(O_,"."),O_.forEach(o),Wy=d(bl),sc=s(bl,"P",{});var N7=i(sc);Ry=a(N7,"Subclass and override this method if you want to inject some custom behavior."),N7.forEach(o),bl.forEach(o),jy=d(T),Pe=s(T,"DIV",{class:!0});var Pr=i(Pe);u(ba.$$.fragment,Pr),My=d(Pr),ya=s(Pr,"P",{});var C_=i(ya);Gy=a(C_,"Returns the training "),ic=s(C_,"CODE",{});var L7=i(ic);Hy=a(L7,"DataLoader"),L7.forEach(o),By=a(C_,"."),C_.forEach(o),Vy=d(Pr),Zt=s(Pr,"P",{});var yl=i(Zt);Yy=a(yl,"Will use no sampler if "),lc=s(yl,"CODE",{});var U7=i(lc);Zy=a(U7,"self.train_dataset"),U7.forEach(o),Jy=a(yl," does not implement "),dc=s(yl,"CODE",{});var F7=i(dc);Xy=a(F7,"__len__"),F7.forEach(o),Ky=a(yl,`, a random sampler (adapted
to distributed training if necessary) otherwise.`),yl.forEach(o),Qy=d(Pr),cc=s(Pr,"P",{});var W7=i(cc);e0=a(W7,"Subclass and override this method if you want to inject some custom behavior."),W7.forEach(o),Pr.forEach(o),t0=d(T),ut=s(T,"DIV",{class:!0});var wl=i(ut);u(wa.$$.fragment,wl),o0=d(wl),Te=s(wl,"P",{});var Lt=i(Te);r0=a(Lt,"Launch an hyperparameter search using "),mc=s(Lt,"CODE",{});var R7=i(mc);a0=a(R7,"optuna"),R7.forEach(o),n0=a(Lt," or "),pc=s(Lt,"CODE",{});var j7=i(pc);s0=a(j7,"Ray Tune"),j7.forEach(o),i0=a(Lt," or "),hc=s(Lt,"CODE",{});var M7=i(hc);l0=a(M7,"SigOpt"),M7.forEach(o),d0=a(Lt,`. The optimized quantity is
determined by `),uc=s(Lt,"CODE",{});var G7=i(uc);c0=a(G7,"compute_objective"),G7.forEach(o),m0=a(Lt,`, which defaults to a function returning the evaluation loss when no
metric is provided, the sum of all metrics otherwise.`),Lt.forEach(o),p0=d(wl),u(jo.$$.fragment,wl),wl.forEach(o),h0=d(T),Mo=s(T,"DIV",{class:!0});var I_=i(Mo);u(Ta.$$.fragment,I_),u0=d(I_),Ea=s(I_,"P",{});var z_=i(Ea);f0=a(z_,"Initializes a git repo in "),fc=s(z_,"CODE",{});var H7=i(fc);g0=a(H7,"self.args.hub_model_id"),H7.forEach(o),_0=a(z_,"."),z_.forEach(o),I_.forEach(o),v0=d(T),Go=s(T,"DIV",{class:!0});var N_=i(Go);u(ka.$$.fragment,N_),b0=d(N_),gc=s(N_,"P",{});var B7=i(gc);y0=a(B7,`Whether or not this process is the local (e.g., on one machine if training in a distributed fashion on several
machines) main process.`),B7.forEach(o),N_.forEach(o),w0=d(T),Ho=s(T,"DIV",{class:!0});var L_=i(Ho);u($a.$$.fragment,L_),T0=d(L_),xa=s(L_,"P",{});var U_=i(xa);E0=a(U_,`Whether or not this process is the global main process (when training in a distributed fashion on several
machines, this is only going to be `),_c=s(U_,"CODE",{});var V7=i(_c);k0=a(V7,"True"),V7.forEach(o),$0=a(U_," for one process)."),U_.forEach(o),L_.forEach(o),x0=d(T),ft=s(T,"DIV",{class:!0});var Tl=i(ft);u(Aa.$$.fragment,Tl),A0=d(Tl),qa=s(Tl,"P",{});var F_=i(qa);q0=a(F_,"Log "),vc=s(F_,"CODE",{});var Y7=i(vc);D0=a(Y7,"logs"),Y7.forEach(o),S0=a(F_," on the various objects watching training."),F_.forEach(o),P0=d(Tl),bc=s(Tl,"P",{});var Z7=i(bc);O0=a(Z7,"Subclass and override this method to inject custom behavior."),Z7.forEach(o),Tl.forEach(o),C0=d(T),$=s(T,"DIV",{class:!0});var A=i($);u(Da.$$.fragment,A),I0=d(A),yc=s(A,"P",{});var J7=i(yc);z0=a(J7,"Log metrics in a specially formatted way"),J7.forEach(o),N0=d(A),wc=s(A,"P",{});var X7=i(wc);L0=a(X7,"Under distributed environment this is done only for a process with rank 0."),X7.forEach(o),U0=d(A),Tc=s(A,"P",{});var K7=i(Tc);F0=a(K7,"Notes on memory reports:"),K7.forEach(o),W0=d(A),Jt=s(A,"P",{});var El=i(Jt);R0=a(El,"In order to get memory usage report you need to install "),Ec=s(El,"CODE",{});var Q7=i(Ec);j0=a(Q7,"psutil"),Q7.forEach(o),M0=a(El,". You can do that with "),kc=s(El,"CODE",{});var e8=i(kc);G0=a(e8,"pip install psutil"),e8.forEach(o),H0=a(El,"."),El.forEach(o),B0=d(A),$c=s(A,"P",{});var t8=i($c);V0=a(t8,"Now when this method is run, you will see a report that will include: :"),t8.forEach(o),Y0=d(A),u(Sa.$$.fragment,A),Z0=d(A),xc=s(A,"P",{});var o8=i(xc);Ac=s(o8,"STRONG",{});var r8=i(Ac);J0=a(r8,"Understanding the reports:"),r8.forEach(o),o8.forEach(o),X0=d(A),Ke=s(A,"UL",{});var Or=i(Ke);Ee=s(Or,"LI",{});var Ut=i(Ee);K0=a(Ut,"the first segment, e.g., "),qc=s(Ut,"CODE",{});var a8=i(qc);Q0=a(a8,"train__"),a8.forEach(o),e2=a(Ut,", tells you which stage the metrics are for. Reports starting with "),Dc=s(Ut,"CODE",{});var n8=i(Dc);t2=a(n8,"init_"),n8.forEach(o),o2=a(Ut,`
will be added to the first stage that gets run. So that if only evaluation is run, the memory usage for the
`),Sc=s(Ut,"CODE",{});var s8=i(Sc);r2=a(s8,"__init__"),s8.forEach(o),a2=a(Ut," will be reported along with the "),Pc=s(Ut,"CODE",{});var i8=i(Pc);n2=a(i8,"eval_"),i8.forEach(o),s2=a(Ut," metrics."),Ut.forEach(o),i2=d(Or),Xt=s(Or,"LI",{});var kl=i(Xt);l2=a(kl,"the third segment, is either "),Oc=s(kl,"CODE",{});var l8=i(Oc);d2=a(l8,"cpu"),l8.forEach(o),c2=a(kl," or "),Cc=s(kl,"CODE",{});var d8=i(Cc);m2=a(d8,"gpu"),d8.forEach(o),p2=a(kl,`, tells you whether it\u2019s the general RAM or the gpu0 memory
metric.`),kl.forEach(o),h2=d(Or),Rs=s(Or,"LI",{});var hq=i(Rs);Ic=s(hq,"CODE",{});var c8=i(Ic);u2=a(c8,"*_alloc_delta"),c8.forEach(o),f2=a(hq,` - is the difference in the used/allocated memory counter between the end and the start of the
stage - it can be negative if a function released more memory than it allocated.`),hq.forEach(o),g2=d(Or),gt=s(Or,"LI",{});var vs=i(gt);zc=s(vs,"CODE",{});var m8=i(zc);_2=a(m8,"*_peaked_delta"),m8.forEach(o),v2=a(vs,` - is any extra memory that was consumed and then freed - relative to the current allocated
memory counter - it is never negative. When you look at the metrics of any stage you add up `),Nc=s(vs,"CODE",{});var p8=i(Nc);b2=a(p8,"alloc_delta"),p8.forEach(o),y2=a(vs,` +
`),Lc=s(vs,"CODE",{});var h8=i(Lc);w2=a(h8,"peaked_delta"),h8.forEach(o),T2=a(vs," and you know how much memory was needed to complete that stage."),vs.forEach(o),Or.forEach(o),E2=d(A),Uc=s(A,"P",{});var u8=i(Uc);k2=a(u8,`The reporting happens only for process of rank 0 and gpu 0 (if there is a gpu). Typically this is enough since the
main process does the bulk of work, but it could be not quite so if model parallel is used and then other GPUs may
use a different amount of gpu memory. This is also not the same under DataParallel where gpu0 may require much more
memory than the rest since it stores the gradient and optimizer states for all participating GPUS. Perhaps in the
future these reports will evolve to measure those too.`),u8.forEach(o),$2=d(A),Fc=s(A,"P",{});var f8=i(Fc);x2=a(f8,`The CPU RAM metric measures RSS (Resident Set Size) includes both the memory which is unique to the process and the
memory shared with other processes. It is important to note that it does not include swapped out memory, so the
reports could be imprecise.`),f8.forEach(o),A2=d(A),Pa=s(A,"P",{});var W_=i(Pa);q2=a(W_,`The CPU peak memory is measured using a sampling thread. Due to python\u2019s GIL it may miss some of the peak memory if
that thread didn\u2019t get a chance to run when the highest memory was used. Therefore this report can be less than
reality. Using `),Wc=s(W_,"CODE",{});var g8=i(Wc);D2=a(g8,"tracemalloc"),g8.forEach(o),S2=a(W_,` would have reported the exact peak memory, but it doesn\u2019t report memory allocations
outside of python. So if some C++ CUDA extension allocated its own memory it won\u2019t be reported. And therefore it
was dropped in favor of the memory sampling approach, which reads the current process memory usage.`),W_.forEach(o),P2=d(A),Qe=s(A,"P",{});var Cr=i(Qe);O2=a(Cr,"The GPU allocated and peak memory reporting is done with "),Rc=s(Cr,"CODE",{});var _8=i(Rc);C2=a(_8,"torch.cuda.memory_allocated()"),_8.forEach(o),I2=a(Cr,` and
`),jc=s(Cr,"CODE",{});var v8=i(jc);z2=a(v8,"torch.cuda.max_memory_allocated()"),v8.forEach(o),N2=a(Cr,`. This metric reports only \u201Cdeltas\u201D for pytorch-specific allocations, as
`),Mc=s(Cr,"CODE",{});var b8=i(Mc);L2=a(b8,"torch.cuda"),b8.forEach(o),U2=a(Cr,` memory management system doesn\u2019t track any memory allocated outside of pytorch. For example, the
very first cuda call typically loads CUDA kernels, which may take from 0.5 to 2GB of GPU memory.`),Cr.forEach(o),F2=d(A),re=s(A,"P",{});var Me=i(re);W2=a(Me,"Note that this tracker doesn\u2019t account for memory allocations outside of "),js=s(Me,"A",{href:!0});var y8=i(js);R2=a(y8,"Trainer"),y8.forEach(o),j2=a(Me,`\u2019s
`),Gc=s(Me,"CODE",{});var w8=i(Gc);M2=a(w8,"__init__"),w8.forEach(o),G2=a(Me,", "),Hc=s(Me,"CODE",{});var T8=i(Hc);H2=a(T8,"train"),T8.forEach(o),B2=a(Me,", "),Bc=s(Me,"CODE",{});var E8=i(Bc);V2=a(E8,"evaluate"),E8.forEach(o),Y2=a(Me," and "),Vc=s(Me,"CODE",{});var k8=i(Vc);Z2=a(k8,"predict"),k8.forEach(o),J2=a(Me," calls."),Me.forEach(o),X2=d(A),C=s(A,"P",{});var U=i(C);K2=a(U,"Because "),Yc=s(U,"CODE",{});var $8=i(Yc);Q2=a($8,"evaluation"),$8.forEach(o),ew=a(U," calls may happen during "),Zc=s(U,"CODE",{});var x8=i(Zc);tw=a(x8,"train"),x8.forEach(o),ow=a(U,`, we can\u2019t handle nested invocations because
`),Jc=s(U,"CODE",{});var A8=i(Jc);rw=a(A8,"torch.cuda.max_memory_allocated"),A8.forEach(o),aw=a(U," is a single counter, so if it gets reset by a nested eval call, "),Xc=s(U,"CODE",{});var q8=i(Xc);nw=a(q8,"train"),q8.forEach(o),sw=a(U,`\u2019s
tracker will report incorrect info. If this `),Oa=s(U,"A",{href:!0,rel:!0});var D8=i(Oa);iw=a(D8,"pytorch issue"),D8.forEach(o),lw=a(U,`
gets resolved it will be possible to change this class to be re-entrant. Until then we will only track the outer
level of `),Kc=s(U,"CODE",{});var S8=i(Kc);dw=a(S8,"train"),S8.forEach(o),cw=a(U,", "),Qc=s(U,"CODE",{});var P8=i(Qc);mw=a(P8,"evaluate"),P8.forEach(o),pw=a(U," and "),em=s(U,"CODE",{});var O8=i(em);hw=a(O8,"predict"),O8.forEach(o),uw=a(U," methods. Which means that if "),tm=s(U,"CODE",{});var C8=i(tm);fw=a(C8,"eval"),C8.forEach(o),gw=a(U," is called during "),om=s(U,"CODE",{});var I8=i(om);_w=a(I8,"train"),I8.forEach(o),vw=a(U,`,
it\u2019s the latter that will account for its memory usage and that of the former.`),U.forEach(o),bw=d(A),ke=s(A,"P",{});var Ft=i(ke);yw=a(Ft,"This also means that if any other tool that is used along the "),Ms=s(Ft,"A",{href:!0});var z8=i(Ms);ww=a(z8,"Trainer"),z8.forEach(o),Tw=a(Ft,` calls
`),rm=s(Ft,"CODE",{});var N8=i(rm);Ew=a(N8,"torch.cuda.reset_peak_memory_stats"),N8.forEach(o),kw=a(Ft,`, the gpu peak memory stats could be invalid. And the
`),Gs=s(Ft,"A",{href:!0});var L8=i(Gs);$w=a(L8,"Trainer"),L8.forEach(o),xw=a(Ft,` will disrupt the normal behavior of any such tools that rely on calling
`),am=s(Ft,"CODE",{});var U8=i(am);Aw=a(U8,"torch.cuda.reset_peak_memory_stats"),U8.forEach(o),qw=a(Ft," themselves."),Ft.forEach(o),Dw=d(A),nm=s(A,"P",{});var F8=i(nm);Sw=a(F8,"For best performance you may want to consider turning the memory profiling off for production runs."),F8.forEach(o),A.forEach(o),Pw=d(T),Bo=s(T,"DIV",{class:!0});var R_=i(Bo);u(Ca.$$.fragment,R_),Ow=d(R_),sm=s(R_,"P",{});var W8=i(sm);Cw=a(W8,"Reformat Trainer metrics values to a human-readable format"),W8.forEach(o),R_.forEach(o),Iw=d(T),_t=s(T,"DIV",{class:!0});var $l=i(_t);u(Ia.$$.fragment,$l),zw=d($l),za=s($l,"P",{});var j_=i(za);Nw=a(j_,"Helper to get number of samples in a "),im=s(j_,"CODE",{});var R8=i(im);Lw=a(R8,"DataLoader"),R8.forEach(o),Uw=a(j_," by accessing its dataset."),j_.forEach(o),Fw=d($l),Hs=s($l,"P",{});var uq=i(Hs);Ww=a(uq,"Will raise an exception if the underlying dataset does not implement method "),lm=s(uq,"CODE",{});var j8=i(lm);Rw=a(j8,"__len__"),j8.forEach(o),uq.forEach(o),$l.forEach(o),jw=d(T),vt=s(T,"DIV",{class:!0});var xl=i(vt);u(Na.$$.fragment,xl),Mw=d(xl),La=s(xl,"P",{});var M_=i(La);Gw=a(M_,"Remove a callback from the current list of "),dm=s(M_,"CODE",{});var M8=i(dm);Hw=a(M8,"TrainerCallback"),M8.forEach(o),Bw=a(M_," and returns it."),M_.forEach(o),Vw=d(xl),Ua=s(xl,"P",{});var G_=i(Ua);Yw=a(G_,"If the callback is not found, returns "),cm=s(G_,"CODE",{});var G8=i(cm);Zw=a(G8,"None"),G8.forEach(o),Jw=a(G_," (and no error is raised)."),G_.forEach(o),xl.forEach(o),Xw=d(T),X=s(T,"DIV",{class:!0});var Ge=i(X);u(Fa.$$.fragment,Ge),Kw=d(Ge),mm=s(Ge,"P",{});var H8=i(mm);Qw=a(H8,"Run prediction and returns predictions and potential metrics."),H8.forEach(o),e4=d(Ge),Wa=s(Ge,"P",{});var H_=i(Wa);t4=a(H_,`Depending on the dataset and your use case, your test dataset may contain labels. In that case, this method
will also return metrics, like in `),pm=s(H_,"CODE",{});var B8=i(pm);o4=a(B8,"evaluate()"),B8.forEach(o),r4=a(H_,"."),H_.forEach(o),a4=d(Ge),u(Vo.$$.fragment,Ge),n4=d(Ge),Ra=s(Ge,"P",{});var B_=i(Ra);s4=a(B_,"Returns: "),hm=s(B_,"EM",{});var V8=i(hm);i4=a(V8,"NamedTuple"),V8.forEach(o),l4=a(B_," A namedtuple with the following keys:"),B_.forEach(o),d4=d(Ge),Kt=s(Ge,"UL",{});var Al=i(Kt);Qt=s(Al,"LI",{});var ql=i(Qt);c4=a(ql,"predictions ("),um=s(ql,"CODE",{});var Y8=i(um);m4=a(Y8,"np.ndarray"),Y8.forEach(o),p4=a(ql,"): The predictions on "),fm=s(ql,"CODE",{});var Z8=i(fm);h4=a(Z8,"test_dataset"),Z8.forEach(o),u4=a(ql,"."),ql.forEach(o),f4=d(Al),eo=s(Al,"LI",{});var Dl=i(eo);g4=a(Dl,"label_ids ("),gm=s(Dl,"CODE",{});var J8=i(gm);_4=a(J8,"np.ndarray"),J8.forEach(o),v4=a(Dl,", "),_m=s(Dl,"EM",{});var X8=i(_m);b4=a(X8,"optional"),X8.forEach(o),y4=a(Dl,"): The labels (if the dataset contained some)."),Dl.forEach(o),w4=d(Al),to=s(Al,"LI",{});var Sl=i(to);T4=a(Sl,"metrics ("),vm=s(Sl,"CODE",{});var K8=i(vm);E4=a(K8,"Dict[str, float]"),K8.forEach(o),k4=a(Sl,", "),bm=s(Sl,"EM",{});var Q8=i(bm);$4=a(Q8,"optional"),Q8.forEach(o),x4=a(Sl,`): The potential dictionary of metrics (if the dataset
contained labels).`),Sl.forEach(o),Al.forEach(o),Ge.forEach(o),A4=d(T),bt=s(T,"DIV",{class:!0});var Pl=i(bt);u(ja.$$.fragment,Pl),q4=d(Pl),oo=s(Pl,"P",{});var Ol=i(oo);D4=a(Ol,"Prediction/evaluation loop, shared by "),ym=s(Ol,"CODE",{});var eD=i(ym);S4=a(eD,"Trainer.evaluate()"),eD.forEach(o),P4=a(Ol," and "),wm=s(Ol,"CODE",{});var tD=i(wm);O4=a(tD,"Trainer.predict()"),tD.forEach(o),C4=a(Ol,"."),Ol.forEach(o),I4=d(Pl),Tm=s(Pl,"P",{});var oD=i(Tm);z4=a(oD,"Works both with or without labels."),oD.forEach(o),Pl.forEach(o),N4=d(T),yt=s(T,"DIV",{class:!0});var Cl=i(yt);u(Ma.$$.fragment,Cl),L4=d(Cl),ro=s(Cl,"P",{});var Il=i(ro);U4=a(Il,"Perform an evaluation step on "),Em=s(Il,"CODE",{});var rD=i(Em);F4=a(rD,"model"),rD.forEach(o),W4=a(Il," using obj:"),km=s(Il,"EM",{});var aD=i(km);R4=a(aD,"inputs"),aD.forEach(o),j4=a(Il,"."),Il.forEach(o),M4=d(Cl),$m=s(Cl,"P",{});var nD=i($m);G4=a(nD,"Subclass and override to inject custom behavior."),nD.forEach(o),Cl.forEach(o),H4=d(T),Yo=s(T,"DIV",{class:!0});var V_=i(Yo);u(Ga.$$.fragment,V_),B4=d(V_),et=s(V_,"P",{});var Ir=i(et);V4=a(Ir,"Upload "),xm=s(Ir,"EM",{});var sD=i(xm);Y4=a(sD,"self.model"),sD.forEach(o),Z4=a(Ir," and "),Am=s(Ir,"EM",{});var iD=i(Am);J4=a(iD,"self.tokenizer"),iD.forEach(o),X4=a(Ir," to the \u{1F917} model hub on the repo "),qm=s(Ir,"EM",{});var lD=i(qm);K4=a(lD,"self.args.hub_model_id"),lD.forEach(o),Q4=a(Ir,"."),Ir.forEach(o),V_.forEach(o),eT=d(T),Zo=s(T,"DIV",{class:!0});var Y_=i(Zo);u(Ha.$$.fragment,Y_),tT=d(Y_),Ba=s(Y_,"P",{});var Z_=i(Ba);oT=a(Z_,"Remove a callback from the current list of "),Dm=s(Z_,"CODE",{});var dD=i(Dm);rT=a(dD,"TrainerCallback"),dD.forEach(o),aT=a(Z_,"."),Z_.forEach(o),Y_.forEach(o),nT=d(T),Oe=s(T,"DIV",{class:!0});var zr=i(Oe);u(Va.$$.fragment,zr),sT=d(zr),Ya=s(zr,"P",{});var J_=i(Ya);iT=a(J_,"Save metrics into a json file for that split, e.g. "),Sm=s(J_,"CODE",{});var cD=i(Sm);lT=a(cD,"train_results.json"),cD.forEach(o),dT=a(J_,"."),J_.forEach(o),cT=d(zr),Pm=s(zr,"P",{});var mD=i(Pm);mT=a(mD,"Under distributed environment this is done only for a process with rank 0."),mD.forEach(o),pT=d(zr),Za=s(zr,"P",{});var X_=i(Za);hT=a(X_,"To understand the metrics please read the docstring of "),Om=s(X_,"CODE",{});var pD=i(Om);uT=a(pD,"log_metrics()"),pD.forEach(o),fT=a(X_,`. The only
difference is that raw unformatted numbers are saved in the current method.`),X_.forEach(o),zr.forEach(o),gT=d(T),wt=s(T,"DIV",{class:!0});var zl=i(wt);u(Ja.$$.fragment,zl),_T=d(zl),Xa=s(zl,"P",{});var K_=i(Xa);vT=a(K_,"Will save the model, so you can reload it using "),Cm=s(K_,"CODE",{});var hD=i(Cm);bT=a(hD,"from_pretrained()"),hD.forEach(o),yT=a(K_,"."),K_.forEach(o),wT=d(zl),Im=s(zl,"P",{});var uD=i(Im);TT=a(uD,"Will only save from the main process."),uD.forEach(o),zl.forEach(o),ET=d(T),Tt=s(T,"DIV",{class:!0});var Nl=i(Tt);u(Ka.$$.fragment,Nl),kT=d(Nl),zm=s(Nl,"P",{});var fD=i(zm);$T=a(fD,"Saves the Trainer state, since Trainer.save_model saves only the tokenizer with the model"),fD.forEach(o),xT=d(Nl),Nm=s(Nl,"P",{});var gD=i(Nm);AT=a(gD,"Under distributed environment this is done only for a process with rank 0."),gD.forEach(o),Nl.forEach(o),qT=d(T),Jo=s(T,"DIV",{class:!0});var Q_=i(Jo);u(Qa.$$.fragment,Q_),DT=d(Q_),Lm=s(Q_,"P",{});var _D=i(Lm);ST=a(_D,"Main training entry point."),_D.forEach(o),Q_.forEach(o),PT=d(T),Et=s(T,"DIV",{class:!0});var Ll=i(Et);u(en.$$.fragment,Ll),OT=d(Ll),Um=s(Ll,"P",{});var vD=i(Um);CT=a(vD,"Perform a training step on a batch of inputs."),vD.forEach(o),IT=d(Ll),Fm=s(Ll,"P",{});var bD=i(Fm);zT=a(bD,"Subclass and override to inject custom behavior."),bD.forEach(o),Ll.forEach(o),T.forEach(o),gf=d(t),ao=s(t,"H2",{class:!0});var ev=i(ao);Xo=s(ev,"A",{id:!0,class:!0,href:!0});var yD=i(Xo);Wm=s(yD,"SPAN",{});var wD=i(Wm);u(tn.$$.fragment,wD),wD.forEach(o),yD.forEach(o),NT=d(ev),Rm=s(ev,"SPAN",{});var TD=i(Rm);LT=a(TD,"Seq2SeqTrainer"),TD.forEach(o),ev.forEach(o),_f=d(t),no=s(t,"DIV",{class:!0});var tv=i(no);Ce=s(tv,"DIV",{class:!0});var Nr=i(Ce);u(on.$$.fragment,Nr),UT=d(Nr),jm=s(Nr,"P",{});var ED=i(jm);FT=a(ED,"Run evaluation and returns metrics."),ED.forEach(o),WT=d(Nr),rn=s(Nr,"P",{});var ov=i(rn);RT=a(ov,`The calling script will be responsible for providing a method to compute metrics, as they are task-dependent
(pass it to the init `),Mm=s(ov,"CODE",{});var kD=i(Mm);jT=a(kD,"compute_metrics"),kD.forEach(o),MT=a(ov," argument)."),ov.forEach(o),GT=d(Nr),Gm=s(Nr,"P",{});var $D=i(Gm);HT=a($D,"You can also subclass and override this method to inject custom behavior."),$D.forEach(o),Nr.forEach(o),BT=d(tv),K=s(tv,"DIV",{class:!0});var He=i(K);u(an.$$.fragment,He),VT=d(He),Hm=s(He,"P",{});var xD=i(Hm);YT=a(xD,"Run prediction and returns predictions and potential metrics."),xD.forEach(o),ZT=d(He),nn=s(He,"P",{});var rv=i(nn);JT=a(rv,`Depending on the dataset and your use case, your test dataset may contain labels. In that case, this method
will also return metrics, like in `),Bm=s(rv,"CODE",{});var AD=i(Bm);XT=a(AD,"evaluate()"),AD.forEach(o),KT=a(rv,"."),rv.forEach(o),QT=d(He),u(Ko.$$.fragment,He),eE=d(He),sn=s(He,"P",{});var av=i(sn);tE=a(av,"Returns: "),Vm=s(av,"EM",{});var qD=i(Vm);oE=a(qD,"NamedTuple"),qD.forEach(o),rE=a(av," A namedtuple with the following keys:"),av.forEach(o),aE=d(He),so=s(He,"UL",{});var Ul=i(so);io=s(Ul,"LI",{});var Fl=i(io);nE=a(Fl,"predictions ("),Ym=s(Fl,"CODE",{});var DD=i(Ym);sE=a(DD,"np.ndarray"),DD.forEach(o),iE=a(Fl,"): The predictions on "),Zm=s(Fl,"CODE",{});var SD=i(Zm);lE=a(SD,"test_dataset"),SD.forEach(o),dE=a(Fl,"."),Fl.forEach(o),cE=d(Ul),lo=s(Ul,"LI",{});var Wl=i(lo);mE=a(Wl,"label_ids ("),Jm=s(Wl,"CODE",{});var PD=i(Jm);pE=a(PD,"np.ndarray"),PD.forEach(o),hE=a(Wl,", "),Xm=s(Wl,"EM",{});var OD=i(Xm);uE=a(OD,"optional"),OD.forEach(o),fE=a(Wl,"): The labels (if the dataset contained some)."),Wl.forEach(o),gE=d(Ul),co=s(Ul,"LI",{});var Rl=i(co);_E=a(Rl,"metrics ("),Km=s(Rl,"CODE",{});var CD=i(Km);vE=a(CD,"Dict[str, float]"),CD.forEach(o),bE=a(Rl,", "),Qm=s(Rl,"EM",{});var ID=i(Qm);yE=a(ID,"optional"),ID.forEach(o),wE=a(Rl,`): The potential dictionary of metrics (if the dataset
contained labels).`),Rl.forEach(o),Ul.forEach(o),He.forEach(o),tv.forEach(o),vf=d(t),mo=s(t,"H2",{class:!0});var nv=i(mo);Qo=s(nv,"A",{id:!0,class:!0,href:!0});var zD=i(Qo);ep=s(zD,"SPAN",{});var ND=i(ep);u(ln.$$.fragment,ND),ND.forEach(o),zD.forEach(o),TE=d(nv),tp=s(nv,"SPAN",{});var LD=i(tp);EE=a(LD,"TrainingArguments"),LD.forEach(o),nv.forEach(o),bf=d(t),N=s(t,"DIV",{class:!0});var G=i(N);u(dn.$$.fragment,G),kE=d(G),cn=s(G,"P",{});var sv=i(cn);$E=a(sv,"TrainingArguments is the subset of the arguments we use in our example scripts "),op=s(sv,"STRONG",{});var UD=i(op);xE=a(UD,`which relate to the training loop
itself`),UD.forEach(o),AE=a(sv,"."),sv.forEach(o),qE=d(G),po=s(G,"P",{});var jl=i(po);DE=a(jl,"Using "),Bs=s(jl,"A",{href:!0});var FD=i(Bs);SE=a(FD,"HfArgumentParser"),FD.forEach(o),PE=a(jl," we can turn this class into "),mn=s(jl,"A",{href:!0,rel:!0});var WD=i(mn);OE=a(WD,"argparse"),WD.forEach(o),CE=a(jl,` arguments that can be specified on the command
line.`),jl.forEach(o),IE=d(G),de=s(G,"DIV",{class:!0});var Wt=i(de);u(pn.$$.fragment,Wt),zE=d(Wt),rp=s(Wt,"P",{});var RD=i(rp);NE=a(RD,`Returns the log level to be used depending on whether this process is the main process of node 0, main process
of node non-0, or a non-main process.`),RD.forEach(o),LE=d(Wt),ho=s(Wt,"P",{});var Ml=i(ho);UE=a(Ml,"For the main process the log level defaults to "),ap=s(Ml,"CODE",{});var jD=i(ap);FE=a(jD,"logging.INFO"),jD.forEach(o),WE=a(Ml," unless overridden by "),np=s(Ml,"CODE",{});var MD=i(np);RE=a(MD,"log_level"),MD.forEach(o),jE=a(Ml," argument."),Ml.forEach(o),ME=d(Wt),uo=s(Wt,"P",{});var Gl=i(uo);GE=a(Gl,"For the replica processes the log level defaults to "),sp=s(Gl,"CODE",{});var GD=i(sp);HE=a(GD,"logging.WARNING"),GD.forEach(o),BE=a(Gl,` unless overridden by
`),ip=s(Gl,"CODE",{});var HD=i(ip);VE=a(HD,"log_level_replica"),HD.forEach(o),YE=a(Gl," argument."),Gl.forEach(o),ZE=d(Wt),hn=s(Wt,"P",{});var iv=i(hn);JE=a(iv,`The choice between the main and replica process settings is made according to the return value of
`),lp=s(iv,"CODE",{});var BD=i(lp);XE=a(BD,"should_log"),BD.forEach(o),KE=a(iv,"."),iv.forEach(o),Wt.forEach(o),QE=d(G),er=s(G,"DIV",{class:!0});var lv=i(er);u(un.$$.fragment,lv),e5=d(lv),dp=s(lv,"P",{});var VD=i(dp);t5=a(VD,"Get number of steps used for a linear warmup."),VD.forEach(o),lv.forEach(o),o5=d(G),kt=s(G,"DIV",{class:!0});var Hl=i(kt);u(fn.$$.fragment,Hl),r5=d(Hl),cp=s(Hl,"P",{});var YD=i(cp);a5=a(YD,`A context manager for torch distributed environment where on needs to do something on the main process,
while blocking replicas, and when it\u2019s finished releasing the replicas.`),YD.forEach(o),n5=d(Hl),fo=s(Hl,"P",{});var Bl=i(fo);s5=a(Bl,"One such use is for "),mp=s(Bl,"CODE",{});var ZD=i(mp);i5=a(ZD,"datasets"),ZD.forEach(o),l5=a(Bl,"\u2019s "),pp=s(Bl,"CODE",{});var JD=i(pp);d5=a(JD,"map"),JD.forEach(o),c5=a(Bl,` feature which to be efficient should be run once on the main
process, which upon completion saves a cached version of results and which then automatically gets loaded
by the replicas.`),Bl.forEach(o),Hl.forEach(o),m5=d(G),tr=s(G,"DIV",{class:!0});var dv=i(tr);u(gn.$$.fragment,dv),p5=d(dv),_n=s(dv,"P",{});var cv=i(_n);h5=a(cv,"Serializes this instance while replace "),hp=s(cv,"CODE",{});var XD=i(hp);u5=a(XD,"Enum"),XD.forEach(o),f5=a(cv,` by their values (for JSON serialization support). It obfuscates
the token values by removing their value.`),cv.forEach(o),dv.forEach(o),g5=d(G),or=s(G,"DIV",{class:!0});var mv=i(or);u(vn.$$.fragment,mv),_5=d(mv),up=s(mv,"P",{});var KD=i(up);v5=a(KD,"Serializes this instance to a JSON string."),KD.forEach(o),mv.forEach(o),b5=d(G),rr=s(G,"DIV",{class:!0});var pv=i(rr);u(bn.$$.fragment,pv),y5=d(pv),fp=s(pv,"P",{});var QD=i(fp);w5=a(QD,"Sanitized serialization to use with TensorBoard\u2019s hparams"),QD.forEach(o),pv.forEach(o),G.forEach(o),yf=d(t),go=s(t,"H2",{class:!0});var hv=i(go);ar=s(hv,"A",{id:!0,class:!0,href:!0});var eS=i(ar);gp=s(eS,"SPAN",{});var tS=i(gp);u(yn.$$.fragment,tS),tS.forEach(o),eS.forEach(o),T5=d(hv),_p=s(hv,"SPAN",{});var oS=i(_p);E5=a(oS,"Seq2SeqTrainingArguments"),oS.forEach(o),hv.forEach(o),wf=d(t),ae=s(t,"DIV",{class:!0});var Rt=i(ae);u(wn.$$.fragment,Rt),k5=d(Rt),Tn=s(Rt,"P",{});var uv=i(Tn);$5=a(uv,"TrainingArguments is the subset of the arguments we use in our example scripts "),vp=s(uv,"STRONG",{});var rS=i(vp);x5=a(rS,`which relate to the training loop
itself`),rS.forEach(o),A5=a(uv,"."),uv.forEach(o),q5=d(Rt),_o=s(Rt,"P",{});var Vl=i(_o);D5=a(Vl,"Using "),Vs=s(Vl,"A",{href:!0});var aS=i(Vs);S5=a(aS,"HfArgumentParser"),aS.forEach(o),P5=a(Vl," we can turn this class into "),En=s(Vl,"A",{href:!0,rel:!0});var nS=i(En);O5=a(nS,"argparse"),nS.forEach(o),C5=a(Vl,` arguments that can be specified on the command
line.`),Vl.forEach(o),I5=d(Rt),ne=s(Rt,"P",{});var Be=i(ne);z5=a(Be,"sortish_sampler ("),bp=s(Be,"CODE",{});var sS=i(bp);N5=a(sS,"bool"),sS.forEach(o),L5=a(Be,", "),yp=s(Be,"EM",{});var iS=i(yp);U5=a(iS,"optional"),iS.forEach(o),F5=a(Be,", defaults to "),wp=s(Be,"CODE",{});var lS=i(wp);W5=a(lS,"False"),lS.forEach(o),R5=a(Be,`):
Whether to use a `),Tp=s(Be,"EM",{});var dS=i(Tp);j5=a(dS,"sortish sampler"),dS.forEach(o),M5=a(Be," or not. Only possible if the underlying datasets are "),Ep=s(Be,"EM",{});var cS=i(Ep);G5=a(cS,"Seq2SeqDataset"),cS.forEach(o),H5=a(Be,` for
now but will become generally available in the near future.`),Be.forEach(o),B5=d(Rt),D=s(Rt,"P",{});var P=i(D);V5=a(P,`It sorts the inputs according to lengths in order to minimize the padding size, with a bit of randomness for
the training set.
predict_with_generate (`),kp=s(P,"CODE",{});var mS=i(kp);Y5=a(mS,"bool"),mS.forEach(o),Z5=a(P,", "),$p=s(P,"EM",{});var pS=i($p);J5=a(pS,"optional"),pS.forEach(o),X5=a(P,", defaults to "),xp=s(P,"CODE",{});var hS=i(xp);K5=a(hS,"False"),hS.forEach(o),Q5=a(P,`):
Whether to use generate to calculate generative metrics (ROUGE, BLEU).
generation_max_length (`),Ap=s(P,"CODE",{});var uS=i(Ap);ek=a(uS,"int"),uS.forEach(o),tk=a(P,", "),qp=s(P,"EM",{});var fS=i(qp);ok=a(fS,"optional"),fS.forEach(o),rk=a(P,`):
The `),Dp=s(P,"CODE",{});var gS=i(Dp);ak=a(gS,"max_length"),gS.forEach(o),nk=a(P," to use on each evaluation loop when "),Sp=s(P,"CODE",{});var _S=i(Sp);sk=a(_S,"predict_with_generate=True"),_S.forEach(o),ik=a(P,`. Will default to
the `),Pp=s(P,"CODE",{});var vS=i(Pp);lk=a(vS,"max_length"),vS.forEach(o),dk=a(P,` value of the model configuration.
generation_num_beams (`),Op=s(P,"CODE",{});var bS=i(Op);ck=a(bS,"int"),bS.forEach(o),mk=a(P,", "),Cp=s(P,"EM",{});var yS=i(Cp);pk=a(yS,"optional"),yS.forEach(o),hk=a(P,`):
The `),Ip=s(P,"CODE",{});var wS=i(Ip);uk=a(wS,"num_beams"),wS.forEach(o),fk=a(P," to use on each evaluation loop when "),zp=s(P,"CODE",{});var TS=i(zp);gk=a(TS,"predict_with_generate=True"),TS.forEach(o),_k=a(P,`. Will default to the
`),Np=s(P,"CODE",{});var ES=i(Np);vk=a(ES,"num_beams"),ES.forEach(o),bk=a(P," value of the model configuration."),P.forEach(o),Rt.forEach(o),Tf=d(t),vo=s(t,"H2",{class:!0});var fv=i(vo);nr=s(fv,"A",{id:!0,class:!0,href:!0});var kS=i(nr);Lp=s(kS,"SPAN",{});var $S=i(Lp);u(kn.$$.fragment,$S),$S.forEach(o),kS.forEach(o),yk=d(fv),Up=s(fv,"SPAN",{});var xS=i(Up);wk=a(xS,"Checkpoints"),xS.forEach(o),fv.forEach(o),Ef=d(t),ce=s(t,"P",{});var jt=i(ce);Tk=a(jt,"By default, "),Ys=s(jt,"A",{href:!0});var AS=i(Ys);Ek=a(AS,"Trainer"),AS.forEach(o),kk=a(jt," will save all checkpoints in the "),Fp=s(jt,"CODE",{});var qS=i(Fp);$k=a(qS,"output_dir"),qS.forEach(o),xk=a(jt,` you set in the
`),Zs=s(jt,"A",{href:!0});var DS=i(Zs);Ak=a(DS,"TrainingArguments"),DS.forEach(o),qk=a(jt," you are using. Those will go in subfolder named "),Wp=s(jt,"CODE",{});var SS=i(Wp);Dk=a(SS,"checkpoint-xxx"),SS.forEach(o),Sk=a(jt,` with xxx
being the step at which the training was at.`),jt.forEach(o),kf=d(t),sr=s(t,"P",{});var gv=i(sr);Pk=a(gv,"Resuming training from a checkpoint can be done when calling "),Js=s(gv,"A",{href:!0});var PS=i(Js);Ok=a(PS,"Trainer.train()"),PS.forEach(o),Ck=a(gv," with either:"),gv.forEach(o),$f=d(t),ir=s(t,"UL",{});var _v=i(ir);Xs=s(_v,"LI",{});var fq=i(Xs);Rp=s(fq,"CODE",{});var OS=i(Rp);Ik=a(OS,"resume_from_checkpoint=True"),OS.forEach(o),zk=a(fq," which will resume training from the latest checkpoint"),fq.forEach(o),Nk=d(_v),Ks=s(_v,"LI",{});var gq=i(Ks);jp=s(gq,"CODE",{});var CS=i(jp);Lk=a(CS,"resume_from_checkpoint=checkpoint_dir"),CS.forEach(o),Uk=a(gq,` which will resume training from the specific checkpoint in the directory
passed.`),gq.forEach(o),_v.forEach(o),xf=d(t),Ie=s(t,"P",{});var Lr=i(Ie);Fk=a(Lr,"In addition, you can easily save your checkpoints on the Model Hub when using "),Mp=s(Lr,"CODE",{});var IS=i(Mp);Wk=a(IS,"push_to_hub=True"),IS.forEach(o),Rk=a(Lr,`. By default, all
the models saved in intermediate checkpoints are saved in different commits, but not the optimizer state. You can adapt
the `),Gp=s(Lr,"CODE",{});var zS=i(Gp);jk=a(zS,"hub-strategy"),zS.forEach(o),Mk=a(Lr," value of your "),Qs=s(Lr,"A",{href:!0});var NS=i(Qs);Gk=a(NS,"TrainingArguments"),NS.forEach(o),Hk=a(Lr," to either:"),Lr.forEach(o),Af=d(t),lr=s(t,"UL",{});var vv=i(lr);dr=s(vv,"LI",{});var lf=i(dr);Hp=s(lf,"CODE",{});var LS=i(Hp);Bk=a(LS,'"checkpoint"'),LS.forEach(o),Vk=a(lf,`: the latest checkpoint is also pushed in a subfolder named last-checkpoint, allowing you to
resume training easily with `),Bp=s(lf,"CODE",{});var US=i(Bp);Yk=a(US,'trainer.train(resume_from_checkpoint="output_dir/last-checkpoint")'),US.forEach(o),Zk=a(lf,"."),lf.forEach(o),Jk=d(vv),ei=s(vv,"LI",{});var _q=i(ei);Vp=s(_q,"CODE",{});var FS=i(Vp);Xk=a(FS,'"all_checkpoints"'),FS.forEach(o),Kk=a(_q,`: all checkpoints are pushed like they appear in the output folder (so you will get one
checkpoint folder per folder in your final repository)`),_q.forEach(o),vv.forEach(o),qf=d(t),bo=s(t,"H2",{class:!0});var bv=i(bo);cr=s(bv,"A",{id:!0,class:!0,href:!0});var WS=i(cr);Yp=s(WS,"SPAN",{});var RS=i(Yp);u($n.$$.fragment,RS),RS.forEach(o),WS.forEach(o),Qk=d(bv),Zp=s(bv,"SPAN",{});var jS=i(Zp);e3=a(jS,"Logging"),jS.forEach(o),bv.forEach(o),Df=d(t),ze=s(t,"P",{});var Ur=i(ze);t3=a(Ur,"By default "),ti=s(Ur,"A",{href:!0});var MS=i(ti);o3=a(MS,"Trainer"),MS.forEach(o),r3=a(Ur," will use "),Jp=s(Ur,"CODE",{});var GS=i(Jp);a3=a(GS,"logging.INFO"),GS.forEach(o),n3=a(Ur," for the main process and "),Xp=s(Ur,"CODE",{});var HS=i(Xp);s3=a(HS,"logging.WARNING"),HS.forEach(o),i3=a(Ur," for the replicas if any."),Ur.forEach(o),Sf=d(t),$t=s(t,"P",{});var Yl=i($t);l3=a(Yl,"These defaults can be overridden to use any of the 5 "),Kp=s(Yl,"CODE",{});var BS=i(Kp);d3=a(BS,"logging"),BS.forEach(o),c3=a(Yl," levels with "),oi=s(Yl,"A",{href:!0});var VS=i(oi);m3=a(VS,"TrainingArguments"),VS.forEach(o),p3=a(Yl,`\u2019s
arguments:`),Yl.forEach(o),Pf=d(t),mr=s(t,"UL",{});var yv=i(mr);ri=s(yv,"LI",{});var vq=i(ri);Qp=s(vq,"CODE",{});var YS=i(Qp);h3=a(YS,"log_level"),YS.forEach(o),u3=a(vq," - for the main process"),vq.forEach(o),f3=d(yv),ai=s(yv,"LI",{});var bq=i(ai);eh=s(bq,"CODE",{});var ZS=i(eh);g3=a(ZS,"log_level_replica"),ZS.forEach(o),_3=a(bq," - for the replicas"),bq.forEach(o),yv.forEach(o),Of=d(t),Ne=s(t,"P",{});var Fr=i(Ne);v3=a(Fr,"Further, if "),ni=s(Fr,"A",{href:!0});var JS=i(ni);b3=a(JS,"TrainingArguments"),JS.forEach(o),y3=a(Fr,"\u2019s "),th=s(Fr,"CODE",{});var XS=i(th);w3=a(XS,"log_on_each_node"),XS.forEach(o),T3=a(Fr," is set to "),oh=s(Fr,"CODE",{});var KS=i(oh);E3=a(KS,"False"),KS.forEach(o),k3=a(Fr,` only the main node will
use the log level settings for its main process, all other nodes will use the log level settings for replicas.`),Fr.forEach(o),Cf=d(t),Q=s(t,"P",{});var Ve=i(Q);$3=a(Ve,"Note that "),si=s(Ve,"A",{href:!0});var QS=i(si);x3=a(QS,"Trainer"),QS.forEach(o),A3=a(Ve," is going to set "),rh=s(Ve,"CODE",{});var eP=i(rh);q3=a(eP,"transformers"),eP.forEach(o),D3=a(Ve,`\u2019s log level separately for each node in its
`),ah=s(Ve,"CODE",{});var tP=i(ah);S3=a(tP,"Trainer.__init__()"),tP.forEach(o),P3=a(Ve,`. So you may want to set this sooner (see the next example) if you tap into other
`),nh=s(Ve,"CODE",{});var oP=i(nh);O3=a(oP,"transformers"),oP.forEach(o),C3=a(Ve," functionality before creating the "),ii=s(Ve,"A",{href:!0});var rP=i(ii);I3=a(rP,"Trainer"),rP.forEach(o),z3=a(Ve," object."),Ve.forEach(o),If=d(t),li=s(t,"P",{});var aP=i(li);N3=a(aP,"Here is an example of how this can be used in an application:"),aP.forEach(o),zf=d(t),u(xn.$$.fragment,t),Nf=d(t),di=s(t,"P",{});var nP=i(di);L3=a(nP,`And then if you only want to see warnings on the main node and all other nodes to not print any most likely duplicated
warnings you could run it as:`),nP.forEach(o),Lf=d(t),u(An.$$.fragment,t),Uf=d(t),ci=s(t,"P",{});var sP=i(ci);U3=a(sP,`In the multi-node environment if you also don\u2019t want the logs to repeat for each node\u2019s main process, you will want to
change the above to:`),sP.forEach(o),Ff=d(t),u(qn.$$.fragment,t),Wf=d(t),mi=s(t,"P",{});var iP=i(mi);F3=a(iP,`and then only the main process of the first node will log at the \u201Cwarning\u201D level, and all other processes on the main
node and all processes on other nodes will log at the \u201Cerror\u201D level.`),iP.forEach(o),Rf=d(t),pi=s(t,"P",{});var lP=i(pi);W3=a(lP,"If you need your application to be as quiet as possible you could do:"),lP.forEach(o),jf=d(t),u(Dn.$$.fragment,t),Mf=d(t),pr=s(t,"P",{});var wv=i(pr);R3=a(wv,"(add "),sh=s(wv,"CODE",{});var dP=i(sh);j3=a(dP,"--log_on_each_node 0"),dP.forEach(o),M3=a(wv," if on multi-node environment)"),wv.forEach(o),Gf=d(t),yo=s(t,"H2",{class:!0});var Tv=i(yo);hr=s(Tv,"A",{id:!0,class:!0,href:!0});var cP=i(hr);ih=s(cP,"SPAN",{});var mP=i(ih);u(Sn.$$.fragment,mP),mP.forEach(o),cP.forEach(o),G3=d(Tv),lh=s(Tv,"SPAN",{});var pP=i(lh);H3=a(pP,"Randomness"),pP.forEach(o),Tv.forEach(o),Hf=d(t),me=s(t,"P",{});var Mt=i(me);B3=a(Mt,"When resuming from a checkpoint generated by "),hi=s(Mt,"A",{href:!0});var hP=i(hi);V3=a(hP,"Trainer"),hP.forEach(o),Y3=a(Mt,` all efforts are made to restore the
`),dh=s(Mt,"EM",{});var uP=i(dh);Z3=a(uP,"python"),uP.forEach(o),J3=a(Mt,", "),ch=s(Mt,"EM",{});var fP=i(ch);X3=a(fP,"numpy"),fP.forEach(o),K3=a(Mt," and "),mh=s(Mt,"EM",{});var gP=i(mh);Q3=a(gP,"pytorch"),gP.forEach(o),e$=a(Mt,` RNG states to the same states as they were at the moment of saving that checkpoint,
which should make the \u201Cstop and resume\u201D style of training as close as possible to non-stop training.`),Mt.forEach(o),Bf=d(t),xt=s(t,"P",{});var Zl=i(xt);t$=a(Zl,`However, due to various default non-deterministic pytorch settings this might not fully work. If you want full
determinism please refer to `),Pn=s(Zl,"A",{href:!0,rel:!0});var _P=i(Pn);o$=a(_P,"Controlling sources of randomness"),_P.forEach(o),r$=a(Zl,`. As explained in the document, that some of those settings
that make things deterministic (.e.g., `),ph=s(Zl,"CODE",{});var vP=i(ph);a$=a(vP,"torch.backends.cudnn.deterministic"),vP.forEach(o),n$=a(Zl,`) may slow things down, therefore this
can\u2019t be done by default, but you can enable those yourself if needed.`),Zl.forEach(o),Vf=d(t),wo=s(t,"H2",{class:!0});var Ev=i(wo);ur=s(Ev,"A",{id:!0,class:!0,href:!0});var bP=i(ur);hh=s(bP,"SPAN",{});var yP=i(hh);u(On.$$.fragment,yP),yP.forEach(o),bP.forEach(o),s$=d(Ev),uh=s(Ev,"SPAN",{});var wP=i(uh);i$=a(wP,"Trainer Integrations"),wP.forEach(o),Ev.forEach(o),Yf=d(t),fr=s(t,"P",{});var kv=i(fr);l$=a(kv,"The "),ui=s(kv,"A",{href:!0});var TP=i(ui);d$=a(TP,"Trainer"),TP.forEach(o),c$=a(kv,` has been extended to support libraries that may dramatically improve your training
time and fit much bigger models.`),kv.forEach(o),Zf=d(t),Le=s(t,"P",{});var Wr=i(Le);m$=a(Wr,"Currently it supports third party solutions, "),Cn=s(Wr,"A",{href:!0,rel:!0});var EP=i(Cn);p$=a(EP,"DeepSpeed"),EP.forEach(o),h$=a(Wr," and "),In=s(Wr,"A",{href:!0,rel:!0});var kP=i(In);u$=a(kP,"FairScale"),kP.forEach(o),f$=a(Wr,", which implement parts of the paper "),zn=s(Wr,"A",{href:!0,rel:!0});var $P=i(zn);g$=a($P,`ZeRO: Memory Optimizations
Toward Training Trillion Parameter Models, by Samyam Rajbhandari, Jeff Rasley, Olatunji Ruwase, Yuxiong He`),$P.forEach(o),_$=a(Wr,"."),Wr.forEach(o),Jf=d(t),fi=s(t,"P",{});var xP=i(fi);v$=a(xP,"This provided support is new and experimental as of this writing."),xP.forEach(o),Xf=d(t),gi=s(t,"A",{id:!0}),i(gi).forEach(o),Kf=d(t),To=s(t,"H3",{class:!0});var $v=i(To);gr=s($v,"A",{id:!0,class:!0,href:!0});var AP=i(gr);fh=s(AP,"SPAN",{});var qP=i(fh);u(Nn.$$.fragment,qP),qP.forEach(o),AP.forEach(o),b$=d($v),gh=s($v,"SPAN",{});var DP=i(gh);y$=a(DP,"CUDA Extension Installation Notes"),DP.forEach(o),$v.forEach(o),Qf=d(t),_i=s(t,"P",{});var SP=i(_i);w$=a(SP,"As of this writing, both FairScale and Deepspeed require compilation of CUDA C++ code, before they can be used."),SP.forEach(o),eg=d(t),At=s(t,"P",{});var Jl=i(At);T$=a(Jl,"While all installation issues should be dealt with through the corresponding GitHub Issues of "),Ln=s(Jl,"A",{href:!0,rel:!0});var PP=i(Ln);E$=a(PP,"FairScale"),PP.forEach(o),k$=a(Jl," and "),Un=s(Jl,"A",{href:!0,rel:!0});var OP=i(Un);$$=a(OP,"Deepspeed"),OP.forEach(o),x$=a(Jl,`, there are a few common issues that one may encounter while building
any PyTorch extension that needs to build CUDA extensions.`),Jl.forEach(o),tg=d(t),vi=s(t,"P",{});var CP=i(vi);A$=a(CP,"Therefore, if you encounter a CUDA-related build issue while doing one of the following or both:"),CP.forEach(o),og=d(t),u(Fn.$$.fragment,t),rg=d(t),bi=s(t,"P",{});var IP=i(bi);q$=a(IP,"please, read the following notes first."),IP.forEach(o),ag=d(t),qt=s(t,"P",{});var Xl=i(qt);D$=a(Xl,"In these notes we give examples for what to do when "),_h=s(Xl,"CODE",{});var zP=i(_h);S$=a(zP,"pytorch"),zP.forEach(o),P$=a(Xl," has been built with CUDA "),vh=s(Xl,"CODE",{});var NP=i(vh);O$=a(NP,"10.2"),NP.forEach(o),C$=a(Xl,`. If your situation is
different remember to adjust the version number to the one you are after.`),Xl.forEach(o),ng=d(t),Eo=s(t,"H4",{class:!0});var xv=i(Eo);_r=s(xv,"A",{id:!0,class:!0,href:!0});var LP=i(_r);bh=s(LP,"SPAN",{});var UP=i(bh);u(Wn.$$.fragment,UP),UP.forEach(o),LP.forEach(o),I$=d(xv),yh=s(xv,"SPAN",{});var FP=i(yh);z$=a(FP,"Possible problem #1"),FP.forEach(o),xv.forEach(o),sg=d(t),yi=s(t,"P",{});var WP=i(yi);N$=a(WP,`While, Pytorch comes with its own CUDA toolkit, to build these two projects you must have an identical version of CUDA
installed system-wide.`),WP.forEach(o),ig=d(t),Ue=s(t,"P",{});var Rr=i(Ue);L$=a(Rr,"For example, if you installed "),wh=s(Rr,"CODE",{});var RP=i(wh);U$=a(RP,"pytorch"),RP.forEach(o),F$=a(Rr," with "),Th=s(Rr,"CODE",{});var jP=i(Th);W$=a(jP,"cudatoolkit==10.2"),jP.forEach(o),R$=a(Rr,` in the Python environment, you also need to have
CUDA `),Eh=s(Rr,"CODE",{});var MP=i(Eh);j$=a(MP,"10.2"),MP.forEach(o),M$=a(Rr," installed system-wide."),Rr.forEach(o),lg=d(t),Dt=s(t,"P",{});var Kl=i(Dt);G$=a(Kl,"The exact location may vary from system to system, but "),kh=s(Kl,"CODE",{});var GP=i(kh);H$=a(GP,"/usr/local/cuda-10.2"),GP.forEach(o),B$=a(Kl,` is the most common location on many
Unix systems. When CUDA is correctly set up and added to the `),$h=s(Kl,"CODE",{});var HP=i($h);V$=a(HP,"PATH"),HP.forEach(o),Y$=a(Kl,` environment variable, one can find the
installation location by doing:`),Kl.forEach(o),dg=d(t),u(Rn.$$.fragment,t),cg=d(t),vr=s(t,"P",{});var Av=i(vr);Z$=a(Av,`If you don\u2019t have CUDA installed system-wide, install it first. You will find the instructions by using your favorite
search engine. For example, if you\u2019re on Ubuntu you may want to search for: `),jn=s(Av,"A",{href:!0,rel:!0});var BP=i(jn);J$=a(BP,"ubuntu cuda 10.2 install"),BP.forEach(o),X$=a(Av,"."),Av.forEach(o),mg=d(t),ko=s(t,"H4",{class:!0});var qv=i(ko);br=s(qv,"A",{id:!0,class:!0,href:!0});var VP=i(br);xh=s(VP,"SPAN",{});var YP=i(xh);u(Mn.$$.fragment,YP),YP.forEach(o),VP.forEach(o),K$=d(qv),Ah=s(qv,"SPAN",{});var ZP=i(Ah);Q$=a(ZP,"Possible problem #2"),ZP.forEach(o),qv.forEach(o),pg=d(t),wi=s(t,"P",{});var JP=i(wi);ex=a(JP,`Another possible common problem is that you may have more than one CUDA toolkit installed system-wide. For example you
may have:`),JP.forEach(o),hg=d(t),u(Gn.$$.fragment,t),ug=d(t),St=s(t,"P",{});var Ql=i(St);tx=a(Ql,"Now, in this situation you need to make sure that your "),qh=s(Ql,"CODE",{});var XP=i(qh);ox=a(XP,"PATH"),XP.forEach(o),rx=a(Ql," and "),Dh=s(Ql,"CODE",{});var KP=i(Dh);ax=a(KP,"LD_LIBRARY_PATH"),KP.forEach(o),nx=a(Ql,` environment variables contain
the correct paths to the desired CUDA version. Typically, package installers will set these to contain whatever the
last version was installed. If you encounter the problem, where the package build fails because it can\u2019t find the right
CUDA version despite you having it installed system-wide, it means that you need to adjust the 2 aforementioned
environment variables.`),Ql.forEach(o),fg=d(t),Ti=s(t,"P",{});var QP=i(Ti);sx=a(QP,"First, you may look at their contents:"),QP.forEach(o),gg=d(t),u(Hn.$$.fragment,t),_g=d(t),Ei=s(t,"P",{});var eO=i(Ei);ix=a(eO,"so you get an idea of what is inside."),eO.forEach(o),vg=d(t),yr=s(t,"P",{});var Dv=i(yr);lx=a(Dv,"It\u2019s possible that "),Sh=s(Dv,"CODE",{});var tO=i(Sh);dx=a(tO,"LD_LIBRARY_PATH"),tO.forEach(o),cx=a(Dv," is empty."),Dv.forEach(o),bg=d(t),tt=s(t,"P",{});var bs=i(tt);Ph=s(bs,"CODE",{});var oO=i(Ph);mx=a(oO,"PATH"),oO.forEach(o),px=a(bs," lists the locations of where executables can be found and "),Oh=s(bs,"CODE",{});var rO=i(Oh);hx=a(rO,"LD_LIBRARY_PATH"),rO.forEach(o),ux=a(bs,` is for where shared libraries
are to looked for. In both cases, earlier entries have priority over the later ones. `),Ch=s(bs,"CODE",{});var aO=i(Ch);fx=a(aO,":"),aO.forEach(o),gx=a(bs,` is used to separate multiple
entries.`),bs.forEach(o),yg=d(t),ki=s(t,"P",{});var nO=i(ki);_x=a(nO,`Now, to tell the build program where to find the specific CUDA toolkit, insert the desired paths to be listed first by
doing:`),nO.forEach(o),wg=d(t),u(Bn.$$.fragment,t),Tg=d(t),$i=s(t,"P",{});var sO=i($i);vx=a(sO,"Note that we aren\u2019t overwriting the existing values, but prepending instead."),sO.forEach(o),Eg=d(t),Fe=s(t,"P",{});var jr=i(Fe);bx=a(jr,`Of course, adjust the version number, the full path if need be. Check that the directories you assign actually do
exist. `),Ih=s(jr,"CODE",{});var iO=i(Ih);yx=a(iO,"lib64"),iO.forEach(o),wx=a(jr," sub-directory is where the various CUDA "),zh=s(jr,"CODE",{});var lO=i(zh);Tx=a(lO,".so"),lO.forEach(o),Ex=a(jr," objects, like "),Nh=s(jr,"CODE",{});var dO=i(Nh);kx=a(dO,"libcudart.so"),dO.forEach(o),$x=a(jr,` reside, it\u2019s unlikely
that your system will have it named differently, but if it is adjust it to reflect your reality.`),jr.forEach(o),kg=d(t),$o=s(t,"H4",{class:!0});var Sv=i($o);wr=s(Sv,"A",{id:!0,class:!0,href:!0});var cO=i(wr);Lh=s(cO,"SPAN",{});var mO=i(Lh);u(Vn.$$.fragment,mO),mO.forEach(o),cO.forEach(o),xx=d(Sv),Uh=s(Sv,"SPAN",{});var pO=i(Uh);Ax=a(pO,"Possible problem #3"),pO.forEach(o),Sv.forEach(o),$g=d(t),Pt=s(t,"P",{});var ed=i(Pt);qx=a(ed,"Some older CUDA versions may refuse to build with newer compilers. For example, you my have "),Fh=s(ed,"CODE",{});var hO=i(Fh);Dx=a(hO,"gcc-9"),hO.forEach(o),Sx=a(ed,` but it wants
`),Wh=s(ed,"CODE",{});var uO=i(Wh);Px=a(uO,"gcc-7"),uO.forEach(o),Ox=a(ed,"."),ed.forEach(o),xg=d(t),xi=s(t,"P",{});var fO=i(xi);Cx=a(fO,"There are various ways to go about it."),fO.forEach(o),Ag=d(t),Ai=s(t,"P",{});var gO=i(Ai);Ix=a(gO,"If you can install the latest CUDA toolkit it typically should support the newer compiler."),gO.forEach(o),qg=d(t),Tr=s(t,"P",{});var Pv=i(Tr);zx=a(Pv,`Alternatively, you could install the lower version of the compiler in addition to the one you already have, or you may
already have it but it\u2019s not the default one, so the build system can\u2019t see it. If you have `),Rh=s(Pv,"CODE",{});var _O=i(Rh);Nx=a(_O,"gcc-7"),_O.forEach(o),Lx=a(Pv,` installed but the
build system complains it can\u2019t find it, the following might do the trick:`),Pv.forEach(o),Dg=d(t),u(Yn.$$.fragment,t),Sg=d(t),M=s(t,"P",{});var he=i(M);Ux=a(he,"Here, we are making a symlink to "),jh=s(he,"CODE",{});var vO=i(jh);Fx=a(vO,"gcc-7"),vO.forEach(o),Wx=a(he," from "),Mh=s(he,"CODE",{});var bO=i(Mh);Rx=a(bO,"/usr/local/cuda-10.2/bin/gcc"),bO.forEach(o),jx=a(he,` and since
`),Gh=s(he,"CODE",{});var yO=i(Gh);Mx=a(yO,"/usr/local/cuda-10.2/bin/"),yO.forEach(o),Gx=a(he," should be in the "),Hh=s(he,"CODE",{});var wO=i(Hh);Hx=a(wO,"PATH"),wO.forEach(o),Bx=a(he,` environment variable (see the previous problem\u2019s solution), it
should find `),Bh=s(he,"CODE",{});var TO=i(Bh);Vx=a(TO,"gcc-7"),TO.forEach(o),Yx=a(he," (and "),Vh=s(he,"CODE",{});var EO=i(Vh);Zx=a(EO,"g++7"),EO.forEach(o),Jx=a(he,") and then the build will succeed."),he.forEach(o),Pg=d(t),qi=s(t,"P",{});var kO=i(qi);Xx=a(kO,"As always make sure to edit the paths in the example to match your situation."),kO.forEach(o),Og=d(t),xo=s(t,"H3",{class:!0});var Ov=i(xo);Er=s(Ov,"A",{id:!0,class:!0,href:!0});var $O=i(Er);Yh=s($O,"SPAN",{});var xO=i(Yh);u(Zn.$$.fragment,xO),xO.forEach(o),$O.forEach(o),Kx=d(Ov),Zh=s(Ov,"SPAN",{});var AO=i(Zh);Qx=a(AO,"FairScale"),AO.forEach(o),Ov.forEach(o),Cg=d(t),We=s(t,"P",{});var Mr=i(We);e6=a(Mr,"By integrating "),Jn=s(Mr,"A",{href:!0,rel:!0});var qO=i(Jn);t6=a(qO,"FairScale"),qO.forEach(o),o6=a(Mr," the "),Di=s(Mr,"A",{href:!0});var DO=i(Di);r6=a(DO,"Trainer"),DO.forEach(o),a6=a(Mr,`
provides support for the following features from `),Xn=s(Mr,"A",{href:!0,rel:!0});var SO=i(Xn);n6=a(SO,"the ZeRO paper"),SO.forEach(o),s6=a(Mr,":"),Mr.forEach(o),Ig=d(t),Re=s(t,"OL",{});var Gr=i(Re);Jh=s(Gr,"LI",{});var PO=i(Jh);i6=a(PO,"Optimizer State Sharding"),PO.forEach(o),l6=d(Gr),Xh=s(Gr,"LI",{});var OO=i(Xh);d6=a(OO,"Gradient Sharding"),OO.forEach(o),c6=d(Gr),Kh=s(Gr,"LI",{});var CO=i(Kh);m6=a(CO,"Model Parameters Sharding (new and very experimental)"),CO.forEach(o),p6=d(Gr),Qh=s(Gr,"LI",{});var IO=i(Qh);h6=a(IO,"CPU offload (new and very experimental)"),IO.forEach(o),Gr.forEach(o),zg=d(t),Si=s(t,"P",{});var zO=i(Si);u6=a(zO,"You will need at least two GPUs to use this feature."),zO.forEach(o),Ng=d(t),Kn=s(t,"P",{});var yq=i(Kn);eu=s(yq,"STRONG",{});var NO=i(eu);f6=a(NO,"Installation"),NO.forEach(o),g6=a(yq,":"),yq.forEach(o),Lg=d(t),Pi=s(t,"P",{});var LO=i(Pi);_6=a(LO,"Install the library via pypi:"),LO.forEach(o),Ug=d(t),u(Qn.$$.fragment,t),Fg=d(t),Ot=s(t,"P",{});var td=i(Ot);v6=a(td,"or via "),tu=s(td,"CODE",{});var UO=i(tu);b6=a(UO,"transformers"),UO.forEach(o),y6=a(td,"\u2019 "),ou=s(td,"CODE",{});var FO=i(ou);w6=a(FO,"extras"),FO.forEach(o),T6=a(td,":"),td.forEach(o),Wg=d(t),u(es.$$.fragment,t),Rg=d(t),Ct=s(t,"P",{});var od=i(Ct);E6=a(od,"(available starting from "),ru=s(od,"CODE",{});var WO=i(ru);k6=a(WO,"transformers==4.6.0"),WO.forEach(o),$6=a(od,") or find more details on "),ts=s(od,"A",{href:!0,rel:!0});var RO=i(ts);x6=a(RO,"the FairScale\u2019s GitHub page"),RO.forEach(o),A6=a(od,"."),od.forEach(o),jg=d(t),kr=s(t,"P",{});var Cv=i(kr);q6=a(Cv,"If you\u2019re still struggling with the build, first make sure to read "),Oi=s(Cv,"A",{href:!0});var jO=i(Oi);D6=a(jO,"CUDA Extension Installation Notes"),jO.forEach(o),S6=a(Cv,"."),Cv.forEach(o),Mg=d(t),Ci=s(t,"P",{});var MO=i(Ci);P6=a(MO,"If it\u2019s still not resolved the build issue, here are a few more ideas."),MO.forEach(o),Gg=d(t),os=s(t,"P",{});var wq=i(os);au=s(wq,"CODE",{});var GO=i(au);O6=a(GO,"fairscale"),GO.forEach(o),C6=a(wq,` seems to have an issue with the recently introduced by pip build isolation feature. If you have a problem
with it, you may want to try one of:`),wq.forEach(o),Hg=d(t),u(rs.$$.fragment,t),Bg=d(t),Ii=s(t,"P",{});var HO=i(Ii);I6=a(HO,"or:"),HO.forEach(o),Vg=d(t),u(as.$$.fragment,t),Yg=d(t),ns=s(t,"P",{});var Tq=i(ns);nu=s(Tq,"CODE",{});var BO=i(nu);z6=a(BO,"fairscale"),BO.forEach(o),N6=a(Tq," also has issues with building against pytorch-nightly, so if you use it you may have to try one of:"),Tq.forEach(o),Zg=d(t),u(ss.$$.fragment,t),Jg=d(t),zi=s(t,"P",{});var VO=i(zi);L6=a(VO,"or:"),VO.forEach(o),Xg=d(t),u(is.$$.fragment,t),Kg=d(t),Ni=s(t,"P",{});var YO=i(Ni);U6=a(YO,"Of course, adjust the urls to match the cuda version you use."),YO.forEach(o),Qg=d(t),$r=s(t,"P",{});var Iv=i($r);F6=a(Iv,`If after trying everything suggested you still encounter build issues, please, proceed with the GitHub Issue of
`),ls=s(Iv,"A",{href:!0,rel:!0});var ZO=i(ls);W6=a(ZO,"FairScale"),ZO.forEach(o),R6=a(Iv,"."),Iv.forEach(o),e_=d(t),ds=s(t,"P",{});var Eq=i(ds);su=s(Eq,"STRONG",{});var JO=i(su);j6=a(JO,"Usage"),JO.forEach(o),M6=a(Eq,":"),Eq.forEach(o),t_=d(t),It=s(t,"P",{});var rd=i(It);G6=a(rd,"To use the first version of Sharded data-parallelism, add "),iu=s(rd,"CODE",{});var XO=i(iu);H6=a(XO,"--sharded_ddp simple"),XO.forEach(o),B6=a(rd,` to the command line arguments, and
make sure you have added the distributed launcher `),lu=s(rd,"CODE",{});var KO=i(lu);V6=a(KO,"-m torch.distributed.launch --nproc_per_node=NUMBER_OF_GPUS_YOU_HAVE"),KO.forEach(o),Y6=a(rd," if you haven\u2019t been using it already."),rd.forEach(o),o_=d(t),xr=s(t,"P",{});var zv=i(xr);Z6=a(zv,"For example here is how you could use it for "),du=s(zv,"CODE",{});var QO=i(du);J6=a(QO,"run_translation.py"),QO.forEach(o),X6=a(zv," with 2 GPUs:"),zv.forEach(o),r_=d(t),u(cs.$$.fragment,t),a_=d(t),Li=s(t,"P",{});var eC=i(Li);K6=a(eC,"Notes:"),eC.forEach(o),n_=d(t),je=s(t,"UL",{});var Hr=i(je);cu=s(Hr,"LI",{});var tC=i(cu);Q6=a(tC,"This feature requires distributed training (so multiple GPUs)."),tC.forEach(o),eA=d(Hr),mu=s(Hr,"LI",{});var oC=i(mu);tA=a(oC,"It is not implemented for TPUs."),oC.forEach(o),oA=d(Hr),ms=s(Hr,"LI",{});var Nv=i(ms);rA=a(Nv,"It works with "),pu=s(Nv,"CODE",{});var rC=i(pu);aA=a(rC,"--fp16"),rC.forEach(o),nA=a(Nv," too, to make things even faster."),Nv.forEach(o),sA=d(Hr),ps=s(Hr,"LI",{});var Lv=i(ps);iA=a(Lv,"One of the main benefits of enabling "),hu=s(Lv,"CODE",{});var aC=i(hu);lA=a(aC,"--sharded_ddp simple"),aC.forEach(o),dA=a(Lv,` is that it uses a lot less GPU memory, so you should be
able to use significantly larger batch sizes using the same hardware (e.g. 3x and even bigger) which should lead to
significantly shorter training time.`),Lv.forEach(o),Hr.forEach(o),s_=d(t),hs=s(t,"OL",{start:!0});var nC=i(hs);ot=s(nC,"LI",{});var Br=i(ot);cA=a(Br,"To use the second version of Sharded data-parallelism, add "),uu=s(Br,"CODE",{});var sC=i(uu);mA=a(sC,"--sharded_ddp zero_dp_2"),sC.forEach(o),pA=a(Br," or "),fu=s(Br,"CODE",{});var iC=i(fu);hA=a(iC,"--sharded_ddp zero_dp_3"),iC.forEach(o),uA=a(Br," to the command line arguments, and make sure you have added the distributed launcher "),gu=s(Br,"CODE",{});var lC=i(gu);fA=a(lC,"-m torch.distributed.launch --nproc_per_node=NUMBER_OF_GPUS_YOU_HAVE"),lC.forEach(o),gA=a(Br," if you haven\u2019t been using it already."),Br.forEach(o),nC.forEach(o),i_=d(t),Ar=s(t,"P",{});var Uv=i(Ar);_A=a(Uv,"For example here is how you could use it for "),_u=s(Uv,"CODE",{});var dC=i(_u);vA=a(dC,"run_translation.py"),dC.forEach(o),bA=a(Uv," with 2 GPUs:"),Uv.forEach(o),l_=d(t),u(us.$$.fragment,t),d_=d(t),Ao=s(t,"P",{});var df=i(Ao);vu=s(df,"CODE",{});var cC=i(vu);yA=a(cC,"zero_dp_2"),cC.forEach(o),wA=a(df," is an optimized version of the simple wrapper, while "),bu=s(df,"CODE",{});var mC=i(bu);TA=a(mC,"zero_dp_3"),mC.forEach(o),EA=a(df,` fully shards model weights,
gradients and optimizer states.`),df.forEach(o),c_=d(t),zt=s(t,"P",{});var ad=i(zt);kA=a(ad,"Both are compatible with adding "),yu=s(ad,"CODE",{});var pC=i(yu);$A=a(pC,"cpu_offload"),pC.forEach(o),xA=a(ad," to enable ZeRO-offload (activate it like this: "),wu=s(ad,"CODE",{});var hC=i(wu);AA=a(hC,'--sharded_ddp "zero_dp_2 cpu_offload"'),hC.forEach(o),qA=a(ad,")."),ad.forEach(o),m_=d(t),Ui=s(t,"P",{});var uC=i(Ui);DA=a(uC,"Notes:"),uC.forEach(o),p_=d(t),pe=s(t,"UL",{});var Gt=i(pe);Tu=s(Gt,"LI",{});var fC=i(Tu);SA=a(fC,"This feature requires distributed training (so multiple GPUs)."),fC.forEach(o),PA=d(Gt),Eu=s(Gt,"LI",{});var gC=i(Eu);OA=a(gC,"It is not implemented for TPUs."),gC.forEach(o),CA=d(Gt),fs=s(Gt,"LI",{});var Fv=i(fs);IA=a(Fv,"It works with "),ku=s(Fv,"CODE",{});var _C=i(ku);zA=a(_C,"--fp16"),_C.forEach(o),NA=a(Fv," too, to make things even faster."),Fv.forEach(o),LA=d(Gt),qo=s(Gt,"LI",{});var nd=i(qo);UA=a(nd,"The "),$u=s(nd,"CODE",{});var vC=i($u);FA=a(vC,"cpu_offload"),vC.forEach(o),WA=a(nd," additional option requires "),xu=s(nd,"CODE",{});var bC=i(xu);RA=a(bC,"--fp16"),bC.forEach(o),jA=a(nd,"."),nd.forEach(o),MA=d(Gt),Au=s(Gt,"LI",{});var yC=i(Au);GA=a(yC,`This is an area of active development, so make sure you have a source install of fairscale to use this feature as
some bugs you encounter may have been fixed there already.`),yC.forEach(o),Gt.forEach(o),h_=d(t),Fi=s(t,"P",{});var wC=i(Fi);HA=a(wC,"Known caveats:"),wC.forEach(o),u_=d(t),qr=s(t,"UL",{});var Wv=i(qr);Do=s(Wv,"LI",{});var sd=i(Do);BA=a(sd,"This feature is incompatible with "),qu=s(sd,"CODE",{});var TC=i(qu);VA=a(TC,"--predict_with_generate"),TC.forEach(o),YA=a(sd," in the "),Du=s(sd,"EM",{});var EC=i(Du);ZA=a(EC,"run_translation.py"),EC.forEach(o),JA=a(sd," script."),sd.forEach(o),XA=d(Wv),$e=s(Wv,"LI",{});var Ht=i($e);KA=a(Ht,"Using "),Su=s(Ht,"CODE",{});var kC=i(Su);QA=a(kC,"--sharded_ddp zero_dp_3"),kC.forEach(o),e9=a(Ht,` requires wrapping each layer of the model in the special container
`),Pu=s(Ht,"CODE",{});var $C=i(Pu);t9=a($C,"FullyShardedDataParallelism"),$C.forEach(o),o9=a(Ht," of fairscale. It should be used with the option "),Ou=s(Ht,"CODE",{});var xC=i(Ou);r9=a(xC,"auto_wrap"),xC.forEach(o),a9=a(Ht,` if you are not
doing this yourself: `),Cu=s(Ht,"CODE",{});var AC=i(Cu);n9=a(AC,'--sharded_ddp "zero_dp_3 auto_wrap"'),AC.forEach(o),s9=a(Ht,"."),Ht.forEach(o),Wv.forEach(o),f_=d(t),Wi=s(t,"P",{});var qC=i(Wi);i9=a(qC,"Sections that were moved:"),qC.forEach(o),g_=d(t),y=s(t,"P",{});var w=i(y);l9=a(w,"[ "),Ri=s(w,"A",{href:!0});var DC=i(Ri);d9=a(DC,"DeepSpeed"),DC.forEach(o),Iu=s(w,"A",{id:!0}),i(Iu).forEach(o),c9=a(w,`
| `),ji=s(w,"A",{href:!0});var SC=i(ji);m9=a(SC,"Installation"),SC.forEach(o),zu=s(w,"A",{id:!0}),i(zu).forEach(o),p9=a(w,`
| `),Mi=s(w,"A",{href:!0});var PC=i(Mi);h9=a(PC,"Deployment with multiple GPUs"),PC.forEach(o),Nu=s(w,"A",{id:!0}),i(Nu).forEach(o),u9=a(w,`
| `),Gi=s(w,"A",{href:!0});var OC=i(Gi);f9=a(OC,"Deployment with one GPU"),OC.forEach(o),Lu=s(w,"A",{id:!0}),i(Lu).forEach(o),g9=a(w,`
| `),Hi=s(w,"A",{href:!0});var CC=i(Hi);_9=a(CC,"Deployment in Notebooks"),CC.forEach(o),Uu=s(w,"A",{id:!0}),i(Uu).forEach(o),v9=a(w,`
| `),Bi=s(w,"A",{href:!0});var IC=i(Bi);b9=a(IC,"Configuration"),IC.forEach(o),Fu=s(w,"A",{id:!0}),i(Fu).forEach(o),y9=a(w,`
| `),Vi=s(w,"A",{href:!0});var zC=i(Vi);w9=a(zC,"Passing Configuration"),zC.forEach(o),Wu=s(w,"A",{id:!0}),i(Wu).forEach(o),T9=a(w,`
| `),Yi=s(w,"A",{href:!0});var NC=i(Yi);E9=a(NC,"Shared Configuration"),NC.forEach(o),Ru=s(w,"A",{id:!0}),i(Ru).forEach(o),k9=a(w,`
| `),Zi=s(w,"A",{href:!0});var LC=i(Zi);$9=a(LC,"ZeRO"),LC.forEach(o),ju=s(w,"A",{id:!0}),i(ju).forEach(o),x9=a(w,`
| `),Ji=s(w,"A",{href:!0});var UC=i(Ji);A9=a(UC,"ZeRO-2 Config"),UC.forEach(o),Mu=s(w,"A",{id:!0}),i(Mu).forEach(o),q9=a(w,`
| `),Xi=s(w,"A",{href:!0});var FC=i(Xi);D9=a(FC,"ZeRO-3 Config"),FC.forEach(o),Gu=s(w,"A",{id:!0}),i(Gu).forEach(o),S9=a(w,`
| `),Ki=s(w,"A",{href:!0});var WC=i(Ki);P9=a(WC,"NVMe Support"),WC.forEach(o),Hu=s(w,"A",{id:!0}),i(Hu).forEach(o),O9=a(w,`
| `),Qi=s(w,"A",{href:!0});var RC=i(Qi);C9=a(RC,"ZeRO-2 vs ZeRO-3 Performance"),RC.forEach(o),Bu=s(w,"A",{id:!0}),i(Bu).forEach(o),I9=a(w,`
| `),el=s(w,"A",{href:!0});var jC=i(el);z9=a(jC,"ZeRO-2 Example"),jC.forEach(o),Vu=s(w,"A",{id:!0}),i(Vu).forEach(o),N9=a(w,`
| `),tl=s(w,"A",{href:!0});var MC=i(tl);L9=a(MC,"ZeRO-3 Example"),MC.forEach(o),Yu=s(w,"A",{id:!0}),i(Yu).forEach(o),U9=a(w,`
| `),ol=s(w,"A",{href:!0});var GC=i(ol);F9=a(GC,"Optimizer"),GC.forEach(o),Zu=s(w,"A",{id:!0}),i(Zu).forEach(o),W9=a(w,`
| `),rl=s(w,"A",{href:!0});var HC=i(rl);R9=a(HC,"Scheduler"),HC.forEach(o),Ju=s(w,"A",{id:!0}),i(Ju).forEach(o),j9=a(w,`
| `),al=s(w,"A",{href:!0});var BC=i(al);M9=a(BC,"fp32 Precision"),BC.forEach(o),Xu=s(w,"A",{id:!0}),i(Xu).forEach(o),G9=a(w,`
| `),nl=s(w,"A",{href:!0});var VC=i(nl);H9=a(VC,"Automatic Mixed Precision"),VC.forEach(o),Ku=s(w,"A",{id:!0}),i(Ku).forEach(o),B9=a(w,`
| `),sl=s(w,"A",{href:!0});var YC=i(sl);V9=a(YC,"Batch Size"),YC.forEach(o),Qu=s(w,"A",{id:!0}),i(Qu).forEach(o),Y9=a(w,`
| `),il=s(w,"A",{href:!0});var ZC=i(il);Z9=a(ZC,"Gradient Accumulation"),ZC.forEach(o),ef=s(w,"A",{id:!0}),i(ef).forEach(o),J9=a(w,`
| `),ll=s(w,"A",{href:!0});var JC=i(ll);X9=a(JC,"Gradient Clipping"),JC.forEach(o),tf=s(w,"A",{id:!0}),i(tf).forEach(o),K9=a(w,`
| `),dl=s(w,"A",{href:!0});var XC=i(dl);Q9=a(XC,"Getting The Model Weights Out"),XC.forEach(o),of=s(w,"A",{id:!0}),i(of).forEach(o),eq=a(w,`
]`),w.forEach(o),this.h()},h(){p(E,"name","hf:doc:metadata"),p(E,"content",JSON.stringify(iI)),p(S,"id","trainer"),p(S,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(S,"href","#trainer"),p(x,"class","relative group"),p(ie,"href","/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer"),p(Y,"href","../examples"),p(oe,"href","/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer"),p(ve,"href","/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.TrainingArguments"),p(be,"href","https://github.com/NVIDIA/apex"),p(be,"rel","nofollow"),p(ye,"href","/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer"),p(zs,"href","/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer"),p(Ns,"href","/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer"),p(Ls,"href","callback"),p(No,"id","transformers.Trainer"),p(No,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(No,"href","#transformers.Trainer"),p(Vt,"class","relative group"),p(Us,"href","/docs/transformers/v4.15.0/en/main_classes/model#transformers.PreTrainedModel"),p(Uo,"class","docstring"),p(Fo,"class","docstring"),p(lt,"class","docstring"),p(dt,"class","docstring"),p(ct,"class","docstring"),p(Wo,"class","docstring"),p(Se,"class","docstring"),p(mt,"class","docstring"),p(Ws,"href","/docs/transformers/v4.15.0/en/main_classes/model#transformers.PreTrainedModel"),p(Ro,"class","docstring"),p(pt,"class","docstring"),p(ht,"class","docstring"),p(Pe,"class","docstring"),p(ut,"class","docstring"),p(Mo,"class","docstring"),p(Go,"class","docstring"),p(Ho,"class","docstring"),p(ft,"class","docstring"),p(js,"href","/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer"),p(Oa,"href","https://github.com/pytorch/pytorch/issues/16266"),p(Oa,"rel","nofollow"),p(Ms,"href","/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer"),p(Gs,"href","/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer"),p($,"class","docstring"),p(Bo,"class","docstring"),p(_t,"class","docstring"),p(vt,"class","docstring"),p(X,"class","docstring"),p(bt,"class","docstring"),p(yt,"class","docstring"),p(Yo,"class","docstring"),p(Zo,"class","docstring"),p(Oe,"class","docstring"),p(wt,"class","docstring"),p(Tt,"class","docstring"),p(Jo,"class","docstring"),p(Et,"class","docstring"),p(b,"class","docstring"),p(Xo,"id","transformers.Seq2SeqTrainer"),p(Xo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Xo,"href","#transformers.Seq2SeqTrainer"),p(ao,"class","relative group"),p(Ce,"class","docstring"),p(K,"class","docstring"),p(no,"class","docstring"),p(Qo,"id","transformers.TrainingArguments"),p(Qo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Qo,"href","#transformers.TrainingArguments"),p(mo,"class","relative group"),p(Bs,"href","/docs/transformers/v4.15.0/en/internal/trainer_utils#transformers.HfArgumentParser"),p(mn,"href","https://docs.python.org/3/library/argparse#module-argparse"),p(mn,"rel","nofollow"),p(de,"class","docstring"),p(er,"class","docstring"),p(kt,"class","docstring"),p(tr,"class","docstring"),p(or,"class","docstring"),p(rr,"class","docstring"),p(N,"class","docstring"),p(ar,"id","transformers.Seq2SeqTrainingArguments"),p(ar,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(ar,"href","#transformers.Seq2SeqTrainingArguments"),p(go,"class","relative group"),p(Vs,"href","/docs/transformers/v4.15.0/en/internal/trainer_utils#transformers.HfArgumentParser"),p(En,"href","https://docs.python.org/3/library/argparse#module-argparse"),p(En,"rel","nofollow"),p(ae,"class","docstring"),p(nr,"id","checkpoints"),p(nr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(nr,"href","#checkpoints"),p(vo,"class","relative group"),p(Ys,"href","/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer"),p(Zs,"href","/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.TrainingArguments"),p(Js,"href","/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer.train"),p(Qs,"href","/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.TrainingArguments"),p(cr,"id","logging"),p(cr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(cr,"href","#logging"),p(bo,"class","relative group"),p(ti,"href","/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer"),p(oi,"href","/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.TrainingArguments"),p(ni,"href","/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.TrainingArguments"),p(si,"href","/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer"),p(ii,"href","/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer"),p(hr,"id","randomness"),p(hr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(hr,"href","#randomness"),p(yo,"class","relative group"),p(hi,"href","/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer"),p(Pn,"href","https://pytorch.org/docs/stable/notes/randomness"),p(Pn,"rel","nofollow"),p(ur,"id","trainer-integrations"),p(ur,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(ur,"href","#trainer-integrations"),p(wo,"class","relative group"),p(ui,"href","/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer"),p(Cn,"href","https://github.com/microsoft/DeepSpeed"),p(Cn,"rel","nofollow"),p(In,"href","https://github.com/facebookresearch/fairscale/"),p(In,"rel","nofollow"),p(zn,"href","https://arxiv.org/abs/1910.02054"),p(zn,"rel","nofollow"),p(gi,"id","zero-install-notes"),p(gr,"id","cuda-extension-installation-notes"),p(gr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(gr,"href","#cuda-extension-installation-notes"),p(To,"class","relative group"),p(Ln,"href","https://github.com/facebookresearch/fairscale/issues"),p(Ln,"rel","nofollow"),p(Un,"href","https://github.com/microsoft/DeepSpeed/issues"),p(Un,"rel","nofollow"),p(_r,"id","possible-problem-1"),p(_r,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(_r,"href","#possible-problem-1"),p(Eo,"class","relative group"),p(jn,"href","https://www.google.com/search?q=ubuntu+cuda+10.2+install"),p(jn,"rel","nofollow"),p(br,"id","possible-problem-2"),p(br,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(br,"href","#possible-problem-2"),p(ko,"class","relative group"),p(wr,"id","possible-problem-3"),p(wr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(wr,"href","#possible-problem-3"),p($o,"class","relative group"),p(Er,"id","fairscale"),p(Er,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Er,"href","#fairscale"),p(xo,"class","relative group"),p(Jn,"href","https://github.com/facebookresearch/fairscale/"),p(Jn,"rel","nofollow"),p(Di,"href","/docs/transformers/v4.15.0/en/main_classes/trainer#transformers.Trainer"),p(Xn,"href","https://arxiv.org/abs/1910.02054"),p(Xn,"rel","nofollow"),p(ts,"href","https://github.com/facebookresearch/fairscale/#installation"),p(ts,"rel","nofollow"),p(Oi,"href","#zero-install-notes"),p(ls,"href","https://github.com/facebookresearch/fairscale/issues"),p(ls,"rel","nofollow"),p(hs,"start","3"),p(Ri,"href","./deepspeed#deepspeed-trainer-integration"),p(Iu,"id","deepspeed"),p(ji,"href","./deepspeed#deepspeed-installation"),p(zu,"id","installation"),p(Mi,"href","./deepspeed#deepspeed-multi-gpu"),p(Nu,"id","deployment-with-multiple-gpus"),p(Gi,"href","./deepspeed#deepspeed-one-gpu"),p(Lu,"id","deployment-with-one-gpu"),p(Hi,"href","./deepspeed#deepspeed-notebook"),p(Uu,"id","deployment-in-notebooks"),p(Bi,"href","./deepspeed#deepspeed-config"),p(Fu,"id","configuration"),p(Vi,"href","./deepspeed#deepspeed-config-passing"),p(Wu,"id","passing-configuration"),p(Yi,"href","./deepspeed#deepspeed-config-shared"),p(Ru,"id","shared-configuration"),p(Zi,"href","./deepspeed#deepspeed-zero"),p(ju,"id","zero"),p(Ji,"href","./deepspeed#deepspeed-zero2-config"),p(Mu,"id","zero-2-config"),p(Xi,"href","./deepspeed#deepspeed-zero3-config"),p(Gu,"id","zero-3-config"),p(Ki,"href","./deepspeed#deepspeed-nvme"),p(Hu,"id","nvme-support"),p(Qi,"href","./deepspeed#deepspeed-zero2-zero3-performance"),p(Bu,"id","zero-2-vs-zero-3-performance"),p(el,"href","./deepspeed#deepspeed-zero2-example"),p(Vu,"id","zero-2-example"),p(tl,"href","./deepspeed#deepspeed-zero3-example"),p(Yu,"id","zero-3-example"),p(ol,"href","./deepspeed#deepspeed-optimizer"),p(Zu,"id","optimizer"),p(rl,"href","./deepspeed#deepspeed-scheduler"),p(Ju,"id","scheduler"),p(al,"href","./deepspeed#deepspeed-fp32"),p(Xu,"id","fp32-precision"),p(nl,"href","./deepspeed#deepspeed-amp"),p(Ku,"id","automatic-mixed-precision"),p(sl,"href","./deepspeed#deepspeed-bs"),p(Qu,"id","batch-size"),p(il,"href","./deepspeed#deepspeed-grad-acc"),p(ef,"id","gradient-accumulation"),p(ll,"href","./deepspeed#deepspeed-grad-clip"),p(tf,"id","gradient-clipping"),p(dl,"href","./deepspeed#deepspeed-weight-extraction"),p(of,"id","getting-the-model-weights-out")},m(t,c){e(document.head,E),m(t,L,c),m(t,x,c),e(x,S),e(S,fe),f(W,fe,null),e(x,R),e(x,H),e(H,ge),m(t,ee,c),m(t,j,c),e(j,se),e(j,ie),e(ie,te),e(j,le),e(j,Y),e(Y,Ze),e(j,_e),m(t,z,c),m(t,O,c),e(O,rt),e(O,oe),e(oe,at),e(O,nt),e(O,ve),e(ve,Vr),e(O,Yr),m(t,Je,c),m(t,Ae,c),e(Ae,Zr),e(Ae,be),e(be,Jr),e(Ae,Xr),m(t,Z,c),m(t,B,c),e(B,ys),e(B,ye),e(ye,Oo),e(B,ws),m(t,Bt,c),m(t,q,c),e(q,V),e(V,Co),e(Co,Ts),e(V,Es),e(q,ks),e(q,$s),e($s,id),e(id,jv),e($s,Mv),e(q,Gv),e(q,xs),e(xs,ld),e(ld,Hv),e(xs,Bv),e(q,Vv),e(q,As),e(As,dd),e(dd,Yv),e(As,Zv),e(q,Jv),e(q,st),e(st,cd),e(cd,Xv),e(st,Kv),e(st,md),e(md,Qv),e(st,eb),e(st,pd),e(pd,tb),e(st,ob),e(q,rb),e(q,qs),e(qs,hd),e(hd,ab),e(qs,nb),e(q,sb),e(q,Ds),e(Ds,ud),e(ud,ib),e(Ds,lb),e(q,db),e(q,Ss),e(Ss,fd),e(fd,cb),e(Ss,mb),e(q,pb),e(q,Ps),e(Ps,gd),e(gd,hb),e(Ps,ub),e(q,fb),e(q,Os),e(Os,_d),e(_d,gb),e(Os,_b),e(q,vb),e(q,Cs),e(Cs,vd),e(vd,bb),e(Cs,yb),e(q,wb),e(q,Is),e(Is,bd),e(bd,Tb),e(Is,Eb),m(t,cf,c),f(Io,t,c),m(t,mf,c),m(t,zo,c),e(zo,kb),e(zo,zs),e(zs,$b),e(zo,xb),m(t,pf,c),f(Kr,t,c),m(t,hf,c),m(t,it,c),e(it,Ab),e(it,Ns),e(Ns,qb),e(it,Db),e(it,Ls),e(Ls,Sb),e(it,Pb),m(t,uf,c),m(t,Vt,c),e(Vt,No),e(No,yd),f(Qr,yd,null),e(Vt,Ob),e(Vt,wd),e(wd,Cb),m(t,ff,c),m(t,b,c),f(ea,b,null),e(b,Ib),e(b,Td),e(Td,zb),e(b,Nb),e(b,Ed),e(Ed,Lb),e(b,Ub),e(b,we),e(we,Lo),e(Lo,kd),e(kd,Fb),e(Lo,Wb),e(Lo,Us),e(Us,Rb),e(Lo,jb),e(we,Mb),e(we,J),e(J,$d),e($d,Gb),e(J,Hb),e(J,xd),e(xd,Bb),e(J,Vb),e(J,Ad),e(Ad,Yb),e(J,Zb),e(J,qd),e(qd,Jb),e(J,Xb),e(J,Dd),e(Dd,Kb),e(J,Qb),e(J,Sd),e(Sd,e1),e(J,t1),e(we,o1),e(we,Fs),e(Fs,Pd),e(Pd,r1),e(Fs,a1),e(we,n1),e(we,qe),e(qe,Od),e(Od,s1),e(qe,i1),e(qe,Cd),e(Cd,l1),e(qe,d1),e(qe,Id),e(Id,c1),e(qe,m1),e(qe,zd),e(zd,p1),e(qe,h1),e(we,u1),e(we,De),e(De,Nd),e(Nd,f1),e(De,g1),e(De,Ld),e(Ld,_1),e(De,v1),e(De,Ud),e(Ud,b1),e(De,y1),e(De,Fd),e(Fd,w1),e(De,T1),e(b,E1),e(b,Uo),f(ta,Uo,null),e(Uo,k1),e(Uo,oa),e(oa,$1),e(oa,Wd),e(Wd,x1),e(oa,A1),e(b,q1),e(b,Fo),f(ra,Fo,null),e(Fo,D1),e(Fo,aa),e(aa,S1),e(aa,Rd),e(Rd,P1),e(aa,O1),e(b,C1),e(b,lt),f(na,lt,null),e(lt,I1),e(lt,jd),e(jd,z1),e(lt,N1),e(lt,Md),e(Md,L1),e(b,U1),e(b,dt),f(sa,dt,null),e(dt,F1),e(dt,Gd),e(Gd,W1),e(dt,R1),e(dt,ia),e(ia,j1),e(ia,Hd),e(Hd,M1),e(ia,G1),e(b,H1),e(b,ct),f(la,ct,null),e(ct,B1),e(ct,Bd),e(Bd,V1),e(ct,Y1),e(ct,Xe),e(Xe,Z1),e(Xe,Vd),e(Vd,J1),e(Xe,X1),e(Xe,Yd),e(Yd,K1),e(Xe,Q1),e(Xe,Zd),e(Zd,ey),e(Xe,ty),e(b,oy),e(b,Wo),f(da,Wo,null),e(Wo,ry),e(Wo,Jd),e(Jd,ay),e(b,ny),e(b,Se),f(ca,Se,null),e(Se,sy),e(Se,Xd),e(Xd,iy),e(Se,ly),e(Se,ma),e(ma,dy),e(ma,Kd),e(Kd,cy),e(ma,my),e(Se,py),e(Se,Qd),e(Qd,hy),e(b,uy),e(b,mt),f(pa,mt,null),e(mt,fy),e(mt,Yt),e(Yt,gy),e(Yt,ec),e(ec,_y),e(Yt,vy),e(Yt,tc),e(tc,by),e(Yt,yy),e(mt,wy),e(mt,oc),e(oc,Ty),e(b,Ey),e(b,Ro),f(ha,Ro,null),e(Ro,ky),e(Ro,ua),e(ua,$y),e(ua,Ws),e(Ws,xy),e(ua,Ay),e(b,qy),e(b,pt),f(fa,pt,null),e(pt,Dy),e(pt,ga),e(ga,Sy),e(ga,rc),e(rc,Py),e(ga,Oy),e(pt,Cy),e(pt,ac),e(ac,Iy),e(b,zy),e(b,ht),f(_a,ht,null),e(ht,Ny),e(ht,va),e(va,Ly),e(va,nc),e(nc,Uy),e(va,Fy),e(ht,Wy),e(ht,sc),e(sc,Ry),e(b,jy),e(b,Pe),f(ba,Pe,null),e(Pe,My),e(Pe,ya),e(ya,Gy),e(ya,ic),e(ic,Hy),e(ya,By),e(Pe,Vy),e(Pe,Zt),e(Zt,Yy),e(Zt,lc),e(lc,Zy),e(Zt,Jy),e(Zt,dc),e(dc,Xy),e(Zt,Ky),e(Pe,Qy),e(Pe,cc),e(cc,e0),e(b,t0),e(b,ut),f(wa,ut,null),e(ut,o0),e(ut,Te),e(Te,r0),e(Te,mc),e(mc,a0),e(Te,n0),e(Te,pc),e(pc,s0),e(Te,i0),e(Te,hc),e(hc,l0),e(Te,d0),e(Te,uc),e(uc,c0),e(Te,m0),e(ut,p0),f(jo,ut,null),e(b,h0),e(b,Mo),f(Ta,Mo,null),e(Mo,u0),e(Mo,Ea),e(Ea,f0),e(Ea,fc),e(fc,g0),e(Ea,_0),e(b,v0),e(b,Go),f(ka,Go,null),e(Go,b0),e(Go,gc),e(gc,y0),e(b,w0),e(b,Ho),f($a,Ho,null),e(Ho,T0),e(Ho,xa),e(xa,E0),e(xa,_c),e(_c,k0),e(xa,$0),e(b,x0),e(b,ft),f(Aa,ft,null),e(ft,A0),e(ft,qa),e(qa,q0),e(qa,vc),e(vc,D0),e(qa,S0),e(ft,P0),e(ft,bc),e(bc,O0),e(b,C0),e(b,$),f(Da,$,null),e($,I0),e($,yc),e(yc,z0),e($,N0),e($,wc),e(wc,L0),e($,U0),e($,Tc),e(Tc,F0),e($,W0),e($,Jt),e(Jt,R0),e(Jt,Ec),e(Ec,j0),e(Jt,M0),e(Jt,kc),e(kc,G0),e(Jt,H0),e($,B0),e($,$c),e($c,V0),e($,Y0),f(Sa,$,null),e($,Z0),e($,xc),e(xc,Ac),e(Ac,J0),e($,X0),e($,Ke),e(Ke,Ee),e(Ee,K0),e(Ee,qc),e(qc,Q0),e(Ee,e2),e(Ee,Dc),e(Dc,t2),e(Ee,o2),e(Ee,Sc),e(Sc,r2),e(Ee,a2),e(Ee,Pc),e(Pc,n2),e(Ee,s2),e(Ke,i2),e(Ke,Xt),e(Xt,l2),e(Xt,Oc),e(Oc,d2),e(Xt,c2),e(Xt,Cc),e(Cc,m2),e(Xt,p2),e(Ke,h2),e(Ke,Rs),e(Rs,Ic),e(Ic,u2),e(Rs,f2),e(Ke,g2),e(Ke,gt),e(gt,zc),e(zc,_2),e(gt,v2),e(gt,Nc),e(Nc,b2),e(gt,y2),e(gt,Lc),e(Lc,w2),e(gt,T2),e($,E2),e($,Uc),e(Uc,k2),e($,$2),e($,Fc),e(Fc,x2),e($,A2),e($,Pa),e(Pa,q2),e(Pa,Wc),e(Wc,D2),e(Pa,S2),e($,P2),e($,Qe),e(Qe,O2),e(Qe,Rc),e(Rc,C2),e(Qe,I2),e(Qe,jc),e(jc,z2),e(Qe,N2),e(Qe,Mc),e(Mc,L2),e(Qe,U2),e($,F2),e($,re),e(re,W2),e(re,js),e(js,R2),e(re,j2),e(re,Gc),e(Gc,M2),e(re,G2),e(re,Hc),e(Hc,H2),e(re,B2),e(re,Bc),e(Bc,V2),e(re,Y2),e(re,Vc),e(Vc,Z2),e(re,J2),e($,X2),e($,C),e(C,K2),e(C,Yc),e(Yc,Q2),e(C,ew),e(C,Zc),e(Zc,tw),e(C,ow),e(C,Jc),e(Jc,rw),e(C,aw),e(C,Xc),e(Xc,nw),e(C,sw),e(C,Oa),e(Oa,iw),e(C,lw),e(C,Kc),e(Kc,dw),e(C,cw),e(C,Qc),e(Qc,mw),e(C,pw),e(C,em),e(em,hw),e(C,uw),e(C,tm),e(tm,fw),e(C,gw),e(C,om),e(om,_w),e(C,vw),e($,bw),e($,ke),e(ke,yw),e(ke,Ms),e(Ms,ww),e(ke,Tw),e(ke,rm),e(rm,Ew),e(ke,kw),e(ke,Gs),e(Gs,$w),e(ke,xw),e(ke,am),e(am,Aw),e(ke,qw),e($,Dw),e($,nm),e(nm,Sw),e(b,Pw),e(b,Bo),f(Ca,Bo,null),e(Bo,Ow),e(Bo,sm),e(sm,Cw),e(b,Iw),e(b,_t),f(Ia,_t,null),e(_t,zw),e(_t,za),e(za,Nw),e(za,im),e(im,Lw),e(za,Uw),e(_t,Fw),e(_t,Hs),e(Hs,Ww),e(Hs,lm),e(lm,Rw),e(b,jw),e(b,vt),f(Na,vt,null),e(vt,Mw),e(vt,La),e(La,Gw),e(La,dm),e(dm,Hw),e(La,Bw),e(vt,Vw),e(vt,Ua),e(Ua,Yw),e(Ua,cm),e(cm,Zw),e(Ua,Jw),e(b,Xw),e(b,X),f(Fa,X,null),e(X,Kw),e(X,mm),e(mm,Qw),e(X,e4),e(X,Wa),e(Wa,t4),e(Wa,pm),e(pm,o4),e(Wa,r4),e(X,a4),f(Vo,X,null),e(X,n4),e(X,Ra),e(Ra,s4),e(Ra,hm),e(hm,i4),e(Ra,l4),e(X,d4),e(X,Kt),e(Kt,Qt),e(Qt,c4),e(Qt,um),e(um,m4),e(Qt,p4),e(Qt,fm),e(fm,h4),e(Qt,u4),e(Kt,f4),e(Kt,eo),e(eo,g4),e(eo,gm),e(gm,_4),e(eo,v4),e(eo,_m),e(_m,b4),e(eo,y4),e(Kt,w4),e(Kt,to),e(to,T4),e(to,vm),e(vm,E4),e(to,k4),e(to,bm),e(bm,$4),e(to,x4),e(b,A4),e(b,bt),f(ja,bt,null),e(bt,q4),e(bt,oo),e(oo,D4),e(oo,ym),e(ym,S4),e(oo,P4),e(oo,wm),e(wm,O4),e(oo,C4),e(bt,I4),e(bt,Tm),e(Tm,z4),e(b,N4),e(b,yt),f(Ma,yt,null),e(yt,L4),e(yt,ro),e(ro,U4),e(ro,Em),e(Em,F4),e(ro,W4),e(ro,km),e(km,R4),e(ro,j4),e(yt,M4),e(yt,$m),e($m,G4),e(b,H4),e(b,Yo),f(Ga,Yo,null),e(Yo,B4),e(Yo,et),e(et,V4),e(et,xm),e(xm,Y4),e(et,Z4),e(et,Am),e(Am,J4),e(et,X4),e(et,qm),e(qm,K4),e(et,Q4),e(b,eT),e(b,Zo),f(Ha,Zo,null),e(Zo,tT),e(Zo,Ba),e(Ba,oT),e(Ba,Dm),e(Dm,rT),e(Ba,aT),e(b,nT),e(b,Oe),f(Va,Oe,null),e(Oe,sT),e(Oe,Ya),e(Ya,iT),e(Ya,Sm),e(Sm,lT),e(Ya,dT),e(Oe,cT),e(Oe,Pm),e(Pm,mT),e(Oe,pT),e(Oe,Za),e(Za,hT),e(Za,Om),e(Om,uT),e(Za,fT),e(b,gT),e(b,wt),f(Ja,wt,null),e(wt,_T),e(wt,Xa),e(Xa,vT),e(Xa,Cm),e(Cm,bT),e(Xa,yT),e(wt,wT),e(wt,Im),e(Im,TT),e(b,ET),e(b,Tt),f(Ka,Tt,null),e(Tt,kT),e(Tt,zm),e(zm,$T),e(Tt,xT),e(Tt,Nm),e(Nm,AT),e(b,qT),e(b,Jo),f(Qa,Jo,null),e(Jo,DT),e(Jo,Lm),e(Lm,ST),e(b,PT),e(b,Et),f(en,Et,null),e(Et,OT),e(Et,Um),e(Um,CT),e(Et,IT),e(Et,Fm),e(Fm,zT),m(t,gf,c),m(t,ao,c),e(ao,Xo),e(Xo,Wm),f(tn,Wm,null),e(ao,NT),e(ao,Rm),e(Rm,LT),m(t,_f,c),m(t,no,c),e(no,Ce),f(on,Ce,null),e(Ce,UT),e(Ce,jm),e(jm,FT),e(Ce,WT),e(Ce,rn),e(rn,RT),e(rn,Mm),e(Mm,jT),e(rn,MT),e(Ce,GT),e(Ce,Gm),e(Gm,HT),e(no,BT),e(no,K),f(an,K,null),e(K,VT),e(K,Hm),e(Hm,YT),e(K,ZT),e(K,nn),e(nn,JT),e(nn,Bm),e(Bm,XT),e(nn,KT),e(K,QT),f(Ko,K,null),e(K,eE),e(K,sn),e(sn,tE),e(sn,Vm),e(Vm,oE),e(sn,rE),e(K,aE),e(K,so),e(so,io),e(io,nE),e(io,Ym),e(Ym,sE),e(io,iE),e(io,Zm),e(Zm,lE),e(io,dE),e(so,cE),e(so,lo),e(lo,mE),e(lo,Jm),e(Jm,pE),e(lo,hE),e(lo,Xm),e(Xm,uE),e(lo,fE),e(so,gE),e(so,co),e(co,_E),e(co,Km),e(Km,vE),e(co,bE),e(co,Qm),e(Qm,yE),e(co,wE),m(t,vf,c),m(t,mo,c),e(mo,Qo),e(Qo,ep),f(ln,ep,null),e(mo,TE),e(mo,tp),e(tp,EE),m(t,bf,c),m(t,N,c),f(dn,N,null),e(N,kE),e(N,cn),e(cn,$E),e(cn,op),e(op,xE),e(cn,AE),e(N,qE),e(N,po),e(po,DE),e(po,Bs),e(Bs,SE),e(po,PE),e(po,mn),e(mn,OE),e(po,CE),e(N,IE),e(N,de),f(pn,de,null),e(de,zE),e(de,rp),e(rp,NE),e(de,LE),e(de,ho),e(ho,UE),e(ho,ap),e(ap,FE),e(ho,WE),e(ho,np),e(np,RE),e(ho,jE),e(de,ME),e(de,uo),e(uo,GE),e(uo,sp),e(sp,HE),e(uo,BE),e(uo,ip),e(ip,VE),e(uo,YE),e(de,ZE),e(de,hn),e(hn,JE),e(hn,lp),e(lp,XE),e(hn,KE),e(N,QE),e(N,er),f(un,er,null),e(er,e5),e(er,dp),e(dp,t5),e(N,o5),e(N,kt),f(fn,kt,null),e(kt,r5),e(kt,cp),e(cp,a5),e(kt,n5),e(kt,fo),e(fo,s5),e(fo,mp),e(mp,i5),e(fo,l5),e(fo,pp),e(pp,d5),e(fo,c5),e(N,m5),e(N,tr),f(gn,tr,null),e(tr,p5),e(tr,_n),e(_n,h5),e(_n,hp),e(hp,u5),e(_n,f5),e(N,g5),e(N,or),f(vn,or,null),e(or,_5),e(or,up),e(up,v5),e(N,b5),e(N,rr),f(bn,rr,null),e(rr,y5),e(rr,fp),e(fp,w5),m(t,yf,c),m(t,go,c),e(go,ar),e(ar,gp),f(yn,gp,null),e(go,T5),e(go,_p),e(_p,E5),m(t,wf,c),m(t,ae,c),f(wn,ae,null),e(ae,k5),e(ae,Tn),e(Tn,$5),e(Tn,vp),e(vp,x5),e(Tn,A5),e(ae,q5),e(ae,_o),e(_o,D5),e(_o,Vs),e(Vs,S5),e(_o,P5),e(_o,En),e(En,O5),e(_o,C5),e(ae,I5),e(ae,ne),e(ne,z5),e(ne,bp),e(bp,N5),e(ne,L5),e(ne,yp),e(yp,U5),e(ne,F5),e(ne,wp),e(wp,W5),e(ne,R5),e(ne,Tp),e(Tp,j5),e(ne,M5),e(ne,Ep),e(Ep,G5),e(ne,H5),e(ae,B5),e(ae,D),e(D,V5),e(D,kp),e(kp,Y5),e(D,Z5),e(D,$p),e($p,J5),e(D,X5),e(D,xp),e(xp,K5),e(D,Q5),e(D,Ap),e(Ap,ek),e(D,tk),e(D,qp),e(qp,ok),e(D,rk),e(D,Dp),e(Dp,ak),e(D,nk),e(D,Sp),e(Sp,sk),e(D,ik),e(D,Pp),e(Pp,lk),e(D,dk),e(D,Op),e(Op,ck),e(D,mk),e(D,Cp),e(Cp,pk),e(D,hk),e(D,Ip),e(Ip,uk),e(D,fk),e(D,zp),e(zp,gk),e(D,_k),e(D,Np),e(Np,vk),e(D,bk),m(t,Tf,c),m(t,vo,c),e(vo,nr),e(nr,Lp),f(kn,Lp,null),e(vo,yk),e(vo,Up),e(Up,wk),m(t,Ef,c),m(t,ce,c),e(ce,Tk),e(ce,Ys),e(Ys,Ek),e(ce,kk),e(ce,Fp),e(Fp,$k),e(ce,xk),e(ce,Zs),e(Zs,Ak),e(ce,qk),e(ce,Wp),e(Wp,Dk),e(ce,Sk),m(t,kf,c),m(t,sr,c),e(sr,Pk),e(sr,Js),e(Js,Ok),e(sr,Ck),m(t,$f,c),m(t,ir,c),e(ir,Xs),e(Xs,Rp),e(Rp,Ik),e(Xs,zk),e(ir,Nk),e(ir,Ks),e(Ks,jp),e(jp,Lk),e(Ks,Uk),m(t,xf,c),m(t,Ie,c),e(Ie,Fk),e(Ie,Mp),e(Mp,Wk),e(Ie,Rk),e(Ie,Gp),e(Gp,jk),e(Ie,Mk),e(Ie,Qs),e(Qs,Gk),e(Ie,Hk),m(t,Af,c),m(t,lr,c),e(lr,dr),e(dr,Hp),e(Hp,Bk),e(dr,Vk),e(dr,Bp),e(Bp,Yk),e(dr,Zk),e(lr,Jk),e(lr,ei),e(ei,Vp),e(Vp,Xk),e(ei,Kk),m(t,qf,c),m(t,bo,c),e(bo,cr),e(cr,Yp),f($n,Yp,null),e(bo,Qk),e(bo,Zp),e(Zp,e3),m(t,Df,c),m(t,ze,c),e(ze,t3),e(ze,ti),e(ti,o3),e(ze,r3),e(ze,Jp),e(Jp,a3),e(ze,n3),e(ze,Xp),e(Xp,s3),e(ze,i3),m(t,Sf,c),m(t,$t,c),e($t,l3),e($t,Kp),e(Kp,d3),e($t,c3),e($t,oi),e(oi,m3),e($t,p3),m(t,Pf,c),m(t,mr,c),e(mr,ri),e(ri,Qp),e(Qp,h3),e(ri,u3),e(mr,f3),e(mr,ai),e(ai,eh),e(eh,g3),e(ai,_3),m(t,Of,c),m(t,Ne,c),e(Ne,v3),e(Ne,ni),e(ni,b3),e(Ne,y3),e(Ne,th),e(th,w3),e(Ne,T3),e(Ne,oh),e(oh,E3),e(Ne,k3),m(t,Cf,c),m(t,Q,c),e(Q,$3),e(Q,si),e(si,x3),e(Q,A3),e(Q,rh),e(rh,q3),e(Q,D3),e(Q,ah),e(ah,S3),e(Q,P3),e(Q,nh),e(nh,O3),e(Q,C3),e(Q,ii),e(ii,I3),e(Q,z3),m(t,If,c),m(t,li,c),e(li,N3),m(t,zf,c),f(xn,t,c),m(t,Nf,c),m(t,di,c),e(di,L3),m(t,Lf,c),f(An,t,c),m(t,Uf,c),m(t,ci,c),e(ci,U3),m(t,Ff,c),f(qn,t,c),m(t,Wf,c),m(t,mi,c),e(mi,F3),m(t,Rf,c),m(t,pi,c),e(pi,W3),m(t,jf,c),f(Dn,t,c),m(t,Mf,c),m(t,pr,c),e(pr,R3),e(pr,sh),e(sh,j3),e(pr,M3),m(t,Gf,c),m(t,yo,c),e(yo,hr),e(hr,ih),f(Sn,ih,null),e(yo,G3),e(yo,lh),e(lh,H3),m(t,Hf,c),m(t,me,c),e(me,B3),e(me,hi),e(hi,V3),e(me,Y3),e(me,dh),e(dh,Z3),e(me,J3),e(me,ch),e(ch,X3),e(me,K3),e(me,mh),e(mh,Q3),e(me,e$),m(t,Bf,c),m(t,xt,c),e(xt,t$),e(xt,Pn),e(Pn,o$),e(xt,r$),e(xt,ph),e(ph,a$),e(xt,n$),m(t,Vf,c),m(t,wo,c),e(wo,ur),e(ur,hh),f(On,hh,null),e(wo,s$),e(wo,uh),e(uh,i$),m(t,Yf,c),m(t,fr,c),e(fr,l$),e(fr,ui),e(ui,d$),e(fr,c$),m(t,Zf,c),m(t,Le,c),e(Le,m$),e(Le,Cn),e(Cn,p$),e(Le,h$),e(Le,In),e(In,u$),e(Le,f$),e(Le,zn),e(zn,g$),e(Le,_$),m(t,Jf,c),m(t,fi,c),e(fi,v$),m(t,Xf,c),m(t,gi,c),m(t,Kf,c),m(t,To,c),e(To,gr),e(gr,fh),f(Nn,fh,null),e(To,b$),e(To,gh),e(gh,y$),m(t,Qf,c),m(t,_i,c),e(_i,w$),m(t,eg,c),m(t,At,c),e(At,T$),e(At,Ln),e(Ln,E$),e(At,k$),e(At,Un),e(Un,$$),e(At,x$),m(t,tg,c),m(t,vi,c),e(vi,A$),m(t,og,c),f(Fn,t,c),m(t,rg,c),m(t,bi,c),e(bi,q$),m(t,ag,c),m(t,qt,c),e(qt,D$),e(qt,_h),e(_h,S$),e(qt,P$),e(qt,vh),e(vh,O$),e(qt,C$),m(t,ng,c),m(t,Eo,c),e(Eo,_r),e(_r,bh),f(Wn,bh,null),e(Eo,I$),e(Eo,yh),e(yh,z$),m(t,sg,c),m(t,yi,c),e(yi,N$),m(t,ig,c),m(t,Ue,c),e(Ue,L$),e(Ue,wh),e(wh,U$),e(Ue,F$),e(Ue,Th),e(Th,W$),e(Ue,R$),e(Ue,Eh),e(Eh,j$),e(Ue,M$),m(t,lg,c),m(t,Dt,c),e(Dt,G$),e(Dt,kh),e(kh,H$),e(Dt,B$),e(Dt,$h),e($h,V$),e(Dt,Y$),m(t,dg,c),f(Rn,t,c),m(t,cg,c),m(t,vr,c),e(vr,Z$),e(vr,jn),e(jn,J$),e(vr,X$),m(t,mg,c),m(t,ko,c),e(ko,br),e(br,xh),f(Mn,xh,null),e(ko,K$),e(ko,Ah),e(Ah,Q$),m(t,pg,c),m(t,wi,c),e(wi,ex),m(t,hg,c),f(Gn,t,c),m(t,ug,c),m(t,St,c),e(St,tx),e(St,qh),e(qh,ox),e(St,rx),e(St,Dh),e(Dh,ax),e(St,nx),m(t,fg,c),m(t,Ti,c),e(Ti,sx),m(t,gg,c),f(Hn,t,c),m(t,_g,c),m(t,Ei,c),e(Ei,ix),m(t,vg,c),m(t,yr,c),e(yr,lx),e(yr,Sh),e(Sh,dx),e(yr,cx),m(t,bg,c),m(t,tt,c),e(tt,Ph),e(Ph,mx),e(tt,px),e(tt,Oh),e(Oh,hx),e(tt,ux),e(tt,Ch),e(Ch,fx),e(tt,gx),m(t,yg,c),m(t,ki,c),e(ki,_x),m(t,wg,c),f(Bn,t,c),m(t,Tg,c),m(t,$i,c),e($i,vx),m(t,Eg,c),m(t,Fe,c),e(Fe,bx),e(Fe,Ih),e(Ih,yx),e(Fe,wx),e(Fe,zh),e(zh,Tx),e(Fe,Ex),e(Fe,Nh),e(Nh,kx),e(Fe,$x),m(t,kg,c),m(t,$o,c),e($o,wr),e(wr,Lh),f(Vn,Lh,null),e($o,xx),e($o,Uh),e(Uh,Ax),m(t,$g,c),m(t,Pt,c),e(Pt,qx),e(Pt,Fh),e(Fh,Dx),e(Pt,Sx),e(Pt,Wh),e(Wh,Px),e(Pt,Ox),m(t,xg,c),m(t,xi,c),e(xi,Cx),m(t,Ag,c),m(t,Ai,c),e(Ai,Ix),m(t,qg,c),m(t,Tr,c),e(Tr,zx),e(Tr,Rh),e(Rh,Nx),e(Tr,Lx),m(t,Dg,c),f(Yn,t,c),m(t,Sg,c),m(t,M,c),e(M,Ux),e(M,jh),e(jh,Fx),e(M,Wx),e(M,Mh),e(Mh,Rx),e(M,jx),e(M,Gh),e(Gh,Mx),e(M,Gx),e(M,Hh),e(Hh,Hx),e(M,Bx),e(M,Bh),e(Bh,Vx),e(M,Yx),e(M,Vh),e(Vh,Zx),e(M,Jx),m(t,Pg,c),m(t,qi,c),e(qi,Xx),m(t,Og,c),m(t,xo,c),e(xo,Er),e(Er,Yh),f(Zn,Yh,null),e(xo,Kx),e(xo,Zh),e(Zh,Qx),m(t,Cg,c),m(t,We,c),e(We,e6),e(We,Jn),e(Jn,t6),e(We,o6),e(We,Di),e(Di,r6),e(We,a6),e(We,Xn),e(Xn,n6),e(We,s6),m(t,Ig,c),m(t,Re,c),e(Re,Jh),e(Jh,i6),e(Re,l6),e(Re,Xh),e(Xh,d6),e(Re,c6),e(Re,Kh),e(Kh,m6),e(Re,p6),e(Re,Qh),e(Qh,h6),m(t,zg,c),m(t,Si,c),e(Si,u6),m(t,Ng,c),m(t,Kn,c),e(Kn,eu),e(eu,f6),e(Kn,g6),m(t,Lg,c),m(t,Pi,c),e(Pi,_6),m(t,Ug,c),f(Qn,t,c),m(t,Fg,c),m(t,Ot,c),e(Ot,v6),e(Ot,tu),e(tu,b6),e(Ot,y6),e(Ot,ou),e(ou,w6),e(Ot,T6),m(t,Wg,c),f(es,t,c),m(t,Rg,c),m(t,Ct,c),e(Ct,E6),e(Ct,ru),e(ru,k6),e(Ct,$6),e(Ct,ts),e(ts,x6),e(Ct,A6),m(t,jg,c),m(t,kr,c),e(kr,q6),e(kr,Oi),e(Oi,D6),e(kr,S6),m(t,Mg,c),m(t,Ci,c),e(Ci,P6),m(t,Gg,c),m(t,os,c),e(os,au),e(au,O6),e(os,C6),m(t,Hg,c),f(rs,t,c),m(t,Bg,c),m(t,Ii,c),e(Ii,I6),m(t,Vg,c),f(as,t,c),m(t,Yg,c),m(t,ns,c),e(ns,nu),e(nu,z6),e(ns,N6),m(t,Zg,c),f(ss,t,c),m(t,Jg,c),m(t,zi,c),e(zi,L6),m(t,Xg,c),f(is,t,c),m(t,Kg,c),m(t,Ni,c),e(Ni,U6),m(t,Qg,c),m(t,$r,c),e($r,F6),e($r,ls),e(ls,W6),e($r,R6),m(t,e_,c),m(t,ds,c),e(ds,su),e(su,j6),e(ds,M6),m(t,t_,c),m(t,It,c),e(It,G6),e(It,iu),e(iu,H6),e(It,B6),e(It,lu),e(lu,V6),e(It,Y6),m(t,o_,c),m(t,xr,c),e(xr,Z6),e(xr,du),e(du,J6),e(xr,X6),m(t,r_,c),f(cs,t,c),m(t,a_,c),m(t,Li,c),e(Li,K6),m(t,n_,c),m(t,je,c),e(je,cu),e(cu,Q6),e(je,eA),e(je,mu),e(mu,tA),e(je,oA),e(je,ms),e(ms,rA),e(ms,pu),e(pu,aA),e(ms,nA),e(je,sA),e(je,ps),e(ps,iA),e(ps,hu),e(hu,lA),e(ps,dA),m(t,s_,c),m(t,hs,c),e(hs,ot),e(ot,cA),e(ot,uu),e(uu,mA),e(ot,pA),e(ot,fu),e(fu,hA),e(ot,uA),e(ot,gu),e(gu,fA),e(ot,gA),m(t,i_,c),m(t,Ar,c),e(Ar,_A),e(Ar,_u),e(_u,vA),e(Ar,bA),m(t,l_,c),f(us,t,c),m(t,d_,c),m(t,Ao,c),e(Ao,vu),e(vu,yA),e(Ao,wA),e(Ao,bu),e(bu,TA),e(Ao,EA),m(t,c_,c),m(t,zt,c),e(zt,kA),e(zt,yu),e(yu,$A),e(zt,xA),e(zt,wu),e(wu,AA),e(zt,qA),m(t,m_,c),m(t,Ui,c),e(Ui,DA),m(t,p_,c),m(t,pe,c),e(pe,Tu),e(Tu,SA),e(pe,PA),e(pe,Eu),e(Eu,OA),e(pe,CA),e(pe,fs),e(fs,IA),e(fs,ku),e(ku,zA),e(fs,NA),e(pe,LA),e(pe,qo),e(qo,UA),e(qo,$u),e($u,FA),e(qo,WA),e(qo,xu),e(xu,RA),e(qo,jA),e(pe,MA),e(pe,Au),e(Au,GA),m(t,h_,c),m(t,Fi,c),e(Fi,HA),m(t,u_,c),m(t,qr,c),e(qr,Do),e(Do,BA),e(Do,qu),e(qu,VA),e(Do,YA),e(Do,Du),e(Du,ZA),e(Do,JA),e(qr,XA),e(qr,$e),e($e,KA),e($e,Su),e(Su,QA),e($e,e9),e($e,Pu),e(Pu,t9),e($e,o9),e($e,Ou),e(Ou,r9),e($e,a9),e($e,Cu),e(Cu,n9),e($e,s9),m(t,f_,c),m(t,Wi,c),e(Wi,i9),m(t,g_,c),m(t,y,c),e(y,l9),e(y,Ri),e(Ri,d9),e(y,Iu),e(y,c9),e(y,ji),e(ji,m9),e(y,zu),e(y,p9),e(y,Mi),e(Mi,h9),e(y,Nu),e(y,u9),e(y,Gi),e(Gi,f9),e(y,Lu),e(y,g9),e(y,Hi),e(Hi,_9),e(y,Uu),e(y,v9),e(y,Bi),e(Bi,b9),e(y,Fu),e(y,y9),e(y,Vi),e(Vi,w9),e(y,Wu),e(y,T9),e(y,Yi),e(Yi,E9),e(y,Ru),e(y,k9),e(y,Zi),e(Zi,$9),e(y,ju),e(y,x9),e(y,Ji),e(Ji,A9),e(y,Mu),e(y,q9),e(y,Xi),e(Xi,D9),e(y,Gu),e(y,S9),e(y,Ki),e(Ki,P9),e(y,Hu),e(y,O9),e(y,Qi),e(Qi,C9),e(y,Bu),e(y,I9),e(y,el),e(el,z9),e(y,Vu),e(y,N9),e(y,tl),e(tl,L9),e(y,Yu),e(y,U9),e(y,ol),e(ol,F9),e(y,Zu),e(y,W9),e(y,rl),e(rl,R9),e(y,Ju),e(y,j9),e(y,al),e(al,M9),e(y,Xu),e(y,G9),e(y,nl),e(nl,H9),e(y,Ku),e(y,B9),e(y,sl),e(sl,V9),e(y,Qu),e(y,Y9),e(y,il),e(il,Z9),e(y,ef),e(y,J9),e(y,ll),e(ll,X9),e(y,tf),e(y,K9),e(y,dl),e(dl,Q9),e(y,of),e(y,eq),__=!0},p(t,[c]){const gs={};c&2&&(gs.$$scope={dirty:c,ctx:t}),Io.$set(gs);const rf={};c&2&&(rf.$$scope={dirty:c,ctx:t}),jo.$set(rf);const af={};c&2&&(af.$$scope={dirty:c,ctx:t}),Vo.$set(af);const nf={};c&2&&(nf.$$scope={dirty:c,ctx:t}),Ko.$set(nf)},i(t){__||(g(W.$$.fragment,t),g(Io.$$.fragment,t),g(Kr.$$.fragment,t),g(Qr.$$.fragment,t),g(ea.$$.fragment,t),g(ta.$$.fragment,t),g(ra.$$.fragment,t),g(na.$$.fragment,t),g(sa.$$.fragment,t),g(la.$$.fragment,t),g(da.$$.fragment,t),g(ca.$$.fragment,t),g(pa.$$.fragment,t),g(ha.$$.fragment,t),g(fa.$$.fragment,t),g(_a.$$.fragment,t),g(ba.$$.fragment,t),g(wa.$$.fragment,t),g(jo.$$.fragment,t),g(Ta.$$.fragment,t),g(ka.$$.fragment,t),g($a.$$.fragment,t),g(Aa.$$.fragment,t),g(Da.$$.fragment,t),g(Sa.$$.fragment,t),g(Ca.$$.fragment,t),g(Ia.$$.fragment,t),g(Na.$$.fragment,t),g(Fa.$$.fragment,t),g(Vo.$$.fragment,t),g(ja.$$.fragment,t),g(Ma.$$.fragment,t),g(Ga.$$.fragment,t),g(Ha.$$.fragment,t),g(Va.$$.fragment,t),g(Ja.$$.fragment,t),g(Ka.$$.fragment,t),g(Qa.$$.fragment,t),g(en.$$.fragment,t),g(tn.$$.fragment,t),g(on.$$.fragment,t),g(an.$$.fragment,t),g(Ko.$$.fragment,t),g(ln.$$.fragment,t),g(dn.$$.fragment,t),g(pn.$$.fragment,t),g(un.$$.fragment,t),g(fn.$$.fragment,t),g(gn.$$.fragment,t),g(vn.$$.fragment,t),g(bn.$$.fragment,t),g(yn.$$.fragment,t),g(wn.$$.fragment,t),g(kn.$$.fragment,t),g($n.$$.fragment,t),g(xn.$$.fragment,t),g(An.$$.fragment,t),g(qn.$$.fragment,t),g(Dn.$$.fragment,t),g(Sn.$$.fragment,t),g(On.$$.fragment,t),g(Nn.$$.fragment,t),g(Fn.$$.fragment,t),g(Wn.$$.fragment,t),g(Rn.$$.fragment,t),g(Mn.$$.fragment,t),g(Gn.$$.fragment,t),g(Hn.$$.fragment,t),g(Bn.$$.fragment,t),g(Vn.$$.fragment,t),g(Yn.$$.fragment,t),g(Zn.$$.fragment,t),g(Qn.$$.fragment,t),g(es.$$.fragment,t),g(rs.$$.fragment,t),g(as.$$.fragment,t),g(ss.$$.fragment,t),g(is.$$.fragment,t),g(cs.$$.fragment,t),g(us.$$.fragment,t),__=!0)},o(t){_(W.$$.fragment,t),_(Io.$$.fragment,t),_(Kr.$$.fragment,t),_(Qr.$$.fragment,t),_(ea.$$.fragment,t),_(ta.$$.fragment,t),_(ra.$$.fragment,t),_(na.$$.fragment,t),_(sa.$$.fragment,t),_(la.$$.fragment,t),_(da.$$.fragment,t),_(ca.$$.fragment,t),_(pa.$$.fragment,t),_(ha.$$.fragment,t),_(fa.$$.fragment,t),_(_a.$$.fragment,t),_(ba.$$.fragment,t),_(wa.$$.fragment,t),_(jo.$$.fragment,t),_(Ta.$$.fragment,t),_(ka.$$.fragment,t),_($a.$$.fragment,t),_(Aa.$$.fragment,t),_(Da.$$.fragment,t),_(Sa.$$.fragment,t),_(Ca.$$.fragment,t),_(Ia.$$.fragment,t),_(Na.$$.fragment,t),_(Fa.$$.fragment,t),_(Vo.$$.fragment,t),_(ja.$$.fragment,t),_(Ma.$$.fragment,t),_(Ga.$$.fragment,t),_(Ha.$$.fragment,t),_(Va.$$.fragment,t),_(Ja.$$.fragment,t),_(Ka.$$.fragment,t),_(Qa.$$.fragment,t),_(en.$$.fragment,t),_(tn.$$.fragment,t),_(on.$$.fragment,t),_(an.$$.fragment,t),_(Ko.$$.fragment,t),_(ln.$$.fragment,t),_(dn.$$.fragment,t),_(pn.$$.fragment,t),_(un.$$.fragment,t),_(fn.$$.fragment,t),_(gn.$$.fragment,t),_(vn.$$.fragment,t),_(bn.$$.fragment,t),_(yn.$$.fragment,t),_(wn.$$.fragment,t),_(kn.$$.fragment,t),_($n.$$.fragment,t),_(xn.$$.fragment,t),_(An.$$.fragment,t),_(qn.$$.fragment,t),_(Dn.$$.fragment,t),_(Sn.$$.fragment,t),_(On.$$.fragment,t),_(Nn.$$.fragment,t),_(Fn.$$.fragment,t),_(Wn.$$.fragment,t),_(Rn.$$.fragment,t),_(Mn.$$.fragment,t),_(Gn.$$.fragment,t),_(Hn.$$.fragment,t),_(Bn.$$.fragment,t),_(Vn.$$.fragment,t),_(Yn.$$.fragment,t),_(Zn.$$.fragment,t),_(Qn.$$.fragment,t),_(es.$$.fragment,t),_(rs.$$.fragment,t),_(as.$$.fragment,t),_(ss.$$.fragment,t),_(is.$$.fragment,t),_(cs.$$.fragment,t),_(us.$$.fragment,t),__=!1},d(t){o(E),t&&o(L),t&&o(x),v(W),t&&o(ee),t&&o(j),t&&o(z),t&&o(O),t&&o(Je),t&&o(Ae),t&&o(Z),t&&o(B),t&&o(Bt),t&&o(q),t&&o(cf),v(Io,t),t&&o(mf),t&&o(zo),t&&o(pf),v(Kr,t),t&&o(hf),t&&o(it),t&&o(uf),t&&o(Vt),v(Qr),t&&o(ff),t&&o(b),v(ea),v(ta),v(ra),v(na),v(sa),v(la),v(da),v(ca),v(pa),v(ha),v(fa),v(_a),v(ba),v(wa),v(jo),v(Ta),v(ka),v($a),v(Aa),v(Da),v(Sa),v(Ca),v(Ia),v(Na),v(Fa),v(Vo),v(ja),v(Ma),v(Ga),v(Ha),v(Va),v(Ja),v(Ka),v(Qa),v(en),t&&o(gf),t&&o(ao),v(tn),t&&o(_f),t&&o(no),v(on),v(an),v(Ko),t&&o(vf),t&&o(mo),v(ln),t&&o(bf),t&&o(N),v(dn),v(pn),v(un),v(fn),v(gn),v(vn),v(bn),t&&o(yf),t&&o(go),v(yn),t&&o(wf),t&&o(ae),v(wn),t&&o(Tf),t&&o(vo),v(kn),t&&o(Ef),t&&o(ce),t&&o(kf),t&&o(sr),t&&o($f),t&&o(ir),t&&o(xf),t&&o(Ie),t&&o(Af),t&&o(lr),t&&o(qf),t&&o(bo),v($n),t&&o(Df),t&&o(ze),t&&o(Sf),t&&o($t),t&&o(Pf),t&&o(mr),t&&o(Of),t&&o(Ne),t&&o(Cf),t&&o(Q),t&&o(If),t&&o(li),t&&o(zf),v(xn,t),t&&o(Nf),t&&o(di),t&&o(Lf),v(An,t),t&&o(Uf),t&&o(ci),t&&o(Ff),v(qn,t),t&&o(Wf),t&&o(mi),t&&o(Rf),t&&o(pi),t&&o(jf),v(Dn,t),t&&o(Mf),t&&o(pr),t&&o(Gf),t&&o(yo),v(Sn),t&&o(Hf),t&&o(me),t&&o(Bf),t&&o(xt),t&&o(Vf),t&&o(wo),v(On),t&&o(Yf),t&&o(fr),t&&o(Zf),t&&o(Le),t&&o(Jf),t&&o(fi),t&&o(Xf),t&&o(gi),t&&o(Kf),t&&o(To),v(Nn),t&&o(Qf),t&&o(_i),t&&o(eg),t&&o(At),t&&o(tg),t&&o(vi),t&&o(og),v(Fn,t),t&&o(rg),t&&o(bi),t&&o(ag),t&&o(qt),t&&o(ng),t&&o(Eo),v(Wn),t&&o(sg),t&&o(yi),t&&o(ig),t&&o(Ue),t&&o(lg),t&&o(Dt),t&&o(dg),v(Rn,t),t&&o(cg),t&&o(vr),t&&o(mg),t&&o(ko),v(Mn),t&&o(pg),t&&o(wi),t&&o(hg),v(Gn,t),t&&o(ug),t&&o(St),t&&o(fg),t&&o(Ti),t&&o(gg),v(Hn,t),t&&o(_g),t&&o(Ei),t&&o(vg),t&&o(yr),t&&o(bg),t&&o(tt),t&&o(yg),t&&o(ki),t&&o(wg),v(Bn,t),t&&o(Tg),t&&o($i),t&&o(Eg),t&&o(Fe),t&&o(kg),t&&o($o),v(Vn),t&&o($g),t&&o(Pt),t&&o(xg),t&&o(xi),t&&o(Ag),t&&o(Ai),t&&o(qg),t&&o(Tr),t&&o(Dg),v(Yn,t),t&&o(Sg),t&&o(M),t&&o(Pg),t&&o(qi),t&&o(Og),t&&o(xo),v(Zn),t&&o(Cg),t&&o(We),t&&o(Ig),t&&o(Re),t&&o(zg),t&&o(Si),t&&o(Ng),t&&o(Kn),t&&o(Lg),t&&o(Pi),t&&o(Ug),v(Qn,t),t&&o(Fg),t&&o(Ot),t&&o(Wg),v(es,t),t&&o(Rg),t&&o(Ct),t&&o(jg),t&&o(kr),t&&o(Mg),t&&o(Ci),t&&o(Gg),t&&o(os),t&&o(Hg),v(rs,t),t&&o(Bg),t&&o(Ii),t&&o(Vg),v(as,t),t&&o(Yg),t&&o(ns),t&&o(Zg),v(ss,t),t&&o(Jg),t&&o(zi),t&&o(Xg),v(is,t),t&&o(Kg),t&&o(Ni),t&&o(Qg),t&&o($r),t&&o(e_),t&&o(ds),t&&o(t_),t&&o(It),t&&o(o_),t&&o(xr),t&&o(r_),v(cs,t),t&&o(a_),t&&o(Li),t&&o(n_),t&&o(je),t&&o(s_),t&&o(hs),t&&o(i_),t&&o(Ar),t&&o(l_),v(us,t),t&&o(d_),t&&o(Ao),t&&o(c_),t&&o(zt),t&&o(m_),t&&o(Ui),t&&o(p_),t&&o(pe),t&&o(h_),t&&o(Fi),t&&o(u_),t&&o(qr),t&&o(f_),t&&o(Wi),t&&o(g_),t&&o(y)}}}const iI={local:"trainer",sections:[{local:"transformers.Trainer",title:"Trainer"},{local:"transformers.Seq2SeqTrainer",title:"Seq2SeqTrainer"},{local:"transformers.TrainingArguments",title:"TrainingArguments"},{local:"transformers.Seq2SeqTrainingArguments",title:"Seq2SeqTrainingArguments"},{local:"checkpoints",title:"Checkpoints"},{local:"logging",title:"Logging"},{local:"randomness",title:"Randomness"},{local:"trainer-integrations",sections:[{local:"cuda-extension-installation-notes",sections:[{local:"possible-problem-1",title:"Possible problem #1"},{local:"possible-problem-2",title:"Possible problem #2"},{local:"possible-problem-3",title:"Possible problem #3"}],title:"CUDA Extension Installation Notes"},{local:"fairscale",title:"FairScale"}],title:"Trainer Integrations"}],title:"Trainer"};function lI(Ye,E,L){let{fw:x}=E;return Ye.$$set=S=>{"fw"in S&&L(0,x=S.fw)},[x]}class fI extends KC{constructor(E){super();QC(this,E,lI,sI,eI,{fw:0})}}export{fI as default,iI as metadata};
