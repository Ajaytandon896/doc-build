import{S as x0,i as w0,s as L0,e as o,k as c,w as f,t as a,M as E0,c as n,d as r,m as l,a as s,x as g,h as i,b as d,G as t,g as m,y as u,q as h,o as _,B as b,v as P0,L as F0}from"../../chunks/vendor-hf-doc-builder.js";import{D as v}from"../../chunks/Docstring-hf-doc-builder.js";import{C as n$}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as Ae}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as D0}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function S0(kd){let w,Re;return w=new n$({props:{code:`completed = False
while not completed:
    _, completed = constraint.update(constraint.advance())`,highlighted:`completed = <span class="hljs-literal">False</span>
<span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> completed:
    _, completed = constraint.update(constraint.advance())`}}),{c(){f(w.$$.fragment)},l(k){g(w.$$.fragment,k)},m(k,Ce){u(w,k,Ce),Re=!0},p:F0,i(k){Re||(h(w.$$.fragment,k),Re=!0)},o(k){_(w.$$.fragment,k),Re=!1},d(k){b(w,k)}}}function z0(kd){let w,Re,k,Ce,mc,ar,Xm,fc,Jm,xd,y,Qm,Un,Zm,ef,Yn,tf,rf,Xn,of,nf,Jn,sf,af,Qn,cf,lf,Zn,df,pf,es,mf,ff,wd,ts,gf,Ld,Ke,_t,gc,ir,uf,uc,hf,Ed,V,_f,rs,bf,vf,os,$f,Tf,ns,yf,kf,Pd,ss,xf,Fd,cr,Dd,We,wf,hc,Lf,Ef,as,Pf,Ff,Sd,M,is,_c,Df,Sf,zf,cs,bc,Of,qf,Bf,ls,vc,If,Af,Cf,ds,$c,Wf,Nf,zd,x,Vf,Tc,Mf,Gf,yc,jf,Hf,kc,Rf,Kf,xc,Uf,Yf,wc,Xf,Jf,Lc,Qf,Zf,Od,S,eg,Ec,tg,rg,Pc,og,ng,Fc,sg,ag,Dc,ig,cg,qd,z,lg,Sc,dg,pg,zc,mg,fg,Oc,gg,ug,qc,hg,_g,Bd,lr,Id,bt,bg,Bc,vg,$g,Ad,O,Tg,Ic,yg,kg,Ac,xg,wg,Cc,Lg,Eg,Wc,Pg,Fg,Cd,ps,Dg,Wd,Ue,vt,Nc,dr,Sg,Vc,zg,Nd,Ye,pr,Og,Mc,qg,Vd,Xe,mr,Bg,Gc,Ig,Md,R,fr,Ag,jc,Cg,Wg,$t,gr,Ng,Hc,Vg,Gd,Je,Tt,Rc,ur,Mg,Kc,Gg,jd,Qe,hr,jg,Uc,Hg,Hd,Ze,_r,Rg,Yc,Kg,Rd,K,br,Ug,Xc,Yg,Xg,yt,vr,Jg,Jc,Qg,Kd,et,kt,Qc,$r,Zg,Zc,eu,Ud,tt,Tr,tu,el,ru,Yd,rt,yr,ou,tl,nu,Xd,ot,xt,rl,kr,su,ol,au,Jd,nt,xr,iu,nl,cu,Qd,st,wr,lu,sl,du,Zd,at,wt,al,Lr,pu,il,mu,ep,Lt,fu,ms,gu,uu,tp,U,Er,hu,cl,_u,bu,Et,Pr,vu,ll,$u,rp,Y,Fr,Tu,L,yu,fs,ku,xu,gs,wu,Lu,dl,Eu,Pu,pl,ml,Fu,Du,us,Su,zu,hs,Ou,qu,Bu,_s,Dr,op,X,Sr,Iu,fl,Au,Cu,Pt,zr,Wu,gl,Nu,np,J,Or,Vu,bs,vs,Mu,Gu,ju,$s,qr,sp,Q,Br,Hu,Ts,ys,Ru,Ku,Uu,ks,Ir,ap,Z,Ar,Yu,xs,ws,Xu,Ju,Qu,Ls,Cr,ip,ee,Wr,Zu,Es,Ps,eh,th,rh,Fs,Nr,cp,te,Vr,oh,Ds,Ss,nh,sh,ah,zs,Mr,lp,re,Gr,ih,Ft,Os,ch,lh,jr,dh,ph,mh,qs,Hr,dp,oe,Rr,fh,Dt,Bs,gh,uh,Kr,hh,_h,bh,Is,Ur,pp,ne,Yr,vh,As,Cs,$h,Th,yh,Ws,Xr,mp,se,Jr,kh,St,Ns,xh,wh,Qr,Lh,Eh,Ph,Vs,Zr,fp,ae,eo,Fh,Ne,Ms,Dh,Sh,Gs,zh,Oh,to,qh,Bh,Ih,js,ro,gp,ie,oo,Ah,Hs,Rs,Ch,Wh,Nh,Ks,no,up,ce,so,Vh,zt,Us,Mh,Gh,ul,jh,Hh,Rh,Ys,ao,hp,le,io,Kh,G,Xs,Uh,Yh,hl,Xh,Jh,_l,Qh,Zh,bl,e_,t_,r_,Js,co,_p,de,lo,o_,vl,n_,s_,Ot,po,a_,$l,i_,bp,pe,mo,c_,A,l_,Qs,d_,p_,Tl,m_,f_,yl,kl,g_,u_,Zs,h_,__,b_,ea,fo,vp,me,go,v_,xl,$_,T_,qt,uo,y_,wl,k_,$p,fe,ho,x_,ta,ra,w_,L_,E_,oa,_o,Tp,ge,bo,P_,na,sa,F_,D_,S_,aa,vo,yp,ue,$o,z_,ia,ca,O_,q_,B_,la,To,kp,he,yo,I_,da,pa,A_,C_,W_,ma,ko,xp,_e,xo,N_,fa,ga,V_,M_,G_,ua,wo,wp,be,Lo,j_,Bt,ha,H_,R_,Eo,K_,U_,Y_,_a,Po,Lp,ve,Fo,X_,ba,va,J_,Q_,Z_,$a,Do,Ep,$e,So,eb,Ta,ya,tb,rb,ob,ka,zo,Pp,Te,Oo,nb,It,xa,sb,ab,Ll,ib,cb,lb,wa,qo,Fp,ye,Bo,db,El,pb,mb,At,Io,fb,Pl,gb,Dp,ke,Ao,ub,E,hb,La,_b,bb,Ea,vb,$b,Fl,Tb,yb,Dl,Sl,kb,xb,Pa,wb,Lb,Fa,Eb,Pb,Fb,Da,Co,Sp,xe,Wo,Db,zl,Sb,zb,Ct,No,Ob,Ol,qb,zp,we,Vo,Bb,Sa,za,Ib,Ab,Cb,Oa,Mo,Op,Le,Go,Wb,qa,Ba,Nb,Vb,Mb,Ia,jo,qp,Ee,Ho,Gb,Aa,Ca,jb,Hb,Rb,Wa,Ro,Bp,Pe,Ko,Kb,Na,Va,Ub,Yb,Xb,Ma,Uo,Ip,Fe,Yo,Jb,Wt,Ga,Qb,Zb,ql,ev,tv,rv,ja,Xo,Ap,De,Jo,ov,Ha,Ra,nv,sv,av,Ka,Qo,Cp,it,Nt,Bl,Zo,iv,Il,cv,Wp,Vt,lv,Ua,dv,pv,Np,Se,en,mv,Al,fv,gv,Ya,tn,Vp,ct,rn,uv,Xa,on,Mp,ze,nn,hv,sn,_v,Cl,bv,vv,$v,Ja,an,Gp,Oe,cn,Tv,ln,yv,Wl,kv,xv,wv,Qa,dn,jp,lt,Mt,Nl,pn,Lv,Vl,Ev,Hp,Gt,Pv,Za,Fv,Dv,Rp,$,mn,Sv,Ml,zv,Ov,Gl,qv,Bv,jt,Iv,jl,Av,Cv,Ht,fn,Wv,Hl,Nv,Vv,Rt,gn,Mv,Rl,Gv,jv,Kt,un,Hv,Kl,Rv,Kv,Ut,hn,Uv,_n,Yv,Ul,Xv,Jv,Qv,Yt,bn,Zv,Yl,e1,t1,Xt,vn,r1,Xl,o1,n1,Ve,$n,s1,Tn,a1,Jl,i1,c1,l1,Ql,d1,Kp,dt,yn,p1,ei,ti,m1,f1,Up,pt,kn,g1,xn,u1,ri,h1,_1,Yp,C,wn,b1,Zl,v1,$1,F,Ln,T1,ed,y1,k1,mt,x1,td,w1,L1,rd,E1,P1,F1,od,nd,D1,S1,qe,z1,sd,O1,q1,ad,B1,I1,id,A1,C1,W1,cd,N1,V1,Jt,En,M1,ld,G1,Xp,ft,Qt,dd,Pn,j1,pd,H1,Jp,W,Fn,R1,gt,K1,oi,U1,Y1,ni,X1,J1,Q1,si,Dn,Z1,ai,Sn,Qp,P,zn,e2,ii,ci,t2,r2,o2,On,n2,qn,s2,a2,i2,li,c2,Bn,l2,d2,di,In,p2,pi,An,Zp,N,Cn,m2,mi,fi,f2,g2,u2,gi,Wn,h2,ui,Nn,em,ut,Zt,md,Vn,_2,fd,b2,tm,Be,Mn,v2,gd,$2,T2,hi,y2,Gn,k2,rm,Ie,jn,x2,ud,w2,L2,_i,E2,Hn,P2,om;return ar=new Ae({}),ir=new Ae({}),cr=new n$({props:{code:`from transformers import GPT2Tokenizer, GPT2LMHeadModel

tokenizer = GPT2Tokenizer.from_pretrained("gpt2")
model = GPT2LMHeadModel.from_pretrained("gpt2")

inputs = tokenizer("Hello, my dog is cute and ", return_tensors="pt")
generation_output = model.generate(**inputs, return_dict_in_generate=True, output_scores=True)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> GPT2Tokenizer, GPT2LMHeadModel

tokenizer = GPT2Tokenizer.from_pretrained(<span class="hljs-string">&quot;gpt2&quot;</span>)
model = GPT2LMHeadModel.from_pretrained(<span class="hljs-string">&quot;gpt2&quot;</span>)

inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute and &quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
generation_output = model.generate(**inputs, return_dict_in_generate=<span class="hljs-literal">True</span>, output_scores=<span class="hljs-literal">True</span>)`}}),lr=new n$({props:{code:"generation_output[:2]",highlighted:'generation_output[:<span class="hljs-number">2</span>]'}}),dr=new Ae({}),pr=new v({props:{name:"class transformers.generation_utils.GreedySearchDecoderOnlyOutput",anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. Tuple of <code>torch.FloatTensor</code> with up to <code>max_new_tokens</code> elements (one element for
each generated token), with each tensor of shape <code>(batch_size, config.vocab_size)</code>.`,name:"scores"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, generated_length, hidden_size)</code>.`,name:"hidden_states"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_utils.py#L72"}}),mr=new v({props:{name:"class transformers.generation_utils.GreedySearchEncoderDecoderOutput",anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. Tuple of <code>torch.FloatTensor</code> with up to <code>max_new_tokens</code> elements (one element for
each generated token), with each tensor of shape <code>(batch_size, config.vocab_size)</code>.`,name:"scores"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_utils.py#L100"}}),fr=new v({props:{name:"class transformers.generation_flax_utils.FlaxGreedySearchOutput",anchor:"transformers.generation_flax_utils.FlaxGreedySearchOutput",parameters:[{name:"sequences",val:": ndarray = None"}],parametersDescription:[{anchor:"transformers.generation_flax_utils.FlaxGreedySearchOutput.sequences",description:`<strong>sequences</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, max_length)</code>) &#x2014;
The generated sequences.`,name:"sequences"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_flax_utils.py#L51"}}),gr=new v({props:{name:"replace",anchor:"transformers.generation_flax_utils.FlaxGreedySearchOutput.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/flax/struct.py#L108"}}),ur=new Ae({}),hr=new v({props:{name:"class transformers.generation_utils.SampleDecoderOnlyOutput",anchor:"transformers.generation_utils.SampleDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. Tuple of <code>torch.FloatTensor</code> with up to <code>max_new_tokens</code> elements (one element for
each generated token), with each tensor of shape <code>(batch_size*num_return_sequences, config.vocab_size)</code>.`,name:"scores"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(num_return_sequences*batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(num_return_sequences*batch_size, generated_length, hidden_size)</code>.`,name:"hidden_states"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_utils.py#L142"}}),_r=new v({props:{name:"class transformers.generation_utils.SampleEncoderDecoderOutput",anchor:"transformers.generation_utils.SampleEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. Tuple of <code>torch.FloatTensor</code> with up to <code>max_new_tokens</code> elements (one element for
each generated token), with each tensor of shape <code>(batch_size*num_return_sequences, config.vocab_size)</code>.`,name:"scores"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape
<code>(batch_size*num_return_sequences, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_return_sequences, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_utils.py#L171"}}),br=new v({props:{name:"class transformers.generation_flax_utils.FlaxSampleOutput",anchor:"transformers.generation_flax_utils.FlaxSampleOutput",parameters:[{name:"sequences",val:": ndarray = None"}],parametersDescription:[{anchor:"transformers.generation_flax_utils.FlaxSampleOutput.sequences",description:`<strong>sequences</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, max_length)</code>) &#x2014;
The generated sequences.`,name:"sequences"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_flax_utils.py#L65"}}),vr=new v({props:{name:"replace",anchor:"transformers.generation_flax_utils.FlaxSampleOutput.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/flax/struct.py#L108"}}),$r=new Ae({}),Tr=new v({props:{name:"class transformers.generation_utils.BeamSearchDecoderOnlyOutput",anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
Tuple of <code>torch.FloatTensor</code> with up to <code>max_new_tokens</code> elements (one element for each generated token),
with each tensor of shape <code>(batch_size*num_beams*num_return_sequences, config.vocab_size)</code>.`,name:"scores"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>torch.LongTensor</code> of shape
<code>(batch_size*num_return_sequences, input_ids.shape[-1])</code>.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, generated_length, hidden_size)</code>.`,name:"hidden_states"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_utils.py#L214"}}),yr=new v({props:{name:"class transformers.generation_utils.BeamSearchEncoderDecoderOutput",anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
Tuple of <code>torch.FloatTensor</code> with up to <code>max_new_tokens</code> elements (one element for each generated token),
with each tensor of shape <code>(batch_size*num_beams, config.vocab_size)</code>.`,name:"scores"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>torch.LongTensor</code> of shape
<code>(batch_size*num_return_sequences, max_length-1)</code>.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.attentions",description:"<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;",name:"attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_beams*num_return_sequences, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_utils.py#L249"}}),kr=new Ae({}),xr=new v({props:{name:"class transformers.generation_utils.BeamSampleDecoderOnlyOutput",anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_return_sequence)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
Tuple of <code>torch.FloatTensor</code> with up to <code>max_new_tokens</code> elements (one element for each generated token),
with each tensor of shape <code>(batch_size*num_beams*num_return_sequences, config.vocab_size)</code>.`,name:"scores"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>torch.LongTensor</code> of shape
<code>(batch_size*num_return_sequences, input_ids.shape[-1])</code>.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, generated_length, hidden_size)</code>.`,name:"hidden_states"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_utils.py#L300"}}),wr=new v({props:{name:"class transformers.generation_utils.BeamSampleEncoderDecoderOutput",anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_beams, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_return_sequence)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
Tuple of <code>torch.FloatTensor</code> with up to <code>max_new_tokens</code> elements (one element for each generated token),
with each tensor of shape <code>(batch_size*num_beams, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>torch.LongTensor</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>torch.LongTensor</code> of shape
<code>(batch_size*num_return_sequences, max_length-1)</code>.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_beams, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_utils.py#L335"}}),Lr=new Ae({}),Er=new v({props:{name:"class transformers.LogitsProcessor",anchor:"transformers.LogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_logits_process.py#L51"}}),Pr=new v({props:{name:"__call__",anchor:"transformers.LogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],parametersDescription:[{anchor:"transformers.LogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/v4.23.1/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/v4.23.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/v4.23.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_logits_process.py#L54",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Fr=new v({props:{name:"class transformers.LogitsProcessorList",anchor:"transformers.LogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_logits_process.py#L73"}}),Dr=new v({props:{name:"__call__",anchor:"transformers.LogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.LogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/v4.23.1/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/v4.23.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/v4.23.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_logits_process.py#L80",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Sr=new v({props:{name:"class transformers.LogitsWarper",anchor:"transformers.LogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_logits_process.py#L62"}}),zr=new v({props:{name:"__call__",anchor:"transformers.LogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],parametersDescription:[{anchor:"transformers.LogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/v4.23.1/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/v4.23.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/v4.23.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_logits_process.py#L65",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Or=new v({props:{name:"class transformers.MinLengthLogitsProcessor",anchor:"transformers.MinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.MinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.MinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_logits_process.py#L96"}}),qr=new v({props:{name:"__call__",anchor:"transformers.MinLengthLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_logits_process.py#L117"}}),Br=new v({props:{name:"class transformers.TemperatureLogitsWarper",anchor:"transformers.TemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],parametersDescription:[{anchor:"transformers.TemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_logits_process.py#L124"}}),Ir=new v({props:{name:"__call__",anchor:"transformers.TemperatureLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_logits_process.py#L139"}}),Ar=new v({props:{name:"class transformers.RepetitionPenaltyLogitsProcessor",anchor:"transformers.RepetitionPenaltyLogitsProcessor",parameters:[{name:"penalty",val:": float"}],parametersDescription:[{anchor:"transformers.RepetitionPenaltyLogitsProcessor.repetition_penalty",description:`<strong>repetition_penalty</strong> (<code>float</code>) &#x2014;
The parameter for repetition penalty. 1.0 means no penalty. See <a href="https://arxiv.org/pdf/1909.05858.pdf" rel="nofollow">this
paper</a> for more details.`,name:"repetition_penalty"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_logits_process.py#L144"}}),Cr=new v({props:{name:"__call__",anchor:"transformers.RepetitionPenaltyLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_logits_process.py#L160"}}),Wr=new v({props:{name:"class transformers.TopPLogitsWarper",anchor:"transformers.TopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.TopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the smallest set of most probable tokens with probabilities that add up to <code>top_p</code> or
higher are kept for generation.`,name:"top_p"},{anchor:"transformers.TopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_logits_process.py#L170"}}),Nr=new v({props:{name:"__call__",anchor:"transformers.TopPLogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_logits_process.py#L193"}}),Vr=new v({props:{name:"class transformers.TopKLogitsWarper",anchor:"transformers.TopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.TopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.TopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_logits_process.py#L209"}}),Mr=new v({props:{name:"__call__",anchor:"transformers.TopKLogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_logits_process.py#L230"}}),Gr=new v({props:{name:"class transformers.TypicalLogitsWarper",anchor:"transformers.TypicalLogitsWarper",parameters:[{name:"mass",val:": float = 0.9"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.TypicalLogitsWarper.mass",description:`<strong>mass</strong> (<code>float</code>) &#x2014;
Value of typical_p between 0 and 1 inclusive, defaults to 0.9.`,name:"mass"},{anchor:"transformers.TypicalLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TypicalLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_logits_process.py#L238"}}),Hr=new v({props:{name:"__call__",anchor:"transformers.TypicalLogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_logits_process.py#L261"}}),Rr=new v({props:{name:"class transformers.NoRepeatNGramLogitsProcessor",anchor:"transformers.NoRepeatNGramLogitsProcessor",parameters:[{name:"ngram_size",val:": int"}],parametersDescription:[{anchor:"transformers.NoRepeatNGramLogitsProcessor.ngram_size",description:`<strong>ngram_size</strong> (<code>int</code>) &#x2014;
All ngrams of size <code>ngram_size</code> can only occur once.`,name:"ngram_size"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_logits_process.py#L322"}}),Ur=new v({props:{name:"__call__",anchor:"transformers.NoRepeatNGramLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_logits_process.py#L337"}}),Yr=new v({props:{name:"class transformers.NoBadWordsLogitsProcessor",anchor:"transformers.NoBadWordsLogitsProcessor",parameters:[{name:"bad_words_ids",val:": typing.List[typing.List[int]]"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.NoBadWordsLogitsProcessor.bad_words_ids",description:`<strong>bad_words_ids</strong> (<code>List[List[int]]</code>) &#x2014;
List of list of token ids that are not allowed to be generated. In order to get the token ids of the words
that should not appear in the generated text, use <code>tokenizer(bad_words, add_prefix_space=True, add_special_tokens=False).input_ids</code>.`,name:"bad_words_ids"},{anchor:"transformers.NoBadWordsLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_logits_process.py#L389"}}),Xr=new v({props:{name:"__call__",anchor:"transformers.NoBadWordsLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_logits_process.py#L431"}}),Jr=new v({props:{name:"class transformers.PrefixConstrainedLogitsProcessor",anchor:"transformers.PrefixConstrainedLogitsProcessor",parameters:[{name:"prefix_allowed_tokens_fn",val:": typing.Callable[[int, torch.Tensor], typing.List[int]]"},{name:"num_beams",val:": int"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_logits_process.py#L517"}}),Zr=new v({props:{name:"__call__",anchor:"transformers.PrefixConstrainedLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_logits_process.py#L534"}}),eo=new v({props:{name:"class transformers.HammingDiversityLogitsProcessor",anchor:"transformers.HammingDiversityLogitsProcessor",parameters:[{name:"diversity_penalty",val:": float"},{name:"num_beams",val:": int"},{name:"num_beam_groups",val:": int"}],parametersDescription:[{anchor:"transformers.HammingDiversityLogitsProcessor.diversity_penalty",description:`<strong>diversity_penalty</strong> (<code>float</code>) &#x2014;
This value is subtracted from a beam&#x2019;s score if it generates a token same as any beam from other group at a
particular time. Note that <code>diversity_penalty</code> is only effective if <code>group beam search</code> is enabled.`,name:"diversity_penalty"},{anchor:"transformers.HammingDiversityLogitsProcessor.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams used for group beam search. See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more
details.`,name:"num_beams"},{anchor:"transformers.HammingDiversityLogitsProcessor.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_logits_process.py#L543"}}),ro=new v({props:{name:"__call__",anchor:"transformers.HammingDiversityLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"current_tokens",val:": LongTensor"},{name:"beam_group_idx",val:": int"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_logits_process.py#L574"}}),oo=new v({props:{name:"class transformers.ForcedBOSTokenLogitsProcessor",anchor:"transformers.ForcedBOSTokenLogitsProcessor",parameters:[{name:"bos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.ForcedBOSTokenLogitsProcessor.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the first generated token.`,name:"bos_token_id"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_logits_process.py#L603"}}),no=new v({props:{name:"__call__",anchor:"transformers.ForcedBOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_logits_process.py#L615"}}),so=new v({props:{name:"class transformers.ForcedEOSTokenLogitsProcessor",anchor:"transformers.ForcedEOSTokenLogitsProcessor",parameters:[{name:"max_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.ForcedEOSTokenLogitsProcessor.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.ForcedEOSTokenLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the last generated token when <code>max_length</code> is reached.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_logits_process.py#L624"}}),ao=new v({props:{name:"__call__",anchor:"transformers.ForcedEOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_logits_process.py#L639"}}),io=new v({props:{name:"class transformers.InfNanRemoveLogitsProcessor",anchor:"transformers.InfNanRemoveLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_logits_process.py#L648"}}),co=new v({props:{name:"__call__",anchor:"transformers.InfNanRemoveLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_logits_process.py#L655"}}),lo=new v({props:{name:"class transformers.TFLogitsProcessor",anchor:"transformers.TFLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_tf_logits_process.py#L53"}}),po=new v({props:{name:"__call__",anchor:"transformers.TFLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],parametersDescription:[{anchor:"transformers.TFLogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/v4.23.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/v4.23.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/v4.23.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search.`,name:"scores"},{anchor:"transformers.TFLogitsProcessor.__call__.cur_len",description:`<strong>cur_len</strong> (<code>int</code>) &#x2014;
The current length of valid input sequence tokens. In the TF implementation, the input_ids&#x2019; sequence length
is the maximum length generate can produce, and we need to know which of its tokens are valid.
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"cur_len"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_tf_logits_process.py#L56",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),mo=new v({props:{name:"class transformers.TFLogitsProcessorList",anchor:"transformers.TFLogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_tf_logits_process.py#L75"}}),fo=new v({props:{name:"__call__",anchor:"transformers.TFLogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFLogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/v4.23.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/v4.23.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/v4.23.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search.`,name:"scores"},{anchor:"transformers.TFLogitsProcessorList.__call__.cur_len",description:`<strong>cur_len</strong> (<code>int</code>) &#x2014;
The current length of valid input sequence tokens. In the TF implementation, the input_ids&#x2019; sequence length
is the maximum length generate can produce, and we need to know which of its tokens are valid.
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"cur_len"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_tf_logits_process.py#L82",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),go=new v({props:{name:"class transformers.TFLogitsWarper",anchor:"transformers.TFLogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_tf_logits_process.py#L64"}}),uo=new v({props:{name:"__call__",anchor:"transformers.TFLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],parametersDescription:[{anchor:"transformers.TFLogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/v4.23.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/v4.23.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/v4.23.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search.`,name:"scores"},{anchor:"transformers.TFLogitsWarper.__call__.cur_len",description:`<strong>cur_len</strong> (<code>int</code>) &#x2014;
The current length of valid input sequence tokens. In the TF implementation, the input_ids&#x2019; sequence length
is the maximum length generate can produce, and we need to know which of its tokens are valid.
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"cur_len"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_tf_logits_process.py#L67",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),ho=new v({props:{name:"class transformers.TFTemperatureLogitsWarper",anchor:"transformers.TFTemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],parametersDescription:[{anchor:"transformers.TFTemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_tf_logits_process.py#L98"}}),_o=new v({props:{name:"__call__",anchor:"transformers.TFTemperatureLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_tf_logits_process.py#L113"}}),bo=new v({props:{name:"class transformers.TFTopPLogitsWarper",anchor:"transformers.TFTopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.TFTopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the smallest set of most probable tokens with probabilities that add up to <code>top_p</code> or
higher are kept for generation.`,name:"top_p"},{anchor:"transformers.TFTopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TFTopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_tf_logits_process.py#L147"}}),vo=new v({props:{name:"__call__",anchor:"transformers.TFTopPLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_tf_logits_process.py#L169"}}),$o=new v({props:{name:"class transformers.TFTopKLogitsWarper",anchor:"transformers.TFTopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.TFTopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.TFTopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TFTopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_tf_logits_process.py#L118"}}),To=new v({props:{name:"__call__",anchor:"transformers.TFTopKLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_tf_logits_process.py#L139"}}),yo=new v({props:{name:"class transformers.TFMinLengthLogitsProcessor",anchor:"transformers.TFMinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.TFMinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.TFMinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_tf_logits_process.py#L201"}}),ko=new v({props:{name:"__call__",anchor:"transformers.TFMinLengthLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_tf_logits_process.py#L227"}}),xo=new v({props:{name:"class transformers.TFNoBadWordsLogitsProcessor",anchor:"transformers.TFNoBadWordsLogitsProcessor",parameters:[{name:"bad_words_ids",val:": typing.List[typing.List[int]]"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.TFNoBadWordsLogitsProcessor.bad_words_ids",description:`<strong>bad_words_ids</strong> (<code>List[List[int]]</code>) &#x2014;
List of list of token ids that are not allowed to be generated. In order to get the tokens of the words
that should not appear in the generated text, use <code>tokenizer(bad_word, add_prefix_space=True).input_ids</code>.`,name:"bad_words_ids"},{anchor:"transformers.TFNoBadWordsLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_tf_logits_process.py#L287"}}),wo=new v({props:{name:"__call__",anchor:"transformers.TFNoBadWordsLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_tf_logits_process.py#L364"}}),Lo=new v({props:{name:"class transformers.TFNoRepeatNGramLogitsProcessor",anchor:"transformers.TFNoRepeatNGramLogitsProcessor",parameters:[{name:"ngram_size",val:": int"}],parametersDescription:[{anchor:"transformers.TFNoRepeatNGramLogitsProcessor.ngram_size",description:`<strong>ngram_size</strong> (<code>int</code>) &#x2014;
All ngrams of size <code>ngram_size</code> can only occur once.`,name:"ngram_size"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_tf_logits_process.py#L385"}}),Po=new v({props:{name:"__call__",anchor:"transformers.TFNoRepeatNGramLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_tf_logits_process.py#L424"}}),Fo=new v({props:{name:"class transformers.TFRepetitionPenaltyLogitsProcessor",anchor:"transformers.TFRepetitionPenaltyLogitsProcessor",parameters:[{name:"penalty",val:": float"}],parametersDescription:[{anchor:"transformers.TFRepetitionPenaltyLogitsProcessor.repetition_penalty",description:`<strong>repetition_penalty</strong> (<code>float</code>) &#x2014;
The parameter for repetition penalty. 1.0 means no penalty. See <a href="https://arxiv.org/pdf/1909.05858.pdf" rel="nofollow">this
paper</a> for more details.`,name:"repetition_penalty"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_tf_logits_process.py#L237"}}),Do=new v({props:{name:"__call__",anchor:"transformers.TFRepetitionPenaltyLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_tf_logits_process.py#L279"}}),So=new v({props:{name:"class transformers.TFForcedBOSTokenLogitsProcessor",anchor:"transformers.TFForcedBOSTokenLogitsProcessor",parameters:[{name:"bos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.TFForcedBOSTokenLogitsProcessor.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the first generated token.`,name:"bos_token_id"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_tf_logits_process.py#L446"}}),zo=new v({props:{name:"__call__",anchor:"transformers.TFForcedBOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_tf_logits_process.py#L460"}}),Oo=new v({props:{name:"class transformers.TFForcedEOSTokenLogitsProcessor",anchor:"transformers.TFForcedEOSTokenLogitsProcessor",parameters:[{name:"max_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.TFForcedEOSTokenLogitsProcessor.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.TFForcedEOSTokenLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the last generated token when <code>max_length</code> is reached.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_tf_logits_process.py#L476"}}),qo=new v({props:{name:"__call__",anchor:"transformers.TFForcedEOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_tf_logits_process.py#L493"}}),Bo=new v({props:{name:"class transformers.FlaxLogitsProcessor",anchor:"transformers.FlaxLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_flax_logits_process.py#L50"}}),Io=new v({props:{name:"__call__",anchor:"transformers.FlaxLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"}],parametersDescription:[{anchor:"transformers.FlaxLogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/v4.23.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/v4.23.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/v4.23.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_flax_logits_process.py#L53",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Ao=new v({props:{name:"class transformers.FlaxLogitsProcessorList",anchor:"transformers.FlaxLogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_flax_logits_process.py#L72"}}),Co=new v({props:{name:"__call__",anchor:"transformers.FlaxLogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxLogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/v4.23.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/v4.23.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/v4.23.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_flax_logits_process.py#L79",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Wo=new v({props:{name:"class transformers.FlaxLogitsWarper",anchor:"transformers.FlaxLogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_flax_logits_process.py#L61"}}),No=new v({props:{name:"__call__",anchor:"transformers.FlaxLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"}],parametersDescription:[{anchor:"transformers.FlaxLogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/v4.23.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/v4.23.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/v4.23.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_flax_logits_process.py#L64",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Vo=new v({props:{name:"class transformers.FlaxTemperatureLogitsWarper",anchor:"transformers.FlaxTemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],parametersDescription:[{anchor:"transformers.FlaxTemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_flax_logits_process.py#L95"}}),Mo=new v({props:{name:"__call__",anchor:"transformers.FlaxTemperatureLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_flax_logits_process.py#L110"}}),Go=new v({props:{name:"class transformers.FlaxTopPLogitsWarper",anchor:"transformers.FlaxTopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.FlaxTopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the smallest set of most probable tokens with probabilities that add up to <code>top_p</code> or
higher are kept for generation.`,name:"top_p"},{anchor:"transformers.FlaxTopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.FlaxTopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_flax_logits_process.py#L115"}}),jo=new v({props:{name:"__call__",anchor:"transformers.FlaxTopPLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_flax_logits_process.py#L137"}}),Ho=new v({props:{name:"class transformers.FlaxTopKLogitsWarper",anchor:"transformers.FlaxTopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.FlaxTopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.FlaxTopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.FlaxTopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_flax_logits_process.py#L157"}}),Ro=new v({props:{name:"__call__",anchor:"transformers.FlaxTopKLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_flax_logits_process.py#L178"}}),Ko=new v({props:{name:"class transformers.FlaxForcedBOSTokenLogitsProcessor",anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor",parameters:[{name:"bos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the first generated token.`,name:"bos_token_id"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_flax_logits_process.py#L193"}}),Uo=new v({props:{name:"__call__",anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_flax_logits_process.py#L205"}}),Yo=new v({props:{name:"class transformers.FlaxForcedEOSTokenLogitsProcessor",anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor",parameters:[{name:"max_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the last generated token when <code>max_length</code> is reached.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_flax_logits_process.py#L215"}}),Xo=new v({props:{name:"__call__",anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_flax_logits_process.py#L230"}}),Jo=new v({props:{name:"class transformers.FlaxMinLengthLogitsProcessor",anchor:"transformers.FlaxMinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.FlaxMinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.FlaxMinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_flax_logits_process.py#L240"}}),Qo=new v({props:{name:"__call__",anchor:"transformers.FlaxMinLengthLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_flax_logits_process.py#L261"}}),Zo=new Ae({}),en=new v({props:{name:"class transformers.StoppingCriteria",anchor:"transformers.StoppingCriteria",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_stopping_criteria.py#L33"}}),tn=new v({props:{name:"__call__",anchor:"transformers.StoppingCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.StoppingCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/v4.23.1/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/v4.23.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/v4.23.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.StoppingCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_stopping_criteria.py#L36",returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),rn=new v({props:{name:"class transformers.StoppingCriteriaList",anchor:"transformers.StoppingCriteriaList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_stopping_criteria.py#L110"}}),on=new v({props:{name:"__call__",anchor:"transformers.StoppingCriteriaList.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.StoppingCriteriaList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/v4.23.1/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/v4.23.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/v4.23.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.StoppingCriteriaList.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_stopping_criteria.py#L111",returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),nn=new v({props:{name:"class transformers.MaxLengthCriteria",anchor:"transformers.MaxLengthCriteria",parameters:[{name:"max_length",val:": int"}],parametersDescription:[{anchor:"transformers.MaxLengthCriteria.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length that the output sequence can have in number of tokens.`,name:"max_length"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_stopping_criteria.py#L41"}}),an=new v({props:{name:"__call__",anchor:"transformers.MaxLengthCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MaxLengthCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/v4.23.1/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/v4.23.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/v4.23.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.MaxLengthCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_stopping_criteria.py#L54",returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),cn=new v({props:{name:"class transformers.MaxTimeCriteria",anchor:"transformers.MaxTimeCriteria",parameters:[{name:"max_time",val:": float"},{name:"initial_timestamp",val:": typing.Optional[float] = None"}],parametersDescription:[{anchor:"transformers.MaxTimeCriteria.max_time",description:`<strong>max_time</strong> (<code>float</code>) &#x2014;
The maximum allowed time in seconds for the generation.`,name:"max_time"},{anchor:"transformers.MaxTimeCriteria.initial_time",description:`<strong>initial_time</strong> (<code>float</code>, <em>optional</em>, defaults to <code>time.time()</code>) &#x2014;
The start of the generation allowed time.`,name:"initial_time"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_stopping_criteria.py#L88"}}),dn=new v({props:{name:"__call__",anchor:"transformers.MaxTimeCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MaxTimeCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/v4.23.1/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/v4.23.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/v4.23.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.MaxTimeCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_stopping_criteria.py#L105",returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),pn=new Ae({}),mn=new v({props:{name:"class transformers.Constraint",anchor:"transformers.Constraint",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_beam_constraints.py#L5"}}),jt=new D0({props:{anchor:"transformers.Constraint.example",$$slots:{default:[S0]},$$scope:{ctx:kd}}}),fn=new v({props:{name:"advance",anchor:"transformers.Constraint.advance",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_beam_constraints.py#L48",returnDescription:`
<p>Must be a tensor of a list of indexable tokens, not some integer.</p>
`,returnType:`
<p>token_ids(<code>torch.tensor</code>)</p>
`}}),gn=new v({props:{name:"copy",anchor:"transformers.Constraint.copy",parameters:[{name:"stateful",val:" = False"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_beam_constraints.py#L113",returnDescription:`
<p>The same constraint as the one being called from.</p>
`,returnType:`
<p>constraint(<code>Constraint</code>)</p>
`}}),un=new v({props:{name:"does_advance",anchor:"transformers.Constraint.does_advance",parameters:[{name:"token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_beam_constraints.py#L60"}}),hn=new v({props:{name:"remaining",anchor:"transformers.Constraint.remaining",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_beam_constraints.py#L104"}}),bn=new v({props:{name:"reset",anchor:"transformers.Constraint.reset",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_beam_constraints.py#L94"}}),vn=new v({props:{name:"test",anchor:"transformers.Constraint.test",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_beam_constraints.py#L24"}}),$n=new v({props:{name:"update",anchor:"transformers.Constraint.update",parameters:[{name:"token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_beam_constraints.py#L69",returnDescription:`
<p>Whether this constraint has become one step closer to being fulfuilled.
completed(<code>bool</code>):
Whether this constraint has been completely fulfilled by this token being generated.
reset (<code>bool</code>):
Whether this constraint has reset its progress by this token being generated.</p>
`,returnType:`
<p>stepped(<code>bool</code>)</p>
`}}),yn=new v({props:{name:"class transformers.PhrasalConstraint",anchor:"transformers.PhrasalConstraint",parameters:[{name:"token_ids",val:": typing.List[int]"}],parametersDescription:[{anchor:"transformers.PhrasalConstraint.token_ids",description:`<strong>token_ids</strong> (<code>List[int]</code>) &#x2014;
The id of the token that must be generated by the output.`,name:"token_ids"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_beam_constraints.py#L129"}}),kn=new v({props:{name:"class transformers.DisjunctiveConstraint",anchor:"transformers.DisjunctiveConstraint",parameters:[{name:"nested_token_ids",val:": typing.List[typing.List[int]]"}],parametersDescription:[{anchor:"transformers.DisjunctiveConstraint.nested_token_ids",description:"<strong>nested_token_ids</strong> (<code>List[List[int]]</code>) &#x2014; a list of words, where each word is a list of ids. This constraint",name:"nested_token_ids"},{anchor:"transformers.DisjunctiveConstraint.is",description:"<strong>is</strong> fulfilled by generating just one from the list of words. &#x2014;",name:"is"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_beam_constraints.py#L261"}}),wn=new v({props:{name:"class transformers.ConstraintListState",anchor:"transformers.ConstraintListState",parameters:[{name:"constraints",val:": typing.List[transformers.generation_beam_constraints.Constraint]"}],parametersDescription:[{anchor:"transformers.ConstraintListState.constraints",description:`<strong>constraints</strong> (<code>List[Constraint]</code>) &#x2014;
A list of <a href="/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.Constraint">Constraint</a> objects that must be fulfilled by the beam scorer.`,name:"constraints"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_beam_constraints.py#L350"}}),Ln=new v({props:{name:"advance",anchor:"transformers.ConstraintListState.advance",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_beam_constraints.py#L382"}}),En=new v({props:{name:"reset",anchor:"transformers.ConstraintListState.reset",parameters:[{name:"token_ids",val:": typing.Optional[typing.List[int]]"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_beam_constraints.py#L417"}}),Pn=new Ae({}),Fn=new v({props:{name:"class transformers.BeamScorer",anchor:"transformers.BeamScorer",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_beam_search.py#L88"}}),Dn=new v({props:{name:"process",anchor:"transformers.BeamScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.BeamScorer.process.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/v4.23.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/v4.23.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/v4.23.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.BeamScorer.process.next_scores",description:`<strong>next_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Current scores of the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_scores"},{anchor:"transformers.BeamScorer.process.next_tokens",description:`<strong>next_tokens</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
<code>input_ids</code> of the tokens corresponding to the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_tokens"},{anchor:"transformers.BeamScorer.process.next_indices",description:`<strong>next_indices</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Beam indices indicating to which beam hypothesis the <code>next_tokens</code> correspond.`,name:"next_indices"},{anchor:"transformers.BeamScorer.process.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.BeamScorer.process.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_beam_search.py#L94",returnDescription:`
<p>A dictionary composed of the fields as defined above:</p>
<ul>
<li><strong>next_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Updated scores of all
non-finished beams.</li>
<li><strong>next_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Next tokens to be added
to the non-finished beam_hypotheses.</li>
<li><strong>next_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Beam indices
indicating to which beam the next tokens shall be added.</li>
</ul>
`,returnType:`
<p><code>UserDict</code></p>
`}}),Sn=new v({props:{name:"finalize",anchor:"transformers.BeamScorer.finalize",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"max_length",val:": int"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.BeamScorer.finalize.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/v4.23.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/v4.23.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/v4.23.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.BeamScorer.finalize.final_beam_scores",description:`<strong>final_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The final scores of all non-finished beams.`,name:"final_beam_scores"},{anchor:"transformers.BeamScorer.finalize.final_beam_tokens",description:`<strong>final_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The last tokens to be added to the non-finished beam_hypotheses.`,name:"final_beam_tokens"},{anchor:"transformers.BeamScorer.finalize.final_beam_indices",description:`<strong>final_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The beam indices indicating to which beam the <code>final_beam_tokens</code> shall be added.`,name:"final_beam_indices"},{anchor:"transformers.BeamScorer.finalize.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.BeamScorer.finalize.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_beam_search.py#L106",returnDescription:`
<p>The generated sequences.
The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter if all batches finished early
due to the <code>eos_token_id</code>.</p>
`,returnType:`
<p><code>torch.LongTensor</code> of shape <code>(batch_size * num_return_sequences, sequence_length)</code></p>
`}}),zn=new v({props:{name:"class transformers.BeamSearchScorer",anchor:"transformers.BeamSearchScorer",parameters:[{name:"batch_size",val:": int"},{name:"num_beams",val:": int"},{name:"device",val:": device"},{name:"length_penalty",val:": typing.Optional[float] = 1.0"},{name:"do_early_stopping",val:": typing.Optional[bool] = False"},{name:"num_beam_hyps_to_keep",val:": typing.Optional[int] = 1"},{name:"num_beam_groups",val:": typing.Optional[int] = 1"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.BeamSearchScorer.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014;
Batch Size of <code>input_ids</code> for which standard beam search decoding is run in parallel.`,name:"batch_size"},{anchor:"transformers.BeamSearchScorer.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.BeamSearchScorer.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams for beam search.`,name:"num_beams"},{anchor:"transformers.BeamSearchScorer.device",description:`<strong>device</strong> (<code>torch.device</code>) &#x2014;
Defines the device type (<em>e.g.</em>, <code>&quot;cpu&quot;</code> or <code>&quot;cuda&quot;</code>) on which this instance of <code>BeamSearchScorer</code> will be
allocated.`,name:"device"},{anchor:"transformers.BeamSearchScorer.length_penalty",description:`<strong>length_penalty</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Exponential penalty to the length that is used with beam-based generation. It is applied as an exponent to
the sequence length, which in turn is used to divide the score of the sequence. Since the score is the log
likelihood of the sequence (i.e. negative), <code>length_penalty</code> &gt; 0.0 promotes longer sequences, while
<code>length_penalty</code> &lt; 0.0 encourages shorter sequences.`,name:"length_penalty"},{anchor:"transformers.BeamSearchScorer.do_early_stopping",description:`<strong>do_early_stopping</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to stop the beam search when at least <code>num_beams</code> sentences are finished per batch or not.`,name:"do_early_stopping"},{anchor:"transformers.BeamSearchScorer.num_beam_hyps_to_keep",description:`<strong>num_beam_hyps_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of beam hypotheses that shall be returned upon calling
<code>~transformer.BeamSearchScorer.finalize</code>.`,name:"num_beam_hyps_to_keep"},{anchor:"transformers.BeamSearchScorer.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_beam_search.py#L120"}}),In=new v({props:{name:"process",anchor:"transformers.BeamSearchScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_beam_search.py#L208"}}),An=new v({props:{name:"finalize",anchor:"transformers.BeamSearchScorer.finalize",parameters:[{name:"input_ids",val:": LongTensor"},{name:"final_beam_scores",val:": FloatTensor"},{name:"final_beam_tokens",val:": LongTensor"},{name:"final_beam_indices",val:": LongTensor"},{name:"max_length",val:": int"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_beam_search.py#L302"}}),Cn=new v({props:{name:"class transformers.ConstrainedBeamSearchScorer",anchor:"transformers.ConstrainedBeamSearchScorer",parameters:[{name:"batch_size",val:": int"},{name:"num_beams",val:": int"},{name:"constraints",val:": typing.List[transformers.generation_beam_constraints.Constraint]"},{name:"device",val:": device"},{name:"length_penalty",val:": typing.Optional[float] = 1.0"},{name:"do_early_stopping",val:": typing.Optional[bool] = False"},{name:"num_beam_hyps_to_keep",val:": typing.Optional[int] = 1"},{name:"num_beam_groups",val:": typing.Optional[int] = 1"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ConstrainedBeamSearchScorer.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014;
Batch Size of <code>input_ids</code> for which standard beam search decoding is run in parallel.`,name:"batch_size"},{anchor:"transformers.ConstrainedBeamSearchScorer.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams for beam search.`,name:"num_beams"},{anchor:"transformers.ConstrainedBeamSearchScorer.constraints",description:`<strong>constraints</strong> (<code>List[Constraint]</code>) &#x2014;
A list of positive constraints represented as <code>Constraint</code> objects that must be fulfilled in the generation
output. For more information, the documentation of <a href="/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.Constraint">Constraint</a> should be read.`,name:"constraints"},{anchor:"transformers.ConstrainedBeamSearchScorer.device",description:`<strong>device</strong> (<code>torch.device</code>) &#x2014;
Defines the device type (<em>e.g.</em>, <code>&quot;cpu&quot;</code> or <code>&quot;cuda&quot;</code>) on which this instance of <code>BeamSearchScorer</code> will be
allocated.`,name:"device"},{anchor:"transformers.ConstrainedBeamSearchScorer.length_penalty",description:`<strong>length_penalty</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Exponential penalty to the length that is used with beam-based generation. It is applied as an exponent to
the sequence length, which in turn is used to divide the score of the sequence. Since the score is the log
likelihood of the sequence (i.e. negative), <code>length_penalty</code> &gt; 0.0 promotes longer sequences, while
<code>length_penalty</code> &lt; 0.0 encourages shorter sequences.`,name:"length_penalty"},{anchor:"transformers.ConstrainedBeamSearchScorer.do_early_stopping",description:`<strong>do_early_stopping</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to stop the beam search when at least <code>num_beams</code> sentences are finished per batch or not.`,name:"do_early_stopping"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beam_hyps_to_keep",description:`<strong>num_beam_hyps_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of beam hypotheses that shall be returned upon calling
<code>~transformer.BeamSearchScorer.finalize</code>.`,name:"num_beam_hyps_to_keep"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_beam_search.py#L390"}}),Wn=new v({props:{name:"process",anchor:"transformers.ConstrainedBeamSearchScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"scores_for_all_vocab",val:": FloatTensor"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"transformers.ConstrainedBeamSearchScorer.process.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/v4.23.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/v4.23.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/v4.23.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_scores",description:`<strong>next_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Current scores of the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_scores"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_tokens",description:`<strong>next_tokens</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
<code>input_ids</code> of the tokens corresponding to the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_tokens"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_indices",description:`<strong>next_indices</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Beam indices indicating to which beam hypothesis the <code>next_tokens</code> correspond.`,name:"next_indices"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.scores_for_all_vocab",description:`<strong>scores_for_all_vocab</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
The scores of all tokens in the vocabulary for each of the beam hypotheses.`,name:"scores_for_all_vocab"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_beam_search.py#L486",returnDescription:`
<p>A dictionary composed of the fields as defined above:</p>
<ul>
<li>
<p><strong>next_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Updated scores of
all
non-finished beams.</p>
</li>
<li>
<p><strong>next_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Next tokens to be
added
to the non-finished beam_hypotheses.</p>
</li>
<li>
<p><strong>next_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Beam indices
indicating to which beam the next tokens shall be added.</p>
</li>
</ul>
`,returnType:`
<p><code>UserDict</code></p>
`}}),Nn=new v({props:{name:"finalize",anchor:"transformers.ConstrainedBeamSearchScorer.finalize",parameters:[{name:"input_ids",val:": LongTensor"},{name:"final_beam_scores",val:": FloatTensor"},{name:"final_beam_tokens",val:": LongTensor"},{name:"final_beam_indices",val:": LongTensor"},{name:"max_length",val:": int"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_beam_search.py#L768"}}),Vn=new Ae({}),Mn=new v({props:{name:"transformers.top_k_top_p_filtering",anchor:"transformers.top_k_top_p_filtering",parameters:[{name:"logits",val:": FloatTensor"},{name:"top_k",val:": int = 0"},{name:"top_p",val:": float = 1.0"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.top_k_top_p_filtering.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
If &gt; 0, only keep the top k tokens with highest probability (top-k filtering)`,name:"top_k"},{anchor:"transformers.top_k_top_p_filtering.top_p",description:`<strong>top_p</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
If &lt; 1.0, only keep the top tokens with cumulative probability &gt;= top_p (nucleus filtering). Nucleus
filtering is described in Holtzman et al. (<a href="http://arxiv.org/abs/1904.09751" rel="nofollow">http://arxiv.org/abs/1904.09751</a>)`,name:"top_p"},{anchor:"transformers.top_k_top_p_filtering.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimumber of tokens we keep per batch example in the output.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_utils.py#L3416"}}),jn=new v({props:{name:"transformers.tf_top_k_top_p_filtering",anchor:"transformers.tf_top_k_top_p_filtering",parameters:[{name:"logits",val:""},{name:"top_k",val:" = 0"},{name:"top_p",val:" = 1.0"},{name:"filter_value",val:" = -inf"},{name:"min_tokens_to_keep",val:" = 1"}],parametersDescription:[{anchor:"transformers.tf_top_k_top_p_filtering.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
If &gt; 0, only keep the top k tokens with highest probability (top-k filtering)`,name:"top_k"},{anchor:"transformers.tf_top_k_top_p_filtering.top_p",description:`<strong>top_p</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
If &lt; 1.0, only keep the top tokens with cumulative probability &gt;= top_p (nucleus filtering). Nucleus
filtering is described in Holtzman et al. (<a href="http://arxiv.org/abs/1904.09751" rel="nofollow">http://arxiv.org/abs/1904.09751</a>)`,name:"top_p"},{anchor:"transformers.tf_top_k_top_p_filtering.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimumber of tokens we keep per batch example in the output.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/generation_tf_utils.py#L3265"}}),{c(){w=o("meta"),Re=c(),k=o("h1"),Ce=o("a"),mc=o("span"),f(ar.$$.fragment),Xm=c(),fc=o("span"),Jm=a("Utilities for Generation"),xd=c(),y=o("p"),Qm=a("This page lists all the utility functions used by "),Un=o("a"),Zm=a("generate()"),ef=a(`,
`),Yn=o("a"),tf=a("greedy_search()"),rf=a(`,
`),Xn=o("a"),of=a("sample()"),nf=a(`,
`),Jn=o("a"),sf=a("beam_search()"),af=a(`,
`),Qn=o("a"),cf=a("beam_sample()"),lf=a(`,
`),Zn=o("a"),df=a("group_beam_search()"),pf=a(`, and
`),es=o("a"),mf=a("constrained_beam_search()"),ff=a("."),wd=c(),ts=o("p"),gf=a("Most of those are only useful if you are studying the code of the generate methods in the library."),Ld=c(),Ke=o("h2"),_t=o("a"),gc=o("span"),f(ir.$$.fragment),uf=c(),uc=o("span"),hf=a("Generate Outputs"),Ed=c(),V=o("p"),_f=a("The output of "),rs=o("a"),bf=a("generate()"),vf=a(` is an instance of a subclass of
`),os=o("a"),$f=a("ModelOutput"),Tf=a(`. This output is a data structure containing all the information returned
by `),ns=o("a"),yf=a("generate()"),kf=a(", but that can also be used as tuple or dictionary."),Pd=c(),ss=o("p"),xf=a("Here\u2019s an example:"),Fd=c(),f(cr.$$.fragment),Dd=c(),We=o("p"),wf=a("The "),hc=o("code"),Lf=a("generation_output"),Ef=a(" object is a "),as=o("a"),Pf=a("GreedySearchDecoderOnlyOutput"),Ff=a(`, as we can
see in the documentation of that class below, it means it has the following attributes:`),Sd=c(),M=o("ul"),is=o("li"),_c=o("code"),Df=a("sequences"),Sf=a(": the generated sequences of tokens"),zf=c(),cs=o("li"),bc=o("code"),Of=a("scores"),qf=a(" (optional): the prediction scores of the language modelling head, for each generation step"),Bf=c(),ls=o("li"),vc=o("code"),If=a("hidden_states"),Af=a(" (optional): the hidden states of the model, for each generation step"),Cf=c(),ds=o("li"),$c=o("code"),Wf=a("attentions"),Nf=a(" (optional): the attention weights of the model, for each generation step"),zd=c(),x=o("p"),Vf=a("Here we have the "),Tc=o("code"),Mf=a("scores"),Gf=a(" since we passed along "),yc=o("code"),jf=a("output_scores=True"),Hf=a(", but we don\u2019t have "),kc=o("code"),Rf=a("hidden_states"),Kf=a(` and
`),xc=o("code"),Uf=a("attentions"),Yf=a(" because we didn\u2019t pass "),wc=o("code"),Xf=a("output_hidden_states=True"),Jf=a(" or "),Lc=o("code"),Qf=a("output_attentions=True"),Zf=a("."),Od=c(),S=o("p"),eg=a(`You can access each attribute as you would usually do, and if that attribute has not been returned by the model, you
will get `),Ec=o("code"),tg=a("None"),rg=a(". Here for instance "),Pc=o("code"),og=a("generation_output.scores"),ng=a(` are all the generated prediction scores of the
language modeling head, and `),Fc=o("code"),sg=a("generation_output.attentions"),ag=a(" is "),Dc=o("code"),ig=a("None"),cg=a("."),qd=c(),z=o("p"),lg=a("When using our "),Sc=o("code"),dg=a("generation_output"),pg=a(" object as a tuple, it only keeps the attributes that don\u2019t have "),zc=o("code"),mg=a("None"),fg=a(` values.
Here, for instance, it has two elements, `),Oc=o("code"),gg=a("loss"),ug=a(" then "),qc=o("code"),hg=a("logits"),_g=a(", so"),Bd=c(),f(lr.$$.fragment),Id=c(),bt=o("p"),bg=a("will return the tuple "),Bc=o("code"),vg=a("(generation_output.sequences, generation_output.scores)"),$g=a(" for instance."),Ad=c(),O=o("p"),Tg=a("When using our "),Ic=o("code"),yg=a("generation_output"),kg=a(" object as a dictionary, it only keeps the attributes that don\u2019t have "),Ac=o("code"),xg=a("None"),wg=a(`
values. Here, for instance, it has two keys that are `),Cc=o("code"),Lg=a("sequences"),Eg=a(" and "),Wc=o("code"),Pg=a("scores"),Fg=a("."),Cd=c(),ps=o("p"),Dg=a("We document here all output types."),Wd=c(),Ue=o("h3"),vt=o("a"),Nc=o("span"),f(dr.$$.fragment),Sg=c(),Vc=o("span"),zg=a("GreedySearchOutput"),Nd=c(),Ye=o("div"),f(pr.$$.fragment),Og=c(),Mc=o("p"),qg=a("Base class for outputs of decoder-only generation models using greedy search."),Vd=c(),Xe=o("div"),f(mr.$$.fragment),Bg=c(),Gc=o("p"),Ig=a(`Base class for outputs of encoder-decoder generation models using greedy search. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Md=c(),R=o("div"),f(fr.$$.fragment),Ag=c(),jc=o("p"),Cg=a("Flax Base class for outputs of decoder-only generation models using greedy search."),Wg=c(),$t=o("div"),f(gr.$$.fragment),Ng=c(),Hc=o("p"),Vg=a("\u201CReturns a new object replacing the specified fields with new values."),Gd=c(),Je=o("h3"),Tt=o("a"),Rc=o("span"),f(ur.$$.fragment),Mg=c(),Kc=o("span"),Gg=a("SampleOutput"),jd=c(),Qe=o("div"),f(hr.$$.fragment),jg=c(),Uc=o("p"),Hg=a("Base class for outputs of decoder-only generation models using sampling."),Hd=c(),Ze=o("div"),f(_r.$$.fragment),Rg=c(),Yc=o("p"),Kg=a(`Base class for outputs of encoder-decoder generation models using sampling. Hidden states and attention weights of
the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Rd=c(),K=o("div"),f(br.$$.fragment),Ug=c(),Xc=o("p"),Yg=a("Flax Base class for outputs of decoder-only generation models using sampling."),Xg=c(),yt=o("div"),f(vr.$$.fragment),Jg=c(),Jc=o("p"),Qg=a("\u201CReturns a new object replacing the specified fields with new values."),Kd=c(),et=o("h3"),kt=o("a"),Qc=o("span"),f($r.$$.fragment),Zg=c(),Zc=o("span"),eu=a("BeamSearchOutput"),Ud=c(),tt=o("div"),f(Tr.$$.fragment),tu=c(),el=o("p"),ru=a("Base class for outputs of decoder-only generation models using beam search."),Yd=c(),rt=o("div"),f(yr.$$.fragment),ou=c(),tl=o("p"),nu=a(`Base class for outputs of encoder-decoder generation models using beam search. Hidden states and attention weights
of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Xd=c(),ot=o("h3"),xt=o("a"),rl=o("span"),f(kr.$$.fragment),su=c(),ol=o("span"),au=a("BeamSampleOutput"),Jd=c(),nt=o("div"),f(xr.$$.fragment),iu=c(),nl=o("p"),cu=a("Base class for outputs of decoder-only generation models using beam sample."),Qd=c(),st=o("div"),f(wr.$$.fragment),lu=c(),sl=o("p"),du=a(`Base class for outputs of encoder-decoder generation models using beam sampling. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Zd=c(),at=o("h2"),wt=o("a"),al=o("span"),f(Lr.$$.fragment),pu=c(),il=o("span"),mu=a("LogitsProcessor"),ep=c(),Lt=o("p"),fu=a("A "),ms=o("a"),gu=a("LogitsProcessor"),uu=a(` can be used to modify the prediction scores of a language model head for
generation.`),tp=c(),U=o("div"),f(Er.$$.fragment),hu=c(),cl=o("p"),_u=a("Abstract base class for all logit processors that can be applied during generation."),bu=c(),Et=o("div"),f(Pr.$$.fragment),vu=c(),ll=o("p"),$u=a("Torch method for processing logits."),rp=c(),Y=o("div"),f(Fr.$$.fragment),Tu=c(),L=o("p"),yu=a("This class can be used to create a list of "),fs=o("a"),ku=a("LogitsProcessor"),xu=a(" or "),gs=o("a"),wu=a("LogitsWarper"),Lu=a(` to subsequently process a
`),dl=o("code"),Eu=a("scores"),Pu=a(" input tensor. This class inherits from list and adds a specific "),pl=o("em"),ml=o("strong"),Fu=a("call"),Du=a(` method to apply each
`),us=o("a"),Su=a("LogitsProcessor"),zu=a(" or "),hs=o("a"),Ou=a("LogitsWarper"),qu=a(" to the inputs."),Bu=c(),_s=o("div"),f(Dr.$$.fragment),op=c(),X=o("div"),f(Sr.$$.fragment),Iu=c(),fl=o("p"),Au=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),Cu=c(),Pt=o("div"),f(zr.$$.fragment),Wu=c(),gl=o("p"),Nu=a("Torch method for warping logits."),np=c(),J=o("div"),f(Or.$$.fragment),Vu=c(),bs=o("p"),vs=o("a"),Mu=a("LogitsProcessor"),Gu=a(" enforcing a min-length by setting EOS probability to 0."),ju=c(),$s=o("div"),f(qr.$$.fragment),sp=c(),Q=o("div"),f(Br.$$.fragment),Hu=c(),Ts=o("p"),ys=o("a"),Ru=a("LogitsWarper"),Ku=a(" for temperature (exponential scaling output probability distribution)."),Uu=c(),ks=o("div"),f(Ir.$$.fragment),ap=c(),Z=o("div"),f(Ar.$$.fragment),Yu=c(),xs=o("p"),ws=o("a"),Xu=a("LogitsProcessor"),Ju=a(" enforcing an exponential penalty on repeated sequences."),Qu=c(),Ls=o("div"),f(Cr.$$.fragment),ip=c(),ee=o("div"),f(Wr.$$.fragment),Zu=c(),Es=o("p"),Ps=o("a"),eh=a("LogitsWarper"),th=a(" that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),rh=c(),Fs=o("div"),f(Nr.$$.fragment),cp=c(),te=o("div"),f(Vr.$$.fragment),oh=c(),Ds=o("p"),Ss=o("a"),nh=a("LogitsWarper"),sh=a(" that performs top-k, i.e. restricting to the k highest probability elements."),ah=c(),zs=o("div"),f(Mr.$$.fragment),lp=c(),re=o("div"),f(Gr.$$.fragment),ih=c(),Ft=o("p"),Os=o("a"),ch=a("LogitsWarper"),lh=a(" that performs typical decoding. See "),jr=o("a"),dh=a(`Typical Decoding for Natural Language
Generation`),ph=a(" for more information."),mh=c(),qs=o("div"),f(Hr.$$.fragment),dp=c(),oe=o("div"),f(Rr.$$.fragment),fh=c(),Dt=o("p"),Bs=o("a"),gh=a("LogitsProcessor"),uh=a(` that enforces no repetition of n-grams. See
`),Kr=o("a"),hh=a("Fairseq"),_h=a("."),bh=c(),Is=o("div"),f(Ur.$$.fragment),pp=c(),ne=o("div"),f(Yr.$$.fragment),vh=c(),As=o("p"),Cs=o("a"),$h=a("LogitsProcessor"),Th=a(" that enforces that specified sequences will never be sampled."),yh=c(),Ws=o("div"),f(Xr.$$.fragment),mp=c(),se=o("div"),f(Jr.$$.fragment),kh=c(),St=o("p"),Ns=o("a"),xh=a("LogitsProcessor"),wh=a(` that enforces constrained generation and is useful for prefix-conditioned constrained
generation. See `),Qr=o("a"),Lh=a("Autoregressive Entity Retrieval"),Eh=a(" for more information."),Ph=c(),Vs=o("div"),f(Zr.$$.fragment),fp=c(),ae=o("div"),f(eo.$$.fragment),Fh=c(),Ne=o("p"),Ms=o("a"),Dh=a("LogitsProcessor"),Sh=a(` that enforces diverse beam search. Note that this logits processor is only effective for
`),Gs=o("a"),zh=a("PreTrainedModel.group_beam_search()"),Oh=a(". See "),to=o("a"),qh=a(`Diverse Beam Search: Decoding Diverse Solutions from Neural Sequence
Models`),Bh=a(" for more details."),Ih=c(),js=o("div"),f(ro.$$.fragment),gp=c(),ie=o("div"),f(oo.$$.fragment),Ah=c(),Hs=o("p"),Rs=o("a"),Ch=a("LogitsProcessor"),Wh=a(" that enforces the specified token as the first generated token."),Nh=c(),Ks=o("div"),f(no.$$.fragment),up=c(),ce=o("div"),f(so.$$.fragment),Vh=c(),zt=o("p"),Us=o("a"),Mh=a("LogitsProcessor"),Gh=a(" that enforces the specified token as the last generated token when "),ul=o("code"),jh=a("max_length"),Hh=a(" is reached."),Rh=c(),Ys=o("div"),f(ao.$$.fragment),hp=c(),le=o("div"),f(io.$$.fragment),Kh=c(),G=o("p"),Xs=o("a"),Uh=a("LogitsProcessor"),Yh=a(" that removes all "),hl=o("code"),Xh=a("nan"),Jh=a(" and "),_l=o("code"),Qh=a("inf"),Zh=a(` values to avoid the generation method to fail. Note that using
the logits processor should only be used if necessary since it can slow down the generation method. `),bl=o("code"),e_=a("max_length"),t_=a(` is
reached.`),r_=c(),Js=o("div"),f(co.$$.fragment),_p=c(),de=o("div"),f(lo.$$.fragment),o_=c(),vl=o("p"),n_=a("Abstract base class for all logit processors that can be applied during generation."),s_=c(),Ot=o("div"),f(po.$$.fragment),a_=c(),$l=o("p"),i_=a("TF method for processing logits."),bp=c(),pe=o("div"),f(mo.$$.fragment),c_=c(),A=o("p"),l_=a("This class can be used to create a list of "),Qs=o("a"),d_=a("TFLogitsProcessor"),p_=a(" to subsequently process a "),Tl=o("code"),m_=a("scores"),f_=a(` input tensor.
This class inherits from list and adds a specific `),yl=o("em"),kl=o("strong"),g_=a("call"),u_=a(" method to apply each "),Zs=o("a"),h_=a("TFLogitsProcessor"),__=a(` to the
inputs.`),b_=c(),ea=o("div"),f(fo.$$.fragment),vp=c(),me=o("div"),f(go.$$.fragment),v_=c(),xl=o("p"),$_=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),T_=c(),qt=o("div"),f(uo.$$.fragment),y_=c(),wl=o("p"),k_=a("TF method for warping logits."),$p=c(),fe=o("div"),f(ho.$$.fragment),x_=c(),ta=o("p"),ra=o("a"),w_=a("TFLogitsWarper"),L_=a(" for temperature (exponential scaling output probability distribution)."),E_=c(),oa=o("div"),f(_o.$$.fragment),Tp=c(),ge=o("div"),f(bo.$$.fragment),P_=c(),na=o("p"),sa=o("a"),F_=a("TFLogitsWarper"),D_=a(" that performs top-p, i.e. restricting to top tokens summing to <= prob_cut_off."),S_=c(),aa=o("div"),f(vo.$$.fragment),yp=c(),ue=o("div"),f($o.$$.fragment),z_=c(),ia=o("p"),ca=o("a"),O_=a("TFLogitsWarper"),q_=a(" that performs top-k, i.e. restricting to the k highest probability elements."),B_=c(),la=o("div"),f(To.$$.fragment),kp=c(),he=o("div"),f(yo.$$.fragment),I_=c(),da=o("p"),pa=o("a"),A_=a("TFLogitsProcessor"),C_=a(" enforcing a min-length by setting EOS probability to 0."),W_=c(),ma=o("div"),f(ko.$$.fragment),xp=c(),_e=o("div"),f(xo.$$.fragment),N_=c(),fa=o("p"),ga=o("a"),V_=a("TFLogitsProcessor"),M_=a(" that enforces that specified sequences will never be sampled."),G_=c(),ua=o("div"),f(wo.$$.fragment),wp=c(),be=o("div"),f(Lo.$$.fragment),j_=c(),Bt=o("p"),ha=o("a"),H_=a("TFLogitsProcessor"),R_=a(` that enforces no repetition of n-grams. See
`),Eo=o("a"),K_=a("Fairseq"),U_=a("."),Y_=c(),_a=o("div"),f(Po.$$.fragment),Lp=c(),ve=o("div"),f(Fo.$$.fragment),X_=c(),ba=o("p"),va=o("a"),J_=a("TFLogitsProcessor"),Q_=a(" enforcing an exponential penalty on repeated sequences."),Z_=c(),$a=o("div"),f(Do.$$.fragment),Ep=c(),$e=o("div"),f(So.$$.fragment),eb=c(),Ta=o("p"),ya=o("a"),tb=a("TFLogitsProcessor"),rb=a(" that enforces the specified token as the first generated token."),ob=c(),ka=o("div"),f(zo.$$.fragment),Pp=c(),Te=o("div"),f(Oo.$$.fragment),nb=c(),It=o("p"),xa=o("a"),sb=a("TFLogitsProcessor"),ab=a(" that enforces the specified token as the last generated token when "),Ll=o("code"),ib=a("max_length"),cb=a(" is reached."),lb=c(),wa=o("div"),f(qo.$$.fragment),Fp=c(),ye=o("div"),f(Bo.$$.fragment),db=c(),El=o("p"),pb=a("Abstract base class for all logit processors that can be applied during generation."),mb=c(),At=o("div"),f(Io.$$.fragment),fb=c(),Pl=o("p"),gb=a("Flax method for processing logits."),Dp=c(),ke=o("div"),f(Ao.$$.fragment),ub=c(),E=o("p"),hb=a("This class can be used to create a list of "),La=o("a"),_b=a("FlaxLogitsProcessor"),bb=a(" or "),Ea=o("a"),vb=a("FlaxLogitsWarper"),$b=a(` to subsequently process
a `),Fl=o("code"),Tb=a("scores"),yb=a(" input tensor. This class inherits from list and adds a specific "),Dl=o("em"),Sl=o("strong"),kb=a("call"),xb=a(` method to apply each
`),Pa=o("a"),wb=a("FlaxLogitsProcessor"),Lb=a(" or "),Fa=o("a"),Eb=a("FlaxLogitsWarper"),Pb=a(" to the inputs."),Fb=c(),Da=o("div"),f(Co.$$.fragment),Sp=c(),xe=o("div"),f(Wo.$$.fragment),Db=c(),zl=o("p"),Sb=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),zb=c(),Ct=o("div"),f(No.$$.fragment),Ob=c(),Ol=o("p"),qb=a("Flax method for warping logits."),zp=c(),we=o("div"),f(Vo.$$.fragment),Bb=c(),Sa=o("p"),za=o("a"),Ib=a("FlaxLogitsWarper"),Ab=a(" for temperature (exponential scaling output probability distribution)."),Cb=c(),Oa=o("div"),f(Mo.$$.fragment),Op=c(),Le=o("div"),f(Go.$$.fragment),Wb=c(),qa=o("p"),Ba=o("a"),Nb=a("FlaxLogitsWarper"),Vb=a(" that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),Mb=c(),Ia=o("div"),f(jo.$$.fragment),qp=c(),Ee=o("div"),f(Ho.$$.fragment),Gb=c(),Aa=o("p"),Ca=o("a"),jb=a("FlaxLogitsWarper"),Hb=a(" that performs top-k, i.e. restricting to the k highest probability elements."),Rb=c(),Wa=o("div"),f(Ro.$$.fragment),Bp=c(),Pe=o("div"),f(Ko.$$.fragment),Kb=c(),Na=o("p"),Va=o("a"),Ub=a("FlaxLogitsProcessor"),Yb=a(" that enforces the specified token as the first generated token."),Xb=c(),Ma=o("div"),f(Uo.$$.fragment),Ip=c(),Fe=o("div"),f(Yo.$$.fragment),Jb=c(),Wt=o("p"),Ga=o("a"),Qb=a("FlaxLogitsProcessor"),Zb=a(" that enforces the specified token as the last generated token when "),ql=o("code"),ev=a("max_length"),tv=a(" is reached."),rv=c(),ja=o("div"),f(Xo.$$.fragment),Ap=c(),De=o("div"),f(Jo.$$.fragment),ov=c(),Ha=o("p"),Ra=o("a"),nv=a("FlaxLogitsProcessor"),sv=a(" enforcing a min-length by setting EOS probability to 0."),av=c(),Ka=o("div"),f(Qo.$$.fragment),Cp=c(),it=o("h2"),Nt=o("a"),Bl=o("span"),f(Zo.$$.fragment),iv=c(),Il=o("span"),cv=a("StoppingCriteria"),Wp=c(),Vt=o("p"),lv=a("A "),Ua=o("a"),dv=a("StoppingCriteria"),pv=a(" can be used to change when to stop generation (other than EOS token)."),Np=c(),Se=o("div"),f(en.$$.fragment),mv=c(),Al=o("p"),fv=a("Abstract base class for all stopping criteria that can be applied during generation."),gv=c(),Ya=o("div"),f(tn.$$.fragment),Vp=c(),ct=o("div"),f(rn.$$.fragment),uv=c(),Xa=o("div"),f(on.$$.fragment),Mp=c(),ze=o("div"),f(nn.$$.fragment),hv=c(),sn=o("p"),_v=a("This class can be used to stop generation whenever the full generated number of tokens exceeds "),Cl=o("code"),bv=a("max_length"),vv=a(`. Keep
in mind for decoder-only type of transformers, this will include the initial prompted tokens.`),$v=c(),Ja=o("div"),f(an.$$.fragment),Gp=c(),Oe=o("div"),f(cn.$$.fragment),Tv=c(),ln=o("p"),yv=a(`This class can be used to stop generation whenever the full generation exceeds some amount of time. By default, the
time will start being counted when you initialize this function. You can override this by passing an
`),Wl=o("code"),kv=a("initial_time"),xv=a("."),wv=c(),Qa=o("div"),f(dn.$$.fragment),jp=c(),lt=o("h2"),Mt=o("a"),Nl=o("span"),f(pn.$$.fragment),Lv=c(),Vl=o("span"),Ev=a("Constraints"),Hp=c(),Gt=o("p"),Pv=a("A "),Za=o("a"),Fv=a("Constraint"),Dv=a(" can be used to force the generation to include specific tokens or sequences in the output."),Rp=c(),$=o("div"),f(mn.$$.fragment),Sv=c(),Ml=o("p"),zv=a(`Abstract base class for all constraints that can be applied during generation.
It must define how the constraint can be satisfied.`),Ov=c(),Gl=o("p"),qv=a("All classes that inherit Constraint must follow the requirement that"),Bv=c(),f(jt.$$.fragment),Iv=c(),jl=o("p"),Av=a("will always terminate (halt)."),Cv=c(),Ht=o("div"),f(fn.$$.fragment),Wv=c(),Hl=o("p"),Nv=a("When called, returns the token that would take this constraint one step closer to being fulfilled."),Vv=c(),Rt=o("div"),f(gn.$$.fragment),Mv=c(),Rl=o("p"),Gv=a("Creates a new instance of this constraint."),jv=c(),Kt=o("div"),f(un.$$.fragment),Hv=c(),Kl=o("p"),Rv=a("Reads in a token and returns whether it creates progress."),Kv=c(),Ut=o("div"),f(hn.$$.fragment),Uv=c(),_n=o("p"),Yv=a("Returns the number of remaining steps of "),Ul=o("code"),Xv=a("advance()"),Jv=a(" in order to complete this constraint."),Qv=c(),Yt=o("div"),f(bn.$$.fragment),Zv=c(),Yl=o("p"),e1=a(`Resets the state of this constraint to its initialization. We would call this in cases where the fulfillment of
a constraint is abrupted by an unwanted token.`),t1=c(),Xt=o("div"),f(vn.$$.fragment),r1=c(),Xl=o("p"),o1=a("Tests whether this constraint has been properly defined."),n1=c(),Ve=o("div"),f($n.$$.fragment),s1=c(),Tn=o("p"),a1=a(`Reads in a token and returns booleans that indicate the progress made by it. This function will update the
state of this object unlikes `),Jl=o("code"),i1=a("does_advance(self, token_id: int)"),c1=a("."),l1=c(),Ql=o("p"),d1=a(`This isn\u2019t to test whether a certain token will advance the progress; it\u2019s to update its state as if it has
been generated. This becomes important if token_id != desired token (refer to else statement in
PhrasalConstraint)`),Kp=c(),dt=o("div"),f(yn.$$.fragment),p1=c(),ei=o("p"),ti=o("a"),m1=a("Constraint"),f1=a(" enforcing that an ordered sequence of tokens is included in the output."),Up=c(),pt=o("div"),f(kn.$$.fragment),g1=c(),xn=o("p"),u1=a("A special "),ri=o("a"),h1=a("Constraint"),_1=a(" that is fulfilled by fulfilling just one of several constraints."),Yp=c(),C=o("div"),f(wn.$$.fragment),b1=c(),Zl=o("p"),v1=a("A class for beam scorers to track its progress through a list of constraints."),$1=c(),F=o("div"),f(Ln.$$.fragment),T1=c(),ed=o("p"),y1=a(`The list of tokens to generate such that we can make progress.
By \u201Clist\u201D we don\u2019t mean the list of token that will fully fulfill a constraint.`),k1=c(),mt=o("p"),x1=a("Given constraints "),td=o("code"),w1=a("c_i = {t_ij | j == # of tokens}"),L1=a(`, If we\u2019re not in the middle of progressing through a
specific constraint `),rd=o("code"),E1=a("c_i"),P1=a(", we return:"),F1=c(),od=o("p"),nd=o("code"),D1=a("[t_k1 for k in indices of unfulfilled constraints]"),S1=c(),qe=o("p"),z1=a(`If we are in the middle of a constraint, then we return:
`),sd=o("code"),O1=a("[t_ij]"),q1=a(", where "),ad=o("code"),B1=a("i"),I1=a(" is the index of the inprogress constraint, "),id=o("code"),A1=a("j"),C1=a(" is the next step for the constraint."),W1=c(),cd=o("p"),N1=a(`Though we don\u2019t care which constraint is fulfilled first, if we are in the progress of fulfilling a constraint,
that\u2019s the only one we\u2019ll return.`),V1=c(),Jt=o("div"),f(En.$$.fragment),M1=c(),ld=o("p"),G1=a("token_ids: the tokens generated thus far to reset the state of the progress through constraints."),Xp=c(),ft=o("h2"),Qt=o("a"),dd=o("span"),f(Pn.$$.fragment),j1=c(),pd=o("span"),H1=a("BeamSearch"),Jp=c(),W=o("div"),f(Fn.$$.fragment),R1=c(),gt=o("p"),K1=a("Abstract base class for all beam scorers that are used for "),oi=o("a"),U1=a("beam_search()"),Y1=a(` and
`),ni=o("a"),X1=a("beam_sample()"),J1=a("."),Q1=c(),si=o("div"),f(Dn.$$.fragment),Z1=c(),ai=o("div"),f(Sn.$$.fragment),Qp=c(),P=o("div"),f(zn.$$.fragment),e2=c(),ii=o("p"),ci=o("a"),t2=a("BeamScorer"),r2=a(" implementing standard beam search decoding."),o2=c(),On=o("p"),n2=a("Adapted in part from "),qn=o("a"),s2=a(`Facebook\u2019s XLM beam search
code`),a2=a("."),i2=c(),li=o("p"),c2=a("Reference for the diverse beam search algorithm and implementation "),Bn=o("a"),l2=a(`Ashwin Kalyan\u2019s DBS
implementation`),d2=c(),di=o("div"),f(In.$$.fragment),p2=c(),pi=o("div"),f(An.$$.fragment),Zp=c(),N=o("div"),f(Cn.$$.fragment),m2=c(),mi=o("p"),fi=o("a"),f2=a("BeamScorer"),g2=a(" implementing constrained beam search decoding."),u2=c(),gi=o("div"),f(Wn.$$.fragment),h2=c(),ui=o("div"),f(Nn.$$.fragment),em=c(),ut=o("h2"),Zt=o("a"),md=o("span"),f(Vn.$$.fragment),_2=c(),fd=o("span"),b2=a("Utilities"),tm=c(),Be=o("div"),f(Mn.$$.fragment),v2=c(),gd=o("p"),$2=a("Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),T2=c(),hi=o("p"),y2=a("From: "),Gn=o("a"),k2=a("https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),rm=c(),Ie=o("div"),f(jn.$$.fragment),x2=c(),ud=o("p"),w2=a("Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),L2=c(),_i=o("p"),E2=a("From: "),Hn=o("a"),P2=a("https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),this.h()},l(e){const p=E0('[data-svelte="svelte-1phssyn"]',document.head);w=n(p,"META",{name:!0,content:!0}),p.forEach(r),Re=l(e),k=n(e,"H1",{class:!0});var Rn=s(k);Ce=n(Rn,"A",{id:!0,class:!0,href:!0});var s$=s(Ce);mc=n(s$,"SPAN",{});var a$=s(mc);g(ar.$$.fragment,a$),a$.forEach(r),s$.forEach(r),Xm=l(Rn),fc=n(Rn,"SPAN",{});var i$=s(fc);Jm=i(i$,"Utilities for Generation"),i$.forEach(r),Rn.forEach(r),xd=l(e),y=n(e,"P",{});var D=s(y);Qm=i(D,"This page lists all the utility functions used by "),Un=n(D,"A",{href:!0});var c$=s(Un);Zm=i(c$,"generate()"),c$.forEach(r),ef=i(D,`,
`),Yn=n(D,"A",{href:!0});var l$=s(Yn);tf=i(l$,"greedy_search()"),l$.forEach(r),rf=i(D,`,
`),Xn=n(D,"A",{href:!0});var d$=s(Xn);of=i(d$,"sample()"),d$.forEach(r),nf=i(D,`,
`),Jn=n(D,"A",{href:!0});var p$=s(Jn);sf=i(p$,"beam_search()"),p$.forEach(r),af=i(D,`,
`),Qn=n(D,"A",{href:!0});var m$=s(Qn);cf=i(m$,"beam_sample()"),m$.forEach(r),lf=i(D,`,
`),Zn=n(D,"A",{href:!0});var f$=s(Zn);df=i(f$,"group_beam_search()"),f$.forEach(r),pf=i(D,`, and
`),es=n(D,"A",{href:!0});var g$=s(es);mf=i(g$,"constrained_beam_search()"),g$.forEach(r),ff=i(D,"."),D.forEach(r),wd=l(e),ts=n(e,"P",{});var u$=s(ts);gf=i(u$,"Most of those are only useful if you are studying the code of the generate methods in the library."),u$.forEach(r),Ld=l(e),Ke=n(e,"H2",{class:!0});var nm=s(Ke);_t=n(nm,"A",{id:!0,class:!0,href:!0});var h$=s(_t);gc=n(h$,"SPAN",{});var _$=s(gc);g(ir.$$.fragment,_$),_$.forEach(r),h$.forEach(r),uf=l(nm),uc=n(nm,"SPAN",{});var b$=s(uc);hf=i(b$,"Generate Outputs"),b$.forEach(r),nm.forEach(r),Ed=l(e),V=n(e,"P",{});var er=s(V);_f=i(er,"The output of "),rs=n(er,"A",{href:!0});var v$=s(rs);bf=i(v$,"generate()"),v$.forEach(r),vf=i(er,` is an instance of a subclass of
`),os=n(er,"A",{href:!0});var $$=s(os);$f=i($$,"ModelOutput"),$$.forEach(r),Tf=i(er,`. This output is a data structure containing all the information returned
by `),ns=n(er,"A",{href:!0});var T$=s(ns);yf=i(T$,"generate()"),T$.forEach(r),kf=i(er,", but that can also be used as tuple or dictionary."),er.forEach(r),Pd=l(e),ss=n(e,"P",{});var y$=s(ss);xf=i(y$,"Here\u2019s an example:"),y$.forEach(r),Fd=l(e),g(cr.$$.fragment,e),Dd=l(e),We=n(e,"P",{});var bi=s(We);wf=i(bi,"The "),hc=n(bi,"CODE",{});var k$=s(hc);Lf=i(k$,"generation_output"),k$.forEach(r),Ef=i(bi," object is a "),as=n(bi,"A",{href:!0});var x$=s(as);Pf=i(x$,"GreedySearchDecoderOnlyOutput"),x$.forEach(r),Ff=i(bi,`, as we can
see in the documentation of that class below, it means it has the following attributes:`),bi.forEach(r),Sd=l(e),M=n(e,"UL",{});var tr=s(M);is=n(tr,"LI",{});var F2=s(is);_c=n(F2,"CODE",{});var w$=s(_c);Df=i(w$,"sequences"),w$.forEach(r),Sf=i(F2,": the generated sequences of tokens"),F2.forEach(r),zf=l(tr),cs=n(tr,"LI",{});var D2=s(cs);bc=n(D2,"CODE",{});var L$=s(bc);Of=i(L$,"scores"),L$.forEach(r),qf=i(D2," (optional): the prediction scores of the language modelling head, for each generation step"),D2.forEach(r),Bf=l(tr),ls=n(tr,"LI",{});var S2=s(ls);vc=n(S2,"CODE",{});var E$=s(vc);If=i(E$,"hidden_states"),E$.forEach(r),Af=i(S2," (optional): the hidden states of the model, for each generation step"),S2.forEach(r),Cf=l(tr),ds=n(tr,"LI",{});var z2=s(ds);$c=n(z2,"CODE",{});var P$=s($c);Wf=i(P$,"attentions"),P$.forEach(r),Nf=i(z2," (optional): the attention weights of the model, for each generation step"),z2.forEach(r),tr.forEach(r),zd=l(e),x=n(e,"P",{});var q=s(x);Vf=i(q,"Here we have the "),Tc=n(q,"CODE",{});var F$=s(Tc);Mf=i(F$,"scores"),F$.forEach(r),Gf=i(q," since we passed along "),yc=n(q,"CODE",{});var D$=s(yc);jf=i(D$,"output_scores=True"),D$.forEach(r),Hf=i(q,", but we don\u2019t have "),kc=n(q,"CODE",{});var S$=s(kc);Rf=i(S$,"hidden_states"),S$.forEach(r),Kf=i(q,` and
`),xc=n(q,"CODE",{});var z$=s(xc);Uf=i(z$,"attentions"),z$.forEach(r),Yf=i(q," because we didn\u2019t pass "),wc=n(q,"CODE",{});var O$=s(wc);Xf=i(O$,"output_hidden_states=True"),O$.forEach(r),Jf=i(q," or "),Lc=n(q,"CODE",{});var q$=s(Lc);Qf=i(q$,"output_attentions=True"),q$.forEach(r),Zf=i(q,"."),q.forEach(r),Od=l(e),S=n(e,"P",{});var Me=s(S);eg=i(Me,`You can access each attribute as you would usually do, and if that attribute has not been returned by the model, you
will get `),Ec=n(Me,"CODE",{});var B$=s(Ec);tg=i(B$,"None"),B$.forEach(r),rg=i(Me,". Here for instance "),Pc=n(Me,"CODE",{});var I$=s(Pc);og=i(I$,"generation_output.scores"),I$.forEach(r),ng=i(Me,` are all the generated prediction scores of the
language modeling head, and `),Fc=n(Me,"CODE",{});var A$=s(Fc);sg=i(A$,"generation_output.attentions"),A$.forEach(r),ag=i(Me," is "),Dc=n(Me,"CODE",{});var C$=s(Dc);ig=i(C$,"None"),C$.forEach(r),cg=i(Me,"."),Me.forEach(r),qd=l(e),z=n(e,"P",{});var Ge=s(z);lg=i(Ge,"When using our "),Sc=n(Ge,"CODE",{});var W$=s(Sc);dg=i(W$,"generation_output"),W$.forEach(r),pg=i(Ge," object as a tuple, it only keeps the attributes that don\u2019t have "),zc=n(Ge,"CODE",{});var N$=s(zc);mg=i(N$,"None"),N$.forEach(r),fg=i(Ge,` values.
Here, for instance, it has two elements, `),Oc=n(Ge,"CODE",{});var V$=s(Oc);gg=i(V$,"loss"),V$.forEach(r),ug=i(Ge," then "),qc=n(Ge,"CODE",{});var M$=s(qc);hg=i(M$,"logits"),M$.forEach(r),_g=i(Ge,", so"),Ge.forEach(r),Bd=l(e),g(lr.$$.fragment,e),Id=l(e),bt=n(e,"P",{});var sm=s(bt);bg=i(sm,"will return the tuple "),Bc=n(sm,"CODE",{});var G$=s(Bc);vg=i(G$,"(generation_output.sequences, generation_output.scores)"),G$.forEach(r),$g=i(sm," for instance."),sm.forEach(r),Ad=l(e),O=n(e,"P",{});var je=s(O);Tg=i(je,"When using our "),Ic=n(je,"CODE",{});var j$=s(Ic);yg=i(j$,"generation_output"),j$.forEach(r),kg=i(je," object as a dictionary, it only keeps the attributes that don\u2019t have "),Ac=n(je,"CODE",{});var H$=s(Ac);xg=i(H$,"None"),H$.forEach(r),wg=i(je,`
values. Here, for instance, it has two keys that are `),Cc=n(je,"CODE",{});var R$=s(Cc);Lg=i(R$,"sequences"),R$.forEach(r),Eg=i(je," and "),Wc=n(je,"CODE",{});var K$=s(Wc);Pg=i(K$,"scores"),K$.forEach(r),Fg=i(je,"."),je.forEach(r),Cd=l(e),ps=n(e,"P",{});var U$=s(ps);Dg=i(U$,"We document here all output types."),U$.forEach(r),Wd=l(e),Ue=n(e,"H3",{class:!0});var am=s(Ue);vt=n(am,"A",{id:!0,class:!0,href:!0});var Y$=s(vt);Nc=n(Y$,"SPAN",{});var X$=s(Nc);g(dr.$$.fragment,X$),X$.forEach(r),Y$.forEach(r),Sg=l(am),Vc=n(am,"SPAN",{});var J$=s(Vc);zg=i(J$,"GreedySearchOutput"),J$.forEach(r),am.forEach(r),Nd=l(e),Ye=n(e,"DIV",{class:!0});var im=s(Ye);g(pr.$$.fragment,im),Og=l(im),Mc=n(im,"P",{});var Q$=s(Mc);qg=i(Q$,"Base class for outputs of decoder-only generation models using greedy search."),Q$.forEach(r),im.forEach(r),Vd=l(e),Xe=n(e,"DIV",{class:!0});var cm=s(Xe);g(mr.$$.fragment,cm),Bg=l(cm),Gc=n(cm,"P",{});var Z$=s(Gc);Ig=i(Z$,`Base class for outputs of encoder-decoder generation models using greedy search. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Z$.forEach(r),cm.forEach(r),Md=l(e),R=n(e,"DIV",{class:!0});var vi=s(R);g(fr.$$.fragment,vi),Ag=l(vi),jc=n(vi,"P",{});var eT=s(jc);Cg=i(eT,"Flax Base class for outputs of decoder-only generation models using greedy search."),eT.forEach(r),Wg=l(vi),$t=n(vi,"DIV",{class:!0});var lm=s($t);g(gr.$$.fragment,lm),Ng=l(lm),Hc=n(lm,"P",{});var tT=s(Hc);Vg=i(tT,"\u201CReturns a new object replacing the specified fields with new values."),tT.forEach(r),lm.forEach(r),vi.forEach(r),Gd=l(e),Je=n(e,"H3",{class:!0});var dm=s(Je);Tt=n(dm,"A",{id:!0,class:!0,href:!0});var rT=s(Tt);Rc=n(rT,"SPAN",{});var oT=s(Rc);g(ur.$$.fragment,oT),oT.forEach(r),rT.forEach(r),Mg=l(dm),Kc=n(dm,"SPAN",{});var nT=s(Kc);Gg=i(nT,"SampleOutput"),nT.forEach(r),dm.forEach(r),jd=l(e),Qe=n(e,"DIV",{class:!0});var pm=s(Qe);g(hr.$$.fragment,pm),jg=l(pm),Uc=n(pm,"P",{});var sT=s(Uc);Hg=i(sT,"Base class for outputs of decoder-only generation models using sampling."),sT.forEach(r),pm.forEach(r),Hd=l(e),Ze=n(e,"DIV",{class:!0});var mm=s(Ze);g(_r.$$.fragment,mm),Rg=l(mm),Yc=n(mm,"P",{});var aT=s(Yc);Kg=i(aT,`Base class for outputs of encoder-decoder generation models using sampling. Hidden states and attention weights of
the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),aT.forEach(r),mm.forEach(r),Rd=l(e),K=n(e,"DIV",{class:!0});var $i=s(K);g(br.$$.fragment,$i),Ug=l($i),Xc=n($i,"P",{});var iT=s(Xc);Yg=i(iT,"Flax Base class for outputs of decoder-only generation models using sampling."),iT.forEach(r),Xg=l($i),yt=n($i,"DIV",{class:!0});var fm=s(yt);g(vr.$$.fragment,fm),Jg=l(fm),Jc=n(fm,"P",{});var cT=s(Jc);Qg=i(cT,"\u201CReturns a new object replacing the specified fields with new values."),cT.forEach(r),fm.forEach(r),$i.forEach(r),Kd=l(e),et=n(e,"H3",{class:!0});var gm=s(et);kt=n(gm,"A",{id:!0,class:!0,href:!0});var lT=s(kt);Qc=n(lT,"SPAN",{});var dT=s(Qc);g($r.$$.fragment,dT),dT.forEach(r),lT.forEach(r),Zg=l(gm),Zc=n(gm,"SPAN",{});var pT=s(Zc);eu=i(pT,"BeamSearchOutput"),pT.forEach(r),gm.forEach(r),Ud=l(e),tt=n(e,"DIV",{class:!0});var um=s(tt);g(Tr.$$.fragment,um),tu=l(um),el=n(um,"P",{});var mT=s(el);ru=i(mT,"Base class for outputs of decoder-only generation models using beam search."),mT.forEach(r),um.forEach(r),Yd=l(e),rt=n(e,"DIV",{class:!0});var hm=s(rt);g(yr.$$.fragment,hm),ou=l(hm),tl=n(hm,"P",{});var fT=s(tl);nu=i(fT,`Base class for outputs of encoder-decoder generation models using beam search. Hidden states and attention weights
of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),fT.forEach(r),hm.forEach(r),Xd=l(e),ot=n(e,"H3",{class:!0});var _m=s(ot);xt=n(_m,"A",{id:!0,class:!0,href:!0});var gT=s(xt);rl=n(gT,"SPAN",{});var uT=s(rl);g(kr.$$.fragment,uT),uT.forEach(r),gT.forEach(r),su=l(_m),ol=n(_m,"SPAN",{});var hT=s(ol);au=i(hT,"BeamSampleOutput"),hT.forEach(r),_m.forEach(r),Jd=l(e),nt=n(e,"DIV",{class:!0});var bm=s(nt);g(xr.$$.fragment,bm),iu=l(bm),nl=n(bm,"P",{});var _T=s(nl);cu=i(_T,"Base class for outputs of decoder-only generation models using beam sample."),_T.forEach(r),bm.forEach(r),Qd=l(e),st=n(e,"DIV",{class:!0});var vm=s(st);g(wr.$$.fragment,vm),lu=l(vm),sl=n(vm,"P",{});var bT=s(sl);du=i(bT,`Base class for outputs of encoder-decoder generation models using beam sampling. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),bT.forEach(r),vm.forEach(r),Zd=l(e),at=n(e,"H2",{class:!0});var $m=s(at);wt=n($m,"A",{id:!0,class:!0,href:!0});var vT=s(wt);al=n(vT,"SPAN",{});var $T=s(al);g(Lr.$$.fragment,$T),$T.forEach(r),vT.forEach(r),pu=l($m),il=n($m,"SPAN",{});var TT=s(il);mu=i(TT,"LogitsProcessor"),TT.forEach(r),$m.forEach(r),ep=l(e),Lt=n(e,"P",{});var Tm=s(Lt);fu=i(Tm,"A "),ms=n(Tm,"A",{href:!0});var yT=s(ms);gu=i(yT,"LogitsProcessor"),yT.forEach(r),uu=i(Tm,` can be used to modify the prediction scores of a language model head for
generation.`),Tm.forEach(r),tp=l(e),U=n(e,"DIV",{class:!0});var Ti=s(U);g(Er.$$.fragment,Ti),hu=l(Ti),cl=n(Ti,"P",{});var kT=s(cl);_u=i(kT,"Abstract base class for all logit processors that can be applied during generation."),kT.forEach(r),bu=l(Ti),Et=n(Ti,"DIV",{class:!0});var ym=s(Et);g(Pr.$$.fragment,ym),vu=l(ym),ll=n(ym,"P",{});var xT=s(ll);$u=i(xT,"Torch method for processing logits."),xT.forEach(r),ym.forEach(r),Ti.forEach(r),rp=l(e),Y=n(e,"DIV",{class:!0});var yi=s(Y);g(Fr.$$.fragment,yi),Tu=l(yi),L=n(yi,"P",{});var B=s(L);yu=i(B,"This class can be used to create a list of "),fs=n(B,"A",{href:!0});var wT=s(fs);ku=i(wT,"LogitsProcessor"),wT.forEach(r),xu=i(B," or "),gs=n(B,"A",{href:!0});var LT=s(gs);wu=i(LT,"LogitsWarper"),LT.forEach(r),Lu=i(B,` to subsequently process a
`),dl=n(B,"CODE",{});var ET=s(dl);Eu=i(ET,"scores"),ET.forEach(r),Pu=i(B," input tensor. This class inherits from list and adds a specific "),pl=n(B,"EM",{});var PT=s(pl);ml=n(PT,"STRONG",{});var FT=s(ml);Fu=i(FT,"call"),FT.forEach(r),PT.forEach(r),Du=i(B,` method to apply each
`),us=n(B,"A",{href:!0});var DT=s(us);Su=i(DT,"LogitsProcessor"),DT.forEach(r),zu=i(B," or "),hs=n(B,"A",{href:!0});var ST=s(hs);Ou=i(ST,"LogitsWarper"),ST.forEach(r),qu=i(B," to the inputs."),B.forEach(r),Bu=l(yi),_s=n(yi,"DIV",{class:!0});var zT=s(_s);g(Dr.$$.fragment,zT),zT.forEach(r),yi.forEach(r),op=l(e),X=n(e,"DIV",{class:!0});var ki=s(X);g(Sr.$$.fragment,ki),Iu=l(ki),fl=n(ki,"P",{});var OT=s(fl);Au=i(OT,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),OT.forEach(r),Cu=l(ki),Pt=n(ki,"DIV",{class:!0});var km=s(Pt);g(zr.$$.fragment,km),Wu=l(km),gl=n(km,"P",{});var qT=s(gl);Nu=i(qT,"Torch method for warping logits."),qT.forEach(r),km.forEach(r),ki.forEach(r),np=l(e),J=n(e,"DIV",{class:!0});var xi=s(J);g(Or.$$.fragment,xi),Vu=l(xi),bs=n(xi,"P",{});var O2=s(bs);vs=n(O2,"A",{href:!0});var BT=s(vs);Mu=i(BT,"LogitsProcessor"),BT.forEach(r),Gu=i(O2," enforcing a min-length by setting EOS probability to 0."),O2.forEach(r),ju=l(xi),$s=n(xi,"DIV",{class:!0});var IT=s($s);g(qr.$$.fragment,IT),IT.forEach(r),xi.forEach(r),sp=l(e),Q=n(e,"DIV",{class:!0});var wi=s(Q);g(Br.$$.fragment,wi),Hu=l(wi),Ts=n(wi,"P",{});var q2=s(Ts);ys=n(q2,"A",{href:!0});var AT=s(ys);Ru=i(AT,"LogitsWarper"),AT.forEach(r),Ku=i(q2," for temperature (exponential scaling output probability distribution)."),q2.forEach(r),Uu=l(wi),ks=n(wi,"DIV",{class:!0});var CT=s(ks);g(Ir.$$.fragment,CT),CT.forEach(r),wi.forEach(r),ap=l(e),Z=n(e,"DIV",{class:!0});var Li=s(Z);g(Ar.$$.fragment,Li),Yu=l(Li),xs=n(Li,"P",{});var B2=s(xs);ws=n(B2,"A",{href:!0});var WT=s(ws);Xu=i(WT,"LogitsProcessor"),WT.forEach(r),Ju=i(B2," enforcing an exponential penalty on repeated sequences."),B2.forEach(r),Qu=l(Li),Ls=n(Li,"DIV",{class:!0});var NT=s(Ls);g(Cr.$$.fragment,NT),NT.forEach(r),Li.forEach(r),ip=l(e),ee=n(e,"DIV",{class:!0});var Ei=s(ee);g(Wr.$$.fragment,Ei),Zu=l(Ei),Es=n(Ei,"P",{});var I2=s(Es);Ps=n(I2,"A",{href:!0});var VT=s(Ps);eh=i(VT,"LogitsWarper"),VT.forEach(r),th=i(I2," that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),I2.forEach(r),rh=l(Ei),Fs=n(Ei,"DIV",{class:!0});var MT=s(Fs);g(Nr.$$.fragment,MT),MT.forEach(r),Ei.forEach(r),cp=l(e),te=n(e,"DIV",{class:!0});var Pi=s(te);g(Vr.$$.fragment,Pi),oh=l(Pi),Ds=n(Pi,"P",{});var A2=s(Ds);Ss=n(A2,"A",{href:!0});var GT=s(Ss);nh=i(GT,"LogitsWarper"),GT.forEach(r),sh=i(A2," that performs top-k, i.e. restricting to the k highest probability elements."),A2.forEach(r),ah=l(Pi),zs=n(Pi,"DIV",{class:!0});var jT=s(zs);g(Mr.$$.fragment,jT),jT.forEach(r),Pi.forEach(r),lp=l(e),re=n(e,"DIV",{class:!0});var Fi=s(re);g(Gr.$$.fragment,Fi),ih=l(Fi),Ft=n(Fi,"P",{});var hd=s(Ft);Os=n(hd,"A",{href:!0});var HT=s(Os);ch=i(HT,"LogitsWarper"),HT.forEach(r),lh=i(hd," that performs typical decoding. See "),jr=n(hd,"A",{href:!0,rel:!0});var RT=s(jr);dh=i(RT,`Typical Decoding for Natural Language
Generation`),RT.forEach(r),ph=i(hd," for more information."),hd.forEach(r),mh=l(Fi),qs=n(Fi,"DIV",{class:!0});var KT=s(qs);g(Hr.$$.fragment,KT),KT.forEach(r),Fi.forEach(r),dp=l(e),oe=n(e,"DIV",{class:!0});var Di=s(oe);g(Rr.$$.fragment,Di),fh=l(Di),Dt=n(Di,"P",{});var _d=s(Dt);Bs=n(_d,"A",{href:!0});var UT=s(Bs);gh=i(UT,"LogitsProcessor"),UT.forEach(r),uh=i(_d,` that enforces no repetition of n-grams. See
`),Kr=n(_d,"A",{href:!0,rel:!0});var YT=s(Kr);hh=i(YT,"Fairseq"),YT.forEach(r),_h=i(_d,"."),_d.forEach(r),bh=l(Di),Is=n(Di,"DIV",{class:!0});var XT=s(Is);g(Ur.$$.fragment,XT),XT.forEach(r),Di.forEach(r),pp=l(e),ne=n(e,"DIV",{class:!0});var Si=s(ne);g(Yr.$$.fragment,Si),vh=l(Si),As=n(Si,"P",{});var C2=s(As);Cs=n(C2,"A",{href:!0});var JT=s(Cs);$h=i(JT,"LogitsProcessor"),JT.forEach(r),Th=i(C2," that enforces that specified sequences will never be sampled."),C2.forEach(r),yh=l(Si),Ws=n(Si,"DIV",{class:!0});var QT=s(Ws);g(Xr.$$.fragment,QT),QT.forEach(r),Si.forEach(r),mp=l(e),se=n(e,"DIV",{class:!0});var zi=s(se);g(Jr.$$.fragment,zi),kh=l(zi),St=n(zi,"P",{});var bd=s(St);Ns=n(bd,"A",{href:!0});var ZT=s(Ns);xh=i(ZT,"LogitsProcessor"),ZT.forEach(r),wh=i(bd,` that enforces constrained generation and is useful for prefix-conditioned constrained
generation. See `),Qr=n(bd,"A",{href:!0,rel:!0});var e4=s(Qr);Lh=i(e4,"Autoregressive Entity Retrieval"),e4.forEach(r),Eh=i(bd," for more information."),bd.forEach(r),Ph=l(zi),Vs=n(zi,"DIV",{class:!0});var t4=s(Vs);g(Zr.$$.fragment,t4),t4.forEach(r),zi.forEach(r),fp=l(e),ae=n(e,"DIV",{class:!0});var Oi=s(ae);g(eo.$$.fragment,Oi),Fh=l(Oi),Ne=n(Oi,"P",{});var Kn=s(Ne);Ms=n(Kn,"A",{href:!0});var r4=s(Ms);Dh=i(r4,"LogitsProcessor"),r4.forEach(r),Sh=i(Kn,` that enforces diverse beam search. Note that this logits processor is only effective for
`),Gs=n(Kn,"A",{href:!0});var o4=s(Gs);zh=i(o4,"PreTrainedModel.group_beam_search()"),o4.forEach(r),Oh=i(Kn,". See "),to=n(Kn,"A",{href:!0,rel:!0});var n4=s(to);qh=i(n4,`Diverse Beam Search: Decoding Diverse Solutions from Neural Sequence
Models`),n4.forEach(r),Bh=i(Kn," for more details."),Kn.forEach(r),Ih=l(Oi),js=n(Oi,"DIV",{class:!0});var s4=s(js);g(ro.$$.fragment,s4),s4.forEach(r),Oi.forEach(r),gp=l(e),ie=n(e,"DIV",{class:!0});var qi=s(ie);g(oo.$$.fragment,qi),Ah=l(qi),Hs=n(qi,"P",{});var W2=s(Hs);Rs=n(W2,"A",{href:!0});var a4=s(Rs);Ch=i(a4,"LogitsProcessor"),a4.forEach(r),Wh=i(W2," that enforces the specified token as the first generated token."),W2.forEach(r),Nh=l(qi),Ks=n(qi,"DIV",{class:!0});var i4=s(Ks);g(no.$$.fragment,i4),i4.forEach(r),qi.forEach(r),up=l(e),ce=n(e,"DIV",{class:!0});var Bi=s(ce);g(so.$$.fragment,Bi),Vh=l(Bi),zt=n(Bi,"P",{});var vd=s(zt);Us=n(vd,"A",{href:!0});var c4=s(Us);Mh=i(c4,"LogitsProcessor"),c4.forEach(r),Gh=i(vd," that enforces the specified token as the last generated token when "),ul=n(vd,"CODE",{});var l4=s(ul);jh=i(l4,"max_length"),l4.forEach(r),Hh=i(vd," is reached."),vd.forEach(r),Rh=l(Bi),Ys=n(Bi,"DIV",{class:!0});var d4=s(Ys);g(ao.$$.fragment,d4),d4.forEach(r),Bi.forEach(r),hp=l(e),le=n(e,"DIV",{class:!0});var Ii=s(le);g(io.$$.fragment,Ii),Kh=l(Ii),G=n(Ii,"P",{});var ht=s(G);Xs=n(ht,"A",{href:!0});var p4=s(Xs);Uh=i(p4,"LogitsProcessor"),p4.forEach(r),Yh=i(ht," that removes all "),hl=n(ht,"CODE",{});var m4=s(hl);Xh=i(m4,"nan"),m4.forEach(r),Jh=i(ht," and "),_l=n(ht,"CODE",{});var f4=s(_l);Qh=i(f4,"inf"),f4.forEach(r),Zh=i(ht,` values to avoid the generation method to fail. Note that using
the logits processor should only be used if necessary since it can slow down the generation method. `),bl=n(ht,"CODE",{});var g4=s(bl);e_=i(g4,"max_length"),g4.forEach(r),t_=i(ht,` is
reached.`),ht.forEach(r),r_=l(Ii),Js=n(Ii,"DIV",{class:!0});var u4=s(Js);g(co.$$.fragment,u4),u4.forEach(r),Ii.forEach(r),_p=l(e),de=n(e,"DIV",{class:!0});var Ai=s(de);g(lo.$$.fragment,Ai),o_=l(Ai),vl=n(Ai,"P",{});var h4=s(vl);n_=i(h4,"Abstract base class for all logit processors that can be applied during generation."),h4.forEach(r),s_=l(Ai),Ot=n(Ai,"DIV",{class:!0});var xm=s(Ot);g(po.$$.fragment,xm),a_=l(xm),$l=n(xm,"P",{});var _4=s($l);i_=i(_4,"TF method for processing logits."),_4.forEach(r),xm.forEach(r),Ai.forEach(r),bp=l(e),pe=n(e,"DIV",{class:!0});var Ci=s(pe);g(mo.$$.fragment,Ci),c_=l(Ci),A=n(Ci,"P",{});var He=s(A);l_=i(He,"This class can be used to create a list of "),Qs=n(He,"A",{href:!0});var b4=s(Qs);d_=i(b4,"TFLogitsProcessor"),b4.forEach(r),p_=i(He," to subsequently process a "),Tl=n(He,"CODE",{});var v4=s(Tl);m_=i(v4,"scores"),v4.forEach(r),f_=i(He,` input tensor.
This class inherits from list and adds a specific `),yl=n(He,"EM",{});var $4=s(yl);kl=n($4,"STRONG",{});var T4=s(kl);g_=i(T4,"call"),T4.forEach(r),$4.forEach(r),u_=i(He," method to apply each "),Zs=n(He,"A",{href:!0});var y4=s(Zs);h_=i(y4,"TFLogitsProcessor"),y4.forEach(r),__=i(He,` to the
inputs.`),He.forEach(r),b_=l(Ci),ea=n(Ci,"DIV",{class:!0});var k4=s(ea);g(fo.$$.fragment,k4),k4.forEach(r),Ci.forEach(r),vp=l(e),me=n(e,"DIV",{class:!0});var Wi=s(me);g(go.$$.fragment,Wi),v_=l(Wi),xl=n(Wi,"P",{});var x4=s(xl);$_=i(x4,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),x4.forEach(r),T_=l(Wi),qt=n(Wi,"DIV",{class:!0});var wm=s(qt);g(uo.$$.fragment,wm),y_=l(wm),wl=n(wm,"P",{});var w4=s(wl);k_=i(w4,"TF method for warping logits."),w4.forEach(r),wm.forEach(r),Wi.forEach(r),$p=l(e),fe=n(e,"DIV",{class:!0});var Ni=s(fe);g(ho.$$.fragment,Ni),x_=l(Ni),ta=n(Ni,"P",{});var N2=s(ta);ra=n(N2,"A",{href:!0});var L4=s(ra);w_=i(L4,"TFLogitsWarper"),L4.forEach(r),L_=i(N2," for temperature (exponential scaling output probability distribution)."),N2.forEach(r),E_=l(Ni),oa=n(Ni,"DIV",{class:!0});var E4=s(oa);g(_o.$$.fragment,E4),E4.forEach(r),Ni.forEach(r),Tp=l(e),ge=n(e,"DIV",{class:!0});var Vi=s(ge);g(bo.$$.fragment,Vi),P_=l(Vi),na=n(Vi,"P",{});var V2=s(na);sa=n(V2,"A",{href:!0});var P4=s(sa);F_=i(P4,"TFLogitsWarper"),P4.forEach(r),D_=i(V2," that performs top-p, i.e. restricting to top tokens summing to <= prob_cut_off."),V2.forEach(r),S_=l(Vi),aa=n(Vi,"DIV",{class:!0});var F4=s(aa);g(vo.$$.fragment,F4),F4.forEach(r),Vi.forEach(r),yp=l(e),ue=n(e,"DIV",{class:!0});var Mi=s(ue);g($o.$$.fragment,Mi),z_=l(Mi),ia=n(Mi,"P",{});var M2=s(ia);ca=n(M2,"A",{href:!0});var D4=s(ca);O_=i(D4,"TFLogitsWarper"),D4.forEach(r),q_=i(M2," that performs top-k, i.e. restricting to the k highest probability elements."),M2.forEach(r),B_=l(Mi),la=n(Mi,"DIV",{class:!0});var S4=s(la);g(To.$$.fragment,S4),S4.forEach(r),Mi.forEach(r),kp=l(e),he=n(e,"DIV",{class:!0});var Gi=s(he);g(yo.$$.fragment,Gi),I_=l(Gi),da=n(Gi,"P",{});var G2=s(da);pa=n(G2,"A",{href:!0});var z4=s(pa);A_=i(z4,"TFLogitsProcessor"),z4.forEach(r),C_=i(G2," enforcing a min-length by setting EOS probability to 0."),G2.forEach(r),W_=l(Gi),ma=n(Gi,"DIV",{class:!0});var O4=s(ma);g(ko.$$.fragment,O4),O4.forEach(r),Gi.forEach(r),xp=l(e),_e=n(e,"DIV",{class:!0});var ji=s(_e);g(xo.$$.fragment,ji),N_=l(ji),fa=n(ji,"P",{});var j2=s(fa);ga=n(j2,"A",{href:!0});var q4=s(ga);V_=i(q4,"TFLogitsProcessor"),q4.forEach(r),M_=i(j2," that enforces that specified sequences will never be sampled."),j2.forEach(r),G_=l(ji),ua=n(ji,"DIV",{class:!0});var B4=s(ua);g(wo.$$.fragment,B4),B4.forEach(r),ji.forEach(r),wp=l(e),be=n(e,"DIV",{class:!0});var Hi=s(be);g(Lo.$$.fragment,Hi),j_=l(Hi),Bt=n(Hi,"P",{});var $d=s(Bt);ha=n($d,"A",{href:!0});var I4=s(ha);H_=i(I4,"TFLogitsProcessor"),I4.forEach(r),R_=i($d,` that enforces no repetition of n-grams. See
`),Eo=n($d,"A",{href:!0,rel:!0});var A4=s(Eo);K_=i(A4,"Fairseq"),A4.forEach(r),U_=i($d,"."),$d.forEach(r),Y_=l(Hi),_a=n(Hi,"DIV",{class:!0});var C4=s(_a);g(Po.$$.fragment,C4),C4.forEach(r),Hi.forEach(r),Lp=l(e),ve=n(e,"DIV",{class:!0});var Ri=s(ve);g(Fo.$$.fragment,Ri),X_=l(Ri),ba=n(Ri,"P",{});var H2=s(ba);va=n(H2,"A",{href:!0});var W4=s(va);J_=i(W4,"TFLogitsProcessor"),W4.forEach(r),Q_=i(H2," enforcing an exponential penalty on repeated sequences."),H2.forEach(r),Z_=l(Ri),$a=n(Ri,"DIV",{class:!0});var N4=s($a);g(Do.$$.fragment,N4),N4.forEach(r),Ri.forEach(r),Ep=l(e),$e=n(e,"DIV",{class:!0});var Ki=s($e);g(So.$$.fragment,Ki),eb=l(Ki),Ta=n(Ki,"P",{});var R2=s(Ta);ya=n(R2,"A",{href:!0});var V4=s(ya);tb=i(V4,"TFLogitsProcessor"),V4.forEach(r),rb=i(R2," that enforces the specified token as the first generated token."),R2.forEach(r),ob=l(Ki),ka=n(Ki,"DIV",{class:!0});var M4=s(ka);g(zo.$$.fragment,M4),M4.forEach(r),Ki.forEach(r),Pp=l(e),Te=n(e,"DIV",{class:!0});var Ui=s(Te);g(Oo.$$.fragment,Ui),nb=l(Ui),It=n(Ui,"P",{});var Td=s(It);xa=n(Td,"A",{href:!0});var G4=s(xa);sb=i(G4,"TFLogitsProcessor"),G4.forEach(r),ab=i(Td," that enforces the specified token as the last generated token when "),Ll=n(Td,"CODE",{});var j4=s(Ll);ib=i(j4,"max_length"),j4.forEach(r),cb=i(Td," is reached."),Td.forEach(r),lb=l(Ui),wa=n(Ui,"DIV",{class:!0});var H4=s(wa);g(qo.$$.fragment,H4),H4.forEach(r),Ui.forEach(r),Fp=l(e),ye=n(e,"DIV",{class:!0});var Yi=s(ye);g(Bo.$$.fragment,Yi),db=l(Yi),El=n(Yi,"P",{});var R4=s(El);pb=i(R4,"Abstract base class for all logit processors that can be applied during generation."),R4.forEach(r),mb=l(Yi),At=n(Yi,"DIV",{class:!0});var Lm=s(At);g(Io.$$.fragment,Lm),fb=l(Lm),Pl=n(Lm,"P",{});var K4=s(Pl);gb=i(K4,"Flax method for processing logits."),K4.forEach(r),Lm.forEach(r),Yi.forEach(r),Dp=l(e),ke=n(e,"DIV",{class:!0});var Xi=s(ke);g(Ao.$$.fragment,Xi),ub=l(Xi),E=n(Xi,"P",{});var I=s(E);hb=i(I,"This class can be used to create a list of "),La=n(I,"A",{href:!0});var U4=s(La);_b=i(U4,"FlaxLogitsProcessor"),U4.forEach(r),bb=i(I," or "),Ea=n(I,"A",{href:!0});var Y4=s(Ea);vb=i(Y4,"FlaxLogitsWarper"),Y4.forEach(r),$b=i(I,` to subsequently process
a `),Fl=n(I,"CODE",{});var X4=s(Fl);Tb=i(X4,"scores"),X4.forEach(r),yb=i(I," input tensor. This class inherits from list and adds a specific "),Dl=n(I,"EM",{});var J4=s(Dl);Sl=n(J4,"STRONG",{});var Q4=s(Sl);kb=i(Q4,"call"),Q4.forEach(r),J4.forEach(r),xb=i(I,` method to apply each
`),Pa=n(I,"A",{href:!0});var Z4=s(Pa);wb=i(Z4,"FlaxLogitsProcessor"),Z4.forEach(r),Lb=i(I," or "),Fa=n(I,"A",{href:!0});var ey=s(Fa);Eb=i(ey,"FlaxLogitsWarper"),ey.forEach(r),Pb=i(I," to the inputs."),I.forEach(r),Fb=l(Xi),Da=n(Xi,"DIV",{class:!0});var ty=s(Da);g(Co.$$.fragment,ty),ty.forEach(r),Xi.forEach(r),Sp=l(e),xe=n(e,"DIV",{class:!0});var Ji=s(xe);g(Wo.$$.fragment,Ji),Db=l(Ji),zl=n(Ji,"P",{});var ry=s(zl);Sb=i(ry,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),ry.forEach(r),zb=l(Ji),Ct=n(Ji,"DIV",{class:!0});var Em=s(Ct);g(No.$$.fragment,Em),Ob=l(Em),Ol=n(Em,"P",{});var oy=s(Ol);qb=i(oy,"Flax method for warping logits."),oy.forEach(r),Em.forEach(r),Ji.forEach(r),zp=l(e),we=n(e,"DIV",{class:!0});var Qi=s(we);g(Vo.$$.fragment,Qi),Bb=l(Qi),Sa=n(Qi,"P",{});var K2=s(Sa);za=n(K2,"A",{href:!0});var ny=s(za);Ib=i(ny,"FlaxLogitsWarper"),ny.forEach(r),Ab=i(K2," for temperature (exponential scaling output probability distribution)."),K2.forEach(r),Cb=l(Qi),Oa=n(Qi,"DIV",{class:!0});var sy=s(Oa);g(Mo.$$.fragment,sy),sy.forEach(r),Qi.forEach(r),Op=l(e),Le=n(e,"DIV",{class:!0});var Zi=s(Le);g(Go.$$.fragment,Zi),Wb=l(Zi),qa=n(Zi,"P",{});var U2=s(qa);Ba=n(U2,"A",{href:!0});var ay=s(Ba);Nb=i(ay,"FlaxLogitsWarper"),ay.forEach(r),Vb=i(U2," that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),U2.forEach(r),Mb=l(Zi),Ia=n(Zi,"DIV",{class:!0});var iy=s(Ia);g(jo.$$.fragment,iy),iy.forEach(r),Zi.forEach(r),qp=l(e),Ee=n(e,"DIV",{class:!0});var ec=s(Ee);g(Ho.$$.fragment,ec),Gb=l(ec),Aa=n(ec,"P",{});var Y2=s(Aa);Ca=n(Y2,"A",{href:!0});var cy=s(Ca);jb=i(cy,"FlaxLogitsWarper"),cy.forEach(r),Hb=i(Y2," that performs top-k, i.e. restricting to the k highest probability elements."),Y2.forEach(r),Rb=l(ec),Wa=n(ec,"DIV",{class:!0});var ly=s(Wa);g(Ro.$$.fragment,ly),ly.forEach(r),ec.forEach(r),Bp=l(e),Pe=n(e,"DIV",{class:!0});var tc=s(Pe);g(Ko.$$.fragment,tc),Kb=l(tc),Na=n(tc,"P",{});var X2=s(Na);Va=n(X2,"A",{href:!0});var dy=s(Va);Ub=i(dy,"FlaxLogitsProcessor"),dy.forEach(r),Yb=i(X2," that enforces the specified token as the first generated token."),X2.forEach(r),Xb=l(tc),Ma=n(tc,"DIV",{class:!0});var py=s(Ma);g(Uo.$$.fragment,py),py.forEach(r),tc.forEach(r),Ip=l(e),Fe=n(e,"DIV",{class:!0});var rc=s(Fe);g(Yo.$$.fragment,rc),Jb=l(rc),Wt=n(rc,"P",{});var yd=s(Wt);Ga=n(yd,"A",{href:!0});var my=s(Ga);Qb=i(my,"FlaxLogitsProcessor"),my.forEach(r),Zb=i(yd," that enforces the specified token as the last generated token when "),ql=n(yd,"CODE",{});var fy=s(ql);ev=i(fy,"max_length"),fy.forEach(r),tv=i(yd," is reached."),yd.forEach(r),rv=l(rc),ja=n(rc,"DIV",{class:!0});var gy=s(ja);g(Xo.$$.fragment,gy),gy.forEach(r),rc.forEach(r),Ap=l(e),De=n(e,"DIV",{class:!0});var oc=s(De);g(Jo.$$.fragment,oc),ov=l(oc),Ha=n(oc,"P",{});var J2=s(Ha);Ra=n(J2,"A",{href:!0});var uy=s(Ra);nv=i(uy,"FlaxLogitsProcessor"),uy.forEach(r),sv=i(J2," enforcing a min-length by setting EOS probability to 0."),J2.forEach(r),av=l(oc),Ka=n(oc,"DIV",{class:!0});var hy=s(Ka);g(Qo.$$.fragment,hy),hy.forEach(r),oc.forEach(r),Cp=l(e),it=n(e,"H2",{class:!0});var Pm=s(it);Nt=n(Pm,"A",{id:!0,class:!0,href:!0});var _y=s(Nt);Bl=n(_y,"SPAN",{});var by=s(Bl);g(Zo.$$.fragment,by),by.forEach(r),_y.forEach(r),iv=l(Pm),Il=n(Pm,"SPAN",{});var vy=s(Il);cv=i(vy,"StoppingCriteria"),vy.forEach(r),Pm.forEach(r),Wp=l(e),Vt=n(e,"P",{});var Fm=s(Vt);lv=i(Fm,"A "),Ua=n(Fm,"A",{href:!0});var $y=s(Ua);dv=i($y,"StoppingCriteria"),$y.forEach(r),pv=i(Fm," can be used to change when to stop generation (other than EOS token)."),Fm.forEach(r),Np=l(e),Se=n(e,"DIV",{class:!0});var nc=s(Se);g(en.$$.fragment,nc),mv=l(nc),Al=n(nc,"P",{});var Ty=s(Al);fv=i(Ty,"Abstract base class for all stopping criteria that can be applied during generation."),Ty.forEach(r),gv=l(nc),Ya=n(nc,"DIV",{class:!0});var yy=s(Ya);g(tn.$$.fragment,yy),yy.forEach(r),nc.forEach(r),Vp=l(e),ct=n(e,"DIV",{class:!0});var Dm=s(ct);g(rn.$$.fragment,Dm),uv=l(Dm),Xa=n(Dm,"DIV",{class:!0});var ky=s(Xa);g(on.$$.fragment,ky),ky.forEach(r),Dm.forEach(r),Mp=l(e),ze=n(e,"DIV",{class:!0});var sc=s(ze);g(nn.$$.fragment,sc),hv=l(sc),sn=n(sc,"P",{});var Sm=s(sn);_v=i(Sm,"This class can be used to stop generation whenever the full generated number of tokens exceeds "),Cl=n(Sm,"CODE",{});var xy=s(Cl);bv=i(xy,"max_length"),xy.forEach(r),vv=i(Sm,`. Keep
in mind for decoder-only type of transformers, this will include the initial prompted tokens.`),Sm.forEach(r),$v=l(sc),Ja=n(sc,"DIV",{class:!0});var wy=s(Ja);g(an.$$.fragment,wy),wy.forEach(r),sc.forEach(r),Gp=l(e),Oe=n(e,"DIV",{class:!0});var ac=s(Oe);g(cn.$$.fragment,ac),Tv=l(ac),ln=n(ac,"P",{});var zm=s(ln);yv=i(zm,`This class can be used to stop generation whenever the full generation exceeds some amount of time. By default, the
time will start being counted when you initialize this function. You can override this by passing an
`),Wl=n(zm,"CODE",{});var Ly=s(Wl);kv=i(Ly,"initial_time"),Ly.forEach(r),xv=i(zm,"."),zm.forEach(r),wv=l(ac),Qa=n(ac,"DIV",{class:!0});var Ey=s(Qa);g(dn.$$.fragment,Ey),Ey.forEach(r),ac.forEach(r),jp=l(e),lt=n(e,"H2",{class:!0});var Om=s(lt);Mt=n(Om,"A",{id:!0,class:!0,href:!0});var Py=s(Mt);Nl=n(Py,"SPAN",{});var Fy=s(Nl);g(pn.$$.fragment,Fy),Fy.forEach(r),Py.forEach(r),Lv=l(Om),Vl=n(Om,"SPAN",{});var Dy=s(Vl);Ev=i(Dy,"Constraints"),Dy.forEach(r),Om.forEach(r),Hp=l(e),Gt=n(e,"P",{});var qm=s(Gt);Pv=i(qm,"A "),Za=n(qm,"A",{href:!0});var Sy=s(Za);Fv=i(Sy,"Constraint"),Sy.forEach(r),Dv=i(qm," can be used to force the generation to include specific tokens or sequences in the output."),qm.forEach(r),Rp=l(e),$=n(e,"DIV",{class:!0});var T=s($);g(mn.$$.fragment,T),Sv=l(T),Ml=n(T,"P",{});var zy=s(Ml);zv=i(zy,`Abstract base class for all constraints that can be applied during generation.
It must define how the constraint can be satisfied.`),zy.forEach(r),Ov=l(T),Gl=n(T,"P",{});var Oy=s(Gl);qv=i(Oy,"All classes that inherit Constraint must follow the requirement that"),Oy.forEach(r),Bv=l(T),g(jt.$$.fragment,T),Iv=l(T),jl=n(T,"P",{});var qy=s(jl);Av=i(qy,"will always terminate (halt)."),qy.forEach(r),Cv=l(T),Ht=n(T,"DIV",{class:!0});var Bm=s(Ht);g(fn.$$.fragment,Bm),Wv=l(Bm),Hl=n(Bm,"P",{});var By=s(Hl);Nv=i(By,"When called, returns the token that would take this constraint one step closer to being fulfilled."),By.forEach(r),Bm.forEach(r),Vv=l(T),Rt=n(T,"DIV",{class:!0});var Im=s(Rt);g(gn.$$.fragment,Im),Mv=l(Im),Rl=n(Im,"P",{});var Iy=s(Rl);Gv=i(Iy,"Creates a new instance of this constraint."),Iy.forEach(r),Im.forEach(r),jv=l(T),Kt=n(T,"DIV",{class:!0});var Am=s(Kt);g(un.$$.fragment,Am),Hv=l(Am),Kl=n(Am,"P",{});var Ay=s(Kl);Rv=i(Ay,"Reads in a token and returns whether it creates progress."),Ay.forEach(r),Am.forEach(r),Kv=l(T),Ut=n(T,"DIV",{class:!0});var Cm=s(Ut);g(hn.$$.fragment,Cm),Uv=l(Cm),_n=n(Cm,"P",{});var Wm=s(_n);Yv=i(Wm,"Returns the number of remaining steps of "),Ul=n(Wm,"CODE",{});var Cy=s(Ul);Xv=i(Cy,"advance()"),Cy.forEach(r),Jv=i(Wm," in order to complete this constraint."),Wm.forEach(r),Cm.forEach(r),Qv=l(T),Yt=n(T,"DIV",{class:!0});var Nm=s(Yt);g(bn.$$.fragment,Nm),Zv=l(Nm),Yl=n(Nm,"P",{});var Wy=s(Yl);e1=i(Wy,`Resets the state of this constraint to its initialization. We would call this in cases where the fulfillment of
a constraint is abrupted by an unwanted token.`),Wy.forEach(r),Nm.forEach(r),t1=l(T),Xt=n(T,"DIV",{class:!0});var Vm=s(Xt);g(vn.$$.fragment,Vm),r1=l(Vm),Xl=n(Vm,"P",{});var Ny=s(Xl);o1=i(Ny,"Tests whether this constraint has been properly defined."),Ny.forEach(r),Vm.forEach(r),n1=l(T),Ve=n(T,"DIV",{class:!0});var ic=s(Ve);g($n.$$.fragment,ic),s1=l(ic),Tn=n(ic,"P",{});var Mm=s(Tn);a1=i(Mm,`Reads in a token and returns booleans that indicate the progress made by it. This function will update the
state of this object unlikes `),Jl=n(Mm,"CODE",{});var Vy=s(Jl);i1=i(Vy,"does_advance(self, token_id: int)"),Vy.forEach(r),c1=i(Mm,"."),Mm.forEach(r),l1=l(ic),Ql=n(ic,"P",{});var My=s(Ql);d1=i(My,`This isn\u2019t to test whether a certain token will advance the progress; it\u2019s to update its state as if it has
been generated. This becomes important if token_id != desired token (refer to else statement in
PhrasalConstraint)`),My.forEach(r),ic.forEach(r),T.forEach(r),Kp=l(e),dt=n(e,"DIV",{class:!0});var Gm=s(dt);g(yn.$$.fragment,Gm),p1=l(Gm),ei=n(Gm,"P",{});var Q2=s(ei);ti=n(Q2,"A",{href:!0});var Gy=s(ti);m1=i(Gy,"Constraint"),Gy.forEach(r),f1=i(Q2," enforcing that an ordered sequence of tokens is included in the output."),Q2.forEach(r),Gm.forEach(r),Up=l(e),pt=n(e,"DIV",{class:!0});var jm=s(pt);g(kn.$$.fragment,jm),g1=l(jm),xn=n(jm,"P",{});var Hm=s(xn);u1=i(Hm,"A special "),ri=n(Hm,"A",{href:!0});var jy=s(ri);h1=i(jy,"Constraint"),jy.forEach(r),_1=i(Hm," that is fulfilled by fulfilling just one of several constraints."),Hm.forEach(r),jm.forEach(r),Yp=l(e),C=n(e,"DIV",{class:!0});var rr=s(C);g(wn.$$.fragment,rr),b1=l(rr),Zl=n(rr,"P",{});var Hy=s(Zl);v1=i(Hy,"A class for beam scorers to track its progress through a list of constraints."),Hy.forEach(r),$1=l(rr),F=n(rr,"DIV",{class:!0});var j=s(F);g(Ln.$$.fragment,j),T1=l(j),ed=n(j,"P",{});var Ry=s(ed);y1=i(Ry,`The list of tokens to generate such that we can make progress.
By \u201Clist\u201D we don\u2019t mean the list of token that will fully fulfill a constraint.`),Ry.forEach(r),k1=l(j),mt=n(j,"P",{});var cc=s(mt);x1=i(cc,"Given constraints "),td=n(cc,"CODE",{});var Ky=s(td);w1=i(Ky,"c_i = {t_ij | j == # of tokens}"),Ky.forEach(r),L1=i(cc,`, If we\u2019re not in the middle of progressing through a
specific constraint `),rd=n(cc,"CODE",{});var Uy=s(rd);E1=i(Uy,"c_i"),Uy.forEach(r),P1=i(cc,", we return:"),cc.forEach(r),F1=l(j),od=n(j,"P",{});var Yy=s(od);nd=n(Yy,"CODE",{});var Xy=s(nd);D1=i(Xy,"[t_k1 for k in indices of unfulfilled constraints]"),Xy.forEach(r),Yy.forEach(r),S1=l(j),qe=n(j,"P",{});var or=s(qe);z1=i(or,`If we are in the middle of a constraint, then we return:
`),sd=n(or,"CODE",{});var Jy=s(sd);O1=i(Jy,"[t_ij]"),Jy.forEach(r),q1=i(or,", where "),ad=n(or,"CODE",{});var Qy=s(ad);B1=i(Qy,"i"),Qy.forEach(r),I1=i(or," is the index of the inprogress constraint, "),id=n(or,"CODE",{});var Zy=s(id);A1=i(Zy,"j"),Zy.forEach(r),C1=i(or," is the next step for the constraint."),or.forEach(r),W1=l(j),cd=n(j,"P",{});var e0=s(cd);N1=i(e0,`Though we don\u2019t care which constraint is fulfilled first, if we are in the progress of fulfilling a constraint,
that\u2019s the only one we\u2019ll return.`),e0.forEach(r),j.forEach(r),V1=l(rr),Jt=n(rr,"DIV",{class:!0});var Rm=s(Jt);g(En.$$.fragment,Rm),M1=l(Rm),ld=n(Rm,"P",{});var t0=s(ld);G1=i(t0,"token_ids: the tokens generated thus far to reset the state of the progress through constraints."),t0.forEach(r),Rm.forEach(r),rr.forEach(r),Xp=l(e),ft=n(e,"H2",{class:!0});var Km=s(ft);Qt=n(Km,"A",{id:!0,class:!0,href:!0});var r0=s(Qt);dd=n(r0,"SPAN",{});var o0=s(dd);g(Pn.$$.fragment,o0),o0.forEach(r),r0.forEach(r),j1=l(Km),pd=n(Km,"SPAN",{});var n0=s(pd);H1=i(n0,"BeamSearch"),n0.forEach(r),Km.forEach(r),Jp=l(e),W=n(e,"DIV",{class:!0});var nr=s(W);g(Fn.$$.fragment,nr),R1=l(nr),gt=n(nr,"P",{});var lc=s(gt);K1=i(lc,"Abstract base class for all beam scorers that are used for "),oi=n(lc,"A",{href:!0});var s0=s(oi);U1=i(s0,"beam_search()"),s0.forEach(r),Y1=i(lc,` and
`),ni=n(lc,"A",{href:!0});var a0=s(ni);X1=i(a0,"beam_sample()"),a0.forEach(r),J1=i(lc,"."),lc.forEach(r),Q1=l(nr),si=n(nr,"DIV",{class:!0});var i0=s(si);g(Dn.$$.fragment,i0),i0.forEach(r),Z1=l(nr),ai=n(nr,"DIV",{class:!0});var c0=s(ai);g(Sn.$$.fragment,c0),c0.forEach(r),nr.forEach(r),Qp=l(e),P=n(e,"DIV",{class:!0});var H=s(P);g(zn.$$.fragment,H),e2=l(H),ii=n(H,"P",{});var Z2=s(ii);ci=n(Z2,"A",{href:!0});var l0=s(ci);t2=i(l0,"BeamScorer"),l0.forEach(r),r2=i(Z2," implementing standard beam search decoding."),Z2.forEach(r),o2=l(H),On=n(H,"P",{});var Um=s(On);n2=i(Um,"Adapted in part from "),qn=n(Um,"A",{href:!0,rel:!0});var d0=s(qn);s2=i(d0,`Facebook\u2019s XLM beam search
code`),d0.forEach(r),a2=i(Um,"."),Um.forEach(r),i2=l(H),li=n(H,"P",{});var e$=s(li);c2=i(e$,"Reference for the diverse beam search algorithm and implementation "),Bn=n(e$,"A",{href:!0,rel:!0});var p0=s(Bn);l2=i(p0,`Ashwin Kalyan\u2019s DBS
implementation`),p0.forEach(r),e$.forEach(r),d2=l(H),di=n(H,"DIV",{class:!0});var m0=s(di);g(In.$$.fragment,m0),m0.forEach(r),p2=l(H),pi=n(H,"DIV",{class:!0});var f0=s(pi);g(An.$$.fragment,f0),f0.forEach(r),H.forEach(r),Zp=l(e),N=n(e,"DIV",{class:!0});var sr=s(N);g(Cn.$$.fragment,sr),m2=l(sr),mi=n(sr,"P",{});var t$=s(mi);fi=n(t$,"A",{href:!0});var g0=s(fi);f2=i(g0,"BeamScorer"),g0.forEach(r),g2=i(t$," implementing constrained beam search decoding."),t$.forEach(r),u2=l(sr),gi=n(sr,"DIV",{class:!0});var u0=s(gi);g(Wn.$$.fragment,u0),u0.forEach(r),h2=l(sr),ui=n(sr,"DIV",{class:!0});var h0=s(ui);g(Nn.$$.fragment,h0),h0.forEach(r),sr.forEach(r),em=l(e),ut=n(e,"H2",{class:!0});var Ym=s(ut);Zt=n(Ym,"A",{id:!0,class:!0,href:!0});var _0=s(Zt);md=n(_0,"SPAN",{});var b0=s(md);g(Vn.$$.fragment,b0),b0.forEach(r),_0.forEach(r),_2=l(Ym),fd=n(Ym,"SPAN",{});var v0=s(fd);b2=i(v0,"Utilities"),v0.forEach(r),Ym.forEach(r),tm=l(e),Be=n(e,"DIV",{class:!0});var dc=s(Be);g(Mn.$$.fragment,dc),v2=l(dc),gd=n(dc,"P",{});var $0=s(gd);$2=i($0,"Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),$0.forEach(r),T2=l(dc),hi=n(dc,"P",{});var r$=s(hi);y2=i(r$,"From: "),Gn=n(r$,"A",{href:!0,rel:!0});var T0=s(Gn);k2=i(T0,"https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),T0.forEach(r),r$.forEach(r),dc.forEach(r),rm=l(e),Ie=n(e,"DIV",{class:!0});var pc=s(Ie);g(jn.$$.fragment,pc),x2=l(pc),ud=n(pc,"P",{});var y0=s(ud);w2=i(y0,"Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),y0.forEach(r),L2=l(pc),_i=n(pc,"P",{});var o$=s(_i);E2=i(o$,"From: "),Hn=n(o$,"A",{href:!0,rel:!0});var k0=s(Hn);P2=i(k0,"https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),k0.forEach(r),o$.forEach(r),pc.forEach(r),this.h()},h(){d(w,"name","hf:doc:metadata"),d(w,"content",JSON.stringify(O0)),d(Ce,"id","utilities-for-generation"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#utilities-for-generation"),d(k,"class","relative group"),d(Un,"href","/docs/transformers/v4.23.1/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate"),d(Yn,"href","/docs/transformers/v4.23.1/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.greedy_search"),d(Xn,"href","/docs/transformers/v4.23.1/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.sample"),d(Jn,"href","/docs/transformers/v4.23.1/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_search"),d(Qn,"href","/docs/transformers/v4.23.1/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_sample"),d(Zn,"href","/docs/transformers/v4.23.1/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.group_beam_search"),d(es,"href","/docs/transformers/v4.23.1/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.constrained_beam_search"),d(_t,"id","generate-outputs"),d(_t,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_t,"href","#generate-outputs"),d(Ke,"class","relative group"),d(rs,"href","/docs/transformers/v4.23.1/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate"),d(os,"href","/docs/transformers/v4.23.1/en/main_classes/output#transformers.utils.ModelOutput"),d(ns,"href","/docs/transformers/v4.23.1/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate"),d(as,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(vt,"id","transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(vt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vt,"href","#transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(Ue,"class","relative group"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tt,"id","transformers.generation_utils.SampleDecoderOnlyOutput"),d(Tt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Tt,"href","#transformers.generation_utils.SampleDecoderOnlyOutput"),d(Je,"class","relative group"),d(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kt,"id","transformers.generation_utils.BeamSearchDecoderOnlyOutput"),d(kt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kt,"href","#transformers.generation_utils.BeamSearchDecoderOnlyOutput"),d(et,"class","relative group"),d(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xt,"id","transformers.generation_utils.BeamSampleDecoderOnlyOutput"),d(xt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xt,"href","#transformers.generation_utils.BeamSampleDecoderOnlyOutput"),d(ot,"class","relative group"),d(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wt,"id","transformers.LogitsProcessor"),d(wt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wt,"href","#transformers.LogitsProcessor"),d(at,"class","relative group"),d(ms,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.LogitsProcessor"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fs,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.LogitsProcessor"),d(gs,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.LogitsWarper"),d(us,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.LogitsProcessor"),d(hs,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.LogitsWarper"),d(_s,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vs,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.LogitsProcessor"),d($s,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ys,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.LogitsWarper"),d(ks,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ws,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.LogitsProcessor"),d(Ls,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ps,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.LogitsWarper"),d(Fs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ss,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.LogitsWarper"),d(zs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Os,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.LogitsWarper"),d(jr,"href","https://arxiv.org/abs/2202.00666"),d(jr,"rel","nofollow"),d(qs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Bs,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.LogitsProcessor"),d(Kr,"href","https://github.com/pytorch/fairseq/blob/a07cb6f40480928c9e0548b737aadd36ee66ac76/fairseq/sequence_generator.py#L345"),d(Kr,"rel","nofollow"),d(Is,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cs,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.LogitsProcessor"),d(Ws,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ns,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.LogitsProcessor"),d(Qr,"href","https://arxiv.org/abs/2010.00904"),d(Qr,"rel","nofollow"),d(Vs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ms,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.LogitsProcessor"),d(Gs,"href","/docs/transformers/v4.23.1/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.group_beam_search"),d(to,"href","https://arxiv.org/pdf/1610.02424.pdf"),d(to,"rel","nofollow"),d(js,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rs,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.LogitsProcessor"),d(Ks,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Us,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.LogitsProcessor"),d(Ys,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xs,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.LogitsProcessor"),d(Js,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qs,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(Zs,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ra,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.TFLogitsWarper"),d(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sa,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.TFLogitsWarper"),d(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ca,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.TFLogitsWarper"),d(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pa,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ga,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ha,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(Eo,"href","https://github.com/pytorch/fairseq/blob/a07cb6f40480928c9e0548b737aadd36ee66ac76/fairseq/sequence_generator.py#L345"),d(Eo,"rel","nofollow"),d(_a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(va,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.TFLogitsProcessor"),d($a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ya,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(ka,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xa,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(wa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(La,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(Ea,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(Pa,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(Fa,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(Da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(za,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(Oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ba,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(Ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ca,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(Wa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Va,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(Ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ga,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(ja,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ra,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(Ka,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nt,"id","transformers.StoppingCriteria"),d(Nt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Nt,"href","#transformers.StoppingCriteria"),d(it,"class","relative group"),d(Ua,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.StoppingCriteria"),d(Ya,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ja,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mt,"id","transformers.Constraint"),d(Mt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Mt,"href","#transformers.Constraint"),d(lt,"class","relative group"),d(Za,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.Constraint"),d(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ti,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.Constraint"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ri,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.Constraint"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qt,"id","transformers.BeamScorer"),d(Qt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Qt,"href","#transformers.BeamScorer"),d(ft,"class","relative group"),d(oi,"href","/docs/transformers/v4.23.1/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_search"),d(ni,"href","/docs/transformers/v4.23.1/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_sample"),d(si,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ai,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ci,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.BeamScorer"),d(qn,"href","https://github.com/facebookresearch/XLM/blob/9e6f6814d17be4fe5b15f2e6c43eb2b2d76daeb4/src/model/transformer.py#L529"),d(qn,"rel","nofollow"),d(Bn,"href","https://github.com/ashwinkalyan/dbs/blob/master/dbs/beam_utils.lua"),d(Bn,"rel","nofollow"),d(di,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fi,"href","/docs/transformers/v4.23.1/en/internal/generation_utils#transformers.BeamScorer"),d(gi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ui,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zt,"id","transformers.top_k_top_p_filtering"),d(Zt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Zt,"href","#transformers.top_k_top_p_filtering"),d(ut,"class","relative group"),d(Gn,"href","https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),d(Gn,"rel","nofollow"),d(Be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Hn,"href","https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),d(Hn,"rel","nofollow"),d(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,p){t(document.head,w),m(e,Re,p),m(e,k,p),t(k,Ce),t(Ce,mc),u(ar,mc,null),t(k,Xm),t(k,fc),t(fc,Jm),m(e,xd,p),m(e,y,p),t(y,Qm),t(y,Un),t(Un,Zm),t(y,ef),t(y,Yn),t(Yn,tf),t(y,rf),t(y,Xn),t(Xn,of),t(y,nf),t(y,Jn),t(Jn,sf),t(y,af),t(y,Qn),t(Qn,cf),t(y,lf),t(y,Zn),t(Zn,df),t(y,pf),t(y,es),t(es,mf),t(y,ff),m(e,wd,p),m(e,ts,p),t(ts,gf),m(e,Ld,p),m(e,Ke,p),t(Ke,_t),t(_t,gc),u(ir,gc,null),t(Ke,uf),t(Ke,uc),t(uc,hf),m(e,Ed,p),m(e,V,p),t(V,_f),t(V,rs),t(rs,bf),t(V,vf),t(V,os),t(os,$f),t(V,Tf),t(V,ns),t(ns,yf),t(V,kf),m(e,Pd,p),m(e,ss,p),t(ss,xf),m(e,Fd,p),u(cr,e,p),m(e,Dd,p),m(e,We,p),t(We,wf),t(We,hc),t(hc,Lf),t(We,Ef),t(We,as),t(as,Pf),t(We,Ff),m(e,Sd,p),m(e,M,p),t(M,is),t(is,_c),t(_c,Df),t(is,Sf),t(M,zf),t(M,cs),t(cs,bc),t(bc,Of),t(cs,qf),t(M,Bf),t(M,ls),t(ls,vc),t(vc,If),t(ls,Af),t(M,Cf),t(M,ds),t(ds,$c),t($c,Wf),t(ds,Nf),m(e,zd,p),m(e,x,p),t(x,Vf),t(x,Tc),t(Tc,Mf),t(x,Gf),t(x,yc),t(yc,jf),t(x,Hf),t(x,kc),t(kc,Rf),t(x,Kf),t(x,xc),t(xc,Uf),t(x,Yf),t(x,wc),t(wc,Xf),t(x,Jf),t(x,Lc),t(Lc,Qf),t(x,Zf),m(e,Od,p),m(e,S,p),t(S,eg),t(S,Ec),t(Ec,tg),t(S,rg),t(S,Pc),t(Pc,og),t(S,ng),t(S,Fc),t(Fc,sg),t(S,ag),t(S,Dc),t(Dc,ig),t(S,cg),m(e,qd,p),m(e,z,p),t(z,lg),t(z,Sc),t(Sc,dg),t(z,pg),t(z,zc),t(zc,mg),t(z,fg),t(z,Oc),t(Oc,gg),t(z,ug),t(z,qc),t(qc,hg),t(z,_g),m(e,Bd,p),u(lr,e,p),m(e,Id,p),m(e,bt,p),t(bt,bg),t(bt,Bc),t(Bc,vg),t(bt,$g),m(e,Ad,p),m(e,O,p),t(O,Tg),t(O,Ic),t(Ic,yg),t(O,kg),t(O,Ac),t(Ac,xg),t(O,wg),t(O,Cc),t(Cc,Lg),t(O,Eg),t(O,Wc),t(Wc,Pg),t(O,Fg),m(e,Cd,p),m(e,ps,p),t(ps,Dg),m(e,Wd,p),m(e,Ue,p),t(Ue,vt),t(vt,Nc),u(dr,Nc,null),t(Ue,Sg),t(Ue,Vc),t(Vc,zg),m(e,Nd,p),m(e,Ye,p),u(pr,Ye,null),t(Ye,Og),t(Ye,Mc),t(Mc,qg),m(e,Vd,p),m(e,Xe,p),u(mr,Xe,null),t(Xe,Bg),t(Xe,Gc),t(Gc,Ig),m(e,Md,p),m(e,R,p),u(fr,R,null),t(R,Ag),t(R,jc),t(jc,Cg),t(R,Wg),t(R,$t),u(gr,$t,null),t($t,Ng),t($t,Hc),t(Hc,Vg),m(e,Gd,p),m(e,Je,p),t(Je,Tt),t(Tt,Rc),u(ur,Rc,null),t(Je,Mg),t(Je,Kc),t(Kc,Gg),m(e,jd,p),m(e,Qe,p),u(hr,Qe,null),t(Qe,jg),t(Qe,Uc),t(Uc,Hg),m(e,Hd,p),m(e,Ze,p),u(_r,Ze,null),t(Ze,Rg),t(Ze,Yc),t(Yc,Kg),m(e,Rd,p),m(e,K,p),u(br,K,null),t(K,Ug),t(K,Xc),t(Xc,Yg),t(K,Xg),t(K,yt),u(vr,yt,null),t(yt,Jg),t(yt,Jc),t(Jc,Qg),m(e,Kd,p),m(e,et,p),t(et,kt),t(kt,Qc),u($r,Qc,null),t(et,Zg),t(et,Zc),t(Zc,eu),m(e,Ud,p),m(e,tt,p),u(Tr,tt,null),t(tt,tu),t(tt,el),t(el,ru),m(e,Yd,p),m(e,rt,p),u(yr,rt,null),t(rt,ou),t(rt,tl),t(tl,nu),m(e,Xd,p),m(e,ot,p),t(ot,xt),t(xt,rl),u(kr,rl,null),t(ot,su),t(ot,ol),t(ol,au),m(e,Jd,p),m(e,nt,p),u(xr,nt,null),t(nt,iu),t(nt,nl),t(nl,cu),m(e,Qd,p),m(e,st,p),u(wr,st,null),t(st,lu),t(st,sl),t(sl,du),m(e,Zd,p),m(e,at,p),t(at,wt),t(wt,al),u(Lr,al,null),t(at,pu),t(at,il),t(il,mu),m(e,ep,p),m(e,Lt,p),t(Lt,fu),t(Lt,ms),t(ms,gu),t(Lt,uu),m(e,tp,p),m(e,U,p),u(Er,U,null),t(U,hu),t(U,cl),t(cl,_u),t(U,bu),t(U,Et),u(Pr,Et,null),t(Et,vu),t(Et,ll),t(ll,$u),m(e,rp,p),m(e,Y,p),u(Fr,Y,null),t(Y,Tu),t(Y,L),t(L,yu),t(L,fs),t(fs,ku),t(L,xu),t(L,gs),t(gs,wu),t(L,Lu),t(L,dl),t(dl,Eu),t(L,Pu),t(L,pl),t(pl,ml),t(ml,Fu),t(L,Du),t(L,us),t(us,Su),t(L,zu),t(L,hs),t(hs,Ou),t(L,qu),t(Y,Bu),t(Y,_s),u(Dr,_s,null),m(e,op,p),m(e,X,p),u(Sr,X,null),t(X,Iu),t(X,fl),t(fl,Au),t(X,Cu),t(X,Pt),u(zr,Pt,null),t(Pt,Wu),t(Pt,gl),t(gl,Nu),m(e,np,p),m(e,J,p),u(Or,J,null),t(J,Vu),t(J,bs),t(bs,vs),t(vs,Mu),t(bs,Gu),t(J,ju),t(J,$s),u(qr,$s,null),m(e,sp,p),m(e,Q,p),u(Br,Q,null),t(Q,Hu),t(Q,Ts),t(Ts,ys),t(ys,Ru),t(Ts,Ku),t(Q,Uu),t(Q,ks),u(Ir,ks,null),m(e,ap,p),m(e,Z,p),u(Ar,Z,null),t(Z,Yu),t(Z,xs),t(xs,ws),t(ws,Xu),t(xs,Ju),t(Z,Qu),t(Z,Ls),u(Cr,Ls,null),m(e,ip,p),m(e,ee,p),u(Wr,ee,null),t(ee,Zu),t(ee,Es),t(Es,Ps),t(Ps,eh),t(Es,th),t(ee,rh),t(ee,Fs),u(Nr,Fs,null),m(e,cp,p),m(e,te,p),u(Vr,te,null),t(te,oh),t(te,Ds),t(Ds,Ss),t(Ss,nh),t(Ds,sh),t(te,ah),t(te,zs),u(Mr,zs,null),m(e,lp,p),m(e,re,p),u(Gr,re,null),t(re,ih),t(re,Ft),t(Ft,Os),t(Os,ch),t(Ft,lh),t(Ft,jr),t(jr,dh),t(Ft,ph),t(re,mh),t(re,qs),u(Hr,qs,null),m(e,dp,p),m(e,oe,p),u(Rr,oe,null),t(oe,fh),t(oe,Dt),t(Dt,Bs),t(Bs,gh),t(Dt,uh),t(Dt,Kr),t(Kr,hh),t(Dt,_h),t(oe,bh),t(oe,Is),u(Ur,Is,null),m(e,pp,p),m(e,ne,p),u(Yr,ne,null),t(ne,vh),t(ne,As),t(As,Cs),t(Cs,$h),t(As,Th),t(ne,yh),t(ne,Ws),u(Xr,Ws,null),m(e,mp,p),m(e,se,p),u(Jr,se,null),t(se,kh),t(se,St),t(St,Ns),t(Ns,xh),t(St,wh),t(St,Qr),t(Qr,Lh),t(St,Eh),t(se,Ph),t(se,Vs),u(Zr,Vs,null),m(e,fp,p),m(e,ae,p),u(eo,ae,null),t(ae,Fh),t(ae,Ne),t(Ne,Ms),t(Ms,Dh),t(Ne,Sh),t(Ne,Gs),t(Gs,zh),t(Ne,Oh),t(Ne,to),t(to,qh),t(Ne,Bh),t(ae,Ih),t(ae,js),u(ro,js,null),m(e,gp,p),m(e,ie,p),u(oo,ie,null),t(ie,Ah),t(ie,Hs),t(Hs,Rs),t(Rs,Ch),t(Hs,Wh),t(ie,Nh),t(ie,Ks),u(no,Ks,null),m(e,up,p),m(e,ce,p),u(so,ce,null),t(ce,Vh),t(ce,zt),t(zt,Us),t(Us,Mh),t(zt,Gh),t(zt,ul),t(ul,jh),t(zt,Hh),t(ce,Rh),t(ce,Ys),u(ao,Ys,null),m(e,hp,p),m(e,le,p),u(io,le,null),t(le,Kh),t(le,G),t(G,Xs),t(Xs,Uh),t(G,Yh),t(G,hl),t(hl,Xh),t(G,Jh),t(G,_l),t(_l,Qh),t(G,Zh),t(G,bl),t(bl,e_),t(G,t_),t(le,r_),t(le,Js),u(co,Js,null),m(e,_p,p),m(e,de,p),u(lo,de,null),t(de,o_),t(de,vl),t(vl,n_),t(de,s_),t(de,Ot),u(po,Ot,null),t(Ot,a_),t(Ot,$l),t($l,i_),m(e,bp,p),m(e,pe,p),u(mo,pe,null),t(pe,c_),t(pe,A),t(A,l_),t(A,Qs),t(Qs,d_),t(A,p_),t(A,Tl),t(Tl,m_),t(A,f_),t(A,yl),t(yl,kl),t(kl,g_),t(A,u_),t(A,Zs),t(Zs,h_),t(A,__),t(pe,b_),t(pe,ea),u(fo,ea,null),m(e,vp,p),m(e,me,p),u(go,me,null),t(me,v_),t(me,xl),t(xl,$_),t(me,T_),t(me,qt),u(uo,qt,null),t(qt,y_),t(qt,wl),t(wl,k_),m(e,$p,p),m(e,fe,p),u(ho,fe,null),t(fe,x_),t(fe,ta),t(ta,ra),t(ra,w_),t(ta,L_),t(fe,E_),t(fe,oa),u(_o,oa,null),m(e,Tp,p),m(e,ge,p),u(bo,ge,null),t(ge,P_),t(ge,na),t(na,sa),t(sa,F_),t(na,D_),t(ge,S_),t(ge,aa),u(vo,aa,null),m(e,yp,p),m(e,ue,p),u($o,ue,null),t(ue,z_),t(ue,ia),t(ia,ca),t(ca,O_),t(ia,q_),t(ue,B_),t(ue,la),u(To,la,null),m(e,kp,p),m(e,he,p),u(yo,he,null),t(he,I_),t(he,da),t(da,pa),t(pa,A_),t(da,C_),t(he,W_),t(he,ma),u(ko,ma,null),m(e,xp,p),m(e,_e,p),u(xo,_e,null),t(_e,N_),t(_e,fa),t(fa,ga),t(ga,V_),t(fa,M_),t(_e,G_),t(_e,ua),u(wo,ua,null),m(e,wp,p),m(e,be,p),u(Lo,be,null),t(be,j_),t(be,Bt),t(Bt,ha),t(ha,H_),t(Bt,R_),t(Bt,Eo),t(Eo,K_),t(Bt,U_),t(be,Y_),t(be,_a),u(Po,_a,null),m(e,Lp,p),m(e,ve,p),u(Fo,ve,null),t(ve,X_),t(ve,ba),t(ba,va),t(va,J_),t(ba,Q_),t(ve,Z_),t(ve,$a),u(Do,$a,null),m(e,Ep,p),m(e,$e,p),u(So,$e,null),t($e,eb),t($e,Ta),t(Ta,ya),t(ya,tb),t(Ta,rb),t($e,ob),t($e,ka),u(zo,ka,null),m(e,Pp,p),m(e,Te,p),u(Oo,Te,null),t(Te,nb),t(Te,It),t(It,xa),t(xa,sb),t(It,ab),t(It,Ll),t(Ll,ib),t(It,cb),t(Te,lb),t(Te,wa),u(qo,wa,null),m(e,Fp,p),m(e,ye,p),u(Bo,ye,null),t(ye,db),t(ye,El),t(El,pb),t(ye,mb),t(ye,At),u(Io,At,null),t(At,fb),t(At,Pl),t(Pl,gb),m(e,Dp,p),m(e,ke,p),u(Ao,ke,null),t(ke,ub),t(ke,E),t(E,hb),t(E,La),t(La,_b),t(E,bb),t(E,Ea),t(Ea,vb),t(E,$b),t(E,Fl),t(Fl,Tb),t(E,yb),t(E,Dl),t(Dl,Sl),t(Sl,kb),t(E,xb),t(E,Pa),t(Pa,wb),t(E,Lb),t(E,Fa),t(Fa,Eb),t(E,Pb),t(ke,Fb),t(ke,Da),u(Co,Da,null),m(e,Sp,p),m(e,xe,p),u(Wo,xe,null),t(xe,Db),t(xe,zl),t(zl,Sb),t(xe,zb),t(xe,Ct),u(No,Ct,null),t(Ct,Ob),t(Ct,Ol),t(Ol,qb),m(e,zp,p),m(e,we,p),u(Vo,we,null),t(we,Bb),t(we,Sa),t(Sa,za),t(za,Ib),t(Sa,Ab),t(we,Cb),t(we,Oa),u(Mo,Oa,null),m(e,Op,p),m(e,Le,p),u(Go,Le,null),t(Le,Wb),t(Le,qa),t(qa,Ba),t(Ba,Nb),t(qa,Vb),t(Le,Mb),t(Le,Ia),u(jo,Ia,null),m(e,qp,p),m(e,Ee,p),u(Ho,Ee,null),t(Ee,Gb),t(Ee,Aa),t(Aa,Ca),t(Ca,jb),t(Aa,Hb),t(Ee,Rb),t(Ee,Wa),u(Ro,Wa,null),m(e,Bp,p),m(e,Pe,p),u(Ko,Pe,null),t(Pe,Kb),t(Pe,Na),t(Na,Va),t(Va,Ub),t(Na,Yb),t(Pe,Xb),t(Pe,Ma),u(Uo,Ma,null),m(e,Ip,p),m(e,Fe,p),u(Yo,Fe,null),t(Fe,Jb),t(Fe,Wt),t(Wt,Ga),t(Ga,Qb),t(Wt,Zb),t(Wt,ql),t(ql,ev),t(Wt,tv),t(Fe,rv),t(Fe,ja),u(Xo,ja,null),m(e,Ap,p),m(e,De,p),u(Jo,De,null),t(De,ov),t(De,Ha),t(Ha,Ra),t(Ra,nv),t(Ha,sv),t(De,av),t(De,Ka),u(Qo,Ka,null),m(e,Cp,p),m(e,it,p),t(it,Nt),t(Nt,Bl),u(Zo,Bl,null),t(it,iv),t(it,Il),t(Il,cv),m(e,Wp,p),m(e,Vt,p),t(Vt,lv),t(Vt,Ua),t(Ua,dv),t(Vt,pv),m(e,Np,p),m(e,Se,p),u(en,Se,null),t(Se,mv),t(Se,Al),t(Al,fv),t(Se,gv),t(Se,Ya),u(tn,Ya,null),m(e,Vp,p),m(e,ct,p),u(rn,ct,null),t(ct,uv),t(ct,Xa),u(on,Xa,null),m(e,Mp,p),m(e,ze,p),u(nn,ze,null),t(ze,hv),t(ze,sn),t(sn,_v),t(sn,Cl),t(Cl,bv),t(sn,vv),t(ze,$v),t(ze,Ja),u(an,Ja,null),m(e,Gp,p),m(e,Oe,p),u(cn,Oe,null),t(Oe,Tv),t(Oe,ln),t(ln,yv),t(ln,Wl),t(Wl,kv),t(ln,xv),t(Oe,wv),t(Oe,Qa),u(dn,Qa,null),m(e,jp,p),m(e,lt,p),t(lt,Mt),t(Mt,Nl),u(pn,Nl,null),t(lt,Lv),t(lt,Vl),t(Vl,Ev),m(e,Hp,p),m(e,Gt,p),t(Gt,Pv),t(Gt,Za),t(Za,Fv),t(Gt,Dv),m(e,Rp,p),m(e,$,p),u(mn,$,null),t($,Sv),t($,Ml),t(Ml,zv),t($,Ov),t($,Gl),t(Gl,qv),t($,Bv),u(jt,$,null),t($,Iv),t($,jl),t(jl,Av),t($,Cv),t($,Ht),u(fn,Ht,null),t(Ht,Wv),t(Ht,Hl),t(Hl,Nv),t($,Vv),t($,Rt),u(gn,Rt,null),t(Rt,Mv),t(Rt,Rl),t(Rl,Gv),t($,jv),t($,Kt),u(un,Kt,null),t(Kt,Hv),t(Kt,Kl),t(Kl,Rv),t($,Kv),t($,Ut),u(hn,Ut,null),t(Ut,Uv),t(Ut,_n),t(_n,Yv),t(_n,Ul),t(Ul,Xv),t(_n,Jv),t($,Qv),t($,Yt),u(bn,Yt,null),t(Yt,Zv),t(Yt,Yl),t(Yl,e1),t($,t1),t($,Xt),u(vn,Xt,null),t(Xt,r1),t(Xt,Xl),t(Xl,o1),t($,n1),t($,Ve),u($n,Ve,null),t(Ve,s1),t(Ve,Tn),t(Tn,a1),t(Tn,Jl),t(Jl,i1),t(Tn,c1),t(Ve,l1),t(Ve,Ql),t(Ql,d1),m(e,Kp,p),m(e,dt,p),u(yn,dt,null),t(dt,p1),t(dt,ei),t(ei,ti),t(ti,m1),t(ei,f1),m(e,Up,p),m(e,pt,p),u(kn,pt,null),t(pt,g1),t(pt,xn),t(xn,u1),t(xn,ri),t(ri,h1),t(xn,_1),m(e,Yp,p),m(e,C,p),u(wn,C,null),t(C,b1),t(C,Zl),t(Zl,v1),t(C,$1),t(C,F),u(Ln,F,null),t(F,T1),t(F,ed),t(ed,y1),t(F,k1),t(F,mt),t(mt,x1),t(mt,td),t(td,w1),t(mt,L1),t(mt,rd),t(rd,E1),t(mt,P1),t(F,F1),t(F,od),t(od,nd),t(nd,D1),t(F,S1),t(F,qe),t(qe,z1),t(qe,sd),t(sd,O1),t(qe,q1),t(qe,ad),t(ad,B1),t(qe,I1),t(qe,id),t(id,A1),t(qe,C1),t(F,W1),t(F,cd),t(cd,N1),t(C,V1),t(C,Jt),u(En,Jt,null),t(Jt,M1),t(Jt,ld),t(ld,G1),m(e,Xp,p),m(e,ft,p),t(ft,Qt),t(Qt,dd),u(Pn,dd,null),t(ft,j1),t(ft,pd),t(pd,H1),m(e,Jp,p),m(e,W,p),u(Fn,W,null),t(W,R1),t(W,gt),t(gt,K1),t(gt,oi),t(oi,U1),t(gt,Y1),t(gt,ni),t(ni,X1),t(gt,J1),t(W,Q1),t(W,si),u(Dn,si,null),t(W,Z1),t(W,ai),u(Sn,ai,null),m(e,Qp,p),m(e,P,p),u(zn,P,null),t(P,e2),t(P,ii),t(ii,ci),t(ci,t2),t(ii,r2),t(P,o2),t(P,On),t(On,n2),t(On,qn),t(qn,s2),t(On,a2),t(P,i2),t(P,li),t(li,c2),t(li,Bn),t(Bn,l2),t(P,d2),t(P,di),u(In,di,null),t(P,p2),t(P,pi),u(An,pi,null),m(e,Zp,p),m(e,N,p),u(Cn,N,null),t(N,m2),t(N,mi),t(mi,fi),t(fi,f2),t(mi,g2),t(N,u2),t(N,gi),u(Wn,gi,null),t(N,h2),t(N,ui),u(Nn,ui,null),m(e,em,p),m(e,ut,p),t(ut,Zt),t(Zt,md),u(Vn,md,null),t(ut,_2),t(ut,fd),t(fd,b2),m(e,tm,p),m(e,Be,p),u(Mn,Be,null),t(Be,v2),t(Be,gd),t(gd,$2),t(Be,T2),t(Be,hi),t(hi,y2),t(hi,Gn),t(Gn,k2),m(e,rm,p),m(e,Ie,p),u(jn,Ie,null),t(Ie,x2),t(Ie,ud),t(ud,w2),t(Ie,L2),t(Ie,_i),t(_i,E2),t(_i,Hn),t(Hn,P2),om=!0},p(e,[p]){const Rn={};p&2&&(Rn.$$scope={dirty:p,ctx:e}),jt.$set(Rn)},i(e){om||(h(ar.$$.fragment,e),h(ir.$$.fragment,e),h(cr.$$.fragment,e),h(lr.$$.fragment,e),h(dr.$$.fragment,e),h(pr.$$.fragment,e),h(mr.$$.fragment,e),h(fr.$$.fragment,e),h(gr.$$.fragment,e),h(ur.$$.fragment,e),h(hr.$$.fragment,e),h(_r.$$.fragment,e),h(br.$$.fragment,e),h(vr.$$.fragment,e),h($r.$$.fragment,e),h(Tr.$$.fragment,e),h(yr.$$.fragment,e),h(kr.$$.fragment,e),h(xr.$$.fragment,e),h(wr.$$.fragment,e),h(Lr.$$.fragment,e),h(Er.$$.fragment,e),h(Pr.$$.fragment,e),h(Fr.$$.fragment,e),h(Dr.$$.fragment,e),h(Sr.$$.fragment,e),h(zr.$$.fragment,e),h(Or.$$.fragment,e),h(qr.$$.fragment,e),h(Br.$$.fragment,e),h(Ir.$$.fragment,e),h(Ar.$$.fragment,e),h(Cr.$$.fragment,e),h(Wr.$$.fragment,e),h(Nr.$$.fragment,e),h(Vr.$$.fragment,e),h(Mr.$$.fragment,e),h(Gr.$$.fragment,e),h(Hr.$$.fragment,e),h(Rr.$$.fragment,e),h(Ur.$$.fragment,e),h(Yr.$$.fragment,e),h(Xr.$$.fragment,e),h(Jr.$$.fragment,e),h(Zr.$$.fragment,e),h(eo.$$.fragment,e),h(ro.$$.fragment,e),h(oo.$$.fragment,e),h(no.$$.fragment,e),h(so.$$.fragment,e),h(ao.$$.fragment,e),h(io.$$.fragment,e),h(co.$$.fragment,e),h(lo.$$.fragment,e),h(po.$$.fragment,e),h(mo.$$.fragment,e),h(fo.$$.fragment,e),h(go.$$.fragment,e),h(uo.$$.fragment,e),h(ho.$$.fragment,e),h(_o.$$.fragment,e),h(bo.$$.fragment,e),h(vo.$$.fragment,e),h($o.$$.fragment,e),h(To.$$.fragment,e),h(yo.$$.fragment,e),h(ko.$$.fragment,e),h(xo.$$.fragment,e),h(wo.$$.fragment,e),h(Lo.$$.fragment,e),h(Po.$$.fragment,e),h(Fo.$$.fragment,e),h(Do.$$.fragment,e),h(So.$$.fragment,e),h(zo.$$.fragment,e),h(Oo.$$.fragment,e),h(qo.$$.fragment,e),h(Bo.$$.fragment,e),h(Io.$$.fragment,e),h(Ao.$$.fragment,e),h(Co.$$.fragment,e),h(Wo.$$.fragment,e),h(No.$$.fragment,e),h(Vo.$$.fragment,e),h(Mo.$$.fragment,e),h(Go.$$.fragment,e),h(jo.$$.fragment,e),h(Ho.$$.fragment,e),h(Ro.$$.fragment,e),h(Ko.$$.fragment,e),h(Uo.$$.fragment,e),h(Yo.$$.fragment,e),h(Xo.$$.fragment,e),h(Jo.$$.fragment,e),h(Qo.$$.fragment,e),h(Zo.$$.fragment,e),h(en.$$.fragment,e),h(tn.$$.fragment,e),h(rn.$$.fragment,e),h(on.$$.fragment,e),h(nn.$$.fragment,e),h(an.$$.fragment,e),h(cn.$$.fragment,e),h(dn.$$.fragment,e),h(pn.$$.fragment,e),h(mn.$$.fragment,e),h(jt.$$.fragment,e),h(fn.$$.fragment,e),h(gn.$$.fragment,e),h(un.$$.fragment,e),h(hn.$$.fragment,e),h(bn.$$.fragment,e),h(vn.$$.fragment,e),h($n.$$.fragment,e),h(yn.$$.fragment,e),h(kn.$$.fragment,e),h(wn.$$.fragment,e),h(Ln.$$.fragment,e),h(En.$$.fragment,e),h(Pn.$$.fragment,e),h(Fn.$$.fragment,e),h(Dn.$$.fragment,e),h(Sn.$$.fragment,e),h(zn.$$.fragment,e),h(In.$$.fragment,e),h(An.$$.fragment,e),h(Cn.$$.fragment,e),h(Wn.$$.fragment,e),h(Nn.$$.fragment,e),h(Vn.$$.fragment,e),h(Mn.$$.fragment,e),h(jn.$$.fragment,e),om=!0)},o(e){_(ar.$$.fragment,e),_(ir.$$.fragment,e),_(cr.$$.fragment,e),_(lr.$$.fragment,e),_(dr.$$.fragment,e),_(pr.$$.fragment,e),_(mr.$$.fragment,e),_(fr.$$.fragment,e),_(gr.$$.fragment,e),_(ur.$$.fragment,e),_(hr.$$.fragment,e),_(_r.$$.fragment,e),_(br.$$.fragment,e),_(vr.$$.fragment,e),_($r.$$.fragment,e),_(Tr.$$.fragment,e),_(yr.$$.fragment,e),_(kr.$$.fragment,e),_(xr.$$.fragment,e),_(wr.$$.fragment,e),_(Lr.$$.fragment,e),_(Er.$$.fragment,e),_(Pr.$$.fragment,e),_(Fr.$$.fragment,e),_(Dr.$$.fragment,e),_(Sr.$$.fragment,e),_(zr.$$.fragment,e),_(Or.$$.fragment,e),_(qr.$$.fragment,e),_(Br.$$.fragment,e),_(Ir.$$.fragment,e),_(Ar.$$.fragment,e),_(Cr.$$.fragment,e),_(Wr.$$.fragment,e),_(Nr.$$.fragment,e),_(Vr.$$.fragment,e),_(Mr.$$.fragment,e),_(Gr.$$.fragment,e),_(Hr.$$.fragment,e),_(Rr.$$.fragment,e),_(Ur.$$.fragment,e),_(Yr.$$.fragment,e),_(Xr.$$.fragment,e),_(Jr.$$.fragment,e),_(Zr.$$.fragment,e),_(eo.$$.fragment,e),_(ro.$$.fragment,e),_(oo.$$.fragment,e),_(no.$$.fragment,e),_(so.$$.fragment,e),_(ao.$$.fragment,e),_(io.$$.fragment,e),_(co.$$.fragment,e),_(lo.$$.fragment,e),_(po.$$.fragment,e),_(mo.$$.fragment,e),_(fo.$$.fragment,e),_(go.$$.fragment,e),_(uo.$$.fragment,e),_(ho.$$.fragment,e),_(_o.$$.fragment,e),_(bo.$$.fragment,e),_(vo.$$.fragment,e),_($o.$$.fragment,e),_(To.$$.fragment,e),_(yo.$$.fragment,e),_(ko.$$.fragment,e),_(xo.$$.fragment,e),_(wo.$$.fragment,e),_(Lo.$$.fragment,e),_(Po.$$.fragment,e),_(Fo.$$.fragment,e),_(Do.$$.fragment,e),_(So.$$.fragment,e),_(zo.$$.fragment,e),_(Oo.$$.fragment,e),_(qo.$$.fragment,e),_(Bo.$$.fragment,e),_(Io.$$.fragment,e),_(Ao.$$.fragment,e),_(Co.$$.fragment,e),_(Wo.$$.fragment,e),_(No.$$.fragment,e),_(Vo.$$.fragment,e),_(Mo.$$.fragment,e),_(Go.$$.fragment,e),_(jo.$$.fragment,e),_(Ho.$$.fragment,e),_(Ro.$$.fragment,e),_(Ko.$$.fragment,e),_(Uo.$$.fragment,e),_(Yo.$$.fragment,e),_(Xo.$$.fragment,e),_(Jo.$$.fragment,e),_(Qo.$$.fragment,e),_(Zo.$$.fragment,e),_(en.$$.fragment,e),_(tn.$$.fragment,e),_(rn.$$.fragment,e),_(on.$$.fragment,e),_(nn.$$.fragment,e),_(an.$$.fragment,e),_(cn.$$.fragment,e),_(dn.$$.fragment,e),_(pn.$$.fragment,e),_(mn.$$.fragment,e),_(jt.$$.fragment,e),_(fn.$$.fragment,e),_(gn.$$.fragment,e),_(un.$$.fragment,e),_(hn.$$.fragment,e),_(bn.$$.fragment,e),_(vn.$$.fragment,e),_($n.$$.fragment,e),_(yn.$$.fragment,e),_(kn.$$.fragment,e),_(wn.$$.fragment,e),_(Ln.$$.fragment,e),_(En.$$.fragment,e),_(Pn.$$.fragment,e),_(Fn.$$.fragment,e),_(Dn.$$.fragment,e),_(Sn.$$.fragment,e),_(zn.$$.fragment,e),_(In.$$.fragment,e),_(An.$$.fragment,e),_(Cn.$$.fragment,e),_(Wn.$$.fragment,e),_(Nn.$$.fragment,e),_(Vn.$$.fragment,e),_(Mn.$$.fragment,e),_(jn.$$.fragment,e),om=!1},d(e){r(w),e&&r(Re),e&&r(k),b(ar),e&&r(xd),e&&r(y),e&&r(wd),e&&r(ts),e&&r(Ld),e&&r(Ke),b(ir),e&&r(Ed),e&&r(V),e&&r(Pd),e&&r(ss),e&&r(Fd),b(cr,e),e&&r(Dd),e&&r(We),e&&r(Sd),e&&r(M),e&&r(zd),e&&r(x),e&&r(Od),e&&r(S),e&&r(qd),e&&r(z),e&&r(Bd),b(lr,e),e&&r(Id),e&&r(bt),e&&r(Ad),e&&r(O),e&&r(Cd),e&&r(ps),e&&r(Wd),e&&r(Ue),b(dr),e&&r(Nd),e&&r(Ye),b(pr),e&&r(Vd),e&&r(Xe),b(mr),e&&r(Md),e&&r(R),b(fr),b(gr),e&&r(Gd),e&&r(Je),b(ur),e&&r(jd),e&&r(Qe),b(hr),e&&r(Hd),e&&r(Ze),b(_r),e&&r(Rd),e&&r(K),b(br),b(vr),e&&r(Kd),e&&r(et),b($r),e&&r(Ud),e&&r(tt),b(Tr),e&&r(Yd),e&&r(rt),b(yr),e&&r(Xd),e&&r(ot),b(kr),e&&r(Jd),e&&r(nt),b(xr),e&&r(Qd),e&&r(st),b(wr),e&&r(Zd),e&&r(at),b(Lr),e&&r(ep),e&&r(Lt),e&&r(tp),e&&r(U),b(Er),b(Pr),e&&r(rp),e&&r(Y),b(Fr),b(Dr),e&&r(op),e&&r(X),b(Sr),b(zr),e&&r(np),e&&r(J),b(Or),b(qr),e&&r(sp),e&&r(Q),b(Br),b(Ir),e&&r(ap),e&&r(Z),b(Ar),b(Cr),e&&r(ip),e&&r(ee),b(Wr),b(Nr),e&&r(cp),e&&r(te),b(Vr),b(Mr),e&&r(lp),e&&r(re),b(Gr),b(Hr),e&&r(dp),e&&r(oe),b(Rr),b(Ur),e&&r(pp),e&&r(ne),b(Yr),b(Xr),e&&r(mp),e&&r(se),b(Jr),b(Zr),e&&r(fp),e&&r(ae),b(eo),b(ro),e&&r(gp),e&&r(ie),b(oo),b(no),e&&r(up),e&&r(ce),b(so),b(ao),e&&r(hp),e&&r(le),b(io),b(co),e&&r(_p),e&&r(de),b(lo),b(po),e&&r(bp),e&&r(pe),b(mo),b(fo),e&&r(vp),e&&r(me),b(go),b(uo),e&&r($p),e&&r(fe),b(ho),b(_o),e&&r(Tp),e&&r(ge),b(bo),b(vo),e&&r(yp),e&&r(ue),b($o),b(To),e&&r(kp),e&&r(he),b(yo),b(ko),e&&r(xp),e&&r(_e),b(xo),b(wo),e&&r(wp),e&&r(be),b(Lo),b(Po),e&&r(Lp),e&&r(ve),b(Fo),b(Do),e&&r(Ep),e&&r($e),b(So),b(zo),e&&r(Pp),e&&r(Te),b(Oo),b(qo),e&&r(Fp),e&&r(ye),b(Bo),b(Io),e&&r(Dp),e&&r(ke),b(Ao),b(Co),e&&r(Sp),e&&r(xe),b(Wo),b(No),e&&r(zp),e&&r(we),b(Vo),b(Mo),e&&r(Op),e&&r(Le),b(Go),b(jo),e&&r(qp),e&&r(Ee),b(Ho),b(Ro),e&&r(Bp),e&&r(Pe),b(Ko),b(Uo),e&&r(Ip),e&&r(Fe),b(Yo),b(Xo),e&&r(Ap),e&&r(De),b(Jo),b(Qo),e&&r(Cp),e&&r(it),b(Zo),e&&r(Wp),e&&r(Vt),e&&r(Np),e&&r(Se),b(en),b(tn),e&&r(Vp),e&&r(ct),b(rn),b(on),e&&r(Mp),e&&r(ze),b(nn),b(an),e&&r(Gp),e&&r(Oe),b(cn),b(dn),e&&r(jp),e&&r(lt),b(pn),e&&r(Hp),e&&r(Gt),e&&r(Rp),e&&r($),b(mn),b(jt),b(fn),b(gn),b(un),b(hn),b(bn),b(vn),b($n),e&&r(Kp),e&&r(dt),b(yn),e&&r(Up),e&&r(pt),b(kn),e&&r(Yp),e&&r(C),b(wn),b(Ln),b(En),e&&r(Xp),e&&r(ft),b(Pn),e&&r(Jp),e&&r(W),b(Fn),b(Dn),b(Sn),e&&r(Qp),e&&r(P),b(zn),b(In),b(An),e&&r(Zp),e&&r(N),b(Cn),b(Wn),b(Nn),e&&r(em),e&&r(ut),b(Vn),e&&r(tm),e&&r(Be),b(Mn),e&&r(rm),e&&r(Ie),b(jn)}}}const O0={local:"utilities-for-generation",sections:[{local:"generate-outputs",sections:[{local:"transformers.generation_utils.GreedySearchDecoderOnlyOutput",title:"GreedySearchOutput"},{local:"transformers.generation_utils.SampleDecoderOnlyOutput",title:"SampleOutput"},{local:"transformers.generation_utils.BeamSearchDecoderOnlyOutput",title:"BeamSearchOutput"},{local:"transformers.generation_utils.BeamSampleDecoderOnlyOutput",title:"BeamSampleOutput"}],title:"Generate Outputs"},{local:"transformers.LogitsProcessor",title:"LogitsProcessor"},{local:"transformers.StoppingCriteria",title:"StoppingCriteria"},{local:"transformers.Constraint",title:"Constraints"},{local:"transformers.BeamScorer",title:"BeamSearch"},{local:"transformers.top_k_top_p_filtering",title:"Utilities"}],title:"Utilities for Generation"};function q0(kd){return P0(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class N0 extends x0{constructor(w){super();w0(this,w,q0,z0,L0,{})}}export{N0 as default,O0 as metadata};
