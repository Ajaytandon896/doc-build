import{S as zm,i as Vm,s as Hm,e as a,k as p,w as j,t as s,M as Wm,c as l,d as o,m as f,a as r,x as C,h as n,b as v,G as e,g as d,y as D,q,o as L,B as A,v as Gm,L as Fm}from"../chunks/vendor-hf-doc-builder.js";import{T as Rt}from"../chunks/Tip-hf-doc-builder.js";import{I as Ve}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as B}from"../chunks/CodeBlock-hf-doc-builder.js";import{F as Ym,M as Sm}from"../chunks/Markdown-hf-doc-builder.js";function Um(X){let c,$,m,E,w;return{c(){c=a("p"),$=s(`Once exported, a model can be optimized for inference via techniques such as
quantization and pruning. If you are interested in optimizing your models to run with
maximum efficiency, check out the `),m=a("a"),E=s(`\u{1F917} Optimum
library`),w=s("."),this.h()},l(_){c=l(_,"P",{});var x=r(c);$=n(x,`Once exported, a model can be optimized for inference via techniques such as
quantization and pruning. If you are interested in optimizing your models to run with
maximum efficiency, check out the `),m=l(x,"A",{href:!0,rel:!0});var b=r(m);E=n(b,`\u{1F917} Optimum
library`),b.forEach(o),w=n(x,"."),x.forEach(o),this.h()},h(){v(m,"href","https://github.com/huggingface/optimum"),v(m,"rel","nofollow")},m(_,x){d(_,c,x),e(c,$),e(c,m),e(m,E),e(c,w)},d(_){_&&o(c)}}}function Km(X){let c,$,m,E,w,_,x,b,k,T,I,y,O;return c=new B({props:{code:`from transformers import AutoTokenizer, AutoModelForSequenceClassification

# Load tokenizer and PyTorch weights form the Hub
tokenizer = AutoTokenizer.from_pretrained("distilbert-base-uncased")
pt_model = AutoModelForSequenceClassification.from_pretrained("distilbert-base-uncased")
# Save to disk
tokenizer.save_pretrained("local-pt-checkpoint")
pt_model.save_pretrained("local-pt-checkpoint")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load tokenizer and PyTorch weights form the Hub</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Save to disk</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.save_pretrained(<span class="hljs-string">&quot;local-pt-checkpoint&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model.save_pretrained(<span class="hljs-string">&quot;local-pt-checkpoint&quot;</span>)`}}),y=new B({props:{code:"python -m transformers.onnx --model=local-pt-checkpoint onnx/",highlighted:"python -m transformers.onnx --model=local-pt-checkpoint onnx/"}}),{c(){j(c.$$.fragment),$=p(),m=a("p"),E=s("Once the checkpoint is saved, we can export it to ONNX by pointing the "),w=a("code"),_=s("--model"),x=s(`
argument of the `),b=a("code"),k=s("transformers.onnx"),T=s(" package to the desired directory:"),I=p(),j(y.$$.fragment)},l(g){C(c.$$.fragment,g),$=f(g),m=l(g,"P",{});var N=r(m);E=n(N,"Once the checkpoint is saved, we can export it to ONNX by pointing the "),w=l(N,"CODE",{});var M=r(w);_=n(M,"--model"),M.forEach(o),x=n(N,`
argument of the `),b=l(N,"CODE",{});var R=r(b);k=n(R,"transformers.onnx"),R.forEach(o),T=n(N," package to the desired directory:"),N.forEach(o),I=f(g),C(y.$$.fragment,g)},m(g,N){D(c,g,N),d(g,$,N),d(g,m,N),e(m,E),e(m,w),e(w,_),e(m,x),e(m,b),e(b,k),e(m,T),d(g,I,N),D(y,g,N),O=!0},p:Fm,i(g){O||(q(c.$$.fragment,g),q(y.$$.fragment,g),O=!0)},o(g){L(c.$$.fragment,g),L(y.$$.fragment,g),O=!1},d(g){A(c,g),g&&o($),g&&o(m),g&&o(I),A(y,g)}}}function Jm(X){let c,$;return c=new Sm({props:{$$slots:{default:[Km]},$$scope:{ctx:X}}}),{c(){j(c.$$.fragment)},l(m){C(c.$$.fragment,m)},m(m,E){D(c,m,E),$=!0},p(m,E){const w={};E&2&&(w.$$scope={dirty:E,ctx:m}),c.$set(w)},i(m){$||(q(c.$$.fragment,m),$=!0)},o(m){L(c.$$.fragment,m),$=!1},d(m){A(c,m)}}}function Qm(X){let c,$,m,E,w,_,x,b,k,T,I,y,O;return c=new B({props:{code:`from transformers import AutoTokenizer, TFAutoModelForSequenceClassification

# Load tokenizer and TensorFlow weights from the Hub
tokenizer = AutoTokenizer.from_pretrained("distilbert-base-uncased")
tf_model = TFAutoModelForSequenceClassification.from_pretrained("distilbert-base-uncased")
# Save to disk
tokenizer.save_pretrained("local-tf-checkpoint")
tf_model.save_pretrained("local-tf-checkpoint")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load tokenizer and TensorFlow weights from the Hub</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Save to disk</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.save_pretrained(<span class="hljs-string">&quot;local-tf-checkpoint&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model.save_pretrained(<span class="hljs-string">&quot;local-tf-checkpoint&quot;</span>)`}}),y=new B({props:{code:"python -m transformers.onnx --model=local-tf-checkpoint onnx/",highlighted:"python -m transformers.onnx --model=local-tf-checkpoint onnx/"}}),{c(){j(c.$$.fragment),$=p(),m=a("p"),E=s("Once the checkpoint is saved, we can export it to ONNX by pointing the "),w=a("code"),_=s("--model"),x=s(`
argument of the `),b=a("code"),k=s("transformers.onnx"),T=s(" package to the desired directory:"),I=p(),j(y.$$.fragment)},l(g){C(c.$$.fragment,g),$=f(g),m=l(g,"P",{});var N=r(m);E=n(N,"Once the checkpoint is saved, we can export it to ONNX by pointing the "),w=l(N,"CODE",{});var M=r(w);_=n(M,"--model"),M.forEach(o),x=n(N,`
argument of the `),b=l(N,"CODE",{});var R=r(b);k=n(R,"transformers.onnx"),R.forEach(o),T=n(N," package to the desired directory:"),N.forEach(o),I=f(g),C(y.$$.fragment,g)},m(g,N){D(c,g,N),d(g,$,N),d(g,m,N),e(m,E),e(m,w),e(w,_),e(m,x),e(m,b),e(b,k),e(m,T),d(g,I,N),D(y,g,N),O=!0},p:Fm,i(g){O||(q(c.$$.fragment,g),q(y.$$.fragment,g),O=!0)},o(g){L(c.$$.fragment,g),L(y.$$.fragment,g),O=!1},d(g){A(c,g),g&&o($),g&&o(m),g&&o(I),A(y,g)}}}function Zm(X){let c,$;return c=new Sm({props:{$$slots:{default:[Qm]},$$scope:{ctx:X}}}),{c(){j(c.$$.fragment)},l(m){C(c.$$.fragment,m)},m(m,E){D(c,m,E),$=!0},p(m,E){const w={};E&2&&(w.$$scope={dirty:E,ctx:m}),c.$set(w)},i(m){$||(q(c.$$.fragment,m),$=!0)},o(m){L(c.$$.fragment,m),$=!1},d(m){A(c,m)}}}function eg(X){let c,$,m,E,w,_,x,b;return{c(){c=a("p"),$=s("The features that have a "),m=a("code"),E=s("with-past"),w=s(" suffix (like "),_=a("code"),x=s("causal-lm-with-past"),b=s(`) correspond to
model classes with precomputed hidden states (key and values in the attention blocks)
that can be used for fast autoregressive decoding.`)},l(k){c=l(k,"P",{});var T=r(c);$=n(T,"The features that have a "),m=l(T,"CODE",{});var I=r(m);E=n(I,"with-past"),I.forEach(o),w=n(T," suffix (like "),_=l(T,"CODE",{});var y=r(_);x=n(y,"causal-lm-with-past"),y.forEach(o),b=n(T,`) correspond to
model classes with precomputed hidden states (key and values in the attention blocks)
that can be used for fast autoregressive decoding.`),T.forEach(o)},m(k,T){d(k,c,T),e(c,$),e(c,m),e(m,E),e(c,w),e(c,_),e(_,x),e(c,b)},d(k){k&&o(c)}}}function tg(X){let c,$,m,E,w,_,x,b,k,T,I;return{c(){c=a("p"),$=s("For "),m=a("code"),E=s("VisionEncoderDecoder"),w=s(` type models, the encoder and decoder parts are
exported separately as two ONNX files named `),_=a("code"),x=s("encoder_model.onnx"),b=s(" and "),k=a("code"),T=s("decoder_model.onnx"),I=s(" respectively.")},l(y){c=l(y,"P",{});var O=r(c);$=n(O,"For "),m=l(O,"CODE",{});var g=r(m);E=n(g,"VisionEncoderDecoder"),g.forEach(o),w=n(O,` type models, the encoder and decoder parts are
exported separately as two ONNX files named `),_=l(O,"CODE",{});var N=r(_);x=n(N,"encoder_model.onnx"),N.forEach(o),b=n(O," and "),k=l(O,"CODE",{});var M=r(k);T=n(M,"decoder_model.onnx"),M.forEach(o),I=n(O," respectively."),O.forEach(o)},m(y,O){d(y,c,O),e(c,$),e(c,m),e(m,E),e(c,w),e(c,_),e(_,x),e(c,b),e(c,k),e(k,T),e(c,I)},d(y){y&&o(c)}}}function og(X){let c,$,m,E,w;return{c(){c=a("p"),$=s(`A good way to implement a custom ONNX configuration is to look at the existing
implementation in the `),m=a("code"),E=s("configuration_<model_name>.py"),w=s(" file of a similar architecture.")},l(_){c=l(_,"P",{});var x=r(c);$=n(x,`A good way to implement a custom ONNX configuration is to look at the existing
implementation in the `),m=l(x,"CODE",{});var b=r(m);E=n(b,"configuration_<model_name>.py"),b.forEach(o),w=n(x," file of a similar architecture."),x.forEach(o)},m(_,x){d(_,c,x),e(c,$),e(c,m),e(m,E),e(c,w)},d(_){_&&o(c)}}}function sg(X){let c,$,m,E,w,_,x,b,k,T,I,y,O,g,N,M,R,Q,W,He,K,We,Ge;return{c(){c=a("p"),$=s("Notice that "),m=a("code"),E=s("inputs"),w=s(" property for "),_=a("code"),x=s("DistilBertOnnxConfig"),b=s(" returns an "),k=a("code"),T=s("OrderedDict"),I=s(`. This
ensures that the inputs are matched with their relative position within the
`),y=a("code"),O=s("PreTrainedModel.forward()"),g=s(` method when tracing the graph. We recommend using an
`),N=a("code"),M=s("OrderedDict"),R=s(" for the "),Q=a("code"),W=s("inputs"),He=s(" and "),K=a("code"),We=s("outputs"),Ge=s(` properties when implementing custom ONNX
configurations.`)},l(Z){c=l(Z,"P",{});var P=r(c);$=n(P,"Notice that "),m=l(P,"CODE",{});var Ft=r(m);E=n(Ft,"inputs"),Ft.forEach(o),w=n(P," property for "),_=l(P,"CODE",{});var Ye=r(_);x=n(Ye,"DistilBertOnnxConfig"),Ye.forEach(o),b=n(P," returns an "),k=l(P,"CODE",{});var J=r(k);T=n(J,"OrderedDict"),J.forEach(o),I=n(P,`. This
ensures that the inputs are matched with their relative position within the
`),y=l(P,"CODE",{});var St=r(y);O=n(St,"PreTrainedModel.forward()"),St.forEach(o),g=n(P,` method when tracing the graph. We recommend using an
`),N=l(P,"CODE",{});var fe=r(N);M=n(fe,"OrderedDict"),fe.forEach(o),R=n(P," for the "),Q=l(P,"CODE",{});var ve=r(Q);W=n(ve,"inputs"),ve.forEach(o),He=n(P," and "),K=l(P,"CODE",{});var zt=r(K);We=n(zt,"outputs"),zt.forEach(o),Ge=n(P,` properties when implementing custom ONNX
configurations.`),P.forEach(o)},m(Z,P){d(Z,c,P),e(c,$),e(c,m),e(m,E),e(c,w),e(c,_),e(_,x),e(c,b),e(c,k),e(k,T),e(c,I),e(c,y),e(y,O),e(c,g),e(c,N),e(N,M),e(c,R),e(c,Q),e(Q,W),e(c,He),e(c,K),e(K,We),e(c,Ge)},d(Z){Z&&o(c)}}}function ng(X){let c,$,m,E,w,_,x,b;return{c(){c=a("p"),$=s("All of the base properties and methods associated with "),m=a("a"),E=s("OnnxConfig"),w=s(` and
the other configuration classes can be overriden if needed. Check out `),_=a("code"),x=s("BartOnnxConfig"),b=s(`
for an advanced example.`),this.h()},l(k){c=l(k,"P",{});var T=r(c);$=n(T,"All of the base properties and methods associated with "),m=l(T,"A",{href:!0});var I=r(m);E=n(I,"OnnxConfig"),I.forEach(o),w=n(T,` and
the other configuration classes can be overriden if needed. Check out `),_=l(T,"CODE",{});var y=r(_);x=n(y,"BartOnnxConfig"),y.forEach(o),b=n(T,`
for an advanced example.`),T.forEach(o),this.h()},h(){v(m,"href","/docs/transformers/v4.23.1/en/main_classes/onnx#transformers.onnx.OnnxConfig")},m(k,T){d(k,c,T),e(c,$),e(c,m),e(m,E),e(c,w),e(c,_),e(_,x),e(c,b)},d(k){k&&o(c)}}}function ag(X){let c,$,m,E,w,_,x,b,k,T,I;return{c(){c=a("p"),$=s(`If your model is larger than 2GB, you will see that many additional files are created
during the export. This is `),m=a("em"),E=s("expected"),w=s(" because ONNX uses "),_=a("a"),x=s(`Protocol
Buffers`),b=s(` to store the model and these
have a size limit of 2GB. See the `),k=a("a"),T=s(`ONNX
documentation`),I=s(` for
instructions on how to load models with external data.`),this.h()},l(y){c=l(y,"P",{});var O=r(c);$=n(O,`If your model is larger than 2GB, you will see that many additional files are created
during the export. This is `),m=l(O,"EM",{});var g=r(m);E=n(g,"expected"),g.forEach(o),w=n(O," because ONNX uses "),_=l(O,"A",{href:!0,rel:!0});var N=r(_);x=n(N,`Protocol
Buffers`),N.forEach(o),b=n(O,` to store the model and these
have a size limit of 2GB. See the `),k=l(O,"A",{href:!0,rel:!0});var M=r(k);T=n(M,`ONNX
documentation`),M.forEach(o),I=n(O,` for
instructions on how to load models with external data.`),O.forEach(o),this.h()},h(){v(_,"href","https://developers.google.com/protocol-buffers/"),v(_,"rel","nofollow"),v(k,"href","https://github.com/onnx/onnx/blob/master/docs/ExternalData.md"),v(k,"rel","nofollow")},m(y,O){d(y,c,O),e(c,$),e(c,m),e(m,E),e(c,w),e(c,_),e(_,x),e(c,b),e(c,k),e(k,T),e(c,I)},d(y){y&&o(c)}}}function lg(X){let c,$,m,E,w,_,x,b,k,T,I,y,O,g,N,M,R,Q,W,He,K,We,Ge,Z,P,Ft,Ye,J,St,fe,ve,zt,Zl,ra,Vt,er,ia,h,bo,tr,or,ko,sr,nr,yo,ar,lr,Oo,rr,ir,To,pr,fr,No,dr,cr,jo,hr,ur,Co,mr,gr,Do,_r,vr,qo,Er,$r,Lo,wr,xr,Ao,br,kr,Io,yr,Or,Po,Tr,Nr,Xo,jr,Cr,Bo,Dr,qr,Mo,Lr,Ar,Ro,Ir,Pr,Fo,Xr,Br,So,Mr,Rr,zo,Fr,Sr,Vo,zr,Vr,Ho,Hr,Wr,Wo,Gr,Yr,Go,Ur,Kr,Yo,Jr,Qr,Uo,Zr,ei,Ko,ti,oi,Jo,si,ni,Qo,ai,li,Zo,ri,ii,es,pi,fi,ts,di,ci,os,hi,ui,ss,mi,gi,ns,_i,vi,as,Ei,$i,ls,wi,xi,rs,bi,ki,is,yi,Oi,ps,Ti,Ni,fs,ji,Ci,ds,Di,qi,cs,Li,Ai,hs,Ii,Pi,us,Xi,Bi,ms,Mi,Ri,gs,Fi,Si,_s,zi,Vi,vs,Hi,Wi,Es,Gi,Yi,$s,Ui,Ki,ws,Ji,Qi,xs,Zi,ep,bs,tp,op,ks,sp,np,ys,ap,pa,Ht,lp,fa,Ee,Ue,rp,Os,ip,pp,fp,Ts,dp,da,de,$e,Ns,Ke,cp,js,hp,ca,Wt,up,ha,Je,ua,we,mp,Cs,gp,_p,ma,Qe,ga,Gt,vp,_a,Ze,va,Yt,Ep,Ea,et,$a,ee,$p,Ds,wp,xp,qs,bp,kp,wa,G,yp,Ls,Op,Tp,tt,Np,jp,ot,Cp,Dp,xa,st,ba,xe,qp,As,Lp,Ap,ka,nt,ya,be,Ip,at,Pp,Xp,Oa,lt,Ta,Ut,Bp,Na,ke,ja,ce,ye,Is,rt,Mp,Ps,Rp,Ca,te,Fp,Xs,Sp,zp,Bs,Vp,Hp,Da,Oe,Ms,it,Rs,Wp,Gp,Fs,Yp,Up,F,pt,ft,Ss,Kp,Jp,zs,Qp,Zp,Vs,Hs,ef,tf,dt,ct,Ws,of,sf,Gs,nf,af,Ys,Us,lf,rf,ht,Ks,Js,pf,ff,Qs,Zs,df,cf,ut,en,tn,hf,uf,on,sn,mf,gf,mt,gt,nn,_f,vf,an,Ef,$f,ln,rn,wf,xf,_t,pn,fn,bf,kf,dn,cn,yf,Of,vt,hn,un,Tf,Nf,mn,gn,jf,qa,Te,Cf,Kt,Df,qf,La,Et,Aa,oe,Lf,_n,Af,If,vn,Pf,Xf,Ia,$t,Pa,Jt,Bf,Xa,wt,Ba,Y,Mf,En,Rf,Ff,$n,Sf,zf,wn,Vf,Hf,Ma,Ne,Ra,je,Fa,he,Ce,xn,xt,Wf,bn,Gf,Sa,Qt,Yf,za,se,kn,Uf,Kf,yn,Jf,Qf,On,Zf,Va,Zt,ed,Ha,ue,De,Tn,bt,td,Nn,od,Wa,eo,sd,Ga,ne,to,nd,oo,ad,ld,so,rd,no,id,pd,ao,fd,lo,dd,Ya,qe,Ua,Le,cd,jn,hd,ud,Ka,kt,Ja,z,md,Cn,gd,_d,Dn,vd,Ed,qn,$d,wd,Ln,xd,bd,Qa,Ae,Za,ro,kd,el,yt,tl,io,yd,ol,Ot,sl,po,Od,nl,Tt,al,V,Td,An,Nd,jd,In,Cd,Dd,Pn,qd,Ld,Xn,Ad,Id,ll,Nt,rl,Ie,il,me,Pe,Bn,jt,Pd,Mn,Xd,pl,ae,Bd,Rn,Md,Rd,Fn,Fd,Sd,fl,Ct,dl,S,zd,Sn,Vd,Hd,zn,Wd,Gd,Vn,Yd,Ud,Hn,Kd,Jd,Wn,Qd,Zd,cl,Dt,hl,Xe,ul,ge,Be,Gn,qt,ec,Yn,tc,ml,le,oc,Un,sc,nc,Kn,ac,lc,gl,Lt,_l,Me,rc,fo,ic,pc,vl,_e,Re,Jn,At,fc,Qn,dc,El,co,cc,$l,re,It,hc,Zn,uc,mc,gc,ho,_c,ea,vc,Ec,uo,$c,ta,wc,wl,Fe,xc,Pt,bc,kc,xl;return _=new Ve({}),R=new Rt({props:{$$slots:{default:[Um]},$$scope:{ctx:X}}}),Ke=new Ve({}),Je=new B({props:{code:"pip install transformers[onnx]",highlighted:"pip install transformers[onnx]"}}),Qe=new B({props:{code:`python -m transformers.onnx --help

usage: Hugging Face Transformers ONNX exporter [-h] -m MODEL [--feature {causal-lm, ...}] [--opset OPSET] [--atol ATOL] output

positional arguments:
  output                Path indicating where to store generated ONNX model.

optional arguments:
  -h, --help            show this help message and exit
  -m MODEL, --model MODEL
                        Model ID on huggingface.co or path on disk to load model from.
  --feature {causal-lm, ...}
                        The type of features to export the model with.
  --opset OPSET         ONNX opset version to export the model with.
  --atol ATOL           Absolute difference tolerence when validating the model.`,highlighted:`python -m transformers.onnx --<span class="hljs-built_in">help</span>

usage: Hugging Face Transformers ONNX exporter [-h] -m MODEL [--feature {causal-lm, ...}] [--opset OPSET] [--atol ATOL] output

positional arguments:
  output                Path indicating <span class="hljs-built_in">where</span> to store generated ONNX model.

optional arguments:
  -h, --<span class="hljs-built_in">help</span>            show this <span class="hljs-built_in">help</span> message and <span class="hljs-built_in">exit</span>
  -m MODEL, --model MODEL
                        Model ID on huggingface.co or path on disk to load model from.
  --feature {causal-lm, ...}
                        The <span class="hljs-built_in">type</span> of features to <span class="hljs-built_in">export</span> the model with.
  --opset OPSET         ONNX opset version to <span class="hljs-built_in">export</span> the model with.
  --atol ATOL           Absolute difference tolerence when validating the model.`}}),Ze=new B({props:{code:"python -m transformers.onnx --model=distilbert-base-uncased onnx/",highlighted:"python -m transformers.onnx --model=distilbert-base-uncased onnx/"}}),et=new B({props:{code:`Validating ONNX model...
        -[\u2713] ONNX model output names match reference model ({'last_hidden_state'})
        - Validating ONNX Model output "last_hidden_state":
                -[\u2713] (2, 8, 768) matches (2, 8, 768)
                -[\u2713] all values close (atol: 1e-05)
All good, model saved at: onnx/model.onnx`,highlighted:`Validating ONNX model...
        -[\u2713] ONNX model output names match reference model ({<span class="hljs-string">&#x27;last_hidden_state&#x27;</span>})
        - Validating ONNX Model output <span class="hljs-string">&quot;last_hidden_state&quot;</span>:
                -[\u2713] (2, 8, 768) matches (2, 8, 768)
                -[\u2713] all values close (atol: 1e-05)
All good, model saved at: onnx/model.onnx`}}),st=new B({props:{code:`from transformers import AutoTokenizer
from onnxruntime import InferenceSession

tokenizer = AutoTokenizer.from_pretrained("distilbert-base-uncased")
session = InferenceSession("onnx/model.onnx")
# ONNX Runtime expects NumPy arrays as input
inputs = tokenizer("Using DistilBERT with ONNX Runtime!", return_tensors="np")
outputs = session.run(output_names=["last_hidden_state"], input_feed=dict(inputs))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> onnxruntime <span class="hljs-keyword">import</span> InferenceSession

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>session = InferenceSession(<span class="hljs-string">&quot;onnx/model.onnx&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># ONNX Runtime expects NumPy arrays as input</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Using DistilBERT with ONNX Runtime!&quot;</span>, return_tensors=<span class="hljs-string">&quot;np&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = session.run(output_names=[<span class="hljs-string">&quot;last_hidden_state&quot;</span>], input_feed=<span class="hljs-built_in">dict</span>(inputs))`}}),nt=new B({props:{code:`from transformers.models.distilbert import DistilBertConfig, DistilBertOnnxConfig

config = DistilBertConfig()
onnx_config = DistilBertOnnxConfig(config)
print(list(onnx_config.outputs.keys()))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers.models.distilbert <span class="hljs-keyword">import</span> DistilBertConfig, DistilBertOnnxConfig

<span class="hljs-meta">&gt;&gt;&gt; </span>config = DistilBertConfig()
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_config = DistilBertOnnxConfig(config)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(onnx_config.outputs.keys()))
[<span class="hljs-string">&quot;last_hidden_state&quot;</span>]`}}),lt=new B({props:{code:"python -m transformers.onnx --model=keras-io/transformers-qa onnx/",highlighted:"python -m transformers.onnx --model=keras-io/transformers-qa onnx/"}}),ke=new Ym({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[Zm],pytorch:[Jm]},$$scope:{ctx:X}}}),rt=new Ve({}),Et=new B({props:{code:`from transformers.onnx.features import FeaturesManager

distilbert_features = list(FeaturesManager.get_supported_features_for_model_type("distilbert").keys())
print(distilbert_features)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers.onnx.features <span class="hljs-keyword">import</span> FeaturesManager

<span class="hljs-meta">&gt;&gt;&gt; </span>distilbert_features = <span class="hljs-built_in">list</span>(FeaturesManager.get_supported_features_for_model_type(<span class="hljs-string">&quot;distilbert&quot;</span>).keys())
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(distilbert_features)
[<span class="hljs-string">&quot;default&quot;</span>, <span class="hljs-string">&quot;masked-lm&quot;</span>, <span class="hljs-string">&quot;causal-lm&quot;</span>, <span class="hljs-string">&quot;sequence-classification&quot;</span>, <span class="hljs-string">&quot;token-classification&quot;</span>, <span class="hljs-string">&quot;question-answering&quot;</span>]`}}),$t=new B({props:{code:`python -m transformers.onnx --model=distilbert-base-uncased-finetuned-sst-2-english \\
                            --feature=sequence-classification onnx/`,highlighted:`python -m transformers.onnx --model=distilbert-base-uncased-finetuned-sst-2-english \\
                            --feature=sequence-classification onnx/`}}),wt=new B({props:{code:`Validating ONNX model...
        -[\u2713] ONNX model output names match reference model ({'logits'})
        - Validating ONNX Model output "logits":
                -[\u2713] (2, 2) matches (2, 2)
                -[\u2713] all values close (atol: 1e-05)
All good, model saved at: onnx/model.onnx`,highlighted:`Validating ONNX model...
        -[\u2713] ONNX model output names match reference model ({<span class="hljs-string">&#x27;logits&#x27;</span>})
        - Validating ONNX Model output <span class="hljs-string">&quot;logits&quot;</span>:
                -[\u2713] (2, 2) matches (2, 2)
                -[\u2713] all values close (atol: 1e-05)
All good, model saved at: onnx/model.onnx`}}),Ne=new Rt({props:{$$slots:{default:[eg]},$$scope:{ctx:X}}}),je=new Rt({props:{$$slots:{default:[tg]},$$scope:{ctx:X}}}),xt=new Ve({}),bt=new Ve({}),qe=new Rt({props:{$$slots:{default:[og]},$$scope:{ctx:X}}}),kt=new B({props:{code:`from typing import Mapping, OrderedDict
from transformers.onnx import OnnxConfig


class DistilBertOnnxConfig(OnnxConfig):
    @property
    def inputs(self) -> Mapping[str, Mapping[int, str]]:
        return OrderedDict(
            [
                ("input_ids", {0: "batch", 1: "sequence"}),
                ("attention_mask", {0: "batch", 1: "sequence"}),
            ]
        )`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> Mapping, OrderedDict
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers.onnx <span class="hljs-keyword">import</span> OnnxConfig


<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">class</span> <span class="hljs-title class_">DistilBertOnnxConfig</span>(<span class="hljs-title class_ inherited__">OnnxConfig</span>):
<span class="hljs-meta">... </span>    @<span class="hljs-built_in">property</span>
<span class="hljs-meta">... </span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inputs</span>(<span class="hljs-params">self</span>) -&gt; Mapping[<span class="hljs-built_in">str</span>, Mapping[<span class="hljs-built_in">int</span>, <span class="hljs-built_in">str</span>]]:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> OrderedDict(
<span class="hljs-meta">... </span>            [
<span class="hljs-meta">... </span>                (<span class="hljs-string">&quot;input_ids&quot;</span>, {<span class="hljs-number">0</span>: <span class="hljs-string">&quot;batch&quot;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&quot;sequence&quot;</span>}),
<span class="hljs-meta">... </span>                (<span class="hljs-string">&quot;attention_mask&quot;</span>, {<span class="hljs-number">0</span>: <span class="hljs-string">&quot;batch&quot;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&quot;sequence&quot;</span>}),
<span class="hljs-meta">... </span>            ]
<span class="hljs-meta">... </span>        )`}}),Ae=new Rt({props:{$$slots:{default:[sg]},$$scope:{ctx:X}}}),yt=new B({props:{code:`from transformers import AutoConfig

config = AutoConfig.from_pretrained("distilbert-base-uncased")
onnx_config = DistilBertOnnxConfig(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_config = DistilBertOnnxConfig(config)`}}),Ot=new B({props:{code:"print(onnx_config.default_onnx_opset)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(onnx_config.default_onnx_opset)
<span class="hljs-number">11</span>`}}),Tt=new B({props:{code:"print(onnx_config.outputs)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(onnx_config.outputs)
OrderedDict([(<span class="hljs-string">&quot;last_hidden_state&quot;</span>, {<span class="hljs-number">0</span>: <span class="hljs-string">&quot;batch&quot;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&quot;sequence&quot;</span>})])`}}),Nt=new B({props:{code:`from transformers import AutoConfig

config = AutoConfig.from_pretrained("distilbert-base-uncased")
onnx_config_for_seq_clf = DistilBertOnnxConfig(config, task="sequence-classification")
print(onnx_config_for_seq_clf.outputs)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_config_for_seq_clf = DistilBertOnnxConfig(config, task=<span class="hljs-string">&quot;sequence-classification&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(onnx_config_for_seq_clf.outputs)
OrderedDict([(<span class="hljs-string">&#x27;logits&#x27;</span>, {<span class="hljs-number">0</span>: <span class="hljs-string">&#x27;batch&#x27;</span>})])`}}),Ie=new Rt({props:{$$slots:{default:[ng]},$$scope:{ctx:X}}}),jt=new Ve({}),Ct=new B({props:{code:`from pathlib import Path
from transformers.onnx import export
from transformers import AutoTokenizer, AutoModel

onnx_path = Path("model.onnx")
model_ckpt = "distilbert-base-uncased"
base_model = AutoModel.from_pretrained(model_ckpt)
tokenizer = AutoTokenizer.from_pretrained(model_ckpt)

onnx_inputs, onnx_outputs = export(tokenizer, base_model, onnx_config, onnx_config.default_onnx_opset, onnx_path)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers.onnx <span class="hljs-keyword">import</span> export
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_path = Path(<span class="hljs-string">&quot;model.onnx&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model_ckpt = <span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>base_model = AutoModel.from_pretrained(model_ckpt)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(model_ckpt)

<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_inputs, onnx_outputs = export(tokenizer, base_model, onnx_config, onnx_config.default_onnx_opset, onnx_path)`}}),Dt=new B({props:{code:`import onnx

onnx_model = onnx.load("model.onnx")
onnx.checker.check_model(onnx_model)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> onnx

<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_model = onnx.load(<span class="hljs-string">&quot;model.onnx&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx.checker.check_model(onnx_model)`}}),Xe=new Rt({props:{$$slots:{default:[ag]},$$scope:{ctx:X}}}),qt=new Ve({}),Lt=new B({props:{code:`from transformers.onnx import validate_model_outputs

validate_model_outputs(
    onnx_config, tokenizer, base_model, onnx_path, onnx_outputs, onnx_config.atol_for_validation
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers.onnx <span class="hljs-keyword">import</span> validate_model_outputs

<span class="hljs-meta">&gt;&gt;&gt; </span>validate_model_outputs(
<span class="hljs-meta">... </span>    onnx_config, tokenizer, base_model, onnx_path, onnx_outputs, onnx_config.atol_for_validation
<span class="hljs-meta">... </span>)`}}),At=new Ve({}),{c(){c=a("meta"),$=p(),m=a("h1"),E=a("a"),w=a("span"),j(_.$$.fragment),x=p(),b=a("span"),k=s("Export to ONNX"),T=p(),I=a("p"),y=s(`If you need to deploy \u{1F917} Transformers models in production environments, we recommend
exporting them to a serialized format that can be loaded and executed on specialized
runtimes and hardware. In this guide, we\u2019ll show you how to export \u{1F917} Transformers
models to `),O=a("a"),g=s("ONNX (Open Neural Network eXchange)"),N=s("."),M=p(),j(R.$$.fragment),Q=p(),W=a("p"),He=s(`ONNX is an open standard that defines a common set of operators and a common file format
to represent deep learning models in a wide variety of frameworks, including PyTorch and
TensorFlow. When a model is exported to the ONNX format, these operators are used to
construct a computational graph (often called an `),K=a("em"),We=s("intermediate representation"),Ge=s(`) which
represents the flow of data through the neural network.`),Z=p(),P=a("p"),Ft=s(`By exposing a graph with standardized operators and data types, ONNX makes it easy to
switch between frameworks. For example, a model trained in PyTorch can be exported to
ONNX format and then imported in TensorFlow (and vice versa).`),Ye=p(),J=a("p"),St=s("\u{1F917} Transformers provides a "),fe=a("a"),ve=a("code"),zt=s("transformers.onnx"),Zl=s(` package that enables
you to convert model checkpoints to an ONNX graph by leveraging configuration objects.
These configuration objects come ready made for a number of model architectures, and are
designed to be easily extendable to other architectures.`),ra=p(),Vt=a("p"),er=s("Ready-made configurations include the following architectures:"),ia=p(),h=a("ul"),bo=a("li"),tr=s("ALBERT"),or=p(),ko=a("li"),sr=s("BART"),nr=p(),yo=a("li"),ar=s("BEiT"),lr=p(),Oo=a("li"),rr=s("BERT"),ir=p(),To=a("li"),pr=s("BigBird"),fr=p(),No=a("li"),dr=s("BigBird-Pegasus"),cr=p(),jo=a("li"),hr=s("Blenderbot"),ur=p(),Co=a("li"),mr=s("BlenderbotSmall"),gr=p(),Do=a("li"),_r=s("BLOOM"),vr=p(),qo=a("li"),Er=s("CamemBERT"),$r=p(),Lo=a("li"),wr=s("CLIP"),xr=p(),Ao=a("li"),br=s("CodeGen"),kr=p(),Io=a("li"),yr=s("Conditional DETR"),Or=p(),Po=a("li"),Tr=s("ConvBERT"),Nr=p(),Xo=a("li"),jr=s("ConvNeXT"),Cr=p(),Bo=a("li"),Dr=s("Data2VecText"),qr=p(),Mo=a("li"),Lr=s("Data2VecVision"),Ar=p(),Ro=a("li"),Ir=s("DeBERTa"),Pr=p(),Fo=a("li"),Xr=s("DeBERTa-v2"),Br=p(),So=a("li"),Mr=s("DeiT"),Rr=p(),zo=a("li"),Fr=s("DETR"),Sr=p(),Vo=a("li"),zr=s("DistilBERT"),Vr=p(),Ho=a("li"),Hr=s("ELECTRA"),Wr=p(),Wo=a("li"),Gr=s("ERNIE"),Yr=p(),Go=a("li"),Ur=s("FlauBERT"),Kr=p(),Yo=a("li"),Jr=s("GPT Neo"),Qr=p(),Uo=a("li"),Zr=s("GPT-J"),ei=p(),Ko=a("li"),ti=s("GroupViT"),oi=p(),Jo=a("li"),si=s("I-BERT"),ni=p(),Qo=a("li"),ai=s("LayoutLM"),li=p(),Zo=a("li"),ri=s("LayoutLMv3"),ii=p(),es=a("li"),pi=s("LeViT"),fi=p(),ts=a("li"),di=s("Longformer"),ci=p(),os=a("li"),hi=s("LongT5"),ui=p(),ss=a("li"),mi=s("M2M100"),gi=p(),ns=a("li"),_i=s("Marian"),vi=p(),as=a("li"),Ei=s("mBART"),$i=p(),ls=a("li"),wi=s("MobileBERT"),xi=p(),rs=a("li"),bi=s("MobileViT"),ki=p(),is=a("li"),yi=s("MT5"),Oi=p(),ps=a("li"),Ti=s("OpenAI GPT-2"),Ni=p(),fs=a("li"),ji=s("OWL-ViT"),Ci=p(),ds=a("li"),Di=s("Perceiver"),qi=p(),cs=a("li"),Li=s("PLBart"),Ai=p(),hs=a("li"),Ii=s("ResNet"),Pi=p(),us=a("li"),Xi=s("RoBERTa"),Bi=p(),ms=a("li"),Mi=s("RoFormer"),Ri=p(),gs=a("li"),Fi=s("SegFormer"),Si=p(),_s=a("li"),zi=s("SqueezeBERT"),Vi=p(),vs=a("li"),Hi=s("Swin Transformer"),Wi=p(),Es=a("li"),Gi=s("T5"),Yi=p(),$s=a("li"),Ui=s("Vision Encoder decoder"),Ki=p(),ws=a("li"),Ji=s("ViT"),Qi=p(),xs=a("li"),Zi=s("XLM"),ep=p(),bs=a("li"),tp=s("XLM-RoBERTa"),op=p(),ks=a("li"),sp=s("XLM-RoBERTa-XL"),np=p(),ys=a("li"),ap=s("YOLOS"),pa=p(),Ht=a("p"),lp=s("In the next two sections, we\u2019ll show you how to:"),fa=p(),Ee=a("ul"),Ue=a("li"),rp=s("Export a supported model using the "),Os=a("code"),ip=s("transformers.onnx"),pp=s(" package."),fp=p(),Ts=a("li"),dp=s("Export a custom model for an unsupported architecture."),da=p(),de=a("h2"),$e=a("a"),Ns=a("span"),j(Ke.$$.fragment),cp=p(),js=a("span"),hp=s("Exporting a model to ONNX"),ca=p(),Wt=a("p"),up=s(`To export a \u{1F917} Transformers model to ONNX, you\u2019ll first need to install some extra
dependencies:`),ha=p(),j(Je.$$.fragment),ua=p(),we=a("p"),mp=s("The "),Cs=a("code"),gp=s("transformers.onnx"),_p=s(" package can then be used as a Python module:"),ma=p(),j(Qe.$$.fragment),ga=p(),Gt=a("p"),vp=s("Exporting a checkpoint using a ready-made configuration can be done as follows:"),_a=p(),j(Ze.$$.fragment),va=p(),Yt=a("p"),Ep=s("You should see the following logs:"),Ea=p(),j(et.$$.fragment),$a=p(),ee=a("p"),$p=s("This exports an ONNX graph of the checkpoint defined by the "),Ds=a("code"),wp=s("--model"),xp=s(` argument. In this
example, it is `),qs=a("code"),bp=s("distilbert-base-uncased"),kp=s(`, but it can be any checkpoint on the Hugging
Face Hub or one that\u2019s stored locally.`),wa=p(),G=a("p"),yp=s("The resulting "),Ls=a("code"),Op=s("model.onnx"),Tp=s(" file can then be run on one of the "),tt=a("a"),Np=s(`many
accelerators`),jp=s(` that support the ONNX
standard. For example, we can load and run the model with `),ot=a("a"),Cp=s(`ONNX
Runtime`),Dp=s(" as follows:"),xa=p(),j(st.$$.fragment),ba=p(),xe=a("p"),qp=s("The required output names (like "),As=a("code"),Lp=s('["last_hidden_state"]'),Ap=s(`) can be obtained by taking a
look at the ONNX configuration of each model. For example, for DistilBERT we have:`),ka=p(),j(nt.$$.fragment),ya=p(),be=a("p"),Ip=s(`The process is identical for TensorFlow checkpoints on the Hub. For example, we can
export a pure TensorFlow checkpoint from the `),at=a("a"),Pp=s(`Keras
organization`),Xp=s(" as follows:"),Oa=p(),j(lt.$$.fragment),Ta=p(),Ut=a("p"),Bp=s(`To export a model that\u2019s stored locally, you\u2019ll need to have the model\u2019s weights and
tokenizer files stored in a directory. For example, we can load and save a checkpoint as
follows:`),Na=p(),j(ke.$$.fragment),ja=p(),ce=a("h2"),ye=a("a"),Is=a("span"),j(rt.$$.fragment),Mp=p(),Ps=a("span"),Rp=s("Selecting features for different model tasks"),Ca=p(),te=a("p"),Fp=s("Each ready-made configuration comes with a set of "),Xs=a("em"),Sp=s("features"),zp=s(` that enable you to export
models for different types of tasks. As shown in the table below, each feature is
associated with a different `),Bs=a("code"),Vp=s("AutoClass"),Hp=s(":"),Da=p(),Oe=a("table"),Ms=a("thead"),it=a("tr"),Rs=a("th"),Wp=s("Feature"),Gp=p(),Fs=a("th"),Yp=s("Auto Class"),Up=p(),F=a("tbody"),pt=a("tr"),ft=a("td"),Ss=a("code"),Kp=s("causal-lm"),Jp=s(", "),zs=a("code"),Qp=s("causal-lm-with-past"),Zp=p(),Vs=a("td"),Hs=a("code"),ef=s("AutoModelForCausalLM"),tf=p(),dt=a("tr"),ct=a("td"),Ws=a("code"),of=s("default"),sf=s(", "),Gs=a("code"),nf=s("default-with-past"),af=p(),Ys=a("td"),Us=a("code"),lf=s("AutoModel"),rf=p(),ht=a("tr"),Ks=a("td"),Js=a("code"),pf=s("masked-lm"),ff=p(),Qs=a("td"),Zs=a("code"),df=s("AutoModelForMaskedLM"),cf=p(),ut=a("tr"),en=a("td"),tn=a("code"),hf=s("question-answering"),uf=p(),on=a("td"),sn=a("code"),mf=s("AutoModelForQuestionAnswering"),gf=p(),mt=a("tr"),gt=a("td"),nn=a("code"),_f=s("seq2seq-lm"),vf=s(", "),an=a("code"),Ef=s("seq2seq-lm-with-past"),$f=p(),ln=a("td"),rn=a("code"),wf=s("AutoModelForSeq2SeqLM"),xf=p(),_t=a("tr"),pn=a("td"),fn=a("code"),bf=s("sequence-classification"),kf=p(),dn=a("td"),cn=a("code"),yf=s("AutoModelForSequenceClassification"),Of=p(),vt=a("tr"),hn=a("td"),un=a("code"),Tf=s("token-classification"),Nf=p(),mn=a("td"),gn=a("code"),jf=s("AutoModelForTokenClassification"),qa=p(),Te=a("p"),Cf=s(`For each configuration, you can find the list of supported features via the
`),Kt=a("a"),Df=s("FeaturesManager"),qf=s(". For example, for DistilBERT we have:"),La=p(),j(Et.$$.fragment),Aa=p(),oe=a("p"),Lf=s("You can then pass one of these features to the "),_n=a("code"),Af=s("--feature"),If=s(` argument in the
`),vn=a("code"),Pf=s("transformers.onnx"),Xf=s(` package. For example, to export a text-classification model we can
pick a fine-tuned model from the Hub and run:`),Ia=p(),j($t.$$.fragment),Pa=p(),Jt=a("p"),Bf=s("This displays the following logs:"),Xa=p(),j(wt.$$.fragment),Ba=p(),Y=a("p"),Mf=s("Notice that in this case, the output names from the fine-tuned model are "),En=a("code"),Rf=s("logits"),Ff=s(`
instead of the `),$n=a("code"),Sf=s("last_hidden_state"),zf=s(" we saw with the "),wn=a("code"),Vf=s("distilbert-base-uncased"),Hf=s(` checkpoint
earlier. This is expected since the fine-tuned model has a sequence classification head.`),Ma=p(),j(Ne.$$.fragment),Ra=p(),j(je.$$.fragment),Fa=p(),he=a("h2"),Ce=a("a"),xn=a("span"),j(xt.$$.fragment),Wf=p(),bn=a("span"),Gf=s("Exporting a model for an unsupported architecture"),Sa=p(),Qt=a("p"),Yf=s(`If you wish to export a model whose architecture is not natively supported by the
library, there are three main steps to follow:`),za=p(),se=a("ol"),kn=a("li"),Uf=s("Implement a custom ONNX configuration."),Kf=p(),yn=a("li"),Jf=s("Export the model to ONNX."),Qf=p(),On=a("li"),Zf=s("Validate the outputs of the PyTorch and exported models."),Va=p(),Zt=a("p"),ed=s(`In this section, we\u2019ll look at how DistilBERT was implemented to show what\u2019s involved
with each step.`),Ha=p(),ue=a("h3"),De=a("a"),Tn=a("span"),j(bt.$$.fragment),td=p(),Nn=a("span"),od=s("Implementing a custom ONNX configuration"),Wa=p(),eo=a("p"),sd=s(`Let\u2019s start with the ONNX configuration object. We provide three abstract classes that
you should inherit from, depending on the type of model architecture you wish to export:`),Ga=p(),ne=a("ul"),to=a("li"),nd=s("Encoder-based models inherit from "),oo=a("a"),ad=s("OnnxConfig"),ld=p(),so=a("li"),rd=s("Decoder-based models inherit from "),no=a("a"),id=s("OnnxConfigWithPast"),pd=p(),ao=a("li"),fd=s("Encoder-decoder models inherit from "),lo=a("a"),dd=s("OnnxSeq2SeqConfigWithPast"),Ya=p(),j(qe.$$.fragment),Ua=p(),Le=a("p"),cd=s(`Since DistilBERT is an encoder-based model, its configuration inherits from
`),jn=a("code"),hd=s("OnnxConfig"),ud=s(":"),Ka=p(),j(kt.$$.fragment),Ja=p(),z=a("p"),md=s("Every configuration object must implement the "),Cn=a("code"),gd=s("inputs"),_d=s(` property and return a mapping,
where each key corresponds to an expected input, and each value indicates the axis of
that input. For DistilBERT, we can see that two inputs are required: `),Dn=a("code"),vd=s("input_ids"),Ed=s(` and
`),qn=a("code"),$d=s("attention_mask"),wd=s(". These inputs have the same shape of "),Ln=a("code"),xd=s("(batch_size, sequence_length)"),bd=s(`
which is why we see the same axes used in the configuration.`),Qa=p(),j(Ae.$$.fragment),Za=p(),ro=a("p"),kd=s(`Once you have implemented an ONNX configuration, you can instantiate it by providing the
base model\u2019s configuration as follows:`),el=p(),j(yt.$$.fragment),tl=p(),io=a("p"),yd=s(`The resulting object has several useful properties. For example, you can view the ONNX
operator set that will be used during the export:`),ol=p(),j(Ot.$$.fragment),sl=p(),po=a("p"),Od=s("You can also view the outputs associated with the model as follows:"),nl=p(),j(Tt.$$.fragment),al=p(),V=a("p"),Td=s(`Notice that the outputs property follows the same structure as the inputs; it returns an
`),An=a("code"),Nd=s("OrderedDict"),jd=s(` of named outputs and their shapes. The output structure is linked to the
choice of feature that the configuration is initialised with. By default, the ONNX
configuration is initialized with the `),In=a("code"),Cd=s("default"),Dd=s(` feature that corresponds to exporting a
model loaded with the `),Pn=a("code"),qd=s("AutoModel"),Ld=s(` class. If you want to export a model for another task,
just provide a different feature to the `),Xn=a("code"),Ad=s("task"),Id=s(` argument when you initialize the ONNX
configuration. For example, if we wished to export DistilBERT with a sequence
classification head, we could use:`),ll=p(),j(Nt.$$.fragment),rl=p(),j(Ie.$$.fragment),il=p(),me=a("h3"),Pe=a("a"),Bn=a("span"),j(jt.$$.fragment),Pd=p(),Mn=a("span"),Xd=s("Exporting the model"),pl=p(),ae=a("p"),Bd=s(`Once you have implemented the ONNX configuration, the next step is to export the model.
Here we can use the `),Rn=a("code"),Md=s("export()"),Rd=s(" function provided by the "),Fn=a("code"),Fd=s("transformers.onnx"),Sd=s(` package.
This function expects the ONNX configuration, along with the base model and tokenizer,
and the path to save the exported file:`),fl=p(),j(Ct.$$.fragment),dl=p(),S=a("p"),zd=s("The "),Sn=a("code"),Vd=s("onnx_inputs"),Hd=s(" and "),zn=a("code"),Wd=s("onnx_outputs"),Gd=s(" returned by the "),Vn=a("code"),Yd=s("export()"),Ud=s(` function are lists of
the keys defined in the `),Hn=a("code"),Kd=s("inputs"),Jd=s(" and "),Wn=a("code"),Qd=s("outputs"),Zd=s(` properties of the configuration. Once the
model is exported, you can test that the model is well formed as follows:`),cl=p(),j(Dt.$$.fragment),hl=p(),j(Xe.$$.fragment),ul=p(),ge=a("h3"),Be=a("a"),Gn=a("span"),j(qt.$$.fragment),ec=p(),Yn=a("span"),tc=s("Validating the model outputs"),ml=p(),le=a("p"),oc=s(`The final step is to validate that the outputs from the base and exported model agree
within some absolute tolerance. Here we can use the `),Un=a("code"),sc=s("validate_model_outputs()"),nc=s(` function
provided by the `),Kn=a("code"),ac=s("transformers.onnx"),lc=s(" package as follows:"),gl=p(),j(Lt.$$.fragment),_l=p(),Me=a("p"),rc=s("This function uses the "),fo=a("a"),ic=s("generate_dummy_inputs()"),pc=s(` method to
generate inputs for the base and exported model, and the absolute tolerance can be
defined in the configuration. We generally find numerical agreement in the 1e-6 to 1e-4
range, although anything smaller than 1e-3 is likely to be OK.`),vl=p(),_e=a("h2"),Re=a("a"),Jn=a("span"),j(At.$$.fragment),fc=p(),Qn=a("span"),dc=s("Contributing a new configuration to \u{1F917} Transformers"),El=p(),co=a("p"),cc=s(`We are looking to expand the set of ready-made configurations and welcome contributions
from the community! If you would like to contribute your addition to the library, you
will need to:`),$l=p(),re=a("ul"),It=a("li"),hc=s("Implement the ONNX configuration in the corresponding "),Zn=a("code"),uc=s("configuration_<model_name>.py"),mc=s(`
file`),gc=p(),ho=a("li"),_c=s(`Include the model architecture and corresponding features in
`),ea=a("code"),vc=s("~onnx.features.FeatureManager"),Ec=p(),uo=a("li"),$c=s("Add your model architecture to the tests in "),ta=a("code"),wc=s("test_onnx_v2.py"),wl=p(),Fe=a("p"),xc=s("Check out how the configuration for "),Pt=a("a"),bc=s(`IBERT was
contributed`),kc=s(` to get an
idea of what\u2019s involved.`),this.h()},l(t){const i=Wm('[data-svelte="svelte-1phssyn"]',document.head);c=l(i,"META",{name:!0,content:!0}),i.forEach(o),$=f(t),m=l(t,"H1",{class:!0});var Xt=r(m);E=l(Xt,"A",{id:!0,class:!0,href:!0});var oa=r(E);w=l(oa,"SPAN",{});var sa=r(w);C(_.$$.fragment,sa),sa.forEach(o),oa.forEach(o),x=f(Xt),b=l(Xt,"SPAN",{});var na=r(b);k=n(na,"Export to ONNX"),na.forEach(o),Xt.forEach(o),T=f(t),I=l(t,"P",{});var Bt=r(I);y=n(Bt,`If you need to deploy \u{1F917} Transformers models in production environments, we recommend
exporting them to a serialized format that can be loaded and executed on specialized
runtimes and hardware. In this guide, we\u2019ll show you how to export \u{1F917} Transformers
models to `),O=l(Bt,"A",{href:!0,rel:!0});var aa=r(O);g=n(aa,"ONNX (Open Neural Network eXchange)"),aa.forEach(o),N=n(Bt,"."),Bt.forEach(o),M=f(t),C(R.$$.fragment,t),Q=f(t),W=l(t,"P",{});var Mt=r(W);He=n(Mt,`ONNX is an open standard that defines a common set of operators and a common file format
to represent deep learning models in a wide variety of frameworks, including PyTorch and
TensorFlow. When a model is exported to the ONNX format, these operators are used to
construct a computational graph (often called an `),K=l(Mt,"EM",{});var la=r(K);We=n(la,"intermediate representation"),la.forEach(o),Ge=n(Mt,`) which
represents the flow of data through the neural network.`),Mt.forEach(o),Z=f(t),P=l(t,"P",{});var Cc=r(P);Ft=n(Cc,`By exposing a graph with standardized operators and data types, ONNX makes it easy to
switch between frameworks. For example, a model trained in PyTorch can be exported to
ONNX format and then imported in TensorFlow (and vice versa).`),Cc.forEach(o),Ye=f(t),J=l(t,"P",{});var bl=r(J);St=n(bl,"\u{1F917} Transformers provides a "),fe=l(bl,"A",{href:!0});var Dc=r(fe);ve=l(Dc,"CODE",{});var qc=r(ve);zt=n(qc,"transformers.onnx"),qc.forEach(o),Dc.forEach(o),Zl=n(bl,` package that enables
you to convert model checkpoints to an ONNX graph by leveraging configuration objects.
These configuration objects come ready made for a number of model architectures, and are
designed to be easily extendable to other architectures.`),bl.forEach(o),ra=f(t),Vt=l(t,"P",{});var Lc=r(Vt);er=n(Lc,"Ready-made configurations include the following architectures:"),Lc.forEach(o),ia=f(t),h=l(t,"UL",{});var u=r(h);bo=l(u,"LI",{});var Ac=r(bo);tr=n(Ac,"ALBERT"),Ac.forEach(o),or=f(u),ko=l(u,"LI",{});var Ic=r(ko);sr=n(Ic,"BART"),Ic.forEach(o),nr=f(u),yo=l(u,"LI",{});var Pc=r(yo);ar=n(Pc,"BEiT"),Pc.forEach(o),lr=f(u),Oo=l(u,"LI",{});var Xc=r(Oo);rr=n(Xc,"BERT"),Xc.forEach(o),ir=f(u),To=l(u,"LI",{});var Bc=r(To);pr=n(Bc,"BigBird"),Bc.forEach(o),fr=f(u),No=l(u,"LI",{});var Mc=r(No);dr=n(Mc,"BigBird-Pegasus"),Mc.forEach(o),cr=f(u),jo=l(u,"LI",{});var Rc=r(jo);hr=n(Rc,"Blenderbot"),Rc.forEach(o),ur=f(u),Co=l(u,"LI",{});var Fc=r(Co);mr=n(Fc,"BlenderbotSmall"),Fc.forEach(o),gr=f(u),Do=l(u,"LI",{});var Sc=r(Do);_r=n(Sc,"BLOOM"),Sc.forEach(o),vr=f(u),qo=l(u,"LI",{});var zc=r(qo);Er=n(zc,"CamemBERT"),zc.forEach(o),$r=f(u),Lo=l(u,"LI",{});var Vc=r(Lo);wr=n(Vc,"CLIP"),Vc.forEach(o),xr=f(u),Ao=l(u,"LI",{});var Hc=r(Ao);br=n(Hc,"CodeGen"),Hc.forEach(o),kr=f(u),Io=l(u,"LI",{});var Wc=r(Io);yr=n(Wc,"Conditional DETR"),Wc.forEach(o),Or=f(u),Po=l(u,"LI",{});var Gc=r(Po);Tr=n(Gc,"ConvBERT"),Gc.forEach(o),Nr=f(u),Xo=l(u,"LI",{});var Yc=r(Xo);jr=n(Yc,"ConvNeXT"),Yc.forEach(o),Cr=f(u),Bo=l(u,"LI",{});var Uc=r(Bo);Dr=n(Uc,"Data2VecText"),Uc.forEach(o),qr=f(u),Mo=l(u,"LI",{});var Kc=r(Mo);Lr=n(Kc,"Data2VecVision"),Kc.forEach(o),Ar=f(u),Ro=l(u,"LI",{});var Jc=r(Ro);Ir=n(Jc,"DeBERTa"),Jc.forEach(o),Pr=f(u),Fo=l(u,"LI",{});var Qc=r(Fo);Xr=n(Qc,"DeBERTa-v2"),Qc.forEach(o),Br=f(u),So=l(u,"LI",{});var Zc=r(So);Mr=n(Zc,"DeiT"),Zc.forEach(o),Rr=f(u),zo=l(u,"LI",{});var eh=r(zo);Fr=n(eh,"DETR"),eh.forEach(o),Sr=f(u),Vo=l(u,"LI",{});var th=r(Vo);zr=n(th,"DistilBERT"),th.forEach(o),Vr=f(u),Ho=l(u,"LI",{});var oh=r(Ho);Hr=n(oh,"ELECTRA"),oh.forEach(o),Wr=f(u),Wo=l(u,"LI",{});var sh=r(Wo);Gr=n(sh,"ERNIE"),sh.forEach(o),Yr=f(u),Go=l(u,"LI",{});var nh=r(Go);Ur=n(nh,"FlauBERT"),nh.forEach(o),Kr=f(u),Yo=l(u,"LI",{});var ah=r(Yo);Jr=n(ah,"GPT Neo"),ah.forEach(o),Qr=f(u),Uo=l(u,"LI",{});var lh=r(Uo);Zr=n(lh,"GPT-J"),lh.forEach(o),ei=f(u),Ko=l(u,"LI",{});var rh=r(Ko);ti=n(rh,"GroupViT"),rh.forEach(o),oi=f(u),Jo=l(u,"LI",{});var ih=r(Jo);si=n(ih,"I-BERT"),ih.forEach(o),ni=f(u),Qo=l(u,"LI",{});var ph=r(Qo);ai=n(ph,"LayoutLM"),ph.forEach(o),li=f(u),Zo=l(u,"LI",{});var fh=r(Zo);ri=n(fh,"LayoutLMv3"),fh.forEach(o),ii=f(u),es=l(u,"LI",{});var dh=r(es);pi=n(dh,"LeViT"),dh.forEach(o),fi=f(u),ts=l(u,"LI",{});var ch=r(ts);di=n(ch,"Longformer"),ch.forEach(o),ci=f(u),os=l(u,"LI",{});var hh=r(os);hi=n(hh,"LongT5"),hh.forEach(o),ui=f(u),ss=l(u,"LI",{});var uh=r(ss);mi=n(uh,"M2M100"),uh.forEach(o),gi=f(u),ns=l(u,"LI",{});var mh=r(ns);_i=n(mh,"Marian"),mh.forEach(o),vi=f(u),as=l(u,"LI",{});var gh=r(as);Ei=n(gh,"mBART"),gh.forEach(o),$i=f(u),ls=l(u,"LI",{});var _h=r(ls);wi=n(_h,"MobileBERT"),_h.forEach(o),xi=f(u),rs=l(u,"LI",{});var vh=r(rs);bi=n(vh,"MobileViT"),vh.forEach(o),ki=f(u),is=l(u,"LI",{});var Eh=r(is);yi=n(Eh,"MT5"),Eh.forEach(o),Oi=f(u),ps=l(u,"LI",{});var $h=r(ps);Ti=n($h,"OpenAI GPT-2"),$h.forEach(o),Ni=f(u),fs=l(u,"LI",{});var wh=r(fs);ji=n(wh,"OWL-ViT"),wh.forEach(o),Ci=f(u),ds=l(u,"LI",{});var xh=r(ds);Di=n(xh,"Perceiver"),xh.forEach(o),qi=f(u),cs=l(u,"LI",{});var bh=r(cs);Li=n(bh,"PLBart"),bh.forEach(o),Ai=f(u),hs=l(u,"LI",{});var kh=r(hs);Ii=n(kh,"ResNet"),kh.forEach(o),Pi=f(u),us=l(u,"LI",{});var yh=r(us);Xi=n(yh,"RoBERTa"),yh.forEach(o),Bi=f(u),ms=l(u,"LI",{});var Oh=r(ms);Mi=n(Oh,"RoFormer"),Oh.forEach(o),Ri=f(u),gs=l(u,"LI",{});var Th=r(gs);Fi=n(Th,"SegFormer"),Th.forEach(o),Si=f(u),_s=l(u,"LI",{});var Nh=r(_s);zi=n(Nh,"SqueezeBERT"),Nh.forEach(o),Vi=f(u),vs=l(u,"LI",{});var jh=r(vs);Hi=n(jh,"Swin Transformer"),jh.forEach(o),Wi=f(u),Es=l(u,"LI",{});var Ch=r(Es);Gi=n(Ch,"T5"),Ch.forEach(o),Yi=f(u),$s=l(u,"LI",{});var Dh=r($s);Ui=n(Dh,"Vision Encoder decoder"),Dh.forEach(o),Ki=f(u),ws=l(u,"LI",{});var qh=r(ws);Ji=n(qh,"ViT"),qh.forEach(o),Qi=f(u),xs=l(u,"LI",{});var Lh=r(xs);Zi=n(Lh,"XLM"),Lh.forEach(o),ep=f(u),bs=l(u,"LI",{});var Ah=r(bs);tp=n(Ah,"XLM-RoBERTa"),Ah.forEach(o),op=f(u),ks=l(u,"LI",{});var Ih=r(ks);sp=n(Ih,"XLM-RoBERTa-XL"),Ih.forEach(o),np=f(u),ys=l(u,"LI",{});var Ph=r(ys);ap=n(Ph,"YOLOS"),Ph.forEach(o),u.forEach(o),pa=f(t),Ht=l(t,"P",{});var Xh=r(Ht);lp=n(Xh,"In the next two sections, we\u2019ll show you how to:"),Xh.forEach(o),fa=f(t),Ee=l(t,"UL",{});var kl=r(Ee);Ue=l(kl,"LI",{});var yl=r(Ue);rp=n(yl,"Export a supported model using the "),Os=l(yl,"CODE",{});var Bh=r(Os);ip=n(Bh,"transformers.onnx"),Bh.forEach(o),pp=n(yl," package."),yl.forEach(o),fp=f(kl),Ts=l(kl,"LI",{});var Mh=r(Ts);dp=n(Mh,"Export a custom model for an unsupported architecture."),Mh.forEach(o),kl.forEach(o),da=f(t),de=l(t,"H2",{class:!0});var Ol=r(de);$e=l(Ol,"A",{id:!0,class:!0,href:!0});var Rh=r($e);Ns=l(Rh,"SPAN",{});var Fh=r(Ns);C(Ke.$$.fragment,Fh),Fh.forEach(o),Rh.forEach(o),cp=f(Ol),js=l(Ol,"SPAN",{});var Sh=r(js);hp=n(Sh,"Exporting a model to ONNX"),Sh.forEach(o),Ol.forEach(o),ca=f(t),Wt=l(t,"P",{});var zh=r(Wt);up=n(zh,`To export a \u{1F917} Transformers model to ONNX, you\u2019ll first need to install some extra
dependencies:`),zh.forEach(o),ha=f(t),C(Je.$$.fragment,t),ua=f(t),we=l(t,"P",{});var Tl=r(we);mp=n(Tl,"The "),Cs=l(Tl,"CODE",{});var Vh=r(Cs);gp=n(Vh,"transformers.onnx"),Vh.forEach(o),_p=n(Tl," package can then be used as a Python module:"),Tl.forEach(o),ma=f(t),C(Qe.$$.fragment,t),ga=f(t),Gt=l(t,"P",{});var Hh=r(Gt);vp=n(Hh,"Exporting a checkpoint using a ready-made configuration can be done as follows:"),Hh.forEach(o),_a=f(t),C(Ze.$$.fragment,t),va=f(t),Yt=l(t,"P",{});var Wh=r(Yt);Ep=n(Wh,"You should see the following logs:"),Wh.forEach(o),Ea=f(t),C(et.$$.fragment,t),$a=f(t),ee=l(t,"P",{});var mo=r(ee);$p=n(mo,"This exports an ONNX graph of the checkpoint defined by the "),Ds=l(mo,"CODE",{});var Gh=r(Ds);wp=n(Gh,"--model"),Gh.forEach(o),xp=n(mo,` argument. In this
example, it is `),qs=l(mo,"CODE",{});var Yh=r(qs);bp=n(Yh,"distilbert-base-uncased"),Yh.forEach(o),kp=n(mo,`, but it can be any checkpoint on the Hugging
Face Hub or one that\u2019s stored locally.`),mo.forEach(o),wa=f(t),G=l(t,"P",{});var Se=r(G);yp=n(Se,"The resulting "),Ls=l(Se,"CODE",{});var Uh=r(Ls);Op=n(Uh,"model.onnx"),Uh.forEach(o),Tp=n(Se," file can then be run on one of the "),tt=l(Se,"A",{href:!0,rel:!0});var Kh=r(tt);Np=n(Kh,`many
accelerators`),Kh.forEach(o),jp=n(Se,` that support the ONNX
standard. For example, we can load and run the model with `),ot=l(Se,"A",{href:!0,rel:!0});var Jh=r(ot);Cp=n(Jh,`ONNX
Runtime`),Jh.forEach(o),Dp=n(Se," as follows:"),Se.forEach(o),xa=f(t),C(st.$$.fragment,t),ba=f(t),xe=l(t,"P",{});var Nl=r(xe);qp=n(Nl,"The required output names (like "),As=l(Nl,"CODE",{});var Qh=r(As);Lp=n(Qh,'["last_hidden_state"]'),Qh.forEach(o),Ap=n(Nl,`) can be obtained by taking a
look at the ONNX configuration of each model. For example, for DistilBERT we have:`),Nl.forEach(o),ka=f(t),C(nt.$$.fragment,t),ya=f(t),be=l(t,"P",{});var jl=r(be);Ip=n(jl,`The process is identical for TensorFlow checkpoints on the Hub. For example, we can
export a pure TensorFlow checkpoint from the `),at=l(jl,"A",{href:!0,rel:!0});var Zh=r(at);Pp=n(Zh,`Keras
organization`),Zh.forEach(o),Xp=n(jl," as follows:"),jl.forEach(o),Oa=f(t),C(lt.$$.fragment,t),Ta=f(t),Ut=l(t,"P",{});var eu=r(Ut);Bp=n(eu,`To export a model that\u2019s stored locally, you\u2019ll need to have the model\u2019s weights and
tokenizer files stored in a directory. For example, we can load and save a checkpoint as
follows:`),eu.forEach(o),Na=f(t),C(ke.$$.fragment,t),ja=f(t),ce=l(t,"H2",{class:!0});var Cl=r(ce);ye=l(Cl,"A",{id:!0,class:!0,href:!0});var tu=r(ye);Is=l(tu,"SPAN",{});var ou=r(Is);C(rt.$$.fragment,ou),ou.forEach(o),tu.forEach(o),Mp=f(Cl),Ps=l(Cl,"SPAN",{});var su=r(Ps);Rp=n(su,"Selecting features for different model tasks"),su.forEach(o),Cl.forEach(o),Ca=f(t),te=l(t,"P",{});var go=r(te);Fp=n(go,"Each ready-made configuration comes with a set of "),Xs=l(go,"EM",{});var nu=r(Xs);Sp=n(nu,"features"),nu.forEach(o),zp=n(go,` that enable you to export
models for different types of tasks. As shown in the table below, each feature is
associated with a different `),Bs=l(go,"CODE",{});var au=r(Bs);Vp=n(au,"AutoClass"),au.forEach(o),Hp=n(go,":"),go.forEach(o),Da=f(t),Oe=l(t,"TABLE",{});var Dl=r(Oe);Ms=l(Dl,"THEAD",{});var lu=r(Ms);it=l(lu,"TR",{});var ql=r(it);Rs=l(ql,"TH",{});var ru=r(Rs);Wp=n(ru,"Feature"),ru.forEach(o),Gp=f(ql),Fs=l(ql,"TH",{});var iu=r(Fs);Yp=n(iu,"Auto Class"),iu.forEach(o),ql.forEach(o),lu.forEach(o),Up=f(Dl),F=l(Dl,"TBODY",{});var H=r(F);pt=l(H,"TR",{});var Ll=r(pt);ft=l(Ll,"TD",{});var Al=r(ft);Ss=l(Al,"CODE",{});var pu=r(Ss);Kp=n(pu,"causal-lm"),pu.forEach(o),Jp=n(Al,", "),zs=l(Al,"CODE",{});var fu=r(zs);Qp=n(fu,"causal-lm-with-past"),fu.forEach(o),Al.forEach(o),Zp=f(Ll),Vs=l(Ll,"TD",{});var du=r(Vs);Hs=l(du,"CODE",{});var cu=r(Hs);ef=n(cu,"AutoModelForCausalLM"),cu.forEach(o),du.forEach(o),Ll.forEach(o),tf=f(H),dt=l(H,"TR",{});var Il=r(dt);ct=l(Il,"TD",{});var Pl=r(ct);Ws=l(Pl,"CODE",{});var hu=r(Ws);of=n(hu,"default"),hu.forEach(o),sf=n(Pl,", "),Gs=l(Pl,"CODE",{});var uu=r(Gs);nf=n(uu,"default-with-past"),uu.forEach(o),Pl.forEach(o),af=f(Il),Ys=l(Il,"TD",{});var mu=r(Ys);Us=l(mu,"CODE",{});var gu=r(Us);lf=n(gu,"AutoModel"),gu.forEach(o),mu.forEach(o),Il.forEach(o),rf=f(H),ht=l(H,"TR",{});var Xl=r(ht);Ks=l(Xl,"TD",{});var _u=r(Ks);Js=l(_u,"CODE",{});var vu=r(Js);pf=n(vu,"masked-lm"),vu.forEach(o),_u.forEach(o),ff=f(Xl),Qs=l(Xl,"TD",{});var Eu=r(Qs);Zs=l(Eu,"CODE",{});var $u=r(Zs);df=n($u,"AutoModelForMaskedLM"),$u.forEach(o),Eu.forEach(o),Xl.forEach(o),cf=f(H),ut=l(H,"TR",{});var Bl=r(ut);en=l(Bl,"TD",{});var wu=r(en);tn=l(wu,"CODE",{});var xu=r(tn);hf=n(xu,"question-answering"),xu.forEach(o),wu.forEach(o),uf=f(Bl),on=l(Bl,"TD",{});var bu=r(on);sn=l(bu,"CODE",{});var ku=r(sn);mf=n(ku,"AutoModelForQuestionAnswering"),ku.forEach(o),bu.forEach(o),Bl.forEach(o),gf=f(H),mt=l(H,"TR",{});var Ml=r(mt);gt=l(Ml,"TD",{});var Rl=r(gt);nn=l(Rl,"CODE",{});var yu=r(nn);_f=n(yu,"seq2seq-lm"),yu.forEach(o),vf=n(Rl,", "),an=l(Rl,"CODE",{});var Ou=r(an);Ef=n(Ou,"seq2seq-lm-with-past"),Ou.forEach(o),Rl.forEach(o),$f=f(Ml),ln=l(Ml,"TD",{});var Tu=r(ln);rn=l(Tu,"CODE",{});var Nu=r(rn);wf=n(Nu,"AutoModelForSeq2SeqLM"),Nu.forEach(o),Tu.forEach(o),Ml.forEach(o),xf=f(H),_t=l(H,"TR",{});var Fl=r(_t);pn=l(Fl,"TD",{});var ju=r(pn);fn=l(ju,"CODE",{});var Cu=r(fn);bf=n(Cu,"sequence-classification"),Cu.forEach(o),ju.forEach(o),kf=f(Fl),dn=l(Fl,"TD",{});var Du=r(dn);cn=l(Du,"CODE",{});var qu=r(cn);yf=n(qu,"AutoModelForSequenceClassification"),qu.forEach(o),Du.forEach(o),Fl.forEach(o),Of=f(H),vt=l(H,"TR",{});var Sl=r(vt);hn=l(Sl,"TD",{});var Lu=r(hn);un=l(Lu,"CODE",{});var Au=r(un);Tf=n(Au,"token-classification"),Au.forEach(o),Lu.forEach(o),Nf=f(Sl),mn=l(Sl,"TD",{});var Iu=r(mn);gn=l(Iu,"CODE",{});var Pu=r(gn);jf=n(Pu,"AutoModelForTokenClassification"),Pu.forEach(o),Iu.forEach(o),Sl.forEach(o),H.forEach(o),Dl.forEach(o),qa=f(t),Te=l(t,"P",{});var zl=r(Te);Cf=n(zl,`For each configuration, you can find the list of supported features via the
`),Kt=l(zl,"A",{href:!0});var Xu=r(Kt);Df=n(Xu,"FeaturesManager"),Xu.forEach(o),qf=n(zl,". For example, for DistilBERT we have:"),zl.forEach(o),La=f(t),C(Et.$$.fragment,t),Aa=f(t),oe=l(t,"P",{});var _o=r(oe);Lf=n(_o,"You can then pass one of these features to the "),_n=l(_o,"CODE",{});var Bu=r(_n);Af=n(Bu,"--feature"),Bu.forEach(o),If=n(_o,` argument in the
`),vn=l(_o,"CODE",{});var Mu=r(vn);Pf=n(Mu,"transformers.onnx"),Mu.forEach(o),Xf=n(_o,` package. For example, to export a text-classification model we can
pick a fine-tuned model from the Hub and run:`),_o.forEach(o),Ia=f(t),C($t.$$.fragment,t),Pa=f(t),Jt=l(t,"P",{});var Ru=r(Jt);Bf=n(Ru,"This displays the following logs:"),Ru.forEach(o),Xa=f(t),C(wt.$$.fragment,t),Ba=f(t),Y=l(t,"P",{});var ze=r(Y);Mf=n(ze,"Notice that in this case, the output names from the fine-tuned model are "),En=l(ze,"CODE",{});var Fu=r(En);Rf=n(Fu,"logits"),Fu.forEach(o),Ff=n(ze,`
instead of the `),$n=l(ze,"CODE",{});var Su=r($n);Sf=n(Su,"last_hidden_state"),Su.forEach(o),zf=n(ze," we saw with the "),wn=l(ze,"CODE",{});var zu=r(wn);Vf=n(zu,"distilbert-base-uncased"),zu.forEach(o),Hf=n(ze,` checkpoint
earlier. This is expected since the fine-tuned model has a sequence classification head.`),ze.forEach(o),Ma=f(t),C(Ne.$$.fragment,t),Ra=f(t),C(je.$$.fragment,t),Fa=f(t),he=l(t,"H2",{class:!0});var Vl=r(he);Ce=l(Vl,"A",{id:!0,class:!0,href:!0});var Vu=r(Ce);xn=l(Vu,"SPAN",{});var Hu=r(xn);C(xt.$$.fragment,Hu),Hu.forEach(o),Vu.forEach(o),Wf=f(Vl),bn=l(Vl,"SPAN",{});var Wu=r(bn);Gf=n(Wu,"Exporting a model for an unsupported architecture"),Wu.forEach(o),Vl.forEach(o),Sa=f(t),Qt=l(t,"P",{});var Gu=r(Qt);Yf=n(Gu,`If you wish to export a model whose architecture is not natively supported by the
library, there are three main steps to follow:`),Gu.forEach(o),za=f(t),se=l(t,"OL",{});var vo=r(se);kn=l(vo,"LI",{});var Yu=r(kn);Uf=n(Yu,"Implement a custom ONNX configuration."),Yu.forEach(o),Kf=f(vo),yn=l(vo,"LI",{});var Uu=r(yn);Jf=n(Uu,"Export the model to ONNX."),Uu.forEach(o),Qf=f(vo),On=l(vo,"LI",{});var Ku=r(On);Zf=n(Ku,"Validate the outputs of the PyTorch and exported models."),Ku.forEach(o),vo.forEach(o),Va=f(t),Zt=l(t,"P",{});var Ju=r(Zt);ed=n(Ju,`In this section, we\u2019ll look at how DistilBERT was implemented to show what\u2019s involved
with each step.`),Ju.forEach(o),Ha=f(t),ue=l(t,"H3",{class:!0});var Hl=r(ue);De=l(Hl,"A",{id:!0,class:!0,href:!0});var Qu=r(De);Tn=l(Qu,"SPAN",{});var Zu=r(Tn);C(bt.$$.fragment,Zu),Zu.forEach(o),Qu.forEach(o),td=f(Hl),Nn=l(Hl,"SPAN",{});var em=r(Nn);od=n(em,"Implementing a custom ONNX configuration"),em.forEach(o),Hl.forEach(o),Wa=f(t),eo=l(t,"P",{});var tm=r(eo);sd=n(tm,`Let\u2019s start with the ONNX configuration object. We provide three abstract classes that
you should inherit from, depending on the type of model architecture you wish to export:`),tm.forEach(o),Ga=f(t),ne=l(t,"UL",{});var Eo=r(ne);to=l(Eo,"LI",{});var yc=r(to);nd=n(yc,"Encoder-based models inherit from "),oo=l(yc,"A",{href:!0});var om=r(oo);ad=n(om,"OnnxConfig"),om.forEach(o),yc.forEach(o),ld=f(Eo),so=l(Eo,"LI",{});var Oc=r(so);rd=n(Oc,"Decoder-based models inherit from "),no=l(Oc,"A",{href:!0});var sm=r(no);id=n(sm,"OnnxConfigWithPast"),sm.forEach(o),Oc.forEach(o),pd=f(Eo),ao=l(Eo,"LI",{});var Tc=r(ao);fd=n(Tc,"Encoder-decoder models inherit from "),lo=l(Tc,"A",{href:!0});var nm=r(lo);dd=n(nm,"OnnxSeq2SeqConfigWithPast"),nm.forEach(o),Tc.forEach(o),Eo.forEach(o),Ya=f(t),C(qe.$$.fragment,t),Ua=f(t),Le=l(t,"P",{});var Wl=r(Le);cd=n(Wl,`Since DistilBERT is an encoder-based model, its configuration inherits from
`),jn=l(Wl,"CODE",{});var am=r(jn);hd=n(am,"OnnxConfig"),am.forEach(o),ud=n(Wl,":"),Wl.forEach(o),Ka=f(t),C(kt.$$.fragment,t),Ja=f(t),z=l(t,"P",{});var ie=r(z);md=n(ie,"Every configuration object must implement the "),Cn=l(ie,"CODE",{});var lm=r(Cn);gd=n(lm,"inputs"),lm.forEach(o),_d=n(ie,` property and return a mapping,
where each key corresponds to an expected input, and each value indicates the axis of
that input. For DistilBERT, we can see that two inputs are required: `),Dn=l(ie,"CODE",{});var rm=r(Dn);vd=n(rm,"input_ids"),rm.forEach(o),Ed=n(ie,` and
`),qn=l(ie,"CODE",{});var im=r(qn);$d=n(im,"attention_mask"),im.forEach(o),wd=n(ie,". These inputs have the same shape of "),Ln=l(ie,"CODE",{});var pm=r(Ln);xd=n(pm,"(batch_size, sequence_length)"),pm.forEach(o),bd=n(ie,`
which is why we see the same axes used in the configuration.`),ie.forEach(o),Qa=f(t),C(Ae.$$.fragment,t),Za=f(t),ro=l(t,"P",{});var fm=r(ro);kd=n(fm,`Once you have implemented an ONNX configuration, you can instantiate it by providing the
base model\u2019s configuration as follows:`),fm.forEach(o),el=f(t),C(yt.$$.fragment,t),tl=f(t),io=l(t,"P",{});var dm=r(io);yd=n(dm,`The resulting object has several useful properties. For example, you can view the ONNX
operator set that will be used during the export:`),dm.forEach(o),ol=f(t),C(Ot.$$.fragment,t),sl=f(t),po=l(t,"P",{});var cm=r(po);Od=n(cm,"You can also view the outputs associated with the model as follows:"),cm.forEach(o),nl=f(t),C(Tt.$$.fragment,t),al=f(t),V=l(t,"P",{});var pe=r(V);Td=n(pe,`Notice that the outputs property follows the same structure as the inputs; it returns an
`),An=l(pe,"CODE",{});var hm=r(An);Nd=n(hm,"OrderedDict"),hm.forEach(o),jd=n(pe,` of named outputs and their shapes. The output structure is linked to the
choice of feature that the configuration is initialised with. By default, the ONNX
configuration is initialized with the `),In=l(pe,"CODE",{});var um=r(In);Cd=n(um,"default"),um.forEach(o),Dd=n(pe,` feature that corresponds to exporting a
model loaded with the `),Pn=l(pe,"CODE",{});var mm=r(Pn);qd=n(mm,"AutoModel"),mm.forEach(o),Ld=n(pe,` class. If you want to export a model for another task,
just provide a different feature to the `),Xn=l(pe,"CODE",{});var gm=r(Xn);Ad=n(gm,"task"),gm.forEach(o),Id=n(pe,` argument when you initialize the ONNX
configuration. For example, if we wished to export DistilBERT with a sequence
classification head, we could use:`),pe.forEach(o),ll=f(t),C(Nt.$$.fragment,t),rl=f(t),C(Ie.$$.fragment,t),il=f(t),me=l(t,"H3",{class:!0});var Gl=r(me);Pe=l(Gl,"A",{id:!0,class:!0,href:!0});var _m=r(Pe);Bn=l(_m,"SPAN",{});var vm=r(Bn);C(jt.$$.fragment,vm),vm.forEach(o),_m.forEach(o),Pd=f(Gl),Mn=l(Gl,"SPAN",{});var Em=r(Mn);Xd=n(Em,"Exporting the model"),Em.forEach(o),Gl.forEach(o),pl=f(t),ae=l(t,"P",{});var $o=r(ae);Bd=n($o,`Once you have implemented the ONNX configuration, the next step is to export the model.
Here we can use the `),Rn=l($o,"CODE",{});var $m=r(Rn);Md=n($m,"export()"),$m.forEach(o),Rd=n($o," function provided by the "),Fn=l($o,"CODE",{});var wm=r(Fn);Fd=n(wm,"transformers.onnx"),wm.forEach(o),Sd=n($o,` package.
This function expects the ONNX configuration, along with the base model and tokenizer,
and the path to save the exported file:`),$o.forEach(o),fl=f(t),C(Ct.$$.fragment,t),dl=f(t),S=l(t,"P",{});var U=r(S);zd=n(U,"The "),Sn=l(U,"CODE",{});var xm=r(Sn);Vd=n(xm,"onnx_inputs"),xm.forEach(o),Hd=n(U," and "),zn=l(U,"CODE",{});var bm=r(zn);Wd=n(bm,"onnx_outputs"),bm.forEach(o),Gd=n(U," returned by the "),Vn=l(U,"CODE",{});var km=r(Vn);Yd=n(km,"export()"),km.forEach(o),Ud=n(U,` function are lists of
the keys defined in the `),Hn=l(U,"CODE",{});var ym=r(Hn);Kd=n(ym,"inputs"),ym.forEach(o),Jd=n(U," and "),Wn=l(U,"CODE",{});var Om=r(Wn);Qd=n(Om,"outputs"),Om.forEach(o),Zd=n(U,` properties of the configuration. Once the
model is exported, you can test that the model is well formed as follows:`),U.forEach(o),cl=f(t),C(Dt.$$.fragment,t),hl=f(t),C(Xe.$$.fragment,t),ul=f(t),ge=l(t,"H3",{class:!0});var Yl=r(ge);Be=l(Yl,"A",{id:!0,class:!0,href:!0});var Tm=r(Be);Gn=l(Tm,"SPAN",{});var Nm=r(Gn);C(qt.$$.fragment,Nm),Nm.forEach(o),Tm.forEach(o),ec=f(Yl),Yn=l(Yl,"SPAN",{});var jm=r(Yn);tc=n(jm,"Validating the model outputs"),jm.forEach(o),Yl.forEach(o),ml=f(t),le=l(t,"P",{});var wo=r(le);oc=n(wo,`The final step is to validate that the outputs from the base and exported model agree
within some absolute tolerance. Here we can use the `),Un=l(wo,"CODE",{});var Cm=r(Un);sc=n(Cm,"validate_model_outputs()"),Cm.forEach(o),nc=n(wo,` function
provided by the `),Kn=l(wo,"CODE",{});var Dm=r(Kn);ac=n(Dm,"transformers.onnx"),Dm.forEach(o),lc=n(wo," package as follows:"),wo.forEach(o),gl=f(t),C(Lt.$$.fragment,t),_l=f(t),Me=l(t,"P",{});var Ul=r(Me);rc=n(Ul,"This function uses the "),fo=l(Ul,"A",{href:!0});var qm=r(fo);ic=n(qm,"generate_dummy_inputs()"),qm.forEach(o),pc=n(Ul,` method to
generate inputs for the base and exported model, and the absolute tolerance can be
defined in the configuration. We generally find numerical agreement in the 1e-6 to 1e-4
range, although anything smaller than 1e-3 is likely to be OK.`),Ul.forEach(o),vl=f(t),_e=l(t,"H2",{class:!0});var Kl=r(_e);Re=l(Kl,"A",{id:!0,class:!0,href:!0});var Lm=r(Re);Jn=l(Lm,"SPAN",{});var Am=r(Jn);C(At.$$.fragment,Am),Am.forEach(o),Lm.forEach(o),fc=f(Kl),Qn=l(Kl,"SPAN",{});var Im=r(Qn);dc=n(Im,"Contributing a new configuration to \u{1F917} Transformers"),Im.forEach(o),Kl.forEach(o),El=f(t),co=l(t,"P",{});var Pm=r(co);cc=n(Pm,`We are looking to expand the set of ready-made configurations and welcome contributions
from the community! If you would like to contribute your addition to the library, you
will need to:`),Pm.forEach(o),$l=f(t),re=l(t,"UL",{});var xo=r(re);It=l(xo,"LI",{});var Jl=r(It);hc=n(Jl,"Implement the ONNX configuration in the corresponding "),Zn=l(Jl,"CODE",{});var Xm=r(Zn);uc=n(Xm,"configuration_<model_name>.py"),Xm.forEach(o),mc=n(Jl,`
file`),Jl.forEach(o),gc=f(xo),ho=l(xo,"LI",{});var Nc=r(ho);_c=n(Nc,`Include the model architecture and corresponding features in
`),ea=l(Nc,"CODE",{});var Bm=r(ea);vc=n(Bm,"~onnx.features.FeatureManager"),Bm.forEach(o),Nc.forEach(o),Ec=f(xo),uo=l(xo,"LI",{});var jc=r(uo);$c=n(jc,"Add your model architecture to the tests in "),ta=l(jc,"CODE",{});var Mm=r(ta);wc=n(Mm,"test_onnx_v2.py"),Mm.forEach(o),jc.forEach(o),xo.forEach(o),wl=f(t),Fe=l(t,"P",{});var Ql=r(Fe);xc=n(Ql,"Check out how the configuration for "),Pt=l(Ql,"A",{href:!0,rel:!0});var Rm=r(Pt);bc=n(Rm,`IBERT was
contributed`),Rm.forEach(o),kc=n(Ql,` to get an
idea of what\u2019s involved.`),Ql.forEach(o),this.h()},h(){v(c,"name","hf:doc:metadata"),v(c,"content",JSON.stringify(rg)),v(E,"id","export-to-onnx"),v(E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(E,"href","#export-to-onnx"),v(m,"class","relative group"),v(O,"href","http://onnx.ai"),v(O,"rel","nofollow"),v(fe,"href","main_classes/onnx"),v($e,"id","exporting-a-model-to-onnx"),v($e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v($e,"href","#exporting-a-model-to-onnx"),v(de,"class","relative group"),v(tt,"href","https://onnx.ai/supported-tools.html#deployModel"),v(tt,"rel","nofollow"),v(ot,"href","https://onnxruntime.ai/"),v(ot,"rel","nofollow"),v(at,"href","https://huggingface.co/keras-io"),v(at,"rel","nofollow"),v(ye,"id","selecting-features-for-different-model-tasks"),v(ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(ye,"href","#selecting-features-for-different-model-tasks"),v(ce,"class","relative group"),v(Kt,"href","/docs/transformers/v4.23.1/en/main_classes/onnx#transformers.onnx.FeaturesManager"),v(Ce,"id","exporting-a-model-for-an-unsupported-architecture"),v(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Ce,"href","#exporting-a-model-for-an-unsupported-architecture"),v(he,"class","relative group"),v(De,"id","implementing-a-custom-onnx-configuration"),v(De,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(De,"href","#implementing-a-custom-onnx-configuration"),v(ue,"class","relative group"),v(oo,"href","/docs/transformers/v4.23.1/en/main_classes/onnx#transformers.onnx.OnnxConfig"),v(no,"href","/docs/transformers/v4.23.1/en/main_classes/onnx#transformers.onnx.OnnxConfigWithPast"),v(lo,"href","/docs/transformers/v4.23.1/en/main_classes/onnx#transformers.onnx.OnnxSeq2SeqConfigWithPast"),v(Pe,"id","exporting-the-model"),v(Pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Pe,"href","#exporting-the-model"),v(me,"class","relative group"),v(Be,"id","validating-the-model-outputs"),v(Be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Be,"href","#validating-the-model-outputs"),v(ge,"class","relative group"),v(fo,"href","/docs/transformers/v4.23.1/en/main_classes/onnx#transformers.onnx.OnnxConfig.generate_dummy_inputs"),v(Re,"id","contributing-a-new-configuration-to-transformers"),v(Re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Re,"href","#contributing-a-new-configuration-to-transformers"),v(_e,"class","relative group"),v(Pt,"href","https://github.com/huggingface/transformers/pull/14868/files"),v(Pt,"rel","nofollow")},m(t,i){e(document.head,c),d(t,$,i),d(t,m,i),e(m,E),e(E,w),D(_,w,null),e(m,x),e(m,b),e(b,k),d(t,T,i),d(t,I,i),e(I,y),e(I,O),e(O,g),e(I,N),d(t,M,i),D(R,t,i),d(t,Q,i),d(t,W,i),e(W,He),e(W,K),e(K,We),e(W,Ge),d(t,Z,i),d(t,P,i),e(P,Ft),d(t,Ye,i),d(t,J,i),e(J,St),e(J,fe),e(fe,ve),e(ve,zt),e(J,Zl),d(t,ra,i),d(t,Vt,i),e(Vt,er),d(t,ia,i),d(t,h,i),e(h,bo),e(bo,tr),e(h,or),e(h,ko),e(ko,sr),e(h,nr),e(h,yo),e(yo,ar),e(h,lr),e(h,Oo),e(Oo,rr),e(h,ir),e(h,To),e(To,pr),e(h,fr),e(h,No),e(No,dr),e(h,cr),e(h,jo),e(jo,hr),e(h,ur),e(h,Co),e(Co,mr),e(h,gr),e(h,Do),e(Do,_r),e(h,vr),e(h,qo),e(qo,Er),e(h,$r),e(h,Lo),e(Lo,wr),e(h,xr),e(h,Ao),e(Ao,br),e(h,kr),e(h,Io),e(Io,yr),e(h,Or),e(h,Po),e(Po,Tr),e(h,Nr),e(h,Xo),e(Xo,jr),e(h,Cr),e(h,Bo),e(Bo,Dr),e(h,qr),e(h,Mo),e(Mo,Lr),e(h,Ar),e(h,Ro),e(Ro,Ir),e(h,Pr),e(h,Fo),e(Fo,Xr),e(h,Br),e(h,So),e(So,Mr),e(h,Rr),e(h,zo),e(zo,Fr),e(h,Sr),e(h,Vo),e(Vo,zr),e(h,Vr),e(h,Ho),e(Ho,Hr),e(h,Wr),e(h,Wo),e(Wo,Gr),e(h,Yr),e(h,Go),e(Go,Ur),e(h,Kr),e(h,Yo),e(Yo,Jr),e(h,Qr),e(h,Uo),e(Uo,Zr),e(h,ei),e(h,Ko),e(Ko,ti),e(h,oi),e(h,Jo),e(Jo,si),e(h,ni),e(h,Qo),e(Qo,ai),e(h,li),e(h,Zo),e(Zo,ri),e(h,ii),e(h,es),e(es,pi),e(h,fi),e(h,ts),e(ts,di),e(h,ci),e(h,os),e(os,hi),e(h,ui),e(h,ss),e(ss,mi),e(h,gi),e(h,ns),e(ns,_i),e(h,vi),e(h,as),e(as,Ei),e(h,$i),e(h,ls),e(ls,wi),e(h,xi),e(h,rs),e(rs,bi),e(h,ki),e(h,is),e(is,yi),e(h,Oi),e(h,ps),e(ps,Ti),e(h,Ni),e(h,fs),e(fs,ji),e(h,Ci),e(h,ds),e(ds,Di),e(h,qi),e(h,cs),e(cs,Li),e(h,Ai),e(h,hs),e(hs,Ii),e(h,Pi),e(h,us),e(us,Xi),e(h,Bi),e(h,ms),e(ms,Mi),e(h,Ri),e(h,gs),e(gs,Fi),e(h,Si),e(h,_s),e(_s,zi),e(h,Vi),e(h,vs),e(vs,Hi),e(h,Wi),e(h,Es),e(Es,Gi),e(h,Yi),e(h,$s),e($s,Ui),e(h,Ki),e(h,ws),e(ws,Ji),e(h,Qi),e(h,xs),e(xs,Zi),e(h,ep),e(h,bs),e(bs,tp),e(h,op),e(h,ks),e(ks,sp),e(h,np),e(h,ys),e(ys,ap),d(t,pa,i),d(t,Ht,i),e(Ht,lp),d(t,fa,i),d(t,Ee,i),e(Ee,Ue),e(Ue,rp),e(Ue,Os),e(Os,ip),e(Ue,pp),e(Ee,fp),e(Ee,Ts),e(Ts,dp),d(t,da,i),d(t,de,i),e(de,$e),e($e,Ns),D(Ke,Ns,null),e(de,cp),e(de,js),e(js,hp),d(t,ca,i),d(t,Wt,i),e(Wt,up),d(t,ha,i),D(Je,t,i),d(t,ua,i),d(t,we,i),e(we,mp),e(we,Cs),e(Cs,gp),e(we,_p),d(t,ma,i),D(Qe,t,i),d(t,ga,i),d(t,Gt,i),e(Gt,vp),d(t,_a,i),D(Ze,t,i),d(t,va,i),d(t,Yt,i),e(Yt,Ep),d(t,Ea,i),D(et,t,i),d(t,$a,i),d(t,ee,i),e(ee,$p),e(ee,Ds),e(Ds,wp),e(ee,xp),e(ee,qs),e(qs,bp),e(ee,kp),d(t,wa,i),d(t,G,i),e(G,yp),e(G,Ls),e(Ls,Op),e(G,Tp),e(G,tt),e(tt,Np),e(G,jp),e(G,ot),e(ot,Cp),e(G,Dp),d(t,xa,i),D(st,t,i),d(t,ba,i),d(t,xe,i),e(xe,qp),e(xe,As),e(As,Lp),e(xe,Ap),d(t,ka,i),D(nt,t,i),d(t,ya,i),d(t,be,i),e(be,Ip),e(be,at),e(at,Pp),e(be,Xp),d(t,Oa,i),D(lt,t,i),d(t,Ta,i),d(t,Ut,i),e(Ut,Bp),d(t,Na,i),D(ke,t,i),d(t,ja,i),d(t,ce,i),e(ce,ye),e(ye,Is),D(rt,Is,null),e(ce,Mp),e(ce,Ps),e(Ps,Rp),d(t,Ca,i),d(t,te,i),e(te,Fp),e(te,Xs),e(Xs,Sp),e(te,zp),e(te,Bs),e(Bs,Vp),e(te,Hp),d(t,Da,i),d(t,Oe,i),e(Oe,Ms),e(Ms,it),e(it,Rs),e(Rs,Wp),e(it,Gp),e(it,Fs),e(Fs,Yp),e(Oe,Up),e(Oe,F),e(F,pt),e(pt,ft),e(ft,Ss),e(Ss,Kp),e(ft,Jp),e(ft,zs),e(zs,Qp),e(pt,Zp),e(pt,Vs),e(Vs,Hs),e(Hs,ef),e(F,tf),e(F,dt),e(dt,ct),e(ct,Ws),e(Ws,of),e(ct,sf),e(ct,Gs),e(Gs,nf),e(dt,af),e(dt,Ys),e(Ys,Us),e(Us,lf),e(F,rf),e(F,ht),e(ht,Ks),e(Ks,Js),e(Js,pf),e(ht,ff),e(ht,Qs),e(Qs,Zs),e(Zs,df),e(F,cf),e(F,ut),e(ut,en),e(en,tn),e(tn,hf),e(ut,uf),e(ut,on),e(on,sn),e(sn,mf),e(F,gf),e(F,mt),e(mt,gt),e(gt,nn),e(nn,_f),e(gt,vf),e(gt,an),e(an,Ef),e(mt,$f),e(mt,ln),e(ln,rn),e(rn,wf),e(F,xf),e(F,_t),e(_t,pn),e(pn,fn),e(fn,bf),e(_t,kf),e(_t,dn),e(dn,cn),e(cn,yf),e(F,Of),e(F,vt),e(vt,hn),e(hn,un),e(un,Tf),e(vt,Nf),e(vt,mn),e(mn,gn),e(gn,jf),d(t,qa,i),d(t,Te,i),e(Te,Cf),e(Te,Kt),e(Kt,Df),e(Te,qf),d(t,La,i),D(Et,t,i),d(t,Aa,i),d(t,oe,i),e(oe,Lf),e(oe,_n),e(_n,Af),e(oe,If),e(oe,vn),e(vn,Pf),e(oe,Xf),d(t,Ia,i),D($t,t,i),d(t,Pa,i),d(t,Jt,i),e(Jt,Bf),d(t,Xa,i),D(wt,t,i),d(t,Ba,i),d(t,Y,i),e(Y,Mf),e(Y,En),e(En,Rf),e(Y,Ff),e(Y,$n),e($n,Sf),e(Y,zf),e(Y,wn),e(wn,Vf),e(Y,Hf),d(t,Ma,i),D(Ne,t,i),d(t,Ra,i),D(je,t,i),d(t,Fa,i),d(t,he,i),e(he,Ce),e(Ce,xn),D(xt,xn,null),e(he,Wf),e(he,bn),e(bn,Gf),d(t,Sa,i),d(t,Qt,i),e(Qt,Yf),d(t,za,i),d(t,se,i),e(se,kn),e(kn,Uf),e(se,Kf),e(se,yn),e(yn,Jf),e(se,Qf),e(se,On),e(On,Zf),d(t,Va,i),d(t,Zt,i),e(Zt,ed),d(t,Ha,i),d(t,ue,i),e(ue,De),e(De,Tn),D(bt,Tn,null),e(ue,td),e(ue,Nn),e(Nn,od),d(t,Wa,i),d(t,eo,i),e(eo,sd),d(t,Ga,i),d(t,ne,i),e(ne,to),e(to,nd),e(to,oo),e(oo,ad),e(ne,ld),e(ne,so),e(so,rd),e(so,no),e(no,id),e(ne,pd),e(ne,ao),e(ao,fd),e(ao,lo),e(lo,dd),d(t,Ya,i),D(qe,t,i),d(t,Ua,i),d(t,Le,i),e(Le,cd),e(Le,jn),e(jn,hd),e(Le,ud),d(t,Ka,i),D(kt,t,i),d(t,Ja,i),d(t,z,i),e(z,md),e(z,Cn),e(Cn,gd),e(z,_d),e(z,Dn),e(Dn,vd),e(z,Ed),e(z,qn),e(qn,$d),e(z,wd),e(z,Ln),e(Ln,xd),e(z,bd),d(t,Qa,i),D(Ae,t,i),d(t,Za,i),d(t,ro,i),e(ro,kd),d(t,el,i),D(yt,t,i),d(t,tl,i),d(t,io,i),e(io,yd),d(t,ol,i),D(Ot,t,i),d(t,sl,i),d(t,po,i),e(po,Od),d(t,nl,i),D(Tt,t,i),d(t,al,i),d(t,V,i),e(V,Td),e(V,An),e(An,Nd),e(V,jd),e(V,In),e(In,Cd),e(V,Dd),e(V,Pn),e(Pn,qd),e(V,Ld),e(V,Xn),e(Xn,Ad),e(V,Id),d(t,ll,i),D(Nt,t,i),d(t,rl,i),D(Ie,t,i),d(t,il,i),d(t,me,i),e(me,Pe),e(Pe,Bn),D(jt,Bn,null),e(me,Pd),e(me,Mn),e(Mn,Xd),d(t,pl,i),d(t,ae,i),e(ae,Bd),e(ae,Rn),e(Rn,Md),e(ae,Rd),e(ae,Fn),e(Fn,Fd),e(ae,Sd),d(t,fl,i),D(Ct,t,i),d(t,dl,i),d(t,S,i),e(S,zd),e(S,Sn),e(Sn,Vd),e(S,Hd),e(S,zn),e(zn,Wd),e(S,Gd),e(S,Vn),e(Vn,Yd),e(S,Ud),e(S,Hn),e(Hn,Kd),e(S,Jd),e(S,Wn),e(Wn,Qd),e(S,Zd),d(t,cl,i),D(Dt,t,i),d(t,hl,i),D(Xe,t,i),d(t,ul,i),d(t,ge,i),e(ge,Be),e(Be,Gn),D(qt,Gn,null),e(ge,ec),e(ge,Yn),e(Yn,tc),d(t,ml,i),d(t,le,i),e(le,oc),e(le,Un),e(Un,sc),e(le,nc),e(le,Kn),e(Kn,ac),e(le,lc),d(t,gl,i),D(Lt,t,i),d(t,_l,i),d(t,Me,i),e(Me,rc),e(Me,fo),e(fo,ic),e(Me,pc),d(t,vl,i),d(t,_e,i),e(_e,Re),e(Re,Jn),D(At,Jn,null),e(_e,fc),e(_e,Qn),e(Qn,dc),d(t,El,i),d(t,co,i),e(co,cc),d(t,$l,i),d(t,re,i),e(re,It),e(It,hc),e(It,Zn),e(Zn,uc),e(It,mc),e(re,gc),e(re,ho),e(ho,_c),e(ho,ea),e(ea,vc),e(re,Ec),e(re,uo),e(uo,$c),e(uo,ta),e(ta,wc),d(t,wl,i),d(t,Fe,i),e(Fe,xc),e(Fe,Pt),e(Pt,bc),e(Fe,kc),xl=!0},p(t,[i]){const Xt={};i&2&&(Xt.$$scope={dirty:i,ctx:t}),R.$set(Xt);const oa={};i&2&&(oa.$$scope={dirty:i,ctx:t}),ke.$set(oa);const sa={};i&2&&(sa.$$scope={dirty:i,ctx:t}),Ne.$set(sa);const na={};i&2&&(na.$$scope={dirty:i,ctx:t}),je.$set(na);const Bt={};i&2&&(Bt.$$scope={dirty:i,ctx:t}),qe.$set(Bt);const aa={};i&2&&(aa.$$scope={dirty:i,ctx:t}),Ae.$set(aa);const Mt={};i&2&&(Mt.$$scope={dirty:i,ctx:t}),Ie.$set(Mt);const la={};i&2&&(la.$$scope={dirty:i,ctx:t}),Xe.$set(la)},i(t){xl||(q(_.$$.fragment,t),q(R.$$.fragment,t),q(Ke.$$.fragment,t),q(Je.$$.fragment,t),q(Qe.$$.fragment,t),q(Ze.$$.fragment,t),q(et.$$.fragment,t),q(st.$$.fragment,t),q(nt.$$.fragment,t),q(lt.$$.fragment,t),q(ke.$$.fragment,t),q(rt.$$.fragment,t),q(Et.$$.fragment,t),q($t.$$.fragment,t),q(wt.$$.fragment,t),q(Ne.$$.fragment,t),q(je.$$.fragment,t),q(xt.$$.fragment,t),q(bt.$$.fragment,t),q(qe.$$.fragment,t),q(kt.$$.fragment,t),q(Ae.$$.fragment,t),q(yt.$$.fragment,t),q(Ot.$$.fragment,t),q(Tt.$$.fragment,t),q(Nt.$$.fragment,t),q(Ie.$$.fragment,t),q(jt.$$.fragment,t),q(Ct.$$.fragment,t),q(Dt.$$.fragment,t),q(Xe.$$.fragment,t),q(qt.$$.fragment,t),q(Lt.$$.fragment,t),q(At.$$.fragment,t),xl=!0)},o(t){L(_.$$.fragment,t),L(R.$$.fragment,t),L(Ke.$$.fragment,t),L(Je.$$.fragment,t),L(Qe.$$.fragment,t),L(Ze.$$.fragment,t),L(et.$$.fragment,t),L(st.$$.fragment,t),L(nt.$$.fragment,t),L(lt.$$.fragment,t),L(ke.$$.fragment,t),L(rt.$$.fragment,t),L(Et.$$.fragment,t),L($t.$$.fragment,t),L(wt.$$.fragment,t),L(Ne.$$.fragment,t),L(je.$$.fragment,t),L(xt.$$.fragment,t),L(bt.$$.fragment,t),L(qe.$$.fragment,t),L(kt.$$.fragment,t),L(Ae.$$.fragment,t),L(yt.$$.fragment,t),L(Ot.$$.fragment,t),L(Tt.$$.fragment,t),L(Nt.$$.fragment,t),L(Ie.$$.fragment,t),L(jt.$$.fragment,t),L(Ct.$$.fragment,t),L(Dt.$$.fragment,t),L(Xe.$$.fragment,t),L(qt.$$.fragment,t),L(Lt.$$.fragment,t),L(At.$$.fragment,t),xl=!1},d(t){o(c),t&&o($),t&&o(m),A(_),t&&o(T),t&&o(I),t&&o(M),A(R,t),t&&o(Q),t&&o(W),t&&o(Z),t&&o(P),t&&o(Ye),t&&o(J),t&&o(ra),t&&o(Vt),t&&o(ia),t&&o(h),t&&o(pa),t&&o(Ht),t&&o(fa),t&&o(Ee),t&&o(da),t&&o(de),A(Ke),t&&o(ca),t&&o(Wt),t&&o(ha),A(Je,t),t&&o(ua),t&&o(we),t&&o(ma),A(Qe,t),t&&o(ga),t&&o(Gt),t&&o(_a),A(Ze,t),t&&o(va),t&&o(Yt),t&&o(Ea),A(et,t),t&&o($a),t&&o(ee),t&&o(wa),t&&o(G),t&&o(xa),A(st,t),t&&o(ba),t&&o(xe),t&&o(ka),A(nt,t),t&&o(ya),t&&o(be),t&&o(Oa),A(lt,t),t&&o(Ta),t&&o(Ut),t&&o(Na),A(ke,t),t&&o(ja),t&&o(ce),A(rt),t&&o(Ca),t&&o(te),t&&o(Da),t&&o(Oe),t&&o(qa),t&&o(Te),t&&o(La),A(Et,t),t&&o(Aa),t&&o(oe),t&&o(Ia),A($t,t),t&&o(Pa),t&&o(Jt),t&&o(Xa),A(wt,t),t&&o(Ba),t&&o(Y),t&&o(Ma),A(Ne,t),t&&o(Ra),A(je,t),t&&o(Fa),t&&o(he),A(xt),t&&o(Sa),t&&o(Qt),t&&o(za),t&&o(se),t&&o(Va),t&&o(Zt),t&&o(Ha),t&&o(ue),A(bt),t&&o(Wa),t&&o(eo),t&&o(Ga),t&&o(ne),t&&o(Ya),A(qe,t),t&&o(Ua),t&&o(Le),t&&o(Ka),A(kt,t),t&&o(Ja),t&&o(z),t&&o(Qa),A(Ae,t),t&&o(Za),t&&o(ro),t&&o(el),A(yt,t),t&&o(tl),t&&o(io),t&&o(ol),A(Ot,t),t&&o(sl),t&&o(po),t&&o(nl),A(Tt,t),t&&o(al),t&&o(V),t&&o(ll),A(Nt,t),t&&o(rl),A(Ie,t),t&&o(il),t&&o(me),A(jt),t&&o(pl),t&&o(ae),t&&o(fl),A(Ct,t),t&&o(dl),t&&o(S),t&&o(cl),A(Dt,t),t&&o(hl),A(Xe,t),t&&o(ul),t&&o(ge),A(qt),t&&o(ml),t&&o(le),t&&o(gl),A(Lt,t),t&&o(_l),t&&o(Me),t&&o(vl),t&&o(_e),A(At),t&&o(El),t&&o(co),t&&o($l),t&&o(re),t&&o(wl),t&&o(Fe)}}}const rg={local:"export-to-onnx",sections:[{local:"exporting-a-model-to-onnx",title:"Exporting a model to ONNX"},{local:"selecting-features-for-different-model-tasks",title:"Selecting features for different model tasks"},{local:"exporting-a-model-for-an-unsupported-architecture",sections:[{local:"implementing-a-custom-onnx-configuration",title:"Implementing a custom ONNX configuration"},{local:"exporting-the-model",title:"Exporting the model"},{local:"validating-the-model-outputs",title:"Validating the model outputs"}],title:"Exporting a model for an unsupported architecture"},{local:"contributing-a-new-configuration-to-transformers",title:"Contributing a new configuration to \u{1F917} Transformers"}],title:"Export to ONNX"};function ig(X){return Gm(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ug extends zm{constructor(c){super();Vm(this,c,ig,lg,Hm,{})}}export{ug as default,rg as metadata};
