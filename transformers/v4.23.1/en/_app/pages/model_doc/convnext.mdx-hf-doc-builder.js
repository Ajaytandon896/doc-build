import{S as pr,i as mr,s as ur,e as a,k as h,w as C,t as n,M as gr,c as r,d as t,m as p,a as i,x as b,h as s,b as f,N as vr,G as e,g as m,y as $,q as T,o as N,B as E,v as _r,L as an}from"../../chunks/vendor-hf-doc-builder.js";import{T as Mo}from"../../chunks/Tip-hf-doc-builder.js";import{D as Qe}from"../../chunks/Docstring-hf-doc-builder.js";import{C as rn}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as Dt}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as sn}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function xr(M){let c,w,g,u,x;return u=new rn({props:{code:`from transformers import ConvNextModel, ConvNextConfig

# Initializing a ConvNext convnext-tiny-224 style configuration
configuration = ConvNextConfig()
# Initializing a model from the convnext-tiny-224 style configuration
model = ConvNextModel(configuration)
# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ConvNextModel, ConvNextConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a ConvNext convnext-tiny-224 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = ConvNextConfig()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model from the convnext-tiny-224 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ConvNextModel(configuration)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),{c(){c=a("p"),w=n("Example:"),g=h(),C(u.$$.fragment)},l(l){c=r(l,"P",{});var d=i(c);w=s(d,"Example:"),d.forEach(t),g=p(l),b(u.$$.fragment,l)},m(l,d){m(l,c,d),e(c,w),m(l,g,d),$(u,l,d),x=!0},p:an,i(l){x||(T(u.$$.fragment,l),x=!0)},o(l){N(u.$$.fragment,l),x=!1},d(l){l&&t(c),l&&t(g),E(u,l)}}}function wr(M){let c,w,g,u,x;return{c(){c=a("p"),w=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=a("code"),u=n("Module"),x=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){c=r(l,"P",{});var d=i(c);w=s(d,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=r(d,"CODE",{});var I=i(g);u=s(I,"Module"),I.forEach(t),x=s(d,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),d.forEach(t)},m(l,d){m(l,c,d),e(c,w),e(c,g),e(g,u),e(c,x)},d(l){l&&t(c)}}}function yr(M){let c,w,g,u,x;return u=new rn({props:{code:`from transformers import ConvNextFeatureExtractor, ConvNextModel
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = ConvNextFeatureExtractor.from_pretrained("facebook/convnext-tiny-224")
model = ConvNextModel.from_pretrained("facebook/convnext-tiny-224")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state
list(last_hidden_states.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ConvNextFeatureExtractor, ConvNextModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = ConvNextFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ConvNextModel.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">768</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>]`}}),{c(){c=a("p"),w=n("Example:"),g=h(),C(u.$$.fragment)},l(l){c=r(l,"P",{});var d=i(c);w=s(d,"Example:"),d.forEach(t),g=p(l),b(u.$$.fragment,l)},m(l,d){m(l,c,d),e(c,w),m(l,g,d),$(u,l,d),x=!0},p:an,i(l){x||(T(u.$$.fragment,l),x=!0)},o(l){N(u.$$.fragment,l),x=!1},d(l){l&&t(c),l&&t(g),E(u,l)}}}function Cr(M){let c,w,g,u,x;return{c(){c=a("p"),w=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=a("code"),u=n("Module"),x=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){c=r(l,"P",{});var d=i(c);w=s(d,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=r(d,"CODE",{});var I=i(g);u=s(I,"Module"),I.forEach(t),x=s(d,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),d.forEach(t)},m(l,d){m(l,c,d),e(c,w),e(c,g),e(g,u),e(c,x)},d(l){l&&t(c)}}}function br(M){let c,w,g,u,x;return u=new rn({props:{code:`from transformers import ConvNextFeatureExtractor, ConvNextForImageClassification
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = ConvNextFeatureExtractor.from_pretrained("facebook/convnext-tiny-224")
model = ConvNextForImageClassification.from_pretrained("facebook/convnext-tiny-224")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = logits.argmax(-1).item()
print(model.config.id2label[predicted_label])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ConvNextFeatureExtractor, ConvNextForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = ConvNextFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ConvNextForImageClassification.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_label = logits.argmax(-<span class="hljs-number">1</span>).item()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(model.config.id2label[predicted_label])
tabby, tabby cat`}}),{c(){c=a("p"),w=n("Example:"),g=h(),C(u.$$.fragment)},l(l){c=r(l,"P",{});var d=i(c);w=s(d,"Example:"),d.forEach(t),g=p(l),b(u.$$.fragment,l)},m(l,d){m(l,c,d),e(c,w),m(l,g,d),$(u,l,d),x=!0},p:an,i(l){x||(T(u.$$.fragment,l),x=!0)},o(l){N(u.$$.fragment,l),x=!1},d(l){l&&t(c),l&&t(g),E(u,l)}}}function $r(M){let c,w,g,u,x,l,d,I,Pe,we,z,Y,te,y,Ae,H,qe,ye,L,ze,oe,ne,Oe,Ce,X,De,be,U,ue,Le,he,j,O,$e,B,ge,Se,J,Q,Ze,q,ee,se,pe,Ke,ae,Te,P,R,re,ie,We,V,D,Xe,A,Ue,Be;return{c(){c=a("p"),w=n("TensorFlow models and layers in "),g=a("code"),u=n("transformers"),x=n(" accept two formats as input:"),l=h(),d=a("ul"),I=a("li"),Pe=n("having all inputs as keyword arguments (like PyTorch models), or"),we=h(),z=a("li"),Y=n("having all inputs as a list, tuple or dict in the first positional argument."),te=h(),y=a("p"),Ae=n(`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),H=a("code"),qe=n("model.fit()"),ye=n(` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),L=a("code"),ze=n("model.fit()"),oe=n(` supports! If, however, you want to use the second
format outside of Keras methods like `),ne=a("code"),Oe=n("fit()"),Ce=n(" and "),X=a("code"),De=n("predict()"),be=n(`, such as when creating your own layers or models with
the Keras `),U=a("code"),ue=n("Functional"),Le=n(` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),he=h(),j=a("ul"),O=a("li"),$e=n("a single Tensor with "),B=a("code"),ge=n("pixel_values"),Se=n(" only and nothing else: "),J=a("code"),Q=n("model(pixel_values)"),Ze=h(),q=a("li"),ee=n(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),se=a("code"),pe=n("model([pixel_values, attention_mask])"),Ke=n(" or "),ae=a("code"),Te=n("model([pixel_values, attention_mask, token_type_ids])"),P=h(),R=a("li"),re=n(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),ie=a("code"),We=n('model({"pixel_values": pixel_values, "token_type_ids": token_type_ids})'),V=h(),D=a("p"),Xe=n(`Note that when creating models and layers with
`),A=a("a"),Ue=n("subclassing"),Be=n(` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),this.h()},l(_){c=r(_,"P",{});var k=i(c);w=s(k,"TensorFlow models and layers in "),g=r(k,"CODE",{});var et=i(g);u=s(et,"transformers"),et.forEach(t),x=s(k," accept two formats as input:"),k.forEach(t),l=p(_),d=r(_,"UL",{});var G=i(d);I=r(G,"LI",{});var tt=i(I);Pe=s(tt,"having all inputs as keyword arguments (like PyTorch models), or"),tt.forEach(t),we=p(G),z=r(G,"LI",{});var ot=i(z);Y=s(ot,"having all inputs as a list, tuple or dict in the first positional argument."),ot.forEach(t),G.forEach(t),te=p(_),y=r(_,"P",{});var F=i(y);Ae=s(F,`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),H=r(F,"CODE",{});var le=i(H);qe=s(le,"model.fit()"),le.forEach(t),ye=s(F,` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),L=r(F,"CODE",{});var me=i(L);ze=s(me,"model.fit()"),me.forEach(t),oe=s(F,` supports! If, however, you want to use the second
format outside of Keras methods like `),ne=r(F,"CODE",{});var He=i(ne);Oe=s(He,"fit()"),He.forEach(t),Ce=s(F," and "),X=r(F,"CODE",{});var ve=i(X);De=s(ve,"predict()"),ve.forEach(t),be=s(F,`, such as when creating your own layers or models with
the Keras `),U=r(F,"CODE",{});var nt=i(U);ue=s(nt,"Functional"),nt.forEach(t),Le=s(F,` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),F.forEach(t),he=p(_),j=r(_,"UL",{});var S=i(j);O=r(S,"LI",{});var ce=i(O);$e=s(ce,"a single Tensor with "),B=r(ce,"CODE",{});var Ye=i(B);ge=s(Ye,"pixel_values"),Ye.forEach(t),Se=s(ce," only and nothing else: "),J=r(ce,"CODE",{});var K=i(J);Q=s(K,"model(pixel_values)"),K.forEach(t),ce.forEach(t),Ze=p(S),q=r(S,"LI",{});var W=i(q);ee=s(W,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),se=r(W,"CODE",{});var st=i(se);pe=s(st,"model([pixel_values, attention_mask])"),st.forEach(t),Ke=s(W," or "),ae=r(W,"CODE",{});var de=i(ae);Te=s(de,"model([pixel_values, attention_mask, token_type_ids])"),de.forEach(t),W.forEach(t),P=p(S),R=r(S,"LI",{});var Re=i(R);re=s(Re,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),ie=r(Re,"CODE",{});var Ne=i(ie);We=s(Ne,'model({"pixel_values": pixel_values, "token_type_ids": token_type_ids})'),Ne.forEach(t),Re.forEach(t),S.forEach(t),V=p(_),D=r(_,"P",{});var _e=i(D);Xe=s(_e,`Note that when creating models and layers with
`),A=r(_e,"A",{href:!0,rel:!0});var at=i(A);Ue=s(at,"subclassing"),at.forEach(t),Be=s(_e,` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),_e.forEach(t),this.h()},h(){f(A,"href","https://keras.io/guides/making_new_layers_and_models_via_subclassing/"),f(A,"rel","nofollow")},m(_,k){m(_,c,k),e(c,w),e(c,g),e(g,u),e(c,x),m(_,l,k),m(_,d,k),e(d,I),e(I,Pe),e(d,we),e(d,z),e(z,Y),m(_,te,k),m(_,y,k),e(y,Ae),e(y,H),e(H,qe),e(y,ye),e(y,L),e(L,ze),e(y,oe),e(y,ne),e(ne,Oe),e(y,Ce),e(y,X),e(X,De),e(y,be),e(y,U),e(U,ue),e(y,Le),m(_,he,k),m(_,j,k),e(j,O),e(O,$e),e(O,B),e(B,ge),e(O,Se),e(O,J),e(J,Q),e(j,Ze),e(j,q),e(q,ee),e(q,se),e(se,pe),e(q,Ke),e(q,ae),e(ae,Te),e(j,P),e(j,R),e(R,re),e(R,ie),e(ie,We),m(_,V,k),m(_,D,k),e(D,Xe),e(D,A),e(A,Ue),e(D,Be)},d(_){_&&t(c),_&&t(l),_&&t(d),_&&t(te),_&&t(y),_&&t(he),_&&t(j),_&&t(V),_&&t(D)}}}function Tr(M){let c,w,g,u,x;return{c(){c=a("p"),w=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=a("code"),u=n("Module"),x=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){c=r(l,"P",{});var d=i(c);w=s(d,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=r(d,"CODE",{});var I=i(g);u=s(I,"Module"),I.forEach(t),x=s(d,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),d.forEach(t)},m(l,d){m(l,c,d),e(c,w),e(c,g),e(g,u),e(c,x)},d(l){l&&t(c)}}}function Nr(M){let c,w,g,u,x;return u=new rn({props:{code:`from transformers import ConvNextFeatureExtractor, TFConvNextModel
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = ConvNextFeatureExtractor.from_pretrained("facebook/convnext-tiny-224")
model = TFConvNextModel.from_pretrained("facebook/convnext-tiny-224")

inputs = feature_extractor(images=image, return_tensors="tf")
outputs = model(**inputs)
last_hidden_states = outputs.last_hidden_state`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ConvNextFeatureExtractor, TFConvNextModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = ConvNextFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFConvNextModel.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state`}}),{c(){c=a("p"),w=n("Examples:"),g=h(),C(u.$$.fragment)},l(l){c=r(l,"P",{});var d=i(c);w=s(d,"Examples:"),d.forEach(t),g=p(l),b(u.$$.fragment,l)},m(l,d){m(l,c,d),e(c,w),m(l,g,d),$(u,l,d),x=!0},p:an,i(l){x||(T(u.$$.fragment,l),x=!0)},o(l){N(u.$$.fragment,l),x=!1},d(l){l&&t(c),l&&t(g),E(u,l)}}}function Er(M){let c,w,g,u,x,l,d,I,Pe,we,z,Y,te,y,Ae,H,qe,ye,L,ze,oe,ne,Oe,Ce,X,De,be,U,ue,Le,he,j,O,$e,B,ge,Se,J,Q,Ze,q,ee,se,pe,Ke,ae,Te,P,R,re,ie,We,V,D,Xe,A,Ue,Be;return{c(){c=a("p"),w=n("TensorFlow models and layers in "),g=a("code"),u=n("transformers"),x=n(" accept two formats as input:"),l=h(),d=a("ul"),I=a("li"),Pe=n("having all inputs as keyword arguments (like PyTorch models), or"),we=h(),z=a("li"),Y=n("having all inputs as a list, tuple or dict in the first positional argument."),te=h(),y=a("p"),Ae=n(`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),H=a("code"),qe=n("model.fit()"),ye=n(` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),L=a("code"),ze=n("model.fit()"),oe=n(` supports! If, however, you want to use the second
format outside of Keras methods like `),ne=a("code"),Oe=n("fit()"),Ce=n(" and "),X=a("code"),De=n("predict()"),be=n(`, such as when creating your own layers or models with
the Keras `),U=a("code"),ue=n("Functional"),Le=n(` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),he=h(),j=a("ul"),O=a("li"),$e=n("a single Tensor with "),B=a("code"),ge=n("pixel_values"),Se=n(" only and nothing else: "),J=a("code"),Q=n("model(pixel_values)"),Ze=h(),q=a("li"),ee=n(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),se=a("code"),pe=n("model([pixel_values, attention_mask])"),Ke=n(" or "),ae=a("code"),Te=n("model([pixel_values, attention_mask, token_type_ids])"),P=h(),R=a("li"),re=n(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),ie=a("code"),We=n('model({"pixel_values": pixel_values, "token_type_ids": token_type_ids})'),V=h(),D=a("p"),Xe=n(`Note that when creating models and layers with
`),A=a("a"),Ue=n("subclassing"),Be=n(` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),this.h()},l(_){c=r(_,"P",{});var k=i(c);w=s(k,"TensorFlow models and layers in "),g=r(k,"CODE",{});var et=i(g);u=s(et,"transformers"),et.forEach(t),x=s(k," accept two formats as input:"),k.forEach(t),l=p(_),d=r(_,"UL",{});var G=i(d);I=r(G,"LI",{});var tt=i(I);Pe=s(tt,"having all inputs as keyword arguments (like PyTorch models), or"),tt.forEach(t),we=p(G),z=r(G,"LI",{});var ot=i(z);Y=s(ot,"having all inputs as a list, tuple or dict in the first positional argument."),ot.forEach(t),G.forEach(t),te=p(_),y=r(_,"P",{});var F=i(y);Ae=s(F,`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),H=r(F,"CODE",{});var le=i(H);qe=s(le,"model.fit()"),le.forEach(t),ye=s(F,` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),L=r(F,"CODE",{});var me=i(L);ze=s(me,"model.fit()"),me.forEach(t),oe=s(F,` supports! If, however, you want to use the second
format outside of Keras methods like `),ne=r(F,"CODE",{});var He=i(ne);Oe=s(He,"fit()"),He.forEach(t),Ce=s(F," and "),X=r(F,"CODE",{});var ve=i(X);De=s(ve,"predict()"),ve.forEach(t),be=s(F,`, such as when creating your own layers or models with
the Keras `),U=r(F,"CODE",{});var nt=i(U);ue=s(nt,"Functional"),nt.forEach(t),Le=s(F,` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),F.forEach(t),he=p(_),j=r(_,"UL",{});var S=i(j);O=r(S,"LI",{});var ce=i(O);$e=s(ce,"a single Tensor with "),B=r(ce,"CODE",{});var Ye=i(B);ge=s(Ye,"pixel_values"),Ye.forEach(t),Se=s(ce," only and nothing else: "),J=r(ce,"CODE",{});var K=i(J);Q=s(K,"model(pixel_values)"),K.forEach(t),ce.forEach(t),Ze=p(S),q=r(S,"LI",{});var W=i(q);ee=s(W,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),se=r(W,"CODE",{});var st=i(se);pe=s(st,"model([pixel_values, attention_mask])"),st.forEach(t),Ke=s(W," or "),ae=r(W,"CODE",{});var de=i(ae);Te=s(de,"model([pixel_values, attention_mask, token_type_ids])"),de.forEach(t),W.forEach(t),P=p(S),R=r(S,"LI",{});var Re=i(R);re=s(Re,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),ie=r(Re,"CODE",{});var Ne=i(ie);We=s(Ne,'model({"pixel_values": pixel_values, "token_type_ids": token_type_ids})'),Ne.forEach(t),Re.forEach(t),S.forEach(t),V=p(_),D=r(_,"P",{});var _e=i(D);Xe=s(_e,`Note that when creating models and layers with
`),A=r(_e,"A",{href:!0,rel:!0});var at=i(A);Ue=s(at,"subclassing"),at.forEach(t),Be=s(_e,` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),_e.forEach(t),this.h()},h(){f(A,"href","https://keras.io/guides/making_new_layers_and_models_via_subclassing/"),f(A,"rel","nofollow")},m(_,k){m(_,c,k),e(c,w),e(c,g),e(g,u),e(c,x),m(_,l,k),m(_,d,k),e(d,I),e(I,Pe),e(d,we),e(d,z),e(z,Y),m(_,te,k),m(_,y,k),e(y,Ae),e(y,H),e(H,qe),e(y,ye),e(y,L),e(L,ze),e(y,oe),e(y,ne),e(ne,Oe),e(y,Ce),e(y,X),e(X,De),e(y,be),e(y,U),e(U,ue),e(y,Le),m(_,he,k),m(_,j,k),e(j,O),e(O,$e),e(O,B),e(B,ge),e(O,Se),e(O,J),e(J,Q),e(j,Ze),e(j,q),e(q,ee),e(q,se),e(se,pe),e(q,Ke),e(q,ae),e(ae,Te),e(j,P),e(j,R),e(R,re),e(R,ie),e(ie,We),m(_,V,k),m(_,D,k),e(D,Xe),e(D,A),e(A,Ue),e(D,Be)},d(_){_&&t(c),_&&t(l),_&&t(d),_&&t(te),_&&t(y),_&&t(he),_&&t(j),_&&t(V),_&&t(D)}}}function kr(M){let c,w,g,u,x;return{c(){c=a("p"),w=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=a("code"),u=n("Module"),x=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){c=r(l,"P",{});var d=i(c);w=s(d,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=r(d,"CODE",{});var I=i(g);u=s(I,"Module"),I.forEach(t),x=s(d,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),d.forEach(t)},m(l,d){m(l,c,d),e(c,w),e(c,g),e(g,u),e(c,x)},d(l){l&&t(c)}}}function Fr(M){let c,w,g,u,x;return u=new rn({props:{code:`from transformers import ConvNextFeatureExtractor, TFConvNextForImageClassification
import tensorflow as tf
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = ConvNextFeatureExtractor.from_pretrained("facebook/convnext-tiny-224")
model = TFConvNextForImageClassification.from_pretrained("facebook/convnext-tiny-224")

inputs = feature_extractor(images=image, return_tensors="tf")
outputs = model(**inputs)
logits = outputs.logits
# model predicts one of the 1000 ImageNet classes
predicted_class_idx = tf.math.argmax(logits, axis=-1)[0]
print("Predicted class:", model.config.id2label[int(predicted_class_idx)])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ConvNextFeatureExtractor, TFConvNextForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = ConvNextFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFConvNextForImageClassification.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_class_idx = tf.math.argmax(logits, axis=-<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Predicted class:&quot;</span>, model.config.id2label[<span class="hljs-built_in">int</span>(predicted_class_idx)])`}}),{c(){c=a("p"),w=n("Examples:"),g=h(),C(u.$$.fragment)},l(l){c=r(l,"P",{});var d=i(c);w=s(d,"Examples:"),d.forEach(t),g=p(l),b(u.$$.fragment,l)},m(l,d){m(l,c,d),e(c,w),m(l,g,d),$(u,l,d),x=!0},p:an,i(l){x||(T(u.$$.fragment,l),x=!0)},o(l){N(u.$$.fragment,l),x=!1},d(l){l&&t(c),l&&t(g),E(u,l)}}}function Ir(M){let c,w,g,u,x,l,d,I,Pe,we,z,Y,te,y,Ae,H,qe,ye,L,ze,oe,ne,Oe,Ce,X,De,be,U,ue,Le,he,j,O,$e,B,ge,Se,J,Q,Ze,q,ee,se,pe,Ke,ae,Te,P,R,re,ie,We,V,D,Xe,A,Ue,Be,_,k,et,G,tt,ot,F,le,me,He,ve,nt,S,ce,Ye,K,W,st,de,Re,Ne,_e,at,Lt,Pn,An,qn,rt,zn,uo,On,Dn,go,Ln,Sn,Kn,gt,ln,it,vt,Po,St,Wn,Ao,Xn,cn,Ve,Kt,Un,qo,Bn,Hn,Wt,Rn,vo,Vn,Gn,dn,lt,_t,zo,Xt,Zn,Oo,Yn,fn,Ge,Ut,Jn,Bt,Qn,Ht,es,ts,os,Ee,Rt,ns,ct,ss,_o,as,rs,Do,is,ls,cs,xt,ds,wt,hn,dt,yt,Lo,Vt,fs,So,hs,pn,xe,Gt,ps,Ko,ms,us,Zt,gs,Yt,vs,_s,xs,ke,Jt,ws,ft,ys,xo,Cs,bs,Wo,$s,Ts,Ns,Ct,Es,bt,mn,ht,$t,Xo,Qt,ks,Uo,Fs,un,fe,eo,Is,to,js,wo,Ms,Ps,As,oo,qs,no,zs,Os,Ds,Tt,Ls,Fe,so,Ss,pt,Ks,yo,Ws,Xs,Bo,Us,Bs,Hs,Nt,Rs,Et,gn,mt,kt,Ho,ao,Vs,Ro,Gs,vn,Z,ro,Zs,Vo,Ys,Js,io,Qs,Co,ea,ta,oa,lo,na,co,sa,aa,ra,Ft,ia,Ie,fo,la,ut,ca,bo,da,fa,Go,ha,pa,ma,It,ua,jt,_n;return l=new Dt({}),y=new Dt({}),ve=new Dt({}),W=new Qe({props:{name:"class transformers.ConvNextConfig",anchor:"transformers.ConvNextConfig",parameters:[{name:"num_channels",val:" = 3"},{name:"patch_size",val:" = 4"},{name:"num_stages",val:" = 4"},{name:"hidden_sizes",val:" = None"},{name:"depths",val:" = None"},{name:"hidden_act",val:" = 'gelu'"},{name:"initializer_range",val:" = 0.02"},{name:"layer_norm_eps",val:" = 1e-12"},{name:"is_encoder_decoder",val:" = False"},{name:"layer_scale_init_value",val:" = 1e-06"},{name:"drop_path_rate",val:" = 0.0"},{name:"image_size",val:" = 224"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ConvNextConfig.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The number of input channels.`,name:"num_channels"},{anchor:"transformers.ConvNextConfig.patch_size",description:`<strong>patch_size</strong> (<code>int</code>, optional, defaults to 4) &#x2014;
Patch size to use in the patch embedding layer.`,name:"patch_size"},{anchor:"transformers.ConvNextConfig.num_stages",description:`<strong>num_stages</strong> (<code>int</code>, optional, defaults to 4) &#x2014;
The number of stages in the model.`,name:"num_stages"},{anchor:"transformers.ConvNextConfig.hidden_sizes",description:`<strong>hidden_sizes</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [96, 192, 384, 768]) &#x2014;
Dimensionality (hidden size) at each stage.`,name:"hidden_sizes"},{anchor:"transformers.ConvNextConfig.depths",description:`<strong>depths</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [3, 3, 9, 3]) &#x2014;
Depth (number of blocks) for each stage.`,name:"depths"},{anchor:"transformers.ConvNextConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;gelu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in each block. If string, <code>&quot;gelu&quot;</code>, <code>&quot;relu&quot;</code>,
<code>&quot;selu&quot;</code> and <code>&quot;gelu_new&quot;</code> are supported.`,name:"hidden_act"},{anchor:"transformers.ConvNextConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.ConvNextConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-12) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.ConvNextConfig.layer_scale_init_value",description:`<strong>layer_scale_init_value</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-6) &#x2014;
The initial value for the layer scale.`,name:"layer_scale_init_value"},{anchor:"transformers.ConvNextConfig.drop_path_rate",description:`<strong>drop_path_rate</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The drop rate for stochastic depth.`,name:"drop_path_rate"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/models/convnext/configuration_convnext.py#L35"}}),gt=new sn({props:{anchor:"transformers.ConvNextConfig.example",$$slots:{default:[xr]},$$scope:{ctx:M}}}),St=new Dt({}),Kt=new Qe({props:{name:"class transformers.ConvNextFeatureExtractor",anchor:"transformers.ConvNextFeatureExtractor",parameters:[{name:"do_resize",val:" = True"},{name:"size",val:" = 224"},{name:"resample",val:" = <Resampling.BICUBIC: 3>"},{name:"crop_pct",val:" = None"},{name:"do_normalize",val:" = True"},{name:"image_mean",val:" = None"},{name:"image_std",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ConvNextFeatureExtractor.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to resize (and optionally center crop) the input to a certain <code>size</code>.`,name:"do_resize"},{anchor:"transformers.ConvNextFeatureExtractor.size",description:`<strong>size</strong> (<code>int</code>, <em>optional</em>, defaults to 224) &#x2014;
Resize the input to the given size. If 384 or larger, the image is resized to (<code>size</code>, <code>size</code>). Else, the
smaller edge of the image will be matched to int(<code>size</code>/ <code>crop_pct</code>), after which the image is cropped to
<code>size</code>. Only has an effect if <code>do_resize</code> is set to <code>True</code>.`,name:"size"},{anchor:"transformers.ConvNextFeatureExtractor.resample",description:`<strong>resample</strong> (<code>int</code>, <em>optional</em>, defaults to <code>PIL.Image.BICUBIC</code>) &#x2014;
An optional resampling filter. This can be one of <code>PIL.Image.NEAREST</code>, <code>PIL.Image.BOX</code>,
<code>PIL.Image.BILINEAR</code>, <code>PIL.Image.HAMMING</code>, <code>PIL.Image.BICUBIC</code> or <code>PIL.Image.LANCZOS</code>. Only has an effect
if <code>do_resize</code> is set to <code>True</code>.`,name:"resample"},{anchor:"transformers.ConvNextFeatureExtractor.crop_pct",description:`<strong>crop_pct</strong> (<code>float</code>, <em>optional</em>) &#x2014;
The percentage of the image to crop. If <code>None</code>, then a cropping percentage of 224 / 256 is used. Only has
an effect if <code>do_resize</code> is set to <code>True</code> and <code>size</code> &lt; 384.`,name:"crop_pct"},{anchor:"transformers.ConvNextFeatureExtractor.do_normalize",description:`<strong>do_normalize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to normalize the input with mean and standard deviation.`,name:"do_normalize"},{anchor:"transformers.ConvNextFeatureExtractor.image_mean",description:`<strong>image_mean</strong> (<code>List[int]</code>, defaults to <code>[0.485, 0.456, 0.406]</code>) &#x2014;
The sequence of means for each channel, to be used when normalizing images.`,name:"image_mean"},{anchor:"transformers.ConvNextFeatureExtractor.image_std",description:`<strong>image_std</strong> (<code>List[int]</code>, defaults to <code>[0.229, 0.224, 0.225]</code>) &#x2014;
The sequence of standard deviations for each channel, to be used when normalizing images.`,name:"image_std"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/models/convnext/feature_extraction_convnext.py#L36"}}),Xt=new Dt({}),Ut=new Qe({props:{name:"class transformers.ConvNextModel",anchor:"transformers.ConvNextModel",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.ConvNextModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.1/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/v4.23.1/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/models/convnext/modeling_convnext.py#L326"}}),Rt=new Qe({props:{name:"forward",anchor:"transformers.ConvNextModel.forward",parameters:[{name:"pixel_values",val:": FloatTensor = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.ConvNextModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/v4.23.1/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.ConvNextModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ConvNextModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/v4.23.1/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/models/convnext/modeling_convnext.py#L340",returnDescription:`
<p>A <code>transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/v4.23.1/en/model_doc/convnext#transformers.ConvNextConfig"
>ConvNextConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>pooler_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, hidden_size)</code>) \u2014 Last layer hidden-state after a pooling operation on the spatial dimensions.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, num_channels, height, width)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
</ul>
`,returnType:`
<p><code>transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),xt=new Mo({props:{$$slots:{default:[wr]},$$scope:{ctx:M}}}),wt=new sn({props:{anchor:"transformers.ConvNextModel.forward.example",$$slots:{default:[yr]},$$scope:{ctx:M}}}),Vt=new Dt({}),Gt=new Qe({props:{name:"class transformers.ConvNextForImageClassification",anchor:"transformers.ConvNextForImageClassification",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.ConvNextForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.1/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/v4.23.1/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/models/convnext/modeling_convnext.py#L393"}}),Jt=new Qe({props:{name:"forward",anchor:"transformers.ConvNextForImageClassification.forward",parameters:[{name:"pixel_values",val:": FloatTensor = None"},{name:"labels",val:": typing.Optional[torch.LongTensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.ConvNextForImageClassification.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/v4.23.1/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.ConvNextForImageClassification.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ConvNextForImageClassification.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/v4.23.1/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.ConvNextForImageClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/models/convnext/modeling_convnext.py#L408",returnDescription:`
<p>A <a
  href="/docs/transformers/v4.23.1/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention"
>transformers.modeling_outputs.ImageClassifierOutputWithNoAttention</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/v4.23.1/en/model_doc/convnext#transformers.ConvNextConfig"
>ConvNextConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</li>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each stage) of shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also
called feature maps) of the model at the output of each stage.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/v4.23.1/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention"
>transformers.modeling_outputs.ImageClassifierOutputWithNoAttention</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Ct=new Mo({props:{$$slots:{default:[Cr]},$$scope:{ctx:M}}}),bt=new sn({props:{anchor:"transformers.ConvNextForImageClassification.forward.example",$$slots:{default:[br]},$$scope:{ctx:M}}}),Qt=new Dt({}),eo=new Qe({props:{name:"class transformers.TFConvNextModel",anchor:"transformers.TFConvNextModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFConvNextModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.1/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/v4.23.1/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/models/convnext/modeling_tf_convnext.py#L452"}}),Tt=new Mo({props:{$$slots:{default:[$r]},$$scope:{ctx:M}}}),so=new Qe({props:{name:"call",anchor:"transformers.TFConvNextModel.call",parameters:[{name:"pixel_values",val:": typing.Union[typing.List[tensorflow.python.framework.ops.Tensor], typing.List[numpy.ndarray], typing.List[tensorflow.python.keras.engine.keras_tensor.KerasTensor], typing.Dict[str, tensorflow.python.framework.ops.Tensor], typing.Dict[str, numpy.ndarray], typing.Dict[str, tensorflow.python.keras.engine.keras_tensor.KerasTensor], tensorflow.python.framework.ops.Tensor, numpy.ndarray, tensorflow.python.keras.engine.keras_tensor.KerasTensor, NoneType] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"training",val:": bool = False"}],parametersDescription:[{anchor:"transformers.TFConvNextModel.call.pixel_values",description:`<strong>pixel_values</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code> \`<code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/v4.23.1/en/model_doc/convnext#transformers.ConvNextFeatureExtractor">ConvNextFeatureExtractor</a>. See
<code>ConvNextFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.TFConvNextModel.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFConvNextModel.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/v4.23.1/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used in
eager mode, in graph mode the value will always be set to True.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/models/convnext/modeling_tf_convnext.py#L457",returnDescription:`
<p>A <a
  href="/docs/transformers/v4.23.1/en/main_classes/output#transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling"
>transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling</a> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/v4.23.1/en/model_doc/convnext#transformers.ConvNextConfig"
>ConvNextConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>pooler_output</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, hidden_size)</code>) \u2014 Last layer hidden-state of the first token of the sequence (classification token) further processed by a
Linear layer and a Tanh activation function. The Linear layer weights are trained from the next sentence
prediction (classification) objective during pretraining.</p>
<p>This output is usually <em>not</em> a good summary of the semantic content of the input, you\u2019re often better with
averaging or pooling the sequence of hidden-states for the whole input sequence.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/v4.23.1/en/main_classes/output#transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling"
>transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling</a> or <code>tuple(tf.Tensor)</code></p>
`}}),Nt=new Mo({props:{$$slots:{default:[Tr]},$$scope:{ctx:M}}}),Et=new sn({props:{anchor:"transformers.TFConvNextModel.call.example",$$slots:{default:[Nr]},$$scope:{ctx:M}}}),ao=new Dt({}),ro=new Qe({props:{name:"class transformers.TFConvNextForImageClassification",anchor:"transformers.TFConvNextForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFConvNextForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.1/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/v4.23.1/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/models/convnext/modeling_tf_convnext.py#L527"}}),Ft=new Mo({props:{$$slots:{default:[Er]},$$scope:{ctx:M}}}),fo=new Qe({props:{name:"call",anchor:"transformers.TFConvNextForImageClassification.call",parameters:[{name:"pixel_values",val:": typing.Union[typing.List[tensorflow.python.framework.ops.Tensor], typing.List[numpy.ndarray], typing.List[tensorflow.python.keras.engine.keras_tensor.KerasTensor], typing.Dict[str, tensorflow.python.framework.ops.Tensor], typing.Dict[str, numpy.ndarray], typing.Dict[str, tensorflow.python.keras.engine.keras_tensor.KerasTensor], tensorflow.python.framework.ops.Tensor, numpy.ndarray, tensorflow.python.keras.engine.keras_tensor.KerasTensor, NoneType] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"labels",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"training",val:": typing.Optional[bool] = False"}],parametersDescription:[{anchor:"transformers.TFConvNextForImageClassification.call.pixel_values",description:`<strong>pixel_values</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code> \`<code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/v4.23.1/en/model_doc/convnext#transformers.ConvNextFeatureExtractor">ConvNextFeatureExtractor</a>. See
<code>ConvNextFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.TFConvNextForImageClassification.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFConvNextForImageClassification.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/v4.23.1/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used in
eager mode, in graph mode the value will always be set to True.`,name:"return_dict"},{anchor:"transformers.TFConvNextForImageClassification.call.labels",description:`<strong>labels</strong> (<code>tf.Tensor</code> or <code>np.ndarray</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/v4.23.1/src/transformers/models/convnext/modeling_tf_convnext.py#L542",returnDescription:`
<p>A <a
  href="/docs/transformers/v4.23.1/en/main_classes/output#transformers.modeling_tf_outputs.TFSequenceClassifierOutput"
>transformers.modeling_tf_outputs.TFSequenceClassifierOutput</a> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/v4.23.1/en/model_doc/convnext#transformers.ConvNextConfig"
>ConvNextConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, )</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/v4.23.1/en/main_classes/output#transformers.modeling_tf_outputs.TFSequenceClassifierOutput"
>transformers.modeling_tf_outputs.TFSequenceClassifierOutput</a> or <code>tuple(tf.Tensor)</code></p>
`}}),It=new Mo({props:{$$slots:{default:[kr]},$$scope:{ctx:M}}}),jt=new sn({props:{anchor:"transformers.TFConvNextForImageClassification.call.example",$$slots:{default:[Fr]},$$scope:{ctx:M}}}),{c(){c=a("meta"),w=h(),g=a("h1"),u=a("a"),x=a("span"),C(l.$$.fragment),d=h(),I=a("span"),Pe=n("ConvNeXT"),we=h(),z=a("h2"),Y=a("a"),te=a("span"),C(y.$$.fragment),Ae=h(),H=a("span"),qe=n("Overview"),ye=h(),L=a("p"),ze=n("The ConvNeXT model was proposed in "),oe=a("a"),ne=n("A ConvNet for the 2020s"),Oe=n(` by Zhuang Liu, Hanzi Mao, Chao-Yuan Wu, Christoph Feichtenhofer, Trevor Darrell, Saining Xie.
ConvNeXT is a pure convolutional model (ConvNet), inspired by the design of Vision Transformers, that claims to outperform them.`),Ce=h(),X=a("p"),De=n("The abstract from the paper is the following:"),be=h(),U=a("p"),ue=a("em"),Le=n(`The \u201CRoaring 20s\u201D of visual recognition began with the introduction of Vision Transformers (ViTs), which quickly superseded ConvNets as the state-of-the-art image classification model.
A vanilla ViT, on the other hand, faces difficulties when applied to general computer vision tasks such as object detection and semantic segmentation. It is the hierarchical Transformers
(e.g., Swin Transformers) that reintroduced several ConvNet priors, making Transformers practically viable as a generic vision backbone and demonstrating remarkable performance on a wide
variety of vision tasks. However, the effectiveness of such hybrid approaches is still largely credited to the intrinsic superiority of Transformers, rather than the inherent inductive
biases of convolutions. In this work, we reexamine the design spaces and test the limits of what a pure ConvNet can achieve. We gradually \u201Cmodernize\u201D a standard ResNet toward the design
of a vision Transformer, and discover several key components that contribute to the performance difference along the way. The outcome of this exploration is a family of pure ConvNet models
dubbed ConvNeXt. Constructed entirely from standard ConvNet modules, ConvNeXts compete favorably with Transformers in terms of accuracy and scalability, achieving 87.8% ImageNet top-1 accuracy
and outperforming Swin Transformers on COCO detection and ADE20K segmentation, while maintaining the simplicity and efficiency of standard ConvNets.`),he=h(),j=a("p"),O=n("Tips:"),$e=h(),B=a("ul"),ge=a("li"),Se=n("See the code examples below each model regarding usage."),J=h(),Q=a("img"),q=h(),ee=a("small"),se=n("ConvNeXT architecture. Taken from the "),pe=a("a"),Ke=n("original paper"),ae=n("."),Te=h(),P=a("p"),R=n("This model was contributed by "),re=a("a"),ie=n("nielsr"),We=n(". TensorFlow version of the model was contributed by "),V=a("a"),D=n("ariG23498"),Xe=n(`,
`),A=a("a"),Ue=n("gante"),Be=n(", and "),_=a("a"),k=n("sayakpaul"),et=n(" (equal contribution). The original code can be found "),G=a("a"),tt=n("here"),ot=n("."),F=h(),le=a("h2"),me=a("a"),He=a("span"),C(ve.$$.fragment),nt=h(),S=a("span"),ce=n("ConvNextConfig"),Ye=h(),K=a("div"),C(W.$$.fragment),st=h(),de=a("p"),Re=n("This is the configuration class to store the configuration of a "),Ne=a("a"),_e=n("ConvNextModel"),at=n(`. It is used to instantiate an
ConvNeXT model according to the specified arguments, defining the model architecture. Instantiating a configuration
with the defaults will yield a similar configuration to that of the ConvNeXT
`),Lt=a("a"),Pn=n("facebook/convnext-tiny-224"),An=n(" architecture."),qn=h(),rt=a("p"),zn=n("Configuration objects inherit from "),uo=a("a"),On=n("PretrainedConfig"),Dn=n(` and can be used to control the model outputs. Read the
documentation from `),go=a("a"),Ln=n("PretrainedConfig"),Sn=n(" for more information."),Kn=h(),C(gt.$$.fragment),ln=h(),it=a("h2"),vt=a("a"),Po=a("span"),C(St.$$.fragment),Wn=h(),Ao=a("span"),Xn=n("ConvNextFeatureExtractor"),cn=h(),Ve=a("div"),C(Kt.$$.fragment),Un=h(),qo=a("p"),Bn=n("Constructs a ConvNeXT feature extractor."),Hn=h(),Wt=a("p"),Rn=n("This feature extractor inherits from "),vo=a("a"),Vn=n("FeatureExtractionMixin"),Gn=n(` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),dn=h(),lt=a("h2"),_t=a("a"),zo=a("span"),C(Xt.$$.fragment),Zn=h(),Oo=a("span"),Yn=n("ConvNextModel"),fn=h(),Ge=a("div"),C(Ut.$$.fragment),Jn=h(),Bt=a("p"),Qn=n(`The bare ConvNext model outputting raw features without any specific head on top.
This model is a PyTorch `),Ht=a("a"),es=n("torch.nn.Module"),ts=n(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),os=h(),Ee=a("div"),C(Rt.$$.fragment),ns=h(),ct=a("p"),ss=n("The "),_o=a("a"),as=n("ConvNextModel"),rs=n(" forward method, overrides the "),Do=a("code"),is=n("__call__"),ls=n(" special method."),cs=h(),C(xt.$$.fragment),ds=h(),C(wt.$$.fragment),hn=h(),dt=a("h2"),yt=a("a"),Lo=a("span"),C(Vt.$$.fragment),fs=h(),So=a("span"),hs=n("ConvNextForImageClassification"),pn=h(),xe=a("div"),C(Gt.$$.fragment),ps=h(),Ko=a("p"),ms=n(`ConvNext Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),us=h(),Zt=a("p"),gs=n("This model is a PyTorch "),Yt=a("a"),vs=n("torch.nn.Module"),_s=n(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),xs=h(),ke=a("div"),C(Jt.$$.fragment),ws=h(),ft=a("p"),ys=n("The "),xo=a("a"),Cs=n("ConvNextForImageClassification"),bs=n(" forward method, overrides the "),Wo=a("code"),$s=n("__call__"),Ts=n(" special method."),Ns=h(),C(Ct.$$.fragment),Es=h(),C(bt.$$.fragment),mn=h(),ht=a("h2"),$t=a("a"),Xo=a("span"),C(Qt.$$.fragment),ks=h(),Uo=a("span"),Fs=n("TFConvNextModel"),un=h(),fe=a("div"),C(eo.$$.fragment),Is=h(),to=a("p"),js=n(`The bare ConvNext model outputting raw features without any specific head on top.
This model inherits from `),wo=a("a"),Ms=n("TFPreTrainedModel"),Ps=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),As=h(),oo=a("p"),qs=n("This model is also a "),no=a("a"),zs=n("tf.keras.Model"),Os=n(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Ds=h(),C(Tt.$$.fragment),Ls=h(),Fe=a("div"),C(so.$$.fragment),Ss=h(),pt=a("p"),Ks=n("The "),yo=a("a"),Ws=n("TFConvNextModel"),Xs=n(" forward method, overrides the "),Bo=a("code"),Us=n("__call__"),Bs=n(" special method."),Hs=h(),C(Nt.$$.fragment),Rs=h(),C(Et.$$.fragment),gn=h(),mt=a("h2"),kt=a("a"),Ho=a("span"),C(ao.$$.fragment),Vs=h(),Ro=a("span"),Gs=n("TFConvNextForImageClassification"),vn=h(),Z=a("div"),C(ro.$$.fragment),Zs=h(),Vo=a("p"),Ys=n(`ConvNext Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),Js=h(),io=a("p"),Qs=n("This model inherits from "),Co=a("a"),ea=n("TFPreTrainedModel"),ta=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),oa=h(),lo=a("p"),na=n("This model is also a "),co=a("a"),sa=n("tf.keras.Model"),aa=n(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),ra=h(),C(Ft.$$.fragment),ia=h(),Ie=a("div"),C(fo.$$.fragment),la=h(),ut=a("p"),ca=n("The "),bo=a("a"),da=n("TFConvNextForImageClassification"),fa=n(" forward method, overrides the "),Go=a("code"),ha=n("__call__"),pa=n(" special method."),ma=h(),C(It.$$.fragment),ua=h(),C(jt.$$.fragment),this.h()},l(o){const v=gr('[data-svelte="svelte-1phssyn"]',document.head);c=r(v,"META",{name:!0,content:!0}),v.forEach(t),w=p(o),g=r(o,"H1",{class:!0});var ho=i(g);u=r(ho,"A",{id:!0,class:!0,href:!0});var Zo=i(u);x=r(Zo,"SPAN",{});var Yo=i(x);b(l.$$.fragment,Yo),Yo.forEach(t),Zo.forEach(t),d=p(ho),I=r(ho,"SPAN",{});var Jo=i(I);Pe=s(Jo,"ConvNeXT"),Jo.forEach(t),ho.forEach(t),we=p(o),z=r(o,"H2",{class:!0});var po=i(z);Y=r(po,"A",{id:!0,class:!0,href:!0});var Qo=i(Y);te=r(Qo,"SPAN",{});var en=i(te);b(y.$$.fragment,en),en.forEach(t),Qo.forEach(t),Ae=p(po),H=r(po,"SPAN",{});var tn=i(H);qe=s(tn,"Overview"),tn.forEach(t),po.forEach(t),ye=p(o),L=r(o,"P",{});var mo=i(L);ze=s(mo,"The ConvNeXT model was proposed in "),oe=r(mo,"A",{href:!0,rel:!0});var on=i(oe);ne=s(on,"A ConvNet for the 2020s"),on.forEach(t),Oe=s(mo,` by Zhuang Liu, Hanzi Mao, Chao-Yuan Wu, Christoph Feichtenhofer, Trevor Darrell, Saining Xie.
ConvNeXT is a pure convolutional model (ConvNet), inspired by the design of Vision Transformers, that claims to outperform them.`),mo.forEach(t),Ce=p(o),X=r(o,"P",{});var nn=i(X);De=s(nn,"The abstract from the paper is the following:"),nn.forEach(t),be=p(o),U=r(o,"P",{});var ga=i(U);ue=r(ga,"EM",{});var va=i(ue);Le=s(va,`The \u201CRoaring 20s\u201D of visual recognition began with the introduction of Vision Transformers (ViTs), which quickly superseded ConvNets as the state-of-the-art image classification model.
A vanilla ViT, on the other hand, faces difficulties when applied to general computer vision tasks such as object detection and semantic segmentation. It is the hierarchical Transformers
(e.g., Swin Transformers) that reintroduced several ConvNet priors, making Transformers practically viable as a generic vision backbone and demonstrating remarkable performance on a wide
variety of vision tasks. However, the effectiveness of such hybrid approaches is still largely credited to the intrinsic superiority of Transformers, rather than the inherent inductive
biases of convolutions. In this work, we reexamine the design spaces and test the limits of what a pure ConvNet can achieve. We gradually \u201Cmodernize\u201D a standard ResNet toward the design
of a vision Transformer, and discover several key components that contribute to the performance difference along the way. The outcome of this exploration is a family of pure ConvNet models
dubbed ConvNeXt. Constructed entirely from standard ConvNet modules, ConvNeXts compete favorably with Transformers in terms of accuracy and scalability, achieving 87.8% ImageNet top-1 accuracy
and outperforming Swin Transformers on COCO detection and ADE20K segmentation, while maintaining the simplicity and efficiency of standard ConvNets.`),va.forEach(t),ga.forEach(t),he=p(o),j=r(o,"P",{});var _a=i(j);O=s(_a,"Tips:"),_a.forEach(t),$e=p(o),B=r(o,"UL",{});var xa=i(B);ge=r(xa,"LI",{});var wa=i(ge);Se=s(wa,"See the code examples below each model regarding usage."),wa.forEach(t),xa.forEach(t),J=p(o),Q=r(o,"IMG",{src:!0,alt:!0,width:!0}),q=p(o),ee=r(o,"SMALL",{});var xn=i(ee);se=s(xn,"ConvNeXT architecture. Taken from the "),pe=r(xn,"A",{href:!0});var ya=i(pe);Ke=s(ya,"original paper"),ya.forEach(t),ae=s(xn,"."),xn.forEach(t),Te=p(o),P=r(o,"P",{});var je=i(P);R=s(je,"This model was contributed by "),re=r(je,"A",{href:!0,rel:!0});var Ca=i(re);ie=s(Ca,"nielsr"),Ca.forEach(t),We=s(je,". TensorFlow version of the model was contributed by "),V=r(je,"A",{href:!0,rel:!0});var ba=i(V);D=s(ba,"ariG23498"),ba.forEach(t),Xe=s(je,`,
`),A=r(je,"A",{href:!0,rel:!0});var $a=i(A);Ue=s($a,"gante"),$a.forEach(t),Be=s(je,", and "),_=r(je,"A",{href:!0,rel:!0});var Ta=i(_);k=s(Ta,"sayakpaul"),Ta.forEach(t),et=s(je," (equal contribution). The original code can be found "),G=r(je,"A",{href:!0,rel:!0});var Na=i(G);tt=s(Na,"here"),Na.forEach(t),ot=s(je,"."),je.forEach(t),F=p(o),le=r(o,"H2",{class:!0});var wn=i(le);me=r(wn,"A",{id:!0,class:!0,href:!0});var Ea=i(me);He=r(Ea,"SPAN",{});var ka=i(He);b(ve.$$.fragment,ka),ka.forEach(t),Ea.forEach(t),nt=p(wn),S=r(wn,"SPAN",{});var Fa=i(S);ce=s(Fa,"ConvNextConfig"),Fa.forEach(t),wn.forEach(t),Ye=p(o),K=r(o,"DIV",{class:!0});var Mt=i(K);b(W.$$.fragment,Mt),st=p(Mt),de=r(Mt,"P",{});var $o=i(de);Re=s($o,"This is the configuration class to store the configuration of a "),Ne=r($o,"A",{href:!0});var Ia=i(Ne);_e=s(Ia,"ConvNextModel"),Ia.forEach(t),at=s($o,`. It is used to instantiate an
ConvNeXT model according to the specified arguments, defining the model architecture. Instantiating a configuration
with the defaults will yield a similar configuration to that of the ConvNeXT
`),Lt=r($o,"A",{href:!0,rel:!0});var ja=i(Lt);Pn=s(ja,"facebook/convnext-tiny-224"),ja.forEach(t),An=s($o," architecture."),$o.forEach(t),qn=p(Mt),rt=r(Mt,"P",{});var To=i(rt);zn=s(To,"Configuration objects inherit from "),uo=r(To,"A",{href:!0});var Ma=i(uo);On=s(Ma,"PretrainedConfig"),Ma.forEach(t),Dn=s(To,` and can be used to control the model outputs. Read the
documentation from `),go=r(To,"A",{href:!0});var Pa=i(go);Ln=s(Pa,"PretrainedConfig"),Pa.forEach(t),Sn=s(To," for more information."),To.forEach(t),Kn=p(Mt),b(gt.$$.fragment,Mt),Mt.forEach(t),ln=p(o),it=r(o,"H2",{class:!0});var yn=i(it);vt=r(yn,"A",{id:!0,class:!0,href:!0});var Aa=i(vt);Po=r(Aa,"SPAN",{});var qa=i(Po);b(St.$$.fragment,qa),qa.forEach(t),Aa.forEach(t),Wn=p(yn),Ao=r(yn,"SPAN",{});var za=i(Ao);Xn=s(za,"ConvNextFeatureExtractor"),za.forEach(t),yn.forEach(t),cn=p(o),Ve=r(o,"DIV",{class:!0});var No=i(Ve);b(Kt.$$.fragment,No),Un=p(No),qo=r(No,"P",{});var Oa=i(qo);Bn=s(Oa,"Constructs a ConvNeXT feature extractor."),Oa.forEach(t),Hn=p(No),Wt=r(No,"P",{});var Cn=i(Wt);Rn=s(Cn,"This feature extractor inherits from "),vo=r(Cn,"A",{href:!0});var Da=i(vo);Vn=s(Da,"FeatureExtractionMixin"),Da.forEach(t),Gn=s(Cn,` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),Cn.forEach(t),No.forEach(t),dn=p(o),lt=r(o,"H2",{class:!0});var bn=i(lt);_t=r(bn,"A",{id:!0,class:!0,href:!0});var La=i(_t);zo=r(La,"SPAN",{});var Sa=i(zo);b(Xt.$$.fragment,Sa),Sa.forEach(t),La.forEach(t),Zn=p(bn),Oo=r(bn,"SPAN",{});var Ka=i(Oo);Yn=s(Ka,"ConvNextModel"),Ka.forEach(t),bn.forEach(t),fn=p(o),Ge=r(o,"DIV",{class:!0});var Eo=i(Ge);b(Ut.$$.fragment,Eo),Jn=p(Eo),Bt=r(Eo,"P",{});var $n=i(Bt);Qn=s($n,`The bare ConvNext model outputting raw features without any specific head on top.
This model is a PyTorch `),Ht=r($n,"A",{href:!0,rel:!0});var Wa=i(Ht);es=s(Wa,"torch.nn.Module"),Wa.forEach(t),ts=s($n,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),$n.forEach(t),os=p(Eo),Ee=r(Eo,"DIV",{class:!0});var Pt=i(Ee);b(Rt.$$.fragment,Pt),ns=p(Pt),ct=r(Pt,"P",{});var ko=i(ct);ss=s(ko,"The "),_o=r(ko,"A",{href:!0});var Xa=i(_o);as=s(Xa,"ConvNextModel"),Xa.forEach(t),rs=s(ko," forward method, overrides the "),Do=r(ko,"CODE",{});var Ua=i(Do);is=s(Ua,"__call__"),Ua.forEach(t),ls=s(ko," special method."),ko.forEach(t),cs=p(Pt),b(xt.$$.fragment,Pt),ds=p(Pt),b(wt.$$.fragment,Pt),Pt.forEach(t),Eo.forEach(t),hn=p(o),dt=r(o,"H2",{class:!0});var Tn=i(dt);yt=r(Tn,"A",{id:!0,class:!0,href:!0});var Ba=i(yt);Lo=r(Ba,"SPAN",{});var Ha=i(Lo);b(Vt.$$.fragment,Ha),Ha.forEach(t),Ba.forEach(t),fs=p(Tn),So=r(Tn,"SPAN",{});var Ra=i(So);hs=s(Ra,"ConvNextForImageClassification"),Ra.forEach(t),Tn.forEach(t),pn=p(o),xe=r(o,"DIV",{class:!0});var At=i(xe);b(Gt.$$.fragment,At),ps=p(At),Ko=r(At,"P",{});var Va=i(Ko);ms=s(Va,`ConvNext Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),Va.forEach(t),us=p(At),Zt=r(At,"P",{});var Nn=i(Zt);gs=s(Nn,"This model is a PyTorch "),Yt=r(Nn,"A",{href:!0,rel:!0});var Ga=i(Yt);vs=s(Ga,"torch.nn.Module"),Ga.forEach(t),_s=s(Nn,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Nn.forEach(t),xs=p(At),ke=r(At,"DIV",{class:!0});var qt=i(ke);b(Jt.$$.fragment,qt),ws=p(qt),ft=r(qt,"P",{});var Fo=i(ft);ys=s(Fo,"The "),xo=r(Fo,"A",{href:!0});var Za=i(xo);Cs=s(Za,"ConvNextForImageClassification"),Za.forEach(t),bs=s(Fo," forward method, overrides the "),Wo=r(Fo,"CODE",{});var Ya=i(Wo);$s=s(Ya,"__call__"),Ya.forEach(t),Ts=s(Fo," special method."),Fo.forEach(t),Ns=p(qt),b(Ct.$$.fragment,qt),Es=p(qt),b(bt.$$.fragment,qt),qt.forEach(t),At.forEach(t),mn=p(o),ht=r(o,"H2",{class:!0});var En=i(ht);$t=r(En,"A",{id:!0,class:!0,href:!0});var Ja=i($t);Xo=r(Ja,"SPAN",{});var Qa=i(Xo);b(Qt.$$.fragment,Qa),Qa.forEach(t),Ja.forEach(t),ks=p(En),Uo=r(En,"SPAN",{});var er=i(Uo);Fs=s(er,"TFConvNextModel"),er.forEach(t),En.forEach(t),un=p(o),fe=r(o,"DIV",{class:!0});var Je=i(fe);b(eo.$$.fragment,Je),Is=p(Je),to=r(Je,"P",{});var kn=i(to);js=s(kn,`The bare ConvNext model outputting raw features without any specific head on top.
This model inherits from `),wo=r(kn,"A",{href:!0});var tr=i(wo);Ms=s(tr,"TFPreTrainedModel"),tr.forEach(t),Ps=s(kn,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),kn.forEach(t),As=p(Je),oo=r(Je,"P",{});var Fn=i(oo);qs=s(Fn,"This model is also a "),no=r(Fn,"A",{href:!0,rel:!0});var or=i(no);zs=s(or,"tf.keras.Model"),or.forEach(t),Os=s(Fn,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Fn.forEach(t),Ds=p(Je),b(Tt.$$.fragment,Je),Ls=p(Je),Fe=r(Je,"DIV",{class:!0});var zt=i(Fe);b(so.$$.fragment,zt),Ss=p(zt),pt=r(zt,"P",{});var Io=i(pt);Ks=s(Io,"The "),yo=r(Io,"A",{href:!0});var nr=i(yo);Ws=s(nr,"TFConvNextModel"),nr.forEach(t),Xs=s(Io," forward method, overrides the "),Bo=r(Io,"CODE",{});var sr=i(Bo);Us=s(sr,"__call__"),sr.forEach(t),Bs=s(Io," special method."),Io.forEach(t),Hs=p(zt),b(Nt.$$.fragment,zt),Rs=p(zt),b(Et.$$.fragment,zt),zt.forEach(t),Je.forEach(t),gn=p(o),mt=r(o,"H2",{class:!0});var In=i(mt);kt=r(In,"A",{id:!0,class:!0,href:!0});var ar=i(kt);Ho=r(ar,"SPAN",{});var rr=i(Ho);b(ao.$$.fragment,rr),rr.forEach(t),ar.forEach(t),Vs=p(In),Ro=r(In,"SPAN",{});var ir=i(Ro);Gs=s(ir,"TFConvNextForImageClassification"),ir.forEach(t),In.forEach(t),vn=p(o),Z=r(o,"DIV",{class:!0});var Me=i(Z);b(ro.$$.fragment,Me),Zs=p(Me),Vo=r(Me,"P",{});var lr=i(Vo);Ys=s(lr,`ConvNext Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),lr.forEach(t),Js=p(Me),io=r(Me,"P",{});var jn=i(io);Qs=s(jn,"This model inherits from "),Co=r(jn,"A",{href:!0});var cr=i(Co);ea=s(cr,"TFPreTrainedModel"),cr.forEach(t),ta=s(jn,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),jn.forEach(t),oa=p(Me),lo=r(Me,"P",{});var Mn=i(lo);na=s(Mn,"This model is also a "),co=r(Mn,"A",{href:!0,rel:!0});var dr=i(co);sa=s(dr,"tf.keras.Model"),dr.forEach(t),aa=s(Mn,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Mn.forEach(t),ra=p(Me),b(Ft.$$.fragment,Me),ia=p(Me),Ie=r(Me,"DIV",{class:!0});var Ot=i(Ie);b(fo.$$.fragment,Ot),la=p(Ot),ut=r(Ot,"P",{});var jo=i(ut);ca=s(jo,"The "),bo=r(jo,"A",{href:!0});var fr=i(bo);da=s(fr,"TFConvNextForImageClassification"),fr.forEach(t),fa=s(jo," forward method, overrides the "),Go=r(jo,"CODE",{});var hr=i(Go);ha=s(hr,"__call__"),hr.forEach(t),pa=s(jo," special method."),jo.forEach(t),ma=p(Ot),b(It.$$.fragment,Ot),ua=p(Ot),b(jt.$$.fragment,Ot),Ot.forEach(t),Me.forEach(t),this.h()},h(){f(c,"name","hf:doc:metadata"),f(c,"content",JSON.stringify(jr)),f(u,"id","convnext"),f(u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(u,"href","#convnext"),f(g,"class","relative group"),f(Y,"id","overview"),f(Y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Y,"href","#overview"),f(z,"class","relative group"),f(oe,"href","https://arxiv.org/abs/2201.03545"),f(oe,"rel","nofollow"),vr(Q.src,Ze="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/convnext_architecture.jpg")||f(Q,"src",Ze),f(Q,"alt","drawing"),f(Q,"width","600"),f(pe,"href","https://arxiv.org/abs/2201.03545"),f(re,"href","https://huggingface.co/nielsr"),f(re,"rel","nofollow"),f(V,"href","https://github.com/ariG23498"),f(V,"rel","nofollow"),f(A,"href","https://github.com/gante"),f(A,"rel","nofollow"),f(_,"href","https://github.com/sayakpaul"),f(_,"rel","nofollow"),f(G,"href","https://github.com/facebookresearch/ConvNeXt"),f(G,"rel","nofollow"),f(me,"id","transformers.ConvNextConfig"),f(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(me,"href","#transformers.ConvNextConfig"),f(le,"class","relative group"),f(Ne,"href","/docs/transformers/v4.23.1/en/model_doc/convnext#transformers.ConvNextModel"),f(Lt,"href","https://huggingface.co/facebook/convnext-tiny-224"),f(Lt,"rel","nofollow"),f(uo,"href","/docs/transformers/v4.23.1/en/main_classes/configuration#transformers.PretrainedConfig"),f(go,"href","/docs/transformers/v4.23.1/en/main_classes/configuration#transformers.PretrainedConfig"),f(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(vt,"id","transformers.ConvNextFeatureExtractor"),f(vt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(vt,"href","#transformers.ConvNextFeatureExtractor"),f(it,"class","relative group"),f(vo,"href","/docs/transformers/v4.23.1/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin"),f(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(_t,"id","transformers.ConvNextModel"),f(_t,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(_t,"href","#transformers.ConvNextModel"),f(lt,"class","relative group"),f(Ht,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),f(Ht,"rel","nofollow"),f(_o,"href","/docs/transformers/v4.23.1/en/model_doc/convnext#transformers.ConvNextModel"),f(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(Ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(yt,"id","transformers.ConvNextForImageClassification"),f(yt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(yt,"href","#transformers.ConvNextForImageClassification"),f(dt,"class","relative group"),f(Yt,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),f(Yt,"rel","nofollow"),f(xo,"href","/docs/transformers/v4.23.1/en/model_doc/convnext#transformers.ConvNextForImageClassification"),f(ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f($t,"id","transformers.TFConvNextModel"),f($t,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f($t,"href","#transformers.TFConvNextModel"),f(ht,"class","relative group"),f(wo,"href","/docs/transformers/v4.23.1/en/main_classes/model#transformers.TFPreTrainedModel"),f(no,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),f(no,"rel","nofollow"),f(yo,"href","/docs/transformers/v4.23.1/en/model_doc/convnext#transformers.TFConvNextModel"),f(Fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(kt,"id","transformers.TFConvNextForImageClassification"),f(kt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(kt,"href","#transformers.TFConvNextForImageClassification"),f(mt,"class","relative group"),f(Co,"href","/docs/transformers/v4.23.1/en/main_classes/model#transformers.TFPreTrainedModel"),f(co,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),f(co,"rel","nofollow"),f(bo,"href","/docs/transformers/v4.23.1/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),f(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(o,v){e(document.head,c),m(o,w,v),m(o,g,v),e(g,u),e(u,x),$(l,x,null),e(g,d),e(g,I),e(I,Pe),m(o,we,v),m(o,z,v),e(z,Y),e(Y,te),$(y,te,null),e(z,Ae),e(z,H),e(H,qe),m(o,ye,v),m(o,L,v),e(L,ze),e(L,oe),e(oe,ne),e(L,Oe),m(o,Ce,v),m(o,X,v),e(X,De),m(o,be,v),m(o,U,v),e(U,ue),e(ue,Le),m(o,he,v),m(o,j,v),e(j,O),m(o,$e,v),m(o,B,v),e(B,ge),e(ge,Se),m(o,J,v),m(o,Q,v),m(o,q,v),m(o,ee,v),e(ee,se),e(ee,pe),e(pe,Ke),e(ee,ae),m(o,Te,v),m(o,P,v),e(P,R),e(P,re),e(re,ie),e(P,We),e(P,V),e(V,D),e(P,Xe),e(P,A),e(A,Ue),e(P,Be),e(P,_),e(_,k),e(P,et),e(P,G),e(G,tt),e(P,ot),m(o,F,v),m(o,le,v),e(le,me),e(me,He),$(ve,He,null),e(le,nt),e(le,S),e(S,ce),m(o,Ye,v),m(o,K,v),$(W,K,null),e(K,st),e(K,de),e(de,Re),e(de,Ne),e(Ne,_e),e(de,at),e(de,Lt),e(Lt,Pn),e(de,An),e(K,qn),e(K,rt),e(rt,zn),e(rt,uo),e(uo,On),e(rt,Dn),e(rt,go),e(go,Ln),e(rt,Sn),e(K,Kn),$(gt,K,null),m(o,ln,v),m(o,it,v),e(it,vt),e(vt,Po),$(St,Po,null),e(it,Wn),e(it,Ao),e(Ao,Xn),m(o,cn,v),m(o,Ve,v),$(Kt,Ve,null),e(Ve,Un),e(Ve,qo),e(qo,Bn),e(Ve,Hn),e(Ve,Wt),e(Wt,Rn),e(Wt,vo),e(vo,Vn),e(Wt,Gn),m(o,dn,v),m(o,lt,v),e(lt,_t),e(_t,zo),$(Xt,zo,null),e(lt,Zn),e(lt,Oo),e(Oo,Yn),m(o,fn,v),m(o,Ge,v),$(Ut,Ge,null),e(Ge,Jn),e(Ge,Bt),e(Bt,Qn),e(Bt,Ht),e(Ht,es),e(Bt,ts),e(Ge,os),e(Ge,Ee),$(Rt,Ee,null),e(Ee,ns),e(Ee,ct),e(ct,ss),e(ct,_o),e(_o,as),e(ct,rs),e(ct,Do),e(Do,is),e(ct,ls),e(Ee,cs),$(xt,Ee,null),e(Ee,ds),$(wt,Ee,null),m(o,hn,v),m(o,dt,v),e(dt,yt),e(yt,Lo),$(Vt,Lo,null),e(dt,fs),e(dt,So),e(So,hs),m(o,pn,v),m(o,xe,v),$(Gt,xe,null),e(xe,ps),e(xe,Ko),e(Ko,ms),e(xe,us),e(xe,Zt),e(Zt,gs),e(Zt,Yt),e(Yt,vs),e(Zt,_s),e(xe,xs),e(xe,ke),$(Jt,ke,null),e(ke,ws),e(ke,ft),e(ft,ys),e(ft,xo),e(xo,Cs),e(ft,bs),e(ft,Wo),e(Wo,$s),e(ft,Ts),e(ke,Ns),$(Ct,ke,null),e(ke,Es),$(bt,ke,null),m(o,mn,v),m(o,ht,v),e(ht,$t),e($t,Xo),$(Qt,Xo,null),e(ht,ks),e(ht,Uo),e(Uo,Fs),m(o,un,v),m(o,fe,v),$(eo,fe,null),e(fe,Is),e(fe,to),e(to,js),e(to,wo),e(wo,Ms),e(to,Ps),e(fe,As),e(fe,oo),e(oo,qs),e(oo,no),e(no,zs),e(oo,Os),e(fe,Ds),$(Tt,fe,null),e(fe,Ls),e(fe,Fe),$(so,Fe,null),e(Fe,Ss),e(Fe,pt),e(pt,Ks),e(pt,yo),e(yo,Ws),e(pt,Xs),e(pt,Bo),e(Bo,Us),e(pt,Bs),e(Fe,Hs),$(Nt,Fe,null),e(Fe,Rs),$(Et,Fe,null),m(o,gn,v),m(o,mt,v),e(mt,kt),e(kt,Ho),$(ao,Ho,null),e(mt,Vs),e(mt,Ro),e(Ro,Gs),m(o,vn,v),m(o,Z,v),$(ro,Z,null),e(Z,Zs),e(Z,Vo),e(Vo,Ys),e(Z,Js),e(Z,io),e(io,Qs),e(io,Co),e(Co,ea),e(io,ta),e(Z,oa),e(Z,lo),e(lo,na),e(lo,co),e(co,sa),e(lo,aa),e(Z,ra),$(Ft,Z,null),e(Z,ia),e(Z,Ie),$(fo,Ie,null),e(Ie,la),e(Ie,ut),e(ut,ca),e(ut,bo),e(bo,da),e(ut,fa),e(ut,Go),e(Go,ha),e(ut,pa),e(Ie,ma),$(It,Ie,null),e(Ie,ua),$(jt,Ie,null),_n=!0},p(o,[v]){const ho={};v&2&&(ho.$$scope={dirty:v,ctx:o}),gt.$set(ho);const Zo={};v&2&&(Zo.$$scope={dirty:v,ctx:o}),xt.$set(Zo);const Yo={};v&2&&(Yo.$$scope={dirty:v,ctx:o}),wt.$set(Yo);const Jo={};v&2&&(Jo.$$scope={dirty:v,ctx:o}),Ct.$set(Jo);const po={};v&2&&(po.$$scope={dirty:v,ctx:o}),bt.$set(po);const Qo={};v&2&&(Qo.$$scope={dirty:v,ctx:o}),Tt.$set(Qo);const en={};v&2&&(en.$$scope={dirty:v,ctx:o}),Nt.$set(en);const tn={};v&2&&(tn.$$scope={dirty:v,ctx:o}),Et.$set(tn);const mo={};v&2&&(mo.$$scope={dirty:v,ctx:o}),Ft.$set(mo);const on={};v&2&&(on.$$scope={dirty:v,ctx:o}),It.$set(on);const nn={};v&2&&(nn.$$scope={dirty:v,ctx:o}),jt.$set(nn)},i(o){_n||(T(l.$$.fragment,o),T(y.$$.fragment,o),T(ve.$$.fragment,o),T(W.$$.fragment,o),T(gt.$$.fragment,o),T(St.$$.fragment,o),T(Kt.$$.fragment,o),T(Xt.$$.fragment,o),T(Ut.$$.fragment,o),T(Rt.$$.fragment,o),T(xt.$$.fragment,o),T(wt.$$.fragment,o),T(Vt.$$.fragment,o),T(Gt.$$.fragment,o),T(Jt.$$.fragment,o),T(Ct.$$.fragment,o),T(bt.$$.fragment,o),T(Qt.$$.fragment,o),T(eo.$$.fragment,o),T(Tt.$$.fragment,o),T(so.$$.fragment,o),T(Nt.$$.fragment,o),T(Et.$$.fragment,o),T(ao.$$.fragment,o),T(ro.$$.fragment,o),T(Ft.$$.fragment,o),T(fo.$$.fragment,o),T(It.$$.fragment,o),T(jt.$$.fragment,o),_n=!0)},o(o){N(l.$$.fragment,o),N(y.$$.fragment,o),N(ve.$$.fragment,o),N(W.$$.fragment,o),N(gt.$$.fragment,o),N(St.$$.fragment,o),N(Kt.$$.fragment,o),N(Xt.$$.fragment,o),N(Ut.$$.fragment,o),N(Rt.$$.fragment,o),N(xt.$$.fragment,o),N(wt.$$.fragment,o),N(Vt.$$.fragment,o),N(Gt.$$.fragment,o),N(Jt.$$.fragment,o),N(Ct.$$.fragment,o),N(bt.$$.fragment,o),N(Qt.$$.fragment,o),N(eo.$$.fragment,o),N(Tt.$$.fragment,o),N(so.$$.fragment,o),N(Nt.$$.fragment,o),N(Et.$$.fragment,o),N(ao.$$.fragment,o),N(ro.$$.fragment,o),N(Ft.$$.fragment,o),N(fo.$$.fragment,o),N(It.$$.fragment,o),N(jt.$$.fragment,o),_n=!1},d(o){t(c),o&&t(w),o&&t(g),E(l),o&&t(we),o&&t(z),E(y),o&&t(ye),o&&t(L),o&&t(Ce),o&&t(X),o&&t(be),o&&t(U),o&&t(he),o&&t(j),o&&t($e),o&&t(B),o&&t(J),o&&t(Q),o&&t(q),o&&t(ee),o&&t(Te),o&&t(P),o&&t(F),o&&t(le),E(ve),o&&t(Ye),o&&t(K),E(W),E(gt),o&&t(ln),o&&t(it),E(St),o&&t(cn),o&&t(Ve),E(Kt),o&&t(dn),o&&t(lt),E(Xt),o&&t(fn),o&&t(Ge),E(Ut),E(Rt),E(xt),E(wt),o&&t(hn),o&&t(dt),E(Vt),o&&t(pn),o&&t(xe),E(Gt),E(Jt),E(Ct),E(bt),o&&t(mn),o&&t(ht),E(Qt),o&&t(un),o&&t(fe),E(eo),E(Tt),E(so),E(Nt),E(Et),o&&t(gn),o&&t(mt),E(ao),o&&t(vn),o&&t(Z),E(ro),E(Ft),E(fo),E(It),E(jt)}}}const jr={local:"convnext",sections:[{local:"overview",title:"Overview"},{local:"transformers.ConvNextConfig",title:"ConvNextConfig"},{local:"transformers.ConvNextFeatureExtractor",title:"ConvNextFeatureExtractor"},{local:"transformers.ConvNextModel",title:"ConvNextModel"},{local:"transformers.ConvNextForImageClassification",title:"ConvNextForImageClassification"},{local:"transformers.TFConvNextModel",title:"TFConvNextModel"},{local:"transformers.TFConvNextForImageClassification",title:"TFConvNextForImageClassification"}],title:"ConvNeXT"};function Mr(M){return _r(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Lr extends pr{constructor(c){super();mr(this,c,Mr,Ir,ur,{})}}export{Lr as default,jr as metadata};
