import{S as kfr,i as Rfr,s as Sfr,e as a,k as l,w as f,t as o,L as Pfr,c as s,d as r,m as d,a as n,x as m,h as t,b as c,J as e,g as b,y as g,q as h,o as u,B as p}from"../../../chunks/vendor-9e2b328e.js";import{T as v3t}from"../../../chunks/Tip-76f97a76.js";import{D as E}from"../../../chunks/Docstring-50fd6873.js";import{C as w}from"../../../chunks/CodeBlock-b9ff96e9.js";import{I as z}from"../../../chunks/IconCopyLink-fd0e58fd.js";import"../../../chunks/CopyButton-4b97cbf7.js";function $fr(_d){let J,Ae,le,me,oo,ce,_e,No,bd,mf,ta,vd,Td,A3,gf,Ee,no,Fd,Ls,L3,Bs,xs,B3,Cd,ks,x3,Md,hf,ka;return{c(){J=a("p"),Ae=o("If your "),le=a("code"),me=o("NewModelConfig"),oo=o(" is a subclass of "),ce=a("code"),_e=o("PretrainedConfig"),No=o(`, make sure its
`),bd=a("code"),mf=o("model_type"),ta=o(" attribute is set to the same key you use when registering the config (here "),vd=a("code"),Td=o('"new-model"'),A3=o(")."),gf=l(),Ee=a("p"),no=o("Likewise, if your "),Fd=a("code"),Ls=o("NewModel"),L3=o(" is a subclass of "),Bs=a("a"),xs=o("PreTrainedModel"),B3=o(`, make sure its
`),Cd=a("code"),ks=o("config_class"),x3=o(` attribute is set to the same class you use when registering the model (here
`),Md=a("code"),hf=o("NewModelConfig"),ka=o(")."),this.h()},l(lo){J=s(lo,"P",{});var ge=n(J);Ae=t(ge,"If your "),le=s(ge,"CODE",{});var r7=n(le);me=t(r7,"NewModelConfig"),r7.forEach(r),oo=t(ge," is a subclass of "),ce=s(ge,"CODE",{});var Ed=n(ce);_e=t(Ed,"PretrainedConfig"),Ed.forEach(r),No=t(ge,`, make sure its
`),bd=s(ge,"CODE",{});var a7=n(bd);mf=t(a7,"model_type"),a7.forEach(r),ta=t(ge," attribute is set to the same key you use when registering the config (here "),vd=s(ge,"CODE",{});var s7=n(vd);Td=t(s7,'"new-model"'),s7.forEach(r),A3=t(ge,")."),ge.forEach(r),gf=d(lo),Ee=s(lo,"P",{});var Do=n(Ee);no=t(Do,"Likewise, if your "),Fd=s(Do,"CODE",{});var Ra=n(Fd);Ls=t(Ra,"NewModel"),Ra.forEach(r),L3=t(Do," is a subclass of "),Bs=s(Do,"A",{href:!0});var n7=n(Bs);xs=t(n7,"PreTrainedModel"),n7.forEach(r),B3=t(Do,`, make sure its
`),Cd=s(Do,"CODE",{});var uf=n(Cd);ks=t(uf,"config_class"),uf.forEach(r),x3=t(Do,` attribute is set to the same class you use when registering the model (here
`),Md=s(Do,"CODE",{});var l7=n(Md);hf=t(l7,"NewModelConfig"),l7.forEach(r),ka=t(Do,")."),Do.forEach(r),this.h()},h(){c(Bs,"href","/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel")},m(lo,ge){b(lo,J,ge),e(J,Ae),e(J,le),e(le,me),e(J,oo),e(J,ce),e(ce,_e),e(J,No),e(J,bd),e(bd,mf),e(J,ta),e(J,vd),e(vd,Td),e(J,A3),b(lo,gf,ge),b(lo,Ee,ge),e(Ee,no),e(Ee,Fd),e(Fd,Ls),e(Ee,L3),e(Ee,Bs),e(Bs,xs),e(Ee,B3),e(Ee,Cd),e(Cd,ks),e(Ee,x3),e(Ee,Md),e(Md,hf),e(Ee,ka)},d(lo){lo&&r(J),lo&&r(gf),lo&&r(Ee)}}}function Ifr(_d){let J,Ae,le,me,oo;return{c(){J=a("p"),Ae=o("Passing "),le=a("code"),me=o("use_auth_token=True"),oo=o(" is required when you want to use a private model.")},l(ce){J=s(ce,"P",{});var _e=n(J);Ae=t(_e,"Passing "),le=s(_e,"CODE",{});var No=n(le);me=t(No,"use_auth_token=True"),No.forEach(r),oo=t(_e," is required when you want to use a private model."),_e.forEach(r)},m(ce,_e){b(ce,J,_e),e(J,Ae),e(J,le),e(le,me),e(J,oo)},d(ce){ce&&r(J)}}}function jfr(_d){let J,Ae,le,me,oo;return{c(){J=a("p"),Ae=o("Passing "),le=a("code"),me=o("use_auth_token=True"),oo=o(" is required when you want to use a private model.")},l(ce){J=s(ce,"P",{});var _e=n(J);Ae=t(_e,"Passing "),le=s(_e,"CODE",{});var No=n(le);me=t(No,"use_auth_token=True"),No.forEach(r),oo=t(_e," is required when you want to use a private model."),_e.forEach(r)},m(ce,_e){b(ce,J,_e),e(J,Ae),e(J,le),e(le,me),e(J,oo)},d(ce){ce&&r(J)}}}function Nfr(_d){let J,Ae,le,me,oo,ce,_e,No,bd,mf,ta,vd,Td,A3,gf,Ee,no,Fd,Ls,L3,Bs,xs,B3,Cd,ks,x3,Md,hf,ka,lo,ge,r7,Ed,a7,s7,Do,Ra,n7,uf,l7,vBe,uLe,yd,pf,jz,k3,TBe,Nz,FBe,pLe,Rs,CBe,Dz,MBe,EBe,qz,yBe,wBe,_Le,R3,bLe,d7,ABe,vLe,_f,TLe,wd,bf,Gz,S3,LBe,Oz,BBe,FLe,qo,P3,xBe,$3,kBe,i7,RBe,SBe,PBe,I3,$Be,Xz,IBe,jBe,NBe,io,j3,DBe,zz,qBe,GBe,Ad,OBe,Vz,XBe,zBe,Wz,VBe,WBe,QBe,v,vf,Qz,HBe,UBe,c7,JBe,YBe,KBe,Tf,Hz,ZBe,exe,f7,oxe,txe,rxe,Ff,Uz,axe,sxe,m7,nxe,lxe,dxe,Cf,Jz,ixe,cxe,g7,fxe,mxe,gxe,Mf,Yz,hxe,uxe,h7,pxe,_xe,bxe,Ef,Kz,vxe,Txe,u7,Fxe,Cxe,Mxe,yf,Zz,Exe,yxe,p7,wxe,Axe,Lxe,wf,eV,Bxe,xxe,_7,kxe,Rxe,Sxe,Af,oV,Pxe,$xe,b7,Ixe,jxe,Nxe,Lf,tV,Dxe,qxe,v7,Gxe,Oxe,Xxe,Bf,rV,zxe,Vxe,T7,Wxe,Qxe,Hxe,xf,aV,Uxe,Jxe,F7,Yxe,Kxe,Zxe,kf,sV,eke,oke,C7,tke,rke,ake,Rf,nV,ske,nke,M7,lke,dke,ike,Sf,lV,cke,fke,E7,mke,gke,hke,Pf,dV,uke,pke,y7,_ke,bke,vke,$f,iV,Tke,Fke,w7,Cke,Mke,Eke,If,cV,yke,wke,A7,Ake,Lke,Bke,jf,fV,xke,kke,L7,Rke,Ske,Pke,Nf,mV,$ke,Ike,B7,jke,Nke,Dke,Df,gV,qke,Gke,x7,Oke,Xke,zke,qf,hV,Vke,Wke,k7,Qke,Hke,Uke,Gf,uV,Jke,Yke,R7,Kke,Zke,eRe,Of,pV,oRe,tRe,S7,rRe,aRe,sRe,Xf,_V,nRe,lRe,P7,dRe,iRe,cRe,zf,bV,fRe,mRe,$7,gRe,hRe,uRe,Vf,vV,pRe,_Re,I7,bRe,vRe,TRe,Wf,TV,FRe,CRe,j7,MRe,ERe,yRe,Qf,FV,wRe,ARe,N7,LRe,BRe,xRe,Hf,CV,kRe,RRe,D7,SRe,PRe,$Re,Uf,MV,IRe,jRe,q7,NRe,DRe,qRe,Jf,EV,GRe,ORe,G7,XRe,zRe,VRe,Yf,yV,WRe,QRe,O7,HRe,URe,JRe,Kf,wV,YRe,KRe,X7,ZRe,eSe,oSe,Zf,AV,tSe,rSe,z7,aSe,sSe,nSe,em,LV,lSe,dSe,V7,iSe,cSe,fSe,om,BV,mSe,gSe,W7,hSe,uSe,pSe,tm,xV,_Se,bSe,Q7,vSe,TSe,FSe,rm,kV,CSe,MSe,H7,ESe,ySe,wSe,am,RV,ASe,LSe,U7,BSe,xSe,kSe,sm,SV,RSe,SSe,J7,PSe,$Se,ISe,nm,PV,jSe,NSe,Y7,DSe,qSe,GSe,lm,$V,OSe,XSe,K7,zSe,VSe,WSe,dm,IV,QSe,HSe,Z7,USe,JSe,YSe,im,jV,KSe,ZSe,e8,ePe,oPe,tPe,cm,NV,rPe,aPe,o8,sPe,nPe,lPe,fm,DV,dPe,iPe,t8,cPe,fPe,mPe,mm,qV,gPe,hPe,r8,uPe,pPe,_Pe,gm,GV,bPe,vPe,a8,TPe,FPe,CPe,hm,OV,MPe,EPe,s8,yPe,wPe,APe,um,XV,LPe,BPe,n8,xPe,kPe,RPe,pm,zV,SPe,PPe,l8,$Pe,IPe,jPe,_m,VV,NPe,DPe,d8,qPe,GPe,OPe,bm,WV,XPe,zPe,i8,VPe,WPe,QPe,vm,QV,HPe,UPe,c8,JPe,YPe,KPe,Tm,HV,ZPe,e$e,f8,o$e,t$e,r$e,Fm,UV,a$e,s$e,m8,n$e,l$e,d$e,Cm,JV,i$e,c$e,g8,f$e,m$e,g$e,Mm,YV,h$e,u$e,h8,p$e,_$e,b$e,Em,KV,v$e,T$e,u8,F$e,C$e,M$e,ym,ZV,E$e,y$e,p8,w$e,A$e,L$e,wm,eW,B$e,x$e,_8,k$e,R$e,S$e,Am,oW,P$e,$$e,b8,I$e,j$e,N$e,Lm,tW,D$e,q$e,v8,G$e,O$e,X$e,Bm,rW,z$e,V$e,T8,W$e,Q$e,H$e,xm,aW,U$e,J$e,F8,Y$e,K$e,Z$e,km,sW,eIe,oIe,C8,tIe,rIe,aIe,Rm,nW,sIe,nIe,M8,lIe,dIe,iIe,Sm,lW,cIe,fIe,E8,mIe,gIe,hIe,Pm,dW,uIe,pIe,y8,_Ie,bIe,vIe,$m,iW,TIe,FIe,w8,CIe,MIe,EIe,Im,cW,yIe,wIe,A8,AIe,LIe,BIe,jm,fW,xIe,kIe,L8,RIe,SIe,PIe,Nm,mW,$Ie,IIe,B8,jIe,NIe,DIe,Dm,gW,qIe,GIe,x8,OIe,XIe,zIe,qm,hW,VIe,WIe,k8,QIe,HIe,UIe,Gm,uW,JIe,YIe,R8,KIe,ZIe,eje,Om,pW,oje,tje,S8,rje,aje,sje,Xm,_W,nje,lje,P8,dje,ije,cje,zm,bW,fje,mje,$8,gje,hje,uje,Vm,vW,pje,_je,I8,bje,vje,Tje,Wm,TW,Fje,Cje,j8,Mje,Eje,yje,Qm,FW,wje,Aje,N8,Lje,Bje,xje,Hm,CW,kje,Rje,D8,Sje,Pje,$je,Um,MW,Ije,jje,q8,Nje,Dje,qje,Jm,EW,Gje,Oje,G8,Xje,zje,Vje,Ym,yW,Wje,Qje,O8,Hje,Uje,Jje,Km,wW,Yje,Kje,X8,Zje,eNe,oNe,Zm,AW,tNe,rNe,z8,aNe,sNe,nNe,LW,lNe,dNe,N3,iNe,eg,D3,cNe,BW,fNe,CLe,Ld,og,xW,q3,mNe,kW,gNe,MLe,Go,G3,hNe,O3,uNe,V8,pNe,_Ne,bNe,X3,vNe,RW,TNe,FNe,CNe,co,z3,MNe,SW,ENe,yNe,Sa,wNe,PW,ANe,LNe,$W,BNe,xNe,IW,kNe,RNe,SNe,M,Ss,jW,PNe,$Ne,W8,INe,jNe,Q8,NNe,DNe,qNe,Ps,NW,GNe,ONe,H8,XNe,zNe,U8,VNe,WNe,QNe,$s,DW,HNe,UNe,J8,JNe,YNe,Y8,KNe,ZNe,eDe,tg,qW,oDe,tDe,K8,rDe,aDe,sDe,Is,GW,nDe,lDe,Z8,dDe,iDe,e9,cDe,fDe,mDe,rg,OW,gDe,hDe,o9,uDe,pDe,_De,ag,XW,bDe,vDe,t9,TDe,FDe,CDe,sg,zW,MDe,EDe,r9,yDe,wDe,ADe,js,VW,LDe,BDe,a9,xDe,kDe,s9,RDe,SDe,PDe,Ns,WW,$De,IDe,n9,jDe,NDe,l9,DDe,qDe,GDe,Ds,QW,ODe,XDe,d9,zDe,VDe,i9,WDe,QDe,HDe,ng,HW,UDe,JDe,c9,YDe,KDe,ZDe,lg,UW,eqe,oqe,f9,tqe,rqe,aqe,qs,JW,sqe,nqe,m9,lqe,dqe,g9,iqe,cqe,fqe,dg,YW,mqe,gqe,h9,hqe,uqe,pqe,Gs,KW,_qe,bqe,u9,vqe,Tqe,p9,Fqe,Cqe,Mqe,Os,ZW,Eqe,yqe,_9,wqe,Aqe,b9,Lqe,Bqe,xqe,Xs,eQ,kqe,Rqe,v9,Sqe,Pqe,oQ,$qe,Iqe,jqe,ig,tQ,Nqe,Dqe,T9,qqe,Gqe,Oqe,zs,rQ,Xqe,zqe,F9,Vqe,Wqe,C9,Qqe,Hqe,Uqe,cg,aQ,Jqe,Yqe,M9,Kqe,Zqe,eGe,Vs,sQ,oGe,tGe,E9,rGe,aGe,y9,sGe,nGe,lGe,Ws,nQ,dGe,iGe,w9,cGe,fGe,A9,mGe,gGe,hGe,Qs,lQ,uGe,pGe,L9,_Ge,bGe,B9,vGe,TGe,FGe,fg,dQ,CGe,MGe,x9,EGe,yGe,wGe,Hs,iQ,AGe,LGe,k9,BGe,xGe,R9,kGe,RGe,SGe,mg,cQ,PGe,$Ge,S9,IGe,jGe,NGe,Us,fQ,DGe,qGe,P9,GGe,OGe,$9,XGe,zGe,VGe,Js,mQ,WGe,QGe,I9,HGe,UGe,j9,JGe,YGe,KGe,Ys,gQ,ZGe,eOe,N9,oOe,tOe,D9,rOe,aOe,sOe,Ks,hQ,nOe,lOe,q9,dOe,iOe,G9,cOe,fOe,mOe,gg,uQ,gOe,hOe,O9,uOe,pOe,_Oe,Zs,pQ,bOe,vOe,X9,TOe,FOe,z9,COe,MOe,EOe,en,_Q,yOe,wOe,V9,AOe,LOe,W9,BOe,xOe,kOe,on,bQ,ROe,SOe,Q9,POe,$Oe,H9,IOe,jOe,NOe,tn,vQ,DOe,qOe,U9,GOe,OOe,J9,XOe,zOe,VOe,rn,TQ,WOe,QOe,Y9,HOe,UOe,K9,JOe,YOe,KOe,an,FQ,ZOe,eXe,Z9,oXe,tXe,eB,rXe,aXe,sXe,hg,CQ,nXe,lXe,oB,dXe,iXe,cXe,sn,MQ,fXe,mXe,tB,gXe,hXe,rB,uXe,pXe,_Xe,ug,EQ,bXe,vXe,aB,TXe,FXe,CXe,pg,yQ,MXe,EXe,sB,yXe,wXe,AXe,nn,wQ,LXe,BXe,nB,xXe,kXe,lB,RXe,SXe,PXe,ln,AQ,$Xe,IXe,dB,jXe,NXe,iB,DXe,qXe,GXe,_g,LQ,OXe,XXe,cB,zXe,VXe,WXe,dn,BQ,QXe,HXe,fB,UXe,JXe,mB,YXe,KXe,ZXe,cn,xQ,eze,oze,gB,tze,rze,hB,aze,sze,nze,fn,kQ,lze,dze,uB,ize,cze,pB,fze,mze,gze,mn,RQ,hze,uze,_B,pze,_ze,bB,bze,vze,Tze,gn,SQ,Fze,Cze,vB,Mze,Eze,TB,yze,wze,Aze,bg,PQ,Lze,Bze,FB,xze,kze,Rze,vg,$Q,Sze,Pze,CB,$ze,Ize,jze,Tg,IQ,Nze,Dze,MB,qze,Gze,Oze,hn,jQ,Xze,zze,EB,Vze,Wze,yB,Qze,Hze,Uze,Fg,NQ,Jze,Yze,wB,Kze,Zze,eVe,un,DQ,oVe,tVe,AB,rVe,aVe,LB,sVe,nVe,lVe,pn,qQ,dVe,iVe,BB,cVe,fVe,xB,mVe,gVe,hVe,_n,GQ,uVe,pVe,kB,_Ve,bVe,RB,vVe,TVe,FVe,bn,OQ,CVe,MVe,SB,EVe,yVe,PB,wVe,AVe,LVe,vn,XQ,BVe,xVe,$B,kVe,RVe,IB,SVe,PVe,$Ve,Cg,zQ,IVe,jVe,jB,NVe,DVe,qVe,Mg,VQ,GVe,OVe,NB,XVe,zVe,VVe,Tn,WQ,WVe,QVe,DB,HVe,UVe,qB,JVe,YVe,KVe,Fn,QQ,ZVe,eWe,GB,oWe,tWe,OB,rWe,aWe,sWe,Cn,HQ,nWe,lWe,XB,dWe,iWe,zB,cWe,fWe,mWe,Eg,UQ,gWe,hWe,VB,uWe,pWe,_We,yg,JQ,bWe,vWe,WB,TWe,FWe,CWe,wg,YQ,MWe,EWe,QB,yWe,wWe,AWe,Ag,KQ,LWe,BWe,HB,xWe,kWe,RWe,Mn,ZQ,SWe,PWe,UB,$We,IWe,JB,jWe,NWe,DWe,Lg,eH,qWe,GWe,YB,OWe,XWe,zWe,Bg,oH,VWe,WWe,KB,QWe,HWe,UWe,En,tH,JWe,YWe,ZB,KWe,ZWe,ex,eQe,oQe,tQe,yn,rH,rQe,aQe,ox,sQe,nQe,tx,lQe,dQe,iQe,aH,cQe,fQe,V3,mQe,xg,W3,gQe,sH,hQe,ELe,Bd,kg,nH,Q3,uQe,lH,pQe,yLe,Oo,H3,_Qe,U3,bQe,rx,vQe,TQe,FQe,J3,CQe,dH,MQe,EQe,yQe,Le,Y3,wQe,iH,AQe,LQe,Pa,BQe,cH,xQe,kQe,fH,RQe,SQe,mH,PQe,$Qe,IQe,ne,Rg,gH,jQe,NQe,ax,DQe,qQe,GQe,Sg,hH,OQe,XQe,sx,zQe,VQe,WQe,Pg,uH,QQe,HQe,nx,UQe,JQe,YQe,$g,pH,KQe,ZQe,lx,eHe,oHe,tHe,Ig,_H,rHe,aHe,dx,sHe,nHe,lHe,jg,bH,dHe,iHe,ix,cHe,fHe,mHe,Ng,vH,gHe,hHe,cx,uHe,pHe,_He,Dg,TH,bHe,vHe,fx,THe,FHe,CHe,qg,FH,MHe,EHe,mx,yHe,wHe,AHe,Gg,CH,LHe,BHe,gx,xHe,kHe,RHe,Og,MH,SHe,PHe,hx,$He,IHe,jHe,Xg,EH,NHe,DHe,ux,qHe,GHe,OHe,zg,yH,XHe,zHe,px,VHe,WHe,QHe,Vg,wH,HHe,UHe,_x,JHe,YHe,KHe,Wg,ZHe,AH,eUe,oUe,K3,tUe,Qg,Z3,rUe,LH,aUe,wLe,xd,Hg,BH,e5,sUe,xH,nUe,ALe,ea,o5,lUe,t5,dUe,bx,iUe,cUe,fUe,r5,mUe,kH,gUe,hUe,uUe,Be,a5,pUe,RH,_Ue,bUe,kd,vUe,SH,TUe,FUe,PH,CUe,MUe,EUe,ye,Ug,$H,yUe,wUe,vx,AUe,LUe,BUe,Jg,IH,xUe,kUe,Tx,RUe,SUe,PUe,Yg,jH,$Ue,IUe,Fx,jUe,NUe,DUe,Kg,NH,qUe,GUe,Cx,OUe,XUe,zUe,Zg,DH,VUe,WUe,Mx,QUe,HUe,UUe,eh,qH,JUe,YUe,Ex,KUe,ZUe,eJe,oh,GH,oJe,tJe,yx,rJe,aJe,sJe,th,OH,nJe,lJe,wx,dJe,iJe,cJe,rh,fJe,XH,mJe,gJe,s5,LLe,Rd,ah,zH,n5,hJe,VH,uJe,BLe,Xo,l5,pJe,Sd,_Je,WH,bJe,vJe,QH,TJe,FJe,CJe,d5,MJe,HH,EJe,yJe,wJe,$t,i5,AJe,UH,LJe,BJe,Pd,xJe,JH,kJe,RJe,YH,SJe,PJe,$Je,KH,IJe,jJe,c5,NJe,xe,f5,DJe,ZH,qJe,GJe,$a,OJe,eU,XJe,zJe,oU,VJe,WJe,tU,QJe,HJe,UJe,F,sh,rU,JJe,YJe,Ax,KJe,ZJe,eYe,nh,aU,oYe,tYe,Lx,rYe,aYe,sYe,lh,sU,nYe,lYe,Bx,dYe,iYe,cYe,dh,nU,fYe,mYe,xx,gYe,hYe,uYe,ih,lU,pYe,_Ye,kx,bYe,vYe,TYe,ch,dU,FYe,CYe,Rx,MYe,EYe,yYe,fh,iU,wYe,AYe,Sx,LYe,BYe,xYe,mh,cU,kYe,RYe,Px,SYe,PYe,$Ye,gh,fU,IYe,jYe,$x,NYe,DYe,qYe,hh,mU,GYe,OYe,Ix,XYe,zYe,VYe,uh,gU,WYe,QYe,jx,HYe,UYe,JYe,ph,hU,YYe,KYe,Nx,ZYe,eKe,oKe,_h,uU,tKe,rKe,Dx,aKe,sKe,nKe,bh,pU,lKe,dKe,qx,iKe,cKe,fKe,vh,_U,mKe,gKe,Gx,hKe,uKe,pKe,Th,bU,_Ke,bKe,Ox,vKe,TKe,FKe,Fh,vU,CKe,MKe,Xx,EKe,yKe,wKe,Ch,TU,AKe,LKe,zx,BKe,xKe,kKe,Mh,FU,RKe,SKe,Vx,PKe,$Ke,IKe,Eh,CU,jKe,NKe,Wx,DKe,qKe,GKe,yh,MU,OKe,XKe,Qx,zKe,VKe,WKe,wh,EU,QKe,HKe,Hx,UKe,JKe,YKe,Ah,yU,KKe,ZKe,Ux,eZe,oZe,tZe,Lh,wU,rZe,aZe,Jx,sZe,nZe,lZe,Bh,AU,dZe,iZe,Yx,cZe,fZe,mZe,wn,LU,gZe,hZe,Kx,uZe,pZe,Zx,_Ze,bZe,vZe,xh,BU,TZe,FZe,ek,CZe,MZe,EZe,kh,xU,yZe,wZe,ok,AZe,LZe,BZe,Rh,kU,xZe,kZe,tk,RZe,SZe,PZe,Sh,RU,$Ze,IZe,rk,jZe,NZe,DZe,Ph,SU,qZe,GZe,ak,OZe,XZe,zZe,$h,PU,VZe,WZe,sk,QZe,HZe,UZe,Ih,$U,JZe,YZe,nk,KZe,ZZe,eeo,jh,IU,oeo,teo,lk,reo,aeo,seo,Nh,jU,neo,leo,dk,deo,ieo,ceo,Dh,NU,feo,meo,ik,geo,heo,ueo,qh,DU,peo,_eo,ck,beo,veo,Teo,Gh,qU,Feo,Ceo,fk,Meo,Eeo,yeo,Oh,GU,weo,Aeo,mk,Leo,Beo,xeo,Xh,OU,keo,Reo,gk,Seo,Peo,$eo,zh,XU,Ieo,jeo,hk,Neo,Deo,qeo,Vh,zU,Geo,Oeo,uk,Xeo,zeo,Veo,Wh,VU,Weo,Qeo,pk,Heo,Ueo,Jeo,Qh,WU,Yeo,Keo,_k,Zeo,eoo,ooo,Hh,QU,too,roo,bk,aoo,soo,noo,Uh,HU,loo,doo,vk,ioo,coo,foo,Jh,UU,moo,goo,Tk,hoo,uoo,poo,Yh,JU,_oo,boo,Fk,voo,Too,Foo,Kh,YU,Coo,Moo,Ck,Eoo,yoo,woo,Zh,KU,Aoo,Loo,Mk,Boo,xoo,koo,eu,ZU,Roo,Soo,Ek,Poo,$oo,Ioo,ou,eJ,joo,Noo,yk,Doo,qoo,Goo,tu,oJ,Ooo,Xoo,wk,zoo,Voo,Woo,ru,tJ,Qoo,Hoo,Ak,Uoo,Joo,Yoo,au,rJ,Koo,Zoo,Lk,eto,oto,tto,su,aJ,rto,ato,Bk,sto,nto,lto,nu,sJ,dto,ito,xk,cto,fto,mto,lu,nJ,gto,hto,kk,uto,pto,_to,du,lJ,bto,vto,Rk,Tto,Fto,Cto,iu,dJ,Mto,Eto,Sk,yto,wto,Ato,cu,iJ,Lto,Bto,Pk,xto,kto,Rto,fu,cJ,Sto,Pto,$k,$to,Ito,jto,mu,fJ,Nto,Dto,Ik,qto,Gto,Oto,gu,mJ,Xto,zto,jk,Vto,Wto,Qto,hu,gJ,Hto,Uto,Nk,Jto,Yto,Kto,uu,hJ,Zto,ero,Dk,oro,tro,rro,pu,uJ,aro,sro,qk,nro,lro,dro,_u,pJ,iro,cro,Gk,fro,mro,gro,bu,_J,hro,uro,Ok,pro,_ro,bro,vu,bJ,vro,Tro,Xk,Fro,Cro,Mro,Tu,vJ,Ero,yro,zk,wro,Aro,Lro,Fu,TJ,Bro,xro,Vk,kro,Rro,Sro,Cu,FJ,Pro,$ro,Wk,Iro,jro,Nro,Mu,CJ,Dro,qro,Qk,Gro,Oro,Xro,Eu,MJ,zro,Vro,Hk,Wro,Qro,Hro,yu,EJ,Uro,Jro,Uk,Yro,Kro,Zro,wu,yJ,eao,oao,Jk,tao,rao,aao,Au,wJ,sao,nao,Yk,lao,dao,iao,Lu,AJ,cao,fao,Kk,mao,gao,hao,Bu,LJ,uao,pao,Zk,_ao,bao,vao,xu,BJ,Tao,Fao,eR,Cao,Mao,Eao,ku,xJ,yao,wao,oR,Aao,Lao,Bao,Ru,xao,kJ,kao,Rao,RJ,Sao,Pao,SJ,$ao,Iao,m5,xLe,$d,Su,PJ,g5,jao,$J,Nao,kLe,zo,h5,Dao,Id,qao,IJ,Gao,Oao,jJ,Xao,zao,Vao,u5,Wao,NJ,Qao,Hao,Uao,It,p5,Jao,DJ,Yao,Kao,jd,Zao,qJ,eso,oso,GJ,tso,rso,aso,OJ,sso,nso,_5,lso,ke,b5,dso,XJ,iso,cso,Ia,fso,zJ,mso,gso,VJ,hso,uso,WJ,pso,_so,bso,k,Pu,QJ,vso,Tso,tR,Fso,Cso,Mso,$u,HJ,Eso,yso,rR,wso,Aso,Lso,Iu,UJ,Bso,xso,aR,kso,Rso,Sso,ju,JJ,Pso,$so,sR,Iso,jso,Nso,Nu,YJ,Dso,qso,nR,Gso,Oso,Xso,Du,KJ,zso,Vso,lR,Wso,Qso,Hso,qu,ZJ,Uso,Jso,dR,Yso,Kso,Zso,Gu,eY,eno,ono,iR,tno,rno,ano,Ou,oY,sno,nno,cR,lno,dno,ino,Xu,tY,cno,fno,fR,mno,gno,hno,zu,rY,uno,pno,mR,_no,bno,vno,Vu,aY,Tno,Fno,gR,Cno,Mno,Eno,Wu,sY,yno,wno,hR,Ano,Lno,Bno,Qu,nY,xno,kno,uR,Rno,Sno,Pno,Hu,lY,$no,Ino,pR,jno,Nno,Dno,Uu,dY,qno,Gno,_R,Ono,Xno,zno,Ju,iY,Vno,Wno,bR,Qno,Hno,Uno,Yu,cY,Jno,Yno,vR,Kno,Zno,elo,Ku,fY,olo,tlo,TR,rlo,alo,slo,Zu,mY,nlo,llo,FR,dlo,ilo,clo,ep,gY,flo,mlo,CR,glo,hlo,ulo,op,hY,plo,_lo,MR,blo,vlo,Tlo,tp,uY,Flo,Clo,ER,Mlo,Elo,ylo,rp,pY,wlo,Alo,yR,Llo,Blo,xlo,ap,_Y,klo,Rlo,wR,Slo,Plo,$lo,sp,bY,Ilo,jlo,AR,Nlo,Dlo,qlo,np,vY,Glo,Olo,LR,Xlo,zlo,Vlo,lp,TY,Wlo,Qlo,BR,Hlo,Ulo,Jlo,dp,FY,Ylo,Klo,xR,Zlo,edo,odo,ip,CY,tdo,rdo,kR,ado,sdo,ndo,cp,MY,ldo,ddo,RR,ido,cdo,fdo,fp,EY,mdo,gdo,SR,hdo,udo,pdo,mp,yY,_do,bdo,PR,vdo,Tdo,Fdo,gp,wY,Cdo,Mdo,$R,Edo,ydo,wdo,hp,AY,Ado,Ldo,IR,Bdo,xdo,kdo,up,LY,Rdo,Sdo,jR,Pdo,$do,Ido,pp,BY,jdo,Ndo,NR,Ddo,qdo,Gdo,_p,xY,Odo,Xdo,DR,zdo,Vdo,Wdo,bp,Qdo,kY,Hdo,Udo,RY,Jdo,Ydo,SY,Kdo,Zdo,v5,RLe,Nd,vp,PY,T5,eio,$Y,oio,SLe,Vo,F5,tio,Dd,rio,IY,aio,sio,jY,nio,lio,dio,C5,iio,NY,cio,fio,mio,jt,M5,gio,DY,hio,uio,qd,pio,qY,_io,bio,GY,vio,Tio,Fio,OY,Cio,Mio,E5,Eio,Re,y5,yio,XY,wio,Aio,ja,Lio,zY,Bio,xio,VY,kio,Rio,WY,Sio,Pio,$io,I,Tp,QY,Iio,jio,qR,Nio,Dio,qio,Fp,HY,Gio,Oio,GR,Xio,zio,Vio,Cp,UY,Wio,Qio,OR,Hio,Uio,Jio,Mp,JY,Yio,Kio,XR,Zio,eco,oco,Ep,YY,tco,rco,zR,aco,sco,nco,yp,KY,lco,dco,VR,ico,cco,fco,wp,ZY,mco,gco,WR,hco,uco,pco,Ap,eK,_co,bco,QR,vco,Tco,Fco,Lp,oK,Cco,Mco,HR,Eco,yco,wco,Bp,tK,Aco,Lco,UR,Bco,xco,kco,xp,rK,Rco,Sco,JR,Pco,$co,Ico,kp,aK,jco,Nco,YR,Dco,qco,Gco,Rp,sK,Oco,Xco,KR,zco,Vco,Wco,Sp,nK,Qco,Hco,ZR,Uco,Jco,Yco,Pp,lK,Kco,Zco,eS,efo,ofo,tfo,$p,dK,rfo,afo,oS,sfo,nfo,lfo,Ip,iK,dfo,ifo,tS,cfo,ffo,mfo,jp,cK,gfo,hfo,rS,ufo,pfo,_fo,Np,fK,bfo,vfo,aS,Tfo,Ffo,Cfo,Dp,mK,Mfo,Efo,sS,yfo,wfo,Afo,qp,gK,Lfo,Bfo,nS,xfo,kfo,Rfo,Gp,hK,Sfo,Pfo,lS,$fo,Ifo,jfo,Op,uK,Nfo,Dfo,dS,qfo,Gfo,Ofo,Xp,pK,Xfo,zfo,iS,Vfo,Wfo,Qfo,zp,_K,Hfo,Ufo,cS,Jfo,Yfo,Kfo,Vp,bK,Zfo,emo,fS,omo,tmo,rmo,Wp,vK,amo,smo,mS,nmo,lmo,dmo,Qp,TK,imo,cmo,gS,fmo,mmo,gmo,Hp,FK,hmo,umo,hS,pmo,_mo,bmo,Up,CK,vmo,Tmo,uS,Fmo,Cmo,Mmo,Jp,MK,Emo,ymo,pS,wmo,Amo,Lmo,Yp,EK,Bmo,xmo,_S,kmo,Rmo,Smo,Kp,yK,Pmo,$mo,bS,Imo,jmo,Nmo,Zp,Dmo,wK,qmo,Gmo,AK,Omo,Xmo,LK,zmo,Vmo,w5,PLe,Gd,e_,BK,A5,Wmo,xK,Qmo,$Le,Wo,L5,Hmo,Od,Umo,kK,Jmo,Ymo,RK,Kmo,Zmo,ego,B5,ogo,SK,tgo,rgo,ago,Nt,x5,sgo,PK,ngo,lgo,Xd,dgo,$K,igo,cgo,IK,fgo,mgo,ggo,jK,hgo,ugo,k5,pgo,Se,R5,_go,NK,bgo,vgo,Na,Tgo,DK,Fgo,Cgo,qK,Mgo,Ego,GK,ygo,wgo,Ago,$,o_,OK,Lgo,Bgo,vS,xgo,kgo,Rgo,t_,XK,Sgo,Pgo,TS,$go,Igo,jgo,r_,zK,Ngo,Dgo,FS,qgo,Ggo,Ogo,a_,VK,Xgo,zgo,CS,Vgo,Wgo,Qgo,s_,WK,Hgo,Ugo,MS,Jgo,Ygo,Kgo,n_,QK,Zgo,eho,ES,oho,tho,rho,l_,HK,aho,sho,yS,nho,lho,dho,d_,UK,iho,cho,wS,fho,mho,gho,i_,JK,hho,uho,AS,pho,_ho,bho,c_,YK,vho,Tho,LS,Fho,Cho,Mho,f_,KK,Eho,yho,BS,who,Aho,Lho,m_,ZK,Bho,xho,xS,kho,Rho,Sho,g_,eZ,Pho,$ho,kS,Iho,jho,Nho,h_,oZ,Dho,qho,RS,Gho,Oho,Xho,u_,tZ,zho,Vho,SS,Who,Qho,Hho,p_,rZ,Uho,Jho,PS,Yho,Kho,Zho,__,aZ,euo,ouo,$S,tuo,ruo,auo,b_,sZ,suo,nuo,IS,luo,duo,iuo,v_,nZ,cuo,fuo,jS,muo,guo,huo,T_,lZ,uuo,puo,NS,_uo,buo,vuo,F_,dZ,Tuo,Fuo,DS,Cuo,Muo,Euo,C_,iZ,yuo,wuo,qS,Auo,Luo,Buo,M_,cZ,xuo,kuo,GS,Ruo,Suo,Puo,E_,fZ,$uo,Iuo,OS,juo,Nuo,Duo,y_,mZ,quo,Guo,XS,Ouo,Xuo,zuo,w_,gZ,Vuo,Wuo,zS,Quo,Huo,Uuo,A_,hZ,Juo,Yuo,VS,Kuo,Zuo,epo,L_,uZ,opo,tpo,WS,rpo,apo,spo,B_,pZ,npo,lpo,QS,dpo,ipo,cpo,x_,_Z,fpo,mpo,bZ,gpo,hpo,upo,k_,vZ,ppo,_po,HS,bpo,vpo,Tpo,R_,TZ,Fpo,Cpo,US,Mpo,Epo,ypo,S_,FZ,wpo,Apo,JS,Lpo,Bpo,xpo,P_,CZ,kpo,Rpo,YS,Spo,Ppo,$po,$_,Ipo,MZ,jpo,Npo,EZ,Dpo,qpo,yZ,Gpo,Opo,S5,ILe,zd,I_,wZ,P5,Xpo,AZ,zpo,jLe,Qo,$5,Vpo,Vd,Wpo,LZ,Qpo,Hpo,BZ,Upo,Jpo,Ypo,I5,Kpo,xZ,Zpo,e_o,o_o,Dt,j5,t_o,kZ,r_o,a_o,Wd,s_o,RZ,n_o,l_o,SZ,d_o,i_o,c_o,PZ,f_o,m_o,N5,g_o,Pe,D5,h_o,$Z,u_o,p_o,Da,__o,IZ,b_o,v_o,jZ,T_o,F_o,NZ,C_o,M_o,E_o,se,j_,DZ,y_o,w_o,KS,A_o,L_o,B_o,N_,qZ,x_o,k_o,ZS,R_o,S_o,P_o,D_,GZ,$_o,I_o,eP,j_o,N_o,D_o,q_,OZ,q_o,G_o,oP,O_o,X_o,z_o,G_,XZ,V_o,W_o,tP,Q_o,H_o,U_o,O_,zZ,J_o,Y_o,rP,K_o,Z_o,ebo,X_,VZ,obo,tbo,aP,rbo,abo,sbo,z_,WZ,nbo,lbo,sP,dbo,ibo,cbo,V_,QZ,fbo,mbo,nP,gbo,hbo,ubo,W_,HZ,pbo,_bo,lP,bbo,vbo,Tbo,Q_,UZ,Fbo,Cbo,dP,Mbo,Ebo,ybo,H_,JZ,wbo,Abo,iP,Lbo,Bbo,xbo,U_,YZ,kbo,Rbo,cP,Sbo,Pbo,$bo,J_,KZ,Ibo,jbo,fP,Nbo,Dbo,qbo,Y_,ZZ,Gbo,Obo,mP,Xbo,zbo,Vbo,K_,Wbo,eee,Qbo,Hbo,oee,Ubo,Jbo,tee,Ybo,Kbo,q5,NLe,Qd,Z_,ree,G5,Zbo,aee,e2o,DLe,Ho,O5,o2o,Hd,t2o,see,r2o,a2o,nee,s2o,n2o,l2o,X5,d2o,lee,i2o,c2o,f2o,qt,z5,m2o,dee,g2o,h2o,Ud,u2o,iee,p2o,_2o,cee,b2o,v2o,T2o,fee,F2o,C2o,V5,M2o,$e,W5,E2o,mee,y2o,w2o,qa,A2o,gee,L2o,B2o,hee,x2o,k2o,uee,R2o,S2o,P2o,A,eb,pee,$2o,I2o,gP,j2o,N2o,D2o,ob,_ee,q2o,G2o,hP,O2o,X2o,z2o,tb,bee,V2o,W2o,uP,Q2o,H2o,U2o,rb,vee,J2o,Y2o,pP,K2o,Z2o,evo,ab,Tee,ovo,tvo,_P,rvo,avo,svo,sb,Fee,nvo,lvo,bP,dvo,ivo,cvo,nb,Cee,fvo,mvo,vP,gvo,hvo,uvo,lb,Mee,pvo,_vo,TP,bvo,vvo,Tvo,db,Eee,Fvo,Cvo,FP,Mvo,Evo,yvo,ib,yee,wvo,Avo,CP,Lvo,Bvo,xvo,cb,wee,kvo,Rvo,MP,Svo,Pvo,$vo,fb,Aee,Ivo,jvo,EP,Nvo,Dvo,qvo,mb,Lee,Gvo,Ovo,yP,Xvo,zvo,Vvo,gb,Bee,Wvo,Qvo,wP,Hvo,Uvo,Jvo,hb,xee,Yvo,Kvo,AP,Zvo,eTo,oTo,ub,kee,tTo,rTo,LP,aTo,sTo,nTo,pb,Ree,lTo,dTo,BP,iTo,cTo,fTo,_b,See,mTo,gTo,xP,hTo,uTo,pTo,bb,Pee,_To,bTo,kP,vTo,TTo,FTo,vb,$ee,CTo,MTo,RP,ETo,yTo,wTo,Tb,Iee,ATo,LTo,SP,BTo,xTo,kTo,Fb,jee,RTo,STo,PP,PTo,$To,ITo,Cb,Nee,jTo,NTo,$P,DTo,qTo,GTo,Mb,Dee,OTo,XTo,IP,zTo,VTo,WTo,Eb,qee,QTo,HTo,jP,UTo,JTo,YTo,yb,Gee,KTo,ZTo,NP,e1o,o1o,t1o,wb,Oee,r1o,a1o,DP,s1o,n1o,l1o,Ab,Xee,d1o,i1o,qP,c1o,f1o,m1o,Lb,zee,g1o,h1o,GP,u1o,p1o,_1o,Bb,Vee,b1o,v1o,OP,T1o,F1o,C1o,xb,Wee,M1o,E1o,XP,y1o,w1o,A1o,kb,Qee,L1o,B1o,zP,x1o,k1o,R1o,Rb,Hee,S1o,P1o,VP,$1o,I1o,j1o,Sb,Uee,N1o,D1o,WP,q1o,G1o,O1o,Pb,Jee,X1o,z1o,QP,V1o,W1o,Q1o,$b,Yee,H1o,U1o,HP,J1o,Y1o,K1o,Ib,Kee,Z1o,eFo,UP,oFo,tFo,rFo,jb,Zee,aFo,sFo,JP,nFo,lFo,dFo,Nb,eoe,iFo,cFo,YP,fFo,mFo,gFo,Db,ooe,hFo,uFo,KP,pFo,_Fo,bFo,qb,toe,vFo,TFo,ZP,FFo,CFo,MFo,Gb,roe,EFo,yFo,e$,wFo,AFo,LFo,Ob,aoe,BFo,xFo,o$,kFo,RFo,SFo,Xb,soe,PFo,$Fo,t$,IFo,jFo,NFo,zb,DFo,noe,qFo,GFo,loe,OFo,XFo,doe,zFo,VFo,Q5,qLe,Jd,Vb,ioe,H5,WFo,coe,QFo,GLe,Uo,U5,HFo,Yd,UFo,foe,JFo,YFo,moe,KFo,ZFo,eCo,J5,oCo,goe,tCo,rCo,aCo,Gt,Y5,sCo,hoe,nCo,lCo,Kd,dCo,uoe,iCo,cCo,poe,fCo,mCo,gCo,_oe,hCo,uCo,K5,pCo,Ie,Z5,_Co,boe,bCo,vCo,Ga,TCo,voe,FCo,CCo,Toe,MCo,ECo,Foe,yCo,wCo,ACo,G,Wb,Coe,LCo,BCo,r$,xCo,kCo,RCo,Qb,Moe,SCo,PCo,a$,$Co,ICo,jCo,Hb,Eoe,NCo,DCo,s$,qCo,GCo,OCo,Ub,yoe,XCo,zCo,n$,VCo,WCo,QCo,Jb,woe,HCo,UCo,l$,JCo,YCo,KCo,Yb,Aoe,ZCo,e4o,d$,o4o,t4o,r4o,Kb,Loe,a4o,s4o,i$,n4o,l4o,d4o,Zb,Boe,i4o,c4o,c$,f4o,m4o,g4o,e2,xoe,h4o,u4o,f$,p4o,_4o,b4o,o2,koe,v4o,T4o,m$,F4o,C4o,M4o,t2,Roe,E4o,y4o,g$,w4o,A4o,L4o,r2,Soe,B4o,x4o,h$,k4o,R4o,S4o,a2,Poe,P4o,$4o,u$,I4o,j4o,N4o,s2,$oe,D4o,q4o,p$,G4o,O4o,X4o,n2,Ioe,z4o,V4o,_$,W4o,Q4o,H4o,l2,joe,U4o,J4o,b$,Y4o,K4o,Z4o,d2,Noe,eMo,oMo,v$,tMo,rMo,aMo,i2,Doe,sMo,nMo,T$,lMo,dMo,iMo,c2,qoe,cMo,fMo,F$,mMo,gMo,hMo,f2,Goe,uMo,pMo,C$,_Mo,bMo,vMo,m2,Ooe,TMo,FMo,M$,CMo,MMo,EMo,g2,Xoe,yMo,wMo,E$,AMo,LMo,BMo,h2,zoe,xMo,kMo,y$,RMo,SMo,PMo,u2,Voe,$Mo,IMo,w$,jMo,NMo,DMo,p2,Woe,qMo,GMo,A$,OMo,XMo,zMo,_2,Qoe,VMo,WMo,L$,QMo,HMo,UMo,b2,Hoe,JMo,YMo,B$,KMo,ZMo,eEo,v2,oEo,Uoe,tEo,rEo,Joe,aEo,sEo,Yoe,nEo,lEo,ey,OLe,Zd,T2,Koe,oy,dEo,Zoe,iEo,XLe,Jo,ty,cEo,ei,fEo,ete,mEo,gEo,ote,hEo,uEo,pEo,ry,_Eo,tte,bEo,vEo,TEo,Ot,ay,FEo,rte,CEo,MEo,oi,EEo,ate,yEo,wEo,ste,AEo,LEo,BEo,nte,xEo,kEo,sy,REo,je,ny,SEo,lte,PEo,$Eo,Oa,IEo,dte,jEo,NEo,ite,DEo,qEo,cte,GEo,OEo,XEo,oa,F2,fte,zEo,VEo,x$,WEo,QEo,HEo,C2,mte,UEo,JEo,k$,YEo,KEo,ZEo,M2,gte,e3o,o3o,R$,t3o,r3o,a3o,E2,hte,s3o,n3o,S$,l3o,d3o,i3o,y2,ute,c3o,f3o,P$,m3o,g3o,h3o,w2,u3o,pte,p3o,_3o,_te,b3o,v3o,bte,T3o,F3o,ly,zLe,ti,A2,vte,dy,C3o,Tte,M3o,VLe,Yo,iy,E3o,ri,y3o,Fte,w3o,A3o,Cte,L3o,B3o,x3o,cy,k3o,Mte,R3o,S3o,P3o,Xt,fy,$3o,Ete,I3o,j3o,ai,N3o,yte,D3o,q3o,wte,G3o,O3o,X3o,Ate,z3o,V3o,my,W3o,Ne,gy,Q3o,Lte,H3o,U3o,Xa,J3o,Bte,Y3o,K3o,xte,Z3o,e5o,kte,o5o,t5o,r5o,N,L2,Rte,a5o,s5o,$$,n5o,l5o,d5o,B2,Ste,i5o,c5o,I$,f5o,m5o,g5o,x2,Pte,h5o,u5o,j$,p5o,_5o,b5o,k2,$te,v5o,T5o,N$,F5o,C5o,M5o,R2,Ite,E5o,y5o,D$,w5o,A5o,L5o,S2,jte,B5o,x5o,q$,k5o,R5o,S5o,P2,Nte,P5o,$5o,G$,I5o,j5o,N5o,$2,Dte,D5o,q5o,O$,G5o,O5o,X5o,I2,qte,z5o,V5o,X$,W5o,Q5o,H5o,j2,Gte,U5o,J5o,z$,Y5o,K5o,Z5o,N2,Ote,eyo,oyo,V$,tyo,ryo,ayo,D2,Xte,syo,nyo,W$,lyo,dyo,iyo,q2,zte,cyo,fyo,Q$,myo,gyo,hyo,G2,Vte,uyo,pyo,H$,_yo,byo,vyo,O2,Wte,Tyo,Fyo,U$,Cyo,Myo,Eyo,X2,Qte,yyo,wyo,J$,Ayo,Lyo,Byo,z2,Hte,xyo,kyo,Y$,Ryo,Syo,Pyo,V2,Ute,$yo,Iyo,K$,jyo,Nyo,Dyo,W2,Jte,qyo,Gyo,Z$,Oyo,Xyo,zyo,Q2,Yte,Vyo,Wyo,eI,Qyo,Hyo,Uyo,H2,Kte,Jyo,Yyo,oI,Kyo,Zyo,ewo,U2,Zte,owo,two,tI,rwo,awo,swo,J2,ere,nwo,lwo,rI,dwo,iwo,cwo,Y2,ore,fwo,mwo,aI,gwo,hwo,uwo,K2,tre,pwo,_wo,sI,bwo,vwo,Two,Z2,rre,Fwo,Cwo,nI,Mwo,Ewo,ywo,ev,are,wwo,Awo,lI,Lwo,Bwo,xwo,ov,sre,kwo,Rwo,dI,Swo,Pwo,$wo,tv,nre,Iwo,jwo,iI,Nwo,Dwo,qwo,rv,lre,Gwo,Owo,cI,Xwo,zwo,Vwo,av,dre,Wwo,Qwo,fI,Hwo,Uwo,Jwo,sv,ire,Ywo,Kwo,mI,Zwo,eAo,oAo,nv,tAo,cre,rAo,aAo,fre,sAo,nAo,mre,lAo,dAo,hy,WLe,si,lv,gre,uy,iAo,hre,cAo,QLe,Ko,py,fAo,ni,mAo,ure,gAo,hAo,pre,uAo,pAo,_Ao,_y,bAo,_re,vAo,TAo,FAo,zt,by,CAo,bre,MAo,EAo,li,yAo,vre,wAo,AAo,Tre,LAo,BAo,xAo,Fre,kAo,RAo,vy,SAo,De,Ty,PAo,Cre,$Ao,IAo,za,jAo,Mre,NAo,DAo,Ere,qAo,GAo,yre,OAo,XAo,zAo,R,dv,wre,VAo,WAo,gI,QAo,HAo,UAo,iv,Are,JAo,YAo,hI,KAo,ZAo,e0o,cv,Lre,o0o,t0o,uI,r0o,a0o,s0o,fv,Bre,n0o,l0o,pI,d0o,i0o,c0o,mv,xre,f0o,m0o,_I,g0o,h0o,u0o,gv,kre,p0o,_0o,bI,b0o,v0o,T0o,hv,Rre,F0o,C0o,vI,M0o,E0o,y0o,uv,Sre,w0o,A0o,TI,L0o,B0o,x0o,pv,Pre,k0o,R0o,FI,S0o,P0o,$0o,_v,$re,I0o,j0o,CI,N0o,D0o,q0o,bv,Ire,G0o,O0o,MI,X0o,z0o,V0o,vv,jre,W0o,Q0o,EI,H0o,U0o,J0o,Tv,Nre,Y0o,K0o,yI,Z0o,e6o,o6o,Fv,Dre,t6o,r6o,wI,a6o,s6o,n6o,Cv,qre,l6o,d6o,AI,i6o,c6o,f6o,Mv,Gre,m6o,g6o,LI,h6o,u6o,p6o,Ev,Ore,_6o,b6o,BI,v6o,T6o,F6o,yv,Xre,C6o,M6o,xI,E6o,y6o,w6o,wv,zre,A6o,L6o,kI,B6o,x6o,k6o,Av,Vre,R6o,S6o,RI,P6o,$6o,I6o,Lv,Wre,j6o,N6o,SI,D6o,q6o,G6o,Bv,Qre,O6o,X6o,PI,z6o,V6o,W6o,xv,Hre,Q6o,H6o,$I,U6o,J6o,Y6o,kv,Ure,K6o,Z6o,II,eLo,oLo,tLo,Rv,Jre,rLo,aLo,jI,sLo,nLo,lLo,Sv,Yre,dLo,iLo,NI,cLo,fLo,mLo,Pv,Kre,gLo,hLo,DI,uLo,pLo,_Lo,$v,Zre,bLo,vLo,qI,TLo,FLo,CLo,Iv,eae,MLo,ELo,GI,yLo,wLo,ALo,jv,oae,LLo,BLo,OI,xLo,kLo,RLo,Nv,tae,SLo,PLo,XI,$Lo,ILo,jLo,Dv,rae,NLo,DLo,zI,qLo,GLo,OLo,qv,aae,XLo,zLo,VI,VLo,WLo,QLo,Gv,sae,HLo,ULo,WI,JLo,YLo,KLo,Ov,nae,ZLo,e7o,QI,o7o,t7o,r7o,Xv,lae,a7o,s7o,HI,n7o,l7o,d7o,zv,dae,i7o,c7o,UI,f7o,m7o,g7o,Vv,iae,h7o,u7o,JI,p7o,_7o,b7o,Wv,v7o,cae,T7o,F7o,fae,C7o,M7o,mae,E7o,y7o,Fy,HLe,di,Qv,gae,Cy,w7o,hae,A7o,ULe,Zo,My,L7o,ii,B7o,uae,x7o,k7o,pae,R7o,S7o,P7o,Ey,$7o,_ae,I7o,j7o,N7o,Vt,yy,D7o,bae,q7o,G7o,ci,O7o,vae,X7o,z7o,Tae,V7o,W7o,Q7o,Fae,H7o,U7o,wy,J7o,qe,Ay,Y7o,Cae,K7o,Z7o,Va,e8o,Mae,o8o,t8o,Eae,r8o,a8o,yae,s8o,n8o,l8o,wae,Hv,Aae,d8o,i8o,YI,c8o,f8o,m8o,Uv,g8o,Lae,h8o,u8o,Bae,p8o,_8o,xae,b8o,v8o,Ly,JLe,fi,Jv,kae,By,T8o,Rae,F8o,YLe,et,xy,C8o,mi,M8o,Sae,E8o,y8o,Pae,w8o,A8o,L8o,ky,B8o,$ae,x8o,k8o,R8o,Wt,Ry,S8o,Iae,P8o,$8o,gi,I8o,jae,j8o,N8o,Nae,D8o,q8o,G8o,Dae,O8o,X8o,Sy,z8o,Ge,Py,V8o,qae,W8o,Q8o,Wa,H8o,Gae,U8o,J8o,Oae,Y8o,K8o,Xae,Z8o,e9o,o9o,we,Yv,zae,t9o,r9o,KI,a9o,s9o,n9o,Kv,Vae,l9o,d9o,ZI,i9o,c9o,f9o,An,Wae,m9o,g9o,ej,h9o,u9o,oj,p9o,_9o,b9o,Zv,Qae,v9o,T9o,tj,F9o,C9o,M9o,ra,Hae,E9o,y9o,rj,w9o,A9o,aj,L9o,B9o,sj,x9o,k9o,R9o,eT,Uae,S9o,P9o,nj,$9o,I9o,j9o,oT,Jae,N9o,D9o,lj,q9o,G9o,O9o,tT,Yae,X9o,z9o,dj,V9o,W9o,Q9o,rT,H9o,Kae,U9o,J9o,Zae,Y9o,K9o,ese,Z9o,eBo,$y,KLe,hi,aT,ose,Iy,oBo,tse,tBo,ZLe,ot,jy,rBo,ui,aBo,rse,sBo,nBo,ase,lBo,dBo,iBo,Ny,cBo,sse,fBo,mBo,gBo,Qt,Dy,hBo,nse,uBo,pBo,pi,_Bo,lse,bBo,vBo,dse,TBo,FBo,CBo,ise,MBo,EBo,qy,yBo,Oe,Gy,wBo,cse,ABo,LBo,Qa,BBo,fse,xBo,kBo,mse,RBo,SBo,gse,PBo,$Bo,IBo,hse,sT,use,jBo,NBo,ij,DBo,qBo,GBo,nT,OBo,pse,XBo,zBo,_se,VBo,WBo,bse,QBo,HBo,Oy,e7e,_i,lT,vse,Xy,UBo,Tse,JBo,o7e,tt,zy,YBo,bi,KBo,Fse,ZBo,exo,Cse,oxo,txo,rxo,Vy,axo,Mse,sxo,nxo,lxo,Ht,Wy,dxo,Ese,ixo,cxo,vi,fxo,yse,mxo,gxo,wse,hxo,uxo,pxo,Ase,_xo,bxo,Qy,vxo,Xe,Hy,Txo,Lse,Fxo,Cxo,Ha,Mxo,Bse,Exo,yxo,xse,wxo,Axo,kse,Lxo,Bxo,xxo,to,dT,Rse,kxo,Rxo,cj,Sxo,Pxo,$xo,iT,Sse,Ixo,jxo,fj,Nxo,Dxo,qxo,cT,Pse,Gxo,Oxo,mj,Xxo,zxo,Vxo,fT,$se,Wxo,Qxo,gj,Hxo,Uxo,Jxo,mT,Ise,Yxo,Kxo,hj,Zxo,eko,oko,gT,jse,tko,rko,uj,ako,sko,nko,hT,Nse,lko,dko,pj,iko,cko,fko,uT,mko,Dse,gko,hko,qse,uko,pko,Gse,_ko,bko,Uy,t7e,Ti,pT,Ose,Jy,vko,Xse,Tko,r7e,rt,Yy,Fko,Fi,Cko,zse,Mko,Eko,Vse,yko,wko,Ako,Ky,Lko,Wse,Bko,xko,kko,Ut,Zy,Rko,Qse,Sko,Pko,Ci,$ko,Hse,Iko,jko,Use,Nko,Dko,qko,Jse,Gko,Oko,ew,Xko,ze,ow,zko,Yse,Vko,Wko,Ua,Qko,Kse,Hko,Uko,Zse,Jko,Yko,ene,Kko,Zko,eRo,Mi,_T,one,oRo,tRo,_j,rRo,aRo,sRo,bT,tne,nRo,lRo,bj,dRo,iRo,cRo,vT,rne,fRo,mRo,vj,gRo,hRo,uRo,TT,pRo,ane,_Ro,bRo,sne,vRo,TRo,nne,FRo,CRo,tw,a7e,Ei,FT,lne,rw,MRo,dne,ERo,s7e,at,aw,yRo,yi,wRo,ine,ARo,LRo,cne,BRo,xRo,kRo,sw,RRo,fne,SRo,PRo,$Ro,Jt,nw,IRo,mne,jRo,NRo,wi,DRo,gne,qRo,GRo,hne,ORo,XRo,zRo,une,VRo,WRo,lw,QRo,Ve,dw,HRo,pne,URo,JRo,Ja,YRo,_ne,KRo,ZRo,bne,eSo,oSo,vne,tSo,rSo,aSo,ro,CT,Tne,sSo,nSo,Tj,lSo,dSo,iSo,MT,Fne,cSo,fSo,Fj,mSo,gSo,hSo,ET,Cne,uSo,pSo,Cj,_So,bSo,vSo,yT,Mne,TSo,FSo,Mj,CSo,MSo,ESo,wT,Ene,ySo,wSo,Ej,ASo,LSo,BSo,AT,yne,xSo,kSo,yj,RSo,SSo,PSo,LT,wne,$So,ISo,wj,jSo,NSo,DSo,BT,qSo,Ane,GSo,OSo,Lne,XSo,zSo,Bne,VSo,WSo,iw,n7e,Ai,xT,xne,cw,QSo,kne,HSo,l7e,st,fw,USo,Li,JSo,Rne,YSo,KSo,Sne,ZSo,ePo,oPo,mw,tPo,Pne,rPo,aPo,sPo,Yt,gw,nPo,$ne,lPo,dPo,Bi,iPo,Ine,cPo,fPo,jne,mPo,gPo,hPo,Nne,uPo,pPo,hw,_Po,We,uw,bPo,Dne,vPo,TPo,Ya,FPo,qne,CPo,MPo,Gne,EPo,yPo,One,wPo,APo,LPo,pw,kT,Xne,BPo,xPo,Aj,kPo,RPo,SPo,RT,zne,PPo,$Po,Lj,IPo,jPo,NPo,ST,DPo,Vne,qPo,GPo,Wne,OPo,XPo,Qne,zPo,VPo,_w,d7e,xi,PT,Hne,bw,WPo,Une,QPo,i7e,nt,vw,HPo,ki,UPo,Jne,JPo,YPo,Yne,KPo,ZPo,e$o,Tw,o$o,Kne,t$o,r$o,a$o,Kt,Fw,s$o,Zne,n$o,l$o,Ri,d$o,ele,i$o,c$o,ole,f$o,m$o,g$o,tle,h$o,u$o,Cw,p$o,Qe,Mw,_$o,rle,b$o,v$o,Ka,T$o,ale,F$o,C$o,sle,M$o,E$o,nle,y$o,w$o,A$o,Si,$T,lle,L$o,B$o,Bj,x$o,k$o,R$o,IT,dle,S$o,P$o,xj,$$o,I$o,j$o,jT,ile,N$o,D$o,kj,q$o,G$o,O$o,NT,X$o,cle,z$o,V$o,fle,W$o,Q$o,mle,H$o,U$o,Ew,c7e,Pi,DT,gle,yw,J$o,hle,Y$o,f7e,lt,ww,K$o,$i,Z$o,ule,eIo,oIo,ple,tIo,rIo,aIo,Aw,sIo,_le,nIo,lIo,dIo,Zt,Lw,iIo,ble,cIo,fIo,Ii,mIo,vle,gIo,hIo,Tle,uIo,pIo,_Io,Fle,bIo,vIo,Bw,TIo,He,xw,FIo,Cle,CIo,MIo,Za,EIo,Mle,yIo,wIo,Ele,AIo,LIo,yle,BIo,xIo,kIo,wle,qT,Ale,RIo,SIo,Rj,PIo,$Io,IIo,GT,jIo,Lle,NIo,DIo,Ble,qIo,GIo,xle,OIo,XIo,kw,m7e,ji,OT,kle,Rw,zIo,Rle,VIo,g7e,dt,Sw,WIo,Ni,QIo,Sle,HIo,UIo,Ple,JIo,YIo,KIo,Pw,ZIo,$le,ejo,ojo,tjo,er,$w,rjo,Ile,ajo,sjo,Di,njo,jle,ljo,djo,Nle,ijo,cjo,fjo,Dle,mjo,gjo,Iw,hjo,Ue,jw,ujo,qle,pjo,_jo,es,bjo,Gle,vjo,Tjo,Ole,Fjo,Cjo,Xle,Mjo,Ejo,yjo,zle,XT,Vle,wjo,Ajo,Sj,Ljo,Bjo,xjo,zT,kjo,Wle,Rjo,Sjo,Qle,Pjo,$jo,Hle,Ijo,jjo,Nw,h7e,qi,VT,Ule,Dw,Njo,Jle,Djo,u7e,it,qw,qjo,Gi,Gjo,Yle,Ojo,Xjo,Kle,zjo,Vjo,Wjo,Gw,Qjo,Zle,Hjo,Ujo,Jjo,or,Ow,Yjo,ede,Kjo,Zjo,Oi,eNo,ode,oNo,tNo,tde,rNo,aNo,sNo,rde,nNo,lNo,Xw,dNo,Je,zw,iNo,ade,cNo,fNo,os,mNo,sde,gNo,hNo,nde,uNo,pNo,lde,_No,bNo,vNo,Vw,WT,dde,TNo,FNo,Pj,CNo,MNo,ENo,QT,ide,yNo,wNo,$j,ANo,LNo,BNo,HT,xNo,cde,kNo,RNo,fde,SNo,PNo,mde,$No,INo,Ww,p7e,Xi,UT,gde,Qw,jNo,hde,NNo,_7e,ct,Hw,DNo,zi,qNo,ude,GNo,ONo,pde,XNo,zNo,VNo,Uw,WNo,_de,QNo,HNo,UNo,tr,Jw,JNo,bde,YNo,KNo,Vi,ZNo,vde,eDo,oDo,Tde,tDo,rDo,aDo,Fde,sDo,nDo,Yw,lDo,fo,Kw,dDo,Cde,iDo,cDo,ts,fDo,Mde,mDo,gDo,Ede,hDo,uDo,yde,pDo,_Do,bDo,B,JT,wde,vDo,TDo,Ij,FDo,CDo,MDo,YT,Ade,EDo,yDo,jj,wDo,ADo,LDo,KT,Lde,BDo,xDo,Nj,kDo,RDo,SDo,ZT,Bde,PDo,$Do,Dj,IDo,jDo,NDo,e1,xde,DDo,qDo,qj,GDo,ODo,XDo,o1,kde,zDo,VDo,Gj,WDo,QDo,HDo,t1,Rde,UDo,JDo,Oj,YDo,KDo,ZDo,r1,Sde,eqo,oqo,Xj,tqo,rqo,aqo,a1,Pde,sqo,nqo,zj,lqo,dqo,iqo,s1,$de,cqo,fqo,Vj,mqo,gqo,hqo,n1,Ide,uqo,pqo,Wj,_qo,bqo,vqo,l1,jde,Tqo,Fqo,Qj,Cqo,Mqo,Eqo,d1,Nde,yqo,wqo,Hj,Aqo,Lqo,Bqo,i1,Dde,xqo,kqo,Uj,Rqo,Sqo,Pqo,c1,qde,$qo,Iqo,Jj,jqo,Nqo,Dqo,Ln,Gde,qqo,Gqo,Yj,Oqo,Xqo,Kj,zqo,Vqo,Wqo,f1,Ode,Qqo,Hqo,Zj,Uqo,Jqo,Yqo,m1,Xde,Kqo,Zqo,eN,eGo,oGo,tGo,g1,zde,rGo,aGo,oN,sGo,nGo,lGo,h1,Vde,dGo,iGo,tN,cGo,fGo,mGo,u1,Wde,gGo,hGo,rN,uGo,pGo,_Go,p1,Qde,bGo,vGo,aN,TGo,FGo,CGo,_1,Hde,MGo,EGo,sN,yGo,wGo,AGo,b1,Ude,LGo,BGo,nN,xGo,kGo,RGo,v1,Jde,SGo,PGo,lN,$Go,IGo,jGo,T1,Yde,NGo,DGo,dN,qGo,GGo,OGo,F1,Kde,XGo,zGo,iN,VGo,WGo,QGo,C1,Zde,HGo,UGo,cN,JGo,YGo,KGo,M1,eie,ZGo,eOo,fN,oOo,tOo,rOo,E1,oie,aOo,sOo,mN,nOo,lOo,dOo,y1,tie,iOo,cOo,gN,fOo,mOo,gOo,w1,rie,hOo,uOo,hN,pOo,_Oo,bOo,A1,aie,vOo,TOo,uN,FOo,COo,MOo,L1,sie,EOo,yOo,pN,wOo,AOo,LOo,B1,nie,BOo,xOo,_N,kOo,ROo,SOo,x1,lie,POo,$Oo,bN,IOo,jOo,NOo,k1,die,DOo,qOo,vN,GOo,OOo,XOo,R1,iie,zOo,VOo,TN,WOo,QOo,HOo,S1,cie,UOo,JOo,FN,YOo,KOo,ZOo,P1,fie,eXo,oXo,CN,tXo,rXo,aXo,$1,mie,sXo,nXo,MN,lXo,dXo,iXo,gie,cXo,fXo,Zw,b7e,Wi,I1,hie,eA,mXo,uie,gXo,v7e,ft,oA,hXo,Qi,uXo,pie,pXo,_Xo,_ie,bXo,vXo,TXo,tA,FXo,bie,CXo,MXo,EXo,rr,rA,yXo,vie,wXo,AXo,Hi,LXo,Tie,BXo,xXo,Fie,kXo,RXo,SXo,Cie,PXo,$Xo,aA,IXo,mo,sA,jXo,Mie,NXo,DXo,rs,qXo,Eie,GXo,OXo,yie,XXo,zXo,wie,VXo,WXo,QXo,H,j1,Aie,HXo,UXo,EN,JXo,YXo,KXo,N1,Lie,ZXo,ezo,yN,ozo,tzo,rzo,D1,Bie,azo,szo,wN,nzo,lzo,dzo,q1,xie,izo,czo,AN,fzo,mzo,gzo,G1,kie,hzo,uzo,LN,pzo,_zo,bzo,O1,Rie,vzo,Tzo,BN,Fzo,Czo,Mzo,X1,Sie,Ezo,yzo,xN,wzo,Azo,Lzo,z1,Pie,Bzo,xzo,kN,kzo,Rzo,Szo,V1,$ie,Pzo,$zo,RN,Izo,jzo,Nzo,W1,Iie,Dzo,qzo,SN,Gzo,Ozo,Xzo,Q1,jie,zzo,Vzo,PN,Wzo,Qzo,Hzo,H1,Nie,Uzo,Jzo,$N,Yzo,Kzo,Zzo,U1,Die,eVo,oVo,IN,tVo,rVo,aVo,J1,qie,sVo,nVo,jN,lVo,dVo,iVo,Y1,Gie,cVo,fVo,NN,mVo,gVo,hVo,K1,Oie,uVo,pVo,DN,_Vo,bVo,vVo,Z1,Xie,TVo,FVo,qN,CVo,MVo,EVo,eF,zie,yVo,wVo,GN,AVo,LVo,BVo,oF,Vie,xVo,kVo,ON,RVo,SVo,PVo,tF,Wie,$Vo,IVo,XN,jVo,NVo,DVo,rF,Qie,qVo,GVo,zN,OVo,XVo,zVo,aF,Hie,VVo,WVo,VN,QVo,HVo,UVo,Uie,JVo,YVo,nA,T7e,Ui,sF,Jie,lA,KVo,Yie,ZVo,F7e,mt,dA,eWo,Ji,oWo,Kie,tWo,rWo,Zie,aWo,sWo,nWo,iA,lWo,ece,dWo,iWo,cWo,ar,cA,fWo,oce,mWo,gWo,Yi,hWo,tce,uWo,pWo,rce,_Wo,bWo,vWo,ace,TWo,FWo,fA,CWo,go,mA,MWo,sce,EWo,yWo,as,wWo,nce,AWo,LWo,lce,BWo,xWo,dce,kWo,RWo,SWo,he,nF,ice,PWo,$Wo,WN,IWo,jWo,NWo,lF,cce,DWo,qWo,QN,GWo,OWo,XWo,dF,fce,zWo,VWo,HN,WWo,QWo,HWo,iF,mce,UWo,JWo,UN,YWo,KWo,ZWo,cF,gce,eQo,oQo,JN,tQo,rQo,aQo,fF,hce,sQo,nQo,YN,lQo,dQo,iQo,mF,uce,cQo,fQo,KN,mQo,gQo,hQo,gF,pce,uQo,pQo,ZN,_Qo,bQo,vQo,hF,_ce,TQo,FQo,eD,CQo,MQo,EQo,uF,bce,yQo,wQo,oD,AQo,LQo,BQo,vce,xQo,kQo,gA,C7e,Ki,pF,Tce,hA,RQo,Fce,SQo,M7e,gt,uA,PQo,Zi,$Qo,Cce,IQo,jQo,Mce,NQo,DQo,qQo,pA,GQo,Ece,OQo,XQo,zQo,sr,_A,VQo,yce,WQo,QQo,ec,HQo,wce,UQo,JQo,Ace,YQo,KQo,ZQo,Lce,eHo,oHo,bA,tHo,ho,vA,rHo,Bce,aHo,sHo,ss,nHo,xce,lHo,dHo,kce,iHo,cHo,Rce,fHo,mHo,gHo,Sce,_F,Pce,hHo,uHo,tD,pHo,_Ho,bHo,$ce,vHo,THo,TA,E7e,oc,bF,Ice,FA,FHo,jce,CHo,y7e,ht,CA,MHo,tc,EHo,Nce,yHo,wHo,Dce,AHo,LHo,BHo,MA,xHo,qce,kHo,RHo,SHo,nr,EA,PHo,Gce,$Ho,IHo,rc,jHo,Oce,NHo,DHo,Xce,qHo,GHo,OHo,zce,XHo,zHo,yA,VHo,uo,wA,WHo,Vce,QHo,HHo,ns,UHo,Wce,JHo,YHo,Qce,KHo,ZHo,Hce,eUo,oUo,tUo,Y,vF,Uce,rUo,aUo,rD,sUo,nUo,lUo,TF,Jce,dUo,iUo,aD,cUo,fUo,mUo,FF,Yce,gUo,hUo,sD,uUo,pUo,_Uo,CF,Kce,bUo,vUo,nD,TUo,FUo,CUo,MF,Zce,MUo,EUo,lD,yUo,wUo,AUo,EF,efe,LUo,BUo,dD,xUo,kUo,RUo,yF,ofe,SUo,PUo,iD,$Uo,IUo,jUo,wF,tfe,NUo,DUo,cD,qUo,GUo,OUo,AF,rfe,XUo,zUo,fD,VUo,WUo,QUo,LF,afe,HUo,UUo,mD,JUo,YUo,KUo,BF,sfe,ZUo,eJo,gD,oJo,tJo,rJo,xF,nfe,aJo,sJo,hD,nJo,lJo,dJo,kF,lfe,iJo,cJo,uD,fJo,mJo,gJo,RF,dfe,hJo,uJo,pD,pJo,_Jo,bJo,SF,ife,vJo,TJo,_D,FJo,CJo,MJo,PF,cfe,EJo,yJo,bD,wJo,AJo,LJo,$F,ffe,BJo,xJo,vD,kJo,RJo,SJo,IF,mfe,PJo,$Jo,TD,IJo,jJo,NJo,jF,gfe,DJo,qJo,FD,GJo,OJo,XJo,NF,hfe,zJo,VJo,CD,WJo,QJo,HJo,ufe,UJo,JJo,AA,w7e,ac,DF,pfe,LA,YJo,_fe,KJo,A7e,ut,BA,ZJo,sc,eYo,bfe,oYo,tYo,vfe,rYo,aYo,sYo,xA,nYo,Tfe,lYo,dYo,iYo,lr,kA,cYo,Ffe,fYo,mYo,nc,gYo,Cfe,hYo,uYo,Mfe,pYo,_Yo,bYo,Efe,vYo,TYo,RA,FYo,po,SA,CYo,yfe,MYo,EYo,ls,yYo,wfe,wYo,AYo,Afe,LYo,BYo,Lfe,xYo,kYo,RYo,ue,qF,Bfe,SYo,PYo,MD,$Yo,IYo,jYo,GF,xfe,NYo,DYo,ED,qYo,GYo,OYo,OF,kfe,XYo,zYo,yD,VYo,WYo,QYo,XF,Rfe,HYo,UYo,wD,JYo,YYo,KYo,zF,Sfe,ZYo,eKo,AD,oKo,tKo,rKo,VF,Pfe,aKo,sKo,LD,nKo,lKo,dKo,WF,$fe,iKo,cKo,BD,fKo,mKo,gKo,QF,Ife,hKo,uKo,xD,pKo,_Ko,bKo,HF,jfe,vKo,TKo,kD,FKo,CKo,MKo,UF,Nfe,EKo,yKo,RD,wKo,AKo,LKo,Dfe,BKo,xKo,PA,L7e,lc,JF,qfe,$A,kKo,Gfe,RKo,B7e,pt,IA,SKo,dc,PKo,Ofe,$Ko,IKo,Xfe,jKo,NKo,DKo,jA,qKo,zfe,GKo,OKo,XKo,dr,NA,zKo,Vfe,VKo,WKo,ic,QKo,Wfe,HKo,UKo,Qfe,JKo,YKo,KKo,Hfe,ZKo,eZo,DA,oZo,_o,qA,tZo,Ufe,rZo,aZo,ds,sZo,Jfe,nZo,lZo,Yfe,dZo,iZo,Kfe,cZo,fZo,mZo,X,YF,Zfe,gZo,hZo,SD,uZo,pZo,_Zo,KF,eme,bZo,vZo,PD,TZo,FZo,CZo,ZF,ome,MZo,EZo,$D,yZo,wZo,AZo,eC,tme,LZo,BZo,ID,xZo,kZo,RZo,oC,rme,SZo,PZo,jD,$Zo,IZo,jZo,tC,ame,NZo,DZo,ND,qZo,GZo,OZo,rC,sme,XZo,zZo,DD,VZo,WZo,QZo,aC,nme,HZo,UZo,qD,JZo,YZo,KZo,sC,lme,ZZo,eet,GD,oet,tet,ret,nC,dme,aet,set,OD,net,det,iet,lC,ime,cet,fet,XD,met,get,het,dC,cme,uet,pet,zD,_et,bet,vet,iC,fme,Tet,Fet,VD,Cet,Met,Eet,cC,mme,yet,wet,WD,Aet,Let,Bet,fC,gme,xet,ket,QD,Ret,Set,Pet,mC,hme,$et,Iet,HD,jet,Net,Det,gC,ume,qet,Get,UD,Oet,Xet,zet,hC,pme,Vet,Wet,JD,Qet,Het,Uet,uC,_me,Jet,Yet,YD,Ket,Zet,eot,pC,bme,oot,tot,KD,rot,aot,sot,_C,vme,not,lot,ZD,dot,iot,cot,bC,Tme,fot,mot,eq,got,hot,uot,vC,Fme,pot,_ot,oq,bot,vot,Tot,TC,Cme,Fot,Cot,tq,Mot,Eot,yot,FC,Mme,wot,Aot,rq,Lot,Bot,xot,Eme,kot,Rot,GA,x7e,cc,CC,yme,OA,Sot,wme,Pot,k7e,_t,XA,$ot,fc,Iot,Ame,jot,Not,Lme,Dot,qot,Got,zA,Oot,Bme,Xot,zot,Vot,ir,VA,Wot,xme,Qot,Hot,mc,Uot,kme,Jot,Yot,Rme,Kot,Zot,ett,Sme,ott,ttt,WA,rtt,bo,QA,att,Pme,stt,ntt,is,ltt,$me,dtt,itt,Ime,ctt,ftt,jme,mtt,gtt,htt,re,MC,Nme,utt,ptt,aq,_tt,btt,vtt,EC,Dme,Ttt,Ftt,sq,Ctt,Mtt,Ett,yC,qme,ytt,wtt,nq,Att,Ltt,Btt,wC,Gme,xtt,ktt,lq,Rtt,Stt,Ptt,AC,Ome,$tt,Itt,dq,jtt,Ntt,Dtt,LC,Xme,qtt,Gtt,iq,Ott,Xtt,ztt,BC,zme,Vtt,Wtt,cq,Qtt,Htt,Utt,xC,Vme,Jtt,Ytt,fq,Ktt,Ztt,ert,kC,Wme,ort,trt,mq,rrt,art,srt,RC,Qme,nrt,lrt,gq,drt,irt,crt,SC,Hme,frt,mrt,hq,grt,hrt,urt,PC,Ume,prt,_rt,uq,brt,vrt,Trt,$C,Jme,Frt,Crt,pq,Mrt,Ert,yrt,IC,Yme,wrt,Art,_q,Lrt,Brt,xrt,jC,Kme,krt,Rrt,bq,Srt,Prt,$rt,NC,Zme,Irt,jrt,vq,Nrt,Drt,qrt,DC,ege,Grt,Ort,Tq,Xrt,zrt,Vrt,oge,Wrt,Qrt,HA,R7e,gc,qC,tge,UA,Hrt,rge,Urt,S7e,bt,JA,Jrt,hc,Yrt,age,Krt,Zrt,sge,eat,oat,tat,YA,rat,nge,aat,sat,nat,cr,KA,lat,lge,dat,iat,uc,cat,dge,fat,mat,ige,gat,hat,uat,cge,pat,_at,ZA,bat,vo,e0,vat,fge,Tat,Fat,cs,Cat,mge,Mat,Eat,gge,yat,wat,hge,Aat,Lat,Bat,uge,GC,pge,xat,kat,Fq,Rat,Sat,Pat,_ge,$at,Iat,o0,P7e,pc,OC,bge,t0,jat,vge,Nat,$7e,vt,r0,Dat,_c,qat,Tge,Gat,Oat,Fge,Xat,zat,Vat,a0,Wat,Cge,Qat,Hat,Uat,fr,s0,Jat,Mge,Yat,Kat,bc,Zat,Ege,est,ost,yge,tst,rst,ast,wge,sst,nst,n0,lst,To,l0,dst,Age,ist,cst,fs,fst,Lge,mst,gst,Bge,hst,ust,xge,pst,_st,bst,K,XC,kge,vst,Tst,Cq,Fst,Cst,Mst,zC,Rge,Est,yst,Mq,wst,Ast,Lst,VC,Sge,Bst,xst,Eq,kst,Rst,Sst,WC,Pge,Pst,$st,yq,Ist,jst,Nst,QC,$ge,Dst,qst,wq,Gst,Ost,Xst,HC,Ige,zst,Vst,Aq,Wst,Qst,Hst,UC,jge,Ust,Jst,Lq,Yst,Kst,Zst,JC,Nge,ent,ont,Bq,tnt,rnt,ant,YC,Dge,snt,nnt,xq,lnt,dnt,int,KC,qge,cnt,fnt,kq,mnt,gnt,hnt,ZC,Gge,unt,pnt,Rq,_nt,bnt,vnt,e4,Oge,Tnt,Fnt,Sq,Cnt,Mnt,Ent,o4,Xge,ynt,wnt,Pq,Ant,Lnt,Bnt,t4,zge,xnt,knt,$q,Rnt,Snt,Pnt,r4,Vge,$nt,Int,Iq,jnt,Nnt,Dnt,a4,Wge,qnt,Gnt,jq,Ont,Xnt,znt,s4,Qge,Vnt,Wnt,Nq,Qnt,Hnt,Unt,n4,Hge,Jnt,Ynt,Dq,Knt,Znt,elt,l4,Uge,olt,tlt,qq,rlt,alt,slt,d4,Jge,nlt,llt,Gq,dlt,ilt,clt,Yge,flt,mlt,d0,I7e,vc,i4,Kge,i0,glt,Zge,hlt,j7e,Tt,c0,ult,Tc,plt,ehe,_lt,blt,ohe,vlt,Tlt,Flt,f0,Clt,the,Mlt,Elt,ylt,mr,m0,wlt,rhe,Alt,Llt,Fc,Blt,ahe,xlt,klt,she,Rlt,Slt,Plt,nhe,$lt,Ilt,g0,jlt,Fo,h0,Nlt,lhe,Dlt,qlt,ms,Glt,dhe,Olt,Xlt,ihe,zlt,Vlt,che,Wlt,Qlt,Hlt,Z,c4,fhe,Ult,Jlt,Oq,Ylt,Klt,Zlt,f4,mhe,edt,odt,Xq,tdt,rdt,adt,m4,ghe,sdt,ndt,zq,ldt,ddt,idt,g4,hhe,cdt,fdt,Vq,mdt,gdt,hdt,h4,uhe,udt,pdt,Wq,_dt,bdt,vdt,u4,phe,Tdt,Fdt,Qq,Cdt,Mdt,Edt,p4,_he,ydt,wdt,Hq,Adt,Ldt,Bdt,_4,bhe,xdt,kdt,Uq,Rdt,Sdt,Pdt,b4,vhe,$dt,Idt,Jq,jdt,Ndt,Ddt,v4,The,qdt,Gdt,Yq,Odt,Xdt,zdt,T4,Fhe,Vdt,Wdt,Kq,Qdt,Hdt,Udt,F4,Che,Jdt,Ydt,Zq,Kdt,Zdt,eit,C4,Mhe,oit,tit,eG,rit,ait,sit,M4,Ehe,nit,lit,oG,dit,iit,cit,E4,yhe,fit,mit,tG,git,hit,uit,y4,whe,pit,_it,rG,bit,vit,Tit,w4,Ahe,Fit,Cit,aG,Mit,Eit,yit,A4,Lhe,wit,Ait,sG,Lit,Bit,xit,L4,Bhe,kit,Rit,nG,Sit,Pit,$it,xhe,Iit,jit,u0,N7e,Cc,B4,khe,p0,Nit,Rhe,Dit,D7e,Ft,_0,qit,Mc,Git,She,Oit,Xit,Phe,zit,Vit,Wit,b0,Qit,$he,Hit,Uit,Jit,gr,v0,Yit,Ihe,Kit,Zit,Ec,ect,jhe,oct,tct,Nhe,rct,act,sct,Dhe,nct,lct,T0,dct,Co,F0,ict,qhe,cct,fct,gs,mct,Ghe,gct,hct,Ohe,uct,pct,Xhe,_ct,bct,vct,zhe,x4,Vhe,Tct,Fct,lG,Cct,Mct,Ect,Whe,yct,wct,C0,q7e,yc,k4,Qhe,M0,Act,Hhe,Lct,G7e,Ct,E0,Bct,wc,xct,Uhe,kct,Rct,Jhe,Sct,Pct,$ct,y0,Ict,Yhe,jct,Nct,Dct,hr,w0,qct,Khe,Gct,Oct,Ac,Xct,Zhe,zct,Vct,eue,Wct,Qct,Hct,oue,Uct,Jct,A0,Yct,Mo,L0,Kct,tue,Zct,eft,hs,oft,rue,tft,rft,aue,aft,sft,sue,nft,lft,dft,nue,R4,lue,ift,cft,dG,fft,mft,gft,due,hft,uft,B0,O7e,Lc,S4,iue,x0,pft,cue,_ft,X7e,Mt,k0,bft,Bc,vft,fue,Tft,Fft,mue,Cft,Mft,Eft,R0,yft,gue,wft,Aft,Lft,ur,S0,Bft,hue,xft,kft,xc,Rft,uue,Sft,Pft,pue,$ft,Ift,jft,_ue,Nft,Dft,P0,qft,Eo,$0,Gft,bue,Oft,Xft,us,zft,vue,Vft,Wft,Tue,Qft,Hft,Fue,Uft,Jft,Yft,V,P4,Cue,Kft,Zft,iG,emt,omt,tmt,$4,Mue,rmt,amt,cG,smt,nmt,lmt,I4,Eue,dmt,imt,fG,cmt,fmt,mmt,j4,yue,gmt,hmt,mG,umt,pmt,_mt,N4,wue,bmt,vmt,gG,Tmt,Fmt,Cmt,D4,Aue,Mmt,Emt,hG,ymt,wmt,Amt,q4,Lue,Lmt,Bmt,uG,xmt,kmt,Rmt,G4,Bue,Smt,Pmt,pG,$mt,Imt,jmt,O4,xue,Nmt,Dmt,_G,qmt,Gmt,Omt,X4,kue,Xmt,zmt,bG,Vmt,Wmt,Qmt,z4,Rue,Hmt,Umt,vG,Jmt,Ymt,Kmt,V4,Sue,Zmt,egt,TG,ogt,tgt,rgt,W4,Pue,agt,sgt,FG,ngt,lgt,dgt,Q4,$ue,igt,cgt,CG,fgt,mgt,ggt,H4,Iue,hgt,ugt,MG,pgt,_gt,bgt,U4,jue,vgt,Tgt,EG,Fgt,Cgt,Mgt,J4,Nue,Egt,ygt,yG,wgt,Agt,Lgt,Y4,Due,Bgt,xgt,wG,kgt,Rgt,Sgt,K4,que,Pgt,$gt,AG,Igt,jgt,Ngt,Z4,Gue,Dgt,qgt,LG,Ggt,Ogt,Xgt,eM,Oue,zgt,Vgt,BG,Wgt,Qgt,Hgt,oM,Xue,Ugt,Jgt,xG,Ygt,Kgt,Zgt,tM,zue,eht,oht,kG,tht,rht,aht,rM,Vue,sht,nht,RG,lht,dht,iht,Wue,cht,fht,I0,z7e,kc,aM,Que,j0,mht,Hue,ght,V7e,Et,N0,hht,Rc,uht,Uue,pht,_ht,Jue,bht,vht,Tht,D0,Fht,Yue,Cht,Mht,Eht,pr,q0,yht,Kue,wht,Aht,Sc,Lht,Zue,Bht,xht,epe,kht,Rht,Sht,ope,Pht,$ht,G0,Iht,yo,O0,jht,tpe,Nht,Dht,ps,qht,rpe,Ght,Oht,ape,Xht,zht,spe,Vht,Wht,Qht,_s,sM,npe,Hht,Uht,SG,Jht,Yht,Kht,nM,lpe,Zht,eut,PG,out,tut,rut,lM,dpe,aut,sut,$G,nut,lut,dut,dM,ipe,iut,cut,IG,fut,mut,gut,cpe,hut,uut,X0,W7e,Pc,iM,fpe,z0,put,mpe,_ut,Q7e,yt,V0,but,$c,vut,gpe,Tut,Fut,hpe,Cut,Mut,Eut,W0,yut,upe,wut,Aut,Lut,_r,Q0,But,ppe,xut,kut,Ic,Rut,_pe,Sut,Put,bpe,$ut,Iut,jut,vpe,Nut,Dut,H0,qut,wo,U0,Gut,Tpe,Out,Xut,bs,zut,Fpe,Vut,Wut,Cpe,Qut,Hut,Mpe,Uut,Jut,Yut,fe,cM,Epe,Kut,Zut,jG,ept,opt,tpt,fM,ype,rpt,apt,NG,spt,npt,lpt,mM,wpe,dpt,ipt,DG,cpt,fpt,mpt,gM,Ape,gpt,hpt,qG,upt,ppt,_pt,hM,Lpe,bpt,vpt,GG,Tpt,Fpt,Cpt,uM,Bpe,Mpt,Ept,OG,ypt,wpt,Apt,pM,xpe,Lpt,Bpt,XG,xpt,kpt,Rpt,_M,kpe,Spt,Ppt,zG,$pt,Ipt,jpt,bM,Rpe,Npt,Dpt,VG,qpt,Gpt,Opt,vM,Spe,Xpt,zpt,WG,Vpt,Wpt,Qpt,TM,Ppe,Hpt,Upt,QG,Jpt,Ypt,Kpt,$pe,Zpt,e_t,J0,H7e,jc,FM,Ipe,Y0,o_t,jpe,t_t,U7e,wt,K0,r_t,Nc,a_t,Npe,s_t,n_t,Dpe,l_t,d_t,i_t,Z0,c_t,qpe,f_t,m_t,g_t,br,e6,h_t,Gpe,u_t,p_t,Dc,__t,Ope,b_t,v_t,Xpe,T_t,F_t,C_t,zpe,M_t,E_t,o6,y_t,Ao,t6,w_t,Vpe,A_t,L_t,vs,B_t,Wpe,x_t,k_t,Qpe,R_t,S_t,Hpe,P_t,$_t,I_t,be,CM,Upe,j_t,N_t,HG,D_t,q_t,G_t,MM,Jpe,O_t,X_t,UG,z_t,V_t,W_t,EM,Ype,Q_t,H_t,JG,U_t,J_t,Y_t,yM,Kpe,K_t,Z_t,YG,ebt,obt,tbt,wM,Zpe,rbt,abt,KG,sbt,nbt,lbt,AM,e_e,dbt,ibt,ZG,cbt,fbt,mbt,LM,o_e,gbt,hbt,eO,ubt,pbt,_bt,BM,t_e,bbt,vbt,oO,Tbt,Fbt,Cbt,xM,r_e,Mbt,Ebt,tO,ybt,wbt,Abt,a_e,Lbt,Bbt,r6,J7e,qc,kM,s_e,a6,xbt,n_e,kbt,Y7e,At,s6,Rbt,Gc,Sbt,l_e,Pbt,$bt,d_e,Ibt,jbt,Nbt,n6,Dbt,i_e,qbt,Gbt,Obt,vr,l6,Xbt,c_e,zbt,Vbt,Oc,Wbt,f_e,Qbt,Hbt,m_e,Ubt,Jbt,Ybt,g_e,Kbt,Zbt,d6,e2t,Lo,i6,o2t,h_e,t2t,r2t,Ts,a2t,u_e,s2t,n2t,p_e,l2t,d2t,__e,i2t,c2t,f2t,ve,RM,b_e,m2t,g2t,rO,h2t,u2t,p2t,SM,v_e,_2t,b2t,aO,v2t,T2t,F2t,PM,T_e,C2t,M2t,sO,E2t,y2t,w2t,$M,F_e,A2t,L2t,nO,B2t,x2t,k2t,IM,C_e,R2t,S2t,lO,P2t,$2t,I2t,jM,M_e,j2t,N2t,dO,D2t,q2t,G2t,NM,E_e,O2t,X2t,iO,z2t,V2t,W2t,DM,y_e,Q2t,H2t,cO,U2t,J2t,Y2t,qM,w_e,K2t,Z2t,fO,evt,ovt,tvt,A_e,rvt,avt,c6,K7e,Xc,GM,L_e,f6,svt,B_e,nvt,Z7e,Lt,m6,lvt,zc,dvt,x_e,ivt,cvt,k_e,fvt,mvt,gvt,g6,hvt,R_e,uvt,pvt,_vt,Tr,h6,bvt,S_e,vvt,Tvt,Vc,Fvt,P_e,Cvt,Mvt,$_e,Evt,yvt,wvt,I_e,Avt,Lvt,u6,Bvt,Bo,p6,xvt,j_e,kvt,Rvt,Fs,Svt,N_e,Pvt,$vt,D_e,Ivt,jvt,q_e,Nvt,Dvt,qvt,Te,OM,G_e,Gvt,Ovt,mO,Xvt,zvt,Vvt,XM,O_e,Wvt,Qvt,gO,Hvt,Uvt,Jvt,zM,X_e,Yvt,Kvt,hO,Zvt,eTt,oTt,VM,z_e,tTt,rTt,uO,aTt,sTt,nTt,WM,V_e,lTt,dTt,pO,iTt,cTt,fTt,QM,W_e,mTt,gTt,_O,hTt,uTt,pTt,HM,Q_e,_Tt,bTt,bO,vTt,TTt,FTt,UM,H_e,CTt,MTt,vO,ETt,yTt,wTt,JM,U_e,ATt,LTt,TO,BTt,xTt,kTt,J_e,RTt,STt,_6,e8e,Wc,YM,Y_e,b6,PTt,K_e,$Tt,o8e,Bt,v6,ITt,Qc,jTt,Z_e,NTt,DTt,ebe,qTt,GTt,OTt,T6,XTt,obe,zTt,VTt,WTt,Fr,F6,QTt,tbe,HTt,UTt,Hc,JTt,rbe,YTt,KTt,abe,ZTt,e1t,o1t,sbe,t1t,r1t,C6,a1t,xo,M6,s1t,nbe,n1t,l1t,Cs,d1t,lbe,i1t,c1t,dbe,f1t,m1t,ibe,g1t,h1t,u1t,Fe,KM,cbe,p1t,_1t,FO,b1t,v1t,T1t,ZM,fbe,F1t,C1t,CO,M1t,E1t,y1t,eE,mbe,w1t,A1t,MO,L1t,B1t,x1t,oE,gbe,k1t,R1t,EO,S1t,P1t,$1t,tE,hbe,I1t,j1t,yO,N1t,D1t,q1t,rE,ube,G1t,O1t,wO,X1t,z1t,V1t,aE,pbe,W1t,Q1t,AO,H1t,U1t,J1t,sE,_be,Y1t,K1t,LO,Z1t,eFt,oFt,nE,bbe,tFt,rFt,BO,aFt,sFt,nFt,vbe,lFt,dFt,E6,t8e,Uc,lE,Tbe,y6,iFt,Fbe,cFt,r8e,xt,w6,fFt,Jc,mFt,Cbe,gFt,hFt,Mbe,uFt,pFt,_Ft,A6,bFt,Ebe,vFt,TFt,FFt,Cr,L6,CFt,ybe,MFt,EFt,Yc,yFt,wbe,wFt,AFt,Abe,LFt,BFt,xFt,Lbe,kFt,RFt,B6,SFt,ko,x6,PFt,Bbe,$Ft,IFt,Ms,jFt,xbe,NFt,DFt,kbe,qFt,GFt,Rbe,OFt,XFt,zFt,ao,dE,Sbe,VFt,WFt,xO,QFt,HFt,UFt,iE,Pbe,JFt,YFt,kO,KFt,ZFt,eCt,cE,$be,oCt,tCt,RO,rCt,aCt,sCt,fE,Ibe,nCt,lCt,SO,dCt,iCt,cCt,mE,jbe,fCt,mCt,PO,gCt,hCt,uCt,gE,Nbe,pCt,_Ct,$O,bCt,vCt,TCt,hE,Dbe,FCt,CCt,IO,MCt,ECt,yCt,qbe,wCt,ACt,k6,a8e,Kc,uE,Gbe,R6,LCt,Obe,BCt,s8e,kt,S6,xCt,Zc,kCt,Xbe,RCt,SCt,zbe,PCt,$Ct,ICt,P6,jCt,Vbe,NCt,DCt,qCt,Mr,$6,GCt,Wbe,OCt,XCt,ef,zCt,Qbe,VCt,WCt,Hbe,QCt,HCt,UCt,Ube,JCt,YCt,I6,KCt,Ro,j6,ZCt,Jbe,e4t,o4t,Es,t4t,Ybe,r4t,a4t,Kbe,s4t,n4t,Zbe,l4t,d4t,i4t,so,pE,e2e,c4t,f4t,jO,m4t,g4t,h4t,_E,o2e,u4t,p4t,NO,_4t,b4t,v4t,bE,t2e,T4t,F4t,DO,C4t,M4t,E4t,vE,r2e,y4t,w4t,qO,A4t,L4t,B4t,TE,a2e,x4t,k4t,GO,R4t,S4t,P4t,FE,s2e,$4t,I4t,OO,j4t,N4t,D4t,CE,n2e,q4t,G4t,XO,O4t,X4t,z4t,l2e,V4t,W4t,N6,n8e,of,ME,d2e,D6,Q4t,i2e,H4t,l8e,Rt,q6,U4t,tf,J4t,c2e,Y4t,K4t,f2e,Z4t,eMt,oMt,G6,tMt,m2e,rMt,aMt,sMt,Er,O6,nMt,g2e,lMt,dMt,rf,iMt,h2e,cMt,fMt,u2e,mMt,gMt,hMt,p2e,uMt,pMt,X6,_Mt,So,z6,bMt,_2e,vMt,TMt,ys,FMt,b2e,CMt,MMt,v2e,EMt,yMt,T2e,wMt,AMt,LMt,F2e,EE,C2e,BMt,xMt,zO,kMt,RMt,SMt,M2e,PMt,$Mt,V6,d8e,af,yE,E2e,W6,IMt,y2e,jMt,i8e,St,Q6,NMt,sf,DMt,w2e,qMt,GMt,A2e,OMt,XMt,zMt,H6,VMt,L2e,WMt,QMt,HMt,yr,U6,UMt,B2e,JMt,YMt,nf,KMt,x2e,ZMt,eEt,k2e,oEt,tEt,rEt,R2e,aEt,sEt,J6,nEt,Po,Y6,lEt,S2e,dEt,iEt,ws,cEt,P2e,fEt,mEt,$2e,gEt,hEt,I2e,uEt,pEt,_Et,K6,wE,j2e,bEt,vEt,VO,TEt,FEt,CEt,AE,N2e,MEt,EEt,WO,yEt,wEt,AEt,D2e,LEt,BEt,Z6,c8e,lf,LE,q2e,eL,xEt,G2e,kEt,f8e,Pt,oL,REt,df,SEt,O2e,PEt,$Et,X2e,IEt,jEt,NEt,tL,DEt,z2e,qEt,GEt,OEt,wr,rL,XEt,V2e,zEt,VEt,cf,WEt,W2e,QEt,HEt,Q2e,UEt,JEt,YEt,H2e,KEt,ZEt,aL,e3t,$o,sL,o3t,U2e,t3t,r3t,As,a3t,J2e,s3t,n3t,Y2e,l3t,d3t,K2e,i3t,c3t,f3t,Z2e,BE,eve,m3t,g3t,QO,h3t,u3t,p3t,ove,_3t,b3t,nL,m8e;return ce=new z({}),ka=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased"),',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),k3=new z({}),R3=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel),`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),_f=new v3t({props:{warning:"&lcub;true}",$$slots:{default:[$fr]},$$scope:{ctx:_d}}}),S3=new z({}),P3=new E({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/configuration_auto.py#L509"}}),j3=new E({props:{name:"from\\_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/configuration_auto.py#L532",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),N3=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),D3=new E({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/configuration_auto.py#L654",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),q3=new z({}),G3=new E({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/tokenization_auto.py#L350"}}),z3=new E({props:{name:"from\\_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/tokenization_auto.py#L364",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/doc-build-test/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),V3=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),W3=new E({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/tokenization_auto.py#L560",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),Q3=new z({}),H3=new E({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/feature_extraction_auto.py#L168"}}),Y3=new E({props:{name:"from\\_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/feature_extraction_auto.py#L182",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/doc-build-test/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Wg=new v3t({props:{$$slots:{default:[Ifr]},$$scope:{ctx:_d}}}),K3=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),Z3=new E({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/feature_extraction_auto.py#L309",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),e5=new z({}),o5=new E({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/processing_auto.py#L68"}}),a5=new E({props:{name:"from\\_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/processing_auto.py#L82",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),rh=new v3t({props:{$$slots:{default:[jfr]},$$scope:{ctx:_d}}}),s5=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),n5=new z({}),l5=new E({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_auto.py#L653"}}),i5=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),c5=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),f5=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),m5=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),g5=new z({}),h5=new E({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_auto.py#L660"}}),p5=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),_5=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),b5=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),v5=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),T5=new z({}),F5=new E({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_auto.py#L675"}}),M5=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),E5=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),y5=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),w5=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),A5=new z({}),L5=new E({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_auto.py#L682"}}),x5=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),k5=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),R5=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),S5=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),P5=new z({}),$5=new E({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_auto.py#L689"}}),j5=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),N5=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),D5=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),q5=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),G5=new z({}),O5=new E({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_auto.py#L698"}}),z5=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),V5=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),W5=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Q5=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),H5=new z({}),U5=new E({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_auto.py#L732"}}),Y5=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),K5=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),Z5=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ey=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oy=new z({}),ty=new E({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_auto.py#L739"}}),ay=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),sy=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),ny=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ly=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dy=new z({}),iy=new E({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_auto.py#L725"}}),fy=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),my=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),gy=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uy=new z({}),py=new E({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_auto.py#L707"}}),by=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),vy=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),Ty=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Fy=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Cy=new z({}),My=new E({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_auto.py#L714"}}),yy=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),wy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),Ay=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ly=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),By=new z({}),xy=new E({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_auto.py#L748"}}),Ry=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/doc-build-test/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/doc-build-test/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/doc-build-test/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Sy=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),Py=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$y=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Iy=new z({}),jy=new E({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_auto.py#L778"}}),Dy=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),qy=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),Gy=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Oy=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Xy=new z({}),zy=new E({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_auto.py#L785"}}),Wy=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Qy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),Hy=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Uy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Jy=new z({}),Yy=new E({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_auto.py#L808"}}),Zy=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),ew=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),ow=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),tw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rw=new z({}),aw=new E({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_auto.py#L792"}}),nw=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),lw=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),dw=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),iw=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cw=new z({}),fw=new E({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_auto.py#L799"}}),gw=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),hw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),uw=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_w=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bw=new z({}),vw=new E({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_auto.py#L817"}}),Fw=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Cw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),Mw=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ew=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yw=new z({}),ww=new E({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_auto.py#L771"}}),Lw=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),Bw=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),xw=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),kw=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Rw=new z({}),Sw=new E({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_auto.py#L755"}}),$w=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),Iw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),jw=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Nw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Dw=new z({}),qw=new E({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_auto.py#L762"}}),Ow=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),Xw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),zw=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ww=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Qw=new z({}),Hw=new E({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_tf_auto.py#L371"}}),Jw=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Yw=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),Kw=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Zw=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),eA=new z({}),oA=new E({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_tf_auto.py#L378"}}),rA=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),aA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),sA=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),nA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),lA=new z({}),dA=new E({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_tf_auto.py#L393"}}),cA=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),fA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),mA=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),gA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hA=new z({}),uA=new E({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_tf_auto.py#L400"}}),_A=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),bA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),vA=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),TA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),FA=new z({}),CA=new E({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_tf_auto.py#L414"}}),EA=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),yA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),wA=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),AA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),LA=new z({}),BA=new E({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),kA=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),RA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),SA=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),PA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$A=new z({}),IA=new E({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_tf_auto.py#L430"}}),NA=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),DA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),qA=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),GA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),OA=new z({}),XA=new E({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),VA=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),WA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),QA=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),HA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),UA=new z({}),JA=new E({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_tf_auto.py#L446"}}),KA=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),ZA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),e0=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),o0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),t0=new z({}),r0=new E({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_tf_auto.py#L457"}}),s0=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),n0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),l0=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),d0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),i0=new z({}),c0=new E({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_tf_auto.py#L439"}}),m0=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),g0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),h0=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),u0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),p0=new z({}),_0=new E({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_tf_auto.py#L407"}}),v0=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),T0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),F0=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),C0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),M0=new z({}),E0=new E({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_tf_auto.py#L482"}}),w0=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),A0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),L0=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),B0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),x0=new z({}),k0=new E({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_flax_auto.py#L220"}}),S0=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),P0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),$0=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),I0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),j0=new z({}),N0=new E({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_flax_auto.py#L234"}}),q0=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),G0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),O0=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),X0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),z0=new z({}),V0=new E({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_flax_auto.py#L227"}}),Q0=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
</ul>`,name:"config"}]}}),H0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),U0=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),J0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Y0=new z({}),K0=new E({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),e6=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),o6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),t6=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),r6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),a6=new z({}),s6=new E({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),l6=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),d6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),i6=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),c6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),f6=new z({}),m6=new E({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),h6=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),u6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),p6=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),b6=new z({}),v6=new E({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_flax_auto.py#L266"}}),F6=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),C6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),M6=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),E6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),y6=new z({}),w6=new E({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_flax_auto.py#L273"}}),L6=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),B6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),x6=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),k6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),R6=new z({}),S6=new E({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_flax_auto.py#L282"}}),$6=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),I6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),j6=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),N6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),D6=new z({}),q6=new E({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),O6=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),X6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),z6=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),V6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),W6=new z({}),Q6=new E({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_flax_auto.py#L298"}}),U6=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),J6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),Y6=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Z6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),eL=new z({}),oL=new E({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/modeling_flax_auto.py#L307"}}),rL=new E({props:{name:"from\\_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/doc-build-test/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/doc-build-test/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),aL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),sL=new E({props:{name:"from\\_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/doc-build-test/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/doc-build-test/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/doc-build-test/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),nL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),Ae=l(),le=a("h1"),me=a("a"),oo=a("span"),f(ce.$$.fragment),_e=l(),No=a("span"),bd=o("Auto Classes"),mf=l(),ta=a("p"),vd=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Td=a("code"),A3=o("from_pretrained()"),gf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ee=l(),no=a("p"),Fd=o("Instantiating one of "),Ls=a("a"),L3=o("AutoConfig"),Bs=o(", "),xs=a("a"),B3=o("AutoModel"),Cd=o(`, and
`),ks=a("a"),x3=o("AutoTokenizer"),Md=o(" will directly create a class of the relevant architecture. For instance"),hf=l(),f(ka.$$.fragment),lo=l(),ge=a("p"),r7=o("will create a model that is an instance of "),Ed=a("a"),a7=o("BertModel"),s7=o("."),Do=l(),Ra=a("p"),n7=o("There is one class of "),uf=a("code"),l7=o("AutoModel"),vBe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),uLe=l(),yd=a("h2"),pf=a("a"),jz=a("span"),f(k3.$$.fragment),TBe=l(),Nz=a("span"),FBe=o("Extending the Auto Classes"),pLe=l(),Rs=a("p"),CBe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Dz=a("code"),MBe=o("NewModel"),EBe=o(", make sure you have a "),qz=a("code"),yBe=o("NewModelConfig"),wBe=o(` then you can add those to the auto
classes like this:`),_Le=l(),f(R3.$$.fragment),bLe=l(),d7=a("p"),ABe=o("You will then be able to use the auto classes like you would usually do!"),vLe=l(),f(_f.$$.fragment),TLe=l(),wd=a("h2"),bf=a("a"),Gz=a("span"),f(S3.$$.fragment),LBe=l(),Oz=a("span"),BBe=o("AutoConfig"),FLe=l(),qo=a("div"),f(P3.$$.fragment),xBe=l(),$3=a("p"),kBe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),i7=a("a"),RBe=o("from_pretrained()"),SBe=o(" class method."),PBe=l(),I3=a("p"),$Be=o("This class cannot be instantiated directly using "),Xz=a("code"),IBe=o("__init__()"),jBe=o(" (throws an error)."),NBe=l(),io=a("div"),f(j3.$$.fragment),DBe=l(),zz=a("p"),qBe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),GBe=l(),Ad=a("p"),OBe=o("The configuration class to instantiate is selected based on the "),Vz=a("code"),XBe=o("model_type"),zBe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Wz=a("code"),VBe=o("pretrained_model_name_or_path"),WBe=o(":"),QBe=l(),v=a("ul"),vf=a("li"),Qz=a("strong"),HBe=o("albert"),UBe=o(" \u2014 "),c7=a("a"),JBe=o("AlbertConfig"),YBe=o(" (ALBERT model)"),KBe=l(),Tf=a("li"),Hz=a("strong"),ZBe=o("bart"),exe=o(" \u2014 "),f7=a("a"),oxe=o("BartConfig"),txe=o(" (BART model)"),rxe=l(),Ff=a("li"),Uz=a("strong"),axe=o("beit"),sxe=o(" \u2014 "),m7=a("a"),nxe=o("BeitConfig"),lxe=o(" (BEiT model)"),dxe=l(),Cf=a("li"),Jz=a("strong"),ixe=o("bert"),cxe=o(" \u2014 "),g7=a("a"),fxe=o("BertConfig"),mxe=o(" (BERT model)"),gxe=l(),Mf=a("li"),Yz=a("strong"),hxe=o("bert-generation"),uxe=o(" \u2014 "),h7=a("a"),pxe=o("BertGenerationConfig"),_xe=o(" (Bert Generation model)"),bxe=l(),Ef=a("li"),Kz=a("strong"),vxe=o("big_bird"),Txe=o(" \u2014 "),u7=a("a"),Fxe=o("BigBirdConfig"),Cxe=o(" (BigBird model)"),Mxe=l(),yf=a("li"),Zz=a("strong"),Exe=o("bigbird_pegasus"),yxe=o(" \u2014 "),p7=a("a"),wxe=o("BigBirdPegasusConfig"),Axe=o(" (BigBirdPegasus model)"),Lxe=l(),wf=a("li"),eV=a("strong"),Bxe=o("blenderbot"),xxe=o(" \u2014 "),_7=a("a"),kxe=o("BlenderbotConfig"),Rxe=o(" (Blenderbot model)"),Sxe=l(),Af=a("li"),oV=a("strong"),Pxe=o("blenderbot-small"),$xe=o(" \u2014 "),b7=a("a"),Ixe=o("BlenderbotSmallConfig"),jxe=o(" (BlenderbotSmall model)"),Nxe=l(),Lf=a("li"),tV=a("strong"),Dxe=o("camembert"),qxe=o(" \u2014 "),v7=a("a"),Gxe=o("CamembertConfig"),Oxe=o(" (CamemBERT model)"),Xxe=l(),Bf=a("li"),rV=a("strong"),zxe=o("canine"),Vxe=o(" \u2014 "),T7=a("a"),Wxe=o("CanineConfig"),Qxe=o(" (Canine model)"),Hxe=l(),xf=a("li"),aV=a("strong"),Uxe=o("clip"),Jxe=o(" \u2014 "),F7=a("a"),Yxe=o("CLIPConfig"),Kxe=o(" (CLIP model)"),Zxe=l(),kf=a("li"),sV=a("strong"),eke=o("convbert"),oke=o(" \u2014 "),C7=a("a"),tke=o("ConvBertConfig"),rke=o(" (ConvBERT model)"),ake=l(),Rf=a("li"),nV=a("strong"),ske=o("convnext"),nke=o(" \u2014 "),M7=a("a"),lke=o("ConvNextConfig"),dke=o(" (ConvNext model)"),ike=l(),Sf=a("li"),lV=a("strong"),cke=o("ctrl"),fke=o(" \u2014 "),E7=a("a"),mke=o("CTRLConfig"),gke=o(" (CTRL model)"),hke=l(),Pf=a("li"),dV=a("strong"),uke=o("deberta"),pke=o(" \u2014 "),y7=a("a"),_ke=o("DebertaConfig"),bke=o(" (DeBERTa model)"),vke=l(),$f=a("li"),iV=a("strong"),Tke=o("deberta-v2"),Fke=o(" \u2014 "),w7=a("a"),Cke=o("DebertaV2Config"),Mke=o(" (DeBERTa-v2 model)"),Eke=l(),If=a("li"),cV=a("strong"),yke=o("deit"),wke=o(" \u2014 "),A7=a("a"),Ake=o("DeiTConfig"),Lke=o(" (DeiT model)"),Bke=l(),jf=a("li"),fV=a("strong"),xke=o("detr"),kke=o(" \u2014 "),L7=a("a"),Rke=o("DetrConfig"),Ske=o(" (DETR model)"),Pke=l(),Nf=a("li"),mV=a("strong"),$ke=o("distilbert"),Ike=o(" \u2014 "),B7=a("a"),jke=o("DistilBertConfig"),Nke=o(" (DistilBERT model)"),Dke=l(),Df=a("li"),gV=a("strong"),qke=o("dpr"),Gke=o(" \u2014 "),x7=a("a"),Oke=o("DPRConfig"),Xke=o(" (DPR model)"),zke=l(),qf=a("li"),hV=a("strong"),Vke=o("electra"),Wke=o(" \u2014 "),k7=a("a"),Qke=o("ElectraConfig"),Hke=o(" (ELECTRA model)"),Uke=l(),Gf=a("li"),uV=a("strong"),Jke=o("encoder-decoder"),Yke=o(" \u2014 "),R7=a("a"),Kke=o("EncoderDecoderConfig"),Zke=o(" (Encoder decoder model)"),eRe=l(),Of=a("li"),pV=a("strong"),oRe=o("flaubert"),tRe=o(" \u2014 "),S7=a("a"),rRe=o("FlaubertConfig"),aRe=o(" (FlauBERT model)"),sRe=l(),Xf=a("li"),_V=a("strong"),nRe=o("fnet"),lRe=o(" \u2014 "),P7=a("a"),dRe=o("FNetConfig"),iRe=o(" (FNet model)"),cRe=l(),zf=a("li"),bV=a("strong"),fRe=o("fsmt"),mRe=o(" \u2014 "),$7=a("a"),gRe=o("FSMTConfig"),hRe=o(" (FairSeq Machine-Translation model)"),uRe=l(),Vf=a("li"),vV=a("strong"),pRe=o("funnel"),_Re=o(" \u2014 "),I7=a("a"),bRe=o("FunnelConfig"),vRe=o(" (Funnel Transformer model)"),TRe=l(),Wf=a("li"),TV=a("strong"),FRe=o("gpt2"),CRe=o(" \u2014 "),j7=a("a"),MRe=o("GPT2Config"),ERe=o(" (OpenAI GPT-2 model)"),yRe=l(),Qf=a("li"),FV=a("strong"),wRe=o("gpt_neo"),ARe=o(" \u2014 "),N7=a("a"),LRe=o("GPTNeoConfig"),BRe=o(" (GPT Neo model)"),xRe=l(),Hf=a("li"),CV=a("strong"),kRe=o("gptj"),RRe=o(" \u2014 "),D7=a("a"),SRe=o("GPTJConfig"),PRe=o(" (GPT-J model)"),$Re=l(),Uf=a("li"),MV=a("strong"),IRe=o("hubert"),jRe=o(" \u2014 "),q7=a("a"),NRe=o("HubertConfig"),DRe=o(" (Hubert model)"),qRe=l(),Jf=a("li"),EV=a("strong"),GRe=o("ibert"),ORe=o(" \u2014 "),G7=a("a"),XRe=o("IBertConfig"),zRe=o(" (I-BERT model)"),VRe=l(),Yf=a("li"),yV=a("strong"),WRe=o("imagegpt"),QRe=o(" \u2014 "),O7=a("a"),HRe=o("ImageGPTConfig"),URe=o(" (ImageGPT model)"),JRe=l(),Kf=a("li"),wV=a("strong"),YRe=o("layoutlm"),KRe=o(" \u2014 "),X7=a("a"),ZRe=o("LayoutLMConfig"),eSe=o(" (LayoutLM model)"),oSe=l(),Zf=a("li"),AV=a("strong"),tSe=o("layoutlmv2"),rSe=o(" \u2014 "),z7=a("a"),aSe=o("LayoutLMv2Config"),sSe=o(" (LayoutLMv2 model)"),nSe=l(),em=a("li"),LV=a("strong"),lSe=o("led"),dSe=o(" \u2014 "),V7=a("a"),iSe=o("LEDConfig"),cSe=o(" (LED model)"),fSe=l(),om=a("li"),BV=a("strong"),mSe=o("longformer"),gSe=o(" \u2014 "),W7=a("a"),hSe=o("LongformerConfig"),uSe=o(" (Longformer model)"),pSe=l(),tm=a("li"),xV=a("strong"),_Se=o("luke"),bSe=o(" \u2014 "),Q7=a("a"),vSe=o("LukeConfig"),TSe=o(" (LUKE model)"),FSe=l(),rm=a("li"),kV=a("strong"),CSe=o("lxmert"),MSe=o(" \u2014 "),H7=a("a"),ESe=o("LxmertConfig"),ySe=o(" (LXMERT model)"),wSe=l(),am=a("li"),RV=a("strong"),ASe=o("m2m_100"),LSe=o(" \u2014 "),U7=a("a"),BSe=o("M2M100Config"),xSe=o(" (M2M100 model)"),kSe=l(),sm=a("li"),SV=a("strong"),RSe=o("marian"),SSe=o(" \u2014 "),J7=a("a"),PSe=o("MarianConfig"),$Se=o(" (Marian model)"),ISe=l(),nm=a("li"),PV=a("strong"),jSe=o("mbart"),NSe=o(" \u2014 "),Y7=a("a"),DSe=o("MBartConfig"),qSe=o(" (mBART model)"),GSe=l(),lm=a("li"),$V=a("strong"),OSe=o("megatron-bert"),XSe=o(" \u2014 "),K7=a("a"),zSe=o("MegatronBertConfig"),VSe=o(" (MegatronBert model)"),WSe=l(),dm=a("li"),IV=a("strong"),QSe=o("mobilebert"),HSe=o(" \u2014 "),Z7=a("a"),USe=o("MobileBertConfig"),JSe=o(" (MobileBERT model)"),YSe=l(),im=a("li"),jV=a("strong"),KSe=o("mpnet"),ZSe=o(" \u2014 "),e8=a("a"),ePe=o("MPNetConfig"),oPe=o(" (MPNet model)"),tPe=l(),cm=a("li"),NV=a("strong"),rPe=o("mt5"),aPe=o(" \u2014 "),o8=a("a"),sPe=o("MT5Config"),nPe=o(" (mT5 model)"),lPe=l(),fm=a("li"),DV=a("strong"),dPe=o("nystromformer"),iPe=o(" \u2014 "),t8=a("a"),cPe=o("NystromformerConfig"),fPe=o(" (Nystromformer model)"),mPe=l(),mm=a("li"),qV=a("strong"),gPe=o("openai-gpt"),hPe=o(" \u2014 "),r8=a("a"),uPe=o("OpenAIGPTConfig"),pPe=o(" (OpenAI GPT model)"),_Pe=l(),gm=a("li"),GV=a("strong"),bPe=o("pegasus"),vPe=o(" \u2014 "),a8=a("a"),TPe=o("PegasusConfig"),FPe=o(" (Pegasus model)"),CPe=l(),hm=a("li"),OV=a("strong"),MPe=o("perceiver"),EPe=o(" \u2014 "),s8=a("a"),yPe=o("PerceiverConfig"),wPe=o(" (Perceiver model)"),APe=l(),um=a("li"),XV=a("strong"),LPe=o("prophetnet"),BPe=o(" \u2014 "),n8=a("a"),xPe=o("ProphetNetConfig"),kPe=o(" (ProphetNet model)"),RPe=l(),pm=a("li"),zV=a("strong"),SPe=o("qdqbert"),PPe=o(" \u2014 "),l8=a("a"),$Pe=o("QDQBertConfig"),IPe=o(" (QDQBert model)"),jPe=l(),_m=a("li"),VV=a("strong"),NPe=o("rag"),DPe=o(" \u2014 "),d8=a("a"),qPe=o("RagConfig"),GPe=o(" (RAG model)"),OPe=l(),bm=a("li"),WV=a("strong"),XPe=o("realm"),zPe=o(" \u2014 "),i8=a("a"),VPe=o("RealmConfig"),WPe=o(" (Realm model)"),QPe=l(),vm=a("li"),QV=a("strong"),HPe=o("reformer"),UPe=o(" \u2014 "),c8=a("a"),JPe=o("ReformerConfig"),YPe=o(" (Reformer model)"),KPe=l(),Tm=a("li"),HV=a("strong"),ZPe=o("rembert"),e$e=o(" \u2014 "),f8=a("a"),o$e=o("RemBertConfig"),t$e=o(" (RemBERT model)"),r$e=l(),Fm=a("li"),UV=a("strong"),a$e=o("retribert"),s$e=o(" \u2014 "),m8=a("a"),n$e=o("RetriBertConfig"),l$e=o(" (RetriBERT model)"),d$e=l(),Cm=a("li"),JV=a("strong"),i$e=o("roberta"),c$e=o(" \u2014 "),g8=a("a"),f$e=o("RobertaConfig"),m$e=o(" (RoBERTa model)"),g$e=l(),Mm=a("li"),YV=a("strong"),h$e=o("roformer"),u$e=o(" \u2014 "),h8=a("a"),p$e=o("RoFormerConfig"),_$e=o(" (RoFormer model)"),b$e=l(),Em=a("li"),KV=a("strong"),v$e=o("segformer"),T$e=o(" \u2014 "),u8=a("a"),F$e=o("SegformerConfig"),C$e=o(" (SegFormer model)"),M$e=l(),ym=a("li"),ZV=a("strong"),E$e=o("sew"),y$e=o(" \u2014 "),p8=a("a"),w$e=o("SEWConfig"),A$e=o(" (SEW model)"),L$e=l(),wm=a("li"),eW=a("strong"),B$e=o("sew-d"),x$e=o(" \u2014 "),_8=a("a"),k$e=o("SEWDConfig"),R$e=o(" (SEW-D model)"),S$e=l(),Am=a("li"),oW=a("strong"),P$e=o("speech-encoder-decoder"),$$e=o(" \u2014 "),b8=a("a"),I$e=o("SpeechEncoderDecoderConfig"),j$e=o(" (Speech Encoder decoder model)"),N$e=l(),Lm=a("li"),tW=a("strong"),D$e=o("speech_to_text"),q$e=o(" \u2014 "),v8=a("a"),G$e=o("Speech2TextConfig"),O$e=o(" (Speech2Text model)"),X$e=l(),Bm=a("li"),rW=a("strong"),z$e=o("speech_to_text_2"),V$e=o(" \u2014 "),T8=a("a"),W$e=o("Speech2Text2Config"),Q$e=o(" (Speech2Text2 model)"),H$e=l(),xm=a("li"),aW=a("strong"),U$e=o("splinter"),J$e=o(" \u2014 "),F8=a("a"),Y$e=o("SplinterConfig"),K$e=o(" (Splinter model)"),Z$e=l(),km=a("li"),sW=a("strong"),eIe=o("squeezebert"),oIe=o(" \u2014 "),C8=a("a"),tIe=o("SqueezeBertConfig"),rIe=o(" (SqueezeBERT model)"),aIe=l(),Rm=a("li"),nW=a("strong"),sIe=o("swin"),nIe=o(" \u2014 "),M8=a("a"),lIe=o("SwinConfig"),dIe=o(" (Swin model)"),iIe=l(),Sm=a("li"),lW=a("strong"),cIe=o("t5"),fIe=o(" \u2014 "),E8=a("a"),mIe=o("T5Config"),gIe=o(" (T5 model)"),hIe=l(),Pm=a("li"),dW=a("strong"),uIe=o("tapas"),pIe=o(" \u2014 "),y8=a("a"),_Ie=o("TapasConfig"),bIe=o(" (TAPAS model)"),vIe=l(),$m=a("li"),iW=a("strong"),TIe=o("transfo-xl"),FIe=o(" \u2014 "),w8=a("a"),CIe=o("TransfoXLConfig"),MIe=o(" (Transformer-XL model)"),EIe=l(),Im=a("li"),cW=a("strong"),yIe=o("trocr"),wIe=o(" \u2014 "),A8=a("a"),AIe=o("TrOCRConfig"),LIe=o(" (TrOCR model)"),BIe=l(),jm=a("li"),fW=a("strong"),xIe=o("unispeech"),kIe=o(" \u2014 "),L8=a("a"),RIe=o("UniSpeechConfig"),SIe=o(" (UniSpeech model)"),PIe=l(),Nm=a("li"),mW=a("strong"),$Ie=o("unispeech-sat"),IIe=o(" \u2014 "),B8=a("a"),jIe=o("UniSpeechSatConfig"),NIe=o(" (UniSpeechSat model)"),DIe=l(),Dm=a("li"),gW=a("strong"),qIe=o("vilt"),GIe=o(" \u2014 "),x8=a("a"),OIe=o("ViltConfig"),XIe=o(" (ViLT model)"),zIe=l(),qm=a("li"),hW=a("strong"),VIe=o("vision-encoder-decoder"),WIe=o(" \u2014 "),k8=a("a"),QIe=o("VisionEncoderDecoderConfig"),HIe=o(" (Vision Encoder decoder model)"),UIe=l(),Gm=a("li"),uW=a("strong"),JIe=o("vision-text-dual-encoder"),YIe=o(" \u2014 "),R8=a("a"),KIe=o("VisionTextDualEncoderConfig"),ZIe=o(" (VisionTextDualEncoder model)"),eje=l(),Om=a("li"),pW=a("strong"),oje=o("visual_bert"),tje=o(" \u2014 "),S8=a("a"),rje=o("VisualBertConfig"),aje=o(" (VisualBert model)"),sje=l(),Xm=a("li"),_W=a("strong"),nje=o("vit"),lje=o(" \u2014 "),P8=a("a"),dje=o("ViTConfig"),ije=o(" (ViT model)"),cje=l(),zm=a("li"),bW=a("strong"),fje=o("vit_mae"),mje=o(" \u2014 "),$8=a("a"),gje=o("ViTMAEConfig"),hje=o(" (ViTMAE model)"),uje=l(),Vm=a("li"),vW=a("strong"),pje=o("wav2vec2"),_je=o(" \u2014 "),I8=a("a"),bje=o("Wav2Vec2Config"),vje=o(" (Wav2Vec2 model)"),Tje=l(),Wm=a("li"),TW=a("strong"),Fje=o("wavlm"),Cje=o(" \u2014 "),j8=a("a"),Mje=o("WavLMConfig"),Eje=o(" (WavLM model)"),yje=l(),Qm=a("li"),FW=a("strong"),wje=o("xglm"),Aje=o(" \u2014 "),N8=a("a"),Lje=o("XGLMConfig"),Bje=o(" (XGLM model)"),xje=l(),Hm=a("li"),CW=a("strong"),kje=o("xlm"),Rje=o(" \u2014 "),D8=a("a"),Sje=o("XLMConfig"),Pje=o(" (XLM model)"),$je=l(),Um=a("li"),MW=a("strong"),Ije=o("xlm-prophetnet"),jje=o(" \u2014 "),q8=a("a"),Nje=o("XLMProphetNetConfig"),Dje=o(" (XLMProphetNet model)"),qje=l(),Jm=a("li"),EW=a("strong"),Gje=o("xlm-roberta"),Oje=o(" \u2014 "),G8=a("a"),Xje=o("XLMRobertaConfig"),zje=o(" (XLM-RoBERTa model)"),Vje=l(),Ym=a("li"),yW=a("strong"),Wje=o("xlm-roberta-xl"),Qje=o(" \u2014 "),O8=a("a"),Hje=o("XLMRobertaXLConfig"),Uje=o(" (XLM-RoBERTa-XL model)"),Jje=l(),Km=a("li"),wW=a("strong"),Yje=o("xlnet"),Kje=o(" \u2014 "),X8=a("a"),Zje=o("XLNetConfig"),eNe=o(" (XLNet model)"),oNe=l(),Zm=a("li"),AW=a("strong"),tNe=o("yoso"),rNe=o(" \u2014 "),z8=a("a"),aNe=o("YosoConfig"),sNe=o(" (YOSO model)"),nNe=l(),LW=a("p"),lNe=o("Examples:"),dNe=l(),f(N3.$$.fragment),iNe=l(),eg=a("div"),f(D3.$$.fragment),cNe=l(),BW=a("p"),fNe=o("Register a new configuration for this class."),CLe=l(),Ld=a("h2"),og=a("a"),xW=a("span"),f(q3.$$.fragment),mNe=l(),kW=a("span"),gNe=o("AutoTokenizer"),MLe=l(),Go=a("div"),f(G3.$$.fragment),hNe=l(),O3=a("p"),uNe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),V8=a("a"),pNe=o("AutoTokenizer.from_pretrained()"),_Ne=o(" class method."),bNe=l(),X3=a("p"),vNe=o("This class cannot be instantiated directly using "),RW=a("code"),TNe=o("__init__()"),FNe=o(" (throws an error)."),CNe=l(),co=a("div"),f(z3.$$.fragment),MNe=l(),SW=a("p"),ENe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),yNe=l(),Sa=a("p"),wNe=o("The tokenizer class to instantiate is selected based on the "),PW=a("code"),ANe=o("model_type"),LNe=o(` property of the config object (either
passed as an argument or loaded from `),$W=a("code"),BNe=o("pretrained_model_name_or_path"),xNe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IW=a("code"),kNe=o("pretrained_model_name_or_path"),RNe=o(":"),SNe=l(),M=a("ul"),Ss=a("li"),jW=a("strong"),PNe=o("albert"),$Ne=o(" \u2014 "),W8=a("a"),INe=o("AlbertTokenizer"),jNe=o(" or "),Q8=a("a"),NNe=o("AlbertTokenizerFast"),DNe=o(" (ALBERT model)"),qNe=l(),Ps=a("li"),NW=a("strong"),GNe=o("bart"),ONe=o(" \u2014 "),H8=a("a"),XNe=o("BartTokenizer"),zNe=o(" or "),U8=a("a"),VNe=o("BartTokenizerFast"),WNe=o(" (BART model)"),QNe=l(),$s=a("li"),DW=a("strong"),HNe=o("barthez"),UNe=o(" \u2014 "),J8=a("a"),JNe=o("BarthezTokenizer"),YNe=o(" or "),Y8=a("a"),KNe=o("BarthezTokenizerFast"),ZNe=o(" (BARThez model)"),eDe=l(),tg=a("li"),qW=a("strong"),oDe=o("bartpho"),tDe=o(" \u2014 "),K8=a("a"),rDe=o("BartphoTokenizer"),aDe=o(" (BARTpho model)"),sDe=l(),Is=a("li"),GW=a("strong"),nDe=o("bert"),lDe=o(" \u2014 "),Z8=a("a"),dDe=o("BertTokenizer"),iDe=o(" or "),e9=a("a"),cDe=o("BertTokenizerFast"),fDe=o(" (BERT model)"),mDe=l(),rg=a("li"),OW=a("strong"),gDe=o("bert-generation"),hDe=o(" \u2014 "),o9=a("a"),uDe=o("BertGenerationTokenizer"),pDe=o(" (Bert Generation model)"),_De=l(),ag=a("li"),XW=a("strong"),bDe=o("bert-japanese"),vDe=o(" \u2014 "),t9=a("a"),TDe=o("BertJapaneseTokenizer"),FDe=o(" (BertJapanese model)"),CDe=l(),sg=a("li"),zW=a("strong"),MDe=o("bertweet"),EDe=o(" \u2014 "),r9=a("a"),yDe=o("BertweetTokenizer"),wDe=o(" (Bertweet model)"),ADe=l(),js=a("li"),VW=a("strong"),LDe=o("big_bird"),BDe=o(" \u2014 "),a9=a("a"),xDe=o("BigBirdTokenizer"),kDe=o(" or "),s9=a("a"),RDe=o("BigBirdTokenizerFast"),SDe=o(" (BigBird model)"),PDe=l(),Ns=a("li"),WW=a("strong"),$De=o("bigbird_pegasus"),IDe=o(" \u2014 "),n9=a("a"),jDe=o("PegasusTokenizer"),NDe=o(" or "),l9=a("a"),DDe=o("PegasusTokenizerFast"),qDe=o(" (BigBirdPegasus model)"),GDe=l(),Ds=a("li"),QW=a("strong"),ODe=o("blenderbot"),XDe=o(" \u2014 "),d9=a("a"),zDe=o("BlenderbotTokenizer"),VDe=o(" or "),i9=a("a"),WDe=o("BlenderbotTokenizerFast"),QDe=o(" (Blenderbot model)"),HDe=l(),ng=a("li"),HW=a("strong"),UDe=o("blenderbot-small"),JDe=o(" \u2014 "),c9=a("a"),YDe=o("BlenderbotSmallTokenizer"),KDe=o(" (BlenderbotSmall model)"),ZDe=l(),lg=a("li"),UW=a("strong"),eqe=o("byt5"),oqe=o(" \u2014 "),f9=a("a"),tqe=o("ByT5Tokenizer"),rqe=o(" (ByT5 model)"),aqe=l(),qs=a("li"),JW=a("strong"),sqe=o("camembert"),nqe=o(" \u2014 "),m9=a("a"),lqe=o("CamembertTokenizer"),dqe=o(" or "),g9=a("a"),iqe=o("CamembertTokenizerFast"),cqe=o(" (CamemBERT model)"),fqe=l(),dg=a("li"),YW=a("strong"),mqe=o("canine"),gqe=o(" \u2014 "),h9=a("a"),hqe=o("CanineTokenizer"),uqe=o(" (Canine model)"),pqe=l(),Gs=a("li"),KW=a("strong"),_qe=o("clip"),bqe=o(" \u2014 "),u9=a("a"),vqe=o("CLIPTokenizer"),Tqe=o(" or "),p9=a("a"),Fqe=o("CLIPTokenizerFast"),Cqe=o(" (CLIP model)"),Mqe=l(),Os=a("li"),ZW=a("strong"),Eqe=o("convbert"),yqe=o(" \u2014 "),_9=a("a"),wqe=o("ConvBertTokenizer"),Aqe=o(" or "),b9=a("a"),Lqe=o("ConvBertTokenizerFast"),Bqe=o(" (ConvBERT model)"),xqe=l(),Xs=a("li"),eQ=a("strong"),kqe=o("cpm"),Rqe=o(" \u2014 "),v9=a("a"),Sqe=o("CpmTokenizer"),Pqe=o(" or "),oQ=a("code"),$qe=o("CpmTokenizerFast"),Iqe=o(" (CPM model)"),jqe=l(),ig=a("li"),tQ=a("strong"),Nqe=o("ctrl"),Dqe=o(" \u2014 "),T9=a("a"),qqe=o("CTRLTokenizer"),Gqe=o(" (CTRL model)"),Oqe=l(),zs=a("li"),rQ=a("strong"),Xqe=o("deberta"),zqe=o(" \u2014 "),F9=a("a"),Vqe=o("DebertaTokenizer"),Wqe=o(" or "),C9=a("a"),Qqe=o("DebertaTokenizerFast"),Hqe=o(" (DeBERTa model)"),Uqe=l(),cg=a("li"),aQ=a("strong"),Jqe=o("deberta-v2"),Yqe=o(" \u2014 "),M9=a("a"),Kqe=o("DebertaV2Tokenizer"),Zqe=o(" (DeBERTa-v2 model)"),eGe=l(),Vs=a("li"),sQ=a("strong"),oGe=o("distilbert"),tGe=o(" \u2014 "),E9=a("a"),rGe=o("DistilBertTokenizer"),aGe=o(" or "),y9=a("a"),sGe=o("DistilBertTokenizerFast"),nGe=o(" (DistilBERT model)"),lGe=l(),Ws=a("li"),nQ=a("strong"),dGe=o("dpr"),iGe=o(" \u2014 "),w9=a("a"),cGe=o("DPRQuestionEncoderTokenizer"),fGe=o(" or "),A9=a("a"),mGe=o("DPRQuestionEncoderTokenizerFast"),gGe=o(" (DPR model)"),hGe=l(),Qs=a("li"),lQ=a("strong"),uGe=o("electra"),pGe=o(" \u2014 "),L9=a("a"),_Ge=o("ElectraTokenizer"),bGe=o(" or "),B9=a("a"),vGe=o("ElectraTokenizerFast"),TGe=o(" (ELECTRA model)"),FGe=l(),fg=a("li"),dQ=a("strong"),CGe=o("flaubert"),MGe=o(" \u2014 "),x9=a("a"),EGe=o("FlaubertTokenizer"),yGe=o(" (FlauBERT model)"),wGe=l(),Hs=a("li"),iQ=a("strong"),AGe=o("fnet"),LGe=o(" \u2014 "),k9=a("a"),BGe=o("FNetTokenizer"),xGe=o(" or "),R9=a("a"),kGe=o("FNetTokenizerFast"),RGe=o(" (FNet model)"),SGe=l(),mg=a("li"),cQ=a("strong"),PGe=o("fsmt"),$Ge=o(" \u2014 "),S9=a("a"),IGe=o("FSMTTokenizer"),jGe=o(" (FairSeq Machine-Translation model)"),NGe=l(),Us=a("li"),fQ=a("strong"),DGe=o("funnel"),qGe=o(" \u2014 "),P9=a("a"),GGe=o("FunnelTokenizer"),OGe=o(" or "),$9=a("a"),XGe=o("FunnelTokenizerFast"),zGe=o(" (Funnel Transformer model)"),VGe=l(),Js=a("li"),mQ=a("strong"),WGe=o("gpt2"),QGe=o(" \u2014 "),I9=a("a"),HGe=o("GPT2Tokenizer"),UGe=o(" or "),j9=a("a"),JGe=o("GPT2TokenizerFast"),YGe=o(" (OpenAI GPT-2 model)"),KGe=l(),Ys=a("li"),gQ=a("strong"),ZGe=o("gpt_neo"),eOe=o(" \u2014 "),N9=a("a"),oOe=o("GPT2Tokenizer"),tOe=o(" or "),D9=a("a"),rOe=o("GPT2TokenizerFast"),aOe=o(" (GPT Neo model)"),sOe=l(),Ks=a("li"),hQ=a("strong"),nOe=o("herbert"),lOe=o(" \u2014 "),q9=a("a"),dOe=o("HerbertTokenizer"),iOe=o(" or "),G9=a("a"),cOe=o("HerbertTokenizerFast"),fOe=o(" (HerBERT model)"),mOe=l(),gg=a("li"),uQ=a("strong"),gOe=o("hubert"),hOe=o(" \u2014 "),O9=a("a"),uOe=o("Wav2Vec2CTCTokenizer"),pOe=o(" (Hubert model)"),_Oe=l(),Zs=a("li"),pQ=a("strong"),bOe=o("ibert"),vOe=o(" \u2014 "),X9=a("a"),TOe=o("RobertaTokenizer"),FOe=o(" or "),z9=a("a"),COe=o("RobertaTokenizerFast"),MOe=o(" (I-BERT model)"),EOe=l(),en=a("li"),_Q=a("strong"),yOe=o("layoutlm"),wOe=o(" \u2014 "),V9=a("a"),AOe=o("LayoutLMTokenizer"),LOe=o(" or "),W9=a("a"),BOe=o("LayoutLMTokenizerFast"),xOe=o(" (LayoutLM model)"),kOe=l(),on=a("li"),bQ=a("strong"),ROe=o("layoutlmv2"),SOe=o(" \u2014 "),Q9=a("a"),POe=o("LayoutLMv2Tokenizer"),$Oe=o(" or "),H9=a("a"),IOe=o("LayoutLMv2TokenizerFast"),jOe=o(" (LayoutLMv2 model)"),NOe=l(),tn=a("li"),vQ=a("strong"),DOe=o("layoutxlm"),qOe=o(" \u2014 "),U9=a("a"),GOe=o("LayoutXLMTokenizer"),OOe=o(" or "),J9=a("a"),XOe=o("LayoutXLMTokenizerFast"),zOe=o(" (LayoutXLM model)"),VOe=l(),rn=a("li"),TQ=a("strong"),WOe=o("led"),QOe=o(" \u2014 "),Y9=a("a"),HOe=o("LEDTokenizer"),UOe=o(" or "),K9=a("a"),JOe=o("LEDTokenizerFast"),YOe=o(" (LED model)"),KOe=l(),an=a("li"),FQ=a("strong"),ZOe=o("longformer"),eXe=o(" \u2014 "),Z9=a("a"),oXe=o("LongformerTokenizer"),tXe=o(" or "),eB=a("a"),rXe=o("LongformerTokenizerFast"),aXe=o(" (Longformer model)"),sXe=l(),hg=a("li"),CQ=a("strong"),nXe=o("luke"),lXe=o(" \u2014 "),oB=a("a"),dXe=o("LukeTokenizer"),iXe=o(" (LUKE model)"),cXe=l(),sn=a("li"),MQ=a("strong"),fXe=o("lxmert"),mXe=o(" \u2014 "),tB=a("a"),gXe=o("LxmertTokenizer"),hXe=o(" or "),rB=a("a"),uXe=o("LxmertTokenizerFast"),pXe=o(" (LXMERT model)"),_Xe=l(),ug=a("li"),EQ=a("strong"),bXe=o("m2m_100"),vXe=o(" \u2014 "),aB=a("a"),TXe=o("M2M100Tokenizer"),FXe=o(" (M2M100 model)"),CXe=l(),pg=a("li"),yQ=a("strong"),MXe=o("marian"),EXe=o(" \u2014 "),sB=a("a"),yXe=o("MarianTokenizer"),wXe=o(" (Marian model)"),AXe=l(),nn=a("li"),wQ=a("strong"),LXe=o("mbart"),BXe=o(" \u2014 "),nB=a("a"),xXe=o("MBartTokenizer"),kXe=o(" or "),lB=a("a"),RXe=o("MBartTokenizerFast"),SXe=o(" (mBART model)"),PXe=l(),ln=a("li"),AQ=a("strong"),$Xe=o("mbart50"),IXe=o(" \u2014 "),dB=a("a"),jXe=o("MBart50Tokenizer"),NXe=o(" or "),iB=a("a"),DXe=o("MBart50TokenizerFast"),qXe=o(" (mBART-50 model)"),GXe=l(),_g=a("li"),LQ=a("strong"),OXe=o("mluke"),XXe=o(" \u2014 "),cB=a("a"),zXe=o("MLukeTokenizer"),VXe=o(" (mLUKE model)"),WXe=l(),dn=a("li"),BQ=a("strong"),QXe=o("mobilebert"),HXe=o(" \u2014 "),fB=a("a"),UXe=o("MobileBertTokenizer"),JXe=o(" or "),mB=a("a"),YXe=o("MobileBertTokenizerFast"),KXe=o(" (MobileBERT model)"),ZXe=l(),cn=a("li"),xQ=a("strong"),eze=o("mpnet"),oze=o(" \u2014 "),gB=a("a"),tze=o("MPNetTokenizer"),rze=o(" or "),hB=a("a"),aze=o("MPNetTokenizerFast"),sze=o(" (MPNet model)"),nze=l(),fn=a("li"),kQ=a("strong"),lze=o("mt5"),dze=o(" \u2014 "),uB=a("a"),ize=o("MT5Tokenizer"),cze=o(" or "),pB=a("a"),fze=o("MT5TokenizerFast"),mze=o(" (mT5 model)"),gze=l(),mn=a("li"),RQ=a("strong"),hze=o("openai-gpt"),uze=o(" \u2014 "),_B=a("a"),pze=o("OpenAIGPTTokenizer"),_ze=o(" or "),bB=a("a"),bze=o("OpenAIGPTTokenizerFast"),vze=o(" (OpenAI GPT model)"),Tze=l(),gn=a("li"),SQ=a("strong"),Fze=o("pegasus"),Cze=o(" \u2014 "),vB=a("a"),Mze=o("PegasusTokenizer"),Eze=o(" or "),TB=a("a"),yze=o("PegasusTokenizerFast"),wze=o(" (Pegasus model)"),Aze=l(),bg=a("li"),PQ=a("strong"),Lze=o("perceiver"),Bze=o(" \u2014 "),FB=a("a"),xze=o("PerceiverTokenizer"),kze=o(" (Perceiver model)"),Rze=l(),vg=a("li"),$Q=a("strong"),Sze=o("phobert"),Pze=o(" \u2014 "),CB=a("a"),$ze=o("PhobertTokenizer"),Ize=o(" (PhoBERT model)"),jze=l(),Tg=a("li"),IQ=a("strong"),Nze=o("prophetnet"),Dze=o(" \u2014 "),MB=a("a"),qze=o("ProphetNetTokenizer"),Gze=o(" (ProphetNet model)"),Oze=l(),hn=a("li"),jQ=a("strong"),Xze=o("qdqbert"),zze=o(" \u2014 "),EB=a("a"),Vze=o("BertTokenizer"),Wze=o(" or "),yB=a("a"),Qze=o("BertTokenizerFast"),Hze=o(" (QDQBert model)"),Uze=l(),Fg=a("li"),NQ=a("strong"),Jze=o("rag"),Yze=o(" \u2014 "),wB=a("a"),Kze=o("RagTokenizer"),Zze=o(" (RAG model)"),eVe=l(),un=a("li"),DQ=a("strong"),oVe=o("reformer"),tVe=o(" \u2014 "),AB=a("a"),rVe=o("ReformerTokenizer"),aVe=o(" or "),LB=a("a"),sVe=o("ReformerTokenizerFast"),nVe=o(" (Reformer model)"),lVe=l(),pn=a("li"),qQ=a("strong"),dVe=o("rembert"),iVe=o(" \u2014 "),BB=a("a"),cVe=o("RemBertTokenizer"),fVe=o(" or "),xB=a("a"),mVe=o("RemBertTokenizerFast"),gVe=o(" (RemBERT model)"),hVe=l(),_n=a("li"),GQ=a("strong"),uVe=o("retribert"),pVe=o(" \u2014 "),kB=a("a"),_Ve=o("RetriBertTokenizer"),bVe=o(" or "),RB=a("a"),vVe=o("RetriBertTokenizerFast"),TVe=o(" (RetriBERT model)"),FVe=l(),bn=a("li"),OQ=a("strong"),CVe=o("roberta"),MVe=o(" \u2014 "),SB=a("a"),EVe=o("RobertaTokenizer"),yVe=o(" or "),PB=a("a"),wVe=o("RobertaTokenizerFast"),AVe=o(" (RoBERTa model)"),LVe=l(),vn=a("li"),XQ=a("strong"),BVe=o("roformer"),xVe=o(" \u2014 "),$B=a("a"),kVe=o("RoFormerTokenizer"),RVe=o(" or "),IB=a("a"),SVe=o("RoFormerTokenizerFast"),PVe=o(" (RoFormer model)"),$Ve=l(),Cg=a("li"),zQ=a("strong"),IVe=o("speech_to_text"),jVe=o(" \u2014 "),jB=a("a"),NVe=o("Speech2TextTokenizer"),DVe=o(" (Speech2Text model)"),qVe=l(),Mg=a("li"),VQ=a("strong"),GVe=o("speech_to_text_2"),OVe=o(" \u2014 "),NB=a("a"),XVe=o("Speech2Text2Tokenizer"),zVe=o(" (Speech2Text2 model)"),VVe=l(),Tn=a("li"),WQ=a("strong"),WVe=o("splinter"),QVe=o(" \u2014 "),DB=a("a"),HVe=o("SplinterTokenizer"),UVe=o(" or "),qB=a("a"),JVe=o("SplinterTokenizerFast"),YVe=o(" (Splinter model)"),KVe=l(),Fn=a("li"),QQ=a("strong"),ZVe=o("squeezebert"),eWe=o(" \u2014 "),GB=a("a"),oWe=o("SqueezeBertTokenizer"),tWe=o(" or "),OB=a("a"),rWe=o("SqueezeBertTokenizerFast"),aWe=o(" (SqueezeBERT model)"),sWe=l(),Cn=a("li"),HQ=a("strong"),nWe=o("t5"),lWe=o(" \u2014 "),XB=a("a"),dWe=o("T5Tokenizer"),iWe=o(" or "),zB=a("a"),cWe=o("T5TokenizerFast"),fWe=o(" (T5 model)"),mWe=l(),Eg=a("li"),UQ=a("strong"),gWe=o("tapas"),hWe=o(" \u2014 "),VB=a("a"),uWe=o("TapasTokenizer"),pWe=o(" (TAPAS model)"),_We=l(),yg=a("li"),JQ=a("strong"),bWe=o("transfo-xl"),vWe=o(" \u2014 "),WB=a("a"),TWe=o("TransfoXLTokenizer"),FWe=o(" (Transformer-XL model)"),CWe=l(),wg=a("li"),YQ=a("strong"),MWe=o("wav2vec2"),EWe=o(" \u2014 "),QB=a("a"),yWe=o("Wav2Vec2CTCTokenizer"),wWe=o(" (Wav2Vec2 model)"),AWe=l(),Ag=a("li"),KQ=a("strong"),LWe=o("wav2vec2_phoneme"),BWe=o(" \u2014 "),HB=a("a"),xWe=o("Wav2Vec2PhonemeCTCTokenizer"),kWe=o(" (Wav2Vec2Phoneme model)"),RWe=l(),Mn=a("li"),ZQ=a("strong"),SWe=o("xglm"),PWe=o(" \u2014 "),UB=a("a"),$We=o("XGLMTokenizer"),IWe=o(" or "),JB=a("a"),jWe=o("XGLMTokenizerFast"),NWe=o(" (XGLM model)"),DWe=l(),Lg=a("li"),eH=a("strong"),qWe=o("xlm"),GWe=o(" \u2014 "),YB=a("a"),OWe=o("XLMTokenizer"),XWe=o(" (XLM model)"),zWe=l(),Bg=a("li"),oH=a("strong"),VWe=o("xlm-prophetnet"),WWe=o(" \u2014 "),KB=a("a"),QWe=o("XLMProphetNetTokenizer"),HWe=o(" (XLMProphetNet model)"),UWe=l(),En=a("li"),tH=a("strong"),JWe=o("xlm-roberta"),YWe=o(" \u2014 "),ZB=a("a"),KWe=o("XLMRobertaTokenizer"),ZWe=o(" or "),ex=a("a"),eQe=o("XLMRobertaTokenizerFast"),oQe=o(" (XLM-RoBERTa model)"),tQe=l(),yn=a("li"),rH=a("strong"),rQe=o("xlnet"),aQe=o(" \u2014 "),ox=a("a"),sQe=o("XLNetTokenizer"),nQe=o(" or "),tx=a("a"),lQe=o("XLNetTokenizerFast"),dQe=o(" (XLNet model)"),iQe=l(),aH=a("p"),cQe=o("Examples:"),fQe=l(),f(V3.$$.fragment),mQe=l(),xg=a("div"),f(W3.$$.fragment),gQe=l(),sH=a("p"),hQe=o("Register a new tokenizer in this mapping."),ELe=l(),Bd=a("h2"),kg=a("a"),nH=a("span"),f(Q3.$$.fragment),uQe=l(),lH=a("span"),pQe=o("AutoFeatureExtractor"),yLe=l(),Oo=a("div"),f(H3.$$.fragment),_Qe=l(),U3=a("p"),bQe=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),rx=a("a"),vQe=o("AutoFeatureExtractor.from_pretrained()"),TQe=o(" class method."),FQe=l(),J3=a("p"),CQe=o("This class cannot be instantiated directly using "),dH=a("code"),MQe=o("__init__()"),EQe=o(" (throws an error)."),yQe=l(),Le=a("div"),f(Y3.$$.fragment),wQe=l(),iH=a("p"),AQe=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),LQe=l(),Pa=a("p"),BQe=o("The feature extractor class to instantiate is selected based on the "),cH=a("code"),xQe=o("model_type"),kQe=o(` property of the config object
(either passed as an argument or loaded from `),fH=a("code"),RQe=o("pretrained_model_name_or_path"),SQe=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),mH=a("code"),PQe=o("pretrained_model_name_or_path"),$Qe=o(":"),IQe=l(),ne=a("ul"),Rg=a("li"),gH=a("strong"),jQe=o("beit"),NQe=o(" \u2014 "),ax=a("a"),DQe=o("BeitFeatureExtractor"),qQe=o(" (BEiT model)"),GQe=l(),Sg=a("li"),hH=a("strong"),OQe=o("clip"),XQe=o(" \u2014 "),sx=a("a"),zQe=o("CLIPFeatureExtractor"),VQe=o(" (CLIP model)"),WQe=l(),Pg=a("li"),uH=a("strong"),QQe=o("convnext"),HQe=o(" \u2014 "),nx=a("a"),UQe=o("ConvNextFeatureExtractor"),JQe=o(" (ConvNext model)"),YQe=l(),$g=a("li"),pH=a("strong"),KQe=o("deit"),ZQe=o(" \u2014 "),lx=a("a"),eHe=o("DeiTFeatureExtractor"),oHe=o(" (DeiT model)"),tHe=l(),Ig=a("li"),_H=a("strong"),rHe=o("detr"),aHe=o(" \u2014 "),dx=a("a"),sHe=o("DetrFeatureExtractor"),nHe=o(" (DETR model)"),lHe=l(),jg=a("li"),bH=a("strong"),dHe=o("hubert"),iHe=o(" \u2014 "),ix=a("a"),cHe=o("Wav2Vec2FeatureExtractor"),fHe=o(" (Hubert model)"),mHe=l(),Ng=a("li"),vH=a("strong"),gHe=o("layoutlmv2"),hHe=o(" \u2014 "),cx=a("a"),uHe=o("LayoutLMv2FeatureExtractor"),pHe=o(" (LayoutLMv2 model)"),_He=l(),Dg=a("li"),TH=a("strong"),bHe=o("perceiver"),vHe=o(" \u2014 "),fx=a("a"),THe=o("PerceiverFeatureExtractor"),FHe=o(" (Perceiver model)"),CHe=l(),qg=a("li"),FH=a("strong"),MHe=o("segformer"),EHe=o(" \u2014 "),mx=a("a"),yHe=o("SegformerFeatureExtractor"),wHe=o(" (SegFormer model)"),AHe=l(),Gg=a("li"),CH=a("strong"),LHe=o("speech_to_text"),BHe=o(" \u2014 "),gx=a("a"),xHe=o("Speech2TextFeatureExtractor"),kHe=o(" (Speech2Text model)"),RHe=l(),Og=a("li"),MH=a("strong"),SHe=o("swin"),PHe=o(" \u2014 "),hx=a("a"),$He=o("ViTFeatureExtractor"),IHe=o(" (Swin model)"),jHe=l(),Xg=a("li"),EH=a("strong"),NHe=o("vit"),DHe=o(" \u2014 "),ux=a("a"),qHe=o("ViTFeatureExtractor"),GHe=o(" (ViT model)"),OHe=l(),zg=a("li"),yH=a("strong"),XHe=o("vit_mae"),zHe=o(" \u2014 "),px=a("a"),VHe=o("ViTFeatureExtractor"),WHe=o(" (ViTMAE model)"),QHe=l(),Vg=a("li"),wH=a("strong"),HHe=o("wav2vec2"),UHe=o(" \u2014 "),_x=a("a"),JHe=o("Wav2Vec2FeatureExtractor"),YHe=o(" (Wav2Vec2 model)"),KHe=l(),f(Wg.$$.fragment),ZHe=l(),AH=a("p"),eUe=o("Examples:"),oUe=l(),f(K3.$$.fragment),tUe=l(),Qg=a("div"),f(Z3.$$.fragment),rUe=l(),LH=a("p"),aUe=o("Register a new feature extractor for this class."),wLe=l(),xd=a("h2"),Hg=a("a"),BH=a("span"),f(e5.$$.fragment),sUe=l(),xH=a("span"),nUe=o("AutoProcessor"),ALe=l(),ea=a("div"),f(o5.$$.fragment),lUe=l(),t5=a("p"),dUe=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),bx=a("a"),iUe=o("AutoProcessor.from_pretrained()"),cUe=o(" class method."),fUe=l(),r5=a("p"),mUe=o("This class cannot be instantiated directly using "),kH=a("code"),gUe=o("__init__()"),hUe=o(" (throws an error)."),uUe=l(),Be=a("div"),f(a5.$$.fragment),pUe=l(),RH=a("p"),_Ue=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),bUe=l(),kd=a("p"),vUe=o("The processor class to instantiate is selected based on the "),SH=a("code"),TUe=o("model_type"),FUe=o(` property of the config object (either
passed as an argument or loaded from `),PH=a("code"),CUe=o("pretrained_model_name_or_path"),MUe=o(" if possible):"),EUe=l(),ye=a("ul"),Ug=a("li"),$H=a("strong"),yUe=o("clip"),wUe=o(" \u2014 "),vx=a("a"),AUe=o("CLIPProcessor"),LUe=o(" (CLIP model)"),BUe=l(),Jg=a("li"),IH=a("strong"),xUe=o("layoutlmv2"),kUe=o(" \u2014 "),Tx=a("a"),RUe=o("LayoutLMv2Processor"),SUe=o(" (LayoutLMv2 model)"),PUe=l(),Yg=a("li"),jH=a("strong"),$Ue=o("layoutxlm"),IUe=o(" \u2014 "),Fx=a("a"),jUe=o("LayoutXLMProcessor"),NUe=o(" (LayoutXLM model)"),DUe=l(),Kg=a("li"),NH=a("strong"),qUe=o("speech_to_text"),GUe=o(" \u2014 "),Cx=a("a"),OUe=o("Speech2TextProcessor"),XUe=o(" (Speech2Text model)"),zUe=l(),Zg=a("li"),DH=a("strong"),VUe=o("speech_to_text_2"),WUe=o(" \u2014 "),Mx=a("a"),QUe=o("Speech2Text2Processor"),HUe=o(" (Speech2Text2 model)"),UUe=l(),eh=a("li"),qH=a("strong"),JUe=o("trocr"),YUe=o(" \u2014 "),Ex=a("a"),KUe=o("TrOCRProcessor"),ZUe=o(" (TrOCR model)"),eJe=l(),oh=a("li"),GH=a("strong"),oJe=o("vision-text-dual-encoder"),tJe=o(" \u2014 "),yx=a("a"),rJe=o("VisionTextDualEncoderProcessor"),aJe=o(" (VisionTextDualEncoder model)"),sJe=l(),th=a("li"),OH=a("strong"),nJe=o("wav2vec2"),lJe=o(" \u2014 "),wx=a("a"),dJe=o("Wav2Vec2Processor"),iJe=o(" (Wav2Vec2 model)"),cJe=l(),f(rh.$$.fragment),fJe=l(),XH=a("p"),mJe=o("Examples:"),gJe=l(),f(s5.$$.fragment),LLe=l(),Rd=a("h2"),ah=a("a"),zH=a("span"),f(n5.$$.fragment),hJe=l(),VH=a("span"),uJe=o("AutoModel"),BLe=l(),Xo=a("div"),f(l5.$$.fragment),pJe=l(),Sd=a("p"),_Je=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),WH=a("code"),bJe=o("from_pretrained()"),vJe=o("class method or the "),QH=a("code"),TJe=o("from_config()"),FJe=o(`class
method.`),CJe=l(),d5=a("p"),MJe=o("This class cannot be instantiated directly using "),HH=a("code"),EJe=o("__init__()"),yJe=o(" (throws an error)."),wJe=l(),$t=a("div"),f(i5.$$.fragment),AJe=l(),UH=a("p"),LJe=o("Instantiates one of the base model classes of the library from a configuration."),BJe=l(),Pd=a("p"),xJe=o(`Note:
Loading a model from its configuration file does `),JH=a("strong"),kJe=o("not"),RJe=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=a("code"),SJe=o("from_pretrained()"),PJe=o("to load the model weights."),$Je=l(),KH=a("p"),IJe=o("Examples:"),jJe=l(),f(c5.$$.fragment),NJe=l(),xe=a("div"),f(f5.$$.fragment),DJe=l(),ZH=a("p"),qJe=o("Instantiate one of the base model classes of the library from a pretrained model."),GJe=l(),$a=a("p"),OJe=o("The model class to instantiate is selected based on the "),eU=a("code"),XJe=o("model_type"),zJe=o(` property of the config object (either
passed as an argument or loaded from `),oU=a("code"),VJe=o("pretrained_model_name_or_path"),WJe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tU=a("code"),QJe=o("pretrained_model_name_or_path"),HJe=o(":"),UJe=l(),F=a("ul"),sh=a("li"),rU=a("strong"),JJe=o("albert"),YJe=o(" \u2014 "),Ax=a("a"),KJe=o("AlbertModel"),ZJe=o(" (ALBERT model)"),eYe=l(),nh=a("li"),aU=a("strong"),oYe=o("bart"),tYe=o(" \u2014 "),Lx=a("a"),rYe=o("BartModel"),aYe=o(" (BART model)"),sYe=l(),lh=a("li"),sU=a("strong"),nYe=o("beit"),lYe=o(" \u2014 "),Bx=a("a"),dYe=o("BeitModel"),iYe=o(" (BEiT model)"),cYe=l(),dh=a("li"),nU=a("strong"),fYe=o("bert"),mYe=o(" \u2014 "),xx=a("a"),gYe=o("BertModel"),hYe=o(" (BERT model)"),uYe=l(),ih=a("li"),lU=a("strong"),pYe=o("bert-generation"),_Ye=o(" \u2014 "),kx=a("a"),bYe=o("BertGenerationEncoder"),vYe=o(" (Bert Generation model)"),TYe=l(),ch=a("li"),dU=a("strong"),FYe=o("big_bird"),CYe=o(" \u2014 "),Rx=a("a"),MYe=o("BigBirdModel"),EYe=o(" (BigBird model)"),yYe=l(),fh=a("li"),iU=a("strong"),wYe=o("bigbird_pegasus"),AYe=o(" \u2014 "),Sx=a("a"),LYe=o("BigBirdPegasusModel"),BYe=o(" (BigBirdPegasus model)"),xYe=l(),mh=a("li"),cU=a("strong"),kYe=o("blenderbot"),RYe=o(" \u2014 "),Px=a("a"),SYe=o("BlenderbotModel"),PYe=o(" (Blenderbot model)"),$Ye=l(),gh=a("li"),fU=a("strong"),IYe=o("blenderbot-small"),jYe=o(" \u2014 "),$x=a("a"),NYe=o("BlenderbotSmallModel"),DYe=o(" (BlenderbotSmall model)"),qYe=l(),hh=a("li"),mU=a("strong"),GYe=o("camembert"),OYe=o(" \u2014 "),Ix=a("a"),XYe=o("CamembertModel"),zYe=o(" (CamemBERT model)"),VYe=l(),uh=a("li"),gU=a("strong"),WYe=o("canine"),QYe=o(" \u2014 "),jx=a("a"),HYe=o("CanineModel"),UYe=o(" (Canine model)"),JYe=l(),ph=a("li"),hU=a("strong"),YYe=o("clip"),KYe=o(" \u2014 "),Nx=a("a"),ZYe=o("CLIPModel"),eKe=o(" (CLIP model)"),oKe=l(),_h=a("li"),uU=a("strong"),tKe=o("convbert"),rKe=o(" \u2014 "),Dx=a("a"),aKe=o("ConvBertModel"),sKe=o(" (ConvBERT model)"),nKe=l(),bh=a("li"),pU=a("strong"),lKe=o("convnext"),dKe=o(" \u2014 "),qx=a("a"),iKe=o("ConvNextModel"),cKe=o(" (ConvNext model)"),fKe=l(),vh=a("li"),_U=a("strong"),mKe=o("ctrl"),gKe=o(" \u2014 "),Gx=a("a"),hKe=o("CTRLModel"),uKe=o(" (CTRL model)"),pKe=l(),Th=a("li"),bU=a("strong"),_Ke=o("deberta"),bKe=o(" \u2014 "),Ox=a("a"),vKe=o("DebertaModel"),TKe=o(" (DeBERTa model)"),FKe=l(),Fh=a("li"),vU=a("strong"),CKe=o("deberta-v2"),MKe=o(" \u2014 "),Xx=a("a"),EKe=o("DebertaV2Model"),yKe=o(" (DeBERTa-v2 model)"),wKe=l(),Ch=a("li"),TU=a("strong"),AKe=o("deit"),LKe=o(" \u2014 "),zx=a("a"),BKe=o("DeiTModel"),xKe=o(" (DeiT model)"),kKe=l(),Mh=a("li"),FU=a("strong"),RKe=o("detr"),SKe=o(" \u2014 "),Vx=a("a"),PKe=o("DetrModel"),$Ke=o(" (DETR model)"),IKe=l(),Eh=a("li"),CU=a("strong"),jKe=o("distilbert"),NKe=o(" \u2014 "),Wx=a("a"),DKe=o("DistilBertModel"),qKe=o(" (DistilBERT model)"),GKe=l(),yh=a("li"),MU=a("strong"),OKe=o("dpr"),XKe=o(" \u2014 "),Qx=a("a"),zKe=o("DPRQuestionEncoder"),VKe=o(" (DPR model)"),WKe=l(),wh=a("li"),EU=a("strong"),QKe=o("electra"),HKe=o(" \u2014 "),Hx=a("a"),UKe=o("ElectraModel"),JKe=o(" (ELECTRA model)"),YKe=l(),Ah=a("li"),yU=a("strong"),KKe=o("flaubert"),ZKe=o(" \u2014 "),Ux=a("a"),eZe=o("FlaubertModel"),oZe=o(" (FlauBERT model)"),tZe=l(),Lh=a("li"),wU=a("strong"),rZe=o("fnet"),aZe=o(" \u2014 "),Jx=a("a"),sZe=o("FNetModel"),nZe=o(" (FNet model)"),lZe=l(),Bh=a("li"),AU=a("strong"),dZe=o("fsmt"),iZe=o(" \u2014 "),Yx=a("a"),cZe=o("FSMTModel"),fZe=o(" (FairSeq Machine-Translation model)"),mZe=l(),wn=a("li"),LU=a("strong"),gZe=o("funnel"),hZe=o(" \u2014 "),Kx=a("a"),uZe=o("FunnelModel"),pZe=o(" or "),Zx=a("a"),_Ze=o("FunnelBaseModel"),bZe=o(" (Funnel Transformer model)"),vZe=l(),xh=a("li"),BU=a("strong"),TZe=o("gpt2"),FZe=o(" \u2014 "),ek=a("a"),CZe=o("GPT2Model"),MZe=o(" (OpenAI GPT-2 model)"),EZe=l(),kh=a("li"),xU=a("strong"),yZe=o("gpt_neo"),wZe=o(" \u2014 "),ok=a("a"),AZe=o("GPTNeoModel"),LZe=o(" (GPT Neo model)"),BZe=l(),Rh=a("li"),kU=a("strong"),xZe=o("gptj"),kZe=o(" \u2014 "),tk=a("a"),RZe=o("GPTJModel"),SZe=o(" (GPT-J model)"),PZe=l(),Sh=a("li"),RU=a("strong"),$Ze=o("hubert"),IZe=o(" \u2014 "),rk=a("a"),jZe=o("HubertModel"),NZe=o(" (Hubert model)"),DZe=l(),Ph=a("li"),SU=a("strong"),qZe=o("ibert"),GZe=o(" \u2014 "),ak=a("a"),OZe=o("IBertModel"),XZe=o(" (I-BERT model)"),zZe=l(),$h=a("li"),PU=a("strong"),VZe=o("imagegpt"),WZe=o(" \u2014 "),sk=a("a"),QZe=o("ImageGPTModel"),HZe=o(" (ImageGPT model)"),UZe=l(),Ih=a("li"),$U=a("strong"),JZe=o("layoutlm"),YZe=o(" \u2014 "),nk=a("a"),KZe=o("LayoutLMModel"),ZZe=o(" (LayoutLM model)"),eeo=l(),jh=a("li"),IU=a("strong"),oeo=o("layoutlmv2"),teo=o(" \u2014 "),lk=a("a"),reo=o("LayoutLMv2Model"),aeo=o(" (LayoutLMv2 model)"),seo=l(),Nh=a("li"),jU=a("strong"),neo=o("led"),leo=o(" \u2014 "),dk=a("a"),deo=o("LEDModel"),ieo=o(" (LED model)"),ceo=l(),Dh=a("li"),NU=a("strong"),feo=o("longformer"),meo=o(" \u2014 "),ik=a("a"),geo=o("LongformerModel"),heo=o(" (Longformer model)"),ueo=l(),qh=a("li"),DU=a("strong"),peo=o("luke"),_eo=o(" \u2014 "),ck=a("a"),beo=o("LukeModel"),veo=o(" (LUKE model)"),Teo=l(),Gh=a("li"),qU=a("strong"),Feo=o("lxmert"),Ceo=o(" \u2014 "),fk=a("a"),Meo=o("LxmertModel"),Eeo=o(" (LXMERT model)"),yeo=l(),Oh=a("li"),GU=a("strong"),weo=o("m2m_100"),Aeo=o(" \u2014 "),mk=a("a"),Leo=o("M2M100Model"),Beo=o(" (M2M100 model)"),xeo=l(),Xh=a("li"),OU=a("strong"),keo=o("marian"),Reo=o(" \u2014 "),gk=a("a"),Seo=o("MarianModel"),Peo=o(" (Marian model)"),$eo=l(),zh=a("li"),XU=a("strong"),Ieo=o("mbart"),jeo=o(" \u2014 "),hk=a("a"),Neo=o("MBartModel"),Deo=o(" (mBART model)"),qeo=l(),Vh=a("li"),zU=a("strong"),Geo=o("megatron-bert"),Oeo=o(" \u2014 "),uk=a("a"),Xeo=o("MegatronBertModel"),zeo=o(" (MegatronBert model)"),Veo=l(),Wh=a("li"),VU=a("strong"),Weo=o("mobilebert"),Qeo=o(" \u2014 "),pk=a("a"),Heo=o("MobileBertModel"),Ueo=o(" (MobileBERT model)"),Jeo=l(),Qh=a("li"),WU=a("strong"),Yeo=o("mpnet"),Keo=o(" \u2014 "),_k=a("a"),Zeo=o("MPNetModel"),eoo=o(" (MPNet model)"),ooo=l(),Hh=a("li"),QU=a("strong"),too=o("mt5"),roo=o(" \u2014 "),bk=a("a"),aoo=o("MT5Model"),soo=o(" (mT5 model)"),noo=l(),Uh=a("li"),HU=a("strong"),loo=o("nystromformer"),doo=o(" \u2014 "),vk=a("a"),ioo=o("NystromformerModel"),coo=o(" (Nystromformer model)"),foo=l(),Jh=a("li"),UU=a("strong"),moo=o("openai-gpt"),goo=o(" \u2014 "),Tk=a("a"),hoo=o("OpenAIGPTModel"),uoo=o(" (OpenAI GPT model)"),poo=l(),Yh=a("li"),JU=a("strong"),_oo=o("pegasus"),boo=o(" \u2014 "),Fk=a("a"),voo=o("PegasusModel"),Too=o(" (Pegasus model)"),Foo=l(),Kh=a("li"),YU=a("strong"),Coo=o("perceiver"),Moo=o(" \u2014 "),Ck=a("a"),Eoo=o("PerceiverModel"),yoo=o(" (Perceiver model)"),woo=l(),Zh=a("li"),KU=a("strong"),Aoo=o("prophetnet"),Loo=o(" \u2014 "),Mk=a("a"),Boo=o("ProphetNetModel"),xoo=o(" (ProphetNet model)"),koo=l(),eu=a("li"),ZU=a("strong"),Roo=o("qdqbert"),Soo=o(" \u2014 "),Ek=a("a"),Poo=o("QDQBertModel"),$oo=o(" (QDQBert model)"),Ioo=l(),ou=a("li"),eJ=a("strong"),joo=o("reformer"),Noo=o(" \u2014 "),yk=a("a"),Doo=o("ReformerModel"),qoo=o(" (Reformer model)"),Goo=l(),tu=a("li"),oJ=a("strong"),Ooo=o("rembert"),Xoo=o(" \u2014 "),wk=a("a"),zoo=o("RemBertModel"),Voo=o(" (RemBERT model)"),Woo=l(),ru=a("li"),tJ=a("strong"),Qoo=o("retribert"),Hoo=o(" \u2014 "),Ak=a("a"),Uoo=o("RetriBertModel"),Joo=o(" (RetriBERT model)"),Yoo=l(),au=a("li"),rJ=a("strong"),Koo=o("roberta"),Zoo=o(" \u2014 "),Lk=a("a"),eto=o("RobertaModel"),oto=o(" (RoBERTa model)"),tto=l(),su=a("li"),aJ=a("strong"),rto=o("roformer"),ato=o(" \u2014 "),Bk=a("a"),sto=o("RoFormerModel"),nto=o(" (RoFormer model)"),lto=l(),nu=a("li"),sJ=a("strong"),dto=o("segformer"),ito=o(" \u2014 "),xk=a("a"),cto=o("SegformerModel"),fto=o(" (SegFormer model)"),mto=l(),lu=a("li"),nJ=a("strong"),gto=o("sew"),hto=o(" \u2014 "),kk=a("a"),uto=o("SEWModel"),pto=o(" (SEW model)"),_to=l(),du=a("li"),lJ=a("strong"),bto=o("sew-d"),vto=o(" \u2014 "),Rk=a("a"),Tto=o("SEWDModel"),Fto=o(" (SEW-D model)"),Cto=l(),iu=a("li"),dJ=a("strong"),Mto=o("speech_to_text"),Eto=o(" \u2014 "),Sk=a("a"),yto=o("Speech2TextModel"),wto=o(" (Speech2Text model)"),Ato=l(),cu=a("li"),iJ=a("strong"),Lto=o("splinter"),Bto=o(" \u2014 "),Pk=a("a"),xto=o("SplinterModel"),kto=o(" (Splinter model)"),Rto=l(),fu=a("li"),cJ=a("strong"),Sto=o("squeezebert"),Pto=o(" \u2014 "),$k=a("a"),$to=o("SqueezeBertModel"),Ito=o(" (SqueezeBERT model)"),jto=l(),mu=a("li"),fJ=a("strong"),Nto=o("swin"),Dto=o(" \u2014 "),Ik=a("a"),qto=o("SwinModel"),Gto=o(" (Swin model)"),Oto=l(),gu=a("li"),mJ=a("strong"),Xto=o("t5"),zto=o(" \u2014 "),jk=a("a"),Vto=o("T5Model"),Wto=o(" (T5 model)"),Qto=l(),hu=a("li"),gJ=a("strong"),Hto=o("tapas"),Uto=o(" \u2014 "),Nk=a("a"),Jto=o("TapasModel"),Yto=o(" (TAPAS model)"),Kto=l(),uu=a("li"),hJ=a("strong"),Zto=o("transfo-xl"),ero=o(" \u2014 "),Dk=a("a"),oro=o("TransfoXLModel"),tro=o(" (Transformer-XL model)"),rro=l(),pu=a("li"),uJ=a("strong"),aro=o("unispeech"),sro=o(" \u2014 "),qk=a("a"),nro=o("UniSpeechModel"),lro=o(" (UniSpeech model)"),dro=l(),_u=a("li"),pJ=a("strong"),iro=o("unispeech-sat"),cro=o(" \u2014 "),Gk=a("a"),fro=o("UniSpeechSatModel"),mro=o(" (UniSpeechSat model)"),gro=l(),bu=a("li"),_J=a("strong"),hro=o("vilt"),uro=o(" \u2014 "),Ok=a("a"),pro=o("ViltModel"),_ro=o(" (ViLT model)"),bro=l(),vu=a("li"),bJ=a("strong"),vro=o("vision-text-dual-encoder"),Tro=o(" \u2014 "),Xk=a("a"),Fro=o("VisionTextDualEncoderModel"),Cro=o(" (VisionTextDualEncoder model)"),Mro=l(),Tu=a("li"),vJ=a("strong"),Ero=o("visual_bert"),yro=o(" \u2014 "),zk=a("a"),wro=o("VisualBertModel"),Aro=o(" (VisualBert model)"),Lro=l(),Fu=a("li"),TJ=a("strong"),Bro=o("vit"),xro=o(" \u2014 "),Vk=a("a"),kro=o("ViTModel"),Rro=o(" (ViT model)"),Sro=l(),Cu=a("li"),FJ=a("strong"),Pro=o("vit_mae"),$ro=o(" \u2014 "),Wk=a("a"),Iro=o("ViTMAEModel"),jro=o(" (ViTMAE model)"),Nro=l(),Mu=a("li"),CJ=a("strong"),Dro=o("wav2vec2"),qro=o(" \u2014 "),Qk=a("a"),Gro=o("Wav2Vec2Model"),Oro=o(" (Wav2Vec2 model)"),Xro=l(),Eu=a("li"),MJ=a("strong"),zro=o("wavlm"),Vro=o(" \u2014 "),Hk=a("a"),Wro=o("WavLMModel"),Qro=o(" (WavLM model)"),Hro=l(),yu=a("li"),EJ=a("strong"),Uro=o("xglm"),Jro=o(" \u2014 "),Uk=a("a"),Yro=o("XGLMModel"),Kro=o(" (XGLM model)"),Zro=l(),wu=a("li"),yJ=a("strong"),eao=o("xlm"),oao=o(" \u2014 "),Jk=a("a"),tao=o("XLMModel"),rao=o(" (XLM model)"),aao=l(),Au=a("li"),wJ=a("strong"),sao=o("xlm-prophetnet"),nao=o(" \u2014 "),Yk=a("a"),lao=o("XLMProphetNetModel"),dao=o(" (XLMProphetNet model)"),iao=l(),Lu=a("li"),AJ=a("strong"),cao=o("xlm-roberta"),fao=o(" \u2014 "),Kk=a("a"),mao=o("XLMRobertaModel"),gao=o(" (XLM-RoBERTa model)"),hao=l(),Bu=a("li"),LJ=a("strong"),uao=o("xlm-roberta-xl"),pao=o(" \u2014 "),Zk=a("a"),_ao=o("XLMRobertaXLModel"),bao=o(" (XLM-RoBERTa-XL model)"),vao=l(),xu=a("li"),BJ=a("strong"),Tao=o("xlnet"),Fao=o(" \u2014 "),eR=a("a"),Cao=o("XLNetModel"),Mao=o(" (XLNet model)"),Eao=l(),ku=a("li"),xJ=a("strong"),yao=o("yoso"),wao=o(" \u2014 "),oR=a("a"),Aao=o("YosoModel"),Lao=o(" (YOSO model)"),Bao=l(),Ru=a("p"),xao=o("The model is set in evaluation mode by default using "),kJ=a("code"),kao=o("model.eval()"),Rao=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),RJ=a("code"),Sao=o("model.train()"),Pao=l(),SJ=a("p"),$ao=o("Examples:"),Iao=l(),f(m5.$$.fragment),xLe=l(),$d=a("h2"),Su=a("a"),PJ=a("span"),f(g5.$$.fragment),jao=l(),$J=a("span"),Nao=o("AutoModelForPreTraining"),kLe=l(),zo=a("div"),f(h5.$$.fragment),Dao=l(),Id=a("p"),qao=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),IJ=a("code"),Gao=o("from_pretrained()"),Oao=o("class method or the "),jJ=a("code"),Xao=o("from_config()"),zao=o(`class
method.`),Vao=l(),u5=a("p"),Wao=o("This class cannot be instantiated directly using "),NJ=a("code"),Qao=o("__init__()"),Hao=o(" (throws an error)."),Uao=l(),It=a("div"),f(p5.$$.fragment),Jao=l(),DJ=a("p"),Yao=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Kao=l(),jd=a("p"),Zao=o(`Note:
Loading a model from its configuration file does `),qJ=a("strong"),eso=o("not"),oso=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=a("code"),tso=o("from_pretrained()"),rso=o("to load the model weights."),aso=l(),OJ=a("p"),sso=o("Examples:"),nso=l(),f(_5.$$.fragment),lso=l(),ke=a("div"),f(b5.$$.fragment),dso=l(),XJ=a("p"),iso=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),cso=l(),Ia=a("p"),fso=o("The model class to instantiate is selected based on the "),zJ=a("code"),mso=o("model_type"),gso=o(` property of the config object (either
passed as an argument or loaded from `),VJ=a("code"),hso=o("pretrained_model_name_or_path"),uso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WJ=a("code"),pso=o("pretrained_model_name_or_path"),_so=o(":"),bso=l(),k=a("ul"),Pu=a("li"),QJ=a("strong"),vso=o("albert"),Tso=o(" \u2014 "),tR=a("a"),Fso=o("AlbertForPreTraining"),Cso=o(" (ALBERT model)"),Mso=l(),$u=a("li"),HJ=a("strong"),Eso=o("bart"),yso=o(" \u2014 "),rR=a("a"),wso=o("BartForConditionalGeneration"),Aso=o(" (BART model)"),Lso=l(),Iu=a("li"),UJ=a("strong"),Bso=o("bert"),xso=o(" \u2014 "),aR=a("a"),kso=o("BertForPreTraining"),Rso=o(" (BERT model)"),Sso=l(),ju=a("li"),JJ=a("strong"),Pso=o("big_bird"),$so=o(" \u2014 "),sR=a("a"),Iso=o("BigBirdForPreTraining"),jso=o(" (BigBird model)"),Nso=l(),Nu=a("li"),YJ=a("strong"),Dso=o("camembert"),qso=o(" \u2014 "),nR=a("a"),Gso=o("CamembertForMaskedLM"),Oso=o(" (CamemBERT model)"),Xso=l(),Du=a("li"),KJ=a("strong"),zso=o("ctrl"),Vso=o(" \u2014 "),lR=a("a"),Wso=o("CTRLLMHeadModel"),Qso=o(" (CTRL model)"),Hso=l(),qu=a("li"),ZJ=a("strong"),Uso=o("deberta"),Jso=o(" \u2014 "),dR=a("a"),Yso=o("DebertaForMaskedLM"),Kso=o(" (DeBERTa model)"),Zso=l(),Gu=a("li"),eY=a("strong"),eno=o("deberta-v2"),ono=o(" \u2014 "),iR=a("a"),tno=o("DebertaV2ForMaskedLM"),rno=o(" (DeBERTa-v2 model)"),ano=l(),Ou=a("li"),oY=a("strong"),sno=o("distilbert"),nno=o(" \u2014 "),cR=a("a"),lno=o("DistilBertForMaskedLM"),dno=o(" (DistilBERT model)"),ino=l(),Xu=a("li"),tY=a("strong"),cno=o("electra"),fno=o(" \u2014 "),fR=a("a"),mno=o("ElectraForPreTraining"),gno=o(" (ELECTRA model)"),hno=l(),zu=a("li"),rY=a("strong"),uno=o("flaubert"),pno=o(" \u2014 "),mR=a("a"),_no=o("FlaubertWithLMHeadModel"),bno=o(" (FlauBERT model)"),vno=l(),Vu=a("li"),aY=a("strong"),Tno=o("fnet"),Fno=o(" \u2014 "),gR=a("a"),Cno=o("FNetForPreTraining"),Mno=o(" (FNet model)"),Eno=l(),Wu=a("li"),sY=a("strong"),yno=o("fsmt"),wno=o(" \u2014 "),hR=a("a"),Ano=o("FSMTForConditionalGeneration"),Lno=o(" (FairSeq Machine-Translation model)"),Bno=l(),Qu=a("li"),nY=a("strong"),xno=o("funnel"),kno=o(" \u2014 "),uR=a("a"),Rno=o("FunnelForPreTraining"),Sno=o(" (Funnel Transformer model)"),Pno=l(),Hu=a("li"),lY=a("strong"),$no=o("gpt2"),Ino=o(" \u2014 "),pR=a("a"),jno=o("GPT2LMHeadModel"),Nno=o(" (OpenAI GPT-2 model)"),Dno=l(),Uu=a("li"),dY=a("strong"),qno=o("ibert"),Gno=o(" \u2014 "),_R=a("a"),Ono=o("IBertForMaskedLM"),Xno=o(" (I-BERT model)"),zno=l(),Ju=a("li"),iY=a("strong"),Vno=o("layoutlm"),Wno=o(" \u2014 "),bR=a("a"),Qno=o("LayoutLMForMaskedLM"),Hno=o(" (LayoutLM model)"),Uno=l(),Yu=a("li"),cY=a("strong"),Jno=o("longformer"),Yno=o(" \u2014 "),vR=a("a"),Kno=o("LongformerForMaskedLM"),Zno=o(" (Longformer model)"),elo=l(),Ku=a("li"),fY=a("strong"),olo=o("lxmert"),tlo=o(" \u2014 "),TR=a("a"),rlo=o("LxmertForPreTraining"),alo=o(" (LXMERT model)"),slo=l(),Zu=a("li"),mY=a("strong"),nlo=o("megatron-bert"),llo=o(" \u2014 "),FR=a("a"),dlo=o("MegatronBertForPreTraining"),ilo=o(" (MegatronBert model)"),clo=l(),ep=a("li"),gY=a("strong"),flo=o("mobilebert"),mlo=o(" \u2014 "),CR=a("a"),glo=o("MobileBertForPreTraining"),hlo=o(" (MobileBERT model)"),ulo=l(),op=a("li"),hY=a("strong"),plo=o("mpnet"),_lo=o(" \u2014 "),MR=a("a"),blo=o("MPNetForMaskedLM"),vlo=o(" (MPNet model)"),Tlo=l(),tp=a("li"),uY=a("strong"),Flo=o("openai-gpt"),Clo=o(" \u2014 "),ER=a("a"),Mlo=o("OpenAIGPTLMHeadModel"),Elo=o(" (OpenAI GPT model)"),ylo=l(),rp=a("li"),pY=a("strong"),wlo=o("retribert"),Alo=o(" \u2014 "),yR=a("a"),Llo=o("RetriBertModel"),Blo=o(" (RetriBERT model)"),xlo=l(),ap=a("li"),_Y=a("strong"),klo=o("roberta"),Rlo=o(" \u2014 "),wR=a("a"),Slo=o("RobertaForMaskedLM"),Plo=o(" (RoBERTa model)"),$lo=l(),sp=a("li"),bY=a("strong"),Ilo=o("squeezebert"),jlo=o(" \u2014 "),AR=a("a"),Nlo=o("SqueezeBertForMaskedLM"),Dlo=o(" (SqueezeBERT model)"),qlo=l(),np=a("li"),vY=a("strong"),Glo=o("t5"),Olo=o(" \u2014 "),LR=a("a"),Xlo=o("T5ForConditionalGeneration"),zlo=o(" (T5 model)"),Vlo=l(),lp=a("li"),TY=a("strong"),Wlo=o("tapas"),Qlo=o(" \u2014 "),BR=a("a"),Hlo=o("TapasForMaskedLM"),Ulo=o(" (TAPAS model)"),Jlo=l(),dp=a("li"),FY=a("strong"),Ylo=o("transfo-xl"),Klo=o(" \u2014 "),xR=a("a"),Zlo=o("TransfoXLLMHeadModel"),edo=o(" (Transformer-XL model)"),odo=l(),ip=a("li"),CY=a("strong"),tdo=o("unispeech"),rdo=o(" \u2014 "),kR=a("a"),ado=o("UniSpeechForPreTraining"),sdo=o(" (UniSpeech model)"),ndo=l(),cp=a("li"),MY=a("strong"),ldo=o("unispeech-sat"),ddo=o(" \u2014 "),RR=a("a"),ido=o("UniSpeechSatForPreTraining"),cdo=o(" (UniSpeechSat model)"),fdo=l(),fp=a("li"),EY=a("strong"),mdo=o("visual_bert"),gdo=o(" \u2014 "),SR=a("a"),hdo=o("VisualBertForPreTraining"),udo=o(" (VisualBert model)"),pdo=l(),mp=a("li"),yY=a("strong"),_do=o("vit_mae"),bdo=o(" \u2014 "),PR=a("a"),vdo=o("ViTMAEForPreTraining"),Tdo=o(" (ViTMAE model)"),Fdo=l(),gp=a("li"),wY=a("strong"),Cdo=o("wav2vec2"),Mdo=o(" \u2014 "),$R=a("a"),Edo=o("Wav2Vec2ForPreTraining"),ydo=o(" (Wav2Vec2 model)"),wdo=l(),hp=a("li"),AY=a("strong"),Ado=o("xlm"),Ldo=o(" \u2014 "),IR=a("a"),Bdo=o("XLMWithLMHeadModel"),xdo=o(" (XLM model)"),kdo=l(),up=a("li"),LY=a("strong"),Rdo=o("xlm-roberta"),Sdo=o(" \u2014 "),jR=a("a"),Pdo=o("XLMRobertaForMaskedLM"),$do=o(" (XLM-RoBERTa model)"),Ido=l(),pp=a("li"),BY=a("strong"),jdo=o("xlm-roberta-xl"),Ndo=o(" \u2014 "),NR=a("a"),Ddo=o("XLMRobertaXLForMaskedLM"),qdo=o(" (XLM-RoBERTa-XL model)"),Gdo=l(),_p=a("li"),xY=a("strong"),Odo=o("xlnet"),Xdo=o(" \u2014 "),DR=a("a"),zdo=o("XLNetLMHeadModel"),Vdo=o(" (XLNet model)"),Wdo=l(),bp=a("p"),Qdo=o("The model is set in evaluation mode by default using "),kY=a("code"),Hdo=o("model.eval()"),Udo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),RY=a("code"),Jdo=o("model.train()"),Ydo=l(),SY=a("p"),Kdo=o("Examples:"),Zdo=l(),f(v5.$$.fragment),RLe=l(),Nd=a("h2"),vp=a("a"),PY=a("span"),f(T5.$$.fragment),eio=l(),$Y=a("span"),oio=o("AutoModelForCausalLM"),SLe=l(),Vo=a("div"),f(F5.$$.fragment),tio=l(),Dd=a("p"),rio=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),IY=a("code"),aio=o("from_pretrained()"),sio=o("class method or the "),jY=a("code"),nio=o("from_config()"),lio=o(`class
method.`),dio=l(),C5=a("p"),iio=o("This class cannot be instantiated directly using "),NY=a("code"),cio=o("__init__()"),fio=o(" (throws an error)."),mio=l(),jt=a("div"),f(M5.$$.fragment),gio=l(),DY=a("p"),hio=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),uio=l(),qd=a("p"),pio=o(`Note:
Loading a model from its configuration file does `),qY=a("strong"),_io=o("not"),bio=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=a("code"),vio=o("from_pretrained()"),Tio=o("to load the model weights."),Fio=l(),OY=a("p"),Cio=o("Examples:"),Mio=l(),f(E5.$$.fragment),Eio=l(),Re=a("div"),f(y5.$$.fragment),yio=l(),XY=a("p"),wio=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Aio=l(),ja=a("p"),Lio=o("The model class to instantiate is selected based on the "),zY=a("code"),Bio=o("model_type"),xio=o(` property of the config object (either
passed as an argument or loaded from `),VY=a("code"),kio=o("pretrained_model_name_or_path"),Rio=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WY=a("code"),Sio=o("pretrained_model_name_or_path"),Pio=o(":"),$io=l(),I=a("ul"),Tp=a("li"),QY=a("strong"),Iio=o("bart"),jio=o(" \u2014 "),qR=a("a"),Nio=o("BartForCausalLM"),Dio=o(" (BART model)"),qio=l(),Fp=a("li"),HY=a("strong"),Gio=o("bert"),Oio=o(" \u2014 "),GR=a("a"),Xio=o("BertLMHeadModel"),zio=o(" (BERT model)"),Vio=l(),Cp=a("li"),UY=a("strong"),Wio=o("bert-generation"),Qio=o(" \u2014 "),OR=a("a"),Hio=o("BertGenerationDecoder"),Uio=o(" (Bert Generation model)"),Jio=l(),Mp=a("li"),JY=a("strong"),Yio=o("big_bird"),Kio=o(" \u2014 "),XR=a("a"),Zio=o("BigBirdForCausalLM"),eco=o(" (BigBird model)"),oco=l(),Ep=a("li"),YY=a("strong"),tco=o("bigbird_pegasus"),rco=o(" \u2014 "),zR=a("a"),aco=o("BigBirdPegasusForCausalLM"),sco=o(" (BigBirdPegasus model)"),nco=l(),yp=a("li"),KY=a("strong"),lco=o("blenderbot"),dco=o(" \u2014 "),VR=a("a"),ico=o("BlenderbotForCausalLM"),cco=o(" (Blenderbot model)"),fco=l(),wp=a("li"),ZY=a("strong"),mco=o("blenderbot-small"),gco=o(" \u2014 "),WR=a("a"),hco=o("BlenderbotSmallForCausalLM"),uco=o(" (BlenderbotSmall model)"),pco=l(),Ap=a("li"),eK=a("strong"),_co=o("camembert"),bco=o(" \u2014 "),QR=a("a"),vco=o("CamembertForCausalLM"),Tco=o(" (CamemBERT model)"),Fco=l(),Lp=a("li"),oK=a("strong"),Cco=o("ctrl"),Mco=o(" \u2014 "),HR=a("a"),Eco=o("CTRLLMHeadModel"),yco=o(" (CTRL model)"),wco=l(),Bp=a("li"),tK=a("strong"),Aco=o("electra"),Lco=o(" \u2014 "),UR=a("a"),Bco=o("ElectraForCausalLM"),xco=o(" (ELECTRA model)"),kco=l(),xp=a("li"),rK=a("strong"),Rco=o("gpt2"),Sco=o(" \u2014 "),JR=a("a"),Pco=o("GPT2LMHeadModel"),$co=o(" (OpenAI GPT-2 model)"),Ico=l(),kp=a("li"),aK=a("strong"),jco=o("gpt_neo"),Nco=o(" \u2014 "),YR=a("a"),Dco=o("GPTNeoForCausalLM"),qco=o(" (GPT Neo model)"),Gco=l(),Rp=a("li"),sK=a("strong"),Oco=o("gptj"),Xco=o(" \u2014 "),KR=a("a"),zco=o("GPTJForCausalLM"),Vco=o(" (GPT-J model)"),Wco=l(),Sp=a("li"),nK=a("strong"),Qco=o("marian"),Hco=o(" \u2014 "),ZR=a("a"),Uco=o("MarianForCausalLM"),Jco=o(" (Marian model)"),Yco=l(),Pp=a("li"),lK=a("strong"),Kco=o("mbart"),Zco=o(" \u2014 "),eS=a("a"),efo=o("MBartForCausalLM"),ofo=o(" (mBART model)"),tfo=l(),$p=a("li"),dK=a("strong"),rfo=o("megatron-bert"),afo=o(" \u2014 "),oS=a("a"),sfo=o("MegatronBertForCausalLM"),nfo=o(" (MegatronBert model)"),lfo=l(),Ip=a("li"),iK=a("strong"),dfo=o("openai-gpt"),ifo=o(" \u2014 "),tS=a("a"),cfo=o("OpenAIGPTLMHeadModel"),ffo=o(" (OpenAI GPT model)"),mfo=l(),jp=a("li"),cK=a("strong"),gfo=o("pegasus"),hfo=o(" \u2014 "),rS=a("a"),ufo=o("PegasusForCausalLM"),pfo=o(" (Pegasus model)"),_fo=l(),Np=a("li"),fK=a("strong"),bfo=o("prophetnet"),vfo=o(" \u2014 "),aS=a("a"),Tfo=o("ProphetNetForCausalLM"),Ffo=o(" (ProphetNet model)"),Cfo=l(),Dp=a("li"),mK=a("strong"),Mfo=o("qdqbert"),Efo=o(" \u2014 "),sS=a("a"),yfo=o("QDQBertLMHeadModel"),wfo=o(" (QDQBert model)"),Afo=l(),qp=a("li"),gK=a("strong"),Lfo=o("reformer"),Bfo=o(" \u2014 "),nS=a("a"),xfo=o("ReformerModelWithLMHead"),kfo=o(" (Reformer model)"),Rfo=l(),Gp=a("li"),hK=a("strong"),Sfo=o("rembert"),Pfo=o(" \u2014 "),lS=a("a"),$fo=o("RemBertForCausalLM"),Ifo=o(" (RemBERT model)"),jfo=l(),Op=a("li"),uK=a("strong"),Nfo=o("roberta"),Dfo=o(" \u2014 "),dS=a("a"),qfo=o("RobertaForCausalLM"),Gfo=o(" (RoBERTa model)"),Ofo=l(),Xp=a("li"),pK=a("strong"),Xfo=o("roformer"),zfo=o(" \u2014 "),iS=a("a"),Vfo=o("RoFormerForCausalLM"),Wfo=o(" (RoFormer model)"),Qfo=l(),zp=a("li"),_K=a("strong"),Hfo=o("speech_to_text_2"),Ufo=o(" \u2014 "),cS=a("a"),Jfo=o("Speech2Text2ForCausalLM"),Yfo=o(" (Speech2Text2 model)"),Kfo=l(),Vp=a("li"),bK=a("strong"),Zfo=o("transfo-xl"),emo=o(" \u2014 "),fS=a("a"),omo=o("TransfoXLLMHeadModel"),tmo=o(" (Transformer-XL model)"),rmo=l(),Wp=a("li"),vK=a("strong"),amo=o("trocr"),smo=o(" \u2014 "),mS=a("a"),nmo=o("TrOCRForCausalLM"),lmo=o(" (TrOCR model)"),dmo=l(),Qp=a("li"),TK=a("strong"),imo=o("xglm"),cmo=o(" \u2014 "),gS=a("a"),fmo=o("XGLMForCausalLM"),mmo=o(" (XGLM model)"),gmo=l(),Hp=a("li"),FK=a("strong"),hmo=o("xlm"),umo=o(" \u2014 "),hS=a("a"),pmo=o("XLMWithLMHeadModel"),_mo=o(" (XLM model)"),bmo=l(),Up=a("li"),CK=a("strong"),vmo=o("xlm-prophetnet"),Tmo=o(" \u2014 "),uS=a("a"),Fmo=o("XLMProphetNetForCausalLM"),Cmo=o(" (XLMProphetNet model)"),Mmo=l(),Jp=a("li"),MK=a("strong"),Emo=o("xlm-roberta"),ymo=o(" \u2014 "),pS=a("a"),wmo=o("XLMRobertaForCausalLM"),Amo=o(" (XLM-RoBERTa model)"),Lmo=l(),Yp=a("li"),EK=a("strong"),Bmo=o("xlm-roberta-xl"),xmo=o(" \u2014 "),_S=a("a"),kmo=o("XLMRobertaXLForCausalLM"),Rmo=o(" (XLM-RoBERTa-XL model)"),Smo=l(),Kp=a("li"),yK=a("strong"),Pmo=o("xlnet"),$mo=o(" \u2014 "),bS=a("a"),Imo=o("XLNetLMHeadModel"),jmo=o(" (XLNet model)"),Nmo=l(),Zp=a("p"),Dmo=o("The model is set in evaluation mode by default using "),wK=a("code"),qmo=o("model.eval()"),Gmo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),AK=a("code"),Omo=o("model.train()"),Xmo=l(),LK=a("p"),zmo=o("Examples:"),Vmo=l(),f(w5.$$.fragment),PLe=l(),Gd=a("h2"),e_=a("a"),BK=a("span"),f(A5.$$.fragment),Wmo=l(),xK=a("span"),Qmo=o("AutoModelForMaskedLM"),$Le=l(),Wo=a("div"),f(L5.$$.fragment),Hmo=l(),Od=a("p"),Umo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kK=a("code"),Jmo=o("from_pretrained()"),Ymo=o("class method or the "),RK=a("code"),Kmo=o("from_config()"),Zmo=o(`class
method.`),ego=l(),B5=a("p"),ogo=o("This class cannot be instantiated directly using "),SK=a("code"),tgo=o("__init__()"),rgo=o(" (throws an error)."),ago=l(),Nt=a("div"),f(x5.$$.fragment),sgo=l(),PK=a("p"),ngo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lgo=l(),Xd=a("p"),dgo=o(`Note:
Loading a model from its configuration file does `),$K=a("strong"),igo=o("not"),cgo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IK=a("code"),fgo=o("from_pretrained()"),mgo=o("to load the model weights."),ggo=l(),jK=a("p"),hgo=o("Examples:"),ugo=l(),f(k5.$$.fragment),pgo=l(),Se=a("div"),f(R5.$$.fragment),_go=l(),NK=a("p"),bgo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),vgo=l(),Na=a("p"),Tgo=o("The model class to instantiate is selected based on the "),DK=a("code"),Fgo=o("model_type"),Cgo=o(` property of the config object (either
passed as an argument or loaded from `),qK=a("code"),Mgo=o("pretrained_model_name_or_path"),Ego=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GK=a("code"),ygo=o("pretrained_model_name_or_path"),wgo=o(":"),Ago=l(),$=a("ul"),o_=a("li"),OK=a("strong"),Lgo=o("albert"),Bgo=o(" \u2014 "),vS=a("a"),xgo=o("AlbertForMaskedLM"),kgo=o(" (ALBERT model)"),Rgo=l(),t_=a("li"),XK=a("strong"),Sgo=o("bart"),Pgo=o(" \u2014 "),TS=a("a"),$go=o("BartForConditionalGeneration"),Igo=o(" (BART model)"),jgo=l(),r_=a("li"),zK=a("strong"),Ngo=o("bert"),Dgo=o(" \u2014 "),FS=a("a"),qgo=o("BertForMaskedLM"),Ggo=o(" (BERT model)"),Ogo=l(),a_=a("li"),VK=a("strong"),Xgo=o("big_bird"),zgo=o(" \u2014 "),CS=a("a"),Vgo=o("BigBirdForMaskedLM"),Wgo=o(" (BigBird model)"),Qgo=l(),s_=a("li"),WK=a("strong"),Hgo=o("camembert"),Ugo=o(" \u2014 "),MS=a("a"),Jgo=o("CamembertForMaskedLM"),Ygo=o(" (CamemBERT model)"),Kgo=l(),n_=a("li"),QK=a("strong"),Zgo=o("convbert"),eho=o(" \u2014 "),ES=a("a"),oho=o("ConvBertForMaskedLM"),tho=o(" (ConvBERT model)"),rho=l(),l_=a("li"),HK=a("strong"),aho=o("deberta"),sho=o(" \u2014 "),yS=a("a"),nho=o("DebertaForMaskedLM"),lho=o(" (DeBERTa model)"),dho=l(),d_=a("li"),UK=a("strong"),iho=o("deberta-v2"),cho=o(" \u2014 "),wS=a("a"),fho=o("DebertaV2ForMaskedLM"),mho=o(" (DeBERTa-v2 model)"),gho=l(),i_=a("li"),JK=a("strong"),hho=o("distilbert"),uho=o(" \u2014 "),AS=a("a"),pho=o("DistilBertForMaskedLM"),_ho=o(" (DistilBERT model)"),bho=l(),c_=a("li"),YK=a("strong"),vho=o("electra"),Tho=o(" \u2014 "),LS=a("a"),Fho=o("ElectraForMaskedLM"),Cho=o(" (ELECTRA model)"),Mho=l(),f_=a("li"),KK=a("strong"),Eho=o("flaubert"),yho=o(" \u2014 "),BS=a("a"),who=o("FlaubertWithLMHeadModel"),Aho=o(" (FlauBERT model)"),Lho=l(),m_=a("li"),ZK=a("strong"),Bho=o("fnet"),xho=o(" \u2014 "),xS=a("a"),kho=o("FNetForMaskedLM"),Rho=o(" (FNet model)"),Sho=l(),g_=a("li"),eZ=a("strong"),Pho=o("funnel"),$ho=o(" \u2014 "),kS=a("a"),Iho=o("FunnelForMaskedLM"),jho=o(" (Funnel Transformer model)"),Nho=l(),h_=a("li"),oZ=a("strong"),Dho=o("ibert"),qho=o(" \u2014 "),RS=a("a"),Gho=o("IBertForMaskedLM"),Oho=o(" (I-BERT model)"),Xho=l(),u_=a("li"),tZ=a("strong"),zho=o("layoutlm"),Vho=o(" \u2014 "),SS=a("a"),Who=o("LayoutLMForMaskedLM"),Qho=o(" (LayoutLM model)"),Hho=l(),p_=a("li"),rZ=a("strong"),Uho=o("longformer"),Jho=o(" \u2014 "),PS=a("a"),Yho=o("LongformerForMaskedLM"),Kho=o(" (Longformer model)"),Zho=l(),__=a("li"),aZ=a("strong"),euo=o("mbart"),ouo=o(" \u2014 "),$S=a("a"),tuo=o("MBartForConditionalGeneration"),ruo=o(" (mBART model)"),auo=l(),b_=a("li"),sZ=a("strong"),suo=o("megatron-bert"),nuo=o(" \u2014 "),IS=a("a"),luo=o("MegatronBertForMaskedLM"),duo=o(" (MegatronBert model)"),iuo=l(),v_=a("li"),nZ=a("strong"),cuo=o("mobilebert"),fuo=o(" \u2014 "),jS=a("a"),muo=o("MobileBertForMaskedLM"),guo=o(" (MobileBERT model)"),huo=l(),T_=a("li"),lZ=a("strong"),uuo=o("mpnet"),puo=o(" \u2014 "),NS=a("a"),_uo=o("MPNetForMaskedLM"),buo=o(" (MPNet model)"),vuo=l(),F_=a("li"),dZ=a("strong"),Tuo=o("nystromformer"),Fuo=o(" \u2014 "),DS=a("a"),Cuo=o("NystromformerForMaskedLM"),Muo=o(" (Nystromformer model)"),Euo=l(),C_=a("li"),iZ=a("strong"),yuo=o("perceiver"),wuo=o(" \u2014 "),qS=a("a"),Auo=o("PerceiverForMaskedLM"),Luo=o(" (Perceiver model)"),Buo=l(),M_=a("li"),cZ=a("strong"),xuo=o("qdqbert"),kuo=o(" \u2014 "),GS=a("a"),Ruo=o("QDQBertForMaskedLM"),Suo=o(" (QDQBert model)"),Puo=l(),E_=a("li"),fZ=a("strong"),$uo=o("reformer"),Iuo=o(" \u2014 "),OS=a("a"),juo=o("ReformerForMaskedLM"),Nuo=o(" (Reformer model)"),Duo=l(),y_=a("li"),mZ=a("strong"),quo=o("rembert"),Guo=o(" \u2014 "),XS=a("a"),Ouo=o("RemBertForMaskedLM"),Xuo=o(" (RemBERT model)"),zuo=l(),w_=a("li"),gZ=a("strong"),Vuo=o("roberta"),Wuo=o(" \u2014 "),zS=a("a"),Quo=o("RobertaForMaskedLM"),Huo=o(" (RoBERTa model)"),Uuo=l(),A_=a("li"),hZ=a("strong"),Juo=o("roformer"),Yuo=o(" \u2014 "),VS=a("a"),Kuo=o("RoFormerForMaskedLM"),Zuo=o(" (RoFormer model)"),epo=l(),L_=a("li"),uZ=a("strong"),opo=o("squeezebert"),tpo=o(" \u2014 "),WS=a("a"),rpo=o("SqueezeBertForMaskedLM"),apo=o(" (SqueezeBERT model)"),spo=l(),B_=a("li"),pZ=a("strong"),npo=o("tapas"),lpo=o(" \u2014 "),QS=a("a"),dpo=o("TapasForMaskedLM"),ipo=o(" (TAPAS model)"),cpo=l(),x_=a("li"),_Z=a("strong"),fpo=o("wav2vec2"),mpo=o(" \u2014 "),bZ=a("code"),gpo=o("Wav2Vec2ForMaskedLM"),hpo=o("(Wav2Vec2 model)"),upo=l(),k_=a("li"),vZ=a("strong"),ppo=o("xlm"),_po=o(" \u2014 "),HS=a("a"),bpo=o("XLMWithLMHeadModel"),vpo=o(" (XLM model)"),Tpo=l(),R_=a("li"),TZ=a("strong"),Fpo=o("xlm-roberta"),Cpo=o(" \u2014 "),US=a("a"),Mpo=o("XLMRobertaForMaskedLM"),Epo=o(" (XLM-RoBERTa model)"),ypo=l(),S_=a("li"),FZ=a("strong"),wpo=o("xlm-roberta-xl"),Apo=o(" \u2014 "),JS=a("a"),Lpo=o("XLMRobertaXLForMaskedLM"),Bpo=o(" (XLM-RoBERTa-XL model)"),xpo=l(),P_=a("li"),CZ=a("strong"),kpo=o("yoso"),Rpo=o(" \u2014 "),YS=a("a"),Spo=o("YosoForMaskedLM"),Ppo=o(" (YOSO model)"),$po=l(),$_=a("p"),Ipo=o("The model is set in evaluation mode by default using "),MZ=a("code"),jpo=o("model.eval()"),Npo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),EZ=a("code"),Dpo=o("model.train()"),qpo=l(),yZ=a("p"),Gpo=o("Examples:"),Opo=l(),f(S5.$$.fragment),ILe=l(),zd=a("h2"),I_=a("a"),wZ=a("span"),f(P5.$$.fragment),Xpo=l(),AZ=a("span"),zpo=o("AutoModelForSeq2SeqLM"),jLe=l(),Qo=a("div"),f($5.$$.fragment),Vpo=l(),Vd=a("p"),Wpo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LZ=a("code"),Qpo=o("from_pretrained()"),Hpo=o("class method or the "),BZ=a("code"),Upo=o("from_config()"),Jpo=o(`class
method.`),Ypo=l(),I5=a("p"),Kpo=o("This class cannot be instantiated directly using "),xZ=a("code"),Zpo=o("__init__()"),e_o=o(" (throws an error)."),o_o=l(),Dt=a("div"),f(j5.$$.fragment),t_o=l(),kZ=a("p"),r_o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),a_o=l(),Wd=a("p"),s_o=o(`Note:
Loading a model from its configuration file does `),RZ=a("strong"),n_o=o("not"),l_o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=a("code"),d_o=o("from_pretrained()"),i_o=o("to load the model weights."),c_o=l(),PZ=a("p"),f_o=o("Examples:"),m_o=l(),f(N5.$$.fragment),g_o=l(),Pe=a("div"),f(D5.$$.fragment),h_o=l(),$Z=a("p"),u_o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),p_o=l(),Da=a("p"),__o=o("The model class to instantiate is selected based on the "),IZ=a("code"),b_o=o("model_type"),v_o=o(` property of the config object (either
passed as an argument or loaded from `),jZ=a("code"),T_o=o("pretrained_model_name_or_path"),F_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NZ=a("code"),C_o=o("pretrained_model_name_or_path"),M_o=o(":"),E_o=l(),se=a("ul"),j_=a("li"),DZ=a("strong"),y_o=o("bart"),w_o=o(" \u2014 "),KS=a("a"),A_o=o("BartForConditionalGeneration"),L_o=o(" (BART model)"),B_o=l(),N_=a("li"),qZ=a("strong"),x_o=o("bigbird_pegasus"),k_o=o(" \u2014 "),ZS=a("a"),R_o=o("BigBirdPegasusForConditionalGeneration"),S_o=o(" (BigBirdPegasus model)"),P_o=l(),D_=a("li"),GZ=a("strong"),$_o=o("blenderbot"),I_o=o(" \u2014 "),eP=a("a"),j_o=o("BlenderbotForConditionalGeneration"),N_o=o(" (Blenderbot model)"),D_o=l(),q_=a("li"),OZ=a("strong"),q_o=o("blenderbot-small"),G_o=o(" \u2014 "),oP=a("a"),O_o=o("BlenderbotSmallForConditionalGeneration"),X_o=o(" (BlenderbotSmall model)"),z_o=l(),G_=a("li"),XZ=a("strong"),V_o=o("encoder-decoder"),W_o=o(" \u2014 "),tP=a("a"),Q_o=o("EncoderDecoderModel"),H_o=o(" (Encoder decoder model)"),U_o=l(),O_=a("li"),zZ=a("strong"),J_o=o("fsmt"),Y_o=o(" \u2014 "),rP=a("a"),K_o=o("FSMTForConditionalGeneration"),Z_o=o(" (FairSeq Machine-Translation model)"),ebo=l(),X_=a("li"),VZ=a("strong"),obo=o("led"),tbo=o(" \u2014 "),aP=a("a"),rbo=o("LEDForConditionalGeneration"),abo=o(" (LED model)"),sbo=l(),z_=a("li"),WZ=a("strong"),nbo=o("m2m_100"),lbo=o(" \u2014 "),sP=a("a"),dbo=o("M2M100ForConditionalGeneration"),ibo=o(" (M2M100 model)"),cbo=l(),V_=a("li"),QZ=a("strong"),fbo=o("marian"),mbo=o(" \u2014 "),nP=a("a"),gbo=o("MarianMTModel"),hbo=o(" (Marian model)"),ubo=l(),W_=a("li"),HZ=a("strong"),pbo=o("mbart"),_bo=o(" \u2014 "),lP=a("a"),bbo=o("MBartForConditionalGeneration"),vbo=o(" (mBART model)"),Tbo=l(),Q_=a("li"),UZ=a("strong"),Fbo=o("mt5"),Cbo=o(" \u2014 "),dP=a("a"),Mbo=o("MT5ForConditionalGeneration"),Ebo=o(" (mT5 model)"),ybo=l(),H_=a("li"),JZ=a("strong"),wbo=o("pegasus"),Abo=o(" \u2014 "),iP=a("a"),Lbo=o("PegasusForConditionalGeneration"),Bbo=o(" (Pegasus model)"),xbo=l(),U_=a("li"),YZ=a("strong"),kbo=o("prophetnet"),Rbo=o(" \u2014 "),cP=a("a"),Sbo=o("ProphetNetForConditionalGeneration"),Pbo=o(" (ProphetNet model)"),$bo=l(),J_=a("li"),KZ=a("strong"),Ibo=o("t5"),jbo=o(" \u2014 "),fP=a("a"),Nbo=o("T5ForConditionalGeneration"),Dbo=o(" (T5 model)"),qbo=l(),Y_=a("li"),ZZ=a("strong"),Gbo=o("xlm-prophetnet"),Obo=o(" \u2014 "),mP=a("a"),Xbo=o("XLMProphetNetForConditionalGeneration"),zbo=o(" (XLMProphetNet model)"),Vbo=l(),K_=a("p"),Wbo=o("The model is set in evaluation mode by default using "),eee=a("code"),Qbo=o("model.eval()"),Hbo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oee=a("code"),Ubo=o("model.train()"),Jbo=l(),tee=a("p"),Ybo=o("Examples:"),Kbo=l(),f(q5.$$.fragment),NLe=l(),Qd=a("h2"),Z_=a("a"),ree=a("span"),f(G5.$$.fragment),Zbo=l(),aee=a("span"),e2o=o("AutoModelForSequenceClassification"),DLe=l(),Ho=a("div"),f(O5.$$.fragment),o2o=l(),Hd=a("p"),t2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),see=a("code"),r2o=o("from_pretrained()"),a2o=o("class method or the "),nee=a("code"),s2o=o("from_config()"),n2o=o(`class
method.`),l2o=l(),X5=a("p"),d2o=o("This class cannot be instantiated directly using "),lee=a("code"),i2o=o("__init__()"),c2o=o(" (throws an error)."),f2o=l(),qt=a("div"),f(z5.$$.fragment),m2o=l(),dee=a("p"),g2o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),h2o=l(),Ud=a("p"),u2o=o(`Note:
Loading a model from its configuration file does `),iee=a("strong"),p2o=o("not"),_2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cee=a("code"),b2o=o("from_pretrained()"),v2o=o("to load the model weights."),T2o=l(),fee=a("p"),F2o=o("Examples:"),C2o=l(),f(V5.$$.fragment),M2o=l(),$e=a("div"),f(W5.$$.fragment),E2o=l(),mee=a("p"),y2o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),w2o=l(),qa=a("p"),A2o=o("The model class to instantiate is selected based on the "),gee=a("code"),L2o=o("model_type"),B2o=o(` property of the config object (either
passed as an argument or loaded from `),hee=a("code"),x2o=o("pretrained_model_name_or_path"),k2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uee=a("code"),R2o=o("pretrained_model_name_or_path"),S2o=o(":"),P2o=l(),A=a("ul"),eb=a("li"),pee=a("strong"),$2o=o("albert"),I2o=o(" \u2014 "),gP=a("a"),j2o=o("AlbertForSequenceClassification"),N2o=o(" (ALBERT model)"),D2o=l(),ob=a("li"),_ee=a("strong"),q2o=o("bart"),G2o=o(" \u2014 "),hP=a("a"),O2o=o("BartForSequenceClassification"),X2o=o(" (BART model)"),z2o=l(),tb=a("li"),bee=a("strong"),V2o=o("bert"),W2o=o(" \u2014 "),uP=a("a"),Q2o=o("BertForSequenceClassification"),H2o=o(" (BERT model)"),U2o=l(),rb=a("li"),vee=a("strong"),J2o=o("big_bird"),Y2o=o(" \u2014 "),pP=a("a"),K2o=o("BigBirdForSequenceClassification"),Z2o=o(" (BigBird model)"),evo=l(),ab=a("li"),Tee=a("strong"),ovo=o("bigbird_pegasus"),tvo=o(" \u2014 "),_P=a("a"),rvo=o("BigBirdPegasusForSequenceClassification"),avo=o(" (BigBirdPegasus model)"),svo=l(),sb=a("li"),Fee=a("strong"),nvo=o("camembert"),lvo=o(" \u2014 "),bP=a("a"),dvo=o("CamembertForSequenceClassification"),ivo=o(" (CamemBERT model)"),cvo=l(),nb=a("li"),Cee=a("strong"),fvo=o("canine"),mvo=o(" \u2014 "),vP=a("a"),gvo=o("CanineForSequenceClassification"),hvo=o(" (Canine model)"),uvo=l(),lb=a("li"),Mee=a("strong"),pvo=o("convbert"),_vo=o(" \u2014 "),TP=a("a"),bvo=o("ConvBertForSequenceClassification"),vvo=o(" (ConvBERT model)"),Tvo=l(),db=a("li"),Eee=a("strong"),Fvo=o("ctrl"),Cvo=o(" \u2014 "),FP=a("a"),Mvo=o("CTRLForSequenceClassification"),Evo=o(" (CTRL model)"),yvo=l(),ib=a("li"),yee=a("strong"),wvo=o("deberta"),Avo=o(" \u2014 "),CP=a("a"),Lvo=o("DebertaForSequenceClassification"),Bvo=o(" (DeBERTa model)"),xvo=l(),cb=a("li"),wee=a("strong"),kvo=o("deberta-v2"),Rvo=o(" \u2014 "),MP=a("a"),Svo=o("DebertaV2ForSequenceClassification"),Pvo=o(" (DeBERTa-v2 model)"),$vo=l(),fb=a("li"),Aee=a("strong"),Ivo=o("distilbert"),jvo=o(" \u2014 "),EP=a("a"),Nvo=o("DistilBertForSequenceClassification"),Dvo=o(" (DistilBERT model)"),qvo=l(),mb=a("li"),Lee=a("strong"),Gvo=o("electra"),Ovo=o(" \u2014 "),yP=a("a"),Xvo=o("ElectraForSequenceClassification"),zvo=o(" (ELECTRA model)"),Vvo=l(),gb=a("li"),Bee=a("strong"),Wvo=o("flaubert"),Qvo=o(" \u2014 "),wP=a("a"),Hvo=o("FlaubertForSequenceClassification"),Uvo=o(" (FlauBERT model)"),Jvo=l(),hb=a("li"),xee=a("strong"),Yvo=o("fnet"),Kvo=o(" \u2014 "),AP=a("a"),Zvo=o("FNetForSequenceClassification"),eTo=o(" (FNet model)"),oTo=l(),ub=a("li"),kee=a("strong"),tTo=o("funnel"),rTo=o(" \u2014 "),LP=a("a"),aTo=o("FunnelForSequenceClassification"),sTo=o(" (Funnel Transformer model)"),nTo=l(),pb=a("li"),Ree=a("strong"),lTo=o("gpt2"),dTo=o(" \u2014 "),BP=a("a"),iTo=o("GPT2ForSequenceClassification"),cTo=o(" (OpenAI GPT-2 model)"),fTo=l(),_b=a("li"),See=a("strong"),mTo=o("gpt_neo"),gTo=o(" \u2014 "),xP=a("a"),hTo=o("GPTNeoForSequenceClassification"),uTo=o(" (GPT Neo model)"),pTo=l(),bb=a("li"),Pee=a("strong"),_To=o("gptj"),bTo=o(" \u2014 "),kP=a("a"),vTo=o("GPTJForSequenceClassification"),TTo=o(" (GPT-J model)"),FTo=l(),vb=a("li"),$ee=a("strong"),CTo=o("ibert"),MTo=o(" \u2014 "),RP=a("a"),ETo=o("IBertForSequenceClassification"),yTo=o(" (I-BERT model)"),wTo=l(),Tb=a("li"),Iee=a("strong"),ATo=o("layoutlm"),LTo=o(" \u2014 "),SP=a("a"),BTo=o("LayoutLMForSequenceClassification"),xTo=o(" (LayoutLM model)"),kTo=l(),Fb=a("li"),jee=a("strong"),RTo=o("layoutlmv2"),STo=o(" \u2014 "),PP=a("a"),PTo=o("LayoutLMv2ForSequenceClassification"),$To=o(" (LayoutLMv2 model)"),ITo=l(),Cb=a("li"),Nee=a("strong"),jTo=o("led"),NTo=o(" \u2014 "),$P=a("a"),DTo=o("LEDForSequenceClassification"),qTo=o(" (LED model)"),GTo=l(),Mb=a("li"),Dee=a("strong"),OTo=o("longformer"),XTo=o(" \u2014 "),IP=a("a"),zTo=o("LongformerForSequenceClassification"),VTo=o(" (Longformer model)"),WTo=l(),Eb=a("li"),qee=a("strong"),QTo=o("mbart"),HTo=o(" \u2014 "),jP=a("a"),UTo=o("MBartForSequenceClassification"),JTo=o(" (mBART model)"),YTo=l(),yb=a("li"),Gee=a("strong"),KTo=o("megatron-bert"),ZTo=o(" \u2014 "),NP=a("a"),e1o=o("MegatronBertForSequenceClassification"),o1o=o(" (MegatronBert model)"),t1o=l(),wb=a("li"),Oee=a("strong"),r1o=o("mobilebert"),a1o=o(" \u2014 "),DP=a("a"),s1o=o("MobileBertForSequenceClassification"),n1o=o(" (MobileBERT model)"),l1o=l(),Ab=a("li"),Xee=a("strong"),d1o=o("mpnet"),i1o=o(" \u2014 "),qP=a("a"),c1o=o("MPNetForSequenceClassification"),f1o=o(" (MPNet model)"),m1o=l(),Lb=a("li"),zee=a("strong"),g1o=o("nystromformer"),h1o=o(" \u2014 "),GP=a("a"),u1o=o("NystromformerForSequenceClassification"),p1o=o(" (Nystromformer model)"),_1o=l(),Bb=a("li"),Vee=a("strong"),b1o=o("openai-gpt"),v1o=o(" \u2014 "),OP=a("a"),T1o=o("OpenAIGPTForSequenceClassification"),F1o=o(" (OpenAI GPT model)"),C1o=l(),xb=a("li"),Wee=a("strong"),M1o=o("perceiver"),E1o=o(" \u2014 "),XP=a("a"),y1o=o("PerceiverForSequenceClassification"),w1o=o(" (Perceiver model)"),A1o=l(),kb=a("li"),Qee=a("strong"),L1o=o("qdqbert"),B1o=o(" \u2014 "),zP=a("a"),x1o=o("QDQBertForSequenceClassification"),k1o=o(" (QDQBert model)"),R1o=l(),Rb=a("li"),Hee=a("strong"),S1o=o("reformer"),P1o=o(" \u2014 "),VP=a("a"),$1o=o("ReformerForSequenceClassification"),I1o=o(" (Reformer model)"),j1o=l(),Sb=a("li"),Uee=a("strong"),N1o=o("rembert"),D1o=o(" \u2014 "),WP=a("a"),q1o=o("RemBertForSequenceClassification"),G1o=o(" (RemBERT model)"),O1o=l(),Pb=a("li"),Jee=a("strong"),X1o=o("roberta"),z1o=o(" \u2014 "),QP=a("a"),V1o=o("RobertaForSequenceClassification"),W1o=o(" (RoBERTa model)"),Q1o=l(),$b=a("li"),Yee=a("strong"),H1o=o("roformer"),U1o=o(" \u2014 "),HP=a("a"),J1o=o("RoFormerForSequenceClassification"),Y1o=o(" (RoFormer model)"),K1o=l(),Ib=a("li"),Kee=a("strong"),Z1o=o("squeezebert"),eFo=o(" \u2014 "),UP=a("a"),oFo=o("SqueezeBertForSequenceClassification"),tFo=o(" (SqueezeBERT model)"),rFo=l(),jb=a("li"),Zee=a("strong"),aFo=o("tapas"),sFo=o(" \u2014 "),JP=a("a"),nFo=o("TapasForSequenceClassification"),lFo=o(" (TAPAS model)"),dFo=l(),Nb=a("li"),eoe=a("strong"),iFo=o("transfo-xl"),cFo=o(" \u2014 "),YP=a("a"),fFo=o("TransfoXLForSequenceClassification"),mFo=o(" (Transformer-XL model)"),gFo=l(),Db=a("li"),ooe=a("strong"),hFo=o("xlm"),uFo=o(" \u2014 "),KP=a("a"),pFo=o("XLMForSequenceClassification"),_Fo=o(" (XLM model)"),bFo=l(),qb=a("li"),toe=a("strong"),vFo=o("xlm-roberta"),TFo=o(" \u2014 "),ZP=a("a"),FFo=o("XLMRobertaForSequenceClassification"),CFo=o(" (XLM-RoBERTa model)"),MFo=l(),Gb=a("li"),roe=a("strong"),EFo=o("xlm-roberta-xl"),yFo=o(" \u2014 "),e$=a("a"),wFo=o("XLMRobertaXLForSequenceClassification"),AFo=o(" (XLM-RoBERTa-XL model)"),LFo=l(),Ob=a("li"),aoe=a("strong"),BFo=o("xlnet"),xFo=o(" \u2014 "),o$=a("a"),kFo=o("XLNetForSequenceClassification"),RFo=o(" (XLNet model)"),SFo=l(),Xb=a("li"),soe=a("strong"),PFo=o("yoso"),$Fo=o(" \u2014 "),t$=a("a"),IFo=o("YosoForSequenceClassification"),jFo=o(" (YOSO model)"),NFo=l(),zb=a("p"),DFo=o("The model is set in evaluation mode by default using "),noe=a("code"),qFo=o("model.eval()"),GFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),loe=a("code"),OFo=o("model.train()"),XFo=l(),doe=a("p"),zFo=o("Examples:"),VFo=l(),f(Q5.$$.fragment),qLe=l(),Jd=a("h2"),Vb=a("a"),ioe=a("span"),f(H5.$$.fragment),WFo=l(),coe=a("span"),QFo=o("AutoModelForMultipleChoice"),GLe=l(),Uo=a("div"),f(U5.$$.fragment),HFo=l(),Yd=a("p"),UFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),foe=a("code"),JFo=o("from_pretrained()"),YFo=o("class method or the "),moe=a("code"),KFo=o("from_config()"),ZFo=o(`class
method.`),eCo=l(),J5=a("p"),oCo=o("This class cannot be instantiated directly using "),goe=a("code"),tCo=o("__init__()"),rCo=o(" (throws an error)."),aCo=l(),Gt=a("div"),f(Y5.$$.fragment),sCo=l(),hoe=a("p"),nCo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),lCo=l(),Kd=a("p"),dCo=o(`Note:
Loading a model from its configuration file does `),uoe=a("strong"),iCo=o("not"),cCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),poe=a("code"),fCo=o("from_pretrained()"),mCo=o("to load the model weights."),gCo=l(),_oe=a("p"),hCo=o("Examples:"),uCo=l(),f(K5.$$.fragment),pCo=l(),Ie=a("div"),f(Z5.$$.fragment),_Co=l(),boe=a("p"),bCo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),vCo=l(),Ga=a("p"),TCo=o("The model class to instantiate is selected based on the "),voe=a("code"),FCo=o("model_type"),CCo=o(` property of the config object (either
passed as an argument or loaded from `),Toe=a("code"),MCo=o("pretrained_model_name_or_path"),ECo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Foe=a("code"),yCo=o("pretrained_model_name_or_path"),wCo=o(":"),ACo=l(),G=a("ul"),Wb=a("li"),Coe=a("strong"),LCo=o("albert"),BCo=o(" \u2014 "),r$=a("a"),xCo=o("AlbertForMultipleChoice"),kCo=o(" (ALBERT model)"),RCo=l(),Qb=a("li"),Moe=a("strong"),SCo=o("bert"),PCo=o(" \u2014 "),a$=a("a"),$Co=o("BertForMultipleChoice"),ICo=o(" (BERT model)"),jCo=l(),Hb=a("li"),Eoe=a("strong"),NCo=o("big_bird"),DCo=o(" \u2014 "),s$=a("a"),qCo=o("BigBirdForMultipleChoice"),GCo=o(" (BigBird model)"),OCo=l(),Ub=a("li"),yoe=a("strong"),XCo=o("camembert"),zCo=o(" \u2014 "),n$=a("a"),VCo=o("CamembertForMultipleChoice"),WCo=o(" (CamemBERT model)"),QCo=l(),Jb=a("li"),woe=a("strong"),HCo=o("canine"),UCo=o(" \u2014 "),l$=a("a"),JCo=o("CanineForMultipleChoice"),YCo=o(" (Canine model)"),KCo=l(),Yb=a("li"),Aoe=a("strong"),ZCo=o("convbert"),e4o=o(" \u2014 "),d$=a("a"),o4o=o("ConvBertForMultipleChoice"),t4o=o(" (ConvBERT model)"),r4o=l(),Kb=a("li"),Loe=a("strong"),a4o=o("distilbert"),s4o=o(" \u2014 "),i$=a("a"),n4o=o("DistilBertForMultipleChoice"),l4o=o(" (DistilBERT model)"),d4o=l(),Zb=a("li"),Boe=a("strong"),i4o=o("electra"),c4o=o(" \u2014 "),c$=a("a"),f4o=o("ElectraForMultipleChoice"),m4o=o(" (ELECTRA model)"),g4o=l(),e2=a("li"),xoe=a("strong"),h4o=o("flaubert"),u4o=o(" \u2014 "),f$=a("a"),p4o=o("FlaubertForMultipleChoice"),_4o=o(" (FlauBERT model)"),b4o=l(),o2=a("li"),koe=a("strong"),v4o=o("fnet"),T4o=o(" \u2014 "),m$=a("a"),F4o=o("FNetForMultipleChoice"),C4o=o(" (FNet model)"),M4o=l(),t2=a("li"),Roe=a("strong"),E4o=o("funnel"),y4o=o(" \u2014 "),g$=a("a"),w4o=o("FunnelForMultipleChoice"),A4o=o(" (Funnel Transformer model)"),L4o=l(),r2=a("li"),Soe=a("strong"),B4o=o("ibert"),x4o=o(" \u2014 "),h$=a("a"),k4o=o("IBertForMultipleChoice"),R4o=o(" (I-BERT model)"),S4o=l(),a2=a("li"),Poe=a("strong"),P4o=o("longformer"),$4o=o(" \u2014 "),u$=a("a"),I4o=o("LongformerForMultipleChoice"),j4o=o(" (Longformer model)"),N4o=l(),s2=a("li"),$oe=a("strong"),D4o=o("megatron-bert"),q4o=o(" \u2014 "),p$=a("a"),G4o=o("MegatronBertForMultipleChoice"),O4o=o(" (MegatronBert model)"),X4o=l(),n2=a("li"),Ioe=a("strong"),z4o=o("mobilebert"),V4o=o(" \u2014 "),_$=a("a"),W4o=o("MobileBertForMultipleChoice"),Q4o=o(" (MobileBERT model)"),H4o=l(),l2=a("li"),joe=a("strong"),U4o=o("mpnet"),J4o=o(" \u2014 "),b$=a("a"),Y4o=o("MPNetForMultipleChoice"),K4o=o(" (MPNet model)"),Z4o=l(),d2=a("li"),Noe=a("strong"),eMo=o("nystromformer"),oMo=o(" \u2014 "),v$=a("a"),tMo=o("NystromformerForMultipleChoice"),rMo=o(" (Nystromformer model)"),aMo=l(),i2=a("li"),Doe=a("strong"),sMo=o("qdqbert"),nMo=o(" \u2014 "),T$=a("a"),lMo=o("QDQBertForMultipleChoice"),dMo=o(" (QDQBert model)"),iMo=l(),c2=a("li"),qoe=a("strong"),cMo=o("rembert"),fMo=o(" \u2014 "),F$=a("a"),mMo=o("RemBertForMultipleChoice"),gMo=o(" (RemBERT model)"),hMo=l(),f2=a("li"),Goe=a("strong"),uMo=o("roberta"),pMo=o(" \u2014 "),C$=a("a"),_Mo=o("RobertaForMultipleChoice"),bMo=o(" (RoBERTa model)"),vMo=l(),m2=a("li"),Ooe=a("strong"),TMo=o("roformer"),FMo=o(" \u2014 "),M$=a("a"),CMo=o("RoFormerForMultipleChoice"),MMo=o(" (RoFormer model)"),EMo=l(),g2=a("li"),Xoe=a("strong"),yMo=o("squeezebert"),wMo=o(" \u2014 "),E$=a("a"),AMo=o("SqueezeBertForMultipleChoice"),LMo=o(" (SqueezeBERT model)"),BMo=l(),h2=a("li"),zoe=a("strong"),xMo=o("xlm"),kMo=o(" \u2014 "),y$=a("a"),RMo=o("XLMForMultipleChoice"),SMo=o(" (XLM model)"),PMo=l(),u2=a("li"),Voe=a("strong"),$Mo=o("xlm-roberta"),IMo=o(" \u2014 "),w$=a("a"),jMo=o("XLMRobertaForMultipleChoice"),NMo=o(" (XLM-RoBERTa model)"),DMo=l(),p2=a("li"),Woe=a("strong"),qMo=o("xlm-roberta-xl"),GMo=o(" \u2014 "),A$=a("a"),OMo=o("XLMRobertaXLForMultipleChoice"),XMo=o(" (XLM-RoBERTa-XL model)"),zMo=l(),_2=a("li"),Qoe=a("strong"),VMo=o("xlnet"),WMo=o(" \u2014 "),L$=a("a"),QMo=o("XLNetForMultipleChoice"),HMo=o(" (XLNet model)"),UMo=l(),b2=a("li"),Hoe=a("strong"),JMo=o("yoso"),YMo=o(" \u2014 "),B$=a("a"),KMo=o("YosoForMultipleChoice"),ZMo=o(" (YOSO model)"),eEo=l(),v2=a("p"),oEo=o("The model is set in evaluation mode by default using "),Uoe=a("code"),tEo=o("model.eval()"),rEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Joe=a("code"),aEo=o("model.train()"),sEo=l(),Yoe=a("p"),nEo=o("Examples:"),lEo=l(),f(ey.$$.fragment),OLe=l(),Zd=a("h2"),T2=a("a"),Koe=a("span"),f(oy.$$.fragment),dEo=l(),Zoe=a("span"),iEo=o("AutoModelForNextSentencePrediction"),XLe=l(),Jo=a("div"),f(ty.$$.fragment),cEo=l(),ei=a("p"),fEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ete=a("code"),mEo=o("from_pretrained()"),gEo=o("class method or the "),ote=a("code"),hEo=o("from_config()"),uEo=o(`class
method.`),pEo=l(),ry=a("p"),_Eo=o("This class cannot be instantiated directly using "),tte=a("code"),bEo=o("__init__()"),vEo=o(" (throws an error)."),TEo=l(),Ot=a("div"),f(ay.$$.fragment),FEo=l(),rte=a("p"),CEo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),MEo=l(),oi=a("p"),EEo=o(`Note:
Loading a model from its configuration file does `),ate=a("strong"),yEo=o("not"),wEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ste=a("code"),AEo=o("from_pretrained()"),LEo=o("to load the model weights."),BEo=l(),nte=a("p"),xEo=o("Examples:"),kEo=l(),f(sy.$$.fragment),REo=l(),je=a("div"),f(ny.$$.fragment),SEo=l(),lte=a("p"),PEo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),$Eo=l(),Oa=a("p"),IEo=o("The model class to instantiate is selected based on the "),dte=a("code"),jEo=o("model_type"),NEo=o(` property of the config object (either
passed as an argument or loaded from `),ite=a("code"),DEo=o("pretrained_model_name_or_path"),qEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cte=a("code"),GEo=o("pretrained_model_name_or_path"),OEo=o(":"),XEo=l(),oa=a("ul"),F2=a("li"),fte=a("strong"),zEo=o("bert"),VEo=o(" \u2014 "),x$=a("a"),WEo=o("BertForNextSentencePrediction"),QEo=o(" (BERT model)"),HEo=l(),C2=a("li"),mte=a("strong"),UEo=o("fnet"),JEo=o(" \u2014 "),k$=a("a"),YEo=o("FNetForNextSentencePrediction"),KEo=o(" (FNet model)"),ZEo=l(),M2=a("li"),gte=a("strong"),e3o=o("megatron-bert"),o3o=o(" \u2014 "),R$=a("a"),t3o=o("MegatronBertForNextSentencePrediction"),r3o=o(" (MegatronBert model)"),a3o=l(),E2=a("li"),hte=a("strong"),s3o=o("mobilebert"),n3o=o(" \u2014 "),S$=a("a"),l3o=o("MobileBertForNextSentencePrediction"),d3o=o(" (MobileBERT model)"),i3o=l(),y2=a("li"),ute=a("strong"),c3o=o("qdqbert"),f3o=o(" \u2014 "),P$=a("a"),m3o=o("QDQBertForNextSentencePrediction"),g3o=o(" (QDQBert model)"),h3o=l(),w2=a("p"),u3o=o("The model is set in evaluation mode by default using "),pte=a("code"),p3o=o("model.eval()"),_3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_te=a("code"),b3o=o("model.train()"),v3o=l(),bte=a("p"),T3o=o("Examples:"),F3o=l(),f(ly.$$.fragment),zLe=l(),ti=a("h2"),A2=a("a"),vte=a("span"),f(dy.$$.fragment),C3o=l(),Tte=a("span"),M3o=o("AutoModelForTokenClassification"),VLe=l(),Yo=a("div"),f(iy.$$.fragment),E3o=l(),ri=a("p"),y3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Fte=a("code"),w3o=o("from_pretrained()"),A3o=o("class method or the "),Cte=a("code"),L3o=o("from_config()"),B3o=o(`class
method.`),x3o=l(),cy=a("p"),k3o=o("This class cannot be instantiated directly using "),Mte=a("code"),R3o=o("__init__()"),S3o=o(" (throws an error)."),P3o=l(),Xt=a("div"),f(fy.$$.fragment),$3o=l(),Ete=a("p"),I3o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),j3o=l(),ai=a("p"),N3o=o(`Note:
Loading a model from its configuration file does `),yte=a("strong"),D3o=o("not"),q3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wte=a("code"),G3o=o("from_pretrained()"),O3o=o("to load the model weights."),X3o=l(),Ate=a("p"),z3o=o("Examples:"),V3o=l(),f(my.$$.fragment),W3o=l(),Ne=a("div"),f(gy.$$.fragment),Q3o=l(),Lte=a("p"),H3o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),U3o=l(),Xa=a("p"),J3o=o("The model class to instantiate is selected based on the "),Bte=a("code"),Y3o=o("model_type"),K3o=o(` property of the config object (either
passed as an argument or loaded from `),xte=a("code"),Z3o=o("pretrained_model_name_or_path"),e5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kte=a("code"),o5o=o("pretrained_model_name_or_path"),t5o=o(":"),r5o=l(),N=a("ul"),L2=a("li"),Rte=a("strong"),a5o=o("albert"),s5o=o(" \u2014 "),$$=a("a"),n5o=o("AlbertForTokenClassification"),l5o=o(" (ALBERT model)"),d5o=l(),B2=a("li"),Ste=a("strong"),i5o=o("bert"),c5o=o(" \u2014 "),I$=a("a"),f5o=o("BertForTokenClassification"),m5o=o(" (BERT model)"),g5o=l(),x2=a("li"),Pte=a("strong"),h5o=o("big_bird"),u5o=o(" \u2014 "),j$=a("a"),p5o=o("BigBirdForTokenClassification"),_5o=o(" (BigBird model)"),b5o=l(),k2=a("li"),$te=a("strong"),v5o=o("camembert"),T5o=o(" \u2014 "),N$=a("a"),F5o=o("CamembertForTokenClassification"),C5o=o(" (CamemBERT model)"),M5o=l(),R2=a("li"),Ite=a("strong"),E5o=o("canine"),y5o=o(" \u2014 "),D$=a("a"),w5o=o("CanineForTokenClassification"),A5o=o(" (Canine model)"),L5o=l(),S2=a("li"),jte=a("strong"),B5o=o("convbert"),x5o=o(" \u2014 "),q$=a("a"),k5o=o("ConvBertForTokenClassification"),R5o=o(" (ConvBERT model)"),S5o=l(),P2=a("li"),Nte=a("strong"),P5o=o("deberta"),$5o=o(" \u2014 "),G$=a("a"),I5o=o("DebertaForTokenClassification"),j5o=o(" (DeBERTa model)"),N5o=l(),$2=a("li"),Dte=a("strong"),D5o=o("deberta-v2"),q5o=o(" \u2014 "),O$=a("a"),G5o=o("DebertaV2ForTokenClassification"),O5o=o(" (DeBERTa-v2 model)"),X5o=l(),I2=a("li"),qte=a("strong"),z5o=o("distilbert"),V5o=o(" \u2014 "),X$=a("a"),W5o=o("DistilBertForTokenClassification"),Q5o=o(" (DistilBERT model)"),H5o=l(),j2=a("li"),Gte=a("strong"),U5o=o("electra"),J5o=o(" \u2014 "),z$=a("a"),Y5o=o("ElectraForTokenClassification"),K5o=o(" (ELECTRA model)"),Z5o=l(),N2=a("li"),Ote=a("strong"),eyo=o("flaubert"),oyo=o(" \u2014 "),V$=a("a"),tyo=o("FlaubertForTokenClassification"),ryo=o(" (FlauBERT model)"),ayo=l(),D2=a("li"),Xte=a("strong"),syo=o("fnet"),nyo=o(" \u2014 "),W$=a("a"),lyo=o("FNetForTokenClassification"),dyo=o(" (FNet model)"),iyo=l(),q2=a("li"),zte=a("strong"),cyo=o("funnel"),fyo=o(" \u2014 "),Q$=a("a"),myo=o("FunnelForTokenClassification"),gyo=o(" (Funnel Transformer model)"),hyo=l(),G2=a("li"),Vte=a("strong"),uyo=o("gpt2"),pyo=o(" \u2014 "),H$=a("a"),_yo=o("GPT2ForTokenClassification"),byo=o(" (OpenAI GPT-2 model)"),vyo=l(),O2=a("li"),Wte=a("strong"),Tyo=o("ibert"),Fyo=o(" \u2014 "),U$=a("a"),Cyo=o("IBertForTokenClassification"),Myo=o(" (I-BERT model)"),Eyo=l(),X2=a("li"),Qte=a("strong"),yyo=o("layoutlm"),wyo=o(" \u2014 "),J$=a("a"),Ayo=o("LayoutLMForTokenClassification"),Lyo=o(" (LayoutLM model)"),Byo=l(),z2=a("li"),Hte=a("strong"),xyo=o("layoutlmv2"),kyo=o(" \u2014 "),Y$=a("a"),Ryo=o("LayoutLMv2ForTokenClassification"),Syo=o(" (LayoutLMv2 model)"),Pyo=l(),V2=a("li"),Ute=a("strong"),$yo=o("longformer"),Iyo=o(" \u2014 "),K$=a("a"),jyo=o("LongformerForTokenClassification"),Nyo=o(" (Longformer model)"),Dyo=l(),W2=a("li"),Jte=a("strong"),qyo=o("megatron-bert"),Gyo=o(" \u2014 "),Z$=a("a"),Oyo=o("MegatronBertForTokenClassification"),Xyo=o(" (MegatronBert model)"),zyo=l(),Q2=a("li"),Yte=a("strong"),Vyo=o("mobilebert"),Wyo=o(" \u2014 "),eI=a("a"),Qyo=o("MobileBertForTokenClassification"),Hyo=o(" (MobileBERT model)"),Uyo=l(),H2=a("li"),Kte=a("strong"),Jyo=o("mpnet"),Yyo=o(" \u2014 "),oI=a("a"),Kyo=o("MPNetForTokenClassification"),Zyo=o(" (MPNet model)"),ewo=l(),U2=a("li"),Zte=a("strong"),owo=o("nystromformer"),two=o(" \u2014 "),tI=a("a"),rwo=o("NystromformerForTokenClassification"),awo=o(" (Nystromformer model)"),swo=l(),J2=a("li"),ere=a("strong"),nwo=o("qdqbert"),lwo=o(" \u2014 "),rI=a("a"),dwo=o("QDQBertForTokenClassification"),iwo=o(" (QDQBert model)"),cwo=l(),Y2=a("li"),ore=a("strong"),fwo=o("rembert"),mwo=o(" \u2014 "),aI=a("a"),gwo=o("RemBertForTokenClassification"),hwo=o(" (RemBERT model)"),uwo=l(),K2=a("li"),tre=a("strong"),pwo=o("roberta"),_wo=o(" \u2014 "),sI=a("a"),bwo=o("RobertaForTokenClassification"),vwo=o(" (RoBERTa model)"),Two=l(),Z2=a("li"),rre=a("strong"),Fwo=o("roformer"),Cwo=o(" \u2014 "),nI=a("a"),Mwo=o("RoFormerForTokenClassification"),Ewo=o(" (RoFormer model)"),ywo=l(),ev=a("li"),are=a("strong"),wwo=o("squeezebert"),Awo=o(" \u2014 "),lI=a("a"),Lwo=o("SqueezeBertForTokenClassification"),Bwo=o(" (SqueezeBERT model)"),xwo=l(),ov=a("li"),sre=a("strong"),kwo=o("xlm"),Rwo=o(" \u2014 "),dI=a("a"),Swo=o("XLMForTokenClassification"),Pwo=o(" (XLM model)"),$wo=l(),tv=a("li"),nre=a("strong"),Iwo=o("xlm-roberta"),jwo=o(" \u2014 "),iI=a("a"),Nwo=o("XLMRobertaForTokenClassification"),Dwo=o(" (XLM-RoBERTa model)"),qwo=l(),rv=a("li"),lre=a("strong"),Gwo=o("xlm-roberta-xl"),Owo=o(" \u2014 "),cI=a("a"),Xwo=o("XLMRobertaXLForTokenClassification"),zwo=o(" (XLM-RoBERTa-XL model)"),Vwo=l(),av=a("li"),dre=a("strong"),Wwo=o("xlnet"),Qwo=o(" \u2014 "),fI=a("a"),Hwo=o("XLNetForTokenClassification"),Uwo=o(" (XLNet model)"),Jwo=l(),sv=a("li"),ire=a("strong"),Ywo=o("yoso"),Kwo=o(" \u2014 "),mI=a("a"),Zwo=o("YosoForTokenClassification"),eAo=o(" (YOSO model)"),oAo=l(),nv=a("p"),tAo=o("The model is set in evaluation mode by default using "),cre=a("code"),rAo=o("model.eval()"),aAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fre=a("code"),sAo=o("model.train()"),nAo=l(),mre=a("p"),lAo=o("Examples:"),dAo=l(),f(hy.$$.fragment),WLe=l(),si=a("h2"),lv=a("a"),gre=a("span"),f(uy.$$.fragment),iAo=l(),hre=a("span"),cAo=o("AutoModelForQuestionAnswering"),QLe=l(),Ko=a("div"),f(py.$$.fragment),fAo=l(),ni=a("p"),mAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ure=a("code"),gAo=o("from_pretrained()"),hAo=o("class method or the "),pre=a("code"),uAo=o("from_config()"),pAo=o(`class
method.`),_Ao=l(),_y=a("p"),bAo=o("This class cannot be instantiated directly using "),_re=a("code"),vAo=o("__init__()"),TAo=o(" (throws an error)."),FAo=l(),zt=a("div"),f(by.$$.fragment),CAo=l(),bre=a("p"),MAo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),EAo=l(),li=a("p"),yAo=o(`Note:
Loading a model from its configuration file does `),vre=a("strong"),wAo=o("not"),AAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tre=a("code"),LAo=o("from_pretrained()"),BAo=o("to load the model weights."),xAo=l(),Fre=a("p"),kAo=o("Examples:"),RAo=l(),f(vy.$$.fragment),SAo=l(),De=a("div"),f(Ty.$$.fragment),PAo=l(),Cre=a("p"),$Ao=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),IAo=l(),za=a("p"),jAo=o("The model class to instantiate is selected based on the "),Mre=a("code"),NAo=o("model_type"),DAo=o(` property of the config object (either
passed as an argument or loaded from `),Ere=a("code"),qAo=o("pretrained_model_name_or_path"),GAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yre=a("code"),OAo=o("pretrained_model_name_or_path"),XAo=o(":"),zAo=l(),R=a("ul"),dv=a("li"),wre=a("strong"),VAo=o("albert"),WAo=o(" \u2014 "),gI=a("a"),QAo=o("AlbertForQuestionAnswering"),HAo=o(" (ALBERT model)"),UAo=l(),iv=a("li"),Are=a("strong"),JAo=o("bart"),YAo=o(" \u2014 "),hI=a("a"),KAo=o("BartForQuestionAnswering"),ZAo=o(" (BART model)"),e0o=l(),cv=a("li"),Lre=a("strong"),o0o=o("bert"),t0o=o(" \u2014 "),uI=a("a"),r0o=o("BertForQuestionAnswering"),a0o=o(" (BERT model)"),s0o=l(),fv=a("li"),Bre=a("strong"),n0o=o("big_bird"),l0o=o(" \u2014 "),pI=a("a"),d0o=o("BigBirdForQuestionAnswering"),i0o=o(" (BigBird model)"),c0o=l(),mv=a("li"),xre=a("strong"),f0o=o("bigbird_pegasus"),m0o=o(" \u2014 "),_I=a("a"),g0o=o("BigBirdPegasusForQuestionAnswering"),h0o=o(" (BigBirdPegasus model)"),u0o=l(),gv=a("li"),kre=a("strong"),p0o=o("camembert"),_0o=o(" \u2014 "),bI=a("a"),b0o=o("CamembertForQuestionAnswering"),v0o=o(" (CamemBERT model)"),T0o=l(),hv=a("li"),Rre=a("strong"),F0o=o("canine"),C0o=o(" \u2014 "),vI=a("a"),M0o=o("CanineForQuestionAnswering"),E0o=o(" (Canine model)"),y0o=l(),uv=a("li"),Sre=a("strong"),w0o=o("convbert"),A0o=o(" \u2014 "),TI=a("a"),L0o=o("ConvBertForQuestionAnswering"),B0o=o(" (ConvBERT model)"),x0o=l(),pv=a("li"),Pre=a("strong"),k0o=o("deberta"),R0o=o(" \u2014 "),FI=a("a"),S0o=o("DebertaForQuestionAnswering"),P0o=o(" (DeBERTa model)"),$0o=l(),_v=a("li"),$re=a("strong"),I0o=o("deberta-v2"),j0o=o(" \u2014 "),CI=a("a"),N0o=o("DebertaV2ForQuestionAnswering"),D0o=o(" (DeBERTa-v2 model)"),q0o=l(),bv=a("li"),Ire=a("strong"),G0o=o("distilbert"),O0o=o(" \u2014 "),MI=a("a"),X0o=o("DistilBertForQuestionAnswering"),z0o=o(" (DistilBERT model)"),V0o=l(),vv=a("li"),jre=a("strong"),W0o=o("electra"),Q0o=o(" \u2014 "),EI=a("a"),H0o=o("ElectraForQuestionAnswering"),U0o=o(" (ELECTRA model)"),J0o=l(),Tv=a("li"),Nre=a("strong"),Y0o=o("flaubert"),K0o=o(" \u2014 "),yI=a("a"),Z0o=o("FlaubertForQuestionAnsweringSimple"),e6o=o(" (FlauBERT model)"),o6o=l(),Fv=a("li"),Dre=a("strong"),t6o=o("fnet"),r6o=o(" \u2014 "),wI=a("a"),a6o=o("FNetForQuestionAnswering"),s6o=o(" (FNet model)"),n6o=l(),Cv=a("li"),qre=a("strong"),l6o=o("funnel"),d6o=o(" \u2014 "),AI=a("a"),i6o=o("FunnelForQuestionAnswering"),c6o=o(" (Funnel Transformer model)"),f6o=l(),Mv=a("li"),Gre=a("strong"),m6o=o("gptj"),g6o=o(" \u2014 "),LI=a("a"),h6o=o("GPTJForQuestionAnswering"),u6o=o(" (GPT-J model)"),p6o=l(),Ev=a("li"),Ore=a("strong"),_6o=o("ibert"),b6o=o(" \u2014 "),BI=a("a"),v6o=o("IBertForQuestionAnswering"),T6o=o(" (I-BERT model)"),F6o=l(),yv=a("li"),Xre=a("strong"),C6o=o("layoutlmv2"),M6o=o(" \u2014 "),xI=a("a"),E6o=o("LayoutLMv2ForQuestionAnswering"),y6o=o(" (LayoutLMv2 model)"),w6o=l(),wv=a("li"),zre=a("strong"),A6o=o("led"),L6o=o(" \u2014 "),kI=a("a"),B6o=o("LEDForQuestionAnswering"),x6o=o(" (LED model)"),k6o=l(),Av=a("li"),Vre=a("strong"),R6o=o("longformer"),S6o=o(" \u2014 "),RI=a("a"),P6o=o("LongformerForQuestionAnswering"),$6o=o(" (Longformer model)"),I6o=l(),Lv=a("li"),Wre=a("strong"),j6o=o("lxmert"),N6o=o(" \u2014 "),SI=a("a"),D6o=o("LxmertForQuestionAnswering"),q6o=o(" (LXMERT model)"),G6o=l(),Bv=a("li"),Qre=a("strong"),O6o=o("mbart"),X6o=o(" \u2014 "),PI=a("a"),z6o=o("MBartForQuestionAnswering"),V6o=o(" (mBART model)"),W6o=l(),xv=a("li"),Hre=a("strong"),Q6o=o("megatron-bert"),H6o=o(" \u2014 "),$I=a("a"),U6o=o("MegatronBertForQuestionAnswering"),J6o=o(" (MegatronBert model)"),Y6o=l(),kv=a("li"),Ure=a("strong"),K6o=o("mobilebert"),Z6o=o(" \u2014 "),II=a("a"),eLo=o("MobileBertForQuestionAnswering"),oLo=o(" (MobileBERT model)"),tLo=l(),Rv=a("li"),Jre=a("strong"),rLo=o("mpnet"),aLo=o(" \u2014 "),jI=a("a"),sLo=o("MPNetForQuestionAnswering"),nLo=o(" (MPNet model)"),lLo=l(),Sv=a("li"),Yre=a("strong"),dLo=o("nystromformer"),iLo=o(" \u2014 "),NI=a("a"),cLo=o("NystromformerForQuestionAnswering"),fLo=o(" (Nystromformer model)"),mLo=l(),Pv=a("li"),Kre=a("strong"),gLo=o("qdqbert"),hLo=o(" \u2014 "),DI=a("a"),uLo=o("QDQBertForQuestionAnswering"),pLo=o(" (QDQBert model)"),_Lo=l(),$v=a("li"),Zre=a("strong"),bLo=o("reformer"),vLo=o(" \u2014 "),qI=a("a"),TLo=o("ReformerForQuestionAnswering"),FLo=o(" (Reformer model)"),CLo=l(),Iv=a("li"),eae=a("strong"),MLo=o("rembert"),ELo=o(" \u2014 "),GI=a("a"),yLo=o("RemBertForQuestionAnswering"),wLo=o(" (RemBERT model)"),ALo=l(),jv=a("li"),oae=a("strong"),LLo=o("roberta"),BLo=o(" \u2014 "),OI=a("a"),xLo=o("RobertaForQuestionAnswering"),kLo=o(" (RoBERTa model)"),RLo=l(),Nv=a("li"),tae=a("strong"),SLo=o("roformer"),PLo=o(" \u2014 "),XI=a("a"),$Lo=o("RoFormerForQuestionAnswering"),ILo=o(" (RoFormer model)"),jLo=l(),Dv=a("li"),rae=a("strong"),NLo=o("splinter"),DLo=o(" \u2014 "),zI=a("a"),qLo=o("SplinterForQuestionAnswering"),GLo=o(" (Splinter model)"),OLo=l(),qv=a("li"),aae=a("strong"),XLo=o("squeezebert"),zLo=o(" \u2014 "),VI=a("a"),VLo=o("SqueezeBertForQuestionAnswering"),WLo=o(" (SqueezeBERT model)"),QLo=l(),Gv=a("li"),sae=a("strong"),HLo=o("xlm"),ULo=o(" \u2014 "),WI=a("a"),JLo=o("XLMForQuestionAnsweringSimple"),YLo=o(" (XLM model)"),KLo=l(),Ov=a("li"),nae=a("strong"),ZLo=o("xlm-roberta"),e7o=o(" \u2014 "),QI=a("a"),o7o=o("XLMRobertaForQuestionAnswering"),t7o=o(" (XLM-RoBERTa model)"),r7o=l(),Xv=a("li"),lae=a("strong"),a7o=o("xlm-roberta-xl"),s7o=o(" \u2014 "),HI=a("a"),n7o=o("XLMRobertaXLForQuestionAnswering"),l7o=o(" (XLM-RoBERTa-XL model)"),d7o=l(),zv=a("li"),dae=a("strong"),i7o=o("xlnet"),c7o=o(" \u2014 "),UI=a("a"),f7o=o("XLNetForQuestionAnsweringSimple"),m7o=o(" (XLNet model)"),g7o=l(),Vv=a("li"),iae=a("strong"),h7o=o("yoso"),u7o=o(" \u2014 "),JI=a("a"),p7o=o("YosoForQuestionAnswering"),_7o=o(" (YOSO model)"),b7o=l(),Wv=a("p"),v7o=o("The model is set in evaluation mode by default using "),cae=a("code"),T7o=o("model.eval()"),F7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fae=a("code"),C7o=o("model.train()"),M7o=l(),mae=a("p"),E7o=o("Examples:"),y7o=l(),f(Fy.$$.fragment),HLe=l(),di=a("h2"),Qv=a("a"),gae=a("span"),f(Cy.$$.fragment),w7o=l(),hae=a("span"),A7o=o("AutoModelForTableQuestionAnswering"),ULe=l(),Zo=a("div"),f(My.$$.fragment),L7o=l(),ii=a("p"),B7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uae=a("code"),x7o=o("from_pretrained()"),k7o=o("class method or the "),pae=a("code"),R7o=o("from_config()"),S7o=o(`class
method.`),P7o=l(),Ey=a("p"),$7o=o("This class cannot be instantiated directly using "),_ae=a("code"),I7o=o("__init__()"),j7o=o(" (throws an error)."),N7o=l(),Vt=a("div"),f(yy.$$.fragment),D7o=l(),bae=a("p"),q7o=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),G7o=l(),ci=a("p"),O7o=o(`Note:
Loading a model from its configuration file does `),vae=a("strong"),X7o=o("not"),z7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tae=a("code"),V7o=o("from_pretrained()"),W7o=o("to load the model weights."),Q7o=l(),Fae=a("p"),H7o=o("Examples:"),U7o=l(),f(wy.$$.fragment),J7o=l(),qe=a("div"),f(Ay.$$.fragment),Y7o=l(),Cae=a("p"),K7o=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Z7o=l(),Va=a("p"),e8o=o("The model class to instantiate is selected based on the "),Mae=a("code"),o8o=o("model_type"),t8o=o(` property of the config object (either
passed as an argument or loaded from `),Eae=a("code"),r8o=o("pretrained_model_name_or_path"),a8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yae=a("code"),s8o=o("pretrained_model_name_or_path"),n8o=o(":"),l8o=l(),wae=a("ul"),Hv=a("li"),Aae=a("strong"),d8o=o("tapas"),i8o=o(" \u2014 "),YI=a("a"),c8o=o("TapasForQuestionAnswering"),f8o=o(" (TAPAS model)"),m8o=l(),Uv=a("p"),g8o=o("The model is set in evaluation mode by default using "),Lae=a("code"),h8o=o("model.eval()"),u8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bae=a("code"),p8o=o("model.train()"),_8o=l(),xae=a("p"),b8o=o("Examples:"),v8o=l(),f(Ly.$$.fragment),JLe=l(),fi=a("h2"),Jv=a("a"),kae=a("span"),f(By.$$.fragment),T8o=l(),Rae=a("span"),F8o=o("AutoModelForImageClassification"),YLe=l(),et=a("div"),f(xy.$$.fragment),C8o=l(),mi=a("p"),M8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Sae=a("code"),E8o=o("from_pretrained()"),y8o=o("class method or the "),Pae=a("code"),w8o=o("from_config()"),A8o=o(`class
method.`),L8o=l(),ky=a("p"),B8o=o("This class cannot be instantiated directly using "),$ae=a("code"),x8o=o("__init__()"),k8o=o(" (throws an error)."),R8o=l(),Wt=a("div"),f(Ry.$$.fragment),S8o=l(),Iae=a("p"),P8o=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$8o=l(),gi=a("p"),I8o=o(`Note:
Loading a model from its configuration file does `),jae=a("strong"),j8o=o("not"),N8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nae=a("code"),D8o=o("from_pretrained()"),q8o=o("to load the model weights."),G8o=l(),Dae=a("p"),O8o=o("Examples:"),X8o=l(),f(Sy.$$.fragment),z8o=l(),Ge=a("div"),f(Py.$$.fragment),V8o=l(),qae=a("p"),W8o=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Q8o=l(),Wa=a("p"),H8o=o("The model class to instantiate is selected based on the "),Gae=a("code"),U8o=o("model_type"),J8o=o(` property of the config object (either
passed as an argument or loaded from `),Oae=a("code"),Y8o=o("pretrained_model_name_or_path"),K8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xae=a("code"),Z8o=o("pretrained_model_name_or_path"),e9o=o(":"),o9o=l(),we=a("ul"),Yv=a("li"),zae=a("strong"),t9o=o("beit"),r9o=o(" \u2014 "),KI=a("a"),a9o=o("BeitForImageClassification"),s9o=o(" (BEiT model)"),n9o=l(),Kv=a("li"),Vae=a("strong"),l9o=o("convnext"),d9o=o(" \u2014 "),ZI=a("a"),i9o=o("ConvNextForImageClassification"),c9o=o(" (ConvNext model)"),f9o=l(),An=a("li"),Wae=a("strong"),m9o=o("deit"),g9o=o(" \u2014 "),ej=a("a"),h9o=o("DeiTForImageClassification"),u9o=o(" or "),oj=a("a"),p9o=o("DeiTForImageClassificationWithTeacher"),_9o=o(" (DeiT model)"),b9o=l(),Zv=a("li"),Qae=a("strong"),v9o=o("imagegpt"),T9o=o(" \u2014 "),tj=a("a"),F9o=o("ImageGPTForImageClassification"),C9o=o(" (ImageGPT model)"),M9o=l(),ra=a("li"),Hae=a("strong"),E9o=o("perceiver"),y9o=o(" \u2014 "),rj=a("a"),w9o=o("PerceiverForImageClassificationLearned"),A9o=o(" or "),aj=a("a"),L9o=o("PerceiverForImageClassificationFourier"),B9o=o(" or "),sj=a("a"),x9o=o("PerceiverForImageClassificationConvProcessing"),k9o=o(" (Perceiver model)"),R9o=l(),eT=a("li"),Uae=a("strong"),S9o=o("segformer"),P9o=o(" \u2014 "),nj=a("a"),$9o=o("SegformerForImageClassification"),I9o=o(" (SegFormer model)"),j9o=l(),oT=a("li"),Jae=a("strong"),N9o=o("swin"),D9o=o(" \u2014 "),lj=a("a"),q9o=o("SwinForImageClassification"),G9o=o(" (Swin model)"),O9o=l(),tT=a("li"),Yae=a("strong"),X9o=o("vit"),z9o=o(" \u2014 "),dj=a("a"),V9o=o("ViTForImageClassification"),W9o=o(" (ViT model)"),Q9o=l(),rT=a("p"),H9o=o("The model is set in evaluation mode by default using "),Kae=a("code"),U9o=o("model.eval()"),J9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zae=a("code"),Y9o=o("model.train()"),K9o=l(),ese=a("p"),Z9o=o("Examples:"),eBo=l(),f($y.$$.fragment),KLe=l(),hi=a("h2"),aT=a("a"),ose=a("span"),f(Iy.$$.fragment),oBo=l(),tse=a("span"),tBo=o("AutoModelForVision2Seq"),ZLe=l(),ot=a("div"),f(jy.$$.fragment),rBo=l(),ui=a("p"),aBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),rse=a("code"),sBo=o("from_pretrained()"),nBo=o("class method or the "),ase=a("code"),lBo=o("from_config()"),dBo=o(`class
method.`),iBo=l(),Ny=a("p"),cBo=o("This class cannot be instantiated directly using "),sse=a("code"),fBo=o("__init__()"),mBo=o(" (throws an error)."),gBo=l(),Qt=a("div"),f(Dy.$$.fragment),hBo=l(),nse=a("p"),uBo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),pBo=l(),pi=a("p"),_Bo=o(`Note:
Loading a model from its configuration file does `),lse=a("strong"),bBo=o("not"),vBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dse=a("code"),TBo=o("from_pretrained()"),FBo=o("to load the model weights."),CBo=l(),ise=a("p"),MBo=o("Examples:"),EBo=l(),f(qy.$$.fragment),yBo=l(),Oe=a("div"),f(Gy.$$.fragment),wBo=l(),cse=a("p"),ABo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),LBo=l(),Qa=a("p"),BBo=o("The model class to instantiate is selected based on the "),fse=a("code"),xBo=o("model_type"),kBo=o(` property of the config object (either
passed as an argument or loaded from `),mse=a("code"),RBo=o("pretrained_model_name_or_path"),SBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gse=a("code"),PBo=o("pretrained_model_name_or_path"),$Bo=o(":"),IBo=l(),hse=a("ul"),sT=a("li"),use=a("strong"),jBo=o("vision-encoder-decoder"),NBo=o(" \u2014 "),ij=a("a"),DBo=o("VisionEncoderDecoderModel"),qBo=o(" (Vision Encoder decoder model)"),GBo=l(),nT=a("p"),OBo=o("The model is set in evaluation mode by default using "),pse=a("code"),XBo=o("model.eval()"),zBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_se=a("code"),VBo=o("model.train()"),WBo=l(),bse=a("p"),QBo=o("Examples:"),HBo=l(),f(Oy.$$.fragment),e7e=l(),_i=a("h2"),lT=a("a"),vse=a("span"),f(Xy.$$.fragment),UBo=l(),Tse=a("span"),JBo=o("AutoModelForAudioClassification"),o7e=l(),tt=a("div"),f(zy.$$.fragment),YBo=l(),bi=a("p"),KBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Fse=a("code"),ZBo=o("from_pretrained()"),exo=o("class method or the "),Cse=a("code"),oxo=o("from_config()"),txo=o(`class
method.`),rxo=l(),Vy=a("p"),axo=o("This class cannot be instantiated directly using "),Mse=a("code"),sxo=o("__init__()"),nxo=o(" (throws an error)."),lxo=l(),Ht=a("div"),f(Wy.$$.fragment),dxo=l(),Ese=a("p"),ixo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),cxo=l(),vi=a("p"),fxo=o(`Note:
Loading a model from its configuration file does `),yse=a("strong"),mxo=o("not"),gxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wse=a("code"),hxo=o("from_pretrained()"),uxo=o("to load the model weights."),pxo=l(),Ase=a("p"),_xo=o("Examples:"),bxo=l(),f(Qy.$$.fragment),vxo=l(),Xe=a("div"),f(Hy.$$.fragment),Txo=l(),Lse=a("p"),Fxo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Cxo=l(),Ha=a("p"),Mxo=o("The model class to instantiate is selected based on the "),Bse=a("code"),Exo=o("model_type"),yxo=o(` property of the config object (either
passed as an argument or loaded from `),xse=a("code"),wxo=o("pretrained_model_name_or_path"),Axo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kse=a("code"),Lxo=o("pretrained_model_name_or_path"),Bxo=o(":"),xxo=l(),to=a("ul"),dT=a("li"),Rse=a("strong"),kxo=o("hubert"),Rxo=o(" \u2014 "),cj=a("a"),Sxo=o("HubertForSequenceClassification"),Pxo=o(" (Hubert model)"),$xo=l(),iT=a("li"),Sse=a("strong"),Ixo=o("sew"),jxo=o(" \u2014 "),fj=a("a"),Nxo=o("SEWForSequenceClassification"),Dxo=o(" (SEW model)"),qxo=l(),cT=a("li"),Pse=a("strong"),Gxo=o("sew-d"),Oxo=o(" \u2014 "),mj=a("a"),Xxo=o("SEWDForSequenceClassification"),zxo=o(" (SEW-D model)"),Vxo=l(),fT=a("li"),$se=a("strong"),Wxo=o("unispeech"),Qxo=o(" \u2014 "),gj=a("a"),Hxo=o("UniSpeechForSequenceClassification"),Uxo=o(" (UniSpeech model)"),Jxo=l(),mT=a("li"),Ise=a("strong"),Yxo=o("unispeech-sat"),Kxo=o(" \u2014 "),hj=a("a"),Zxo=o("UniSpeechSatForSequenceClassification"),eko=o(" (UniSpeechSat model)"),oko=l(),gT=a("li"),jse=a("strong"),tko=o("wav2vec2"),rko=o(" \u2014 "),uj=a("a"),ako=o("Wav2Vec2ForSequenceClassification"),sko=o(" (Wav2Vec2 model)"),nko=l(),hT=a("li"),Nse=a("strong"),lko=o("wavlm"),dko=o(" \u2014 "),pj=a("a"),iko=o("WavLMForSequenceClassification"),cko=o(" (WavLM model)"),fko=l(),uT=a("p"),mko=o("The model is set in evaluation mode by default using "),Dse=a("code"),gko=o("model.eval()"),hko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qse=a("code"),uko=o("model.train()"),pko=l(),Gse=a("p"),_ko=o("Examples:"),bko=l(),f(Uy.$$.fragment),t7e=l(),Ti=a("h2"),pT=a("a"),Ose=a("span"),f(Jy.$$.fragment),vko=l(),Xse=a("span"),Tko=o("AutoModelForAudioFrameClassification"),r7e=l(),rt=a("div"),f(Yy.$$.fragment),Fko=l(),Fi=a("p"),Cko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),zse=a("code"),Mko=o("from_pretrained()"),Eko=o("class method or the "),Vse=a("code"),yko=o("from_config()"),wko=o(`class
method.`),Ako=l(),Ky=a("p"),Lko=o("This class cannot be instantiated directly using "),Wse=a("code"),Bko=o("__init__()"),xko=o(" (throws an error)."),kko=l(),Ut=a("div"),f(Zy.$$.fragment),Rko=l(),Qse=a("p"),Sko=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Pko=l(),Ci=a("p"),$ko=o(`Note:
Loading a model from its configuration file does `),Hse=a("strong"),Iko=o("not"),jko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Use=a("code"),Nko=o("from_pretrained()"),Dko=o("to load the model weights."),qko=l(),Jse=a("p"),Gko=o("Examples:"),Oko=l(),f(ew.$$.fragment),Xko=l(),ze=a("div"),f(ow.$$.fragment),zko=l(),Yse=a("p"),Vko=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Wko=l(),Ua=a("p"),Qko=o("The model class to instantiate is selected based on the "),Kse=a("code"),Hko=o("model_type"),Uko=o(` property of the config object (either
passed as an argument or loaded from `),Zse=a("code"),Jko=o("pretrained_model_name_or_path"),Yko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ene=a("code"),Kko=o("pretrained_model_name_or_path"),Zko=o(":"),eRo=l(),Mi=a("ul"),_T=a("li"),one=a("strong"),oRo=o("unispeech-sat"),tRo=o(" \u2014 "),_j=a("a"),rRo=o("UniSpeechSatForAudioFrameClassification"),aRo=o(" (UniSpeechSat model)"),sRo=l(),bT=a("li"),tne=a("strong"),nRo=o("wav2vec2"),lRo=o(" \u2014 "),bj=a("a"),dRo=o("Wav2Vec2ForAudioFrameClassification"),iRo=o(" (Wav2Vec2 model)"),cRo=l(),vT=a("li"),rne=a("strong"),fRo=o("wavlm"),mRo=o(" \u2014 "),vj=a("a"),gRo=o("WavLMForAudioFrameClassification"),hRo=o(" (WavLM model)"),uRo=l(),TT=a("p"),pRo=o("The model is set in evaluation mode by default using "),ane=a("code"),_Ro=o("model.eval()"),bRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sne=a("code"),vRo=o("model.train()"),TRo=l(),nne=a("p"),FRo=o("Examples:"),CRo=l(),f(tw.$$.fragment),a7e=l(),Ei=a("h2"),FT=a("a"),lne=a("span"),f(rw.$$.fragment),MRo=l(),dne=a("span"),ERo=o("AutoModelForCTC"),s7e=l(),at=a("div"),f(aw.$$.fragment),yRo=l(),yi=a("p"),wRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),ine=a("code"),ARo=o("from_pretrained()"),LRo=o("class method or the "),cne=a("code"),BRo=o("from_config()"),xRo=o(`class
method.`),kRo=l(),sw=a("p"),RRo=o("This class cannot be instantiated directly using "),fne=a("code"),SRo=o("__init__()"),PRo=o(" (throws an error)."),$Ro=l(),Jt=a("div"),f(nw.$$.fragment),IRo=l(),mne=a("p"),jRo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),NRo=l(),wi=a("p"),DRo=o(`Note:
Loading a model from its configuration file does `),gne=a("strong"),qRo=o("not"),GRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hne=a("code"),ORo=o("from_pretrained()"),XRo=o("to load the model weights."),zRo=l(),une=a("p"),VRo=o("Examples:"),WRo=l(),f(lw.$$.fragment),QRo=l(),Ve=a("div"),f(dw.$$.fragment),HRo=l(),pne=a("p"),URo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),JRo=l(),Ja=a("p"),YRo=o("The model class to instantiate is selected based on the "),_ne=a("code"),KRo=o("model_type"),ZRo=o(` property of the config object (either
passed as an argument or loaded from `),bne=a("code"),eSo=o("pretrained_model_name_or_path"),oSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vne=a("code"),tSo=o("pretrained_model_name_or_path"),rSo=o(":"),aSo=l(),ro=a("ul"),CT=a("li"),Tne=a("strong"),sSo=o("hubert"),nSo=o(" \u2014 "),Tj=a("a"),lSo=o("HubertForCTC"),dSo=o(" (Hubert model)"),iSo=l(),MT=a("li"),Fne=a("strong"),cSo=o("sew"),fSo=o(" \u2014 "),Fj=a("a"),mSo=o("SEWForCTC"),gSo=o(" (SEW model)"),hSo=l(),ET=a("li"),Cne=a("strong"),uSo=o("sew-d"),pSo=o(" \u2014 "),Cj=a("a"),_So=o("SEWDForCTC"),bSo=o(" (SEW-D model)"),vSo=l(),yT=a("li"),Mne=a("strong"),TSo=o("unispeech"),FSo=o(" \u2014 "),Mj=a("a"),CSo=o("UniSpeechForCTC"),MSo=o(" (UniSpeech model)"),ESo=l(),wT=a("li"),Ene=a("strong"),ySo=o("unispeech-sat"),wSo=o(" \u2014 "),Ej=a("a"),ASo=o("UniSpeechSatForCTC"),LSo=o(" (UniSpeechSat model)"),BSo=l(),AT=a("li"),yne=a("strong"),xSo=o("wav2vec2"),kSo=o(" \u2014 "),yj=a("a"),RSo=o("Wav2Vec2ForCTC"),SSo=o(" (Wav2Vec2 model)"),PSo=l(),LT=a("li"),wne=a("strong"),$So=o("wavlm"),ISo=o(" \u2014 "),wj=a("a"),jSo=o("WavLMForCTC"),NSo=o(" (WavLM model)"),DSo=l(),BT=a("p"),qSo=o("The model is set in evaluation mode by default using "),Ane=a("code"),GSo=o("model.eval()"),OSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lne=a("code"),XSo=o("model.train()"),zSo=l(),Bne=a("p"),VSo=o("Examples:"),WSo=l(),f(iw.$$.fragment),n7e=l(),Ai=a("h2"),xT=a("a"),xne=a("span"),f(cw.$$.fragment),QSo=l(),kne=a("span"),HSo=o("AutoModelForSpeechSeq2Seq"),l7e=l(),st=a("div"),f(fw.$$.fragment),USo=l(),Li=a("p"),JSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Rne=a("code"),YSo=o("from_pretrained()"),KSo=o("class method or the "),Sne=a("code"),ZSo=o("from_config()"),ePo=o(`class
method.`),oPo=l(),mw=a("p"),tPo=o("This class cannot be instantiated directly using "),Pne=a("code"),rPo=o("__init__()"),aPo=o(" (throws an error)."),sPo=l(),Yt=a("div"),f(gw.$$.fragment),nPo=l(),$ne=a("p"),lPo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),dPo=l(),Bi=a("p"),iPo=o(`Note:
Loading a model from its configuration file does `),Ine=a("strong"),cPo=o("not"),fPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jne=a("code"),mPo=o("from_pretrained()"),gPo=o("to load the model weights."),hPo=l(),Nne=a("p"),uPo=o("Examples:"),pPo=l(),f(hw.$$.fragment),_Po=l(),We=a("div"),f(uw.$$.fragment),bPo=l(),Dne=a("p"),vPo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),TPo=l(),Ya=a("p"),FPo=o("The model class to instantiate is selected based on the "),qne=a("code"),CPo=o("model_type"),MPo=o(` property of the config object (either
passed as an argument or loaded from `),Gne=a("code"),EPo=o("pretrained_model_name_or_path"),yPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),One=a("code"),wPo=o("pretrained_model_name_or_path"),APo=o(":"),LPo=l(),pw=a("ul"),kT=a("li"),Xne=a("strong"),BPo=o("speech-encoder-decoder"),xPo=o(" \u2014 "),Aj=a("a"),kPo=o("SpeechEncoderDecoderModel"),RPo=o(" (Speech Encoder decoder model)"),SPo=l(),RT=a("li"),zne=a("strong"),PPo=o("speech_to_text"),$Po=o(" \u2014 "),Lj=a("a"),IPo=o("Speech2TextForConditionalGeneration"),jPo=o(" (Speech2Text model)"),NPo=l(),ST=a("p"),DPo=o("The model is set in evaluation mode by default using "),Vne=a("code"),qPo=o("model.eval()"),GPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wne=a("code"),OPo=o("model.train()"),XPo=l(),Qne=a("p"),zPo=o("Examples:"),VPo=l(),f(_w.$$.fragment),d7e=l(),xi=a("h2"),PT=a("a"),Hne=a("span"),f(bw.$$.fragment),WPo=l(),Une=a("span"),QPo=o("AutoModelForAudioXVector"),i7e=l(),nt=a("div"),f(vw.$$.fragment),HPo=l(),ki=a("p"),UPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Jne=a("code"),JPo=o("from_pretrained()"),YPo=o("class method or the "),Yne=a("code"),KPo=o("from_config()"),ZPo=o(`class
method.`),e$o=l(),Tw=a("p"),o$o=o("This class cannot be instantiated directly using "),Kne=a("code"),t$o=o("__init__()"),r$o=o(" (throws an error)."),a$o=l(),Kt=a("div"),f(Fw.$$.fragment),s$o=l(),Zne=a("p"),n$o=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),l$o=l(),Ri=a("p"),d$o=o(`Note:
Loading a model from its configuration file does `),ele=a("strong"),i$o=o("not"),c$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ole=a("code"),f$o=o("from_pretrained()"),m$o=o("to load the model weights."),g$o=l(),tle=a("p"),h$o=o("Examples:"),u$o=l(),f(Cw.$$.fragment),p$o=l(),Qe=a("div"),f(Mw.$$.fragment),_$o=l(),rle=a("p"),b$o=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),v$o=l(),Ka=a("p"),T$o=o("The model class to instantiate is selected based on the "),ale=a("code"),F$o=o("model_type"),C$o=o(` property of the config object (either
passed as an argument or loaded from `),sle=a("code"),M$o=o("pretrained_model_name_or_path"),E$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nle=a("code"),y$o=o("pretrained_model_name_or_path"),w$o=o(":"),A$o=l(),Si=a("ul"),$T=a("li"),lle=a("strong"),L$o=o("unispeech-sat"),B$o=o(" \u2014 "),Bj=a("a"),x$o=o("UniSpeechSatForXVector"),k$o=o(" (UniSpeechSat model)"),R$o=l(),IT=a("li"),dle=a("strong"),S$o=o("wav2vec2"),P$o=o(" \u2014 "),xj=a("a"),$$o=o("Wav2Vec2ForXVector"),I$o=o(" (Wav2Vec2 model)"),j$o=l(),jT=a("li"),ile=a("strong"),N$o=o("wavlm"),D$o=o(" \u2014 "),kj=a("a"),q$o=o("WavLMForXVector"),G$o=o(" (WavLM model)"),O$o=l(),NT=a("p"),X$o=o("The model is set in evaluation mode by default using "),cle=a("code"),z$o=o("model.eval()"),V$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fle=a("code"),W$o=o("model.train()"),Q$o=l(),mle=a("p"),H$o=o("Examples:"),U$o=l(),f(Ew.$$.fragment),c7e=l(),Pi=a("h2"),DT=a("a"),gle=a("span"),f(yw.$$.fragment),J$o=l(),hle=a("span"),Y$o=o("AutoModelForObjectDetection"),f7e=l(),lt=a("div"),f(ww.$$.fragment),K$o=l(),$i=a("p"),Z$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),ule=a("code"),eIo=o("from_pretrained()"),oIo=o("class method or the "),ple=a("code"),tIo=o("from_config()"),rIo=o(`class
method.`),aIo=l(),Aw=a("p"),sIo=o("This class cannot be instantiated directly using "),_le=a("code"),nIo=o("__init__()"),lIo=o(" (throws an error)."),dIo=l(),Zt=a("div"),f(Lw.$$.fragment),iIo=l(),ble=a("p"),cIo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),fIo=l(),Ii=a("p"),mIo=o(`Note:
Loading a model from its configuration file does `),vle=a("strong"),gIo=o("not"),hIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tle=a("code"),uIo=o("from_pretrained()"),pIo=o("to load the model weights."),_Io=l(),Fle=a("p"),bIo=o("Examples:"),vIo=l(),f(Bw.$$.fragment),TIo=l(),He=a("div"),f(xw.$$.fragment),FIo=l(),Cle=a("p"),CIo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),MIo=l(),Za=a("p"),EIo=o("The model class to instantiate is selected based on the "),Mle=a("code"),yIo=o("model_type"),wIo=o(` property of the config object (either
passed as an argument or loaded from `),Ele=a("code"),AIo=o("pretrained_model_name_or_path"),LIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yle=a("code"),BIo=o("pretrained_model_name_or_path"),xIo=o(":"),kIo=l(),wle=a("ul"),qT=a("li"),Ale=a("strong"),RIo=o("detr"),SIo=o(" \u2014 "),Rj=a("a"),PIo=o("DetrForObjectDetection"),$Io=o(" (DETR model)"),IIo=l(),GT=a("p"),jIo=o("The model is set in evaluation mode by default using "),Lle=a("code"),NIo=o("model.eval()"),DIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ble=a("code"),qIo=o("model.train()"),GIo=l(),xle=a("p"),OIo=o("Examples:"),XIo=l(),f(kw.$$.fragment),m7e=l(),ji=a("h2"),OT=a("a"),kle=a("span"),f(Rw.$$.fragment),zIo=l(),Rle=a("span"),VIo=o("AutoModelForImageSegmentation"),g7e=l(),dt=a("div"),f(Sw.$$.fragment),WIo=l(),Ni=a("p"),QIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Sle=a("code"),HIo=o("from_pretrained()"),UIo=o("class method or the "),Ple=a("code"),JIo=o("from_config()"),YIo=o(`class
method.`),KIo=l(),Pw=a("p"),ZIo=o("This class cannot be instantiated directly using "),$le=a("code"),ejo=o("__init__()"),ojo=o(" (throws an error)."),tjo=l(),er=a("div"),f($w.$$.fragment),rjo=l(),Ile=a("p"),ajo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),sjo=l(),Di=a("p"),njo=o(`Note:
Loading a model from its configuration file does `),jle=a("strong"),ljo=o("not"),djo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nle=a("code"),ijo=o("from_pretrained()"),cjo=o("to load the model weights."),fjo=l(),Dle=a("p"),mjo=o("Examples:"),gjo=l(),f(Iw.$$.fragment),hjo=l(),Ue=a("div"),f(jw.$$.fragment),ujo=l(),qle=a("p"),pjo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),_jo=l(),es=a("p"),bjo=o("The model class to instantiate is selected based on the "),Gle=a("code"),vjo=o("model_type"),Tjo=o(` property of the config object (either
passed as an argument or loaded from `),Ole=a("code"),Fjo=o("pretrained_model_name_or_path"),Cjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xle=a("code"),Mjo=o("pretrained_model_name_or_path"),Ejo=o(":"),yjo=l(),zle=a("ul"),XT=a("li"),Vle=a("strong"),wjo=o("detr"),Ajo=o(" \u2014 "),Sj=a("a"),Ljo=o("DetrForSegmentation"),Bjo=o(" (DETR model)"),xjo=l(),zT=a("p"),kjo=o("The model is set in evaluation mode by default using "),Wle=a("code"),Rjo=o("model.eval()"),Sjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qle=a("code"),Pjo=o("model.train()"),$jo=l(),Hle=a("p"),Ijo=o("Examples:"),jjo=l(),f(Nw.$$.fragment),h7e=l(),qi=a("h2"),VT=a("a"),Ule=a("span"),f(Dw.$$.fragment),Njo=l(),Jle=a("span"),Djo=o("AutoModelForSemanticSegmentation"),u7e=l(),it=a("div"),f(qw.$$.fragment),qjo=l(),Gi=a("p"),Gjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Yle=a("code"),Ojo=o("from_pretrained()"),Xjo=o("class method or the "),Kle=a("code"),zjo=o("from_config()"),Vjo=o(`class
method.`),Wjo=l(),Gw=a("p"),Qjo=o("This class cannot be instantiated directly using "),Zle=a("code"),Hjo=o("__init__()"),Ujo=o(" (throws an error)."),Jjo=l(),or=a("div"),f(Ow.$$.fragment),Yjo=l(),ede=a("p"),Kjo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Zjo=l(),Oi=a("p"),eNo=o(`Note:
Loading a model from its configuration file does `),ode=a("strong"),oNo=o("not"),tNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tde=a("code"),rNo=o("from_pretrained()"),aNo=o("to load the model weights."),sNo=l(),rde=a("p"),nNo=o("Examples:"),lNo=l(),f(Xw.$$.fragment),dNo=l(),Je=a("div"),f(zw.$$.fragment),iNo=l(),ade=a("p"),cNo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),fNo=l(),os=a("p"),mNo=o("The model class to instantiate is selected based on the "),sde=a("code"),gNo=o("model_type"),hNo=o(` property of the config object (either
passed as an argument or loaded from `),nde=a("code"),uNo=o("pretrained_model_name_or_path"),pNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lde=a("code"),_No=o("pretrained_model_name_or_path"),bNo=o(":"),vNo=l(),Vw=a("ul"),WT=a("li"),dde=a("strong"),TNo=o("beit"),FNo=o(" \u2014 "),Pj=a("a"),CNo=o("BeitForSemanticSegmentation"),MNo=o(" (BEiT model)"),ENo=l(),QT=a("li"),ide=a("strong"),yNo=o("segformer"),wNo=o(" \u2014 "),$j=a("a"),ANo=o("SegformerForSemanticSegmentation"),LNo=o(" (SegFormer model)"),BNo=l(),HT=a("p"),xNo=o("The model is set in evaluation mode by default using "),cde=a("code"),kNo=o("model.eval()"),RNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fde=a("code"),SNo=o("model.train()"),PNo=l(),mde=a("p"),$No=o("Examples:"),INo=l(),f(Ww.$$.fragment),p7e=l(),Xi=a("h2"),UT=a("a"),gde=a("span"),f(Qw.$$.fragment),jNo=l(),hde=a("span"),NNo=o("TFAutoModel"),_7e=l(),ct=a("div"),f(Hw.$$.fragment),DNo=l(),zi=a("p"),qNo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ude=a("code"),GNo=o("from_pretrained()"),ONo=o("class method or the "),pde=a("code"),XNo=o("from_config()"),zNo=o(`class
method.`),VNo=l(),Uw=a("p"),WNo=o("This class cannot be instantiated directly using "),_de=a("code"),QNo=o("__init__()"),HNo=o(" (throws an error)."),UNo=l(),tr=a("div"),f(Jw.$$.fragment),JNo=l(),bde=a("p"),YNo=o("Instantiates one of the base model classes of the library from a configuration."),KNo=l(),Vi=a("p"),ZNo=o(`Note:
Loading a model from its configuration file does `),vde=a("strong"),eDo=o("not"),oDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tde=a("code"),tDo=o("from_pretrained()"),rDo=o("to load the model weights."),aDo=l(),Fde=a("p"),sDo=o("Examples:"),nDo=l(),f(Yw.$$.fragment),lDo=l(),fo=a("div"),f(Kw.$$.fragment),dDo=l(),Cde=a("p"),iDo=o("Instantiate one of the base model classes of the library from a pretrained model."),cDo=l(),ts=a("p"),fDo=o("The model class to instantiate is selected based on the "),Mde=a("code"),mDo=o("model_type"),gDo=o(` property of the config object (either
passed as an argument or loaded from `),Ede=a("code"),hDo=o("pretrained_model_name_or_path"),uDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yde=a("code"),pDo=o("pretrained_model_name_or_path"),_Do=o(":"),bDo=l(),B=a("ul"),JT=a("li"),wde=a("strong"),vDo=o("albert"),TDo=o(" \u2014 "),Ij=a("a"),FDo=o("TFAlbertModel"),CDo=o(" (ALBERT model)"),MDo=l(),YT=a("li"),Ade=a("strong"),EDo=o("bart"),yDo=o(" \u2014 "),jj=a("a"),wDo=o("TFBartModel"),ADo=o(" (BART model)"),LDo=l(),KT=a("li"),Lde=a("strong"),BDo=o("bert"),xDo=o(" \u2014 "),Nj=a("a"),kDo=o("TFBertModel"),RDo=o(" (BERT model)"),SDo=l(),ZT=a("li"),Bde=a("strong"),PDo=o("blenderbot"),$Do=o(" \u2014 "),Dj=a("a"),IDo=o("TFBlenderbotModel"),jDo=o(" (Blenderbot model)"),NDo=l(),e1=a("li"),xde=a("strong"),DDo=o("blenderbot-small"),qDo=o(" \u2014 "),qj=a("a"),GDo=o("TFBlenderbotSmallModel"),ODo=o(" (BlenderbotSmall model)"),XDo=l(),o1=a("li"),kde=a("strong"),zDo=o("camembert"),VDo=o(" \u2014 "),Gj=a("a"),WDo=o("TFCamembertModel"),QDo=o(" (CamemBERT model)"),HDo=l(),t1=a("li"),Rde=a("strong"),UDo=o("clip"),JDo=o(" \u2014 "),Oj=a("a"),YDo=o("TFCLIPModel"),KDo=o(" (CLIP model)"),ZDo=l(),r1=a("li"),Sde=a("strong"),eqo=o("convbert"),oqo=o(" \u2014 "),Xj=a("a"),tqo=o("TFConvBertModel"),rqo=o(" (ConvBERT model)"),aqo=l(),a1=a("li"),Pde=a("strong"),sqo=o("ctrl"),nqo=o(" \u2014 "),zj=a("a"),lqo=o("TFCTRLModel"),dqo=o(" (CTRL model)"),iqo=l(),s1=a("li"),$de=a("strong"),cqo=o("deberta"),fqo=o(" \u2014 "),Vj=a("a"),mqo=o("TFDebertaModel"),gqo=o(" (DeBERTa model)"),hqo=l(),n1=a("li"),Ide=a("strong"),uqo=o("deberta-v2"),pqo=o(" \u2014 "),Wj=a("a"),_qo=o("TFDebertaV2Model"),bqo=o(" (DeBERTa-v2 model)"),vqo=l(),l1=a("li"),jde=a("strong"),Tqo=o("distilbert"),Fqo=o(" \u2014 "),Qj=a("a"),Cqo=o("TFDistilBertModel"),Mqo=o(" (DistilBERT model)"),Eqo=l(),d1=a("li"),Nde=a("strong"),yqo=o("dpr"),wqo=o(" \u2014 "),Hj=a("a"),Aqo=o("TFDPRQuestionEncoder"),Lqo=o(" (DPR model)"),Bqo=l(),i1=a("li"),Dde=a("strong"),xqo=o("electra"),kqo=o(" \u2014 "),Uj=a("a"),Rqo=o("TFElectraModel"),Sqo=o(" (ELECTRA model)"),Pqo=l(),c1=a("li"),qde=a("strong"),$qo=o("flaubert"),Iqo=o(" \u2014 "),Jj=a("a"),jqo=o("TFFlaubertModel"),Nqo=o(" (FlauBERT model)"),Dqo=l(),Ln=a("li"),Gde=a("strong"),qqo=o("funnel"),Gqo=o(" \u2014 "),Yj=a("a"),Oqo=o("TFFunnelModel"),Xqo=o(" or "),Kj=a("a"),zqo=o("TFFunnelBaseModel"),Vqo=o(" (Funnel Transformer model)"),Wqo=l(),f1=a("li"),Ode=a("strong"),Qqo=o("gpt2"),Hqo=o(" \u2014 "),Zj=a("a"),Uqo=o("TFGPT2Model"),Jqo=o(" (OpenAI GPT-2 model)"),Yqo=l(),m1=a("li"),Xde=a("strong"),Kqo=o("hubert"),Zqo=o(" \u2014 "),eN=a("a"),eGo=o("TFHubertModel"),oGo=o(" (Hubert model)"),tGo=l(),g1=a("li"),zde=a("strong"),rGo=o("layoutlm"),aGo=o(" \u2014 "),oN=a("a"),sGo=o("TFLayoutLMModel"),nGo=o(" (LayoutLM model)"),lGo=l(),h1=a("li"),Vde=a("strong"),dGo=o("led"),iGo=o(" \u2014 "),tN=a("a"),cGo=o("TFLEDModel"),fGo=o(" (LED model)"),mGo=l(),u1=a("li"),Wde=a("strong"),gGo=o("longformer"),hGo=o(" \u2014 "),rN=a("a"),uGo=o("TFLongformerModel"),pGo=o(" (Longformer model)"),_Go=l(),p1=a("li"),Qde=a("strong"),bGo=o("lxmert"),vGo=o(" \u2014 "),aN=a("a"),TGo=o("TFLxmertModel"),FGo=o(" (LXMERT model)"),CGo=l(),_1=a("li"),Hde=a("strong"),MGo=o("marian"),EGo=o(" \u2014 "),sN=a("a"),yGo=o("TFMarianModel"),wGo=o(" (Marian model)"),AGo=l(),b1=a("li"),Ude=a("strong"),LGo=o("mbart"),BGo=o(" \u2014 "),nN=a("a"),xGo=o("TFMBartModel"),kGo=o(" (mBART model)"),RGo=l(),v1=a("li"),Jde=a("strong"),SGo=o("mobilebert"),PGo=o(" \u2014 "),lN=a("a"),$Go=o("TFMobileBertModel"),IGo=o(" (MobileBERT model)"),jGo=l(),T1=a("li"),Yde=a("strong"),NGo=o("mpnet"),DGo=o(" \u2014 "),dN=a("a"),qGo=o("TFMPNetModel"),GGo=o(" (MPNet model)"),OGo=l(),F1=a("li"),Kde=a("strong"),XGo=o("mt5"),zGo=o(" \u2014 "),iN=a("a"),VGo=o("TFMT5Model"),WGo=o(" (mT5 model)"),QGo=l(),C1=a("li"),Zde=a("strong"),HGo=o("openai-gpt"),UGo=o(" \u2014 "),cN=a("a"),JGo=o("TFOpenAIGPTModel"),YGo=o(" (OpenAI GPT model)"),KGo=l(),M1=a("li"),eie=a("strong"),ZGo=o("pegasus"),eOo=o(" \u2014 "),fN=a("a"),oOo=o("TFPegasusModel"),tOo=o(" (Pegasus model)"),rOo=l(),E1=a("li"),oie=a("strong"),aOo=o("rembert"),sOo=o(" \u2014 "),mN=a("a"),nOo=o("TFRemBertModel"),lOo=o(" (RemBERT model)"),dOo=l(),y1=a("li"),tie=a("strong"),iOo=o("roberta"),cOo=o(" \u2014 "),gN=a("a"),fOo=o("TFRobertaModel"),mOo=o(" (RoBERTa model)"),gOo=l(),w1=a("li"),rie=a("strong"),hOo=o("roformer"),uOo=o(" \u2014 "),hN=a("a"),pOo=o("TFRoFormerModel"),_Oo=o(" (RoFormer model)"),bOo=l(),A1=a("li"),aie=a("strong"),vOo=o("speech_to_text"),TOo=o(" \u2014 "),uN=a("a"),FOo=o("TFSpeech2TextModel"),COo=o(" (Speech2Text model)"),MOo=l(),L1=a("li"),sie=a("strong"),EOo=o("t5"),yOo=o(" \u2014 "),pN=a("a"),wOo=o("TFT5Model"),AOo=o(" (T5 model)"),LOo=l(),B1=a("li"),nie=a("strong"),BOo=o("tapas"),xOo=o(" \u2014 "),_N=a("a"),kOo=o("TFTapasModel"),ROo=o(" (TAPAS model)"),SOo=l(),x1=a("li"),lie=a("strong"),POo=o("transfo-xl"),$Oo=o(" \u2014 "),bN=a("a"),IOo=o("TFTransfoXLModel"),jOo=o(" (Transformer-XL model)"),NOo=l(),k1=a("li"),die=a("strong"),DOo=o("vit"),qOo=o(" \u2014 "),vN=a("a"),GOo=o("TFViTModel"),OOo=o(" (ViT model)"),XOo=l(),R1=a("li"),iie=a("strong"),zOo=o("wav2vec2"),VOo=o(" \u2014 "),TN=a("a"),WOo=o("TFWav2Vec2Model"),QOo=o(" (Wav2Vec2 model)"),HOo=l(),S1=a("li"),cie=a("strong"),UOo=o("xlm"),JOo=o(" \u2014 "),FN=a("a"),YOo=o("TFXLMModel"),KOo=o(" (XLM model)"),ZOo=l(),P1=a("li"),fie=a("strong"),eXo=o("xlm-roberta"),oXo=o(" \u2014 "),CN=a("a"),tXo=o("TFXLMRobertaModel"),rXo=o(" (XLM-RoBERTa model)"),aXo=l(),$1=a("li"),mie=a("strong"),sXo=o("xlnet"),nXo=o(" \u2014 "),MN=a("a"),lXo=o("TFXLNetModel"),dXo=o(" (XLNet model)"),iXo=l(),gie=a("p"),cXo=o("Examples:"),fXo=l(),f(Zw.$$.fragment),b7e=l(),Wi=a("h2"),I1=a("a"),hie=a("span"),f(eA.$$.fragment),mXo=l(),uie=a("span"),gXo=o("TFAutoModelForPreTraining"),v7e=l(),ft=a("div"),f(oA.$$.fragment),hXo=l(),Qi=a("p"),uXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pie=a("code"),pXo=o("from_pretrained()"),_Xo=o("class method or the "),_ie=a("code"),bXo=o("from_config()"),vXo=o(`class
method.`),TXo=l(),tA=a("p"),FXo=o("This class cannot be instantiated directly using "),bie=a("code"),CXo=o("__init__()"),MXo=o(" (throws an error)."),EXo=l(),rr=a("div"),f(rA.$$.fragment),yXo=l(),vie=a("p"),wXo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),AXo=l(),Hi=a("p"),LXo=o(`Note:
Loading a model from its configuration file does `),Tie=a("strong"),BXo=o("not"),xXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fie=a("code"),kXo=o("from_pretrained()"),RXo=o("to load the model weights."),SXo=l(),Cie=a("p"),PXo=o("Examples:"),$Xo=l(),f(aA.$$.fragment),IXo=l(),mo=a("div"),f(sA.$$.fragment),jXo=l(),Mie=a("p"),NXo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),DXo=l(),rs=a("p"),qXo=o("The model class to instantiate is selected based on the "),Eie=a("code"),GXo=o("model_type"),OXo=o(` property of the config object (either
passed as an argument or loaded from `),yie=a("code"),XXo=o("pretrained_model_name_or_path"),zXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wie=a("code"),VXo=o("pretrained_model_name_or_path"),WXo=o(":"),QXo=l(),H=a("ul"),j1=a("li"),Aie=a("strong"),HXo=o("albert"),UXo=o(" \u2014 "),EN=a("a"),JXo=o("TFAlbertForPreTraining"),YXo=o(" (ALBERT model)"),KXo=l(),N1=a("li"),Lie=a("strong"),ZXo=o("bart"),ezo=o(" \u2014 "),yN=a("a"),ozo=o("TFBartForConditionalGeneration"),tzo=o(" (BART model)"),rzo=l(),D1=a("li"),Bie=a("strong"),azo=o("bert"),szo=o(" \u2014 "),wN=a("a"),nzo=o("TFBertForPreTraining"),lzo=o(" (BERT model)"),dzo=l(),q1=a("li"),xie=a("strong"),izo=o("camembert"),czo=o(" \u2014 "),AN=a("a"),fzo=o("TFCamembertForMaskedLM"),mzo=o(" (CamemBERT model)"),gzo=l(),G1=a("li"),kie=a("strong"),hzo=o("ctrl"),uzo=o(" \u2014 "),LN=a("a"),pzo=o("TFCTRLLMHeadModel"),_zo=o(" (CTRL model)"),bzo=l(),O1=a("li"),Rie=a("strong"),vzo=o("distilbert"),Tzo=o(" \u2014 "),BN=a("a"),Fzo=o("TFDistilBertForMaskedLM"),Czo=o(" (DistilBERT model)"),Mzo=l(),X1=a("li"),Sie=a("strong"),Ezo=o("electra"),yzo=o(" \u2014 "),xN=a("a"),wzo=o("TFElectraForPreTraining"),Azo=o(" (ELECTRA model)"),Lzo=l(),z1=a("li"),Pie=a("strong"),Bzo=o("flaubert"),xzo=o(" \u2014 "),kN=a("a"),kzo=o("TFFlaubertWithLMHeadModel"),Rzo=o(" (FlauBERT model)"),Szo=l(),V1=a("li"),$ie=a("strong"),Pzo=o("funnel"),$zo=o(" \u2014 "),RN=a("a"),Izo=o("TFFunnelForPreTraining"),jzo=o(" (Funnel Transformer model)"),Nzo=l(),W1=a("li"),Iie=a("strong"),Dzo=o("gpt2"),qzo=o(" \u2014 "),SN=a("a"),Gzo=o("TFGPT2LMHeadModel"),Ozo=o(" (OpenAI GPT-2 model)"),Xzo=l(),Q1=a("li"),jie=a("strong"),zzo=o("layoutlm"),Vzo=o(" \u2014 "),PN=a("a"),Wzo=o("TFLayoutLMForMaskedLM"),Qzo=o(" (LayoutLM model)"),Hzo=l(),H1=a("li"),Nie=a("strong"),Uzo=o("lxmert"),Jzo=o(" \u2014 "),$N=a("a"),Yzo=o("TFLxmertForPreTraining"),Kzo=o(" (LXMERT model)"),Zzo=l(),U1=a("li"),Die=a("strong"),eVo=o("mobilebert"),oVo=o(" \u2014 "),IN=a("a"),tVo=o("TFMobileBertForPreTraining"),rVo=o(" (MobileBERT model)"),aVo=l(),J1=a("li"),qie=a("strong"),sVo=o("mpnet"),nVo=o(" \u2014 "),jN=a("a"),lVo=o("TFMPNetForMaskedLM"),dVo=o(" (MPNet model)"),iVo=l(),Y1=a("li"),Gie=a("strong"),cVo=o("openai-gpt"),fVo=o(" \u2014 "),NN=a("a"),mVo=o("TFOpenAIGPTLMHeadModel"),gVo=o(" (OpenAI GPT model)"),hVo=l(),K1=a("li"),Oie=a("strong"),uVo=o("roberta"),pVo=o(" \u2014 "),DN=a("a"),_Vo=o("TFRobertaForMaskedLM"),bVo=o(" (RoBERTa model)"),vVo=l(),Z1=a("li"),Xie=a("strong"),TVo=o("t5"),FVo=o(" \u2014 "),qN=a("a"),CVo=o("TFT5ForConditionalGeneration"),MVo=o(" (T5 model)"),EVo=l(),eF=a("li"),zie=a("strong"),yVo=o("tapas"),wVo=o(" \u2014 "),GN=a("a"),AVo=o("TFTapasForMaskedLM"),LVo=o(" (TAPAS model)"),BVo=l(),oF=a("li"),Vie=a("strong"),xVo=o("transfo-xl"),kVo=o(" \u2014 "),ON=a("a"),RVo=o("TFTransfoXLLMHeadModel"),SVo=o(" (Transformer-XL model)"),PVo=l(),tF=a("li"),Wie=a("strong"),$Vo=o("xlm"),IVo=o(" \u2014 "),XN=a("a"),jVo=o("TFXLMWithLMHeadModel"),NVo=o(" (XLM model)"),DVo=l(),rF=a("li"),Qie=a("strong"),qVo=o("xlm-roberta"),GVo=o(" \u2014 "),zN=a("a"),OVo=o("TFXLMRobertaForMaskedLM"),XVo=o(" (XLM-RoBERTa model)"),zVo=l(),aF=a("li"),Hie=a("strong"),VVo=o("xlnet"),WVo=o(" \u2014 "),VN=a("a"),QVo=o("TFXLNetLMHeadModel"),HVo=o(" (XLNet model)"),UVo=l(),Uie=a("p"),JVo=o("Examples:"),YVo=l(),f(nA.$$.fragment),T7e=l(),Ui=a("h2"),sF=a("a"),Jie=a("span"),f(lA.$$.fragment),KVo=l(),Yie=a("span"),ZVo=o("TFAutoModelForCausalLM"),F7e=l(),mt=a("div"),f(dA.$$.fragment),eWo=l(),Ji=a("p"),oWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Kie=a("code"),tWo=o("from_pretrained()"),rWo=o("class method or the "),Zie=a("code"),aWo=o("from_config()"),sWo=o(`class
method.`),nWo=l(),iA=a("p"),lWo=o("This class cannot be instantiated directly using "),ece=a("code"),dWo=o("__init__()"),iWo=o(" (throws an error)."),cWo=l(),ar=a("div"),f(cA.$$.fragment),fWo=l(),oce=a("p"),mWo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),gWo=l(),Yi=a("p"),hWo=o(`Note:
Loading a model from its configuration file does `),tce=a("strong"),uWo=o("not"),pWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rce=a("code"),_Wo=o("from_pretrained()"),bWo=o("to load the model weights."),vWo=l(),ace=a("p"),TWo=o("Examples:"),FWo=l(),f(fA.$$.fragment),CWo=l(),go=a("div"),f(mA.$$.fragment),MWo=l(),sce=a("p"),EWo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),yWo=l(),as=a("p"),wWo=o("The model class to instantiate is selected based on the "),nce=a("code"),AWo=o("model_type"),LWo=o(` property of the config object (either
passed as an argument or loaded from `),lce=a("code"),BWo=o("pretrained_model_name_or_path"),xWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dce=a("code"),kWo=o("pretrained_model_name_or_path"),RWo=o(":"),SWo=l(),he=a("ul"),nF=a("li"),ice=a("strong"),PWo=o("bert"),$Wo=o(" \u2014 "),WN=a("a"),IWo=o("TFBertLMHeadModel"),jWo=o(" (BERT model)"),NWo=l(),lF=a("li"),cce=a("strong"),DWo=o("ctrl"),qWo=o(" \u2014 "),QN=a("a"),GWo=o("TFCTRLLMHeadModel"),OWo=o(" (CTRL model)"),XWo=l(),dF=a("li"),fce=a("strong"),zWo=o("gpt2"),VWo=o(" \u2014 "),HN=a("a"),WWo=o("TFGPT2LMHeadModel"),QWo=o(" (OpenAI GPT-2 model)"),HWo=l(),iF=a("li"),mce=a("strong"),UWo=o("openai-gpt"),JWo=o(" \u2014 "),UN=a("a"),YWo=o("TFOpenAIGPTLMHeadModel"),KWo=o(" (OpenAI GPT model)"),ZWo=l(),cF=a("li"),gce=a("strong"),eQo=o("rembert"),oQo=o(" \u2014 "),JN=a("a"),tQo=o("TFRemBertForCausalLM"),rQo=o(" (RemBERT model)"),aQo=l(),fF=a("li"),hce=a("strong"),sQo=o("roberta"),nQo=o(" \u2014 "),YN=a("a"),lQo=o("TFRobertaForCausalLM"),dQo=o(" (RoBERTa model)"),iQo=l(),mF=a("li"),uce=a("strong"),cQo=o("roformer"),fQo=o(" \u2014 "),KN=a("a"),mQo=o("TFRoFormerForCausalLM"),gQo=o(" (RoFormer model)"),hQo=l(),gF=a("li"),pce=a("strong"),uQo=o("transfo-xl"),pQo=o(" \u2014 "),ZN=a("a"),_Qo=o("TFTransfoXLLMHeadModel"),bQo=o(" (Transformer-XL model)"),vQo=l(),hF=a("li"),_ce=a("strong"),TQo=o("xlm"),FQo=o(" \u2014 "),eD=a("a"),CQo=o("TFXLMWithLMHeadModel"),MQo=o(" (XLM model)"),EQo=l(),uF=a("li"),bce=a("strong"),yQo=o("xlnet"),wQo=o(" \u2014 "),oD=a("a"),AQo=o("TFXLNetLMHeadModel"),LQo=o(" (XLNet model)"),BQo=l(),vce=a("p"),xQo=o("Examples:"),kQo=l(),f(gA.$$.fragment),C7e=l(),Ki=a("h2"),pF=a("a"),Tce=a("span"),f(hA.$$.fragment),RQo=l(),Fce=a("span"),SQo=o("TFAutoModelForImageClassification"),M7e=l(),gt=a("div"),f(uA.$$.fragment),PQo=l(),Zi=a("p"),$Qo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Cce=a("code"),IQo=o("from_pretrained()"),jQo=o("class method or the "),Mce=a("code"),NQo=o("from_config()"),DQo=o(`class
method.`),qQo=l(),pA=a("p"),GQo=o("This class cannot be instantiated directly using "),Ece=a("code"),OQo=o("__init__()"),XQo=o(" (throws an error)."),zQo=l(),sr=a("div"),f(_A.$$.fragment),VQo=l(),yce=a("p"),WQo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),QQo=l(),ec=a("p"),HQo=o(`Note:
Loading a model from its configuration file does `),wce=a("strong"),UQo=o("not"),JQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ace=a("code"),YQo=o("from_pretrained()"),KQo=o("to load the model weights."),ZQo=l(),Lce=a("p"),eHo=o("Examples:"),oHo=l(),f(bA.$$.fragment),tHo=l(),ho=a("div"),f(vA.$$.fragment),rHo=l(),Bce=a("p"),aHo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),sHo=l(),ss=a("p"),nHo=o("The model class to instantiate is selected based on the "),xce=a("code"),lHo=o("model_type"),dHo=o(` property of the config object (either
passed as an argument or loaded from `),kce=a("code"),iHo=o("pretrained_model_name_or_path"),cHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rce=a("code"),fHo=o("pretrained_model_name_or_path"),mHo=o(":"),gHo=l(),Sce=a("ul"),_F=a("li"),Pce=a("strong"),hHo=o("vit"),uHo=o(" \u2014 "),tD=a("a"),pHo=o("TFViTForImageClassification"),_Ho=o(" (ViT model)"),bHo=l(),$ce=a("p"),vHo=o("Examples:"),THo=l(),f(TA.$$.fragment),E7e=l(),oc=a("h2"),bF=a("a"),Ice=a("span"),f(FA.$$.fragment),FHo=l(),jce=a("span"),CHo=o("TFAutoModelForMaskedLM"),y7e=l(),ht=a("div"),f(CA.$$.fragment),MHo=l(),tc=a("p"),EHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Nce=a("code"),yHo=o("from_pretrained()"),wHo=o("class method or the "),Dce=a("code"),AHo=o("from_config()"),LHo=o(`class
method.`),BHo=l(),MA=a("p"),xHo=o("This class cannot be instantiated directly using "),qce=a("code"),kHo=o("__init__()"),RHo=o(" (throws an error)."),SHo=l(),nr=a("div"),f(EA.$$.fragment),PHo=l(),Gce=a("p"),$Ho=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),IHo=l(),rc=a("p"),jHo=o(`Note:
Loading a model from its configuration file does `),Oce=a("strong"),NHo=o("not"),DHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xce=a("code"),qHo=o("from_pretrained()"),GHo=o("to load the model weights."),OHo=l(),zce=a("p"),XHo=o("Examples:"),zHo=l(),f(yA.$$.fragment),VHo=l(),uo=a("div"),f(wA.$$.fragment),WHo=l(),Vce=a("p"),QHo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),HHo=l(),ns=a("p"),UHo=o("The model class to instantiate is selected based on the "),Wce=a("code"),JHo=o("model_type"),YHo=o(` property of the config object (either
passed as an argument or loaded from `),Qce=a("code"),KHo=o("pretrained_model_name_or_path"),ZHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hce=a("code"),eUo=o("pretrained_model_name_or_path"),oUo=o(":"),tUo=l(),Y=a("ul"),vF=a("li"),Uce=a("strong"),rUo=o("albert"),aUo=o(" \u2014 "),rD=a("a"),sUo=o("TFAlbertForMaskedLM"),nUo=o(" (ALBERT model)"),lUo=l(),TF=a("li"),Jce=a("strong"),dUo=o("bert"),iUo=o(" \u2014 "),aD=a("a"),cUo=o("TFBertForMaskedLM"),fUo=o(" (BERT model)"),mUo=l(),FF=a("li"),Yce=a("strong"),gUo=o("camembert"),hUo=o(" \u2014 "),sD=a("a"),uUo=o("TFCamembertForMaskedLM"),pUo=o(" (CamemBERT model)"),_Uo=l(),CF=a("li"),Kce=a("strong"),bUo=o("convbert"),vUo=o(" \u2014 "),nD=a("a"),TUo=o("TFConvBertForMaskedLM"),FUo=o(" (ConvBERT model)"),CUo=l(),MF=a("li"),Zce=a("strong"),MUo=o("deberta"),EUo=o(" \u2014 "),lD=a("a"),yUo=o("TFDebertaForMaskedLM"),wUo=o(" (DeBERTa model)"),AUo=l(),EF=a("li"),efe=a("strong"),LUo=o("deberta-v2"),BUo=o(" \u2014 "),dD=a("a"),xUo=o("TFDebertaV2ForMaskedLM"),kUo=o(" (DeBERTa-v2 model)"),RUo=l(),yF=a("li"),ofe=a("strong"),SUo=o("distilbert"),PUo=o(" \u2014 "),iD=a("a"),$Uo=o("TFDistilBertForMaskedLM"),IUo=o(" (DistilBERT model)"),jUo=l(),wF=a("li"),tfe=a("strong"),NUo=o("electra"),DUo=o(" \u2014 "),cD=a("a"),qUo=o("TFElectraForMaskedLM"),GUo=o(" (ELECTRA model)"),OUo=l(),AF=a("li"),rfe=a("strong"),XUo=o("flaubert"),zUo=o(" \u2014 "),fD=a("a"),VUo=o("TFFlaubertWithLMHeadModel"),WUo=o(" (FlauBERT model)"),QUo=l(),LF=a("li"),afe=a("strong"),HUo=o("funnel"),UUo=o(" \u2014 "),mD=a("a"),JUo=o("TFFunnelForMaskedLM"),YUo=o(" (Funnel Transformer model)"),KUo=l(),BF=a("li"),sfe=a("strong"),ZUo=o("layoutlm"),eJo=o(" \u2014 "),gD=a("a"),oJo=o("TFLayoutLMForMaskedLM"),tJo=o(" (LayoutLM model)"),rJo=l(),xF=a("li"),nfe=a("strong"),aJo=o("longformer"),sJo=o(" \u2014 "),hD=a("a"),nJo=o("TFLongformerForMaskedLM"),lJo=o(" (Longformer model)"),dJo=l(),kF=a("li"),lfe=a("strong"),iJo=o("mobilebert"),cJo=o(" \u2014 "),uD=a("a"),fJo=o("TFMobileBertForMaskedLM"),mJo=o(" (MobileBERT model)"),gJo=l(),RF=a("li"),dfe=a("strong"),hJo=o("mpnet"),uJo=o(" \u2014 "),pD=a("a"),pJo=o("TFMPNetForMaskedLM"),_Jo=o(" (MPNet model)"),bJo=l(),SF=a("li"),ife=a("strong"),vJo=o("rembert"),TJo=o(" \u2014 "),_D=a("a"),FJo=o("TFRemBertForMaskedLM"),CJo=o(" (RemBERT model)"),MJo=l(),PF=a("li"),cfe=a("strong"),EJo=o("roberta"),yJo=o(" \u2014 "),bD=a("a"),wJo=o("TFRobertaForMaskedLM"),AJo=o(" (RoBERTa model)"),LJo=l(),$F=a("li"),ffe=a("strong"),BJo=o("roformer"),xJo=o(" \u2014 "),vD=a("a"),kJo=o("TFRoFormerForMaskedLM"),RJo=o(" (RoFormer model)"),SJo=l(),IF=a("li"),mfe=a("strong"),PJo=o("tapas"),$Jo=o(" \u2014 "),TD=a("a"),IJo=o("TFTapasForMaskedLM"),jJo=o(" (TAPAS model)"),NJo=l(),jF=a("li"),gfe=a("strong"),DJo=o("xlm"),qJo=o(" \u2014 "),FD=a("a"),GJo=o("TFXLMWithLMHeadModel"),OJo=o(" (XLM model)"),XJo=l(),NF=a("li"),hfe=a("strong"),zJo=o("xlm-roberta"),VJo=o(" \u2014 "),CD=a("a"),WJo=o("TFXLMRobertaForMaskedLM"),QJo=o(" (XLM-RoBERTa model)"),HJo=l(),ufe=a("p"),UJo=o("Examples:"),JJo=l(),f(AA.$$.fragment),w7e=l(),ac=a("h2"),DF=a("a"),pfe=a("span"),f(LA.$$.fragment),YJo=l(),_fe=a("span"),KJo=o("TFAutoModelForSeq2SeqLM"),A7e=l(),ut=a("div"),f(BA.$$.fragment),ZJo=l(),sc=a("p"),eYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),bfe=a("code"),oYo=o("from_pretrained()"),tYo=o("class method or the "),vfe=a("code"),rYo=o("from_config()"),aYo=o(`class
method.`),sYo=l(),xA=a("p"),nYo=o("This class cannot be instantiated directly using "),Tfe=a("code"),lYo=o("__init__()"),dYo=o(" (throws an error)."),iYo=l(),lr=a("div"),f(kA.$$.fragment),cYo=l(),Ffe=a("p"),fYo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),mYo=l(),nc=a("p"),gYo=o(`Note:
Loading a model from its configuration file does `),Cfe=a("strong"),hYo=o("not"),uYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mfe=a("code"),pYo=o("from_pretrained()"),_Yo=o("to load the model weights."),bYo=l(),Efe=a("p"),vYo=o("Examples:"),TYo=l(),f(RA.$$.fragment),FYo=l(),po=a("div"),f(SA.$$.fragment),CYo=l(),yfe=a("p"),MYo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),EYo=l(),ls=a("p"),yYo=o("The model class to instantiate is selected based on the "),wfe=a("code"),wYo=o("model_type"),AYo=o(` property of the config object (either
passed as an argument or loaded from `),Afe=a("code"),LYo=o("pretrained_model_name_or_path"),BYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lfe=a("code"),xYo=o("pretrained_model_name_or_path"),kYo=o(":"),RYo=l(),ue=a("ul"),qF=a("li"),Bfe=a("strong"),SYo=o("bart"),PYo=o(" \u2014 "),MD=a("a"),$Yo=o("TFBartForConditionalGeneration"),IYo=o(" (BART model)"),jYo=l(),GF=a("li"),xfe=a("strong"),NYo=o("blenderbot"),DYo=o(" \u2014 "),ED=a("a"),qYo=o("TFBlenderbotForConditionalGeneration"),GYo=o(" (Blenderbot model)"),OYo=l(),OF=a("li"),kfe=a("strong"),XYo=o("blenderbot-small"),zYo=o(" \u2014 "),yD=a("a"),VYo=o("TFBlenderbotSmallForConditionalGeneration"),WYo=o(" (BlenderbotSmall model)"),QYo=l(),XF=a("li"),Rfe=a("strong"),HYo=o("encoder-decoder"),UYo=o(" \u2014 "),wD=a("a"),JYo=o("TFEncoderDecoderModel"),YYo=o(" (Encoder decoder model)"),KYo=l(),zF=a("li"),Sfe=a("strong"),ZYo=o("led"),eKo=o(" \u2014 "),AD=a("a"),oKo=o("TFLEDForConditionalGeneration"),tKo=o(" (LED model)"),rKo=l(),VF=a("li"),Pfe=a("strong"),aKo=o("marian"),sKo=o(" \u2014 "),LD=a("a"),nKo=o("TFMarianMTModel"),lKo=o(" (Marian model)"),dKo=l(),WF=a("li"),$fe=a("strong"),iKo=o("mbart"),cKo=o(" \u2014 "),BD=a("a"),fKo=o("TFMBartForConditionalGeneration"),mKo=o(" (mBART model)"),gKo=l(),QF=a("li"),Ife=a("strong"),hKo=o("mt5"),uKo=o(" \u2014 "),xD=a("a"),pKo=o("TFMT5ForConditionalGeneration"),_Ko=o(" (mT5 model)"),bKo=l(),HF=a("li"),jfe=a("strong"),vKo=o("pegasus"),TKo=o(" \u2014 "),kD=a("a"),FKo=o("TFPegasusForConditionalGeneration"),CKo=o(" (Pegasus model)"),MKo=l(),UF=a("li"),Nfe=a("strong"),EKo=o("t5"),yKo=o(" \u2014 "),RD=a("a"),wKo=o("TFT5ForConditionalGeneration"),AKo=o(" (T5 model)"),LKo=l(),Dfe=a("p"),BKo=o("Examples:"),xKo=l(),f(PA.$$.fragment),L7e=l(),lc=a("h2"),JF=a("a"),qfe=a("span"),f($A.$$.fragment),kKo=l(),Gfe=a("span"),RKo=o("TFAutoModelForSequenceClassification"),B7e=l(),pt=a("div"),f(IA.$$.fragment),SKo=l(),dc=a("p"),PKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ofe=a("code"),$Ko=o("from_pretrained()"),IKo=o("class method or the "),Xfe=a("code"),jKo=o("from_config()"),NKo=o(`class
method.`),DKo=l(),jA=a("p"),qKo=o("This class cannot be instantiated directly using "),zfe=a("code"),GKo=o("__init__()"),OKo=o(" (throws an error)."),XKo=l(),dr=a("div"),f(NA.$$.fragment),zKo=l(),Vfe=a("p"),VKo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),WKo=l(),ic=a("p"),QKo=o(`Note:
Loading a model from its configuration file does `),Wfe=a("strong"),HKo=o("not"),UKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qfe=a("code"),JKo=o("from_pretrained()"),YKo=o("to load the model weights."),KKo=l(),Hfe=a("p"),ZKo=o("Examples:"),eZo=l(),f(DA.$$.fragment),oZo=l(),_o=a("div"),f(qA.$$.fragment),tZo=l(),Ufe=a("p"),rZo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),aZo=l(),ds=a("p"),sZo=o("The model class to instantiate is selected based on the "),Jfe=a("code"),nZo=o("model_type"),lZo=o(` property of the config object (either
passed as an argument or loaded from `),Yfe=a("code"),dZo=o("pretrained_model_name_or_path"),iZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kfe=a("code"),cZo=o("pretrained_model_name_or_path"),fZo=o(":"),mZo=l(),X=a("ul"),YF=a("li"),Zfe=a("strong"),gZo=o("albert"),hZo=o(" \u2014 "),SD=a("a"),uZo=o("TFAlbertForSequenceClassification"),pZo=o(" (ALBERT model)"),_Zo=l(),KF=a("li"),eme=a("strong"),bZo=o("bert"),vZo=o(" \u2014 "),PD=a("a"),TZo=o("TFBertForSequenceClassification"),FZo=o(" (BERT model)"),CZo=l(),ZF=a("li"),ome=a("strong"),MZo=o("camembert"),EZo=o(" \u2014 "),$D=a("a"),yZo=o("TFCamembertForSequenceClassification"),wZo=o(" (CamemBERT model)"),AZo=l(),eC=a("li"),tme=a("strong"),LZo=o("convbert"),BZo=o(" \u2014 "),ID=a("a"),xZo=o("TFConvBertForSequenceClassification"),kZo=o(" (ConvBERT model)"),RZo=l(),oC=a("li"),rme=a("strong"),SZo=o("ctrl"),PZo=o(" \u2014 "),jD=a("a"),$Zo=o("TFCTRLForSequenceClassification"),IZo=o(" (CTRL model)"),jZo=l(),tC=a("li"),ame=a("strong"),NZo=o("deberta"),DZo=o(" \u2014 "),ND=a("a"),qZo=o("TFDebertaForSequenceClassification"),GZo=o(" (DeBERTa model)"),OZo=l(),rC=a("li"),sme=a("strong"),XZo=o("deberta-v2"),zZo=o(" \u2014 "),DD=a("a"),VZo=o("TFDebertaV2ForSequenceClassification"),WZo=o(" (DeBERTa-v2 model)"),QZo=l(),aC=a("li"),nme=a("strong"),HZo=o("distilbert"),UZo=o(" \u2014 "),qD=a("a"),JZo=o("TFDistilBertForSequenceClassification"),YZo=o(" (DistilBERT model)"),KZo=l(),sC=a("li"),lme=a("strong"),ZZo=o("electra"),eet=o(" \u2014 "),GD=a("a"),oet=o("TFElectraForSequenceClassification"),tet=o(" (ELECTRA model)"),ret=l(),nC=a("li"),dme=a("strong"),aet=o("flaubert"),set=o(" \u2014 "),OD=a("a"),net=o("TFFlaubertForSequenceClassification"),det=o(" (FlauBERT model)"),iet=l(),lC=a("li"),ime=a("strong"),cet=o("funnel"),fet=o(" \u2014 "),XD=a("a"),met=o("TFFunnelForSequenceClassification"),get=o(" (Funnel Transformer model)"),het=l(),dC=a("li"),cme=a("strong"),uet=o("gpt2"),pet=o(" \u2014 "),zD=a("a"),_et=o("TFGPT2ForSequenceClassification"),bet=o(" (OpenAI GPT-2 model)"),vet=l(),iC=a("li"),fme=a("strong"),Tet=o("layoutlm"),Fet=o(" \u2014 "),VD=a("a"),Cet=o("TFLayoutLMForSequenceClassification"),Met=o(" (LayoutLM model)"),Eet=l(),cC=a("li"),mme=a("strong"),yet=o("longformer"),wet=o(" \u2014 "),WD=a("a"),Aet=o("TFLongformerForSequenceClassification"),Let=o(" (Longformer model)"),Bet=l(),fC=a("li"),gme=a("strong"),xet=o("mobilebert"),ket=o(" \u2014 "),QD=a("a"),Ret=o("TFMobileBertForSequenceClassification"),Set=o(" (MobileBERT model)"),Pet=l(),mC=a("li"),hme=a("strong"),$et=o("mpnet"),Iet=o(" \u2014 "),HD=a("a"),jet=o("TFMPNetForSequenceClassification"),Net=o(" (MPNet model)"),Det=l(),gC=a("li"),ume=a("strong"),qet=o("openai-gpt"),Get=o(" \u2014 "),UD=a("a"),Oet=o("TFOpenAIGPTForSequenceClassification"),Xet=o(" (OpenAI GPT model)"),zet=l(),hC=a("li"),pme=a("strong"),Vet=o("rembert"),Wet=o(" \u2014 "),JD=a("a"),Qet=o("TFRemBertForSequenceClassification"),Het=o(" (RemBERT model)"),Uet=l(),uC=a("li"),_me=a("strong"),Jet=o("roberta"),Yet=o(" \u2014 "),YD=a("a"),Ket=o("TFRobertaForSequenceClassification"),Zet=o(" (RoBERTa model)"),eot=l(),pC=a("li"),bme=a("strong"),oot=o("roformer"),tot=o(" \u2014 "),KD=a("a"),rot=o("TFRoFormerForSequenceClassification"),aot=o(" (RoFormer model)"),sot=l(),_C=a("li"),vme=a("strong"),not=o("tapas"),lot=o(" \u2014 "),ZD=a("a"),dot=o("TFTapasForSequenceClassification"),iot=o(" (TAPAS model)"),cot=l(),bC=a("li"),Tme=a("strong"),fot=o("transfo-xl"),mot=o(" \u2014 "),eq=a("a"),got=o("TFTransfoXLForSequenceClassification"),hot=o(" (Transformer-XL model)"),uot=l(),vC=a("li"),Fme=a("strong"),pot=o("xlm"),_ot=o(" \u2014 "),oq=a("a"),bot=o("TFXLMForSequenceClassification"),vot=o(" (XLM model)"),Tot=l(),TC=a("li"),Cme=a("strong"),Fot=o("xlm-roberta"),Cot=o(" \u2014 "),tq=a("a"),Mot=o("TFXLMRobertaForSequenceClassification"),Eot=o(" (XLM-RoBERTa model)"),yot=l(),FC=a("li"),Mme=a("strong"),wot=o("xlnet"),Aot=o(" \u2014 "),rq=a("a"),Lot=o("TFXLNetForSequenceClassification"),Bot=o(" (XLNet model)"),xot=l(),Eme=a("p"),kot=o("Examples:"),Rot=l(),f(GA.$$.fragment),x7e=l(),cc=a("h2"),CC=a("a"),yme=a("span"),f(OA.$$.fragment),Sot=l(),wme=a("span"),Pot=o("TFAutoModelForMultipleChoice"),k7e=l(),_t=a("div"),f(XA.$$.fragment),$ot=l(),fc=a("p"),Iot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Ame=a("code"),jot=o("from_pretrained()"),Not=o("class method or the "),Lme=a("code"),Dot=o("from_config()"),qot=o(`class
method.`),Got=l(),zA=a("p"),Oot=o("This class cannot be instantiated directly using "),Bme=a("code"),Xot=o("__init__()"),zot=o(" (throws an error)."),Vot=l(),ir=a("div"),f(VA.$$.fragment),Wot=l(),xme=a("p"),Qot=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Hot=l(),mc=a("p"),Uot=o(`Note:
Loading a model from its configuration file does `),kme=a("strong"),Jot=o("not"),Yot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rme=a("code"),Kot=o("from_pretrained()"),Zot=o("to load the model weights."),ett=l(),Sme=a("p"),ott=o("Examples:"),ttt=l(),f(WA.$$.fragment),rtt=l(),bo=a("div"),f(QA.$$.fragment),att=l(),Pme=a("p"),stt=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ntt=l(),is=a("p"),ltt=o("The model class to instantiate is selected based on the "),$me=a("code"),dtt=o("model_type"),itt=o(` property of the config object (either
passed as an argument or loaded from `),Ime=a("code"),ctt=o("pretrained_model_name_or_path"),ftt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jme=a("code"),mtt=o("pretrained_model_name_or_path"),gtt=o(":"),htt=l(),re=a("ul"),MC=a("li"),Nme=a("strong"),utt=o("albert"),ptt=o(" \u2014 "),aq=a("a"),_tt=o("TFAlbertForMultipleChoice"),btt=o(" (ALBERT model)"),vtt=l(),EC=a("li"),Dme=a("strong"),Ttt=o("bert"),Ftt=o(" \u2014 "),sq=a("a"),Ctt=o("TFBertForMultipleChoice"),Mtt=o(" (BERT model)"),Ett=l(),yC=a("li"),qme=a("strong"),ytt=o("camembert"),wtt=o(" \u2014 "),nq=a("a"),Att=o("TFCamembertForMultipleChoice"),Ltt=o(" (CamemBERT model)"),Btt=l(),wC=a("li"),Gme=a("strong"),xtt=o("convbert"),ktt=o(" \u2014 "),lq=a("a"),Rtt=o("TFConvBertForMultipleChoice"),Stt=o(" (ConvBERT model)"),Ptt=l(),AC=a("li"),Ome=a("strong"),$tt=o("distilbert"),Itt=o(" \u2014 "),dq=a("a"),jtt=o("TFDistilBertForMultipleChoice"),Ntt=o(" (DistilBERT model)"),Dtt=l(),LC=a("li"),Xme=a("strong"),qtt=o("electra"),Gtt=o(" \u2014 "),iq=a("a"),Ott=o("TFElectraForMultipleChoice"),Xtt=o(" (ELECTRA model)"),ztt=l(),BC=a("li"),zme=a("strong"),Vtt=o("flaubert"),Wtt=o(" \u2014 "),cq=a("a"),Qtt=o("TFFlaubertForMultipleChoice"),Htt=o(" (FlauBERT model)"),Utt=l(),xC=a("li"),Vme=a("strong"),Jtt=o("funnel"),Ytt=o(" \u2014 "),fq=a("a"),Ktt=o("TFFunnelForMultipleChoice"),Ztt=o(" (Funnel Transformer model)"),ert=l(),kC=a("li"),Wme=a("strong"),ort=o("longformer"),trt=o(" \u2014 "),mq=a("a"),rrt=o("TFLongformerForMultipleChoice"),art=o(" (Longformer model)"),srt=l(),RC=a("li"),Qme=a("strong"),nrt=o("mobilebert"),lrt=o(" \u2014 "),gq=a("a"),drt=o("TFMobileBertForMultipleChoice"),irt=o(" (MobileBERT model)"),crt=l(),SC=a("li"),Hme=a("strong"),frt=o("mpnet"),mrt=o(" \u2014 "),hq=a("a"),grt=o("TFMPNetForMultipleChoice"),hrt=o(" (MPNet model)"),urt=l(),PC=a("li"),Ume=a("strong"),prt=o("rembert"),_rt=o(" \u2014 "),uq=a("a"),brt=o("TFRemBertForMultipleChoice"),vrt=o(" (RemBERT model)"),Trt=l(),$C=a("li"),Jme=a("strong"),Frt=o("roberta"),Crt=o(" \u2014 "),pq=a("a"),Mrt=o("TFRobertaForMultipleChoice"),Ert=o(" (RoBERTa model)"),yrt=l(),IC=a("li"),Yme=a("strong"),wrt=o("roformer"),Art=o(" \u2014 "),_q=a("a"),Lrt=o("TFRoFormerForMultipleChoice"),Brt=o(" (RoFormer model)"),xrt=l(),jC=a("li"),Kme=a("strong"),krt=o("xlm"),Rrt=o(" \u2014 "),bq=a("a"),Srt=o("TFXLMForMultipleChoice"),Prt=o(" (XLM model)"),$rt=l(),NC=a("li"),Zme=a("strong"),Irt=o("xlm-roberta"),jrt=o(" \u2014 "),vq=a("a"),Nrt=o("TFXLMRobertaForMultipleChoice"),Drt=o(" (XLM-RoBERTa model)"),qrt=l(),DC=a("li"),ege=a("strong"),Grt=o("xlnet"),Ort=o(" \u2014 "),Tq=a("a"),Xrt=o("TFXLNetForMultipleChoice"),zrt=o(" (XLNet model)"),Vrt=l(),oge=a("p"),Wrt=o("Examples:"),Qrt=l(),f(HA.$$.fragment),R7e=l(),gc=a("h2"),qC=a("a"),tge=a("span"),f(UA.$$.fragment),Hrt=l(),rge=a("span"),Urt=o("TFAutoModelForTableQuestionAnswering"),S7e=l(),bt=a("div"),f(JA.$$.fragment),Jrt=l(),hc=a("p"),Yrt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),age=a("code"),Krt=o("from_pretrained()"),Zrt=o("class method or the "),sge=a("code"),eat=o("from_config()"),oat=o(`class
method.`),tat=l(),YA=a("p"),rat=o("This class cannot be instantiated directly using "),nge=a("code"),aat=o("__init__()"),sat=o(" (throws an error)."),nat=l(),cr=a("div"),f(KA.$$.fragment),lat=l(),lge=a("p"),dat=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),iat=l(),uc=a("p"),cat=o(`Note:
Loading a model from its configuration file does `),dge=a("strong"),fat=o("not"),mat=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ige=a("code"),gat=o("from_pretrained()"),hat=o("to load the model weights."),uat=l(),cge=a("p"),pat=o("Examples:"),_at=l(),f(ZA.$$.fragment),bat=l(),vo=a("div"),f(e0.$$.fragment),vat=l(),fge=a("p"),Tat=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Fat=l(),cs=a("p"),Cat=o("The model class to instantiate is selected based on the "),mge=a("code"),Mat=o("model_type"),Eat=o(` property of the config object (either
passed as an argument or loaded from `),gge=a("code"),yat=o("pretrained_model_name_or_path"),wat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=a("code"),Aat=o("pretrained_model_name_or_path"),Lat=o(":"),Bat=l(),uge=a("ul"),GC=a("li"),pge=a("strong"),xat=o("tapas"),kat=o(" \u2014 "),Fq=a("a"),Rat=o("TFTapasForQuestionAnswering"),Sat=o(" (TAPAS model)"),Pat=l(),_ge=a("p"),$at=o("Examples:"),Iat=l(),f(o0.$$.fragment),P7e=l(),pc=a("h2"),OC=a("a"),bge=a("span"),f(t0.$$.fragment),jat=l(),vge=a("span"),Nat=o("TFAutoModelForTokenClassification"),$7e=l(),vt=a("div"),f(r0.$$.fragment),Dat=l(),_c=a("p"),qat=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Tge=a("code"),Gat=o("from_pretrained()"),Oat=o("class method or the "),Fge=a("code"),Xat=o("from_config()"),zat=o(`class
method.`),Vat=l(),a0=a("p"),Wat=o("This class cannot be instantiated directly using "),Cge=a("code"),Qat=o("__init__()"),Hat=o(" (throws an error)."),Uat=l(),fr=a("div"),f(s0.$$.fragment),Jat=l(),Mge=a("p"),Yat=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Kat=l(),bc=a("p"),Zat=o(`Note:
Loading a model from its configuration file does `),Ege=a("strong"),est=o("not"),ost=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yge=a("code"),tst=o("from_pretrained()"),rst=o("to load the model weights."),ast=l(),wge=a("p"),sst=o("Examples:"),nst=l(),f(n0.$$.fragment),lst=l(),To=a("div"),f(l0.$$.fragment),dst=l(),Age=a("p"),ist=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),cst=l(),fs=a("p"),fst=o("The model class to instantiate is selected based on the "),Lge=a("code"),mst=o("model_type"),gst=o(` property of the config object (either
passed as an argument or loaded from `),Bge=a("code"),hst=o("pretrained_model_name_or_path"),ust=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xge=a("code"),pst=o("pretrained_model_name_or_path"),_st=o(":"),bst=l(),K=a("ul"),XC=a("li"),kge=a("strong"),vst=o("albert"),Tst=o(" \u2014 "),Cq=a("a"),Fst=o("TFAlbertForTokenClassification"),Cst=o(" (ALBERT model)"),Mst=l(),zC=a("li"),Rge=a("strong"),Est=o("bert"),yst=o(" \u2014 "),Mq=a("a"),wst=o("TFBertForTokenClassification"),Ast=o(" (BERT model)"),Lst=l(),VC=a("li"),Sge=a("strong"),Bst=o("camembert"),xst=o(" \u2014 "),Eq=a("a"),kst=o("TFCamembertForTokenClassification"),Rst=o(" (CamemBERT model)"),Sst=l(),WC=a("li"),Pge=a("strong"),Pst=o("convbert"),$st=o(" \u2014 "),yq=a("a"),Ist=o("TFConvBertForTokenClassification"),jst=o(" (ConvBERT model)"),Nst=l(),QC=a("li"),$ge=a("strong"),Dst=o("deberta"),qst=o(" \u2014 "),wq=a("a"),Gst=o("TFDebertaForTokenClassification"),Ost=o(" (DeBERTa model)"),Xst=l(),HC=a("li"),Ige=a("strong"),zst=o("deberta-v2"),Vst=o(" \u2014 "),Aq=a("a"),Wst=o("TFDebertaV2ForTokenClassification"),Qst=o(" (DeBERTa-v2 model)"),Hst=l(),UC=a("li"),jge=a("strong"),Ust=o("distilbert"),Jst=o(" \u2014 "),Lq=a("a"),Yst=o("TFDistilBertForTokenClassification"),Kst=o(" (DistilBERT model)"),Zst=l(),JC=a("li"),Nge=a("strong"),ent=o("electra"),ont=o(" \u2014 "),Bq=a("a"),tnt=o("TFElectraForTokenClassification"),rnt=o(" (ELECTRA model)"),ant=l(),YC=a("li"),Dge=a("strong"),snt=o("flaubert"),nnt=o(" \u2014 "),xq=a("a"),lnt=o("TFFlaubertForTokenClassification"),dnt=o(" (FlauBERT model)"),int=l(),KC=a("li"),qge=a("strong"),cnt=o("funnel"),fnt=o(" \u2014 "),kq=a("a"),mnt=o("TFFunnelForTokenClassification"),gnt=o(" (Funnel Transformer model)"),hnt=l(),ZC=a("li"),Gge=a("strong"),unt=o("layoutlm"),pnt=o(" \u2014 "),Rq=a("a"),_nt=o("TFLayoutLMForTokenClassification"),bnt=o(" (LayoutLM model)"),vnt=l(),e4=a("li"),Oge=a("strong"),Tnt=o("longformer"),Fnt=o(" \u2014 "),Sq=a("a"),Cnt=o("TFLongformerForTokenClassification"),Mnt=o(" (Longformer model)"),Ent=l(),o4=a("li"),Xge=a("strong"),ynt=o("mobilebert"),wnt=o(" \u2014 "),Pq=a("a"),Ant=o("TFMobileBertForTokenClassification"),Lnt=o(" (MobileBERT model)"),Bnt=l(),t4=a("li"),zge=a("strong"),xnt=o("mpnet"),knt=o(" \u2014 "),$q=a("a"),Rnt=o("TFMPNetForTokenClassification"),Snt=o(" (MPNet model)"),Pnt=l(),r4=a("li"),Vge=a("strong"),$nt=o("rembert"),Int=o(" \u2014 "),Iq=a("a"),jnt=o("TFRemBertForTokenClassification"),Nnt=o(" (RemBERT model)"),Dnt=l(),a4=a("li"),Wge=a("strong"),qnt=o("roberta"),Gnt=o(" \u2014 "),jq=a("a"),Ont=o("TFRobertaForTokenClassification"),Xnt=o(" (RoBERTa model)"),znt=l(),s4=a("li"),Qge=a("strong"),Vnt=o("roformer"),Wnt=o(" \u2014 "),Nq=a("a"),Qnt=o("TFRoFormerForTokenClassification"),Hnt=o(" (RoFormer model)"),Unt=l(),n4=a("li"),Hge=a("strong"),Jnt=o("xlm"),Ynt=o(" \u2014 "),Dq=a("a"),Knt=o("TFXLMForTokenClassification"),Znt=o(" (XLM model)"),elt=l(),l4=a("li"),Uge=a("strong"),olt=o("xlm-roberta"),tlt=o(" \u2014 "),qq=a("a"),rlt=o("TFXLMRobertaForTokenClassification"),alt=o(" (XLM-RoBERTa model)"),slt=l(),d4=a("li"),Jge=a("strong"),nlt=o("xlnet"),llt=o(" \u2014 "),Gq=a("a"),dlt=o("TFXLNetForTokenClassification"),ilt=o(" (XLNet model)"),clt=l(),Yge=a("p"),flt=o("Examples:"),mlt=l(),f(d0.$$.fragment),I7e=l(),vc=a("h2"),i4=a("a"),Kge=a("span"),f(i0.$$.fragment),glt=l(),Zge=a("span"),hlt=o("TFAutoModelForQuestionAnswering"),j7e=l(),Tt=a("div"),f(c0.$$.fragment),ult=l(),Tc=a("p"),plt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ehe=a("code"),_lt=o("from_pretrained()"),blt=o("class method or the "),ohe=a("code"),vlt=o("from_config()"),Tlt=o(`class
method.`),Flt=l(),f0=a("p"),Clt=o("This class cannot be instantiated directly using "),the=a("code"),Mlt=o("__init__()"),Elt=o(" (throws an error)."),ylt=l(),mr=a("div"),f(m0.$$.fragment),wlt=l(),rhe=a("p"),Alt=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Llt=l(),Fc=a("p"),Blt=o(`Note:
Loading a model from its configuration file does `),ahe=a("strong"),xlt=o("not"),klt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),she=a("code"),Rlt=o("from_pretrained()"),Slt=o("to load the model weights."),Plt=l(),nhe=a("p"),$lt=o("Examples:"),Ilt=l(),f(g0.$$.fragment),jlt=l(),Fo=a("div"),f(h0.$$.fragment),Nlt=l(),lhe=a("p"),Dlt=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),qlt=l(),ms=a("p"),Glt=o("The model class to instantiate is selected based on the "),dhe=a("code"),Olt=o("model_type"),Xlt=o(` property of the config object (either
passed as an argument or loaded from `),ihe=a("code"),zlt=o("pretrained_model_name_or_path"),Vlt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),che=a("code"),Wlt=o("pretrained_model_name_or_path"),Qlt=o(":"),Hlt=l(),Z=a("ul"),c4=a("li"),fhe=a("strong"),Ult=o("albert"),Jlt=o(" \u2014 "),Oq=a("a"),Ylt=o("TFAlbertForQuestionAnswering"),Klt=o(" (ALBERT model)"),Zlt=l(),f4=a("li"),mhe=a("strong"),edt=o("bert"),odt=o(" \u2014 "),Xq=a("a"),tdt=o("TFBertForQuestionAnswering"),rdt=o(" (BERT model)"),adt=l(),m4=a("li"),ghe=a("strong"),sdt=o("camembert"),ndt=o(" \u2014 "),zq=a("a"),ldt=o("TFCamembertForQuestionAnswering"),ddt=o(" (CamemBERT model)"),idt=l(),g4=a("li"),hhe=a("strong"),cdt=o("convbert"),fdt=o(" \u2014 "),Vq=a("a"),mdt=o("TFConvBertForQuestionAnswering"),gdt=o(" (ConvBERT model)"),hdt=l(),h4=a("li"),uhe=a("strong"),udt=o("deberta"),pdt=o(" \u2014 "),Wq=a("a"),_dt=o("TFDebertaForQuestionAnswering"),bdt=o(" (DeBERTa model)"),vdt=l(),u4=a("li"),phe=a("strong"),Tdt=o("deberta-v2"),Fdt=o(" \u2014 "),Qq=a("a"),Cdt=o("TFDebertaV2ForQuestionAnswering"),Mdt=o(" (DeBERTa-v2 model)"),Edt=l(),p4=a("li"),_he=a("strong"),ydt=o("distilbert"),wdt=o(" \u2014 "),Hq=a("a"),Adt=o("TFDistilBertForQuestionAnswering"),Ldt=o(" (DistilBERT model)"),Bdt=l(),_4=a("li"),bhe=a("strong"),xdt=o("electra"),kdt=o(" \u2014 "),Uq=a("a"),Rdt=o("TFElectraForQuestionAnswering"),Sdt=o(" (ELECTRA model)"),Pdt=l(),b4=a("li"),vhe=a("strong"),$dt=o("flaubert"),Idt=o(" \u2014 "),Jq=a("a"),jdt=o("TFFlaubertForQuestionAnsweringSimple"),Ndt=o(" (FlauBERT model)"),Ddt=l(),v4=a("li"),The=a("strong"),qdt=o("funnel"),Gdt=o(" \u2014 "),Yq=a("a"),Odt=o("TFFunnelForQuestionAnswering"),Xdt=o(" (Funnel Transformer model)"),zdt=l(),T4=a("li"),Fhe=a("strong"),Vdt=o("longformer"),Wdt=o(" \u2014 "),Kq=a("a"),Qdt=o("TFLongformerForQuestionAnswering"),Hdt=o(" (Longformer model)"),Udt=l(),F4=a("li"),Che=a("strong"),Jdt=o("mobilebert"),Ydt=o(" \u2014 "),Zq=a("a"),Kdt=o("TFMobileBertForQuestionAnswering"),Zdt=o(" (MobileBERT model)"),eit=l(),C4=a("li"),Mhe=a("strong"),oit=o("mpnet"),tit=o(" \u2014 "),eG=a("a"),rit=o("TFMPNetForQuestionAnswering"),ait=o(" (MPNet model)"),sit=l(),M4=a("li"),Ehe=a("strong"),nit=o("rembert"),lit=o(" \u2014 "),oG=a("a"),dit=o("TFRemBertForQuestionAnswering"),iit=o(" (RemBERT model)"),cit=l(),E4=a("li"),yhe=a("strong"),fit=o("roberta"),mit=o(" \u2014 "),tG=a("a"),git=o("TFRobertaForQuestionAnswering"),hit=o(" (RoBERTa model)"),uit=l(),y4=a("li"),whe=a("strong"),pit=o("roformer"),_it=o(" \u2014 "),rG=a("a"),bit=o("TFRoFormerForQuestionAnswering"),vit=o(" (RoFormer model)"),Tit=l(),w4=a("li"),Ahe=a("strong"),Fit=o("xlm"),Cit=o(" \u2014 "),aG=a("a"),Mit=o("TFXLMForQuestionAnsweringSimple"),Eit=o(" (XLM model)"),yit=l(),A4=a("li"),Lhe=a("strong"),wit=o("xlm-roberta"),Ait=o(" \u2014 "),sG=a("a"),Lit=o("TFXLMRobertaForQuestionAnswering"),Bit=o(" (XLM-RoBERTa model)"),xit=l(),L4=a("li"),Bhe=a("strong"),kit=o("xlnet"),Rit=o(" \u2014 "),nG=a("a"),Sit=o("TFXLNetForQuestionAnsweringSimple"),Pit=o(" (XLNet model)"),$it=l(),xhe=a("p"),Iit=o("Examples:"),jit=l(),f(u0.$$.fragment),N7e=l(),Cc=a("h2"),B4=a("a"),khe=a("span"),f(p0.$$.fragment),Nit=l(),Rhe=a("span"),Dit=o("TFAutoModelForVision2Seq"),D7e=l(),Ft=a("div"),f(_0.$$.fragment),qit=l(),Mc=a("p"),Git=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),She=a("code"),Oit=o("from_pretrained()"),Xit=o("class method or the "),Phe=a("code"),zit=o("from_config()"),Vit=o(`class
method.`),Wit=l(),b0=a("p"),Qit=o("This class cannot be instantiated directly using "),$he=a("code"),Hit=o("__init__()"),Uit=o(" (throws an error)."),Jit=l(),gr=a("div"),f(v0.$$.fragment),Yit=l(),Ihe=a("p"),Kit=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Zit=l(),Ec=a("p"),ect=o(`Note:
Loading a model from its configuration file does `),jhe=a("strong"),oct=o("not"),tct=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nhe=a("code"),rct=o("from_pretrained()"),act=o("to load the model weights."),sct=l(),Dhe=a("p"),nct=o("Examples:"),lct=l(),f(T0.$$.fragment),dct=l(),Co=a("div"),f(F0.$$.fragment),ict=l(),qhe=a("p"),cct=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),fct=l(),gs=a("p"),mct=o("The model class to instantiate is selected based on the "),Ghe=a("code"),gct=o("model_type"),hct=o(` property of the config object (either
passed as an argument or loaded from `),Ohe=a("code"),uct=o("pretrained_model_name_or_path"),pct=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xhe=a("code"),_ct=o("pretrained_model_name_or_path"),bct=o(":"),vct=l(),zhe=a("ul"),x4=a("li"),Vhe=a("strong"),Tct=o("vision-encoder-decoder"),Fct=o(" \u2014 "),lG=a("a"),Cct=o("TFVisionEncoderDecoderModel"),Mct=o(" (Vision Encoder decoder model)"),Ect=l(),Whe=a("p"),yct=o("Examples:"),wct=l(),f(C0.$$.fragment),q7e=l(),yc=a("h2"),k4=a("a"),Qhe=a("span"),f(M0.$$.fragment),Act=l(),Hhe=a("span"),Lct=o("TFAutoModelForSpeechSeq2Seq"),G7e=l(),Ct=a("div"),f(E0.$$.fragment),Bct=l(),wc=a("p"),xct=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Uhe=a("code"),kct=o("from_pretrained()"),Rct=o("class method or the "),Jhe=a("code"),Sct=o("from_config()"),Pct=o(`class
method.`),$ct=l(),y0=a("p"),Ict=o("This class cannot be instantiated directly using "),Yhe=a("code"),jct=o("__init__()"),Nct=o(" (throws an error)."),Dct=l(),hr=a("div"),f(w0.$$.fragment),qct=l(),Khe=a("p"),Gct=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Oct=l(),Ac=a("p"),Xct=o(`Note:
Loading a model from its configuration file does `),Zhe=a("strong"),zct=o("not"),Vct=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eue=a("code"),Wct=o("from_pretrained()"),Qct=o("to load the model weights."),Hct=l(),oue=a("p"),Uct=o("Examples:"),Jct=l(),f(A0.$$.fragment),Yct=l(),Mo=a("div"),f(L0.$$.fragment),Kct=l(),tue=a("p"),Zct=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),eft=l(),hs=a("p"),oft=o("The model class to instantiate is selected based on the "),rue=a("code"),tft=o("model_type"),rft=o(` property of the config object (either
passed as an argument or loaded from `),aue=a("code"),aft=o("pretrained_model_name_or_path"),sft=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sue=a("code"),nft=o("pretrained_model_name_or_path"),lft=o(":"),dft=l(),nue=a("ul"),R4=a("li"),lue=a("strong"),ift=o("speech_to_text"),cft=o(" \u2014 "),dG=a("a"),fft=o("TFSpeech2TextForConditionalGeneration"),mft=o(" (Speech2Text model)"),gft=l(),due=a("p"),hft=o("Examples:"),uft=l(),f(B0.$$.fragment),O7e=l(),Lc=a("h2"),S4=a("a"),iue=a("span"),f(x0.$$.fragment),pft=l(),cue=a("span"),_ft=o("FlaxAutoModel"),X7e=l(),Mt=a("div"),f(k0.$$.fragment),bft=l(),Bc=a("p"),vft=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fue=a("code"),Tft=o("from_pretrained()"),Fft=o("class method or the "),mue=a("code"),Cft=o("from_config()"),Mft=o(`class
method.`),Eft=l(),R0=a("p"),yft=o("This class cannot be instantiated directly using "),gue=a("code"),wft=o("__init__()"),Aft=o(" (throws an error)."),Lft=l(),ur=a("div"),f(S0.$$.fragment),Bft=l(),hue=a("p"),xft=o("Instantiates one of the base model classes of the library from a configuration."),kft=l(),xc=a("p"),Rft=o(`Note:
Loading a model from its configuration file does `),uue=a("strong"),Sft=o("not"),Pft=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pue=a("code"),$ft=o("from_pretrained()"),Ift=o("to load the model weights."),jft=l(),_ue=a("p"),Nft=o("Examples:"),Dft=l(),f(P0.$$.fragment),qft=l(),Eo=a("div"),f($0.$$.fragment),Gft=l(),bue=a("p"),Oft=o("Instantiate one of the base model classes of the library from a pretrained model."),Xft=l(),us=a("p"),zft=o("The model class to instantiate is selected based on the "),vue=a("code"),Vft=o("model_type"),Wft=o(` property of the config object (either
passed as an argument or loaded from `),Tue=a("code"),Qft=o("pretrained_model_name_or_path"),Hft=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fue=a("code"),Uft=o("pretrained_model_name_or_path"),Jft=o(":"),Yft=l(),V=a("ul"),P4=a("li"),Cue=a("strong"),Kft=o("albert"),Zft=o(" \u2014 "),iG=a("a"),emt=o("FlaxAlbertModel"),omt=o(" (ALBERT model)"),tmt=l(),$4=a("li"),Mue=a("strong"),rmt=o("bart"),amt=o(" \u2014 "),cG=a("a"),smt=o("FlaxBartModel"),nmt=o(" (BART model)"),lmt=l(),I4=a("li"),Eue=a("strong"),dmt=o("beit"),imt=o(" \u2014 "),fG=a("a"),cmt=o("FlaxBeitModel"),fmt=o(" (BEiT model)"),mmt=l(),j4=a("li"),yue=a("strong"),gmt=o("bert"),hmt=o(" \u2014 "),mG=a("a"),umt=o("FlaxBertModel"),pmt=o(" (BERT model)"),_mt=l(),N4=a("li"),wue=a("strong"),bmt=o("big_bird"),vmt=o(" \u2014 "),gG=a("a"),Tmt=o("FlaxBigBirdModel"),Fmt=o(" (BigBird model)"),Cmt=l(),D4=a("li"),Aue=a("strong"),Mmt=o("blenderbot"),Emt=o(" \u2014 "),hG=a("a"),ymt=o("FlaxBlenderbotModel"),wmt=o(" (Blenderbot model)"),Amt=l(),q4=a("li"),Lue=a("strong"),Lmt=o("blenderbot-small"),Bmt=o(" \u2014 "),uG=a("a"),xmt=o("FlaxBlenderbotSmallModel"),kmt=o(" (BlenderbotSmall model)"),Rmt=l(),G4=a("li"),Bue=a("strong"),Smt=o("clip"),Pmt=o(" \u2014 "),pG=a("a"),$mt=o("FlaxCLIPModel"),Imt=o(" (CLIP model)"),jmt=l(),O4=a("li"),xue=a("strong"),Nmt=o("distilbert"),Dmt=o(" \u2014 "),_G=a("a"),qmt=o("FlaxDistilBertModel"),Gmt=o(" (DistilBERT model)"),Omt=l(),X4=a("li"),kue=a("strong"),Xmt=o("electra"),zmt=o(" \u2014 "),bG=a("a"),Vmt=o("FlaxElectraModel"),Wmt=o(" (ELECTRA model)"),Qmt=l(),z4=a("li"),Rue=a("strong"),Hmt=o("gpt2"),Umt=o(" \u2014 "),vG=a("a"),Jmt=o("FlaxGPT2Model"),Ymt=o(" (OpenAI GPT-2 model)"),Kmt=l(),V4=a("li"),Sue=a("strong"),Zmt=o("gpt_neo"),egt=o(" \u2014 "),TG=a("a"),ogt=o("FlaxGPTNeoModel"),tgt=o(" (GPT Neo model)"),rgt=l(),W4=a("li"),Pue=a("strong"),agt=o("gptj"),sgt=o(" \u2014 "),FG=a("a"),ngt=o("FlaxGPTJModel"),lgt=o(" (GPT-J model)"),dgt=l(),Q4=a("li"),$ue=a("strong"),igt=o("marian"),cgt=o(" \u2014 "),CG=a("a"),fgt=o("FlaxMarianModel"),mgt=o(" (Marian model)"),ggt=l(),H4=a("li"),Iue=a("strong"),hgt=o("mbart"),ugt=o(" \u2014 "),MG=a("a"),pgt=o("FlaxMBartModel"),_gt=o(" (mBART model)"),bgt=l(),U4=a("li"),jue=a("strong"),vgt=o("mt5"),Tgt=o(" \u2014 "),EG=a("a"),Fgt=o("FlaxMT5Model"),Cgt=o(" (mT5 model)"),Mgt=l(),J4=a("li"),Nue=a("strong"),Egt=o("pegasus"),ygt=o(" \u2014 "),yG=a("a"),wgt=o("FlaxPegasusModel"),Agt=o(" (Pegasus model)"),Lgt=l(),Y4=a("li"),Due=a("strong"),Bgt=o("roberta"),xgt=o(" \u2014 "),wG=a("a"),kgt=o("FlaxRobertaModel"),Rgt=o(" (RoBERTa model)"),Sgt=l(),K4=a("li"),que=a("strong"),Pgt=o("roformer"),$gt=o(" \u2014 "),AG=a("a"),Igt=o("FlaxRoFormerModel"),jgt=o(" (RoFormer model)"),Ngt=l(),Z4=a("li"),Gue=a("strong"),Dgt=o("t5"),qgt=o(" \u2014 "),LG=a("a"),Ggt=o("FlaxT5Model"),Ogt=o(" (T5 model)"),Xgt=l(),eM=a("li"),Oue=a("strong"),zgt=o("vision-text-dual-encoder"),Vgt=o(" \u2014 "),BG=a("a"),Wgt=o("FlaxVisionTextDualEncoderModel"),Qgt=o(" (VisionTextDualEncoder model)"),Hgt=l(),oM=a("li"),Xue=a("strong"),Ugt=o("vit"),Jgt=o(" \u2014 "),xG=a("a"),Ygt=o("FlaxViTModel"),Kgt=o(" (ViT model)"),Zgt=l(),tM=a("li"),zue=a("strong"),eht=o("wav2vec2"),oht=o(" \u2014 "),kG=a("a"),tht=o("FlaxWav2Vec2Model"),rht=o(" (Wav2Vec2 model)"),aht=l(),rM=a("li"),Vue=a("strong"),sht=o("xglm"),nht=o(" \u2014 "),RG=a("a"),lht=o("FlaxXGLMModel"),dht=o(" (XGLM model)"),iht=l(),Wue=a("p"),cht=o("Examples:"),fht=l(),f(I0.$$.fragment),z7e=l(),kc=a("h2"),aM=a("a"),Que=a("span"),f(j0.$$.fragment),mht=l(),Hue=a("span"),ght=o("FlaxAutoModelForCausalLM"),V7e=l(),Et=a("div"),f(N0.$$.fragment),hht=l(),Rc=a("p"),uht=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Uue=a("code"),pht=o("from_pretrained()"),_ht=o("class method or the "),Jue=a("code"),bht=o("from_config()"),vht=o(`class
method.`),Tht=l(),D0=a("p"),Fht=o("This class cannot be instantiated directly using "),Yue=a("code"),Cht=o("__init__()"),Mht=o(" (throws an error)."),Eht=l(),pr=a("div"),f(q0.$$.fragment),yht=l(),Kue=a("p"),wht=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Aht=l(),Sc=a("p"),Lht=o(`Note:
Loading a model from its configuration file does `),Zue=a("strong"),Bht=o("not"),xht=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),epe=a("code"),kht=o("from_pretrained()"),Rht=o("to load the model weights."),Sht=l(),ope=a("p"),Pht=o("Examples:"),$ht=l(),f(G0.$$.fragment),Iht=l(),yo=a("div"),f(O0.$$.fragment),jht=l(),tpe=a("p"),Nht=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Dht=l(),ps=a("p"),qht=o("The model class to instantiate is selected based on the "),rpe=a("code"),Ght=o("model_type"),Oht=o(` property of the config object (either
passed as an argument or loaded from `),ape=a("code"),Xht=o("pretrained_model_name_or_path"),zht=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=a("code"),Vht=o("pretrained_model_name_or_path"),Wht=o(":"),Qht=l(),_s=a("ul"),sM=a("li"),npe=a("strong"),Hht=o("gpt2"),Uht=o(" \u2014 "),SG=a("a"),Jht=o("FlaxGPT2LMHeadModel"),Yht=o(" (OpenAI GPT-2 model)"),Kht=l(),nM=a("li"),lpe=a("strong"),Zht=o("gpt_neo"),eut=o(" \u2014 "),PG=a("a"),out=o("FlaxGPTNeoForCausalLM"),tut=o(" (GPT Neo model)"),rut=l(),lM=a("li"),dpe=a("strong"),aut=o("gptj"),sut=o(" \u2014 "),$G=a("a"),nut=o("FlaxGPTJForCausalLM"),lut=o(" (GPT-J model)"),dut=l(),dM=a("li"),ipe=a("strong"),iut=o("xglm"),cut=o(" \u2014 "),IG=a("a"),fut=o("FlaxXGLMForCausalLM"),mut=o(" (XGLM model)"),gut=l(),cpe=a("p"),hut=o("Examples:"),uut=l(),f(X0.$$.fragment),W7e=l(),Pc=a("h2"),iM=a("a"),fpe=a("span"),f(z0.$$.fragment),put=l(),mpe=a("span"),_ut=o("FlaxAutoModelForPreTraining"),Q7e=l(),yt=a("div"),f(V0.$$.fragment),but=l(),$c=a("p"),vut=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gpe=a("code"),Tut=o("from_pretrained()"),Fut=o("class method or the "),hpe=a("code"),Cut=o("from_config()"),Mut=o(`class
method.`),Eut=l(),W0=a("p"),yut=o("This class cannot be instantiated directly using "),upe=a("code"),wut=o("__init__()"),Aut=o(" (throws an error)."),Lut=l(),_r=a("div"),f(Q0.$$.fragment),But=l(),ppe=a("p"),xut=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kut=l(),Ic=a("p"),Rut=o(`Note:
Loading a model from its configuration file does `),_pe=a("strong"),Sut=o("not"),Put=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bpe=a("code"),$ut=o("from_pretrained()"),Iut=o("to load the model weights."),jut=l(),vpe=a("p"),Nut=o("Examples:"),Dut=l(),f(H0.$$.fragment),qut=l(),wo=a("div"),f(U0.$$.fragment),Gut=l(),Tpe=a("p"),Out=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Xut=l(),bs=a("p"),zut=o("The model class to instantiate is selected based on the "),Fpe=a("code"),Vut=o("model_type"),Wut=o(` property of the config object (either
passed as an argument or loaded from `),Cpe=a("code"),Qut=o("pretrained_model_name_or_path"),Hut=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mpe=a("code"),Uut=o("pretrained_model_name_or_path"),Jut=o(":"),Yut=l(),fe=a("ul"),cM=a("li"),Epe=a("strong"),Kut=o("albert"),Zut=o(" \u2014 "),jG=a("a"),ept=o("FlaxAlbertForPreTraining"),opt=o(" (ALBERT model)"),tpt=l(),fM=a("li"),ype=a("strong"),rpt=o("bart"),apt=o(" \u2014 "),NG=a("a"),spt=o("FlaxBartForConditionalGeneration"),npt=o(" (BART model)"),lpt=l(),mM=a("li"),wpe=a("strong"),dpt=o("bert"),ipt=o(" \u2014 "),DG=a("a"),cpt=o("FlaxBertForPreTraining"),fpt=o(" (BERT model)"),mpt=l(),gM=a("li"),Ape=a("strong"),gpt=o("big_bird"),hpt=o(" \u2014 "),qG=a("a"),upt=o("FlaxBigBirdForPreTraining"),ppt=o(" (BigBird model)"),_pt=l(),hM=a("li"),Lpe=a("strong"),bpt=o("electra"),vpt=o(" \u2014 "),GG=a("a"),Tpt=o("FlaxElectraForPreTraining"),Fpt=o(" (ELECTRA model)"),Cpt=l(),uM=a("li"),Bpe=a("strong"),Mpt=o("mbart"),Ept=o(" \u2014 "),OG=a("a"),ypt=o("FlaxMBartForConditionalGeneration"),wpt=o(" (mBART model)"),Apt=l(),pM=a("li"),xpe=a("strong"),Lpt=o("mt5"),Bpt=o(" \u2014 "),XG=a("a"),xpt=o("FlaxMT5ForConditionalGeneration"),kpt=o(" (mT5 model)"),Rpt=l(),_M=a("li"),kpe=a("strong"),Spt=o("roberta"),Ppt=o(" \u2014 "),zG=a("a"),$pt=o("FlaxRobertaForMaskedLM"),Ipt=o(" (RoBERTa model)"),jpt=l(),bM=a("li"),Rpe=a("strong"),Npt=o("roformer"),Dpt=o(" \u2014 "),VG=a("a"),qpt=o("FlaxRoFormerForMaskedLM"),Gpt=o(" (RoFormer model)"),Opt=l(),vM=a("li"),Spe=a("strong"),Xpt=o("t5"),zpt=o(" \u2014 "),WG=a("a"),Vpt=o("FlaxT5ForConditionalGeneration"),Wpt=o(" (T5 model)"),Qpt=l(),TM=a("li"),Ppe=a("strong"),Hpt=o("wav2vec2"),Upt=o(" \u2014 "),QG=a("a"),Jpt=o("FlaxWav2Vec2ForPreTraining"),Ypt=o(" (Wav2Vec2 model)"),Kpt=l(),$pe=a("p"),Zpt=o("Examples:"),e_t=l(),f(J0.$$.fragment),H7e=l(),jc=a("h2"),FM=a("a"),Ipe=a("span"),f(Y0.$$.fragment),o_t=l(),jpe=a("span"),t_t=o("FlaxAutoModelForMaskedLM"),U7e=l(),wt=a("div"),f(K0.$$.fragment),r_t=l(),Nc=a("p"),a_t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Npe=a("code"),s_t=o("from_pretrained()"),n_t=o("class method or the "),Dpe=a("code"),l_t=o("from_config()"),d_t=o(`class
method.`),i_t=l(),Z0=a("p"),c_t=o("This class cannot be instantiated directly using "),qpe=a("code"),f_t=o("__init__()"),m_t=o(" (throws an error)."),g_t=l(),br=a("div"),f(e6.$$.fragment),h_t=l(),Gpe=a("p"),u_t=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),p_t=l(),Dc=a("p"),__t=o(`Note:
Loading a model from its configuration file does `),Ope=a("strong"),b_t=o("not"),v_t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xpe=a("code"),T_t=o("from_pretrained()"),F_t=o("to load the model weights."),C_t=l(),zpe=a("p"),M_t=o("Examples:"),E_t=l(),f(o6.$$.fragment),y_t=l(),Ao=a("div"),f(t6.$$.fragment),w_t=l(),Vpe=a("p"),A_t=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),L_t=l(),vs=a("p"),B_t=o("The model class to instantiate is selected based on the "),Wpe=a("code"),x_t=o("model_type"),k_t=o(` property of the config object (either
passed as an argument or loaded from `),Qpe=a("code"),R_t=o("pretrained_model_name_or_path"),S_t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hpe=a("code"),P_t=o("pretrained_model_name_or_path"),$_t=o(":"),I_t=l(),be=a("ul"),CM=a("li"),Upe=a("strong"),j_t=o("albert"),N_t=o(" \u2014 "),HG=a("a"),D_t=o("FlaxAlbertForMaskedLM"),q_t=o(" (ALBERT model)"),G_t=l(),MM=a("li"),Jpe=a("strong"),O_t=o("bart"),X_t=o(" \u2014 "),UG=a("a"),z_t=o("FlaxBartForConditionalGeneration"),V_t=o(" (BART model)"),W_t=l(),EM=a("li"),Ype=a("strong"),Q_t=o("bert"),H_t=o(" \u2014 "),JG=a("a"),U_t=o("FlaxBertForMaskedLM"),J_t=o(" (BERT model)"),Y_t=l(),yM=a("li"),Kpe=a("strong"),K_t=o("big_bird"),Z_t=o(" \u2014 "),YG=a("a"),ebt=o("FlaxBigBirdForMaskedLM"),obt=o(" (BigBird model)"),tbt=l(),wM=a("li"),Zpe=a("strong"),rbt=o("distilbert"),abt=o(" \u2014 "),KG=a("a"),sbt=o("FlaxDistilBertForMaskedLM"),nbt=o(" (DistilBERT model)"),lbt=l(),AM=a("li"),e_e=a("strong"),dbt=o("electra"),ibt=o(" \u2014 "),ZG=a("a"),cbt=o("FlaxElectraForMaskedLM"),fbt=o(" (ELECTRA model)"),mbt=l(),LM=a("li"),o_e=a("strong"),gbt=o("mbart"),hbt=o(" \u2014 "),eO=a("a"),ubt=o("FlaxMBartForConditionalGeneration"),pbt=o(" (mBART model)"),_bt=l(),BM=a("li"),t_e=a("strong"),bbt=o("roberta"),vbt=o(" \u2014 "),oO=a("a"),Tbt=o("FlaxRobertaForMaskedLM"),Fbt=o(" (RoBERTa model)"),Cbt=l(),xM=a("li"),r_e=a("strong"),Mbt=o("roformer"),Ebt=o(" \u2014 "),tO=a("a"),ybt=o("FlaxRoFormerForMaskedLM"),wbt=o(" (RoFormer model)"),Abt=l(),a_e=a("p"),Lbt=o("Examples:"),Bbt=l(),f(r6.$$.fragment),J7e=l(),qc=a("h2"),kM=a("a"),s_e=a("span"),f(a6.$$.fragment),xbt=l(),n_e=a("span"),kbt=o("FlaxAutoModelForSeq2SeqLM"),Y7e=l(),At=a("div"),f(s6.$$.fragment),Rbt=l(),Gc=a("p"),Sbt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),l_e=a("code"),Pbt=o("from_pretrained()"),$bt=o("class method or the "),d_e=a("code"),Ibt=o("from_config()"),jbt=o(`class
method.`),Nbt=l(),n6=a("p"),Dbt=o("This class cannot be instantiated directly using "),i_e=a("code"),qbt=o("__init__()"),Gbt=o(" (throws an error)."),Obt=l(),vr=a("div"),f(l6.$$.fragment),Xbt=l(),c_e=a("p"),zbt=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Vbt=l(),Oc=a("p"),Wbt=o(`Note:
Loading a model from its configuration file does `),f_e=a("strong"),Qbt=o("not"),Hbt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),m_e=a("code"),Ubt=o("from_pretrained()"),Jbt=o("to load the model weights."),Ybt=l(),g_e=a("p"),Kbt=o("Examples:"),Zbt=l(),f(d6.$$.fragment),e2t=l(),Lo=a("div"),f(i6.$$.fragment),o2t=l(),h_e=a("p"),t2t=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),r2t=l(),Ts=a("p"),a2t=o("The model class to instantiate is selected based on the "),u_e=a("code"),s2t=o("model_type"),n2t=o(` property of the config object (either
passed as an argument or loaded from `),p_e=a("code"),l2t=o("pretrained_model_name_or_path"),d2t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),__e=a("code"),i2t=o("pretrained_model_name_or_path"),c2t=o(":"),f2t=l(),ve=a("ul"),RM=a("li"),b_e=a("strong"),m2t=o("bart"),g2t=o(" \u2014 "),rO=a("a"),h2t=o("FlaxBartForConditionalGeneration"),u2t=o(" (BART model)"),p2t=l(),SM=a("li"),v_e=a("strong"),_2t=o("blenderbot"),b2t=o(" \u2014 "),aO=a("a"),v2t=o("FlaxBlenderbotForConditionalGeneration"),T2t=o(" (Blenderbot model)"),F2t=l(),PM=a("li"),T_e=a("strong"),C2t=o("blenderbot-small"),M2t=o(" \u2014 "),sO=a("a"),E2t=o("FlaxBlenderbotSmallForConditionalGeneration"),y2t=o(" (BlenderbotSmall model)"),w2t=l(),$M=a("li"),F_e=a("strong"),A2t=o("encoder-decoder"),L2t=o(" \u2014 "),nO=a("a"),B2t=o("FlaxEncoderDecoderModel"),x2t=o(" (Encoder decoder model)"),k2t=l(),IM=a("li"),C_e=a("strong"),R2t=o("marian"),S2t=o(" \u2014 "),lO=a("a"),P2t=o("FlaxMarianMTModel"),$2t=o(" (Marian model)"),I2t=l(),jM=a("li"),M_e=a("strong"),j2t=o("mbart"),N2t=o(" \u2014 "),dO=a("a"),D2t=o("FlaxMBartForConditionalGeneration"),q2t=o(" (mBART model)"),G2t=l(),NM=a("li"),E_e=a("strong"),O2t=o("mt5"),X2t=o(" \u2014 "),iO=a("a"),z2t=o("FlaxMT5ForConditionalGeneration"),V2t=o(" (mT5 model)"),W2t=l(),DM=a("li"),y_e=a("strong"),Q2t=o("pegasus"),H2t=o(" \u2014 "),cO=a("a"),U2t=o("FlaxPegasusForConditionalGeneration"),J2t=o(" (Pegasus model)"),Y2t=l(),qM=a("li"),w_e=a("strong"),K2t=o("t5"),Z2t=o(" \u2014 "),fO=a("a"),evt=o("FlaxT5ForConditionalGeneration"),ovt=o(" (T5 model)"),tvt=l(),A_e=a("p"),rvt=o("Examples:"),avt=l(),f(c6.$$.fragment),K7e=l(),Xc=a("h2"),GM=a("a"),L_e=a("span"),f(f6.$$.fragment),svt=l(),B_e=a("span"),nvt=o("FlaxAutoModelForSequenceClassification"),Z7e=l(),Lt=a("div"),f(m6.$$.fragment),lvt=l(),zc=a("p"),dvt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),x_e=a("code"),ivt=o("from_pretrained()"),cvt=o("class method or the "),k_e=a("code"),fvt=o("from_config()"),mvt=o(`class
method.`),gvt=l(),g6=a("p"),hvt=o("This class cannot be instantiated directly using "),R_e=a("code"),uvt=o("__init__()"),pvt=o(" (throws an error)."),_vt=l(),Tr=a("div"),f(h6.$$.fragment),bvt=l(),S_e=a("p"),vvt=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Tvt=l(),Vc=a("p"),Fvt=o(`Note:
Loading a model from its configuration file does `),P_e=a("strong"),Cvt=o("not"),Mvt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$_e=a("code"),Evt=o("from_pretrained()"),yvt=o("to load the model weights."),wvt=l(),I_e=a("p"),Avt=o("Examples:"),Lvt=l(),f(u6.$$.fragment),Bvt=l(),Bo=a("div"),f(p6.$$.fragment),xvt=l(),j_e=a("p"),kvt=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Rvt=l(),Fs=a("p"),Svt=o("The model class to instantiate is selected based on the "),N_e=a("code"),Pvt=o("model_type"),$vt=o(` property of the config object (either
passed as an argument or loaded from `),D_e=a("code"),Ivt=o("pretrained_model_name_or_path"),jvt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q_e=a("code"),Nvt=o("pretrained_model_name_or_path"),Dvt=o(":"),qvt=l(),Te=a("ul"),OM=a("li"),G_e=a("strong"),Gvt=o("albert"),Ovt=o(" \u2014 "),mO=a("a"),Xvt=o("FlaxAlbertForSequenceClassification"),zvt=o(" (ALBERT model)"),Vvt=l(),XM=a("li"),O_e=a("strong"),Wvt=o("bart"),Qvt=o(" \u2014 "),gO=a("a"),Hvt=o("FlaxBartForSequenceClassification"),Uvt=o(" (BART model)"),Jvt=l(),zM=a("li"),X_e=a("strong"),Yvt=o("bert"),Kvt=o(" \u2014 "),hO=a("a"),Zvt=o("FlaxBertForSequenceClassification"),eTt=o(" (BERT model)"),oTt=l(),VM=a("li"),z_e=a("strong"),tTt=o("big_bird"),rTt=o(" \u2014 "),uO=a("a"),aTt=o("FlaxBigBirdForSequenceClassification"),sTt=o(" (BigBird model)"),nTt=l(),WM=a("li"),V_e=a("strong"),lTt=o("distilbert"),dTt=o(" \u2014 "),pO=a("a"),iTt=o("FlaxDistilBertForSequenceClassification"),cTt=o(" (DistilBERT model)"),fTt=l(),QM=a("li"),W_e=a("strong"),mTt=o("electra"),gTt=o(" \u2014 "),_O=a("a"),hTt=o("FlaxElectraForSequenceClassification"),uTt=o(" (ELECTRA model)"),pTt=l(),HM=a("li"),Q_e=a("strong"),_Tt=o("mbart"),bTt=o(" \u2014 "),bO=a("a"),vTt=o("FlaxMBartForSequenceClassification"),TTt=o(" (mBART model)"),FTt=l(),UM=a("li"),H_e=a("strong"),CTt=o("roberta"),MTt=o(" \u2014 "),vO=a("a"),ETt=o("FlaxRobertaForSequenceClassification"),yTt=o(" (RoBERTa model)"),wTt=l(),JM=a("li"),U_e=a("strong"),ATt=o("roformer"),LTt=o(" \u2014 "),TO=a("a"),BTt=o("FlaxRoFormerForSequenceClassification"),xTt=o(" (RoFormer model)"),kTt=l(),J_e=a("p"),RTt=o("Examples:"),STt=l(),f(_6.$$.fragment),e8e=l(),Wc=a("h2"),YM=a("a"),Y_e=a("span"),f(b6.$$.fragment),PTt=l(),K_e=a("span"),$Tt=o("FlaxAutoModelForQuestionAnswering"),o8e=l(),Bt=a("div"),f(v6.$$.fragment),ITt=l(),Qc=a("p"),jTt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Z_e=a("code"),NTt=o("from_pretrained()"),DTt=o("class method or the "),ebe=a("code"),qTt=o("from_config()"),GTt=o(`class
method.`),OTt=l(),T6=a("p"),XTt=o("This class cannot be instantiated directly using "),obe=a("code"),zTt=o("__init__()"),VTt=o(" (throws an error)."),WTt=l(),Fr=a("div"),f(F6.$$.fragment),QTt=l(),tbe=a("p"),HTt=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),UTt=l(),Hc=a("p"),JTt=o(`Note:
Loading a model from its configuration file does `),rbe=a("strong"),YTt=o("not"),KTt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),abe=a("code"),ZTt=o("from_pretrained()"),e1t=o("to load the model weights."),o1t=l(),sbe=a("p"),t1t=o("Examples:"),r1t=l(),f(C6.$$.fragment),a1t=l(),xo=a("div"),f(M6.$$.fragment),s1t=l(),nbe=a("p"),n1t=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),l1t=l(),Cs=a("p"),d1t=o("The model class to instantiate is selected based on the "),lbe=a("code"),i1t=o("model_type"),c1t=o(` property of the config object (either
passed as an argument or loaded from `),dbe=a("code"),f1t=o("pretrained_model_name_or_path"),m1t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ibe=a("code"),g1t=o("pretrained_model_name_or_path"),h1t=o(":"),u1t=l(),Fe=a("ul"),KM=a("li"),cbe=a("strong"),p1t=o("albert"),_1t=o(" \u2014 "),FO=a("a"),b1t=o("FlaxAlbertForQuestionAnswering"),v1t=o(" (ALBERT model)"),T1t=l(),ZM=a("li"),fbe=a("strong"),F1t=o("bart"),C1t=o(" \u2014 "),CO=a("a"),M1t=o("FlaxBartForQuestionAnswering"),E1t=o(" (BART model)"),y1t=l(),eE=a("li"),mbe=a("strong"),w1t=o("bert"),A1t=o(" \u2014 "),MO=a("a"),L1t=o("FlaxBertForQuestionAnswering"),B1t=o(" (BERT model)"),x1t=l(),oE=a("li"),gbe=a("strong"),k1t=o("big_bird"),R1t=o(" \u2014 "),EO=a("a"),S1t=o("FlaxBigBirdForQuestionAnswering"),P1t=o(" (BigBird model)"),$1t=l(),tE=a("li"),hbe=a("strong"),I1t=o("distilbert"),j1t=o(" \u2014 "),yO=a("a"),N1t=o("FlaxDistilBertForQuestionAnswering"),D1t=o(" (DistilBERT model)"),q1t=l(),rE=a("li"),ube=a("strong"),G1t=o("electra"),O1t=o(" \u2014 "),wO=a("a"),X1t=o("FlaxElectraForQuestionAnswering"),z1t=o(" (ELECTRA model)"),V1t=l(),aE=a("li"),pbe=a("strong"),W1t=o("mbart"),Q1t=o(" \u2014 "),AO=a("a"),H1t=o("FlaxMBartForQuestionAnswering"),U1t=o(" (mBART model)"),J1t=l(),sE=a("li"),_be=a("strong"),Y1t=o("roberta"),K1t=o(" \u2014 "),LO=a("a"),Z1t=o("FlaxRobertaForQuestionAnswering"),eFt=o(" (RoBERTa model)"),oFt=l(),nE=a("li"),bbe=a("strong"),tFt=o("roformer"),rFt=o(" \u2014 "),BO=a("a"),aFt=o("FlaxRoFormerForQuestionAnswering"),sFt=o(" (RoFormer model)"),nFt=l(),vbe=a("p"),lFt=o("Examples:"),dFt=l(),f(E6.$$.fragment),t8e=l(),Uc=a("h2"),lE=a("a"),Tbe=a("span"),f(y6.$$.fragment),iFt=l(),Fbe=a("span"),cFt=o("FlaxAutoModelForTokenClassification"),r8e=l(),xt=a("div"),f(w6.$$.fragment),fFt=l(),Jc=a("p"),mFt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Cbe=a("code"),gFt=o("from_pretrained()"),hFt=o("class method or the "),Mbe=a("code"),uFt=o("from_config()"),pFt=o(`class
method.`),_Ft=l(),A6=a("p"),bFt=o("This class cannot be instantiated directly using "),Ebe=a("code"),vFt=o("__init__()"),TFt=o(" (throws an error)."),FFt=l(),Cr=a("div"),f(L6.$$.fragment),CFt=l(),ybe=a("p"),MFt=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),EFt=l(),Yc=a("p"),yFt=o(`Note:
Loading a model from its configuration file does `),wbe=a("strong"),wFt=o("not"),AFt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Abe=a("code"),LFt=o("from_pretrained()"),BFt=o("to load the model weights."),xFt=l(),Lbe=a("p"),kFt=o("Examples:"),RFt=l(),f(B6.$$.fragment),SFt=l(),ko=a("div"),f(x6.$$.fragment),PFt=l(),Bbe=a("p"),$Ft=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),IFt=l(),Ms=a("p"),jFt=o("The model class to instantiate is selected based on the "),xbe=a("code"),NFt=o("model_type"),DFt=o(` property of the config object (either
passed as an argument or loaded from `),kbe=a("code"),qFt=o("pretrained_model_name_or_path"),GFt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=a("code"),OFt=o("pretrained_model_name_or_path"),XFt=o(":"),zFt=l(),ao=a("ul"),dE=a("li"),Sbe=a("strong"),VFt=o("albert"),WFt=o(" \u2014 "),xO=a("a"),QFt=o("FlaxAlbertForTokenClassification"),HFt=o(" (ALBERT model)"),UFt=l(),iE=a("li"),Pbe=a("strong"),JFt=o("bert"),YFt=o(" \u2014 "),kO=a("a"),KFt=o("FlaxBertForTokenClassification"),ZFt=o(" (BERT model)"),eCt=l(),cE=a("li"),$be=a("strong"),oCt=o("big_bird"),tCt=o(" \u2014 "),RO=a("a"),rCt=o("FlaxBigBirdForTokenClassification"),aCt=o(" (BigBird model)"),sCt=l(),fE=a("li"),Ibe=a("strong"),nCt=o("distilbert"),lCt=o(" \u2014 "),SO=a("a"),dCt=o("FlaxDistilBertForTokenClassification"),iCt=o(" (DistilBERT model)"),cCt=l(),mE=a("li"),jbe=a("strong"),fCt=o("electra"),mCt=o(" \u2014 "),PO=a("a"),gCt=o("FlaxElectraForTokenClassification"),hCt=o(" (ELECTRA model)"),uCt=l(),gE=a("li"),Nbe=a("strong"),pCt=o("roberta"),_Ct=o(" \u2014 "),$O=a("a"),bCt=o("FlaxRobertaForTokenClassification"),vCt=o(" (RoBERTa model)"),TCt=l(),hE=a("li"),Dbe=a("strong"),FCt=o("roformer"),CCt=o(" \u2014 "),IO=a("a"),MCt=o("FlaxRoFormerForTokenClassification"),ECt=o(" (RoFormer model)"),yCt=l(),qbe=a("p"),wCt=o("Examples:"),ACt=l(),f(k6.$$.fragment),a8e=l(),Kc=a("h2"),uE=a("a"),Gbe=a("span"),f(R6.$$.fragment),LCt=l(),Obe=a("span"),BCt=o("FlaxAutoModelForMultipleChoice"),s8e=l(),kt=a("div"),f(S6.$$.fragment),xCt=l(),Zc=a("p"),kCt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Xbe=a("code"),RCt=o("from_pretrained()"),SCt=o("class method or the "),zbe=a("code"),PCt=o("from_config()"),$Ct=o(`class
method.`),ICt=l(),P6=a("p"),jCt=o("This class cannot be instantiated directly using "),Vbe=a("code"),NCt=o("__init__()"),DCt=o(" (throws an error)."),qCt=l(),Mr=a("div"),f($6.$$.fragment),GCt=l(),Wbe=a("p"),OCt=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),XCt=l(),ef=a("p"),zCt=o(`Note:
Loading a model from its configuration file does `),Qbe=a("strong"),VCt=o("not"),WCt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hbe=a("code"),QCt=o("from_pretrained()"),HCt=o("to load the model weights."),UCt=l(),Ube=a("p"),JCt=o("Examples:"),YCt=l(),f(I6.$$.fragment),KCt=l(),Ro=a("div"),f(j6.$$.fragment),ZCt=l(),Jbe=a("p"),e4t=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),o4t=l(),Es=a("p"),t4t=o("The model class to instantiate is selected based on the "),Ybe=a("code"),r4t=o("model_type"),a4t=o(` property of the config object (either
passed as an argument or loaded from `),Kbe=a("code"),s4t=o("pretrained_model_name_or_path"),n4t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zbe=a("code"),l4t=o("pretrained_model_name_or_path"),d4t=o(":"),i4t=l(),so=a("ul"),pE=a("li"),e2e=a("strong"),c4t=o("albert"),f4t=o(" \u2014 "),jO=a("a"),m4t=o("FlaxAlbertForMultipleChoice"),g4t=o(" (ALBERT model)"),h4t=l(),_E=a("li"),o2e=a("strong"),u4t=o("bert"),p4t=o(" \u2014 "),NO=a("a"),_4t=o("FlaxBertForMultipleChoice"),b4t=o(" (BERT model)"),v4t=l(),bE=a("li"),t2e=a("strong"),T4t=o("big_bird"),F4t=o(" \u2014 "),DO=a("a"),C4t=o("FlaxBigBirdForMultipleChoice"),M4t=o(" (BigBird model)"),E4t=l(),vE=a("li"),r2e=a("strong"),y4t=o("distilbert"),w4t=o(" \u2014 "),qO=a("a"),A4t=o("FlaxDistilBertForMultipleChoice"),L4t=o(" (DistilBERT model)"),B4t=l(),TE=a("li"),a2e=a("strong"),x4t=o("electra"),k4t=o(" \u2014 "),GO=a("a"),R4t=o("FlaxElectraForMultipleChoice"),S4t=o(" (ELECTRA model)"),P4t=l(),FE=a("li"),s2e=a("strong"),$4t=o("roberta"),I4t=o(" \u2014 "),OO=a("a"),j4t=o("FlaxRobertaForMultipleChoice"),N4t=o(" (RoBERTa model)"),D4t=l(),CE=a("li"),n2e=a("strong"),q4t=o("roformer"),G4t=o(" \u2014 "),XO=a("a"),O4t=o("FlaxRoFormerForMultipleChoice"),X4t=o(" (RoFormer model)"),z4t=l(),l2e=a("p"),V4t=o("Examples:"),W4t=l(),f(N6.$$.fragment),n8e=l(),of=a("h2"),ME=a("a"),d2e=a("span"),f(D6.$$.fragment),Q4t=l(),i2e=a("span"),H4t=o("FlaxAutoModelForNextSentencePrediction"),l8e=l(),Rt=a("div"),f(q6.$$.fragment),U4t=l(),tf=a("p"),J4t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),c2e=a("code"),Y4t=o("from_pretrained()"),K4t=o("class method or the "),f2e=a("code"),Z4t=o("from_config()"),eMt=o(`class
method.`),oMt=l(),G6=a("p"),tMt=o("This class cannot be instantiated directly using "),m2e=a("code"),rMt=o("__init__()"),aMt=o(" (throws an error)."),sMt=l(),Er=a("div"),f(O6.$$.fragment),nMt=l(),g2e=a("p"),lMt=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),dMt=l(),rf=a("p"),iMt=o(`Note:
Loading a model from its configuration file does `),h2e=a("strong"),cMt=o("not"),fMt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),u2e=a("code"),mMt=o("from_pretrained()"),gMt=o("to load the model weights."),hMt=l(),p2e=a("p"),uMt=o("Examples:"),pMt=l(),f(X6.$$.fragment),_Mt=l(),So=a("div"),f(z6.$$.fragment),bMt=l(),_2e=a("p"),vMt=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),TMt=l(),ys=a("p"),FMt=o("The model class to instantiate is selected based on the "),b2e=a("code"),CMt=o("model_type"),MMt=o(` property of the config object (either
passed as an argument or loaded from `),v2e=a("code"),EMt=o("pretrained_model_name_or_path"),yMt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T2e=a("code"),wMt=o("pretrained_model_name_or_path"),AMt=o(":"),LMt=l(),F2e=a("ul"),EE=a("li"),C2e=a("strong"),BMt=o("bert"),xMt=o(" \u2014 "),zO=a("a"),kMt=o("FlaxBertForNextSentencePrediction"),RMt=o(" (BERT model)"),SMt=l(),M2e=a("p"),PMt=o("Examples:"),$Mt=l(),f(V6.$$.fragment),d8e=l(),af=a("h2"),yE=a("a"),E2e=a("span"),f(W6.$$.fragment),IMt=l(),y2e=a("span"),jMt=o("FlaxAutoModelForImageClassification"),i8e=l(),St=a("div"),f(Q6.$$.fragment),NMt=l(),sf=a("p"),DMt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),w2e=a("code"),qMt=o("from_pretrained()"),GMt=o("class method or the "),A2e=a("code"),OMt=o("from_config()"),XMt=o(`class
method.`),zMt=l(),H6=a("p"),VMt=o("This class cannot be instantiated directly using "),L2e=a("code"),WMt=o("__init__()"),QMt=o(" (throws an error)."),HMt=l(),yr=a("div"),f(U6.$$.fragment),UMt=l(),B2e=a("p"),JMt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),YMt=l(),nf=a("p"),KMt=o(`Note:
Loading a model from its configuration file does `),x2e=a("strong"),ZMt=o("not"),eEt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),k2e=a("code"),oEt=o("from_pretrained()"),tEt=o("to load the model weights."),rEt=l(),R2e=a("p"),aEt=o("Examples:"),sEt=l(),f(J6.$$.fragment),nEt=l(),Po=a("div"),f(Y6.$$.fragment),lEt=l(),S2e=a("p"),dEt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),iEt=l(),ws=a("p"),cEt=o("The model class to instantiate is selected based on the "),P2e=a("code"),fEt=o("model_type"),mEt=o(` property of the config object (either
passed as an argument or loaded from `),$2e=a("code"),gEt=o("pretrained_model_name_or_path"),hEt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I2e=a("code"),uEt=o("pretrained_model_name_or_path"),pEt=o(":"),_Et=l(),K6=a("ul"),wE=a("li"),j2e=a("strong"),bEt=o("beit"),vEt=o(" \u2014 "),VO=a("a"),TEt=o("FlaxBeitForImageClassification"),FEt=o(" (BEiT model)"),CEt=l(),AE=a("li"),N2e=a("strong"),MEt=o("vit"),EEt=o(" \u2014 "),WO=a("a"),yEt=o("FlaxViTForImageClassification"),wEt=o(" (ViT model)"),AEt=l(),D2e=a("p"),LEt=o("Examples:"),BEt=l(),f(Z6.$$.fragment),c8e=l(),lf=a("h2"),LE=a("a"),q2e=a("span"),f(eL.$$.fragment),xEt=l(),G2e=a("span"),kEt=o("FlaxAutoModelForVision2Seq"),f8e=l(),Pt=a("div"),f(oL.$$.fragment),REt=l(),df=a("p"),SEt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),O2e=a("code"),PEt=o("from_pretrained()"),$Et=o("class method or the "),X2e=a("code"),IEt=o("from_config()"),jEt=o(`class
method.`),NEt=l(),tL=a("p"),DEt=o("This class cannot be instantiated directly using "),z2e=a("code"),qEt=o("__init__()"),GEt=o(" (throws an error)."),OEt=l(),wr=a("div"),f(rL.$$.fragment),XEt=l(),V2e=a("p"),zEt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),VEt=l(),cf=a("p"),WEt=o(`Note:
Loading a model from its configuration file does `),W2e=a("strong"),QEt=o("not"),HEt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Q2e=a("code"),UEt=o("from_pretrained()"),JEt=o("to load the model weights."),YEt=l(),H2e=a("p"),KEt=o("Examples:"),ZEt=l(),f(aL.$$.fragment),e3t=l(),$o=a("div"),f(sL.$$.fragment),o3t=l(),U2e=a("p"),t3t=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),r3t=l(),As=a("p"),a3t=o("The model class to instantiate is selected based on the "),J2e=a("code"),s3t=o("model_type"),n3t=o(` property of the config object (either
passed as an argument or loaded from `),Y2e=a("code"),l3t=o("pretrained_model_name_or_path"),d3t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K2e=a("code"),i3t=o("pretrained_model_name_or_path"),c3t=o(":"),f3t=l(),Z2e=a("ul"),BE=a("li"),eve=a("strong"),m3t=o("vision-encoder-decoder"),g3t=o(" \u2014 "),QO=a("a"),h3t=o("FlaxVisionEncoderDecoderModel"),u3t=o(" (Vision Encoder decoder model)"),p3t=l(),ove=a("p"),_3t=o("Examples:"),b3t=l(),f(nL.$$.fragment),this.h()},l(i){const _=Pfr('[data-svelte="svelte-1phssyn"]',document.head);J=s(_,"META",{name:!0,content:!0}),_.forEach(r),Ae=d(i),le=s(i,"H1",{class:!0});var lL=n(le);me=s(lL,"A",{id:!0,class:!0,href:!0});var tve=n(me);oo=s(tve,"SPAN",{});var rve=n(oo);m(ce.$$.fragment,rve),rve.forEach(r),tve.forEach(r),_e=d(lL),No=s(lL,"SPAN",{});var T3t=n(No);bd=t(T3t,"Auto Classes"),T3t.forEach(r),lL.forEach(r),mf=d(i),ta=s(i,"P",{});var g8e=n(ta);vd=t(g8e,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Td=s(g8e,"CODE",{});var F3t=n(Td);A3=t(F3t,"from_pretrained()"),F3t.forEach(r),gf=t(g8e,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),g8e.forEach(r),Ee=d(i),no=s(i,"P",{});var xE=n(no);Fd=t(xE,"Instantiating one of "),Ls=s(xE,"A",{href:!0});var C3t=n(Ls);L3=t(C3t,"AutoConfig"),C3t.forEach(r),Bs=t(xE,", "),xs=s(xE,"A",{href:!0});var M3t=n(xs);B3=t(M3t,"AutoModel"),M3t.forEach(r),Cd=t(xE,`, and
`),ks=s(xE,"A",{href:!0});var E3t=n(ks);x3=t(E3t,"AutoTokenizer"),E3t.forEach(r),Md=t(xE," will directly create a class of the relevant architecture. For instance"),xE.forEach(r),hf=d(i),m(ka.$$.fragment,i),lo=d(i),ge=s(i,"P",{});var h8e=n(ge);r7=t(h8e,"will create a model that is an instance of "),Ed=s(h8e,"A",{href:!0});var y3t=n(Ed);a7=t(y3t,"BertModel"),y3t.forEach(r),s7=t(h8e,"."),h8e.forEach(r),Do=d(i),Ra=s(i,"P",{});var u8e=n(Ra);n7=t(u8e,"There is one class of "),uf=s(u8e,"CODE",{});var w3t=n(uf);l7=t(w3t,"AutoModel"),w3t.forEach(r),vBe=t(u8e," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),u8e.forEach(r),uLe=d(i),yd=s(i,"H2",{class:!0});var p8e=n(yd);pf=s(p8e,"A",{id:!0,class:!0,href:!0});var A3t=n(pf);jz=s(A3t,"SPAN",{});var L3t=n(jz);m(k3.$$.fragment,L3t),L3t.forEach(r),A3t.forEach(r),TBe=d(p8e),Nz=s(p8e,"SPAN",{});var B3t=n(Nz);FBe=t(B3t,"Extending the Auto Classes"),B3t.forEach(r),p8e.forEach(r),pLe=d(i),Rs=s(i,"P",{});var HO=n(Rs);CBe=t(HO,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Dz=s(HO,"CODE",{});var x3t=n(Dz);MBe=t(x3t,"NewModel"),x3t.forEach(r),EBe=t(HO,", make sure you have a "),qz=s(HO,"CODE",{});var k3t=n(qz);yBe=t(k3t,"NewModelConfig"),k3t.forEach(r),wBe=t(HO,` then you can add those to the auto
classes like this:`),HO.forEach(r),_Le=d(i),m(R3.$$.fragment,i),bLe=d(i),d7=s(i,"P",{});var R3t=n(d7);ABe=t(R3t,"You will then be able to use the auto classes like you would usually do!"),R3t.forEach(r),vLe=d(i),m(_f.$$.fragment,i),TLe=d(i),wd=s(i,"H2",{class:!0});var _8e=n(wd);bf=s(_8e,"A",{id:!0,class:!0,href:!0});var S3t=n(bf);Gz=s(S3t,"SPAN",{});var P3t=n(Gz);m(S3.$$.fragment,P3t),P3t.forEach(r),S3t.forEach(r),LBe=d(_8e),Oz=s(_8e,"SPAN",{});var $3t=n(Oz);BBe=t($3t,"AutoConfig"),$3t.forEach(r),_8e.forEach(r),FLe=d(i),qo=s(i,"DIV",{class:!0});var Bn=n(qo);m(P3.$$.fragment,Bn),xBe=d(Bn),$3=s(Bn,"P",{});var b8e=n($3);kBe=t(b8e,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),i7=s(b8e,"A",{href:!0});var I3t=n(i7);RBe=t(I3t,"from_pretrained()"),I3t.forEach(r),SBe=t(b8e," class method."),b8e.forEach(r),PBe=d(Bn),I3=s(Bn,"P",{});var v8e=n(I3);$Be=t(v8e,"This class cannot be instantiated directly using "),Xz=s(v8e,"CODE",{});var j3t=n(Xz);IBe=t(j3t,"__init__()"),j3t.forEach(r),jBe=t(v8e," (throws an error)."),v8e.forEach(r),NBe=d(Bn),io=s(Bn,"DIV",{class:!0});var aa=n(io);m(j3.$$.fragment,aa),DBe=d(aa),zz=s(aa,"P",{});var N3t=n(zz);qBe=t(N3t,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),N3t.forEach(r),GBe=d(aa),Ad=s(aa,"P",{});var UO=n(Ad);OBe=t(UO,"The configuration class to instantiate is selected based on the "),Vz=s(UO,"CODE",{});var D3t=n(Vz);XBe=t(D3t,"model_type"),D3t.forEach(r),zBe=t(UO,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Wz=s(UO,"CODE",{});var q3t=n(Wz);VBe=t(q3t,"pretrained_model_name_or_path"),q3t.forEach(r),WBe=t(UO,":"),UO.forEach(r),QBe=d(aa),v=s(aa,"UL",{});var T=n(v);vf=s(T,"LI",{});var ave=n(vf);Qz=s(ave,"STRONG",{});var G3t=n(Qz);HBe=t(G3t,"albert"),G3t.forEach(r),UBe=t(ave," \u2014 "),c7=s(ave,"A",{href:!0});var O3t=n(c7);JBe=t(O3t,"AlbertConfig"),O3t.forEach(r),YBe=t(ave," (ALBERT model)"),ave.forEach(r),KBe=d(T),Tf=s(T,"LI",{});var sve=n(Tf);Hz=s(sve,"STRONG",{});var X3t=n(Hz);ZBe=t(X3t,"bart"),X3t.forEach(r),exe=t(sve," \u2014 "),f7=s(sve,"A",{href:!0});var z3t=n(f7);oxe=t(z3t,"BartConfig"),z3t.forEach(r),txe=t(sve," (BART model)"),sve.forEach(r),rxe=d(T),Ff=s(T,"LI",{});var nve=n(Ff);Uz=s(nve,"STRONG",{});var V3t=n(Uz);axe=t(V3t,"beit"),V3t.forEach(r),sxe=t(nve," \u2014 "),m7=s(nve,"A",{href:!0});var W3t=n(m7);nxe=t(W3t,"BeitConfig"),W3t.forEach(r),lxe=t(nve," (BEiT model)"),nve.forEach(r),dxe=d(T),Cf=s(T,"LI",{});var lve=n(Cf);Jz=s(lve,"STRONG",{});var Q3t=n(Jz);ixe=t(Q3t,"bert"),Q3t.forEach(r),cxe=t(lve," \u2014 "),g7=s(lve,"A",{href:!0});var H3t=n(g7);fxe=t(H3t,"BertConfig"),H3t.forEach(r),mxe=t(lve," (BERT model)"),lve.forEach(r),gxe=d(T),Mf=s(T,"LI",{});var dve=n(Mf);Yz=s(dve,"STRONG",{});var U3t=n(Yz);hxe=t(U3t,"bert-generation"),U3t.forEach(r),uxe=t(dve," \u2014 "),h7=s(dve,"A",{href:!0});var J3t=n(h7);pxe=t(J3t,"BertGenerationConfig"),J3t.forEach(r),_xe=t(dve," (Bert Generation model)"),dve.forEach(r),bxe=d(T),Ef=s(T,"LI",{});var ive=n(Ef);Kz=s(ive,"STRONG",{});var Y3t=n(Kz);vxe=t(Y3t,"big_bird"),Y3t.forEach(r),Txe=t(ive," \u2014 "),u7=s(ive,"A",{href:!0});var K3t=n(u7);Fxe=t(K3t,"BigBirdConfig"),K3t.forEach(r),Cxe=t(ive," (BigBird model)"),ive.forEach(r),Mxe=d(T),yf=s(T,"LI",{});var cve=n(yf);Zz=s(cve,"STRONG",{});var Z3t=n(Zz);Exe=t(Z3t,"bigbird_pegasus"),Z3t.forEach(r),yxe=t(cve," \u2014 "),p7=s(cve,"A",{href:!0});var e5t=n(p7);wxe=t(e5t,"BigBirdPegasusConfig"),e5t.forEach(r),Axe=t(cve," (BigBirdPegasus model)"),cve.forEach(r),Lxe=d(T),wf=s(T,"LI",{});var fve=n(wf);eV=s(fve,"STRONG",{});var o5t=n(eV);Bxe=t(o5t,"blenderbot"),o5t.forEach(r),xxe=t(fve," \u2014 "),_7=s(fve,"A",{href:!0});var t5t=n(_7);kxe=t(t5t,"BlenderbotConfig"),t5t.forEach(r),Rxe=t(fve," (Blenderbot model)"),fve.forEach(r),Sxe=d(T),Af=s(T,"LI",{});var mve=n(Af);oV=s(mve,"STRONG",{});var r5t=n(oV);Pxe=t(r5t,"blenderbot-small"),r5t.forEach(r),$xe=t(mve," \u2014 "),b7=s(mve,"A",{href:!0});var a5t=n(b7);Ixe=t(a5t,"BlenderbotSmallConfig"),a5t.forEach(r),jxe=t(mve," (BlenderbotSmall model)"),mve.forEach(r),Nxe=d(T),Lf=s(T,"LI",{});var gve=n(Lf);tV=s(gve,"STRONG",{});var s5t=n(tV);Dxe=t(s5t,"camembert"),s5t.forEach(r),qxe=t(gve," \u2014 "),v7=s(gve,"A",{href:!0});var n5t=n(v7);Gxe=t(n5t,"CamembertConfig"),n5t.forEach(r),Oxe=t(gve," (CamemBERT model)"),gve.forEach(r),Xxe=d(T),Bf=s(T,"LI",{});var hve=n(Bf);rV=s(hve,"STRONG",{});var l5t=n(rV);zxe=t(l5t,"canine"),l5t.forEach(r),Vxe=t(hve," \u2014 "),T7=s(hve,"A",{href:!0});var d5t=n(T7);Wxe=t(d5t,"CanineConfig"),d5t.forEach(r),Qxe=t(hve," (Canine model)"),hve.forEach(r),Hxe=d(T),xf=s(T,"LI",{});var uve=n(xf);aV=s(uve,"STRONG",{});var i5t=n(aV);Uxe=t(i5t,"clip"),i5t.forEach(r),Jxe=t(uve," \u2014 "),F7=s(uve,"A",{href:!0});var c5t=n(F7);Yxe=t(c5t,"CLIPConfig"),c5t.forEach(r),Kxe=t(uve," (CLIP model)"),uve.forEach(r),Zxe=d(T),kf=s(T,"LI",{});var pve=n(kf);sV=s(pve,"STRONG",{});var f5t=n(sV);eke=t(f5t,"convbert"),f5t.forEach(r),oke=t(pve," \u2014 "),C7=s(pve,"A",{href:!0});var m5t=n(C7);tke=t(m5t,"ConvBertConfig"),m5t.forEach(r),rke=t(pve," (ConvBERT model)"),pve.forEach(r),ake=d(T),Rf=s(T,"LI",{});var _ve=n(Rf);nV=s(_ve,"STRONG",{});var g5t=n(nV);ske=t(g5t,"convnext"),g5t.forEach(r),nke=t(_ve," \u2014 "),M7=s(_ve,"A",{href:!0});var h5t=n(M7);lke=t(h5t,"ConvNextConfig"),h5t.forEach(r),dke=t(_ve," (ConvNext model)"),_ve.forEach(r),ike=d(T),Sf=s(T,"LI",{});var bve=n(Sf);lV=s(bve,"STRONG",{});var u5t=n(lV);cke=t(u5t,"ctrl"),u5t.forEach(r),fke=t(bve," \u2014 "),E7=s(bve,"A",{href:!0});var p5t=n(E7);mke=t(p5t,"CTRLConfig"),p5t.forEach(r),gke=t(bve," (CTRL model)"),bve.forEach(r),hke=d(T),Pf=s(T,"LI",{});var vve=n(Pf);dV=s(vve,"STRONG",{});var _5t=n(dV);uke=t(_5t,"deberta"),_5t.forEach(r),pke=t(vve," \u2014 "),y7=s(vve,"A",{href:!0});var b5t=n(y7);_ke=t(b5t,"DebertaConfig"),b5t.forEach(r),bke=t(vve," (DeBERTa model)"),vve.forEach(r),vke=d(T),$f=s(T,"LI",{});var Tve=n($f);iV=s(Tve,"STRONG",{});var v5t=n(iV);Tke=t(v5t,"deberta-v2"),v5t.forEach(r),Fke=t(Tve," \u2014 "),w7=s(Tve,"A",{href:!0});var T5t=n(w7);Cke=t(T5t,"DebertaV2Config"),T5t.forEach(r),Mke=t(Tve," (DeBERTa-v2 model)"),Tve.forEach(r),Eke=d(T),If=s(T,"LI",{});var Fve=n(If);cV=s(Fve,"STRONG",{});var F5t=n(cV);yke=t(F5t,"deit"),F5t.forEach(r),wke=t(Fve," \u2014 "),A7=s(Fve,"A",{href:!0});var C5t=n(A7);Ake=t(C5t,"DeiTConfig"),C5t.forEach(r),Lke=t(Fve," (DeiT model)"),Fve.forEach(r),Bke=d(T),jf=s(T,"LI",{});var Cve=n(jf);fV=s(Cve,"STRONG",{});var M5t=n(fV);xke=t(M5t,"detr"),M5t.forEach(r),kke=t(Cve," \u2014 "),L7=s(Cve,"A",{href:!0});var E5t=n(L7);Rke=t(E5t,"DetrConfig"),E5t.forEach(r),Ske=t(Cve," (DETR model)"),Cve.forEach(r),Pke=d(T),Nf=s(T,"LI",{});var Mve=n(Nf);mV=s(Mve,"STRONG",{});var y5t=n(mV);$ke=t(y5t,"distilbert"),y5t.forEach(r),Ike=t(Mve," \u2014 "),B7=s(Mve,"A",{href:!0});var w5t=n(B7);jke=t(w5t,"DistilBertConfig"),w5t.forEach(r),Nke=t(Mve," (DistilBERT model)"),Mve.forEach(r),Dke=d(T),Df=s(T,"LI",{});var Eve=n(Df);gV=s(Eve,"STRONG",{});var A5t=n(gV);qke=t(A5t,"dpr"),A5t.forEach(r),Gke=t(Eve," \u2014 "),x7=s(Eve,"A",{href:!0});var L5t=n(x7);Oke=t(L5t,"DPRConfig"),L5t.forEach(r),Xke=t(Eve," (DPR model)"),Eve.forEach(r),zke=d(T),qf=s(T,"LI",{});var yve=n(qf);hV=s(yve,"STRONG",{});var B5t=n(hV);Vke=t(B5t,"electra"),B5t.forEach(r),Wke=t(yve," \u2014 "),k7=s(yve,"A",{href:!0});var x5t=n(k7);Qke=t(x5t,"ElectraConfig"),x5t.forEach(r),Hke=t(yve," (ELECTRA model)"),yve.forEach(r),Uke=d(T),Gf=s(T,"LI",{});var wve=n(Gf);uV=s(wve,"STRONG",{});var k5t=n(uV);Jke=t(k5t,"encoder-decoder"),k5t.forEach(r),Yke=t(wve," \u2014 "),R7=s(wve,"A",{href:!0});var R5t=n(R7);Kke=t(R5t,"EncoderDecoderConfig"),R5t.forEach(r),Zke=t(wve," (Encoder decoder model)"),wve.forEach(r),eRe=d(T),Of=s(T,"LI",{});var Ave=n(Of);pV=s(Ave,"STRONG",{});var S5t=n(pV);oRe=t(S5t,"flaubert"),S5t.forEach(r),tRe=t(Ave," \u2014 "),S7=s(Ave,"A",{href:!0});var P5t=n(S7);rRe=t(P5t,"FlaubertConfig"),P5t.forEach(r),aRe=t(Ave," (FlauBERT model)"),Ave.forEach(r),sRe=d(T),Xf=s(T,"LI",{});var Lve=n(Xf);_V=s(Lve,"STRONG",{});var $5t=n(_V);nRe=t($5t,"fnet"),$5t.forEach(r),lRe=t(Lve," \u2014 "),P7=s(Lve,"A",{href:!0});var I5t=n(P7);dRe=t(I5t,"FNetConfig"),I5t.forEach(r),iRe=t(Lve," (FNet model)"),Lve.forEach(r),cRe=d(T),zf=s(T,"LI",{});var Bve=n(zf);bV=s(Bve,"STRONG",{});var j5t=n(bV);fRe=t(j5t,"fsmt"),j5t.forEach(r),mRe=t(Bve," \u2014 "),$7=s(Bve,"A",{href:!0});var N5t=n($7);gRe=t(N5t,"FSMTConfig"),N5t.forEach(r),hRe=t(Bve," (FairSeq Machine-Translation model)"),Bve.forEach(r),uRe=d(T),Vf=s(T,"LI",{});var xve=n(Vf);vV=s(xve,"STRONG",{});var D5t=n(vV);pRe=t(D5t,"funnel"),D5t.forEach(r),_Re=t(xve," \u2014 "),I7=s(xve,"A",{href:!0});var q5t=n(I7);bRe=t(q5t,"FunnelConfig"),q5t.forEach(r),vRe=t(xve," (Funnel Transformer model)"),xve.forEach(r),TRe=d(T),Wf=s(T,"LI",{});var kve=n(Wf);TV=s(kve,"STRONG",{});var G5t=n(TV);FRe=t(G5t,"gpt2"),G5t.forEach(r),CRe=t(kve," \u2014 "),j7=s(kve,"A",{href:!0});var O5t=n(j7);MRe=t(O5t,"GPT2Config"),O5t.forEach(r),ERe=t(kve," (OpenAI GPT-2 model)"),kve.forEach(r),yRe=d(T),Qf=s(T,"LI",{});var Rve=n(Qf);FV=s(Rve,"STRONG",{});var X5t=n(FV);wRe=t(X5t,"gpt_neo"),X5t.forEach(r),ARe=t(Rve," \u2014 "),N7=s(Rve,"A",{href:!0});var z5t=n(N7);LRe=t(z5t,"GPTNeoConfig"),z5t.forEach(r),BRe=t(Rve," (GPT Neo model)"),Rve.forEach(r),xRe=d(T),Hf=s(T,"LI",{});var Sve=n(Hf);CV=s(Sve,"STRONG",{});var V5t=n(CV);kRe=t(V5t,"gptj"),V5t.forEach(r),RRe=t(Sve," \u2014 "),D7=s(Sve,"A",{href:!0});var W5t=n(D7);SRe=t(W5t,"GPTJConfig"),W5t.forEach(r),PRe=t(Sve," (GPT-J model)"),Sve.forEach(r),$Re=d(T),Uf=s(T,"LI",{});var Pve=n(Uf);MV=s(Pve,"STRONG",{});var Q5t=n(MV);IRe=t(Q5t,"hubert"),Q5t.forEach(r),jRe=t(Pve," \u2014 "),q7=s(Pve,"A",{href:!0});var H5t=n(q7);NRe=t(H5t,"HubertConfig"),H5t.forEach(r),DRe=t(Pve," (Hubert model)"),Pve.forEach(r),qRe=d(T),Jf=s(T,"LI",{});var $ve=n(Jf);EV=s($ve,"STRONG",{});var U5t=n(EV);GRe=t(U5t,"ibert"),U5t.forEach(r),ORe=t($ve," \u2014 "),G7=s($ve,"A",{href:!0});var J5t=n(G7);XRe=t(J5t,"IBertConfig"),J5t.forEach(r),zRe=t($ve," (I-BERT model)"),$ve.forEach(r),VRe=d(T),Yf=s(T,"LI",{});var Ive=n(Yf);yV=s(Ive,"STRONG",{});var Y5t=n(yV);WRe=t(Y5t,"imagegpt"),Y5t.forEach(r),QRe=t(Ive," \u2014 "),O7=s(Ive,"A",{href:!0});var K5t=n(O7);HRe=t(K5t,"ImageGPTConfig"),K5t.forEach(r),URe=t(Ive," (ImageGPT model)"),Ive.forEach(r),JRe=d(T),Kf=s(T,"LI",{});var jve=n(Kf);wV=s(jve,"STRONG",{});var Z5t=n(wV);YRe=t(Z5t,"layoutlm"),Z5t.forEach(r),KRe=t(jve," \u2014 "),X7=s(jve,"A",{href:!0});var eyt=n(X7);ZRe=t(eyt,"LayoutLMConfig"),eyt.forEach(r),eSe=t(jve," (LayoutLM model)"),jve.forEach(r),oSe=d(T),Zf=s(T,"LI",{});var Nve=n(Zf);AV=s(Nve,"STRONG",{});var oyt=n(AV);tSe=t(oyt,"layoutlmv2"),oyt.forEach(r),rSe=t(Nve," \u2014 "),z7=s(Nve,"A",{href:!0});var tyt=n(z7);aSe=t(tyt,"LayoutLMv2Config"),tyt.forEach(r),sSe=t(Nve," (LayoutLMv2 model)"),Nve.forEach(r),nSe=d(T),em=s(T,"LI",{});var Dve=n(em);LV=s(Dve,"STRONG",{});var ryt=n(LV);lSe=t(ryt,"led"),ryt.forEach(r),dSe=t(Dve," \u2014 "),V7=s(Dve,"A",{href:!0});var ayt=n(V7);iSe=t(ayt,"LEDConfig"),ayt.forEach(r),cSe=t(Dve," (LED model)"),Dve.forEach(r),fSe=d(T),om=s(T,"LI",{});var qve=n(om);BV=s(qve,"STRONG",{});var syt=n(BV);mSe=t(syt,"longformer"),syt.forEach(r),gSe=t(qve," \u2014 "),W7=s(qve,"A",{href:!0});var nyt=n(W7);hSe=t(nyt,"LongformerConfig"),nyt.forEach(r),uSe=t(qve," (Longformer model)"),qve.forEach(r),pSe=d(T),tm=s(T,"LI",{});var Gve=n(tm);xV=s(Gve,"STRONG",{});var lyt=n(xV);_Se=t(lyt,"luke"),lyt.forEach(r),bSe=t(Gve," \u2014 "),Q7=s(Gve,"A",{href:!0});var dyt=n(Q7);vSe=t(dyt,"LukeConfig"),dyt.forEach(r),TSe=t(Gve," (LUKE model)"),Gve.forEach(r),FSe=d(T),rm=s(T,"LI",{});var Ove=n(rm);kV=s(Ove,"STRONG",{});var iyt=n(kV);CSe=t(iyt,"lxmert"),iyt.forEach(r),MSe=t(Ove," \u2014 "),H7=s(Ove,"A",{href:!0});var cyt=n(H7);ESe=t(cyt,"LxmertConfig"),cyt.forEach(r),ySe=t(Ove," (LXMERT model)"),Ove.forEach(r),wSe=d(T),am=s(T,"LI",{});var Xve=n(am);RV=s(Xve,"STRONG",{});var fyt=n(RV);ASe=t(fyt,"m2m_100"),fyt.forEach(r),LSe=t(Xve," \u2014 "),U7=s(Xve,"A",{href:!0});var myt=n(U7);BSe=t(myt,"M2M100Config"),myt.forEach(r),xSe=t(Xve," (M2M100 model)"),Xve.forEach(r),kSe=d(T),sm=s(T,"LI",{});var zve=n(sm);SV=s(zve,"STRONG",{});var gyt=n(SV);RSe=t(gyt,"marian"),gyt.forEach(r),SSe=t(zve," \u2014 "),J7=s(zve,"A",{href:!0});var hyt=n(J7);PSe=t(hyt,"MarianConfig"),hyt.forEach(r),$Se=t(zve," (Marian model)"),zve.forEach(r),ISe=d(T),nm=s(T,"LI",{});var Vve=n(nm);PV=s(Vve,"STRONG",{});var uyt=n(PV);jSe=t(uyt,"mbart"),uyt.forEach(r),NSe=t(Vve," \u2014 "),Y7=s(Vve,"A",{href:!0});var pyt=n(Y7);DSe=t(pyt,"MBartConfig"),pyt.forEach(r),qSe=t(Vve," (mBART model)"),Vve.forEach(r),GSe=d(T),lm=s(T,"LI",{});var Wve=n(lm);$V=s(Wve,"STRONG",{});var _yt=n($V);OSe=t(_yt,"megatron-bert"),_yt.forEach(r),XSe=t(Wve," \u2014 "),K7=s(Wve,"A",{href:!0});var byt=n(K7);zSe=t(byt,"MegatronBertConfig"),byt.forEach(r),VSe=t(Wve," (MegatronBert model)"),Wve.forEach(r),WSe=d(T),dm=s(T,"LI",{});var Qve=n(dm);IV=s(Qve,"STRONG",{});var vyt=n(IV);QSe=t(vyt,"mobilebert"),vyt.forEach(r),HSe=t(Qve," \u2014 "),Z7=s(Qve,"A",{href:!0});var Tyt=n(Z7);USe=t(Tyt,"MobileBertConfig"),Tyt.forEach(r),JSe=t(Qve," (MobileBERT model)"),Qve.forEach(r),YSe=d(T),im=s(T,"LI",{});var Hve=n(im);jV=s(Hve,"STRONG",{});var Fyt=n(jV);KSe=t(Fyt,"mpnet"),Fyt.forEach(r),ZSe=t(Hve," \u2014 "),e8=s(Hve,"A",{href:!0});var Cyt=n(e8);ePe=t(Cyt,"MPNetConfig"),Cyt.forEach(r),oPe=t(Hve," (MPNet model)"),Hve.forEach(r),tPe=d(T),cm=s(T,"LI",{});var Uve=n(cm);NV=s(Uve,"STRONG",{});var Myt=n(NV);rPe=t(Myt,"mt5"),Myt.forEach(r),aPe=t(Uve," \u2014 "),o8=s(Uve,"A",{href:!0});var Eyt=n(o8);sPe=t(Eyt,"MT5Config"),Eyt.forEach(r),nPe=t(Uve," (mT5 model)"),Uve.forEach(r),lPe=d(T),fm=s(T,"LI",{});var Jve=n(fm);DV=s(Jve,"STRONG",{});var yyt=n(DV);dPe=t(yyt,"nystromformer"),yyt.forEach(r),iPe=t(Jve," \u2014 "),t8=s(Jve,"A",{href:!0});var wyt=n(t8);cPe=t(wyt,"NystromformerConfig"),wyt.forEach(r),fPe=t(Jve," (Nystromformer model)"),Jve.forEach(r),mPe=d(T),mm=s(T,"LI",{});var Yve=n(mm);qV=s(Yve,"STRONG",{});var Ayt=n(qV);gPe=t(Ayt,"openai-gpt"),Ayt.forEach(r),hPe=t(Yve," \u2014 "),r8=s(Yve,"A",{href:!0});var Lyt=n(r8);uPe=t(Lyt,"OpenAIGPTConfig"),Lyt.forEach(r),pPe=t(Yve," (OpenAI GPT model)"),Yve.forEach(r),_Pe=d(T),gm=s(T,"LI",{});var Kve=n(gm);GV=s(Kve,"STRONG",{});var Byt=n(GV);bPe=t(Byt,"pegasus"),Byt.forEach(r),vPe=t(Kve," \u2014 "),a8=s(Kve,"A",{href:!0});var xyt=n(a8);TPe=t(xyt,"PegasusConfig"),xyt.forEach(r),FPe=t(Kve," (Pegasus model)"),Kve.forEach(r),CPe=d(T),hm=s(T,"LI",{});var Zve=n(hm);OV=s(Zve,"STRONG",{});var kyt=n(OV);MPe=t(kyt,"perceiver"),kyt.forEach(r),EPe=t(Zve," \u2014 "),s8=s(Zve,"A",{href:!0});var Ryt=n(s8);yPe=t(Ryt,"PerceiverConfig"),Ryt.forEach(r),wPe=t(Zve," (Perceiver model)"),Zve.forEach(r),APe=d(T),um=s(T,"LI",{});var eTe=n(um);XV=s(eTe,"STRONG",{});var Syt=n(XV);LPe=t(Syt,"prophetnet"),Syt.forEach(r),BPe=t(eTe," \u2014 "),n8=s(eTe,"A",{href:!0});var Pyt=n(n8);xPe=t(Pyt,"ProphetNetConfig"),Pyt.forEach(r),kPe=t(eTe," (ProphetNet model)"),eTe.forEach(r),RPe=d(T),pm=s(T,"LI",{});var oTe=n(pm);zV=s(oTe,"STRONG",{});var $yt=n(zV);SPe=t($yt,"qdqbert"),$yt.forEach(r),PPe=t(oTe," \u2014 "),l8=s(oTe,"A",{href:!0});var Iyt=n(l8);$Pe=t(Iyt,"QDQBertConfig"),Iyt.forEach(r),IPe=t(oTe," (QDQBert model)"),oTe.forEach(r),jPe=d(T),_m=s(T,"LI",{});var tTe=n(_m);VV=s(tTe,"STRONG",{});var jyt=n(VV);NPe=t(jyt,"rag"),jyt.forEach(r),DPe=t(tTe," \u2014 "),d8=s(tTe,"A",{href:!0});var Nyt=n(d8);qPe=t(Nyt,"RagConfig"),Nyt.forEach(r),GPe=t(tTe," (RAG model)"),tTe.forEach(r),OPe=d(T),bm=s(T,"LI",{});var rTe=n(bm);WV=s(rTe,"STRONG",{});var Dyt=n(WV);XPe=t(Dyt,"realm"),Dyt.forEach(r),zPe=t(rTe," \u2014 "),i8=s(rTe,"A",{href:!0});var qyt=n(i8);VPe=t(qyt,"RealmConfig"),qyt.forEach(r),WPe=t(rTe," (Realm model)"),rTe.forEach(r),QPe=d(T),vm=s(T,"LI",{});var aTe=n(vm);QV=s(aTe,"STRONG",{});var Gyt=n(QV);HPe=t(Gyt,"reformer"),Gyt.forEach(r),UPe=t(aTe," \u2014 "),c8=s(aTe,"A",{href:!0});var Oyt=n(c8);JPe=t(Oyt,"ReformerConfig"),Oyt.forEach(r),YPe=t(aTe," (Reformer model)"),aTe.forEach(r),KPe=d(T),Tm=s(T,"LI",{});var sTe=n(Tm);HV=s(sTe,"STRONG",{});var Xyt=n(HV);ZPe=t(Xyt,"rembert"),Xyt.forEach(r),e$e=t(sTe," \u2014 "),f8=s(sTe,"A",{href:!0});var zyt=n(f8);o$e=t(zyt,"RemBertConfig"),zyt.forEach(r),t$e=t(sTe," (RemBERT model)"),sTe.forEach(r),r$e=d(T),Fm=s(T,"LI",{});var nTe=n(Fm);UV=s(nTe,"STRONG",{});var Vyt=n(UV);a$e=t(Vyt,"retribert"),Vyt.forEach(r),s$e=t(nTe," \u2014 "),m8=s(nTe,"A",{href:!0});var Wyt=n(m8);n$e=t(Wyt,"RetriBertConfig"),Wyt.forEach(r),l$e=t(nTe," (RetriBERT model)"),nTe.forEach(r),d$e=d(T),Cm=s(T,"LI",{});var lTe=n(Cm);JV=s(lTe,"STRONG",{});var Qyt=n(JV);i$e=t(Qyt,"roberta"),Qyt.forEach(r),c$e=t(lTe," \u2014 "),g8=s(lTe,"A",{href:!0});var Hyt=n(g8);f$e=t(Hyt,"RobertaConfig"),Hyt.forEach(r),m$e=t(lTe," (RoBERTa model)"),lTe.forEach(r),g$e=d(T),Mm=s(T,"LI",{});var dTe=n(Mm);YV=s(dTe,"STRONG",{});var Uyt=n(YV);h$e=t(Uyt,"roformer"),Uyt.forEach(r),u$e=t(dTe," \u2014 "),h8=s(dTe,"A",{href:!0});var Jyt=n(h8);p$e=t(Jyt,"RoFormerConfig"),Jyt.forEach(r),_$e=t(dTe," (RoFormer model)"),dTe.forEach(r),b$e=d(T),Em=s(T,"LI",{});var iTe=n(Em);KV=s(iTe,"STRONG",{});var Yyt=n(KV);v$e=t(Yyt,"segformer"),Yyt.forEach(r),T$e=t(iTe," \u2014 "),u8=s(iTe,"A",{href:!0});var Kyt=n(u8);F$e=t(Kyt,"SegformerConfig"),Kyt.forEach(r),C$e=t(iTe," (SegFormer model)"),iTe.forEach(r),M$e=d(T),ym=s(T,"LI",{});var cTe=n(ym);ZV=s(cTe,"STRONG",{});var Zyt=n(ZV);E$e=t(Zyt,"sew"),Zyt.forEach(r),y$e=t(cTe," \u2014 "),p8=s(cTe,"A",{href:!0});var ewt=n(p8);w$e=t(ewt,"SEWConfig"),ewt.forEach(r),A$e=t(cTe," (SEW model)"),cTe.forEach(r),L$e=d(T),wm=s(T,"LI",{});var fTe=n(wm);eW=s(fTe,"STRONG",{});var owt=n(eW);B$e=t(owt,"sew-d"),owt.forEach(r),x$e=t(fTe," \u2014 "),_8=s(fTe,"A",{href:!0});var twt=n(_8);k$e=t(twt,"SEWDConfig"),twt.forEach(r),R$e=t(fTe," (SEW-D model)"),fTe.forEach(r),S$e=d(T),Am=s(T,"LI",{});var mTe=n(Am);oW=s(mTe,"STRONG",{});var rwt=n(oW);P$e=t(rwt,"speech-encoder-decoder"),rwt.forEach(r),$$e=t(mTe," \u2014 "),b8=s(mTe,"A",{href:!0});var awt=n(b8);I$e=t(awt,"SpeechEncoderDecoderConfig"),awt.forEach(r),j$e=t(mTe," (Speech Encoder decoder model)"),mTe.forEach(r),N$e=d(T),Lm=s(T,"LI",{});var gTe=n(Lm);tW=s(gTe,"STRONG",{});var swt=n(tW);D$e=t(swt,"speech_to_text"),swt.forEach(r),q$e=t(gTe," \u2014 "),v8=s(gTe,"A",{href:!0});var nwt=n(v8);G$e=t(nwt,"Speech2TextConfig"),nwt.forEach(r),O$e=t(gTe," (Speech2Text model)"),gTe.forEach(r),X$e=d(T),Bm=s(T,"LI",{});var hTe=n(Bm);rW=s(hTe,"STRONG",{});var lwt=n(rW);z$e=t(lwt,"speech_to_text_2"),lwt.forEach(r),V$e=t(hTe," \u2014 "),T8=s(hTe,"A",{href:!0});var dwt=n(T8);W$e=t(dwt,"Speech2Text2Config"),dwt.forEach(r),Q$e=t(hTe," (Speech2Text2 model)"),hTe.forEach(r),H$e=d(T),xm=s(T,"LI",{});var uTe=n(xm);aW=s(uTe,"STRONG",{});var iwt=n(aW);U$e=t(iwt,"splinter"),iwt.forEach(r),J$e=t(uTe," \u2014 "),F8=s(uTe,"A",{href:!0});var cwt=n(F8);Y$e=t(cwt,"SplinterConfig"),cwt.forEach(r),K$e=t(uTe," (Splinter model)"),uTe.forEach(r),Z$e=d(T),km=s(T,"LI",{});var pTe=n(km);sW=s(pTe,"STRONG",{});var fwt=n(sW);eIe=t(fwt,"squeezebert"),fwt.forEach(r),oIe=t(pTe," \u2014 "),C8=s(pTe,"A",{href:!0});var mwt=n(C8);tIe=t(mwt,"SqueezeBertConfig"),mwt.forEach(r),rIe=t(pTe," (SqueezeBERT model)"),pTe.forEach(r),aIe=d(T),Rm=s(T,"LI",{});var _Te=n(Rm);nW=s(_Te,"STRONG",{});var gwt=n(nW);sIe=t(gwt,"swin"),gwt.forEach(r),nIe=t(_Te," \u2014 "),M8=s(_Te,"A",{href:!0});var hwt=n(M8);lIe=t(hwt,"SwinConfig"),hwt.forEach(r),dIe=t(_Te," (Swin model)"),_Te.forEach(r),iIe=d(T),Sm=s(T,"LI",{});var bTe=n(Sm);lW=s(bTe,"STRONG",{});var uwt=n(lW);cIe=t(uwt,"t5"),uwt.forEach(r),fIe=t(bTe," \u2014 "),E8=s(bTe,"A",{href:!0});var pwt=n(E8);mIe=t(pwt,"T5Config"),pwt.forEach(r),gIe=t(bTe," (T5 model)"),bTe.forEach(r),hIe=d(T),Pm=s(T,"LI",{});var vTe=n(Pm);dW=s(vTe,"STRONG",{});var _wt=n(dW);uIe=t(_wt,"tapas"),_wt.forEach(r),pIe=t(vTe," \u2014 "),y8=s(vTe,"A",{href:!0});var bwt=n(y8);_Ie=t(bwt,"TapasConfig"),bwt.forEach(r),bIe=t(vTe," (TAPAS model)"),vTe.forEach(r),vIe=d(T),$m=s(T,"LI",{});var TTe=n($m);iW=s(TTe,"STRONG",{});var vwt=n(iW);TIe=t(vwt,"transfo-xl"),vwt.forEach(r),FIe=t(TTe," \u2014 "),w8=s(TTe,"A",{href:!0});var Twt=n(w8);CIe=t(Twt,"TransfoXLConfig"),Twt.forEach(r),MIe=t(TTe," (Transformer-XL model)"),TTe.forEach(r),EIe=d(T),Im=s(T,"LI",{});var FTe=n(Im);cW=s(FTe,"STRONG",{});var Fwt=n(cW);yIe=t(Fwt,"trocr"),Fwt.forEach(r),wIe=t(FTe," \u2014 "),A8=s(FTe,"A",{href:!0});var Cwt=n(A8);AIe=t(Cwt,"TrOCRConfig"),Cwt.forEach(r),LIe=t(FTe," (TrOCR model)"),FTe.forEach(r),BIe=d(T),jm=s(T,"LI",{});var CTe=n(jm);fW=s(CTe,"STRONG",{});var Mwt=n(fW);xIe=t(Mwt,"unispeech"),Mwt.forEach(r),kIe=t(CTe," \u2014 "),L8=s(CTe,"A",{href:!0});var Ewt=n(L8);RIe=t(Ewt,"UniSpeechConfig"),Ewt.forEach(r),SIe=t(CTe," (UniSpeech model)"),CTe.forEach(r),PIe=d(T),Nm=s(T,"LI",{});var MTe=n(Nm);mW=s(MTe,"STRONG",{});var ywt=n(mW);$Ie=t(ywt,"unispeech-sat"),ywt.forEach(r),IIe=t(MTe," \u2014 "),B8=s(MTe,"A",{href:!0});var wwt=n(B8);jIe=t(wwt,"UniSpeechSatConfig"),wwt.forEach(r),NIe=t(MTe," (UniSpeechSat model)"),MTe.forEach(r),DIe=d(T),Dm=s(T,"LI",{});var ETe=n(Dm);gW=s(ETe,"STRONG",{});var Awt=n(gW);qIe=t(Awt,"vilt"),Awt.forEach(r),GIe=t(ETe," \u2014 "),x8=s(ETe,"A",{href:!0});var Lwt=n(x8);OIe=t(Lwt,"ViltConfig"),Lwt.forEach(r),XIe=t(ETe," (ViLT model)"),ETe.forEach(r),zIe=d(T),qm=s(T,"LI",{});var yTe=n(qm);hW=s(yTe,"STRONG",{});var Bwt=n(hW);VIe=t(Bwt,"vision-encoder-decoder"),Bwt.forEach(r),WIe=t(yTe," \u2014 "),k8=s(yTe,"A",{href:!0});var xwt=n(k8);QIe=t(xwt,"VisionEncoderDecoderConfig"),xwt.forEach(r),HIe=t(yTe," (Vision Encoder decoder model)"),yTe.forEach(r),UIe=d(T),Gm=s(T,"LI",{});var wTe=n(Gm);uW=s(wTe,"STRONG",{});var kwt=n(uW);JIe=t(kwt,"vision-text-dual-encoder"),kwt.forEach(r),YIe=t(wTe," \u2014 "),R8=s(wTe,"A",{href:!0});var Rwt=n(R8);KIe=t(Rwt,"VisionTextDualEncoderConfig"),Rwt.forEach(r),ZIe=t(wTe," (VisionTextDualEncoder model)"),wTe.forEach(r),eje=d(T),Om=s(T,"LI",{});var ATe=n(Om);pW=s(ATe,"STRONG",{});var Swt=n(pW);oje=t(Swt,"visual_bert"),Swt.forEach(r),tje=t(ATe," \u2014 "),S8=s(ATe,"A",{href:!0});var Pwt=n(S8);rje=t(Pwt,"VisualBertConfig"),Pwt.forEach(r),aje=t(ATe," (VisualBert model)"),ATe.forEach(r),sje=d(T),Xm=s(T,"LI",{});var LTe=n(Xm);_W=s(LTe,"STRONG",{});var $wt=n(_W);nje=t($wt,"vit"),$wt.forEach(r),lje=t(LTe," \u2014 "),P8=s(LTe,"A",{href:!0});var Iwt=n(P8);dje=t(Iwt,"ViTConfig"),Iwt.forEach(r),ije=t(LTe," (ViT model)"),LTe.forEach(r),cje=d(T),zm=s(T,"LI",{});var BTe=n(zm);bW=s(BTe,"STRONG",{});var jwt=n(bW);fje=t(jwt,"vit_mae"),jwt.forEach(r),mje=t(BTe," \u2014 "),$8=s(BTe,"A",{href:!0});var Nwt=n($8);gje=t(Nwt,"ViTMAEConfig"),Nwt.forEach(r),hje=t(BTe," (ViTMAE model)"),BTe.forEach(r),uje=d(T),Vm=s(T,"LI",{});var xTe=n(Vm);vW=s(xTe,"STRONG",{});var Dwt=n(vW);pje=t(Dwt,"wav2vec2"),Dwt.forEach(r),_je=t(xTe," \u2014 "),I8=s(xTe,"A",{href:!0});var qwt=n(I8);bje=t(qwt,"Wav2Vec2Config"),qwt.forEach(r),vje=t(xTe," (Wav2Vec2 model)"),xTe.forEach(r),Tje=d(T),Wm=s(T,"LI",{});var kTe=n(Wm);TW=s(kTe,"STRONG",{});var Gwt=n(TW);Fje=t(Gwt,"wavlm"),Gwt.forEach(r),Cje=t(kTe," \u2014 "),j8=s(kTe,"A",{href:!0});var Owt=n(j8);Mje=t(Owt,"WavLMConfig"),Owt.forEach(r),Eje=t(kTe," (WavLM model)"),kTe.forEach(r),yje=d(T),Qm=s(T,"LI",{});var RTe=n(Qm);FW=s(RTe,"STRONG",{});var Xwt=n(FW);wje=t(Xwt,"xglm"),Xwt.forEach(r),Aje=t(RTe," \u2014 "),N8=s(RTe,"A",{href:!0});var zwt=n(N8);Lje=t(zwt,"XGLMConfig"),zwt.forEach(r),Bje=t(RTe," (XGLM model)"),RTe.forEach(r),xje=d(T),Hm=s(T,"LI",{});var STe=n(Hm);CW=s(STe,"STRONG",{});var Vwt=n(CW);kje=t(Vwt,"xlm"),Vwt.forEach(r),Rje=t(STe," \u2014 "),D8=s(STe,"A",{href:!0});var Wwt=n(D8);Sje=t(Wwt,"XLMConfig"),Wwt.forEach(r),Pje=t(STe," (XLM model)"),STe.forEach(r),$je=d(T),Um=s(T,"LI",{});var PTe=n(Um);MW=s(PTe,"STRONG",{});var Qwt=n(MW);Ije=t(Qwt,"xlm-prophetnet"),Qwt.forEach(r),jje=t(PTe," \u2014 "),q8=s(PTe,"A",{href:!0});var Hwt=n(q8);Nje=t(Hwt,"XLMProphetNetConfig"),Hwt.forEach(r),Dje=t(PTe," (XLMProphetNet model)"),PTe.forEach(r),qje=d(T),Jm=s(T,"LI",{});var $Te=n(Jm);EW=s($Te,"STRONG",{});var Uwt=n(EW);Gje=t(Uwt,"xlm-roberta"),Uwt.forEach(r),Oje=t($Te," \u2014 "),G8=s($Te,"A",{href:!0});var Jwt=n(G8);Xje=t(Jwt,"XLMRobertaConfig"),Jwt.forEach(r),zje=t($Te," (XLM-RoBERTa model)"),$Te.forEach(r),Vje=d(T),Ym=s(T,"LI",{});var ITe=n(Ym);yW=s(ITe,"STRONG",{});var Ywt=n(yW);Wje=t(Ywt,"xlm-roberta-xl"),Ywt.forEach(r),Qje=t(ITe," \u2014 "),O8=s(ITe,"A",{href:!0});var Kwt=n(O8);Hje=t(Kwt,"XLMRobertaXLConfig"),Kwt.forEach(r),Uje=t(ITe," (XLM-RoBERTa-XL model)"),ITe.forEach(r),Jje=d(T),Km=s(T,"LI",{});var jTe=n(Km);wW=s(jTe,"STRONG",{});var Zwt=n(wW);Yje=t(Zwt,"xlnet"),Zwt.forEach(r),Kje=t(jTe," \u2014 "),X8=s(jTe,"A",{href:!0});var eAt=n(X8);Zje=t(eAt,"XLNetConfig"),eAt.forEach(r),eNe=t(jTe," (XLNet model)"),jTe.forEach(r),oNe=d(T),Zm=s(T,"LI",{});var NTe=n(Zm);AW=s(NTe,"STRONG",{});var oAt=n(AW);tNe=t(oAt,"yoso"),oAt.forEach(r),rNe=t(NTe," \u2014 "),z8=s(NTe,"A",{href:!0});var tAt=n(z8);aNe=t(tAt,"YosoConfig"),tAt.forEach(r),sNe=t(NTe," (YOSO model)"),NTe.forEach(r),T.forEach(r),nNe=d(aa),LW=s(aa,"P",{});var rAt=n(LW);lNe=t(rAt,"Examples:"),rAt.forEach(r),dNe=d(aa),m(N3.$$.fragment,aa),aa.forEach(r),iNe=d(Bn),eg=s(Bn,"DIV",{class:!0});var T8e=n(eg);m(D3.$$.fragment,T8e),cNe=d(T8e),BW=s(T8e,"P",{});var aAt=n(BW);fNe=t(aAt,"Register a new configuration for this class."),aAt.forEach(r),T8e.forEach(r),Bn.forEach(r),CLe=d(i),Ld=s(i,"H2",{class:!0});var F8e=n(Ld);og=s(F8e,"A",{id:!0,class:!0,href:!0});var sAt=n(og);xW=s(sAt,"SPAN",{});var nAt=n(xW);m(q3.$$.fragment,nAt),nAt.forEach(r),sAt.forEach(r),mNe=d(F8e),kW=s(F8e,"SPAN",{});var lAt=n(kW);gNe=t(lAt,"AutoTokenizer"),lAt.forEach(r),F8e.forEach(r),MLe=d(i),Go=s(i,"DIV",{class:!0});var xn=n(Go);m(G3.$$.fragment,xn),hNe=d(xn),O3=s(xn,"P",{});var C8e=n(O3);uNe=t(C8e,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),V8=s(C8e,"A",{href:!0});var dAt=n(V8);pNe=t(dAt,"AutoTokenizer.from_pretrained()"),dAt.forEach(r),_Ne=t(C8e," class method."),C8e.forEach(r),bNe=d(xn),X3=s(xn,"P",{});var M8e=n(X3);vNe=t(M8e,"This class cannot be instantiated directly using "),RW=s(M8e,"CODE",{});var iAt=n(RW);TNe=t(iAt,"__init__()"),iAt.forEach(r),FNe=t(M8e," (throws an error)."),M8e.forEach(r),CNe=d(xn),co=s(xn,"DIV",{class:!0});var sa=n(co);m(z3.$$.fragment,sa),MNe=d(sa),SW=s(sa,"P",{});var cAt=n(SW);ENe=t(cAt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),cAt.forEach(r),yNe=d(sa),Sa=s(sa,"P",{});var kE=n(Sa);wNe=t(kE,"The tokenizer class to instantiate is selected based on the "),PW=s(kE,"CODE",{});var fAt=n(PW);ANe=t(fAt,"model_type"),fAt.forEach(r),LNe=t(kE,` property of the config object (either
passed as an argument or loaded from `),$W=s(kE,"CODE",{});var mAt=n($W);BNe=t(mAt,"pretrained_model_name_or_path"),mAt.forEach(r),xNe=t(kE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IW=s(kE,"CODE",{});var gAt=n(IW);kNe=t(gAt,"pretrained_model_name_or_path"),gAt.forEach(r),RNe=t(kE,":"),kE.forEach(r),SNe=d(sa),M=s(sa,"UL",{});var y=n(M);Ss=s(y,"LI",{});var dL=n(Ss);jW=s(dL,"STRONG",{});var hAt=n(jW);PNe=t(hAt,"albert"),hAt.forEach(r),$Ne=t(dL," \u2014 "),W8=s(dL,"A",{href:!0});var uAt=n(W8);INe=t(uAt,"AlbertTokenizer"),uAt.forEach(r),jNe=t(dL," or "),Q8=s(dL,"A",{href:!0});var pAt=n(Q8);NNe=t(pAt,"AlbertTokenizerFast"),pAt.forEach(r),DNe=t(dL," (ALBERT model)"),dL.forEach(r),qNe=d(y),Ps=s(y,"LI",{});var iL=n(Ps);NW=s(iL,"STRONG",{});var _At=n(NW);GNe=t(_At,"bart"),_At.forEach(r),ONe=t(iL," \u2014 "),H8=s(iL,"A",{href:!0});var bAt=n(H8);XNe=t(bAt,"BartTokenizer"),bAt.forEach(r),zNe=t(iL," or "),U8=s(iL,"A",{href:!0});var vAt=n(U8);VNe=t(vAt,"BartTokenizerFast"),vAt.forEach(r),WNe=t(iL," (BART model)"),iL.forEach(r),QNe=d(y),$s=s(y,"LI",{});var cL=n($s);DW=s(cL,"STRONG",{});var TAt=n(DW);HNe=t(TAt,"barthez"),TAt.forEach(r),UNe=t(cL," \u2014 "),J8=s(cL,"A",{href:!0});var FAt=n(J8);JNe=t(FAt,"BarthezTokenizer"),FAt.forEach(r),YNe=t(cL," or "),Y8=s(cL,"A",{href:!0});var CAt=n(Y8);KNe=t(CAt,"BarthezTokenizerFast"),CAt.forEach(r),ZNe=t(cL," (BARThez model)"),cL.forEach(r),eDe=d(y),tg=s(y,"LI",{});var DTe=n(tg);qW=s(DTe,"STRONG",{});var MAt=n(qW);oDe=t(MAt,"bartpho"),MAt.forEach(r),tDe=t(DTe," \u2014 "),K8=s(DTe,"A",{href:!0});var EAt=n(K8);rDe=t(EAt,"BartphoTokenizer"),EAt.forEach(r),aDe=t(DTe," (BARTpho model)"),DTe.forEach(r),sDe=d(y),Is=s(y,"LI",{});var fL=n(Is);GW=s(fL,"STRONG",{});var yAt=n(GW);nDe=t(yAt,"bert"),yAt.forEach(r),lDe=t(fL," \u2014 "),Z8=s(fL,"A",{href:!0});var wAt=n(Z8);dDe=t(wAt,"BertTokenizer"),wAt.forEach(r),iDe=t(fL," or "),e9=s(fL,"A",{href:!0});var AAt=n(e9);cDe=t(AAt,"BertTokenizerFast"),AAt.forEach(r),fDe=t(fL," (BERT model)"),fL.forEach(r),mDe=d(y),rg=s(y,"LI",{});var qTe=n(rg);OW=s(qTe,"STRONG",{});var LAt=n(OW);gDe=t(LAt,"bert-generation"),LAt.forEach(r),hDe=t(qTe," \u2014 "),o9=s(qTe,"A",{href:!0});var BAt=n(o9);uDe=t(BAt,"BertGenerationTokenizer"),BAt.forEach(r),pDe=t(qTe," (Bert Generation model)"),qTe.forEach(r),_De=d(y),ag=s(y,"LI",{});var GTe=n(ag);XW=s(GTe,"STRONG",{});var xAt=n(XW);bDe=t(xAt,"bert-japanese"),xAt.forEach(r),vDe=t(GTe," \u2014 "),t9=s(GTe,"A",{href:!0});var kAt=n(t9);TDe=t(kAt,"BertJapaneseTokenizer"),kAt.forEach(r),FDe=t(GTe," (BertJapanese model)"),GTe.forEach(r),CDe=d(y),sg=s(y,"LI",{});var OTe=n(sg);zW=s(OTe,"STRONG",{});var RAt=n(zW);MDe=t(RAt,"bertweet"),RAt.forEach(r),EDe=t(OTe," \u2014 "),r9=s(OTe,"A",{href:!0});var SAt=n(r9);yDe=t(SAt,"BertweetTokenizer"),SAt.forEach(r),wDe=t(OTe," (Bertweet model)"),OTe.forEach(r),ADe=d(y),js=s(y,"LI",{});var mL=n(js);VW=s(mL,"STRONG",{});var PAt=n(VW);LDe=t(PAt,"big_bird"),PAt.forEach(r),BDe=t(mL," \u2014 "),a9=s(mL,"A",{href:!0});var $At=n(a9);xDe=t($At,"BigBirdTokenizer"),$At.forEach(r),kDe=t(mL," or "),s9=s(mL,"A",{href:!0});var IAt=n(s9);RDe=t(IAt,"BigBirdTokenizerFast"),IAt.forEach(r),SDe=t(mL," (BigBird model)"),mL.forEach(r),PDe=d(y),Ns=s(y,"LI",{});var gL=n(Ns);WW=s(gL,"STRONG",{});var jAt=n(WW);$De=t(jAt,"bigbird_pegasus"),jAt.forEach(r),IDe=t(gL," \u2014 "),n9=s(gL,"A",{href:!0});var NAt=n(n9);jDe=t(NAt,"PegasusTokenizer"),NAt.forEach(r),NDe=t(gL," or "),l9=s(gL,"A",{href:!0});var DAt=n(l9);DDe=t(DAt,"PegasusTokenizerFast"),DAt.forEach(r),qDe=t(gL," (BigBirdPegasus model)"),gL.forEach(r),GDe=d(y),Ds=s(y,"LI",{});var hL=n(Ds);QW=s(hL,"STRONG",{});var qAt=n(QW);ODe=t(qAt,"blenderbot"),qAt.forEach(r),XDe=t(hL," \u2014 "),d9=s(hL,"A",{href:!0});var GAt=n(d9);zDe=t(GAt,"BlenderbotTokenizer"),GAt.forEach(r),VDe=t(hL," or "),i9=s(hL,"A",{href:!0});var OAt=n(i9);WDe=t(OAt,"BlenderbotTokenizerFast"),OAt.forEach(r),QDe=t(hL," (Blenderbot model)"),hL.forEach(r),HDe=d(y),ng=s(y,"LI",{});var XTe=n(ng);HW=s(XTe,"STRONG",{});var XAt=n(HW);UDe=t(XAt,"blenderbot-small"),XAt.forEach(r),JDe=t(XTe," \u2014 "),c9=s(XTe,"A",{href:!0});var zAt=n(c9);YDe=t(zAt,"BlenderbotSmallTokenizer"),zAt.forEach(r),KDe=t(XTe," (BlenderbotSmall model)"),XTe.forEach(r),ZDe=d(y),lg=s(y,"LI",{});var zTe=n(lg);UW=s(zTe,"STRONG",{});var VAt=n(UW);eqe=t(VAt,"byt5"),VAt.forEach(r),oqe=t(zTe," \u2014 "),f9=s(zTe,"A",{href:!0});var WAt=n(f9);tqe=t(WAt,"ByT5Tokenizer"),WAt.forEach(r),rqe=t(zTe," (ByT5 model)"),zTe.forEach(r),aqe=d(y),qs=s(y,"LI",{});var uL=n(qs);JW=s(uL,"STRONG",{});var QAt=n(JW);sqe=t(QAt,"camembert"),QAt.forEach(r),nqe=t(uL," \u2014 "),m9=s(uL,"A",{href:!0});var HAt=n(m9);lqe=t(HAt,"CamembertTokenizer"),HAt.forEach(r),dqe=t(uL," or "),g9=s(uL,"A",{href:!0});var UAt=n(g9);iqe=t(UAt,"CamembertTokenizerFast"),UAt.forEach(r),cqe=t(uL," (CamemBERT model)"),uL.forEach(r),fqe=d(y),dg=s(y,"LI",{});var VTe=n(dg);YW=s(VTe,"STRONG",{});var JAt=n(YW);mqe=t(JAt,"canine"),JAt.forEach(r),gqe=t(VTe," \u2014 "),h9=s(VTe,"A",{href:!0});var YAt=n(h9);hqe=t(YAt,"CanineTokenizer"),YAt.forEach(r),uqe=t(VTe," (Canine model)"),VTe.forEach(r),pqe=d(y),Gs=s(y,"LI",{});var pL=n(Gs);KW=s(pL,"STRONG",{});var KAt=n(KW);_qe=t(KAt,"clip"),KAt.forEach(r),bqe=t(pL," \u2014 "),u9=s(pL,"A",{href:!0});var ZAt=n(u9);vqe=t(ZAt,"CLIPTokenizer"),ZAt.forEach(r),Tqe=t(pL," or "),p9=s(pL,"A",{href:!0});var e0t=n(p9);Fqe=t(e0t,"CLIPTokenizerFast"),e0t.forEach(r),Cqe=t(pL," (CLIP model)"),pL.forEach(r),Mqe=d(y),Os=s(y,"LI",{});var _L=n(Os);ZW=s(_L,"STRONG",{});var o0t=n(ZW);Eqe=t(o0t,"convbert"),o0t.forEach(r),yqe=t(_L," \u2014 "),_9=s(_L,"A",{href:!0});var t0t=n(_9);wqe=t(t0t,"ConvBertTokenizer"),t0t.forEach(r),Aqe=t(_L," or "),b9=s(_L,"A",{href:!0});var r0t=n(b9);Lqe=t(r0t,"ConvBertTokenizerFast"),r0t.forEach(r),Bqe=t(_L," (ConvBERT model)"),_L.forEach(r),xqe=d(y),Xs=s(y,"LI",{});var bL=n(Xs);eQ=s(bL,"STRONG",{});var a0t=n(eQ);kqe=t(a0t,"cpm"),a0t.forEach(r),Rqe=t(bL," \u2014 "),v9=s(bL,"A",{href:!0});var s0t=n(v9);Sqe=t(s0t,"CpmTokenizer"),s0t.forEach(r),Pqe=t(bL," or "),oQ=s(bL,"CODE",{});var n0t=n(oQ);$qe=t(n0t,"CpmTokenizerFast"),n0t.forEach(r),Iqe=t(bL," (CPM model)"),bL.forEach(r),jqe=d(y),ig=s(y,"LI",{});var WTe=n(ig);tQ=s(WTe,"STRONG",{});var l0t=n(tQ);Nqe=t(l0t,"ctrl"),l0t.forEach(r),Dqe=t(WTe," \u2014 "),T9=s(WTe,"A",{href:!0});var d0t=n(T9);qqe=t(d0t,"CTRLTokenizer"),d0t.forEach(r),Gqe=t(WTe," (CTRL model)"),WTe.forEach(r),Oqe=d(y),zs=s(y,"LI",{});var vL=n(zs);rQ=s(vL,"STRONG",{});var i0t=n(rQ);Xqe=t(i0t,"deberta"),i0t.forEach(r),zqe=t(vL," \u2014 "),F9=s(vL,"A",{href:!0});var c0t=n(F9);Vqe=t(c0t,"DebertaTokenizer"),c0t.forEach(r),Wqe=t(vL," or "),C9=s(vL,"A",{href:!0});var f0t=n(C9);Qqe=t(f0t,"DebertaTokenizerFast"),f0t.forEach(r),Hqe=t(vL," (DeBERTa model)"),vL.forEach(r),Uqe=d(y),cg=s(y,"LI",{});var QTe=n(cg);aQ=s(QTe,"STRONG",{});var m0t=n(aQ);Jqe=t(m0t,"deberta-v2"),m0t.forEach(r),Yqe=t(QTe," \u2014 "),M9=s(QTe,"A",{href:!0});var g0t=n(M9);Kqe=t(g0t,"DebertaV2Tokenizer"),g0t.forEach(r),Zqe=t(QTe," (DeBERTa-v2 model)"),QTe.forEach(r),eGe=d(y),Vs=s(y,"LI",{});var TL=n(Vs);sQ=s(TL,"STRONG",{});var h0t=n(sQ);oGe=t(h0t,"distilbert"),h0t.forEach(r),tGe=t(TL," \u2014 "),E9=s(TL,"A",{href:!0});var u0t=n(E9);rGe=t(u0t,"DistilBertTokenizer"),u0t.forEach(r),aGe=t(TL," or "),y9=s(TL,"A",{href:!0});var p0t=n(y9);sGe=t(p0t,"DistilBertTokenizerFast"),p0t.forEach(r),nGe=t(TL," (DistilBERT model)"),TL.forEach(r),lGe=d(y),Ws=s(y,"LI",{});var FL=n(Ws);nQ=s(FL,"STRONG",{});var _0t=n(nQ);dGe=t(_0t,"dpr"),_0t.forEach(r),iGe=t(FL," \u2014 "),w9=s(FL,"A",{href:!0});var b0t=n(w9);cGe=t(b0t,"DPRQuestionEncoderTokenizer"),b0t.forEach(r),fGe=t(FL," or "),A9=s(FL,"A",{href:!0});var v0t=n(A9);mGe=t(v0t,"DPRQuestionEncoderTokenizerFast"),v0t.forEach(r),gGe=t(FL," (DPR model)"),FL.forEach(r),hGe=d(y),Qs=s(y,"LI",{});var CL=n(Qs);lQ=s(CL,"STRONG",{});var T0t=n(lQ);uGe=t(T0t,"electra"),T0t.forEach(r),pGe=t(CL," \u2014 "),L9=s(CL,"A",{href:!0});var F0t=n(L9);_Ge=t(F0t,"ElectraTokenizer"),F0t.forEach(r),bGe=t(CL," or "),B9=s(CL,"A",{href:!0});var C0t=n(B9);vGe=t(C0t,"ElectraTokenizerFast"),C0t.forEach(r),TGe=t(CL," (ELECTRA model)"),CL.forEach(r),FGe=d(y),fg=s(y,"LI",{});var HTe=n(fg);dQ=s(HTe,"STRONG",{});var M0t=n(dQ);CGe=t(M0t,"flaubert"),M0t.forEach(r),MGe=t(HTe," \u2014 "),x9=s(HTe,"A",{href:!0});var E0t=n(x9);EGe=t(E0t,"FlaubertTokenizer"),E0t.forEach(r),yGe=t(HTe," (FlauBERT model)"),HTe.forEach(r),wGe=d(y),Hs=s(y,"LI",{});var ML=n(Hs);iQ=s(ML,"STRONG",{});var y0t=n(iQ);AGe=t(y0t,"fnet"),y0t.forEach(r),LGe=t(ML," \u2014 "),k9=s(ML,"A",{href:!0});var w0t=n(k9);BGe=t(w0t,"FNetTokenizer"),w0t.forEach(r),xGe=t(ML," or "),R9=s(ML,"A",{href:!0});var A0t=n(R9);kGe=t(A0t,"FNetTokenizerFast"),A0t.forEach(r),RGe=t(ML," (FNet model)"),ML.forEach(r),SGe=d(y),mg=s(y,"LI",{});var UTe=n(mg);cQ=s(UTe,"STRONG",{});var L0t=n(cQ);PGe=t(L0t,"fsmt"),L0t.forEach(r),$Ge=t(UTe," \u2014 "),S9=s(UTe,"A",{href:!0});var B0t=n(S9);IGe=t(B0t,"FSMTTokenizer"),B0t.forEach(r),jGe=t(UTe," (FairSeq Machine-Translation model)"),UTe.forEach(r),NGe=d(y),Us=s(y,"LI",{});var EL=n(Us);fQ=s(EL,"STRONG",{});var x0t=n(fQ);DGe=t(x0t,"funnel"),x0t.forEach(r),qGe=t(EL," \u2014 "),P9=s(EL,"A",{href:!0});var k0t=n(P9);GGe=t(k0t,"FunnelTokenizer"),k0t.forEach(r),OGe=t(EL," or "),$9=s(EL,"A",{href:!0});var R0t=n($9);XGe=t(R0t,"FunnelTokenizerFast"),R0t.forEach(r),zGe=t(EL," (Funnel Transformer model)"),EL.forEach(r),VGe=d(y),Js=s(y,"LI",{});var yL=n(Js);mQ=s(yL,"STRONG",{});var S0t=n(mQ);WGe=t(S0t,"gpt2"),S0t.forEach(r),QGe=t(yL," \u2014 "),I9=s(yL,"A",{href:!0});var P0t=n(I9);HGe=t(P0t,"GPT2Tokenizer"),P0t.forEach(r),UGe=t(yL," or "),j9=s(yL,"A",{href:!0});var $0t=n(j9);JGe=t($0t,"GPT2TokenizerFast"),$0t.forEach(r),YGe=t(yL," (OpenAI GPT-2 model)"),yL.forEach(r),KGe=d(y),Ys=s(y,"LI",{});var wL=n(Ys);gQ=s(wL,"STRONG",{});var I0t=n(gQ);ZGe=t(I0t,"gpt_neo"),I0t.forEach(r),eOe=t(wL," \u2014 "),N9=s(wL,"A",{href:!0});var j0t=n(N9);oOe=t(j0t,"GPT2Tokenizer"),j0t.forEach(r),tOe=t(wL," or "),D9=s(wL,"A",{href:!0});var N0t=n(D9);rOe=t(N0t,"GPT2TokenizerFast"),N0t.forEach(r),aOe=t(wL," (GPT Neo model)"),wL.forEach(r),sOe=d(y),Ks=s(y,"LI",{});var AL=n(Ks);hQ=s(AL,"STRONG",{});var D0t=n(hQ);nOe=t(D0t,"herbert"),D0t.forEach(r),lOe=t(AL," \u2014 "),q9=s(AL,"A",{href:!0});var q0t=n(q9);dOe=t(q0t,"HerbertTokenizer"),q0t.forEach(r),iOe=t(AL," or "),G9=s(AL,"A",{href:!0});var G0t=n(G9);cOe=t(G0t,"HerbertTokenizerFast"),G0t.forEach(r),fOe=t(AL," (HerBERT model)"),AL.forEach(r),mOe=d(y),gg=s(y,"LI",{});var JTe=n(gg);uQ=s(JTe,"STRONG",{});var O0t=n(uQ);gOe=t(O0t,"hubert"),O0t.forEach(r),hOe=t(JTe," \u2014 "),O9=s(JTe,"A",{href:!0});var X0t=n(O9);uOe=t(X0t,"Wav2Vec2CTCTokenizer"),X0t.forEach(r),pOe=t(JTe," (Hubert model)"),JTe.forEach(r),_Oe=d(y),Zs=s(y,"LI",{});var LL=n(Zs);pQ=s(LL,"STRONG",{});var z0t=n(pQ);bOe=t(z0t,"ibert"),z0t.forEach(r),vOe=t(LL," \u2014 "),X9=s(LL,"A",{href:!0});var V0t=n(X9);TOe=t(V0t,"RobertaTokenizer"),V0t.forEach(r),FOe=t(LL," or "),z9=s(LL,"A",{href:!0});var W0t=n(z9);COe=t(W0t,"RobertaTokenizerFast"),W0t.forEach(r),MOe=t(LL," (I-BERT model)"),LL.forEach(r),EOe=d(y),en=s(y,"LI",{});var BL=n(en);_Q=s(BL,"STRONG",{});var Q0t=n(_Q);yOe=t(Q0t,"layoutlm"),Q0t.forEach(r),wOe=t(BL," \u2014 "),V9=s(BL,"A",{href:!0});var H0t=n(V9);AOe=t(H0t,"LayoutLMTokenizer"),H0t.forEach(r),LOe=t(BL," or "),W9=s(BL,"A",{href:!0});var U0t=n(W9);BOe=t(U0t,"LayoutLMTokenizerFast"),U0t.forEach(r),xOe=t(BL," (LayoutLM model)"),BL.forEach(r),kOe=d(y),on=s(y,"LI",{});var xL=n(on);bQ=s(xL,"STRONG",{});var J0t=n(bQ);ROe=t(J0t,"layoutlmv2"),J0t.forEach(r),SOe=t(xL," \u2014 "),Q9=s(xL,"A",{href:!0});var Y0t=n(Q9);POe=t(Y0t,"LayoutLMv2Tokenizer"),Y0t.forEach(r),$Oe=t(xL," or "),H9=s(xL,"A",{href:!0});var K0t=n(H9);IOe=t(K0t,"LayoutLMv2TokenizerFast"),K0t.forEach(r),jOe=t(xL," (LayoutLMv2 model)"),xL.forEach(r),NOe=d(y),tn=s(y,"LI",{});var kL=n(tn);vQ=s(kL,"STRONG",{});var Z0t=n(vQ);DOe=t(Z0t,"layoutxlm"),Z0t.forEach(r),qOe=t(kL," \u2014 "),U9=s(kL,"A",{href:!0});var e6t=n(U9);GOe=t(e6t,"LayoutXLMTokenizer"),e6t.forEach(r),OOe=t(kL," or "),J9=s(kL,"A",{href:!0});var o6t=n(J9);XOe=t(o6t,"LayoutXLMTokenizerFast"),o6t.forEach(r),zOe=t(kL," (LayoutXLM model)"),kL.forEach(r),VOe=d(y),rn=s(y,"LI",{});var RL=n(rn);TQ=s(RL,"STRONG",{});var t6t=n(TQ);WOe=t(t6t,"led"),t6t.forEach(r),QOe=t(RL," \u2014 "),Y9=s(RL,"A",{href:!0});var r6t=n(Y9);HOe=t(r6t,"LEDTokenizer"),r6t.forEach(r),UOe=t(RL," or "),K9=s(RL,"A",{href:!0});var a6t=n(K9);JOe=t(a6t,"LEDTokenizerFast"),a6t.forEach(r),YOe=t(RL," (LED model)"),RL.forEach(r),KOe=d(y),an=s(y,"LI",{});var SL=n(an);FQ=s(SL,"STRONG",{});var s6t=n(FQ);ZOe=t(s6t,"longformer"),s6t.forEach(r),eXe=t(SL," \u2014 "),Z9=s(SL,"A",{href:!0});var n6t=n(Z9);oXe=t(n6t,"LongformerTokenizer"),n6t.forEach(r),tXe=t(SL," or "),eB=s(SL,"A",{href:!0});var l6t=n(eB);rXe=t(l6t,"LongformerTokenizerFast"),l6t.forEach(r),aXe=t(SL," (Longformer model)"),SL.forEach(r),sXe=d(y),hg=s(y,"LI",{});var YTe=n(hg);CQ=s(YTe,"STRONG",{});var d6t=n(CQ);nXe=t(d6t,"luke"),d6t.forEach(r),lXe=t(YTe," \u2014 "),oB=s(YTe,"A",{href:!0});var i6t=n(oB);dXe=t(i6t,"LukeTokenizer"),i6t.forEach(r),iXe=t(YTe," (LUKE model)"),YTe.forEach(r),cXe=d(y),sn=s(y,"LI",{});var PL=n(sn);MQ=s(PL,"STRONG",{});var c6t=n(MQ);fXe=t(c6t,"lxmert"),c6t.forEach(r),mXe=t(PL," \u2014 "),tB=s(PL,"A",{href:!0});var f6t=n(tB);gXe=t(f6t,"LxmertTokenizer"),f6t.forEach(r),hXe=t(PL," or "),rB=s(PL,"A",{href:!0});var m6t=n(rB);uXe=t(m6t,"LxmertTokenizerFast"),m6t.forEach(r),pXe=t(PL," (LXMERT model)"),PL.forEach(r),_Xe=d(y),ug=s(y,"LI",{});var KTe=n(ug);EQ=s(KTe,"STRONG",{});var g6t=n(EQ);bXe=t(g6t,"m2m_100"),g6t.forEach(r),vXe=t(KTe," \u2014 "),aB=s(KTe,"A",{href:!0});var h6t=n(aB);TXe=t(h6t,"M2M100Tokenizer"),h6t.forEach(r),FXe=t(KTe," (M2M100 model)"),KTe.forEach(r),CXe=d(y),pg=s(y,"LI",{});var ZTe=n(pg);yQ=s(ZTe,"STRONG",{});var u6t=n(yQ);MXe=t(u6t,"marian"),u6t.forEach(r),EXe=t(ZTe," \u2014 "),sB=s(ZTe,"A",{href:!0});var p6t=n(sB);yXe=t(p6t,"MarianTokenizer"),p6t.forEach(r),wXe=t(ZTe," (Marian model)"),ZTe.forEach(r),AXe=d(y),nn=s(y,"LI",{});var $L=n(nn);wQ=s($L,"STRONG",{});var _6t=n(wQ);LXe=t(_6t,"mbart"),_6t.forEach(r),BXe=t($L," \u2014 "),nB=s($L,"A",{href:!0});var b6t=n(nB);xXe=t(b6t,"MBartTokenizer"),b6t.forEach(r),kXe=t($L," or "),lB=s($L,"A",{href:!0});var v6t=n(lB);RXe=t(v6t,"MBartTokenizerFast"),v6t.forEach(r),SXe=t($L," (mBART model)"),$L.forEach(r),PXe=d(y),ln=s(y,"LI",{});var IL=n(ln);AQ=s(IL,"STRONG",{});var T6t=n(AQ);$Xe=t(T6t,"mbart50"),T6t.forEach(r),IXe=t(IL," \u2014 "),dB=s(IL,"A",{href:!0});var F6t=n(dB);jXe=t(F6t,"MBart50Tokenizer"),F6t.forEach(r),NXe=t(IL," or "),iB=s(IL,"A",{href:!0});var C6t=n(iB);DXe=t(C6t,"MBart50TokenizerFast"),C6t.forEach(r),qXe=t(IL," (mBART-50 model)"),IL.forEach(r),GXe=d(y),_g=s(y,"LI",{});var e1e=n(_g);LQ=s(e1e,"STRONG",{});var M6t=n(LQ);OXe=t(M6t,"mluke"),M6t.forEach(r),XXe=t(e1e," \u2014 "),cB=s(e1e,"A",{href:!0});var E6t=n(cB);zXe=t(E6t,"MLukeTokenizer"),E6t.forEach(r),VXe=t(e1e," (mLUKE model)"),e1e.forEach(r),WXe=d(y),dn=s(y,"LI",{});var jL=n(dn);BQ=s(jL,"STRONG",{});var y6t=n(BQ);QXe=t(y6t,"mobilebert"),y6t.forEach(r),HXe=t(jL," \u2014 "),fB=s(jL,"A",{href:!0});var w6t=n(fB);UXe=t(w6t,"MobileBertTokenizer"),w6t.forEach(r),JXe=t(jL," or "),mB=s(jL,"A",{href:!0});var A6t=n(mB);YXe=t(A6t,"MobileBertTokenizerFast"),A6t.forEach(r),KXe=t(jL," (MobileBERT model)"),jL.forEach(r),ZXe=d(y),cn=s(y,"LI",{});var NL=n(cn);xQ=s(NL,"STRONG",{});var L6t=n(xQ);eze=t(L6t,"mpnet"),L6t.forEach(r),oze=t(NL," \u2014 "),gB=s(NL,"A",{href:!0});var B6t=n(gB);tze=t(B6t,"MPNetTokenizer"),B6t.forEach(r),rze=t(NL," or "),hB=s(NL,"A",{href:!0});var x6t=n(hB);aze=t(x6t,"MPNetTokenizerFast"),x6t.forEach(r),sze=t(NL," (MPNet model)"),NL.forEach(r),nze=d(y),fn=s(y,"LI",{});var DL=n(fn);kQ=s(DL,"STRONG",{});var k6t=n(kQ);lze=t(k6t,"mt5"),k6t.forEach(r),dze=t(DL," \u2014 "),uB=s(DL,"A",{href:!0});var R6t=n(uB);ize=t(R6t,"MT5Tokenizer"),R6t.forEach(r),cze=t(DL," or "),pB=s(DL,"A",{href:!0});var S6t=n(pB);fze=t(S6t,"MT5TokenizerFast"),S6t.forEach(r),mze=t(DL," (mT5 model)"),DL.forEach(r),gze=d(y),mn=s(y,"LI",{});var qL=n(mn);RQ=s(qL,"STRONG",{});var P6t=n(RQ);hze=t(P6t,"openai-gpt"),P6t.forEach(r),uze=t(qL," \u2014 "),_B=s(qL,"A",{href:!0});var $6t=n(_B);pze=t($6t,"OpenAIGPTTokenizer"),$6t.forEach(r),_ze=t(qL," or "),bB=s(qL,"A",{href:!0});var I6t=n(bB);bze=t(I6t,"OpenAIGPTTokenizerFast"),I6t.forEach(r),vze=t(qL," (OpenAI GPT model)"),qL.forEach(r),Tze=d(y),gn=s(y,"LI",{});var GL=n(gn);SQ=s(GL,"STRONG",{});var j6t=n(SQ);Fze=t(j6t,"pegasus"),j6t.forEach(r),Cze=t(GL," \u2014 "),vB=s(GL,"A",{href:!0});var N6t=n(vB);Mze=t(N6t,"PegasusTokenizer"),N6t.forEach(r),Eze=t(GL," or "),TB=s(GL,"A",{href:!0});var D6t=n(TB);yze=t(D6t,"PegasusTokenizerFast"),D6t.forEach(r),wze=t(GL," (Pegasus model)"),GL.forEach(r),Aze=d(y),bg=s(y,"LI",{});var o1e=n(bg);PQ=s(o1e,"STRONG",{});var q6t=n(PQ);Lze=t(q6t,"perceiver"),q6t.forEach(r),Bze=t(o1e," \u2014 "),FB=s(o1e,"A",{href:!0});var G6t=n(FB);xze=t(G6t,"PerceiverTokenizer"),G6t.forEach(r),kze=t(o1e," (Perceiver model)"),o1e.forEach(r),Rze=d(y),vg=s(y,"LI",{});var t1e=n(vg);$Q=s(t1e,"STRONG",{});var O6t=n($Q);Sze=t(O6t,"phobert"),O6t.forEach(r),Pze=t(t1e," \u2014 "),CB=s(t1e,"A",{href:!0});var X6t=n(CB);$ze=t(X6t,"PhobertTokenizer"),X6t.forEach(r),Ize=t(t1e," (PhoBERT model)"),t1e.forEach(r),jze=d(y),Tg=s(y,"LI",{});var r1e=n(Tg);IQ=s(r1e,"STRONG",{});var z6t=n(IQ);Nze=t(z6t,"prophetnet"),z6t.forEach(r),Dze=t(r1e," \u2014 "),MB=s(r1e,"A",{href:!0});var V6t=n(MB);qze=t(V6t,"ProphetNetTokenizer"),V6t.forEach(r),Gze=t(r1e," (ProphetNet model)"),r1e.forEach(r),Oze=d(y),hn=s(y,"LI",{});var OL=n(hn);jQ=s(OL,"STRONG",{});var W6t=n(jQ);Xze=t(W6t,"qdqbert"),W6t.forEach(r),zze=t(OL," \u2014 "),EB=s(OL,"A",{href:!0});var Q6t=n(EB);Vze=t(Q6t,"BertTokenizer"),Q6t.forEach(r),Wze=t(OL," or "),yB=s(OL,"A",{href:!0});var H6t=n(yB);Qze=t(H6t,"BertTokenizerFast"),H6t.forEach(r),Hze=t(OL," (QDQBert model)"),OL.forEach(r),Uze=d(y),Fg=s(y,"LI",{});var a1e=n(Fg);NQ=s(a1e,"STRONG",{});var U6t=n(NQ);Jze=t(U6t,"rag"),U6t.forEach(r),Yze=t(a1e," \u2014 "),wB=s(a1e,"A",{href:!0});var J6t=n(wB);Kze=t(J6t,"RagTokenizer"),J6t.forEach(r),Zze=t(a1e," (RAG model)"),a1e.forEach(r),eVe=d(y),un=s(y,"LI",{});var XL=n(un);DQ=s(XL,"STRONG",{});var Y6t=n(DQ);oVe=t(Y6t,"reformer"),Y6t.forEach(r),tVe=t(XL," \u2014 "),AB=s(XL,"A",{href:!0});var K6t=n(AB);rVe=t(K6t,"ReformerTokenizer"),K6t.forEach(r),aVe=t(XL," or "),LB=s(XL,"A",{href:!0});var Z6t=n(LB);sVe=t(Z6t,"ReformerTokenizerFast"),Z6t.forEach(r),nVe=t(XL," (Reformer model)"),XL.forEach(r),lVe=d(y),pn=s(y,"LI",{});var zL=n(pn);qQ=s(zL,"STRONG",{});var eLt=n(qQ);dVe=t(eLt,"rembert"),eLt.forEach(r),iVe=t(zL," \u2014 "),BB=s(zL,"A",{href:!0});var oLt=n(BB);cVe=t(oLt,"RemBertTokenizer"),oLt.forEach(r),fVe=t(zL," or "),xB=s(zL,"A",{href:!0});var tLt=n(xB);mVe=t(tLt,"RemBertTokenizerFast"),tLt.forEach(r),gVe=t(zL," (RemBERT model)"),zL.forEach(r),hVe=d(y),_n=s(y,"LI",{});var VL=n(_n);GQ=s(VL,"STRONG",{});var rLt=n(GQ);uVe=t(rLt,"retribert"),rLt.forEach(r),pVe=t(VL," \u2014 "),kB=s(VL,"A",{href:!0});var aLt=n(kB);_Ve=t(aLt,"RetriBertTokenizer"),aLt.forEach(r),bVe=t(VL," or "),RB=s(VL,"A",{href:!0});var sLt=n(RB);vVe=t(sLt,"RetriBertTokenizerFast"),sLt.forEach(r),TVe=t(VL," (RetriBERT model)"),VL.forEach(r),FVe=d(y),bn=s(y,"LI",{});var WL=n(bn);OQ=s(WL,"STRONG",{});var nLt=n(OQ);CVe=t(nLt,"roberta"),nLt.forEach(r),MVe=t(WL," \u2014 "),SB=s(WL,"A",{href:!0});var lLt=n(SB);EVe=t(lLt,"RobertaTokenizer"),lLt.forEach(r),yVe=t(WL," or "),PB=s(WL,"A",{href:!0});var dLt=n(PB);wVe=t(dLt,"RobertaTokenizerFast"),dLt.forEach(r),AVe=t(WL," (RoBERTa model)"),WL.forEach(r),LVe=d(y),vn=s(y,"LI",{});var QL=n(vn);XQ=s(QL,"STRONG",{});var iLt=n(XQ);BVe=t(iLt,"roformer"),iLt.forEach(r),xVe=t(QL," \u2014 "),$B=s(QL,"A",{href:!0});var cLt=n($B);kVe=t(cLt,"RoFormerTokenizer"),cLt.forEach(r),RVe=t(QL," or "),IB=s(QL,"A",{href:!0});var fLt=n(IB);SVe=t(fLt,"RoFormerTokenizerFast"),fLt.forEach(r),PVe=t(QL," (RoFormer model)"),QL.forEach(r),$Ve=d(y),Cg=s(y,"LI",{});var s1e=n(Cg);zQ=s(s1e,"STRONG",{});var mLt=n(zQ);IVe=t(mLt,"speech_to_text"),mLt.forEach(r),jVe=t(s1e," \u2014 "),jB=s(s1e,"A",{href:!0});var gLt=n(jB);NVe=t(gLt,"Speech2TextTokenizer"),gLt.forEach(r),DVe=t(s1e," (Speech2Text model)"),s1e.forEach(r),qVe=d(y),Mg=s(y,"LI",{});var n1e=n(Mg);VQ=s(n1e,"STRONG",{});var hLt=n(VQ);GVe=t(hLt,"speech_to_text_2"),hLt.forEach(r),OVe=t(n1e," \u2014 "),NB=s(n1e,"A",{href:!0});var uLt=n(NB);XVe=t(uLt,"Speech2Text2Tokenizer"),uLt.forEach(r),zVe=t(n1e," (Speech2Text2 model)"),n1e.forEach(r),VVe=d(y),Tn=s(y,"LI",{});var HL=n(Tn);WQ=s(HL,"STRONG",{});var pLt=n(WQ);WVe=t(pLt,"splinter"),pLt.forEach(r),QVe=t(HL," \u2014 "),DB=s(HL,"A",{href:!0});var _Lt=n(DB);HVe=t(_Lt,"SplinterTokenizer"),_Lt.forEach(r),UVe=t(HL," or "),qB=s(HL,"A",{href:!0});var bLt=n(qB);JVe=t(bLt,"SplinterTokenizerFast"),bLt.forEach(r),YVe=t(HL," (Splinter model)"),HL.forEach(r),KVe=d(y),Fn=s(y,"LI",{});var UL=n(Fn);QQ=s(UL,"STRONG",{});var vLt=n(QQ);ZVe=t(vLt,"squeezebert"),vLt.forEach(r),eWe=t(UL," \u2014 "),GB=s(UL,"A",{href:!0});var TLt=n(GB);oWe=t(TLt,"SqueezeBertTokenizer"),TLt.forEach(r),tWe=t(UL," or "),OB=s(UL,"A",{href:!0});var FLt=n(OB);rWe=t(FLt,"SqueezeBertTokenizerFast"),FLt.forEach(r),aWe=t(UL," (SqueezeBERT model)"),UL.forEach(r),sWe=d(y),Cn=s(y,"LI",{});var JL=n(Cn);HQ=s(JL,"STRONG",{});var CLt=n(HQ);nWe=t(CLt,"t5"),CLt.forEach(r),lWe=t(JL," \u2014 "),XB=s(JL,"A",{href:!0});var MLt=n(XB);dWe=t(MLt,"T5Tokenizer"),MLt.forEach(r),iWe=t(JL," or "),zB=s(JL,"A",{href:!0});var ELt=n(zB);cWe=t(ELt,"T5TokenizerFast"),ELt.forEach(r),fWe=t(JL," (T5 model)"),JL.forEach(r),mWe=d(y),Eg=s(y,"LI",{});var l1e=n(Eg);UQ=s(l1e,"STRONG",{});var yLt=n(UQ);gWe=t(yLt,"tapas"),yLt.forEach(r),hWe=t(l1e," \u2014 "),VB=s(l1e,"A",{href:!0});var wLt=n(VB);uWe=t(wLt,"TapasTokenizer"),wLt.forEach(r),pWe=t(l1e," (TAPAS model)"),l1e.forEach(r),_We=d(y),yg=s(y,"LI",{});var d1e=n(yg);JQ=s(d1e,"STRONG",{});var ALt=n(JQ);bWe=t(ALt,"transfo-xl"),ALt.forEach(r),vWe=t(d1e," \u2014 "),WB=s(d1e,"A",{href:!0});var LLt=n(WB);TWe=t(LLt,"TransfoXLTokenizer"),LLt.forEach(r),FWe=t(d1e," (Transformer-XL model)"),d1e.forEach(r),CWe=d(y),wg=s(y,"LI",{});var i1e=n(wg);YQ=s(i1e,"STRONG",{});var BLt=n(YQ);MWe=t(BLt,"wav2vec2"),BLt.forEach(r),EWe=t(i1e," \u2014 "),QB=s(i1e,"A",{href:!0});var xLt=n(QB);yWe=t(xLt,"Wav2Vec2CTCTokenizer"),xLt.forEach(r),wWe=t(i1e," (Wav2Vec2 model)"),i1e.forEach(r),AWe=d(y),Ag=s(y,"LI",{});var c1e=n(Ag);KQ=s(c1e,"STRONG",{});var kLt=n(KQ);LWe=t(kLt,"wav2vec2_phoneme"),kLt.forEach(r),BWe=t(c1e," \u2014 "),HB=s(c1e,"A",{href:!0});var RLt=n(HB);xWe=t(RLt,"Wav2Vec2PhonemeCTCTokenizer"),RLt.forEach(r),kWe=t(c1e," (Wav2Vec2Phoneme model)"),c1e.forEach(r),RWe=d(y),Mn=s(y,"LI",{});var YL=n(Mn);ZQ=s(YL,"STRONG",{});var SLt=n(ZQ);SWe=t(SLt,"xglm"),SLt.forEach(r),PWe=t(YL," \u2014 "),UB=s(YL,"A",{href:!0});var PLt=n(UB);$We=t(PLt,"XGLMTokenizer"),PLt.forEach(r),IWe=t(YL," or "),JB=s(YL,"A",{href:!0});var $Lt=n(JB);jWe=t($Lt,"XGLMTokenizerFast"),$Lt.forEach(r),NWe=t(YL," (XGLM model)"),YL.forEach(r),DWe=d(y),Lg=s(y,"LI",{});var f1e=n(Lg);eH=s(f1e,"STRONG",{});var ILt=n(eH);qWe=t(ILt,"xlm"),ILt.forEach(r),GWe=t(f1e," \u2014 "),YB=s(f1e,"A",{href:!0});var jLt=n(YB);OWe=t(jLt,"XLMTokenizer"),jLt.forEach(r),XWe=t(f1e," (XLM model)"),f1e.forEach(r),zWe=d(y),Bg=s(y,"LI",{});var m1e=n(Bg);oH=s(m1e,"STRONG",{});var NLt=n(oH);VWe=t(NLt,"xlm-prophetnet"),NLt.forEach(r),WWe=t(m1e," \u2014 "),KB=s(m1e,"A",{href:!0});var DLt=n(KB);QWe=t(DLt,"XLMProphetNetTokenizer"),DLt.forEach(r),HWe=t(m1e," (XLMProphetNet model)"),m1e.forEach(r),UWe=d(y),En=s(y,"LI",{});var KL=n(En);tH=s(KL,"STRONG",{});var qLt=n(tH);JWe=t(qLt,"xlm-roberta"),qLt.forEach(r),YWe=t(KL," \u2014 "),ZB=s(KL,"A",{href:!0});var GLt=n(ZB);KWe=t(GLt,"XLMRobertaTokenizer"),GLt.forEach(r),ZWe=t(KL," or "),ex=s(KL,"A",{href:!0});var OLt=n(ex);eQe=t(OLt,"XLMRobertaTokenizerFast"),OLt.forEach(r),oQe=t(KL," (XLM-RoBERTa model)"),KL.forEach(r),tQe=d(y),yn=s(y,"LI",{});var ZL=n(yn);rH=s(ZL,"STRONG",{});var XLt=n(rH);rQe=t(XLt,"xlnet"),XLt.forEach(r),aQe=t(ZL," \u2014 "),ox=s(ZL,"A",{href:!0});var zLt=n(ox);sQe=t(zLt,"XLNetTokenizer"),zLt.forEach(r),nQe=t(ZL," or "),tx=s(ZL,"A",{href:!0});var VLt=n(tx);lQe=t(VLt,"XLNetTokenizerFast"),VLt.forEach(r),dQe=t(ZL," (XLNet model)"),ZL.forEach(r),y.forEach(r),iQe=d(sa),aH=s(sa,"P",{});var WLt=n(aH);cQe=t(WLt,"Examples:"),WLt.forEach(r),fQe=d(sa),m(V3.$$.fragment,sa),sa.forEach(r),mQe=d(xn),xg=s(xn,"DIV",{class:!0});var E8e=n(xg);m(W3.$$.fragment,E8e),gQe=d(E8e),sH=s(E8e,"P",{});var QLt=n(sH);hQe=t(QLt,"Register a new tokenizer in this mapping."),QLt.forEach(r),E8e.forEach(r),xn.forEach(r),ELe=d(i),Bd=s(i,"H2",{class:!0});var y8e=n(Bd);kg=s(y8e,"A",{id:!0,class:!0,href:!0});var HLt=n(kg);nH=s(HLt,"SPAN",{});var ULt=n(nH);m(Q3.$$.fragment,ULt),ULt.forEach(r),HLt.forEach(r),uQe=d(y8e),lH=s(y8e,"SPAN",{});var JLt=n(lH);pQe=t(JLt,"AutoFeatureExtractor"),JLt.forEach(r),y8e.forEach(r),yLe=d(i),Oo=s(i,"DIV",{class:!0});var kn=n(Oo);m(H3.$$.fragment,kn),_Qe=d(kn),U3=s(kn,"P",{});var w8e=n(U3);bQe=t(w8e,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),rx=s(w8e,"A",{href:!0});var YLt=n(rx);vQe=t(YLt,"AutoFeatureExtractor.from_pretrained()"),YLt.forEach(r),TQe=t(w8e," class method."),w8e.forEach(r),FQe=d(kn),J3=s(kn,"P",{});var A8e=n(J3);CQe=t(A8e,"This class cannot be instantiated directly using "),dH=s(A8e,"CODE",{});var KLt=n(dH);MQe=t(KLt,"__init__()"),KLt.forEach(r),EQe=t(A8e," (throws an error)."),A8e.forEach(r),yQe=d(kn),Le=s(kn,"DIV",{class:!0});var Ar=n(Le);m(Y3.$$.fragment,Ar),wQe=d(Ar),iH=s(Ar,"P",{});var ZLt=n(iH);AQe=t(ZLt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),ZLt.forEach(r),LQe=d(Ar),Pa=s(Ar,"P",{});var RE=n(Pa);BQe=t(RE,"The feature extractor class to instantiate is selected based on the "),cH=s(RE,"CODE",{});var e7t=n(cH);xQe=t(e7t,"model_type"),e7t.forEach(r),kQe=t(RE,` property of the config object
(either passed as an argument or loaded from `),fH=s(RE,"CODE",{});var o7t=n(fH);RQe=t(o7t,"pretrained_model_name_or_path"),o7t.forEach(r),SQe=t(RE,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),mH=s(RE,"CODE",{});var t7t=n(mH);PQe=t(t7t,"pretrained_model_name_or_path"),t7t.forEach(r),$Qe=t(RE,":"),RE.forEach(r),IQe=d(Ar),ne=s(Ar,"UL",{});var ie=n(ne);Rg=s(ie,"LI",{});var g1e=n(Rg);gH=s(g1e,"STRONG",{});var r7t=n(gH);jQe=t(r7t,"beit"),r7t.forEach(r),NQe=t(g1e," \u2014 "),ax=s(g1e,"A",{href:!0});var a7t=n(ax);DQe=t(a7t,"BeitFeatureExtractor"),a7t.forEach(r),qQe=t(g1e," (BEiT model)"),g1e.forEach(r),GQe=d(ie),Sg=s(ie,"LI",{});var h1e=n(Sg);hH=s(h1e,"STRONG",{});var s7t=n(hH);OQe=t(s7t,"clip"),s7t.forEach(r),XQe=t(h1e," \u2014 "),sx=s(h1e,"A",{href:!0});var n7t=n(sx);zQe=t(n7t,"CLIPFeatureExtractor"),n7t.forEach(r),VQe=t(h1e," (CLIP model)"),h1e.forEach(r),WQe=d(ie),Pg=s(ie,"LI",{});var u1e=n(Pg);uH=s(u1e,"STRONG",{});var l7t=n(uH);QQe=t(l7t,"convnext"),l7t.forEach(r),HQe=t(u1e," \u2014 "),nx=s(u1e,"A",{href:!0});var d7t=n(nx);UQe=t(d7t,"ConvNextFeatureExtractor"),d7t.forEach(r),JQe=t(u1e," (ConvNext model)"),u1e.forEach(r),YQe=d(ie),$g=s(ie,"LI",{});var p1e=n($g);pH=s(p1e,"STRONG",{});var i7t=n(pH);KQe=t(i7t,"deit"),i7t.forEach(r),ZQe=t(p1e," \u2014 "),lx=s(p1e,"A",{href:!0});var c7t=n(lx);eHe=t(c7t,"DeiTFeatureExtractor"),c7t.forEach(r),oHe=t(p1e," (DeiT model)"),p1e.forEach(r),tHe=d(ie),Ig=s(ie,"LI",{});var _1e=n(Ig);_H=s(_1e,"STRONG",{});var f7t=n(_H);rHe=t(f7t,"detr"),f7t.forEach(r),aHe=t(_1e," \u2014 "),dx=s(_1e,"A",{href:!0});var m7t=n(dx);sHe=t(m7t,"DetrFeatureExtractor"),m7t.forEach(r),nHe=t(_1e," (DETR model)"),_1e.forEach(r),lHe=d(ie),jg=s(ie,"LI",{});var b1e=n(jg);bH=s(b1e,"STRONG",{});var g7t=n(bH);dHe=t(g7t,"hubert"),g7t.forEach(r),iHe=t(b1e," \u2014 "),ix=s(b1e,"A",{href:!0});var h7t=n(ix);cHe=t(h7t,"Wav2Vec2FeatureExtractor"),h7t.forEach(r),fHe=t(b1e," (Hubert model)"),b1e.forEach(r),mHe=d(ie),Ng=s(ie,"LI",{});var v1e=n(Ng);vH=s(v1e,"STRONG",{});var u7t=n(vH);gHe=t(u7t,"layoutlmv2"),u7t.forEach(r),hHe=t(v1e," \u2014 "),cx=s(v1e,"A",{href:!0});var p7t=n(cx);uHe=t(p7t,"LayoutLMv2FeatureExtractor"),p7t.forEach(r),pHe=t(v1e," (LayoutLMv2 model)"),v1e.forEach(r),_He=d(ie),Dg=s(ie,"LI",{});var T1e=n(Dg);TH=s(T1e,"STRONG",{});var _7t=n(TH);bHe=t(_7t,"perceiver"),_7t.forEach(r),vHe=t(T1e," \u2014 "),fx=s(T1e,"A",{href:!0});var b7t=n(fx);THe=t(b7t,"PerceiverFeatureExtractor"),b7t.forEach(r),FHe=t(T1e," (Perceiver model)"),T1e.forEach(r),CHe=d(ie),qg=s(ie,"LI",{});var F1e=n(qg);FH=s(F1e,"STRONG",{});var v7t=n(FH);MHe=t(v7t,"segformer"),v7t.forEach(r),EHe=t(F1e," \u2014 "),mx=s(F1e,"A",{href:!0});var T7t=n(mx);yHe=t(T7t,"SegformerFeatureExtractor"),T7t.forEach(r),wHe=t(F1e," (SegFormer model)"),F1e.forEach(r),AHe=d(ie),Gg=s(ie,"LI",{});var C1e=n(Gg);CH=s(C1e,"STRONG",{});var F7t=n(CH);LHe=t(F7t,"speech_to_text"),F7t.forEach(r),BHe=t(C1e," \u2014 "),gx=s(C1e,"A",{href:!0});var C7t=n(gx);xHe=t(C7t,"Speech2TextFeatureExtractor"),C7t.forEach(r),kHe=t(C1e," (Speech2Text model)"),C1e.forEach(r),RHe=d(ie),Og=s(ie,"LI",{});var M1e=n(Og);MH=s(M1e,"STRONG",{});var M7t=n(MH);SHe=t(M7t,"swin"),M7t.forEach(r),PHe=t(M1e," \u2014 "),hx=s(M1e,"A",{href:!0});var E7t=n(hx);$He=t(E7t,"ViTFeatureExtractor"),E7t.forEach(r),IHe=t(M1e," (Swin model)"),M1e.forEach(r),jHe=d(ie),Xg=s(ie,"LI",{});var E1e=n(Xg);EH=s(E1e,"STRONG",{});var y7t=n(EH);NHe=t(y7t,"vit"),y7t.forEach(r),DHe=t(E1e," \u2014 "),ux=s(E1e,"A",{href:!0});var w7t=n(ux);qHe=t(w7t,"ViTFeatureExtractor"),w7t.forEach(r),GHe=t(E1e," (ViT model)"),E1e.forEach(r),OHe=d(ie),zg=s(ie,"LI",{});var y1e=n(zg);yH=s(y1e,"STRONG",{});var A7t=n(yH);XHe=t(A7t,"vit_mae"),A7t.forEach(r),zHe=t(y1e," \u2014 "),px=s(y1e,"A",{href:!0});var L7t=n(px);VHe=t(L7t,"ViTFeatureExtractor"),L7t.forEach(r),WHe=t(y1e," (ViTMAE model)"),y1e.forEach(r),QHe=d(ie),Vg=s(ie,"LI",{});var w1e=n(Vg);wH=s(w1e,"STRONG",{});var B7t=n(wH);HHe=t(B7t,"wav2vec2"),B7t.forEach(r),UHe=t(w1e," \u2014 "),_x=s(w1e,"A",{href:!0});var x7t=n(_x);JHe=t(x7t,"Wav2Vec2FeatureExtractor"),x7t.forEach(r),YHe=t(w1e," (Wav2Vec2 model)"),w1e.forEach(r),ie.forEach(r),KHe=d(Ar),m(Wg.$$.fragment,Ar),ZHe=d(Ar),AH=s(Ar,"P",{});var k7t=n(AH);eUe=t(k7t,"Examples:"),k7t.forEach(r),oUe=d(Ar),m(K3.$$.fragment,Ar),Ar.forEach(r),tUe=d(kn),Qg=s(kn,"DIV",{class:!0});var L8e=n(Qg);m(Z3.$$.fragment,L8e),rUe=d(L8e),LH=s(L8e,"P",{});var R7t=n(LH);aUe=t(R7t,"Register a new feature extractor for this class."),R7t.forEach(r),L8e.forEach(r),kn.forEach(r),wLe=d(i),xd=s(i,"H2",{class:!0});var B8e=n(xd);Hg=s(B8e,"A",{id:!0,class:!0,href:!0});var S7t=n(Hg);BH=s(S7t,"SPAN",{});var P7t=n(BH);m(e5.$$.fragment,P7t),P7t.forEach(r),S7t.forEach(r),sUe=d(B8e),xH=s(B8e,"SPAN",{});var $7t=n(xH);nUe=t($7t,"AutoProcessor"),$7t.forEach(r),B8e.forEach(r),ALe=d(i),ea=s(i,"DIV",{class:!0});var SE=n(ea);m(o5.$$.fragment,SE),lUe=d(SE),t5=s(SE,"P",{});var x8e=n(t5);dUe=t(x8e,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),bx=s(x8e,"A",{href:!0});var I7t=n(bx);iUe=t(I7t,"AutoProcessor.from_pretrained()"),I7t.forEach(r),cUe=t(x8e," class method."),x8e.forEach(r),fUe=d(SE),r5=s(SE,"P",{});var k8e=n(r5);mUe=t(k8e,"This class cannot be instantiated directly using "),kH=s(k8e,"CODE",{});var j7t=n(kH);gUe=t(j7t,"__init__()"),j7t.forEach(r),hUe=t(k8e," (throws an error)."),k8e.forEach(r),uUe=d(SE),Be=s(SE,"DIV",{class:!0});var Lr=n(Be);m(a5.$$.fragment,Lr),pUe=d(Lr),RH=s(Lr,"P",{});var N7t=n(RH);_Ue=t(N7t,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),N7t.forEach(r),bUe=d(Lr),kd=s(Lr,"P",{});var JO=n(kd);vUe=t(JO,"The processor class to instantiate is selected based on the "),SH=s(JO,"CODE",{});var D7t=n(SH);TUe=t(D7t,"model_type"),D7t.forEach(r),FUe=t(JO,` property of the config object (either
passed as an argument or loaded from `),PH=s(JO,"CODE",{});var q7t=n(PH);CUe=t(q7t,"pretrained_model_name_or_path"),q7t.forEach(r),MUe=t(JO," if possible):"),JO.forEach(r),EUe=d(Lr),ye=s(Lr,"UL",{});var Io=n(ye);Ug=s(Io,"LI",{});var A1e=n(Ug);$H=s(A1e,"STRONG",{});var G7t=n($H);yUe=t(G7t,"clip"),G7t.forEach(r),wUe=t(A1e," \u2014 "),vx=s(A1e,"A",{href:!0});var O7t=n(vx);AUe=t(O7t,"CLIPProcessor"),O7t.forEach(r),LUe=t(A1e," (CLIP model)"),A1e.forEach(r),BUe=d(Io),Jg=s(Io,"LI",{});var L1e=n(Jg);IH=s(L1e,"STRONG",{});var X7t=n(IH);xUe=t(X7t,"layoutlmv2"),X7t.forEach(r),kUe=t(L1e," \u2014 "),Tx=s(L1e,"A",{href:!0});var z7t=n(Tx);RUe=t(z7t,"LayoutLMv2Processor"),z7t.forEach(r),SUe=t(L1e," (LayoutLMv2 model)"),L1e.forEach(r),PUe=d(Io),Yg=s(Io,"LI",{});var B1e=n(Yg);jH=s(B1e,"STRONG",{});var V7t=n(jH);$Ue=t(V7t,"layoutxlm"),V7t.forEach(r),IUe=t(B1e," \u2014 "),Fx=s(B1e,"A",{href:!0});var W7t=n(Fx);jUe=t(W7t,"LayoutXLMProcessor"),W7t.forEach(r),NUe=t(B1e," (LayoutXLM model)"),B1e.forEach(r),DUe=d(Io),Kg=s(Io,"LI",{});var x1e=n(Kg);NH=s(x1e,"STRONG",{});var Q7t=n(NH);qUe=t(Q7t,"speech_to_text"),Q7t.forEach(r),GUe=t(x1e," \u2014 "),Cx=s(x1e,"A",{href:!0});var H7t=n(Cx);OUe=t(H7t,"Speech2TextProcessor"),H7t.forEach(r),XUe=t(x1e," (Speech2Text model)"),x1e.forEach(r),zUe=d(Io),Zg=s(Io,"LI",{});var k1e=n(Zg);DH=s(k1e,"STRONG",{});var U7t=n(DH);VUe=t(U7t,"speech_to_text_2"),U7t.forEach(r),WUe=t(k1e," \u2014 "),Mx=s(k1e,"A",{href:!0});var J7t=n(Mx);QUe=t(J7t,"Speech2Text2Processor"),J7t.forEach(r),HUe=t(k1e," (Speech2Text2 model)"),k1e.forEach(r),UUe=d(Io),eh=s(Io,"LI",{});var R1e=n(eh);qH=s(R1e,"STRONG",{});var Y7t=n(qH);JUe=t(Y7t,"trocr"),Y7t.forEach(r),YUe=t(R1e," \u2014 "),Ex=s(R1e,"A",{href:!0});var K7t=n(Ex);KUe=t(K7t,"TrOCRProcessor"),K7t.forEach(r),ZUe=t(R1e," (TrOCR model)"),R1e.forEach(r),eJe=d(Io),oh=s(Io,"LI",{});var S1e=n(oh);GH=s(S1e,"STRONG",{});var Z7t=n(GH);oJe=t(Z7t,"vision-text-dual-encoder"),Z7t.forEach(r),tJe=t(S1e," \u2014 "),yx=s(S1e,"A",{href:!0});var e8t=n(yx);rJe=t(e8t,"VisionTextDualEncoderProcessor"),e8t.forEach(r),aJe=t(S1e," (VisionTextDualEncoder model)"),S1e.forEach(r),sJe=d(Io),th=s(Io,"LI",{});var P1e=n(th);OH=s(P1e,"STRONG",{});var o8t=n(OH);nJe=t(o8t,"wav2vec2"),o8t.forEach(r),lJe=t(P1e," \u2014 "),wx=s(P1e,"A",{href:!0});var t8t=n(wx);dJe=t(t8t,"Wav2Vec2Processor"),t8t.forEach(r),iJe=t(P1e," (Wav2Vec2 model)"),P1e.forEach(r),Io.forEach(r),cJe=d(Lr),m(rh.$$.fragment,Lr),fJe=d(Lr),XH=s(Lr,"P",{});var r8t=n(XH);mJe=t(r8t,"Examples:"),r8t.forEach(r),gJe=d(Lr),m(s5.$$.fragment,Lr),Lr.forEach(r),SE.forEach(r),LLe=d(i),Rd=s(i,"H2",{class:!0});var R8e=n(Rd);ah=s(R8e,"A",{id:!0,class:!0,href:!0});var a8t=n(ah);zH=s(a8t,"SPAN",{});var s8t=n(zH);m(n5.$$.fragment,s8t),s8t.forEach(r),a8t.forEach(r),hJe=d(R8e),VH=s(R8e,"SPAN",{});var n8t=n(VH);uJe=t(n8t,"AutoModel"),n8t.forEach(r),R8e.forEach(r),BLe=d(i),Xo=s(i,"DIV",{class:!0});var Rn=n(Xo);m(l5.$$.fragment,Rn),pJe=d(Rn),Sd=s(Rn,"P",{});var YO=n(Sd);_Je=t(YO,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),WH=s(YO,"CODE",{});var l8t=n(WH);bJe=t(l8t,"from_pretrained()"),l8t.forEach(r),vJe=t(YO,"class method or the "),QH=s(YO,"CODE",{});var d8t=n(QH);TJe=t(d8t,"from_config()"),d8t.forEach(r),FJe=t(YO,`class
method.`),YO.forEach(r),CJe=d(Rn),d5=s(Rn,"P",{});var S8e=n(d5);MJe=t(S8e,"This class cannot be instantiated directly using "),HH=s(S8e,"CODE",{});var i8t=n(HH);EJe=t(i8t,"__init__()"),i8t.forEach(r),yJe=t(S8e," (throws an error)."),S8e.forEach(r),wJe=d(Rn),$t=s(Rn,"DIV",{class:!0});var Sn=n($t);m(i5.$$.fragment,Sn),AJe=d(Sn),UH=s(Sn,"P",{});var c8t=n(UH);LJe=t(c8t,"Instantiates one of the base model classes of the library from a configuration."),c8t.forEach(r),BJe=d(Sn),Pd=s(Sn,"P",{});var KO=n(Pd);xJe=t(KO,`Note:
Loading a model from its configuration file does `),JH=s(KO,"STRONG",{});var f8t=n(JH);kJe=t(f8t,"not"),f8t.forEach(r),RJe=t(KO,` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=s(KO,"CODE",{});var m8t=n(YH);SJe=t(m8t,"from_pretrained()"),m8t.forEach(r),PJe=t(KO,"to load the model weights."),KO.forEach(r),$Je=d(Sn),KH=s(Sn,"P",{});var g8t=n(KH);IJe=t(g8t,"Examples:"),g8t.forEach(r),jJe=d(Sn),m(c5.$$.fragment,Sn),Sn.forEach(r),NJe=d(Rn),xe=s(Rn,"DIV",{class:!0});var Br=n(xe);m(f5.$$.fragment,Br),DJe=d(Br),ZH=s(Br,"P",{});var h8t=n(ZH);qJe=t(h8t,"Instantiate one of the base model classes of the library from a pretrained model."),h8t.forEach(r),GJe=d(Br),$a=s(Br,"P",{});var PE=n($a);OJe=t(PE,"The model class to instantiate is selected based on the "),eU=s(PE,"CODE",{});var u8t=n(eU);XJe=t(u8t,"model_type"),u8t.forEach(r),zJe=t(PE,` property of the config object (either
passed as an argument or loaded from `),oU=s(PE,"CODE",{});var p8t=n(oU);VJe=t(p8t,"pretrained_model_name_or_path"),p8t.forEach(r),WJe=t(PE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tU=s(PE,"CODE",{});var _8t=n(tU);QJe=t(_8t,"pretrained_model_name_or_path"),_8t.forEach(r),HJe=t(PE,":"),PE.forEach(r),UJe=d(Br),F=s(Br,"UL",{});var C=n(F);sh=s(C,"LI",{});var $1e=n(sh);rU=s($1e,"STRONG",{});var b8t=n(rU);JJe=t(b8t,"albert"),b8t.forEach(r),YJe=t($1e," \u2014 "),Ax=s($1e,"A",{href:!0});var v8t=n(Ax);KJe=t(v8t,"AlbertModel"),v8t.forEach(r),ZJe=t($1e," (ALBERT model)"),$1e.forEach(r),eYe=d(C),nh=s(C,"LI",{});var I1e=n(nh);aU=s(I1e,"STRONG",{});var T8t=n(aU);oYe=t(T8t,"bart"),T8t.forEach(r),tYe=t(I1e," \u2014 "),Lx=s(I1e,"A",{href:!0});var F8t=n(Lx);rYe=t(F8t,"BartModel"),F8t.forEach(r),aYe=t(I1e," (BART model)"),I1e.forEach(r),sYe=d(C),lh=s(C,"LI",{});var j1e=n(lh);sU=s(j1e,"STRONG",{});var C8t=n(sU);nYe=t(C8t,"beit"),C8t.forEach(r),lYe=t(j1e," \u2014 "),Bx=s(j1e,"A",{href:!0});var M8t=n(Bx);dYe=t(M8t,"BeitModel"),M8t.forEach(r),iYe=t(j1e," (BEiT model)"),j1e.forEach(r),cYe=d(C),dh=s(C,"LI",{});var N1e=n(dh);nU=s(N1e,"STRONG",{});var E8t=n(nU);fYe=t(E8t,"bert"),E8t.forEach(r),mYe=t(N1e," \u2014 "),xx=s(N1e,"A",{href:!0});var y8t=n(xx);gYe=t(y8t,"BertModel"),y8t.forEach(r),hYe=t(N1e," (BERT model)"),N1e.forEach(r),uYe=d(C),ih=s(C,"LI",{});var D1e=n(ih);lU=s(D1e,"STRONG",{});var w8t=n(lU);pYe=t(w8t,"bert-generation"),w8t.forEach(r),_Ye=t(D1e," \u2014 "),kx=s(D1e,"A",{href:!0});var A8t=n(kx);bYe=t(A8t,"BertGenerationEncoder"),A8t.forEach(r),vYe=t(D1e," (Bert Generation model)"),D1e.forEach(r),TYe=d(C),ch=s(C,"LI",{});var q1e=n(ch);dU=s(q1e,"STRONG",{});var L8t=n(dU);FYe=t(L8t,"big_bird"),L8t.forEach(r),CYe=t(q1e," \u2014 "),Rx=s(q1e,"A",{href:!0});var B8t=n(Rx);MYe=t(B8t,"BigBirdModel"),B8t.forEach(r),EYe=t(q1e," (BigBird model)"),q1e.forEach(r),yYe=d(C),fh=s(C,"LI",{});var G1e=n(fh);iU=s(G1e,"STRONG",{});var x8t=n(iU);wYe=t(x8t,"bigbird_pegasus"),x8t.forEach(r),AYe=t(G1e," \u2014 "),Sx=s(G1e,"A",{href:!0});var k8t=n(Sx);LYe=t(k8t,"BigBirdPegasusModel"),k8t.forEach(r),BYe=t(G1e," (BigBirdPegasus model)"),G1e.forEach(r),xYe=d(C),mh=s(C,"LI",{});var O1e=n(mh);cU=s(O1e,"STRONG",{});var R8t=n(cU);kYe=t(R8t,"blenderbot"),R8t.forEach(r),RYe=t(O1e," \u2014 "),Px=s(O1e,"A",{href:!0});var S8t=n(Px);SYe=t(S8t,"BlenderbotModel"),S8t.forEach(r),PYe=t(O1e," (Blenderbot model)"),O1e.forEach(r),$Ye=d(C),gh=s(C,"LI",{});var X1e=n(gh);fU=s(X1e,"STRONG",{});var P8t=n(fU);IYe=t(P8t,"blenderbot-small"),P8t.forEach(r),jYe=t(X1e," \u2014 "),$x=s(X1e,"A",{href:!0});var $8t=n($x);NYe=t($8t,"BlenderbotSmallModel"),$8t.forEach(r),DYe=t(X1e," (BlenderbotSmall model)"),X1e.forEach(r),qYe=d(C),hh=s(C,"LI",{});var z1e=n(hh);mU=s(z1e,"STRONG",{});var I8t=n(mU);GYe=t(I8t,"camembert"),I8t.forEach(r),OYe=t(z1e," \u2014 "),Ix=s(z1e,"A",{href:!0});var j8t=n(Ix);XYe=t(j8t,"CamembertModel"),j8t.forEach(r),zYe=t(z1e," (CamemBERT model)"),z1e.forEach(r),VYe=d(C),uh=s(C,"LI",{});var V1e=n(uh);gU=s(V1e,"STRONG",{});var N8t=n(gU);WYe=t(N8t,"canine"),N8t.forEach(r),QYe=t(V1e," \u2014 "),jx=s(V1e,"A",{href:!0});var D8t=n(jx);HYe=t(D8t,"CanineModel"),D8t.forEach(r),UYe=t(V1e," (Canine model)"),V1e.forEach(r),JYe=d(C),ph=s(C,"LI",{});var W1e=n(ph);hU=s(W1e,"STRONG",{});var q8t=n(hU);YYe=t(q8t,"clip"),q8t.forEach(r),KYe=t(W1e," \u2014 "),Nx=s(W1e,"A",{href:!0});var G8t=n(Nx);ZYe=t(G8t,"CLIPModel"),G8t.forEach(r),eKe=t(W1e," (CLIP model)"),W1e.forEach(r),oKe=d(C),_h=s(C,"LI",{});var Q1e=n(_h);uU=s(Q1e,"STRONG",{});var O8t=n(uU);tKe=t(O8t,"convbert"),O8t.forEach(r),rKe=t(Q1e," \u2014 "),Dx=s(Q1e,"A",{href:!0});var X8t=n(Dx);aKe=t(X8t,"ConvBertModel"),X8t.forEach(r),sKe=t(Q1e," (ConvBERT model)"),Q1e.forEach(r),nKe=d(C),bh=s(C,"LI",{});var H1e=n(bh);pU=s(H1e,"STRONG",{});var z8t=n(pU);lKe=t(z8t,"convnext"),z8t.forEach(r),dKe=t(H1e," \u2014 "),qx=s(H1e,"A",{href:!0});var V8t=n(qx);iKe=t(V8t,"ConvNextModel"),V8t.forEach(r),cKe=t(H1e," (ConvNext model)"),H1e.forEach(r),fKe=d(C),vh=s(C,"LI",{});var U1e=n(vh);_U=s(U1e,"STRONG",{});var W8t=n(_U);mKe=t(W8t,"ctrl"),W8t.forEach(r),gKe=t(U1e," \u2014 "),Gx=s(U1e,"A",{href:!0});var Q8t=n(Gx);hKe=t(Q8t,"CTRLModel"),Q8t.forEach(r),uKe=t(U1e," (CTRL model)"),U1e.forEach(r),pKe=d(C),Th=s(C,"LI",{});var J1e=n(Th);bU=s(J1e,"STRONG",{});var H8t=n(bU);_Ke=t(H8t,"deberta"),H8t.forEach(r),bKe=t(J1e," \u2014 "),Ox=s(J1e,"A",{href:!0});var U8t=n(Ox);vKe=t(U8t,"DebertaModel"),U8t.forEach(r),TKe=t(J1e," (DeBERTa model)"),J1e.forEach(r),FKe=d(C),Fh=s(C,"LI",{});var Y1e=n(Fh);vU=s(Y1e,"STRONG",{});var J8t=n(vU);CKe=t(J8t,"deberta-v2"),J8t.forEach(r),MKe=t(Y1e," \u2014 "),Xx=s(Y1e,"A",{href:!0});var Y8t=n(Xx);EKe=t(Y8t,"DebertaV2Model"),Y8t.forEach(r),yKe=t(Y1e," (DeBERTa-v2 model)"),Y1e.forEach(r),wKe=d(C),Ch=s(C,"LI",{});var K1e=n(Ch);TU=s(K1e,"STRONG",{});var K8t=n(TU);AKe=t(K8t,"deit"),K8t.forEach(r),LKe=t(K1e," \u2014 "),zx=s(K1e,"A",{href:!0});var Z8t=n(zx);BKe=t(Z8t,"DeiTModel"),Z8t.forEach(r),xKe=t(K1e," (DeiT model)"),K1e.forEach(r),kKe=d(C),Mh=s(C,"LI",{});var Z1e=n(Mh);FU=s(Z1e,"STRONG",{});var e9t=n(FU);RKe=t(e9t,"detr"),e9t.forEach(r),SKe=t(Z1e," \u2014 "),Vx=s(Z1e,"A",{href:!0});var o9t=n(Vx);PKe=t(o9t,"DetrModel"),o9t.forEach(r),$Ke=t(Z1e," (DETR model)"),Z1e.forEach(r),IKe=d(C),Eh=s(C,"LI",{});var eFe=n(Eh);CU=s(eFe,"STRONG",{});var t9t=n(CU);jKe=t(t9t,"distilbert"),t9t.forEach(r),NKe=t(eFe," \u2014 "),Wx=s(eFe,"A",{href:!0});var r9t=n(Wx);DKe=t(r9t,"DistilBertModel"),r9t.forEach(r),qKe=t(eFe," (DistilBERT model)"),eFe.forEach(r),GKe=d(C),yh=s(C,"LI",{});var oFe=n(yh);MU=s(oFe,"STRONG",{});var a9t=n(MU);OKe=t(a9t,"dpr"),a9t.forEach(r),XKe=t(oFe," \u2014 "),Qx=s(oFe,"A",{href:!0});var s9t=n(Qx);zKe=t(s9t,"DPRQuestionEncoder"),s9t.forEach(r),VKe=t(oFe," (DPR model)"),oFe.forEach(r),WKe=d(C),wh=s(C,"LI",{});var tFe=n(wh);EU=s(tFe,"STRONG",{});var n9t=n(EU);QKe=t(n9t,"electra"),n9t.forEach(r),HKe=t(tFe," \u2014 "),Hx=s(tFe,"A",{href:!0});var l9t=n(Hx);UKe=t(l9t,"ElectraModel"),l9t.forEach(r),JKe=t(tFe," (ELECTRA model)"),tFe.forEach(r),YKe=d(C),Ah=s(C,"LI",{});var rFe=n(Ah);yU=s(rFe,"STRONG",{});var d9t=n(yU);KKe=t(d9t,"flaubert"),d9t.forEach(r),ZKe=t(rFe," \u2014 "),Ux=s(rFe,"A",{href:!0});var i9t=n(Ux);eZe=t(i9t,"FlaubertModel"),i9t.forEach(r),oZe=t(rFe," (FlauBERT model)"),rFe.forEach(r),tZe=d(C),Lh=s(C,"LI",{});var aFe=n(Lh);wU=s(aFe,"STRONG",{});var c9t=n(wU);rZe=t(c9t,"fnet"),c9t.forEach(r),aZe=t(aFe," \u2014 "),Jx=s(aFe,"A",{href:!0});var f9t=n(Jx);sZe=t(f9t,"FNetModel"),f9t.forEach(r),nZe=t(aFe," (FNet model)"),aFe.forEach(r),lZe=d(C),Bh=s(C,"LI",{});var sFe=n(Bh);AU=s(sFe,"STRONG",{});var m9t=n(AU);dZe=t(m9t,"fsmt"),m9t.forEach(r),iZe=t(sFe," \u2014 "),Yx=s(sFe,"A",{href:!0});var g9t=n(Yx);cZe=t(g9t,"FSMTModel"),g9t.forEach(r),fZe=t(sFe," (FairSeq Machine-Translation model)"),sFe.forEach(r),mZe=d(C),wn=s(C,"LI",{});var e7=n(wn);LU=s(e7,"STRONG",{});var h9t=n(LU);gZe=t(h9t,"funnel"),h9t.forEach(r),hZe=t(e7," \u2014 "),Kx=s(e7,"A",{href:!0});var u9t=n(Kx);uZe=t(u9t,"FunnelModel"),u9t.forEach(r),pZe=t(e7," or "),Zx=s(e7,"A",{href:!0});var p9t=n(Zx);_Ze=t(p9t,"FunnelBaseModel"),p9t.forEach(r),bZe=t(e7," (Funnel Transformer model)"),e7.forEach(r),vZe=d(C),xh=s(C,"LI",{});var nFe=n(xh);BU=s(nFe,"STRONG",{});var _9t=n(BU);TZe=t(_9t,"gpt2"),_9t.forEach(r),FZe=t(nFe," \u2014 "),ek=s(nFe,"A",{href:!0});var b9t=n(ek);CZe=t(b9t,"GPT2Model"),b9t.forEach(r),MZe=t(nFe," (OpenAI GPT-2 model)"),nFe.forEach(r),EZe=d(C),kh=s(C,"LI",{});var lFe=n(kh);xU=s(lFe,"STRONG",{});var v9t=n(xU);yZe=t(v9t,"gpt_neo"),v9t.forEach(r),wZe=t(lFe," \u2014 "),ok=s(lFe,"A",{href:!0});var T9t=n(ok);AZe=t(T9t,"GPTNeoModel"),T9t.forEach(r),LZe=t(lFe," (GPT Neo model)"),lFe.forEach(r),BZe=d(C),Rh=s(C,"LI",{});var dFe=n(Rh);kU=s(dFe,"STRONG",{});var F9t=n(kU);xZe=t(F9t,"gptj"),F9t.forEach(r),kZe=t(dFe," \u2014 "),tk=s(dFe,"A",{href:!0});var C9t=n(tk);RZe=t(C9t,"GPTJModel"),C9t.forEach(r),SZe=t(dFe," (GPT-J model)"),dFe.forEach(r),PZe=d(C),Sh=s(C,"LI",{});var iFe=n(Sh);RU=s(iFe,"STRONG",{});var M9t=n(RU);$Ze=t(M9t,"hubert"),M9t.forEach(r),IZe=t(iFe," \u2014 "),rk=s(iFe,"A",{href:!0});var E9t=n(rk);jZe=t(E9t,"HubertModel"),E9t.forEach(r),NZe=t(iFe," (Hubert model)"),iFe.forEach(r),DZe=d(C),Ph=s(C,"LI",{});var cFe=n(Ph);SU=s(cFe,"STRONG",{});var y9t=n(SU);qZe=t(y9t,"ibert"),y9t.forEach(r),GZe=t(cFe," \u2014 "),ak=s(cFe,"A",{href:!0});var w9t=n(ak);OZe=t(w9t,"IBertModel"),w9t.forEach(r),XZe=t(cFe," (I-BERT model)"),cFe.forEach(r),zZe=d(C),$h=s(C,"LI",{});var fFe=n($h);PU=s(fFe,"STRONG",{});var A9t=n(PU);VZe=t(A9t,"imagegpt"),A9t.forEach(r),WZe=t(fFe," \u2014 "),sk=s(fFe,"A",{href:!0});var L9t=n(sk);QZe=t(L9t,"ImageGPTModel"),L9t.forEach(r),HZe=t(fFe," (ImageGPT model)"),fFe.forEach(r),UZe=d(C),Ih=s(C,"LI",{});var mFe=n(Ih);$U=s(mFe,"STRONG",{});var B9t=n($U);JZe=t(B9t,"layoutlm"),B9t.forEach(r),YZe=t(mFe," \u2014 "),nk=s(mFe,"A",{href:!0});var x9t=n(nk);KZe=t(x9t,"LayoutLMModel"),x9t.forEach(r),ZZe=t(mFe," (LayoutLM model)"),mFe.forEach(r),eeo=d(C),jh=s(C,"LI",{});var gFe=n(jh);IU=s(gFe,"STRONG",{});var k9t=n(IU);oeo=t(k9t,"layoutlmv2"),k9t.forEach(r),teo=t(gFe," \u2014 "),lk=s(gFe,"A",{href:!0});var R9t=n(lk);reo=t(R9t,"LayoutLMv2Model"),R9t.forEach(r),aeo=t(gFe," (LayoutLMv2 model)"),gFe.forEach(r),seo=d(C),Nh=s(C,"LI",{});var hFe=n(Nh);jU=s(hFe,"STRONG",{});var S9t=n(jU);neo=t(S9t,"led"),S9t.forEach(r),leo=t(hFe," \u2014 "),dk=s(hFe,"A",{href:!0});var P9t=n(dk);deo=t(P9t,"LEDModel"),P9t.forEach(r),ieo=t(hFe," (LED model)"),hFe.forEach(r),ceo=d(C),Dh=s(C,"LI",{});var uFe=n(Dh);NU=s(uFe,"STRONG",{});var $9t=n(NU);feo=t($9t,"longformer"),$9t.forEach(r),meo=t(uFe," \u2014 "),ik=s(uFe,"A",{href:!0});var I9t=n(ik);geo=t(I9t,"LongformerModel"),I9t.forEach(r),heo=t(uFe," (Longformer model)"),uFe.forEach(r),ueo=d(C),qh=s(C,"LI",{});var pFe=n(qh);DU=s(pFe,"STRONG",{});var j9t=n(DU);peo=t(j9t,"luke"),j9t.forEach(r),_eo=t(pFe," \u2014 "),ck=s(pFe,"A",{href:!0});var N9t=n(ck);beo=t(N9t,"LukeModel"),N9t.forEach(r),veo=t(pFe," (LUKE model)"),pFe.forEach(r),Teo=d(C),Gh=s(C,"LI",{});var _Fe=n(Gh);qU=s(_Fe,"STRONG",{});var D9t=n(qU);Feo=t(D9t,"lxmert"),D9t.forEach(r),Ceo=t(_Fe," \u2014 "),fk=s(_Fe,"A",{href:!0});var q9t=n(fk);Meo=t(q9t,"LxmertModel"),q9t.forEach(r),Eeo=t(_Fe," (LXMERT model)"),_Fe.forEach(r),yeo=d(C),Oh=s(C,"LI",{});var bFe=n(Oh);GU=s(bFe,"STRONG",{});var G9t=n(GU);weo=t(G9t,"m2m_100"),G9t.forEach(r),Aeo=t(bFe," \u2014 "),mk=s(bFe,"A",{href:!0});var O9t=n(mk);Leo=t(O9t,"M2M100Model"),O9t.forEach(r),Beo=t(bFe," (M2M100 model)"),bFe.forEach(r),xeo=d(C),Xh=s(C,"LI",{});var vFe=n(Xh);OU=s(vFe,"STRONG",{});var X9t=n(OU);keo=t(X9t,"marian"),X9t.forEach(r),Reo=t(vFe," \u2014 "),gk=s(vFe,"A",{href:!0});var z9t=n(gk);Seo=t(z9t,"MarianModel"),z9t.forEach(r),Peo=t(vFe," (Marian model)"),vFe.forEach(r),$eo=d(C),zh=s(C,"LI",{});var TFe=n(zh);XU=s(TFe,"STRONG",{});var V9t=n(XU);Ieo=t(V9t,"mbart"),V9t.forEach(r),jeo=t(TFe," \u2014 "),hk=s(TFe,"A",{href:!0});var W9t=n(hk);Neo=t(W9t,"MBartModel"),W9t.forEach(r),Deo=t(TFe," (mBART model)"),TFe.forEach(r),qeo=d(C),Vh=s(C,"LI",{});var FFe=n(Vh);zU=s(FFe,"STRONG",{});var Q9t=n(zU);Geo=t(Q9t,"megatron-bert"),Q9t.forEach(r),Oeo=t(FFe," \u2014 "),uk=s(FFe,"A",{href:!0});var H9t=n(uk);Xeo=t(H9t,"MegatronBertModel"),H9t.forEach(r),zeo=t(FFe," (MegatronBert model)"),FFe.forEach(r),Veo=d(C),Wh=s(C,"LI",{});var CFe=n(Wh);VU=s(CFe,"STRONG",{});var U9t=n(VU);Weo=t(U9t,"mobilebert"),U9t.forEach(r),Qeo=t(CFe," \u2014 "),pk=s(CFe,"A",{href:!0});var J9t=n(pk);Heo=t(J9t,"MobileBertModel"),J9t.forEach(r),Ueo=t(CFe," (MobileBERT model)"),CFe.forEach(r),Jeo=d(C),Qh=s(C,"LI",{});var MFe=n(Qh);WU=s(MFe,"STRONG",{});var Y9t=n(WU);Yeo=t(Y9t,"mpnet"),Y9t.forEach(r),Keo=t(MFe," \u2014 "),_k=s(MFe,"A",{href:!0});var K9t=n(_k);Zeo=t(K9t,"MPNetModel"),K9t.forEach(r),eoo=t(MFe," (MPNet model)"),MFe.forEach(r),ooo=d(C),Hh=s(C,"LI",{});var EFe=n(Hh);QU=s(EFe,"STRONG",{});var Z9t=n(QU);too=t(Z9t,"mt5"),Z9t.forEach(r),roo=t(EFe," \u2014 "),bk=s(EFe,"A",{href:!0});var eBt=n(bk);aoo=t(eBt,"MT5Model"),eBt.forEach(r),soo=t(EFe," (mT5 model)"),EFe.forEach(r),noo=d(C),Uh=s(C,"LI",{});var yFe=n(Uh);HU=s(yFe,"STRONG",{});var oBt=n(HU);loo=t(oBt,"nystromformer"),oBt.forEach(r),doo=t(yFe," \u2014 "),vk=s(yFe,"A",{href:!0});var tBt=n(vk);ioo=t(tBt,"NystromformerModel"),tBt.forEach(r),coo=t(yFe," (Nystromformer model)"),yFe.forEach(r),foo=d(C),Jh=s(C,"LI",{});var wFe=n(Jh);UU=s(wFe,"STRONG",{});var rBt=n(UU);moo=t(rBt,"openai-gpt"),rBt.forEach(r),goo=t(wFe," \u2014 "),Tk=s(wFe,"A",{href:!0});var aBt=n(Tk);hoo=t(aBt,"OpenAIGPTModel"),aBt.forEach(r),uoo=t(wFe," (OpenAI GPT model)"),wFe.forEach(r),poo=d(C),Yh=s(C,"LI",{});var AFe=n(Yh);JU=s(AFe,"STRONG",{});var sBt=n(JU);_oo=t(sBt,"pegasus"),sBt.forEach(r),boo=t(AFe," \u2014 "),Fk=s(AFe,"A",{href:!0});var nBt=n(Fk);voo=t(nBt,"PegasusModel"),nBt.forEach(r),Too=t(AFe," (Pegasus model)"),AFe.forEach(r),Foo=d(C),Kh=s(C,"LI",{});var LFe=n(Kh);YU=s(LFe,"STRONG",{});var lBt=n(YU);Coo=t(lBt,"perceiver"),lBt.forEach(r),Moo=t(LFe," \u2014 "),Ck=s(LFe,"A",{href:!0});var dBt=n(Ck);Eoo=t(dBt,"PerceiverModel"),dBt.forEach(r),yoo=t(LFe," (Perceiver model)"),LFe.forEach(r),woo=d(C),Zh=s(C,"LI",{});var BFe=n(Zh);KU=s(BFe,"STRONG",{});var iBt=n(KU);Aoo=t(iBt,"prophetnet"),iBt.forEach(r),Loo=t(BFe," \u2014 "),Mk=s(BFe,"A",{href:!0});var cBt=n(Mk);Boo=t(cBt,"ProphetNetModel"),cBt.forEach(r),xoo=t(BFe," (ProphetNet model)"),BFe.forEach(r),koo=d(C),eu=s(C,"LI",{});var xFe=n(eu);ZU=s(xFe,"STRONG",{});var fBt=n(ZU);Roo=t(fBt,"qdqbert"),fBt.forEach(r),Soo=t(xFe," \u2014 "),Ek=s(xFe,"A",{href:!0});var mBt=n(Ek);Poo=t(mBt,"QDQBertModel"),mBt.forEach(r),$oo=t(xFe," (QDQBert model)"),xFe.forEach(r),Ioo=d(C),ou=s(C,"LI",{});var kFe=n(ou);eJ=s(kFe,"STRONG",{});var gBt=n(eJ);joo=t(gBt,"reformer"),gBt.forEach(r),Noo=t(kFe," \u2014 "),yk=s(kFe,"A",{href:!0});var hBt=n(yk);Doo=t(hBt,"ReformerModel"),hBt.forEach(r),qoo=t(kFe," (Reformer model)"),kFe.forEach(r),Goo=d(C),tu=s(C,"LI",{});var RFe=n(tu);oJ=s(RFe,"STRONG",{});var uBt=n(oJ);Ooo=t(uBt,"rembert"),uBt.forEach(r),Xoo=t(RFe," \u2014 "),wk=s(RFe,"A",{href:!0});var pBt=n(wk);zoo=t(pBt,"RemBertModel"),pBt.forEach(r),Voo=t(RFe," (RemBERT model)"),RFe.forEach(r),Woo=d(C),ru=s(C,"LI",{});var SFe=n(ru);tJ=s(SFe,"STRONG",{});var _Bt=n(tJ);Qoo=t(_Bt,"retribert"),_Bt.forEach(r),Hoo=t(SFe," \u2014 "),Ak=s(SFe,"A",{href:!0});var bBt=n(Ak);Uoo=t(bBt,"RetriBertModel"),bBt.forEach(r),Joo=t(SFe," (RetriBERT model)"),SFe.forEach(r),Yoo=d(C),au=s(C,"LI",{});var PFe=n(au);rJ=s(PFe,"STRONG",{});var vBt=n(rJ);Koo=t(vBt,"roberta"),vBt.forEach(r),Zoo=t(PFe," \u2014 "),Lk=s(PFe,"A",{href:!0});var TBt=n(Lk);eto=t(TBt,"RobertaModel"),TBt.forEach(r),oto=t(PFe," (RoBERTa model)"),PFe.forEach(r),tto=d(C),su=s(C,"LI",{});var $Fe=n(su);aJ=s($Fe,"STRONG",{});var FBt=n(aJ);rto=t(FBt,"roformer"),FBt.forEach(r),ato=t($Fe," \u2014 "),Bk=s($Fe,"A",{href:!0});var CBt=n(Bk);sto=t(CBt,"RoFormerModel"),CBt.forEach(r),nto=t($Fe," (RoFormer model)"),$Fe.forEach(r),lto=d(C),nu=s(C,"LI",{});var IFe=n(nu);sJ=s(IFe,"STRONG",{});var MBt=n(sJ);dto=t(MBt,"segformer"),MBt.forEach(r),ito=t(IFe," \u2014 "),xk=s(IFe,"A",{href:!0});var EBt=n(xk);cto=t(EBt,"SegformerModel"),EBt.forEach(r),fto=t(IFe," (SegFormer model)"),IFe.forEach(r),mto=d(C),lu=s(C,"LI",{});var jFe=n(lu);nJ=s(jFe,"STRONG",{});var yBt=n(nJ);gto=t(yBt,"sew"),yBt.forEach(r),hto=t(jFe," \u2014 "),kk=s(jFe,"A",{href:!0});var wBt=n(kk);uto=t(wBt,"SEWModel"),wBt.forEach(r),pto=t(jFe," (SEW model)"),jFe.forEach(r),_to=d(C),du=s(C,"LI",{});var NFe=n(du);lJ=s(NFe,"STRONG",{});var ABt=n(lJ);bto=t(ABt,"sew-d"),ABt.forEach(r),vto=t(NFe," \u2014 "),Rk=s(NFe,"A",{href:!0});var LBt=n(Rk);Tto=t(LBt,"SEWDModel"),LBt.forEach(r),Fto=t(NFe," (SEW-D model)"),NFe.forEach(r),Cto=d(C),iu=s(C,"LI",{});var DFe=n(iu);dJ=s(DFe,"STRONG",{});var BBt=n(dJ);Mto=t(BBt,"speech_to_text"),BBt.forEach(r),Eto=t(DFe," \u2014 "),Sk=s(DFe,"A",{href:!0});var xBt=n(Sk);yto=t(xBt,"Speech2TextModel"),xBt.forEach(r),wto=t(DFe," (Speech2Text model)"),DFe.forEach(r),Ato=d(C),cu=s(C,"LI",{});var qFe=n(cu);iJ=s(qFe,"STRONG",{});var kBt=n(iJ);Lto=t(kBt,"splinter"),kBt.forEach(r),Bto=t(qFe," \u2014 "),Pk=s(qFe,"A",{href:!0});var RBt=n(Pk);xto=t(RBt,"SplinterModel"),RBt.forEach(r),kto=t(qFe," (Splinter model)"),qFe.forEach(r),Rto=d(C),fu=s(C,"LI",{});var GFe=n(fu);cJ=s(GFe,"STRONG",{});var SBt=n(cJ);Sto=t(SBt,"squeezebert"),SBt.forEach(r),Pto=t(GFe," \u2014 "),$k=s(GFe,"A",{href:!0});var PBt=n($k);$to=t(PBt,"SqueezeBertModel"),PBt.forEach(r),Ito=t(GFe," (SqueezeBERT model)"),GFe.forEach(r),jto=d(C),mu=s(C,"LI",{});var OFe=n(mu);fJ=s(OFe,"STRONG",{});var $Bt=n(fJ);Nto=t($Bt,"swin"),$Bt.forEach(r),Dto=t(OFe," \u2014 "),Ik=s(OFe,"A",{href:!0});var IBt=n(Ik);qto=t(IBt,"SwinModel"),IBt.forEach(r),Gto=t(OFe," (Swin model)"),OFe.forEach(r),Oto=d(C),gu=s(C,"LI",{});var XFe=n(gu);mJ=s(XFe,"STRONG",{});var jBt=n(mJ);Xto=t(jBt,"t5"),jBt.forEach(r),zto=t(XFe," \u2014 "),jk=s(XFe,"A",{href:!0});var NBt=n(jk);Vto=t(NBt,"T5Model"),NBt.forEach(r),Wto=t(XFe," (T5 model)"),XFe.forEach(r),Qto=d(C),hu=s(C,"LI",{});var zFe=n(hu);gJ=s(zFe,"STRONG",{});var DBt=n(gJ);Hto=t(DBt,"tapas"),DBt.forEach(r),Uto=t(zFe," \u2014 "),Nk=s(zFe,"A",{href:!0});var qBt=n(Nk);Jto=t(qBt,"TapasModel"),qBt.forEach(r),Yto=t(zFe," (TAPAS model)"),zFe.forEach(r),Kto=d(C),uu=s(C,"LI",{});var VFe=n(uu);hJ=s(VFe,"STRONG",{});var GBt=n(hJ);Zto=t(GBt,"transfo-xl"),GBt.forEach(r),ero=t(VFe," \u2014 "),Dk=s(VFe,"A",{href:!0});var OBt=n(Dk);oro=t(OBt,"TransfoXLModel"),OBt.forEach(r),tro=t(VFe," (Transformer-XL model)"),VFe.forEach(r),rro=d(C),pu=s(C,"LI",{});var WFe=n(pu);uJ=s(WFe,"STRONG",{});var XBt=n(uJ);aro=t(XBt,"unispeech"),XBt.forEach(r),sro=t(WFe," \u2014 "),qk=s(WFe,"A",{href:!0});var zBt=n(qk);nro=t(zBt,"UniSpeechModel"),zBt.forEach(r),lro=t(WFe," (UniSpeech model)"),WFe.forEach(r),dro=d(C),_u=s(C,"LI",{});var QFe=n(_u);pJ=s(QFe,"STRONG",{});var VBt=n(pJ);iro=t(VBt,"unispeech-sat"),VBt.forEach(r),cro=t(QFe," \u2014 "),Gk=s(QFe,"A",{href:!0});var WBt=n(Gk);fro=t(WBt,"UniSpeechSatModel"),WBt.forEach(r),mro=t(QFe," (UniSpeechSat model)"),QFe.forEach(r),gro=d(C),bu=s(C,"LI",{});var HFe=n(bu);_J=s(HFe,"STRONG",{});var QBt=n(_J);hro=t(QBt,"vilt"),QBt.forEach(r),uro=t(HFe," \u2014 "),Ok=s(HFe,"A",{href:!0});var HBt=n(Ok);pro=t(HBt,"ViltModel"),HBt.forEach(r),_ro=t(HFe," (ViLT model)"),HFe.forEach(r),bro=d(C),vu=s(C,"LI",{});var UFe=n(vu);bJ=s(UFe,"STRONG",{});var UBt=n(bJ);vro=t(UBt,"vision-text-dual-encoder"),UBt.forEach(r),Tro=t(UFe," \u2014 "),Xk=s(UFe,"A",{href:!0});var JBt=n(Xk);Fro=t(JBt,"VisionTextDualEncoderModel"),JBt.forEach(r),Cro=t(UFe," (VisionTextDualEncoder model)"),UFe.forEach(r),Mro=d(C),Tu=s(C,"LI",{});var JFe=n(Tu);vJ=s(JFe,"STRONG",{});var YBt=n(vJ);Ero=t(YBt,"visual_bert"),YBt.forEach(r),yro=t(JFe," \u2014 "),zk=s(JFe,"A",{href:!0});var KBt=n(zk);wro=t(KBt,"VisualBertModel"),KBt.forEach(r),Aro=t(JFe," (VisualBert model)"),JFe.forEach(r),Lro=d(C),Fu=s(C,"LI",{});var YFe=n(Fu);TJ=s(YFe,"STRONG",{});var ZBt=n(TJ);Bro=t(ZBt,"vit"),ZBt.forEach(r),xro=t(YFe," \u2014 "),Vk=s(YFe,"A",{href:!0});var ext=n(Vk);kro=t(ext,"ViTModel"),ext.forEach(r),Rro=t(YFe," (ViT model)"),YFe.forEach(r),Sro=d(C),Cu=s(C,"LI",{});var KFe=n(Cu);FJ=s(KFe,"STRONG",{});var oxt=n(FJ);Pro=t(oxt,"vit_mae"),oxt.forEach(r),$ro=t(KFe," \u2014 "),Wk=s(KFe,"A",{href:!0});var txt=n(Wk);Iro=t(txt,"ViTMAEModel"),txt.forEach(r),jro=t(KFe," (ViTMAE model)"),KFe.forEach(r),Nro=d(C),Mu=s(C,"LI",{});var ZFe=n(Mu);CJ=s(ZFe,"STRONG",{});var rxt=n(CJ);Dro=t(rxt,"wav2vec2"),rxt.forEach(r),qro=t(ZFe," \u2014 "),Qk=s(ZFe,"A",{href:!0});var axt=n(Qk);Gro=t(axt,"Wav2Vec2Model"),axt.forEach(r),Oro=t(ZFe," (Wav2Vec2 model)"),ZFe.forEach(r),Xro=d(C),Eu=s(C,"LI",{});var eCe=n(Eu);MJ=s(eCe,"STRONG",{});var sxt=n(MJ);zro=t(sxt,"wavlm"),sxt.forEach(r),Vro=t(eCe," \u2014 "),Hk=s(eCe,"A",{href:!0});var nxt=n(Hk);Wro=t(nxt,"WavLMModel"),nxt.forEach(r),Qro=t(eCe," (WavLM model)"),eCe.forEach(r),Hro=d(C),yu=s(C,"LI",{});var oCe=n(yu);EJ=s(oCe,"STRONG",{});var lxt=n(EJ);Uro=t(lxt,"xglm"),lxt.forEach(r),Jro=t(oCe," \u2014 "),Uk=s(oCe,"A",{href:!0});var dxt=n(Uk);Yro=t(dxt,"XGLMModel"),dxt.forEach(r),Kro=t(oCe," (XGLM model)"),oCe.forEach(r),Zro=d(C),wu=s(C,"LI",{});var tCe=n(wu);yJ=s(tCe,"STRONG",{});var ixt=n(yJ);eao=t(ixt,"xlm"),ixt.forEach(r),oao=t(tCe," \u2014 "),Jk=s(tCe,"A",{href:!0});var cxt=n(Jk);tao=t(cxt,"XLMModel"),cxt.forEach(r),rao=t(tCe," (XLM model)"),tCe.forEach(r),aao=d(C),Au=s(C,"LI",{});var rCe=n(Au);wJ=s(rCe,"STRONG",{});var fxt=n(wJ);sao=t(fxt,"xlm-prophetnet"),fxt.forEach(r),nao=t(rCe," \u2014 "),Yk=s(rCe,"A",{href:!0});var mxt=n(Yk);lao=t(mxt,"XLMProphetNetModel"),mxt.forEach(r),dao=t(rCe," (XLMProphetNet model)"),rCe.forEach(r),iao=d(C),Lu=s(C,"LI",{});var aCe=n(Lu);AJ=s(aCe,"STRONG",{});var gxt=n(AJ);cao=t(gxt,"xlm-roberta"),gxt.forEach(r),fao=t(aCe," \u2014 "),Kk=s(aCe,"A",{href:!0});var hxt=n(Kk);mao=t(hxt,"XLMRobertaModel"),hxt.forEach(r),gao=t(aCe," (XLM-RoBERTa model)"),aCe.forEach(r),hao=d(C),Bu=s(C,"LI",{});var sCe=n(Bu);LJ=s(sCe,"STRONG",{});var uxt=n(LJ);uao=t(uxt,"xlm-roberta-xl"),uxt.forEach(r),pao=t(sCe," \u2014 "),Zk=s(sCe,"A",{href:!0});var pxt=n(Zk);_ao=t(pxt,"XLMRobertaXLModel"),pxt.forEach(r),bao=t(sCe," (XLM-RoBERTa-XL model)"),sCe.forEach(r),vao=d(C),xu=s(C,"LI",{});var nCe=n(xu);BJ=s(nCe,"STRONG",{});var _xt=n(BJ);Tao=t(_xt,"xlnet"),_xt.forEach(r),Fao=t(nCe," \u2014 "),eR=s(nCe,"A",{href:!0});var bxt=n(eR);Cao=t(bxt,"XLNetModel"),bxt.forEach(r),Mao=t(nCe," (XLNet model)"),nCe.forEach(r),Eao=d(C),ku=s(C,"LI",{});var lCe=n(ku);xJ=s(lCe,"STRONG",{});var vxt=n(xJ);yao=t(vxt,"yoso"),vxt.forEach(r),wao=t(lCe," \u2014 "),oR=s(lCe,"A",{href:!0});var Txt=n(oR);Aao=t(Txt,"YosoModel"),Txt.forEach(r),Lao=t(lCe," (YOSO model)"),lCe.forEach(r),C.forEach(r),Bao=d(Br),Ru=s(Br,"P",{});var dCe=n(Ru);xao=t(dCe,"The model is set in evaluation mode by default using "),kJ=s(dCe,"CODE",{});var Fxt=n(kJ);kao=t(Fxt,"model.eval()"),Fxt.forEach(r),Rao=t(dCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),RJ=s(dCe,"CODE",{});var Cxt=n(RJ);Sao=t(Cxt,"model.train()"),Cxt.forEach(r),dCe.forEach(r),Pao=d(Br),SJ=s(Br,"P",{});var Mxt=n(SJ);$ao=t(Mxt,"Examples:"),Mxt.forEach(r),Iao=d(Br),m(m5.$$.fragment,Br),Br.forEach(r),Rn.forEach(r),xLe=d(i),$d=s(i,"H2",{class:!0});var P8e=n($d);Su=s(P8e,"A",{id:!0,class:!0,href:!0});var Ext=n(Su);PJ=s(Ext,"SPAN",{});var yxt=n(PJ);m(g5.$$.fragment,yxt),yxt.forEach(r),Ext.forEach(r),jao=d(P8e),$J=s(P8e,"SPAN",{});var wxt=n($J);Nao=t(wxt,"AutoModelForPreTraining"),wxt.forEach(r),P8e.forEach(r),kLe=d(i),zo=s(i,"DIV",{class:!0});var Pn=n(zo);m(h5.$$.fragment,Pn),Dao=d(Pn),Id=s(Pn,"P",{});var ZO=n(Id);qao=t(ZO,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),IJ=s(ZO,"CODE",{});var Axt=n(IJ);Gao=t(Axt,"from_pretrained()"),Axt.forEach(r),Oao=t(ZO,"class method or the "),jJ=s(ZO,"CODE",{});var Lxt=n(jJ);Xao=t(Lxt,"from_config()"),Lxt.forEach(r),zao=t(ZO,`class
method.`),ZO.forEach(r),Vao=d(Pn),u5=s(Pn,"P",{});var $8e=n(u5);Wao=t($8e,"This class cannot be instantiated directly using "),NJ=s($8e,"CODE",{});var Bxt=n(NJ);Qao=t(Bxt,"__init__()"),Bxt.forEach(r),Hao=t($8e," (throws an error)."),$8e.forEach(r),Uao=d(Pn),It=s(Pn,"DIV",{class:!0});var $n=n(It);m(p5.$$.fragment,$n),Jao=d($n),DJ=s($n,"P",{});var xxt=n(DJ);Yao=t(xxt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),xxt.forEach(r),Kao=d($n),jd=s($n,"P",{});var eX=n(jd);Zao=t(eX,`Note:
Loading a model from its configuration file does `),qJ=s(eX,"STRONG",{});var kxt=n(qJ);eso=t(kxt,"not"),kxt.forEach(r),oso=t(eX,` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=s(eX,"CODE",{});var Rxt=n(GJ);tso=t(Rxt,"from_pretrained()"),Rxt.forEach(r),rso=t(eX,"to load the model weights."),eX.forEach(r),aso=d($n),OJ=s($n,"P",{});var Sxt=n(OJ);sso=t(Sxt,"Examples:"),Sxt.forEach(r),nso=d($n),m(_5.$$.fragment,$n),$n.forEach(r),lso=d(Pn),ke=s(Pn,"DIV",{class:!0});var xr=n(ke);m(b5.$$.fragment,xr),dso=d(xr),XJ=s(xr,"P",{});var Pxt=n(XJ);iso=t(Pxt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Pxt.forEach(r),cso=d(xr),Ia=s(xr,"P",{});var $E=n(Ia);fso=t($E,"The model class to instantiate is selected based on the "),zJ=s($E,"CODE",{});var $xt=n(zJ);mso=t($xt,"model_type"),$xt.forEach(r),gso=t($E,` property of the config object (either
passed as an argument or loaded from `),VJ=s($E,"CODE",{});var Ixt=n(VJ);hso=t(Ixt,"pretrained_model_name_or_path"),Ixt.forEach(r),uso=t($E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WJ=s($E,"CODE",{});var jxt=n(WJ);pso=t(jxt,"pretrained_model_name_or_path"),jxt.forEach(r),_so=t($E,":"),$E.forEach(r),bso=d(xr),k=s(xr,"UL",{});var S=n(k);Pu=s(S,"LI",{});var iCe=n(Pu);QJ=s(iCe,"STRONG",{});var Nxt=n(QJ);vso=t(Nxt,"albert"),Nxt.forEach(r),Tso=t(iCe," \u2014 "),tR=s(iCe,"A",{href:!0});var Dxt=n(tR);Fso=t(Dxt,"AlbertForPreTraining"),Dxt.forEach(r),Cso=t(iCe," (ALBERT model)"),iCe.forEach(r),Mso=d(S),$u=s(S,"LI",{});var cCe=n($u);HJ=s(cCe,"STRONG",{});var qxt=n(HJ);Eso=t(qxt,"bart"),qxt.forEach(r),yso=t(cCe," \u2014 "),rR=s(cCe,"A",{href:!0});var Gxt=n(rR);wso=t(Gxt,"BartForConditionalGeneration"),Gxt.forEach(r),Aso=t(cCe," (BART model)"),cCe.forEach(r),Lso=d(S),Iu=s(S,"LI",{});var fCe=n(Iu);UJ=s(fCe,"STRONG",{});var Oxt=n(UJ);Bso=t(Oxt,"bert"),Oxt.forEach(r),xso=t(fCe," \u2014 "),aR=s(fCe,"A",{href:!0});var Xxt=n(aR);kso=t(Xxt,"BertForPreTraining"),Xxt.forEach(r),Rso=t(fCe," (BERT model)"),fCe.forEach(r),Sso=d(S),ju=s(S,"LI",{});var mCe=n(ju);JJ=s(mCe,"STRONG",{});var zxt=n(JJ);Pso=t(zxt,"big_bird"),zxt.forEach(r),$so=t(mCe," \u2014 "),sR=s(mCe,"A",{href:!0});var Vxt=n(sR);Iso=t(Vxt,"BigBirdForPreTraining"),Vxt.forEach(r),jso=t(mCe," (BigBird model)"),mCe.forEach(r),Nso=d(S),Nu=s(S,"LI",{});var gCe=n(Nu);YJ=s(gCe,"STRONG",{});var Wxt=n(YJ);Dso=t(Wxt,"camembert"),Wxt.forEach(r),qso=t(gCe," \u2014 "),nR=s(gCe,"A",{href:!0});var Qxt=n(nR);Gso=t(Qxt,"CamembertForMaskedLM"),Qxt.forEach(r),Oso=t(gCe," (CamemBERT model)"),gCe.forEach(r),Xso=d(S),Du=s(S,"LI",{});var hCe=n(Du);KJ=s(hCe,"STRONG",{});var Hxt=n(KJ);zso=t(Hxt,"ctrl"),Hxt.forEach(r),Vso=t(hCe," \u2014 "),lR=s(hCe,"A",{href:!0});var Uxt=n(lR);Wso=t(Uxt,"CTRLLMHeadModel"),Uxt.forEach(r),Qso=t(hCe," (CTRL model)"),hCe.forEach(r),Hso=d(S),qu=s(S,"LI",{});var uCe=n(qu);ZJ=s(uCe,"STRONG",{});var Jxt=n(ZJ);Uso=t(Jxt,"deberta"),Jxt.forEach(r),Jso=t(uCe," \u2014 "),dR=s(uCe,"A",{href:!0});var Yxt=n(dR);Yso=t(Yxt,"DebertaForMaskedLM"),Yxt.forEach(r),Kso=t(uCe," (DeBERTa model)"),uCe.forEach(r),Zso=d(S),Gu=s(S,"LI",{});var pCe=n(Gu);eY=s(pCe,"STRONG",{});var Kxt=n(eY);eno=t(Kxt,"deberta-v2"),Kxt.forEach(r),ono=t(pCe," \u2014 "),iR=s(pCe,"A",{href:!0});var Zxt=n(iR);tno=t(Zxt,"DebertaV2ForMaskedLM"),Zxt.forEach(r),rno=t(pCe," (DeBERTa-v2 model)"),pCe.forEach(r),ano=d(S),Ou=s(S,"LI",{});var _Ce=n(Ou);oY=s(_Ce,"STRONG",{});var ekt=n(oY);sno=t(ekt,"distilbert"),ekt.forEach(r),nno=t(_Ce," \u2014 "),cR=s(_Ce,"A",{href:!0});var okt=n(cR);lno=t(okt,"DistilBertForMaskedLM"),okt.forEach(r),dno=t(_Ce," (DistilBERT model)"),_Ce.forEach(r),ino=d(S),Xu=s(S,"LI",{});var bCe=n(Xu);tY=s(bCe,"STRONG",{});var tkt=n(tY);cno=t(tkt,"electra"),tkt.forEach(r),fno=t(bCe," \u2014 "),fR=s(bCe,"A",{href:!0});var rkt=n(fR);mno=t(rkt,"ElectraForPreTraining"),rkt.forEach(r),gno=t(bCe," (ELECTRA model)"),bCe.forEach(r),hno=d(S),zu=s(S,"LI",{});var vCe=n(zu);rY=s(vCe,"STRONG",{});var akt=n(rY);uno=t(akt,"flaubert"),akt.forEach(r),pno=t(vCe," \u2014 "),mR=s(vCe,"A",{href:!0});var skt=n(mR);_no=t(skt,"FlaubertWithLMHeadModel"),skt.forEach(r),bno=t(vCe," (FlauBERT model)"),vCe.forEach(r),vno=d(S),Vu=s(S,"LI",{});var TCe=n(Vu);aY=s(TCe,"STRONG",{});var nkt=n(aY);Tno=t(nkt,"fnet"),nkt.forEach(r),Fno=t(TCe," \u2014 "),gR=s(TCe,"A",{href:!0});var lkt=n(gR);Cno=t(lkt,"FNetForPreTraining"),lkt.forEach(r),Mno=t(TCe," (FNet model)"),TCe.forEach(r),Eno=d(S),Wu=s(S,"LI",{});var FCe=n(Wu);sY=s(FCe,"STRONG",{});var dkt=n(sY);yno=t(dkt,"fsmt"),dkt.forEach(r),wno=t(FCe," \u2014 "),hR=s(FCe,"A",{href:!0});var ikt=n(hR);Ano=t(ikt,"FSMTForConditionalGeneration"),ikt.forEach(r),Lno=t(FCe," (FairSeq Machine-Translation model)"),FCe.forEach(r),Bno=d(S),Qu=s(S,"LI",{});var CCe=n(Qu);nY=s(CCe,"STRONG",{});var ckt=n(nY);xno=t(ckt,"funnel"),ckt.forEach(r),kno=t(CCe," \u2014 "),uR=s(CCe,"A",{href:!0});var fkt=n(uR);Rno=t(fkt,"FunnelForPreTraining"),fkt.forEach(r),Sno=t(CCe," (Funnel Transformer model)"),CCe.forEach(r),Pno=d(S),Hu=s(S,"LI",{});var MCe=n(Hu);lY=s(MCe,"STRONG",{});var mkt=n(lY);$no=t(mkt,"gpt2"),mkt.forEach(r),Ino=t(MCe," \u2014 "),pR=s(MCe,"A",{href:!0});var gkt=n(pR);jno=t(gkt,"GPT2LMHeadModel"),gkt.forEach(r),Nno=t(MCe," (OpenAI GPT-2 model)"),MCe.forEach(r),Dno=d(S),Uu=s(S,"LI",{});var ECe=n(Uu);dY=s(ECe,"STRONG",{});var hkt=n(dY);qno=t(hkt,"ibert"),hkt.forEach(r),Gno=t(ECe," \u2014 "),_R=s(ECe,"A",{href:!0});var ukt=n(_R);Ono=t(ukt,"IBertForMaskedLM"),ukt.forEach(r),Xno=t(ECe," (I-BERT model)"),ECe.forEach(r),zno=d(S),Ju=s(S,"LI",{});var yCe=n(Ju);iY=s(yCe,"STRONG",{});var pkt=n(iY);Vno=t(pkt,"layoutlm"),pkt.forEach(r),Wno=t(yCe," \u2014 "),bR=s(yCe,"A",{href:!0});var _kt=n(bR);Qno=t(_kt,"LayoutLMForMaskedLM"),_kt.forEach(r),Hno=t(yCe," (LayoutLM model)"),yCe.forEach(r),Uno=d(S),Yu=s(S,"LI",{});var wCe=n(Yu);cY=s(wCe,"STRONG",{});var bkt=n(cY);Jno=t(bkt,"longformer"),bkt.forEach(r),Yno=t(wCe," \u2014 "),vR=s(wCe,"A",{href:!0});var vkt=n(vR);Kno=t(vkt,"LongformerForMaskedLM"),vkt.forEach(r),Zno=t(wCe," (Longformer model)"),wCe.forEach(r),elo=d(S),Ku=s(S,"LI",{});var ACe=n(Ku);fY=s(ACe,"STRONG",{});var Tkt=n(fY);olo=t(Tkt,"lxmert"),Tkt.forEach(r),tlo=t(ACe," \u2014 "),TR=s(ACe,"A",{href:!0});var Fkt=n(TR);rlo=t(Fkt,"LxmertForPreTraining"),Fkt.forEach(r),alo=t(ACe," (LXMERT model)"),ACe.forEach(r),slo=d(S),Zu=s(S,"LI",{});var LCe=n(Zu);mY=s(LCe,"STRONG",{});var Ckt=n(mY);nlo=t(Ckt,"megatron-bert"),Ckt.forEach(r),llo=t(LCe," \u2014 "),FR=s(LCe,"A",{href:!0});var Mkt=n(FR);dlo=t(Mkt,"MegatronBertForPreTraining"),Mkt.forEach(r),ilo=t(LCe," (MegatronBert model)"),LCe.forEach(r),clo=d(S),ep=s(S,"LI",{});var BCe=n(ep);gY=s(BCe,"STRONG",{});var Ekt=n(gY);flo=t(Ekt,"mobilebert"),Ekt.forEach(r),mlo=t(BCe," \u2014 "),CR=s(BCe,"A",{href:!0});var ykt=n(CR);glo=t(ykt,"MobileBertForPreTraining"),ykt.forEach(r),hlo=t(BCe," (MobileBERT model)"),BCe.forEach(r),ulo=d(S),op=s(S,"LI",{});var xCe=n(op);hY=s(xCe,"STRONG",{});var wkt=n(hY);plo=t(wkt,"mpnet"),wkt.forEach(r),_lo=t(xCe," \u2014 "),MR=s(xCe,"A",{href:!0});var Akt=n(MR);blo=t(Akt,"MPNetForMaskedLM"),Akt.forEach(r),vlo=t(xCe," (MPNet model)"),xCe.forEach(r),Tlo=d(S),tp=s(S,"LI",{});var kCe=n(tp);uY=s(kCe,"STRONG",{});var Lkt=n(uY);Flo=t(Lkt,"openai-gpt"),Lkt.forEach(r),Clo=t(kCe," \u2014 "),ER=s(kCe,"A",{href:!0});var Bkt=n(ER);Mlo=t(Bkt,"OpenAIGPTLMHeadModel"),Bkt.forEach(r),Elo=t(kCe," (OpenAI GPT model)"),kCe.forEach(r),ylo=d(S),rp=s(S,"LI",{});var RCe=n(rp);pY=s(RCe,"STRONG",{});var xkt=n(pY);wlo=t(xkt,"retribert"),xkt.forEach(r),Alo=t(RCe," \u2014 "),yR=s(RCe,"A",{href:!0});var kkt=n(yR);Llo=t(kkt,"RetriBertModel"),kkt.forEach(r),Blo=t(RCe," (RetriBERT model)"),RCe.forEach(r),xlo=d(S),ap=s(S,"LI",{});var SCe=n(ap);_Y=s(SCe,"STRONG",{});var Rkt=n(_Y);klo=t(Rkt,"roberta"),Rkt.forEach(r),Rlo=t(SCe," \u2014 "),wR=s(SCe,"A",{href:!0});var Skt=n(wR);Slo=t(Skt,"RobertaForMaskedLM"),Skt.forEach(r),Plo=t(SCe," (RoBERTa model)"),SCe.forEach(r),$lo=d(S),sp=s(S,"LI",{});var PCe=n(sp);bY=s(PCe,"STRONG",{});var Pkt=n(bY);Ilo=t(Pkt,"squeezebert"),Pkt.forEach(r),jlo=t(PCe," \u2014 "),AR=s(PCe,"A",{href:!0});var $kt=n(AR);Nlo=t($kt,"SqueezeBertForMaskedLM"),$kt.forEach(r),Dlo=t(PCe," (SqueezeBERT model)"),PCe.forEach(r),qlo=d(S),np=s(S,"LI",{});var $Ce=n(np);vY=s($Ce,"STRONG",{});var Ikt=n(vY);Glo=t(Ikt,"t5"),Ikt.forEach(r),Olo=t($Ce," \u2014 "),LR=s($Ce,"A",{href:!0});var jkt=n(LR);Xlo=t(jkt,"T5ForConditionalGeneration"),jkt.forEach(r),zlo=t($Ce," (T5 model)"),$Ce.forEach(r),Vlo=d(S),lp=s(S,"LI",{});var ICe=n(lp);TY=s(ICe,"STRONG",{});var Nkt=n(TY);Wlo=t(Nkt,"tapas"),Nkt.forEach(r),Qlo=t(ICe," \u2014 "),BR=s(ICe,"A",{href:!0});var Dkt=n(BR);Hlo=t(Dkt,"TapasForMaskedLM"),Dkt.forEach(r),Ulo=t(ICe," (TAPAS model)"),ICe.forEach(r),Jlo=d(S),dp=s(S,"LI",{});var jCe=n(dp);FY=s(jCe,"STRONG",{});var qkt=n(FY);Ylo=t(qkt,"transfo-xl"),qkt.forEach(r),Klo=t(jCe," \u2014 "),xR=s(jCe,"A",{href:!0});var Gkt=n(xR);Zlo=t(Gkt,"TransfoXLLMHeadModel"),Gkt.forEach(r),edo=t(jCe," (Transformer-XL model)"),jCe.forEach(r),odo=d(S),ip=s(S,"LI",{});var NCe=n(ip);CY=s(NCe,"STRONG",{});var Okt=n(CY);tdo=t(Okt,"unispeech"),Okt.forEach(r),rdo=t(NCe," \u2014 "),kR=s(NCe,"A",{href:!0});var Xkt=n(kR);ado=t(Xkt,"UniSpeechForPreTraining"),Xkt.forEach(r),sdo=t(NCe," (UniSpeech model)"),NCe.forEach(r),ndo=d(S),cp=s(S,"LI",{});var DCe=n(cp);MY=s(DCe,"STRONG",{});var zkt=n(MY);ldo=t(zkt,"unispeech-sat"),zkt.forEach(r),ddo=t(DCe," \u2014 "),RR=s(DCe,"A",{href:!0});var Vkt=n(RR);ido=t(Vkt,"UniSpeechSatForPreTraining"),Vkt.forEach(r),cdo=t(DCe," (UniSpeechSat model)"),DCe.forEach(r),fdo=d(S),fp=s(S,"LI",{});var qCe=n(fp);EY=s(qCe,"STRONG",{});var Wkt=n(EY);mdo=t(Wkt,"visual_bert"),Wkt.forEach(r),gdo=t(qCe," \u2014 "),SR=s(qCe,"A",{href:!0});var Qkt=n(SR);hdo=t(Qkt,"VisualBertForPreTraining"),Qkt.forEach(r),udo=t(qCe," (VisualBert model)"),qCe.forEach(r),pdo=d(S),mp=s(S,"LI",{});var GCe=n(mp);yY=s(GCe,"STRONG",{});var Hkt=n(yY);_do=t(Hkt,"vit_mae"),Hkt.forEach(r),bdo=t(GCe," \u2014 "),PR=s(GCe,"A",{href:!0});var Ukt=n(PR);vdo=t(Ukt,"ViTMAEForPreTraining"),Ukt.forEach(r),Tdo=t(GCe," (ViTMAE model)"),GCe.forEach(r),Fdo=d(S),gp=s(S,"LI",{});var OCe=n(gp);wY=s(OCe,"STRONG",{});var Jkt=n(wY);Cdo=t(Jkt,"wav2vec2"),Jkt.forEach(r),Mdo=t(OCe," \u2014 "),$R=s(OCe,"A",{href:!0});var Ykt=n($R);Edo=t(Ykt,"Wav2Vec2ForPreTraining"),Ykt.forEach(r),ydo=t(OCe," (Wav2Vec2 model)"),OCe.forEach(r),wdo=d(S),hp=s(S,"LI",{});var XCe=n(hp);AY=s(XCe,"STRONG",{});var Kkt=n(AY);Ado=t(Kkt,"xlm"),Kkt.forEach(r),Ldo=t(XCe," \u2014 "),IR=s(XCe,"A",{href:!0});var Zkt=n(IR);Bdo=t(Zkt,"XLMWithLMHeadModel"),Zkt.forEach(r),xdo=t(XCe," (XLM model)"),XCe.forEach(r),kdo=d(S),up=s(S,"LI",{});var zCe=n(up);LY=s(zCe,"STRONG",{});var eRt=n(LY);Rdo=t(eRt,"xlm-roberta"),eRt.forEach(r),Sdo=t(zCe," \u2014 "),jR=s(zCe,"A",{href:!0});var oRt=n(jR);Pdo=t(oRt,"XLMRobertaForMaskedLM"),oRt.forEach(r),$do=t(zCe," (XLM-RoBERTa model)"),zCe.forEach(r),Ido=d(S),pp=s(S,"LI",{});var VCe=n(pp);BY=s(VCe,"STRONG",{});var tRt=n(BY);jdo=t(tRt,"xlm-roberta-xl"),tRt.forEach(r),Ndo=t(VCe," \u2014 "),NR=s(VCe,"A",{href:!0});var rRt=n(NR);Ddo=t(rRt,"XLMRobertaXLForMaskedLM"),rRt.forEach(r),qdo=t(VCe," (XLM-RoBERTa-XL model)"),VCe.forEach(r),Gdo=d(S),_p=s(S,"LI",{});var WCe=n(_p);xY=s(WCe,"STRONG",{});var aRt=n(xY);Odo=t(aRt,"xlnet"),aRt.forEach(r),Xdo=t(WCe," \u2014 "),DR=s(WCe,"A",{href:!0});var sRt=n(DR);zdo=t(sRt,"XLNetLMHeadModel"),sRt.forEach(r),Vdo=t(WCe," (XLNet model)"),WCe.forEach(r),S.forEach(r),Wdo=d(xr),bp=s(xr,"P",{});var QCe=n(bp);Qdo=t(QCe,"The model is set in evaluation mode by default using "),kY=s(QCe,"CODE",{});var nRt=n(kY);Hdo=t(nRt,"model.eval()"),nRt.forEach(r),Udo=t(QCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),RY=s(QCe,"CODE",{});var lRt=n(RY);Jdo=t(lRt,"model.train()"),lRt.forEach(r),QCe.forEach(r),Ydo=d(xr),SY=s(xr,"P",{});var dRt=n(SY);Kdo=t(dRt,"Examples:"),dRt.forEach(r),Zdo=d(xr),m(v5.$$.fragment,xr),xr.forEach(r),Pn.forEach(r),RLe=d(i),Nd=s(i,"H2",{class:!0});var I8e=n(Nd);vp=s(I8e,"A",{id:!0,class:!0,href:!0});var iRt=n(vp);PY=s(iRt,"SPAN",{});var cRt=n(PY);m(T5.$$.fragment,cRt),cRt.forEach(r),iRt.forEach(r),eio=d(I8e),$Y=s(I8e,"SPAN",{});var fRt=n($Y);oio=t(fRt,"AutoModelForCausalLM"),fRt.forEach(r),I8e.forEach(r),SLe=d(i),Vo=s(i,"DIV",{class:!0});var In=n(Vo);m(F5.$$.fragment,In),tio=d(In),Dd=s(In,"P",{});var oX=n(Dd);rio=t(oX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),IY=s(oX,"CODE",{});var mRt=n(IY);aio=t(mRt,"from_pretrained()"),mRt.forEach(r),sio=t(oX,"class method or the "),jY=s(oX,"CODE",{});var gRt=n(jY);nio=t(gRt,"from_config()"),gRt.forEach(r),lio=t(oX,`class
method.`),oX.forEach(r),dio=d(In),C5=s(In,"P",{});var j8e=n(C5);iio=t(j8e,"This class cannot be instantiated directly using "),NY=s(j8e,"CODE",{});var hRt=n(NY);cio=t(hRt,"__init__()"),hRt.forEach(r),fio=t(j8e," (throws an error)."),j8e.forEach(r),mio=d(In),jt=s(In,"DIV",{class:!0});var jn=n(jt);m(M5.$$.fragment,jn),gio=d(jn),DY=s(jn,"P",{});var uRt=n(DY);hio=t(uRt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),uRt.forEach(r),uio=d(jn),qd=s(jn,"P",{});var tX=n(qd);pio=t(tX,`Note:
Loading a model from its configuration file does `),qY=s(tX,"STRONG",{});var pRt=n(qY);_io=t(pRt,"not"),pRt.forEach(r),bio=t(tX,` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=s(tX,"CODE",{});var _Rt=n(GY);vio=t(_Rt,"from_pretrained()"),_Rt.forEach(r),Tio=t(tX,"to load the model weights."),tX.forEach(r),Fio=d(jn),OY=s(jn,"P",{});var bRt=n(OY);Cio=t(bRt,"Examples:"),bRt.forEach(r),Mio=d(jn),m(E5.$$.fragment,jn),jn.forEach(r),Eio=d(In),Re=s(In,"DIV",{class:!0});var kr=n(Re);m(y5.$$.fragment,kr),yio=d(kr),XY=s(kr,"P",{});var vRt=n(XY);wio=t(vRt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),vRt.forEach(r),Aio=d(kr),ja=s(kr,"P",{});var IE=n(ja);Lio=t(IE,"The model class to instantiate is selected based on the "),zY=s(IE,"CODE",{});var TRt=n(zY);Bio=t(TRt,"model_type"),TRt.forEach(r),xio=t(IE,` property of the config object (either
passed as an argument or loaded from `),VY=s(IE,"CODE",{});var FRt=n(VY);kio=t(FRt,"pretrained_model_name_or_path"),FRt.forEach(r),Rio=t(IE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WY=s(IE,"CODE",{});var CRt=n(WY);Sio=t(CRt,"pretrained_model_name_or_path"),CRt.forEach(r),Pio=t(IE,":"),IE.forEach(r),$io=d(kr),I=s(kr,"UL",{});var D=n(I);Tp=s(D,"LI",{});var HCe=n(Tp);QY=s(HCe,"STRONG",{});var MRt=n(QY);Iio=t(MRt,"bart"),MRt.forEach(r),jio=t(HCe," \u2014 "),qR=s(HCe,"A",{href:!0});var ERt=n(qR);Nio=t(ERt,"BartForCausalLM"),ERt.forEach(r),Dio=t(HCe," (BART model)"),HCe.forEach(r),qio=d(D),Fp=s(D,"LI",{});var UCe=n(Fp);HY=s(UCe,"STRONG",{});var yRt=n(HY);Gio=t(yRt,"bert"),yRt.forEach(r),Oio=t(UCe," \u2014 "),GR=s(UCe,"A",{href:!0});var wRt=n(GR);Xio=t(wRt,"BertLMHeadModel"),wRt.forEach(r),zio=t(UCe," (BERT model)"),UCe.forEach(r),Vio=d(D),Cp=s(D,"LI",{});var JCe=n(Cp);UY=s(JCe,"STRONG",{});var ARt=n(UY);Wio=t(ARt,"bert-generation"),ARt.forEach(r),Qio=t(JCe," \u2014 "),OR=s(JCe,"A",{href:!0});var LRt=n(OR);Hio=t(LRt,"BertGenerationDecoder"),LRt.forEach(r),Uio=t(JCe," (Bert Generation model)"),JCe.forEach(r),Jio=d(D),Mp=s(D,"LI",{});var YCe=n(Mp);JY=s(YCe,"STRONG",{});var BRt=n(JY);Yio=t(BRt,"big_bird"),BRt.forEach(r),Kio=t(YCe," \u2014 "),XR=s(YCe,"A",{href:!0});var xRt=n(XR);Zio=t(xRt,"BigBirdForCausalLM"),xRt.forEach(r),eco=t(YCe," (BigBird model)"),YCe.forEach(r),oco=d(D),Ep=s(D,"LI",{});var KCe=n(Ep);YY=s(KCe,"STRONG",{});var kRt=n(YY);tco=t(kRt,"bigbird_pegasus"),kRt.forEach(r),rco=t(KCe," \u2014 "),zR=s(KCe,"A",{href:!0});var RRt=n(zR);aco=t(RRt,"BigBirdPegasusForCausalLM"),RRt.forEach(r),sco=t(KCe," (BigBirdPegasus model)"),KCe.forEach(r),nco=d(D),yp=s(D,"LI",{});var ZCe=n(yp);KY=s(ZCe,"STRONG",{});var SRt=n(KY);lco=t(SRt,"blenderbot"),SRt.forEach(r),dco=t(ZCe," \u2014 "),VR=s(ZCe,"A",{href:!0});var PRt=n(VR);ico=t(PRt,"BlenderbotForCausalLM"),PRt.forEach(r),cco=t(ZCe," (Blenderbot model)"),ZCe.forEach(r),fco=d(D),wp=s(D,"LI",{});var e4e=n(wp);ZY=s(e4e,"STRONG",{});var $Rt=n(ZY);mco=t($Rt,"blenderbot-small"),$Rt.forEach(r),gco=t(e4e," \u2014 "),WR=s(e4e,"A",{href:!0});var IRt=n(WR);hco=t(IRt,"BlenderbotSmallForCausalLM"),IRt.forEach(r),uco=t(e4e," (BlenderbotSmall model)"),e4e.forEach(r),pco=d(D),Ap=s(D,"LI",{});var o4e=n(Ap);eK=s(o4e,"STRONG",{});var jRt=n(eK);_co=t(jRt,"camembert"),jRt.forEach(r),bco=t(o4e," \u2014 "),QR=s(o4e,"A",{href:!0});var NRt=n(QR);vco=t(NRt,"CamembertForCausalLM"),NRt.forEach(r),Tco=t(o4e," (CamemBERT model)"),o4e.forEach(r),Fco=d(D),Lp=s(D,"LI",{});var t4e=n(Lp);oK=s(t4e,"STRONG",{});var DRt=n(oK);Cco=t(DRt,"ctrl"),DRt.forEach(r),Mco=t(t4e," \u2014 "),HR=s(t4e,"A",{href:!0});var qRt=n(HR);Eco=t(qRt,"CTRLLMHeadModel"),qRt.forEach(r),yco=t(t4e," (CTRL model)"),t4e.forEach(r),wco=d(D),Bp=s(D,"LI",{});var r4e=n(Bp);tK=s(r4e,"STRONG",{});var GRt=n(tK);Aco=t(GRt,"electra"),GRt.forEach(r),Lco=t(r4e," \u2014 "),UR=s(r4e,"A",{href:!0});var ORt=n(UR);Bco=t(ORt,"ElectraForCausalLM"),ORt.forEach(r),xco=t(r4e," (ELECTRA model)"),r4e.forEach(r),kco=d(D),xp=s(D,"LI",{});var a4e=n(xp);rK=s(a4e,"STRONG",{});var XRt=n(rK);Rco=t(XRt,"gpt2"),XRt.forEach(r),Sco=t(a4e," \u2014 "),JR=s(a4e,"A",{href:!0});var zRt=n(JR);Pco=t(zRt,"GPT2LMHeadModel"),zRt.forEach(r),$co=t(a4e," (OpenAI GPT-2 model)"),a4e.forEach(r),Ico=d(D),kp=s(D,"LI",{});var s4e=n(kp);aK=s(s4e,"STRONG",{});var VRt=n(aK);jco=t(VRt,"gpt_neo"),VRt.forEach(r),Nco=t(s4e," \u2014 "),YR=s(s4e,"A",{href:!0});var WRt=n(YR);Dco=t(WRt,"GPTNeoForCausalLM"),WRt.forEach(r),qco=t(s4e," (GPT Neo model)"),s4e.forEach(r),Gco=d(D),Rp=s(D,"LI",{});var n4e=n(Rp);sK=s(n4e,"STRONG",{});var QRt=n(sK);Oco=t(QRt,"gptj"),QRt.forEach(r),Xco=t(n4e," \u2014 "),KR=s(n4e,"A",{href:!0});var HRt=n(KR);zco=t(HRt,"GPTJForCausalLM"),HRt.forEach(r),Vco=t(n4e," (GPT-J model)"),n4e.forEach(r),Wco=d(D),Sp=s(D,"LI",{});var l4e=n(Sp);nK=s(l4e,"STRONG",{});var URt=n(nK);Qco=t(URt,"marian"),URt.forEach(r),Hco=t(l4e," \u2014 "),ZR=s(l4e,"A",{href:!0});var JRt=n(ZR);Uco=t(JRt,"MarianForCausalLM"),JRt.forEach(r),Jco=t(l4e," (Marian model)"),l4e.forEach(r),Yco=d(D),Pp=s(D,"LI",{});var d4e=n(Pp);lK=s(d4e,"STRONG",{});var YRt=n(lK);Kco=t(YRt,"mbart"),YRt.forEach(r),Zco=t(d4e," \u2014 "),eS=s(d4e,"A",{href:!0});var KRt=n(eS);efo=t(KRt,"MBartForCausalLM"),KRt.forEach(r),ofo=t(d4e," (mBART model)"),d4e.forEach(r),tfo=d(D),$p=s(D,"LI",{});var i4e=n($p);dK=s(i4e,"STRONG",{});var ZRt=n(dK);rfo=t(ZRt,"megatron-bert"),ZRt.forEach(r),afo=t(i4e," \u2014 "),oS=s(i4e,"A",{href:!0});var eSt=n(oS);sfo=t(eSt,"MegatronBertForCausalLM"),eSt.forEach(r),nfo=t(i4e," (MegatronBert model)"),i4e.forEach(r),lfo=d(D),Ip=s(D,"LI",{});var c4e=n(Ip);iK=s(c4e,"STRONG",{});var oSt=n(iK);dfo=t(oSt,"openai-gpt"),oSt.forEach(r),ifo=t(c4e," \u2014 "),tS=s(c4e,"A",{href:!0});var tSt=n(tS);cfo=t(tSt,"OpenAIGPTLMHeadModel"),tSt.forEach(r),ffo=t(c4e," (OpenAI GPT model)"),c4e.forEach(r),mfo=d(D),jp=s(D,"LI",{});var f4e=n(jp);cK=s(f4e,"STRONG",{});var rSt=n(cK);gfo=t(rSt,"pegasus"),rSt.forEach(r),hfo=t(f4e," \u2014 "),rS=s(f4e,"A",{href:!0});var aSt=n(rS);ufo=t(aSt,"PegasusForCausalLM"),aSt.forEach(r),pfo=t(f4e," (Pegasus model)"),f4e.forEach(r),_fo=d(D),Np=s(D,"LI",{});var m4e=n(Np);fK=s(m4e,"STRONG",{});var sSt=n(fK);bfo=t(sSt,"prophetnet"),sSt.forEach(r),vfo=t(m4e," \u2014 "),aS=s(m4e,"A",{href:!0});var nSt=n(aS);Tfo=t(nSt,"ProphetNetForCausalLM"),nSt.forEach(r),Ffo=t(m4e," (ProphetNet model)"),m4e.forEach(r),Cfo=d(D),Dp=s(D,"LI",{});var g4e=n(Dp);mK=s(g4e,"STRONG",{});var lSt=n(mK);Mfo=t(lSt,"qdqbert"),lSt.forEach(r),Efo=t(g4e," \u2014 "),sS=s(g4e,"A",{href:!0});var dSt=n(sS);yfo=t(dSt,"QDQBertLMHeadModel"),dSt.forEach(r),wfo=t(g4e," (QDQBert model)"),g4e.forEach(r),Afo=d(D),qp=s(D,"LI",{});var h4e=n(qp);gK=s(h4e,"STRONG",{});var iSt=n(gK);Lfo=t(iSt,"reformer"),iSt.forEach(r),Bfo=t(h4e," \u2014 "),nS=s(h4e,"A",{href:!0});var cSt=n(nS);xfo=t(cSt,"ReformerModelWithLMHead"),cSt.forEach(r),kfo=t(h4e," (Reformer model)"),h4e.forEach(r),Rfo=d(D),Gp=s(D,"LI",{});var u4e=n(Gp);hK=s(u4e,"STRONG",{});var fSt=n(hK);Sfo=t(fSt,"rembert"),fSt.forEach(r),Pfo=t(u4e," \u2014 "),lS=s(u4e,"A",{href:!0});var mSt=n(lS);$fo=t(mSt,"RemBertForCausalLM"),mSt.forEach(r),Ifo=t(u4e," (RemBERT model)"),u4e.forEach(r),jfo=d(D),Op=s(D,"LI",{});var p4e=n(Op);uK=s(p4e,"STRONG",{});var gSt=n(uK);Nfo=t(gSt,"roberta"),gSt.forEach(r),Dfo=t(p4e," \u2014 "),dS=s(p4e,"A",{href:!0});var hSt=n(dS);qfo=t(hSt,"RobertaForCausalLM"),hSt.forEach(r),Gfo=t(p4e," (RoBERTa model)"),p4e.forEach(r),Ofo=d(D),Xp=s(D,"LI",{});var _4e=n(Xp);pK=s(_4e,"STRONG",{});var uSt=n(pK);Xfo=t(uSt,"roformer"),uSt.forEach(r),zfo=t(_4e," \u2014 "),iS=s(_4e,"A",{href:!0});var pSt=n(iS);Vfo=t(pSt,"RoFormerForCausalLM"),pSt.forEach(r),Wfo=t(_4e," (RoFormer model)"),_4e.forEach(r),Qfo=d(D),zp=s(D,"LI",{});var b4e=n(zp);_K=s(b4e,"STRONG",{});var _St=n(_K);Hfo=t(_St,"speech_to_text_2"),_St.forEach(r),Ufo=t(b4e," \u2014 "),cS=s(b4e,"A",{href:!0});var bSt=n(cS);Jfo=t(bSt,"Speech2Text2ForCausalLM"),bSt.forEach(r),Yfo=t(b4e," (Speech2Text2 model)"),b4e.forEach(r),Kfo=d(D),Vp=s(D,"LI",{});var v4e=n(Vp);bK=s(v4e,"STRONG",{});var vSt=n(bK);Zfo=t(vSt,"transfo-xl"),vSt.forEach(r),emo=t(v4e," \u2014 "),fS=s(v4e,"A",{href:!0});var TSt=n(fS);omo=t(TSt,"TransfoXLLMHeadModel"),TSt.forEach(r),tmo=t(v4e," (Transformer-XL model)"),v4e.forEach(r),rmo=d(D),Wp=s(D,"LI",{});var T4e=n(Wp);vK=s(T4e,"STRONG",{});var FSt=n(vK);amo=t(FSt,"trocr"),FSt.forEach(r),smo=t(T4e," \u2014 "),mS=s(T4e,"A",{href:!0});var CSt=n(mS);nmo=t(CSt,"TrOCRForCausalLM"),CSt.forEach(r),lmo=t(T4e," (TrOCR model)"),T4e.forEach(r),dmo=d(D),Qp=s(D,"LI",{});var F4e=n(Qp);TK=s(F4e,"STRONG",{});var MSt=n(TK);imo=t(MSt,"xglm"),MSt.forEach(r),cmo=t(F4e," \u2014 "),gS=s(F4e,"A",{href:!0});var ESt=n(gS);fmo=t(ESt,"XGLMForCausalLM"),ESt.forEach(r),mmo=t(F4e," (XGLM model)"),F4e.forEach(r),gmo=d(D),Hp=s(D,"LI",{});var C4e=n(Hp);FK=s(C4e,"STRONG",{});var ySt=n(FK);hmo=t(ySt,"xlm"),ySt.forEach(r),umo=t(C4e," \u2014 "),hS=s(C4e,"A",{href:!0});var wSt=n(hS);pmo=t(wSt,"XLMWithLMHeadModel"),wSt.forEach(r),_mo=t(C4e," (XLM model)"),C4e.forEach(r),bmo=d(D),Up=s(D,"LI",{});var M4e=n(Up);CK=s(M4e,"STRONG",{});var ASt=n(CK);vmo=t(ASt,"xlm-prophetnet"),ASt.forEach(r),Tmo=t(M4e," \u2014 "),uS=s(M4e,"A",{href:!0});var LSt=n(uS);Fmo=t(LSt,"XLMProphetNetForCausalLM"),LSt.forEach(r),Cmo=t(M4e," (XLMProphetNet model)"),M4e.forEach(r),Mmo=d(D),Jp=s(D,"LI",{});var E4e=n(Jp);MK=s(E4e,"STRONG",{});var BSt=n(MK);Emo=t(BSt,"xlm-roberta"),BSt.forEach(r),ymo=t(E4e," \u2014 "),pS=s(E4e,"A",{href:!0});var xSt=n(pS);wmo=t(xSt,"XLMRobertaForCausalLM"),xSt.forEach(r),Amo=t(E4e," (XLM-RoBERTa model)"),E4e.forEach(r),Lmo=d(D),Yp=s(D,"LI",{});var y4e=n(Yp);EK=s(y4e,"STRONG",{});var kSt=n(EK);Bmo=t(kSt,"xlm-roberta-xl"),kSt.forEach(r),xmo=t(y4e," \u2014 "),_S=s(y4e,"A",{href:!0});var RSt=n(_S);kmo=t(RSt,"XLMRobertaXLForCausalLM"),RSt.forEach(r),Rmo=t(y4e," (XLM-RoBERTa-XL model)"),y4e.forEach(r),Smo=d(D),Kp=s(D,"LI",{});var w4e=n(Kp);yK=s(w4e,"STRONG",{});var SSt=n(yK);Pmo=t(SSt,"xlnet"),SSt.forEach(r),$mo=t(w4e," \u2014 "),bS=s(w4e,"A",{href:!0});var PSt=n(bS);Imo=t(PSt,"XLNetLMHeadModel"),PSt.forEach(r),jmo=t(w4e," (XLNet model)"),w4e.forEach(r),D.forEach(r),Nmo=d(kr),Zp=s(kr,"P",{});var A4e=n(Zp);Dmo=t(A4e,"The model is set in evaluation mode by default using "),wK=s(A4e,"CODE",{});var $St=n(wK);qmo=t($St,"model.eval()"),$St.forEach(r),Gmo=t(A4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),AK=s(A4e,"CODE",{});var ISt=n(AK);Omo=t(ISt,"model.train()"),ISt.forEach(r),A4e.forEach(r),Xmo=d(kr),LK=s(kr,"P",{});var jSt=n(LK);zmo=t(jSt,"Examples:"),jSt.forEach(r),Vmo=d(kr),m(w5.$$.fragment,kr),kr.forEach(r),In.forEach(r),PLe=d(i),Gd=s(i,"H2",{class:!0});var N8e=n(Gd);e_=s(N8e,"A",{id:!0,class:!0,href:!0});var NSt=n(e_);BK=s(NSt,"SPAN",{});var DSt=n(BK);m(A5.$$.fragment,DSt),DSt.forEach(r),NSt.forEach(r),Wmo=d(N8e),xK=s(N8e,"SPAN",{});var qSt=n(xK);Qmo=t(qSt,"AutoModelForMaskedLM"),qSt.forEach(r),N8e.forEach(r),$Le=d(i),Wo=s(i,"DIV",{class:!0});var Nn=n(Wo);m(L5.$$.fragment,Nn),Hmo=d(Nn),Od=s(Nn,"P",{});var rX=n(Od);Umo=t(rX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kK=s(rX,"CODE",{});var GSt=n(kK);Jmo=t(GSt,"from_pretrained()"),GSt.forEach(r),Ymo=t(rX,"class method or the "),RK=s(rX,"CODE",{});var OSt=n(RK);Kmo=t(OSt,"from_config()"),OSt.forEach(r),Zmo=t(rX,`class
method.`),rX.forEach(r),ego=d(Nn),B5=s(Nn,"P",{});var D8e=n(B5);ogo=t(D8e,"This class cannot be instantiated directly using "),SK=s(D8e,"CODE",{});var XSt=n(SK);tgo=t(XSt,"__init__()"),XSt.forEach(r),rgo=t(D8e," (throws an error)."),D8e.forEach(r),ago=d(Nn),Nt=s(Nn,"DIV",{class:!0});var Dn=n(Nt);m(x5.$$.fragment,Dn),sgo=d(Dn),PK=s(Dn,"P",{});var zSt=n(PK);ngo=t(zSt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),zSt.forEach(r),lgo=d(Dn),Xd=s(Dn,"P",{});var aX=n(Xd);dgo=t(aX,`Note:
Loading a model from its configuration file does `),$K=s(aX,"STRONG",{});var VSt=n($K);igo=t(VSt,"not"),VSt.forEach(r),cgo=t(aX,` load the model weights. It only affects the
model\u2019s configuration. Use `),IK=s(aX,"CODE",{});var WSt=n(IK);fgo=t(WSt,"from_pretrained()"),WSt.forEach(r),mgo=t(aX,"to load the model weights."),aX.forEach(r),ggo=d(Dn),jK=s(Dn,"P",{});var QSt=n(jK);hgo=t(QSt,"Examples:"),QSt.forEach(r),ugo=d(Dn),m(k5.$$.fragment,Dn),Dn.forEach(r),pgo=d(Nn),Se=s(Nn,"DIV",{class:!0});var Rr=n(Se);m(R5.$$.fragment,Rr),_go=d(Rr),NK=s(Rr,"P",{});var HSt=n(NK);bgo=t(HSt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),HSt.forEach(r),vgo=d(Rr),Na=s(Rr,"P",{});var jE=n(Na);Tgo=t(jE,"The model class to instantiate is selected based on the "),DK=s(jE,"CODE",{});var USt=n(DK);Fgo=t(USt,"model_type"),USt.forEach(r),Cgo=t(jE,` property of the config object (either
passed as an argument or loaded from `),qK=s(jE,"CODE",{});var JSt=n(qK);Mgo=t(JSt,"pretrained_model_name_or_path"),JSt.forEach(r),Ego=t(jE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GK=s(jE,"CODE",{});var YSt=n(GK);ygo=t(YSt,"pretrained_model_name_or_path"),YSt.forEach(r),wgo=t(jE,":"),jE.forEach(r),Ago=d(Rr),$=s(Rr,"UL",{});var j=n($);o_=s(j,"LI",{});var L4e=n(o_);OK=s(L4e,"STRONG",{});var KSt=n(OK);Lgo=t(KSt,"albert"),KSt.forEach(r),Bgo=t(L4e," \u2014 "),vS=s(L4e,"A",{href:!0});var ZSt=n(vS);xgo=t(ZSt,"AlbertForMaskedLM"),ZSt.forEach(r),kgo=t(L4e," (ALBERT model)"),L4e.forEach(r),Rgo=d(j),t_=s(j,"LI",{});var B4e=n(t_);XK=s(B4e,"STRONG",{});var ePt=n(XK);Sgo=t(ePt,"bart"),ePt.forEach(r),Pgo=t(B4e," \u2014 "),TS=s(B4e,"A",{href:!0});var oPt=n(TS);$go=t(oPt,"BartForConditionalGeneration"),oPt.forEach(r),Igo=t(B4e," (BART model)"),B4e.forEach(r),jgo=d(j),r_=s(j,"LI",{});var x4e=n(r_);zK=s(x4e,"STRONG",{});var tPt=n(zK);Ngo=t(tPt,"bert"),tPt.forEach(r),Dgo=t(x4e," \u2014 "),FS=s(x4e,"A",{href:!0});var rPt=n(FS);qgo=t(rPt,"BertForMaskedLM"),rPt.forEach(r),Ggo=t(x4e," (BERT model)"),x4e.forEach(r),Ogo=d(j),a_=s(j,"LI",{});var k4e=n(a_);VK=s(k4e,"STRONG",{});var aPt=n(VK);Xgo=t(aPt,"big_bird"),aPt.forEach(r),zgo=t(k4e," \u2014 "),CS=s(k4e,"A",{href:!0});var sPt=n(CS);Vgo=t(sPt,"BigBirdForMaskedLM"),sPt.forEach(r),Wgo=t(k4e," (BigBird model)"),k4e.forEach(r),Qgo=d(j),s_=s(j,"LI",{});var R4e=n(s_);WK=s(R4e,"STRONG",{});var nPt=n(WK);Hgo=t(nPt,"camembert"),nPt.forEach(r),Ugo=t(R4e," \u2014 "),MS=s(R4e,"A",{href:!0});var lPt=n(MS);Jgo=t(lPt,"CamembertForMaskedLM"),lPt.forEach(r),Ygo=t(R4e," (CamemBERT model)"),R4e.forEach(r),Kgo=d(j),n_=s(j,"LI",{});var S4e=n(n_);QK=s(S4e,"STRONG",{});var dPt=n(QK);Zgo=t(dPt,"convbert"),dPt.forEach(r),eho=t(S4e," \u2014 "),ES=s(S4e,"A",{href:!0});var iPt=n(ES);oho=t(iPt,"ConvBertForMaskedLM"),iPt.forEach(r),tho=t(S4e," (ConvBERT model)"),S4e.forEach(r),rho=d(j),l_=s(j,"LI",{});var P4e=n(l_);HK=s(P4e,"STRONG",{});var cPt=n(HK);aho=t(cPt,"deberta"),cPt.forEach(r),sho=t(P4e," \u2014 "),yS=s(P4e,"A",{href:!0});var fPt=n(yS);nho=t(fPt,"DebertaForMaskedLM"),fPt.forEach(r),lho=t(P4e," (DeBERTa model)"),P4e.forEach(r),dho=d(j),d_=s(j,"LI",{});var $4e=n(d_);UK=s($4e,"STRONG",{});var mPt=n(UK);iho=t(mPt,"deberta-v2"),mPt.forEach(r),cho=t($4e," \u2014 "),wS=s($4e,"A",{href:!0});var gPt=n(wS);fho=t(gPt,"DebertaV2ForMaskedLM"),gPt.forEach(r),mho=t($4e," (DeBERTa-v2 model)"),$4e.forEach(r),gho=d(j),i_=s(j,"LI",{});var I4e=n(i_);JK=s(I4e,"STRONG",{});var hPt=n(JK);hho=t(hPt,"distilbert"),hPt.forEach(r),uho=t(I4e," \u2014 "),AS=s(I4e,"A",{href:!0});var uPt=n(AS);pho=t(uPt,"DistilBertForMaskedLM"),uPt.forEach(r),_ho=t(I4e," (DistilBERT model)"),I4e.forEach(r),bho=d(j),c_=s(j,"LI",{});var j4e=n(c_);YK=s(j4e,"STRONG",{});var pPt=n(YK);vho=t(pPt,"electra"),pPt.forEach(r),Tho=t(j4e," \u2014 "),LS=s(j4e,"A",{href:!0});var _Pt=n(LS);Fho=t(_Pt,"ElectraForMaskedLM"),_Pt.forEach(r),Cho=t(j4e," (ELECTRA model)"),j4e.forEach(r),Mho=d(j),f_=s(j,"LI",{});var N4e=n(f_);KK=s(N4e,"STRONG",{});var bPt=n(KK);Eho=t(bPt,"flaubert"),bPt.forEach(r),yho=t(N4e," \u2014 "),BS=s(N4e,"A",{href:!0});var vPt=n(BS);who=t(vPt,"FlaubertWithLMHeadModel"),vPt.forEach(r),Aho=t(N4e," (FlauBERT model)"),N4e.forEach(r),Lho=d(j),m_=s(j,"LI",{});var D4e=n(m_);ZK=s(D4e,"STRONG",{});var TPt=n(ZK);Bho=t(TPt,"fnet"),TPt.forEach(r),xho=t(D4e," \u2014 "),xS=s(D4e,"A",{href:!0});var FPt=n(xS);kho=t(FPt,"FNetForMaskedLM"),FPt.forEach(r),Rho=t(D4e," (FNet model)"),D4e.forEach(r),Sho=d(j),g_=s(j,"LI",{});var q4e=n(g_);eZ=s(q4e,"STRONG",{});var CPt=n(eZ);Pho=t(CPt,"funnel"),CPt.forEach(r),$ho=t(q4e," \u2014 "),kS=s(q4e,"A",{href:!0});var MPt=n(kS);Iho=t(MPt,"FunnelForMaskedLM"),MPt.forEach(r),jho=t(q4e," (Funnel Transformer model)"),q4e.forEach(r),Nho=d(j),h_=s(j,"LI",{});var G4e=n(h_);oZ=s(G4e,"STRONG",{});var EPt=n(oZ);Dho=t(EPt,"ibert"),EPt.forEach(r),qho=t(G4e," \u2014 "),RS=s(G4e,"A",{href:!0});var yPt=n(RS);Gho=t(yPt,"IBertForMaskedLM"),yPt.forEach(r),Oho=t(G4e," (I-BERT model)"),G4e.forEach(r),Xho=d(j),u_=s(j,"LI",{});var O4e=n(u_);tZ=s(O4e,"STRONG",{});var wPt=n(tZ);zho=t(wPt,"layoutlm"),wPt.forEach(r),Vho=t(O4e," \u2014 "),SS=s(O4e,"A",{href:!0});var APt=n(SS);Who=t(APt,"LayoutLMForMaskedLM"),APt.forEach(r),Qho=t(O4e," (LayoutLM model)"),O4e.forEach(r),Hho=d(j),p_=s(j,"LI",{});var X4e=n(p_);rZ=s(X4e,"STRONG",{});var LPt=n(rZ);Uho=t(LPt,"longformer"),LPt.forEach(r),Jho=t(X4e," \u2014 "),PS=s(X4e,"A",{href:!0});var BPt=n(PS);Yho=t(BPt,"LongformerForMaskedLM"),BPt.forEach(r),Kho=t(X4e," (Longformer model)"),X4e.forEach(r),Zho=d(j),__=s(j,"LI",{});var z4e=n(__);aZ=s(z4e,"STRONG",{});var xPt=n(aZ);euo=t(xPt,"mbart"),xPt.forEach(r),ouo=t(z4e," \u2014 "),$S=s(z4e,"A",{href:!0});var kPt=n($S);tuo=t(kPt,"MBartForConditionalGeneration"),kPt.forEach(r),ruo=t(z4e," (mBART model)"),z4e.forEach(r),auo=d(j),b_=s(j,"LI",{});var V4e=n(b_);sZ=s(V4e,"STRONG",{});var RPt=n(sZ);suo=t(RPt,"megatron-bert"),RPt.forEach(r),nuo=t(V4e," \u2014 "),IS=s(V4e,"A",{href:!0});var SPt=n(IS);luo=t(SPt,"MegatronBertForMaskedLM"),SPt.forEach(r),duo=t(V4e," (MegatronBert model)"),V4e.forEach(r),iuo=d(j),v_=s(j,"LI",{});var W4e=n(v_);nZ=s(W4e,"STRONG",{});var PPt=n(nZ);cuo=t(PPt,"mobilebert"),PPt.forEach(r),fuo=t(W4e," \u2014 "),jS=s(W4e,"A",{href:!0});var $Pt=n(jS);muo=t($Pt,"MobileBertForMaskedLM"),$Pt.forEach(r),guo=t(W4e," (MobileBERT model)"),W4e.forEach(r),huo=d(j),T_=s(j,"LI",{});var Q4e=n(T_);lZ=s(Q4e,"STRONG",{});var IPt=n(lZ);uuo=t(IPt,"mpnet"),IPt.forEach(r),puo=t(Q4e," \u2014 "),NS=s(Q4e,"A",{href:!0});var jPt=n(NS);_uo=t(jPt,"MPNetForMaskedLM"),jPt.forEach(r),buo=t(Q4e," (MPNet model)"),Q4e.forEach(r),vuo=d(j),F_=s(j,"LI",{});var H4e=n(F_);dZ=s(H4e,"STRONG",{});var NPt=n(dZ);Tuo=t(NPt,"nystromformer"),NPt.forEach(r),Fuo=t(H4e," \u2014 "),DS=s(H4e,"A",{href:!0});var DPt=n(DS);Cuo=t(DPt,"NystromformerForMaskedLM"),DPt.forEach(r),Muo=t(H4e," (Nystromformer model)"),H4e.forEach(r),Euo=d(j),C_=s(j,"LI",{});var U4e=n(C_);iZ=s(U4e,"STRONG",{});var qPt=n(iZ);yuo=t(qPt,"perceiver"),qPt.forEach(r),wuo=t(U4e," \u2014 "),qS=s(U4e,"A",{href:!0});var GPt=n(qS);Auo=t(GPt,"PerceiverForMaskedLM"),GPt.forEach(r),Luo=t(U4e," (Perceiver model)"),U4e.forEach(r),Buo=d(j),M_=s(j,"LI",{});var J4e=n(M_);cZ=s(J4e,"STRONG",{});var OPt=n(cZ);xuo=t(OPt,"qdqbert"),OPt.forEach(r),kuo=t(J4e," \u2014 "),GS=s(J4e,"A",{href:!0});var XPt=n(GS);Ruo=t(XPt,"QDQBertForMaskedLM"),XPt.forEach(r),Suo=t(J4e," (QDQBert model)"),J4e.forEach(r),Puo=d(j),E_=s(j,"LI",{});var Y4e=n(E_);fZ=s(Y4e,"STRONG",{});var zPt=n(fZ);$uo=t(zPt,"reformer"),zPt.forEach(r),Iuo=t(Y4e," \u2014 "),OS=s(Y4e,"A",{href:!0});var VPt=n(OS);juo=t(VPt,"ReformerForMaskedLM"),VPt.forEach(r),Nuo=t(Y4e," (Reformer model)"),Y4e.forEach(r),Duo=d(j),y_=s(j,"LI",{});var K4e=n(y_);mZ=s(K4e,"STRONG",{});var WPt=n(mZ);quo=t(WPt,"rembert"),WPt.forEach(r),Guo=t(K4e," \u2014 "),XS=s(K4e,"A",{href:!0});var QPt=n(XS);Ouo=t(QPt,"RemBertForMaskedLM"),QPt.forEach(r),Xuo=t(K4e," (RemBERT model)"),K4e.forEach(r),zuo=d(j),w_=s(j,"LI",{});var Z4e=n(w_);gZ=s(Z4e,"STRONG",{});var HPt=n(gZ);Vuo=t(HPt,"roberta"),HPt.forEach(r),Wuo=t(Z4e," \u2014 "),zS=s(Z4e,"A",{href:!0});var UPt=n(zS);Quo=t(UPt,"RobertaForMaskedLM"),UPt.forEach(r),Huo=t(Z4e," (RoBERTa model)"),Z4e.forEach(r),Uuo=d(j),A_=s(j,"LI",{});var eMe=n(A_);hZ=s(eMe,"STRONG",{});var JPt=n(hZ);Juo=t(JPt,"roformer"),JPt.forEach(r),Yuo=t(eMe," \u2014 "),VS=s(eMe,"A",{href:!0});var YPt=n(VS);Kuo=t(YPt,"RoFormerForMaskedLM"),YPt.forEach(r),Zuo=t(eMe," (RoFormer model)"),eMe.forEach(r),epo=d(j),L_=s(j,"LI",{});var oMe=n(L_);uZ=s(oMe,"STRONG",{});var KPt=n(uZ);opo=t(KPt,"squeezebert"),KPt.forEach(r),tpo=t(oMe," \u2014 "),WS=s(oMe,"A",{href:!0});var ZPt=n(WS);rpo=t(ZPt,"SqueezeBertForMaskedLM"),ZPt.forEach(r),apo=t(oMe," (SqueezeBERT model)"),oMe.forEach(r),spo=d(j),B_=s(j,"LI",{});var tMe=n(B_);pZ=s(tMe,"STRONG",{});var e$t=n(pZ);npo=t(e$t,"tapas"),e$t.forEach(r),lpo=t(tMe," \u2014 "),QS=s(tMe,"A",{href:!0});var o$t=n(QS);dpo=t(o$t,"TapasForMaskedLM"),o$t.forEach(r),ipo=t(tMe," (TAPAS model)"),tMe.forEach(r),cpo=d(j),x_=s(j,"LI",{});var rMe=n(x_);_Z=s(rMe,"STRONG",{});var t$t=n(_Z);fpo=t(t$t,"wav2vec2"),t$t.forEach(r),mpo=t(rMe," \u2014 "),bZ=s(rMe,"CODE",{});var r$t=n(bZ);gpo=t(r$t,"Wav2Vec2ForMaskedLM"),r$t.forEach(r),hpo=t(rMe,"(Wav2Vec2 model)"),rMe.forEach(r),upo=d(j),k_=s(j,"LI",{});var aMe=n(k_);vZ=s(aMe,"STRONG",{});var a$t=n(vZ);ppo=t(a$t,"xlm"),a$t.forEach(r),_po=t(aMe," \u2014 "),HS=s(aMe,"A",{href:!0});var s$t=n(HS);bpo=t(s$t,"XLMWithLMHeadModel"),s$t.forEach(r),vpo=t(aMe," (XLM model)"),aMe.forEach(r),Tpo=d(j),R_=s(j,"LI",{});var sMe=n(R_);TZ=s(sMe,"STRONG",{});var n$t=n(TZ);Fpo=t(n$t,"xlm-roberta"),n$t.forEach(r),Cpo=t(sMe," \u2014 "),US=s(sMe,"A",{href:!0});var l$t=n(US);Mpo=t(l$t,"XLMRobertaForMaskedLM"),l$t.forEach(r),Epo=t(sMe," (XLM-RoBERTa model)"),sMe.forEach(r),ypo=d(j),S_=s(j,"LI",{});var nMe=n(S_);FZ=s(nMe,"STRONG",{});var d$t=n(FZ);wpo=t(d$t,"xlm-roberta-xl"),d$t.forEach(r),Apo=t(nMe," \u2014 "),JS=s(nMe,"A",{href:!0});var i$t=n(JS);Lpo=t(i$t,"XLMRobertaXLForMaskedLM"),i$t.forEach(r),Bpo=t(nMe," (XLM-RoBERTa-XL model)"),nMe.forEach(r),xpo=d(j),P_=s(j,"LI",{});var lMe=n(P_);CZ=s(lMe,"STRONG",{});var c$t=n(CZ);kpo=t(c$t,"yoso"),c$t.forEach(r),Rpo=t(lMe," \u2014 "),YS=s(lMe,"A",{href:!0});var f$t=n(YS);Spo=t(f$t,"YosoForMaskedLM"),f$t.forEach(r),Ppo=t(lMe," (YOSO model)"),lMe.forEach(r),j.forEach(r),$po=d(Rr),$_=s(Rr,"P",{});var dMe=n($_);Ipo=t(dMe,"The model is set in evaluation mode by default using "),MZ=s(dMe,"CODE",{});var m$t=n(MZ);jpo=t(m$t,"model.eval()"),m$t.forEach(r),Npo=t(dMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),EZ=s(dMe,"CODE",{});var g$t=n(EZ);Dpo=t(g$t,"model.train()"),g$t.forEach(r),dMe.forEach(r),qpo=d(Rr),yZ=s(Rr,"P",{});var h$t=n(yZ);Gpo=t(h$t,"Examples:"),h$t.forEach(r),Opo=d(Rr),m(S5.$$.fragment,Rr),Rr.forEach(r),Nn.forEach(r),ILe=d(i),zd=s(i,"H2",{class:!0});var q8e=n(zd);I_=s(q8e,"A",{id:!0,class:!0,href:!0});var u$t=n(I_);wZ=s(u$t,"SPAN",{});var p$t=n(wZ);m(P5.$$.fragment,p$t),p$t.forEach(r),u$t.forEach(r),Xpo=d(q8e),AZ=s(q8e,"SPAN",{});var _$t=n(AZ);zpo=t(_$t,"AutoModelForSeq2SeqLM"),_$t.forEach(r),q8e.forEach(r),jLe=d(i),Qo=s(i,"DIV",{class:!0});var qn=n(Qo);m($5.$$.fragment,qn),Vpo=d(qn),Vd=s(qn,"P",{});var sX=n(Vd);Wpo=t(sX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LZ=s(sX,"CODE",{});var b$t=n(LZ);Qpo=t(b$t,"from_pretrained()"),b$t.forEach(r),Hpo=t(sX,"class method or the "),BZ=s(sX,"CODE",{});var v$t=n(BZ);Upo=t(v$t,"from_config()"),v$t.forEach(r),Jpo=t(sX,`class
method.`),sX.forEach(r),Ypo=d(qn),I5=s(qn,"P",{});var G8e=n(I5);Kpo=t(G8e,"This class cannot be instantiated directly using "),xZ=s(G8e,"CODE",{});var T$t=n(xZ);Zpo=t(T$t,"__init__()"),T$t.forEach(r),e_o=t(G8e," (throws an error)."),G8e.forEach(r),o_o=d(qn),Dt=s(qn,"DIV",{class:!0});var Gn=n(Dt);m(j5.$$.fragment,Gn),t_o=d(Gn),kZ=s(Gn,"P",{});var F$t=n(kZ);r_o=t(F$t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),F$t.forEach(r),a_o=d(Gn),Wd=s(Gn,"P",{});var nX=n(Wd);s_o=t(nX,`Note:
Loading a model from its configuration file does `),RZ=s(nX,"STRONG",{});var C$t=n(RZ);n_o=t(C$t,"not"),C$t.forEach(r),l_o=t(nX,` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=s(nX,"CODE",{});var M$t=n(SZ);d_o=t(M$t,"from_pretrained()"),M$t.forEach(r),i_o=t(nX,"to load the model weights."),nX.forEach(r),c_o=d(Gn),PZ=s(Gn,"P",{});var E$t=n(PZ);f_o=t(E$t,"Examples:"),E$t.forEach(r),m_o=d(Gn),m(N5.$$.fragment,Gn),Gn.forEach(r),g_o=d(qn),Pe=s(qn,"DIV",{class:!0});var Sr=n(Pe);m(D5.$$.fragment,Sr),h_o=d(Sr),$Z=s(Sr,"P",{});var y$t=n($Z);u_o=t(y$t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),y$t.forEach(r),p_o=d(Sr),Da=s(Sr,"P",{});var NE=n(Da);__o=t(NE,"The model class to instantiate is selected based on the "),IZ=s(NE,"CODE",{});var w$t=n(IZ);b_o=t(w$t,"model_type"),w$t.forEach(r),v_o=t(NE,` property of the config object (either
passed as an argument or loaded from `),jZ=s(NE,"CODE",{});var A$t=n(jZ);T_o=t(A$t,"pretrained_model_name_or_path"),A$t.forEach(r),F_o=t(NE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NZ=s(NE,"CODE",{});var L$t=n(NZ);C_o=t(L$t,"pretrained_model_name_or_path"),L$t.forEach(r),M_o=t(NE,":"),NE.forEach(r),E_o=d(Sr),se=s(Sr,"UL",{});var de=n(se);j_=s(de,"LI",{});var iMe=n(j_);DZ=s(iMe,"STRONG",{});var B$t=n(DZ);y_o=t(B$t,"bart"),B$t.forEach(r),w_o=t(iMe," \u2014 "),KS=s(iMe,"A",{href:!0});var x$t=n(KS);A_o=t(x$t,"BartForConditionalGeneration"),x$t.forEach(r),L_o=t(iMe," (BART model)"),iMe.forEach(r),B_o=d(de),N_=s(de,"LI",{});var cMe=n(N_);qZ=s(cMe,"STRONG",{});var k$t=n(qZ);x_o=t(k$t,"bigbird_pegasus"),k$t.forEach(r),k_o=t(cMe," \u2014 "),ZS=s(cMe,"A",{href:!0});var R$t=n(ZS);R_o=t(R$t,"BigBirdPegasusForConditionalGeneration"),R$t.forEach(r),S_o=t(cMe," (BigBirdPegasus model)"),cMe.forEach(r),P_o=d(de),D_=s(de,"LI",{});var fMe=n(D_);GZ=s(fMe,"STRONG",{});var S$t=n(GZ);$_o=t(S$t,"blenderbot"),S$t.forEach(r),I_o=t(fMe," \u2014 "),eP=s(fMe,"A",{href:!0});var P$t=n(eP);j_o=t(P$t,"BlenderbotForConditionalGeneration"),P$t.forEach(r),N_o=t(fMe," (Blenderbot model)"),fMe.forEach(r),D_o=d(de),q_=s(de,"LI",{});var mMe=n(q_);OZ=s(mMe,"STRONG",{});var $$t=n(OZ);q_o=t($$t,"blenderbot-small"),$$t.forEach(r),G_o=t(mMe," \u2014 "),oP=s(mMe,"A",{href:!0});var I$t=n(oP);O_o=t(I$t,"BlenderbotSmallForConditionalGeneration"),I$t.forEach(r),X_o=t(mMe," (BlenderbotSmall model)"),mMe.forEach(r),z_o=d(de),G_=s(de,"LI",{});var gMe=n(G_);XZ=s(gMe,"STRONG",{});var j$t=n(XZ);V_o=t(j$t,"encoder-decoder"),j$t.forEach(r),W_o=t(gMe," \u2014 "),tP=s(gMe,"A",{href:!0});var N$t=n(tP);Q_o=t(N$t,"EncoderDecoderModel"),N$t.forEach(r),H_o=t(gMe," (Encoder decoder model)"),gMe.forEach(r),U_o=d(de),O_=s(de,"LI",{});var hMe=n(O_);zZ=s(hMe,"STRONG",{});var D$t=n(zZ);J_o=t(D$t,"fsmt"),D$t.forEach(r),Y_o=t(hMe," \u2014 "),rP=s(hMe,"A",{href:!0});var q$t=n(rP);K_o=t(q$t,"FSMTForConditionalGeneration"),q$t.forEach(r),Z_o=t(hMe," (FairSeq Machine-Translation model)"),hMe.forEach(r),ebo=d(de),X_=s(de,"LI",{});var uMe=n(X_);VZ=s(uMe,"STRONG",{});var G$t=n(VZ);obo=t(G$t,"led"),G$t.forEach(r),tbo=t(uMe," \u2014 "),aP=s(uMe,"A",{href:!0});var O$t=n(aP);rbo=t(O$t,"LEDForConditionalGeneration"),O$t.forEach(r),abo=t(uMe," (LED model)"),uMe.forEach(r),sbo=d(de),z_=s(de,"LI",{});var pMe=n(z_);WZ=s(pMe,"STRONG",{});var X$t=n(WZ);nbo=t(X$t,"m2m_100"),X$t.forEach(r),lbo=t(pMe," \u2014 "),sP=s(pMe,"A",{href:!0});var z$t=n(sP);dbo=t(z$t,"M2M100ForConditionalGeneration"),z$t.forEach(r),ibo=t(pMe," (M2M100 model)"),pMe.forEach(r),cbo=d(de),V_=s(de,"LI",{});var _Me=n(V_);QZ=s(_Me,"STRONG",{});var V$t=n(QZ);fbo=t(V$t,"marian"),V$t.forEach(r),mbo=t(_Me," \u2014 "),nP=s(_Me,"A",{href:!0});var W$t=n(nP);gbo=t(W$t,"MarianMTModel"),W$t.forEach(r),hbo=t(_Me," (Marian model)"),_Me.forEach(r),ubo=d(de),W_=s(de,"LI",{});var bMe=n(W_);HZ=s(bMe,"STRONG",{});var Q$t=n(HZ);pbo=t(Q$t,"mbart"),Q$t.forEach(r),_bo=t(bMe," \u2014 "),lP=s(bMe,"A",{href:!0});var H$t=n(lP);bbo=t(H$t,"MBartForConditionalGeneration"),H$t.forEach(r),vbo=t(bMe," (mBART model)"),bMe.forEach(r),Tbo=d(de),Q_=s(de,"LI",{});var vMe=n(Q_);UZ=s(vMe,"STRONG",{});var U$t=n(UZ);Fbo=t(U$t,"mt5"),U$t.forEach(r),Cbo=t(vMe," \u2014 "),dP=s(vMe,"A",{href:!0});var J$t=n(dP);Mbo=t(J$t,"MT5ForConditionalGeneration"),J$t.forEach(r),Ebo=t(vMe," (mT5 model)"),vMe.forEach(r),ybo=d(de),H_=s(de,"LI",{});var TMe=n(H_);JZ=s(TMe,"STRONG",{});var Y$t=n(JZ);wbo=t(Y$t,"pegasus"),Y$t.forEach(r),Abo=t(TMe," \u2014 "),iP=s(TMe,"A",{href:!0});var K$t=n(iP);Lbo=t(K$t,"PegasusForConditionalGeneration"),K$t.forEach(r),Bbo=t(TMe," (Pegasus model)"),TMe.forEach(r),xbo=d(de),U_=s(de,"LI",{});var FMe=n(U_);YZ=s(FMe,"STRONG",{});var Z$t=n(YZ);kbo=t(Z$t,"prophetnet"),Z$t.forEach(r),Rbo=t(FMe," \u2014 "),cP=s(FMe,"A",{href:!0});var eIt=n(cP);Sbo=t(eIt,"ProphetNetForConditionalGeneration"),eIt.forEach(r),Pbo=t(FMe," (ProphetNet model)"),FMe.forEach(r),$bo=d(de),J_=s(de,"LI",{});var CMe=n(J_);KZ=s(CMe,"STRONG",{});var oIt=n(KZ);Ibo=t(oIt,"t5"),oIt.forEach(r),jbo=t(CMe," \u2014 "),fP=s(CMe,"A",{href:!0});var tIt=n(fP);Nbo=t(tIt,"T5ForConditionalGeneration"),tIt.forEach(r),Dbo=t(CMe," (T5 model)"),CMe.forEach(r),qbo=d(de),Y_=s(de,"LI",{});var MMe=n(Y_);ZZ=s(MMe,"STRONG",{});var rIt=n(ZZ);Gbo=t(rIt,"xlm-prophetnet"),rIt.forEach(r),Obo=t(MMe," \u2014 "),mP=s(MMe,"A",{href:!0});var aIt=n(mP);Xbo=t(aIt,"XLMProphetNetForConditionalGeneration"),aIt.forEach(r),zbo=t(MMe," (XLMProphetNet model)"),MMe.forEach(r),de.forEach(r),Vbo=d(Sr),K_=s(Sr,"P",{});var EMe=n(K_);Wbo=t(EMe,"The model is set in evaluation mode by default using "),eee=s(EMe,"CODE",{});var sIt=n(eee);Qbo=t(sIt,"model.eval()"),sIt.forEach(r),Hbo=t(EMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oee=s(EMe,"CODE",{});var nIt=n(oee);Ubo=t(nIt,"model.train()"),nIt.forEach(r),EMe.forEach(r),Jbo=d(Sr),tee=s(Sr,"P",{});var lIt=n(tee);Ybo=t(lIt,"Examples:"),lIt.forEach(r),Kbo=d(Sr),m(q5.$$.fragment,Sr),Sr.forEach(r),qn.forEach(r),NLe=d(i),Qd=s(i,"H2",{class:!0});var O8e=n(Qd);Z_=s(O8e,"A",{id:!0,class:!0,href:!0});var dIt=n(Z_);ree=s(dIt,"SPAN",{});var iIt=n(ree);m(G5.$$.fragment,iIt),iIt.forEach(r),dIt.forEach(r),Zbo=d(O8e),aee=s(O8e,"SPAN",{});var cIt=n(aee);e2o=t(cIt,"AutoModelForSequenceClassification"),cIt.forEach(r),O8e.forEach(r),DLe=d(i),Ho=s(i,"DIV",{class:!0});var On=n(Ho);m(O5.$$.fragment,On),o2o=d(On),Hd=s(On,"P",{});var lX=n(Hd);t2o=t(lX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),see=s(lX,"CODE",{});var fIt=n(see);r2o=t(fIt,"from_pretrained()"),fIt.forEach(r),a2o=t(lX,"class method or the "),nee=s(lX,"CODE",{});var mIt=n(nee);s2o=t(mIt,"from_config()"),mIt.forEach(r),n2o=t(lX,`class
method.`),lX.forEach(r),l2o=d(On),X5=s(On,"P",{});var X8e=n(X5);d2o=t(X8e,"This class cannot be instantiated directly using "),lee=s(X8e,"CODE",{});var gIt=n(lee);i2o=t(gIt,"__init__()"),gIt.forEach(r),c2o=t(X8e," (throws an error)."),X8e.forEach(r),f2o=d(On),qt=s(On,"DIV",{class:!0});var Xn=n(qt);m(z5.$$.fragment,Xn),m2o=d(Xn),dee=s(Xn,"P",{});var hIt=n(dee);g2o=t(hIt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),hIt.forEach(r),h2o=d(Xn),Ud=s(Xn,"P",{});var dX=n(Ud);u2o=t(dX,`Note:
Loading a model from its configuration file does `),iee=s(dX,"STRONG",{});var uIt=n(iee);p2o=t(uIt,"not"),uIt.forEach(r),_2o=t(dX,` load the model weights. It only affects the
model\u2019s configuration. Use `),cee=s(dX,"CODE",{});var pIt=n(cee);b2o=t(pIt,"from_pretrained()"),pIt.forEach(r),v2o=t(dX,"to load the model weights."),dX.forEach(r),T2o=d(Xn),fee=s(Xn,"P",{});var _It=n(fee);F2o=t(_It,"Examples:"),_It.forEach(r),C2o=d(Xn),m(V5.$$.fragment,Xn),Xn.forEach(r),M2o=d(On),$e=s(On,"DIV",{class:!0});var Pr=n($e);m(W5.$$.fragment,Pr),E2o=d(Pr),mee=s(Pr,"P",{});var bIt=n(mee);y2o=t(bIt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),bIt.forEach(r),w2o=d(Pr),qa=s(Pr,"P",{});var DE=n(qa);A2o=t(DE,"The model class to instantiate is selected based on the "),gee=s(DE,"CODE",{});var vIt=n(gee);L2o=t(vIt,"model_type"),vIt.forEach(r),B2o=t(DE,` property of the config object (either
passed as an argument or loaded from `),hee=s(DE,"CODE",{});var TIt=n(hee);x2o=t(TIt,"pretrained_model_name_or_path"),TIt.forEach(r),k2o=t(DE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uee=s(DE,"CODE",{});var FIt=n(uee);R2o=t(FIt,"pretrained_model_name_or_path"),FIt.forEach(r),S2o=t(DE,":"),DE.forEach(r),P2o=d(Pr),A=s(Pr,"UL",{});var L=n(A);eb=s(L,"LI",{});var yMe=n(eb);pee=s(yMe,"STRONG",{});var CIt=n(pee);$2o=t(CIt,"albert"),CIt.forEach(r),I2o=t(yMe," \u2014 "),gP=s(yMe,"A",{href:!0});var MIt=n(gP);j2o=t(MIt,"AlbertForSequenceClassification"),MIt.forEach(r),N2o=t(yMe," (ALBERT model)"),yMe.forEach(r),D2o=d(L),ob=s(L,"LI",{});var wMe=n(ob);_ee=s(wMe,"STRONG",{});var EIt=n(_ee);q2o=t(EIt,"bart"),EIt.forEach(r),G2o=t(wMe," \u2014 "),hP=s(wMe,"A",{href:!0});var yIt=n(hP);O2o=t(yIt,"BartForSequenceClassification"),yIt.forEach(r),X2o=t(wMe," (BART model)"),wMe.forEach(r),z2o=d(L),tb=s(L,"LI",{});var AMe=n(tb);bee=s(AMe,"STRONG",{});var wIt=n(bee);V2o=t(wIt,"bert"),wIt.forEach(r),W2o=t(AMe," \u2014 "),uP=s(AMe,"A",{href:!0});var AIt=n(uP);Q2o=t(AIt,"BertForSequenceClassification"),AIt.forEach(r),H2o=t(AMe," (BERT model)"),AMe.forEach(r),U2o=d(L),rb=s(L,"LI",{});var LMe=n(rb);vee=s(LMe,"STRONG",{});var LIt=n(vee);J2o=t(LIt,"big_bird"),LIt.forEach(r),Y2o=t(LMe," \u2014 "),pP=s(LMe,"A",{href:!0});var BIt=n(pP);K2o=t(BIt,"BigBirdForSequenceClassification"),BIt.forEach(r),Z2o=t(LMe," (BigBird model)"),LMe.forEach(r),evo=d(L),ab=s(L,"LI",{});var BMe=n(ab);Tee=s(BMe,"STRONG",{});var xIt=n(Tee);ovo=t(xIt,"bigbird_pegasus"),xIt.forEach(r),tvo=t(BMe," \u2014 "),_P=s(BMe,"A",{href:!0});var kIt=n(_P);rvo=t(kIt,"BigBirdPegasusForSequenceClassification"),kIt.forEach(r),avo=t(BMe," (BigBirdPegasus model)"),BMe.forEach(r),svo=d(L),sb=s(L,"LI",{});var xMe=n(sb);Fee=s(xMe,"STRONG",{});var RIt=n(Fee);nvo=t(RIt,"camembert"),RIt.forEach(r),lvo=t(xMe," \u2014 "),bP=s(xMe,"A",{href:!0});var SIt=n(bP);dvo=t(SIt,"CamembertForSequenceClassification"),SIt.forEach(r),ivo=t(xMe," (CamemBERT model)"),xMe.forEach(r),cvo=d(L),nb=s(L,"LI",{});var kMe=n(nb);Cee=s(kMe,"STRONG",{});var PIt=n(Cee);fvo=t(PIt,"canine"),PIt.forEach(r),mvo=t(kMe," \u2014 "),vP=s(kMe,"A",{href:!0});var $It=n(vP);gvo=t($It,"CanineForSequenceClassification"),$It.forEach(r),hvo=t(kMe," (Canine model)"),kMe.forEach(r),uvo=d(L),lb=s(L,"LI",{});var RMe=n(lb);Mee=s(RMe,"STRONG",{});var IIt=n(Mee);pvo=t(IIt,"convbert"),IIt.forEach(r),_vo=t(RMe," \u2014 "),TP=s(RMe,"A",{href:!0});var jIt=n(TP);bvo=t(jIt,"ConvBertForSequenceClassification"),jIt.forEach(r),vvo=t(RMe," (ConvBERT model)"),RMe.forEach(r),Tvo=d(L),db=s(L,"LI",{});var SMe=n(db);Eee=s(SMe,"STRONG",{});var NIt=n(Eee);Fvo=t(NIt,"ctrl"),NIt.forEach(r),Cvo=t(SMe," \u2014 "),FP=s(SMe,"A",{href:!0});var DIt=n(FP);Mvo=t(DIt,"CTRLForSequenceClassification"),DIt.forEach(r),Evo=t(SMe," (CTRL model)"),SMe.forEach(r),yvo=d(L),ib=s(L,"LI",{});var PMe=n(ib);yee=s(PMe,"STRONG",{});var qIt=n(yee);wvo=t(qIt,"deberta"),qIt.forEach(r),Avo=t(PMe," \u2014 "),CP=s(PMe,"A",{href:!0});var GIt=n(CP);Lvo=t(GIt,"DebertaForSequenceClassification"),GIt.forEach(r),Bvo=t(PMe," (DeBERTa model)"),PMe.forEach(r),xvo=d(L),cb=s(L,"LI",{});var $Me=n(cb);wee=s($Me,"STRONG",{});var OIt=n(wee);kvo=t(OIt,"deberta-v2"),OIt.forEach(r),Rvo=t($Me," \u2014 "),MP=s($Me,"A",{href:!0});var XIt=n(MP);Svo=t(XIt,"DebertaV2ForSequenceClassification"),XIt.forEach(r),Pvo=t($Me," (DeBERTa-v2 model)"),$Me.forEach(r),$vo=d(L),fb=s(L,"LI",{});var IMe=n(fb);Aee=s(IMe,"STRONG",{});var zIt=n(Aee);Ivo=t(zIt,"distilbert"),zIt.forEach(r),jvo=t(IMe," \u2014 "),EP=s(IMe,"A",{href:!0});var VIt=n(EP);Nvo=t(VIt,"DistilBertForSequenceClassification"),VIt.forEach(r),Dvo=t(IMe," (DistilBERT model)"),IMe.forEach(r),qvo=d(L),mb=s(L,"LI",{});var jMe=n(mb);Lee=s(jMe,"STRONG",{});var WIt=n(Lee);Gvo=t(WIt,"electra"),WIt.forEach(r),Ovo=t(jMe," \u2014 "),yP=s(jMe,"A",{href:!0});var QIt=n(yP);Xvo=t(QIt,"ElectraForSequenceClassification"),QIt.forEach(r),zvo=t(jMe," (ELECTRA model)"),jMe.forEach(r),Vvo=d(L),gb=s(L,"LI",{});var NMe=n(gb);Bee=s(NMe,"STRONG",{});var HIt=n(Bee);Wvo=t(HIt,"flaubert"),HIt.forEach(r),Qvo=t(NMe," \u2014 "),wP=s(NMe,"A",{href:!0});var UIt=n(wP);Hvo=t(UIt,"FlaubertForSequenceClassification"),UIt.forEach(r),Uvo=t(NMe," (FlauBERT model)"),NMe.forEach(r),Jvo=d(L),hb=s(L,"LI",{});var DMe=n(hb);xee=s(DMe,"STRONG",{});var JIt=n(xee);Yvo=t(JIt,"fnet"),JIt.forEach(r),Kvo=t(DMe," \u2014 "),AP=s(DMe,"A",{href:!0});var YIt=n(AP);Zvo=t(YIt,"FNetForSequenceClassification"),YIt.forEach(r),eTo=t(DMe," (FNet model)"),DMe.forEach(r),oTo=d(L),ub=s(L,"LI",{});var qMe=n(ub);kee=s(qMe,"STRONG",{});var KIt=n(kee);tTo=t(KIt,"funnel"),KIt.forEach(r),rTo=t(qMe," \u2014 "),LP=s(qMe,"A",{href:!0});var ZIt=n(LP);aTo=t(ZIt,"FunnelForSequenceClassification"),ZIt.forEach(r),sTo=t(qMe," (Funnel Transformer model)"),qMe.forEach(r),nTo=d(L),pb=s(L,"LI",{});var GMe=n(pb);Ree=s(GMe,"STRONG",{});var ejt=n(Ree);lTo=t(ejt,"gpt2"),ejt.forEach(r),dTo=t(GMe," \u2014 "),BP=s(GMe,"A",{href:!0});var ojt=n(BP);iTo=t(ojt,"GPT2ForSequenceClassification"),ojt.forEach(r),cTo=t(GMe," (OpenAI GPT-2 model)"),GMe.forEach(r),fTo=d(L),_b=s(L,"LI",{});var OMe=n(_b);See=s(OMe,"STRONG",{});var tjt=n(See);mTo=t(tjt,"gpt_neo"),tjt.forEach(r),gTo=t(OMe," \u2014 "),xP=s(OMe,"A",{href:!0});var rjt=n(xP);hTo=t(rjt,"GPTNeoForSequenceClassification"),rjt.forEach(r),uTo=t(OMe," (GPT Neo model)"),OMe.forEach(r),pTo=d(L),bb=s(L,"LI",{});var XMe=n(bb);Pee=s(XMe,"STRONG",{});var ajt=n(Pee);_To=t(ajt,"gptj"),ajt.forEach(r),bTo=t(XMe," \u2014 "),kP=s(XMe,"A",{href:!0});var sjt=n(kP);vTo=t(sjt,"GPTJForSequenceClassification"),sjt.forEach(r),TTo=t(XMe," (GPT-J model)"),XMe.forEach(r),FTo=d(L),vb=s(L,"LI",{});var zMe=n(vb);$ee=s(zMe,"STRONG",{});var njt=n($ee);CTo=t(njt,"ibert"),njt.forEach(r),MTo=t(zMe," \u2014 "),RP=s(zMe,"A",{href:!0});var ljt=n(RP);ETo=t(ljt,"IBertForSequenceClassification"),ljt.forEach(r),yTo=t(zMe," (I-BERT model)"),zMe.forEach(r),wTo=d(L),Tb=s(L,"LI",{});var VMe=n(Tb);Iee=s(VMe,"STRONG",{});var djt=n(Iee);ATo=t(djt,"layoutlm"),djt.forEach(r),LTo=t(VMe," \u2014 "),SP=s(VMe,"A",{href:!0});var ijt=n(SP);BTo=t(ijt,"LayoutLMForSequenceClassification"),ijt.forEach(r),xTo=t(VMe," (LayoutLM model)"),VMe.forEach(r),kTo=d(L),Fb=s(L,"LI",{});var WMe=n(Fb);jee=s(WMe,"STRONG",{});var cjt=n(jee);RTo=t(cjt,"layoutlmv2"),cjt.forEach(r),STo=t(WMe," \u2014 "),PP=s(WMe,"A",{href:!0});var fjt=n(PP);PTo=t(fjt,"LayoutLMv2ForSequenceClassification"),fjt.forEach(r),$To=t(WMe," (LayoutLMv2 model)"),WMe.forEach(r),ITo=d(L),Cb=s(L,"LI",{});var QMe=n(Cb);Nee=s(QMe,"STRONG",{});var mjt=n(Nee);jTo=t(mjt,"led"),mjt.forEach(r),NTo=t(QMe," \u2014 "),$P=s(QMe,"A",{href:!0});var gjt=n($P);DTo=t(gjt,"LEDForSequenceClassification"),gjt.forEach(r),qTo=t(QMe," (LED model)"),QMe.forEach(r),GTo=d(L),Mb=s(L,"LI",{});var HMe=n(Mb);Dee=s(HMe,"STRONG",{});var hjt=n(Dee);OTo=t(hjt,"longformer"),hjt.forEach(r),XTo=t(HMe," \u2014 "),IP=s(HMe,"A",{href:!0});var ujt=n(IP);zTo=t(ujt,"LongformerForSequenceClassification"),ujt.forEach(r),VTo=t(HMe," (Longformer model)"),HMe.forEach(r),WTo=d(L),Eb=s(L,"LI",{});var UMe=n(Eb);qee=s(UMe,"STRONG",{});var pjt=n(qee);QTo=t(pjt,"mbart"),pjt.forEach(r),HTo=t(UMe," \u2014 "),jP=s(UMe,"A",{href:!0});var _jt=n(jP);UTo=t(_jt,"MBartForSequenceClassification"),_jt.forEach(r),JTo=t(UMe," (mBART model)"),UMe.forEach(r),YTo=d(L),yb=s(L,"LI",{});var JMe=n(yb);Gee=s(JMe,"STRONG",{});var bjt=n(Gee);KTo=t(bjt,"megatron-bert"),bjt.forEach(r),ZTo=t(JMe," \u2014 "),NP=s(JMe,"A",{href:!0});var vjt=n(NP);e1o=t(vjt,"MegatronBertForSequenceClassification"),vjt.forEach(r),o1o=t(JMe," (MegatronBert model)"),JMe.forEach(r),t1o=d(L),wb=s(L,"LI",{});var YMe=n(wb);Oee=s(YMe,"STRONG",{});var Tjt=n(Oee);r1o=t(Tjt,"mobilebert"),Tjt.forEach(r),a1o=t(YMe," \u2014 "),DP=s(YMe,"A",{href:!0});var Fjt=n(DP);s1o=t(Fjt,"MobileBertForSequenceClassification"),Fjt.forEach(r),n1o=t(YMe," (MobileBERT model)"),YMe.forEach(r),l1o=d(L),Ab=s(L,"LI",{});var KMe=n(Ab);Xee=s(KMe,"STRONG",{});var Cjt=n(Xee);d1o=t(Cjt,"mpnet"),Cjt.forEach(r),i1o=t(KMe," \u2014 "),qP=s(KMe,"A",{href:!0});var Mjt=n(qP);c1o=t(Mjt,"MPNetForSequenceClassification"),Mjt.forEach(r),f1o=t(KMe," (MPNet model)"),KMe.forEach(r),m1o=d(L),Lb=s(L,"LI",{});var ZMe=n(Lb);zee=s(ZMe,"STRONG",{});var Ejt=n(zee);g1o=t(Ejt,"nystromformer"),Ejt.forEach(r),h1o=t(ZMe," \u2014 "),GP=s(ZMe,"A",{href:!0});var yjt=n(GP);u1o=t(yjt,"NystromformerForSequenceClassification"),yjt.forEach(r),p1o=t(ZMe," (Nystromformer model)"),ZMe.forEach(r),_1o=d(L),Bb=s(L,"LI",{});var eEe=n(Bb);Vee=s(eEe,"STRONG",{});var wjt=n(Vee);b1o=t(wjt,"openai-gpt"),wjt.forEach(r),v1o=t(eEe," \u2014 "),OP=s(eEe,"A",{href:!0});var Ajt=n(OP);T1o=t(Ajt,"OpenAIGPTForSequenceClassification"),Ajt.forEach(r),F1o=t(eEe," (OpenAI GPT model)"),eEe.forEach(r),C1o=d(L),xb=s(L,"LI",{});var oEe=n(xb);Wee=s(oEe,"STRONG",{});var Ljt=n(Wee);M1o=t(Ljt,"perceiver"),Ljt.forEach(r),E1o=t(oEe," \u2014 "),XP=s(oEe,"A",{href:!0});var Bjt=n(XP);y1o=t(Bjt,"PerceiverForSequenceClassification"),Bjt.forEach(r),w1o=t(oEe," (Perceiver model)"),oEe.forEach(r),A1o=d(L),kb=s(L,"LI",{});var tEe=n(kb);Qee=s(tEe,"STRONG",{});var xjt=n(Qee);L1o=t(xjt,"qdqbert"),xjt.forEach(r),B1o=t(tEe," \u2014 "),zP=s(tEe,"A",{href:!0});var kjt=n(zP);x1o=t(kjt,"QDQBertForSequenceClassification"),kjt.forEach(r),k1o=t(tEe," (QDQBert model)"),tEe.forEach(r),R1o=d(L),Rb=s(L,"LI",{});var rEe=n(Rb);Hee=s(rEe,"STRONG",{});var Rjt=n(Hee);S1o=t(Rjt,"reformer"),Rjt.forEach(r),P1o=t(rEe," \u2014 "),VP=s(rEe,"A",{href:!0});var Sjt=n(VP);$1o=t(Sjt,"ReformerForSequenceClassification"),Sjt.forEach(r),I1o=t(rEe," (Reformer model)"),rEe.forEach(r),j1o=d(L),Sb=s(L,"LI",{});var aEe=n(Sb);Uee=s(aEe,"STRONG",{});var Pjt=n(Uee);N1o=t(Pjt,"rembert"),Pjt.forEach(r),D1o=t(aEe," \u2014 "),WP=s(aEe,"A",{href:!0});var $jt=n(WP);q1o=t($jt,"RemBertForSequenceClassification"),$jt.forEach(r),G1o=t(aEe," (RemBERT model)"),aEe.forEach(r),O1o=d(L),Pb=s(L,"LI",{});var sEe=n(Pb);Jee=s(sEe,"STRONG",{});var Ijt=n(Jee);X1o=t(Ijt,"roberta"),Ijt.forEach(r),z1o=t(sEe," \u2014 "),QP=s(sEe,"A",{href:!0});var jjt=n(QP);V1o=t(jjt,"RobertaForSequenceClassification"),jjt.forEach(r),W1o=t(sEe," (RoBERTa model)"),sEe.forEach(r),Q1o=d(L),$b=s(L,"LI",{});var nEe=n($b);Yee=s(nEe,"STRONG",{});var Njt=n(Yee);H1o=t(Njt,"roformer"),Njt.forEach(r),U1o=t(nEe," \u2014 "),HP=s(nEe,"A",{href:!0});var Djt=n(HP);J1o=t(Djt,"RoFormerForSequenceClassification"),Djt.forEach(r),Y1o=t(nEe," (RoFormer model)"),nEe.forEach(r),K1o=d(L),Ib=s(L,"LI",{});var lEe=n(Ib);Kee=s(lEe,"STRONG",{});var qjt=n(Kee);Z1o=t(qjt,"squeezebert"),qjt.forEach(r),eFo=t(lEe," \u2014 "),UP=s(lEe,"A",{href:!0});var Gjt=n(UP);oFo=t(Gjt,"SqueezeBertForSequenceClassification"),Gjt.forEach(r),tFo=t(lEe," (SqueezeBERT model)"),lEe.forEach(r),rFo=d(L),jb=s(L,"LI",{});var dEe=n(jb);Zee=s(dEe,"STRONG",{});var Ojt=n(Zee);aFo=t(Ojt,"tapas"),Ojt.forEach(r),sFo=t(dEe," \u2014 "),JP=s(dEe,"A",{href:!0});var Xjt=n(JP);nFo=t(Xjt,"TapasForSequenceClassification"),Xjt.forEach(r),lFo=t(dEe," (TAPAS model)"),dEe.forEach(r),dFo=d(L),Nb=s(L,"LI",{});var iEe=n(Nb);eoe=s(iEe,"STRONG",{});var zjt=n(eoe);iFo=t(zjt,"transfo-xl"),zjt.forEach(r),cFo=t(iEe," \u2014 "),YP=s(iEe,"A",{href:!0});var Vjt=n(YP);fFo=t(Vjt,"TransfoXLForSequenceClassification"),Vjt.forEach(r),mFo=t(iEe," (Transformer-XL model)"),iEe.forEach(r),gFo=d(L),Db=s(L,"LI",{});var cEe=n(Db);ooe=s(cEe,"STRONG",{});var Wjt=n(ooe);hFo=t(Wjt,"xlm"),Wjt.forEach(r),uFo=t(cEe," \u2014 "),KP=s(cEe,"A",{href:!0});var Qjt=n(KP);pFo=t(Qjt,"XLMForSequenceClassification"),Qjt.forEach(r),_Fo=t(cEe," (XLM model)"),cEe.forEach(r),bFo=d(L),qb=s(L,"LI",{});var fEe=n(qb);toe=s(fEe,"STRONG",{});var Hjt=n(toe);vFo=t(Hjt,"xlm-roberta"),Hjt.forEach(r),TFo=t(fEe," \u2014 "),ZP=s(fEe,"A",{href:!0});var Ujt=n(ZP);FFo=t(Ujt,"XLMRobertaForSequenceClassification"),Ujt.forEach(r),CFo=t(fEe," (XLM-RoBERTa model)"),fEe.forEach(r),MFo=d(L),Gb=s(L,"LI",{});var mEe=n(Gb);roe=s(mEe,"STRONG",{});var Jjt=n(roe);EFo=t(Jjt,"xlm-roberta-xl"),Jjt.forEach(r),yFo=t(mEe," \u2014 "),e$=s(mEe,"A",{href:!0});var Yjt=n(e$);wFo=t(Yjt,"XLMRobertaXLForSequenceClassification"),Yjt.forEach(r),AFo=t(mEe," (XLM-RoBERTa-XL model)"),mEe.forEach(r),LFo=d(L),Ob=s(L,"LI",{});var gEe=n(Ob);aoe=s(gEe,"STRONG",{});var Kjt=n(aoe);BFo=t(Kjt,"xlnet"),Kjt.forEach(r),xFo=t(gEe," \u2014 "),o$=s(gEe,"A",{href:!0});var Zjt=n(o$);kFo=t(Zjt,"XLNetForSequenceClassification"),Zjt.forEach(r),RFo=t(gEe," (XLNet model)"),gEe.forEach(r),SFo=d(L),Xb=s(L,"LI",{});var hEe=n(Xb);soe=s(hEe,"STRONG",{});var eNt=n(soe);PFo=t(eNt,"yoso"),eNt.forEach(r),$Fo=t(hEe," \u2014 "),t$=s(hEe,"A",{href:!0});var oNt=n(t$);IFo=t(oNt,"YosoForSequenceClassification"),oNt.forEach(r),jFo=t(hEe," (YOSO model)"),hEe.forEach(r),L.forEach(r),NFo=d(Pr),zb=s(Pr,"P",{});var uEe=n(zb);DFo=t(uEe,"The model is set in evaluation mode by default using "),noe=s(uEe,"CODE",{});var tNt=n(noe);qFo=t(tNt,"model.eval()"),tNt.forEach(r),GFo=t(uEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),loe=s(uEe,"CODE",{});var rNt=n(loe);OFo=t(rNt,"model.train()"),rNt.forEach(r),uEe.forEach(r),XFo=d(Pr),doe=s(Pr,"P",{});var aNt=n(doe);zFo=t(aNt,"Examples:"),aNt.forEach(r),VFo=d(Pr),m(Q5.$$.fragment,Pr),Pr.forEach(r),On.forEach(r),qLe=d(i),Jd=s(i,"H2",{class:!0});var z8e=n(Jd);Vb=s(z8e,"A",{id:!0,class:!0,href:!0});var sNt=n(Vb);ioe=s(sNt,"SPAN",{});var nNt=n(ioe);m(H5.$$.fragment,nNt),nNt.forEach(r),sNt.forEach(r),WFo=d(z8e),coe=s(z8e,"SPAN",{});var lNt=n(coe);QFo=t(lNt,"AutoModelForMultipleChoice"),lNt.forEach(r),z8e.forEach(r),GLe=d(i),Uo=s(i,"DIV",{class:!0});var zn=n(Uo);m(U5.$$.fragment,zn),HFo=d(zn),Yd=s(zn,"P",{});var iX=n(Yd);UFo=t(iX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),foe=s(iX,"CODE",{});var dNt=n(foe);JFo=t(dNt,"from_pretrained()"),dNt.forEach(r),YFo=t(iX,"class method or the "),moe=s(iX,"CODE",{});var iNt=n(moe);KFo=t(iNt,"from_config()"),iNt.forEach(r),ZFo=t(iX,`class
method.`),iX.forEach(r),eCo=d(zn),J5=s(zn,"P",{});var V8e=n(J5);oCo=t(V8e,"This class cannot be instantiated directly using "),goe=s(V8e,"CODE",{});var cNt=n(goe);tCo=t(cNt,"__init__()"),cNt.forEach(r),rCo=t(V8e," (throws an error)."),V8e.forEach(r),aCo=d(zn),Gt=s(zn,"DIV",{class:!0});var Vn=n(Gt);m(Y5.$$.fragment,Vn),sCo=d(Vn),hoe=s(Vn,"P",{});var fNt=n(hoe);nCo=t(fNt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),fNt.forEach(r),lCo=d(Vn),Kd=s(Vn,"P",{});var cX=n(Kd);dCo=t(cX,`Note:
Loading a model from its configuration file does `),uoe=s(cX,"STRONG",{});var mNt=n(uoe);iCo=t(mNt,"not"),mNt.forEach(r),cCo=t(cX,` load the model weights. It only affects the
model\u2019s configuration. Use `),poe=s(cX,"CODE",{});var gNt=n(poe);fCo=t(gNt,"from_pretrained()"),gNt.forEach(r),mCo=t(cX,"to load the model weights."),cX.forEach(r),gCo=d(Vn),_oe=s(Vn,"P",{});var hNt=n(_oe);hCo=t(hNt,"Examples:"),hNt.forEach(r),uCo=d(Vn),m(K5.$$.fragment,Vn),Vn.forEach(r),pCo=d(zn),Ie=s(zn,"DIV",{class:!0});var $r=n(Ie);m(Z5.$$.fragment,$r),_Co=d($r),boe=s($r,"P",{});var uNt=n(boe);bCo=t(uNt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),uNt.forEach(r),vCo=d($r),Ga=s($r,"P",{});var qE=n(Ga);TCo=t(qE,"The model class to instantiate is selected based on the "),voe=s(qE,"CODE",{});var pNt=n(voe);FCo=t(pNt,"model_type"),pNt.forEach(r),CCo=t(qE,` property of the config object (either
passed as an argument or loaded from `),Toe=s(qE,"CODE",{});var _Nt=n(Toe);MCo=t(_Nt,"pretrained_model_name_or_path"),_Nt.forEach(r),ECo=t(qE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Foe=s(qE,"CODE",{});var bNt=n(Foe);yCo=t(bNt,"pretrained_model_name_or_path"),bNt.forEach(r),wCo=t(qE,":"),qE.forEach(r),ACo=d($r),G=s($r,"UL",{});var O=n(G);Wb=s(O,"LI",{});var pEe=n(Wb);Coe=s(pEe,"STRONG",{});var vNt=n(Coe);LCo=t(vNt,"albert"),vNt.forEach(r),BCo=t(pEe," \u2014 "),r$=s(pEe,"A",{href:!0});var TNt=n(r$);xCo=t(TNt,"AlbertForMultipleChoice"),TNt.forEach(r),kCo=t(pEe," (ALBERT model)"),pEe.forEach(r),RCo=d(O),Qb=s(O,"LI",{});var _Ee=n(Qb);Moe=s(_Ee,"STRONG",{});var FNt=n(Moe);SCo=t(FNt,"bert"),FNt.forEach(r),PCo=t(_Ee," \u2014 "),a$=s(_Ee,"A",{href:!0});var CNt=n(a$);$Co=t(CNt,"BertForMultipleChoice"),CNt.forEach(r),ICo=t(_Ee," (BERT model)"),_Ee.forEach(r),jCo=d(O),Hb=s(O,"LI",{});var bEe=n(Hb);Eoe=s(bEe,"STRONG",{});var MNt=n(Eoe);NCo=t(MNt,"big_bird"),MNt.forEach(r),DCo=t(bEe," \u2014 "),s$=s(bEe,"A",{href:!0});var ENt=n(s$);qCo=t(ENt,"BigBirdForMultipleChoice"),ENt.forEach(r),GCo=t(bEe," (BigBird model)"),bEe.forEach(r),OCo=d(O),Ub=s(O,"LI",{});var vEe=n(Ub);yoe=s(vEe,"STRONG",{});var yNt=n(yoe);XCo=t(yNt,"camembert"),yNt.forEach(r),zCo=t(vEe," \u2014 "),n$=s(vEe,"A",{href:!0});var wNt=n(n$);VCo=t(wNt,"CamembertForMultipleChoice"),wNt.forEach(r),WCo=t(vEe," (CamemBERT model)"),vEe.forEach(r),QCo=d(O),Jb=s(O,"LI",{});var TEe=n(Jb);woe=s(TEe,"STRONG",{});var ANt=n(woe);HCo=t(ANt,"canine"),ANt.forEach(r),UCo=t(TEe," \u2014 "),l$=s(TEe,"A",{href:!0});var LNt=n(l$);JCo=t(LNt,"CanineForMultipleChoice"),LNt.forEach(r),YCo=t(TEe," (Canine model)"),TEe.forEach(r),KCo=d(O),Yb=s(O,"LI",{});var FEe=n(Yb);Aoe=s(FEe,"STRONG",{});var BNt=n(Aoe);ZCo=t(BNt,"convbert"),BNt.forEach(r),e4o=t(FEe," \u2014 "),d$=s(FEe,"A",{href:!0});var xNt=n(d$);o4o=t(xNt,"ConvBertForMultipleChoice"),xNt.forEach(r),t4o=t(FEe," (ConvBERT model)"),FEe.forEach(r),r4o=d(O),Kb=s(O,"LI",{});var CEe=n(Kb);Loe=s(CEe,"STRONG",{});var kNt=n(Loe);a4o=t(kNt,"distilbert"),kNt.forEach(r),s4o=t(CEe," \u2014 "),i$=s(CEe,"A",{href:!0});var RNt=n(i$);n4o=t(RNt,"DistilBertForMultipleChoice"),RNt.forEach(r),l4o=t(CEe," (DistilBERT model)"),CEe.forEach(r),d4o=d(O),Zb=s(O,"LI",{});var MEe=n(Zb);Boe=s(MEe,"STRONG",{});var SNt=n(Boe);i4o=t(SNt,"electra"),SNt.forEach(r),c4o=t(MEe," \u2014 "),c$=s(MEe,"A",{href:!0});var PNt=n(c$);f4o=t(PNt,"ElectraForMultipleChoice"),PNt.forEach(r),m4o=t(MEe," (ELECTRA model)"),MEe.forEach(r),g4o=d(O),e2=s(O,"LI",{});var EEe=n(e2);xoe=s(EEe,"STRONG",{});var $Nt=n(xoe);h4o=t($Nt,"flaubert"),$Nt.forEach(r),u4o=t(EEe," \u2014 "),f$=s(EEe,"A",{href:!0});var INt=n(f$);p4o=t(INt,"FlaubertForMultipleChoice"),INt.forEach(r),_4o=t(EEe," (FlauBERT model)"),EEe.forEach(r),b4o=d(O),o2=s(O,"LI",{});var yEe=n(o2);koe=s(yEe,"STRONG",{});var jNt=n(koe);v4o=t(jNt,"fnet"),jNt.forEach(r),T4o=t(yEe," \u2014 "),m$=s(yEe,"A",{href:!0});var NNt=n(m$);F4o=t(NNt,"FNetForMultipleChoice"),NNt.forEach(r),C4o=t(yEe," (FNet model)"),yEe.forEach(r),M4o=d(O),t2=s(O,"LI",{});var wEe=n(t2);Roe=s(wEe,"STRONG",{});var DNt=n(Roe);E4o=t(DNt,"funnel"),DNt.forEach(r),y4o=t(wEe," \u2014 "),g$=s(wEe,"A",{href:!0});var qNt=n(g$);w4o=t(qNt,"FunnelForMultipleChoice"),qNt.forEach(r),A4o=t(wEe," (Funnel Transformer model)"),wEe.forEach(r),L4o=d(O),r2=s(O,"LI",{});var AEe=n(r2);Soe=s(AEe,"STRONG",{});var GNt=n(Soe);B4o=t(GNt,"ibert"),GNt.forEach(r),x4o=t(AEe," \u2014 "),h$=s(AEe,"A",{href:!0});var ONt=n(h$);k4o=t(ONt,"IBertForMultipleChoice"),ONt.forEach(r),R4o=t(AEe," (I-BERT model)"),AEe.forEach(r),S4o=d(O),a2=s(O,"LI",{});var LEe=n(a2);Poe=s(LEe,"STRONG",{});var XNt=n(Poe);P4o=t(XNt,"longformer"),XNt.forEach(r),$4o=t(LEe," \u2014 "),u$=s(LEe,"A",{href:!0});var zNt=n(u$);I4o=t(zNt,"LongformerForMultipleChoice"),zNt.forEach(r),j4o=t(LEe," (Longformer model)"),LEe.forEach(r),N4o=d(O),s2=s(O,"LI",{});var BEe=n(s2);$oe=s(BEe,"STRONG",{});var VNt=n($oe);D4o=t(VNt,"megatron-bert"),VNt.forEach(r),q4o=t(BEe," \u2014 "),p$=s(BEe,"A",{href:!0});var WNt=n(p$);G4o=t(WNt,"MegatronBertForMultipleChoice"),WNt.forEach(r),O4o=t(BEe," (MegatronBert model)"),BEe.forEach(r),X4o=d(O),n2=s(O,"LI",{});var xEe=n(n2);Ioe=s(xEe,"STRONG",{});var QNt=n(Ioe);z4o=t(QNt,"mobilebert"),QNt.forEach(r),V4o=t(xEe," \u2014 "),_$=s(xEe,"A",{href:!0});var HNt=n(_$);W4o=t(HNt,"MobileBertForMultipleChoice"),HNt.forEach(r),Q4o=t(xEe," (MobileBERT model)"),xEe.forEach(r),H4o=d(O),l2=s(O,"LI",{});var kEe=n(l2);joe=s(kEe,"STRONG",{});var UNt=n(joe);U4o=t(UNt,"mpnet"),UNt.forEach(r),J4o=t(kEe," \u2014 "),b$=s(kEe,"A",{href:!0});var JNt=n(b$);Y4o=t(JNt,"MPNetForMultipleChoice"),JNt.forEach(r),K4o=t(kEe," (MPNet model)"),kEe.forEach(r),Z4o=d(O),d2=s(O,"LI",{});var REe=n(d2);Noe=s(REe,"STRONG",{});var YNt=n(Noe);eMo=t(YNt,"nystromformer"),YNt.forEach(r),oMo=t(REe," \u2014 "),v$=s(REe,"A",{href:!0});var KNt=n(v$);tMo=t(KNt,"NystromformerForMultipleChoice"),KNt.forEach(r),rMo=t(REe," (Nystromformer model)"),REe.forEach(r),aMo=d(O),i2=s(O,"LI",{});var SEe=n(i2);Doe=s(SEe,"STRONG",{});var ZNt=n(Doe);sMo=t(ZNt,"qdqbert"),ZNt.forEach(r),nMo=t(SEe," \u2014 "),T$=s(SEe,"A",{href:!0});var eDt=n(T$);lMo=t(eDt,"QDQBertForMultipleChoice"),eDt.forEach(r),dMo=t(SEe," (QDQBert model)"),SEe.forEach(r),iMo=d(O),c2=s(O,"LI",{});var PEe=n(c2);qoe=s(PEe,"STRONG",{});var oDt=n(qoe);cMo=t(oDt,"rembert"),oDt.forEach(r),fMo=t(PEe," \u2014 "),F$=s(PEe,"A",{href:!0});var tDt=n(F$);mMo=t(tDt,"RemBertForMultipleChoice"),tDt.forEach(r),gMo=t(PEe," (RemBERT model)"),PEe.forEach(r),hMo=d(O),f2=s(O,"LI",{});var $Ee=n(f2);Goe=s($Ee,"STRONG",{});var rDt=n(Goe);uMo=t(rDt,"roberta"),rDt.forEach(r),pMo=t($Ee," \u2014 "),C$=s($Ee,"A",{href:!0});var aDt=n(C$);_Mo=t(aDt,"RobertaForMultipleChoice"),aDt.forEach(r),bMo=t($Ee," (RoBERTa model)"),$Ee.forEach(r),vMo=d(O),m2=s(O,"LI",{});var IEe=n(m2);Ooe=s(IEe,"STRONG",{});var sDt=n(Ooe);TMo=t(sDt,"roformer"),sDt.forEach(r),FMo=t(IEe," \u2014 "),M$=s(IEe,"A",{href:!0});var nDt=n(M$);CMo=t(nDt,"RoFormerForMultipleChoice"),nDt.forEach(r),MMo=t(IEe," (RoFormer model)"),IEe.forEach(r),EMo=d(O),g2=s(O,"LI",{});var jEe=n(g2);Xoe=s(jEe,"STRONG",{});var lDt=n(Xoe);yMo=t(lDt,"squeezebert"),lDt.forEach(r),wMo=t(jEe," \u2014 "),E$=s(jEe,"A",{href:!0});var dDt=n(E$);AMo=t(dDt,"SqueezeBertForMultipleChoice"),dDt.forEach(r),LMo=t(jEe," (SqueezeBERT model)"),jEe.forEach(r),BMo=d(O),h2=s(O,"LI",{});var NEe=n(h2);zoe=s(NEe,"STRONG",{});var iDt=n(zoe);xMo=t(iDt,"xlm"),iDt.forEach(r),kMo=t(NEe," \u2014 "),y$=s(NEe,"A",{href:!0});var cDt=n(y$);RMo=t(cDt,"XLMForMultipleChoice"),cDt.forEach(r),SMo=t(NEe," (XLM model)"),NEe.forEach(r),PMo=d(O),u2=s(O,"LI",{});var DEe=n(u2);Voe=s(DEe,"STRONG",{});var fDt=n(Voe);$Mo=t(fDt,"xlm-roberta"),fDt.forEach(r),IMo=t(DEe," \u2014 "),w$=s(DEe,"A",{href:!0});var mDt=n(w$);jMo=t(mDt,"XLMRobertaForMultipleChoice"),mDt.forEach(r),NMo=t(DEe," (XLM-RoBERTa model)"),DEe.forEach(r),DMo=d(O),p2=s(O,"LI",{});var qEe=n(p2);Woe=s(qEe,"STRONG",{});var gDt=n(Woe);qMo=t(gDt,"xlm-roberta-xl"),gDt.forEach(r),GMo=t(qEe," \u2014 "),A$=s(qEe,"A",{href:!0});var hDt=n(A$);OMo=t(hDt,"XLMRobertaXLForMultipleChoice"),hDt.forEach(r),XMo=t(qEe," (XLM-RoBERTa-XL model)"),qEe.forEach(r),zMo=d(O),_2=s(O,"LI",{});var GEe=n(_2);Qoe=s(GEe,"STRONG",{});var uDt=n(Qoe);VMo=t(uDt,"xlnet"),uDt.forEach(r),WMo=t(GEe," \u2014 "),L$=s(GEe,"A",{href:!0});var pDt=n(L$);QMo=t(pDt,"XLNetForMultipleChoice"),pDt.forEach(r),HMo=t(GEe," (XLNet model)"),GEe.forEach(r),UMo=d(O),b2=s(O,"LI",{});var OEe=n(b2);Hoe=s(OEe,"STRONG",{});var _Dt=n(Hoe);JMo=t(_Dt,"yoso"),_Dt.forEach(r),YMo=t(OEe," \u2014 "),B$=s(OEe,"A",{href:!0});var bDt=n(B$);KMo=t(bDt,"YosoForMultipleChoice"),bDt.forEach(r),ZMo=t(OEe," (YOSO model)"),OEe.forEach(r),O.forEach(r),eEo=d($r),v2=s($r,"P",{});var XEe=n(v2);oEo=t(XEe,"The model is set in evaluation mode by default using "),Uoe=s(XEe,"CODE",{});var vDt=n(Uoe);tEo=t(vDt,"model.eval()"),vDt.forEach(r),rEo=t(XEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Joe=s(XEe,"CODE",{});var TDt=n(Joe);aEo=t(TDt,"model.train()"),TDt.forEach(r),XEe.forEach(r),sEo=d($r),Yoe=s($r,"P",{});var FDt=n(Yoe);nEo=t(FDt,"Examples:"),FDt.forEach(r),lEo=d($r),m(ey.$$.fragment,$r),$r.forEach(r),zn.forEach(r),OLe=d(i),Zd=s(i,"H2",{class:!0});var W8e=n(Zd);T2=s(W8e,"A",{id:!0,class:!0,href:!0});var CDt=n(T2);Koe=s(CDt,"SPAN",{});var MDt=n(Koe);m(oy.$$.fragment,MDt),MDt.forEach(r),CDt.forEach(r),dEo=d(W8e),Zoe=s(W8e,"SPAN",{});var EDt=n(Zoe);iEo=t(EDt,"AutoModelForNextSentencePrediction"),EDt.forEach(r),W8e.forEach(r),XLe=d(i),Jo=s(i,"DIV",{class:!0});var Wn=n(Jo);m(ty.$$.fragment,Wn),cEo=d(Wn),ei=s(Wn,"P",{});var fX=n(ei);fEo=t(fX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ete=s(fX,"CODE",{});var yDt=n(ete);mEo=t(yDt,"from_pretrained()"),yDt.forEach(r),gEo=t(fX,"class method or the "),ote=s(fX,"CODE",{});var wDt=n(ote);hEo=t(wDt,"from_config()"),wDt.forEach(r),uEo=t(fX,`class
method.`),fX.forEach(r),pEo=d(Wn),ry=s(Wn,"P",{});var Q8e=n(ry);_Eo=t(Q8e,"This class cannot be instantiated directly using "),tte=s(Q8e,"CODE",{});var ADt=n(tte);bEo=t(ADt,"__init__()"),ADt.forEach(r),vEo=t(Q8e," (throws an error)."),Q8e.forEach(r),TEo=d(Wn),Ot=s(Wn,"DIV",{class:!0});var Qn=n(Ot);m(ay.$$.fragment,Qn),FEo=d(Qn),rte=s(Qn,"P",{});var LDt=n(rte);CEo=t(LDt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),LDt.forEach(r),MEo=d(Qn),oi=s(Qn,"P",{});var mX=n(oi);EEo=t(mX,`Note:
Loading a model from its configuration file does `),ate=s(mX,"STRONG",{});var BDt=n(ate);yEo=t(BDt,"not"),BDt.forEach(r),wEo=t(mX,` load the model weights. It only affects the
model\u2019s configuration. Use `),ste=s(mX,"CODE",{});var xDt=n(ste);AEo=t(xDt,"from_pretrained()"),xDt.forEach(r),LEo=t(mX,"to load the model weights."),mX.forEach(r),BEo=d(Qn),nte=s(Qn,"P",{});var kDt=n(nte);xEo=t(kDt,"Examples:"),kDt.forEach(r),kEo=d(Qn),m(sy.$$.fragment,Qn),Qn.forEach(r),REo=d(Wn),je=s(Wn,"DIV",{class:!0});var Ir=n(je);m(ny.$$.fragment,Ir),SEo=d(Ir),lte=s(Ir,"P",{});var RDt=n(lte);PEo=t(RDt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),RDt.forEach(r),$Eo=d(Ir),Oa=s(Ir,"P",{});var GE=n(Oa);IEo=t(GE,"The model class to instantiate is selected based on the "),dte=s(GE,"CODE",{});var SDt=n(dte);jEo=t(SDt,"model_type"),SDt.forEach(r),NEo=t(GE,` property of the config object (either
passed as an argument or loaded from `),ite=s(GE,"CODE",{});var PDt=n(ite);DEo=t(PDt,"pretrained_model_name_or_path"),PDt.forEach(r),qEo=t(GE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cte=s(GE,"CODE",{});var $Dt=n(cte);GEo=t($Dt,"pretrained_model_name_or_path"),$Dt.forEach(r),OEo=t(GE,":"),GE.forEach(r),XEo=d(Ir),oa=s(Ir,"UL",{});var Hn=n(oa);F2=s(Hn,"LI",{});var zEe=n(F2);fte=s(zEe,"STRONG",{});var IDt=n(fte);zEo=t(IDt,"bert"),IDt.forEach(r),VEo=t(zEe," \u2014 "),x$=s(zEe,"A",{href:!0});var jDt=n(x$);WEo=t(jDt,"BertForNextSentencePrediction"),jDt.forEach(r),QEo=t(zEe," (BERT model)"),zEe.forEach(r),HEo=d(Hn),C2=s(Hn,"LI",{});var VEe=n(C2);mte=s(VEe,"STRONG",{});var NDt=n(mte);UEo=t(NDt,"fnet"),NDt.forEach(r),JEo=t(VEe," \u2014 "),k$=s(VEe,"A",{href:!0});var DDt=n(k$);YEo=t(DDt,"FNetForNextSentencePrediction"),DDt.forEach(r),KEo=t(VEe," (FNet model)"),VEe.forEach(r),ZEo=d(Hn),M2=s(Hn,"LI",{});var WEe=n(M2);gte=s(WEe,"STRONG",{});var qDt=n(gte);e3o=t(qDt,"megatron-bert"),qDt.forEach(r),o3o=t(WEe," \u2014 "),R$=s(WEe,"A",{href:!0});var GDt=n(R$);t3o=t(GDt,"MegatronBertForNextSentencePrediction"),GDt.forEach(r),r3o=t(WEe," (MegatronBert model)"),WEe.forEach(r),a3o=d(Hn),E2=s(Hn,"LI",{});var QEe=n(E2);hte=s(QEe,"STRONG",{});var ODt=n(hte);s3o=t(ODt,"mobilebert"),ODt.forEach(r),n3o=t(QEe," \u2014 "),S$=s(QEe,"A",{href:!0});var XDt=n(S$);l3o=t(XDt,"MobileBertForNextSentencePrediction"),XDt.forEach(r),d3o=t(QEe," (MobileBERT model)"),QEe.forEach(r),i3o=d(Hn),y2=s(Hn,"LI",{});var HEe=n(y2);ute=s(HEe,"STRONG",{});var zDt=n(ute);c3o=t(zDt,"qdqbert"),zDt.forEach(r),f3o=t(HEe," \u2014 "),P$=s(HEe,"A",{href:!0});var VDt=n(P$);m3o=t(VDt,"QDQBertForNextSentencePrediction"),VDt.forEach(r),g3o=t(HEe," (QDQBert model)"),HEe.forEach(r),Hn.forEach(r),h3o=d(Ir),w2=s(Ir,"P",{});var UEe=n(w2);u3o=t(UEe,"The model is set in evaluation mode by default using "),pte=s(UEe,"CODE",{});var WDt=n(pte);p3o=t(WDt,"model.eval()"),WDt.forEach(r),_3o=t(UEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_te=s(UEe,"CODE",{});var QDt=n(_te);b3o=t(QDt,"model.train()"),QDt.forEach(r),UEe.forEach(r),v3o=d(Ir),bte=s(Ir,"P",{});var HDt=n(bte);T3o=t(HDt,"Examples:"),HDt.forEach(r),F3o=d(Ir),m(ly.$$.fragment,Ir),Ir.forEach(r),Wn.forEach(r),zLe=d(i),ti=s(i,"H2",{class:!0});var H8e=n(ti);A2=s(H8e,"A",{id:!0,class:!0,href:!0});var UDt=n(A2);vte=s(UDt,"SPAN",{});var JDt=n(vte);m(dy.$$.fragment,JDt),JDt.forEach(r),UDt.forEach(r),C3o=d(H8e),Tte=s(H8e,"SPAN",{});var YDt=n(Tte);M3o=t(YDt,"AutoModelForTokenClassification"),YDt.forEach(r),H8e.forEach(r),VLe=d(i),Yo=s(i,"DIV",{class:!0});var Un=n(Yo);m(iy.$$.fragment,Un),E3o=d(Un),ri=s(Un,"P",{});var gX=n(ri);y3o=t(gX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Fte=s(gX,"CODE",{});var KDt=n(Fte);w3o=t(KDt,"from_pretrained()"),KDt.forEach(r),A3o=t(gX,"class method or the "),Cte=s(gX,"CODE",{});var ZDt=n(Cte);L3o=t(ZDt,"from_config()"),ZDt.forEach(r),B3o=t(gX,`class
method.`),gX.forEach(r),x3o=d(Un),cy=s(Un,"P",{});var U8e=n(cy);k3o=t(U8e,"This class cannot be instantiated directly using "),Mte=s(U8e,"CODE",{});var eqt=n(Mte);R3o=t(eqt,"__init__()"),eqt.forEach(r),S3o=t(U8e," (throws an error)."),U8e.forEach(r),P3o=d(Un),Xt=s(Un,"DIV",{class:!0});var Jn=n(Xt);m(fy.$$.fragment,Jn),$3o=d(Jn),Ete=s(Jn,"P",{});var oqt=n(Ete);I3o=t(oqt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),oqt.forEach(r),j3o=d(Jn),ai=s(Jn,"P",{});var hX=n(ai);N3o=t(hX,`Note:
Loading a model from its configuration file does `),yte=s(hX,"STRONG",{});var tqt=n(yte);D3o=t(tqt,"not"),tqt.forEach(r),q3o=t(hX,` load the model weights. It only affects the
model\u2019s configuration. Use `),wte=s(hX,"CODE",{});var rqt=n(wte);G3o=t(rqt,"from_pretrained()"),rqt.forEach(r),O3o=t(hX,"to load the model weights."),hX.forEach(r),X3o=d(Jn),Ate=s(Jn,"P",{});var aqt=n(Ate);z3o=t(aqt,"Examples:"),aqt.forEach(r),V3o=d(Jn),m(my.$$.fragment,Jn),Jn.forEach(r),W3o=d(Un),Ne=s(Un,"DIV",{class:!0});var jr=n(Ne);m(gy.$$.fragment,jr),Q3o=d(jr),Lte=s(jr,"P",{});var sqt=n(Lte);H3o=t(sqt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sqt.forEach(r),U3o=d(jr),Xa=s(jr,"P",{});var OE=n(Xa);J3o=t(OE,"The model class to instantiate is selected based on the "),Bte=s(OE,"CODE",{});var nqt=n(Bte);Y3o=t(nqt,"model_type"),nqt.forEach(r),K3o=t(OE,` property of the config object (either
passed as an argument or loaded from `),xte=s(OE,"CODE",{});var lqt=n(xte);Z3o=t(lqt,"pretrained_model_name_or_path"),lqt.forEach(r),e5o=t(OE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kte=s(OE,"CODE",{});var dqt=n(kte);o5o=t(dqt,"pretrained_model_name_or_path"),dqt.forEach(r),t5o=t(OE,":"),OE.forEach(r),r5o=d(jr),N=s(jr,"UL",{});var q=n(N);L2=s(q,"LI",{});var JEe=n(L2);Rte=s(JEe,"STRONG",{});var iqt=n(Rte);a5o=t(iqt,"albert"),iqt.forEach(r),s5o=t(JEe," \u2014 "),$$=s(JEe,"A",{href:!0});var cqt=n($$);n5o=t(cqt,"AlbertForTokenClassification"),cqt.forEach(r),l5o=t(JEe," (ALBERT model)"),JEe.forEach(r),d5o=d(q),B2=s(q,"LI",{});var YEe=n(B2);Ste=s(YEe,"STRONG",{});var fqt=n(Ste);i5o=t(fqt,"bert"),fqt.forEach(r),c5o=t(YEe," \u2014 "),I$=s(YEe,"A",{href:!0});var mqt=n(I$);f5o=t(mqt,"BertForTokenClassification"),mqt.forEach(r),m5o=t(YEe," (BERT model)"),YEe.forEach(r),g5o=d(q),x2=s(q,"LI",{});var KEe=n(x2);Pte=s(KEe,"STRONG",{});var gqt=n(Pte);h5o=t(gqt,"big_bird"),gqt.forEach(r),u5o=t(KEe," \u2014 "),j$=s(KEe,"A",{href:!0});var hqt=n(j$);p5o=t(hqt,"BigBirdForTokenClassification"),hqt.forEach(r),_5o=t(KEe," (BigBird model)"),KEe.forEach(r),b5o=d(q),k2=s(q,"LI",{});var ZEe=n(k2);$te=s(ZEe,"STRONG",{});var uqt=n($te);v5o=t(uqt,"camembert"),uqt.forEach(r),T5o=t(ZEe," \u2014 "),N$=s(ZEe,"A",{href:!0});var pqt=n(N$);F5o=t(pqt,"CamembertForTokenClassification"),pqt.forEach(r),C5o=t(ZEe," (CamemBERT model)"),ZEe.forEach(r),M5o=d(q),R2=s(q,"LI",{});var e3e=n(R2);Ite=s(e3e,"STRONG",{});var _qt=n(Ite);E5o=t(_qt,"canine"),_qt.forEach(r),y5o=t(e3e," \u2014 "),D$=s(e3e,"A",{href:!0});var bqt=n(D$);w5o=t(bqt,"CanineForTokenClassification"),bqt.forEach(r),A5o=t(e3e," (Canine model)"),e3e.forEach(r),L5o=d(q),S2=s(q,"LI",{});var o3e=n(S2);jte=s(o3e,"STRONG",{});var vqt=n(jte);B5o=t(vqt,"convbert"),vqt.forEach(r),x5o=t(o3e," \u2014 "),q$=s(o3e,"A",{href:!0});var Tqt=n(q$);k5o=t(Tqt,"ConvBertForTokenClassification"),Tqt.forEach(r),R5o=t(o3e," (ConvBERT model)"),o3e.forEach(r),S5o=d(q),P2=s(q,"LI",{});var t3e=n(P2);Nte=s(t3e,"STRONG",{});var Fqt=n(Nte);P5o=t(Fqt,"deberta"),Fqt.forEach(r),$5o=t(t3e," \u2014 "),G$=s(t3e,"A",{href:!0});var Cqt=n(G$);I5o=t(Cqt,"DebertaForTokenClassification"),Cqt.forEach(r),j5o=t(t3e," (DeBERTa model)"),t3e.forEach(r),N5o=d(q),$2=s(q,"LI",{});var r3e=n($2);Dte=s(r3e,"STRONG",{});var Mqt=n(Dte);D5o=t(Mqt,"deberta-v2"),Mqt.forEach(r),q5o=t(r3e," \u2014 "),O$=s(r3e,"A",{href:!0});var Eqt=n(O$);G5o=t(Eqt,"DebertaV2ForTokenClassification"),Eqt.forEach(r),O5o=t(r3e," (DeBERTa-v2 model)"),r3e.forEach(r),X5o=d(q),I2=s(q,"LI",{});var a3e=n(I2);qte=s(a3e,"STRONG",{});var yqt=n(qte);z5o=t(yqt,"distilbert"),yqt.forEach(r),V5o=t(a3e," \u2014 "),X$=s(a3e,"A",{href:!0});var wqt=n(X$);W5o=t(wqt,"DistilBertForTokenClassification"),wqt.forEach(r),Q5o=t(a3e," (DistilBERT model)"),a3e.forEach(r),H5o=d(q),j2=s(q,"LI",{});var s3e=n(j2);Gte=s(s3e,"STRONG",{});var Aqt=n(Gte);U5o=t(Aqt,"electra"),Aqt.forEach(r),J5o=t(s3e," \u2014 "),z$=s(s3e,"A",{href:!0});var Lqt=n(z$);Y5o=t(Lqt,"ElectraForTokenClassification"),Lqt.forEach(r),K5o=t(s3e," (ELECTRA model)"),s3e.forEach(r),Z5o=d(q),N2=s(q,"LI",{});var n3e=n(N2);Ote=s(n3e,"STRONG",{});var Bqt=n(Ote);eyo=t(Bqt,"flaubert"),Bqt.forEach(r),oyo=t(n3e," \u2014 "),V$=s(n3e,"A",{href:!0});var xqt=n(V$);tyo=t(xqt,"FlaubertForTokenClassification"),xqt.forEach(r),ryo=t(n3e," (FlauBERT model)"),n3e.forEach(r),ayo=d(q),D2=s(q,"LI",{});var l3e=n(D2);Xte=s(l3e,"STRONG",{});var kqt=n(Xte);syo=t(kqt,"fnet"),kqt.forEach(r),nyo=t(l3e," \u2014 "),W$=s(l3e,"A",{href:!0});var Rqt=n(W$);lyo=t(Rqt,"FNetForTokenClassification"),Rqt.forEach(r),dyo=t(l3e," (FNet model)"),l3e.forEach(r),iyo=d(q),q2=s(q,"LI",{});var d3e=n(q2);zte=s(d3e,"STRONG",{});var Sqt=n(zte);cyo=t(Sqt,"funnel"),Sqt.forEach(r),fyo=t(d3e," \u2014 "),Q$=s(d3e,"A",{href:!0});var Pqt=n(Q$);myo=t(Pqt,"FunnelForTokenClassification"),Pqt.forEach(r),gyo=t(d3e," (Funnel Transformer model)"),d3e.forEach(r),hyo=d(q),G2=s(q,"LI",{});var i3e=n(G2);Vte=s(i3e,"STRONG",{});var $qt=n(Vte);uyo=t($qt,"gpt2"),$qt.forEach(r),pyo=t(i3e," \u2014 "),H$=s(i3e,"A",{href:!0});var Iqt=n(H$);_yo=t(Iqt,"GPT2ForTokenClassification"),Iqt.forEach(r),byo=t(i3e," (OpenAI GPT-2 model)"),i3e.forEach(r),vyo=d(q),O2=s(q,"LI",{});var c3e=n(O2);Wte=s(c3e,"STRONG",{});var jqt=n(Wte);Tyo=t(jqt,"ibert"),jqt.forEach(r),Fyo=t(c3e," \u2014 "),U$=s(c3e,"A",{href:!0});var Nqt=n(U$);Cyo=t(Nqt,"IBertForTokenClassification"),Nqt.forEach(r),Myo=t(c3e," (I-BERT model)"),c3e.forEach(r),Eyo=d(q),X2=s(q,"LI",{});var f3e=n(X2);Qte=s(f3e,"STRONG",{});var Dqt=n(Qte);yyo=t(Dqt,"layoutlm"),Dqt.forEach(r),wyo=t(f3e," \u2014 "),J$=s(f3e,"A",{href:!0});var qqt=n(J$);Ayo=t(qqt,"LayoutLMForTokenClassification"),qqt.forEach(r),Lyo=t(f3e," (LayoutLM model)"),f3e.forEach(r),Byo=d(q),z2=s(q,"LI",{});var m3e=n(z2);Hte=s(m3e,"STRONG",{});var Gqt=n(Hte);xyo=t(Gqt,"layoutlmv2"),Gqt.forEach(r),kyo=t(m3e," \u2014 "),Y$=s(m3e,"A",{href:!0});var Oqt=n(Y$);Ryo=t(Oqt,"LayoutLMv2ForTokenClassification"),Oqt.forEach(r),Syo=t(m3e," (LayoutLMv2 model)"),m3e.forEach(r),Pyo=d(q),V2=s(q,"LI",{});var g3e=n(V2);Ute=s(g3e,"STRONG",{});var Xqt=n(Ute);$yo=t(Xqt,"longformer"),Xqt.forEach(r),Iyo=t(g3e," \u2014 "),K$=s(g3e,"A",{href:!0});var zqt=n(K$);jyo=t(zqt,"LongformerForTokenClassification"),zqt.forEach(r),Nyo=t(g3e," (Longformer model)"),g3e.forEach(r),Dyo=d(q),W2=s(q,"LI",{});var h3e=n(W2);Jte=s(h3e,"STRONG",{});var Vqt=n(Jte);qyo=t(Vqt,"megatron-bert"),Vqt.forEach(r),Gyo=t(h3e," \u2014 "),Z$=s(h3e,"A",{href:!0});var Wqt=n(Z$);Oyo=t(Wqt,"MegatronBertForTokenClassification"),Wqt.forEach(r),Xyo=t(h3e," (MegatronBert model)"),h3e.forEach(r),zyo=d(q),Q2=s(q,"LI",{});var u3e=n(Q2);Yte=s(u3e,"STRONG",{});var Qqt=n(Yte);Vyo=t(Qqt,"mobilebert"),Qqt.forEach(r),Wyo=t(u3e," \u2014 "),eI=s(u3e,"A",{href:!0});var Hqt=n(eI);Qyo=t(Hqt,"MobileBertForTokenClassification"),Hqt.forEach(r),Hyo=t(u3e," (MobileBERT model)"),u3e.forEach(r),Uyo=d(q),H2=s(q,"LI",{});var p3e=n(H2);Kte=s(p3e,"STRONG",{});var Uqt=n(Kte);Jyo=t(Uqt,"mpnet"),Uqt.forEach(r),Yyo=t(p3e," \u2014 "),oI=s(p3e,"A",{href:!0});var Jqt=n(oI);Kyo=t(Jqt,"MPNetForTokenClassification"),Jqt.forEach(r),Zyo=t(p3e," (MPNet model)"),p3e.forEach(r),ewo=d(q),U2=s(q,"LI",{});var _3e=n(U2);Zte=s(_3e,"STRONG",{});var Yqt=n(Zte);owo=t(Yqt,"nystromformer"),Yqt.forEach(r),two=t(_3e," \u2014 "),tI=s(_3e,"A",{href:!0});var Kqt=n(tI);rwo=t(Kqt,"NystromformerForTokenClassification"),Kqt.forEach(r),awo=t(_3e," (Nystromformer model)"),_3e.forEach(r),swo=d(q),J2=s(q,"LI",{});var b3e=n(J2);ere=s(b3e,"STRONG",{});var Zqt=n(ere);nwo=t(Zqt,"qdqbert"),Zqt.forEach(r),lwo=t(b3e," \u2014 "),rI=s(b3e,"A",{href:!0});var eGt=n(rI);dwo=t(eGt,"QDQBertForTokenClassification"),eGt.forEach(r),iwo=t(b3e," (QDQBert model)"),b3e.forEach(r),cwo=d(q),Y2=s(q,"LI",{});var v3e=n(Y2);ore=s(v3e,"STRONG",{});var oGt=n(ore);fwo=t(oGt,"rembert"),oGt.forEach(r),mwo=t(v3e," \u2014 "),aI=s(v3e,"A",{href:!0});var tGt=n(aI);gwo=t(tGt,"RemBertForTokenClassification"),tGt.forEach(r),hwo=t(v3e," (RemBERT model)"),v3e.forEach(r),uwo=d(q),K2=s(q,"LI",{});var T3e=n(K2);tre=s(T3e,"STRONG",{});var rGt=n(tre);pwo=t(rGt,"roberta"),rGt.forEach(r),_wo=t(T3e," \u2014 "),sI=s(T3e,"A",{href:!0});var aGt=n(sI);bwo=t(aGt,"RobertaForTokenClassification"),aGt.forEach(r),vwo=t(T3e," (RoBERTa model)"),T3e.forEach(r),Two=d(q),Z2=s(q,"LI",{});var F3e=n(Z2);rre=s(F3e,"STRONG",{});var sGt=n(rre);Fwo=t(sGt,"roformer"),sGt.forEach(r),Cwo=t(F3e," \u2014 "),nI=s(F3e,"A",{href:!0});var nGt=n(nI);Mwo=t(nGt,"RoFormerForTokenClassification"),nGt.forEach(r),Ewo=t(F3e," (RoFormer model)"),F3e.forEach(r),ywo=d(q),ev=s(q,"LI",{});var C3e=n(ev);are=s(C3e,"STRONG",{});var lGt=n(are);wwo=t(lGt,"squeezebert"),lGt.forEach(r),Awo=t(C3e," \u2014 "),lI=s(C3e,"A",{href:!0});var dGt=n(lI);Lwo=t(dGt,"SqueezeBertForTokenClassification"),dGt.forEach(r),Bwo=t(C3e," (SqueezeBERT model)"),C3e.forEach(r),xwo=d(q),ov=s(q,"LI",{});var M3e=n(ov);sre=s(M3e,"STRONG",{});var iGt=n(sre);kwo=t(iGt,"xlm"),iGt.forEach(r),Rwo=t(M3e," \u2014 "),dI=s(M3e,"A",{href:!0});var cGt=n(dI);Swo=t(cGt,"XLMForTokenClassification"),cGt.forEach(r),Pwo=t(M3e," (XLM model)"),M3e.forEach(r),$wo=d(q),tv=s(q,"LI",{});var E3e=n(tv);nre=s(E3e,"STRONG",{});var fGt=n(nre);Iwo=t(fGt,"xlm-roberta"),fGt.forEach(r),jwo=t(E3e," \u2014 "),iI=s(E3e,"A",{href:!0});var mGt=n(iI);Nwo=t(mGt,"XLMRobertaForTokenClassification"),mGt.forEach(r),Dwo=t(E3e," (XLM-RoBERTa model)"),E3e.forEach(r),qwo=d(q),rv=s(q,"LI",{});var y3e=n(rv);lre=s(y3e,"STRONG",{});var gGt=n(lre);Gwo=t(gGt,"xlm-roberta-xl"),gGt.forEach(r),Owo=t(y3e," \u2014 "),cI=s(y3e,"A",{href:!0});var hGt=n(cI);Xwo=t(hGt,"XLMRobertaXLForTokenClassification"),hGt.forEach(r),zwo=t(y3e," (XLM-RoBERTa-XL model)"),y3e.forEach(r),Vwo=d(q),av=s(q,"LI",{});var w3e=n(av);dre=s(w3e,"STRONG",{});var uGt=n(dre);Wwo=t(uGt,"xlnet"),uGt.forEach(r),Qwo=t(w3e," \u2014 "),fI=s(w3e,"A",{href:!0});var pGt=n(fI);Hwo=t(pGt,"XLNetForTokenClassification"),pGt.forEach(r),Uwo=t(w3e," (XLNet model)"),w3e.forEach(r),Jwo=d(q),sv=s(q,"LI",{});var A3e=n(sv);ire=s(A3e,"STRONG",{});var _Gt=n(ire);Ywo=t(_Gt,"yoso"),_Gt.forEach(r),Kwo=t(A3e," \u2014 "),mI=s(A3e,"A",{href:!0});var bGt=n(mI);Zwo=t(bGt,"YosoForTokenClassification"),bGt.forEach(r),eAo=t(A3e," (YOSO model)"),A3e.forEach(r),q.forEach(r),oAo=d(jr),nv=s(jr,"P",{});var L3e=n(nv);tAo=t(L3e,"The model is set in evaluation mode by default using "),cre=s(L3e,"CODE",{});var vGt=n(cre);rAo=t(vGt,"model.eval()"),vGt.forEach(r),aAo=t(L3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fre=s(L3e,"CODE",{});var TGt=n(fre);sAo=t(TGt,"model.train()"),TGt.forEach(r),L3e.forEach(r),nAo=d(jr),mre=s(jr,"P",{});var FGt=n(mre);lAo=t(FGt,"Examples:"),FGt.forEach(r),dAo=d(jr),m(hy.$$.fragment,jr),jr.forEach(r),Un.forEach(r),WLe=d(i),si=s(i,"H2",{class:!0});var J8e=n(si);lv=s(J8e,"A",{id:!0,class:!0,href:!0});var CGt=n(lv);gre=s(CGt,"SPAN",{});var MGt=n(gre);m(uy.$$.fragment,MGt),MGt.forEach(r),CGt.forEach(r),iAo=d(J8e),hre=s(J8e,"SPAN",{});var EGt=n(hre);cAo=t(EGt,"AutoModelForQuestionAnswering"),EGt.forEach(r),J8e.forEach(r),QLe=d(i),Ko=s(i,"DIV",{class:!0});var Yn=n(Ko);m(py.$$.fragment,Yn),fAo=d(Yn),ni=s(Yn,"P",{});var uX=n(ni);mAo=t(uX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ure=s(uX,"CODE",{});var yGt=n(ure);gAo=t(yGt,"from_pretrained()"),yGt.forEach(r),hAo=t(uX,"class method or the "),pre=s(uX,"CODE",{});var wGt=n(pre);uAo=t(wGt,"from_config()"),wGt.forEach(r),pAo=t(uX,`class
method.`),uX.forEach(r),_Ao=d(Yn),_y=s(Yn,"P",{});var Y8e=n(_y);bAo=t(Y8e,"This class cannot be instantiated directly using "),_re=s(Y8e,"CODE",{});var AGt=n(_re);vAo=t(AGt,"__init__()"),AGt.forEach(r),TAo=t(Y8e," (throws an error)."),Y8e.forEach(r),FAo=d(Yn),zt=s(Yn,"DIV",{class:!0});var Kn=n(zt);m(by.$$.fragment,Kn),CAo=d(Kn),bre=s(Kn,"P",{});var LGt=n(bre);MAo=t(LGt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),LGt.forEach(r),EAo=d(Kn),li=s(Kn,"P",{});var pX=n(li);yAo=t(pX,`Note:
Loading a model from its configuration file does `),vre=s(pX,"STRONG",{});var BGt=n(vre);wAo=t(BGt,"not"),BGt.forEach(r),AAo=t(pX,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tre=s(pX,"CODE",{});var xGt=n(Tre);LAo=t(xGt,"from_pretrained()"),xGt.forEach(r),BAo=t(pX,"to load the model weights."),pX.forEach(r),xAo=d(Kn),Fre=s(Kn,"P",{});var kGt=n(Fre);kAo=t(kGt,"Examples:"),kGt.forEach(r),RAo=d(Kn),m(vy.$$.fragment,Kn),Kn.forEach(r),SAo=d(Yn),De=s(Yn,"DIV",{class:!0});var Nr=n(De);m(Ty.$$.fragment,Nr),PAo=d(Nr),Cre=s(Nr,"P",{});var RGt=n(Cre);$Ao=t(RGt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),RGt.forEach(r),IAo=d(Nr),za=s(Nr,"P",{});var XE=n(za);jAo=t(XE,"The model class to instantiate is selected based on the "),Mre=s(XE,"CODE",{});var SGt=n(Mre);NAo=t(SGt,"model_type"),SGt.forEach(r),DAo=t(XE,` property of the config object (either
passed as an argument or loaded from `),Ere=s(XE,"CODE",{});var PGt=n(Ere);qAo=t(PGt,"pretrained_model_name_or_path"),PGt.forEach(r),GAo=t(XE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yre=s(XE,"CODE",{});var $Gt=n(yre);OAo=t($Gt,"pretrained_model_name_or_path"),$Gt.forEach(r),XAo=t(XE,":"),XE.forEach(r),zAo=d(Nr),R=s(Nr,"UL",{});var P=n(R);dv=s(P,"LI",{});var B3e=n(dv);wre=s(B3e,"STRONG",{});var IGt=n(wre);VAo=t(IGt,"albert"),IGt.forEach(r),WAo=t(B3e," \u2014 "),gI=s(B3e,"A",{href:!0});var jGt=n(gI);QAo=t(jGt,"AlbertForQuestionAnswering"),jGt.forEach(r),HAo=t(B3e," (ALBERT model)"),B3e.forEach(r),UAo=d(P),iv=s(P,"LI",{});var x3e=n(iv);Are=s(x3e,"STRONG",{});var NGt=n(Are);JAo=t(NGt,"bart"),NGt.forEach(r),YAo=t(x3e," \u2014 "),hI=s(x3e,"A",{href:!0});var DGt=n(hI);KAo=t(DGt,"BartForQuestionAnswering"),DGt.forEach(r),ZAo=t(x3e," (BART model)"),x3e.forEach(r),e0o=d(P),cv=s(P,"LI",{});var k3e=n(cv);Lre=s(k3e,"STRONG",{});var qGt=n(Lre);o0o=t(qGt,"bert"),qGt.forEach(r),t0o=t(k3e," \u2014 "),uI=s(k3e,"A",{href:!0});var GGt=n(uI);r0o=t(GGt,"BertForQuestionAnswering"),GGt.forEach(r),a0o=t(k3e," (BERT model)"),k3e.forEach(r),s0o=d(P),fv=s(P,"LI",{});var R3e=n(fv);Bre=s(R3e,"STRONG",{});var OGt=n(Bre);n0o=t(OGt,"big_bird"),OGt.forEach(r),l0o=t(R3e," \u2014 "),pI=s(R3e,"A",{href:!0});var XGt=n(pI);d0o=t(XGt,"BigBirdForQuestionAnswering"),XGt.forEach(r),i0o=t(R3e," (BigBird model)"),R3e.forEach(r),c0o=d(P),mv=s(P,"LI",{});var S3e=n(mv);xre=s(S3e,"STRONG",{});var zGt=n(xre);f0o=t(zGt,"bigbird_pegasus"),zGt.forEach(r),m0o=t(S3e," \u2014 "),_I=s(S3e,"A",{href:!0});var VGt=n(_I);g0o=t(VGt,"BigBirdPegasusForQuestionAnswering"),VGt.forEach(r),h0o=t(S3e," (BigBirdPegasus model)"),S3e.forEach(r),u0o=d(P),gv=s(P,"LI",{});var P3e=n(gv);kre=s(P3e,"STRONG",{});var WGt=n(kre);p0o=t(WGt,"camembert"),WGt.forEach(r),_0o=t(P3e," \u2014 "),bI=s(P3e,"A",{href:!0});var QGt=n(bI);b0o=t(QGt,"CamembertForQuestionAnswering"),QGt.forEach(r),v0o=t(P3e," (CamemBERT model)"),P3e.forEach(r),T0o=d(P),hv=s(P,"LI",{});var $3e=n(hv);Rre=s($3e,"STRONG",{});var HGt=n(Rre);F0o=t(HGt,"canine"),HGt.forEach(r),C0o=t($3e," \u2014 "),vI=s($3e,"A",{href:!0});var UGt=n(vI);M0o=t(UGt,"CanineForQuestionAnswering"),UGt.forEach(r),E0o=t($3e," (Canine model)"),$3e.forEach(r),y0o=d(P),uv=s(P,"LI",{});var I3e=n(uv);Sre=s(I3e,"STRONG",{});var JGt=n(Sre);w0o=t(JGt,"convbert"),JGt.forEach(r),A0o=t(I3e," \u2014 "),TI=s(I3e,"A",{href:!0});var YGt=n(TI);L0o=t(YGt,"ConvBertForQuestionAnswering"),YGt.forEach(r),B0o=t(I3e," (ConvBERT model)"),I3e.forEach(r),x0o=d(P),pv=s(P,"LI",{});var j3e=n(pv);Pre=s(j3e,"STRONG",{});var KGt=n(Pre);k0o=t(KGt,"deberta"),KGt.forEach(r),R0o=t(j3e," \u2014 "),FI=s(j3e,"A",{href:!0});var ZGt=n(FI);S0o=t(ZGt,"DebertaForQuestionAnswering"),ZGt.forEach(r),P0o=t(j3e," (DeBERTa model)"),j3e.forEach(r),$0o=d(P),_v=s(P,"LI",{});var N3e=n(_v);$re=s(N3e,"STRONG",{});var eOt=n($re);I0o=t(eOt,"deberta-v2"),eOt.forEach(r),j0o=t(N3e," \u2014 "),CI=s(N3e,"A",{href:!0});var oOt=n(CI);N0o=t(oOt,"DebertaV2ForQuestionAnswering"),oOt.forEach(r),D0o=t(N3e," (DeBERTa-v2 model)"),N3e.forEach(r),q0o=d(P),bv=s(P,"LI",{});var D3e=n(bv);Ire=s(D3e,"STRONG",{});var tOt=n(Ire);G0o=t(tOt,"distilbert"),tOt.forEach(r),O0o=t(D3e," \u2014 "),MI=s(D3e,"A",{href:!0});var rOt=n(MI);X0o=t(rOt,"DistilBertForQuestionAnswering"),rOt.forEach(r),z0o=t(D3e," (DistilBERT model)"),D3e.forEach(r),V0o=d(P),vv=s(P,"LI",{});var q3e=n(vv);jre=s(q3e,"STRONG",{});var aOt=n(jre);W0o=t(aOt,"electra"),aOt.forEach(r),Q0o=t(q3e," \u2014 "),EI=s(q3e,"A",{href:!0});var sOt=n(EI);H0o=t(sOt,"ElectraForQuestionAnswering"),sOt.forEach(r),U0o=t(q3e," (ELECTRA model)"),q3e.forEach(r),J0o=d(P),Tv=s(P,"LI",{});var G3e=n(Tv);Nre=s(G3e,"STRONG",{});var nOt=n(Nre);Y0o=t(nOt,"flaubert"),nOt.forEach(r),K0o=t(G3e," \u2014 "),yI=s(G3e,"A",{href:!0});var lOt=n(yI);Z0o=t(lOt,"FlaubertForQuestionAnsweringSimple"),lOt.forEach(r),e6o=t(G3e," (FlauBERT model)"),G3e.forEach(r),o6o=d(P),Fv=s(P,"LI",{});var O3e=n(Fv);Dre=s(O3e,"STRONG",{});var dOt=n(Dre);t6o=t(dOt,"fnet"),dOt.forEach(r),r6o=t(O3e," \u2014 "),wI=s(O3e,"A",{href:!0});var iOt=n(wI);a6o=t(iOt,"FNetForQuestionAnswering"),iOt.forEach(r),s6o=t(O3e," (FNet model)"),O3e.forEach(r),n6o=d(P),Cv=s(P,"LI",{});var X3e=n(Cv);qre=s(X3e,"STRONG",{});var cOt=n(qre);l6o=t(cOt,"funnel"),cOt.forEach(r),d6o=t(X3e," \u2014 "),AI=s(X3e,"A",{href:!0});var fOt=n(AI);i6o=t(fOt,"FunnelForQuestionAnswering"),fOt.forEach(r),c6o=t(X3e," (Funnel Transformer model)"),X3e.forEach(r),f6o=d(P),Mv=s(P,"LI",{});var z3e=n(Mv);Gre=s(z3e,"STRONG",{});var mOt=n(Gre);m6o=t(mOt,"gptj"),mOt.forEach(r),g6o=t(z3e," \u2014 "),LI=s(z3e,"A",{href:!0});var gOt=n(LI);h6o=t(gOt,"GPTJForQuestionAnswering"),gOt.forEach(r),u6o=t(z3e," (GPT-J model)"),z3e.forEach(r),p6o=d(P),Ev=s(P,"LI",{});var V3e=n(Ev);Ore=s(V3e,"STRONG",{});var hOt=n(Ore);_6o=t(hOt,"ibert"),hOt.forEach(r),b6o=t(V3e," \u2014 "),BI=s(V3e,"A",{href:!0});var uOt=n(BI);v6o=t(uOt,"IBertForQuestionAnswering"),uOt.forEach(r),T6o=t(V3e," (I-BERT model)"),V3e.forEach(r),F6o=d(P),yv=s(P,"LI",{});var W3e=n(yv);Xre=s(W3e,"STRONG",{});var pOt=n(Xre);C6o=t(pOt,"layoutlmv2"),pOt.forEach(r),M6o=t(W3e," \u2014 "),xI=s(W3e,"A",{href:!0});var _Ot=n(xI);E6o=t(_Ot,"LayoutLMv2ForQuestionAnswering"),_Ot.forEach(r),y6o=t(W3e," (LayoutLMv2 model)"),W3e.forEach(r),w6o=d(P),wv=s(P,"LI",{});var Q3e=n(wv);zre=s(Q3e,"STRONG",{});var bOt=n(zre);A6o=t(bOt,"led"),bOt.forEach(r),L6o=t(Q3e," \u2014 "),kI=s(Q3e,"A",{href:!0});var vOt=n(kI);B6o=t(vOt,"LEDForQuestionAnswering"),vOt.forEach(r),x6o=t(Q3e," (LED model)"),Q3e.forEach(r),k6o=d(P),Av=s(P,"LI",{});var H3e=n(Av);Vre=s(H3e,"STRONG",{});var TOt=n(Vre);R6o=t(TOt,"longformer"),TOt.forEach(r),S6o=t(H3e," \u2014 "),RI=s(H3e,"A",{href:!0});var FOt=n(RI);P6o=t(FOt,"LongformerForQuestionAnswering"),FOt.forEach(r),$6o=t(H3e," (Longformer model)"),H3e.forEach(r),I6o=d(P),Lv=s(P,"LI",{});var U3e=n(Lv);Wre=s(U3e,"STRONG",{});var COt=n(Wre);j6o=t(COt,"lxmert"),COt.forEach(r),N6o=t(U3e," \u2014 "),SI=s(U3e,"A",{href:!0});var MOt=n(SI);D6o=t(MOt,"LxmertForQuestionAnswering"),MOt.forEach(r),q6o=t(U3e," (LXMERT model)"),U3e.forEach(r),G6o=d(P),Bv=s(P,"LI",{});var J3e=n(Bv);Qre=s(J3e,"STRONG",{});var EOt=n(Qre);O6o=t(EOt,"mbart"),EOt.forEach(r),X6o=t(J3e," \u2014 "),PI=s(J3e,"A",{href:!0});var yOt=n(PI);z6o=t(yOt,"MBartForQuestionAnswering"),yOt.forEach(r),V6o=t(J3e," (mBART model)"),J3e.forEach(r),W6o=d(P),xv=s(P,"LI",{});var Y3e=n(xv);Hre=s(Y3e,"STRONG",{});var wOt=n(Hre);Q6o=t(wOt,"megatron-bert"),wOt.forEach(r),H6o=t(Y3e," \u2014 "),$I=s(Y3e,"A",{href:!0});var AOt=n($I);U6o=t(AOt,"MegatronBertForQuestionAnswering"),AOt.forEach(r),J6o=t(Y3e," (MegatronBert model)"),Y3e.forEach(r),Y6o=d(P),kv=s(P,"LI",{});var K3e=n(kv);Ure=s(K3e,"STRONG",{});var LOt=n(Ure);K6o=t(LOt,"mobilebert"),LOt.forEach(r),Z6o=t(K3e," \u2014 "),II=s(K3e,"A",{href:!0});var BOt=n(II);eLo=t(BOt,"MobileBertForQuestionAnswering"),BOt.forEach(r),oLo=t(K3e," (MobileBERT model)"),K3e.forEach(r),tLo=d(P),Rv=s(P,"LI",{});var Z3e=n(Rv);Jre=s(Z3e,"STRONG",{});var xOt=n(Jre);rLo=t(xOt,"mpnet"),xOt.forEach(r),aLo=t(Z3e," \u2014 "),jI=s(Z3e,"A",{href:!0});var kOt=n(jI);sLo=t(kOt,"MPNetForQuestionAnswering"),kOt.forEach(r),nLo=t(Z3e," (MPNet model)"),Z3e.forEach(r),lLo=d(P),Sv=s(P,"LI",{});var e5e=n(Sv);Yre=s(e5e,"STRONG",{});var ROt=n(Yre);dLo=t(ROt,"nystromformer"),ROt.forEach(r),iLo=t(e5e," \u2014 "),NI=s(e5e,"A",{href:!0});var SOt=n(NI);cLo=t(SOt,"NystromformerForQuestionAnswering"),SOt.forEach(r),fLo=t(e5e," (Nystromformer model)"),e5e.forEach(r),mLo=d(P),Pv=s(P,"LI",{});var o5e=n(Pv);Kre=s(o5e,"STRONG",{});var POt=n(Kre);gLo=t(POt,"qdqbert"),POt.forEach(r),hLo=t(o5e," \u2014 "),DI=s(o5e,"A",{href:!0});var $Ot=n(DI);uLo=t($Ot,"QDQBertForQuestionAnswering"),$Ot.forEach(r),pLo=t(o5e," (QDQBert model)"),o5e.forEach(r),_Lo=d(P),$v=s(P,"LI",{});var t5e=n($v);Zre=s(t5e,"STRONG",{});var IOt=n(Zre);bLo=t(IOt,"reformer"),IOt.forEach(r),vLo=t(t5e," \u2014 "),qI=s(t5e,"A",{href:!0});var jOt=n(qI);TLo=t(jOt,"ReformerForQuestionAnswering"),jOt.forEach(r),FLo=t(t5e," (Reformer model)"),t5e.forEach(r),CLo=d(P),Iv=s(P,"LI",{});var r5e=n(Iv);eae=s(r5e,"STRONG",{});var NOt=n(eae);MLo=t(NOt,"rembert"),NOt.forEach(r),ELo=t(r5e," \u2014 "),GI=s(r5e,"A",{href:!0});var DOt=n(GI);yLo=t(DOt,"RemBertForQuestionAnswering"),DOt.forEach(r),wLo=t(r5e," (RemBERT model)"),r5e.forEach(r),ALo=d(P),jv=s(P,"LI",{});var a5e=n(jv);oae=s(a5e,"STRONG",{});var qOt=n(oae);LLo=t(qOt,"roberta"),qOt.forEach(r),BLo=t(a5e," \u2014 "),OI=s(a5e,"A",{href:!0});var GOt=n(OI);xLo=t(GOt,"RobertaForQuestionAnswering"),GOt.forEach(r),kLo=t(a5e," (RoBERTa model)"),a5e.forEach(r),RLo=d(P),Nv=s(P,"LI",{});var s5e=n(Nv);tae=s(s5e,"STRONG",{});var OOt=n(tae);SLo=t(OOt,"roformer"),OOt.forEach(r),PLo=t(s5e," \u2014 "),XI=s(s5e,"A",{href:!0});var XOt=n(XI);$Lo=t(XOt,"RoFormerForQuestionAnswering"),XOt.forEach(r),ILo=t(s5e," (RoFormer model)"),s5e.forEach(r),jLo=d(P),Dv=s(P,"LI",{});var n5e=n(Dv);rae=s(n5e,"STRONG",{});var zOt=n(rae);NLo=t(zOt,"splinter"),zOt.forEach(r),DLo=t(n5e," \u2014 "),zI=s(n5e,"A",{href:!0});var VOt=n(zI);qLo=t(VOt,"SplinterForQuestionAnswering"),VOt.forEach(r),GLo=t(n5e," (Splinter model)"),n5e.forEach(r),OLo=d(P),qv=s(P,"LI",{});var l5e=n(qv);aae=s(l5e,"STRONG",{});var WOt=n(aae);XLo=t(WOt,"squeezebert"),WOt.forEach(r),zLo=t(l5e," \u2014 "),VI=s(l5e,"A",{href:!0});var QOt=n(VI);VLo=t(QOt,"SqueezeBertForQuestionAnswering"),QOt.forEach(r),WLo=t(l5e," (SqueezeBERT model)"),l5e.forEach(r),QLo=d(P),Gv=s(P,"LI",{});var d5e=n(Gv);sae=s(d5e,"STRONG",{});var HOt=n(sae);HLo=t(HOt,"xlm"),HOt.forEach(r),ULo=t(d5e," \u2014 "),WI=s(d5e,"A",{href:!0});var UOt=n(WI);JLo=t(UOt,"XLMForQuestionAnsweringSimple"),UOt.forEach(r),YLo=t(d5e," (XLM model)"),d5e.forEach(r),KLo=d(P),Ov=s(P,"LI",{});var i5e=n(Ov);nae=s(i5e,"STRONG",{});var JOt=n(nae);ZLo=t(JOt,"xlm-roberta"),JOt.forEach(r),e7o=t(i5e," \u2014 "),QI=s(i5e,"A",{href:!0});var YOt=n(QI);o7o=t(YOt,"XLMRobertaForQuestionAnswering"),YOt.forEach(r),t7o=t(i5e," (XLM-RoBERTa model)"),i5e.forEach(r),r7o=d(P),Xv=s(P,"LI",{});var c5e=n(Xv);lae=s(c5e,"STRONG",{});var KOt=n(lae);a7o=t(KOt,"xlm-roberta-xl"),KOt.forEach(r),s7o=t(c5e," \u2014 "),HI=s(c5e,"A",{href:!0});var ZOt=n(HI);n7o=t(ZOt,"XLMRobertaXLForQuestionAnswering"),ZOt.forEach(r),l7o=t(c5e," (XLM-RoBERTa-XL model)"),c5e.forEach(r),d7o=d(P),zv=s(P,"LI",{});var f5e=n(zv);dae=s(f5e,"STRONG",{});var eXt=n(dae);i7o=t(eXt,"xlnet"),eXt.forEach(r),c7o=t(f5e," \u2014 "),UI=s(f5e,"A",{href:!0});var oXt=n(UI);f7o=t(oXt,"XLNetForQuestionAnsweringSimple"),oXt.forEach(r),m7o=t(f5e," (XLNet model)"),f5e.forEach(r),g7o=d(P),Vv=s(P,"LI",{});var m5e=n(Vv);iae=s(m5e,"STRONG",{});var tXt=n(iae);h7o=t(tXt,"yoso"),tXt.forEach(r),u7o=t(m5e," \u2014 "),JI=s(m5e,"A",{href:!0});var rXt=n(JI);p7o=t(rXt,"YosoForQuestionAnswering"),rXt.forEach(r),_7o=t(m5e," (YOSO model)"),m5e.forEach(r),P.forEach(r),b7o=d(Nr),Wv=s(Nr,"P",{});var g5e=n(Wv);v7o=t(g5e,"The model is set in evaluation mode by default using "),cae=s(g5e,"CODE",{});var aXt=n(cae);T7o=t(aXt,"model.eval()"),aXt.forEach(r),F7o=t(g5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fae=s(g5e,"CODE",{});var sXt=n(fae);C7o=t(sXt,"model.train()"),sXt.forEach(r),g5e.forEach(r),M7o=d(Nr),mae=s(Nr,"P",{});var nXt=n(mae);E7o=t(nXt,"Examples:"),nXt.forEach(r),y7o=d(Nr),m(Fy.$$.fragment,Nr),Nr.forEach(r),Yn.forEach(r),HLe=d(i),di=s(i,"H2",{class:!0});var K8e=n(di);Qv=s(K8e,"A",{id:!0,class:!0,href:!0});var lXt=n(Qv);gae=s(lXt,"SPAN",{});var dXt=n(gae);m(Cy.$$.fragment,dXt),dXt.forEach(r),lXt.forEach(r),w7o=d(K8e),hae=s(K8e,"SPAN",{});var iXt=n(hae);A7o=t(iXt,"AutoModelForTableQuestionAnswering"),iXt.forEach(r),K8e.forEach(r),ULe=d(i),Zo=s(i,"DIV",{class:!0});var Zn=n(Zo);m(My.$$.fragment,Zn),L7o=d(Zn),ii=s(Zn,"P",{});var _X=n(ii);B7o=t(_X,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uae=s(_X,"CODE",{});var cXt=n(uae);x7o=t(cXt,"from_pretrained()"),cXt.forEach(r),k7o=t(_X,"class method or the "),pae=s(_X,"CODE",{});var fXt=n(pae);R7o=t(fXt,"from_config()"),fXt.forEach(r),S7o=t(_X,`class
method.`),_X.forEach(r),P7o=d(Zn),Ey=s(Zn,"P",{});var Z8e=n(Ey);$7o=t(Z8e,"This class cannot be instantiated directly using "),_ae=s(Z8e,"CODE",{});var mXt=n(_ae);I7o=t(mXt,"__init__()"),mXt.forEach(r),j7o=t(Z8e," (throws an error)."),Z8e.forEach(r),N7o=d(Zn),Vt=s(Zn,"DIV",{class:!0});var el=n(Vt);m(yy.$$.fragment,el),D7o=d(el),bae=s(el,"P",{});var gXt=n(bae);q7o=t(gXt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),gXt.forEach(r),G7o=d(el),ci=s(el,"P",{});var bX=n(ci);O7o=t(bX,`Note:
Loading a model from its configuration file does `),vae=s(bX,"STRONG",{});var hXt=n(vae);X7o=t(hXt,"not"),hXt.forEach(r),z7o=t(bX,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tae=s(bX,"CODE",{});var uXt=n(Tae);V7o=t(uXt,"from_pretrained()"),uXt.forEach(r),W7o=t(bX,"to load the model weights."),bX.forEach(r),Q7o=d(el),Fae=s(el,"P",{});var pXt=n(Fae);H7o=t(pXt,"Examples:"),pXt.forEach(r),U7o=d(el),m(wy.$$.fragment,el),el.forEach(r),J7o=d(Zn),qe=s(Zn,"DIV",{class:!0});var Dr=n(qe);m(Ay.$$.fragment,Dr),Y7o=d(Dr),Cae=s(Dr,"P",{});var _Xt=n(Cae);K7o=t(_Xt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),_Xt.forEach(r),Z7o=d(Dr),Va=s(Dr,"P",{});var zE=n(Va);e8o=t(zE,"The model class to instantiate is selected based on the "),Mae=s(zE,"CODE",{});var bXt=n(Mae);o8o=t(bXt,"model_type"),bXt.forEach(r),t8o=t(zE,` property of the config object (either
passed as an argument or loaded from `),Eae=s(zE,"CODE",{});var vXt=n(Eae);r8o=t(vXt,"pretrained_model_name_or_path"),vXt.forEach(r),a8o=t(zE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yae=s(zE,"CODE",{});var TXt=n(yae);s8o=t(TXt,"pretrained_model_name_or_path"),TXt.forEach(r),n8o=t(zE,":"),zE.forEach(r),l8o=d(Dr),wae=s(Dr,"UL",{});var FXt=n(wae);Hv=s(FXt,"LI",{});var h5e=n(Hv);Aae=s(h5e,"STRONG",{});var CXt=n(Aae);d8o=t(CXt,"tapas"),CXt.forEach(r),i8o=t(h5e," \u2014 "),YI=s(h5e,"A",{href:!0});var MXt=n(YI);c8o=t(MXt,"TapasForQuestionAnswering"),MXt.forEach(r),f8o=t(h5e," (TAPAS model)"),h5e.forEach(r),FXt.forEach(r),m8o=d(Dr),Uv=s(Dr,"P",{});var u5e=n(Uv);g8o=t(u5e,"The model is set in evaluation mode by default using "),Lae=s(u5e,"CODE",{});var EXt=n(Lae);h8o=t(EXt,"model.eval()"),EXt.forEach(r),u8o=t(u5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bae=s(u5e,"CODE",{});var yXt=n(Bae);p8o=t(yXt,"model.train()"),yXt.forEach(r),u5e.forEach(r),_8o=d(Dr),xae=s(Dr,"P",{});var wXt=n(xae);b8o=t(wXt,"Examples:"),wXt.forEach(r),v8o=d(Dr),m(Ly.$$.fragment,Dr),Dr.forEach(r),Zn.forEach(r),JLe=d(i),fi=s(i,"H2",{class:!0});var e9e=n(fi);Jv=s(e9e,"A",{id:!0,class:!0,href:!0});var AXt=n(Jv);kae=s(AXt,"SPAN",{});var LXt=n(kae);m(By.$$.fragment,LXt),LXt.forEach(r),AXt.forEach(r),T8o=d(e9e),Rae=s(e9e,"SPAN",{});var BXt=n(Rae);F8o=t(BXt,"AutoModelForImageClassification"),BXt.forEach(r),e9e.forEach(r),YLe=d(i),et=s(i,"DIV",{class:!0});var ol=n(et);m(xy.$$.fragment,ol),C8o=d(ol),mi=s(ol,"P",{});var vX=n(mi);M8o=t(vX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Sae=s(vX,"CODE",{});var xXt=n(Sae);E8o=t(xXt,"from_pretrained()"),xXt.forEach(r),y8o=t(vX,"class method or the "),Pae=s(vX,"CODE",{});var kXt=n(Pae);w8o=t(kXt,"from_config()"),kXt.forEach(r),A8o=t(vX,`class
method.`),vX.forEach(r),L8o=d(ol),ky=s(ol,"P",{});var o9e=n(ky);B8o=t(o9e,"This class cannot be instantiated directly using "),$ae=s(o9e,"CODE",{});var RXt=n($ae);x8o=t(RXt,"__init__()"),RXt.forEach(r),k8o=t(o9e," (throws an error)."),o9e.forEach(r),R8o=d(ol),Wt=s(ol,"DIV",{class:!0});var tl=n(Wt);m(Ry.$$.fragment,tl),S8o=d(tl),Iae=s(tl,"P",{});var SXt=n(Iae);P8o=t(SXt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),SXt.forEach(r),$8o=d(tl),gi=s(tl,"P",{});var TX=n(gi);I8o=t(TX,`Note:
Loading a model from its configuration file does `),jae=s(TX,"STRONG",{});var PXt=n(jae);j8o=t(PXt,"not"),PXt.forEach(r),N8o=t(TX,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nae=s(TX,"CODE",{});var $Xt=n(Nae);D8o=t($Xt,"from_pretrained()"),$Xt.forEach(r),q8o=t(TX,"to load the model weights."),TX.forEach(r),G8o=d(tl),Dae=s(tl,"P",{});var IXt=n(Dae);O8o=t(IXt,"Examples:"),IXt.forEach(r),X8o=d(tl),m(Sy.$$.fragment,tl),tl.forEach(r),z8o=d(ol),Ge=s(ol,"DIV",{class:!0});var qr=n(Ge);m(Py.$$.fragment,qr),V8o=d(qr),qae=s(qr,"P",{});var jXt=n(qae);W8o=t(jXt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),jXt.forEach(r),Q8o=d(qr),Wa=s(qr,"P",{});var VE=n(Wa);H8o=t(VE,"The model class to instantiate is selected based on the "),Gae=s(VE,"CODE",{});var NXt=n(Gae);U8o=t(NXt,"model_type"),NXt.forEach(r),J8o=t(VE,` property of the config object (either
passed as an argument or loaded from `),Oae=s(VE,"CODE",{});var DXt=n(Oae);Y8o=t(DXt,"pretrained_model_name_or_path"),DXt.forEach(r),K8o=t(VE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xae=s(VE,"CODE",{});var qXt=n(Xae);Z8o=t(qXt,"pretrained_model_name_or_path"),qXt.forEach(r),e9o=t(VE,":"),VE.forEach(r),o9o=d(qr),we=s(qr,"UL",{});var jo=n(we);Yv=s(jo,"LI",{});var p5e=n(Yv);zae=s(p5e,"STRONG",{});var GXt=n(zae);t9o=t(GXt,"beit"),GXt.forEach(r),r9o=t(p5e," \u2014 "),KI=s(p5e,"A",{href:!0});var OXt=n(KI);a9o=t(OXt,"BeitForImageClassification"),OXt.forEach(r),s9o=t(p5e," (BEiT model)"),p5e.forEach(r),n9o=d(jo),Kv=s(jo,"LI",{});var _5e=n(Kv);Vae=s(_5e,"STRONG",{});var XXt=n(Vae);l9o=t(XXt,"convnext"),XXt.forEach(r),d9o=t(_5e," \u2014 "),ZI=s(_5e,"A",{href:!0});var zXt=n(ZI);i9o=t(zXt,"ConvNextForImageClassification"),zXt.forEach(r),c9o=t(_5e," (ConvNext model)"),_5e.forEach(r),f9o=d(jo),An=s(jo,"LI",{});var o7=n(An);Wae=s(o7,"STRONG",{});var VXt=n(Wae);m9o=t(VXt,"deit"),VXt.forEach(r),g9o=t(o7," \u2014 "),ej=s(o7,"A",{href:!0});var WXt=n(ej);h9o=t(WXt,"DeiTForImageClassification"),WXt.forEach(r),u9o=t(o7," or "),oj=s(o7,"A",{href:!0});var QXt=n(oj);p9o=t(QXt,"DeiTForImageClassificationWithTeacher"),QXt.forEach(r),_9o=t(o7," (DeiT model)"),o7.forEach(r),b9o=d(jo),Zv=s(jo,"LI",{});var b5e=n(Zv);Qae=s(b5e,"STRONG",{});var HXt=n(Qae);v9o=t(HXt,"imagegpt"),HXt.forEach(r),T9o=t(b5e," \u2014 "),tj=s(b5e,"A",{href:!0});var UXt=n(tj);F9o=t(UXt,"ImageGPTForImageClassification"),UXt.forEach(r),C9o=t(b5e," (ImageGPT model)"),b5e.forEach(r),M9o=d(jo),ra=s(jo,"LI",{});var ff=n(ra);Hae=s(ff,"STRONG",{});var JXt=n(Hae);E9o=t(JXt,"perceiver"),JXt.forEach(r),y9o=t(ff," \u2014 "),rj=s(ff,"A",{href:!0});var YXt=n(rj);w9o=t(YXt,"PerceiverForImageClassificationLearned"),YXt.forEach(r),A9o=t(ff," or "),aj=s(ff,"A",{href:!0});var KXt=n(aj);L9o=t(KXt,"PerceiverForImageClassificationFourier"),KXt.forEach(r),B9o=t(ff," or "),sj=s(ff,"A",{href:!0});var ZXt=n(sj);x9o=t(ZXt,"PerceiverForImageClassificationConvProcessing"),ZXt.forEach(r),k9o=t(ff," (Perceiver model)"),ff.forEach(r),R9o=d(jo),eT=s(jo,"LI",{});var v5e=n(eT);Uae=s(v5e,"STRONG",{});var ezt=n(Uae);S9o=t(ezt,"segformer"),ezt.forEach(r),P9o=t(v5e," \u2014 "),nj=s(v5e,"A",{href:!0});var ozt=n(nj);$9o=t(ozt,"SegformerForImageClassification"),ozt.forEach(r),I9o=t(v5e," (SegFormer model)"),v5e.forEach(r),j9o=d(jo),oT=s(jo,"LI",{});var T5e=n(oT);Jae=s(T5e,"STRONG",{});var tzt=n(Jae);N9o=t(tzt,"swin"),tzt.forEach(r),D9o=t(T5e," \u2014 "),lj=s(T5e,"A",{href:!0});var rzt=n(lj);q9o=t(rzt,"SwinForImageClassification"),rzt.forEach(r),G9o=t(T5e," (Swin model)"),T5e.forEach(r),O9o=d(jo),tT=s(jo,"LI",{});var F5e=n(tT);Yae=s(F5e,"STRONG",{});var azt=n(Yae);X9o=t(azt,"vit"),azt.forEach(r),z9o=t(F5e," \u2014 "),dj=s(F5e,"A",{href:!0});var szt=n(dj);V9o=t(szt,"ViTForImageClassification"),szt.forEach(r),W9o=t(F5e," (ViT model)"),F5e.forEach(r),jo.forEach(r),Q9o=d(qr),rT=s(qr,"P",{});var C5e=n(rT);H9o=t(C5e,"The model is set in evaluation mode by default using "),Kae=s(C5e,"CODE",{});var nzt=n(Kae);U9o=t(nzt,"model.eval()"),nzt.forEach(r),J9o=t(C5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zae=s(C5e,"CODE",{});var lzt=n(Zae);Y9o=t(lzt,"model.train()"),lzt.forEach(r),C5e.forEach(r),K9o=d(qr),ese=s(qr,"P",{});var dzt=n(ese);Z9o=t(dzt,"Examples:"),dzt.forEach(r),eBo=d(qr),m($y.$$.fragment,qr),qr.forEach(r),ol.forEach(r),KLe=d(i),hi=s(i,"H2",{class:!0});var t9e=n(hi);aT=s(t9e,"A",{id:!0,class:!0,href:!0});var izt=n(aT);ose=s(izt,"SPAN",{});var czt=n(ose);m(Iy.$$.fragment,czt),czt.forEach(r),izt.forEach(r),oBo=d(t9e),tse=s(t9e,"SPAN",{});var fzt=n(tse);tBo=t(fzt,"AutoModelForVision2Seq"),fzt.forEach(r),t9e.forEach(r),ZLe=d(i),ot=s(i,"DIV",{class:!0});var rl=n(ot);m(jy.$$.fragment,rl),rBo=d(rl),ui=s(rl,"P",{});var FX=n(ui);aBo=t(FX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),rse=s(FX,"CODE",{});var mzt=n(rse);sBo=t(mzt,"from_pretrained()"),mzt.forEach(r),nBo=t(FX,"class method or the "),ase=s(FX,"CODE",{});var gzt=n(ase);lBo=t(gzt,"from_config()"),gzt.forEach(r),dBo=t(FX,`class
method.`),FX.forEach(r),iBo=d(rl),Ny=s(rl,"P",{});var r9e=n(Ny);cBo=t(r9e,"This class cannot be instantiated directly using "),sse=s(r9e,"CODE",{});var hzt=n(sse);fBo=t(hzt,"__init__()"),hzt.forEach(r),mBo=t(r9e," (throws an error)."),r9e.forEach(r),gBo=d(rl),Qt=s(rl,"DIV",{class:!0});var al=n(Qt);m(Dy.$$.fragment,al),hBo=d(al),nse=s(al,"P",{});var uzt=n(nse);uBo=t(uzt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),uzt.forEach(r),pBo=d(al),pi=s(al,"P",{});var CX=n(pi);_Bo=t(CX,`Note:
Loading a model from its configuration file does `),lse=s(CX,"STRONG",{});var pzt=n(lse);bBo=t(pzt,"not"),pzt.forEach(r),vBo=t(CX,` load the model weights. It only affects the
model\u2019s configuration. Use `),dse=s(CX,"CODE",{});var _zt=n(dse);TBo=t(_zt,"from_pretrained()"),_zt.forEach(r),FBo=t(CX,"to load the model weights."),CX.forEach(r),CBo=d(al),ise=s(al,"P",{});var bzt=n(ise);MBo=t(bzt,"Examples:"),bzt.forEach(r),EBo=d(al),m(qy.$$.fragment,al),al.forEach(r),yBo=d(rl),Oe=s(rl,"DIV",{class:!0});var Gr=n(Oe);m(Gy.$$.fragment,Gr),wBo=d(Gr),cse=s(Gr,"P",{});var vzt=n(cse);ABo=t(vzt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vzt.forEach(r),LBo=d(Gr),Qa=s(Gr,"P",{});var WE=n(Qa);BBo=t(WE,"The model class to instantiate is selected based on the "),fse=s(WE,"CODE",{});var Tzt=n(fse);xBo=t(Tzt,"model_type"),Tzt.forEach(r),kBo=t(WE,` property of the config object (either
passed as an argument or loaded from `),mse=s(WE,"CODE",{});var Fzt=n(mse);RBo=t(Fzt,"pretrained_model_name_or_path"),Fzt.forEach(r),SBo=t(WE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gse=s(WE,"CODE",{});var Czt=n(gse);PBo=t(Czt,"pretrained_model_name_or_path"),Czt.forEach(r),$Bo=t(WE,":"),WE.forEach(r),IBo=d(Gr),hse=s(Gr,"UL",{});var Mzt=n(hse);sT=s(Mzt,"LI",{});var M5e=n(sT);use=s(M5e,"STRONG",{});var Ezt=n(use);jBo=t(Ezt,"vision-encoder-decoder"),Ezt.forEach(r),NBo=t(M5e," \u2014 "),ij=s(M5e,"A",{href:!0});var yzt=n(ij);DBo=t(yzt,"VisionEncoderDecoderModel"),yzt.forEach(r),qBo=t(M5e," (Vision Encoder decoder model)"),M5e.forEach(r),Mzt.forEach(r),GBo=d(Gr),nT=s(Gr,"P",{});var E5e=n(nT);OBo=t(E5e,"The model is set in evaluation mode by default using "),pse=s(E5e,"CODE",{});var wzt=n(pse);XBo=t(wzt,"model.eval()"),wzt.forEach(r),zBo=t(E5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_se=s(E5e,"CODE",{});var Azt=n(_se);VBo=t(Azt,"model.train()"),Azt.forEach(r),E5e.forEach(r),WBo=d(Gr),bse=s(Gr,"P",{});var Lzt=n(bse);QBo=t(Lzt,"Examples:"),Lzt.forEach(r),HBo=d(Gr),m(Oy.$$.fragment,Gr),Gr.forEach(r),rl.forEach(r),e7e=d(i),_i=s(i,"H2",{class:!0});var a9e=n(_i);lT=s(a9e,"A",{id:!0,class:!0,href:!0});var Bzt=n(lT);vse=s(Bzt,"SPAN",{});var xzt=n(vse);m(Xy.$$.fragment,xzt),xzt.forEach(r),Bzt.forEach(r),UBo=d(a9e),Tse=s(a9e,"SPAN",{});var kzt=n(Tse);JBo=t(kzt,"AutoModelForAudioClassification"),kzt.forEach(r),a9e.forEach(r),o7e=d(i),tt=s(i,"DIV",{class:!0});var sl=n(tt);m(zy.$$.fragment,sl),YBo=d(sl),bi=s(sl,"P",{});var MX=n(bi);KBo=t(MX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Fse=s(MX,"CODE",{});var Rzt=n(Fse);ZBo=t(Rzt,"from_pretrained()"),Rzt.forEach(r),exo=t(MX,"class method or the "),Cse=s(MX,"CODE",{});var Szt=n(Cse);oxo=t(Szt,"from_config()"),Szt.forEach(r),txo=t(MX,`class
method.`),MX.forEach(r),rxo=d(sl),Vy=s(sl,"P",{});var s9e=n(Vy);axo=t(s9e,"This class cannot be instantiated directly using "),Mse=s(s9e,"CODE",{});var Pzt=n(Mse);sxo=t(Pzt,"__init__()"),Pzt.forEach(r),nxo=t(s9e," (throws an error)."),s9e.forEach(r),lxo=d(sl),Ht=s(sl,"DIV",{class:!0});var nl=n(Ht);m(Wy.$$.fragment,nl),dxo=d(nl),Ese=s(nl,"P",{});var $zt=n(Ese);ixo=t($zt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),$zt.forEach(r),cxo=d(nl),vi=s(nl,"P",{});var EX=n(vi);fxo=t(EX,`Note:
Loading a model from its configuration file does `),yse=s(EX,"STRONG",{});var Izt=n(yse);mxo=t(Izt,"not"),Izt.forEach(r),gxo=t(EX,` load the model weights. It only affects the
model\u2019s configuration. Use `),wse=s(EX,"CODE",{});var jzt=n(wse);hxo=t(jzt,"from_pretrained()"),jzt.forEach(r),uxo=t(EX,"to load the model weights."),EX.forEach(r),pxo=d(nl),Ase=s(nl,"P",{});var Nzt=n(Ase);_xo=t(Nzt,"Examples:"),Nzt.forEach(r),bxo=d(nl),m(Qy.$$.fragment,nl),nl.forEach(r),vxo=d(sl),Xe=s(sl,"DIV",{class:!0});var Or=n(Xe);m(Hy.$$.fragment,Or),Txo=d(Or),Lse=s(Or,"P",{});var Dzt=n(Lse);Fxo=t(Dzt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Dzt.forEach(r),Cxo=d(Or),Ha=s(Or,"P",{});var QE=n(Ha);Mxo=t(QE,"The model class to instantiate is selected based on the "),Bse=s(QE,"CODE",{});var qzt=n(Bse);Exo=t(qzt,"model_type"),qzt.forEach(r),yxo=t(QE,` property of the config object (either
passed as an argument or loaded from `),xse=s(QE,"CODE",{});var Gzt=n(xse);wxo=t(Gzt,"pretrained_model_name_or_path"),Gzt.forEach(r),Axo=t(QE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kse=s(QE,"CODE",{});var Ozt=n(kse);Lxo=t(Ozt,"pretrained_model_name_or_path"),Ozt.forEach(r),Bxo=t(QE,":"),QE.forEach(r),xxo=d(Or),to=s(Or,"UL",{});var Xr=n(to);dT=s(Xr,"LI",{});var y5e=n(dT);Rse=s(y5e,"STRONG",{});var Xzt=n(Rse);kxo=t(Xzt,"hubert"),Xzt.forEach(r),Rxo=t(y5e," \u2014 "),cj=s(y5e,"A",{href:!0});var zzt=n(cj);Sxo=t(zzt,"HubertForSequenceClassification"),zzt.forEach(r),Pxo=t(y5e," (Hubert model)"),y5e.forEach(r),$xo=d(Xr),iT=s(Xr,"LI",{});var w5e=n(iT);Sse=s(w5e,"STRONG",{});var Vzt=n(Sse);Ixo=t(Vzt,"sew"),Vzt.forEach(r),jxo=t(w5e," \u2014 "),fj=s(w5e,"A",{href:!0});var Wzt=n(fj);Nxo=t(Wzt,"SEWForSequenceClassification"),Wzt.forEach(r),Dxo=t(w5e," (SEW model)"),w5e.forEach(r),qxo=d(Xr),cT=s(Xr,"LI",{});var A5e=n(cT);Pse=s(A5e,"STRONG",{});var Qzt=n(Pse);Gxo=t(Qzt,"sew-d"),Qzt.forEach(r),Oxo=t(A5e," \u2014 "),mj=s(A5e,"A",{href:!0});var Hzt=n(mj);Xxo=t(Hzt,"SEWDForSequenceClassification"),Hzt.forEach(r),zxo=t(A5e," (SEW-D model)"),A5e.forEach(r),Vxo=d(Xr),fT=s(Xr,"LI",{});var L5e=n(fT);$se=s(L5e,"STRONG",{});var Uzt=n($se);Wxo=t(Uzt,"unispeech"),Uzt.forEach(r),Qxo=t(L5e," \u2014 "),gj=s(L5e,"A",{href:!0});var Jzt=n(gj);Hxo=t(Jzt,"UniSpeechForSequenceClassification"),Jzt.forEach(r),Uxo=t(L5e," (UniSpeech model)"),L5e.forEach(r),Jxo=d(Xr),mT=s(Xr,"LI",{});var B5e=n(mT);Ise=s(B5e,"STRONG",{});var Yzt=n(Ise);Yxo=t(Yzt,"unispeech-sat"),Yzt.forEach(r),Kxo=t(B5e," \u2014 "),hj=s(B5e,"A",{href:!0});var Kzt=n(hj);Zxo=t(Kzt,"UniSpeechSatForSequenceClassification"),Kzt.forEach(r),eko=t(B5e," (UniSpeechSat model)"),B5e.forEach(r),oko=d(Xr),gT=s(Xr,"LI",{});var x5e=n(gT);jse=s(x5e,"STRONG",{});var Zzt=n(jse);tko=t(Zzt,"wav2vec2"),Zzt.forEach(r),rko=t(x5e," \u2014 "),uj=s(x5e,"A",{href:!0});var eVt=n(uj);ako=t(eVt,"Wav2Vec2ForSequenceClassification"),eVt.forEach(r),sko=t(x5e," (Wav2Vec2 model)"),x5e.forEach(r),nko=d(Xr),hT=s(Xr,"LI",{});var k5e=n(hT);Nse=s(k5e,"STRONG",{});var oVt=n(Nse);lko=t(oVt,"wavlm"),oVt.forEach(r),dko=t(k5e," \u2014 "),pj=s(k5e,"A",{href:!0});var tVt=n(pj);iko=t(tVt,"WavLMForSequenceClassification"),tVt.forEach(r),cko=t(k5e," (WavLM model)"),k5e.forEach(r),Xr.forEach(r),fko=d(Or),uT=s(Or,"P",{});var R5e=n(uT);mko=t(R5e,"The model is set in evaluation mode by default using "),Dse=s(R5e,"CODE",{});var rVt=n(Dse);gko=t(rVt,"model.eval()"),rVt.forEach(r),hko=t(R5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qse=s(R5e,"CODE",{});var aVt=n(qse);uko=t(aVt,"model.train()"),aVt.forEach(r),R5e.forEach(r),pko=d(Or),Gse=s(Or,"P",{});var sVt=n(Gse);_ko=t(sVt,"Examples:"),sVt.forEach(r),bko=d(Or),m(Uy.$$.fragment,Or),Or.forEach(r),sl.forEach(r),t7e=d(i),Ti=s(i,"H2",{class:!0});var n9e=n(Ti);pT=s(n9e,"A",{id:!0,class:!0,href:!0});var nVt=n(pT);Ose=s(nVt,"SPAN",{});var lVt=n(Ose);m(Jy.$$.fragment,lVt),lVt.forEach(r),nVt.forEach(r),vko=d(n9e),Xse=s(n9e,"SPAN",{});var dVt=n(Xse);Tko=t(dVt,"AutoModelForAudioFrameClassification"),dVt.forEach(r),n9e.forEach(r),r7e=d(i),rt=s(i,"DIV",{class:!0});var ll=n(rt);m(Yy.$$.fragment,ll),Fko=d(ll),Fi=s(ll,"P",{});var yX=n(Fi);Cko=t(yX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),zse=s(yX,"CODE",{});var iVt=n(zse);Mko=t(iVt,"from_pretrained()"),iVt.forEach(r),Eko=t(yX,"class method or the "),Vse=s(yX,"CODE",{});var cVt=n(Vse);yko=t(cVt,"from_config()"),cVt.forEach(r),wko=t(yX,`class
method.`),yX.forEach(r),Ako=d(ll),Ky=s(ll,"P",{});var l9e=n(Ky);Lko=t(l9e,"This class cannot be instantiated directly using "),Wse=s(l9e,"CODE",{});var fVt=n(Wse);Bko=t(fVt,"__init__()"),fVt.forEach(r),xko=t(l9e," (throws an error)."),l9e.forEach(r),kko=d(ll),Ut=s(ll,"DIV",{class:!0});var dl=n(Ut);m(Zy.$$.fragment,dl),Rko=d(dl),Qse=s(dl,"P",{});var mVt=n(Qse);Sko=t(mVt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),mVt.forEach(r),Pko=d(dl),Ci=s(dl,"P",{});var wX=n(Ci);$ko=t(wX,`Note:
Loading a model from its configuration file does `),Hse=s(wX,"STRONG",{});var gVt=n(Hse);Iko=t(gVt,"not"),gVt.forEach(r),jko=t(wX,` load the model weights. It only affects the
model\u2019s configuration. Use `),Use=s(wX,"CODE",{});var hVt=n(Use);Nko=t(hVt,"from_pretrained()"),hVt.forEach(r),Dko=t(wX,"to load the model weights."),wX.forEach(r),qko=d(dl),Jse=s(dl,"P",{});var uVt=n(Jse);Gko=t(uVt,"Examples:"),uVt.forEach(r),Oko=d(dl),m(ew.$$.fragment,dl),dl.forEach(r),Xko=d(ll),ze=s(ll,"DIV",{class:!0});var zr=n(ze);m(ow.$$.fragment,zr),zko=d(zr),Yse=s(zr,"P",{});var pVt=n(Yse);Vko=t(pVt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),pVt.forEach(r),Wko=d(zr),Ua=s(zr,"P",{});var HE=n(Ua);Qko=t(HE,"The model class to instantiate is selected based on the "),Kse=s(HE,"CODE",{});var _Vt=n(Kse);Hko=t(_Vt,"model_type"),_Vt.forEach(r),Uko=t(HE,` property of the config object (either
passed as an argument or loaded from `),Zse=s(HE,"CODE",{});var bVt=n(Zse);Jko=t(bVt,"pretrained_model_name_or_path"),bVt.forEach(r),Yko=t(HE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ene=s(HE,"CODE",{});var vVt=n(ene);Kko=t(vVt,"pretrained_model_name_or_path"),vVt.forEach(r),Zko=t(HE,":"),HE.forEach(r),eRo=d(zr),Mi=s(zr,"UL",{});var AX=n(Mi);_T=s(AX,"LI",{});var S5e=n(_T);one=s(S5e,"STRONG",{});var TVt=n(one);oRo=t(TVt,"unispeech-sat"),TVt.forEach(r),tRo=t(S5e," \u2014 "),_j=s(S5e,"A",{href:!0});var FVt=n(_j);rRo=t(FVt,"UniSpeechSatForAudioFrameClassification"),FVt.forEach(r),aRo=t(S5e," (UniSpeechSat model)"),S5e.forEach(r),sRo=d(AX),bT=s(AX,"LI",{});var P5e=n(bT);tne=s(P5e,"STRONG",{});var CVt=n(tne);nRo=t(CVt,"wav2vec2"),CVt.forEach(r),lRo=t(P5e," \u2014 "),bj=s(P5e,"A",{href:!0});var MVt=n(bj);dRo=t(MVt,"Wav2Vec2ForAudioFrameClassification"),MVt.forEach(r),iRo=t(P5e," (Wav2Vec2 model)"),P5e.forEach(r),cRo=d(AX),vT=s(AX,"LI",{});var $5e=n(vT);rne=s($5e,"STRONG",{});var EVt=n(rne);fRo=t(EVt,"wavlm"),EVt.forEach(r),mRo=t($5e," \u2014 "),vj=s($5e,"A",{href:!0});var yVt=n(vj);gRo=t(yVt,"WavLMForAudioFrameClassification"),yVt.forEach(r),hRo=t($5e," (WavLM model)"),$5e.forEach(r),AX.forEach(r),uRo=d(zr),TT=s(zr,"P",{});var I5e=n(TT);pRo=t(I5e,"The model is set in evaluation mode by default using "),ane=s(I5e,"CODE",{});var wVt=n(ane);_Ro=t(wVt,"model.eval()"),wVt.forEach(r),bRo=t(I5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sne=s(I5e,"CODE",{});var AVt=n(sne);vRo=t(AVt,"model.train()"),AVt.forEach(r),I5e.forEach(r),TRo=d(zr),nne=s(zr,"P",{});var LVt=n(nne);FRo=t(LVt,"Examples:"),LVt.forEach(r),CRo=d(zr),m(tw.$$.fragment,zr),zr.forEach(r),ll.forEach(r),a7e=d(i),Ei=s(i,"H2",{class:!0});var d9e=n(Ei);FT=s(d9e,"A",{id:!0,class:!0,href:!0});var BVt=n(FT);lne=s(BVt,"SPAN",{});var xVt=n(lne);m(rw.$$.fragment,xVt),xVt.forEach(r),BVt.forEach(r),MRo=d(d9e),dne=s(d9e,"SPAN",{});var kVt=n(dne);ERo=t(kVt,"AutoModelForCTC"),kVt.forEach(r),d9e.forEach(r),s7e=d(i),at=s(i,"DIV",{class:!0});var il=n(at);m(aw.$$.fragment,il),yRo=d(il),yi=s(il,"P",{});var LX=n(yi);wRo=t(LX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),ine=s(LX,"CODE",{});var RVt=n(ine);ARo=t(RVt,"from_pretrained()"),RVt.forEach(r),LRo=t(LX,"class method or the "),cne=s(LX,"CODE",{});var SVt=n(cne);BRo=t(SVt,"from_config()"),SVt.forEach(r),xRo=t(LX,`class
method.`),LX.forEach(r),kRo=d(il),sw=s(il,"P",{});var i9e=n(sw);RRo=t(i9e,"This class cannot be instantiated directly using "),fne=s(i9e,"CODE",{});var PVt=n(fne);SRo=t(PVt,"__init__()"),PVt.forEach(r),PRo=t(i9e," (throws an error)."),i9e.forEach(r),$Ro=d(il),Jt=s(il,"DIV",{class:!0});var cl=n(Jt);m(nw.$$.fragment,cl),IRo=d(cl),mne=s(cl,"P",{});var $Vt=n(mne);jRo=t($Vt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),$Vt.forEach(r),NRo=d(cl),wi=s(cl,"P",{});var BX=n(wi);DRo=t(BX,`Note:
Loading a model from its configuration file does `),gne=s(BX,"STRONG",{});var IVt=n(gne);qRo=t(IVt,"not"),IVt.forEach(r),GRo=t(BX,` load the model weights. It only affects the
model\u2019s configuration. Use `),hne=s(BX,"CODE",{});var jVt=n(hne);ORo=t(jVt,"from_pretrained()"),jVt.forEach(r),XRo=t(BX,"to load the model weights."),BX.forEach(r),zRo=d(cl),une=s(cl,"P",{});var NVt=n(une);VRo=t(NVt,"Examples:"),NVt.forEach(r),WRo=d(cl),m(lw.$$.fragment,cl),cl.forEach(r),QRo=d(il),Ve=s(il,"DIV",{class:!0});var Vr=n(Ve);m(dw.$$.fragment,Vr),HRo=d(Vr),pne=s(Vr,"P",{});var DVt=n(pne);URo=t(DVt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),DVt.forEach(r),JRo=d(Vr),Ja=s(Vr,"P",{});var UE=n(Ja);YRo=t(UE,"The model class to instantiate is selected based on the "),_ne=s(UE,"CODE",{});var qVt=n(_ne);KRo=t(qVt,"model_type"),qVt.forEach(r),ZRo=t(UE,` property of the config object (either
passed as an argument or loaded from `),bne=s(UE,"CODE",{});var GVt=n(bne);eSo=t(GVt,"pretrained_model_name_or_path"),GVt.forEach(r),oSo=t(UE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vne=s(UE,"CODE",{});var OVt=n(vne);tSo=t(OVt,"pretrained_model_name_or_path"),OVt.forEach(r),rSo=t(UE,":"),UE.forEach(r),aSo=d(Vr),ro=s(Vr,"UL",{});var Wr=n(ro);CT=s(Wr,"LI",{});var j5e=n(CT);Tne=s(j5e,"STRONG",{});var XVt=n(Tne);sSo=t(XVt,"hubert"),XVt.forEach(r),nSo=t(j5e," \u2014 "),Tj=s(j5e,"A",{href:!0});var zVt=n(Tj);lSo=t(zVt,"HubertForCTC"),zVt.forEach(r),dSo=t(j5e," (Hubert model)"),j5e.forEach(r),iSo=d(Wr),MT=s(Wr,"LI",{});var N5e=n(MT);Fne=s(N5e,"STRONG",{});var VVt=n(Fne);cSo=t(VVt,"sew"),VVt.forEach(r),fSo=t(N5e," \u2014 "),Fj=s(N5e,"A",{href:!0});var WVt=n(Fj);mSo=t(WVt,"SEWForCTC"),WVt.forEach(r),gSo=t(N5e," (SEW model)"),N5e.forEach(r),hSo=d(Wr),ET=s(Wr,"LI",{});var D5e=n(ET);Cne=s(D5e,"STRONG",{});var QVt=n(Cne);uSo=t(QVt,"sew-d"),QVt.forEach(r),pSo=t(D5e," \u2014 "),Cj=s(D5e,"A",{href:!0});var HVt=n(Cj);_So=t(HVt,"SEWDForCTC"),HVt.forEach(r),bSo=t(D5e," (SEW-D model)"),D5e.forEach(r),vSo=d(Wr),yT=s(Wr,"LI",{});var q5e=n(yT);Mne=s(q5e,"STRONG",{});var UVt=n(Mne);TSo=t(UVt,"unispeech"),UVt.forEach(r),FSo=t(q5e," \u2014 "),Mj=s(q5e,"A",{href:!0});var JVt=n(Mj);CSo=t(JVt,"UniSpeechForCTC"),JVt.forEach(r),MSo=t(q5e," (UniSpeech model)"),q5e.forEach(r),ESo=d(Wr),wT=s(Wr,"LI",{});var G5e=n(wT);Ene=s(G5e,"STRONG",{});var YVt=n(Ene);ySo=t(YVt,"unispeech-sat"),YVt.forEach(r),wSo=t(G5e," \u2014 "),Ej=s(G5e,"A",{href:!0});var KVt=n(Ej);ASo=t(KVt,"UniSpeechSatForCTC"),KVt.forEach(r),LSo=t(G5e," (UniSpeechSat model)"),G5e.forEach(r),BSo=d(Wr),AT=s(Wr,"LI",{});var O5e=n(AT);yne=s(O5e,"STRONG",{});var ZVt=n(yne);xSo=t(ZVt,"wav2vec2"),ZVt.forEach(r),kSo=t(O5e," \u2014 "),yj=s(O5e,"A",{href:!0});var eWt=n(yj);RSo=t(eWt,"Wav2Vec2ForCTC"),eWt.forEach(r),SSo=t(O5e," (Wav2Vec2 model)"),O5e.forEach(r),PSo=d(Wr),LT=s(Wr,"LI",{});var X5e=n(LT);wne=s(X5e,"STRONG",{});var oWt=n(wne);$So=t(oWt,"wavlm"),oWt.forEach(r),ISo=t(X5e," \u2014 "),wj=s(X5e,"A",{href:!0});var tWt=n(wj);jSo=t(tWt,"WavLMForCTC"),tWt.forEach(r),NSo=t(X5e," (WavLM model)"),X5e.forEach(r),Wr.forEach(r),DSo=d(Vr),BT=s(Vr,"P",{});var z5e=n(BT);qSo=t(z5e,"The model is set in evaluation mode by default using "),Ane=s(z5e,"CODE",{});var rWt=n(Ane);GSo=t(rWt,"model.eval()"),rWt.forEach(r),OSo=t(z5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lne=s(z5e,"CODE",{});var aWt=n(Lne);XSo=t(aWt,"model.train()"),aWt.forEach(r),z5e.forEach(r),zSo=d(Vr),Bne=s(Vr,"P",{});var sWt=n(Bne);VSo=t(sWt,"Examples:"),sWt.forEach(r),WSo=d(Vr),m(iw.$$.fragment,Vr),Vr.forEach(r),il.forEach(r),n7e=d(i),Ai=s(i,"H2",{class:!0});var c9e=n(Ai);xT=s(c9e,"A",{id:!0,class:!0,href:!0});var nWt=n(xT);xne=s(nWt,"SPAN",{});var lWt=n(xne);m(cw.$$.fragment,lWt),lWt.forEach(r),nWt.forEach(r),QSo=d(c9e),kne=s(c9e,"SPAN",{});var dWt=n(kne);HSo=t(dWt,"AutoModelForSpeechSeq2Seq"),dWt.forEach(r),c9e.forEach(r),l7e=d(i),st=s(i,"DIV",{class:!0});var fl=n(st);m(fw.$$.fragment,fl),USo=d(fl),Li=s(fl,"P",{});var xX=n(Li);JSo=t(xX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Rne=s(xX,"CODE",{});var iWt=n(Rne);YSo=t(iWt,"from_pretrained()"),iWt.forEach(r),KSo=t(xX,"class method or the "),Sne=s(xX,"CODE",{});var cWt=n(Sne);ZSo=t(cWt,"from_config()"),cWt.forEach(r),ePo=t(xX,`class
method.`),xX.forEach(r),oPo=d(fl),mw=s(fl,"P",{});var f9e=n(mw);tPo=t(f9e,"This class cannot be instantiated directly using "),Pne=s(f9e,"CODE",{});var fWt=n(Pne);rPo=t(fWt,"__init__()"),fWt.forEach(r),aPo=t(f9e," (throws an error)."),f9e.forEach(r),sPo=d(fl),Yt=s(fl,"DIV",{class:!0});var ml=n(Yt);m(gw.$$.fragment,ml),nPo=d(ml),$ne=s(ml,"P",{});var mWt=n($ne);lPo=t(mWt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),mWt.forEach(r),dPo=d(ml),Bi=s(ml,"P",{});var kX=n(Bi);iPo=t(kX,`Note:
Loading a model from its configuration file does `),Ine=s(kX,"STRONG",{});var gWt=n(Ine);cPo=t(gWt,"not"),gWt.forEach(r),fPo=t(kX,` load the model weights. It only affects the
model\u2019s configuration. Use `),jne=s(kX,"CODE",{});var hWt=n(jne);mPo=t(hWt,"from_pretrained()"),hWt.forEach(r),gPo=t(kX,"to load the model weights."),kX.forEach(r),hPo=d(ml),Nne=s(ml,"P",{});var uWt=n(Nne);uPo=t(uWt,"Examples:"),uWt.forEach(r),pPo=d(ml),m(hw.$$.fragment,ml),ml.forEach(r),_Po=d(fl),We=s(fl,"DIV",{class:!0});var Qr=n(We);m(uw.$$.fragment,Qr),bPo=d(Qr),Dne=s(Qr,"P",{});var pWt=n(Dne);vPo=t(pWt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),pWt.forEach(r),TPo=d(Qr),Ya=s(Qr,"P",{});var JE=n(Ya);FPo=t(JE,"The model class to instantiate is selected based on the "),qne=s(JE,"CODE",{});var _Wt=n(qne);CPo=t(_Wt,"model_type"),_Wt.forEach(r),MPo=t(JE,` property of the config object (either
passed as an argument or loaded from `),Gne=s(JE,"CODE",{});var bWt=n(Gne);EPo=t(bWt,"pretrained_model_name_or_path"),bWt.forEach(r),yPo=t(JE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),One=s(JE,"CODE",{});var vWt=n(One);wPo=t(vWt,"pretrained_model_name_or_path"),vWt.forEach(r),APo=t(JE,":"),JE.forEach(r),LPo=d(Qr),pw=s(Qr,"UL",{});var m9e=n(pw);kT=s(m9e,"LI",{});var V5e=n(kT);Xne=s(V5e,"STRONG",{});var TWt=n(Xne);BPo=t(TWt,"speech-encoder-decoder"),TWt.forEach(r),xPo=t(V5e," \u2014 "),Aj=s(V5e,"A",{href:!0});var FWt=n(Aj);kPo=t(FWt,"SpeechEncoderDecoderModel"),FWt.forEach(r),RPo=t(V5e," (Speech Encoder decoder model)"),V5e.forEach(r),SPo=d(m9e),RT=s(m9e,"LI",{});var W5e=n(RT);zne=s(W5e,"STRONG",{});var CWt=n(zne);PPo=t(CWt,"speech_to_text"),CWt.forEach(r),$Po=t(W5e," \u2014 "),Lj=s(W5e,"A",{href:!0});var MWt=n(Lj);IPo=t(MWt,"Speech2TextForConditionalGeneration"),MWt.forEach(r),jPo=t(W5e," (Speech2Text model)"),W5e.forEach(r),m9e.forEach(r),NPo=d(Qr),ST=s(Qr,"P",{});var Q5e=n(ST);DPo=t(Q5e,"The model is set in evaluation mode by default using "),Vne=s(Q5e,"CODE",{});var EWt=n(Vne);qPo=t(EWt,"model.eval()"),EWt.forEach(r),GPo=t(Q5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wne=s(Q5e,"CODE",{});var yWt=n(Wne);OPo=t(yWt,"model.train()"),yWt.forEach(r),Q5e.forEach(r),XPo=d(Qr),Qne=s(Qr,"P",{});var wWt=n(Qne);zPo=t(wWt,"Examples:"),wWt.forEach(r),VPo=d(Qr),m(_w.$$.fragment,Qr),Qr.forEach(r),fl.forEach(r),d7e=d(i),xi=s(i,"H2",{class:!0});var g9e=n(xi);PT=s(g9e,"A",{id:!0,class:!0,href:!0});var AWt=n(PT);Hne=s(AWt,"SPAN",{});var LWt=n(Hne);m(bw.$$.fragment,LWt),LWt.forEach(r),AWt.forEach(r),WPo=d(g9e),Une=s(g9e,"SPAN",{});var BWt=n(Une);QPo=t(BWt,"AutoModelForAudioXVector"),BWt.forEach(r),g9e.forEach(r),i7e=d(i),nt=s(i,"DIV",{class:!0});var gl=n(nt);m(vw.$$.fragment,gl),HPo=d(gl),ki=s(gl,"P",{});var RX=n(ki);UPo=t(RX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Jne=s(RX,"CODE",{});var xWt=n(Jne);JPo=t(xWt,"from_pretrained()"),xWt.forEach(r),YPo=t(RX,"class method or the "),Yne=s(RX,"CODE",{});var kWt=n(Yne);KPo=t(kWt,"from_config()"),kWt.forEach(r),ZPo=t(RX,`class
method.`),RX.forEach(r),e$o=d(gl),Tw=s(gl,"P",{});var h9e=n(Tw);o$o=t(h9e,"This class cannot be instantiated directly using "),Kne=s(h9e,"CODE",{});var RWt=n(Kne);t$o=t(RWt,"__init__()"),RWt.forEach(r),r$o=t(h9e," (throws an error)."),h9e.forEach(r),a$o=d(gl),Kt=s(gl,"DIV",{class:!0});var hl=n(Kt);m(Fw.$$.fragment,hl),s$o=d(hl),Zne=s(hl,"P",{});var SWt=n(Zne);n$o=t(SWt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),SWt.forEach(r),l$o=d(hl),Ri=s(hl,"P",{});var SX=n(Ri);d$o=t(SX,`Note:
Loading a model from its configuration file does `),ele=s(SX,"STRONG",{});var PWt=n(ele);i$o=t(PWt,"not"),PWt.forEach(r),c$o=t(SX,` load the model weights. It only affects the
model\u2019s configuration. Use `),ole=s(SX,"CODE",{});var $Wt=n(ole);f$o=t($Wt,"from_pretrained()"),$Wt.forEach(r),m$o=t(SX,"to load the model weights."),SX.forEach(r),g$o=d(hl),tle=s(hl,"P",{});var IWt=n(tle);h$o=t(IWt,"Examples:"),IWt.forEach(r),u$o=d(hl),m(Cw.$$.fragment,hl),hl.forEach(r),p$o=d(gl),Qe=s(gl,"DIV",{class:!0});var Hr=n(Qe);m(Mw.$$.fragment,Hr),_$o=d(Hr),rle=s(Hr,"P",{});var jWt=n(rle);b$o=t(jWt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),jWt.forEach(r),v$o=d(Hr),Ka=s(Hr,"P",{});var YE=n(Ka);T$o=t(YE,"The model class to instantiate is selected based on the "),ale=s(YE,"CODE",{});var NWt=n(ale);F$o=t(NWt,"model_type"),NWt.forEach(r),C$o=t(YE,` property of the config object (either
passed as an argument or loaded from `),sle=s(YE,"CODE",{});var DWt=n(sle);M$o=t(DWt,"pretrained_model_name_or_path"),DWt.forEach(r),E$o=t(YE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nle=s(YE,"CODE",{});var qWt=n(nle);y$o=t(qWt,"pretrained_model_name_or_path"),qWt.forEach(r),w$o=t(YE,":"),YE.forEach(r),A$o=d(Hr),Si=s(Hr,"UL",{});var PX=n(Si);$T=s(PX,"LI",{});var H5e=n($T);lle=s(H5e,"STRONG",{});var GWt=n(lle);L$o=t(GWt,"unispeech-sat"),GWt.forEach(r),B$o=t(H5e," \u2014 "),Bj=s(H5e,"A",{href:!0});var OWt=n(Bj);x$o=t(OWt,"UniSpeechSatForXVector"),OWt.forEach(r),k$o=t(H5e," (UniSpeechSat model)"),H5e.forEach(r),R$o=d(PX),IT=s(PX,"LI",{});var U5e=n(IT);dle=s(U5e,"STRONG",{});var XWt=n(dle);S$o=t(XWt,"wav2vec2"),XWt.forEach(r),P$o=t(U5e," \u2014 "),xj=s(U5e,"A",{href:!0});var zWt=n(xj);$$o=t(zWt,"Wav2Vec2ForXVector"),zWt.forEach(r),I$o=t(U5e," (Wav2Vec2 model)"),U5e.forEach(r),j$o=d(PX),jT=s(PX,"LI",{});var J5e=n(jT);ile=s(J5e,"STRONG",{});var VWt=n(ile);N$o=t(VWt,"wavlm"),VWt.forEach(r),D$o=t(J5e," \u2014 "),kj=s(J5e,"A",{href:!0});var WWt=n(kj);q$o=t(WWt,"WavLMForXVector"),WWt.forEach(r),G$o=t(J5e," (WavLM model)"),J5e.forEach(r),PX.forEach(r),O$o=d(Hr),NT=s(Hr,"P",{});var Y5e=n(NT);X$o=t(Y5e,"The model is set in evaluation mode by default using "),cle=s(Y5e,"CODE",{});var QWt=n(cle);z$o=t(QWt,"model.eval()"),QWt.forEach(r),V$o=t(Y5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fle=s(Y5e,"CODE",{});var HWt=n(fle);W$o=t(HWt,"model.train()"),HWt.forEach(r),Y5e.forEach(r),Q$o=d(Hr),mle=s(Hr,"P",{});var UWt=n(mle);H$o=t(UWt,"Examples:"),UWt.forEach(r),U$o=d(Hr),m(Ew.$$.fragment,Hr),Hr.forEach(r),gl.forEach(r),c7e=d(i),Pi=s(i,"H2",{class:!0});var u9e=n(Pi);DT=s(u9e,"A",{id:!0,class:!0,href:!0});var JWt=n(DT);gle=s(JWt,"SPAN",{});var YWt=n(gle);m(yw.$$.fragment,YWt),YWt.forEach(r),JWt.forEach(r),J$o=d(u9e),hle=s(u9e,"SPAN",{});var KWt=n(hle);Y$o=t(KWt,"AutoModelForObjectDetection"),KWt.forEach(r),u9e.forEach(r),f7e=d(i),lt=s(i,"DIV",{class:!0});var ul=n(lt);m(ww.$$.fragment,ul),K$o=d(ul),$i=s(ul,"P",{});var $X=n($i);Z$o=t($X,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),ule=s($X,"CODE",{});var ZWt=n(ule);eIo=t(ZWt,"from_pretrained()"),ZWt.forEach(r),oIo=t($X,"class method or the "),ple=s($X,"CODE",{});var eQt=n(ple);tIo=t(eQt,"from_config()"),eQt.forEach(r),rIo=t($X,`class
method.`),$X.forEach(r),aIo=d(ul),Aw=s(ul,"P",{});var p9e=n(Aw);sIo=t(p9e,"This class cannot be instantiated directly using "),_le=s(p9e,"CODE",{});var oQt=n(_le);nIo=t(oQt,"__init__()"),oQt.forEach(r),lIo=t(p9e," (throws an error)."),p9e.forEach(r),dIo=d(ul),Zt=s(ul,"DIV",{class:!0});var pl=n(Zt);m(Lw.$$.fragment,pl),iIo=d(pl),ble=s(pl,"P",{});var tQt=n(ble);cIo=t(tQt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),tQt.forEach(r),fIo=d(pl),Ii=s(pl,"P",{});var IX=n(Ii);mIo=t(IX,`Note:
Loading a model from its configuration file does `),vle=s(IX,"STRONG",{});var rQt=n(vle);gIo=t(rQt,"not"),rQt.forEach(r),hIo=t(IX,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tle=s(IX,"CODE",{});var aQt=n(Tle);uIo=t(aQt,"from_pretrained()"),aQt.forEach(r),pIo=t(IX,"to load the model weights."),IX.forEach(r),_Io=d(pl),Fle=s(pl,"P",{});var sQt=n(Fle);bIo=t(sQt,"Examples:"),sQt.forEach(r),vIo=d(pl),m(Bw.$$.fragment,pl),pl.forEach(r),TIo=d(ul),He=s(ul,"DIV",{class:!0});var Ur=n(He);m(xw.$$.fragment,Ur),FIo=d(Ur),Cle=s(Ur,"P",{});var nQt=n(Cle);CIo=t(nQt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),nQt.forEach(r),MIo=d(Ur),Za=s(Ur,"P",{});var KE=n(Za);EIo=t(KE,"The model class to instantiate is selected based on the "),Mle=s(KE,"CODE",{});var lQt=n(Mle);yIo=t(lQt,"model_type"),lQt.forEach(r),wIo=t(KE,` property of the config object (either
passed as an argument or loaded from `),Ele=s(KE,"CODE",{});var dQt=n(Ele);AIo=t(dQt,"pretrained_model_name_or_path"),dQt.forEach(r),LIo=t(KE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yle=s(KE,"CODE",{});var iQt=n(yle);BIo=t(iQt,"pretrained_model_name_or_path"),iQt.forEach(r),xIo=t(KE,":"),KE.forEach(r),kIo=d(Ur),wle=s(Ur,"UL",{});var cQt=n(wle);qT=s(cQt,"LI",{});var K5e=n(qT);Ale=s(K5e,"STRONG",{});var fQt=n(Ale);RIo=t(fQt,"detr"),fQt.forEach(r),SIo=t(K5e," \u2014 "),Rj=s(K5e,"A",{href:!0});var mQt=n(Rj);PIo=t(mQt,"DetrForObjectDetection"),mQt.forEach(r),$Io=t(K5e," (DETR model)"),K5e.forEach(r),cQt.forEach(r),IIo=d(Ur),GT=s(Ur,"P",{});var Z5e=n(GT);jIo=t(Z5e,"The model is set in evaluation mode by default using "),Lle=s(Z5e,"CODE",{});var gQt=n(Lle);NIo=t(gQt,"model.eval()"),gQt.forEach(r),DIo=t(Z5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ble=s(Z5e,"CODE",{});var hQt=n(Ble);qIo=t(hQt,"model.train()"),hQt.forEach(r),Z5e.forEach(r),GIo=d(Ur),xle=s(Ur,"P",{});var uQt=n(xle);OIo=t(uQt,"Examples:"),uQt.forEach(r),XIo=d(Ur),m(kw.$$.fragment,Ur),Ur.forEach(r),ul.forEach(r),m7e=d(i),ji=s(i,"H2",{class:!0});var _9e=n(ji);OT=s(_9e,"A",{id:!0,class:!0,href:!0});var pQt=n(OT);kle=s(pQt,"SPAN",{});var _Qt=n(kle);m(Rw.$$.fragment,_Qt),_Qt.forEach(r),pQt.forEach(r),zIo=d(_9e),Rle=s(_9e,"SPAN",{});var bQt=n(Rle);VIo=t(bQt,"AutoModelForImageSegmentation"),bQt.forEach(r),_9e.forEach(r),g7e=d(i),dt=s(i,"DIV",{class:!0});var _l=n(dt);m(Sw.$$.fragment,_l),WIo=d(_l),Ni=s(_l,"P",{});var jX=n(Ni);QIo=t(jX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Sle=s(jX,"CODE",{});var vQt=n(Sle);HIo=t(vQt,"from_pretrained()"),vQt.forEach(r),UIo=t(jX,"class method or the "),Ple=s(jX,"CODE",{});var TQt=n(Ple);JIo=t(TQt,"from_config()"),TQt.forEach(r),YIo=t(jX,`class
method.`),jX.forEach(r),KIo=d(_l),Pw=s(_l,"P",{});var b9e=n(Pw);ZIo=t(b9e,"This class cannot be instantiated directly using "),$le=s(b9e,"CODE",{});var FQt=n($le);ejo=t(FQt,"__init__()"),FQt.forEach(r),ojo=t(b9e," (throws an error)."),b9e.forEach(r),tjo=d(_l),er=s(_l,"DIV",{class:!0});var bl=n(er);m($w.$$.fragment,bl),rjo=d(bl),Ile=s(bl,"P",{});var CQt=n(Ile);ajo=t(CQt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),CQt.forEach(r),sjo=d(bl),Di=s(bl,"P",{});var NX=n(Di);njo=t(NX,`Note:
Loading a model from its configuration file does `),jle=s(NX,"STRONG",{});var MQt=n(jle);ljo=t(MQt,"not"),MQt.forEach(r),djo=t(NX,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nle=s(NX,"CODE",{});var EQt=n(Nle);ijo=t(EQt,"from_pretrained()"),EQt.forEach(r),cjo=t(NX,"to load the model weights."),NX.forEach(r),fjo=d(bl),Dle=s(bl,"P",{});var yQt=n(Dle);mjo=t(yQt,"Examples:"),yQt.forEach(r),gjo=d(bl),m(Iw.$$.fragment,bl),bl.forEach(r),hjo=d(_l),Ue=s(_l,"DIV",{class:!0});var Jr=n(Ue);m(jw.$$.fragment,Jr),ujo=d(Jr),qle=s(Jr,"P",{});var wQt=n(qle);pjo=t(wQt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),wQt.forEach(r),_jo=d(Jr),es=s(Jr,"P",{});var ZE=n(es);bjo=t(ZE,"The model class to instantiate is selected based on the "),Gle=s(ZE,"CODE",{});var AQt=n(Gle);vjo=t(AQt,"model_type"),AQt.forEach(r),Tjo=t(ZE,` property of the config object (either
passed as an argument or loaded from `),Ole=s(ZE,"CODE",{});var LQt=n(Ole);Fjo=t(LQt,"pretrained_model_name_or_path"),LQt.forEach(r),Cjo=t(ZE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xle=s(ZE,"CODE",{});var BQt=n(Xle);Mjo=t(BQt,"pretrained_model_name_or_path"),BQt.forEach(r),Ejo=t(ZE,":"),ZE.forEach(r),yjo=d(Jr),zle=s(Jr,"UL",{});var xQt=n(zle);XT=s(xQt,"LI",{});var eye=n(XT);Vle=s(eye,"STRONG",{});var kQt=n(Vle);wjo=t(kQt,"detr"),kQt.forEach(r),Ajo=t(eye," \u2014 "),Sj=s(eye,"A",{href:!0});var RQt=n(Sj);Ljo=t(RQt,"DetrForSegmentation"),RQt.forEach(r),Bjo=t(eye," (DETR model)"),eye.forEach(r),xQt.forEach(r),xjo=d(Jr),zT=s(Jr,"P",{});var oye=n(zT);kjo=t(oye,"The model is set in evaluation mode by default using "),Wle=s(oye,"CODE",{});var SQt=n(Wle);Rjo=t(SQt,"model.eval()"),SQt.forEach(r),Sjo=t(oye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qle=s(oye,"CODE",{});var PQt=n(Qle);Pjo=t(PQt,"model.train()"),PQt.forEach(r),oye.forEach(r),$jo=d(Jr),Hle=s(Jr,"P",{});var $Qt=n(Hle);Ijo=t($Qt,"Examples:"),$Qt.forEach(r),jjo=d(Jr),m(Nw.$$.fragment,Jr),Jr.forEach(r),_l.forEach(r),h7e=d(i),qi=s(i,"H2",{class:!0});var v9e=n(qi);VT=s(v9e,"A",{id:!0,class:!0,href:!0});var IQt=n(VT);Ule=s(IQt,"SPAN",{});var jQt=n(Ule);m(Dw.$$.fragment,jQt),jQt.forEach(r),IQt.forEach(r),Njo=d(v9e),Jle=s(v9e,"SPAN",{});var NQt=n(Jle);Djo=t(NQt,"AutoModelForSemanticSegmentation"),NQt.forEach(r),v9e.forEach(r),u7e=d(i),it=s(i,"DIV",{class:!0});var vl=n(it);m(qw.$$.fragment,vl),qjo=d(vl),Gi=s(vl,"P",{});var DX=n(Gi);Gjo=t(DX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Yle=s(DX,"CODE",{});var DQt=n(Yle);Ojo=t(DQt,"from_pretrained()"),DQt.forEach(r),Xjo=t(DX,"class method or the "),Kle=s(DX,"CODE",{});var qQt=n(Kle);zjo=t(qQt,"from_config()"),qQt.forEach(r),Vjo=t(DX,`class
method.`),DX.forEach(r),Wjo=d(vl),Gw=s(vl,"P",{});var T9e=n(Gw);Qjo=t(T9e,"This class cannot be instantiated directly using "),Zle=s(T9e,"CODE",{});var GQt=n(Zle);Hjo=t(GQt,"__init__()"),GQt.forEach(r),Ujo=t(T9e," (throws an error)."),T9e.forEach(r),Jjo=d(vl),or=s(vl,"DIV",{class:!0});var Tl=n(or);m(Ow.$$.fragment,Tl),Yjo=d(Tl),ede=s(Tl,"P",{});var OQt=n(ede);Kjo=t(OQt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),OQt.forEach(r),Zjo=d(Tl),Oi=s(Tl,"P",{});var qX=n(Oi);eNo=t(qX,`Note:
Loading a model from its configuration file does `),ode=s(qX,"STRONG",{});var XQt=n(ode);oNo=t(XQt,"not"),XQt.forEach(r),tNo=t(qX,` load the model weights. It only affects the
model\u2019s configuration. Use `),tde=s(qX,"CODE",{});var zQt=n(tde);rNo=t(zQt,"from_pretrained()"),zQt.forEach(r),aNo=t(qX,"to load the model weights."),qX.forEach(r),sNo=d(Tl),rde=s(Tl,"P",{});var VQt=n(rde);nNo=t(VQt,"Examples:"),VQt.forEach(r),lNo=d(Tl),m(Xw.$$.fragment,Tl),Tl.forEach(r),dNo=d(vl),Je=s(vl,"DIV",{class:!0});var Yr=n(Je);m(zw.$$.fragment,Yr),iNo=d(Yr),ade=s(Yr,"P",{});var WQt=n(ade);cNo=t(WQt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),WQt.forEach(r),fNo=d(Yr),os=s(Yr,"P",{});var e3=n(os);mNo=t(e3,"The model class to instantiate is selected based on the "),sde=s(e3,"CODE",{});var QQt=n(sde);gNo=t(QQt,"model_type"),QQt.forEach(r),hNo=t(e3,` property of the config object (either
passed as an argument or loaded from `),nde=s(e3,"CODE",{});var HQt=n(nde);uNo=t(HQt,"pretrained_model_name_or_path"),HQt.forEach(r),pNo=t(e3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lde=s(e3,"CODE",{});var UQt=n(lde);_No=t(UQt,"pretrained_model_name_or_path"),UQt.forEach(r),bNo=t(e3,":"),e3.forEach(r),vNo=d(Yr),Vw=s(Yr,"UL",{});var F9e=n(Vw);WT=s(F9e,"LI",{});var tye=n(WT);dde=s(tye,"STRONG",{});var JQt=n(dde);TNo=t(JQt,"beit"),JQt.forEach(r),FNo=t(tye," \u2014 "),Pj=s(tye,"A",{href:!0});var YQt=n(Pj);CNo=t(YQt,"BeitForSemanticSegmentation"),YQt.forEach(r),MNo=t(tye," (BEiT model)"),tye.forEach(r),ENo=d(F9e),QT=s(F9e,"LI",{});var rye=n(QT);ide=s(rye,"STRONG",{});var KQt=n(ide);yNo=t(KQt,"segformer"),KQt.forEach(r),wNo=t(rye," \u2014 "),$j=s(rye,"A",{href:!0});var ZQt=n($j);ANo=t(ZQt,"SegformerForSemanticSegmentation"),ZQt.forEach(r),LNo=t(rye," (SegFormer model)"),rye.forEach(r),F9e.forEach(r),BNo=d(Yr),HT=s(Yr,"P",{});var aye=n(HT);xNo=t(aye,"The model is set in evaluation mode by default using "),cde=s(aye,"CODE",{});var eHt=n(cde);kNo=t(eHt,"model.eval()"),eHt.forEach(r),RNo=t(aye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fde=s(aye,"CODE",{});var oHt=n(fde);SNo=t(oHt,"model.train()"),oHt.forEach(r),aye.forEach(r),PNo=d(Yr),mde=s(Yr,"P",{});var tHt=n(mde);$No=t(tHt,"Examples:"),tHt.forEach(r),INo=d(Yr),m(Ww.$$.fragment,Yr),Yr.forEach(r),vl.forEach(r),p7e=d(i),Xi=s(i,"H2",{class:!0});var C9e=n(Xi);UT=s(C9e,"A",{id:!0,class:!0,href:!0});var rHt=n(UT);gde=s(rHt,"SPAN",{});var aHt=n(gde);m(Qw.$$.fragment,aHt),aHt.forEach(r),rHt.forEach(r),jNo=d(C9e),hde=s(C9e,"SPAN",{});var sHt=n(hde);NNo=t(sHt,"TFAutoModel"),sHt.forEach(r),C9e.forEach(r),_7e=d(i),ct=s(i,"DIV",{class:!0});var Fl=n(ct);m(Hw.$$.fragment,Fl),DNo=d(Fl),zi=s(Fl,"P",{});var GX=n(zi);qNo=t(GX,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ude=s(GX,"CODE",{});var nHt=n(ude);GNo=t(nHt,"from_pretrained()"),nHt.forEach(r),ONo=t(GX,"class method or the "),pde=s(GX,"CODE",{});var lHt=n(pde);XNo=t(lHt,"from_config()"),lHt.forEach(r),zNo=t(GX,`class
method.`),GX.forEach(r),VNo=d(Fl),Uw=s(Fl,"P",{});var M9e=n(Uw);WNo=t(M9e,"This class cannot be instantiated directly using "),_de=s(M9e,"CODE",{});var dHt=n(_de);QNo=t(dHt,"__init__()"),dHt.forEach(r),HNo=t(M9e," (throws an error)."),M9e.forEach(r),UNo=d(Fl),tr=s(Fl,"DIV",{class:!0});var Cl=n(tr);m(Jw.$$.fragment,Cl),JNo=d(Cl),bde=s(Cl,"P",{});var iHt=n(bde);YNo=t(iHt,"Instantiates one of the base model classes of the library from a configuration."),iHt.forEach(r),KNo=d(Cl),Vi=s(Cl,"P",{});var OX=n(Vi);ZNo=t(OX,`Note:
Loading a model from its configuration file does `),vde=s(OX,"STRONG",{});var cHt=n(vde);eDo=t(cHt,"not"),cHt.forEach(r),oDo=t(OX,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tde=s(OX,"CODE",{});var fHt=n(Tde);tDo=t(fHt,"from_pretrained()"),fHt.forEach(r),rDo=t(OX,"to load the model weights."),OX.forEach(r),aDo=d(Cl),Fde=s(Cl,"P",{});var mHt=n(Fde);sDo=t(mHt,"Examples:"),mHt.forEach(r),nDo=d(Cl),m(Yw.$$.fragment,Cl),Cl.forEach(r),lDo=d(Fl),fo=s(Fl,"DIV",{class:!0});var na=n(fo);m(Kw.$$.fragment,na),dDo=d(na),Cde=s(na,"P",{});var gHt=n(Cde);iDo=t(gHt,"Instantiate one of the base model classes of the library from a pretrained model."),gHt.forEach(r),cDo=d(na),ts=s(na,"P",{});var o3=n(ts);fDo=t(o3,"The model class to instantiate is selected based on the "),Mde=s(o3,"CODE",{});var hHt=n(Mde);mDo=t(hHt,"model_type"),hHt.forEach(r),gDo=t(o3,` property of the config object (either
passed as an argument or loaded from `),Ede=s(o3,"CODE",{});var uHt=n(Ede);hDo=t(uHt,"pretrained_model_name_or_path"),uHt.forEach(r),uDo=t(o3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yde=s(o3,"CODE",{});var pHt=n(yde);pDo=t(pHt,"pretrained_model_name_or_path"),pHt.forEach(r),_Do=t(o3,":"),o3.forEach(r),bDo=d(na),B=s(na,"UL",{});var x=n(B);JT=s(x,"LI",{});var sye=n(JT);wde=s(sye,"STRONG",{});var _Ht=n(wde);vDo=t(_Ht,"albert"),_Ht.forEach(r),TDo=t(sye," \u2014 "),Ij=s(sye,"A",{href:!0});var bHt=n(Ij);FDo=t(bHt,"TFAlbertModel"),bHt.forEach(r),CDo=t(sye," (ALBERT model)"),sye.forEach(r),MDo=d(x),YT=s(x,"LI",{});var nye=n(YT);Ade=s(nye,"STRONG",{});var vHt=n(Ade);EDo=t(vHt,"bart"),vHt.forEach(r),yDo=t(nye," \u2014 "),jj=s(nye,"A",{href:!0});var THt=n(jj);wDo=t(THt,"TFBartModel"),THt.forEach(r),ADo=t(nye," (BART model)"),nye.forEach(r),LDo=d(x),KT=s(x,"LI",{});var lye=n(KT);Lde=s(lye,"STRONG",{});var FHt=n(Lde);BDo=t(FHt,"bert"),FHt.forEach(r),xDo=t(lye," \u2014 "),Nj=s(lye,"A",{href:!0});var CHt=n(Nj);kDo=t(CHt,"TFBertModel"),CHt.forEach(r),RDo=t(lye," (BERT model)"),lye.forEach(r),SDo=d(x),ZT=s(x,"LI",{});var dye=n(ZT);Bde=s(dye,"STRONG",{});var MHt=n(Bde);PDo=t(MHt,"blenderbot"),MHt.forEach(r),$Do=t(dye," \u2014 "),Dj=s(dye,"A",{href:!0});var EHt=n(Dj);IDo=t(EHt,"TFBlenderbotModel"),EHt.forEach(r),jDo=t(dye," (Blenderbot model)"),dye.forEach(r),NDo=d(x),e1=s(x,"LI",{});var iye=n(e1);xde=s(iye,"STRONG",{});var yHt=n(xde);DDo=t(yHt,"blenderbot-small"),yHt.forEach(r),qDo=t(iye," \u2014 "),qj=s(iye,"A",{href:!0});var wHt=n(qj);GDo=t(wHt,"TFBlenderbotSmallModel"),wHt.forEach(r),ODo=t(iye," (BlenderbotSmall model)"),iye.forEach(r),XDo=d(x),o1=s(x,"LI",{});var cye=n(o1);kde=s(cye,"STRONG",{});var AHt=n(kde);zDo=t(AHt,"camembert"),AHt.forEach(r),VDo=t(cye," \u2014 "),Gj=s(cye,"A",{href:!0});var LHt=n(Gj);WDo=t(LHt,"TFCamembertModel"),LHt.forEach(r),QDo=t(cye," (CamemBERT model)"),cye.forEach(r),HDo=d(x),t1=s(x,"LI",{});var fye=n(t1);Rde=s(fye,"STRONG",{});var BHt=n(Rde);UDo=t(BHt,"clip"),BHt.forEach(r),JDo=t(fye," \u2014 "),Oj=s(fye,"A",{href:!0});var xHt=n(Oj);YDo=t(xHt,"TFCLIPModel"),xHt.forEach(r),KDo=t(fye," (CLIP model)"),fye.forEach(r),ZDo=d(x),r1=s(x,"LI",{});var mye=n(r1);Sde=s(mye,"STRONG",{});var kHt=n(Sde);eqo=t(kHt,"convbert"),kHt.forEach(r),oqo=t(mye," \u2014 "),Xj=s(mye,"A",{href:!0});var RHt=n(Xj);tqo=t(RHt,"TFConvBertModel"),RHt.forEach(r),rqo=t(mye," (ConvBERT model)"),mye.forEach(r),aqo=d(x),a1=s(x,"LI",{});var gye=n(a1);Pde=s(gye,"STRONG",{});var SHt=n(Pde);sqo=t(SHt,"ctrl"),SHt.forEach(r),nqo=t(gye," \u2014 "),zj=s(gye,"A",{href:!0});var PHt=n(zj);lqo=t(PHt,"TFCTRLModel"),PHt.forEach(r),dqo=t(gye," (CTRL model)"),gye.forEach(r),iqo=d(x),s1=s(x,"LI",{});var hye=n(s1);$de=s(hye,"STRONG",{});var $Ht=n($de);cqo=t($Ht,"deberta"),$Ht.forEach(r),fqo=t(hye," \u2014 "),Vj=s(hye,"A",{href:!0});var IHt=n(Vj);mqo=t(IHt,"TFDebertaModel"),IHt.forEach(r),gqo=t(hye," (DeBERTa model)"),hye.forEach(r),hqo=d(x),n1=s(x,"LI",{});var uye=n(n1);Ide=s(uye,"STRONG",{});var jHt=n(Ide);uqo=t(jHt,"deberta-v2"),jHt.forEach(r),pqo=t(uye," \u2014 "),Wj=s(uye,"A",{href:!0});var NHt=n(Wj);_qo=t(NHt,"TFDebertaV2Model"),NHt.forEach(r),bqo=t(uye," (DeBERTa-v2 model)"),uye.forEach(r),vqo=d(x),l1=s(x,"LI",{});var pye=n(l1);jde=s(pye,"STRONG",{});var DHt=n(jde);Tqo=t(DHt,"distilbert"),DHt.forEach(r),Fqo=t(pye," \u2014 "),Qj=s(pye,"A",{href:!0});var qHt=n(Qj);Cqo=t(qHt,"TFDistilBertModel"),qHt.forEach(r),Mqo=t(pye," (DistilBERT model)"),pye.forEach(r),Eqo=d(x),d1=s(x,"LI",{});var _ye=n(d1);Nde=s(_ye,"STRONG",{});var GHt=n(Nde);yqo=t(GHt,"dpr"),GHt.forEach(r),wqo=t(_ye," \u2014 "),Hj=s(_ye,"A",{href:!0});var OHt=n(Hj);Aqo=t(OHt,"TFDPRQuestionEncoder"),OHt.forEach(r),Lqo=t(_ye," (DPR model)"),_ye.forEach(r),Bqo=d(x),i1=s(x,"LI",{});var bye=n(i1);Dde=s(bye,"STRONG",{});var XHt=n(Dde);xqo=t(XHt,"electra"),XHt.forEach(r),kqo=t(bye," \u2014 "),Uj=s(bye,"A",{href:!0});var zHt=n(Uj);Rqo=t(zHt,"TFElectraModel"),zHt.forEach(r),Sqo=t(bye," (ELECTRA model)"),bye.forEach(r),Pqo=d(x),c1=s(x,"LI",{});var vye=n(c1);qde=s(vye,"STRONG",{});var VHt=n(qde);$qo=t(VHt,"flaubert"),VHt.forEach(r),Iqo=t(vye," \u2014 "),Jj=s(vye,"A",{href:!0});var WHt=n(Jj);jqo=t(WHt,"TFFlaubertModel"),WHt.forEach(r),Nqo=t(vye," (FlauBERT model)"),vye.forEach(r),Dqo=d(x),Ln=s(x,"LI",{});var t7=n(Ln);Gde=s(t7,"STRONG",{});var QHt=n(Gde);qqo=t(QHt,"funnel"),QHt.forEach(r),Gqo=t(t7," \u2014 "),Yj=s(t7,"A",{href:!0});var HHt=n(Yj);Oqo=t(HHt,"TFFunnelModel"),HHt.forEach(r),Xqo=t(t7," or "),Kj=s(t7,"A",{href:!0});var UHt=n(Kj);zqo=t(UHt,"TFFunnelBaseModel"),UHt.forEach(r),Vqo=t(t7," (Funnel Transformer model)"),t7.forEach(r),Wqo=d(x),f1=s(x,"LI",{});var Tye=n(f1);Ode=s(Tye,"STRONG",{});var JHt=n(Ode);Qqo=t(JHt,"gpt2"),JHt.forEach(r),Hqo=t(Tye," \u2014 "),Zj=s(Tye,"A",{href:!0});var YHt=n(Zj);Uqo=t(YHt,"TFGPT2Model"),YHt.forEach(r),Jqo=t(Tye," (OpenAI GPT-2 model)"),Tye.forEach(r),Yqo=d(x),m1=s(x,"LI",{});var Fye=n(m1);Xde=s(Fye,"STRONG",{});var KHt=n(Xde);Kqo=t(KHt,"hubert"),KHt.forEach(r),Zqo=t(Fye," \u2014 "),eN=s(Fye,"A",{href:!0});var ZHt=n(eN);eGo=t(ZHt,"TFHubertModel"),ZHt.forEach(r),oGo=t(Fye," (Hubert model)"),Fye.forEach(r),tGo=d(x),g1=s(x,"LI",{});var Cye=n(g1);zde=s(Cye,"STRONG",{});var eUt=n(zde);rGo=t(eUt,"layoutlm"),eUt.forEach(r),aGo=t(Cye," \u2014 "),oN=s(Cye,"A",{href:!0});var oUt=n(oN);sGo=t(oUt,"TFLayoutLMModel"),oUt.forEach(r),nGo=t(Cye," (LayoutLM model)"),Cye.forEach(r),lGo=d(x),h1=s(x,"LI",{});var Mye=n(h1);Vde=s(Mye,"STRONG",{});var tUt=n(Vde);dGo=t(tUt,"led"),tUt.forEach(r),iGo=t(Mye," \u2014 "),tN=s(Mye,"A",{href:!0});var rUt=n(tN);cGo=t(rUt,"TFLEDModel"),rUt.forEach(r),fGo=t(Mye," (LED model)"),Mye.forEach(r),mGo=d(x),u1=s(x,"LI",{});var Eye=n(u1);Wde=s(Eye,"STRONG",{});var aUt=n(Wde);gGo=t(aUt,"longformer"),aUt.forEach(r),hGo=t(Eye," \u2014 "),rN=s(Eye,"A",{href:!0});var sUt=n(rN);uGo=t(sUt,"TFLongformerModel"),sUt.forEach(r),pGo=t(Eye," (Longformer model)"),Eye.forEach(r),_Go=d(x),p1=s(x,"LI",{});var yye=n(p1);Qde=s(yye,"STRONG",{});var nUt=n(Qde);bGo=t(nUt,"lxmert"),nUt.forEach(r),vGo=t(yye," \u2014 "),aN=s(yye,"A",{href:!0});var lUt=n(aN);TGo=t(lUt,"TFLxmertModel"),lUt.forEach(r),FGo=t(yye," (LXMERT model)"),yye.forEach(r),CGo=d(x),_1=s(x,"LI",{});var wye=n(_1);Hde=s(wye,"STRONG",{});var dUt=n(Hde);MGo=t(dUt,"marian"),dUt.forEach(r),EGo=t(wye," \u2014 "),sN=s(wye,"A",{href:!0});var iUt=n(sN);yGo=t(iUt,"TFMarianModel"),iUt.forEach(r),wGo=t(wye," (Marian model)"),wye.forEach(r),AGo=d(x),b1=s(x,"LI",{});var Aye=n(b1);Ude=s(Aye,"STRONG",{});var cUt=n(Ude);LGo=t(cUt,"mbart"),cUt.forEach(r),BGo=t(Aye," \u2014 "),nN=s(Aye,"A",{href:!0});var fUt=n(nN);xGo=t(fUt,"TFMBartModel"),fUt.forEach(r),kGo=t(Aye," (mBART model)"),Aye.forEach(r),RGo=d(x),v1=s(x,"LI",{});var Lye=n(v1);Jde=s(Lye,"STRONG",{});var mUt=n(Jde);SGo=t(mUt,"mobilebert"),mUt.forEach(r),PGo=t(Lye," \u2014 "),lN=s(Lye,"A",{href:!0});var gUt=n(lN);$Go=t(gUt,"TFMobileBertModel"),gUt.forEach(r),IGo=t(Lye," (MobileBERT model)"),Lye.forEach(r),jGo=d(x),T1=s(x,"LI",{});var Bye=n(T1);Yde=s(Bye,"STRONG",{});var hUt=n(Yde);NGo=t(hUt,"mpnet"),hUt.forEach(r),DGo=t(Bye," \u2014 "),dN=s(Bye,"A",{href:!0});var uUt=n(dN);qGo=t(uUt,"TFMPNetModel"),uUt.forEach(r),GGo=t(Bye," (MPNet model)"),Bye.forEach(r),OGo=d(x),F1=s(x,"LI",{});var xye=n(F1);Kde=s(xye,"STRONG",{});var pUt=n(Kde);XGo=t(pUt,"mt5"),pUt.forEach(r),zGo=t(xye," \u2014 "),iN=s(xye,"A",{href:!0});var _Ut=n(iN);VGo=t(_Ut,"TFMT5Model"),_Ut.forEach(r),WGo=t(xye," (mT5 model)"),xye.forEach(r),QGo=d(x),C1=s(x,"LI",{});var kye=n(C1);Zde=s(kye,"STRONG",{});var bUt=n(Zde);HGo=t(bUt,"openai-gpt"),bUt.forEach(r),UGo=t(kye," \u2014 "),cN=s(kye,"A",{href:!0});var vUt=n(cN);JGo=t(vUt,"TFOpenAIGPTModel"),vUt.forEach(r),YGo=t(kye," (OpenAI GPT model)"),kye.forEach(r),KGo=d(x),M1=s(x,"LI",{});var Rye=n(M1);eie=s(Rye,"STRONG",{});var TUt=n(eie);ZGo=t(TUt,"pegasus"),TUt.forEach(r),eOo=t(Rye," \u2014 "),fN=s(Rye,"A",{href:!0});var FUt=n(fN);oOo=t(FUt,"TFPegasusModel"),FUt.forEach(r),tOo=t(Rye," (Pegasus model)"),Rye.forEach(r),rOo=d(x),E1=s(x,"LI",{});var Sye=n(E1);oie=s(Sye,"STRONG",{});var CUt=n(oie);aOo=t(CUt,"rembert"),CUt.forEach(r),sOo=t(Sye," \u2014 "),mN=s(Sye,"A",{href:!0});var MUt=n(mN);nOo=t(MUt,"TFRemBertModel"),MUt.forEach(r),lOo=t(Sye," (RemBERT model)"),Sye.forEach(r),dOo=d(x),y1=s(x,"LI",{});var Pye=n(y1);tie=s(Pye,"STRONG",{});var EUt=n(tie);iOo=t(EUt,"roberta"),EUt.forEach(r),cOo=t(Pye," \u2014 "),gN=s(Pye,"A",{href:!0});var yUt=n(gN);fOo=t(yUt,"TFRobertaModel"),yUt.forEach(r),mOo=t(Pye," (RoBERTa model)"),Pye.forEach(r),gOo=d(x),w1=s(x,"LI",{});var $ye=n(w1);rie=s($ye,"STRONG",{});var wUt=n(rie);hOo=t(wUt,"roformer"),wUt.forEach(r),uOo=t($ye," \u2014 "),hN=s($ye,"A",{href:!0});var AUt=n(hN);pOo=t(AUt,"TFRoFormerModel"),AUt.forEach(r),_Oo=t($ye," (RoFormer model)"),$ye.forEach(r),bOo=d(x),A1=s(x,"LI",{});var Iye=n(A1);aie=s(Iye,"STRONG",{});var LUt=n(aie);vOo=t(LUt,"speech_to_text"),LUt.forEach(r),TOo=t(Iye," \u2014 "),uN=s(Iye,"A",{href:!0});var BUt=n(uN);FOo=t(BUt,"TFSpeech2TextModel"),BUt.forEach(r),COo=t(Iye," (Speech2Text model)"),Iye.forEach(r),MOo=d(x),L1=s(x,"LI",{});var jye=n(L1);sie=s(jye,"STRONG",{});var xUt=n(sie);EOo=t(xUt,"t5"),xUt.forEach(r),yOo=t(jye," \u2014 "),pN=s(jye,"A",{href:!0});var kUt=n(pN);wOo=t(kUt,"TFT5Model"),kUt.forEach(r),AOo=t(jye," (T5 model)"),jye.forEach(r),LOo=d(x),B1=s(x,"LI",{});var Nye=n(B1);nie=s(Nye,"STRONG",{});var RUt=n(nie);BOo=t(RUt,"tapas"),RUt.forEach(r),xOo=t(Nye," \u2014 "),_N=s(Nye,"A",{href:!0});var SUt=n(_N);kOo=t(SUt,"TFTapasModel"),SUt.forEach(r),ROo=t(Nye," (TAPAS model)"),Nye.forEach(r),SOo=d(x),x1=s(x,"LI",{});var Dye=n(x1);lie=s(Dye,"STRONG",{});var PUt=n(lie);POo=t(PUt,"transfo-xl"),PUt.forEach(r),$Oo=t(Dye," \u2014 "),bN=s(Dye,"A",{href:!0});var $Ut=n(bN);IOo=t($Ut,"TFTransfoXLModel"),$Ut.forEach(r),jOo=t(Dye," (Transformer-XL model)"),Dye.forEach(r),NOo=d(x),k1=s(x,"LI",{});var qye=n(k1);die=s(qye,"STRONG",{});var IUt=n(die);DOo=t(IUt,"vit"),IUt.forEach(r),qOo=t(qye," \u2014 "),vN=s(qye,"A",{href:!0});var jUt=n(vN);GOo=t(jUt,"TFViTModel"),jUt.forEach(r),OOo=t(qye," (ViT model)"),qye.forEach(r),XOo=d(x),R1=s(x,"LI",{});var Gye=n(R1);iie=s(Gye,"STRONG",{});var NUt=n(iie);zOo=t(NUt,"wav2vec2"),NUt.forEach(r),VOo=t(Gye," \u2014 "),TN=s(Gye,"A",{href:!0});var DUt=n(TN);WOo=t(DUt,"TFWav2Vec2Model"),DUt.forEach(r),QOo=t(Gye," (Wav2Vec2 model)"),Gye.forEach(r),HOo=d(x),S1=s(x,"LI",{});var Oye=n(S1);cie=s(Oye,"STRONG",{});var qUt=n(cie);UOo=t(qUt,"xlm"),qUt.forEach(r),JOo=t(Oye," \u2014 "),FN=s(Oye,"A",{href:!0});var GUt=n(FN);YOo=t(GUt,"TFXLMModel"),GUt.forEach(r),KOo=t(Oye," (XLM model)"),Oye.forEach(r),ZOo=d(x),P1=s(x,"LI",{});var Xye=n(P1);fie=s(Xye,"STRONG",{});var OUt=n(fie);eXo=t(OUt,"xlm-roberta"),OUt.forEach(r),oXo=t(Xye," \u2014 "),CN=s(Xye,"A",{href:!0});var XUt=n(CN);tXo=t(XUt,"TFXLMRobertaModel"),XUt.forEach(r),rXo=t(Xye," (XLM-RoBERTa model)"),Xye.forEach(r),aXo=d(x),$1=s(x,"LI",{});var zye=n($1);mie=s(zye,"STRONG",{});var zUt=n(mie);sXo=t(zUt,"xlnet"),zUt.forEach(r),nXo=t(zye," \u2014 "),MN=s(zye,"A",{href:!0});var VUt=n(MN);lXo=t(VUt,"TFXLNetModel"),VUt.forEach(r),dXo=t(zye," (XLNet model)"),zye.forEach(r),x.forEach(r),iXo=d(na),gie=s(na,"P",{});var WUt=n(gie);cXo=t(WUt,"Examples:"),WUt.forEach(r),fXo=d(na),m(Zw.$$.fragment,na),na.forEach(r),Fl.forEach(r),b7e=d(i),Wi=s(i,"H2",{class:!0});var E9e=n(Wi);I1=s(E9e,"A",{id:!0,class:!0,href:!0});var QUt=n(I1);hie=s(QUt,"SPAN",{});var HUt=n(hie);m(eA.$$.fragment,HUt),HUt.forEach(r),QUt.forEach(r),mXo=d(E9e),uie=s(E9e,"SPAN",{});var UUt=n(uie);gXo=t(UUt,"TFAutoModelForPreTraining"),UUt.forEach(r),E9e.forEach(r),v7e=d(i),ft=s(i,"DIV",{class:!0});var Ml=n(ft);m(oA.$$.fragment,Ml),hXo=d(Ml),Qi=s(Ml,"P",{});var XX=n(Qi);uXo=t(XX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pie=s(XX,"CODE",{});var JUt=n(pie);pXo=t(JUt,"from_pretrained()"),JUt.forEach(r),_Xo=t(XX,"class method or the "),_ie=s(XX,"CODE",{});var YUt=n(_ie);bXo=t(YUt,"from_config()"),YUt.forEach(r),vXo=t(XX,`class
method.`),XX.forEach(r),TXo=d(Ml),tA=s(Ml,"P",{});var y9e=n(tA);FXo=t(y9e,"This class cannot be instantiated directly using "),bie=s(y9e,"CODE",{});var KUt=n(bie);CXo=t(KUt,"__init__()"),KUt.forEach(r),MXo=t(y9e," (throws an error)."),y9e.forEach(r),EXo=d(Ml),rr=s(Ml,"DIV",{class:!0});var El=n(rr);m(rA.$$.fragment,El),yXo=d(El),vie=s(El,"P",{});var ZUt=n(vie);wXo=t(ZUt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ZUt.forEach(r),AXo=d(El),Hi=s(El,"P",{});var zX=n(Hi);LXo=t(zX,`Note:
Loading a model from its configuration file does `),Tie=s(zX,"STRONG",{});var eJt=n(Tie);BXo=t(eJt,"not"),eJt.forEach(r),xXo=t(zX,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fie=s(zX,"CODE",{});var oJt=n(Fie);kXo=t(oJt,"from_pretrained()"),oJt.forEach(r),RXo=t(zX,"to load the model weights."),zX.forEach(r),SXo=d(El),Cie=s(El,"P",{});var tJt=n(Cie);PXo=t(tJt,"Examples:"),tJt.forEach(r),$Xo=d(El),m(aA.$$.fragment,El),El.forEach(r),IXo=d(Ml),mo=s(Ml,"DIV",{class:!0});var la=n(mo);m(sA.$$.fragment,la),jXo=d(la),Mie=s(la,"P",{});var rJt=n(Mie);NXo=t(rJt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),rJt.forEach(r),DXo=d(la),rs=s(la,"P",{});var t3=n(rs);qXo=t(t3,"The model class to instantiate is selected based on the "),Eie=s(t3,"CODE",{});var aJt=n(Eie);GXo=t(aJt,"model_type"),aJt.forEach(r),OXo=t(t3,` property of the config object (either
passed as an argument or loaded from `),yie=s(t3,"CODE",{});var sJt=n(yie);XXo=t(sJt,"pretrained_model_name_or_path"),sJt.forEach(r),zXo=t(t3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wie=s(t3,"CODE",{});var nJt=n(wie);VXo=t(nJt,"pretrained_model_name_or_path"),nJt.forEach(r),WXo=t(t3,":"),t3.forEach(r),QXo=d(la),H=s(la,"UL",{});var U=n(H);j1=s(U,"LI",{});var Vye=n(j1);Aie=s(Vye,"STRONG",{});var lJt=n(Aie);HXo=t(lJt,"albert"),lJt.forEach(r),UXo=t(Vye," \u2014 "),EN=s(Vye,"A",{href:!0});var dJt=n(EN);JXo=t(dJt,"TFAlbertForPreTraining"),dJt.forEach(r),YXo=t(Vye," (ALBERT model)"),Vye.forEach(r),KXo=d(U),N1=s(U,"LI",{});var Wye=n(N1);Lie=s(Wye,"STRONG",{});var iJt=n(Lie);ZXo=t(iJt,"bart"),iJt.forEach(r),ezo=t(Wye," \u2014 "),yN=s(Wye,"A",{href:!0});var cJt=n(yN);ozo=t(cJt,"TFBartForConditionalGeneration"),cJt.forEach(r),tzo=t(Wye," (BART model)"),Wye.forEach(r),rzo=d(U),D1=s(U,"LI",{});var Qye=n(D1);Bie=s(Qye,"STRONG",{});var fJt=n(Bie);azo=t(fJt,"bert"),fJt.forEach(r),szo=t(Qye," \u2014 "),wN=s(Qye,"A",{href:!0});var mJt=n(wN);nzo=t(mJt,"TFBertForPreTraining"),mJt.forEach(r),lzo=t(Qye," (BERT model)"),Qye.forEach(r),dzo=d(U),q1=s(U,"LI",{});var Hye=n(q1);xie=s(Hye,"STRONG",{});var gJt=n(xie);izo=t(gJt,"camembert"),gJt.forEach(r),czo=t(Hye," \u2014 "),AN=s(Hye,"A",{href:!0});var hJt=n(AN);fzo=t(hJt,"TFCamembertForMaskedLM"),hJt.forEach(r),mzo=t(Hye," (CamemBERT model)"),Hye.forEach(r),gzo=d(U),G1=s(U,"LI",{});var Uye=n(G1);kie=s(Uye,"STRONG",{});var uJt=n(kie);hzo=t(uJt,"ctrl"),uJt.forEach(r),uzo=t(Uye," \u2014 "),LN=s(Uye,"A",{href:!0});var pJt=n(LN);pzo=t(pJt,"TFCTRLLMHeadModel"),pJt.forEach(r),_zo=t(Uye," (CTRL model)"),Uye.forEach(r),bzo=d(U),O1=s(U,"LI",{});var Jye=n(O1);Rie=s(Jye,"STRONG",{});var _Jt=n(Rie);vzo=t(_Jt,"distilbert"),_Jt.forEach(r),Tzo=t(Jye," \u2014 "),BN=s(Jye,"A",{href:!0});var bJt=n(BN);Fzo=t(bJt,"TFDistilBertForMaskedLM"),bJt.forEach(r),Czo=t(Jye," (DistilBERT model)"),Jye.forEach(r),Mzo=d(U),X1=s(U,"LI",{});var Yye=n(X1);Sie=s(Yye,"STRONG",{});var vJt=n(Sie);Ezo=t(vJt,"electra"),vJt.forEach(r),yzo=t(Yye," \u2014 "),xN=s(Yye,"A",{href:!0});var TJt=n(xN);wzo=t(TJt,"TFElectraForPreTraining"),TJt.forEach(r),Azo=t(Yye," (ELECTRA model)"),Yye.forEach(r),Lzo=d(U),z1=s(U,"LI",{});var Kye=n(z1);Pie=s(Kye,"STRONG",{});var FJt=n(Pie);Bzo=t(FJt,"flaubert"),FJt.forEach(r),xzo=t(Kye," \u2014 "),kN=s(Kye,"A",{href:!0});var CJt=n(kN);kzo=t(CJt,"TFFlaubertWithLMHeadModel"),CJt.forEach(r),Rzo=t(Kye," (FlauBERT model)"),Kye.forEach(r),Szo=d(U),V1=s(U,"LI",{});var Zye=n(V1);$ie=s(Zye,"STRONG",{});var MJt=n($ie);Pzo=t(MJt,"funnel"),MJt.forEach(r),$zo=t(Zye," \u2014 "),RN=s(Zye,"A",{href:!0});var EJt=n(RN);Izo=t(EJt,"TFFunnelForPreTraining"),EJt.forEach(r),jzo=t(Zye," (Funnel Transformer model)"),Zye.forEach(r),Nzo=d(U),W1=s(U,"LI",{});var ewe=n(W1);Iie=s(ewe,"STRONG",{});var yJt=n(Iie);Dzo=t(yJt,"gpt2"),yJt.forEach(r),qzo=t(ewe," \u2014 "),SN=s(ewe,"A",{href:!0});var wJt=n(SN);Gzo=t(wJt,"TFGPT2LMHeadModel"),wJt.forEach(r),Ozo=t(ewe," (OpenAI GPT-2 model)"),ewe.forEach(r),Xzo=d(U),Q1=s(U,"LI",{});var owe=n(Q1);jie=s(owe,"STRONG",{});var AJt=n(jie);zzo=t(AJt,"layoutlm"),AJt.forEach(r),Vzo=t(owe," \u2014 "),PN=s(owe,"A",{href:!0});var LJt=n(PN);Wzo=t(LJt,"TFLayoutLMForMaskedLM"),LJt.forEach(r),Qzo=t(owe," (LayoutLM model)"),owe.forEach(r),Hzo=d(U),H1=s(U,"LI",{});var twe=n(H1);Nie=s(twe,"STRONG",{});var BJt=n(Nie);Uzo=t(BJt,"lxmert"),BJt.forEach(r),Jzo=t(twe," \u2014 "),$N=s(twe,"A",{href:!0});var xJt=n($N);Yzo=t(xJt,"TFLxmertForPreTraining"),xJt.forEach(r),Kzo=t(twe," (LXMERT model)"),twe.forEach(r),Zzo=d(U),U1=s(U,"LI",{});var rwe=n(U1);Die=s(rwe,"STRONG",{});var kJt=n(Die);eVo=t(kJt,"mobilebert"),kJt.forEach(r),oVo=t(rwe," \u2014 "),IN=s(rwe,"A",{href:!0});var RJt=n(IN);tVo=t(RJt,"TFMobileBertForPreTraining"),RJt.forEach(r),rVo=t(rwe," (MobileBERT model)"),rwe.forEach(r),aVo=d(U),J1=s(U,"LI",{});var awe=n(J1);qie=s(awe,"STRONG",{});var SJt=n(qie);sVo=t(SJt,"mpnet"),SJt.forEach(r),nVo=t(awe," \u2014 "),jN=s(awe,"A",{href:!0});var PJt=n(jN);lVo=t(PJt,"TFMPNetForMaskedLM"),PJt.forEach(r),dVo=t(awe," (MPNet model)"),awe.forEach(r),iVo=d(U),Y1=s(U,"LI",{});var swe=n(Y1);Gie=s(swe,"STRONG",{});var $Jt=n(Gie);cVo=t($Jt,"openai-gpt"),$Jt.forEach(r),fVo=t(swe," \u2014 "),NN=s(swe,"A",{href:!0});var IJt=n(NN);mVo=t(IJt,"TFOpenAIGPTLMHeadModel"),IJt.forEach(r),gVo=t(swe," (OpenAI GPT model)"),swe.forEach(r),hVo=d(U),K1=s(U,"LI",{});var nwe=n(K1);Oie=s(nwe,"STRONG",{});var jJt=n(Oie);uVo=t(jJt,"roberta"),jJt.forEach(r),pVo=t(nwe," \u2014 "),DN=s(nwe,"A",{href:!0});var NJt=n(DN);_Vo=t(NJt,"TFRobertaForMaskedLM"),NJt.forEach(r),bVo=t(nwe," (RoBERTa model)"),nwe.forEach(r),vVo=d(U),Z1=s(U,"LI",{});var lwe=n(Z1);Xie=s(lwe,"STRONG",{});var DJt=n(Xie);TVo=t(DJt,"t5"),DJt.forEach(r),FVo=t(lwe," \u2014 "),qN=s(lwe,"A",{href:!0});var qJt=n(qN);CVo=t(qJt,"TFT5ForConditionalGeneration"),qJt.forEach(r),MVo=t(lwe," (T5 model)"),lwe.forEach(r),EVo=d(U),eF=s(U,"LI",{});var dwe=n(eF);zie=s(dwe,"STRONG",{});var GJt=n(zie);yVo=t(GJt,"tapas"),GJt.forEach(r),wVo=t(dwe," \u2014 "),GN=s(dwe,"A",{href:!0});var OJt=n(GN);AVo=t(OJt,"TFTapasForMaskedLM"),OJt.forEach(r),LVo=t(dwe," (TAPAS model)"),dwe.forEach(r),BVo=d(U),oF=s(U,"LI",{});var iwe=n(oF);Vie=s(iwe,"STRONG",{});var XJt=n(Vie);xVo=t(XJt,"transfo-xl"),XJt.forEach(r),kVo=t(iwe," \u2014 "),ON=s(iwe,"A",{href:!0});var zJt=n(ON);RVo=t(zJt,"TFTransfoXLLMHeadModel"),zJt.forEach(r),SVo=t(iwe," (Transformer-XL model)"),iwe.forEach(r),PVo=d(U),tF=s(U,"LI",{});var cwe=n(tF);Wie=s(cwe,"STRONG",{});var VJt=n(Wie);$Vo=t(VJt,"xlm"),VJt.forEach(r),IVo=t(cwe," \u2014 "),XN=s(cwe,"A",{href:!0});var WJt=n(XN);jVo=t(WJt,"TFXLMWithLMHeadModel"),WJt.forEach(r),NVo=t(cwe," (XLM model)"),cwe.forEach(r),DVo=d(U),rF=s(U,"LI",{});var fwe=n(rF);Qie=s(fwe,"STRONG",{});var QJt=n(Qie);qVo=t(QJt,"xlm-roberta"),QJt.forEach(r),GVo=t(fwe," \u2014 "),zN=s(fwe,"A",{href:!0});var HJt=n(zN);OVo=t(HJt,"TFXLMRobertaForMaskedLM"),HJt.forEach(r),XVo=t(fwe," (XLM-RoBERTa model)"),fwe.forEach(r),zVo=d(U),aF=s(U,"LI",{});var mwe=n(aF);Hie=s(mwe,"STRONG",{});var UJt=n(Hie);VVo=t(UJt,"xlnet"),UJt.forEach(r),WVo=t(mwe," \u2014 "),VN=s(mwe,"A",{href:!0});var JJt=n(VN);QVo=t(JJt,"TFXLNetLMHeadModel"),JJt.forEach(r),HVo=t(mwe," (XLNet model)"),mwe.forEach(r),U.forEach(r),UVo=d(la),Uie=s(la,"P",{});var YJt=n(Uie);JVo=t(YJt,"Examples:"),YJt.forEach(r),YVo=d(la),m(nA.$$.fragment,la),la.forEach(r),Ml.forEach(r),T7e=d(i),Ui=s(i,"H2",{class:!0});var w9e=n(Ui);sF=s(w9e,"A",{id:!0,class:!0,href:!0});var KJt=n(sF);Jie=s(KJt,"SPAN",{});var ZJt=n(Jie);m(lA.$$.fragment,ZJt),ZJt.forEach(r),KJt.forEach(r),KVo=d(w9e),Yie=s(w9e,"SPAN",{});var eYt=n(Yie);ZVo=t(eYt,"TFAutoModelForCausalLM"),eYt.forEach(r),w9e.forEach(r),F7e=d(i),mt=s(i,"DIV",{class:!0});var yl=n(mt);m(dA.$$.fragment,yl),eWo=d(yl),Ji=s(yl,"P",{});var VX=n(Ji);oWo=t(VX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Kie=s(VX,"CODE",{});var oYt=n(Kie);tWo=t(oYt,"from_pretrained()"),oYt.forEach(r),rWo=t(VX,"class method or the "),Zie=s(VX,"CODE",{});var tYt=n(Zie);aWo=t(tYt,"from_config()"),tYt.forEach(r),sWo=t(VX,`class
method.`),VX.forEach(r),nWo=d(yl),iA=s(yl,"P",{});var A9e=n(iA);lWo=t(A9e,"This class cannot be instantiated directly using "),ece=s(A9e,"CODE",{});var rYt=n(ece);dWo=t(rYt,"__init__()"),rYt.forEach(r),iWo=t(A9e," (throws an error)."),A9e.forEach(r),cWo=d(yl),ar=s(yl,"DIV",{class:!0});var wl=n(ar);m(cA.$$.fragment,wl),fWo=d(wl),oce=s(wl,"P",{});var aYt=n(oce);mWo=t(aYt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),aYt.forEach(r),gWo=d(wl),Yi=s(wl,"P",{});var WX=n(Yi);hWo=t(WX,`Note:
Loading a model from its configuration file does `),tce=s(WX,"STRONG",{});var sYt=n(tce);uWo=t(sYt,"not"),sYt.forEach(r),pWo=t(WX,` load the model weights. It only affects the
model\u2019s configuration. Use `),rce=s(WX,"CODE",{});var nYt=n(rce);_Wo=t(nYt,"from_pretrained()"),nYt.forEach(r),bWo=t(WX,"to load the model weights."),WX.forEach(r),vWo=d(wl),ace=s(wl,"P",{});var lYt=n(ace);TWo=t(lYt,"Examples:"),lYt.forEach(r),FWo=d(wl),m(fA.$$.fragment,wl),wl.forEach(r),CWo=d(yl),go=s(yl,"DIV",{class:!0});var da=n(go);m(mA.$$.fragment,da),MWo=d(da),sce=s(da,"P",{});var dYt=n(sce);EWo=t(dYt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),dYt.forEach(r),yWo=d(da),as=s(da,"P",{});var r3=n(as);wWo=t(r3,"The model class to instantiate is selected based on the "),nce=s(r3,"CODE",{});var iYt=n(nce);AWo=t(iYt,"model_type"),iYt.forEach(r),LWo=t(r3,` property of the config object (either
passed as an argument or loaded from `),lce=s(r3,"CODE",{});var cYt=n(lce);BWo=t(cYt,"pretrained_model_name_or_path"),cYt.forEach(r),xWo=t(r3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dce=s(r3,"CODE",{});var fYt=n(dce);kWo=t(fYt,"pretrained_model_name_or_path"),fYt.forEach(r),RWo=t(r3,":"),r3.forEach(r),SWo=d(da),he=s(da,"UL",{});var Ce=n(he);nF=s(Ce,"LI",{});var gwe=n(nF);ice=s(gwe,"STRONG",{});var mYt=n(ice);PWo=t(mYt,"bert"),mYt.forEach(r),$Wo=t(gwe," \u2014 "),WN=s(gwe,"A",{href:!0});var gYt=n(WN);IWo=t(gYt,"TFBertLMHeadModel"),gYt.forEach(r),jWo=t(gwe," (BERT model)"),gwe.forEach(r),NWo=d(Ce),lF=s(Ce,"LI",{});var hwe=n(lF);cce=s(hwe,"STRONG",{});var hYt=n(cce);DWo=t(hYt,"ctrl"),hYt.forEach(r),qWo=t(hwe," \u2014 "),QN=s(hwe,"A",{href:!0});var uYt=n(QN);GWo=t(uYt,"TFCTRLLMHeadModel"),uYt.forEach(r),OWo=t(hwe," (CTRL model)"),hwe.forEach(r),XWo=d(Ce),dF=s(Ce,"LI",{});var uwe=n(dF);fce=s(uwe,"STRONG",{});var pYt=n(fce);zWo=t(pYt,"gpt2"),pYt.forEach(r),VWo=t(uwe," \u2014 "),HN=s(uwe,"A",{href:!0});var _Yt=n(HN);WWo=t(_Yt,"TFGPT2LMHeadModel"),_Yt.forEach(r),QWo=t(uwe," (OpenAI GPT-2 model)"),uwe.forEach(r),HWo=d(Ce),iF=s(Ce,"LI",{});var pwe=n(iF);mce=s(pwe,"STRONG",{});var bYt=n(mce);UWo=t(bYt,"openai-gpt"),bYt.forEach(r),JWo=t(pwe," \u2014 "),UN=s(pwe,"A",{href:!0});var vYt=n(UN);YWo=t(vYt,"TFOpenAIGPTLMHeadModel"),vYt.forEach(r),KWo=t(pwe," (OpenAI GPT model)"),pwe.forEach(r),ZWo=d(Ce),cF=s(Ce,"LI",{});var _we=n(cF);gce=s(_we,"STRONG",{});var TYt=n(gce);eQo=t(TYt,"rembert"),TYt.forEach(r),oQo=t(_we," \u2014 "),JN=s(_we,"A",{href:!0});var FYt=n(JN);tQo=t(FYt,"TFRemBertForCausalLM"),FYt.forEach(r),rQo=t(_we," (RemBERT model)"),_we.forEach(r),aQo=d(Ce),fF=s(Ce,"LI",{});var bwe=n(fF);hce=s(bwe,"STRONG",{});var CYt=n(hce);sQo=t(CYt,"roberta"),CYt.forEach(r),nQo=t(bwe," \u2014 "),YN=s(bwe,"A",{href:!0});var MYt=n(YN);lQo=t(MYt,"TFRobertaForCausalLM"),MYt.forEach(r),dQo=t(bwe," (RoBERTa model)"),bwe.forEach(r),iQo=d(Ce),mF=s(Ce,"LI",{});var vwe=n(mF);uce=s(vwe,"STRONG",{});var EYt=n(uce);cQo=t(EYt,"roformer"),EYt.forEach(r),fQo=t(vwe," \u2014 "),KN=s(vwe,"A",{href:!0});var yYt=n(KN);mQo=t(yYt,"TFRoFormerForCausalLM"),yYt.forEach(r),gQo=t(vwe," (RoFormer model)"),vwe.forEach(r),hQo=d(Ce),gF=s(Ce,"LI",{});var Twe=n(gF);pce=s(Twe,"STRONG",{});var wYt=n(pce);uQo=t(wYt,"transfo-xl"),wYt.forEach(r),pQo=t(Twe," \u2014 "),ZN=s(Twe,"A",{href:!0});var AYt=n(ZN);_Qo=t(AYt,"TFTransfoXLLMHeadModel"),AYt.forEach(r),bQo=t(Twe," (Transformer-XL model)"),Twe.forEach(r),vQo=d(Ce),hF=s(Ce,"LI",{});var Fwe=n(hF);_ce=s(Fwe,"STRONG",{});var LYt=n(_ce);TQo=t(LYt,"xlm"),LYt.forEach(r),FQo=t(Fwe," \u2014 "),eD=s(Fwe,"A",{href:!0});var BYt=n(eD);CQo=t(BYt,"TFXLMWithLMHeadModel"),BYt.forEach(r),MQo=t(Fwe," (XLM model)"),Fwe.forEach(r),EQo=d(Ce),uF=s(Ce,"LI",{});var Cwe=n(uF);bce=s(Cwe,"STRONG",{});var xYt=n(bce);yQo=t(xYt,"xlnet"),xYt.forEach(r),wQo=t(Cwe," \u2014 "),oD=s(Cwe,"A",{href:!0});var kYt=n(oD);AQo=t(kYt,"TFXLNetLMHeadModel"),kYt.forEach(r),LQo=t(Cwe," (XLNet model)"),Cwe.forEach(r),Ce.forEach(r),BQo=d(da),vce=s(da,"P",{});var RYt=n(vce);xQo=t(RYt,"Examples:"),RYt.forEach(r),kQo=d(da),m(gA.$$.fragment,da),da.forEach(r),yl.forEach(r),C7e=d(i),Ki=s(i,"H2",{class:!0});var L9e=n(Ki);pF=s(L9e,"A",{id:!0,class:!0,href:!0});var SYt=n(pF);Tce=s(SYt,"SPAN",{});var PYt=n(Tce);m(hA.$$.fragment,PYt),PYt.forEach(r),SYt.forEach(r),RQo=d(L9e),Fce=s(L9e,"SPAN",{});var $Yt=n(Fce);SQo=t($Yt,"TFAutoModelForImageClassification"),$Yt.forEach(r),L9e.forEach(r),M7e=d(i),gt=s(i,"DIV",{class:!0});var Al=n(gt);m(uA.$$.fragment,Al),PQo=d(Al),Zi=s(Al,"P",{});var QX=n(Zi);$Qo=t(QX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Cce=s(QX,"CODE",{});var IYt=n(Cce);IQo=t(IYt,"from_pretrained()"),IYt.forEach(r),jQo=t(QX,"class method or the "),Mce=s(QX,"CODE",{});var jYt=n(Mce);NQo=t(jYt,"from_config()"),jYt.forEach(r),DQo=t(QX,`class
method.`),QX.forEach(r),qQo=d(Al),pA=s(Al,"P",{});var B9e=n(pA);GQo=t(B9e,"This class cannot be instantiated directly using "),Ece=s(B9e,"CODE",{});var NYt=n(Ece);OQo=t(NYt,"__init__()"),NYt.forEach(r),XQo=t(B9e," (throws an error)."),B9e.forEach(r),zQo=d(Al),sr=s(Al,"DIV",{class:!0});var Ll=n(sr);m(_A.$$.fragment,Ll),VQo=d(Ll),yce=s(Ll,"P",{});var DYt=n(yce);WQo=t(DYt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),DYt.forEach(r),QQo=d(Ll),ec=s(Ll,"P",{});var HX=n(ec);HQo=t(HX,`Note:
Loading a model from its configuration file does `),wce=s(HX,"STRONG",{});var qYt=n(wce);UQo=t(qYt,"not"),qYt.forEach(r),JQo=t(HX,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ace=s(HX,"CODE",{});var GYt=n(Ace);YQo=t(GYt,"from_pretrained()"),GYt.forEach(r),KQo=t(HX,"to load the model weights."),HX.forEach(r),ZQo=d(Ll),Lce=s(Ll,"P",{});var OYt=n(Lce);eHo=t(OYt,"Examples:"),OYt.forEach(r),oHo=d(Ll),m(bA.$$.fragment,Ll),Ll.forEach(r),tHo=d(Al),ho=s(Al,"DIV",{class:!0});var ia=n(ho);m(vA.$$.fragment,ia),rHo=d(ia),Bce=s(ia,"P",{});var XYt=n(Bce);aHo=t(XYt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),XYt.forEach(r),sHo=d(ia),ss=s(ia,"P",{});var a3=n(ss);nHo=t(a3,"The model class to instantiate is selected based on the "),xce=s(a3,"CODE",{});var zYt=n(xce);lHo=t(zYt,"model_type"),zYt.forEach(r),dHo=t(a3,` property of the config object (either
passed as an argument or loaded from `),kce=s(a3,"CODE",{});var VYt=n(kce);iHo=t(VYt,"pretrained_model_name_or_path"),VYt.forEach(r),cHo=t(a3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rce=s(a3,"CODE",{});var WYt=n(Rce);fHo=t(WYt,"pretrained_model_name_or_path"),WYt.forEach(r),mHo=t(a3,":"),a3.forEach(r),gHo=d(ia),Sce=s(ia,"UL",{});var QYt=n(Sce);_F=s(QYt,"LI",{});var Mwe=n(_F);Pce=s(Mwe,"STRONG",{});var HYt=n(Pce);hHo=t(HYt,"vit"),HYt.forEach(r),uHo=t(Mwe," \u2014 "),tD=s(Mwe,"A",{href:!0});var UYt=n(tD);pHo=t(UYt,"TFViTForImageClassification"),UYt.forEach(r),_Ho=t(Mwe," (ViT model)"),Mwe.forEach(r),QYt.forEach(r),bHo=d(ia),$ce=s(ia,"P",{});var JYt=n($ce);vHo=t(JYt,"Examples:"),JYt.forEach(r),THo=d(ia),m(TA.$$.fragment,ia),ia.forEach(r),Al.forEach(r),E7e=d(i),oc=s(i,"H2",{class:!0});var x9e=n(oc);bF=s(x9e,"A",{id:!0,class:!0,href:!0});var YYt=n(bF);Ice=s(YYt,"SPAN",{});var KYt=n(Ice);m(FA.$$.fragment,KYt),KYt.forEach(r),YYt.forEach(r),FHo=d(x9e),jce=s(x9e,"SPAN",{});var ZYt=n(jce);CHo=t(ZYt,"TFAutoModelForMaskedLM"),ZYt.forEach(r),x9e.forEach(r),y7e=d(i),ht=s(i,"DIV",{class:!0});var Bl=n(ht);m(CA.$$.fragment,Bl),MHo=d(Bl),tc=s(Bl,"P",{});var UX=n(tc);EHo=t(UX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Nce=s(UX,"CODE",{});var eKt=n(Nce);yHo=t(eKt,"from_pretrained()"),eKt.forEach(r),wHo=t(UX,"class method or the "),Dce=s(UX,"CODE",{});var oKt=n(Dce);AHo=t(oKt,"from_config()"),oKt.forEach(r),LHo=t(UX,`class
method.`),UX.forEach(r),BHo=d(Bl),MA=s(Bl,"P",{});var k9e=n(MA);xHo=t(k9e,"This class cannot be instantiated directly using "),qce=s(k9e,"CODE",{});var tKt=n(qce);kHo=t(tKt,"__init__()"),tKt.forEach(r),RHo=t(k9e," (throws an error)."),k9e.forEach(r),SHo=d(Bl),nr=s(Bl,"DIV",{class:!0});var xl=n(nr);m(EA.$$.fragment,xl),PHo=d(xl),Gce=s(xl,"P",{});var rKt=n(Gce);$Ho=t(rKt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),rKt.forEach(r),IHo=d(xl),rc=s(xl,"P",{});var JX=n(rc);jHo=t(JX,`Note:
Loading a model from its configuration file does `),Oce=s(JX,"STRONG",{});var aKt=n(Oce);NHo=t(aKt,"not"),aKt.forEach(r),DHo=t(JX,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xce=s(JX,"CODE",{});var sKt=n(Xce);qHo=t(sKt,"from_pretrained()"),sKt.forEach(r),GHo=t(JX,"to load the model weights."),JX.forEach(r),OHo=d(xl),zce=s(xl,"P",{});var nKt=n(zce);XHo=t(nKt,"Examples:"),nKt.forEach(r),zHo=d(xl),m(yA.$$.fragment,xl),xl.forEach(r),VHo=d(Bl),uo=s(Bl,"DIV",{class:!0});var ca=n(uo);m(wA.$$.fragment,ca),WHo=d(ca),Vce=s(ca,"P",{});var lKt=n(Vce);QHo=t(lKt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),lKt.forEach(r),HHo=d(ca),ns=s(ca,"P",{});var s3=n(ns);UHo=t(s3,"The model class to instantiate is selected based on the "),Wce=s(s3,"CODE",{});var dKt=n(Wce);JHo=t(dKt,"model_type"),dKt.forEach(r),YHo=t(s3,` property of the config object (either
passed as an argument or loaded from `),Qce=s(s3,"CODE",{});var iKt=n(Qce);KHo=t(iKt,"pretrained_model_name_or_path"),iKt.forEach(r),ZHo=t(s3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hce=s(s3,"CODE",{});var cKt=n(Hce);eUo=t(cKt,"pretrained_model_name_or_path"),cKt.forEach(r),oUo=t(s3,":"),s3.forEach(r),tUo=d(ca),Y=s(ca,"UL",{});var ee=n(Y);vF=s(ee,"LI",{});var Ewe=n(vF);Uce=s(Ewe,"STRONG",{});var fKt=n(Uce);rUo=t(fKt,"albert"),fKt.forEach(r),aUo=t(Ewe," \u2014 "),rD=s(Ewe,"A",{href:!0});var mKt=n(rD);sUo=t(mKt,"TFAlbertForMaskedLM"),mKt.forEach(r),nUo=t(Ewe," (ALBERT model)"),Ewe.forEach(r),lUo=d(ee),TF=s(ee,"LI",{});var ywe=n(TF);Jce=s(ywe,"STRONG",{});var gKt=n(Jce);dUo=t(gKt,"bert"),gKt.forEach(r),iUo=t(ywe," \u2014 "),aD=s(ywe,"A",{href:!0});var hKt=n(aD);cUo=t(hKt,"TFBertForMaskedLM"),hKt.forEach(r),fUo=t(ywe," (BERT model)"),ywe.forEach(r),mUo=d(ee),FF=s(ee,"LI",{});var wwe=n(FF);Yce=s(wwe,"STRONG",{});var uKt=n(Yce);gUo=t(uKt,"camembert"),uKt.forEach(r),hUo=t(wwe," \u2014 "),sD=s(wwe,"A",{href:!0});var pKt=n(sD);uUo=t(pKt,"TFCamembertForMaskedLM"),pKt.forEach(r),pUo=t(wwe," (CamemBERT model)"),wwe.forEach(r),_Uo=d(ee),CF=s(ee,"LI",{});var Awe=n(CF);Kce=s(Awe,"STRONG",{});var _Kt=n(Kce);bUo=t(_Kt,"convbert"),_Kt.forEach(r),vUo=t(Awe," \u2014 "),nD=s(Awe,"A",{href:!0});var bKt=n(nD);TUo=t(bKt,"TFConvBertForMaskedLM"),bKt.forEach(r),FUo=t(Awe," (ConvBERT model)"),Awe.forEach(r),CUo=d(ee),MF=s(ee,"LI",{});var Lwe=n(MF);Zce=s(Lwe,"STRONG",{});var vKt=n(Zce);MUo=t(vKt,"deberta"),vKt.forEach(r),EUo=t(Lwe," \u2014 "),lD=s(Lwe,"A",{href:!0});var TKt=n(lD);yUo=t(TKt,"TFDebertaForMaskedLM"),TKt.forEach(r),wUo=t(Lwe," (DeBERTa model)"),Lwe.forEach(r),AUo=d(ee),EF=s(ee,"LI",{});var Bwe=n(EF);efe=s(Bwe,"STRONG",{});var FKt=n(efe);LUo=t(FKt,"deberta-v2"),FKt.forEach(r),BUo=t(Bwe," \u2014 "),dD=s(Bwe,"A",{href:!0});var CKt=n(dD);xUo=t(CKt,"TFDebertaV2ForMaskedLM"),CKt.forEach(r),kUo=t(Bwe," (DeBERTa-v2 model)"),Bwe.forEach(r),RUo=d(ee),yF=s(ee,"LI",{});var xwe=n(yF);ofe=s(xwe,"STRONG",{});var MKt=n(ofe);SUo=t(MKt,"distilbert"),MKt.forEach(r),PUo=t(xwe," \u2014 "),iD=s(xwe,"A",{href:!0});var EKt=n(iD);$Uo=t(EKt,"TFDistilBertForMaskedLM"),EKt.forEach(r),IUo=t(xwe," (DistilBERT model)"),xwe.forEach(r),jUo=d(ee),wF=s(ee,"LI",{});var kwe=n(wF);tfe=s(kwe,"STRONG",{});var yKt=n(tfe);NUo=t(yKt,"electra"),yKt.forEach(r),DUo=t(kwe," \u2014 "),cD=s(kwe,"A",{href:!0});var wKt=n(cD);qUo=t(wKt,"TFElectraForMaskedLM"),wKt.forEach(r),GUo=t(kwe," (ELECTRA model)"),kwe.forEach(r),OUo=d(ee),AF=s(ee,"LI",{});var Rwe=n(AF);rfe=s(Rwe,"STRONG",{});var AKt=n(rfe);XUo=t(AKt,"flaubert"),AKt.forEach(r),zUo=t(Rwe," \u2014 "),fD=s(Rwe,"A",{href:!0});var LKt=n(fD);VUo=t(LKt,"TFFlaubertWithLMHeadModel"),LKt.forEach(r),WUo=t(Rwe," (FlauBERT model)"),Rwe.forEach(r),QUo=d(ee),LF=s(ee,"LI",{});var Swe=n(LF);afe=s(Swe,"STRONG",{});var BKt=n(afe);HUo=t(BKt,"funnel"),BKt.forEach(r),UUo=t(Swe," \u2014 "),mD=s(Swe,"A",{href:!0});var xKt=n(mD);JUo=t(xKt,"TFFunnelForMaskedLM"),xKt.forEach(r),YUo=t(Swe," (Funnel Transformer model)"),Swe.forEach(r),KUo=d(ee),BF=s(ee,"LI",{});var Pwe=n(BF);sfe=s(Pwe,"STRONG",{});var kKt=n(sfe);ZUo=t(kKt,"layoutlm"),kKt.forEach(r),eJo=t(Pwe," \u2014 "),gD=s(Pwe,"A",{href:!0});var RKt=n(gD);oJo=t(RKt,"TFLayoutLMForMaskedLM"),RKt.forEach(r),tJo=t(Pwe," (LayoutLM model)"),Pwe.forEach(r),rJo=d(ee),xF=s(ee,"LI",{});var $we=n(xF);nfe=s($we,"STRONG",{});var SKt=n(nfe);aJo=t(SKt,"longformer"),SKt.forEach(r),sJo=t($we," \u2014 "),hD=s($we,"A",{href:!0});var PKt=n(hD);nJo=t(PKt,"TFLongformerForMaskedLM"),PKt.forEach(r),lJo=t($we," (Longformer model)"),$we.forEach(r),dJo=d(ee),kF=s(ee,"LI",{});var Iwe=n(kF);lfe=s(Iwe,"STRONG",{});var $Kt=n(lfe);iJo=t($Kt,"mobilebert"),$Kt.forEach(r),cJo=t(Iwe," \u2014 "),uD=s(Iwe,"A",{href:!0});var IKt=n(uD);fJo=t(IKt,"TFMobileBertForMaskedLM"),IKt.forEach(r),mJo=t(Iwe," (MobileBERT model)"),Iwe.forEach(r),gJo=d(ee),RF=s(ee,"LI",{});var jwe=n(RF);dfe=s(jwe,"STRONG",{});var jKt=n(dfe);hJo=t(jKt,"mpnet"),jKt.forEach(r),uJo=t(jwe," \u2014 "),pD=s(jwe,"A",{href:!0});var NKt=n(pD);pJo=t(NKt,"TFMPNetForMaskedLM"),NKt.forEach(r),_Jo=t(jwe," (MPNet model)"),jwe.forEach(r),bJo=d(ee),SF=s(ee,"LI",{});var Nwe=n(SF);ife=s(Nwe,"STRONG",{});var DKt=n(ife);vJo=t(DKt,"rembert"),DKt.forEach(r),TJo=t(Nwe," \u2014 "),_D=s(Nwe,"A",{href:!0});var qKt=n(_D);FJo=t(qKt,"TFRemBertForMaskedLM"),qKt.forEach(r),CJo=t(Nwe," (RemBERT model)"),Nwe.forEach(r),MJo=d(ee),PF=s(ee,"LI",{});var Dwe=n(PF);cfe=s(Dwe,"STRONG",{});var GKt=n(cfe);EJo=t(GKt,"roberta"),GKt.forEach(r),yJo=t(Dwe," \u2014 "),bD=s(Dwe,"A",{href:!0});var OKt=n(bD);wJo=t(OKt,"TFRobertaForMaskedLM"),OKt.forEach(r),AJo=t(Dwe," (RoBERTa model)"),Dwe.forEach(r),LJo=d(ee),$F=s(ee,"LI",{});var qwe=n($F);ffe=s(qwe,"STRONG",{});var XKt=n(ffe);BJo=t(XKt,"roformer"),XKt.forEach(r),xJo=t(qwe," \u2014 "),vD=s(qwe,"A",{href:!0});var zKt=n(vD);kJo=t(zKt,"TFRoFormerForMaskedLM"),zKt.forEach(r),RJo=t(qwe," (RoFormer model)"),qwe.forEach(r),SJo=d(ee),IF=s(ee,"LI",{});var Gwe=n(IF);mfe=s(Gwe,"STRONG",{});var VKt=n(mfe);PJo=t(VKt,"tapas"),VKt.forEach(r),$Jo=t(Gwe," \u2014 "),TD=s(Gwe,"A",{href:!0});var WKt=n(TD);IJo=t(WKt,"TFTapasForMaskedLM"),WKt.forEach(r),jJo=t(Gwe," (TAPAS model)"),Gwe.forEach(r),NJo=d(ee),jF=s(ee,"LI",{});var Owe=n(jF);gfe=s(Owe,"STRONG",{});var QKt=n(gfe);DJo=t(QKt,"xlm"),QKt.forEach(r),qJo=t(Owe," \u2014 "),FD=s(Owe,"A",{href:!0});var HKt=n(FD);GJo=t(HKt,"TFXLMWithLMHeadModel"),HKt.forEach(r),OJo=t(Owe," (XLM model)"),Owe.forEach(r),XJo=d(ee),NF=s(ee,"LI",{});var Xwe=n(NF);hfe=s(Xwe,"STRONG",{});var UKt=n(hfe);zJo=t(UKt,"xlm-roberta"),UKt.forEach(r),VJo=t(Xwe," \u2014 "),CD=s(Xwe,"A",{href:!0});var JKt=n(CD);WJo=t(JKt,"TFXLMRobertaForMaskedLM"),JKt.forEach(r),QJo=t(Xwe," (XLM-RoBERTa model)"),Xwe.forEach(r),ee.forEach(r),HJo=d(ca),ufe=s(ca,"P",{});var YKt=n(ufe);UJo=t(YKt,"Examples:"),YKt.forEach(r),JJo=d(ca),m(AA.$$.fragment,ca),ca.forEach(r),Bl.forEach(r),w7e=d(i),ac=s(i,"H2",{class:!0});var R9e=n(ac);DF=s(R9e,"A",{id:!0,class:!0,href:!0});var KKt=n(DF);pfe=s(KKt,"SPAN",{});var ZKt=n(pfe);m(LA.$$.fragment,ZKt),ZKt.forEach(r),KKt.forEach(r),YJo=d(R9e),_fe=s(R9e,"SPAN",{});var eZt=n(_fe);KJo=t(eZt,"TFAutoModelForSeq2SeqLM"),eZt.forEach(r),R9e.forEach(r),A7e=d(i),ut=s(i,"DIV",{class:!0});var kl=n(ut);m(BA.$$.fragment,kl),ZJo=d(kl),sc=s(kl,"P",{});var YX=n(sc);eYo=t(YX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),bfe=s(YX,"CODE",{});var oZt=n(bfe);oYo=t(oZt,"from_pretrained()"),oZt.forEach(r),tYo=t(YX,"class method or the "),vfe=s(YX,"CODE",{});var tZt=n(vfe);rYo=t(tZt,"from_config()"),tZt.forEach(r),aYo=t(YX,`class
method.`),YX.forEach(r),sYo=d(kl),xA=s(kl,"P",{});var S9e=n(xA);nYo=t(S9e,"This class cannot be instantiated directly using "),Tfe=s(S9e,"CODE",{});var rZt=n(Tfe);lYo=t(rZt,"__init__()"),rZt.forEach(r),dYo=t(S9e," (throws an error)."),S9e.forEach(r),iYo=d(kl),lr=s(kl,"DIV",{class:!0});var Rl=n(lr);m(kA.$$.fragment,Rl),cYo=d(Rl),Ffe=s(Rl,"P",{});var aZt=n(Ffe);fYo=t(aZt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),aZt.forEach(r),mYo=d(Rl),nc=s(Rl,"P",{});var KX=n(nc);gYo=t(KX,`Note:
Loading a model from its configuration file does `),Cfe=s(KX,"STRONG",{});var sZt=n(Cfe);hYo=t(sZt,"not"),sZt.forEach(r),uYo=t(KX,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mfe=s(KX,"CODE",{});var nZt=n(Mfe);pYo=t(nZt,"from_pretrained()"),nZt.forEach(r),_Yo=t(KX,"to load the model weights."),KX.forEach(r),bYo=d(Rl),Efe=s(Rl,"P",{});var lZt=n(Efe);vYo=t(lZt,"Examples:"),lZt.forEach(r),TYo=d(Rl),m(RA.$$.fragment,Rl),Rl.forEach(r),FYo=d(kl),po=s(kl,"DIV",{class:!0});var fa=n(po);m(SA.$$.fragment,fa),CYo=d(fa),yfe=s(fa,"P",{});var dZt=n(yfe);MYo=t(dZt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),dZt.forEach(r),EYo=d(fa),ls=s(fa,"P",{});var n3=n(ls);yYo=t(n3,"The model class to instantiate is selected based on the "),wfe=s(n3,"CODE",{});var iZt=n(wfe);wYo=t(iZt,"model_type"),iZt.forEach(r),AYo=t(n3,` property of the config object (either
passed as an argument or loaded from `),Afe=s(n3,"CODE",{});var cZt=n(Afe);LYo=t(cZt,"pretrained_model_name_or_path"),cZt.forEach(r),BYo=t(n3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lfe=s(n3,"CODE",{});var fZt=n(Lfe);xYo=t(fZt,"pretrained_model_name_or_path"),fZt.forEach(r),kYo=t(n3,":"),n3.forEach(r),RYo=d(fa),ue=s(fa,"UL",{});var Me=n(ue);qF=s(Me,"LI",{});var zwe=n(qF);Bfe=s(zwe,"STRONG",{});var mZt=n(Bfe);SYo=t(mZt,"bart"),mZt.forEach(r),PYo=t(zwe," \u2014 "),MD=s(zwe,"A",{href:!0});var gZt=n(MD);$Yo=t(gZt,"TFBartForConditionalGeneration"),gZt.forEach(r),IYo=t(zwe," (BART model)"),zwe.forEach(r),jYo=d(Me),GF=s(Me,"LI",{});var Vwe=n(GF);xfe=s(Vwe,"STRONG",{});var hZt=n(xfe);NYo=t(hZt,"blenderbot"),hZt.forEach(r),DYo=t(Vwe," \u2014 "),ED=s(Vwe,"A",{href:!0});var uZt=n(ED);qYo=t(uZt,"TFBlenderbotForConditionalGeneration"),uZt.forEach(r),GYo=t(Vwe," (Blenderbot model)"),Vwe.forEach(r),OYo=d(Me),OF=s(Me,"LI",{});var Wwe=n(OF);kfe=s(Wwe,"STRONG",{});var pZt=n(kfe);XYo=t(pZt,"blenderbot-small"),pZt.forEach(r),zYo=t(Wwe," \u2014 "),yD=s(Wwe,"A",{href:!0});var _Zt=n(yD);VYo=t(_Zt,"TFBlenderbotSmallForConditionalGeneration"),_Zt.forEach(r),WYo=t(Wwe," (BlenderbotSmall model)"),Wwe.forEach(r),QYo=d(Me),XF=s(Me,"LI",{});var Qwe=n(XF);Rfe=s(Qwe,"STRONG",{});var bZt=n(Rfe);HYo=t(bZt,"encoder-decoder"),bZt.forEach(r),UYo=t(Qwe," \u2014 "),wD=s(Qwe,"A",{href:!0});var vZt=n(wD);JYo=t(vZt,"TFEncoderDecoderModel"),vZt.forEach(r),YYo=t(Qwe," (Encoder decoder model)"),Qwe.forEach(r),KYo=d(Me),zF=s(Me,"LI",{});var Hwe=n(zF);Sfe=s(Hwe,"STRONG",{});var TZt=n(Sfe);ZYo=t(TZt,"led"),TZt.forEach(r),eKo=t(Hwe," \u2014 "),AD=s(Hwe,"A",{href:!0});var FZt=n(AD);oKo=t(FZt,"TFLEDForConditionalGeneration"),FZt.forEach(r),tKo=t(Hwe," (LED model)"),Hwe.forEach(r),rKo=d(Me),VF=s(Me,"LI",{});var Uwe=n(VF);Pfe=s(Uwe,"STRONG",{});var CZt=n(Pfe);aKo=t(CZt,"marian"),CZt.forEach(r),sKo=t(Uwe," \u2014 "),LD=s(Uwe,"A",{href:!0});var MZt=n(LD);nKo=t(MZt,"TFMarianMTModel"),MZt.forEach(r),lKo=t(Uwe," (Marian model)"),Uwe.forEach(r),dKo=d(Me),WF=s(Me,"LI",{});var Jwe=n(WF);$fe=s(Jwe,"STRONG",{});var EZt=n($fe);iKo=t(EZt,"mbart"),EZt.forEach(r),cKo=t(Jwe," \u2014 "),BD=s(Jwe,"A",{href:!0});var yZt=n(BD);fKo=t(yZt,"TFMBartForConditionalGeneration"),yZt.forEach(r),mKo=t(Jwe," (mBART model)"),Jwe.forEach(r),gKo=d(Me),QF=s(Me,"LI",{});var Ywe=n(QF);Ife=s(Ywe,"STRONG",{});var wZt=n(Ife);hKo=t(wZt,"mt5"),wZt.forEach(r),uKo=t(Ywe," \u2014 "),xD=s(Ywe,"A",{href:!0});var AZt=n(xD);pKo=t(AZt,"TFMT5ForConditionalGeneration"),AZt.forEach(r),_Ko=t(Ywe," (mT5 model)"),Ywe.forEach(r),bKo=d(Me),HF=s(Me,"LI",{});var Kwe=n(HF);jfe=s(Kwe,"STRONG",{});var LZt=n(jfe);vKo=t(LZt,"pegasus"),LZt.forEach(r),TKo=t(Kwe," \u2014 "),kD=s(Kwe,"A",{href:!0});var BZt=n(kD);FKo=t(BZt,"TFPegasusForConditionalGeneration"),BZt.forEach(r),CKo=t(Kwe," (Pegasus model)"),Kwe.forEach(r),MKo=d(Me),UF=s(Me,"LI",{});var Zwe=n(UF);Nfe=s(Zwe,"STRONG",{});var xZt=n(Nfe);EKo=t(xZt,"t5"),xZt.forEach(r),yKo=t(Zwe," \u2014 "),RD=s(Zwe,"A",{href:!0});var kZt=n(RD);wKo=t(kZt,"TFT5ForConditionalGeneration"),kZt.forEach(r),AKo=t(Zwe," (T5 model)"),Zwe.forEach(r),Me.forEach(r),LKo=d(fa),Dfe=s(fa,"P",{});var RZt=n(Dfe);BKo=t(RZt,"Examples:"),RZt.forEach(r),xKo=d(fa),m(PA.$$.fragment,fa),fa.forEach(r),kl.forEach(r),L7e=d(i),lc=s(i,"H2",{class:!0});var P9e=n(lc);JF=s(P9e,"A",{id:!0,class:!0,href:!0});var SZt=n(JF);qfe=s(SZt,"SPAN",{});var PZt=n(qfe);m($A.$$.fragment,PZt),PZt.forEach(r),SZt.forEach(r),kKo=d(P9e),Gfe=s(P9e,"SPAN",{});var $Zt=n(Gfe);RKo=t($Zt,"TFAutoModelForSequenceClassification"),$Zt.forEach(r),P9e.forEach(r),B7e=d(i),pt=s(i,"DIV",{class:!0});var Sl=n(pt);m(IA.$$.fragment,Sl),SKo=d(Sl),dc=s(Sl,"P",{});var ZX=n(dc);PKo=t(ZX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ofe=s(ZX,"CODE",{});var IZt=n(Ofe);$Ko=t(IZt,"from_pretrained()"),IZt.forEach(r),IKo=t(ZX,"class method or the "),Xfe=s(ZX,"CODE",{});var jZt=n(Xfe);jKo=t(jZt,"from_config()"),jZt.forEach(r),NKo=t(ZX,`class
method.`),ZX.forEach(r),DKo=d(Sl),jA=s(Sl,"P",{});var $9e=n(jA);qKo=t($9e,"This class cannot be instantiated directly using "),zfe=s($9e,"CODE",{});var NZt=n(zfe);GKo=t(NZt,"__init__()"),NZt.forEach(r),OKo=t($9e," (throws an error)."),$9e.forEach(r),XKo=d(Sl),dr=s(Sl,"DIV",{class:!0});var Pl=n(dr);m(NA.$$.fragment,Pl),zKo=d(Pl),Vfe=s(Pl,"P",{});var DZt=n(Vfe);VKo=t(DZt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),DZt.forEach(r),WKo=d(Pl),ic=s(Pl,"P",{});var ez=n(ic);QKo=t(ez,`Note:
Loading a model from its configuration file does `),Wfe=s(ez,"STRONG",{});var qZt=n(Wfe);HKo=t(qZt,"not"),qZt.forEach(r),UKo=t(ez,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qfe=s(ez,"CODE",{});var GZt=n(Qfe);JKo=t(GZt,"from_pretrained()"),GZt.forEach(r),YKo=t(ez,"to load the model weights."),ez.forEach(r),KKo=d(Pl),Hfe=s(Pl,"P",{});var OZt=n(Hfe);ZKo=t(OZt,"Examples:"),OZt.forEach(r),eZo=d(Pl),m(DA.$$.fragment,Pl),Pl.forEach(r),oZo=d(Sl),_o=s(Sl,"DIV",{class:!0});var ma=n(_o);m(qA.$$.fragment,ma),tZo=d(ma),Ufe=s(ma,"P",{});var XZt=n(Ufe);rZo=t(XZt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),XZt.forEach(r),aZo=d(ma),ds=s(ma,"P",{});var l3=n(ds);sZo=t(l3,"The model class to instantiate is selected based on the "),Jfe=s(l3,"CODE",{});var zZt=n(Jfe);nZo=t(zZt,"model_type"),zZt.forEach(r),lZo=t(l3,` property of the config object (either
passed as an argument or loaded from `),Yfe=s(l3,"CODE",{});var VZt=n(Yfe);dZo=t(VZt,"pretrained_model_name_or_path"),VZt.forEach(r),iZo=t(l3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kfe=s(l3,"CODE",{});var WZt=n(Kfe);cZo=t(WZt,"pretrained_model_name_or_path"),WZt.forEach(r),fZo=t(l3,":"),l3.forEach(r),mZo=d(ma),X=s(ma,"UL",{});var W=n(X);YF=s(W,"LI",{});var eAe=n(YF);Zfe=s(eAe,"STRONG",{});var QZt=n(Zfe);gZo=t(QZt,"albert"),QZt.forEach(r),hZo=t(eAe," \u2014 "),SD=s(eAe,"A",{href:!0});var HZt=n(SD);uZo=t(HZt,"TFAlbertForSequenceClassification"),HZt.forEach(r),pZo=t(eAe," (ALBERT model)"),eAe.forEach(r),_Zo=d(W),KF=s(W,"LI",{});var oAe=n(KF);eme=s(oAe,"STRONG",{});var UZt=n(eme);bZo=t(UZt,"bert"),UZt.forEach(r),vZo=t(oAe," \u2014 "),PD=s(oAe,"A",{href:!0});var JZt=n(PD);TZo=t(JZt,"TFBertForSequenceClassification"),JZt.forEach(r),FZo=t(oAe," (BERT model)"),oAe.forEach(r),CZo=d(W),ZF=s(W,"LI",{});var tAe=n(ZF);ome=s(tAe,"STRONG",{});var YZt=n(ome);MZo=t(YZt,"camembert"),YZt.forEach(r),EZo=t(tAe," \u2014 "),$D=s(tAe,"A",{href:!0});var KZt=n($D);yZo=t(KZt,"TFCamembertForSequenceClassification"),KZt.forEach(r),wZo=t(tAe," (CamemBERT model)"),tAe.forEach(r),AZo=d(W),eC=s(W,"LI",{});var rAe=n(eC);tme=s(rAe,"STRONG",{});var ZZt=n(tme);LZo=t(ZZt,"convbert"),ZZt.forEach(r),BZo=t(rAe," \u2014 "),ID=s(rAe,"A",{href:!0});var eer=n(ID);xZo=t(eer,"TFConvBertForSequenceClassification"),eer.forEach(r),kZo=t(rAe," (ConvBERT model)"),rAe.forEach(r),RZo=d(W),oC=s(W,"LI",{});var aAe=n(oC);rme=s(aAe,"STRONG",{});var oer=n(rme);SZo=t(oer,"ctrl"),oer.forEach(r),PZo=t(aAe," \u2014 "),jD=s(aAe,"A",{href:!0});var ter=n(jD);$Zo=t(ter,"TFCTRLForSequenceClassification"),ter.forEach(r),IZo=t(aAe," (CTRL model)"),aAe.forEach(r),jZo=d(W),tC=s(W,"LI",{});var sAe=n(tC);ame=s(sAe,"STRONG",{});var rer=n(ame);NZo=t(rer,"deberta"),rer.forEach(r),DZo=t(sAe," \u2014 "),ND=s(sAe,"A",{href:!0});var aer=n(ND);qZo=t(aer,"TFDebertaForSequenceClassification"),aer.forEach(r),GZo=t(sAe," (DeBERTa model)"),sAe.forEach(r),OZo=d(W),rC=s(W,"LI",{});var nAe=n(rC);sme=s(nAe,"STRONG",{});var ser=n(sme);XZo=t(ser,"deberta-v2"),ser.forEach(r),zZo=t(nAe," \u2014 "),DD=s(nAe,"A",{href:!0});var ner=n(DD);VZo=t(ner,"TFDebertaV2ForSequenceClassification"),ner.forEach(r),WZo=t(nAe," (DeBERTa-v2 model)"),nAe.forEach(r),QZo=d(W),aC=s(W,"LI",{});var lAe=n(aC);nme=s(lAe,"STRONG",{});var ler=n(nme);HZo=t(ler,"distilbert"),ler.forEach(r),UZo=t(lAe," \u2014 "),qD=s(lAe,"A",{href:!0});var der=n(qD);JZo=t(der,"TFDistilBertForSequenceClassification"),der.forEach(r),YZo=t(lAe," (DistilBERT model)"),lAe.forEach(r),KZo=d(W),sC=s(W,"LI",{});var dAe=n(sC);lme=s(dAe,"STRONG",{});var ier=n(lme);ZZo=t(ier,"electra"),ier.forEach(r),eet=t(dAe," \u2014 "),GD=s(dAe,"A",{href:!0});var cer=n(GD);oet=t(cer,"TFElectraForSequenceClassification"),cer.forEach(r),tet=t(dAe," (ELECTRA model)"),dAe.forEach(r),ret=d(W),nC=s(W,"LI",{});var iAe=n(nC);dme=s(iAe,"STRONG",{});var fer=n(dme);aet=t(fer,"flaubert"),fer.forEach(r),set=t(iAe," \u2014 "),OD=s(iAe,"A",{href:!0});var mer=n(OD);net=t(mer,"TFFlaubertForSequenceClassification"),mer.forEach(r),det=t(iAe," (FlauBERT model)"),iAe.forEach(r),iet=d(W),lC=s(W,"LI",{});var cAe=n(lC);ime=s(cAe,"STRONG",{});var ger=n(ime);cet=t(ger,"funnel"),ger.forEach(r),fet=t(cAe," \u2014 "),XD=s(cAe,"A",{href:!0});var her=n(XD);met=t(her,"TFFunnelForSequenceClassification"),her.forEach(r),get=t(cAe," (Funnel Transformer model)"),cAe.forEach(r),het=d(W),dC=s(W,"LI",{});var fAe=n(dC);cme=s(fAe,"STRONG",{});var uer=n(cme);uet=t(uer,"gpt2"),uer.forEach(r),pet=t(fAe," \u2014 "),zD=s(fAe,"A",{href:!0});var per=n(zD);_et=t(per,"TFGPT2ForSequenceClassification"),per.forEach(r),bet=t(fAe," (OpenAI GPT-2 model)"),fAe.forEach(r),vet=d(W),iC=s(W,"LI",{});var mAe=n(iC);fme=s(mAe,"STRONG",{});var _er=n(fme);Tet=t(_er,"layoutlm"),_er.forEach(r),Fet=t(mAe," \u2014 "),VD=s(mAe,"A",{href:!0});var ber=n(VD);Cet=t(ber,"TFLayoutLMForSequenceClassification"),ber.forEach(r),Met=t(mAe," (LayoutLM model)"),mAe.forEach(r),Eet=d(W),cC=s(W,"LI",{});var gAe=n(cC);mme=s(gAe,"STRONG",{});var ver=n(mme);yet=t(ver,"longformer"),ver.forEach(r),wet=t(gAe," \u2014 "),WD=s(gAe,"A",{href:!0});var Ter=n(WD);Aet=t(Ter,"TFLongformerForSequenceClassification"),Ter.forEach(r),Let=t(gAe," (Longformer model)"),gAe.forEach(r),Bet=d(W),fC=s(W,"LI",{});var hAe=n(fC);gme=s(hAe,"STRONG",{});var Fer=n(gme);xet=t(Fer,"mobilebert"),Fer.forEach(r),ket=t(hAe," \u2014 "),QD=s(hAe,"A",{href:!0});var Cer=n(QD);Ret=t(Cer,"TFMobileBertForSequenceClassification"),Cer.forEach(r),Set=t(hAe," (MobileBERT model)"),hAe.forEach(r),Pet=d(W),mC=s(W,"LI",{});var uAe=n(mC);hme=s(uAe,"STRONG",{});var Mer=n(hme);$et=t(Mer,"mpnet"),Mer.forEach(r),Iet=t(uAe," \u2014 "),HD=s(uAe,"A",{href:!0});var Eer=n(HD);jet=t(Eer,"TFMPNetForSequenceClassification"),Eer.forEach(r),Net=t(uAe," (MPNet model)"),uAe.forEach(r),Det=d(W),gC=s(W,"LI",{});var pAe=n(gC);ume=s(pAe,"STRONG",{});var yer=n(ume);qet=t(yer,"openai-gpt"),yer.forEach(r),Get=t(pAe," \u2014 "),UD=s(pAe,"A",{href:!0});var wer=n(UD);Oet=t(wer,"TFOpenAIGPTForSequenceClassification"),wer.forEach(r),Xet=t(pAe," (OpenAI GPT model)"),pAe.forEach(r),zet=d(W),hC=s(W,"LI",{});var _Ae=n(hC);pme=s(_Ae,"STRONG",{});var Aer=n(pme);Vet=t(Aer,"rembert"),Aer.forEach(r),Wet=t(_Ae," \u2014 "),JD=s(_Ae,"A",{href:!0});var Ler=n(JD);Qet=t(Ler,"TFRemBertForSequenceClassification"),Ler.forEach(r),Het=t(_Ae," (RemBERT model)"),_Ae.forEach(r),Uet=d(W),uC=s(W,"LI",{});var bAe=n(uC);_me=s(bAe,"STRONG",{});var Ber=n(_me);Jet=t(Ber,"roberta"),Ber.forEach(r),Yet=t(bAe," \u2014 "),YD=s(bAe,"A",{href:!0});var xer=n(YD);Ket=t(xer,"TFRobertaForSequenceClassification"),xer.forEach(r),Zet=t(bAe," (RoBERTa model)"),bAe.forEach(r),eot=d(W),pC=s(W,"LI",{});var vAe=n(pC);bme=s(vAe,"STRONG",{});var ker=n(bme);oot=t(ker,"roformer"),ker.forEach(r),tot=t(vAe," \u2014 "),KD=s(vAe,"A",{href:!0});var Rer=n(KD);rot=t(Rer,"TFRoFormerForSequenceClassification"),Rer.forEach(r),aot=t(vAe," (RoFormer model)"),vAe.forEach(r),sot=d(W),_C=s(W,"LI",{});var TAe=n(_C);vme=s(TAe,"STRONG",{});var Ser=n(vme);not=t(Ser,"tapas"),Ser.forEach(r),lot=t(TAe," \u2014 "),ZD=s(TAe,"A",{href:!0});var Per=n(ZD);dot=t(Per,"TFTapasForSequenceClassification"),Per.forEach(r),iot=t(TAe," (TAPAS model)"),TAe.forEach(r),cot=d(W),bC=s(W,"LI",{});var FAe=n(bC);Tme=s(FAe,"STRONG",{});var $er=n(Tme);fot=t($er,"transfo-xl"),$er.forEach(r),mot=t(FAe," \u2014 "),eq=s(FAe,"A",{href:!0});var Ier=n(eq);got=t(Ier,"TFTransfoXLForSequenceClassification"),Ier.forEach(r),hot=t(FAe," (Transformer-XL model)"),FAe.forEach(r),uot=d(W),vC=s(W,"LI",{});var CAe=n(vC);Fme=s(CAe,"STRONG",{});var jer=n(Fme);pot=t(jer,"xlm"),jer.forEach(r),_ot=t(CAe," \u2014 "),oq=s(CAe,"A",{href:!0});var Ner=n(oq);bot=t(Ner,"TFXLMForSequenceClassification"),Ner.forEach(r),vot=t(CAe," (XLM model)"),CAe.forEach(r),Tot=d(W),TC=s(W,"LI",{});var MAe=n(TC);Cme=s(MAe,"STRONG",{});var Der=n(Cme);Fot=t(Der,"xlm-roberta"),Der.forEach(r),Cot=t(MAe," \u2014 "),tq=s(MAe,"A",{href:!0});var qer=n(tq);Mot=t(qer,"TFXLMRobertaForSequenceClassification"),qer.forEach(r),Eot=t(MAe," (XLM-RoBERTa model)"),MAe.forEach(r),yot=d(W),FC=s(W,"LI",{});var EAe=n(FC);Mme=s(EAe,"STRONG",{});var Ger=n(Mme);wot=t(Ger,"xlnet"),Ger.forEach(r),Aot=t(EAe," \u2014 "),rq=s(EAe,"A",{href:!0});var Oer=n(rq);Lot=t(Oer,"TFXLNetForSequenceClassification"),Oer.forEach(r),Bot=t(EAe," (XLNet model)"),EAe.forEach(r),W.forEach(r),xot=d(ma),Eme=s(ma,"P",{});var Xer=n(Eme);kot=t(Xer,"Examples:"),Xer.forEach(r),Rot=d(ma),m(GA.$$.fragment,ma),ma.forEach(r),Sl.forEach(r),x7e=d(i),cc=s(i,"H2",{class:!0});var I9e=n(cc);CC=s(I9e,"A",{id:!0,class:!0,href:!0});var zer=n(CC);yme=s(zer,"SPAN",{});var Ver=n(yme);m(OA.$$.fragment,Ver),Ver.forEach(r),zer.forEach(r),Sot=d(I9e),wme=s(I9e,"SPAN",{});var Wer=n(wme);Pot=t(Wer,"TFAutoModelForMultipleChoice"),Wer.forEach(r),I9e.forEach(r),k7e=d(i),_t=s(i,"DIV",{class:!0});var $l=n(_t);m(XA.$$.fragment,$l),$ot=d($l),fc=s($l,"P",{});var oz=n(fc);Iot=t(oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Ame=s(oz,"CODE",{});var Qer=n(Ame);jot=t(Qer,"from_pretrained()"),Qer.forEach(r),Not=t(oz,"class method or the "),Lme=s(oz,"CODE",{});var Her=n(Lme);Dot=t(Her,"from_config()"),Her.forEach(r),qot=t(oz,`class
method.`),oz.forEach(r),Got=d($l),zA=s($l,"P",{});var j9e=n(zA);Oot=t(j9e,"This class cannot be instantiated directly using "),Bme=s(j9e,"CODE",{});var Uer=n(Bme);Xot=t(Uer,"__init__()"),Uer.forEach(r),zot=t(j9e," (throws an error)."),j9e.forEach(r),Vot=d($l),ir=s($l,"DIV",{class:!0});var Il=n(ir);m(VA.$$.fragment,Il),Wot=d(Il),xme=s(Il,"P",{});var Jer=n(xme);Qot=t(Jer,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Jer.forEach(r),Hot=d(Il),mc=s(Il,"P",{});var tz=n(mc);Uot=t(tz,`Note:
Loading a model from its configuration file does `),kme=s(tz,"STRONG",{});var Yer=n(kme);Jot=t(Yer,"not"),Yer.forEach(r),Yot=t(tz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rme=s(tz,"CODE",{});var Ker=n(Rme);Kot=t(Ker,"from_pretrained()"),Ker.forEach(r),Zot=t(tz,"to load the model weights."),tz.forEach(r),ett=d(Il),Sme=s(Il,"P",{});var Zer=n(Sme);ott=t(Zer,"Examples:"),Zer.forEach(r),ttt=d(Il),m(WA.$$.fragment,Il),Il.forEach(r),rtt=d($l),bo=s($l,"DIV",{class:!0});var ga=n(bo);m(QA.$$.fragment,ga),att=d(ga),Pme=s(ga,"P",{});var eor=n(Pme);stt=t(eor,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),eor.forEach(r),ntt=d(ga),is=s(ga,"P",{});var d3=n(is);ltt=t(d3,"The model class to instantiate is selected based on the "),$me=s(d3,"CODE",{});var oor=n($me);dtt=t(oor,"model_type"),oor.forEach(r),itt=t(d3,` property of the config object (either
passed as an argument or loaded from `),Ime=s(d3,"CODE",{});var tor=n(Ime);ctt=t(tor,"pretrained_model_name_or_path"),tor.forEach(r),ftt=t(d3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jme=s(d3,"CODE",{});var ror=n(jme);mtt=t(ror,"pretrained_model_name_or_path"),ror.forEach(r),gtt=t(d3,":"),d3.forEach(r),htt=d(ga),re=s(ga,"UL",{});var ae=n(re);MC=s(ae,"LI",{});var yAe=n(MC);Nme=s(yAe,"STRONG",{});var aor=n(Nme);utt=t(aor,"albert"),aor.forEach(r),ptt=t(yAe," \u2014 "),aq=s(yAe,"A",{href:!0});var sor=n(aq);_tt=t(sor,"TFAlbertForMultipleChoice"),sor.forEach(r),btt=t(yAe," (ALBERT model)"),yAe.forEach(r),vtt=d(ae),EC=s(ae,"LI",{});var wAe=n(EC);Dme=s(wAe,"STRONG",{});var nor=n(Dme);Ttt=t(nor,"bert"),nor.forEach(r),Ftt=t(wAe," \u2014 "),sq=s(wAe,"A",{href:!0});var lor=n(sq);Ctt=t(lor,"TFBertForMultipleChoice"),lor.forEach(r),Mtt=t(wAe," (BERT model)"),wAe.forEach(r),Ett=d(ae),yC=s(ae,"LI",{});var AAe=n(yC);qme=s(AAe,"STRONG",{});var dor=n(qme);ytt=t(dor,"camembert"),dor.forEach(r),wtt=t(AAe," \u2014 "),nq=s(AAe,"A",{href:!0});var ior=n(nq);Att=t(ior,"TFCamembertForMultipleChoice"),ior.forEach(r),Ltt=t(AAe," (CamemBERT model)"),AAe.forEach(r),Btt=d(ae),wC=s(ae,"LI",{});var LAe=n(wC);Gme=s(LAe,"STRONG",{});var cor=n(Gme);xtt=t(cor,"convbert"),cor.forEach(r),ktt=t(LAe," \u2014 "),lq=s(LAe,"A",{href:!0});var mor=n(lq);Rtt=t(mor,"TFConvBertForMultipleChoice"),mor.forEach(r),Stt=t(LAe," (ConvBERT model)"),LAe.forEach(r),Ptt=d(ae),AC=s(ae,"LI",{});var BAe=n(AC);Ome=s(BAe,"STRONG",{});var gor=n(Ome);$tt=t(gor,"distilbert"),gor.forEach(r),Itt=t(BAe," \u2014 "),dq=s(BAe,"A",{href:!0});var hor=n(dq);jtt=t(hor,"TFDistilBertForMultipleChoice"),hor.forEach(r),Ntt=t(BAe," (DistilBERT model)"),BAe.forEach(r),Dtt=d(ae),LC=s(ae,"LI",{});var xAe=n(LC);Xme=s(xAe,"STRONG",{});var uor=n(Xme);qtt=t(uor,"electra"),uor.forEach(r),Gtt=t(xAe," \u2014 "),iq=s(xAe,"A",{href:!0});var por=n(iq);Ott=t(por,"TFElectraForMultipleChoice"),por.forEach(r),Xtt=t(xAe," (ELECTRA model)"),xAe.forEach(r),ztt=d(ae),BC=s(ae,"LI",{});var kAe=n(BC);zme=s(kAe,"STRONG",{});var _or=n(zme);Vtt=t(_or,"flaubert"),_or.forEach(r),Wtt=t(kAe," \u2014 "),cq=s(kAe,"A",{href:!0});var bor=n(cq);Qtt=t(bor,"TFFlaubertForMultipleChoice"),bor.forEach(r),Htt=t(kAe," (FlauBERT model)"),kAe.forEach(r),Utt=d(ae),xC=s(ae,"LI",{});var RAe=n(xC);Vme=s(RAe,"STRONG",{});var vor=n(Vme);Jtt=t(vor,"funnel"),vor.forEach(r),Ytt=t(RAe," \u2014 "),fq=s(RAe,"A",{href:!0});var Tor=n(fq);Ktt=t(Tor,"TFFunnelForMultipleChoice"),Tor.forEach(r),Ztt=t(RAe," (Funnel Transformer model)"),RAe.forEach(r),ert=d(ae),kC=s(ae,"LI",{});var SAe=n(kC);Wme=s(SAe,"STRONG",{});var For=n(Wme);ort=t(For,"longformer"),For.forEach(r),trt=t(SAe," \u2014 "),mq=s(SAe,"A",{href:!0});var Cor=n(mq);rrt=t(Cor,"TFLongformerForMultipleChoice"),Cor.forEach(r),art=t(SAe," (Longformer model)"),SAe.forEach(r),srt=d(ae),RC=s(ae,"LI",{});var PAe=n(RC);Qme=s(PAe,"STRONG",{});var Mor=n(Qme);nrt=t(Mor,"mobilebert"),Mor.forEach(r),lrt=t(PAe," \u2014 "),gq=s(PAe,"A",{href:!0});var Eor=n(gq);drt=t(Eor,"TFMobileBertForMultipleChoice"),Eor.forEach(r),irt=t(PAe," (MobileBERT model)"),PAe.forEach(r),crt=d(ae),SC=s(ae,"LI",{});var $Ae=n(SC);Hme=s($Ae,"STRONG",{});var yor=n(Hme);frt=t(yor,"mpnet"),yor.forEach(r),mrt=t($Ae," \u2014 "),hq=s($Ae,"A",{href:!0});var wor=n(hq);grt=t(wor,"TFMPNetForMultipleChoice"),wor.forEach(r),hrt=t($Ae," (MPNet model)"),$Ae.forEach(r),urt=d(ae),PC=s(ae,"LI",{});var IAe=n(PC);Ume=s(IAe,"STRONG",{});var Aor=n(Ume);prt=t(Aor,"rembert"),Aor.forEach(r),_rt=t(IAe," \u2014 "),uq=s(IAe,"A",{href:!0});var Lor=n(uq);brt=t(Lor,"TFRemBertForMultipleChoice"),Lor.forEach(r),vrt=t(IAe," (RemBERT model)"),IAe.forEach(r),Trt=d(ae),$C=s(ae,"LI",{});var jAe=n($C);Jme=s(jAe,"STRONG",{});var Bor=n(Jme);Frt=t(Bor,"roberta"),Bor.forEach(r),Crt=t(jAe," \u2014 "),pq=s(jAe,"A",{href:!0});var xor=n(pq);Mrt=t(xor,"TFRobertaForMultipleChoice"),xor.forEach(r),Ert=t(jAe," (RoBERTa model)"),jAe.forEach(r),yrt=d(ae),IC=s(ae,"LI",{});var NAe=n(IC);Yme=s(NAe,"STRONG",{});var kor=n(Yme);wrt=t(kor,"roformer"),kor.forEach(r),Art=t(NAe," \u2014 "),_q=s(NAe,"A",{href:!0});var Ror=n(_q);Lrt=t(Ror,"TFRoFormerForMultipleChoice"),Ror.forEach(r),Brt=t(NAe," (RoFormer model)"),NAe.forEach(r),xrt=d(ae),jC=s(ae,"LI",{});var DAe=n(jC);Kme=s(DAe,"STRONG",{});var Sor=n(Kme);krt=t(Sor,"xlm"),Sor.forEach(r),Rrt=t(DAe," \u2014 "),bq=s(DAe,"A",{href:!0});var Por=n(bq);Srt=t(Por,"TFXLMForMultipleChoice"),Por.forEach(r),Prt=t(DAe," (XLM model)"),DAe.forEach(r),$rt=d(ae),NC=s(ae,"LI",{});var qAe=n(NC);Zme=s(qAe,"STRONG",{});var $or=n(Zme);Irt=t($or,"xlm-roberta"),$or.forEach(r),jrt=t(qAe," \u2014 "),vq=s(qAe,"A",{href:!0});var Ior=n(vq);Nrt=t(Ior,"TFXLMRobertaForMultipleChoice"),Ior.forEach(r),Drt=t(qAe," (XLM-RoBERTa model)"),qAe.forEach(r),qrt=d(ae),DC=s(ae,"LI",{});var GAe=n(DC);ege=s(GAe,"STRONG",{});var jor=n(ege);Grt=t(jor,"xlnet"),jor.forEach(r),Ort=t(GAe," \u2014 "),Tq=s(GAe,"A",{href:!0});var Nor=n(Tq);Xrt=t(Nor,"TFXLNetForMultipleChoice"),Nor.forEach(r),zrt=t(GAe," (XLNet model)"),GAe.forEach(r),ae.forEach(r),Vrt=d(ga),oge=s(ga,"P",{});var Dor=n(oge);Wrt=t(Dor,"Examples:"),Dor.forEach(r),Qrt=d(ga),m(HA.$$.fragment,ga),ga.forEach(r),$l.forEach(r),R7e=d(i),gc=s(i,"H2",{class:!0});var N9e=n(gc);qC=s(N9e,"A",{id:!0,class:!0,href:!0});var qor=n(qC);tge=s(qor,"SPAN",{});var Gor=n(tge);m(UA.$$.fragment,Gor),Gor.forEach(r),qor.forEach(r),Hrt=d(N9e),rge=s(N9e,"SPAN",{});var Oor=n(rge);Urt=t(Oor,"TFAutoModelForTableQuestionAnswering"),Oor.forEach(r),N9e.forEach(r),S7e=d(i),bt=s(i,"DIV",{class:!0});var jl=n(bt);m(JA.$$.fragment,jl),Jrt=d(jl),hc=s(jl,"P",{});var rz=n(hc);Yrt=t(rz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),age=s(rz,"CODE",{});var Xor=n(age);Krt=t(Xor,"from_pretrained()"),Xor.forEach(r),Zrt=t(rz,"class method or the "),sge=s(rz,"CODE",{});var zor=n(sge);eat=t(zor,"from_config()"),zor.forEach(r),oat=t(rz,`class
method.`),rz.forEach(r),tat=d(jl),YA=s(jl,"P",{});var D9e=n(YA);rat=t(D9e,"This class cannot be instantiated directly using "),nge=s(D9e,"CODE",{});var Vor=n(nge);aat=t(Vor,"__init__()"),Vor.forEach(r),sat=t(D9e," (throws an error)."),D9e.forEach(r),nat=d(jl),cr=s(jl,"DIV",{class:!0});var Nl=n(cr);m(KA.$$.fragment,Nl),lat=d(Nl),lge=s(Nl,"P",{});var Wor=n(lge);dat=t(Wor,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Wor.forEach(r),iat=d(Nl),uc=s(Nl,"P",{});var az=n(uc);cat=t(az,`Note:
Loading a model from its configuration file does `),dge=s(az,"STRONG",{});var Qor=n(dge);fat=t(Qor,"not"),Qor.forEach(r),mat=t(az,` load the model weights. It only affects the
model\u2019s configuration. Use `),ige=s(az,"CODE",{});var Hor=n(ige);gat=t(Hor,"from_pretrained()"),Hor.forEach(r),hat=t(az,"to load the model weights."),az.forEach(r),uat=d(Nl),cge=s(Nl,"P",{});var Uor=n(cge);pat=t(Uor,"Examples:"),Uor.forEach(r),_at=d(Nl),m(ZA.$$.fragment,Nl),Nl.forEach(r),bat=d(jl),vo=s(jl,"DIV",{class:!0});var ha=n(vo);m(e0.$$.fragment,ha),vat=d(ha),fge=s(ha,"P",{});var Jor=n(fge);Tat=t(Jor,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Jor.forEach(r),Fat=d(ha),cs=s(ha,"P",{});var i3=n(cs);Cat=t(i3,"The model class to instantiate is selected based on the "),mge=s(i3,"CODE",{});var Yor=n(mge);Mat=t(Yor,"model_type"),Yor.forEach(r),Eat=t(i3,` property of the config object (either
passed as an argument or loaded from `),gge=s(i3,"CODE",{});var Kor=n(gge);yat=t(Kor,"pretrained_model_name_or_path"),Kor.forEach(r),wat=t(i3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=s(i3,"CODE",{});var Zor=n(hge);Aat=t(Zor,"pretrained_model_name_or_path"),Zor.forEach(r),Lat=t(i3,":"),i3.forEach(r),Bat=d(ha),uge=s(ha,"UL",{});var etr=n(uge);GC=s(etr,"LI",{});var OAe=n(GC);pge=s(OAe,"STRONG",{});var otr=n(pge);xat=t(otr,"tapas"),otr.forEach(r),kat=t(OAe," \u2014 "),Fq=s(OAe,"A",{href:!0});var ttr=n(Fq);Rat=t(ttr,"TFTapasForQuestionAnswering"),ttr.forEach(r),Sat=t(OAe," (TAPAS model)"),OAe.forEach(r),etr.forEach(r),Pat=d(ha),_ge=s(ha,"P",{});var rtr=n(_ge);$at=t(rtr,"Examples:"),rtr.forEach(r),Iat=d(ha),m(o0.$$.fragment,ha),ha.forEach(r),jl.forEach(r),P7e=d(i),pc=s(i,"H2",{class:!0});var q9e=n(pc);OC=s(q9e,"A",{id:!0,class:!0,href:!0});var atr=n(OC);bge=s(atr,"SPAN",{});var str=n(bge);m(t0.$$.fragment,str),str.forEach(r),atr.forEach(r),jat=d(q9e),vge=s(q9e,"SPAN",{});var ntr=n(vge);Nat=t(ntr,"TFAutoModelForTokenClassification"),ntr.forEach(r),q9e.forEach(r),$7e=d(i),vt=s(i,"DIV",{class:!0});var Dl=n(vt);m(r0.$$.fragment,Dl),Dat=d(Dl),_c=s(Dl,"P",{});var sz=n(_c);qat=t(sz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Tge=s(sz,"CODE",{});var ltr=n(Tge);Gat=t(ltr,"from_pretrained()"),ltr.forEach(r),Oat=t(sz,"class method or the "),Fge=s(sz,"CODE",{});var dtr=n(Fge);Xat=t(dtr,"from_config()"),dtr.forEach(r),zat=t(sz,`class
method.`),sz.forEach(r),Vat=d(Dl),a0=s(Dl,"P",{});var G9e=n(a0);Wat=t(G9e,"This class cannot be instantiated directly using "),Cge=s(G9e,"CODE",{});var itr=n(Cge);Qat=t(itr,"__init__()"),itr.forEach(r),Hat=t(G9e," (throws an error)."),G9e.forEach(r),Uat=d(Dl),fr=s(Dl,"DIV",{class:!0});var ql=n(fr);m(s0.$$.fragment,ql),Jat=d(ql),Mge=s(ql,"P",{});var ctr=n(Mge);Yat=t(ctr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ctr.forEach(r),Kat=d(ql),bc=s(ql,"P",{});var nz=n(bc);Zat=t(nz,`Note:
Loading a model from its configuration file does `),Ege=s(nz,"STRONG",{});var ftr=n(Ege);est=t(ftr,"not"),ftr.forEach(r),ost=t(nz,` load the model weights. It only affects the
model\u2019s configuration. Use `),yge=s(nz,"CODE",{});var mtr=n(yge);tst=t(mtr,"from_pretrained()"),mtr.forEach(r),rst=t(nz,"to load the model weights."),nz.forEach(r),ast=d(ql),wge=s(ql,"P",{});var gtr=n(wge);sst=t(gtr,"Examples:"),gtr.forEach(r),nst=d(ql),m(n0.$$.fragment,ql),ql.forEach(r),lst=d(Dl),To=s(Dl,"DIV",{class:!0});var ua=n(To);m(l0.$$.fragment,ua),dst=d(ua),Age=s(ua,"P",{});var htr=n(Age);ist=t(htr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),htr.forEach(r),cst=d(ua),fs=s(ua,"P",{});var c3=n(fs);fst=t(c3,"The model class to instantiate is selected based on the "),Lge=s(c3,"CODE",{});var utr=n(Lge);mst=t(utr,"model_type"),utr.forEach(r),gst=t(c3,` property of the config object (either
passed as an argument or loaded from `),Bge=s(c3,"CODE",{});var ptr=n(Bge);hst=t(ptr,"pretrained_model_name_or_path"),ptr.forEach(r),ust=t(c3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xge=s(c3,"CODE",{});var _tr=n(xge);pst=t(_tr,"pretrained_model_name_or_path"),_tr.forEach(r),_st=t(c3,":"),c3.forEach(r),bst=d(ua),K=s(ua,"UL",{});var oe=n(K);XC=s(oe,"LI",{});var XAe=n(XC);kge=s(XAe,"STRONG",{});var btr=n(kge);vst=t(btr,"albert"),btr.forEach(r),Tst=t(XAe," \u2014 "),Cq=s(XAe,"A",{href:!0});var vtr=n(Cq);Fst=t(vtr,"TFAlbertForTokenClassification"),vtr.forEach(r),Cst=t(XAe," (ALBERT model)"),XAe.forEach(r),Mst=d(oe),zC=s(oe,"LI",{});var zAe=n(zC);Rge=s(zAe,"STRONG",{});var Ttr=n(Rge);Est=t(Ttr,"bert"),Ttr.forEach(r),yst=t(zAe," \u2014 "),Mq=s(zAe,"A",{href:!0});var Ftr=n(Mq);wst=t(Ftr,"TFBertForTokenClassification"),Ftr.forEach(r),Ast=t(zAe," (BERT model)"),zAe.forEach(r),Lst=d(oe),VC=s(oe,"LI",{});var VAe=n(VC);Sge=s(VAe,"STRONG",{});var Ctr=n(Sge);Bst=t(Ctr,"camembert"),Ctr.forEach(r),xst=t(VAe," \u2014 "),Eq=s(VAe,"A",{href:!0});var Mtr=n(Eq);kst=t(Mtr,"TFCamembertForTokenClassification"),Mtr.forEach(r),Rst=t(VAe," (CamemBERT model)"),VAe.forEach(r),Sst=d(oe),WC=s(oe,"LI",{});var WAe=n(WC);Pge=s(WAe,"STRONG",{});var Etr=n(Pge);Pst=t(Etr,"convbert"),Etr.forEach(r),$st=t(WAe," \u2014 "),yq=s(WAe,"A",{href:!0});var ytr=n(yq);Ist=t(ytr,"TFConvBertForTokenClassification"),ytr.forEach(r),jst=t(WAe," (ConvBERT model)"),WAe.forEach(r),Nst=d(oe),QC=s(oe,"LI",{});var QAe=n(QC);$ge=s(QAe,"STRONG",{});var wtr=n($ge);Dst=t(wtr,"deberta"),wtr.forEach(r),qst=t(QAe," \u2014 "),wq=s(QAe,"A",{href:!0});var Atr=n(wq);Gst=t(Atr,"TFDebertaForTokenClassification"),Atr.forEach(r),Ost=t(QAe," (DeBERTa model)"),QAe.forEach(r),Xst=d(oe),HC=s(oe,"LI",{});var HAe=n(HC);Ige=s(HAe,"STRONG",{});var Ltr=n(Ige);zst=t(Ltr,"deberta-v2"),Ltr.forEach(r),Vst=t(HAe," \u2014 "),Aq=s(HAe,"A",{href:!0});var Btr=n(Aq);Wst=t(Btr,"TFDebertaV2ForTokenClassification"),Btr.forEach(r),Qst=t(HAe," (DeBERTa-v2 model)"),HAe.forEach(r),Hst=d(oe),UC=s(oe,"LI",{});var UAe=n(UC);jge=s(UAe,"STRONG",{});var xtr=n(jge);Ust=t(xtr,"distilbert"),xtr.forEach(r),Jst=t(UAe," \u2014 "),Lq=s(UAe,"A",{href:!0});var ktr=n(Lq);Yst=t(ktr,"TFDistilBertForTokenClassification"),ktr.forEach(r),Kst=t(UAe," (DistilBERT model)"),UAe.forEach(r),Zst=d(oe),JC=s(oe,"LI",{});var JAe=n(JC);Nge=s(JAe,"STRONG",{});var Rtr=n(Nge);ent=t(Rtr,"electra"),Rtr.forEach(r),ont=t(JAe," \u2014 "),Bq=s(JAe,"A",{href:!0});var Str=n(Bq);tnt=t(Str,"TFElectraForTokenClassification"),Str.forEach(r),rnt=t(JAe," (ELECTRA model)"),JAe.forEach(r),ant=d(oe),YC=s(oe,"LI",{});var YAe=n(YC);Dge=s(YAe,"STRONG",{});var Ptr=n(Dge);snt=t(Ptr,"flaubert"),Ptr.forEach(r),nnt=t(YAe," \u2014 "),xq=s(YAe,"A",{href:!0});var $tr=n(xq);lnt=t($tr,"TFFlaubertForTokenClassification"),$tr.forEach(r),dnt=t(YAe," (FlauBERT model)"),YAe.forEach(r),int=d(oe),KC=s(oe,"LI",{});var KAe=n(KC);qge=s(KAe,"STRONG",{});var Itr=n(qge);cnt=t(Itr,"funnel"),Itr.forEach(r),fnt=t(KAe," \u2014 "),kq=s(KAe,"A",{href:!0});var jtr=n(kq);mnt=t(jtr,"TFFunnelForTokenClassification"),jtr.forEach(r),gnt=t(KAe," (Funnel Transformer model)"),KAe.forEach(r),hnt=d(oe),ZC=s(oe,"LI",{});var ZAe=n(ZC);Gge=s(ZAe,"STRONG",{});var Ntr=n(Gge);unt=t(Ntr,"layoutlm"),Ntr.forEach(r),pnt=t(ZAe," \u2014 "),Rq=s(ZAe,"A",{href:!0});var Dtr=n(Rq);_nt=t(Dtr,"TFLayoutLMForTokenClassification"),Dtr.forEach(r),bnt=t(ZAe," (LayoutLM model)"),ZAe.forEach(r),vnt=d(oe),e4=s(oe,"LI",{});var e0e=n(e4);Oge=s(e0e,"STRONG",{});var qtr=n(Oge);Tnt=t(qtr,"longformer"),qtr.forEach(r),Fnt=t(e0e," \u2014 "),Sq=s(e0e,"A",{href:!0});var Gtr=n(Sq);Cnt=t(Gtr,"TFLongformerForTokenClassification"),Gtr.forEach(r),Mnt=t(e0e," (Longformer model)"),e0e.forEach(r),Ent=d(oe),o4=s(oe,"LI",{});var o0e=n(o4);Xge=s(o0e,"STRONG",{});var Otr=n(Xge);ynt=t(Otr,"mobilebert"),Otr.forEach(r),wnt=t(o0e," \u2014 "),Pq=s(o0e,"A",{href:!0});var Xtr=n(Pq);Ant=t(Xtr,"TFMobileBertForTokenClassification"),Xtr.forEach(r),Lnt=t(o0e," (MobileBERT model)"),o0e.forEach(r),Bnt=d(oe),t4=s(oe,"LI",{});var t0e=n(t4);zge=s(t0e,"STRONG",{});var ztr=n(zge);xnt=t(ztr,"mpnet"),ztr.forEach(r),knt=t(t0e," \u2014 "),$q=s(t0e,"A",{href:!0});var Vtr=n($q);Rnt=t(Vtr,"TFMPNetForTokenClassification"),Vtr.forEach(r),Snt=t(t0e," (MPNet model)"),t0e.forEach(r),Pnt=d(oe),r4=s(oe,"LI",{});var r0e=n(r4);Vge=s(r0e,"STRONG",{});var Wtr=n(Vge);$nt=t(Wtr,"rembert"),Wtr.forEach(r),Int=t(r0e," \u2014 "),Iq=s(r0e,"A",{href:!0});var Qtr=n(Iq);jnt=t(Qtr,"TFRemBertForTokenClassification"),Qtr.forEach(r),Nnt=t(r0e," (RemBERT model)"),r0e.forEach(r),Dnt=d(oe),a4=s(oe,"LI",{});var a0e=n(a4);Wge=s(a0e,"STRONG",{});var Htr=n(Wge);qnt=t(Htr,"roberta"),Htr.forEach(r),Gnt=t(a0e," \u2014 "),jq=s(a0e,"A",{href:!0});var Utr=n(jq);Ont=t(Utr,"TFRobertaForTokenClassification"),Utr.forEach(r),Xnt=t(a0e," (RoBERTa model)"),a0e.forEach(r),znt=d(oe),s4=s(oe,"LI",{});var s0e=n(s4);Qge=s(s0e,"STRONG",{});var Jtr=n(Qge);Vnt=t(Jtr,"roformer"),Jtr.forEach(r),Wnt=t(s0e," \u2014 "),Nq=s(s0e,"A",{href:!0});var Ytr=n(Nq);Qnt=t(Ytr,"TFRoFormerForTokenClassification"),Ytr.forEach(r),Hnt=t(s0e," (RoFormer model)"),s0e.forEach(r),Unt=d(oe),n4=s(oe,"LI",{});var n0e=n(n4);Hge=s(n0e,"STRONG",{});var Ktr=n(Hge);Jnt=t(Ktr,"xlm"),Ktr.forEach(r),Ynt=t(n0e," \u2014 "),Dq=s(n0e,"A",{href:!0});var Ztr=n(Dq);Knt=t(Ztr,"TFXLMForTokenClassification"),Ztr.forEach(r),Znt=t(n0e," (XLM model)"),n0e.forEach(r),elt=d(oe),l4=s(oe,"LI",{});var l0e=n(l4);Uge=s(l0e,"STRONG",{});var err=n(Uge);olt=t(err,"xlm-roberta"),err.forEach(r),tlt=t(l0e," \u2014 "),qq=s(l0e,"A",{href:!0});var orr=n(qq);rlt=t(orr,"TFXLMRobertaForTokenClassification"),orr.forEach(r),alt=t(l0e," (XLM-RoBERTa model)"),l0e.forEach(r),slt=d(oe),d4=s(oe,"LI",{});var d0e=n(d4);Jge=s(d0e,"STRONG",{});var trr=n(Jge);nlt=t(trr,"xlnet"),trr.forEach(r),llt=t(d0e," \u2014 "),Gq=s(d0e,"A",{href:!0});var rrr=n(Gq);dlt=t(rrr,"TFXLNetForTokenClassification"),rrr.forEach(r),ilt=t(d0e," (XLNet model)"),d0e.forEach(r),oe.forEach(r),clt=d(ua),Yge=s(ua,"P",{});var arr=n(Yge);flt=t(arr,"Examples:"),arr.forEach(r),mlt=d(ua),m(d0.$$.fragment,ua),ua.forEach(r),Dl.forEach(r),I7e=d(i),vc=s(i,"H2",{class:!0});var O9e=n(vc);i4=s(O9e,"A",{id:!0,class:!0,href:!0});var srr=n(i4);Kge=s(srr,"SPAN",{});var nrr=n(Kge);m(i0.$$.fragment,nrr),nrr.forEach(r),srr.forEach(r),glt=d(O9e),Zge=s(O9e,"SPAN",{});var lrr=n(Zge);hlt=t(lrr,"TFAutoModelForQuestionAnswering"),lrr.forEach(r),O9e.forEach(r),j7e=d(i),Tt=s(i,"DIV",{class:!0});var Gl=n(Tt);m(c0.$$.fragment,Gl),ult=d(Gl),Tc=s(Gl,"P",{});var lz=n(Tc);plt=t(lz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ehe=s(lz,"CODE",{});var drr=n(ehe);_lt=t(drr,"from_pretrained()"),drr.forEach(r),blt=t(lz,"class method or the "),ohe=s(lz,"CODE",{});var irr=n(ohe);vlt=t(irr,"from_config()"),irr.forEach(r),Tlt=t(lz,`class
method.`),lz.forEach(r),Flt=d(Gl),f0=s(Gl,"P",{});var X9e=n(f0);Clt=t(X9e,"This class cannot be instantiated directly using "),the=s(X9e,"CODE",{});var crr=n(the);Mlt=t(crr,"__init__()"),crr.forEach(r),Elt=t(X9e," (throws an error)."),X9e.forEach(r),ylt=d(Gl),mr=s(Gl,"DIV",{class:!0});var Ol=n(mr);m(m0.$$.fragment,Ol),wlt=d(Ol),rhe=s(Ol,"P",{});var frr=n(rhe);Alt=t(frr,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),frr.forEach(r),Llt=d(Ol),Fc=s(Ol,"P",{});var dz=n(Fc);Blt=t(dz,`Note:
Loading a model from its configuration file does `),ahe=s(dz,"STRONG",{});var mrr=n(ahe);xlt=t(mrr,"not"),mrr.forEach(r),klt=t(dz,` load the model weights. It only affects the
model\u2019s configuration. Use `),she=s(dz,"CODE",{});var grr=n(she);Rlt=t(grr,"from_pretrained()"),grr.forEach(r),Slt=t(dz,"to load the model weights."),dz.forEach(r),Plt=d(Ol),nhe=s(Ol,"P",{});var hrr=n(nhe);$lt=t(hrr,"Examples:"),hrr.forEach(r),Ilt=d(Ol),m(g0.$$.fragment,Ol),Ol.forEach(r),jlt=d(Gl),Fo=s(Gl,"DIV",{class:!0});var pa=n(Fo);m(h0.$$.fragment,pa),Nlt=d(pa),lhe=s(pa,"P",{});var urr=n(lhe);Dlt=t(urr,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),urr.forEach(r),qlt=d(pa),ms=s(pa,"P",{});var f3=n(ms);Glt=t(f3,"The model class to instantiate is selected based on the "),dhe=s(f3,"CODE",{});var prr=n(dhe);Olt=t(prr,"model_type"),prr.forEach(r),Xlt=t(f3,` property of the config object (either
passed as an argument or loaded from `),ihe=s(f3,"CODE",{});var _rr=n(ihe);zlt=t(_rr,"pretrained_model_name_or_path"),_rr.forEach(r),Vlt=t(f3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),che=s(f3,"CODE",{});var brr=n(che);Wlt=t(brr,"pretrained_model_name_or_path"),brr.forEach(r),Qlt=t(f3,":"),f3.forEach(r),Hlt=d(pa),Z=s(pa,"UL",{});var te=n(Z);c4=s(te,"LI",{});var i0e=n(c4);fhe=s(i0e,"STRONG",{});var vrr=n(fhe);Ult=t(vrr,"albert"),vrr.forEach(r),Jlt=t(i0e," \u2014 "),Oq=s(i0e,"A",{href:!0});var Trr=n(Oq);Ylt=t(Trr,"TFAlbertForQuestionAnswering"),Trr.forEach(r),Klt=t(i0e," (ALBERT model)"),i0e.forEach(r),Zlt=d(te),f4=s(te,"LI",{});var c0e=n(f4);mhe=s(c0e,"STRONG",{});var Frr=n(mhe);edt=t(Frr,"bert"),Frr.forEach(r),odt=t(c0e," \u2014 "),Xq=s(c0e,"A",{href:!0});var Crr=n(Xq);tdt=t(Crr,"TFBertForQuestionAnswering"),Crr.forEach(r),rdt=t(c0e," (BERT model)"),c0e.forEach(r),adt=d(te),m4=s(te,"LI",{});var f0e=n(m4);ghe=s(f0e,"STRONG",{});var Mrr=n(ghe);sdt=t(Mrr,"camembert"),Mrr.forEach(r),ndt=t(f0e," \u2014 "),zq=s(f0e,"A",{href:!0});var Err=n(zq);ldt=t(Err,"TFCamembertForQuestionAnswering"),Err.forEach(r),ddt=t(f0e," (CamemBERT model)"),f0e.forEach(r),idt=d(te),g4=s(te,"LI",{});var m0e=n(g4);hhe=s(m0e,"STRONG",{});var yrr=n(hhe);cdt=t(yrr,"convbert"),yrr.forEach(r),fdt=t(m0e," \u2014 "),Vq=s(m0e,"A",{href:!0});var wrr=n(Vq);mdt=t(wrr,"TFConvBertForQuestionAnswering"),wrr.forEach(r),gdt=t(m0e," (ConvBERT model)"),m0e.forEach(r),hdt=d(te),h4=s(te,"LI",{});var g0e=n(h4);uhe=s(g0e,"STRONG",{});var Arr=n(uhe);udt=t(Arr,"deberta"),Arr.forEach(r),pdt=t(g0e," \u2014 "),Wq=s(g0e,"A",{href:!0});var Lrr=n(Wq);_dt=t(Lrr,"TFDebertaForQuestionAnswering"),Lrr.forEach(r),bdt=t(g0e," (DeBERTa model)"),g0e.forEach(r),vdt=d(te),u4=s(te,"LI",{});var h0e=n(u4);phe=s(h0e,"STRONG",{});var Brr=n(phe);Tdt=t(Brr,"deberta-v2"),Brr.forEach(r),Fdt=t(h0e," \u2014 "),Qq=s(h0e,"A",{href:!0});var xrr=n(Qq);Cdt=t(xrr,"TFDebertaV2ForQuestionAnswering"),xrr.forEach(r),Mdt=t(h0e," (DeBERTa-v2 model)"),h0e.forEach(r),Edt=d(te),p4=s(te,"LI",{});var u0e=n(p4);_he=s(u0e,"STRONG",{});var krr=n(_he);ydt=t(krr,"distilbert"),krr.forEach(r),wdt=t(u0e," \u2014 "),Hq=s(u0e,"A",{href:!0});var Rrr=n(Hq);Adt=t(Rrr,"TFDistilBertForQuestionAnswering"),Rrr.forEach(r),Ldt=t(u0e," (DistilBERT model)"),u0e.forEach(r),Bdt=d(te),_4=s(te,"LI",{});var p0e=n(_4);bhe=s(p0e,"STRONG",{});var Srr=n(bhe);xdt=t(Srr,"electra"),Srr.forEach(r),kdt=t(p0e," \u2014 "),Uq=s(p0e,"A",{href:!0});var Prr=n(Uq);Rdt=t(Prr,"TFElectraForQuestionAnswering"),Prr.forEach(r),Sdt=t(p0e," (ELECTRA model)"),p0e.forEach(r),Pdt=d(te),b4=s(te,"LI",{});var _0e=n(b4);vhe=s(_0e,"STRONG",{});var $rr=n(vhe);$dt=t($rr,"flaubert"),$rr.forEach(r),Idt=t(_0e," \u2014 "),Jq=s(_0e,"A",{href:!0});var Irr=n(Jq);jdt=t(Irr,"TFFlaubertForQuestionAnsweringSimple"),Irr.forEach(r),Ndt=t(_0e," (FlauBERT model)"),_0e.forEach(r),Ddt=d(te),v4=s(te,"LI",{});var b0e=n(v4);The=s(b0e,"STRONG",{});var jrr=n(The);qdt=t(jrr,"funnel"),jrr.forEach(r),Gdt=t(b0e," \u2014 "),Yq=s(b0e,"A",{href:!0});var Nrr=n(Yq);Odt=t(Nrr,"TFFunnelForQuestionAnswering"),Nrr.forEach(r),Xdt=t(b0e," (Funnel Transformer model)"),b0e.forEach(r),zdt=d(te),T4=s(te,"LI",{});var v0e=n(T4);Fhe=s(v0e,"STRONG",{});var Drr=n(Fhe);Vdt=t(Drr,"longformer"),Drr.forEach(r),Wdt=t(v0e," \u2014 "),Kq=s(v0e,"A",{href:!0});var qrr=n(Kq);Qdt=t(qrr,"TFLongformerForQuestionAnswering"),qrr.forEach(r),Hdt=t(v0e," (Longformer model)"),v0e.forEach(r),Udt=d(te),F4=s(te,"LI",{});var T0e=n(F4);Che=s(T0e,"STRONG",{});var Grr=n(Che);Jdt=t(Grr,"mobilebert"),Grr.forEach(r),Ydt=t(T0e," \u2014 "),Zq=s(T0e,"A",{href:!0});var Orr=n(Zq);Kdt=t(Orr,"TFMobileBertForQuestionAnswering"),Orr.forEach(r),Zdt=t(T0e," (MobileBERT model)"),T0e.forEach(r),eit=d(te),C4=s(te,"LI",{});var F0e=n(C4);Mhe=s(F0e,"STRONG",{});var Xrr=n(Mhe);oit=t(Xrr,"mpnet"),Xrr.forEach(r),tit=t(F0e," \u2014 "),eG=s(F0e,"A",{href:!0});var zrr=n(eG);rit=t(zrr,"TFMPNetForQuestionAnswering"),zrr.forEach(r),ait=t(F0e," (MPNet model)"),F0e.forEach(r),sit=d(te),M4=s(te,"LI",{});var C0e=n(M4);Ehe=s(C0e,"STRONG",{});var Vrr=n(Ehe);nit=t(Vrr,"rembert"),Vrr.forEach(r),lit=t(C0e," \u2014 "),oG=s(C0e,"A",{href:!0});var Wrr=n(oG);dit=t(Wrr,"TFRemBertForQuestionAnswering"),Wrr.forEach(r),iit=t(C0e," (RemBERT model)"),C0e.forEach(r),cit=d(te),E4=s(te,"LI",{});var M0e=n(E4);yhe=s(M0e,"STRONG",{});var Qrr=n(yhe);fit=t(Qrr,"roberta"),Qrr.forEach(r),mit=t(M0e," \u2014 "),tG=s(M0e,"A",{href:!0});var Hrr=n(tG);git=t(Hrr,"TFRobertaForQuestionAnswering"),Hrr.forEach(r),hit=t(M0e," (RoBERTa model)"),M0e.forEach(r),uit=d(te),y4=s(te,"LI",{});var E0e=n(y4);whe=s(E0e,"STRONG",{});var Urr=n(whe);pit=t(Urr,"roformer"),Urr.forEach(r),_it=t(E0e," \u2014 "),rG=s(E0e,"A",{href:!0});var Jrr=n(rG);bit=t(Jrr,"TFRoFormerForQuestionAnswering"),Jrr.forEach(r),vit=t(E0e," (RoFormer model)"),E0e.forEach(r),Tit=d(te),w4=s(te,"LI",{});var y0e=n(w4);Ahe=s(y0e,"STRONG",{});var Yrr=n(Ahe);Fit=t(Yrr,"xlm"),Yrr.forEach(r),Cit=t(y0e," \u2014 "),aG=s(y0e,"A",{href:!0});var Krr=n(aG);Mit=t(Krr,"TFXLMForQuestionAnsweringSimple"),Krr.forEach(r),Eit=t(y0e," (XLM model)"),y0e.forEach(r),yit=d(te),A4=s(te,"LI",{});var w0e=n(A4);Lhe=s(w0e,"STRONG",{});var Zrr=n(Lhe);wit=t(Zrr,"xlm-roberta"),Zrr.forEach(r),Ait=t(w0e," \u2014 "),sG=s(w0e,"A",{href:!0});var ear=n(sG);Lit=t(ear,"TFXLMRobertaForQuestionAnswering"),ear.forEach(r),Bit=t(w0e," (XLM-RoBERTa model)"),w0e.forEach(r),xit=d(te),L4=s(te,"LI",{});var A0e=n(L4);Bhe=s(A0e,"STRONG",{});var oar=n(Bhe);kit=t(oar,"xlnet"),oar.forEach(r),Rit=t(A0e," \u2014 "),nG=s(A0e,"A",{href:!0});var tar=n(nG);Sit=t(tar,"TFXLNetForQuestionAnsweringSimple"),tar.forEach(r),Pit=t(A0e," (XLNet model)"),A0e.forEach(r),te.forEach(r),$it=d(pa),xhe=s(pa,"P",{});var rar=n(xhe);Iit=t(rar,"Examples:"),rar.forEach(r),jit=d(pa),m(u0.$$.fragment,pa),pa.forEach(r),Gl.forEach(r),N7e=d(i),Cc=s(i,"H2",{class:!0});var z9e=n(Cc);B4=s(z9e,"A",{id:!0,class:!0,href:!0});var aar=n(B4);khe=s(aar,"SPAN",{});var sar=n(khe);m(p0.$$.fragment,sar),sar.forEach(r),aar.forEach(r),Nit=d(z9e),Rhe=s(z9e,"SPAN",{});var nar=n(Rhe);Dit=t(nar,"TFAutoModelForVision2Seq"),nar.forEach(r),z9e.forEach(r),D7e=d(i),Ft=s(i,"DIV",{class:!0});var Xl=n(Ft);m(_0.$$.fragment,Xl),qit=d(Xl),Mc=s(Xl,"P",{});var iz=n(Mc);Git=t(iz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),She=s(iz,"CODE",{});var lar=n(She);Oit=t(lar,"from_pretrained()"),lar.forEach(r),Xit=t(iz,"class method or the "),Phe=s(iz,"CODE",{});var dar=n(Phe);zit=t(dar,"from_config()"),dar.forEach(r),Vit=t(iz,`class
method.`),iz.forEach(r),Wit=d(Xl),b0=s(Xl,"P",{});var V9e=n(b0);Qit=t(V9e,"This class cannot be instantiated directly using "),$he=s(V9e,"CODE",{});var iar=n($he);Hit=t(iar,"__init__()"),iar.forEach(r),Uit=t(V9e," (throws an error)."),V9e.forEach(r),Jit=d(Xl),gr=s(Xl,"DIV",{class:!0});var zl=n(gr);m(v0.$$.fragment,zl),Yit=d(zl),Ihe=s(zl,"P",{});var car=n(Ihe);Kit=t(car,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),car.forEach(r),Zit=d(zl),Ec=s(zl,"P",{});var cz=n(Ec);ect=t(cz,`Note:
Loading a model from its configuration file does `),jhe=s(cz,"STRONG",{});var far=n(jhe);oct=t(far,"not"),far.forEach(r),tct=t(cz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nhe=s(cz,"CODE",{});var mar=n(Nhe);rct=t(mar,"from_pretrained()"),mar.forEach(r),act=t(cz,"to load the model weights."),cz.forEach(r),sct=d(zl),Dhe=s(zl,"P",{});var gar=n(Dhe);nct=t(gar,"Examples:"),gar.forEach(r),lct=d(zl),m(T0.$$.fragment,zl),zl.forEach(r),dct=d(Xl),Co=s(Xl,"DIV",{class:!0});var _a=n(Co);m(F0.$$.fragment,_a),ict=d(_a),qhe=s(_a,"P",{});var har=n(qhe);cct=t(har,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),har.forEach(r),fct=d(_a),gs=s(_a,"P",{});var m3=n(gs);mct=t(m3,"The model class to instantiate is selected based on the "),Ghe=s(m3,"CODE",{});var uar=n(Ghe);gct=t(uar,"model_type"),uar.forEach(r),hct=t(m3,` property of the config object (either
passed as an argument or loaded from `),Ohe=s(m3,"CODE",{});var par=n(Ohe);uct=t(par,"pretrained_model_name_or_path"),par.forEach(r),pct=t(m3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xhe=s(m3,"CODE",{});var _ar=n(Xhe);_ct=t(_ar,"pretrained_model_name_or_path"),_ar.forEach(r),bct=t(m3,":"),m3.forEach(r),vct=d(_a),zhe=s(_a,"UL",{});var bar=n(zhe);x4=s(bar,"LI",{});var L0e=n(x4);Vhe=s(L0e,"STRONG",{});var Tar=n(Vhe);Tct=t(Tar,"vision-encoder-decoder"),Tar.forEach(r),Fct=t(L0e," \u2014 "),lG=s(L0e,"A",{href:!0});var Far=n(lG);Cct=t(Far,"TFVisionEncoderDecoderModel"),Far.forEach(r),Mct=t(L0e," (Vision Encoder decoder model)"),L0e.forEach(r),bar.forEach(r),Ect=d(_a),Whe=s(_a,"P",{});var Car=n(Whe);yct=t(Car,"Examples:"),Car.forEach(r),wct=d(_a),m(C0.$$.fragment,_a),_a.forEach(r),Xl.forEach(r),q7e=d(i),yc=s(i,"H2",{class:!0});var W9e=n(yc);k4=s(W9e,"A",{id:!0,class:!0,href:!0});var Mar=n(k4);Qhe=s(Mar,"SPAN",{});var Ear=n(Qhe);m(M0.$$.fragment,Ear),Ear.forEach(r),Mar.forEach(r),Act=d(W9e),Hhe=s(W9e,"SPAN",{});var yar=n(Hhe);Lct=t(yar,"TFAutoModelForSpeechSeq2Seq"),yar.forEach(r),W9e.forEach(r),G7e=d(i),Ct=s(i,"DIV",{class:!0});var Vl=n(Ct);m(E0.$$.fragment,Vl),Bct=d(Vl),wc=s(Vl,"P",{});var fz=n(wc);xct=t(fz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Uhe=s(fz,"CODE",{});var war=n(Uhe);kct=t(war,"from_pretrained()"),war.forEach(r),Rct=t(fz,"class method or the "),Jhe=s(fz,"CODE",{});var Aar=n(Jhe);Sct=t(Aar,"from_config()"),Aar.forEach(r),Pct=t(fz,`class
method.`),fz.forEach(r),$ct=d(Vl),y0=s(Vl,"P",{});var Q9e=n(y0);Ict=t(Q9e,"This class cannot be instantiated directly using "),Yhe=s(Q9e,"CODE",{});var Lar=n(Yhe);jct=t(Lar,"__init__()"),Lar.forEach(r),Nct=t(Q9e," (throws an error)."),Q9e.forEach(r),Dct=d(Vl),hr=s(Vl,"DIV",{class:!0});var Wl=n(hr);m(w0.$$.fragment,Wl),qct=d(Wl),Khe=s(Wl,"P",{});var Bar=n(Khe);Gct=t(Bar,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Bar.forEach(r),Oct=d(Wl),Ac=s(Wl,"P",{});var mz=n(Ac);Xct=t(mz,`Note:
Loading a model from its configuration file does `),Zhe=s(mz,"STRONG",{});var xar=n(Zhe);zct=t(xar,"not"),xar.forEach(r),Vct=t(mz,` load the model weights. It only affects the
model\u2019s configuration. Use `),eue=s(mz,"CODE",{});var kar=n(eue);Wct=t(kar,"from_pretrained()"),kar.forEach(r),Qct=t(mz,"to load the model weights."),mz.forEach(r),Hct=d(Wl),oue=s(Wl,"P",{});var Rar=n(oue);Uct=t(Rar,"Examples:"),Rar.forEach(r),Jct=d(Wl),m(A0.$$.fragment,Wl),Wl.forEach(r),Yct=d(Vl),Mo=s(Vl,"DIV",{class:!0});var ba=n(Mo);m(L0.$$.fragment,ba),Kct=d(ba),tue=s(ba,"P",{});var Sar=n(tue);Zct=t(Sar,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Sar.forEach(r),eft=d(ba),hs=s(ba,"P",{});var g3=n(hs);oft=t(g3,"The model class to instantiate is selected based on the "),rue=s(g3,"CODE",{});var Par=n(rue);tft=t(Par,"model_type"),Par.forEach(r),rft=t(g3,` property of the config object (either
passed as an argument or loaded from `),aue=s(g3,"CODE",{});var $ar=n(aue);aft=t($ar,"pretrained_model_name_or_path"),$ar.forEach(r),sft=t(g3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sue=s(g3,"CODE",{});var Iar=n(sue);nft=t(Iar,"pretrained_model_name_or_path"),Iar.forEach(r),lft=t(g3,":"),g3.forEach(r),dft=d(ba),nue=s(ba,"UL",{});var jar=n(nue);R4=s(jar,"LI",{});var B0e=n(R4);lue=s(B0e,"STRONG",{});var Nar=n(lue);ift=t(Nar,"speech_to_text"),Nar.forEach(r),cft=t(B0e," \u2014 "),dG=s(B0e,"A",{href:!0});var Dar=n(dG);fft=t(Dar,"TFSpeech2TextForConditionalGeneration"),Dar.forEach(r),mft=t(B0e," (Speech2Text model)"),B0e.forEach(r),jar.forEach(r),gft=d(ba),due=s(ba,"P",{});var qar=n(due);hft=t(qar,"Examples:"),qar.forEach(r),uft=d(ba),m(B0.$$.fragment,ba),ba.forEach(r),Vl.forEach(r),O7e=d(i),Lc=s(i,"H2",{class:!0});var H9e=n(Lc);S4=s(H9e,"A",{id:!0,class:!0,href:!0});var Gar=n(S4);iue=s(Gar,"SPAN",{});var Oar=n(iue);m(x0.$$.fragment,Oar),Oar.forEach(r),Gar.forEach(r),pft=d(H9e),cue=s(H9e,"SPAN",{});var Xar=n(cue);_ft=t(Xar,"FlaxAutoModel"),Xar.forEach(r),H9e.forEach(r),X7e=d(i),Mt=s(i,"DIV",{class:!0});var Ql=n(Mt);m(k0.$$.fragment,Ql),bft=d(Ql),Bc=s(Ql,"P",{});var gz=n(Bc);vft=t(gz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fue=s(gz,"CODE",{});var zar=n(fue);Tft=t(zar,"from_pretrained()"),zar.forEach(r),Fft=t(gz,"class method or the "),mue=s(gz,"CODE",{});var Var=n(mue);Cft=t(Var,"from_config()"),Var.forEach(r),Mft=t(gz,`class
method.`),gz.forEach(r),Eft=d(Ql),R0=s(Ql,"P",{});var U9e=n(R0);yft=t(U9e,"This class cannot be instantiated directly using "),gue=s(U9e,"CODE",{});var War=n(gue);wft=t(War,"__init__()"),War.forEach(r),Aft=t(U9e," (throws an error)."),U9e.forEach(r),Lft=d(Ql),ur=s(Ql,"DIV",{class:!0});var Hl=n(ur);m(S0.$$.fragment,Hl),Bft=d(Hl),hue=s(Hl,"P",{});var Qar=n(hue);xft=t(Qar,"Instantiates one of the base model classes of the library from a configuration."),Qar.forEach(r),kft=d(Hl),xc=s(Hl,"P",{});var hz=n(xc);Rft=t(hz,`Note:
Loading a model from its configuration file does `),uue=s(hz,"STRONG",{});var Har=n(uue);Sft=t(Har,"not"),Har.forEach(r),Pft=t(hz,` load the model weights. It only affects the
model\u2019s configuration. Use `),pue=s(hz,"CODE",{});var Uar=n(pue);$ft=t(Uar,"from_pretrained()"),Uar.forEach(r),Ift=t(hz,"to load the model weights."),hz.forEach(r),jft=d(Hl),_ue=s(Hl,"P",{});var Jar=n(_ue);Nft=t(Jar,"Examples:"),Jar.forEach(r),Dft=d(Hl),m(P0.$$.fragment,Hl),Hl.forEach(r),qft=d(Ql),Eo=s(Ql,"DIV",{class:!0});var va=n(Eo);m($0.$$.fragment,va),Gft=d(va),bue=s(va,"P",{});var Yar=n(bue);Oft=t(Yar,"Instantiate one of the base model classes of the library from a pretrained model."),Yar.forEach(r),Xft=d(va),us=s(va,"P",{});var h3=n(us);zft=t(h3,"The model class to instantiate is selected based on the "),vue=s(h3,"CODE",{});var Kar=n(vue);Vft=t(Kar,"model_type"),Kar.forEach(r),Wft=t(h3,` property of the config object (either
passed as an argument or loaded from `),Tue=s(h3,"CODE",{});var Zar=n(Tue);Qft=t(Zar,"pretrained_model_name_or_path"),Zar.forEach(r),Hft=t(h3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fue=s(h3,"CODE",{});var esr=n(Fue);Uft=t(esr,"pretrained_model_name_or_path"),esr.forEach(r),Jft=t(h3,":"),h3.forEach(r),Yft=d(va),V=s(va,"UL",{});var Q=n(V);P4=s(Q,"LI",{});var x0e=n(P4);Cue=s(x0e,"STRONG",{});var osr=n(Cue);Kft=t(osr,"albert"),osr.forEach(r),Zft=t(x0e," \u2014 "),iG=s(x0e,"A",{href:!0});var tsr=n(iG);emt=t(tsr,"FlaxAlbertModel"),tsr.forEach(r),omt=t(x0e," (ALBERT model)"),x0e.forEach(r),tmt=d(Q),$4=s(Q,"LI",{});var k0e=n($4);Mue=s(k0e,"STRONG",{});var rsr=n(Mue);rmt=t(rsr,"bart"),rsr.forEach(r),amt=t(k0e," \u2014 "),cG=s(k0e,"A",{href:!0});var asr=n(cG);smt=t(asr,"FlaxBartModel"),asr.forEach(r),nmt=t(k0e," (BART model)"),k0e.forEach(r),lmt=d(Q),I4=s(Q,"LI",{});var R0e=n(I4);Eue=s(R0e,"STRONG",{});var ssr=n(Eue);dmt=t(ssr,"beit"),ssr.forEach(r),imt=t(R0e," \u2014 "),fG=s(R0e,"A",{href:!0});var nsr=n(fG);cmt=t(nsr,"FlaxBeitModel"),nsr.forEach(r),fmt=t(R0e," (BEiT model)"),R0e.forEach(r),mmt=d(Q),j4=s(Q,"LI",{});var S0e=n(j4);yue=s(S0e,"STRONG",{});var lsr=n(yue);gmt=t(lsr,"bert"),lsr.forEach(r),hmt=t(S0e," \u2014 "),mG=s(S0e,"A",{href:!0});var dsr=n(mG);umt=t(dsr,"FlaxBertModel"),dsr.forEach(r),pmt=t(S0e," (BERT model)"),S0e.forEach(r),_mt=d(Q),N4=s(Q,"LI",{});var P0e=n(N4);wue=s(P0e,"STRONG",{});var isr=n(wue);bmt=t(isr,"big_bird"),isr.forEach(r),vmt=t(P0e," \u2014 "),gG=s(P0e,"A",{href:!0});var csr=n(gG);Tmt=t(csr,"FlaxBigBirdModel"),csr.forEach(r),Fmt=t(P0e," (BigBird model)"),P0e.forEach(r),Cmt=d(Q),D4=s(Q,"LI",{});var $0e=n(D4);Aue=s($0e,"STRONG",{});var fsr=n(Aue);Mmt=t(fsr,"blenderbot"),fsr.forEach(r),Emt=t($0e," \u2014 "),hG=s($0e,"A",{href:!0});var msr=n(hG);ymt=t(msr,"FlaxBlenderbotModel"),msr.forEach(r),wmt=t($0e," (Blenderbot model)"),$0e.forEach(r),Amt=d(Q),q4=s(Q,"LI",{});var I0e=n(q4);Lue=s(I0e,"STRONG",{});var gsr=n(Lue);Lmt=t(gsr,"blenderbot-small"),gsr.forEach(r),Bmt=t(I0e," \u2014 "),uG=s(I0e,"A",{href:!0});var hsr=n(uG);xmt=t(hsr,"FlaxBlenderbotSmallModel"),hsr.forEach(r),kmt=t(I0e," (BlenderbotSmall model)"),I0e.forEach(r),Rmt=d(Q),G4=s(Q,"LI",{});var j0e=n(G4);Bue=s(j0e,"STRONG",{});var usr=n(Bue);Smt=t(usr,"clip"),usr.forEach(r),Pmt=t(j0e," \u2014 "),pG=s(j0e,"A",{href:!0});var psr=n(pG);$mt=t(psr,"FlaxCLIPModel"),psr.forEach(r),Imt=t(j0e," (CLIP model)"),j0e.forEach(r),jmt=d(Q),O4=s(Q,"LI",{});var N0e=n(O4);xue=s(N0e,"STRONG",{});var _sr=n(xue);Nmt=t(_sr,"distilbert"),_sr.forEach(r),Dmt=t(N0e," \u2014 "),_G=s(N0e,"A",{href:!0});var bsr=n(_G);qmt=t(bsr,"FlaxDistilBertModel"),bsr.forEach(r),Gmt=t(N0e," (DistilBERT model)"),N0e.forEach(r),Omt=d(Q),X4=s(Q,"LI",{});var D0e=n(X4);kue=s(D0e,"STRONG",{});var vsr=n(kue);Xmt=t(vsr,"electra"),vsr.forEach(r),zmt=t(D0e," \u2014 "),bG=s(D0e,"A",{href:!0});var Tsr=n(bG);Vmt=t(Tsr,"FlaxElectraModel"),Tsr.forEach(r),Wmt=t(D0e," (ELECTRA model)"),D0e.forEach(r),Qmt=d(Q),z4=s(Q,"LI",{});var q0e=n(z4);Rue=s(q0e,"STRONG",{});var Fsr=n(Rue);Hmt=t(Fsr,"gpt2"),Fsr.forEach(r),Umt=t(q0e," \u2014 "),vG=s(q0e,"A",{href:!0});var Csr=n(vG);Jmt=t(Csr,"FlaxGPT2Model"),Csr.forEach(r),Ymt=t(q0e," (OpenAI GPT-2 model)"),q0e.forEach(r),Kmt=d(Q),V4=s(Q,"LI",{});var G0e=n(V4);Sue=s(G0e,"STRONG",{});var Msr=n(Sue);Zmt=t(Msr,"gpt_neo"),Msr.forEach(r),egt=t(G0e," \u2014 "),TG=s(G0e,"A",{href:!0});var Esr=n(TG);ogt=t(Esr,"FlaxGPTNeoModel"),Esr.forEach(r),tgt=t(G0e," (GPT Neo model)"),G0e.forEach(r),rgt=d(Q),W4=s(Q,"LI",{});var O0e=n(W4);Pue=s(O0e,"STRONG",{});var ysr=n(Pue);agt=t(ysr,"gptj"),ysr.forEach(r),sgt=t(O0e," \u2014 "),FG=s(O0e,"A",{href:!0});var wsr=n(FG);ngt=t(wsr,"FlaxGPTJModel"),wsr.forEach(r),lgt=t(O0e," (GPT-J model)"),O0e.forEach(r),dgt=d(Q),Q4=s(Q,"LI",{});var X0e=n(Q4);$ue=s(X0e,"STRONG",{});var Asr=n($ue);igt=t(Asr,"marian"),Asr.forEach(r),cgt=t(X0e," \u2014 "),CG=s(X0e,"A",{href:!0});var Lsr=n(CG);fgt=t(Lsr,"FlaxMarianModel"),Lsr.forEach(r),mgt=t(X0e," (Marian model)"),X0e.forEach(r),ggt=d(Q),H4=s(Q,"LI",{});var z0e=n(H4);Iue=s(z0e,"STRONG",{});var Bsr=n(Iue);hgt=t(Bsr,"mbart"),Bsr.forEach(r),ugt=t(z0e," \u2014 "),MG=s(z0e,"A",{href:!0});var xsr=n(MG);pgt=t(xsr,"FlaxMBartModel"),xsr.forEach(r),_gt=t(z0e," (mBART model)"),z0e.forEach(r),bgt=d(Q),U4=s(Q,"LI",{});var V0e=n(U4);jue=s(V0e,"STRONG",{});var ksr=n(jue);vgt=t(ksr,"mt5"),ksr.forEach(r),Tgt=t(V0e," \u2014 "),EG=s(V0e,"A",{href:!0});var Rsr=n(EG);Fgt=t(Rsr,"FlaxMT5Model"),Rsr.forEach(r),Cgt=t(V0e," (mT5 model)"),V0e.forEach(r),Mgt=d(Q),J4=s(Q,"LI",{});var W0e=n(J4);Nue=s(W0e,"STRONG",{});var Ssr=n(Nue);Egt=t(Ssr,"pegasus"),Ssr.forEach(r),ygt=t(W0e," \u2014 "),yG=s(W0e,"A",{href:!0});var Psr=n(yG);wgt=t(Psr,"FlaxPegasusModel"),Psr.forEach(r),Agt=t(W0e," (Pegasus model)"),W0e.forEach(r),Lgt=d(Q),Y4=s(Q,"LI",{});var Q0e=n(Y4);Due=s(Q0e,"STRONG",{});var $sr=n(Due);Bgt=t($sr,"roberta"),$sr.forEach(r),xgt=t(Q0e," \u2014 "),wG=s(Q0e,"A",{href:!0});var Isr=n(wG);kgt=t(Isr,"FlaxRobertaModel"),Isr.forEach(r),Rgt=t(Q0e," (RoBERTa model)"),Q0e.forEach(r),Sgt=d(Q),K4=s(Q,"LI",{});var H0e=n(K4);que=s(H0e,"STRONG",{});var jsr=n(que);Pgt=t(jsr,"roformer"),jsr.forEach(r),$gt=t(H0e," \u2014 "),AG=s(H0e,"A",{href:!0});var Nsr=n(AG);Igt=t(Nsr,"FlaxRoFormerModel"),Nsr.forEach(r),jgt=t(H0e," (RoFormer model)"),H0e.forEach(r),Ngt=d(Q),Z4=s(Q,"LI",{});var U0e=n(Z4);Gue=s(U0e,"STRONG",{});var Dsr=n(Gue);Dgt=t(Dsr,"t5"),Dsr.forEach(r),qgt=t(U0e," \u2014 "),LG=s(U0e,"A",{href:!0});var qsr=n(LG);Ggt=t(qsr,"FlaxT5Model"),qsr.forEach(r),Ogt=t(U0e," (T5 model)"),U0e.forEach(r),Xgt=d(Q),eM=s(Q,"LI",{});var J0e=n(eM);Oue=s(J0e,"STRONG",{});var Gsr=n(Oue);zgt=t(Gsr,"vision-text-dual-encoder"),Gsr.forEach(r),Vgt=t(J0e," \u2014 "),BG=s(J0e,"A",{href:!0});var Osr=n(BG);Wgt=t(Osr,"FlaxVisionTextDualEncoderModel"),Osr.forEach(r),Qgt=t(J0e," (VisionTextDualEncoder model)"),J0e.forEach(r),Hgt=d(Q),oM=s(Q,"LI",{});var Y0e=n(oM);Xue=s(Y0e,"STRONG",{});var Xsr=n(Xue);Ugt=t(Xsr,"vit"),Xsr.forEach(r),Jgt=t(Y0e," \u2014 "),xG=s(Y0e,"A",{href:!0});var zsr=n(xG);Ygt=t(zsr,"FlaxViTModel"),zsr.forEach(r),Kgt=t(Y0e," (ViT model)"),Y0e.forEach(r),Zgt=d(Q),tM=s(Q,"LI",{});var K0e=n(tM);zue=s(K0e,"STRONG",{});var Vsr=n(zue);eht=t(Vsr,"wav2vec2"),Vsr.forEach(r),oht=t(K0e," \u2014 "),kG=s(K0e,"A",{href:!0});var Wsr=n(kG);tht=t(Wsr,"FlaxWav2Vec2Model"),Wsr.forEach(r),rht=t(K0e," (Wav2Vec2 model)"),K0e.forEach(r),aht=d(Q),rM=s(Q,"LI",{});var Z0e=n(rM);Vue=s(Z0e,"STRONG",{});var Qsr=n(Vue);sht=t(Qsr,"xglm"),Qsr.forEach(r),nht=t(Z0e," \u2014 "),RG=s(Z0e,"A",{href:!0});var Hsr=n(RG);lht=t(Hsr,"FlaxXGLMModel"),Hsr.forEach(r),dht=t(Z0e," (XGLM model)"),Z0e.forEach(r),Q.forEach(r),iht=d(va),Wue=s(va,"P",{});var Usr=n(Wue);cht=t(Usr,"Examples:"),Usr.forEach(r),fht=d(va),m(I0.$$.fragment,va),va.forEach(r),Ql.forEach(r),z7e=d(i),kc=s(i,"H2",{class:!0});var J9e=n(kc);aM=s(J9e,"A",{id:!0,class:!0,href:!0});var Jsr=n(aM);Que=s(Jsr,"SPAN",{});var Ysr=n(Que);m(j0.$$.fragment,Ysr),Ysr.forEach(r),Jsr.forEach(r),mht=d(J9e),Hue=s(J9e,"SPAN",{});var Ksr=n(Hue);ght=t(Ksr,"FlaxAutoModelForCausalLM"),Ksr.forEach(r),J9e.forEach(r),V7e=d(i),Et=s(i,"DIV",{class:!0});var Ul=n(Et);m(N0.$$.fragment,Ul),hht=d(Ul),Rc=s(Ul,"P",{});var uz=n(Rc);uht=t(uz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Uue=s(uz,"CODE",{});var Zsr=n(Uue);pht=t(Zsr,"from_pretrained()"),Zsr.forEach(r),_ht=t(uz,"class method or the "),Jue=s(uz,"CODE",{});var enr=n(Jue);bht=t(enr,"from_config()"),enr.forEach(r),vht=t(uz,`class
method.`),uz.forEach(r),Tht=d(Ul),D0=s(Ul,"P",{});var Y9e=n(D0);Fht=t(Y9e,"This class cannot be instantiated directly using "),Yue=s(Y9e,"CODE",{});var onr=n(Yue);Cht=t(onr,"__init__()"),onr.forEach(r),Mht=t(Y9e," (throws an error)."),Y9e.forEach(r),Eht=d(Ul),pr=s(Ul,"DIV",{class:!0});var Jl=n(pr);m(q0.$$.fragment,Jl),yht=d(Jl),Kue=s(Jl,"P",{});var tnr=n(Kue);wht=t(tnr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),tnr.forEach(r),Aht=d(Jl),Sc=s(Jl,"P",{});var pz=n(Sc);Lht=t(pz,`Note:
Loading a model from its configuration file does `),Zue=s(pz,"STRONG",{});var rnr=n(Zue);Bht=t(rnr,"not"),rnr.forEach(r),xht=t(pz,` load the model weights. It only affects the
model\u2019s configuration. Use `),epe=s(pz,"CODE",{});var anr=n(epe);kht=t(anr,"from_pretrained()"),anr.forEach(r),Rht=t(pz,"to load the model weights."),pz.forEach(r),Sht=d(Jl),ope=s(Jl,"P",{});var snr=n(ope);Pht=t(snr,"Examples:"),snr.forEach(r),$ht=d(Jl),m(G0.$$.fragment,Jl),Jl.forEach(r),Iht=d(Ul),yo=s(Ul,"DIV",{class:!0});var Ta=n(yo);m(O0.$$.fragment,Ta),jht=d(Ta),tpe=s(Ta,"P",{});var nnr=n(tpe);Nht=t(nnr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),nnr.forEach(r),Dht=d(Ta),ps=s(Ta,"P",{});var u3=n(ps);qht=t(u3,"The model class to instantiate is selected based on the "),rpe=s(u3,"CODE",{});var lnr=n(rpe);Ght=t(lnr,"model_type"),lnr.forEach(r),Oht=t(u3,` property of the config object (either
passed as an argument or loaded from `),ape=s(u3,"CODE",{});var dnr=n(ape);Xht=t(dnr,"pretrained_model_name_or_path"),dnr.forEach(r),zht=t(u3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=s(u3,"CODE",{});var inr=n(spe);Vht=t(inr,"pretrained_model_name_or_path"),inr.forEach(r),Wht=t(u3,":"),u3.forEach(r),Qht=d(Ta),_s=s(Ta,"UL",{});var p3=n(_s);sM=s(p3,"LI",{});var e6e=n(sM);npe=s(e6e,"STRONG",{});var cnr=n(npe);Hht=t(cnr,"gpt2"),cnr.forEach(r),Uht=t(e6e," \u2014 "),SG=s(e6e,"A",{href:!0});var fnr=n(SG);Jht=t(fnr,"FlaxGPT2LMHeadModel"),fnr.forEach(r),Yht=t(e6e," (OpenAI GPT-2 model)"),e6e.forEach(r),Kht=d(p3),nM=s(p3,"LI",{});var o6e=n(nM);lpe=s(o6e,"STRONG",{});var mnr=n(lpe);Zht=t(mnr,"gpt_neo"),mnr.forEach(r),eut=t(o6e," \u2014 "),PG=s(o6e,"A",{href:!0});var gnr=n(PG);out=t(gnr,"FlaxGPTNeoForCausalLM"),gnr.forEach(r),tut=t(o6e," (GPT Neo model)"),o6e.forEach(r),rut=d(p3),lM=s(p3,"LI",{});var t6e=n(lM);dpe=s(t6e,"STRONG",{});var hnr=n(dpe);aut=t(hnr,"gptj"),hnr.forEach(r),sut=t(t6e," \u2014 "),$G=s(t6e,"A",{href:!0});var unr=n($G);nut=t(unr,"FlaxGPTJForCausalLM"),unr.forEach(r),lut=t(t6e," (GPT-J model)"),t6e.forEach(r),dut=d(p3),dM=s(p3,"LI",{});var r6e=n(dM);ipe=s(r6e,"STRONG",{});var pnr=n(ipe);iut=t(pnr,"xglm"),pnr.forEach(r),cut=t(r6e," \u2014 "),IG=s(r6e,"A",{href:!0});var _nr=n(IG);fut=t(_nr,"FlaxXGLMForCausalLM"),_nr.forEach(r),mut=t(r6e," (XGLM model)"),r6e.forEach(r),p3.forEach(r),gut=d(Ta),cpe=s(Ta,"P",{});var bnr=n(cpe);hut=t(bnr,"Examples:"),bnr.forEach(r),uut=d(Ta),m(X0.$$.fragment,Ta),Ta.forEach(r),Ul.forEach(r),W7e=d(i),Pc=s(i,"H2",{class:!0});var K9e=n(Pc);iM=s(K9e,"A",{id:!0,class:!0,href:!0});var vnr=n(iM);fpe=s(vnr,"SPAN",{});var Tnr=n(fpe);m(z0.$$.fragment,Tnr),Tnr.forEach(r),vnr.forEach(r),put=d(K9e),mpe=s(K9e,"SPAN",{});var Fnr=n(mpe);_ut=t(Fnr,"FlaxAutoModelForPreTraining"),Fnr.forEach(r),K9e.forEach(r),Q7e=d(i),yt=s(i,"DIV",{class:!0});var Yl=n(yt);m(V0.$$.fragment,Yl),but=d(Yl),$c=s(Yl,"P",{});var _z=n($c);vut=t(_z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gpe=s(_z,"CODE",{});var Cnr=n(gpe);Tut=t(Cnr,"from_pretrained()"),Cnr.forEach(r),Fut=t(_z,"class method or the "),hpe=s(_z,"CODE",{});var Mnr=n(hpe);Cut=t(Mnr,"from_config()"),Mnr.forEach(r),Mut=t(_z,`class
method.`),_z.forEach(r),Eut=d(Yl),W0=s(Yl,"P",{});var Z9e=n(W0);yut=t(Z9e,"This class cannot be instantiated directly using "),upe=s(Z9e,"CODE",{});var Enr=n(upe);wut=t(Enr,"__init__()"),Enr.forEach(r),Aut=t(Z9e," (throws an error)."),Z9e.forEach(r),Lut=d(Yl),_r=s(Yl,"DIV",{class:!0});var Kl=n(_r);m(Q0.$$.fragment,Kl),But=d(Kl),ppe=s(Kl,"P",{});var ynr=n(ppe);xut=t(ynr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ynr.forEach(r),kut=d(Kl),Ic=s(Kl,"P",{});var bz=n(Ic);Rut=t(bz,`Note:
Loading a model from its configuration file does `),_pe=s(bz,"STRONG",{});var wnr=n(_pe);Sut=t(wnr,"not"),wnr.forEach(r),Put=t(bz,` load the model weights. It only affects the
model\u2019s configuration. Use `),bpe=s(bz,"CODE",{});var Anr=n(bpe);$ut=t(Anr,"from_pretrained()"),Anr.forEach(r),Iut=t(bz,"to load the model weights."),bz.forEach(r),jut=d(Kl),vpe=s(Kl,"P",{});var Lnr=n(vpe);Nut=t(Lnr,"Examples:"),Lnr.forEach(r),Dut=d(Kl),m(H0.$$.fragment,Kl),Kl.forEach(r),qut=d(Yl),wo=s(Yl,"DIV",{class:!0});var Fa=n(wo);m(U0.$$.fragment,Fa),Gut=d(Fa),Tpe=s(Fa,"P",{});var Bnr=n(Tpe);Out=t(Bnr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Bnr.forEach(r),Xut=d(Fa),bs=s(Fa,"P",{});var _3=n(bs);zut=t(_3,"The model class to instantiate is selected based on the "),Fpe=s(_3,"CODE",{});var xnr=n(Fpe);Vut=t(xnr,"model_type"),xnr.forEach(r),Wut=t(_3,` property of the config object (either
passed as an argument or loaded from `),Cpe=s(_3,"CODE",{});var knr=n(Cpe);Qut=t(knr,"pretrained_model_name_or_path"),knr.forEach(r),Hut=t(_3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mpe=s(_3,"CODE",{});var Rnr=n(Mpe);Uut=t(Rnr,"pretrained_model_name_or_path"),Rnr.forEach(r),Jut=t(_3,":"),_3.forEach(r),Yut=d(Fa),fe=s(Fa,"UL",{});var pe=n(fe);cM=s(pe,"LI",{});var a6e=n(cM);Epe=s(a6e,"STRONG",{});var Snr=n(Epe);Kut=t(Snr,"albert"),Snr.forEach(r),Zut=t(a6e," \u2014 "),jG=s(a6e,"A",{href:!0});var Pnr=n(jG);ept=t(Pnr,"FlaxAlbertForPreTraining"),Pnr.forEach(r),opt=t(a6e," (ALBERT model)"),a6e.forEach(r),tpt=d(pe),fM=s(pe,"LI",{});var s6e=n(fM);ype=s(s6e,"STRONG",{});var $nr=n(ype);rpt=t($nr,"bart"),$nr.forEach(r),apt=t(s6e," \u2014 "),NG=s(s6e,"A",{href:!0});var Inr=n(NG);spt=t(Inr,"FlaxBartForConditionalGeneration"),Inr.forEach(r),npt=t(s6e," (BART model)"),s6e.forEach(r),lpt=d(pe),mM=s(pe,"LI",{});var n6e=n(mM);wpe=s(n6e,"STRONG",{});var jnr=n(wpe);dpt=t(jnr,"bert"),jnr.forEach(r),ipt=t(n6e," \u2014 "),DG=s(n6e,"A",{href:!0});var Nnr=n(DG);cpt=t(Nnr,"FlaxBertForPreTraining"),Nnr.forEach(r),fpt=t(n6e," (BERT model)"),n6e.forEach(r),mpt=d(pe),gM=s(pe,"LI",{});var l6e=n(gM);Ape=s(l6e,"STRONG",{});var Dnr=n(Ape);gpt=t(Dnr,"big_bird"),Dnr.forEach(r),hpt=t(l6e," \u2014 "),qG=s(l6e,"A",{href:!0});var qnr=n(qG);upt=t(qnr,"FlaxBigBirdForPreTraining"),qnr.forEach(r),ppt=t(l6e," (BigBird model)"),l6e.forEach(r),_pt=d(pe),hM=s(pe,"LI",{});var d6e=n(hM);Lpe=s(d6e,"STRONG",{});var Gnr=n(Lpe);bpt=t(Gnr,"electra"),Gnr.forEach(r),vpt=t(d6e," \u2014 "),GG=s(d6e,"A",{href:!0});var Onr=n(GG);Tpt=t(Onr,"FlaxElectraForPreTraining"),Onr.forEach(r),Fpt=t(d6e," (ELECTRA model)"),d6e.forEach(r),Cpt=d(pe),uM=s(pe,"LI",{});var i6e=n(uM);Bpe=s(i6e,"STRONG",{});var Xnr=n(Bpe);Mpt=t(Xnr,"mbart"),Xnr.forEach(r),Ept=t(i6e," \u2014 "),OG=s(i6e,"A",{href:!0});var znr=n(OG);ypt=t(znr,"FlaxMBartForConditionalGeneration"),znr.forEach(r),wpt=t(i6e," (mBART model)"),i6e.forEach(r),Apt=d(pe),pM=s(pe,"LI",{});var c6e=n(pM);xpe=s(c6e,"STRONG",{});var Vnr=n(xpe);Lpt=t(Vnr,"mt5"),Vnr.forEach(r),Bpt=t(c6e," \u2014 "),XG=s(c6e,"A",{href:!0});var Wnr=n(XG);xpt=t(Wnr,"FlaxMT5ForConditionalGeneration"),Wnr.forEach(r),kpt=t(c6e," (mT5 model)"),c6e.forEach(r),Rpt=d(pe),_M=s(pe,"LI",{});var f6e=n(_M);kpe=s(f6e,"STRONG",{});var Qnr=n(kpe);Spt=t(Qnr,"roberta"),Qnr.forEach(r),Ppt=t(f6e," \u2014 "),zG=s(f6e,"A",{href:!0});var Hnr=n(zG);$pt=t(Hnr,"FlaxRobertaForMaskedLM"),Hnr.forEach(r),Ipt=t(f6e," (RoBERTa model)"),f6e.forEach(r),jpt=d(pe),bM=s(pe,"LI",{});var m6e=n(bM);Rpe=s(m6e,"STRONG",{});var Unr=n(Rpe);Npt=t(Unr,"roformer"),Unr.forEach(r),Dpt=t(m6e," \u2014 "),VG=s(m6e,"A",{href:!0});var Jnr=n(VG);qpt=t(Jnr,"FlaxRoFormerForMaskedLM"),Jnr.forEach(r),Gpt=t(m6e," (RoFormer model)"),m6e.forEach(r),Opt=d(pe),vM=s(pe,"LI",{});var g6e=n(vM);Spe=s(g6e,"STRONG",{});var Ynr=n(Spe);Xpt=t(Ynr,"t5"),Ynr.forEach(r),zpt=t(g6e," \u2014 "),WG=s(g6e,"A",{href:!0});var Knr=n(WG);Vpt=t(Knr,"FlaxT5ForConditionalGeneration"),Knr.forEach(r),Wpt=t(g6e," (T5 model)"),g6e.forEach(r),Qpt=d(pe),TM=s(pe,"LI",{});var h6e=n(TM);Ppe=s(h6e,"STRONG",{});var Znr=n(Ppe);Hpt=t(Znr,"wav2vec2"),Znr.forEach(r),Upt=t(h6e," \u2014 "),QG=s(h6e,"A",{href:!0});var elr=n(QG);Jpt=t(elr,"FlaxWav2Vec2ForPreTraining"),elr.forEach(r),Ypt=t(h6e," (Wav2Vec2 model)"),h6e.forEach(r),pe.forEach(r),Kpt=d(Fa),$pe=s(Fa,"P",{});var olr=n($pe);Zpt=t(olr,"Examples:"),olr.forEach(r),e_t=d(Fa),m(J0.$$.fragment,Fa),Fa.forEach(r),Yl.forEach(r),H7e=d(i),jc=s(i,"H2",{class:!0});var eBe=n(jc);FM=s(eBe,"A",{id:!0,class:!0,href:!0});var tlr=n(FM);Ipe=s(tlr,"SPAN",{});var rlr=n(Ipe);m(Y0.$$.fragment,rlr),rlr.forEach(r),tlr.forEach(r),o_t=d(eBe),jpe=s(eBe,"SPAN",{});var alr=n(jpe);t_t=t(alr,"FlaxAutoModelForMaskedLM"),alr.forEach(r),eBe.forEach(r),U7e=d(i),wt=s(i,"DIV",{class:!0});var Zl=n(wt);m(K0.$$.fragment,Zl),r_t=d(Zl),Nc=s(Zl,"P",{});var vz=n(Nc);a_t=t(vz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Npe=s(vz,"CODE",{});var slr=n(Npe);s_t=t(slr,"from_pretrained()"),slr.forEach(r),n_t=t(vz,"class method or the "),Dpe=s(vz,"CODE",{});var nlr=n(Dpe);l_t=t(nlr,"from_config()"),nlr.forEach(r),d_t=t(vz,`class
method.`),vz.forEach(r),i_t=d(Zl),Z0=s(Zl,"P",{});var oBe=n(Z0);c_t=t(oBe,"This class cannot be instantiated directly using "),qpe=s(oBe,"CODE",{});var llr=n(qpe);f_t=t(llr,"__init__()"),llr.forEach(r),m_t=t(oBe," (throws an error)."),oBe.forEach(r),g_t=d(Zl),br=s(Zl,"DIV",{class:!0});var ed=n(br);m(e6.$$.fragment,ed),h_t=d(ed),Gpe=s(ed,"P",{});var dlr=n(Gpe);u_t=t(dlr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),dlr.forEach(r),p_t=d(ed),Dc=s(ed,"P",{});var Tz=n(Dc);__t=t(Tz,`Note:
Loading a model from its configuration file does `),Ope=s(Tz,"STRONG",{});var ilr=n(Ope);b_t=t(ilr,"not"),ilr.forEach(r),v_t=t(Tz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xpe=s(Tz,"CODE",{});var clr=n(Xpe);T_t=t(clr,"from_pretrained()"),clr.forEach(r),F_t=t(Tz,"to load the model weights."),Tz.forEach(r),C_t=d(ed),zpe=s(ed,"P",{});var flr=n(zpe);M_t=t(flr,"Examples:"),flr.forEach(r),E_t=d(ed),m(o6.$$.fragment,ed),ed.forEach(r),y_t=d(Zl),Ao=s(Zl,"DIV",{class:!0});var Ca=n(Ao);m(t6.$$.fragment,Ca),w_t=d(Ca),Vpe=s(Ca,"P",{});var mlr=n(Vpe);A_t=t(mlr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),mlr.forEach(r),L_t=d(Ca),vs=s(Ca,"P",{});var b3=n(vs);B_t=t(b3,"The model class to instantiate is selected based on the "),Wpe=s(b3,"CODE",{});var glr=n(Wpe);x_t=t(glr,"model_type"),glr.forEach(r),k_t=t(b3,` property of the config object (either
passed as an argument or loaded from `),Qpe=s(b3,"CODE",{});var hlr=n(Qpe);R_t=t(hlr,"pretrained_model_name_or_path"),hlr.forEach(r),S_t=t(b3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hpe=s(b3,"CODE",{});var ulr=n(Hpe);P_t=t(ulr,"pretrained_model_name_or_path"),ulr.forEach(r),$_t=t(b3,":"),b3.forEach(r),I_t=d(Ca),be=s(Ca,"UL",{});var Ye=n(be);CM=s(Ye,"LI",{});var u6e=n(CM);Upe=s(u6e,"STRONG",{});var plr=n(Upe);j_t=t(plr,"albert"),plr.forEach(r),N_t=t(u6e," \u2014 "),HG=s(u6e,"A",{href:!0});var _lr=n(HG);D_t=t(_lr,"FlaxAlbertForMaskedLM"),_lr.forEach(r),q_t=t(u6e," (ALBERT model)"),u6e.forEach(r),G_t=d(Ye),MM=s(Ye,"LI",{});var p6e=n(MM);Jpe=s(p6e,"STRONG",{});var blr=n(Jpe);O_t=t(blr,"bart"),blr.forEach(r),X_t=t(p6e," \u2014 "),UG=s(p6e,"A",{href:!0});var vlr=n(UG);z_t=t(vlr,"FlaxBartForConditionalGeneration"),vlr.forEach(r),V_t=t(p6e," (BART model)"),p6e.forEach(r),W_t=d(Ye),EM=s(Ye,"LI",{});var _6e=n(EM);Ype=s(_6e,"STRONG",{});var Tlr=n(Ype);Q_t=t(Tlr,"bert"),Tlr.forEach(r),H_t=t(_6e," \u2014 "),JG=s(_6e,"A",{href:!0});var Flr=n(JG);U_t=t(Flr,"FlaxBertForMaskedLM"),Flr.forEach(r),J_t=t(_6e," (BERT model)"),_6e.forEach(r),Y_t=d(Ye),yM=s(Ye,"LI",{});var b6e=n(yM);Kpe=s(b6e,"STRONG",{});var Clr=n(Kpe);K_t=t(Clr,"big_bird"),Clr.forEach(r),Z_t=t(b6e," \u2014 "),YG=s(b6e,"A",{href:!0});var Mlr=n(YG);ebt=t(Mlr,"FlaxBigBirdForMaskedLM"),Mlr.forEach(r),obt=t(b6e," (BigBird model)"),b6e.forEach(r),tbt=d(Ye),wM=s(Ye,"LI",{});var v6e=n(wM);Zpe=s(v6e,"STRONG",{});var Elr=n(Zpe);rbt=t(Elr,"distilbert"),Elr.forEach(r),abt=t(v6e," \u2014 "),KG=s(v6e,"A",{href:!0});var ylr=n(KG);sbt=t(ylr,"FlaxDistilBertForMaskedLM"),ylr.forEach(r),nbt=t(v6e," (DistilBERT model)"),v6e.forEach(r),lbt=d(Ye),AM=s(Ye,"LI",{});var T6e=n(AM);e_e=s(T6e,"STRONG",{});var wlr=n(e_e);dbt=t(wlr,"electra"),wlr.forEach(r),ibt=t(T6e," \u2014 "),ZG=s(T6e,"A",{href:!0});var Alr=n(ZG);cbt=t(Alr,"FlaxElectraForMaskedLM"),Alr.forEach(r),fbt=t(T6e," (ELECTRA model)"),T6e.forEach(r),mbt=d(Ye),LM=s(Ye,"LI",{});var F6e=n(LM);o_e=s(F6e,"STRONG",{});var Llr=n(o_e);gbt=t(Llr,"mbart"),Llr.forEach(r),hbt=t(F6e," \u2014 "),eO=s(F6e,"A",{href:!0});var Blr=n(eO);ubt=t(Blr,"FlaxMBartForConditionalGeneration"),Blr.forEach(r),pbt=t(F6e," (mBART model)"),F6e.forEach(r),_bt=d(Ye),BM=s(Ye,"LI",{});var C6e=n(BM);t_e=s(C6e,"STRONG",{});var xlr=n(t_e);bbt=t(xlr,"roberta"),xlr.forEach(r),vbt=t(C6e," \u2014 "),oO=s(C6e,"A",{href:!0});var klr=n(oO);Tbt=t(klr,"FlaxRobertaForMaskedLM"),klr.forEach(r),Fbt=t(C6e," (RoBERTa model)"),C6e.forEach(r),Cbt=d(Ye),xM=s(Ye,"LI",{});var M6e=n(xM);r_e=s(M6e,"STRONG",{});var Rlr=n(r_e);Mbt=t(Rlr,"roformer"),Rlr.forEach(r),Ebt=t(M6e," \u2014 "),tO=s(M6e,"A",{href:!0});var Slr=n(tO);ybt=t(Slr,"FlaxRoFormerForMaskedLM"),Slr.forEach(r),wbt=t(M6e," (RoFormer model)"),M6e.forEach(r),Ye.forEach(r),Abt=d(Ca),a_e=s(Ca,"P",{});var Plr=n(a_e);Lbt=t(Plr,"Examples:"),Plr.forEach(r),Bbt=d(Ca),m(r6.$$.fragment,Ca),Ca.forEach(r),Zl.forEach(r),J7e=d(i),qc=s(i,"H2",{class:!0});var tBe=n(qc);kM=s(tBe,"A",{id:!0,class:!0,href:!0});var $lr=n(kM);s_e=s($lr,"SPAN",{});var Ilr=n(s_e);m(a6.$$.fragment,Ilr),Ilr.forEach(r),$lr.forEach(r),xbt=d(tBe),n_e=s(tBe,"SPAN",{});var jlr=n(n_e);kbt=t(jlr,"FlaxAutoModelForSeq2SeqLM"),jlr.forEach(r),tBe.forEach(r),Y7e=d(i),At=s(i,"DIV",{class:!0});var od=n(At);m(s6.$$.fragment,od),Rbt=d(od),Gc=s(od,"P",{});var Fz=n(Gc);Sbt=t(Fz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),l_e=s(Fz,"CODE",{});var Nlr=n(l_e);Pbt=t(Nlr,"from_pretrained()"),Nlr.forEach(r),$bt=t(Fz,"class method or the "),d_e=s(Fz,"CODE",{});var Dlr=n(d_e);Ibt=t(Dlr,"from_config()"),Dlr.forEach(r),jbt=t(Fz,`class
method.`),Fz.forEach(r),Nbt=d(od),n6=s(od,"P",{});var rBe=n(n6);Dbt=t(rBe,"This class cannot be instantiated directly using "),i_e=s(rBe,"CODE",{});var qlr=n(i_e);qbt=t(qlr,"__init__()"),qlr.forEach(r),Gbt=t(rBe," (throws an error)."),rBe.forEach(r),Obt=d(od),vr=s(od,"DIV",{class:!0});var td=n(vr);m(l6.$$.fragment,td),Xbt=d(td),c_e=s(td,"P",{});var Glr=n(c_e);zbt=t(Glr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Glr.forEach(r),Vbt=d(td),Oc=s(td,"P",{});var Cz=n(Oc);Wbt=t(Cz,`Note:
Loading a model from its configuration file does `),f_e=s(Cz,"STRONG",{});var Olr=n(f_e);Qbt=t(Olr,"not"),Olr.forEach(r),Hbt=t(Cz,` load the model weights. It only affects the
model\u2019s configuration. Use `),m_e=s(Cz,"CODE",{});var Xlr=n(m_e);Ubt=t(Xlr,"from_pretrained()"),Xlr.forEach(r),Jbt=t(Cz,"to load the model weights."),Cz.forEach(r),Ybt=d(td),g_e=s(td,"P",{});var zlr=n(g_e);Kbt=t(zlr,"Examples:"),zlr.forEach(r),Zbt=d(td),m(d6.$$.fragment,td),td.forEach(r),e2t=d(od),Lo=s(od,"DIV",{class:!0});var Ma=n(Lo);m(i6.$$.fragment,Ma),o2t=d(Ma),h_e=s(Ma,"P",{});var Vlr=n(h_e);t2t=t(Vlr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Vlr.forEach(r),r2t=d(Ma),Ts=s(Ma,"P",{});var v3=n(Ts);a2t=t(v3,"The model class to instantiate is selected based on the "),u_e=s(v3,"CODE",{});var Wlr=n(u_e);s2t=t(Wlr,"model_type"),Wlr.forEach(r),n2t=t(v3,` property of the config object (either
passed as an argument or loaded from `),p_e=s(v3,"CODE",{});var Qlr=n(p_e);l2t=t(Qlr,"pretrained_model_name_or_path"),Qlr.forEach(r),d2t=t(v3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),__e=s(v3,"CODE",{});var Hlr=n(__e);i2t=t(Hlr,"pretrained_model_name_or_path"),Hlr.forEach(r),c2t=t(v3,":"),v3.forEach(r),f2t=d(Ma),ve=s(Ma,"UL",{});var Ke=n(ve);RM=s(Ke,"LI",{});var E6e=n(RM);b_e=s(E6e,"STRONG",{});var Ulr=n(b_e);m2t=t(Ulr,"bart"),Ulr.forEach(r),g2t=t(E6e," \u2014 "),rO=s(E6e,"A",{href:!0});var Jlr=n(rO);h2t=t(Jlr,"FlaxBartForConditionalGeneration"),Jlr.forEach(r),u2t=t(E6e," (BART model)"),E6e.forEach(r),p2t=d(Ke),SM=s(Ke,"LI",{});var y6e=n(SM);v_e=s(y6e,"STRONG",{});var Ylr=n(v_e);_2t=t(Ylr,"blenderbot"),Ylr.forEach(r),b2t=t(y6e," \u2014 "),aO=s(y6e,"A",{href:!0});var Klr=n(aO);v2t=t(Klr,"FlaxBlenderbotForConditionalGeneration"),Klr.forEach(r),T2t=t(y6e," (Blenderbot model)"),y6e.forEach(r),F2t=d(Ke),PM=s(Ke,"LI",{});var w6e=n(PM);T_e=s(w6e,"STRONG",{});var Zlr=n(T_e);C2t=t(Zlr,"blenderbot-small"),Zlr.forEach(r),M2t=t(w6e," \u2014 "),sO=s(w6e,"A",{href:!0});var edr=n(sO);E2t=t(edr,"FlaxBlenderbotSmallForConditionalGeneration"),edr.forEach(r),y2t=t(w6e," (BlenderbotSmall model)"),w6e.forEach(r),w2t=d(Ke),$M=s(Ke,"LI",{});var A6e=n($M);F_e=s(A6e,"STRONG",{});var odr=n(F_e);A2t=t(odr,"encoder-decoder"),odr.forEach(r),L2t=t(A6e," \u2014 "),nO=s(A6e,"A",{href:!0});var tdr=n(nO);B2t=t(tdr,"FlaxEncoderDecoderModel"),tdr.forEach(r),x2t=t(A6e," (Encoder decoder model)"),A6e.forEach(r),k2t=d(Ke),IM=s(Ke,"LI",{});var L6e=n(IM);C_e=s(L6e,"STRONG",{});var rdr=n(C_e);R2t=t(rdr,"marian"),rdr.forEach(r),S2t=t(L6e," \u2014 "),lO=s(L6e,"A",{href:!0});var adr=n(lO);P2t=t(adr,"FlaxMarianMTModel"),adr.forEach(r),$2t=t(L6e," (Marian model)"),L6e.forEach(r),I2t=d(Ke),jM=s(Ke,"LI",{});var B6e=n(jM);M_e=s(B6e,"STRONG",{});var sdr=n(M_e);j2t=t(sdr,"mbart"),sdr.forEach(r),N2t=t(B6e," \u2014 "),dO=s(B6e,"A",{href:!0});var ndr=n(dO);D2t=t(ndr,"FlaxMBartForConditionalGeneration"),ndr.forEach(r),q2t=t(B6e," (mBART model)"),B6e.forEach(r),G2t=d(Ke),NM=s(Ke,"LI",{});var x6e=n(NM);E_e=s(x6e,"STRONG",{});var ldr=n(E_e);O2t=t(ldr,"mt5"),ldr.forEach(r),X2t=t(x6e," \u2014 "),iO=s(x6e,"A",{href:!0});var ddr=n(iO);z2t=t(ddr,"FlaxMT5ForConditionalGeneration"),ddr.forEach(r),V2t=t(x6e," (mT5 model)"),x6e.forEach(r),W2t=d(Ke),DM=s(Ke,"LI",{});var k6e=n(DM);y_e=s(k6e,"STRONG",{});var idr=n(y_e);Q2t=t(idr,"pegasus"),idr.forEach(r),H2t=t(k6e," \u2014 "),cO=s(k6e,"A",{href:!0});var cdr=n(cO);U2t=t(cdr,"FlaxPegasusForConditionalGeneration"),cdr.forEach(r),J2t=t(k6e," (Pegasus model)"),k6e.forEach(r),Y2t=d(Ke),qM=s(Ke,"LI",{});var R6e=n(qM);w_e=s(R6e,"STRONG",{});var fdr=n(w_e);K2t=t(fdr,"t5"),fdr.forEach(r),Z2t=t(R6e," \u2014 "),fO=s(R6e,"A",{href:!0});var mdr=n(fO);evt=t(mdr,"FlaxT5ForConditionalGeneration"),mdr.forEach(r),ovt=t(R6e," (T5 model)"),R6e.forEach(r),Ke.forEach(r),tvt=d(Ma),A_e=s(Ma,"P",{});var gdr=n(A_e);rvt=t(gdr,"Examples:"),gdr.forEach(r),avt=d(Ma),m(c6.$$.fragment,Ma),Ma.forEach(r),od.forEach(r),K7e=d(i),Xc=s(i,"H2",{class:!0});var aBe=n(Xc);GM=s(aBe,"A",{id:!0,class:!0,href:!0});var hdr=n(GM);L_e=s(hdr,"SPAN",{});var udr=n(L_e);m(f6.$$.fragment,udr),udr.forEach(r),hdr.forEach(r),svt=d(aBe),B_e=s(aBe,"SPAN",{});var pdr=n(B_e);nvt=t(pdr,"FlaxAutoModelForSequenceClassification"),pdr.forEach(r),aBe.forEach(r),Z7e=d(i),Lt=s(i,"DIV",{class:!0});var rd=n(Lt);m(m6.$$.fragment,rd),lvt=d(rd),zc=s(rd,"P",{});var Mz=n(zc);dvt=t(Mz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),x_e=s(Mz,"CODE",{});var _dr=n(x_e);ivt=t(_dr,"from_pretrained()"),_dr.forEach(r),cvt=t(Mz,"class method or the "),k_e=s(Mz,"CODE",{});var bdr=n(k_e);fvt=t(bdr,"from_config()"),bdr.forEach(r),mvt=t(Mz,`class
method.`),Mz.forEach(r),gvt=d(rd),g6=s(rd,"P",{});var sBe=n(g6);hvt=t(sBe,"This class cannot be instantiated directly using "),R_e=s(sBe,"CODE",{});var vdr=n(R_e);uvt=t(vdr,"__init__()"),vdr.forEach(r),pvt=t(sBe," (throws an error)."),sBe.forEach(r),_vt=d(rd),Tr=s(rd,"DIV",{class:!0});var ad=n(Tr);m(h6.$$.fragment,ad),bvt=d(ad),S_e=s(ad,"P",{});var Tdr=n(S_e);vvt=t(Tdr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Tdr.forEach(r),Tvt=d(ad),Vc=s(ad,"P",{});var Ez=n(Vc);Fvt=t(Ez,`Note:
Loading a model from its configuration file does `),P_e=s(Ez,"STRONG",{});var Fdr=n(P_e);Cvt=t(Fdr,"not"),Fdr.forEach(r),Mvt=t(Ez,` load the model weights. It only affects the
model\u2019s configuration. Use `),$_e=s(Ez,"CODE",{});var Cdr=n($_e);Evt=t(Cdr,"from_pretrained()"),Cdr.forEach(r),yvt=t(Ez,"to load the model weights."),Ez.forEach(r),wvt=d(ad),I_e=s(ad,"P",{});var Mdr=n(I_e);Avt=t(Mdr,"Examples:"),Mdr.forEach(r),Lvt=d(ad),m(u6.$$.fragment,ad),ad.forEach(r),Bvt=d(rd),Bo=s(rd,"DIV",{class:!0});var Ea=n(Bo);m(p6.$$.fragment,Ea),xvt=d(Ea),j_e=s(Ea,"P",{});var Edr=n(j_e);kvt=t(Edr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Edr.forEach(r),Rvt=d(Ea),Fs=s(Ea,"P",{});var T3=n(Fs);Svt=t(T3,"The model class to instantiate is selected based on the "),N_e=s(T3,"CODE",{});var ydr=n(N_e);Pvt=t(ydr,"model_type"),ydr.forEach(r),$vt=t(T3,` property of the config object (either
passed as an argument or loaded from `),D_e=s(T3,"CODE",{});var wdr=n(D_e);Ivt=t(wdr,"pretrained_model_name_or_path"),wdr.forEach(r),jvt=t(T3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q_e=s(T3,"CODE",{});var Adr=n(q_e);Nvt=t(Adr,"pretrained_model_name_or_path"),Adr.forEach(r),Dvt=t(T3,":"),T3.forEach(r),qvt=d(Ea),Te=s(Ea,"UL",{});var Ze=n(Te);OM=s(Ze,"LI",{});var S6e=n(OM);G_e=s(S6e,"STRONG",{});var Ldr=n(G_e);Gvt=t(Ldr,"albert"),Ldr.forEach(r),Ovt=t(S6e," \u2014 "),mO=s(S6e,"A",{href:!0});var Bdr=n(mO);Xvt=t(Bdr,"FlaxAlbertForSequenceClassification"),Bdr.forEach(r),zvt=t(S6e," (ALBERT model)"),S6e.forEach(r),Vvt=d(Ze),XM=s(Ze,"LI",{});var P6e=n(XM);O_e=s(P6e,"STRONG",{});var xdr=n(O_e);Wvt=t(xdr,"bart"),xdr.forEach(r),Qvt=t(P6e," \u2014 "),gO=s(P6e,"A",{href:!0});var kdr=n(gO);Hvt=t(kdr,"FlaxBartForSequenceClassification"),kdr.forEach(r),Uvt=t(P6e," (BART model)"),P6e.forEach(r),Jvt=d(Ze),zM=s(Ze,"LI",{});var $6e=n(zM);X_e=s($6e,"STRONG",{});var Rdr=n(X_e);Yvt=t(Rdr,"bert"),Rdr.forEach(r),Kvt=t($6e," \u2014 "),hO=s($6e,"A",{href:!0});var Sdr=n(hO);Zvt=t(Sdr,"FlaxBertForSequenceClassification"),Sdr.forEach(r),eTt=t($6e," (BERT model)"),$6e.forEach(r),oTt=d(Ze),VM=s(Ze,"LI",{});var I6e=n(VM);z_e=s(I6e,"STRONG",{});var Pdr=n(z_e);tTt=t(Pdr,"big_bird"),Pdr.forEach(r),rTt=t(I6e," \u2014 "),uO=s(I6e,"A",{href:!0});var $dr=n(uO);aTt=t($dr,"FlaxBigBirdForSequenceClassification"),$dr.forEach(r),sTt=t(I6e," (BigBird model)"),I6e.forEach(r),nTt=d(Ze),WM=s(Ze,"LI",{});var j6e=n(WM);V_e=s(j6e,"STRONG",{});var Idr=n(V_e);lTt=t(Idr,"distilbert"),Idr.forEach(r),dTt=t(j6e," \u2014 "),pO=s(j6e,"A",{href:!0});var jdr=n(pO);iTt=t(jdr,"FlaxDistilBertForSequenceClassification"),jdr.forEach(r),cTt=t(j6e," (DistilBERT model)"),j6e.forEach(r),fTt=d(Ze),QM=s(Ze,"LI",{});var N6e=n(QM);W_e=s(N6e,"STRONG",{});var Ndr=n(W_e);mTt=t(Ndr,"electra"),Ndr.forEach(r),gTt=t(N6e," \u2014 "),_O=s(N6e,"A",{href:!0});var Ddr=n(_O);hTt=t(Ddr,"FlaxElectraForSequenceClassification"),Ddr.forEach(r),uTt=t(N6e," (ELECTRA model)"),N6e.forEach(r),pTt=d(Ze),HM=s(Ze,"LI",{});var D6e=n(HM);Q_e=s(D6e,"STRONG",{});var qdr=n(Q_e);_Tt=t(qdr,"mbart"),qdr.forEach(r),bTt=t(D6e," \u2014 "),bO=s(D6e,"A",{href:!0});var Gdr=n(bO);vTt=t(Gdr,"FlaxMBartForSequenceClassification"),Gdr.forEach(r),TTt=t(D6e," (mBART model)"),D6e.forEach(r),FTt=d(Ze),UM=s(Ze,"LI",{});var q6e=n(UM);H_e=s(q6e,"STRONG",{});var Odr=n(H_e);CTt=t(Odr,"roberta"),Odr.forEach(r),MTt=t(q6e," \u2014 "),vO=s(q6e,"A",{href:!0});var Xdr=n(vO);ETt=t(Xdr,"FlaxRobertaForSequenceClassification"),Xdr.forEach(r),yTt=t(q6e," (RoBERTa model)"),q6e.forEach(r),wTt=d(Ze),JM=s(Ze,"LI",{});var G6e=n(JM);U_e=s(G6e,"STRONG",{});var zdr=n(U_e);ATt=t(zdr,"roformer"),zdr.forEach(r),LTt=t(G6e," \u2014 "),TO=s(G6e,"A",{href:!0});var Vdr=n(TO);BTt=t(Vdr,"FlaxRoFormerForSequenceClassification"),Vdr.forEach(r),xTt=t(G6e," (RoFormer model)"),G6e.forEach(r),Ze.forEach(r),kTt=d(Ea),J_e=s(Ea,"P",{});var Wdr=n(J_e);RTt=t(Wdr,"Examples:"),Wdr.forEach(r),STt=d(Ea),m(_6.$$.fragment,Ea),Ea.forEach(r),rd.forEach(r),e8e=d(i),Wc=s(i,"H2",{class:!0});var nBe=n(Wc);YM=s(nBe,"A",{id:!0,class:!0,href:!0});var Qdr=n(YM);Y_e=s(Qdr,"SPAN",{});var Hdr=n(Y_e);m(b6.$$.fragment,Hdr),Hdr.forEach(r),Qdr.forEach(r),PTt=d(nBe),K_e=s(nBe,"SPAN",{});var Udr=n(K_e);$Tt=t(Udr,"FlaxAutoModelForQuestionAnswering"),Udr.forEach(r),nBe.forEach(r),o8e=d(i),Bt=s(i,"DIV",{class:!0});var sd=n(Bt);m(v6.$$.fragment,sd),ITt=d(sd),Qc=s(sd,"P",{});var yz=n(Qc);jTt=t(yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Z_e=s(yz,"CODE",{});var Jdr=n(Z_e);NTt=t(Jdr,"from_pretrained()"),Jdr.forEach(r),DTt=t(yz,"class method or the "),ebe=s(yz,"CODE",{});var Ydr=n(ebe);qTt=t(Ydr,"from_config()"),Ydr.forEach(r),GTt=t(yz,`class
method.`),yz.forEach(r),OTt=d(sd),T6=s(sd,"P",{});var lBe=n(T6);XTt=t(lBe,"This class cannot be instantiated directly using "),obe=s(lBe,"CODE",{});var Kdr=n(obe);zTt=t(Kdr,"__init__()"),Kdr.forEach(r),VTt=t(lBe," (throws an error)."),lBe.forEach(r),WTt=d(sd),Fr=s(sd,"DIV",{class:!0});var nd=n(Fr);m(F6.$$.fragment,nd),QTt=d(nd),tbe=s(nd,"P",{});var Zdr=n(tbe);HTt=t(Zdr,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Zdr.forEach(r),UTt=d(nd),Hc=s(nd,"P",{});var wz=n(Hc);JTt=t(wz,`Note:
Loading a model from its configuration file does `),rbe=s(wz,"STRONG",{});var eir=n(rbe);YTt=t(eir,"not"),eir.forEach(r),KTt=t(wz,` load the model weights. It only affects the
model\u2019s configuration. Use `),abe=s(wz,"CODE",{});var oir=n(abe);ZTt=t(oir,"from_pretrained()"),oir.forEach(r),e1t=t(wz,"to load the model weights."),wz.forEach(r),o1t=d(nd),sbe=s(nd,"P",{});var tir=n(sbe);t1t=t(tir,"Examples:"),tir.forEach(r),r1t=d(nd),m(C6.$$.fragment,nd),nd.forEach(r),a1t=d(sd),xo=s(sd,"DIV",{class:!0});var ya=n(xo);m(M6.$$.fragment,ya),s1t=d(ya),nbe=s(ya,"P",{});var rir=n(nbe);n1t=t(rir,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),rir.forEach(r),l1t=d(ya),Cs=s(ya,"P",{});var F3=n(Cs);d1t=t(F3,"The model class to instantiate is selected based on the "),lbe=s(F3,"CODE",{});var air=n(lbe);i1t=t(air,"model_type"),air.forEach(r),c1t=t(F3,` property of the config object (either
passed as an argument or loaded from `),dbe=s(F3,"CODE",{});var sir=n(dbe);f1t=t(sir,"pretrained_model_name_or_path"),sir.forEach(r),m1t=t(F3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ibe=s(F3,"CODE",{});var nir=n(ibe);g1t=t(nir,"pretrained_model_name_or_path"),nir.forEach(r),h1t=t(F3,":"),F3.forEach(r),u1t=d(ya),Fe=s(ya,"UL",{});var eo=n(Fe);KM=s(eo,"LI",{});var O6e=n(KM);cbe=s(O6e,"STRONG",{});var lir=n(cbe);p1t=t(lir,"albert"),lir.forEach(r),_1t=t(O6e," \u2014 "),FO=s(O6e,"A",{href:!0});var dir=n(FO);b1t=t(dir,"FlaxAlbertForQuestionAnswering"),dir.forEach(r),v1t=t(O6e," (ALBERT model)"),O6e.forEach(r),T1t=d(eo),ZM=s(eo,"LI",{});var X6e=n(ZM);fbe=s(X6e,"STRONG",{});var iir=n(fbe);F1t=t(iir,"bart"),iir.forEach(r),C1t=t(X6e," \u2014 "),CO=s(X6e,"A",{href:!0});var cir=n(CO);M1t=t(cir,"FlaxBartForQuestionAnswering"),cir.forEach(r),E1t=t(X6e," (BART model)"),X6e.forEach(r),y1t=d(eo),eE=s(eo,"LI",{});var z6e=n(eE);mbe=s(z6e,"STRONG",{});var fir=n(mbe);w1t=t(fir,"bert"),fir.forEach(r),A1t=t(z6e," \u2014 "),MO=s(z6e,"A",{href:!0});var mir=n(MO);L1t=t(mir,"FlaxBertForQuestionAnswering"),mir.forEach(r),B1t=t(z6e," (BERT model)"),z6e.forEach(r),x1t=d(eo),oE=s(eo,"LI",{});var V6e=n(oE);gbe=s(V6e,"STRONG",{});var gir=n(gbe);k1t=t(gir,"big_bird"),gir.forEach(r),R1t=t(V6e," \u2014 "),EO=s(V6e,"A",{href:!0});var hir=n(EO);S1t=t(hir,"FlaxBigBirdForQuestionAnswering"),hir.forEach(r),P1t=t(V6e," (BigBird model)"),V6e.forEach(r),$1t=d(eo),tE=s(eo,"LI",{});var W6e=n(tE);hbe=s(W6e,"STRONG",{});var uir=n(hbe);I1t=t(uir,"distilbert"),uir.forEach(r),j1t=t(W6e," \u2014 "),yO=s(W6e,"A",{href:!0});var pir=n(yO);N1t=t(pir,"FlaxDistilBertForQuestionAnswering"),pir.forEach(r),D1t=t(W6e," (DistilBERT model)"),W6e.forEach(r),q1t=d(eo),rE=s(eo,"LI",{});var Q6e=n(rE);ube=s(Q6e,"STRONG",{});var _ir=n(ube);G1t=t(_ir,"electra"),_ir.forEach(r),O1t=t(Q6e," \u2014 "),wO=s(Q6e,"A",{href:!0});var bir=n(wO);X1t=t(bir,"FlaxElectraForQuestionAnswering"),bir.forEach(r),z1t=t(Q6e," (ELECTRA model)"),Q6e.forEach(r),V1t=d(eo),aE=s(eo,"LI",{});var H6e=n(aE);pbe=s(H6e,"STRONG",{});var vir=n(pbe);W1t=t(vir,"mbart"),vir.forEach(r),Q1t=t(H6e," \u2014 "),AO=s(H6e,"A",{href:!0});var Tir=n(AO);H1t=t(Tir,"FlaxMBartForQuestionAnswering"),Tir.forEach(r),U1t=t(H6e," (mBART model)"),H6e.forEach(r),J1t=d(eo),sE=s(eo,"LI",{});var U6e=n(sE);_be=s(U6e,"STRONG",{});var Fir=n(_be);Y1t=t(Fir,"roberta"),Fir.forEach(r),K1t=t(U6e," \u2014 "),LO=s(U6e,"A",{href:!0});var Cir=n(LO);Z1t=t(Cir,"FlaxRobertaForQuestionAnswering"),Cir.forEach(r),eFt=t(U6e," (RoBERTa model)"),U6e.forEach(r),oFt=d(eo),nE=s(eo,"LI",{});var J6e=n(nE);bbe=s(J6e,"STRONG",{});var Mir=n(bbe);tFt=t(Mir,"roformer"),Mir.forEach(r),rFt=t(J6e," \u2014 "),BO=s(J6e,"A",{href:!0});var Eir=n(BO);aFt=t(Eir,"FlaxRoFormerForQuestionAnswering"),Eir.forEach(r),sFt=t(J6e," (RoFormer model)"),J6e.forEach(r),eo.forEach(r),nFt=d(ya),vbe=s(ya,"P",{});var yir=n(vbe);lFt=t(yir,"Examples:"),yir.forEach(r),dFt=d(ya),m(E6.$$.fragment,ya),ya.forEach(r),sd.forEach(r),t8e=d(i),Uc=s(i,"H2",{class:!0});var dBe=n(Uc);lE=s(dBe,"A",{id:!0,class:!0,href:!0});var wir=n(lE);Tbe=s(wir,"SPAN",{});var Air=n(Tbe);m(y6.$$.fragment,Air),Air.forEach(r),wir.forEach(r),iFt=d(dBe),Fbe=s(dBe,"SPAN",{});var Lir=n(Fbe);cFt=t(Lir,"FlaxAutoModelForTokenClassification"),Lir.forEach(r),dBe.forEach(r),r8e=d(i),xt=s(i,"DIV",{class:!0});var ld=n(xt);m(w6.$$.fragment,ld),fFt=d(ld),Jc=s(ld,"P",{});var Az=n(Jc);mFt=t(Az,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Cbe=s(Az,"CODE",{});var Bir=n(Cbe);gFt=t(Bir,"from_pretrained()"),Bir.forEach(r),hFt=t(Az,"class method or the "),Mbe=s(Az,"CODE",{});var xir=n(Mbe);uFt=t(xir,"from_config()"),xir.forEach(r),pFt=t(Az,`class
method.`),Az.forEach(r),_Ft=d(ld),A6=s(ld,"P",{});var iBe=n(A6);bFt=t(iBe,"This class cannot be instantiated directly using "),Ebe=s(iBe,"CODE",{});var kir=n(Ebe);vFt=t(kir,"__init__()"),kir.forEach(r),TFt=t(iBe," (throws an error)."),iBe.forEach(r),FFt=d(ld),Cr=s(ld,"DIV",{class:!0});var dd=n(Cr);m(L6.$$.fragment,dd),CFt=d(dd),ybe=s(dd,"P",{});var Rir=n(ybe);MFt=t(Rir,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Rir.forEach(r),EFt=d(dd),Yc=s(dd,"P",{});var Lz=n(Yc);yFt=t(Lz,`Note:
Loading a model from its configuration file does `),wbe=s(Lz,"STRONG",{});var Sir=n(wbe);wFt=t(Sir,"not"),Sir.forEach(r),AFt=t(Lz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Abe=s(Lz,"CODE",{});var Pir=n(Abe);LFt=t(Pir,"from_pretrained()"),Pir.forEach(r),BFt=t(Lz,"to load the model weights."),Lz.forEach(r),xFt=d(dd),Lbe=s(dd,"P",{});var $ir=n(Lbe);kFt=t($ir,"Examples:"),$ir.forEach(r),RFt=d(dd),m(B6.$$.fragment,dd),dd.forEach(r),SFt=d(ld),ko=s(ld,"DIV",{class:!0});var wa=n(ko);m(x6.$$.fragment,wa),PFt=d(wa),Bbe=s(wa,"P",{});var Iir=n(Bbe);$Ft=t(Iir,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Iir.forEach(r),IFt=d(wa),Ms=s(wa,"P",{});var C3=n(Ms);jFt=t(C3,"The model class to instantiate is selected based on the "),xbe=s(C3,"CODE",{});var jir=n(xbe);NFt=t(jir,"model_type"),jir.forEach(r),DFt=t(C3,` property of the config object (either
passed as an argument or loaded from `),kbe=s(C3,"CODE",{});var Nir=n(kbe);qFt=t(Nir,"pretrained_model_name_or_path"),Nir.forEach(r),GFt=t(C3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=s(C3,"CODE",{});var Dir=n(Rbe);OFt=t(Dir,"pretrained_model_name_or_path"),Dir.forEach(r),XFt=t(C3,":"),C3.forEach(r),zFt=d(wa),ao=s(wa,"UL",{});var Kr=n(ao);dE=s(Kr,"LI",{});var Y6e=n(dE);Sbe=s(Y6e,"STRONG",{});var qir=n(Sbe);VFt=t(qir,"albert"),qir.forEach(r),WFt=t(Y6e," \u2014 "),xO=s(Y6e,"A",{href:!0});var Gir=n(xO);QFt=t(Gir,"FlaxAlbertForTokenClassification"),Gir.forEach(r),HFt=t(Y6e," (ALBERT model)"),Y6e.forEach(r),UFt=d(Kr),iE=s(Kr,"LI",{});var K6e=n(iE);Pbe=s(K6e,"STRONG",{});var Oir=n(Pbe);JFt=t(Oir,"bert"),Oir.forEach(r),YFt=t(K6e," \u2014 "),kO=s(K6e,"A",{href:!0});var Xir=n(kO);KFt=t(Xir,"FlaxBertForTokenClassification"),Xir.forEach(r),ZFt=t(K6e," (BERT model)"),K6e.forEach(r),eCt=d(Kr),cE=s(Kr,"LI",{});var Z6e=n(cE);$be=s(Z6e,"STRONG",{});var zir=n($be);oCt=t(zir,"big_bird"),zir.forEach(r),tCt=t(Z6e," \u2014 "),RO=s(Z6e,"A",{href:!0});var Vir=n(RO);rCt=t(Vir,"FlaxBigBirdForTokenClassification"),Vir.forEach(r),aCt=t(Z6e," (BigBird model)"),Z6e.forEach(r),sCt=d(Kr),fE=s(Kr,"LI",{});var eLe=n(fE);Ibe=s(eLe,"STRONG",{});var Wir=n(Ibe);nCt=t(Wir,"distilbert"),Wir.forEach(r),lCt=t(eLe," \u2014 "),SO=s(eLe,"A",{href:!0});var Qir=n(SO);dCt=t(Qir,"FlaxDistilBertForTokenClassification"),Qir.forEach(r),iCt=t(eLe," (DistilBERT model)"),eLe.forEach(r),cCt=d(Kr),mE=s(Kr,"LI",{});var oLe=n(mE);jbe=s(oLe,"STRONG",{});var Hir=n(jbe);fCt=t(Hir,"electra"),Hir.forEach(r),mCt=t(oLe," \u2014 "),PO=s(oLe,"A",{href:!0});var Uir=n(PO);gCt=t(Uir,"FlaxElectraForTokenClassification"),Uir.forEach(r),hCt=t(oLe," (ELECTRA model)"),oLe.forEach(r),uCt=d(Kr),gE=s(Kr,"LI",{});var tLe=n(gE);Nbe=s(tLe,"STRONG",{});var Jir=n(Nbe);pCt=t(Jir,"roberta"),Jir.forEach(r),_Ct=t(tLe," \u2014 "),$O=s(tLe,"A",{href:!0});var Yir=n($O);bCt=t(Yir,"FlaxRobertaForTokenClassification"),Yir.forEach(r),vCt=t(tLe," (RoBERTa model)"),tLe.forEach(r),TCt=d(Kr),hE=s(Kr,"LI",{});var rLe=n(hE);Dbe=s(rLe,"STRONG",{});var Kir=n(Dbe);FCt=t(Kir,"roformer"),Kir.forEach(r),CCt=t(rLe," \u2014 "),IO=s(rLe,"A",{href:!0});var Zir=n(IO);MCt=t(Zir,"FlaxRoFormerForTokenClassification"),Zir.forEach(r),ECt=t(rLe," (RoFormer model)"),rLe.forEach(r),Kr.forEach(r),yCt=d(wa),qbe=s(wa,"P",{});var ecr=n(qbe);wCt=t(ecr,"Examples:"),ecr.forEach(r),ACt=d(wa),m(k6.$$.fragment,wa),wa.forEach(r),ld.forEach(r),a8e=d(i),Kc=s(i,"H2",{class:!0});var cBe=n(Kc);uE=s(cBe,"A",{id:!0,class:!0,href:!0});var ocr=n(uE);Gbe=s(ocr,"SPAN",{});var tcr=n(Gbe);m(R6.$$.fragment,tcr),tcr.forEach(r),ocr.forEach(r),LCt=d(cBe),Obe=s(cBe,"SPAN",{});var rcr=n(Obe);BCt=t(rcr,"FlaxAutoModelForMultipleChoice"),rcr.forEach(r),cBe.forEach(r),s8e=d(i),kt=s(i,"DIV",{class:!0});var id=n(kt);m(S6.$$.fragment,id),xCt=d(id),Zc=s(id,"P",{});var Bz=n(Zc);kCt=t(Bz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Xbe=s(Bz,"CODE",{});var acr=n(Xbe);RCt=t(acr,"from_pretrained()"),acr.forEach(r),SCt=t(Bz,"class method or the "),zbe=s(Bz,"CODE",{});var scr=n(zbe);PCt=t(scr,"from_config()"),scr.forEach(r),$Ct=t(Bz,`class
method.`),Bz.forEach(r),ICt=d(id),P6=s(id,"P",{});var fBe=n(P6);jCt=t(fBe,"This class cannot be instantiated directly using "),Vbe=s(fBe,"CODE",{});var ncr=n(Vbe);NCt=t(ncr,"__init__()"),ncr.forEach(r),DCt=t(fBe," (throws an error)."),fBe.forEach(r),qCt=d(id),Mr=s(id,"DIV",{class:!0});var cd=n(Mr);m($6.$$.fragment,cd),GCt=d(cd),Wbe=s(cd,"P",{});var lcr=n(Wbe);OCt=t(lcr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),lcr.forEach(r),XCt=d(cd),ef=s(cd,"P",{});var xz=n(ef);zCt=t(xz,`Note:
Loading a model from its configuration file does `),Qbe=s(xz,"STRONG",{});var dcr=n(Qbe);VCt=t(dcr,"not"),dcr.forEach(r),WCt=t(xz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hbe=s(xz,"CODE",{});var icr=n(Hbe);QCt=t(icr,"from_pretrained()"),icr.forEach(r),HCt=t(xz,"to load the model weights."),xz.forEach(r),UCt=d(cd),Ube=s(cd,"P",{});var ccr=n(Ube);JCt=t(ccr,"Examples:"),ccr.forEach(r),YCt=d(cd),m(I6.$$.fragment,cd),cd.forEach(r),KCt=d(id),Ro=s(id,"DIV",{class:!0});var Aa=n(Ro);m(j6.$$.fragment,Aa),ZCt=d(Aa),Jbe=s(Aa,"P",{});var fcr=n(Jbe);e4t=t(fcr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),fcr.forEach(r),o4t=d(Aa),Es=s(Aa,"P",{});var M3=n(Es);t4t=t(M3,"The model class to instantiate is selected based on the "),Ybe=s(M3,"CODE",{});var mcr=n(Ybe);r4t=t(mcr,"model_type"),mcr.forEach(r),a4t=t(M3,` property of the config object (either
passed as an argument or loaded from `),Kbe=s(M3,"CODE",{});var gcr=n(Kbe);s4t=t(gcr,"pretrained_model_name_or_path"),gcr.forEach(r),n4t=t(M3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zbe=s(M3,"CODE",{});var hcr=n(Zbe);l4t=t(hcr,"pretrained_model_name_or_path"),hcr.forEach(r),d4t=t(M3,":"),M3.forEach(r),i4t=d(Aa),so=s(Aa,"UL",{});var Zr=n(so);pE=s(Zr,"LI",{});var aLe=n(pE);e2e=s(aLe,"STRONG",{});var ucr=n(e2e);c4t=t(ucr,"albert"),ucr.forEach(r),f4t=t(aLe," \u2014 "),jO=s(aLe,"A",{href:!0});var pcr=n(jO);m4t=t(pcr,"FlaxAlbertForMultipleChoice"),pcr.forEach(r),g4t=t(aLe," (ALBERT model)"),aLe.forEach(r),h4t=d(Zr),_E=s(Zr,"LI",{});var sLe=n(_E);o2e=s(sLe,"STRONG",{});var _cr=n(o2e);u4t=t(_cr,"bert"),_cr.forEach(r),p4t=t(sLe," \u2014 "),NO=s(sLe,"A",{href:!0});var bcr=n(NO);_4t=t(bcr,"FlaxBertForMultipleChoice"),bcr.forEach(r),b4t=t(sLe," (BERT model)"),sLe.forEach(r),v4t=d(Zr),bE=s(Zr,"LI",{});var nLe=n(bE);t2e=s(nLe,"STRONG",{});var vcr=n(t2e);T4t=t(vcr,"big_bird"),vcr.forEach(r),F4t=t(nLe," \u2014 "),DO=s(nLe,"A",{href:!0});var Tcr=n(DO);C4t=t(Tcr,"FlaxBigBirdForMultipleChoice"),Tcr.forEach(r),M4t=t(nLe," (BigBird model)"),nLe.forEach(r),E4t=d(Zr),vE=s(Zr,"LI",{});var lLe=n(vE);r2e=s(lLe,"STRONG",{});var Fcr=n(r2e);y4t=t(Fcr,"distilbert"),Fcr.forEach(r),w4t=t(lLe," \u2014 "),qO=s(lLe,"A",{href:!0});var Ccr=n(qO);A4t=t(Ccr,"FlaxDistilBertForMultipleChoice"),Ccr.forEach(r),L4t=t(lLe," (DistilBERT model)"),lLe.forEach(r),B4t=d(Zr),TE=s(Zr,"LI",{});var dLe=n(TE);a2e=s(dLe,"STRONG",{});var Mcr=n(a2e);x4t=t(Mcr,"electra"),Mcr.forEach(r),k4t=t(dLe," \u2014 "),GO=s(dLe,"A",{href:!0});var Ecr=n(GO);R4t=t(Ecr,"FlaxElectraForMultipleChoice"),Ecr.forEach(r),S4t=t(dLe," (ELECTRA model)"),dLe.forEach(r),P4t=d(Zr),FE=s(Zr,"LI",{});var iLe=n(FE);s2e=s(iLe,"STRONG",{});var ycr=n(s2e);$4t=t(ycr,"roberta"),ycr.forEach(r),I4t=t(iLe," \u2014 "),OO=s(iLe,"A",{href:!0});var wcr=n(OO);j4t=t(wcr,"FlaxRobertaForMultipleChoice"),wcr.forEach(r),N4t=t(iLe," (RoBERTa model)"),iLe.forEach(r),D4t=d(Zr),CE=s(Zr,"LI",{});var cLe=n(CE);n2e=s(cLe,"STRONG",{});var Acr=n(n2e);q4t=t(Acr,"roformer"),Acr.forEach(r),G4t=t(cLe," \u2014 "),XO=s(cLe,"A",{href:!0});var Lcr=n(XO);O4t=t(Lcr,"FlaxRoFormerForMultipleChoice"),Lcr.forEach(r),X4t=t(cLe," (RoFormer model)"),cLe.forEach(r),Zr.forEach(r),z4t=d(Aa),l2e=s(Aa,"P",{});var Bcr=n(l2e);V4t=t(Bcr,"Examples:"),Bcr.forEach(r),W4t=d(Aa),m(N6.$$.fragment,Aa),Aa.forEach(r),id.forEach(r),n8e=d(i),of=s(i,"H2",{class:!0});var mBe=n(of);ME=s(mBe,"A",{id:!0,class:!0,href:!0});var xcr=n(ME);d2e=s(xcr,"SPAN",{});var kcr=n(d2e);m(D6.$$.fragment,kcr),kcr.forEach(r),xcr.forEach(r),Q4t=d(mBe),i2e=s(mBe,"SPAN",{});var Rcr=n(i2e);H4t=t(Rcr,"FlaxAutoModelForNextSentencePrediction"),Rcr.forEach(r),mBe.forEach(r),l8e=d(i),Rt=s(i,"DIV",{class:!0});var fd=n(Rt);m(q6.$$.fragment,fd),U4t=d(fd),tf=s(fd,"P",{});var kz=n(tf);J4t=t(kz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),c2e=s(kz,"CODE",{});var Scr=n(c2e);Y4t=t(Scr,"from_pretrained()"),Scr.forEach(r),K4t=t(kz,"class method or the "),f2e=s(kz,"CODE",{});var Pcr=n(f2e);Z4t=t(Pcr,"from_config()"),Pcr.forEach(r),eMt=t(kz,`class
method.`),kz.forEach(r),oMt=d(fd),G6=s(fd,"P",{});var gBe=n(G6);tMt=t(gBe,"This class cannot be instantiated directly using "),m2e=s(gBe,"CODE",{});var $cr=n(m2e);rMt=t($cr,"__init__()"),$cr.forEach(r),aMt=t(gBe," (throws an error)."),gBe.forEach(r),sMt=d(fd),Er=s(fd,"DIV",{class:!0});var md=n(Er);m(O6.$$.fragment,md),nMt=d(md),g2e=s(md,"P",{});var Icr=n(g2e);lMt=t(Icr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Icr.forEach(r),dMt=d(md),rf=s(md,"P",{});var Rz=n(rf);iMt=t(Rz,`Note:
Loading a model from its configuration file does `),h2e=s(Rz,"STRONG",{});var jcr=n(h2e);cMt=t(jcr,"not"),jcr.forEach(r),fMt=t(Rz,` load the model weights. It only affects the
model\u2019s configuration. Use `),u2e=s(Rz,"CODE",{});var Ncr=n(u2e);mMt=t(Ncr,"from_pretrained()"),Ncr.forEach(r),gMt=t(Rz,"to load the model weights."),Rz.forEach(r),hMt=d(md),p2e=s(md,"P",{});var Dcr=n(p2e);uMt=t(Dcr,"Examples:"),Dcr.forEach(r),pMt=d(md),m(X6.$$.fragment,md),md.forEach(r),_Mt=d(fd),So=s(fd,"DIV",{class:!0});var La=n(So);m(z6.$$.fragment,La),bMt=d(La),_2e=s(La,"P",{});var qcr=n(_2e);vMt=t(qcr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),qcr.forEach(r),TMt=d(La),ys=s(La,"P",{});var E3=n(ys);FMt=t(E3,"The model class to instantiate is selected based on the "),b2e=s(E3,"CODE",{});var Gcr=n(b2e);CMt=t(Gcr,"model_type"),Gcr.forEach(r),MMt=t(E3,` property of the config object (either
passed as an argument or loaded from `),v2e=s(E3,"CODE",{});var Ocr=n(v2e);EMt=t(Ocr,"pretrained_model_name_or_path"),Ocr.forEach(r),yMt=t(E3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T2e=s(E3,"CODE",{});var Xcr=n(T2e);wMt=t(Xcr,"pretrained_model_name_or_path"),Xcr.forEach(r),AMt=t(E3,":"),E3.forEach(r),LMt=d(La),F2e=s(La,"UL",{});var zcr=n(F2e);EE=s(zcr,"LI",{});var fLe=n(EE);C2e=s(fLe,"STRONG",{});var Vcr=n(C2e);BMt=t(Vcr,"bert"),Vcr.forEach(r),xMt=t(fLe," \u2014 "),zO=s(fLe,"A",{href:!0});var Wcr=n(zO);kMt=t(Wcr,"FlaxBertForNextSentencePrediction"),Wcr.forEach(r),RMt=t(fLe," (BERT model)"),fLe.forEach(r),zcr.forEach(r),SMt=d(La),M2e=s(La,"P",{});var Qcr=n(M2e);PMt=t(Qcr,"Examples:"),Qcr.forEach(r),$Mt=d(La),m(V6.$$.fragment,La),La.forEach(r),fd.forEach(r),d8e=d(i),af=s(i,"H2",{class:!0});var hBe=n(af);yE=s(hBe,"A",{id:!0,class:!0,href:!0});var Hcr=n(yE);E2e=s(Hcr,"SPAN",{});var Ucr=n(E2e);m(W6.$$.fragment,Ucr),Ucr.forEach(r),Hcr.forEach(r),IMt=d(hBe),y2e=s(hBe,"SPAN",{});var Jcr=n(y2e);jMt=t(Jcr,"FlaxAutoModelForImageClassification"),Jcr.forEach(r),hBe.forEach(r),i8e=d(i),St=s(i,"DIV",{class:!0});var gd=n(St);m(Q6.$$.fragment,gd),NMt=d(gd),sf=s(gd,"P",{});var Sz=n(sf);DMt=t(Sz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),w2e=s(Sz,"CODE",{});var Ycr=n(w2e);qMt=t(Ycr,"from_pretrained()"),Ycr.forEach(r),GMt=t(Sz,"class method or the "),A2e=s(Sz,"CODE",{});var Kcr=n(A2e);OMt=t(Kcr,"from_config()"),Kcr.forEach(r),XMt=t(Sz,`class
method.`),Sz.forEach(r),zMt=d(gd),H6=s(gd,"P",{});var uBe=n(H6);VMt=t(uBe,"This class cannot be instantiated directly using "),L2e=s(uBe,"CODE",{});var Zcr=n(L2e);WMt=t(Zcr,"__init__()"),Zcr.forEach(r),QMt=t(uBe," (throws an error)."),uBe.forEach(r),HMt=d(gd),yr=s(gd,"DIV",{class:!0});var hd=n(yr);m(U6.$$.fragment,hd),UMt=d(hd),B2e=s(hd,"P",{});var efr=n(B2e);JMt=t(efr,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),efr.forEach(r),YMt=d(hd),nf=s(hd,"P",{});var Pz=n(nf);KMt=t(Pz,`Note:
Loading a model from its configuration file does `),x2e=s(Pz,"STRONG",{});var ofr=n(x2e);ZMt=t(ofr,"not"),ofr.forEach(r),eEt=t(Pz,` load the model weights. It only affects the
model\u2019s configuration. Use `),k2e=s(Pz,"CODE",{});var tfr=n(k2e);oEt=t(tfr,"from_pretrained()"),tfr.forEach(r),tEt=t(Pz,"to load the model weights."),Pz.forEach(r),rEt=d(hd),R2e=s(hd,"P",{});var rfr=n(R2e);aEt=t(rfr,"Examples:"),rfr.forEach(r),sEt=d(hd),m(J6.$$.fragment,hd),hd.forEach(r),nEt=d(gd),Po=s(gd,"DIV",{class:!0});var Ba=n(Po);m(Y6.$$.fragment,Ba),lEt=d(Ba),S2e=s(Ba,"P",{});var afr=n(S2e);dEt=t(afr,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),afr.forEach(r),iEt=d(Ba),ws=s(Ba,"P",{});var y3=n(ws);cEt=t(y3,"The model class to instantiate is selected based on the "),P2e=s(y3,"CODE",{});var sfr=n(P2e);fEt=t(sfr,"model_type"),sfr.forEach(r),mEt=t(y3,` property of the config object (either
passed as an argument or loaded from `),$2e=s(y3,"CODE",{});var nfr=n($2e);gEt=t(nfr,"pretrained_model_name_or_path"),nfr.forEach(r),hEt=t(y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I2e=s(y3,"CODE",{});var lfr=n(I2e);uEt=t(lfr,"pretrained_model_name_or_path"),lfr.forEach(r),pEt=t(y3,":"),y3.forEach(r),_Et=d(Ba),K6=s(Ba,"UL",{});var pBe=n(K6);wE=s(pBe,"LI",{});var mLe=n(wE);j2e=s(mLe,"STRONG",{});var dfr=n(j2e);bEt=t(dfr,"beit"),dfr.forEach(r),vEt=t(mLe," \u2014 "),VO=s(mLe,"A",{href:!0});var ifr=n(VO);TEt=t(ifr,"FlaxBeitForImageClassification"),ifr.forEach(r),FEt=t(mLe," (BEiT model)"),mLe.forEach(r),CEt=d(pBe),AE=s(pBe,"LI",{});var gLe=n(AE);N2e=s(gLe,"STRONG",{});var cfr=n(N2e);MEt=t(cfr,"vit"),cfr.forEach(r),EEt=t(gLe," \u2014 "),WO=s(gLe,"A",{href:!0});var ffr=n(WO);yEt=t(ffr,"FlaxViTForImageClassification"),ffr.forEach(r),wEt=t(gLe," (ViT model)"),gLe.forEach(r),pBe.forEach(r),AEt=d(Ba),D2e=s(Ba,"P",{});var mfr=n(D2e);LEt=t(mfr,"Examples:"),mfr.forEach(r),BEt=d(Ba),m(Z6.$$.fragment,Ba),Ba.forEach(r),gd.forEach(r),c8e=d(i),lf=s(i,"H2",{class:!0});var _Be=n(lf);LE=s(_Be,"A",{id:!0,class:!0,href:!0});var gfr=n(LE);q2e=s(gfr,"SPAN",{});var hfr=n(q2e);m(eL.$$.fragment,hfr),hfr.forEach(r),gfr.forEach(r),xEt=d(_Be),G2e=s(_Be,"SPAN",{});var ufr=n(G2e);kEt=t(ufr,"FlaxAutoModelForVision2Seq"),ufr.forEach(r),_Be.forEach(r),f8e=d(i),Pt=s(i,"DIV",{class:!0});var ud=n(Pt);m(oL.$$.fragment,ud),REt=d(ud),df=s(ud,"P",{});var $z=n(df);SEt=t($z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),O2e=s($z,"CODE",{});var pfr=n(O2e);PEt=t(pfr,"from_pretrained()"),pfr.forEach(r),$Et=t($z,"class method or the "),X2e=s($z,"CODE",{});var _fr=n(X2e);IEt=t(_fr,"from_config()"),_fr.forEach(r),jEt=t($z,`class
method.`),$z.forEach(r),NEt=d(ud),tL=s(ud,"P",{});var bBe=n(tL);DEt=t(bBe,"This class cannot be instantiated directly using "),z2e=s(bBe,"CODE",{});var bfr=n(z2e);qEt=t(bfr,"__init__()"),bfr.forEach(r),GEt=t(bBe," (throws an error)."),bBe.forEach(r),OEt=d(ud),wr=s(ud,"DIV",{class:!0});var pd=n(wr);m(rL.$$.fragment,pd),XEt=d(pd),V2e=s(pd,"P",{});var vfr=n(V2e);zEt=t(vfr,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),vfr.forEach(r),VEt=d(pd),cf=s(pd,"P",{});var Iz=n(cf);WEt=t(Iz,`Note:
Loading a model from its configuration file does `),W2e=s(Iz,"STRONG",{});var Tfr=n(W2e);QEt=t(Tfr,"not"),Tfr.forEach(r),HEt=t(Iz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Q2e=s(Iz,"CODE",{});var Ffr=n(Q2e);UEt=t(Ffr,"from_pretrained()"),Ffr.forEach(r),JEt=t(Iz,"to load the model weights."),Iz.forEach(r),YEt=d(pd),H2e=s(pd,"P",{});var Cfr=n(H2e);KEt=t(Cfr,"Examples:"),Cfr.forEach(r),ZEt=d(pd),m(aL.$$.fragment,pd),pd.forEach(r),e3t=d(ud),$o=s(ud,"DIV",{class:!0});var xa=n($o);m(sL.$$.fragment,xa),o3t=d(xa),U2e=s(xa,"P",{});var Mfr=n(U2e);t3t=t(Mfr,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Mfr.forEach(r),r3t=d(xa),As=s(xa,"P",{});var w3=n(As);a3t=t(w3,"The model class to instantiate is selected based on the "),J2e=s(w3,"CODE",{});var Efr=n(J2e);s3t=t(Efr,"model_type"),Efr.forEach(r),n3t=t(w3,` property of the config object (either
passed as an argument or loaded from `),Y2e=s(w3,"CODE",{});var yfr=n(Y2e);l3t=t(yfr,"pretrained_model_name_or_path"),yfr.forEach(r),d3t=t(w3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K2e=s(w3,"CODE",{});var wfr=n(K2e);i3t=t(wfr,"pretrained_model_name_or_path"),wfr.forEach(r),c3t=t(w3,":"),w3.forEach(r),f3t=d(xa),Z2e=s(xa,"UL",{});var Afr=n(Z2e);BE=s(Afr,"LI",{});var hLe=n(BE);eve=s(hLe,"STRONG",{});var Lfr=n(eve);m3t=t(Lfr,"vision-encoder-decoder"),Lfr.forEach(r),g3t=t(hLe," \u2014 "),QO=s(hLe,"A",{href:!0});var Bfr=n(QO);h3t=t(Bfr,"FlaxVisionEncoderDecoderModel"),Bfr.forEach(r),u3t=t(hLe," (Vision Encoder decoder model)"),hLe.forEach(r),Afr.forEach(r),p3t=d(xa),ove=s(xa,"P",{});var xfr=n(ove);_3t=t(xfr,"Examples:"),xfr.forEach(r),b3t=d(xa),m(nL.$$.fragment,xa),xa.forEach(r),ud.forEach(r),this.h()},h(){c(J,"name","hf:doc:metadata"),c(J,"content",JSON.stringify(Dfr)),c(me,"id","auto-classes"),c(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(me,"href","#auto-classes"),c(le,"class","relative group"),c(Ls,"href","/docs/transformers/doc-build-test/en/model_doc/auto#transformers.AutoConfig"),c(xs,"href","/docs/transformers/doc-build-test/en/model_doc/auto#transformers.AutoModel"),c(ks,"href","/docs/transformers/doc-build-test/en/model_doc/auto#transformers.AutoTokenizer"),c(Ed,"href","/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertModel"),c(pf,"id","extending-the-auto-classes"),c(pf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pf,"href","#extending-the-auto-classes"),c(yd,"class","relative group"),c(bf,"id","transformers.AutoConfig"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#transformers.AutoConfig"),c(wd,"class","relative group"),c(i7,"href","/docs/transformers/doc-build-test/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(c7,"href","/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertConfig"),c(f7,"href","/docs/transformers/doc-build-test/en/model_doc/bart#transformers.BartConfig"),c(m7,"href","/docs/transformers/doc-build-test/en/model_doc/beit#transformers.BeitConfig"),c(g7,"href","/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertConfig"),c(h7,"href","/docs/transformers/doc-build-test/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(u7,"href","/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.BigBirdConfig"),c(p7,"href","/docs/transformers/doc-build-test/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(_7,"href","/docs/transformers/doc-build-test/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(b7,"href","/docs/transformers/doc-build-test/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(v7,"href","/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.CamembertConfig"),c(T7,"href","/docs/transformers/doc-build-test/en/model_doc/canine#transformers.CanineConfig"),c(F7,"href","/docs/transformers/doc-build-test/en/model_doc/clip#transformers.CLIPConfig"),c(C7,"href","/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.ConvBertConfig"),c(M7,"href","/docs/transformers/doc-build-test/en/model_doc/convnext#transformers.ConvNextConfig"),c(E7,"href","/docs/transformers/doc-build-test/en/model_doc/ctrl#transformers.CTRLConfig"),c(y7,"href","/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.DebertaConfig"),c(w7,"href","/docs/transformers/doc-build-test/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(A7,"href","/docs/transformers/doc-build-test/en/model_doc/deit#transformers.DeiTConfig"),c(L7,"href","/docs/transformers/doc-build-test/en/model_doc/detr#transformers.DetrConfig"),c(B7,"href","/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertConfig"),c(x7,"href","/docs/transformers/doc-build-test/en/model_doc/dpr#transformers.DPRConfig"),c(k7,"href","/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraConfig"),c(R7,"href","/docs/transformers/doc-build-test/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(S7,"href","/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.FlaubertConfig"),c(P7,"href","/docs/transformers/doc-build-test/en/model_doc/fnet#transformers.FNetConfig"),c($7,"href","/docs/transformers/doc-build-test/en/model_doc/fsmt#transformers.FSMTConfig"),c(I7,"href","/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.FunnelConfig"),c(j7,"href","/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.GPT2Config"),c(N7,"href","/docs/transformers/doc-build-test/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(D7,"href","/docs/transformers/doc-build-test/en/model_doc/gptj#transformers.GPTJConfig"),c(q7,"href","/docs/transformers/doc-build-test/en/model_doc/hubert#transformers.HubertConfig"),c(G7,"href","/docs/transformers/doc-build-test/en/model_doc/ibert#transformers.IBertConfig"),c(O7,"href","/docs/transformers/doc-build-test/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(X7,"href","/docs/transformers/doc-build-test/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(z7,"href","/docs/transformers/doc-build-test/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(V7,"href","/docs/transformers/doc-build-test/en/model_doc/led#transformers.LEDConfig"),c(W7,"href","/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.LongformerConfig"),c(Q7,"href","/docs/transformers/doc-build-test/en/model_doc/luke#transformers.LukeConfig"),c(H7,"href","/docs/transformers/doc-build-test/en/model_doc/lxmert#transformers.LxmertConfig"),c(U7,"href","/docs/transformers/doc-build-test/en/model_doc/m2m_100#transformers.M2M100Config"),c(J7,"href","/docs/transformers/doc-build-test/en/model_doc/marian#transformers.MarianConfig"),c(Y7,"href","/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.MBartConfig"),c(K7,"href","/docs/transformers/doc-build-test/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Z7,"href","/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(e8,"href","/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.MPNetConfig"),c(o8,"href","/docs/transformers/doc-build-test/en/model_doc/mt5#transformers.MT5Config"),c(t8,"href","/docs/transformers/doc-build-test/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(r8,"href","/docs/transformers/doc-build-test/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(a8,"href","/docs/transformers/doc-build-test/en/model_doc/pegasus#transformers.PegasusConfig"),c(s8,"href","/docs/transformers/doc-build-test/en/model_doc/perceiver#transformers.PerceiverConfig"),c(n8,"href","/docs/transformers/doc-build-test/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(l8,"href","/docs/transformers/doc-build-test/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(d8,"href","/docs/transformers/doc-build-test/en/model_doc/rag#transformers.RagConfig"),c(i8,"href","/docs/transformers/doc-build-test/en/model_doc/realm#transformers.RealmConfig"),c(c8,"href","/docs/transformers/doc-build-test/en/model_doc/reformer#transformers.ReformerConfig"),c(f8,"href","/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.RemBertConfig"),c(m8,"href","/docs/transformers/doc-build-test/en/model_doc/retribert#transformers.RetriBertConfig"),c(g8,"href","/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaConfig"),c(h8,"href","/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerConfig"),c(u8,"href","/docs/transformers/doc-build-test/en/model_doc/segformer#transformers.SegformerConfig"),c(p8,"href","/docs/transformers/doc-build-test/en/model_doc/sew#transformers.SEWConfig"),c(_8,"href","/docs/transformers/doc-build-test/en/model_doc/sew-d#transformers.SEWDConfig"),c(b8,"href","/docs/transformers/doc-build-test/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(v8,"href","/docs/transformers/doc-build-test/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(T8,"href","/docs/transformers/doc-build-test/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(F8,"href","/docs/transformers/doc-build-test/en/model_doc/splinter#transformers.SplinterConfig"),c(C8,"href","/docs/transformers/doc-build-test/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(M8,"href","/docs/transformers/doc-build-test/en/model_doc/swin#transformers.SwinConfig"),c(E8,"href","/docs/transformers/doc-build-test/en/model_doc/t5#transformers.T5Config"),c(y8,"href","/docs/transformers/doc-build-test/en/model_doc/tapas#transformers.TapasConfig"),c(w8,"href","/docs/transformers/doc-build-test/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(A8,"href","/docs/transformers/doc-build-test/en/model_doc/trocr#transformers.TrOCRConfig"),c(L8,"href","/docs/transformers/doc-build-test/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(B8,"href","/docs/transformers/doc-build-test/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(x8,"href","/docs/transformers/doc-build-test/en/model_doc/vilt#transformers.ViltConfig"),c(k8,"href","/docs/transformers/doc-build-test/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(R8,"href","/docs/transformers/doc-build-test/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(S8,"href","/docs/transformers/doc-build-test/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(P8,"href","/docs/transformers/doc-build-test/en/model_doc/vit#transformers.ViTConfig"),c($8,"href","/docs/transformers/doc-build-test/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(I8,"href","/docs/transformers/doc-build-test/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(j8,"href","/docs/transformers/doc-build-test/en/model_doc/wavlm#transformers.WavLMConfig"),c(N8,"href","/docs/transformers/doc-build-test/en/model_doc/xglm#transformers.XGLMConfig"),c(D8,"href","/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.XLMConfig"),c(q8,"href","/docs/transformers/doc-build-test/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(G8,"href","/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(O8,"href","/docs/transformers/doc-build-test/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(X8,"href","/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.XLNetConfig"),c(z8,"href","/docs/transformers/doc-build-test/en/model_doc/yoso#transformers.YosoConfig"),c(io,"class","docstring"),c(eg,"class","docstring"),c(qo,"class","docstring"),c(og,"id","transformers.AutoTokenizer"),c(og,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(og,"href","#transformers.AutoTokenizer"),c(Ld,"class","relative group"),c(V8,"href","/docs/transformers/doc-build-test/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(W8,"href","/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertTokenizer"),c(Q8,"href","/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(H8,"href","/docs/transformers/doc-build-test/en/model_doc/bart#transformers.BartTokenizer"),c(U8,"href","/docs/transformers/doc-build-test/en/model_doc/bart#transformers.BartTokenizerFast"),c(J8,"href","/docs/transformers/doc-build-test/en/model_doc/barthez#transformers.BarthezTokenizer"),c(Y8,"href","/docs/transformers/doc-build-test/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(K8,"href","/docs/transformers/doc-build-test/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(Z8,"href","/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertTokenizer"),c(e9,"href","/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertTokenizerFast"),c(o9,"href","/docs/transformers/doc-build-test/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(t9,"href","/docs/transformers/doc-build-test/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(r9,"href","/docs/transformers/doc-build-test/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(a9,"href","/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(s9,"href","/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(n9,"href","/docs/transformers/doc-build-test/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(l9,"href","/docs/transformers/doc-build-test/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(d9,"href","/docs/transformers/doc-build-test/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(i9,"href","/docs/transformers/doc-build-test/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(c9,"href","/docs/transformers/doc-build-test/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(f9,"href","/docs/transformers/doc-build-test/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(m9,"href","/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.CamembertTokenizer"),c(g9,"href","/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(h9,"href","/docs/transformers/doc-build-test/en/model_doc/canine#transformers.CanineTokenizer"),c(u9,"href","/docs/transformers/doc-build-test/en/model_doc/clip#transformers.CLIPTokenizer"),c(p9,"href","/docs/transformers/doc-build-test/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(_9,"href","/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(b9,"href","/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(v9,"href","/docs/transformers/doc-build-test/en/model_doc/cpm#transformers.CpmTokenizer"),c(T9,"href","/docs/transformers/doc-build-test/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(F9,"href","/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.DebertaTokenizer"),c(C9,"href","/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(M9,"href","/docs/transformers/doc-build-test/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(E9,"href","/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(y9,"href","/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(w9,"href","/docs/transformers/doc-build-test/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(A9,"href","/docs/transformers/doc-build-test/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(L9,"href","/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraTokenizer"),c(B9,"href","/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(x9,"href","/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(k9,"href","/docs/transformers/doc-build-test/en/model_doc/fnet#transformers.FNetTokenizer"),c(R9,"href","/docs/transformers/doc-build-test/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(S9,"href","/docs/transformers/doc-build-test/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(P9,"href","/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.FunnelTokenizer"),c($9,"href","/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(I9,"href","/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(j9,"href","/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(N9,"href","/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(D9,"href","/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(q9,"href","/docs/transformers/doc-build-test/en/model_doc/herbert#transformers.HerbertTokenizer"),c(G9,"href","/docs/transformers/doc-build-test/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(O9,"href","/docs/transformers/doc-build-test/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(X9,"href","/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaTokenizer"),c(z9,"href","/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(V9,"href","/docs/transformers/doc-build-test/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(W9,"href","/docs/transformers/doc-build-test/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(Q9,"href","/docs/transformers/doc-build-test/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(H9,"href","/docs/transformers/doc-build-test/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(U9,"href","/docs/transformers/doc-build-test/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(J9,"href","/docs/transformers/doc-build-test/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(Y9,"href","/docs/transformers/doc-build-test/en/model_doc/led#transformers.LEDTokenizer"),c(K9,"href","/docs/transformers/doc-build-test/en/model_doc/led#transformers.LEDTokenizerFast"),c(Z9,"href","/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.LongformerTokenizer"),c(eB,"href","/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(oB,"href","/docs/transformers/doc-build-test/en/model_doc/luke#transformers.LukeTokenizer"),c(tB,"href","/docs/transformers/doc-build-test/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(rB,"href","/docs/transformers/doc-build-test/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(aB,"href","/docs/transformers/doc-build-test/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(sB,"href","/docs/transformers/doc-build-test/en/model_doc/marian#transformers.MarianTokenizer"),c(nB,"href","/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.MBartTokenizer"),c(lB,"href","/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(dB,"href","/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(iB,"href","/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(cB,"href","/docs/transformers/doc-build-test/en/model_doc/mluke#transformers.MLukeTokenizer"),c(fB,"href","/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(mB,"href","/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(gB,"href","/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(hB,"href","/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(uB,"href","/docs/transformers/doc-build-test/en/model_doc/mt5#transformers.T5Tokenizer"),c(pB,"href","/docs/transformers/doc-build-test/en/model_doc/mt5#transformers.T5TokenizerFast"),c(_B,"href","/docs/transformers/doc-build-test/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(bB,"href","/docs/transformers/doc-build-test/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(vB,"href","/docs/transformers/doc-build-test/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(TB,"href","/docs/transformers/doc-build-test/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(FB,"href","/docs/transformers/doc-build-test/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(CB,"href","/docs/transformers/doc-build-test/en/model_doc/phobert#transformers.PhobertTokenizer"),c(MB,"href","/docs/transformers/doc-build-test/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(EB,"href","/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertTokenizer"),c(yB,"href","/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertTokenizerFast"),c(wB,"href","/docs/transformers/doc-build-test/en/model_doc/rag#transformers.RagTokenizer"),c(AB,"href","/docs/transformers/doc-build-test/en/model_doc/reformer#transformers.ReformerTokenizer"),c(LB,"href","/docs/transformers/doc-build-test/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(BB,"href","/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.RemBertTokenizer"),c(xB,"href","/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(kB,"href","/docs/transformers/doc-build-test/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(RB,"href","/docs/transformers/doc-build-test/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(SB,"href","/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaTokenizer"),c(PB,"href","/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c($B,"href","/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(IB,"href","/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(jB,"href","/docs/transformers/doc-build-test/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(NB,"href","/docs/transformers/doc-build-test/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(DB,"href","/docs/transformers/doc-build-test/en/model_doc/splinter#transformers.SplinterTokenizer"),c(qB,"href","/docs/transformers/doc-build-test/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(GB,"href","/docs/transformers/doc-build-test/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(OB,"href","/docs/transformers/doc-build-test/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(XB,"href","/docs/transformers/doc-build-test/en/model_doc/mt5#transformers.T5Tokenizer"),c(zB,"href","/docs/transformers/doc-build-test/en/model_doc/mt5#transformers.T5TokenizerFast"),c(VB,"href","/docs/transformers/doc-build-test/en/model_doc/tapas#transformers.TapasTokenizer"),c(WB,"href","/docs/transformers/doc-build-test/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(QB,"href","/docs/transformers/doc-build-test/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(HB,"href","/docs/transformers/doc-build-test/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(UB,"href","/docs/transformers/doc-build-test/en/model_doc/xglm#transformers.XGLMTokenizer"),c(JB,"href","/docs/transformers/doc-build-test/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(YB,"href","/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.XLMTokenizer"),c(KB,"href","/docs/transformers/doc-build-test/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(ZB,"href","/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(ex,"href","/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(ox,"href","/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(tx,"href","/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(co,"class","docstring"),c(xg,"class","docstring"),c(Go,"class","docstring"),c(kg,"id","transformers.AutoFeatureExtractor"),c(kg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kg,"href","#transformers.AutoFeatureExtractor"),c(Bd,"class","relative group"),c(rx,"href","/docs/transformers/doc-build-test/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(ax,"href","/docs/transformers/doc-build-test/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(sx,"href","/docs/transformers/doc-build-test/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(nx,"href","/docs/transformers/doc-build-test/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(lx,"href","/docs/transformers/doc-build-test/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(dx,"href","/docs/transformers/doc-build-test/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(ix,"href","/docs/transformers/doc-build-test/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(cx,"href","/docs/transformers/doc-build-test/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(fx,"href","/docs/transformers/doc-build-test/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(mx,"href","/docs/transformers/doc-build-test/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(gx,"href","/docs/transformers/doc-build-test/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(hx,"href","/docs/transformers/doc-build-test/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(ux,"href","/docs/transformers/doc-build-test/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(px,"href","/docs/transformers/doc-build-test/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(_x,"href","/docs/transformers/doc-build-test/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Le,"class","docstring"),c(Qg,"class","docstring"),c(Oo,"class","docstring"),c(Hg,"id","transformers.AutoProcessor"),c(Hg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hg,"href","#transformers.AutoProcessor"),c(xd,"class","relative group"),c(bx,"href","/docs/transformers/doc-build-test/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(vx,"href","/docs/transformers/doc-build-test/en/model_doc/clip#transformers.CLIPProcessor"),c(Tx,"href","/docs/transformers/doc-build-test/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(Fx,"href","/docs/transformers/doc-build-test/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(Cx,"href","/docs/transformers/doc-build-test/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(Mx,"href","/docs/transformers/doc-build-test/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(Ex,"href","/docs/transformers/doc-build-test/en/model_doc/trocr#transformers.TrOCRProcessor"),c(yx,"href","/docs/transformers/doc-build-test/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(wx,"href","/docs/transformers/doc-build-test/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Be,"class","docstring"),c(ea,"class","docstring"),c(ah,"id","transformers.AutoModel"),c(ah,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ah,"href","#transformers.AutoModel"),c(Rd,"class","relative group"),c($t,"class","docstring"),c(Ax,"href","/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertModel"),c(Lx,"href","/docs/transformers/doc-build-test/en/model_doc/bart#transformers.BartModel"),c(Bx,"href","/docs/transformers/doc-build-test/en/model_doc/beit#transformers.BeitModel"),c(xx,"href","/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertModel"),c(kx,"href","/docs/transformers/doc-build-test/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(Rx,"href","/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.BigBirdModel"),c(Sx,"href","/docs/transformers/doc-build-test/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(Px,"href","/docs/transformers/doc-build-test/en/model_doc/blenderbot#transformers.BlenderbotModel"),c($x,"href","/docs/transformers/doc-build-test/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(Ix,"href","/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.CamembertModel"),c(jx,"href","/docs/transformers/doc-build-test/en/model_doc/canine#transformers.CanineModel"),c(Nx,"href","/docs/transformers/doc-build-test/en/model_doc/clip#transformers.CLIPModel"),c(Dx,"href","/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.ConvBertModel"),c(qx,"href","/docs/transformers/doc-build-test/en/model_doc/convnext#transformers.ConvNextModel"),c(Gx,"href","/docs/transformers/doc-build-test/en/model_doc/ctrl#transformers.CTRLModel"),c(Ox,"href","/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.DebertaModel"),c(Xx,"href","/docs/transformers/doc-build-test/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(zx,"href","/docs/transformers/doc-build-test/en/model_doc/deit#transformers.DeiTModel"),c(Vx,"href","/docs/transformers/doc-build-test/en/model_doc/detr#transformers.DetrModel"),c(Wx,"href","/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertModel"),c(Qx,"href","/docs/transformers/doc-build-test/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Hx,"href","/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraModel"),c(Ux,"href","/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.FlaubertModel"),c(Jx,"href","/docs/transformers/doc-build-test/en/model_doc/fnet#transformers.FNetModel"),c(Yx,"href","/docs/transformers/doc-build-test/en/model_doc/fsmt#transformers.FSMTModel"),c(Kx,"href","/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.FunnelModel"),c(Zx,"href","/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.FunnelBaseModel"),c(ek,"href","/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.GPT2Model"),c(ok,"href","/docs/transformers/doc-build-test/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(tk,"href","/docs/transformers/doc-build-test/en/model_doc/gptj#transformers.GPTJModel"),c(rk,"href","/docs/transformers/doc-build-test/en/model_doc/hubert#transformers.HubertModel"),c(ak,"href","/docs/transformers/doc-build-test/en/model_doc/ibert#transformers.IBertModel"),c(sk,"href","/docs/transformers/doc-build-test/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(nk,"href","/docs/transformers/doc-build-test/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(lk,"href","/docs/transformers/doc-build-test/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(dk,"href","/docs/transformers/doc-build-test/en/model_doc/led#transformers.LEDModel"),c(ik,"href","/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.LongformerModel"),c(ck,"href","/docs/transformers/doc-build-test/en/model_doc/luke#transformers.LukeModel"),c(fk,"href","/docs/transformers/doc-build-test/en/model_doc/lxmert#transformers.LxmertModel"),c(mk,"href","/docs/transformers/doc-build-test/en/model_doc/m2m_100#transformers.M2M100Model"),c(gk,"href","/docs/transformers/doc-build-test/en/model_doc/marian#transformers.MarianModel"),c(hk,"href","/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.MBartModel"),c(uk,"href","/docs/transformers/doc-build-test/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(pk,"href","/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.MobileBertModel"),c(_k,"href","/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.MPNetModel"),c(bk,"href","/docs/transformers/doc-build-test/en/model_doc/mt5#transformers.MT5Model"),c(vk,"href","/docs/transformers/doc-build-test/en/model_doc/nystromformer#transformers.NystromformerModel"),c(Tk,"href","/docs/transformers/doc-build-test/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(Fk,"href","/docs/transformers/doc-build-test/en/model_doc/pegasus#transformers.PegasusModel"),c(Ck,"href","/docs/transformers/doc-build-test/en/model_doc/perceiver#transformers.PerceiverModel"),c(Mk,"href","/docs/transformers/doc-build-test/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Ek,"href","/docs/transformers/doc-build-test/en/model_doc/qdqbert#transformers.QDQBertModel"),c(yk,"href","/docs/transformers/doc-build-test/en/model_doc/reformer#transformers.ReformerModel"),c(wk,"href","/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.RemBertModel"),c(Ak,"href","/docs/transformers/doc-build-test/en/model_doc/retribert#transformers.RetriBertModel"),c(Lk,"href","/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaModel"),c(Bk,"href","/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerModel"),c(xk,"href","/docs/transformers/doc-build-test/en/model_doc/segformer#transformers.SegformerModel"),c(kk,"href","/docs/transformers/doc-build-test/en/model_doc/sew#transformers.SEWModel"),c(Rk,"href","/docs/transformers/doc-build-test/en/model_doc/sew-d#transformers.SEWDModel"),c(Sk,"href","/docs/transformers/doc-build-test/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Pk,"href","/docs/transformers/doc-build-test/en/model_doc/splinter#transformers.SplinterModel"),c($k,"href","/docs/transformers/doc-build-test/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Ik,"href","/docs/transformers/doc-build-test/en/model_doc/swin#transformers.SwinModel"),c(jk,"href","/docs/transformers/doc-build-test/en/model_doc/t5#transformers.T5Model"),c(Nk,"href","/docs/transformers/doc-build-test/en/model_doc/tapas#transformers.TapasModel"),c(Dk,"href","/docs/transformers/doc-build-test/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(qk,"href","/docs/transformers/doc-build-test/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Gk,"href","/docs/transformers/doc-build-test/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Ok,"href","/docs/transformers/doc-build-test/en/model_doc/vilt#transformers.ViltModel"),c(Xk,"href","/docs/transformers/doc-build-test/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(zk,"href","/docs/transformers/doc-build-test/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Vk,"href","/docs/transformers/doc-build-test/en/model_doc/vit#transformers.ViTModel"),c(Wk,"href","/docs/transformers/doc-build-test/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Qk,"href","/docs/transformers/doc-build-test/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Hk,"href","/docs/transformers/doc-build-test/en/model_doc/wavlm#transformers.WavLMModel"),c(Uk,"href","/docs/transformers/doc-build-test/en/model_doc/xglm#transformers.XGLMModel"),c(Jk,"href","/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.XLMModel"),c(Yk,"href","/docs/transformers/doc-build-test/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Kk,"href","/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Zk,"href","/docs/transformers/doc-build-test/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(eR,"href","/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.XLNetModel"),c(oR,"href","/docs/transformers/doc-build-test/en/model_doc/yoso#transformers.YosoModel"),c(xe,"class","docstring"),c(Xo,"class","docstring"),c(Su,"id","transformers.AutoModelForPreTraining"),c(Su,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Su,"href","#transformers.AutoModelForPreTraining"),c($d,"class","relative group"),c(It,"class","docstring"),c(tR,"href","/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertForPreTraining"),c(rR,"href","/docs/transformers/doc-build-test/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(aR,"href","/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertForPreTraining"),c(sR,"href","/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(nR,"href","/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(lR,"href","/docs/transformers/doc-build-test/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(dR,"href","/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(iR,"href","/docs/transformers/doc-build-test/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(cR,"href","/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(fR,"href","/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraForPreTraining"),c(mR,"href","/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(gR,"href","/docs/transformers/doc-build-test/en/model_doc/fnet#transformers.FNetForPreTraining"),c(hR,"href","/docs/transformers/doc-build-test/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(uR,"href","/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(pR,"href","/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(_R,"href","/docs/transformers/doc-build-test/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(bR,"href","/docs/transformers/doc-build-test/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(vR,"href","/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(TR,"href","/docs/transformers/doc-build-test/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(FR,"href","/docs/transformers/doc-build-test/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(CR,"href","/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(MR,"href","/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(ER,"href","/docs/transformers/doc-build-test/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(yR,"href","/docs/transformers/doc-build-test/en/model_doc/retribert#transformers.RetriBertModel"),c(wR,"href","/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(AR,"href","/docs/transformers/doc-build-test/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(LR,"href","/docs/transformers/doc-build-test/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(BR,"href","/docs/transformers/doc-build-test/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(xR,"href","/docs/transformers/doc-build-test/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(kR,"href","/docs/transformers/doc-build-test/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(RR,"href","/docs/transformers/doc-build-test/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(SR,"href","/docs/transformers/doc-build-test/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(PR,"href","/docs/transformers/doc-build-test/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c($R,"href","/docs/transformers/doc-build-test/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(IR,"href","/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(jR,"href","/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(NR,"href","/docs/transformers/doc-build-test/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(DR,"href","/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(ke,"class","docstring"),c(zo,"class","docstring"),c(vp,"id","transformers.AutoModelForCausalLM"),c(vp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vp,"href","#transformers.AutoModelForCausalLM"),c(Nd,"class","relative group"),c(jt,"class","docstring"),c(qR,"href","/docs/transformers/doc-build-test/en/model_doc/bart#transformers.BartForCausalLM"),c(GR,"href","/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertLMHeadModel"),c(OR,"href","/docs/transformers/doc-build-test/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(XR,"href","/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(zR,"href","/docs/transformers/doc-build-test/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(VR,"href","/docs/transformers/doc-build-test/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(WR,"href","/docs/transformers/doc-build-test/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(QR,"href","/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(HR,"href","/docs/transformers/doc-build-test/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(UR,"href","/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraForCausalLM"),c(JR,"href","/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(YR,"href","/docs/transformers/doc-build-test/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(KR,"href","/docs/transformers/doc-build-test/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(ZR,"href","/docs/transformers/doc-build-test/en/model_doc/marian#transformers.MarianForCausalLM"),c(eS,"href","/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.MBartForCausalLM"),c(oS,"href","/docs/transformers/doc-build-test/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(tS,"href","/docs/transformers/doc-build-test/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(rS,"href","/docs/transformers/doc-build-test/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(aS,"href","/docs/transformers/doc-build-test/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(sS,"href","/docs/transformers/doc-build-test/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(nS,"href","/docs/transformers/doc-build-test/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(lS,"href","/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(dS,"href","/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(iS,"href","/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(cS,"href","/docs/transformers/doc-build-test/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(fS,"href","/docs/transformers/doc-build-test/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(mS,"href","/docs/transformers/doc-build-test/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(gS,"href","/docs/transformers/doc-build-test/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(hS,"href","/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(uS,"href","/docs/transformers/doc-build-test/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(pS,"href","/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(_S,"href","/docs/transformers/doc-build-test/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(bS,"href","/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Re,"class","docstring"),c(Vo,"class","docstring"),c(e_,"id","transformers.AutoModelForMaskedLM"),c(e_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e_,"href","#transformers.AutoModelForMaskedLM"),c(Gd,"class","relative group"),c(Nt,"class","docstring"),c(vS,"href","/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(TS,"href","/docs/transformers/doc-build-test/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(FS,"href","/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertForMaskedLM"),c(CS,"href","/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(MS,"href","/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(ES,"href","/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(yS,"href","/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(wS,"href","/docs/transformers/doc-build-test/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(AS,"href","/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(LS,"href","/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(BS,"href","/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(xS,"href","/docs/transformers/doc-build-test/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(kS,"href","/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(RS,"href","/docs/transformers/doc-build-test/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(SS,"href","/docs/transformers/doc-build-test/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(PS,"href","/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c($S,"href","/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(IS,"href","/docs/transformers/doc-build-test/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(jS,"href","/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(NS,"href","/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(DS,"href","/docs/transformers/doc-build-test/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(qS,"href","/docs/transformers/doc-build-test/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(GS,"href","/docs/transformers/doc-build-test/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(OS,"href","/docs/transformers/doc-build-test/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(XS,"href","/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(zS,"href","/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(VS,"href","/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(WS,"href","/docs/transformers/doc-build-test/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(QS,"href","/docs/transformers/doc-build-test/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(HS,"href","/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(US,"href","/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(JS,"href","/docs/transformers/doc-build-test/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(YS,"href","/docs/transformers/doc-build-test/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Se,"class","docstring"),c(Wo,"class","docstring"),c(I_,"id","transformers.AutoModelForSeq2SeqLM"),c(I_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I_,"href","#transformers.AutoModelForSeq2SeqLM"),c(zd,"class","relative group"),c(Dt,"class","docstring"),c(KS,"href","/docs/transformers/doc-build-test/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(ZS,"href","/docs/transformers/doc-build-test/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(eP,"href","/docs/transformers/doc-build-test/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(oP,"href","/docs/transformers/doc-build-test/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(tP,"href","/docs/transformers/doc-build-test/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(rP,"href","/docs/transformers/doc-build-test/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(aP,"href","/docs/transformers/doc-build-test/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(sP,"href","/docs/transformers/doc-build-test/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(nP,"href","/docs/transformers/doc-build-test/en/model_doc/marian#transformers.MarianMTModel"),c(lP,"href","/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(dP,"href","/docs/transformers/doc-build-test/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(iP,"href","/docs/transformers/doc-build-test/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(cP,"href","/docs/transformers/doc-build-test/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(fP,"href","/docs/transformers/doc-build-test/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(mP,"href","/docs/transformers/doc-build-test/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Pe,"class","docstring"),c(Qo,"class","docstring"),c(Z_,"id","transformers.AutoModelForSequenceClassification"),c(Z_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z_,"href","#transformers.AutoModelForSequenceClassification"),c(Qd,"class","relative group"),c(qt,"class","docstring"),c(gP,"href","/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(hP,"href","/docs/transformers/doc-build-test/en/model_doc/bart#transformers.BartForSequenceClassification"),c(uP,"href","/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertForSequenceClassification"),c(pP,"href","/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(_P,"href","/docs/transformers/doc-build-test/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(bP,"href","/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(vP,"href","/docs/transformers/doc-build-test/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(TP,"href","/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(FP,"href","/docs/transformers/doc-build-test/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(CP,"href","/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(MP,"href","/docs/transformers/doc-build-test/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(EP,"href","/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(yP,"href","/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(wP,"href","/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(AP,"href","/docs/transformers/doc-build-test/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(LP,"href","/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(BP,"href","/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(xP,"href","/docs/transformers/doc-build-test/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(kP,"href","/docs/transformers/doc-build-test/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(RP,"href","/docs/transformers/doc-build-test/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(SP,"href","/docs/transformers/doc-build-test/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(PP,"href","/docs/transformers/doc-build-test/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c($P,"href","/docs/transformers/doc-build-test/en/model_doc/led#transformers.LEDForSequenceClassification"),c(IP,"href","/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(jP,"href","/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(NP,"href","/docs/transformers/doc-build-test/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(DP,"href","/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(qP,"href","/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(GP,"href","/docs/transformers/doc-build-test/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(OP,"href","/docs/transformers/doc-build-test/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(XP,"href","/docs/transformers/doc-build-test/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(zP,"href","/docs/transformers/doc-build-test/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(VP,"href","/docs/transformers/doc-build-test/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(WP,"href","/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(QP,"href","/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(HP,"href","/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(UP,"href","/docs/transformers/doc-build-test/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(JP,"href","/docs/transformers/doc-build-test/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(YP,"href","/docs/transformers/doc-build-test/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(KP,"href","/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(ZP,"href","/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(e$,"href","/docs/transformers/doc-build-test/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(o$,"href","/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(t$,"href","/docs/transformers/doc-build-test/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c($e,"class","docstring"),c(Ho,"class","docstring"),c(Vb,"id","transformers.AutoModelForMultipleChoice"),c(Vb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vb,"href","#transformers.AutoModelForMultipleChoice"),c(Jd,"class","relative group"),c(Gt,"class","docstring"),c(r$,"href","/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(a$,"href","/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertForMultipleChoice"),c(s$,"href","/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(n$,"href","/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(l$,"href","/docs/transformers/doc-build-test/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(d$,"href","/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(i$,"href","/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(c$,"href","/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(f$,"href","/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(m$,"href","/docs/transformers/doc-build-test/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(g$,"href","/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(h$,"href","/docs/transformers/doc-build-test/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(u$,"href","/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(p$,"href","/docs/transformers/doc-build-test/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(_$,"href","/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(b$,"href","/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(v$,"href","/docs/transformers/doc-build-test/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(T$,"href","/docs/transformers/doc-build-test/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(F$,"href","/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(C$,"href","/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(M$,"href","/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(E$,"href","/docs/transformers/doc-build-test/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(y$,"href","/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(w$,"href","/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(A$,"href","/docs/transformers/doc-build-test/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(L$,"href","/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(B$,"href","/docs/transformers/doc-build-test/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(Ie,"class","docstring"),c(Uo,"class","docstring"),c(T2,"id","transformers.AutoModelForNextSentencePrediction"),c(T2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T2,"href","#transformers.AutoModelForNextSentencePrediction"),c(Zd,"class","relative group"),c(Ot,"class","docstring"),c(x$,"href","/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(k$,"href","/docs/transformers/doc-build-test/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(R$,"href","/docs/transformers/doc-build-test/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(S$,"href","/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(P$,"href","/docs/transformers/doc-build-test/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(je,"class","docstring"),c(Jo,"class","docstring"),c(A2,"id","transformers.AutoModelForTokenClassification"),c(A2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A2,"href","#transformers.AutoModelForTokenClassification"),c(ti,"class","relative group"),c(Xt,"class","docstring"),c($$,"href","/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(I$,"href","/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertForTokenClassification"),c(j$,"href","/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(N$,"href","/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(D$,"href","/docs/transformers/doc-build-test/en/model_doc/canine#transformers.CanineForTokenClassification"),c(q$,"href","/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(G$,"href","/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(O$,"href","/docs/transformers/doc-build-test/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(X$,"href","/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(z$,"href","/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(V$,"href","/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(W$,"href","/docs/transformers/doc-build-test/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(Q$,"href","/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(H$,"href","/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(U$,"href","/docs/transformers/doc-build-test/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(J$,"href","/docs/transformers/doc-build-test/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(Y$,"href","/docs/transformers/doc-build-test/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(K$,"href","/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(Z$,"href","/docs/transformers/doc-build-test/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(eI,"href","/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(oI,"href","/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(tI,"href","/docs/transformers/doc-build-test/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(rI,"href","/docs/transformers/doc-build-test/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(aI,"href","/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(sI,"href","/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(nI,"href","/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(lI,"href","/docs/transformers/doc-build-test/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(dI,"href","/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(iI,"href","/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(cI,"href","/docs/transformers/doc-build-test/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(fI,"href","/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(mI,"href","/docs/transformers/doc-build-test/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(Ne,"class","docstring"),c(Yo,"class","docstring"),c(lv,"id","transformers.AutoModelForQuestionAnswering"),c(lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lv,"href","#transformers.AutoModelForQuestionAnswering"),c(si,"class","relative group"),c(zt,"class","docstring"),c(gI,"href","/docs/transformers/doc-build-test/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(hI,"href","/docs/transformers/doc-build-test/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(uI,"href","/docs/transformers/doc-build-test/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(pI,"href","/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(_I,"href","/docs/transformers/doc-build-test/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(bI,"href","/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(vI,"href","/docs/transformers/doc-build-test/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(TI,"href","/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(FI,"href","/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(CI,"href","/docs/transformers/doc-build-test/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(MI,"href","/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(EI,"href","/docs/transformers/doc-build-test/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(yI,"href","/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(wI,"href","/docs/transformers/doc-build-test/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(AI,"href","/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(LI,"href","/docs/transformers/doc-build-test/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(BI,"href","/docs/transformers/doc-build-test/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(xI,"href","/docs/transformers/doc-build-test/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(kI,"href","/docs/transformers/doc-build-test/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(RI,"href","/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(SI,"href","/docs/transformers/doc-build-test/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(PI,"href","/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c($I,"href","/docs/transformers/doc-build-test/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(II,"href","/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(jI,"href","/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(NI,"href","/docs/transformers/doc-build-test/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(DI,"href","/docs/transformers/doc-build-test/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(qI,"href","/docs/transformers/doc-build-test/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(GI,"href","/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(OI,"href","/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(XI,"href","/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(zI,"href","/docs/transformers/doc-build-test/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(VI,"href","/docs/transformers/doc-build-test/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(WI,"href","/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(QI,"href","/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(HI,"href","/docs/transformers/doc-build-test/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(UI,"href","/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(JI,"href","/docs/transformers/doc-build-test/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(De,"class","docstring"),c(Ko,"class","docstring"),c(Qv,"id","transformers.AutoModelForTableQuestionAnswering"),c(Qv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(di,"class","relative group"),c(Vt,"class","docstring"),c(YI,"href","/docs/transformers/doc-build-test/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(qe,"class","docstring"),c(Zo,"class","docstring"),c(Jv,"id","transformers.AutoModelForImageClassification"),c(Jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jv,"href","#transformers.AutoModelForImageClassification"),c(fi,"class","relative group"),c(Wt,"class","docstring"),c(KI,"href","/docs/transformers/doc-build-test/en/model_doc/beit#transformers.BeitForImageClassification"),c(ZI,"href","/docs/transformers/doc-build-test/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(ej,"href","/docs/transformers/doc-build-test/en/model_doc/deit#transformers.DeiTForImageClassification"),c(oj,"href","/docs/transformers/doc-build-test/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(tj,"href","/docs/transformers/doc-build-test/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(rj,"href","/docs/transformers/doc-build-test/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(aj,"href","/docs/transformers/doc-build-test/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(sj,"href","/docs/transformers/doc-build-test/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(nj,"href","/docs/transformers/doc-build-test/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(lj,"href","/docs/transformers/doc-build-test/en/model_doc/swin#transformers.SwinForImageClassification"),c(dj,"href","/docs/transformers/doc-build-test/en/model_doc/vit#transformers.ViTForImageClassification"),c(Ge,"class","docstring"),c(et,"class","docstring"),c(aT,"id","transformers.AutoModelForVision2Seq"),c(aT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aT,"href","#transformers.AutoModelForVision2Seq"),c(hi,"class","relative group"),c(Qt,"class","docstring"),c(ij,"href","/docs/transformers/doc-build-test/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(Oe,"class","docstring"),c(ot,"class","docstring"),c(lT,"id","transformers.AutoModelForAudioClassification"),c(lT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lT,"href","#transformers.AutoModelForAudioClassification"),c(_i,"class","relative group"),c(Ht,"class","docstring"),c(cj,"href","/docs/transformers/doc-build-test/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(fj,"href","/docs/transformers/doc-build-test/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(mj,"href","/docs/transformers/doc-build-test/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(gj,"href","/docs/transformers/doc-build-test/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(hj,"href","/docs/transformers/doc-build-test/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(uj,"href","/docs/transformers/doc-build-test/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(pj,"href","/docs/transformers/doc-build-test/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(Xe,"class","docstring"),c(tt,"class","docstring"),c(pT,"id","transformers.AutoModelForAudioFrameClassification"),c(pT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pT,"href","#transformers.AutoModelForAudioFrameClassification"),c(Ti,"class","relative group"),c(Ut,"class","docstring"),c(_j,"href","/docs/transformers/doc-build-test/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(bj,"href","/docs/transformers/doc-build-test/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(vj,"href","/docs/transformers/doc-build-test/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(ze,"class","docstring"),c(rt,"class","docstring"),c(FT,"id","transformers.AutoModelForCTC"),c(FT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FT,"href","#transformers.AutoModelForCTC"),c(Ei,"class","relative group"),c(Jt,"class","docstring"),c(Tj,"href","/docs/transformers/doc-build-test/en/model_doc/hubert#transformers.HubertForCTC"),c(Fj,"href","/docs/transformers/doc-build-test/en/model_doc/sew#transformers.SEWForCTC"),c(Cj,"href","/docs/transformers/doc-build-test/en/model_doc/sew-d#transformers.SEWDForCTC"),c(Mj,"href","/docs/transformers/doc-build-test/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(Ej,"href","/docs/transformers/doc-build-test/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(yj,"href","/docs/transformers/doc-build-test/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(wj,"href","/docs/transformers/doc-build-test/en/model_doc/wavlm#transformers.WavLMForCTC"),c(Ve,"class","docstring"),c(at,"class","docstring"),c(xT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(xT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Ai,"class","relative group"),c(Yt,"class","docstring"),c(Aj,"href","/docs/transformers/doc-build-test/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(Lj,"href","/docs/transformers/doc-build-test/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(We,"class","docstring"),c(st,"class","docstring"),c(PT,"id","transformers.AutoModelForAudioXVector"),c(PT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PT,"href","#transformers.AutoModelForAudioXVector"),c(xi,"class","relative group"),c(Kt,"class","docstring"),c(Bj,"href","/docs/transformers/doc-build-test/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(xj,"href","/docs/transformers/doc-build-test/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(kj,"href","/docs/transformers/doc-build-test/en/model_doc/wavlm#transformers.WavLMForXVector"),c(Qe,"class","docstring"),c(nt,"class","docstring"),c(DT,"id","transformers.AutoModelForObjectDetection"),c(DT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DT,"href","#transformers.AutoModelForObjectDetection"),c(Pi,"class","relative group"),c(Zt,"class","docstring"),c(Rj,"href","/docs/transformers/doc-build-test/en/model_doc/detr#transformers.DetrForObjectDetection"),c(He,"class","docstring"),c(lt,"class","docstring"),c(OT,"id","transformers.AutoModelForImageSegmentation"),c(OT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OT,"href","#transformers.AutoModelForImageSegmentation"),c(ji,"class","relative group"),c(er,"class","docstring"),c(Sj,"href","/docs/transformers/doc-build-test/en/model_doc/detr#transformers.DetrForSegmentation"),c(Ue,"class","docstring"),c(dt,"class","docstring"),c(VT,"id","transformers.AutoModelForSemanticSegmentation"),c(VT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VT,"href","#transformers.AutoModelForSemanticSegmentation"),c(qi,"class","relative group"),c(or,"class","docstring"),c(Pj,"href","/docs/transformers/doc-build-test/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c($j,"href","/docs/transformers/doc-build-test/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Je,"class","docstring"),c(it,"class","docstring"),c(UT,"id","transformers.TFAutoModel"),c(UT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UT,"href","#transformers.TFAutoModel"),c(Xi,"class","relative group"),c(tr,"class","docstring"),c(Ij,"href","/docs/transformers/doc-build-test/en/model_doc/albert#transformers.TFAlbertModel"),c(jj,"href","/docs/transformers/doc-build-test/en/model_doc/bart#transformers.TFBartModel"),c(Nj,"href","/docs/transformers/doc-build-test/en/model_doc/bert#transformers.TFBertModel"),c(Dj,"href","/docs/transformers/doc-build-test/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(qj,"href","/docs/transformers/doc-build-test/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(Gj,"href","/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.TFCamembertModel"),c(Oj,"href","/docs/transformers/doc-build-test/en/model_doc/clip#transformers.TFCLIPModel"),c(Xj,"href","/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.TFConvBertModel"),c(zj,"href","/docs/transformers/doc-build-test/en/model_doc/ctrl#transformers.TFCTRLModel"),c(Vj,"href","/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.TFDebertaModel"),c(Wj,"href","/docs/transformers/doc-build-test/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(Qj,"href","/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(Hj,"href","/docs/transformers/doc-build-test/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(Uj,"href","/docs/transformers/doc-build-test/en/model_doc/electra#transformers.TFElectraModel"),c(Jj,"href","/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(Yj,"href","/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.TFFunnelModel"),c(Kj,"href","/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(Zj,"href","/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.TFGPT2Model"),c(eN,"href","/docs/transformers/doc-build-test/en/model_doc/hubert#transformers.TFHubertModel"),c(oN,"href","/docs/transformers/doc-build-test/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(tN,"href","/docs/transformers/doc-build-test/en/model_doc/led#transformers.TFLEDModel"),c(rN,"href","/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.TFLongformerModel"),c(aN,"href","/docs/transformers/doc-build-test/en/model_doc/lxmert#transformers.TFLxmertModel"),c(sN,"href","/docs/transformers/doc-build-test/en/model_doc/marian#transformers.TFMarianModel"),c(nN,"href","/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.TFMBartModel"),c(lN,"href","/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(dN,"href","/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.TFMPNetModel"),c(iN,"href","/docs/transformers/doc-build-test/en/model_doc/mt5#transformers.TFMT5Model"),c(cN,"href","/docs/transformers/doc-build-test/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(fN,"href","/docs/transformers/doc-build-test/en/model_doc/pegasus#transformers.TFPegasusModel"),c(mN,"href","/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.TFRemBertModel"),c(gN,"href","/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.TFRobertaModel"),c(hN,"href","/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.TFRoFormerModel"),c(uN,"href","/docs/transformers/doc-build-test/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(pN,"href","/docs/transformers/doc-build-test/en/model_doc/t5#transformers.TFT5Model"),c(_N,"href","/docs/transformers/doc-build-test/en/model_doc/tapas#transformers.TFTapasModel"),c(bN,"href","/docs/transformers/doc-build-test/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(vN,"href","/docs/transformers/doc-build-test/en/model_doc/vit#transformers.TFViTModel"),c(TN,"href","/docs/transformers/doc-build-test/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(FN,"href","/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.TFXLMModel"),c(CN,"href","/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(MN,"href","/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.TFXLNetModel"),c(fo,"class","docstring"),c(ct,"class","docstring"),c(I1,"id","transformers.TFAutoModelForPreTraining"),c(I1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I1,"href","#transformers.TFAutoModelForPreTraining"),c(Wi,"class","relative group"),c(rr,"class","docstring"),c(EN,"href","/docs/transformers/doc-build-test/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(yN,"href","/docs/transformers/doc-build-test/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(wN,"href","/docs/transformers/doc-build-test/en/model_doc/bert#transformers.TFBertForPreTraining"),c(AN,"href","/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(LN,"href","/docs/transformers/doc-build-test/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(BN,"href","/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(xN,"href","/docs/transformers/doc-build-test/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(kN,"href","/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(RN,"href","/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(SN,"href","/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(PN,"href","/docs/transformers/doc-build-test/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c($N,"href","/docs/transformers/doc-build-test/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(IN,"href","/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(jN,"href","/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(NN,"href","/docs/transformers/doc-build-test/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(DN,"href","/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(qN,"href","/docs/transformers/doc-build-test/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(GN,"href","/docs/transformers/doc-build-test/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(ON,"href","/docs/transformers/doc-build-test/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(XN,"href","/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(zN,"href","/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(VN,"href","/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(mo,"class","docstring"),c(ft,"class","docstring"),c(sF,"id","transformers.TFAutoModelForCausalLM"),c(sF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sF,"href","#transformers.TFAutoModelForCausalLM"),c(Ui,"class","relative group"),c(ar,"class","docstring"),c(WN,"href","/docs/transformers/doc-build-test/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(QN,"href","/docs/transformers/doc-build-test/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(HN,"href","/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(UN,"href","/docs/transformers/doc-build-test/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(JN,"href","/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(YN,"href","/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(KN,"href","/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(ZN,"href","/docs/transformers/doc-build-test/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(eD,"href","/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(oD,"href","/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(go,"class","docstring"),c(mt,"class","docstring"),c(pF,"id","transformers.TFAutoModelForImageClassification"),c(pF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pF,"href","#transformers.TFAutoModelForImageClassification"),c(Ki,"class","relative group"),c(sr,"class","docstring"),c(tD,"href","/docs/transformers/doc-build-test/en/model_doc/vit#transformers.TFViTForImageClassification"),c(ho,"class","docstring"),c(gt,"class","docstring"),c(bF,"id","transformers.TFAutoModelForMaskedLM"),c(bF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bF,"href","#transformers.TFAutoModelForMaskedLM"),c(oc,"class","relative group"),c(nr,"class","docstring"),c(rD,"href","/docs/transformers/doc-build-test/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(aD,"href","/docs/transformers/doc-build-test/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(sD,"href","/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(nD,"href","/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(lD,"href","/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(dD,"href","/docs/transformers/doc-build-test/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(iD,"href","/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(cD,"href","/docs/transformers/doc-build-test/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(fD,"href","/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(mD,"href","/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(gD,"href","/docs/transformers/doc-build-test/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(hD,"href","/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(uD,"href","/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(pD,"href","/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(_D,"href","/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(bD,"href","/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(vD,"href","/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(TD,"href","/docs/transformers/doc-build-test/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(FD,"href","/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(CD,"href","/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(uo,"class","docstring"),c(ht,"class","docstring"),c(DF,"id","transformers.TFAutoModelForSeq2SeqLM"),c(DF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DF,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(ac,"class","relative group"),c(lr,"class","docstring"),c(MD,"href","/docs/transformers/doc-build-test/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(ED,"href","/docs/transformers/doc-build-test/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(yD,"href","/docs/transformers/doc-build-test/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(wD,"href","/docs/transformers/doc-build-test/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(AD,"href","/docs/transformers/doc-build-test/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(LD,"href","/docs/transformers/doc-build-test/en/model_doc/marian#transformers.TFMarianMTModel"),c(BD,"href","/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(xD,"href","/docs/transformers/doc-build-test/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(kD,"href","/docs/transformers/doc-build-test/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(RD,"href","/docs/transformers/doc-build-test/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(po,"class","docstring"),c(ut,"class","docstring"),c(JF,"id","transformers.TFAutoModelForSequenceClassification"),c(JF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JF,"href","#transformers.TFAutoModelForSequenceClassification"),c(lc,"class","relative group"),c(dr,"class","docstring"),c(SD,"href","/docs/transformers/doc-build-test/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(PD,"href","/docs/transformers/doc-build-test/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c($D,"href","/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(ID,"href","/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(jD,"href","/docs/transformers/doc-build-test/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(ND,"href","/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(DD,"href","/docs/transformers/doc-build-test/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(qD,"href","/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(GD,"href","/docs/transformers/doc-build-test/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(OD,"href","/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(XD,"href","/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(zD,"href","/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(VD,"href","/docs/transformers/doc-build-test/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(WD,"href","/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(QD,"href","/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(HD,"href","/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(UD,"href","/docs/transformers/doc-build-test/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(JD,"href","/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(YD,"href","/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(KD,"href","/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(ZD,"href","/docs/transformers/doc-build-test/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(eq,"href","/docs/transformers/doc-build-test/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(oq,"href","/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(tq,"href","/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(rq,"href","/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(_o,"class","docstring"),c(pt,"class","docstring"),c(CC,"id","transformers.TFAutoModelForMultipleChoice"),c(CC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CC,"href","#transformers.TFAutoModelForMultipleChoice"),c(cc,"class","relative group"),c(ir,"class","docstring"),c(aq,"href","/docs/transformers/doc-build-test/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(sq,"href","/docs/transformers/doc-build-test/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(nq,"href","/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(lq,"href","/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(dq,"href","/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(iq,"href","/docs/transformers/doc-build-test/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(cq,"href","/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(fq,"href","/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(mq,"href","/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(gq,"href","/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(hq,"href","/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(uq,"href","/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(pq,"href","/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(_q,"href","/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(bq,"href","/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(vq,"href","/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(Tq,"href","/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(bo,"class","docstring"),c(_t,"class","docstring"),c(qC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(qC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(gc,"class","relative group"),c(cr,"class","docstring"),c(Fq,"href","/docs/transformers/doc-build-test/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(vo,"class","docstring"),c(bt,"class","docstring"),c(OC,"id","transformers.TFAutoModelForTokenClassification"),c(OC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OC,"href","#transformers.TFAutoModelForTokenClassification"),c(pc,"class","relative group"),c(fr,"class","docstring"),c(Cq,"href","/docs/transformers/doc-build-test/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(Mq,"href","/docs/transformers/doc-build-test/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(Eq,"href","/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(yq,"href","/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(wq,"href","/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(Aq,"href","/docs/transformers/doc-build-test/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(Lq,"href","/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(Bq,"href","/docs/transformers/doc-build-test/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(xq,"href","/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(kq,"href","/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(Rq,"href","/docs/transformers/doc-build-test/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(Sq,"href","/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(Pq,"href","/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c($q,"href","/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(Iq,"href","/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(jq,"href","/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(Nq,"href","/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(Dq,"href","/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(qq,"href","/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(Gq,"href","/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(To,"class","docstring"),c(vt,"class","docstring"),c(i4,"id","transformers.TFAutoModelForQuestionAnswering"),c(i4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(vc,"class","relative group"),c(mr,"class","docstring"),c(Oq,"href","/docs/transformers/doc-build-test/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(Xq,"href","/docs/transformers/doc-build-test/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(zq,"href","/docs/transformers/doc-build-test/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(Vq,"href","/docs/transformers/doc-build-test/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(Wq,"href","/docs/transformers/doc-build-test/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(Qq,"href","/docs/transformers/doc-build-test/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(Hq,"href","/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(Uq,"href","/docs/transformers/doc-build-test/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(Jq,"href","/docs/transformers/doc-build-test/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(Yq,"href","/docs/transformers/doc-build-test/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(Kq,"href","/docs/transformers/doc-build-test/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(Zq,"href","/docs/transformers/doc-build-test/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(eG,"href","/docs/transformers/doc-build-test/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(oG,"href","/docs/transformers/doc-build-test/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(tG,"href","/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(rG,"href","/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(aG,"href","/docs/transformers/doc-build-test/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(sG,"href","/docs/transformers/doc-build-test/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(nG,"href","/docs/transformers/doc-build-test/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Fo,"class","docstring"),c(Tt,"class","docstring"),c(B4,"id","transformers.TFAutoModelForVision2Seq"),c(B4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B4,"href","#transformers.TFAutoModelForVision2Seq"),c(Cc,"class","relative group"),c(gr,"class","docstring"),c(lG,"href","/docs/transformers/doc-build-test/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Co,"class","docstring"),c(Ft,"class","docstring"),c(k4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(k4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(yc,"class","relative group"),c(hr,"class","docstring"),c(dG,"href","/docs/transformers/doc-build-test/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Mo,"class","docstring"),c(Ct,"class","docstring"),c(S4,"id","transformers.FlaxAutoModel"),c(S4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S4,"href","#transformers.FlaxAutoModel"),c(Lc,"class","relative group"),c(ur,"class","docstring"),c(iG,"href","/docs/transformers/doc-build-test/en/model_doc/albert#transformers.FlaxAlbertModel"),c(cG,"href","/docs/transformers/doc-build-test/en/model_doc/bart#transformers.FlaxBartModel"),c(fG,"href","/docs/transformers/doc-build-test/en/model_doc/beit#transformers.FlaxBeitModel"),c(mG,"href","/docs/transformers/doc-build-test/en/model_doc/bert#transformers.FlaxBertModel"),c(gG,"href","/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(hG,"href","/docs/transformers/doc-build-test/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(uG,"href","/docs/transformers/doc-build-test/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(pG,"href","/docs/transformers/doc-build-test/en/model_doc/clip#transformers.FlaxCLIPModel"),c(_G,"href","/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(bG,"href","/docs/transformers/doc-build-test/en/model_doc/electra#transformers.FlaxElectraModel"),c(vG,"href","/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(TG,"href","/docs/transformers/doc-build-test/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(FG,"href","/docs/transformers/doc-build-test/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(CG,"href","/docs/transformers/doc-build-test/en/model_doc/marian#transformers.FlaxMarianModel"),c(MG,"href","/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.FlaxMBartModel"),c(EG,"href","/docs/transformers/doc-build-test/en/model_doc/mt5#transformers.FlaxMT5Model"),c(yG,"href","/docs/transformers/doc-build-test/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(wG,"href","/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(AG,"href","/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(LG,"href","/docs/transformers/doc-build-test/en/model_doc/t5#transformers.FlaxT5Model"),c(BG,"href","/docs/transformers/doc-build-test/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(xG,"href","/docs/transformers/doc-build-test/en/model_doc/vit#transformers.FlaxViTModel"),c(kG,"href","/docs/transformers/doc-build-test/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(RG,"href","/docs/transformers/doc-build-test/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(Eo,"class","docstring"),c(Mt,"class","docstring"),c(aM,"id","transformers.FlaxAutoModelForCausalLM"),c(aM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aM,"href","#transformers.FlaxAutoModelForCausalLM"),c(kc,"class","relative group"),c(pr,"class","docstring"),c(SG,"href","/docs/transformers/doc-build-test/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(PG,"href","/docs/transformers/doc-build-test/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c($G,"href","/docs/transformers/doc-build-test/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(IG,"href","/docs/transformers/doc-build-test/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(yo,"class","docstring"),c(Et,"class","docstring"),c(iM,"id","transformers.FlaxAutoModelForPreTraining"),c(iM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iM,"href","#transformers.FlaxAutoModelForPreTraining"),c(Pc,"class","relative group"),c(_r,"class","docstring"),c(jG,"href","/docs/transformers/doc-build-test/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(NG,"href","/docs/transformers/doc-build-test/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(DG,"href","/docs/transformers/doc-build-test/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(qG,"href","/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(GG,"href","/docs/transformers/doc-build-test/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(OG,"href","/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(XG,"href","/docs/transformers/doc-build-test/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(zG,"href","/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(VG,"href","/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(WG,"href","/docs/transformers/doc-build-test/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(QG,"href","/docs/transformers/doc-build-test/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(wo,"class","docstring"),c(yt,"class","docstring"),c(FM,"id","transformers.FlaxAutoModelForMaskedLM"),c(FM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FM,"href","#transformers.FlaxAutoModelForMaskedLM"),c(jc,"class","relative group"),c(br,"class","docstring"),c(HG,"href","/docs/transformers/doc-build-test/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(UG,"href","/docs/transformers/doc-build-test/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(JG,"href","/docs/transformers/doc-build-test/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(YG,"href","/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(KG,"href","/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(ZG,"href","/docs/transformers/doc-build-test/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(eO,"href","/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(oO,"href","/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(tO,"href","/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Ao,"class","docstring"),c(wt,"class","docstring"),c(kM,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(kM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kM,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(qc,"class","relative group"),c(vr,"class","docstring"),c(rO,"href","/docs/transformers/doc-build-test/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(aO,"href","/docs/transformers/doc-build-test/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(sO,"href","/docs/transformers/doc-build-test/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(nO,"href","/docs/transformers/doc-build-test/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(lO,"href","/docs/transformers/doc-build-test/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(dO,"href","/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(iO,"href","/docs/transformers/doc-build-test/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(cO,"href","/docs/transformers/doc-build-test/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(fO,"href","/docs/transformers/doc-build-test/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Lo,"class","docstring"),c(At,"class","docstring"),c(GM,"id","transformers.FlaxAutoModelForSequenceClassification"),c(GM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GM,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(Tr,"class","docstring"),c(mO,"href","/docs/transformers/doc-build-test/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(gO,"href","/docs/transformers/doc-build-test/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(hO,"href","/docs/transformers/doc-build-test/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(uO,"href","/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(pO,"href","/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(_O,"href","/docs/transformers/doc-build-test/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(bO,"href","/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(vO,"href","/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(TO,"href","/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Bo,"class","docstring"),c(Lt,"class","docstring"),c(YM,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(YM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YM,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Wc,"class","relative group"),c(Fr,"class","docstring"),c(FO,"href","/docs/transformers/doc-build-test/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(CO,"href","/docs/transformers/doc-build-test/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(MO,"href","/docs/transformers/doc-build-test/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(EO,"href","/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(yO,"href","/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(wO,"href","/docs/transformers/doc-build-test/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(AO,"href","/docs/transformers/doc-build-test/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(LO,"href","/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(BO,"href","/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(xo,"class","docstring"),c(Bt,"class","docstring"),c(lE,"id","transformers.FlaxAutoModelForTokenClassification"),c(lE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lE,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Uc,"class","relative group"),c(Cr,"class","docstring"),c(xO,"href","/docs/transformers/doc-build-test/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(kO,"href","/docs/transformers/doc-build-test/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(RO,"href","/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(SO,"href","/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(PO,"href","/docs/transformers/doc-build-test/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c($O,"href","/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(IO,"href","/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(ko,"class","docstring"),c(xt,"class","docstring"),c(uE,"id","transformers.FlaxAutoModelForMultipleChoice"),c(uE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uE,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Kc,"class","relative group"),c(Mr,"class","docstring"),c(jO,"href","/docs/transformers/doc-build-test/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(NO,"href","/docs/transformers/doc-build-test/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(DO,"href","/docs/transformers/doc-build-test/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(qO,"href","/docs/transformers/doc-build-test/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(GO,"href","/docs/transformers/doc-build-test/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(OO,"href","/docs/transformers/doc-build-test/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(XO,"href","/docs/transformers/doc-build-test/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Ro,"class","docstring"),c(kt,"class","docstring"),c(ME,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(ME,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ME,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(of,"class","relative group"),c(Er,"class","docstring"),c(zO,"href","/docs/transformers/doc-build-test/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(So,"class","docstring"),c(Rt,"class","docstring"),c(yE,"id","transformers.FlaxAutoModelForImageClassification"),c(yE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yE,"href","#transformers.FlaxAutoModelForImageClassification"),c(af,"class","relative group"),c(yr,"class","docstring"),c(VO,"href","/docs/transformers/doc-build-test/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(WO,"href","/docs/transformers/doc-build-test/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Po,"class","docstring"),c(St,"class","docstring"),c(LE,"id","transformers.FlaxAutoModelForVision2Seq"),c(LE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LE,"href","#transformers.FlaxAutoModelForVision2Seq"),c(lf,"class","relative group"),c(wr,"class","docstring"),c(QO,"href","/docs/transformers/doc-build-test/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c($o,"class","docstring"),c(Pt,"class","docstring")},m(i,_){e(document.head,J),b(i,Ae,_),b(i,le,_),e(le,me),e(me,oo),g(ce,oo,null),e(le,_e),e(le,No),e(No,bd),b(i,mf,_),b(i,ta,_),e(ta,vd),e(ta,Td),e(Td,A3),e(ta,gf),b(i,Ee,_),b(i,no,_),e(no,Fd),e(no,Ls),e(Ls,L3),e(no,Bs),e(no,xs),e(xs,B3),e(no,Cd),e(no,ks),e(ks,x3),e(no,Md),b(i,hf,_),g(ka,i,_),b(i,lo,_),b(i,ge,_),e(ge,r7),e(ge,Ed),e(Ed,a7),e(ge,s7),b(i,Do,_),b(i,Ra,_),e(Ra,n7),e(Ra,uf),e(uf,l7),e(Ra,vBe),b(i,uLe,_),b(i,yd,_),e(yd,pf),e(pf,jz),g(k3,jz,null),e(yd,TBe),e(yd,Nz),e(Nz,FBe),b(i,pLe,_),b(i,Rs,_),e(Rs,CBe),e(Rs,Dz),e(Dz,MBe),e(Rs,EBe),e(Rs,qz),e(qz,yBe),e(Rs,wBe),b(i,_Le,_),g(R3,i,_),b(i,bLe,_),b(i,d7,_),e(d7,ABe),b(i,vLe,_),g(_f,i,_),b(i,TLe,_),b(i,wd,_),e(wd,bf),e(bf,Gz),g(S3,Gz,null),e(wd,LBe),e(wd,Oz),e(Oz,BBe),b(i,FLe,_),b(i,qo,_),g(P3,qo,null),e(qo,xBe),e(qo,$3),e($3,kBe),e($3,i7),e(i7,RBe),e($3,SBe),e(qo,PBe),e(qo,I3),e(I3,$Be),e(I3,Xz),e(Xz,IBe),e(I3,jBe),e(qo,NBe),e(qo,io),g(j3,io,null),e(io,DBe),e(io,zz),e(zz,qBe),e(io,GBe),e(io,Ad),e(Ad,OBe),e(Ad,Vz),e(Vz,XBe),e(Ad,zBe),e(Ad,Wz),e(Wz,VBe),e(Ad,WBe),e(io,QBe),e(io,v),e(v,vf),e(vf,Qz),e(Qz,HBe),e(vf,UBe),e(vf,c7),e(c7,JBe),e(vf,YBe),e(v,KBe),e(v,Tf),e(Tf,Hz),e(Hz,ZBe),e(Tf,exe),e(Tf,f7),e(f7,oxe),e(Tf,txe),e(v,rxe),e(v,Ff),e(Ff,Uz),e(Uz,axe),e(Ff,sxe),e(Ff,m7),e(m7,nxe),e(Ff,lxe),e(v,dxe),e(v,Cf),e(Cf,Jz),e(Jz,ixe),e(Cf,cxe),e(Cf,g7),e(g7,fxe),e(Cf,mxe),e(v,gxe),e(v,Mf),e(Mf,Yz),e(Yz,hxe),e(Mf,uxe),e(Mf,h7),e(h7,pxe),e(Mf,_xe),e(v,bxe),e(v,Ef),e(Ef,Kz),e(Kz,vxe),e(Ef,Txe),e(Ef,u7),e(u7,Fxe),e(Ef,Cxe),e(v,Mxe),e(v,yf),e(yf,Zz),e(Zz,Exe),e(yf,yxe),e(yf,p7),e(p7,wxe),e(yf,Axe),e(v,Lxe),e(v,wf),e(wf,eV),e(eV,Bxe),e(wf,xxe),e(wf,_7),e(_7,kxe),e(wf,Rxe),e(v,Sxe),e(v,Af),e(Af,oV),e(oV,Pxe),e(Af,$xe),e(Af,b7),e(b7,Ixe),e(Af,jxe),e(v,Nxe),e(v,Lf),e(Lf,tV),e(tV,Dxe),e(Lf,qxe),e(Lf,v7),e(v7,Gxe),e(Lf,Oxe),e(v,Xxe),e(v,Bf),e(Bf,rV),e(rV,zxe),e(Bf,Vxe),e(Bf,T7),e(T7,Wxe),e(Bf,Qxe),e(v,Hxe),e(v,xf),e(xf,aV),e(aV,Uxe),e(xf,Jxe),e(xf,F7),e(F7,Yxe),e(xf,Kxe),e(v,Zxe),e(v,kf),e(kf,sV),e(sV,eke),e(kf,oke),e(kf,C7),e(C7,tke),e(kf,rke),e(v,ake),e(v,Rf),e(Rf,nV),e(nV,ske),e(Rf,nke),e(Rf,M7),e(M7,lke),e(Rf,dke),e(v,ike),e(v,Sf),e(Sf,lV),e(lV,cke),e(Sf,fke),e(Sf,E7),e(E7,mke),e(Sf,gke),e(v,hke),e(v,Pf),e(Pf,dV),e(dV,uke),e(Pf,pke),e(Pf,y7),e(y7,_ke),e(Pf,bke),e(v,vke),e(v,$f),e($f,iV),e(iV,Tke),e($f,Fke),e($f,w7),e(w7,Cke),e($f,Mke),e(v,Eke),e(v,If),e(If,cV),e(cV,yke),e(If,wke),e(If,A7),e(A7,Ake),e(If,Lke),e(v,Bke),e(v,jf),e(jf,fV),e(fV,xke),e(jf,kke),e(jf,L7),e(L7,Rke),e(jf,Ske),e(v,Pke),e(v,Nf),e(Nf,mV),e(mV,$ke),e(Nf,Ike),e(Nf,B7),e(B7,jke),e(Nf,Nke),e(v,Dke),e(v,Df),e(Df,gV),e(gV,qke),e(Df,Gke),e(Df,x7),e(x7,Oke),e(Df,Xke),e(v,zke),e(v,qf),e(qf,hV),e(hV,Vke),e(qf,Wke),e(qf,k7),e(k7,Qke),e(qf,Hke),e(v,Uke),e(v,Gf),e(Gf,uV),e(uV,Jke),e(Gf,Yke),e(Gf,R7),e(R7,Kke),e(Gf,Zke),e(v,eRe),e(v,Of),e(Of,pV),e(pV,oRe),e(Of,tRe),e(Of,S7),e(S7,rRe),e(Of,aRe),e(v,sRe),e(v,Xf),e(Xf,_V),e(_V,nRe),e(Xf,lRe),e(Xf,P7),e(P7,dRe),e(Xf,iRe),e(v,cRe),e(v,zf),e(zf,bV),e(bV,fRe),e(zf,mRe),e(zf,$7),e($7,gRe),e(zf,hRe),e(v,uRe),e(v,Vf),e(Vf,vV),e(vV,pRe),e(Vf,_Re),e(Vf,I7),e(I7,bRe),e(Vf,vRe),e(v,TRe),e(v,Wf),e(Wf,TV),e(TV,FRe),e(Wf,CRe),e(Wf,j7),e(j7,MRe),e(Wf,ERe),e(v,yRe),e(v,Qf),e(Qf,FV),e(FV,wRe),e(Qf,ARe),e(Qf,N7),e(N7,LRe),e(Qf,BRe),e(v,xRe),e(v,Hf),e(Hf,CV),e(CV,kRe),e(Hf,RRe),e(Hf,D7),e(D7,SRe),e(Hf,PRe),e(v,$Re),e(v,Uf),e(Uf,MV),e(MV,IRe),e(Uf,jRe),e(Uf,q7),e(q7,NRe),e(Uf,DRe),e(v,qRe),e(v,Jf),e(Jf,EV),e(EV,GRe),e(Jf,ORe),e(Jf,G7),e(G7,XRe),e(Jf,zRe),e(v,VRe),e(v,Yf),e(Yf,yV),e(yV,WRe),e(Yf,QRe),e(Yf,O7),e(O7,HRe),e(Yf,URe),e(v,JRe),e(v,Kf),e(Kf,wV),e(wV,YRe),e(Kf,KRe),e(Kf,X7),e(X7,ZRe),e(Kf,eSe),e(v,oSe),e(v,Zf),e(Zf,AV),e(AV,tSe),e(Zf,rSe),e(Zf,z7),e(z7,aSe),e(Zf,sSe),e(v,nSe),e(v,em),e(em,LV),e(LV,lSe),e(em,dSe),e(em,V7),e(V7,iSe),e(em,cSe),e(v,fSe),e(v,om),e(om,BV),e(BV,mSe),e(om,gSe),e(om,W7),e(W7,hSe),e(om,uSe),e(v,pSe),e(v,tm),e(tm,xV),e(xV,_Se),e(tm,bSe),e(tm,Q7),e(Q7,vSe),e(tm,TSe),e(v,FSe),e(v,rm),e(rm,kV),e(kV,CSe),e(rm,MSe),e(rm,H7),e(H7,ESe),e(rm,ySe),e(v,wSe),e(v,am),e(am,RV),e(RV,ASe),e(am,LSe),e(am,U7),e(U7,BSe),e(am,xSe),e(v,kSe),e(v,sm),e(sm,SV),e(SV,RSe),e(sm,SSe),e(sm,J7),e(J7,PSe),e(sm,$Se),e(v,ISe),e(v,nm),e(nm,PV),e(PV,jSe),e(nm,NSe),e(nm,Y7),e(Y7,DSe),e(nm,qSe),e(v,GSe),e(v,lm),e(lm,$V),e($V,OSe),e(lm,XSe),e(lm,K7),e(K7,zSe),e(lm,VSe),e(v,WSe),e(v,dm),e(dm,IV),e(IV,QSe),e(dm,HSe),e(dm,Z7),e(Z7,USe),e(dm,JSe),e(v,YSe),e(v,im),e(im,jV),e(jV,KSe),e(im,ZSe),e(im,e8),e(e8,ePe),e(im,oPe),e(v,tPe),e(v,cm),e(cm,NV),e(NV,rPe),e(cm,aPe),e(cm,o8),e(o8,sPe),e(cm,nPe),e(v,lPe),e(v,fm),e(fm,DV),e(DV,dPe),e(fm,iPe),e(fm,t8),e(t8,cPe),e(fm,fPe),e(v,mPe),e(v,mm),e(mm,qV),e(qV,gPe),e(mm,hPe),e(mm,r8),e(r8,uPe),e(mm,pPe),e(v,_Pe),e(v,gm),e(gm,GV),e(GV,bPe),e(gm,vPe),e(gm,a8),e(a8,TPe),e(gm,FPe),e(v,CPe),e(v,hm),e(hm,OV),e(OV,MPe),e(hm,EPe),e(hm,s8),e(s8,yPe),e(hm,wPe),e(v,APe),e(v,um),e(um,XV),e(XV,LPe),e(um,BPe),e(um,n8),e(n8,xPe),e(um,kPe),e(v,RPe),e(v,pm),e(pm,zV),e(zV,SPe),e(pm,PPe),e(pm,l8),e(l8,$Pe),e(pm,IPe),e(v,jPe),e(v,_m),e(_m,VV),e(VV,NPe),e(_m,DPe),e(_m,d8),e(d8,qPe),e(_m,GPe),e(v,OPe),e(v,bm),e(bm,WV),e(WV,XPe),e(bm,zPe),e(bm,i8),e(i8,VPe),e(bm,WPe),e(v,QPe),e(v,vm),e(vm,QV),e(QV,HPe),e(vm,UPe),e(vm,c8),e(c8,JPe),e(vm,YPe),e(v,KPe),e(v,Tm),e(Tm,HV),e(HV,ZPe),e(Tm,e$e),e(Tm,f8),e(f8,o$e),e(Tm,t$e),e(v,r$e),e(v,Fm),e(Fm,UV),e(UV,a$e),e(Fm,s$e),e(Fm,m8),e(m8,n$e),e(Fm,l$e),e(v,d$e),e(v,Cm),e(Cm,JV),e(JV,i$e),e(Cm,c$e),e(Cm,g8),e(g8,f$e),e(Cm,m$e),e(v,g$e),e(v,Mm),e(Mm,YV),e(YV,h$e),e(Mm,u$e),e(Mm,h8),e(h8,p$e),e(Mm,_$e),e(v,b$e),e(v,Em),e(Em,KV),e(KV,v$e),e(Em,T$e),e(Em,u8),e(u8,F$e),e(Em,C$e),e(v,M$e),e(v,ym),e(ym,ZV),e(ZV,E$e),e(ym,y$e),e(ym,p8),e(p8,w$e),e(ym,A$e),e(v,L$e),e(v,wm),e(wm,eW),e(eW,B$e),e(wm,x$e),e(wm,_8),e(_8,k$e),e(wm,R$e),e(v,S$e),e(v,Am),e(Am,oW),e(oW,P$e),e(Am,$$e),e(Am,b8),e(b8,I$e),e(Am,j$e),e(v,N$e),e(v,Lm),e(Lm,tW),e(tW,D$e),e(Lm,q$e),e(Lm,v8),e(v8,G$e),e(Lm,O$e),e(v,X$e),e(v,Bm),e(Bm,rW),e(rW,z$e),e(Bm,V$e),e(Bm,T8),e(T8,W$e),e(Bm,Q$e),e(v,H$e),e(v,xm),e(xm,aW),e(aW,U$e),e(xm,J$e),e(xm,F8),e(F8,Y$e),e(xm,K$e),e(v,Z$e),e(v,km),e(km,sW),e(sW,eIe),e(km,oIe),e(km,C8),e(C8,tIe),e(km,rIe),e(v,aIe),e(v,Rm),e(Rm,nW),e(nW,sIe),e(Rm,nIe),e(Rm,M8),e(M8,lIe),e(Rm,dIe),e(v,iIe),e(v,Sm),e(Sm,lW),e(lW,cIe),e(Sm,fIe),e(Sm,E8),e(E8,mIe),e(Sm,gIe),e(v,hIe),e(v,Pm),e(Pm,dW),e(dW,uIe),e(Pm,pIe),e(Pm,y8),e(y8,_Ie),e(Pm,bIe),e(v,vIe),e(v,$m),e($m,iW),e(iW,TIe),e($m,FIe),e($m,w8),e(w8,CIe),e($m,MIe),e(v,EIe),e(v,Im),e(Im,cW),e(cW,yIe),e(Im,wIe),e(Im,A8),e(A8,AIe),e(Im,LIe),e(v,BIe),e(v,jm),e(jm,fW),e(fW,xIe),e(jm,kIe),e(jm,L8),e(L8,RIe),e(jm,SIe),e(v,PIe),e(v,Nm),e(Nm,mW),e(mW,$Ie),e(Nm,IIe),e(Nm,B8),e(B8,jIe),e(Nm,NIe),e(v,DIe),e(v,Dm),e(Dm,gW),e(gW,qIe),e(Dm,GIe),e(Dm,x8),e(x8,OIe),e(Dm,XIe),e(v,zIe),e(v,qm),e(qm,hW),e(hW,VIe),e(qm,WIe),e(qm,k8),e(k8,QIe),e(qm,HIe),e(v,UIe),e(v,Gm),e(Gm,uW),e(uW,JIe),e(Gm,YIe),e(Gm,R8),e(R8,KIe),e(Gm,ZIe),e(v,eje),e(v,Om),e(Om,pW),e(pW,oje),e(Om,tje),e(Om,S8),e(S8,rje),e(Om,aje),e(v,sje),e(v,Xm),e(Xm,_W),e(_W,nje),e(Xm,lje),e(Xm,P8),e(P8,dje),e(Xm,ije),e(v,cje),e(v,zm),e(zm,bW),e(bW,fje),e(zm,mje),e(zm,$8),e($8,gje),e(zm,hje),e(v,uje),e(v,Vm),e(Vm,vW),e(vW,pje),e(Vm,_je),e(Vm,I8),e(I8,bje),e(Vm,vje),e(v,Tje),e(v,Wm),e(Wm,TW),e(TW,Fje),e(Wm,Cje),e(Wm,j8),e(j8,Mje),e(Wm,Eje),e(v,yje),e(v,Qm),e(Qm,FW),e(FW,wje),e(Qm,Aje),e(Qm,N8),e(N8,Lje),e(Qm,Bje),e(v,xje),e(v,Hm),e(Hm,CW),e(CW,kje),e(Hm,Rje),e(Hm,D8),e(D8,Sje),e(Hm,Pje),e(v,$je),e(v,Um),e(Um,MW),e(MW,Ije),e(Um,jje),e(Um,q8),e(q8,Nje),e(Um,Dje),e(v,qje),e(v,Jm),e(Jm,EW),e(EW,Gje),e(Jm,Oje),e(Jm,G8),e(G8,Xje),e(Jm,zje),e(v,Vje),e(v,Ym),e(Ym,yW),e(yW,Wje),e(Ym,Qje),e(Ym,O8),e(O8,Hje),e(Ym,Uje),e(v,Jje),e(v,Km),e(Km,wW),e(wW,Yje),e(Km,Kje),e(Km,X8),e(X8,Zje),e(Km,eNe),e(v,oNe),e(v,Zm),e(Zm,AW),e(AW,tNe),e(Zm,rNe),e(Zm,z8),e(z8,aNe),e(Zm,sNe),e(io,nNe),e(io,LW),e(LW,lNe),e(io,dNe),g(N3,io,null),e(qo,iNe),e(qo,eg),g(D3,eg,null),e(eg,cNe),e(eg,BW),e(BW,fNe),b(i,CLe,_),b(i,Ld,_),e(Ld,og),e(og,xW),g(q3,xW,null),e(Ld,mNe),e(Ld,kW),e(kW,gNe),b(i,MLe,_),b(i,Go,_),g(G3,Go,null),e(Go,hNe),e(Go,O3),e(O3,uNe),e(O3,V8),e(V8,pNe),e(O3,_Ne),e(Go,bNe),e(Go,X3),e(X3,vNe),e(X3,RW),e(RW,TNe),e(X3,FNe),e(Go,CNe),e(Go,co),g(z3,co,null),e(co,MNe),e(co,SW),e(SW,ENe),e(co,yNe),e(co,Sa),e(Sa,wNe),e(Sa,PW),e(PW,ANe),e(Sa,LNe),e(Sa,$W),e($W,BNe),e(Sa,xNe),e(Sa,IW),e(IW,kNe),e(Sa,RNe),e(co,SNe),e(co,M),e(M,Ss),e(Ss,jW),e(jW,PNe),e(Ss,$Ne),e(Ss,W8),e(W8,INe),e(Ss,jNe),e(Ss,Q8),e(Q8,NNe),e(Ss,DNe),e(M,qNe),e(M,Ps),e(Ps,NW),e(NW,GNe),e(Ps,ONe),e(Ps,H8),e(H8,XNe),e(Ps,zNe),e(Ps,U8),e(U8,VNe),e(Ps,WNe),e(M,QNe),e(M,$s),e($s,DW),e(DW,HNe),e($s,UNe),e($s,J8),e(J8,JNe),e($s,YNe),e($s,Y8),e(Y8,KNe),e($s,ZNe),e(M,eDe),e(M,tg),e(tg,qW),e(qW,oDe),e(tg,tDe),e(tg,K8),e(K8,rDe),e(tg,aDe),e(M,sDe),e(M,Is),e(Is,GW),e(GW,nDe),e(Is,lDe),e(Is,Z8),e(Z8,dDe),e(Is,iDe),e(Is,e9),e(e9,cDe),e(Is,fDe),e(M,mDe),e(M,rg),e(rg,OW),e(OW,gDe),e(rg,hDe),e(rg,o9),e(o9,uDe),e(rg,pDe),e(M,_De),e(M,ag),e(ag,XW),e(XW,bDe),e(ag,vDe),e(ag,t9),e(t9,TDe),e(ag,FDe),e(M,CDe),e(M,sg),e(sg,zW),e(zW,MDe),e(sg,EDe),e(sg,r9),e(r9,yDe),e(sg,wDe),e(M,ADe),e(M,js),e(js,VW),e(VW,LDe),e(js,BDe),e(js,a9),e(a9,xDe),e(js,kDe),e(js,s9),e(s9,RDe),e(js,SDe),e(M,PDe),e(M,Ns),e(Ns,WW),e(WW,$De),e(Ns,IDe),e(Ns,n9),e(n9,jDe),e(Ns,NDe),e(Ns,l9),e(l9,DDe),e(Ns,qDe),e(M,GDe),e(M,Ds),e(Ds,QW),e(QW,ODe),e(Ds,XDe),e(Ds,d9),e(d9,zDe),e(Ds,VDe),e(Ds,i9),e(i9,WDe),e(Ds,QDe),e(M,HDe),e(M,ng),e(ng,HW),e(HW,UDe),e(ng,JDe),e(ng,c9),e(c9,YDe),e(ng,KDe),e(M,ZDe),e(M,lg),e(lg,UW),e(UW,eqe),e(lg,oqe),e(lg,f9),e(f9,tqe),e(lg,rqe),e(M,aqe),e(M,qs),e(qs,JW),e(JW,sqe),e(qs,nqe),e(qs,m9),e(m9,lqe),e(qs,dqe),e(qs,g9),e(g9,iqe),e(qs,cqe),e(M,fqe),e(M,dg),e(dg,YW),e(YW,mqe),e(dg,gqe),e(dg,h9),e(h9,hqe),e(dg,uqe),e(M,pqe),e(M,Gs),e(Gs,KW),e(KW,_qe),e(Gs,bqe),e(Gs,u9),e(u9,vqe),e(Gs,Tqe),e(Gs,p9),e(p9,Fqe),e(Gs,Cqe),e(M,Mqe),e(M,Os),e(Os,ZW),e(ZW,Eqe),e(Os,yqe),e(Os,_9),e(_9,wqe),e(Os,Aqe),e(Os,b9),e(b9,Lqe),e(Os,Bqe),e(M,xqe),e(M,Xs),e(Xs,eQ),e(eQ,kqe),e(Xs,Rqe),e(Xs,v9),e(v9,Sqe),e(Xs,Pqe),e(Xs,oQ),e(oQ,$qe),e(Xs,Iqe),e(M,jqe),e(M,ig),e(ig,tQ),e(tQ,Nqe),e(ig,Dqe),e(ig,T9),e(T9,qqe),e(ig,Gqe),e(M,Oqe),e(M,zs),e(zs,rQ),e(rQ,Xqe),e(zs,zqe),e(zs,F9),e(F9,Vqe),e(zs,Wqe),e(zs,C9),e(C9,Qqe),e(zs,Hqe),e(M,Uqe),e(M,cg),e(cg,aQ),e(aQ,Jqe),e(cg,Yqe),e(cg,M9),e(M9,Kqe),e(cg,Zqe),e(M,eGe),e(M,Vs),e(Vs,sQ),e(sQ,oGe),e(Vs,tGe),e(Vs,E9),e(E9,rGe),e(Vs,aGe),e(Vs,y9),e(y9,sGe),e(Vs,nGe),e(M,lGe),e(M,Ws),e(Ws,nQ),e(nQ,dGe),e(Ws,iGe),e(Ws,w9),e(w9,cGe),e(Ws,fGe),e(Ws,A9),e(A9,mGe),e(Ws,gGe),e(M,hGe),e(M,Qs),e(Qs,lQ),e(lQ,uGe),e(Qs,pGe),e(Qs,L9),e(L9,_Ge),e(Qs,bGe),e(Qs,B9),e(B9,vGe),e(Qs,TGe),e(M,FGe),e(M,fg),e(fg,dQ),e(dQ,CGe),e(fg,MGe),e(fg,x9),e(x9,EGe),e(fg,yGe),e(M,wGe),e(M,Hs),e(Hs,iQ),e(iQ,AGe),e(Hs,LGe),e(Hs,k9),e(k9,BGe),e(Hs,xGe),e(Hs,R9),e(R9,kGe),e(Hs,RGe),e(M,SGe),e(M,mg),e(mg,cQ),e(cQ,PGe),e(mg,$Ge),e(mg,S9),e(S9,IGe),e(mg,jGe),e(M,NGe),e(M,Us),e(Us,fQ),e(fQ,DGe),e(Us,qGe),e(Us,P9),e(P9,GGe),e(Us,OGe),e(Us,$9),e($9,XGe),e(Us,zGe),e(M,VGe),e(M,Js),e(Js,mQ),e(mQ,WGe),e(Js,QGe),e(Js,I9),e(I9,HGe),e(Js,UGe),e(Js,j9),e(j9,JGe),e(Js,YGe),e(M,KGe),e(M,Ys),e(Ys,gQ),e(gQ,ZGe),e(Ys,eOe),e(Ys,N9),e(N9,oOe),e(Ys,tOe),e(Ys,D9),e(D9,rOe),e(Ys,aOe),e(M,sOe),e(M,Ks),e(Ks,hQ),e(hQ,nOe),e(Ks,lOe),e(Ks,q9),e(q9,dOe),e(Ks,iOe),e(Ks,G9),e(G9,cOe),e(Ks,fOe),e(M,mOe),e(M,gg),e(gg,uQ),e(uQ,gOe),e(gg,hOe),e(gg,O9),e(O9,uOe),e(gg,pOe),e(M,_Oe),e(M,Zs),e(Zs,pQ),e(pQ,bOe),e(Zs,vOe),e(Zs,X9),e(X9,TOe),e(Zs,FOe),e(Zs,z9),e(z9,COe),e(Zs,MOe),e(M,EOe),e(M,en),e(en,_Q),e(_Q,yOe),e(en,wOe),e(en,V9),e(V9,AOe),e(en,LOe),e(en,W9),e(W9,BOe),e(en,xOe),e(M,kOe),e(M,on),e(on,bQ),e(bQ,ROe),e(on,SOe),e(on,Q9),e(Q9,POe),e(on,$Oe),e(on,H9),e(H9,IOe),e(on,jOe),e(M,NOe),e(M,tn),e(tn,vQ),e(vQ,DOe),e(tn,qOe),e(tn,U9),e(U9,GOe),e(tn,OOe),e(tn,J9),e(J9,XOe),e(tn,zOe),e(M,VOe),e(M,rn),e(rn,TQ),e(TQ,WOe),e(rn,QOe),e(rn,Y9),e(Y9,HOe),e(rn,UOe),e(rn,K9),e(K9,JOe),e(rn,YOe),e(M,KOe),e(M,an),e(an,FQ),e(FQ,ZOe),e(an,eXe),e(an,Z9),e(Z9,oXe),e(an,tXe),e(an,eB),e(eB,rXe),e(an,aXe),e(M,sXe),e(M,hg),e(hg,CQ),e(CQ,nXe),e(hg,lXe),e(hg,oB),e(oB,dXe),e(hg,iXe),e(M,cXe),e(M,sn),e(sn,MQ),e(MQ,fXe),e(sn,mXe),e(sn,tB),e(tB,gXe),e(sn,hXe),e(sn,rB),e(rB,uXe),e(sn,pXe),e(M,_Xe),e(M,ug),e(ug,EQ),e(EQ,bXe),e(ug,vXe),e(ug,aB),e(aB,TXe),e(ug,FXe),e(M,CXe),e(M,pg),e(pg,yQ),e(yQ,MXe),e(pg,EXe),e(pg,sB),e(sB,yXe),e(pg,wXe),e(M,AXe),e(M,nn),e(nn,wQ),e(wQ,LXe),e(nn,BXe),e(nn,nB),e(nB,xXe),e(nn,kXe),e(nn,lB),e(lB,RXe),e(nn,SXe),e(M,PXe),e(M,ln),e(ln,AQ),e(AQ,$Xe),e(ln,IXe),e(ln,dB),e(dB,jXe),e(ln,NXe),e(ln,iB),e(iB,DXe),e(ln,qXe),e(M,GXe),e(M,_g),e(_g,LQ),e(LQ,OXe),e(_g,XXe),e(_g,cB),e(cB,zXe),e(_g,VXe),e(M,WXe),e(M,dn),e(dn,BQ),e(BQ,QXe),e(dn,HXe),e(dn,fB),e(fB,UXe),e(dn,JXe),e(dn,mB),e(mB,YXe),e(dn,KXe),e(M,ZXe),e(M,cn),e(cn,xQ),e(xQ,eze),e(cn,oze),e(cn,gB),e(gB,tze),e(cn,rze),e(cn,hB),e(hB,aze),e(cn,sze),e(M,nze),e(M,fn),e(fn,kQ),e(kQ,lze),e(fn,dze),e(fn,uB),e(uB,ize),e(fn,cze),e(fn,pB),e(pB,fze),e(fn,mze),e(M,gze),e(M,mn),e(mn,RQ),e(RQ,hze),e(mn,uze),e(mn,_B),e(_B,pze),e(mn,_ze),e(mn,bB),e(bB,bze),e(mn,vze),e(M,Tze),e(M,gn),e(gn,SQ),e(SQ,Fze),e(gn,Cze),e(gn,vB),e(vB,Mze),e(gn,Eze),e(gn,TB),e(TB,yze),e(gn,wze),e(M,Aze),e(M,bg),e(bg,PQ),e(PQ,Lze),e(bg,Bze),e(bg,FB),e(FB,xze),e(bg,kze),e(M,Rze),e(M,vg),e(vg,$Q),e($Q,Sze),e(vg,Pze),e(vg,CB),e(CB,$ze),e(vg,Ize),e(M,jze),e(M,Tg),e(Tg,IQ),e(IQ,Nze),e(Tg,Dze),e(Tg,MB),e(MB,qze),e(Tg,Gze),e(M,Oze),e(M,hn),e(hn,jQ),e(jQ,Xze),e(hn,zze),e(hn,EB),e(EB,Vze),e(hn,Wze),e(hn,yB),e(yB,Qze),e(hn,Hze),e(M,Uze),e(M,Fg),e(Fg,NQ),e(NQ,Jze),e(Fg,Yze),e(Fg,wB),e(wB,Kze),e(Fg,Zze),e(M,eVe),e(M,un),e(un,DQ),e(DQ,oVe),e(un,tVe),e(un,AB),e(AB,rVe),e(un,aVe),e(un,LB),e(LB,sVe),e(un,nVe),e(M,lVe),e(M,pn),e(pn,qQ),e(qQ,dVe),e(pn,iVe),e(pn,BB),e(BB,cVe),e(pn,fVe),e(pn,xB),e(xB,mVe),e(pn,gVe),e(M,hVe),e(M,_n),e(_n,GQ),e(GQ,uVe),e(_n,pVe),e(_n,kB),e(kB,_Ve),e(_n,bVe),e(_n,RB),e(RB,vVe),e(_n,TVe),e(M,FVe),e(M,bn),e(bn,OQ),e(OQ,CVe),e(bn,MVe),e(bn,SB),e(SB,EVe),e(bn,yVe),e(bn,PB),e(PB,wVe),e(bn,AVe),e(M,LVe),e(M,vn),e(vn,XQ),e(XQ,BVe),e(vn,xVe),e(vn,$B),e($B,kVe),e(vn,RVe),e(vn,IB),e(IB,SVe),e(vn,PVe),e(M,$Ve),e(M,Cg),e(Cg,zQ),e(zQ,IVe),e(Cg,jVe),e(Cg,jB),e(jB,NVe),e(Cg,DVe),e(M,qVe),e(M,Mg),e(Mg,VQ),e(VQ,GVe),e(Mg,OVe),e(Mg,NB),e(NB,XVe),e(Mg,zVe),e(M,VVe),e(M,Tn),e(Tn,WQ),e(WQ,WVe),e(Tn,QVe),e(Tn,DB),e(DB,HVe),e(Tn,UVe),e(Tn,qB),e(qB,JVe),e(Tn,YVe),e(M,KVe),e(M,Fn),e(Fn,QQ),e(QQ,ZVe),e(Fn,eWe),e(Fn,GB),e(GB,oWe),e(Fn,tWe),e(Fn,OB),e(OB,rWe),e(Fn,aWe),e(M,sWe),e(M,Cn),e(Cn,HQ),e(HQ,nWe),e(Cn,lWe),e(Cn,XB),e(XB,dWe),e(Cn,iWe),e(Cn,zB),e(zB,cWe),e(Cn,fWe),e(M,mWe),e(M,Eg),e(Eg,UQ),e(UQ,gWe),e(Eg,hWe),e(Eg,VB),e(VB,uWe),e(Eg,pWe),e(M,_We),e(M,yg),e(yg,JQ),e(JQ,bWe),e(yg,vWe),e(yg,WB),e(WB,TWe),e(yg,FWe),e(M,CWe),e(M,wg),e(wg,YQ),e(YQ,MWe),e(wg,EWe),e(wg,QB),e(QB,yWe),e(wg,wWe),e(M,AWe),e(M,Ag),e(Ag,KQ),e(KQ,LWe),e(Ag,BWe),e(Ag,HB),e(HB,xWe),e(Ag,kWe),e(M,RWe),e(M,Mn),e(Mn,ZQ),e(ZQ,SWe),e(Mn,PWe),e(Mn,UB),e(UB,$We),e(Mn,IWe),e(Mn,JB),e(JB,jWe),e(Mn,NWe),e(M,DWe),e(M,Lg),e(Lg,eH),e(eH,qWe),e(Lg,GWe),e(Lg,YB),e(YB,OWe),e(Lg,XWe),e(M,zWe),e(M,Bg),e(Bg,oH),e(oH,VWe),e(Bg,WWe),e(Bg,KB),e(KB,QWe),e(Bg,HWe),e(M,UWe),e(M,En),e(En,tH),e(tH,JWe),e(En,YWe),e(En,ZB),e(ZB,KWe),e(En,ZWe),e(En,ex),e(ex,eQe),e(En,oQe),e(M,tQe),e(M,yn),e(yn,rH),e(rH,rQe),e(yn,aQe),e(yn,ox),e(ox,sQe),e(yn,nQe),e(yn,tx),e(tx,lQe),e(yn,dQe),e(co,iQe),e(co,aH),e(aH,cQe),e(co,fQe),g(V3,co,null),e(Go,mQe),e(Go,xg),g(W3,xg,null),e(xg,gQe),e(xg,sH),e(sH,hQe),b(i,ELe,_),b(i,Bd,_),e(Bd,kg),e(kg,nH),g(Q3,nH,null),e(Bd,uQe),e(Bd,lH),e(lH,pQe),b(i,yLe,_),b(i,Oo,_),g(H3,Oo,null),e(Oo,_Qe),e(Oo,U3),e(U3,bQe),e(U3,rx),e(rx,vQe),e(U3,TQe),e(Oo,FQe),e(Oo,J3),e(J3,CQe),e(J3,dH),e(dH,MQe),e(J3,EQe),e(Oo,yQe),e(Oo,Le),g(Y3,Le,null),e(Le,wQe),e(Le,iH),e(iH,AQe),e(Le,LQe),e(Le,Pa),e(Pa,BQe),e(Pa,cH),e(cH,xQe),e(Pa,kQe),e(Pa,fH),e(fH,RQe),e(Pa,SQe),e(Pa,mH),e(mH,PQe),e(Pa,$Qe),e(Le,IQe),e(Le,ne),e(ne,Rg),e(Rg,gH),e(gH,jQe),e(Rg,NQe),e(Rg,ax),e(ax,DQe),e(Rg,qQe),e(ne,GQe),e(ne,Sg),e(Sg,hH),e(hH,OQe),e(Sg,XQe),e(Sg,sx),e(sx,zQe),e(Sg,VQe),e(ne,WQe),e(ne,Pg),e(Pg,uH),e(uH,QQe),e(Pg,HQe),e(Pg,nx),e(nx,UQe),e(Pg,JQe),e(ne,YQe),e(ne,$g),e($g,pH),e(pH,KQe),e($g,ZQe),e($g,lx),e(lx,eHe),e($g,oHe),e(ne,tHe),e(ne,Ig),e(Ig,_H),e(_H,rHe),e(Ig,aHe),e(Ig,dx),e(dx,sHe),e(Ig,nHe),e(ne,lHe),e(ne,jg),e(jg,bH),e(bH,dHe),e(jg,iHe),e(jg,ix),e(ix,cHe),e(jg,fHe),e(ne,mHe),e(ne,Ng),e(Ng,vH),e(vH,gHe),e(Ng,hHe),e(Ng,cx),e(cx,uHe),e(Ng,pHe),e(ne,_He),e(ne,Dg),e(Dg,TH),e(TH,bHe),e(Dg,vHe),e(Dg,fx),e(fx,THe),e(Dg,FHe),e(ne,CHe),e(ne,qg),e(qg,FH),e(FH,MHe),e(qg,EHe),e(qg,mx),e(mx,yHe),e(qg,wHe),e(ne,AHe),e(ne,Gg),e(Gg,CH),e(CH,LHe),e(Gg,BHe),e(Gg,gx),e(gx,xHe),e(Gg,kHe),e(ne,RHe),e(ne,Og),e(Og,MH),e(MH,SHe),e(Og,PHe),e(Og,hx),e(hx,$He),e(Og,IHe),e(ne,jHe),e(ne,Xg),e(Xg,EH),e(EH,NHe),e(Xg,DHe),e(Xg,ux),e(ux,qHe),e(Xg,GHe),e(ne,OHe),e(ne,zg),e(zg,yH),e(yH,XHe),e(zg,zHe),e(zg,px),e(px,VHe),e(zg,WHe),e(ne,QHe),e(ne,Vg),e(Vg,wH),e(wH,HHe),e(Vg,UHe),e(Vg,_x),e(_x,JHe),e(Vg,YHe),e(Le,KHe),g(Wg,Le,null),e(Le,ZHe),e(Le,AH),e(AH,eUe),e(Le,oUe),g(K3,Le,null),e(Oo,tUe),e(Oo,Qg),g(Z3,Qg,null),e(Qg,rUe),e(Qg,LH),e(LH,aUe),b(i,wLe,_),b(i,xd,_),e(xd,Hg),e(Hg,BH),g(e5,BH,null),e(xd,sUe),e(xd,xH),e(xH,nUe),b(i,ALe,_),b(i,ea,_),g(o5,ea,null),e(ea,lUe),e(ea,t5),e(t5,dUe),e(t5,bx),e(bx,iUe),e(t5,cUe),e(ea,fUe),e(ea,r5),e(r5,mUe),e(r5,kH),e(kH,gUe),e(r5,hUe),e(ea,uUe),e(ea,Be),g(a5,Be,null),e(Be,pUe),e(Be,RH),e(RH,_Ue),e(Be,bUe),e(Be,kd),e(kd,vUe),e(kd,SH),e(SH,TUe),e(kd,FUe),e(kd,PH),e(PH,CUe),e(kd,MUe),e(Be,EUe),e(Be,ye),e(ye,Ug),e(Ug,$H),e($H,yUe),e(Ug,wUe),e(Ug,vx),e(vx,AUe),e(Ug,LUe),e(ye,BUe),e(ye,Jg),e(Jg,IH),e(IH,xUe),e(Jg,kUe),e(Jg,Tx),e(Tx,RUe),e(Jg,SUe),e(ye,PUe),e(ye,Yg),e(Yg,jH),e(jH,$Ue),e(Yg,IUe),e(Yg,Fx),e(Fx,jUe),e(Yg,NUe),e(ye,DUe),e(ye,Kg),e(Kg,NH),e(NH,qUe),e(Kg,GUe),e(Kg,Cx),e(Cx,OUe),e(Kg,XUe),e(ye,zUe),e(ye,Zg),e(Zg,DH),e(DH,VUe),e(Zg,WUe),e(Zg,Mx),e(Mx,QUe),e(Zg,HUe),e(ye,UUe),e(ye,eh),e(eh,qH),e(qH,JUe),e(eh,YUe),e(eh,Ex),e(Ex,KUe),e(eh,ZUe),e(ye,eJe),e(ye,oh),e(oh,GH),e(GH,oJe),e(oh,tJe),e(oh,yx),e(yx,rJe),e(oh,aJe),e(ye,sJe),e(ye,th),e(th,OH),e(OH,nJe),e(th,lJe),e(th,wx),e(wx,dJe),e(th,iJe),e(Be,cJe),g(rh,Be,null),e(Be,fJe),e(Be,XH),e(XH,mJe),e(Be,gJe),g(s5,Be,null),b(i,LLe,_),b(i,Rd,_),e(Rd,ah),e(ah,zH),g(n5,zH,null),e(Rd,hJe),e(Rd,VH),e(VH,uJe),b(i,BLe,_),b(i,Xo,_),g(l5,Xo,null),e(Xo,pJe),e(Xo,Sd),e(Sd,_Je),e(Sd,WH),e(WH,bJe),e(Sd,vJe),e(Sd,QH),e(QH,TJe),e(Sd,FJe),e(Xo,CJe),e(Xo,d5),e(d5,MJe),e(d5,HH),e(HH,EJe),e(d5,yJe),e(Xo,wJe),e(Xo,$t),g(i5,$t,null),e($t,AJe),e($t,UH),e(UH,LJe),e($t,BJe),e($t,Pd),e(Pd,xJe),e(Pd,JH),e(JH,kJe),e(Pd,RJe),e(Pd,YH),e(YH,SJe),e(Pd,PJe),e($t,$Je),e($t,KH),e(KH,IJe),e($t,jJe),g(c5,$t,null),e(Xo,NJe),e(Xo,xe),g(f5,xe,null),e(xe,DJe),e(xe,ZH),e(ZH,qJe),e(xe,GJe),e(xe,$a),e($a,OJe),e($a,eU),e(eU,XJe),e($a,zJe),e($a,oU),e(oU,VJe),e($a,WJe),e($a,tU),e(tU,QJe),e($a,HJe),e(xe,UJe),e(xe,F),e(F,sh),e(sh,rU),e(rU,JJe),e(sh,YJe),e(sh,Ax),e(Ax,KJe),e(sh,ZJe),e(F,eYe),e(F,nh),e(nh,aU),e(aU,oYe),e(nh,tYe),e(nh,Lx),e(Lx,rYe),e(nh,aYe),e(F,sYe),e(F,lh),e(lh,sU),e(sU,nYe),e(lh,lYe),e(lh,Bx),e(Bx,dYe),e(lh,iYe),e(F,cYe),e(F,dh),e(dh,nU),e(nU,fYe),e(dh,mYe),e(dh,xx),e(xx,gYe),e(dh,hYe),e(F,uYe),e(F,ih),e(ih,lU),e(lU,pYe),e(ih,_Ye),e(ih,kx),e(kx,bYe),e(ih,vYe),e(F,TYe),e(F,ch),e(ch,dU),e(dU,FYe),e(ch,CYe),e(ch,Rx),e(Rx,MYe),e(ch,EYe),e(F,yYe),e(F,fh),e(fh,iU),e(iU,wYe),e(fh,AYe),e(fh,Sx),e(Sx,LYe),e(fh,BYe),e(F,xYe),e(F,mh),e(mh,cU),e(cU,kYe),e(mh,RYe),e(mh,Px),e(Px,SYe),e(mh,PYe),e(F,$Ye),e(F,gh),e(gh,fU),e(fU,IYe),e(gh,jYe),e(gh,$x),e($x,NYe),e(gh,DYe),e(F,qYe),e(F,hh),e(hh,mU),e(mU,GYe),e(hh,OYe),e(hh,Ix),e(Ix,XYe),e(hh,zYe),e(F,VYe),e(F,uh),e(uh,gU),e(gU,WYe),e(uh,QYe),e(uh,jx),e(jx,HYe),e(uh,UYe),e(F,JYe),e(F,ph),e(ph,hU),e(hU,YYe),e(ph,KYe),e(ph,Nx),e(Nx,ZYe),e(ph,eKe),e(F,oKe),e(F,_h),e(_h,uU),e(uU,tKe),e(_h,rKe),e(_h,Dx),e(Dx,aKe),e(_h,sKe),e(F,nKe),e(F,bh),e(bh,pU),e(pU,lKe),e(bh,dKe),e(bh,qx),e(qx,iKe),e(bh,cKe),e(F,fKe),e(F,vh),e(vh,_U),e(_U,mKe),e(vh,gKe),e(vh,Gx),e(Gx,hKe),e(vh,uKe),e(F,pKe),e(F,Th),e(Th,bU),e(bU,_Ke),e(Th,bKe),e(Th,Ox),e(Ox,vKe),e(Th,TKe),e(F,FKe),e(F,Fh),e(Fh,vU),e(vU,CKe),e(Fh,MKe),e(Fh,Xx),e(Xx,EKe),e(Fh,yKe),e(F,wKe),e(F,Ch),e(Ch,TU),e(TU,AKe),e(Ch,LKe),e(Ch,zx),e(zx,BKe),e(Ch,xKe),e(F,kKe),e(F,Mh),e(Mh,FU),e(FU,RKe),e(Mh,SKe),e(Mh,Vx),e(Vx,PKe),e(Mh,$Ke),e(F,IKe),e(F,Eh),e(Eh,CU),e(CU,jKe),e(Eh,NKe),e(Eh,Wx),e(Wx,DKe),e(Eh,qKe),e(F,GKe),e(F,yh),e(yh,MU),e(MU,OKe),e(yh,XKe),e(yh,Qx),e(Qx,zKe),e(yh,VKe),e(F,WKe),e(F,wh),e(wh,EU),e(EU,QKe),e(wh,HKe),e(wh,Hx),e(Hx,UKe),e(wh,JKe),e(F,YKe),e(F,Ah),e(Ah,yU),e(yU,KKe),e(Ah,ZKe),e(Ah,Ux),e(Ux,eZe),e(Ah,oZe),e(F,tZe),e(F,Lh),e(Lh,wU),e(wU,rZe),e(Lh,aZe),e(Lh,Jx),e(Jx,sZe),e(Lh,nZe),e(F,lZe),e(F,Bh),e(Bh,AU),e(AU,dZe),e(Bh,iZe),e(Bh,Yx),e(Yx,cZe),e(Bh,fZe),e(F,mZe),e(F,wn),e(wn,LU),e(LU,gZe),e(wn,hZe),e(wn,Kx),e(Kx,uZe),e(wn,pZe),e(wn,Zx),e(Zx,_Ze),e(wn,bZe),e(F,vZe),e(F,xh),e(xh,BU),e(BU,TZe),e(xh,FZe),e(xh,ek),e(ek,CZe),e(xh,MZe),e(F,EZe),e(F,kh),e(kh,xU),e(xU,yZe),e(kh,wZe),e(kh,ok),e(ok,AZe),e(kh,LZe),e(F,BZe),e(F,Rh),e(Rh,kU),e(kU,xZe),e(Rh,kZe),e(Rh,tk),e(tk,RZe),e(Rh,SZe),e(F,PZe),e(F,Sh),e(Sh,RU),e(RU,$Ze),e(Sh,IZe),e(Sh,rk),e(rk,jZe),e(Sh,NZe),e(F,DZe),e(F,Ph),e(Ph,SU),e(SU,qZe),e(Ph,GZe),e(Ph,ak),e(ak,OZe),e(Ph,XZe),e(F,zZe),e(F,$h),e($h,PU),e(PU,VZe),e($h,WZe),e($h,sk),e(sk,QZe),e($h,HZe),e(F,UZe),e(F,Ih),e(Ih,$U),e($U,JZe),e(Ih,YZe),e(Ih,nk),e(nk,KZe),e(Ih,ZZe),e(F,eeo),e(F,jh),e(jh,IU),e(IU,oeo),e(jh,teo),e(jh,lk),e(lk,reo),e(jh,aeo),e(F,seo),e(F,Nh),e(Nh,jU),e(jU,neo),e(Nh,leo),e(Nh,dk),e(dk,deo),e(Nh,ieo),e(F,ceo),e(F,Dh),e(Dh,NU),e(NU,feo),e(Dh,meo),e(Dh,ik),e(ik,geo),e(Dh,heo),e(F,ueo),e(F,qh),e(qh,DU),e(DU,peo),e(qh,_eo),e(qh,ck),e(ck,beo),e(qh,veo),e(F,Teo),e(F,Gh),e(Gh,qU),e(qU,Feo),e(Gh,Ceo),e(Gh,fk),e(fk,Meo),e(Gh,Eeo),e(F,yeo),e(F,Oh),e(Oh,GU),e(GU,weo),e(Oh,Aeo),e(Oh,mk),e(mk,Leo),e(Oh,Beo),e(F,xeo),e(F,Xh),e(Xh,OU),e(OU,keo),e(Xh,Reo),e(Xh,gk),e(gk,Seo),e(Xh,Peo),e(F,$eo),e(F,zh),e(zh,XU),e(XU,Ieo),e(zh,jeo),e(zh,hk),e(hk,Neo),e(zh,Deo),e(F,qeo),e(F,Vh),e(Vh,zU),e(zU,Geo),e(Vh,Oeo),e(Vh,uk),e(uk,Xeo),e(Vh,zeo),e(F,Veo),e(F,Wh),e(Wh,VU),e(VU,Weo),e(Wh,Qeo),e(Wh,pk),e(pk,Heo),e(Wh,Ueo),e(F,Jeo),e(F,Qh),e(Qh,WU),e(WU,Yeo),e(Qh,Keo),e(Qh,_k),e(_k,Zeo),e(Qh,eoo),e(F,ooo),e(F,Hh),e(Hh,QU),e(QU,too),e(Hh,roo),e(Hh,bk),e(bk,aoo),e(Hh,soo),e(F,noo),e(F,Uh),e(Uh,HU),e(HU,loo),e(Uh,doo),e(Uh,vk),e(vk,ioo),e(Uh,coo),e(F,foo),e(F,Jh),e(Jh,UU),e(UU,moo),e(Jh,goo),e(Jh,Tk),e(Tk,hoo),e(Jh,uoo),e(F,poo),e(F,Yh),e(Yh,JU),e(JU,_oo),e(Yh,boo),e(Yh,Fk),e(Fk,voo),e(Yh,Too),e(F,Foo),e(F,Kh),e(Kh,YU),e(YU,Coo),e(Kh,Moo),e(Kh,Ck),e(Ck,Eoo),e(Kh,yoo),e(F,woo),e(F,Zh),e(Zh,KU),e(KU,Aoo),e(Zh,Loo),e(Zh,Mk),e(Mk,Boo),e(Zh,xoo),e(F,koo),e(F,eu),e(eu,ZU),e(ZU,Roo),e(eu,Soo),e(eu,Ek),e(Ek,Poo),e(eu,$oo),e(F,Ioo),e(F,ou),e(ou,eJ),e(eJ,joo),e(ou,Noo),e(ou,yk),e(yk,Doo),e(ou,qoo),e(F,Goo),e(F,tu),e(tu,oJ),e(oJ,Ooo),e(tu,Xoo),e(tu,wk),e(wk,zoo),e(tu,Voo),e(F,Woo),e(F,ru),e(ru,tJ),e(tJ,Qoo),e(ru,Hoo),e(ru,Ak),e(Ak,Uoo),e(ru,Joo),e(F,Yoo),e(F,au),e(au,rJ),e(rJ,Koo),e(au,Zoo),e(au,Lk),e(Lk,eto),e(au,oto),e(F,tto),e(F,su),e(su,aJ),e(aJ,rto),e(su,ato),e(su,Bk),e(Bk,sto),e(su,nto),e(F,lto),e(F,nu),e(nu,sJ),e(sJ,dto),e(nu,ito),e(nu,xk),e(xk,cto),e(nu,fto),e(F,mto),e(F,lu),e(lu,nJ),e(nJ,gto),e(lu,hto),e(lu,kk),e(kk,uto),e(lu,pto),e(F,_to),e(F,du),e(du,lJ),e(lJ,bto),e(du,vto),e(du,Rk),e(Rk,Tto),e(du,Fto),e(F,Cto),e(F,iu),e(iu,dJ),e(dJ,Mto),e(iu,Eto),e(iu,Sk),e(Sk,yto),e(iu,wto),e(F,Ato),e(F,cu),e(cu,iJ),e(iJ,Lto),e(cu,Bto),e(cu,Pk),e(Pk,xto),e(cu,kto),e(F,Rto),e(F,fu),e(fu,cJ),e(cJ,Sto),e(fu,Pto),e(fu,$k),e($k,$to),e(fu,Ito),e(F,jto),e(F,mu),e(mu,fJ),e(fJ,Nto),e(mu,Dto),e(mu,Ik),e(Ik,qto),e(mu,Gto),e(F,Oto),e(F,gu),e(gu,mJ),e(mJ,Xto),e(gu,zto),e(gu,jk),e(jk,Vto),e(gu,Wto),e(F,Qto),e(F,hu),e(hu,gJ),e(gJ,Hto),e(hu,Uto),e(hu,Nk),e(Nk,Jto),e(hu,Yto),e(F,Kto),e(F,uu),e(uu,hJ),e(hJ,Zto),e(uu,ero),e(uu,Dk),e(Dk,oro),e(uu,tro),e(F,rro),e(F,pu),e(pu,uJ),e(uJ,aro),e(pu,sro),e(pu,qk),e(qk,nro),e(pu,lro),e(F,dro),e(F,_u),e(_u,pJ),e(pJ,iro),e(_u,cro),e(_u,Gk),e(Gk,fro),e(_u,mro),e(F,gro),e(F,bu),e(bu,_J),e(_J,hro),e(bu,uro),e(bu,Ok),e(Ok,pro),e(bu,_ro),e(F,bro),e(F,vu),e(vu,bJ),e(bJ,vro),e(vu,Tro),e(vu,Xk),e(Xk,Fro),e(vu,Cro),e(F,Mro),e(F,Tu),e(Tu,vJ),e(vJ,Ero),e(Tu,yro),e(Tu,zk),e(zk,wro),e(Tu,Aro),e(F,Lro),e(F,Fu),e(Fu,TJ),e(TJ,Bro),e(Fu,xro),e(Fu,Vk),e(Vk,kro),e(Fu,Rro),e(F,Sro),e(F,Cu),e(Cu,FJ),e(FJ,Pro),e(Cu,$ro),e(Cu,Wk),e(Wk,Iro),e(Cu,jro),e(F,Nro),e(F,Mu),e(Mu,CJ),e(CJ,Dro),e(Mu,qro),e(Mu,Qk),e(Qk,Gro),e(Mu,Oro),e(F,Xro),e(F,Eu),e(Eu,MJ),e(MJ,zro),e(Eu,Vro),e(Eu,Hk),e(Hk,Wro),e(Eu,Qro),e(F,Hro),e(F,yu),e(yu,EJ),e(EJ,Uro),e(yu,Jro),e(yu,Uk),e(Uk,Yro),e(yu,Kro),e(F,Zro),e(F,wu),e(wu,yJ),e(yJ,eao),e(wu,oao),e(wu,Jk),e(Jk,tao),e(wu,rao),e(F,aao),e(F,Au),e(Au,wJ),e(wJ,sao),e(Au,nao),e(Au,Yk),e(Yk,lao),e(Au,dao),e(F,iao),e(F,Lu),e(Lu,AJ),e(AJ,cao),e(Lu,fao),e(Lu,Kk),e(Kk,mao),e(Lu,gao),e(F,hao),e(F,Bu),e(Bu,LJ),e(LJ,uao),e(Bu,pao),e(Bu,Zk),e(Zk,_ao),e(Bu,bao),e(F,vao),e(F,xu),e(xu,BJ),e(BJ,Tao),e(xu,Fao),e(xu,eR),e(eR,Cao),e(xu,Mao),e(F,Eao),e(F,ku),e(ku,xJ),e(xJ,yao),e(ku,wao),e(ku,oR),e(oR,Aao),e(ku,Lao),e(xe,Bao),e(xe,Ru),e(Ru,xao),e(Ru,kJ),e(kJ,kao),e(Ru,Rao),e(Ru,RJ),e(RJ,Sao),e(xe,Pao),e(xe,SJ),e(SJ,$ao),e(xe,Iao),g(m5,xe,null),b(i,xLe,_),b(i,$d,_),e($d,Su),e(Su,PJ),g(g5,PJ,null),e($d,jao),e($d,$J),e($J,Nao),b(i,kLe,_),b(i,zo,_),g(h5,zo,null),e(zo,Dao),e(zo,Id),e(Id,qao),e(Id,IJ),e(IJ,Gao),e(Id,Oao),e(Id,jJ),e(jJ,Xao),e(Id,zao),e(zo,Vao),e(zo,u5),e(u5,Wao),e(u5,NJ),e(NJ,Qao),e(u5,Hao),e(zo,Uao),e(zo,It),g(p5,It,null),e(It,Jao),e(It,DJ),e(DJ,Yao),e(It,Kao),e(It,jd),e(jd,Zao),e(jd,qJ),e(qJ,eso),e(jd,oso),e(jd,GJ),e(GJ,tso),e(jd,rso),e(It,aso),e(It,OJ),e(OJ,sso),e(It,nso),g(_5,It,null),e(zo,lso),e(zo,ke),g(b5,ke,null),e(ke,dso),e(ke,XJ),e(XJ,iso),e(ke,cso),e(ke,Ia),e(Ia,fso),e(Ia,zJ),e(zJ,mso),e(Ia,gso),e(Ia,VJ),e(VJ,hso),e(Ia,uso),e(Ia,WJ),e(WJ,pso),e(Ia,_so),e(ke,bso),e(ke,k),e(k,Pu),e(Pu,QJ),e(QJ,vso),e(Pu,Tso),e(Pu,tR),e(tR,Fso),e(Pu,Cso),e(k,Mso),e(k,$u),e($u,HJ),e(HJ,Eso),e($u,yso),e($u,rR),e(rR,wso),e($u,Aso),e(k,Lso),e(k,Iu),e(Iu,UJ),e(UJ,Bso),e(Iu,xso),e(Iu,aR),e(aR,kso),e(Iu,Rso),e(k,Sso),e(k,ju),e(ju,JJ),e(JJ,Pso),e(ju,$so),e(ju,sR),e(sR,Iso),e(ju,jso),e(k,Nso),e(k,Nu),e(Nu,YJ),e(YJ,Dso),e(Nu,qso),e(Nu,nR),e(nR,Gso),e(Nu,Oso),e(k,Xso),e(k,Du),e(Du,KJ),e(KJ,zso),e(Du,Vso),e(Du,lR),e(lR,Wso),e(Du,Qso),e(k,Hso),e(k,qu),e(qu,ZJ),e(ZJ,Uso),e(qu,Jso),e(qu,dR),e(dR,Yso),e(qu,Kso),e(k,Zso),e(k,Gu),e(Gu,eY),e(eY,eno),e(Gu,ono),e(Gu,iR),e(iR,tno),e(Gu,rno),e(k,ano),e(k,Ou),e(Ou,oY),e(oY,sno),e(Ou,nno),e(Ou,cR),e(cR,lno),e(Ou,dno),e(k,ino),e(k,Xu),e(Xu,tY),e(tY,cno),e(Xu,fno),e(Xu,fR),e(fR,mno),e(Xu,gno),e(k,hno),e(k,zu),e(zu,rY),e(rY,uno),e(zu,pno),e(zu,mR),e(mR,_no),e(zu,bno),e(k,vno),e(k,Vu),e(Vu,aY),e(aY,Tno),e(Vu,Fno),e(Vu,gR),e(gR,Cno),e(Vu,Mno),e(k,Eno),e(k,Wu),e(Wu,sY),e(sY,yno),e(Wu,wno),e(Wu,hR),e(hR,Ano),e(Wu,Lno),e(k,Bno),e(k,Qu),e(Qu,nY),e(nY,xno),e(Qu,kno),e(Qu,uR),e(uR,Rno),e(Qu,Sno),e(k,Pno),e(k,Hu),e(Hu,lY),e(lY,$no),e(Hu,Ino),e(Hu,pR),e(pR,jno),e(Hu,Nno),e(k,Dno),e(k,Uu),e(Uu,dY),e(dY,qno),e(Uu,Gno),e(Uu,_R),e(_R,Ono),e(Uu,Xno),e(k,zno),e(k,Ju),e(Ju,iY),e(iY,Vno),e(Ju,Wno),e(Ju,bR),e(bR,Qno),e(Ju,Hno),e(k,Uno),e(k,Yu),e(Yu,cY),e(cY,Jno),e(Yu,Yno),e(Yu,vR),e(vR,Kno),e(Yu,Zno),e(k,elo),e(k,Ku),e(Ku,fY),e(fY,olo),e(Ku,tlo),e(Ku,TR),e(TR,rlo),e(Ku,alo),e(k,slo),e(k,Zu),e(Zu,mY),e(mY,nlo),e(Zu,llo),e(Zu,FR),e(FR,dlo),e(Zu,ilo),e(k,clo),e(k,ep),e(ep,gY),e(gY,flo),e(ep,mlo),e(ep,CR),e(CR,glo),e(ep,hlo),e(k,ulo),e(k,op),e(op,hY),e(hY,plo),e(op,_lo),e(op,MR),e(MR,blo),e(op,vlo),e(k,Tlo),e(k,tp),e(tp,uY),e(uY,Flo),e(tp,Clo),e(tp,ER),e(ER,Mlo),e(tp,Elo),e(k,ylo),e(k,rp),e(rp,pY),e(pY,wlo),e(rp,Alo),e(rp,yR),e(yR,Llo),e(rp,Blo),e(k,xlo),e(k,ap),e(ap,_Y),e(_Y,klo),e(ap,Rlo),e(ap,wR),e(wR,Slo),e(ap,Plo),e(k,$lo),e(k,sp),e(sp,bY),e(bY,Ilo),e(sp,jlo),e(sp,AR),e(AR,Nlo),e(sp,Dlo),e(k,qlo),e(k,np),e(np,vY),e(vY,Glo),e(np,Olo),e(np,LR),e(LR,Xlo),e(np,zlo),e(k,Vlo),e(k,lp),e(lp,TY),e(TY,Wlo),e(lp,Qlo),e(lp,BR),e(BR,Hlo),e(lp,Ulo),e(k,Jlo),e(k,dp),e(dp,FY),e(FY,Ylo),e(dp,Klo),e(dp,xR),e(xR,Zlo),e(dp,edo),e(k,odo),e(k,ip),e(ip,CY),e(CY,tdo),e(ip,rdo),e(ip,kR),e(kR,ado),e(ip,sdo),e(k,ndo),e(k,cp),e(cp,MY),e(MY,ldo),e(cp,ddo),e(cp,RR),e(RR,ido),e(cp,cdo),e(k,fdo),e(k,fp),e(fp,EY),e(EY,mdo),e(fp,gdo),e(fp,SR),e(SR,hdo),e(fp,udo),e(k,pdo),e(k,mp),e(mp,yY),e(yY,_do),e(mp,bdo),e(mp,PR),e(PR,vdo),e(mp,Tdo),e(k,Fdo),e(k,gp),e(gp,wY),e(wY,Cdo),e(gp,Mdo),e(gp,$R),e($R,Edo),e(gp,ydo),e(k,wdo),e(k,hp),e(hp,AY),e(AY,Ado),e(hp,Ldo),e(hp,IR),e(IR,Bdo),e(hp,xdo),e(k,kdo),e(k,up),e(up,LY),e(LY,Rdo),e(up,Sdo),e(up,jR),e(jR,Pdo),e(up,$do),e(k,Ido),e(k,pp),e(pp,BY),e(BY,jdo),e(pp,Ndo),e(pp,NR),e(NR,Ddo),e(pp,qdo),e(k,Gdo),e(k,_p),e(_p,xY),e(xY,Odo),e(_p,Xdo),e(_p,DR),e(DR,zdo),e(_p,Vdo),e(ke,Wdo),e(ke,bp),e(bp,Qdo),e(bp,kY),e(kY,Hdo),e(bp,Udo),e(bp,RY),e(RY,Jdo),e(ke,Ydo),e(ke,SY),e(SY,Kdo),e(ke,Zdo),g(v5,ke,null),b(i,RLe,_),b(i,Nd,_),e(Nd,vp),e(vp,PY),g(T5,PY,null),e(Nd,eio),e(Nd,$Y),e($Y,oio),b(i,SLe,_),b(i,Vo,_),g(F5,Vo,null),e(Vo,tio),e(Vo,Dd),e(Dd,rio),e(Dd,IY),e(IY,aio),e(Dd,sio),e(Dd,jY),e(jY,nio),e(Dd,lio),e(Vo,dio),e(Vo,C5),e(C5,iio),e(C5,NY),e(NY,cio),e(C5,fio),e(Vo,mio),e(Vo,jt),g(M5,jt,null),e(jt,gio),e(jt,DY),e(DY,hio),e(jt,uio),e(jt,qd),e(qd,pio),e(qd,qY),e(qY,_io),e(qd,bio),e(qd,GY),e(GY,vio),e(qd,Tio),e(jt,Fio),e(jt,OY),e(OY,Cio),e(jt,Mio),g(E5,jt,null),e(Vo,Eio),e(Vo,Re),g(y5,Re,null),e(Re,yio),e(Re,XY),e(XY,wio),e(Re,Aio),e(Re,ja),e(ja,Lio),e(ja,zY),e(zY,Bio),e(ja,xio),e(ja,VY),e(VY,kio),e(ja,Rio),e(ja,WY),e(WY,Sio),e(ja,Pio),e(Re,$io),e(Re,I),e(I,Tp),e(Tp,QY),e(QY,Iio),e(Tp,jio),e(Tp,qR),e(qR,Nio),e(Tp,Dio),e(I,qio),e(I,Fp),e(Fp,HY),e(HY,Gio),e(Fp,Oio),e(Fp,GR),e(GR,Xio),e(Fp,zio),e(I,Vio),e(I,Cp),e(Cp,UY),e(UY,Wio),e(Cp,Qio),e(Cp,OR),e(OR,Hio),e(Cp,Uio),e(I,Jio),e(I,Mp),e(Mp,JY),e(JY,Yio),e(Mp,Kio),e(Mp,XR),e(XR,Zio),e(Mp,eco),e(I,oco),e(I,Ep),e(Ep,YY),e(YY,tco),e(Ep,rco),e(Ep,zR),e(zR,aco),e(Ep,sco),e(I,nco),e(I,yp),e(yp,KY),e(KY,lco),e(yp,dco),e(yp,VR),e(VR,ico),e(yp,cco),e(I,fco),e(I,wp),e(wp,ZY),e(ZY,mco),e(wp,gco),e(wp,WR),e(WR,hco),e(wp,uco),e(I,pco),e(I,Ap),e(Ap,eK),e(eK,_co),e(Ap,bco),e(Ap,QR),e(QR,vco),e(Ap,Tco),e(I,Fco),e(I,Lp),e(Lp,oK),e(oK,Cco),e(Lp,Mco),e(Lp,HR),e(HR,Eco),e(Lp,yco),e(I,wco),e(I,Bp),e(Bp,tK),e(tK,Aco),e(Bp,Lco),e(Bp,UR),e(UR,Bco),e(Bp,xco),e(I,kco),e(I,xp),e(xp,rK),e(rK,Rco),e(xp,Sco),e(xp,JR),e(JR,Pco),e(xp,$co),e(I,Ico),e(I,kp),e(kp,aK),e(aK,jco),e(kp,Nco),e(kp,YR),e(YR,Dco),e(kp,qco),e(I,Gco),e(I,Rp),e(Rp,sK),e(sK,Oco),e(Rp,Xco),e(Rp,KR),e(KR,zco),e(Rp,Vco),e(I,Wco),e(I,Sp),e(Sp,nK),e(nK,Qco),e(Sp,Hco),e(Sp,ZR),e(ZR,Uco),e(Sp,Jco),e(I,Yco),e(I,Pp),e(Pp,lK),e(lK,Kco),e(Pp,Zco),e(Pp,eS),e(eS,efo),e(Pp,ofo),e(I,tfo),e(I,$p),e($p,dK),e(dK,rfo),e($p,afo),e($p,oS),e(oS,sfo),e($p,nfo),e(I,lfo),e(I,Ip),e(Ip,iK),e(iK,dfo),e(Ip,ifo),e(Ip,tS),e(tS,cfo),e(Ip,ffo),e(I,mfo),e(I,jp),e(jp,cK),e(cK,gfo),e(jp,hfo),e(jp,rS),e(rS,ufo),e(jp,pfo),e(I,_fo),e(I,Np),e(Np,fK),e(fK,bfo),e(Np,vfo),e(Np,aS),e(aS,Tfo),e(Np,Ffo),e(I,Cfo),e(I,Dp),e(Dp,mK),e(mK,Mfo),e(Dp,Efo),e(Dp,sS),e(sS,yfo),e(Dp,wfo),e(I,Afo),e(I,qp),e(qp,gK),e(gK,Lfo),e(qp,Bfo),e(qp,nS),e(nS,xfo),e(qp,kfo),e(I,Rfo),e(I,Gp),e(Gp,hK),e(hK,Sfo),e(Gp,Pfo),e(Gp,lS),e(lS,$fo),e(Gp,Ifo),e(I,jfo),e(I,Op),e(Op,uK),e(uK,Nfo),e(Op,Dfo),e(Op,dS),e(dS,qfo),e(Op,Gfo),e(I,Ofo),e(I,Xp),e(Xp,pK),e(pK,Xfo),e(Xp,zfo),e(Xp,iS),e(iS,Vfo),e(Xp,Wfo),e(I,Qfo),e(I,zp),e(zp,_K),e(_K,Hfo),e(zp,Ufo),e(zp,cS),e(cS,Jfo),e(zp,Yfo),e(I,Kfo),e(I,Vp),e(Vp,bK),e(bK,Zfo),e(Vp,emo),e(Vp,fS),e(fS,omo),e(Vp,tmo),e(I,rmo),e(I,Wp),e(Wp,vK),e(vK,amo),e(Wp,smo),e(Wp,mS),e(mS,nmo),e(Wp,lmo),e(I,dmo),e(I,Qp),e(Qp,TK),e(TK,imo),e(Qp,cmo),e(Qp,gS),e(gS,fmo),e(Qp,mmo),e(I,gmo),e(I,Hp),e(Hp,FK),e(FK,hmo),e(Hp,umo),e(Hp,hS),e(hS,pmo),e(Hp,_mo),e(I,bmo),e(I,Up),e(Up,CK),e(CK,vmo),e(Up,Tmo),e(Up,uS),e(uS,Fmo),e(Up,Cmo),e(I,Mmo),e(I,Jp),e(Jp,MK),e(MK,Emo),e(Jp,ymo),e(Jp,pS),e(pS,wmo),e(Jp,Amo),e(I,Lmo),e(I,Yp),e(Yp,EK),e(EK,Bmo),e(Yp,xmo),e(Yp,_S),e(_S,kmo),e(Yp,Rmo),e(I,Smo),e(I,Kp),e(Kp,yK),e(yK,Pmo),e(Kp,$mo),e(Kp,bS),e(bS,Imo),e(Kp,jmo),e(Re,Nmo),e(Re,Zp),e(Zp,Dmo),e(Zp,wK),e(wK,qmo),e(Zp,Gmo),e(Zp,AK),e(AK,Omo),e(Re,Xmo),e(Re,LK),e(LK,zmo),e(Re,Vmo),g(w5,Re,null),b(i,PLe,_),b(i,Gd,_),e(Gd,e_),e(e_,BK),g(A5,BK,null),e(Gd,Wmo),e(Gd,xK),e(xK,Qmo),b(i,$Le,_),b(i,Wo,_),g(L5,Wo,null),e(Wo,Hmo),e(Wo,Od),e(Od,Umo),e(Od,kK),e(kK,Jmo),e(Od,Ymo),e(Od,RK),e(RK,Kmo),e(Od,Zmo),e(Wo,ego),e(Wo,B5),e(B5,ogo),e(B5,SK),e(SK,tgo),e(B5,rgo),e(Wo,ago),e(Wo,Nt),g(x5,Nt,null),e(Nt,sgo),e(Nt,PK),e(PK,ngo),e(Nt,lgo),e(Nt,Xd),e(Xd,dgo),e(Xd,$K),e($K,igo),e(Xd,cgo),e(Xd,IK),e(IK,fgo),e(Xd,mgo),e(Nt,ggo),e(Nt,jK),e(jK,hgo),e(Nt,ugo),g(k5,Nt,null),e(Wo,pgo),e(Wo,Se),g(R5,Se,null),e(Se,_go),e(Se,NK),e(NK,bgo),e(Se,vgo),e(Se,Na),e(Na,Tgo),e(Na,DK),e(DK,Fgo),e(Na,Cgo),e(Na,qK),e(qK,Mgo),e(Na,Ego),e(Na,GK),e(GK,ygo),e(Na,wgo),e(Se,Ago),e(Se,$),e($,o_),e(o_,OK),e(OK,Lgo),e(o_,Bgo),e(o_,vS),e(vS,xgo),e(o_,kgo),e($,Rgo),e($,t_),e(t_,XK),e(XK,Sgo),e(t_,Pgo),e(t_,TS),e(TS,$go),e(t_,Igo),e($,jgo),e($,r_),e(r_,zK),e(zK,Ngo),e(r_,Dgo),e(r_,FS),e(FS,qgo),e(r_,Ggo),e($,Ogo),e($,a_),e(a_,VK),e(VK,Xgo),e(a_,zgo),e(a_,CS),e(CS,Vgo),e(a_,Wgo),e($,Qgo),e($,s_),e(s_,WK),e(WK,Hgo),e(s_,Ugo),e(s_,MS),e(MS,Jgo),e(s_,Ygo),e($,Kgo),e($,n_),e(n_,QK),e(QK,Zgo),e(n_,eho),e(n_,ES),e(ES,oho),e(n_,tho),e($,rho),e($,l_),e(l_,HK),e(HK,aho),e(l_,sho),e(l_,yS),e(yS,nho),e(l_,lho),e($,dho),e($,d_),e(d_,UK),e(UK,iho),e(d_,cho),e(d_,wS),e(wS,fho),e(d_,mho),e($,gho),e($,i_),e(i_,JK),e(JK,hho),e(i_,uho),e(i_,AS),e(AS,pho),e(i_,_ho),e($,bho),e($,c_),e(c_,YK),e(YK,vho),e(c_,Tho),e(c_,LS),e(LS,Fho),e(c_,Cho),e($,Mho),e($,f_),e(f_,KK),e(KK,Eho),e(f_,yho),e(f_,BS),e(BS,who),e(f_,Aho),e($,Lho),e($,m_),e(m_,ZK),e(ZK,Bho),e(m_,xho),e(m_,xS),e(xS,kho),e(m_,Rho),e($,Sho),e($,g_),e(g_,eZ),e(eZ,Pho),e(g_,$ho),e(g_,kS),e(kS,Iho),e(g_,jho),e($,Nho),e($,h_),e(h_,oZ),e(oZ,Dho),e(h_,qho),e(h_,RS),e(RS,Gho),e(h_,Oho),e($,Xho),e($,u_),e(u_,tZ),e(tZ,zho),e(u_,Vho),e(u_,SS),e(SS,Who),e(u_,Qho),e($,Hho),e($,p_),e(p_,rZ),e(rZ,Uho),e(p_,Jho),e(p_,PS),e(PS,Yho),e(p_,Kho),e($,Zho),e($,__),e(__,aZ),e(aZ,euo),e(__,ouo),e(__,$S),e($S,tuo),e(__,ruo),e($,auo),e($,b_),e(b_,sZ),e(sZ,suo),e(b_,nuo),e(b_,IS),e(IS,luo),e(b_,duo),e($,iuo),e($,v_),e(v_,nZ),e(nZ,cuo),e(v_,fuo),e(v_,jS),e(jS,muo),e(v_,guo),e($,huo),e($,T_),e(T_,lZ),e(lZ,uuo),e(T_,puo),e(T_,NS),e(NS,_uo),e(T_,buo),e($,vuo),e($,F_),e(F_,dZ),e(dZ,Tuo),e(F_,Fuo),e(F_,DS),e(DS,Cuo),e(F_,Muo),e($,Euo),e($,C_),e(C_,iZ),e(iZ,yuo),e(C_,wuo),e(C_,qS),e(qS,Auo),e(C_,Luo),e($,Buo),e($,M_),e(M_,cZ),e(cZ,xuo),e(M_,kuo),e(M_,GS),e(GS,Ruo),e(M_,Suo),e($,Puo),e($,E_),e(E_,fZ),e(fZ,$uo),e(E_,Iuo),e(E_,OS),e(OS,juo),e(E_,Nuo),e($,Duo),e($,y_),e(y_,mZ),e(mZ,quo),e(y_,Guo),e(y_,XS),e(XS,Ouo),e(y_,Xuo),e($,zuo),e($,w_),e(w_,gZ),e(gZ,Vuo),e(w_,Wuo),e(w_,zS),e(zS,Quo),e(w_,Huo),e($,Uuo),e($,A_),e(A_,hZ),e(hZ,Juo),e(A_,Yuo),e(A_,VS),e(VS,Kuo),e(A_,Zuo),e($,epo),e($,L_),e(L_,uZ),e(uZ,opo),e(L_,tpo),e(L_,WS),e(WS,rpo),e(L_,apo),e($,spo),e($,B_),e(B_,pZ),e(pZ,npo),e(B_,lpo),e(B_,QS),e(QS,dpo),e(B_,ipo),e($,cpo),e($,x_),e(x_,_Z),e(_Z,fpo),e(x_,mpo),e(x_,bZ),e(bZ,gpo),e(x_,hpo),e($,upo),e($,k_),e(k_,vZ),e(vZ,ppo),e(k_,_po),e(k_,HS),e(HS,bpo),e(k_,vpo),e($,Tpo),e($,R_),e(R_,TZ),e(TZ,Fpo),e(R_,Cpo),e(R_,US),e(US,Mpo),e(R_,Epo),e($,ypo),e($,S_),e(S_,FZ),e(FZ,wpo),e(S_,Apo),e(S_,JS),e(JS,Lpo),e(S_,Bpo),e($,xpo),e($,P_),e(P_,CZ),e(CZ,kpo),e(P_,Rpo),e(P_,YS),e(YS,Spo),e(P_,Ppo),e(Se,$po),e(Se,$_),e($_,Ipo),e($_,MZ),e(MZ,jpo),e($_,Npo),e($_,EZ),e(EZ,Dpo),e(Se,qpo),e(Se,yZ),e(yZ,Gpo),e(Se,Opo),g(S5,Se,null),b(i,ILe,_),b(i,zd,_),e(zd,I_),e(I_,wZ),g(P5,wZ,null),e(zd,Xpo),e(zd,AZ),e(AZ,zpo),b(i,jLe,_),b(i,Qo,_),g($5,Qo,null),e(Qo,Vpo),e(Qo,Vd),e(Vd,Wpo),e(Vd,LZ),e(LZ,Qpo),e(Vd,Hpo),e(Vd,BZ),e(BZ,Upo),e(Vd,Jpo),e(Qo,Ypo),e(Qo,I5),e(I5,Kpo),e(I5,xZ),e(xZ,Zpo),e(I5,e_o),e(Qo,o_o),e(Qo,Dt),g(j5,Dt,null),e(Dt,t_o),e(Dt,kZ),e(kZ,r_o),e(Dt,a_o),e(Dt,Wd),e(Wd,s_o),e(Wd,RZ),e(RZ,n_o),e(Wd,l_o),e(Wd,SZ),e(SZ,d_o),e(Wd,i_o),e(Dt,c_o),e(Dt,PZ),e(PZ,f_o),e(Dt,m_o),g(N5,Dt,null),e(Qo,g_o),e(Qo,Pe),g(D5,Pe,null),e(Pe,h_o),e(Pe,$Z),e($Z,u_o),e(Pe,p_o),e(Pe,Da),e(Da,__o),e(Da,IZ),e(IZ,b_o),e(Da,v_o),e(Da,jZ),e(jZ,T_o),e(Da,F_o),e(Da,NZ),e(NZ,C_o),e(Da,M_o),e(Pe,E_o),e(Pe,se),e(se,j_),e(j_,DZ),e(DZ,y_o),e(j_,w_o),e(j_,KS),e(KS,A_o),e(j_,L_o),e(se,B_o),e(se,N_),e(N_,qZ),e(qZ,x_o),e(N_,k_o),e(N_,ZS),e(ZS,R_o),e(N_,S_o),e(se,P_o),e(se,D_),e(D_,GZ),e(GZ,$_o),e(D_,I_o),e(D_,eP),e(eP,j_o),e(D_,N_o),e(se,D_o),e(se,q_),e(q_,OZ),e(OZ,q_o),e(q_,G_o),e(q_,oP),e(oP,O_o),e(q_,X_o),e(se,z_o),e(se,G_),e(G_,XZ),e(XZ,V_o),e(G_,W_o),e(G_,tP),e(tP,Q_o),e(G_,H_o),e(se,U_o),e(se,O_),e(O_,zZ),e(zZ,J_o),e(O_,Y_o),e(O_,rP),e(rP,K_o),e(O_,Z_o),e(se,ebo),e(se,X_),e(X_,VZ),e(VZ,obo),e(X_,tbo),e(X_,aP),e(aP,rbo),e(X_,abo),e(se,sbo),e(se,z_),e(z_,WZ),e(WZ,nbo),e(z_,lbo),e(z_,sP),e(sP,dbo),e(z_,ibo),e(se,cbo),e(se,V_),e(V_,QZ),e(QZ,fbo),e(V_,mbo),e(V_,nP),e(nP,gbo),e(V_,hbo),e(se,ubo),e(se,W_),e(W_,HZ),e(HZ,pbo),e(W_,_bo),e(W_,lP),e(lP,bbo),e(W_,vbo),e(se,Tbo),e(se,Q_),e(Q_,UZ),e(UZ,Fbo),e(Q_,Cbo),e(Q_,dP),e(dP,Mbo),e(Q_,Ebo),e(se,ybo),e(se,H_),e(H_,JZ),e(JZ,wbo),e(H_,Abo),e(H_,iP),e(iP,Lbo),e(H_,Bbo),e(se,xbo),e(se,U_),e(U_,YZ),e(YZ,kbo),e(U_,Rbo),e(U_,cP),e(cP,Sbo),e(U_,Pbo),e(se,$bo),e(se,J_),e(J_,KZ),e(KZ,Ibo),e(J_,jbo),e(J_,fP),e(fP,Nbo),e(J_,Dbo),e(se,qbo),e(se,Y_),e(Y_,ZZ),e(ZZ,Gbo),e(Y_,Obo),e(Y_,mP),e(mP,Xbo),e(Y_,zbo),e(Pe,Vbo),e(Pe,K_),e(K_,Wbo),e(K_,eee),e(eee,Qbo),e(K_,Hbo),e(K_,oee),e(oee,Ubo),e(Pe,Jbo),e(Pe,tee),e(tee,Ybo),e(Pe,Kbo),g(q5,Pe,null),b(i,NLe,_),b(i,Qd,_),e(Qd,Z_),e(Z_,ree),g(G5,ree,null),e(Qd,Zbo),e(Qd,aee),e(aee,e2o),b(i,DLe,_),b(i,Ho,_),g(O5,Ho,null),e(Ho,o2o),e(Ho,Hd),e(Hd,t2o),e(Hd,see),e(see,r2o),e(Hd,a2o),e(Hd,nee),e(nee,s2o),e(Hd,n2o),e(Ho,l2o),e(Ho,X5),e(X5,d2o),e(X5,lee),e(lee,i2o),e(X5,c2o),e(Ho,f2o),e(Ho,qt),g(z5,qt,null),e(qt,m2o),e(qt,dee),e(dee,g2o),e(qt,h2o),e(qt,Ud),e(Ud,u2o),e(Ud,iee),e(iee,p2o),e(Ud,_2o),e(Ud,cee),e(cee,b2o),e(Ud,v2o),e(qt,T2o),e(qt,fee),e(fee,F2o),e(qt,C2o),g(V5,qt,null),e(Ho,M2o),e(Ho,$e),g(W5,$e,null),e($e,E2o),e($e,mee),e(mee,y2o),e($e,w2o),e($e,qa),e(qa,A2o),e(qa,gee),e(gee,L2o),e(qa,B2o),e(qa,hee),e(hee,x2o),e(qa,k2o),e(qa,uee),e(uee,R2o),e(qa,S2o),e($e,P2o),e($e,A),e(A,eb),e(eb,pee),e(pee,$2o),e(eb,I2o),e(eb,gP),e(gP,j2o),e(eb,N2o),e(A,D2o),e(A,ob),e(ob,_ee),e(_ee,q2o),e(ob,G2o),e(ob,hP),e(hP,O2o),e(ob,X2o),e(A,z2o),e(A,tb),e(tb,bee),e(bee,V2o),e(tb,W2o),e(tb,uP),e(uP,Q2o),e(tb,H2o),e(A,U2o),e(A,rb),e(rb,vee),e(vee,J2o),e(rb,Y2o),e(rb,pP),e(pP,K2o),e(rb,Z2o),e(A,evo),e(A,ab),e(ab,Tee),e(Tee,ovo),e(ab,tvo),e(ab,_P),e(_P,rvo),e(ab,avo),e(A,svo),e(A,sb),e(sb,Fee),e(Fee,nvo),e(sb,lvo),e(sb,bP),e(bP,dvo),e(sb,ivo),e(A,cvo),e(A,nb),e(nb,Cee),e(Cee,fvo),e(nb,mvo),e(nb,vP),e(vP,gvo),e(nb,hvo),e(A,uvo),e(A,lb),e(lb,Mee),e(Mee,pvo),e(lb,_vo),e(lb,TP),e(TP,bvo),e(lb,vvo),e(A,Tvo),e(A,db),e(db,Eee),e(Eee,Fvo),e(db,Cvo),e(db,FP),e(FP,Mvo),e(db,Evo),e(A,yvo),e(A,ib),e(ib,yee),e(yee,wvo),e(ib,Avo),e(ib,CP),e(CP,Lvo),e(ib,Bvo),e(A,xvo),e(A,cb),e(cb,wee),e(wee,kvo),e(cb,Rvo),e(cb,MP),e(MP,Svo),e(cb,Pvo),e(A,$vo),e(A,fb),e(fb,Aee),e(Aee,Ivo),e(fb,jvo),e(fb,EP),e(EP,Nvo),e(fb,Dvo),e(A,qvo),e(A,mb),e(mb,Lee),e(Lee,Gvo),e(mb,Ovo),e(mb,yP),e(yP,Xvo),e(mb,zvo),e(A,Vvo),e(A,gb),e(gb,Bee),e(Bee,Wvo),e(gb,Qvo),e(gb,wP),e(wP,Hvo),e(gb,Uvo),e(A,Jvo),e(A,hb),e(hb,xee),e(xee,Yvo),e(hb,Kvo),e(hb,AP),e(AP,Zvo),e(hb,eTo),e(A,oTo),e(A,ub),e(ub,kee),e(kee,tTo),e(ub,rTo),e(ub,LP),e(LP,aTo),e(ub,sTo),e(A,nTo),e(A,pb),e(pb,Ree),e(Ree,lTo),e(pb,dTo),e(pb,BP),e(BP,iTo),e(pb,cTo),e(A,fTo),e(A,_b),e(_b,See),e(See,mTo),e(_b,gTo),e(_b,xP),e(xP,hTo),e(_b,uTo),e(A,pTo),e(A,bb),e(bb,Pee),e(Pee,_To),e(bb,bTo),e(bb,kP),e(kP,vTo),e(bb,TTo),e(A,FTo),e(A,vb),e(vb,$ee),e($ee,CTo),e(vb,MTo),e(vb,RP),e(RP,ETo),e(vb,yTo),e(A,wTo),e(A,Tb),e(Tb,Iee),e(Iee,ATo),e(Tb,LTo),e(Tb,SP),e(SP,BTo),e(Tb,xTo),e(A,kTo),e(A,Fb),e(Fb,jee),e(jee,RTo),e(Fb,STo),e(Fb,PP),e(PP,PTo),e(Fb,$To),e(A,ITo),e(A,Cb),e(Cb,Nee),e(Nee,jTo),e(Cb,NTo),e(Cb,$P),e($P,DTo),e(Cb,qTo),e(A,GTo),e(A,Mb),e(Mb,Dee),e(Dee,OTo),e(Mb,XTo),e(Mb,IP),e(IP,zTo),e(Mb,VTo),e(A,WTo),e(A,Eb),e(Eb,qee),e(qee,QTo),e(Eb,HTo),e(Eb,jP),e(jP,UTo),e(Eb,JTo),e(A,YTo),e(A,yb),e(yb,Gee),e(Gee,KTo),e(yb,ZTo),e(yb,NP),e(NP,e1o),e(yb,o1o),e(A,t1o),e(A,wb),e(wb,Oee),e(Oee,r1o),e(wb,a1o),e(wb,DP),e(DP,s1o),e(wb,n1o),e(A,l1o),e(A,Ab),e(Ab,Xee),e(Xee,d1o),e(Ab,i1o),e(Ab,qP),e(qP,c1o),e(Ab,f1o),e(A,m1o),e(A,Lb),e(Lb,zee),e(zee,g1o),e(Lb,h1o),e(Lb,GP),e(GP,u1o),e(Lb,p1o),e(A,_1o),e(A,Bb),e(Bb,Vee),e(Vee,b1o),e(Bb,v1o),e(Bb,OP),e(OP,T1o),e(Bb,F1o),e(A,C1o),e(A,xb),e(xb,Wee),e(Wee,M1o),e(xb,E1o),e(xb,XP),e(XP,y1o),e(xb,w1o),e(A,A1o),e(A,kb),e(kb,Qee),e(Qee,L1o),e(kb,B1o),e(kb,zP),e(zP,x1o),e(kb,k1o),e(A,R1o),e(A,Rb),e(Rb,Hee),e(Hee,S1o),e(Rb,P1o),e(Rb,VP),e(VP,$1o),e(Rb,I1o),e(A,j1o),e(A,Sb),e(Sb,Uee),e(Uee,N1o),e(Sb,D1o),e(Sb,WP),e(WP,q1o),e(Sb,G1o),e(A,O1o),e(A,Pb),e(Pb,Jee),e(Jee,X1o),e(Pb,z1o),e(Pb,QP),e(QP,V1o),e(Pb,W1o),e(A,Q1o),e(A,$b),e($b,Yee),e(Yee,H1o),e($b,U1o),e($b,HP),e(HP,J1o),e($b,Y1o),e(A,K1o),e(A,Ib),e(Ib,Kee),e(Kee,Z1o),e(Ib,eFo),e(Ib,UP),e(UP,oFo),e(Ib,tFo),e(A,rFo),e(A,jb),e(jb,Zee),e(Zee,aFo),e(jb,sFo),e(jb,JP),e(JP,nFo),e(jb,lFo),e(A,dFo),e(A,Nb),e(Nb,eoe),e(eoe,iFo),e(Nb,cFo),e(Nb,YP),e(YP,fFo),e(Nb,mFo),e(A,gFo),e(A,Db),e(Db,ooe),e(ooe,hFo),e(Db,uFo),e(Db,KP),e(KP,pFo),e(Db,_Fo),e(A,bFo),e(A,qb),e(qb,toe),e(toe,vFo),e(qb,TFo),e(qb,ZP),e(ZP,FFo),e(qb,CFo),e(A,MFo),e(A,Gb),e(Gb,roe),e(roe,EFo),e(Gb,yFo),e(Gb,e$),e(e$,wFo),e(Gb,AFo),e(A,LFo),e(A,Ob),e(Ob,aoe),e(aoe,BFo),e(Ob,xFo),e(Ob,o$),e(o$,kFo),e(Ob,RFo),e(A,SFo),e(A,Xb),e(Xb,soe),e(soe,PFo),e(Xb,$Fo),e(Xb,t$),e(t$,IFo),e(Xb,jFo),e($e,NFo),e($e,zb),e(zb,DFo),e(zb,noe),e(noe,qFo),e(zb,GFo),e(zb,loe),e(loe,OFo),e($e,XFo),e($e,doe),e(doe,zFo),e($e,VFo),g(Q5,$e,null),b(i,qLe,_),b(i,Jd,_),e(Jd,Vb),e(Vb,ioe),g(H5,ioe,null),e(Jd,WFo),e(Jd,coe),e(coe,QFo),b(i,GLe,_),b(i,Uo,_),g(U5,Uo,null),e(Uo,HFo),e(Uo,Yd),e(Yd,UFo),e(Yd,foe),e(foe,JFo),e(Yd,YFo),e(Yd,moe),e(moe,KFo),e(Yd,ZFo),e(Uo,eCo),e(Uo,J5),e(J5,oCo),e(J5,goe),e(goe,tCo),e(J5,rCo),e(Uo,aCo),e(Uo,Gt),g(Y5,Gt,null),e(Gt,sCo),e(Gt,hoe),e(hoe,nCo),e(Gt,lCo),e(Gt,Kd),e(Kd,dCo),e(Kd,uoe),e(uoe,iCo),e(Kd,cCo),e(Kd,poe),e(poe,fCo),e(Kd,mCo),e(Gt,gCo),e(Gt,_oe),e(_oe,hCo),e(Gt,uCo),g(K5,Gt,null),e(Uo,pCo),e(Uo,Ie),g(Z5,Ie,null),e(Ie,_Co),e(Ie,boe),e(boe,bCo),e(Ie,vCo),e(Ie,Ga),e(Ga,TCo),e(Ga,voe),e(voe,FCo),e(Ga,CCo),e(Ga,Toe),e(Toe,MCo),e(Ga,ECo),e(Ga,Foe),e(Foe,yCo),e(Ga,wCo),e(Ie,ACo),e(Ie,G),e(G,Wb),e(Wb,Coe),e(Coe,LCo),e(Wb,BCo),e(Wb,r$),e(r$,xCo),e(Wb,kCo),e(G,RCo),e(G,Qb),e(Qb,Moe),e(Moe,SCo),e(Qb,PCo),e(Qb,a$),e(a$,$Co),e(Qb,ICo),e(G,jCo),e(G,Hb),e(Hb,Eoe),e(Eoe,NCo),e(Hb,DCo),e(Hb,s$),e(s$,qCo),e(Hb,GCo),e(G,OCo),e(G,Ub),e(Ub,yoe),e(yoe,XCo),e(Ub,zCo),e(Ub,n$),e(n$,VCo),e(Ub,WCo),e(G,QCo),e(G,Jb),e(Jb,woe),e(woe,HCo),e(Jb,UCo),e(Jb,l$),e(l$,JCo),e(Jb,YCo),e(G,KCo),e(G,Yb),e(Yb,Aoe),e(Aoe,ZCo),e(Yb,e4o),e(Yb,d$),e(d$,o4o),e(Yb,t4o),e(G,r4o),e(G,Kb),e(Kb,Loe),e(Loe,a4o),e(Kb,s4o),e(Kb,i$),e(i$,n4o),e(Kb,l4o),e(G,d4o),e(G,Zb),e(Zb,Boe),e(Boe,i4o),e(Zb,c4o),e(Zb,c$),e(c$,f4o),e(Zb,m4o),e(G,g4o),e(G,e2),e(e2,xoe),e(xoe,h4o),e(e2,u4o),e(e2,f$),e(f$,p4o),e(e2,_4o),e(G,b4o),e(G,o2),e(o2,koe),e(koe,v4o),e(o2,T4o),e(o2,m$),e(m$,F4o),e(o2,C4o),e(G,M4o),e(G,t2),e(t2,Roe),e(Roe,E4o),e(t2,y4o),e(t2,g$),e(g$,w4o),e(t2,A4o),e(G,L4o),e(G,r2),e(r2,Soe),e(Soe,B4o),e(r2,x4o),e(r2,h$),e(h$,k4o),e(r2,R4o),e(G,S4o),e(G,a2),e(a2,Poe),e(Poe,P4o),e(a2,$4o),e(a2,u$),e(u$,I4o),e(a2,j4o),e(G,N4o),e(G,s2),e(s2,$oe),e($oe,D4o),e(s2,q4o),e(s2,p$),e(p$,G4o),e(s2,O4o),e(G,X4o),e(G,n2),e(n2,Ioe),e(Ioe,z4o),e(n2,V4o),e(n2,_$),e(_$,W4o),e(n2,Q4o),e(G,H4o),e(G,l2),e(l2,joe),e(joe,U4o),e(l2,J4o),e(l2,b$),e(b$,Y4o),e(l2,K4o),e(G,Z4o),e(G,d2),e(d2,Noe),e(Noe,eMo),e(d2,oMo),e(d2,v$),e(v$,tMo),e(d2,rMo),e(G,aMo),e(G,i2),e(i2,Doe),e(Doe,sMo),e(i2,nMo),e(i2,T$),e(T$,lMo),e(i2,dMo),e(G,iMo),e(G,c2),e(c2,qoe),e(qoe,cMo),e(c2,fMo),e(c2,F$),e(F$,mMo),e(c2,gMo),e(G,hMo),e(G,f2),e(f2,Goe),e(Goe,uMo),e(f2,pMo),e(f2,C$),e(C$,_Mo),e(f2,bMo),e(G,vMo),e(G,m2),e(m2,Ooe),e(Ooe,TMo),e(m2,FMo),e(m2,M$),e(M$,CMo),e(m2,MMo),e(G,EMo),e(G,g2),e(g2,Xoe),e(Xoe,yMo),e(g2,wMo),e(g2,E$),e(E$,AMo),e(g2,LMo),e(G,BMo),e(G,h2),e(h2,zoe),e(zoe,xMo),e(h2,kMo),e(h2,y$),e(y$,RMo),e(h2,SMo),e(G,PMo),e(G,u2),e(u2,Voe),e(Voe,$Mo),e(u2,IMo),e(u2,w$),e(w$,jMo),e(u2,NMo),e(G,DMo),e(G,p2),e(p2,Woe),e(Woe,qMo),e(p2,GMo),e(p2,A$),e(A$,OMo),e(p2,XMo),e(G,zMo),e(G,_2),e(_2,Qoe),e(Qoe,VMo),e(_2,WMo),e(_2,L$),e(L$,QMo),e(_2,HMo),e(G,UMo),e(G,b2),e(b2,Hoe),e(Hoe,JMo),e(b2,YMo),e(b2,B$),e(B$,KMo),e(b2,ZMo),e(Ie,eEo),e(Ie,v2),e(v2,oEo),e(v2,Uoe),e(Uoe,tEo),e(v2,rEo),e(v2,Joe),e(Joe,aEo),e(Ie,sEo),e(Ie,Yoe),e(Yoe,nEo),e(Ie,lEo),g(ey,Ie,null),b(i,OLe,_),b(i,Zd,_),e(Zd,T2),e(T2,Koe),g(oy,Koe,null),e(Zd,dEo),e(Zd,Zoe),e(Zoe,iEo),b(i,XLe,_),b(i,Jo,_),g(ty,Jo,null),e(Jo,cEo),e(Jo,ei),e(ei,fEo),e(ei,ete),e(ete,mEo),e(ei,gEo),e(ei,ote),e(ote,hEo),e(ei,uEo),e(Jo,pEo),e(Jo,ry),e(ry,_Eo),e(ry,tte),e(tte,bEo),e(ry,vEo),e(Jo,TEo),e(Jo,Ot),g(ay,Ot,null),e(Ot,FEo),e(Ot,rte),e(rte,CEo),e(Ot,MEo),e(Ot,oi),e(oi,EEo),e(oi,ate),e(ate,yEo),e(oi,wEo),e(oi,ste),e(ste,AEo),e(oi,LEo),e(Ot,BEo),e(Ot,nte),e(nte,xEo),e(Ot,kEo),g(sy,Ot,null),e(Jo,REo),e(Jo,je),g(ny,je,null),e(je,SEo),e(je,lte),e(lte,PEo),e(je,$Eo),e(je,Oa),e(Oa,IEo),e(Oa,dte),e(dte,jEo),e(Oa,NEo),e(Oa,ite),e(ite,DEo),e(Oa,qEo),e(Oa,cte),e(cte,GEo),e(Oa,OEo),e(je,XEo),e(je,oa),e(oa,F2),e(F2,fte),e(fte,zEo),e(F2,VEo),e(F2,x$),e(x$,WEo),e(F2,QEo),e(oa,HEo),e(oa,C2),e(C2,mte),e(mte,UEo),e(C2,JEo),e(C2,k$),e(k$,YEo),e(C2,KEo),e(oa,ZEo),e(oa,M2),e(M2,gte),e(gte,e3o),e(M2,o3o),e(M2,R$),e(R$,t3o),e(M2,r3o),e(oa,a3o),e(oa,E2),e(E2,hte),e(hte,s3o),e(E2,n3o),e(E2,S$),e(S$,l3o),e(E2,d3o),e(oa,i3o),e(oa,y2),e(y2,ute),e(ute,c3o),e(y2,f3o),e(y2,P$),e(P$,m3o),e(y2,g3o),e(je,h3o),e(je,w2),e(w2,u3o),e(w2,pte),e(pte,p3o),e(w2,_3o),e(w2,_te),e(_te,b3o),e(je,v3o),e(je,bte),e(bte,T3o),e(je,F3o),g(ly,je,null),b(i,zLe,_),b(i,ti,_),e(ti,A2),e(A2,vte),g(dy,vte,null),e(ti,C3o),e(ti,Tte),e(Tte,M3o),b(i,VLe,_),b(i,Yo,_),g(iy,Yo,null),e(Yo,E3o),e(Yo,ri),e(ri,y3o),e(ri,Fte),e(Fte,w3o),e(ri,A3o),e(ri,Cte),e(Cte,L3o),e(ri,B3o),e(Yo,x3o),e(Yo,cy),e(cy,k3o),e(cy,Mte),e(Mte,R3o),e(cy,S3o),e(Yo,P3o),e(Yo,Xt),g(fy,Xt,null),e(Xt,$3o),e(Xt,Ete),e(Ete,I3o),e(Xt,j3o),e(Xt,ai),e(ai,N3o),e(ai,yte),e(yte,D3o),e(ai,q3o),e(ai,wte),e(wte,G3o),e(ai,O3o),e(Xt,X3o),e(Xt,Ate),e(Ate,z3o),e(Xt,V3o),g(my,Xt,null),e(Yo,W3o),e(Yo,Ne),g(gy,Ne,null),e(Ne,Q3o),e(Ne,Lte),e(Lte,H3o),e(Ne,U3o),e(Ne,Xa),e(Xa,J3o),e(Xa,Bte),e(Bte,Y3o),e(Xa,K3o),e(Xa,xte),e(xte,Z3o),e(Xa,e5o),e(Xa,kte),e(kte,o5o),e(Xa,t5o),e(Ne,r5o),e(Ne,N),e(N,L2),e(L2,Rte),e(Rte,a5o),e(L2,s5o),e(L2,$$),e($$,n5o),e(L2,l5o),e(N,d5o),e(N,B2),e(B2,Ste),e(Ste,i5o),e(B2,c5o),e(B2,I$),e(I$,f5o),e(B2,m5o),e(N,g5o),e(N,x2),e(x2,Pte),e(Pte,h5o),e(x2,u5o),e(x2,j$),e(j$,p5o),e(x2,_5o),e(N,b5o),e(N,k2),e(k2,$te),e($te,v5o),e(k2,T5o),e(k2,N$),e(N$,F5o),e(k2,C5o),e(N,M5o),e(N,R2),e(R2,Ite),e(Ite,E5o),e(R2,y5o),e(R2,D$),e(D$,w5o),e(R2,A5o),e(N,L5o),e(N,S2),e(S2,jte),e(jte,B5o),e(S2,x5o),e(S2,q$),e(q$,k5o),e(S2,R5o),e(N,S5o),e(N,P2),e(P2,Nte),e(Nte,P5o),e(P2,$5o),e(P2,G$),e(G$,I5o),e(P2,j5o),e(N,N5o),e(N,$2),e($2,Dte),e(Dte,D5o),e($2,q5o),e($2,O$),e(O$,G5o),e($2,O5o),e(N,X5o),e(N,I2),e(I2,qte),e(qte,z5o),e(I2,V5o),e(I2,X$),e(X$,W5o),e(I2,Q5o),e(N,H5o),e(N,j2),e(j2,Gte),e(Gte,U5o),e(j2,J5o),e(j2,z$),e(z$,Y5o),e(j2,K5o),e(N,Z5o),e(N,N2),e(N2,Ote),e(Ote,eyo),e(N2,oyo),e(N2,V$),e(V$,tyo),e(N2,ryo),e(N,ayo),e(N,D2),e(D2,Xte),e(Xte,syo),e(D2,nyo),e(D2,W$),e(W$,lyo),e(D2,dyo),e(N,iyo),e(N,q2),e(q2,zte),e(zte,cyo),e(q2,fyo),e(q2,Q$),e(Q$,myo),e(q2,gyo),e(N,hyo),e(N,G2),e(G2,Vte),e(Vte,uyo),e(G2,pyo),e(G2,H$),e(H$,_yo),e(G2,byo),e(N,vyo),e(N,O2),e(O2,Wte),e(Wte,Tyo),e(O2,Fyo),e(O2,U$),e(U$,Cyo),e(O2,Myo),e(N,Eyo),e(N,X2),e(X2,Qte),e(Qte,yyo),e(X2,wyo),e(X2,J$),e(J$,Ayo),e(X2,Lyo),e(N,Byo),e(N,z2),e(z2,Hte),e(Hte,xyo),e(z2,kyo),e(z2,Y$),e(Y$,Ryo),e(z2,Syo),e(N,Pyo),e(N,V2),e(V2,Ute),e(Ute,$yo),e(V2,Iyo),e(V2,K$),e(K$,jyo),e(V2,Nyo),e(N,Dyo),e(N,W2),e(W2,Jte),e(Jte,qyo),e(W2,Gyo),e(W2,Z$),e(Z$,Oyo),e(W2,Xyo),e(N,zyo),e(N,Q2),e(Q2,Yte),e(Yte,Vyo),e(Q2,Wyo),e(Q2,eI),e(eI,Qyo),e(Q2,Hyo),e(N,Uyo),e(N,H2),e(H2,Kte),e(Kte,Jyo),e(H2,Yyo),e(H2,oI),e(oI,Kyo),e(H2,Zyo),e(N,ewo),e(N,U2),e(U2,Zte),e(Zte,owo),e(U2,two),e(U2,tI),e(tI,rwo),e(U2,awo),e(N,swo),e(N,J2),e(J2,ere),e(ere,nwo),e(J2,lwo),e(J2,rI),e(rI,dwo),e(J2,iwo),e(N,cwo),e(N,Y2),e(Y2,ore),e(ore,fwo),e(Y2,mwo),e(Y2,aI),e(aI,gwo),e(Y2,hwo),e(N,uwo),e(N,K2),e(K2,tre),e(tre,pwo),e(K2,_wo),e(K2,sI),e(sI,bwo),e(K2,vwo),e(N,Two),e(N,Z2),e(Z2,rre),e(rre,Fwo),e(Z2,Cwo),e(Z2,nI),e(nI,Mwo),e(Z2,Ewo),e(N,ywo),e(N,ev),e(ev,are),e(are,wwo),e(ev,Awo),e(ev,lI),e(lI,Lwo),e(ev,Bwo),e(N,xwo),e(N,ov),e(ov,sre),e(sre,kwo),e(ov,Rwo),e(ov,dI),e(dI,Swo),e(ov,Pwo),e(N,$wo),e(N,tv),e(tv,nre),e(nre,Iwo),e(tv,jwo),e(tv,iI),e(iI,Nwo),e(tv,Dwo),e(N,qwo),e(N,rv),e(rv,lre),e(lre,Gwo),e(rv,Owo),e(rv,cI),e(cI,Xwo),e(rv,zwo),e(N,Vwo),e(N,av),e(av,dre),e(dre,Wwo),e(av,Qwo),e(av,fI),e(fI,Hwo),e(av,Uwo),e(N,Jwo),e(N,sv),e(sv,ire),e(ire,Ywo),e(sv,Kwo),e(sv,mI),e(mI,Zwo),e(sv,eAo),e(Ne,oAo),e(Ne,nv),e(nv,tAo),e(nv,cre),e(cre,rAo),e(nv,aAo),e(nv,fre),e(fre,sAo),e(Ne,nAo),e(Ne,mre),e(mre,lAo),e(Ne,dAo),g(hy,Ne,null),b(i,WLe,_),b(i,si,_),e(si,lv),e(lv,gre),g(uy,gre,null),e(si,iAo),e(si,hre),e(hre,cAo),b(i,QLe,_),b(i,Ko,_),g(py,Ko,null),e(Ko,fAo),e(Ko,ni),e(ni,mAo),e(ni,ure),e(ure,gAo),e(ni,hAo),e(ni,pre),e(pre,uAo),e(ni,pAo),e(Ko,_Ao),e(Ko,_y),e(_y,bAo),e(_y,_re),e(_re,vAo),e(_y,TAo),e(Ko,FAo),e(Ko,zt),g(by,zt,null),e(zt,CAo),e(zt,bre),e(bre,MAo),e(zt,EAo),e(zt,li),e(li,yAo),e(li,vre),e(vre,wAo),e(li,AAo),e(li,Tre),e(Tre,LAo),e(li,BAo),e(zt,xAo),e(zt,Fre),e(Fre,kAo),e(zt,RAo),g(vy,zt,null),e(Ko,SAo),e(Ko,De),g(Ty,De,null),e(De,PAo),e(De,Cre),e(Cre,$Ao),e(De,IAo),e(De,za),e(za,jAo),e(za,Mre),e(Mre,NAo),e(za,DAo),e(za,Ere),e(Ere,qAo),e(za,GAo),e(za,yre),e(yre,OAo),e(za,XAo),e(De,zAo),e(De,R),e(R,dv),e(dv,wre),e(wre,VAo),e(dv,WAo),e(dv,gI),e(gI,QAo),e(dv,HAo),e(R,UAo),e(R,iv),e(iv,Are),e(Are,JAo),e(iv,YAo),e(iv,hI),e(hI,KAo),e(iv,ZAo),e(R,e0o),e(R,cv),e(cv,Lre),e(Lre,o0o),e(cv,t0o),e(cv,uI),e(uI,r0o),e(cv,a0o),e(R,s0o),e(R,fv),e(fv,Bre),e(Bre,n0o),e(fv,l0o),e(fv,pI),e(pI,d0o),e(fv,i0o),e(R,c0o),e(R,mv),e(mv,xre),e(xre,f0o),e(mv,m0o),e(mv,_I),e(_I,g0o),e(mv,h0o),e(R,u0o),e(R,gv),e(gv,kre),e(kre,p0o),e(gv,_0o),e(gv,bI),e(bI,b0o),e(gv,v0o),e(R,T0o),e(R,hv),e(hv,Rre),e(Rre,F0o),e(hv,C0o),e(hv,vI),e(vI,M0o),e(hv,E0o),e(R,y0o),e(R,uv),e(uv,Sre),e(Sre,w0o),e(uv,A0o),e(uv,TI),e(TI,L0o),e(uv,B0o),e(R,x0o),e(R,pv),e(pv,Pre),e(Pre,k0o),e(pv,R0o),e(pv,FI),e(FI,S0o),e(pv,P0o),e(R,$0o),e(R,_v),e(_v,$re),e($re,I0o),e(_v,j0o),e(_v,CI),e(CI,N0o),e(_v,D0o),e(R,q0o),e(R,bv),e(bv,Ire),e(Ire,G0o),e(bv,O0o),e(bv,MI),e(MI,X0o),e(bv,z0o),e(R,V0o),e(R,vv),e(vv,jre),e(jre,W0o),e(vv,Q0o),e(vv,EI),e(EI,H0o),e(vv,U0o),e(R,J0o),e(R,Tv),e(Tv,Nre),e(Nre,Y0o),e(Tv,K0o),e(Tv,yI),e(yI,Z0o),e(Tv,e6o),e(R,o6o),e(R,Fv),e(Fv,Dre),e(Dre,t6o),e(Fv,r6o),e(Fv,wI),e(wI,a6o),e(Fv,s6o),e(R,n6o),e(R,Cv),e(Cv,qre),e(qre,l6o),e(Cv,d6o),e(Cv,AI),e(AI,i6o),e(Cv,c6o),e(R,f6o),e(R,Mv),e(Mv,Gre),e(Gre,m6o),e(Mv,g6o),e(Mv,LI),e(LI,h6o),e(Mv,u6o),e(R,p6o),e(R,Ev),e(Ev,Ore),e(Ore,_6o),e(Ev,b6o),e(Ev,BI),e(BI,v6o),e(Ev,T6o),e(R,F6o),e(R,yv),e(yv,Xre),e(Xre,C6o),e(yv,M6o),e(yv,xI),e(xI,E6o),e(yv,y6o),e(R,w6o),e(R,wv),e(wv,zre),e(zre,A6o),e(wv,L6o),e(wv,kI),e(kI,B6o),e(wv,x6o),e(R,k6o),e(R,Av),e(Av,Vre),e(Vre,R6o),e(Av,S6o),e(Av,RI),e(RI,P6o),e(Av,$6o),e(R,I6o),e(R,Lv),e(Lv,Wre),e(Wre,j6o),e(Lv,N6o),e(Lv,SI),e(SI,D6o),e(Lv,q6o),e(R,G6o),e(R,Bv),e(Bv,Qre),e(Qre,O6o),e(Bv,X6o),e(Bv,PI),e(PI,z6o),e(Bv,V6o),e(R,W6o),e(R,xv),e(xv,Hre),e(Hre,Q6o),e(xv,H6o),e(xv,$I),e($I,U6o),e(xv,J6o),e(R,Y6o),e(R,kv),e(kv,Ure),e(Ure,K6o),e(kv,Z6o),e(kv,II),e(II,eLo),e(kv,oLo),e(R,tLo),e(R,Rv),e(Rv,Jre),e(Jre,rLo),e(Rv,aLo),e(Rv,jI),e(jI,sLo),e(Rv,nLo),e(R,lLo),e(R,Sv),e(Sv,Yre),e(Yre,dLo),e(Sv,iLo),e(Sv,NI),e(NI,cLo),e(Sv,fLo),e(R,mLo),e(R,Pv),e(Pv,Kre),e(Kre,gLo),e(Pv,hLo),e(Pv,DI),e(DI,uLo),e(Pv,pLo),e(R,_Lo),e(R,$v),e($v,Zre),e(Zre,bLo),e($v,vLo),e($v,qI),e(qI,TLo),e($v,FLo),e(R,CLo),e(R,Iv),e(Iv,eae),e(eae,MLo),e(Iv,ELo),e(Iv,GI),e(GI,yLo),e(Iv,wLo),e(R,ALo),e(R,jv),e(jv,oae),e(oae,LLo),e(jv,BLo),e(jv,OI),e(OI,xLo),e(jv,kLo),e(R,RLo),e(R,Nv),e(Nv,tae),e(tae,SLo),e(Nv,PLo),e(Nv,XI),e(XI,$Lo),e(Nv,ILo),e(R,jLo),e(R,Dv),e(Dv,rae),e(rae,NLo),e(Dv,DLo),e(Dv,zI),e(zI,qLo),e(Dv,GLo),e(R,OLo),e(R,qv),e(qv,aae),e(aae,XLo),e(qv,zLo),e(qv,VI),e(VI,VLo),e(qv,WLo),e(R,QLo),e(R,Gv),e(Gv,sae),e(sae,HLo),e(Gv,ULo),e(Gv,WI),e(WI,JLo),e(Gv,YLo),e(R,KLo),e(R,Ov),e(Ov,nae),e(nae,ZLo),e(Ov,e7o),e(Ov,QI),e(QI,o7o),e(Ov,t7o),e(R,r7o),e(R,Xv),e(Xv,lae),e(lae,a7o),e(Xv,s7o),e(Xv,HI),e(HI,n7o),e(Xv,l7o),e(R,d7o),e(R,zv),e(zv,dae),e(dae,i7o),e(zv,c7o),e(zv,UI),e(UI,f7o),e(zv,m7o),e(R,g7o),e(R,Vv),e(Vv,iae),e(iae,h7o),e(Vv,u7o),e(Vv,JI),e(JI,p7o),e(Vv,_7o),e(De,b7o),e(De,Wv),e(Wv,v7o),e(Wv,cae),e(cae,T7o),e(Wv,F7o),e(Wv,fae),e(fae,C7o),e(De,M7o),e(De,mae),e(mae,E7o),e(De,y7o),g(Fy,De,null),b(i,HLe,_),b(i,di,_),e(di,Qv),e(Qv,gae),g(Cy,gae,null),e(di,w7o),e(di,hae),e(hae,A7o),b(i,ULe,_),b(i,Zo,_),g(My,Zo,null),e(Zo,L7o),e(Zo,ii),e(ii,B7o),e(ii,uae),e(uae,x7o),e(ii,k7o),e(ii,pae),e(pae,R7o),e(ii,S7o),e(Zo,P7o),e(Zo,Ey),e(Ey,$7o),e(Ey,_ae),e(_ae,I7o),e(Ey,j7o),e(Zo,N7o),e(Zo,Vt),g(yy,Vt,null),e(Vt,D7o),e(Vt,bae),e(bae,q7o),e(Vt,G7o),e(Vt,ci),e(ci,O7o),e(ci,vae),e(vae,X7o),e(ci,z7o),e(ci,Tae),e(Tae,V7o),e(ci,W7o),e(Vt,Q7o),e(Vt,Fae),e(Fae,H7o),e(Vt,U7o),g(wy,Vt,null),e(Zo,J7o),e(Zo,qe),g(Ay,qe,null),e(qe,Y7o),e(qe,Cae),e(Cae,K7o),e(qe,Z7o),e(qe,Va),e(Va,e8o),e(Va,Mae),e(Mae,o8o),e(Va,t8o),e(Va,Eae),e(Eae,r8o),e(Va,a8o),e(Va,yae),e(yae,s8o),e(Va,n8o),e(qe,l8o),e(qe,wae),e(wae,Hv),e(Hv,Aae),e(Aae,d8o),e(Hv,i8o),e(Hv,YI),e(YI,c8o),e(Hv,f8o),e(qe,m8o),e(qe,Uv),e(Uv,g8o),e(Uv,Lae),e(Lae,h8o),e(Uv,u8o),e(Uv,Bae),e(Bae,p8o),e(qe,_8o),e(qe,xae),e(xae,b8o),e(qe,v8o),g(Ly,qe,null),b(i,JLe,_),b(i,fi,_),e(fi,Jv),e(Jv,kae),g(By,kae,null),e(fi,T8o),e(fi,Rae),e(Rae,F8o),b(i,YLe,_),b(i,et,_),g(xy,et,null),e(et,C8o),e(et,mi),e(mi,M8o),e(mi,Sae),e(Sae,E8o),e(mi,y8o),e(mi,Pae),e(Pae,w8o),e(mi,A8o),e(et,L8o),e(et,ky),e(ky,B8o),e(ky,$ae),e($ae,x8o),e(ky,k8o),e(et,R8o),e(et,Wt),g(Ry,Wt,null),e(Wt,S8o),e(Wt,Iae),e(Iae,P8o),e(Wt,$8o),e(Wt,gi),e(gi,I8o),e(gi,jae),e(jae,j8o),e(gi,N8o),e(gi,Nae),e(Nae,D8o),e(gi,q8o),e(Wt,G8o),e(Wt,Dae),e(Dae,O8o),e(Wt,X8o),g(Sy,Wt,null),e(et,z8o),e(et,Ge),g(Py,Ge,null),e(Ge,V8o),e(Ge,qae),e(qae,W8o),e(Ge,Q8o),e(Ge,Wa),e(Wa,H8o),e(Wa,Gae),e(Gae,U8o),e(Wa,J8o),e(Wa,Oae),e(Oae,Y8o),e(Wa,K8o),e(Wa,Xae),e(Xae,Z8o),e(Wa,e9o),e(Ge,o9o),e(Ge,we),e(we,Yv),e(Yv,zae),e(zae,t9o),e(Yv,r9o),e(Yv,KI),e(KI,a9o),e(Yv,s9o),e(we,n9o),e(we,Kv),e(Kv,Vae),e(Vae,l9o),e(Kv,d9o),e(Kv,ZI),e(ZI,i9o),e(Kv,c9o),e(we,f9o),e(we,An),e(An,Wae),e(Wae,m9o),e(An,g9o),e(An,ej),e(ej,h9o),e(An,u9o),e(An,oj),e(oj,p9o),e(An,_9o),e(we,b9o),e(we,Zv),e(Zv,Qae),e(Qae,v9o),e(Zv,T9o),e(Zv,tj),e(tj,F9o),e(Zv,C9o),e(we,M9o),e(we,ra),e(ra,Hae),e(Hae,E9o),e(ra,y9o),e(ra,rj),e(rj,w9o),e(ra,A9o),e(ra,aj),e(aj,L9o),e(ra,B9o),e(ra,sj),e(sj,x9o),e(ra,k9o),e(we,R9o),e(we,eT),e(eT,Uae),e(Uae,S9o),e(eT,P9o),e(eT,nj),e(nj,$9o),e(eT,I9o),e(we,j9o),e(we,oT),e(oT,Jae),e(Jae,N9o),e(oT,D9o),e(oT,lj),e(lj,q9o),e(oT,G9o),e(we,O9o),e(we,tT),e(tT,Yae),e(Yae,X9o),e(tT,z9o),e(tT,dj),e(dj,V9o),e(tT,W9o),e(Ge,Q9o),e(Ge,rT),e(rT,H9o),e(rT,Kae),e(Kae,U9o),e(rT,J9o),e(rT,Zae),e(Zae,Y9o),e(Ge,K9o),e(Ge,ese),e(ese,Z9o),e(Ge,eBo),g($y,Ge,null),b(i,KLe,_),b(i,hi,_),e(hi,aT),e(aT,ose),g(Iy,ose,null),e(hi,oBo),e(hi,tse),e(tse,tBo),b(i,ZLe,_),b(i,ot,_),g(jy,ot,null),e(ot,rBo),e(ot,ui),e(ui,aBo),e(ui,rse),e(rse,sBo),e(ui,nBo),e(ui,ase),e(ase,lBo),e(ui,dBo),e(ot,iBo),e(ot,Ny),e(Ny,cBo),e(Ny,sse),e(sse,fBo),e(Ny,mBo),e(ot,gBo),e(ot,Qt),g(Dy,Qt,null),e(Qt,hBo),e(Qt,nse),e(nse,uBo),e(Qt,pBo),e(Qt,pi),e(pi,_Bo),e(pi,lse),e(lse,bBo),e(pi,vBo),e(pi,dse),e(dse,TBo),e(pi,FBo),e(Qt,CBo),e(Qt,ise),e(ise,MBo),e(Qt,EBo),g(qy,Qt,null),e(ot,yBo),e(ot,Oe),g(Gy,Oe,null),e(Oe,wBo),e(Oe,cse),e(cse,ABo),e(Oe,LBo),e(Oe,Qa),e(Qa,BBo),e(Qa,fse),e(fse,xBo),e(Qa,kBo),e(Qa,mse),e(mse,RBo),e(Qa,SBo),e(Qa,gse),e(gse,PBo),e(Qa,$Bo),e(Oe,IBo),e(Oe,hse),e(hse,sT),e(sT,use),e(use,jBo),e(sT,NBo),e(sT,ij),e(ij,DBo),e(sT,qBo),e(Oe,GBo),e(Oe,nT),e(nT,OBo),e(nT,pse),e(pse,XBo),e(nT,zBo),e(nT,_se),e(_se,VBo),e(Oe,WBo),e(Oe,bse),e(bse,QBo),e(Oe,HBo),g(Oy,Oe,null),b(i,e7e,_),b(i,_i,_),e(_i,lT),e(lT,vse),g(Xy,vse,null),e(_i,UBo),e(_i,Tse),e(Tse,JBo),b(i,o7e,_),b(i,tt,_),g(zy,tt,null),e(tt,YBo),e(tt,bi),e(bi,KBo),e(bi,Fse),e(Fse,ZBo),e(bi,exo),e(bi,Cse),e(Cse,oxo),e(bi,txo),e(tt,rxo),e(tt,Vy),e(Vy,axo),e(Vy,Mse),e(Mse,sxo),e(Vy,nxo),e(tt,lxo),e(tt,Ht),g(Wy,Ht,null),e(Ht,dxo),e(Ht,Ese),e(Ese,ixo),e(Ht,cxo),e(Ht,vi),e(vi,fxo),e(vi,yse),e(yse,mxo),e(vi,gxo),e(vi,wse),e(wse,hxo),e(vi,uxo),e(Ht,pxo),e(Ht,Ase),e(Ase,_xo),e(Ht,bxo),g(Qy,Ht,null),e(tt,vxo),e(tt,Xe),g(Hy,Xe,null),e(Xe,Txo),e(Xe,Lse),e(Lse,Fxo),e(Xe,Cxo),e(Xe,Ha),e(Ha,Mxo),e(Ha,Bse),e(Bse,Exo),e(Ha,yxo),e(Ha,xse),e(xse,wxo),e(Ha,Axo),e(Ha,kse),e(kse,Lxo),e(Ha,Bxo),e(Xe,xxo),e(Xe,to),e(to,dT),e(dT,Rse),e(Rse,kxo),e(dT,Rxo),e(dT,cj),e(cj,Sxo),e(dT,Pxo),e(to,$xo),e(to,iT),e(iT,Sse),e(Sse,Ixo),e(iT,jxo),e(iT,fj),e(fj,Nxo),e(iT,Dxo),e(to,qxo),e(to,cT),e(cT,Pse),e(Pse,Gxo),e(cT,Oxo),e(cT,mj),e(mj,Xxo),e(cT,zxo),e(to,Vxo),e(to,fT),e(fT,$se),e($se,Wxo),e(fT,Qxo),e(fT,gj),e(gj,Hxo),e(fT,Uxo),e(to,Jxo),e(to,mT),e(mT,Ise),e(Ise,Yxo),e(mT,Kxo),e(mT,hj),e(hj,Zxo),e(mT,eko),e(to,oko),e(to,gT),e(gT,jse),e(jse,tko),e(gT,rko),e(gT,uj),e(uj,ako),e(gT,sko),e(to,nko),e(to,hT),e(hT,Nse),e(Nse,lko),e(hT,dko),e(hT,pj),e(pj,iko),e(hT,cko),e(Xe,fko),e(Xe,uT),e(uT,mko),e(uT,Dse),e(Dse,gko),e(uT,hko),e(uT,qse),e(qse,uko),e(Xe,pko),e(Xe,Gse),e(Gse,_ko),e(Xe,bko),g(Uy,Xe,null),b(i,t7e,_),b(i,Ti,_),e(Ti,pT),e(pT,Ose),g(Jy,Ose,null),e(Ti,vko),e(Ti,Xse),e(Xse,Tko),b(i,r7e,_),b(i,rt,_),g(Yy,rt,null),e(rt,Fko),e(rt,Fi),e(Fi,Cko),e(Fi,zse),e(zse,Mko),e(Fi,Eko),e(Fi,Vse),e(Vse,yko),e(Fi,wko),e(rt,Ako),e(rt,Ky),e(Ky,Lko),e(Ky,Wse),e(Wse,Bko),e(Ky,xko),e(rt,kko),e(rt,Ut),g(Zy,Ut,null),e(Ut,Rko),e(Ut,Qse),e(Qse,Sko),e(Ut,Pko),e(Ut,Ci),e(Ci,$ko),e(Ci,Hse),e(Hse,Iko),e(Ci,jko),e(Ci,Use),e(Use,Nko),e(Ci,Dko),e(Ut,qko),e(Ut,Jse),e(Jse,Gko),e(Ut,Oko),g(ew,Ut,null),e(rt,Xko),e(rt,ze),g(ow,ze,null),e(ze,zko),e(ze,Yse),e(Yse,Vko),e(ze,Wko),e(ze,Ua),e(Ua,Qko),e(Ua,Kse),e(Kse,Hko),e(Ua,Uko),e(Ua,Zse),e(Zse,Jko),e(Ua,Yko),e(Ua,ene),e(ene,Kko),e(Ua,Zko),e(ze,eRo),e(ze,Mi),e(Mi,_T),e(_T,one),e(one,oRo),e(_T,tRo),e(_T,_j),e(_j,rRo),e(_T,aRo),e(Mi,sRo),e(Mi,bT),e(bT,tne),e(tne,nRo),e(bT,lRo),e(bT,bj),e(bj,dRo),e(bT,iRo),e(Mi,cRo),e(Mi,vT),e(vT,rne),e(rne,fRo),e(vT,mRo),e(vT,vj),e(vj,gRo),e(vT,hRo),e(ze,uRo),e(ze,TT),e(TT,pRo),e(TT,ane),e(ane,_Ro),e(TT,bRo),e(TT,sne),e(sne,vRo),e(ze,TRo),e(ze,nne),e(nne,FRo),e(ze,CRo),g(tw,ze,null),b(i,a7e,_),b(i,Ei,_),e(Ei,FT),e(FT,lne),g(rw,lne,null),e(Ei,MRo),e(Ei,dne),e(dne,ERo),b(i,s7e,_),b(i,at,_),g(aw,at,null),e(at,yRo),e(at,yi),e(yi,wRo),e(yi,ine),e(ine,ARo),e(yi,LRo),e(yi,cne),e(cne,BRo),e(yi,xRo),e(at,kRo),e(at,sw),e(sw,RRo),e(sw,fne),e(fne,SRo),e(sw,PRo),e(at,$Ro),e(at,Jt),g(nw,Jt,null),e(Jt,IRo),e(Jt,mne),e(mne,jRo),e(Jt,NRo),e(Jt,wi),e(wi,DRo),e(wi,gne),e(gne,qRo),e(wi,GRo),e(wi,hne),e(hne,ORo),e(wi,XRo),e(Jt,zRo),e(Jt,une),e(une,VRo),e(Jt,WRo),g(lw,Jt,null),e(at,QRo),e(at,Ve),g(dw,Ve,null),e(Ve,HRo),e(Ve,pne),e(pne,URo),e(Ve,JRo),e(Ve,Ja),e(Ja,YRo),e(Ja,_ne),e(_ne,KRo),e(Ja,ZRo),e(Ja,bne),e(bne,eSo),e(Ja,oSo),e(Ja,vne),e(vne,tSo),e(Ja,rSo),e(Ve,aSo),e(Ve,ro),e(ro,CT),e(CT,Tne),e(Tne,sSo),e(CT,nSo),e(CT,Tj),e(Tj,lSo),e(CT,dSo),e(ro,iSo),e(ro,MT),e(MT,Fne),e(Fne,cSo),e(MT,fSo),e(MT,Fj),e(Fj,mSo),e(MT,gSo),e(ro,hSo),e(ro,ET),e(ET,Cne),e(Cne,uSo),e(ET,pSo),e(ET,Cj),e(Cj,_So),e(ET,bSo),e(ro,vSo),e(ro,yT),e(yT,Mne),e(Mne,TSo),e(yT,FSo),e(yT,Mj),e(Mj,CSo),e(yT,MSo),e(ro,ESo),e(ro,wT),e(wT,Ene),e(Ene,ySo),e(wT,wSo),e(wT,Ej),e(Ej,ASo),e(wT,LSo),e(ro,BSo),e(ro,AT),e(AT,yne),e(yne,xSo),e(AT,kSo),e(AT,yj),e(yj,RSo),e(AT,SSo),e(ro,PSo),e(ro,LT),e(LT,wne),e(wne,$So),e(LT,ISo),e(LT,wj),e(wj,jSo),e(LT,NSo),e(Ve,DSo),e(Ve,BT),e(BT,qSo),e(BT,Ane),e(Ane,GSo),e(BT,OSo),e(BT,Lne),e(Lne,XSo),e(Ve,zSo),e(Ve,Bne),e(Bne,VSo),e(Ve,WSo),g(iw,Ve,null),b(i,n7e,_),b(i,Ai,_),e(Ai,xT),e(xT,xne),g(cw,xne,null),e(Ai,QSo),e(Ai,kne),e(kne,HSo),b(i,l7e,_),b(i,st,_),g(fw,st,null),e(st,USo),e(st,Li),e(Li,JSo),e(Li,Rne),e(Rne,YSo),e(Li,KSo),e(Li,Sne),e(Sne,ZSo),e(Li,ePo),e(st,oPo),e(st,mw),e(mw,tPo),e(mw,Pne),e(Pne,rPo),e(mw,aPo),e(st,sPo),e(st,Yt),g(gw,Yt,null),e(Yt,nPo),e(Yt,$ne),e($ne,lPo),e(Yt,dPo),e(Yt,Bi),e(Bi,iPo),e(Bi,Ine),e(Ine,cPo),e(Bi,fPo),e(Bi,jne),e(jne,mPo),e(Bi,gPo),e(Yt,hPo),e(Yt,Nne),e(Nne,uPo),e(Yt,pPo),g(hw,Yt,null),e(st,_Po),e(st,We),g(uw,We,null),e(We,bPo),e(We,Dne),e(Dne,vPo),e(We,TPo),e(We,Ya),e(Ya,FPo),e(Ya,qne),e(qne,CPo),e(Ya,MPo),e(Ya,Gne),e(Gne,EPo),e(Ya,yPo),e(Ya,One),e(One,wPo),e(Ya,APo),e(We,LPo),e(We,pw),e(pw,kT),e(kT,Xne),e(Xne,BPo),e(kT,xPo),e(kT,Aj),e(Aj,kPo),e(kT,RPo),e(pw,SPo),e(pw,RT),e(RT,zne),e(zne,PPo),e(RT,$Po),e(RT,Lj),e(Lj,IPo),e(RT,jPo),e(We,NPo),e(We,ST),e(ST,DPo),e(ST,Vne),e(Vne,qPo),e(ST,GPo),e(ST,Wne),e(Wne,OPo),e(We,XPo),e(We,Qne),e(Qne,zPo),e(We,VPo),g(_w,We,null),b(i,d7e,_),b(i,xi,_),e(xi,PT),e(PT,Hne),g(bw,Hne,null),e(xi,WPo),e(xi,Une),e(Une,QPo),b(i,i7e,_),b(i,nt,_),g(vw,nt,null),e(nt,HPo),e(nt,ki),e(ki,UPo),e(ki,Jne),e(Jne,JPo),e(ki,YPo),e(ki,Yne),e(Yne,KPo),e(ki,ZPo),e(nt,e$o),e(nt,Tw),e(Tw,o$o),e(Tw,Kne),e(Kne,t$o),e(Tw,r$o),e(nt,a$o),e(nt,Kt),g(Fw,Kt,null),e(Kt,s$o),e(Kt,Zne),e(Zne,n$o),e(Kt,l$o),e(Kt,Ri),e(Ri,d$o),e(Ri,ele),e(ele,i$o),e(Ri,c$o),e(Ri,ole),e(ole,f$o),e(Ri,m$o),e(Kt,g$o),e(Kt,tle),e(tle,h$o),e(Kt,u$o),g(Cw,Kt,null),e(nt,p$o),e(nt,Qe),g(Mw,Qe,null),e(Qe,_$o),e(Qe,rle),e(rle,b$o),e(Qe,v$o),e(Qe,Ka),e(Ka,T$o),e(Ka,ale),e(ale,F$o),e(Ka,C$o),e(Ka,sle),e(sle,M$o),e(Ka,E$o),e(Ka,nle),e(nle,y$o),e(Ka,w$o),e(Qe,A$o),e(Qe,Si),e(Si,$T),e($T,lle),e(lle,L$o),e($T,B$o),e($T,Bj),e(Bj,x$o),e($T,k$o),e(Si,R$o),e(Si,IT),e(IT,dle),e(dle,S$o),e(IT,P$o),e(IT,xj),e(xj,$$o),e(IT,I$o),e(Si,j$o),e(Si,jT),e(jT,ile),e(ile,N$o),e(jT,D$o),e(jT,kj),e(kj,q$o),e(jT,G$o),e(Qe,O$o),e(Qe,NT),e(NT,X$o),e(NT,cle),e(cle,z$o),e(NT,V$o),e(NT,fle),e(fle,W$o),e(Qe,Q$o),e(Qe,mle),e(mle,H$o),e(Qe,U$o),g(Ew,Qe,null),b(i,c7e,_),b(i,Pi,_),e(Pi,DT),e(DT,gle),g(yw,gle,null),e(Pi,J$o),e(Pi,hle),e(hle,Y$o),b(i,f7e,_),b(i,lt,_),g(ww,lt,null),e(lt,K$o),e(lt,$i),e($i,Z$o),e($i,ule),e(ule,eIo),e($i,oIo),e($i,ple),e(ple,tIo),e($i,rIo),e(lt,aIo),e(lt,Aw),e(Aw,sIo),e(Aw,_le),e(_le,nIo),e(Aw,lIo),e(lt,dIo),e(lt,Zt),g(Lw,Zt,null),e(Zt,iIo),e(Zt,ble),e(ble,cIo),e(Zt,fIo),e(Zt,Ii),e(Ii,mIo),e(Ii,vle),e(vle,gIo),e(Ii,hIo),e(Ii,Tle),e(Tle,uIo),e(Ii,pIo),e(Zt,_Io),e(Zt,Fle),e(Fle,bIo),e(Zt,vIo),g(Bw,Zt,null),e(lt,TIo),e(lt,He),g(xw,He,null),e(He,FIo),e(He,Cle),e(Cle,CIo),e(He,MIo),e(He,Za),e(Za,EIo),e(Za,Mle),e(Mle,yIo),e(Za,wIo),e(Za,Ele),e(Ele,AIo),e(Za,LIo),e(Za,yle),e(yle,BIo),e(Za,xIo),e(He,kIo),e(He,wle),e(wle,qT),e(qT,Ale),e(Ale,RIo),e(qT,SIo),e(qT,Rj),e(Rj,PIo),e(qT,$Io),e(He,IIo),e(He,GT),e(GT,jIo),e(GT,Lle),e(Lle,NIo),e(GT,DIo),e(GT,Ble),e(Ble,qIo),e(He,GIo),e(He,xle),e(xle,OIo),e(He,XIo),g(kw,He,null),b(i,m7e,_),b(i,ji,_),e(ji,OT),e(OT,kle),g(Rw,kle,null),e(ji,zIo),e(ji,Rle),e(Rle,VIo),b(i,g7e,_),b(i,dt,_),g(Sw,dt,null),e(dt,WIo),e(dt,Ni),e(Ni,QIo),e(Ni,Sle),e(Sle,HIo),e(Ni,UIo),e(Ni,Ple),e(Ple,JIo),e(Ni,YIo),e(dt,KIo),e(dt,Pw),e(Pw,ZIo),e(Pw,$le),e($le,ejo),e(Pw,ojo),e(dt,tjo),e(dt,er),g($w,er,null),e(er,rjo),e(er,Ile),e(Ile,ajo),e(er,sjo),e(er,Di),e(Di,njo),e(Di,jle),e(jle,ljo),e(Di,djo),e(Di,Nle),e(Nle,ijo),e(Di,cjo),e(er,fjo),e(er,Dle),e(Dle,mjo),e(er,gjo),g(Iw,er,null),e(dt,hjo),e(dt,Ue),g(jw,Ue,null),e(Ue,ujo),e(Ue,qle),e(qle,pjo),e(Ue,_jo),e(Ue,es),e(es,bjo),e(es,Gle),e(Gle,vjo),e(es,Tjo),e(es,Ole),e(Ole,Fjo),e(es,Cjo),e(es,Xle),e(Xle,Mjo),e(es,Ejo),e(Ue,yjo),e(Ue,zle),e(zle,XT),e(XT,Vle),e(Vle,wjo),e(XT,Ajo),e(XT,Sj),e(Sj,Ljo),e(XT,Bjo),e(Ue,xjo),e(Ue,zT),e(zT,kjo),e(zT,Wle),e(Wle,Rjo),e(zT,Sjo),e(zT,Qle),e(Qle,Pjo),e(Ue,$jo),e(Ue,Hle),e(Hle,Ijo),e(Ue,jjo),g(Nw,Ue,null),b(i,h7e,_),b(i,qi,_),e(qi,VT),e(VT,Ule),g(Dw,Ule,null),e(qi,Njo),e(qi,Jle),e(Jle,Djo),b(i,u7e,_),b(i,it,_),g(qw,it,null),e(it,qjo),e(it,Gi),e(Gi,Gjo),e(Gi,Yle),e(Yle,Ojo),e(Gi,Xjo),e(Gi,Kle),e(Kle,zjo),e(Gi,Vjo),e(it,Wjo),e(it,Gw),e(Gw,Qjo),e(Gw,Zle),e(Zle,Hjo),e(Gw,Ujo),e(it,Jjo),e(it,or),g(Ow,or,null),e(or,Yjo),e(or,ede),e(ede,Kjo),e(or,Zjo),e(or,Oi),e(Oi,eNo),e(Oi,ode),e(ode,oNo),e(Oi,tNo),e(Oi,tde),e(tde,rNo),e(Oi,aNo),e(or,sNo),e(or,rde),e(rde,nNo),e(or,lNo),g(Xw,or,null),e(it,dNo),e(it,Je),g(zw,Je,null),e(Je,iNo),e(Je,ade),e(ade,cNo),e(Je,fNo),e(Je,os),e(os,mNo),e(os,sde),e(sde,gNo),e(os,hNo),e(os,nde),e(nde,uNo),e(os,pNo),e(os,lde),e(lde,_No),e(os,bNo),e(Je,vNo),e(Je,Vw),e(Vw,WT),e(WT,dde),e(dde,TNo),e(WT,FNo),e(WT,Pj),e(Pj,CNo),e(WT,MNo),e(Vw,ENo),e(Vw,QT),e(QT,ide),e(ide,yNo),e(QT,wNo),e(QT,$j),e($j,ANo),e(QT,LNo),e(Je,BNo),e(Je,HT),e(HT,xNo),e(HT,cde),e(cde,kNo),e(HT,RNo),e(HT,fde),e(fde,SNo),e(Je,PNo),e(Je,mde),e(mde,$No),e(Je,INo),g(Ww,Je,null),b(i,p7e,_),b(i,Xi,_),e(Xi,UT),e(UT,gde),g(Qw,gde,null),e(Xi,jNo),e(Xi,hde),e(hde,NNo),b(i,_7e,_),b(i,ct,_),g(Hw,ct,null),e(ct,DNo),e(ct,zi),e(zi,qNo),e(zi,ude),e(ude,GNo),e(zi,ONo),e(zi,pde),e(pde,XNo),e(zi,zNo),e(ct,VNo),e(ct,Uw),e(Uw,WNo),e(Uw,_de),e(_de,QNo),e(Uw,HNo),e(ct,UNo),e(ct,tr),g(Jw,tr,null),e(tr,JNo),e(tr,bde),e(bde,YNo),e(tr,KNo),e(tr,Vi),e(Vi,ZNo),e(Vi,vde),e(vde,eDo),e(Vi,oDo),e(Vi,Tde),e(Tde,tDo),e(Vi,rDo),e(tr,aDo),e(tr,Fde),e(Fde,sDo),e(tr,nDo),g(Yw,tr,null),e(ct,lDo),e(ct,fo),g(Kw,fo,null),e(fo,dDo),e(fo,Cde),e(Cde,iDo),e(fo,cDo),e(fo,ts),e(ts,fDo),e(ts,Mde),e(Mde,mDo),e(ts,gDo),e(ts,Ede),e(Ede,hDo),e(ts,uDo),e(ts,yde),e(yde,pDo),e(ts,_Do),e(fo,bDo),e(fo,B),e(B,JT),e(JT,wde),e(wde,vDo),e(JT,TDo),e(JT,Ij),e(Ij,FDo),e(JT,CDo),e(B,MDo),e(B,YT),e(YT,Ade),e(Ade,EDo),e(YT,yDo),e(YT,jj),e(jj,wDo),e(YT,ADo),e(B,LDo),e(B,KT),e(KT,Lde),e(Lde,BDo),e(KT,xDo),e(KT,Nj),e(Nj,kDo),e(KT,RDo),e(B,SDo),e(B,ZT),e(ZT,Bde),e(Bde,PDo),e(ZT,$Do),e(ZT,Dj),e(Dj,IDo),e(ZT,jDo),e(B,NDo),e(B,e1),e(e1,xde),e(xde,DDo),e(e1,qDo),e(e1,qj),e(qj,GDo),e(e1,ODo),e(B,XDo),e(B,o1),e(o1,kde),e(kde,zDo),e(o1,VDo),e(o1,Gj),e(Gj,WDo),e(o1,QDo),e(B,HDo),e(B,t1),e(t1,Rde),e(Rde,UDo),e(t1,JDo),e(t1,Oj),e(Oj,YDo),e(t1,KDo),e(B,ZDo),e(B,r1),e(r1,Sde),e(Sde,eqo),e(r1,oqo),e(r1,Xj),e(Xj,tqo),e(r1,rqo),e(B,aqo),e(B,a1),e(a1,Pde),e(Pde,sqo),e(a1,nqo),e(a1,zj),e(zj,lqo),e(a1,dqo),e(B,iqo),e(B,s1),e(s1,$de),e($de,cqo),e(s1,fqo),e(s1,Vj),e(Vj,mqo),e(s1,gqo),e(B,hqo),e(B,n1),e(n1,Ide),e(Ide,uqo),e(n1,pqo),e(n1,Wj),e(Wj,_qo),e(n1,bqo),e(B,vqo),e(B,l1),e(l1,jde),e(jde,Tqo),e(l1,Fqo),e(l1,Qj),e(Qj,Cqo),e(l1,Mqo),e(B,Eqo),e(B,d1),e(d1,Nde),e(Nde,yqo),e(d1,wqo),e(d1,Hj),e(Hj,Aqo),e(d1,Lqo),e(B,Bqo),e(B,i1),e(i1,Dde),e(Dde,xqo),e(i1,kqo),e(i1,Uj),e(Uj,Rqo),e(i1,Sqo),e(B,Pqo),e(B,c1),e(c1,qde),e(qde,$qo),e(c1,Iqo),e(c1,Jj),e(Jj,jqo),e(c1,Nqo),e(B,Dqo),e(B,Ln),e(Ln,Gde),e(Gde,qqo),e(Ln,Gqo),e(Ln,Yj),e(Yj,Oqo),e(Ln,Xqo),e(Ln,Kj),e(Kj,zqo),e(Ln,Vqo),e(B,Wqo),e(B,f1),e(f1,Ode),e(Ode,Qqo),e(f1,Hqo),e(f1,Zj),e(Zj,Uqo),e(f1,Jqo),e(B,Yqo),e(B,m1),e(m1,Xde),e(Xde,Kqo),e(m1,Zqo),e(m1,eN),e(eN,eGo),e(m1,oGo),e(B,tGo),e(B,g1),e(g1,zde),e(zde,rGo),e(g1,aGo),e(g1,oN),e(oN,sGo),e(g1,nGo),e(B,lGo),e(B,h1),e(h1,Vde),e(Vde,dGo),e(h1,iGo),e(h1,tN),e(tN,cGo),e(h1,fGo),e(B,mGo),e(B,u1),e(u1,Wde),e(Wde,gGo),e(u1,hGo),e(u1,rN),e(rN,uGo),e(u1,pGo),e(B,_Go),e(B,p1),e(p1,Qde),e(Qde,bGo),e(p1,vGo),e(p1,aN),e(aN,TGo),e(p1,FGo),e(B,CGo),e(B,_1),e(_1,Hde),e(Hde,MGo),e(_1,EGo),e(_1,sN),e(sN,yGo),e(_1,wGo),e(B,AGo),e(B,b1),e(b1,Ude),e(Ude,LGo),e(b1,BGo),e(b1,nN),e(nN,xGo),e(b1,kGo),e(B,RGo),e(B,v1),e(v1,Jde),e(Jde,SGo),e(v1,PGo),e(v1,lN),e(lN,$Go),e(v1,IGo),e(B,jGo),e(B,T1),e(T1,Yde),e(Yde,NGo),e(T1,DGo),e(T1,dN),e(dN,qGo),e(T1,GGo),e(B,OGo),e(B,F1),e(F1,Kde),e(Kde,XGo),e(F1,zGo),e(F1,iN),e(iN,VGo),e(F1,WGo),e(B,QGo),e(B,C1),e(C1,Zde),e(Zde,HGo),e(C1,UGo),e(C1,cN),e(cN,JGo),e(C1,YGo),e(B,KGo),e(B,M1),e(M1,eie),e(eie,ZGo),e(M1,eOo),e(M1,fN),e(fN,oOo),e(M1,tOo),e(B,rOo),e(B,E1),e(E1,oie),e(oie,aOo),e(E1,sOo),e(E1,mN),e(mN,nOo),e(E1,lOo),e(B,dOo),e(B,y1),e(y1,tie),e(tie,iOo),e(y1,cOo),e(y1,gN),e(gN,fOo),e(y1,mOo),e(B,gOo),e(B,w1),e(w1,rie),e(rie,hOo),e(w1,uOo),e(w1,hN),e(hN,pOo),e(w1,_Oo),e(B,bOo),e(B,A1),e(A1,aie),e(aie,vOo),e(A1,TOo),e(A1,uN),e(uN,FOo),e(A1,COo),e(B,MOo),e(B,L1),e(L1,sie),e(sie,EOo),e(L1,yOo),e(L1,pN),e(pN,wOo),e(L1,AOo),e(B,LOo),e(B,B1),e(B1,nie),e(nie,BOo),e(B1,xOo),e(B1,_N),e(_N,kOo),e(B1,ROo),e(B,SOo),e(B,x1),e(x1,lie),e(lie,POo),e(x1,$Oo),e(x1,bN),e(bN,IOo),e(x1,jOo),e(B,NOo),e(B,k1),e(k1,die),e(die,DOo),e(k1,qOo),e(k1,vN),e(vN,GOo),e(k1,OOo),e(B,XOo),e(B,R1),e(R1,iie),e(iie,zOo),e(R1,VOo),e(R1,TN),e(TN,WOo),e(R1,QOo),e(B,HOo),e(B,S1),e(S1,cie),e(cie,UOo),e(S1,JOo),e(S1,FN),e(FN,YOo),e(S1,KOo),e(B,ZOo),e(B,P1),e(P1,fie),e(fie,eXo),e(P1,oXo),e(P1,CN),e(CN,tXo),e(P1,rXo),e(B,aXo),e(B,$1),e($1,mie),e(mie,sXo),e($1,nXo),e($1,MN),e(MN,lXo),e($1,dXo),e(fo,iXo),e(fo,gie),e(gie,cXo),e(fo,fXo),g(Zw,fo,null),b(i,b7e,_),b(i,Wi,_),e(Wi,I1),e(I1,hie),g(eA,hie,null),e(Wi,mXo),e(Wi,uie),e(uie,gXo),b(i,v7e,_),b(i,ft,_),g(oA,ft,null),e(ft,hXo),e(ft,Qi),e(Qi,uXo),e(Qi,pie),e(pie,pXo),e(Qi,_Xo),e(Qi,_ie),e(_ie,bXo),e(Qi,vXo),e(ft,TXo),e(ft,tA),e(tA,FXo),e(tA,bie),e(bie,CXo),e(tA,MXo),e(ft,EXo),e(ft,rr),g(rA,rr,null),e(rr,yXo),e(rr,vie),e(vie,wXo),e(rr,AXo),e(rr,Hi),e(Hi,LXo),e(Hi,Tie),e(Tie,BXo),e(Hi,xXo),e(Hi,Fie),e(Fie,kXo),e(Hi,RXo),e(rr,SXo),e(rr,Cie),e(Cie,PXo),e(rr,$Xo),g(aA,rr,null),e(ft,IXo),e(ft,mo),g(sA,mo,null),e(mo,jXo),e(mo,Mie),e(Mie,NXo),e(mo,DXo),e(mo,rs),e(rs,qXo),e(rs,Eie),e(Eie,GXo),e(rs,OXo),e(rs,yie),e(yie,XXo),e(rs,zXo),e(rs,wie),e(wie,VXo),e(rs,WXo),e(mo,QXo),e(mo,H),e(H,j1),e(j1,Aie),e(Aie,HXo),e(j1,UXo),e(j1,EN),e(EN,JXo),e(j1,YXo),e(H,KXo),e(H,N1),e(N1,Lie),e(Lie,ZXo),e(N1,ezo),e(N1,yN),e(yN,ozo),e(N1,tzo),e(H,rzo),e(H,D1),e(D1,Bie),e(Bie,azo),e(D1,szo),e(D1,wN),e(wN,nzo),e(D1,lzo),e(H,dzo),e(H,q1),e(q1,xie),e(xie,izo),e(q1,czo),e(q1,AN),e(AN,fzo),e(q1,mzo),e(H,gzo),e(H,G1),e(G1,kie),e(kie,hzo),e(G1,uzo),e(G1,LN),e(LN,pzo),e(G1,_zo),e(H,bzo),e(H,O1),e(O1,Rie),e(Rie,vzo),e(O1,Tzo),e(O1,BN),e(BN,Fzo),e(O1,Czo),e(H,Mzo),e(H,X1),e(X1,Sie),e(Sie,Ezo),e(X1,yzo),e(X1,xN),e(xN,wzo),e(X1,Azo),e(H,Lzo),e(H,z1),e(z1,Pie),e(Pie,Bzo),e(z1,xzo),e(z1,kN),e(kN,kzo),e(z1,Rzo),e(H,Szo),e(H,V1),e(V1,$ie),e($ie,Pzo),e(V1,$zo),e(V1,RN),e(RN,Izo),e(V1,jzo),e(H,Nzo),e(H,W1),e(W1,Iie),e(Iie,Dzo),e(W1,qzo),e(W1,SN),e(SN,Gzo),e(W1,Ozo),e(H,Xzo),e(H,Q1),e(Q1,jie),e(jie,zzo),e(Q1,Vzo),e(Q1,PN),e(PN,Wzo),e(Q1,Qzo),e(H,Hzo),e(H,H1),e(H1,Nie),e(Nie,Uzo),e(H1,Jzo),e(H1,$N),e($N,Yzo),e(H1,Kzo),e(H,Zzo),e(H,U1),e(U1,Die),e(Die,eVo),e(U1,oVo),e(U1,IN),e(IN,tVo),e(U1,rVo),e(H,aVo),e(H,J1),e(J1,qie),e(qie,sVo),e(J1,nVo),e(J1,jN),e(jN,lVo),e(J1,dVo),e(H,iVo),e(H,Y1),e(Y1,Gie),e(Gie,cVo),e(Y1,fVo),e(Y1,NN),e(NN,mVo),e(Y1,gVo),e(H,hVo),e(H,K1),e(K1,Oie),e(Oie,uVo),e(K1,pVo),e(K1,DN),e(DN,_Vo),e(K1,bVo),e(H,vVo),e(H,Z1),e(Z1,Xie),e(Xie,TVo),e(Z1,FVo),e(Z1,qN),e(qN,CVo),e(Z1,MVo),e(H,EVo),e(H,eF),e(eF,zie),e(zie,yVo),e(eF,wVo),e(eF,GN),e(GN,AVo),e(eF,LVo),e(H,BVo),e(H,oF),e(oF,Vie),e(Vie,xVo),e(oF,kVo),e(oF,ON),e(ON,RVo),e(oF,SVo),e(H,PVo),e(H,tF),e(tF,Wie),e(Wie,$Vo),e(tF,IVo),e(tF,XN),e(XN,jVo),e(tF,NVo),e(H,DVo),e(H,rF),e(rF,Qie),e(Qie,qVo),e(rF,GVo),e(rF,zN),e(zN,OVo),e(rF,XVo),e(H,zVo),e(H,aF),e(aF,Hie),e(Hie,VVo),e(aF,WVo),e(aF,VN),e(VN,QVo),e(aF,HVo),e(mo,UVo),e(mo,Uie),e(Uie,JVo),e(mo,YVo),g(nA,mo,null),b(i,T7e,_),b(i,Ui,_),e(Ui,sF),e(sF,Jie),g(lA,Jie,null),e(Ui,KVo),e(Ui,Yie),e(Yie,ZVo),b(i,F7e,_),b(i,mt,_),g(dA,mt,null),e(mt,eWo),e(mt,Ji),e(Ji,oWo),e(Ji,Kie),e(Kie,tWo),e(Ji,rWo),e(Ji,Zie),e(Zie,aWo),e(Ji,sWo),e(mt,nWo),e(mt,iA),e(iA,lWo),e(iA,ece),e(ece,dWo),e(iA,iWo),e(mt,cWo),e(mt,ar),g(cA,ar,null),e(ar,fWo),e(ar,oce),e(oce,mWo),e(ar,gWo),e(ar,Yi),e(Yi,hWo),e(Yi,tce),e(tce,uWo),e(Yi,pWo),e(Yi,rce),e(rce,_Wo),e(Yi,bWo),e(ar,vWo),e(ar,ace),e(ace,TWo),e(ar,FWo),g(fA,ar,null),e(mt,CWo),e(mt,go),g(mA,go,null),e(go,MWo),e(go,sce),e(sce,EWo),e(go,yWo),e(go,as),e(as,wWo),e(as,nce),e(nce,AWo),e(as,LWo),e(as,lce),e(lce,BWo),e(as,xWo),e(as,dce),e(dce,kWo),e(as,RWo),e(go,SWo),e(go,he),e(he,nF),e(nF,ice),e(ice,PWo),e(nF,$Wo),e(nF,WN),e(WN,IWo),e(nF,jWo),e(he,NWo),e(he,lF),e(lF,cce),e(cce,DWo),e(lF,qWo),e(lF,QN),e(QN,GWo),e(lF,OWo),e(he,XWo),e(he,dF),e(dF,fce),e(fce,zWo),e(dF,VWo),e(dF,HN),e(HN,WWo),e(dF,QWo),e(he,HWo),e(he,iF),e(iF,mce),e(mce,UWo),e(iF,JWo),e(iF,UN),e(UN,YWo),e(iF,KWo),e(he,ZWo),e(he,cF),e(cF,gce),e(gce,eQo),e(cF,oQo),e(cF,JN),e(JN,tQo),e(cF,rQo),e(he,aQo),e(he,fF),e(fF,hce),e(hce,sQo),e(fF,nQo),e(fF,YN),e(YN,lQo),e(fF,dQo),e(he,iQo),e(he,mF),e(mF,uce),e(uce,cQo),e(mF,fQo),e(mF,KN),e(KN,mQo),e(mF,gQo),e(he,hQo),e(he,gF),e(gF,pce),e(pce,uQo),e(gF,pQo),e(gF,ZN),e(ZN,_Qo),e(gF,bQo),e(he,vQo),e(he,hF),e(hF,_ce),e(_ce,TQo),e(hF,FQo),e(hF,eD),e(eD,CQo),e(hF,MQo),e(he,EQo),e(he,uF),e(uF,bce),e(bce,yQo),e(uF,wQo),e(uF,oD),e(oD,AQo),e(uF,LQo),e(go,BQo),e(go,vce),e(vce,xQo),e(go,kQo),g(gA,go,null),b(i,C7e,_),b(i,Ki,_),e(Ki,pF),e(pF,Tce),g(hA,Tce,null),e(Ki,RQo),e(Ki,Fce),e(Fce,SQo),b(i,M7e,_),b(i,gt,_),g(uA,gt,null),e(gt,PQo),e(gt,Zi),e(Zi,$Qo),e(Zi,Cce),e(Cce,IQo),e(Zi,jQo),e(Zi,Mce),e(Mce,NQo),e(Zi,DQo),e(gt,qQo),e(gt,pA),e(pA,GQo),e(pA,Ece),e(Ece,OQo),e(pA,XQo),e(gt,zQo),e(gt,sr),g(_A,sr,null),e(sr,VQo),e(sr,yce),e(yce,WQo),e(sr,QQo),e(sr,ec),e(ec,HQo),e(ec,wce),e(wce,UQo),e(ec,JQo),e(ec,Ace),e(Ace,YQo),e(ec,KQo),e(sr,ZQo),e(sr,Lce),e(Lce,eHo),e(sr,oHo),g(bA,sr,null),e(gt,tHo),e(gt,ho),g(vA,ho,null),e(ho,rHo),e(ho,Bce),e(Bce,aHo),e(ho,sHo),e(ho,ss),e(ss,nHo),e(ss,xce),e(xce,lHo),e(ss,dHo),e(ss,kce),e(kce,iHo),e(ss,cHo),e(ss,Rce),e(Rce,fHo),e(ss,mHo),e(ho,gHo),e(ho,Sce),e(Sce,_F),e(_F,Pce),e(Pce,hHo),e(_F,uHo),e(_F,tD),e(tD,pHo),e(_F,_Ho),e(ho,bHo),e(ho,$ce),e($ce,vHo),e(ho,THo),g(TA,ho,null),b(i,E7e,_),b(i,oc,_),e(oc,bF),e(bF,Ice),g(FA,Ice,null),e(oc,FHo),e(oc,jce),e(jce,CHo),b(i,y7e,_),b(i,ht,_),g(CA,ht,null),e(ht,MHo),e(ht,tc),e(tc,EHo),e(tc,Nce),e(Nce,yHo),e(tc,wHo),e(tc,Dce),e(Dce,AHo),e(tc,LHo),e(ht,BHo),e(ht,MA),e(MA,xHo),e(MA,qce),e(qce,kHo),e(MA,RHo),e(ht,SHo),e(ht,nr),g(EA,nr,null),e(nr,PHo),e(nr,Gce),e(Gce,$Ho),e(nr,IHo),e(nr,rc),e(rc,jHo),e(rc,Oce),e(Oce,NHo),e(rc,DHo),e(rc,Xce),e(Xce,qHo),e(rc,GHo),e(nr,OHo),e(nr,zce),e(zce,XHo),e(nr,zHo),g(yA,nr,null),e(ht,VHo),e(ht,uo),g(wA,uo,null),e(uo,WHo),e(uo,Vce),e(Vce,QHo),e(uo,HHo),e(uo,ns),e(ns,UHo),e(ns,Wce),e(Wce,JHo),e(ns,YHo),e(ns,Qce),e(Qce,KHo),e(ns,ZHo),e(ns,Hce),e(Hce,eUo),e(ns,oUo),e(uo,tUo),e(uo,Y),e(Y,vF),e(vF,Uce),e(Uce,rUo),e(vF,aUo),e(vF,rD),e(rD,sUo),e(vF,nUo),e(Y,lUo),e(Y,TF),e(TF,Jce),e(Jce,dUo),e(TF,iUo),e(TF,aD),e(aD,cUo),e(TF,fUo),e(Y,mUo),e(Y,FF),e(FF,Yce),e(Yce,gUo),e(FF,hUo),e(FF,sD),e(sD,uUo),e(FF,pUo),e(Y,_Uo),e(Y,CF),e(CF,Kce),e(Kce,bUo),e(CF,vUo),e(CF,nD),e(nD,TUo),e(CF,FUo),e(Y,CUo),e(Y,MF),e(MF,Zce),e(Zce,MUo),e(MF,EUo),e(MF,lD),e(lD,yUo),e(MF,wUo),e(Y,AUo),e(Y,EF),e(EF,efe),e(efe,LUo),e(EF,BUo),e(EF,dD),e(dD,xUo),e(EF,kUo),e(Y,RUo),e(Y,yF),e(yF,ofe),e(ofe,SUo),e(yF,PUo),e(yF,iD),e(iD,$Uo),e(yF,IUo),e(Y,jUo),e(Y,wF),e(wF,tfe),e(tfe,NUo),e(wF,DUo),e(wF,cD),e(cD,qUo),e(wF,GUo),e(Y,OUo),e(Y,AF),e(AF,rfe),e(rfe,XUo),e(AF,zUo),e(AF,fD),e(fD,VUo),e(AF,WUo),e(Y,QUo),e(Y,LF),e(LF,afe),e(afe,HUo),e(LF,UUo),e(LF,mD),e(mD,JUo),e(LF,YUo),e(Y,KUo),e(Y,BF),e(BF,sfe),e(sfe,ZUo),e(BF,eJo),e(BF,gD),e(gD,oJo),e(BF,tJo),e(Y,rJo),e(Y,xF),e(xF,nfe),e(nfe,aJo),e(xF,sJo),e(xF,hD),e(hD,nJo),e(xF,lJo),e(Y,dJo),e(Y,kF),e(kF,lfe),e(lfe,iJo),e(kF,cJo),e(kF,uD),e(uD,fJo),e(kF,mJo),e(Y,gJo),e(Y,RF),e(RF,dfe),e(dfe,hJo),e(RF,uJo),e(RF,pD),e(pD,pJo),e(RF,_Jo),e(Y,bJo),e(Y,SF),e(SF,ife),e(ife,vJo),e(SF,TJo),e(SF,_D),e(_D,FJo),e(SF,CJo),e(Y,MJo),e(Y,PF),e(PF,cfe),e(cfe,EJo),e(PF,yJo),e(PF,bD),e(bD,wJo),e(PF,AJo),e(Y,LJo),e(Y,$F),e($F,ffe),e(ffe,BJo),e($F,xJo),e($F,vD),e(vD,kJo),e($F,RJo),e(Y,SJo),e(Y,IF),e(IF,mfe),e(mfe,PJo),e(IF,$Jo),e(IF,TD),e(TD,IJo),e(IF,jJo),e(Y,NJo),e(Y,jF),e(jF,gfe),e(gfe,DJo),e(jF,qJo),e(jF,FD),e(FD,GJo),e(jF,OJo),e(Y,XJo),e(Y,NF),e(NF,hfe),e(hfe,zJo),e(NF,VJo),e(NF,CD),e(CD,WJo),e(NF,QJo),e(uo,HJo),e(uo,ufe),e(ufe,UJo),e(uo,JJo),g(AA,uo,null),b(i,w7e,_),b(i,ac,_),e(ac,DF),e(DF,pfe),g(LA,pfe,null),e(ac,YJo),e(ac,_fe),e(_fe,KJo),b(i,A7e,_),b(i,ut,_),g(BA,ut,null),e(ut,ZJo),e(ut,sc),e(sc,eYo),e(sc,bfe),e(bfe,oYo),e(sc,tYo),e(sc,vfe),e(vfe,rYo),e(sc,aYo),e(ut,sYo),e(ut,xA),e(xA,nYo),e(xA,Tfe),e(Tfe,lYo),e(xA,dYo),e(ut,iYo),e(ut,lr),g(kA,lr,null),e(lr,cYo),e(lr,Ffe),e(Ffe,fYo),e(lr,mYo),e(lr,nc),e(nc,gYo),e(nc,Cfe),e(Cfe,hYo),e(nc,uYo),e(nc,Mfe),e(Mfe,pYo),e(nc,_Yo),e(lr,bYo),e(lr,Efe),e(Efe,vYo),e(lr,TYo),g(RA,lr,null),e(ut,FYo),e(ut,po),g(SA,po,null),e(po,CYo),e(po,yfe),e(yfe,MYo),e(po,EYo),e(po,ls),e(ls,yYo),e(ls,wfe),e(wfe,wYo),e(ls,AYo),e(ls,Afe),e(Afe,LYo),e(ls,BYo),e(ls,Lfe),e(Lfe,xYo),e(ls,kYo),e(po,RYo),e(po,ue),e(ue,qF),e(qF,Bfe),e(Bfe,SYo),e(qF,PYo),e(qF,MD),e(MD,$Yo),e(qF,IYo),e(ue,jYo),e(ue,GF),e(GF,xfe),e(xfe,NYo),e(GF,DYo),e(GF,ED),e(ED,qYo),e(GF,GYo),e(ue,OYo),e(ue,OF),e(OF,kfe),e(kfe,XYo),e(OF,zYo),e(OF,yD),e(yD,VYo),e(OF,WYo),e(ue,QYo),e(ue,XF),e(XF,Rfe),e(Rfe,HYo),e(XF,UYo),e(XF,wD),e(wD,JYo),e(XF,YYo),e(ue,KYo),e(ue,zF),e(zF,Sfe),e(Sfe,ZYo),e(zF,eKo),e(zF,AD),e(AD,oKo),e(zF,tKo),e(ue,rKo),e(ue,VF),e(VF,Pfe),e(Pfe,aKo),e(VF,sKo),e(VF,LD),e(LD,nKo),e(VF,lKo),e(ue,dKo),e(ue,WF),e(WF,$fe),e($fe,iKo),e(WF,cKo),e(WF,BD),e(BD,fKo),e(WF,mKo),e(ue,gKo),e(ue,QF),e(QF,Ife),e(Ife,hKo),e(QF,uKo),e(QF,xD),e(xD,pKo),e(QF,_Ko),e(ue,bKo),e(ue,HF),e(HF,jfe),e(jfe,vKo),e(HF,TKo),e(HF,kD),e(kD,FKo),e(HF,CKo),e(ue,MKo),e(ue,UF),e(UF,Nfe),e(Nfe,EKo),e(UF,yKo),e(UF,RD),e(RD,wKo),e(UF,AKo),e(po,LKo),e(po,Dfe),e(Dfe,BKo),e(po,xKo),g(PA,po,null),b(i,L7e,_),b(i,lc,_),e(lc,JF),e(JF,qfe),g($A,qfe,null),e(lc,kKo),e(lc,Gfe),e(Gfe,RKo),b(i,B7e,_),b(i,pt,_),g(IA,pt,null),e(pt,SKo),e(pt,dc),e(dc,PKo),e(dc,Ofe),e(Ofe,$Ko),e(dc,IKo),e(dc,Xfe),e(Xfe,jKo),e(dc,NKo),e(pt,DKo),e(pt,jA),e(jA,qKo),e(jA,zfe),e(zfe,GKo),e(jA,OKo),e(pt,XKo),e(pt,dr),g(NA,dr,null),e(dr,zKo),e(dr,Vfe),e(Vfe,VKo),e(dr,WKo),e(dr,ic),e(ic,QKo),e(ic,Wfe),e(Wfe,HKo),e(ic,UKo),e(ic,Qfe),e(Qfe,JKo),e(ic,YKo),e(dr,KKo),e(dr,Hfe),e(Hfe,ZKo),e(dr,eZo),g(DA,dr,null),e(pt,oZo),e(pt,_o),g(qA,_o,null),e(_o,tZo),e(_o,Ufe),e(Ufe,rZo),e(_o,aZo),e(_o,ds),e(ds,sZo),e(ds,Jfe),e(Jfe,nZo),e(ds,lZo),e(ds,Yfe),e(Yfe,dZo),e(ds,iZo),e(ds,Kfe),e(Kfe,cZo),e(ds,fZo),e(_o,mZo),e(_o,X),e(X,YF),e(YF,Zfe),e(Zfe,gZo),e(YF,hZo),e(YF,SD),e(SD,uZo),e(YF,pZo),e(X,_Zo),e(X,KF),e(KF,eme),e(eme,bZo),e(KF,vZo),e(KF,PD),e(PD,TZo),e(KF,FZo),e(X,CZo),e(X,ZF),e(ZF,ome),e(ome,MZo),e(ZF,EZo),e(ZF,$D),e($D,yZo),e(ZF,wZo),e(X,AZo),e(X,eC),e(eC,tme),e(tme,LZo),e(eC,BZo),e(eC,ID),e(ID,xZo),e(eC,kZo),e(X,RZo),e(X,oC),e(oC,rme),e(rme,SZo),e(oC,PZo),e(oC,jD),e(jD,$Zo),e(oC,IZo),e(X,jZo),e(X,tC),e(tC,ame),e(ame,NZo),e(tC,DZo),e(tC,ND),e(ND,qZo),e(tC,GZo),e(X,OZo),e(X,rC),e(rC,sme),e(sme,XZo),e(rC,zZo),e(rC,DD),e(DD,VZo),e(rC,WZo),e(X,QZo),e(X,aC),e(aC,nme),e(nme,HZo),e(aC,UZo),e(aC,qD),e(qD,JZo),e(aC,YZo),e(X,KZo),e(X,sC),e(sC,lme),e(lme,ZZo),e(sC,eet),e(sC,GD),e(GD,oet),e(sC,tet),e(X,ret),e(X,nC),e(nC,dme),e(dme,aet),e(nC,set),e(nC,OD),e(OD,net),e(nC,det),e(X,iet),e(X,lC),e(lC,ime),e(ime,cet),e(lC,fet),e(lC,XD),e(XD,met),e(lC,get),e(X,het),e(X,dC),e(dC,cme),e(cme,uet),e(dC,pet),e(dC,zD),e(zD,_et),e(dC,bet),e(X,vet),e(X,iC),e(iC,fme),e(fme,Tet),e(iC,Fet),e(iC,VD),e(VD,Cet),e(iC,Met),e(X,Eet),e(X,cC),e(cC,mme),e(mme,yet),e(cC,wet),e(cC,WD),e(WD,Aet),e(cC,Let),e(X,Bet),e(X,fC),e(fC,gme),e(gme,xet),e(fC,ket),e(fC,QD),e(QD,Ret),e(fC,Set),e(X,Pet),e(X,mC),e(mC,hme),e(hme,$et),e(mC,Iet),e(mC,HD),e(HD,jet),e(mC,Net),e(X,Det),e(X,gC),e(gC,ume),e(ume,qet),e(gC,Get),e(gC,UD),e(UD,Oet),e(gC,Xet),e(X,zet),e(X,hC),e(hC,pme),e(pme,Vet),e(hC,Wet),e(hC,JD),e(JD,Qet),e(hC,Het),e(X,Uet),e(X,uC),e(uC,_me),e(_me,Jet),e(uC,Yet),e(uC,YD),e(YD,Ket),e(uC,Zet),e(X,eot),e(X,pC),e(pC,bme),e(bme,oot),e(pC,tot),e(pC,KD),e(KD,rot),e(pC,aot),e(X,sot),e(X,_C),e(_C,vme),e(vme,not),e(_C,lot),e(_C,ZD),e(ZD,dot),e(_C,iot),e(X,cot),e(X,bC),e(bC,Tme),e(Tme,fot),e(bC,mot),e(bC,eq),e(eq,got),e(bC,hot),e(X,uot),e(X,vC),e(vC,Fme),e(Fme,pot),e(vC,_ot),e(vC,oq),e(oq,bot),e(vC,vot),e(X,Tot),e(X,TC),e(TC,Cme),e(Cme,Fot),e(TC,Cot),e(TC,tq),e(tq,Mot),e(TC,Eot),e(X,yot),e(X,FC),e(FC,Mme),e(Mme,wot),e(FC,Aot),e(FC,rq),e(rq,Lot),e(FC,Bot),e(_o,xot),e(_o,Eme),e(Eme,kot),e(_o,Rot),g(GA,_o,null),b(i,x7e,_),b(i,cc,_),e(cc,CC),e(CC,yme),g(OA,yme,null),e(cc,Sot),e(cc,wme),e(wme,Pot),b(i,k7e,_),b(i,_t,_),g(XA,_t,null),e(_t,$ot),e(_t,fc),e(fc,Iot),e(fc,Ame),e(Ame,jot),e(fc,Not),e(fc,Lme),e(Lme,Dot),e(fc,qot),e(_t,Got),e(_t,zA),e(zA,Oot),e(zA,Bme),e(Bme,Xot),e(zA,zot),e(_t,Vot),e(_t,ir),g(VA,ir,null),e(ir,Wot),e(ir,xme),e(xme,Qot),e(ir,Hot),e(ir,mc),e(mc,Uot),e(mc,kme),e(kme,Jot),e(mc,Yot),e(mc,Rme),e(Rme,Kot),e(mc,Zot),e(ir,ett),e(ir,Sme),e(Sme,ott),e(ir,ttt),g(WA,ir,null),e(_t,rtt),e(_t,bo),g(QA,bo,null),e(bo,att),e(bo,Pme),e(Pme,stt),e(bo,ntt),e(bo,is),e(is,ltt),e(is,$me),e($me,dtt),e(is,itt),e(is,Ime),e(Ime,ctt),e(is,ftt),e(is,jme),e(jme,mtt),e(is,gtt),e(bo,htt),e(bo,re),e(re,MC),e(MC,Nme),e(Nme,utt),e(MC,ptt),e(MC,aq),e(aq,_tt),e(MC,btt),e(re,vtt),e(re,EC),e(EC,Dme),e(Dme,Ttt),e(EC,Ftt),e(EC,sq),e(sq,Ctt),e(EC,Mtt),e(re,Ett),e(re,yC),e(yC,qme),e(qme,ytt),e(yC,wtt),e(yC,nq),e(nq,Att),e(yC,Ltt),e(re,Btt),e(re,wC),e(wC,Gme),e(Gme,xtt),e(wC,ktt),e(wC,lq),e(lq,Rtt),e(wC,Stt),e(re,Ptt),e(re,AC),e(AC,Ome),e(Ome,$tt),e(AC,Itt),e(AC,dq),e(dq,jtt),e(AC,Ntt),e(re,Dtt),e(re,LC),e(LC,Xme),e(Xme,qtt),e(LC,Gtt),e(LC,iq),e(iq,Ott),e(LC,Xtt),e(re,ztt),e(re,BC),e(BC,zme),e(zme,Vtt),e(BC,Wtt),e(BC,cq),e(cq,Qtt),e(BC,Htt),e(re,Utt),e(re,xC),e(xC,Vme),e(Vme,Jtt),e(xC,Ytt),e(xC,fq),e(fq,Ktt),e(xC,Ztt),e(re,ert),e(re,kC),e(kC,Wme),e(Wme,ort),e(kC,trt),e(kC,mq),e(mq,rrt),e(kC,art),e(re,srt),e(re,RC),e(RC,Qme),e(Qme,nrt),e(RC,lrt),e(RC,gq),e(gq,drt),e(RC,irt),e(re,crt),e(re,SC),e(SC,Hme),e(Hme,frt),e(SC,mrt),e(SC,hq),e(hq,grt),e(SC,hrt),e(re,urt),e(re,PC),e(PC,Ume),e(Ume,prt),e(PC,_rt),e(PC,uq),e(uq,brt),e(PC,vrt),e(re,Trt),e(re,$C),e($C,Jme),e(Jme,Frt),e($C,Crt),e($C,pq),e(pq,Mrt),e($C,Ert),e(re,yrt),e(re,IC),e(IC,Yme),e(Yme,wrt),e(IC,Art),e(IC,_q),e(_q,Lrt),e(IC,Brt),e(re,xrt),e(re,jC),e(jC,Kme),e(Kme,krt),e(jC,Rrt),e(jC,bq),e(bq,Srt),e(jC,Prt),e(re,$rt),e(re,NC),e(NC,Zme),e(Zme,Irt),e(NC,jrt),e(NC,vq),e(vq,Nrt),e(NC,Drt),e(re,qrt),e(re,DC),e(DC,ege),e(ege,Grt),e(DC,Ort),e(DC,Tq),e(Tq,Xrt),e(DC,zrt),e(bo,Vrt),e(bo,oge),e(oge,Wrt),e(bo,Qrt),g(HA,bo,null),b(i,R7e,_),b(i,gc,_),e(gc,qC),e(qC,tge),g(UA,tge,null),e(gc,Hrt),e(gc,rge),e(rge,Urt),b(i,S7e,_),b(i,bt,_),g(JA,bt,null),e(bt,Jrt),e(bt,hc),e(hc,Yrt),e(hc,age),e(age,Krt),e(hc,Zrt),e(hc,sge),e(sge,eat),e(hc,oat),e(bt,tat),e(bt,YA),e(YA,rat),e(YA,nge),e(nge,aat),e(YA,sat),e(bt,nat),e(bt,cr),g(KA,cr,null),e(cr,lat),e(cr,lge),e(lge,dat),e(cr,iat),e(cr,uc),e(uc,cat),e(uc,dge),e(dge,fat),e(uc,mat),e(uc,ige),e(ige,gat),e(uc,hat),e(cr,uat),e(cr,cge),e(cge,pat),e(cr,_at),g(ZA,cr,null),e(bt,bat),e(bt,vo),g(e0,vo,null),e(vo,vat),e(vo,fge),e(fge,Tat),e(vo,Fat),e(vo,cs),e(cs,Cat),e(cs,mge),e(mge,Mat),e(cs,Eat),e(cs,gge),e(gge,yat),e(cs,wat),e(cs,hge),e(hge,Aat),e(cs,Lat),e(vo,Bat),e(vo,uge),e(uge,GC),e(GC,pge),e(pge,xat),e(GC,kat),e(GC,Fq),e(Fq,Rat),e(GC,Sat),e(vo,Pat),e(vo,_ge),e(_ge,$at),e(vo,Iat),g(o0,vo,null),b(i,P7e,_),b(i,pc,_),e(pc,OC),e(OC,bge),g(t0,bge,null),e(pc,jat),e(pc,vge),e(vge,Nat),b(i,$7e,_),b(i,vt,_),g(r0,vt,null),e(vt,Dat),e(vt,_c),e(_c,qat),e(_c,Tge),e(Tge,Gat),e(_c,Oat),e(_c,Fge),e(Fge,Xat),e(_c,zat),e(vt,Vat),e(vt,a0),e(a0,Wat),e(a0,Cge),e(Cge,Qat),e(a0,Hat),e(vt,Uat),e(vt,fr),g(s0,fr,null),e(fr,Jat),e(fr,Mge),e(Mge,Yat),e(fr,Kat),e(fr,bc),e(bc,Zat),e(bc,Ege),e(Ege,est),e(bc,ost),e(bc,yge),e(yge,tst),e(bc,rst),e(fr,ast),e(fr,wge),e(wge,sst),e(fr,nst),g(n0,fr,null),e(vt,lst),e(vt,To),g(l0,To,null),e(To,dst),e(To,Age),e(Age,ist),e(To,cst),e(To,fs),e(fs,fst),e(fs,Lge),e(Lge,mst),e(fs,gst),e(fs,Bge),e(Bge,hst),e(fs,ust),e(fs,xge),e(xge,pst),e(fs,_st),e(To,bst),e(To,K),e(K,XC),e(XC,kge),e(kge,vst),e(XC,Tst),e(XC,Cq),e(Cq,Fst),e(XC,Cst),e(K,Mst),e(K,zC),e(zC,Rge),e(Rge,Est),e(zC,yst),e(zC,Mq),e(Mq,wst),e(zC,Ast),e(K,Lst),e(K,VC),e(VC,Sge),e(Sge,Bst),e(VC,xst),e(VC,Eq),e(Eq,kst),e(VC,Rst),e(K,Sst),e(K,WC),e(WC,Pge),e(Pge,Pst),e(WC,$st),e(WC,yq),e(yq,Ist),e(WC,jst),e(K,Nst),e(K,QC),e(QC,$ge),e($ge,Dst),e(QC,qst),e(QC,wq),e(wq,Gst),e(QC,Ost),e(K,Xst),e(K,HC),e(HC,Ige),e(Ige,zst),e(HC,Vst),e(HC,Aq),e(Aq,Wst),e(HC,Qst),e(K,Hst),e(K,UC),e(UC,jge),e(jge,Ust),e(UC,Jst),e(UC,Lq),e(Lq,Yst),e(UC,Kst),e(K,Zst),e(K,JC),e(JC,Nge),e(Nge,ent),e(JC,ont),e(JC,Bq),e(Bq,tnt),e(JC,rnt),e(K,ant),e(K,YC),e(YC,Dge),e(Dge,snt),e(YC,nnt),e(YC,xq),e(xq,lnt),e(YC,dnt),e(K,int),e(K,KC),e(KC,qge),e(qge,cnt),e(KC,fnt),e(KC,kq),e(kq,mnt),e(KC,gnt),e(K,hnt),e(K,ZC),e(ZC,Gge),e(Gge,unt),e(ZC,pnt),e(ZC,Rq),e(Rq,_nt),e(ZC,bnt),e(K,vnt),e(K,e4),e(e4,Oge),e(Oge,Tnt),e(e4,Fnt),e(e4,Sq),e(Sq,Cnt),e(e4,Mnt),e(K,Ent),e(K,o4),e(o4,Xge),e(Xge,ynt),e(o4,wnt),e(o4,Pq),e(Pq,Ant),e(o4,Lnt),e(K,Bnt),e(K,t4),e(t4,zge),e(zge,xnt),e(t4,knt),e(t4,$q),e($q,Rnt),e(t4,Snt),e(K,Pnt),e(K,r4),e(r4,Vge),e(Vge,$nt),e(r4,Int),e(r4,Iq),e(Iq,jnt),e(r4,Nnt),e(K,Dnt),e(K,a4),e(a4,Wge),e(Wge,qnt),e(a4,Gnt),e(a4,jq),e(jq,Ont),e(a4,Xnt),e(K,znt),e(K,s4),e(s4,Qge),e(Qge,Vnt),e(s4,Wnt),e(s4,Nq),e(Nq,Qnt),e(s4,Hnt),e(K,Unt),e(K,n4),e(n4,Hge),e(Hge,Jnt),e(n4,Ynt),e(n4,Dq),e(Dq,Knt),e(n4,Znt),e(K,elt),e(K,l4),e(l4,Uge),e(Uge,olt),e(l4,tlt),e(l4,qq),e(qq,rlt),e(l4,alt),e(K,slt),e(K,d4),e(d4,Jge),e(Jge,nlt),e(d4,llt),e(d4,Gq),e(Gq,dlt),e(d4,ilt),e(To,clt),e(To,Yge),e(Yge,flt),e(To,mlt),g(d0,To,null),b(i,I7e,_),b(i,vc,_),e(vc,i4),e(i4,Kge),g(i0,Kge,null),e(vc,glt),e(vc,Zge),e(Zge,hlt),b(i,j7e,_),b(i,Tt,_),g(c0,Tt,null),e(Tt,ult),e(Tt,Tc),e(Tc,plt),e(Tc,ehe),e(ehe,_lt),e(Tc,blt),e(Tc,ohe),e(ohe,vlt),e(Tc,Tlt),e(Tt,Flt),e(Tt,f0),e(f0,Clt),e(f0,the),e(the,Mlt),e(f0,Elt),e(Tt,ylt),e(Tt,mr),g(m0,mr,null),e(mr,wlt),e(mr,rhe),e(rhe,Alt),e(mr,Llt),e(mr,Fc),e(Fc,Blt),e(Fc,ahe),e(ahe,xlt),e(Fc,klt),e(Fc,she),e(she,Rlt),e(Fc,Slt),e(mr,Plt),e(mr,nhe),e(nhe,$lt),e(mr,Ilt),g(g0,mr,null),e(Tt,jlt),e(Tt,Fo),g(h0,Fo,null),e(Fo,Nlt),e(Fo,lhe),e(lhe,Dlt),e(Fo,qlt),e(Fo,ms),e(ms,Glt),e(ms,dhe),e(dhe,Olt),e(ms,Xlt),e(ms,ihe),e(ihe,zlt),e(ms,Vlt),e(ms,che),e(che,Wlt),e(ms,Qlt),e(Fo,Hlt),e(Fo,Z),e(Z,c4),e(c4,fhe),e(fhe,Ult),e(c4,Jlt),e(c4,Oq),e(Oq,Ylt),e(c4,Klt),e(Z,Zlt),e(Z,f4),e(f4,mhe),e(mhe,edt),e(f4,odt),e(f4,Xq),e(Xq,tdt),e(f4,rdt),e(Z,adt),e(Z,m4),e(m4,ghe),e(ghe,sdt),e(m4,ndt),e(m4,zq),e(zq,ldt),e(m4,ddt),e(Z,idt),e(Z,g4),e(g4,hhe),e(hhe,cdt),e(g4,fdt),e(g4,Vq),e(Vq,mdt),e(g4,gdt),e(Z,hdt),e(Z,h4),e(h4,uhe),e(uhe,udt),e(h4,pdt),e(h4,Wq),e(Wq,_dt),e(h4,bdt),e(Z,vdt),e(Z,u4),e(u4,phe),e(phe,Tdt),e(u4,Fdt),e(u4,Qq),e(Qq,Cdt),e(u4,Mdt),e(Z,Edt),e(Z,p4),e(p4,_he),e(_he,ydt),e(p4,wdt),e(p4,Hq),e(Hq,Adt),e(p4,Ldt),e(Z,Bdt),e(Z,_4),e(_4,bhe),e(bhe,xdt),e(_4,kdt),e(_4,Uq),e(Uq,Rdt),e(_4,Sdt),e(Z,Pdt),e(Z,b4),e(b4,vhe),e(vhe,$dt),e(b4,Idt),e(b4,Jq),e(Jq,jdt),e(b4,Ndt),e(Z,Ddt),e(Z,v4),e(v4,The),e(The,qdt),e(v4,Gdt),e(v4,Yq),e(Yq,Odt),e(v4,Xdt),e(Z,zdt),e(Z,T4),e(T4,Fhe),e(Fhe,Vdt),e(T4,Wdt),e(T4,Kq),e(Kq,Qdt),e(T4,Hdt),e(Z,Udt),e(Z,F4),e(F4,Che),e(Che,Jdt),e(F4,Ydt),e(F4,Zq),e(Zq,Kdt),e(F4,Zdt),e(Z,eit),e(Z,C4),e(C4,Mhe),e(Mhe,oit),e(C4,tit),e(C4,eG),e(eG,rit),e(C4,ait),e(Z,sit),e(Z,M4),e(M4,Ehe),e(Ehe,nit),e(M4,lit),e(M4,oG),e(oG,dit),e(M4,iit),e(Z,cit),e(Z,E4),e(E4,yhe),e(yhe,fit),e(E4,mit),e(E4,tG),e(tG,git),e(E4,hit),e(Z,uit),e(Z,y4),e(y4,whe),e(whe,pit),e(y4,_it),e(y4,rG),e(rG,bit),e(y4,vit),e(Z,Tit),e(Z,w4),e(w4,Ahe),e(Ahe,Fit),e(w4,Cit),e(w4,aG),e(aG,Mit),e(w4,Eit),e(Z,yit),e(Z,A4),e(A4,Lhe),e(Lhe,wit),e(A4,Ait),e(A4,sG),e(sG,Lit),e(A4,Bit),e(Z,xit),e(Z,L4),e(L4,Bhe),e(Bhe,kit),e(L4,Rit),e(L4,nG),e(nG,Sit),e(L4,Pit),e(Fo,$it),e(Fo,xhe),e(xhe,Iit),e(Fo,jit),g(u0,Fo,null),b(i,N7e,_),b(i,Cc,_),e(Cc,B4),e(B4,khe),g(p0,khe,null),e(Cc,Nit),e(Cc,Rhe),e(Rhe,Dit),b(i,D7e,_),b(i,Ft,_),g(_0,Ft,null),e(Ft,qit),e(Ft,Mc),e(Mc,Git),e(Mc,She),e(She,Oit),e(Mc,Xit),e(Mc,Phe),e(Phe,zit),e(Mc,Vit),e(Ft,Wit),e(Ft,b0),e(b0,Qit),e(b0,$he),e($he,Hit),e(b0,Uit),e(Ft,Jit),e(Ft,gr),g(v0,gr,null),e(gr,Yit),e(gr,Ihe),e(Ihe,Kit),e(gr,Zit),e(gr,Ec),e(Ec,ect),e(Ec,jhe),e(jhe,oct),e(Ec,tct),e(Ec,Nhe),e(Nhe,rct),e(Ec,act),e(gr,sct),e(gr,Dhe),e(Dhe,nct),e(gr,lct),g(T0,gr,null),e(Ft,dct),e(Ft,Co),g(F0,Co,null),e(Co,ict),e(Co,qhe),e(qhe,cct),e(Co,fct),e(Co,gs),e(gs,mct),e(gs,Ghe),e(Ghe,gct),e(gs,hct),e(gs,Ohe),e(Ohe,uct),e(gs,pct),e(gs,Xhe),e(Xhe,_ct),e(gs,bct),e(Co,vct),e(Co,zhe),e(zhe,x4),e(x4,Vhe),e(Vhe,Tct),e(x4,Fct),e(x4,lG),e(lG,Cct),e(x4,Mct),e(Co,Ect),e(Co,Whe),e(Whe,yct),e(Co,wct),g(C0,Co,null),b(i,q7e,_),b(i,yc,_),e(yc,k4),e(k4,Qhe),g(M0,Qhe,null),e(yc,Act),e(yc,Hhe),e(Hhe,Lct),b(i,G7e,_),b(i,Ct,_),g(E0,Ct,null),e(Ct,Bct),e(Ct,wc),e(wc,xct),e(wc,Uhe),e(Uhe,kct),e(wc,Rct),e(wc,Jhe),e(Jhe,Sct),e(wc,Pct),e(Ct,$ct),e(Ct,y0),e(y0,Ict),e(y0,Yhe),e(Yhe,jct),e(y0,Nct),e(Ct,Dct),e(Ct,hr),g(w0,hr,null),e(hr,qct),e(hr,Khe),e(Khe,Gct),e(hr,Oct),e(hr,Ac),e(Ac,Xct),e(Ac,Zhe),e(Zhe,zct),e(Ac,Vct),e(Ac,eue),e(eue,Wct),e(Ac,Qct),e(hr,Hct),e(hr,oue),e(oue,Uct),e(hr,Jct),g(A0,hr,null),e(Ct,Yct),e(Ct,Mo),g(L0,Mo,null),e(Mo,Kct),e(Mo,tue),e(tue,Zct),e(Mo,eft),e(Mo,hs),e(hs,oft),e(hs,rue),e(rue,tft),e(hs,rft),e(hs,aue),e(aue,aft),e(hs,sft),e(hs,sue),e(sue,nft),e(hs,lft),e(Mo,dft),e(Mo,nue),e(nue,R4),e(R4,lue),e(lue,ift),e(R4,cft),e(R4,dG),e(dG,fft),e(R4,mft),e(Mo,gft),e(Mo,due),e(due,hft),e(Mo,uft),g(B0,Mo,null),b(i,O7e,_),b(i,Lc,_),e(Lc,S4),e(S4,iue),g(x0,iue,null),e(Lc,pft),e(Lc,cue),e(cue,_ft),b(i,X7e,_),b(i,Mt,_),g(k0,Mt,null),e(Mt,bft),e(Mt,Bc),e(Bc,vft),e(Bc,fue),e(fue,Tft),e(Bc,Fft),e(Bc,mue),e(mue,Cft),e(Bc,Mft),e(Mt,Eft),e(Mt,R0),e(R0,yft),e(R0,gue),e(gue,wft),e(R0,Aft),e(Mt,Lft),e(Mt,ur),g(S0,ur,null),e(ur,Bft),e(ur,hue),e(hue,xft),e(ur,kft),e(ur,xc),e(xc,Rft),e(xc,uue),e(uue,Sft),e(xc,Pft),e(xc,pue),e(pue,$ft),e(xc,Ift),e(ur,jft),e(ur,_ue),e(_ue,Nft),e(ur,Dft),g(P0,ur,null),e(Mt,qft),e(Mt,Eo),g($0,Eo,null),e(Eo,Gft),e(Eo,bue),e(bue,Oft),e(Eo,Xft),e(Eo,us),e(us,zft),e(us,vue),e(vue,Vft),e(us,Wft),e(us,Tue),e(Tue,Qft),e(us,Hft),e(us,Fue),e(Fue,Uft),e(us,Jft),e(Eo,Yft),e(Eo,V),e(V,P4),e(P4,Cue),e(Cue,Kft),e(P4,Zft),e(P4,iG),e(iG,emt),e(P4,omt),e(V,tmt),e(V,$4),e($4,Mue),e(Mue,rmt),e($4,amt),e($4,cG),e(cG,smt),e($4,nmt),e(V,lmt),e(V,I4),e(I4,Eue),e(Eue,dmt),e(I4,imt),e(I4,fG),e(fG,cmt),e(I4,fmt),e(V,mmt),e(V,j4),e(j4,yue),e(yue,gmt),e(j4,hmt),e(j4,mG),e(mG,umt),e(j4,pmt),e(V,_mt),e(V,N4),e(N4,wue),e(wue,bmt),e(N4,vmt),e(N4,gG),e(gG,Tmt),e(N4,Fmt),e(V,Cmt),e(V,D4),e(D4,Aue),e(Aue,Mmt),e(D4,Emt),e(D4,hG),e(hG,ymt),e(D4,wmt),e(V,Amt),e(V,q4),e(q4,Lue),e(Lue,Lmt),e(q4,Bmt),e(q4,uG),e(uG,xmt),e(q4,kmt),e(V,Rmt),e(V,G4),e(G4,Bue),e(Bue,Smt),e(G4,Pmt),e(G4,pG),e(pG,$mt),e(G4,Imt),e(V,jmt),e(V,O4),e(O4,xue),e(xue,Nmt),e(O4,Dmt),e(O4,_G),e(_G,qmt),e(O4,Gmt),e(V,Omt),e(V,X4),e(X4,kue),e(kue,Xmt),e(X4,zmt),e(X4,bG),e(bG,Vmt),e(X4,Wmt),e(V,Qmt),e(V,z4),e(z4,Rue),e(Rue,Hmt),e(z4,Umt),e(z4,vG),e(vG,Jmt),e(z4,Ymt),e(V,Kmt),e(V,V4),e(V4,Sue),e(Sue,Zmt),e(V4,egt),e(V4,TG),e(TG,ogt),e(V4,tgt),e(V,rgt),e(V,W4),e(W4,Pue),e(Pue,agt),e(W4,sgt),e(W4,FG),e(FG,ngt),e(W4,lgt),e(V,dgt),e(V,Q4),e(Q4,$ue),e($ue,igt),e(Q4,cgt),e(Q4,CG),e(CG,fgt),e(Q4,mgt),e(V,ggt),e(V,H4),e(H4,Iue),e(Iue,hgt),e(H4,ugt),e(H4,MG),e(MG,pgt),e(H4,_gt),e(V,bgt),e(V,U4),e(U4,jue),e(jue,vgt),e(U4,Tgt),e(U4,EG),e(EG,Fgt),e(U4,Cgt),e(V,Mgt),e(V,J4),e(J4,Nue),e(Nue,Egt),e(J4,ygt),e(J4,yG),e(yG,wgt),e(J4,Agt),e(V,Lgt),e(V,Y4),e(Y4,Due),e(Due,Bgt),e(Y4,xgt),e(Y4,wG),e(wG,kgt),e(Y4,Rgt),e(V,Sgt),e(V,K4),e(K4,que),e(que,Pgt),e(K4,$gt),e(K4,AG),e(AG,Igt),e(K4,jgt),e(V,Ngt),e(V,Z4),e(Z4,Gue),e(Gue,Dgt),e(Z4,qgt),e(Z4,LG),e(LG,Ggt),e(Z4,Ogt),e(V,Xgt),e(V,eM),e(eM,Oue),e(Oue,zgt),e(eM,Vgt),e(eM,BG),e(BG,Wgt),e(eM,Qgt),e(V,Hgt),e(V,oM),e(oM,Xue),e(Xue,Ugt),e(oM,Jgt),e(oM,xG),e(xG,Ygt),e(oM,Kgt),e(V,Zgt),e(V,tM),e(tM,zue),e(zue,eht),e(tM,oht),e(tM,kG),e(kG,tht),e(tM,rht),e(V,aht),e(V,rM),e(rM,Vue),e(Vue,sht),e(rM,nht),e(rM,RG),e(RG,lht),e(rM,dht),e(Eo,iht),e(Eo,Wue),e(Wue,cht),e(Eo,fht),g(I0,Eo,null),b(i,z7e,_),b(i,kc,_),e(kc,aM),e(aM,Que),g(j0,Que,null),e(kc,mht),e(kc,Hue),e(Hue,ght),b(i,V7e,_),b(i,Et,_),g(N0,Et,null),e(Et,hht),e(Et,Rc),e(Rc,uht),e(Rc,Uue),e(Uue,pht),e(Rc,_ht),e(Rc,Jue),e(Jue,bht),e(Rc,vht),e(Et,Tht),e(Et,D0),e(D0,Fht),e(D0,Yue),e(Yue,Cht),e(D0,Mht),e(Et,Eht),e(Et,pr),g(q0,pr,null),e(pr,yht),e(pr,Kue),e(Kue,wht),e(pr,Aht),e(pr,Sc),e(Sc,Lht),e(Sc,Zue),e(Zue,Bht),e(Sc,xht),e(Sc,epe),e(epe,kht),e(Sc,Rht),e(pr,Sht),e(pr,ope),e(ope,Pht),e(pr,$ht),g(G0,pr,null),e(Et,Iht),e(Et,yo),g(O0,yo,null),e(yo,jht),e(yo,tpe),e(tpe,Nht),e(yo,Dht),e(yo,ps),e(ps,qht),e(ps,rpe),e(rpe,Ght),e(ps,Oht),e(ps,ape),e(ape,Xht),e(ps,zht),e(ps,spe),e(spe,Vht),e(ps,Wht),e(yo,Qht),e(yo,_s),e(_s,sM),e(sM,npe),e(npe,Hht),e(sM,Uht),e(sM,SG),e(SG,Jht),e(sM,Yht),e(_s,Kht),e(_s,nM),e(nM,lpe),e(lpe,Zht),e(nM,eut),e(nM,PG),e(PG,out),e(nM,tut),e(_s,rut),e(_s,lM),e(lM,dpe),e(dpe,aut),e(lM,sut),e(lM,$G),e($G,nut),e(lM,lut),e(_s,dut),e(_s,dM),e(dM,ipe),e(ipe,iut),e(dM,cut),e(dM,IG),e(IG,fut),e(dM,mut),e(yo,gut),e(yo,cpe),e(cpe,hut),e(yo,uut),g(X0,yo,null),b(i,W7e,_),b(i,Pc,_),e(Pc,iM),e(iM,fpe),g(z0,fpe,null),e(Pc,put),e(Pc,mpe),e(mpe,_ut),b(i,Q7e,_),b(i,yt,_),g(V0,yt,null),e(yt,but),e(yt,$c),e($c,vut),e($c,gpe),e(gpe,Tut),e($c,Fut),e($c,hpe),e(hpe,Cut),e($c,Mut),e(yt,Eut),e(yt,W0),e(W0,yut),e(W0,upe),e(upe,wut),e(W0,Aut),e(yt,Lut),e(yt,_r),g(Q0,_r,null),e(_r,But),e(_r,ppe),e(ppe,xut),e(_r,kut),e(_r,Ic),e(Ic,Rut),e(Ic,_pe),e(_pe,Sut),e(Ic,Put),e(Ic,bpe),e(bpe,$ut),e(Ic,Iut),e(_r,jut),e(_r,vpe),e(vpe,Nut),e(_r,Dut),g(H0,_r,null),e(yt,qut),e(yt,wo),g(U0,wo,null),e(wo,Gut),e(wo,Tpe),e(Tpe,Out),e(wo,Xut),e(wo,bs),e(bs,zut),e(bs,Fpe),e(Fpe,Vut),e(bs,Wut),e(bs,Cpe),e(Cpe,Qut),e(bs,Hut),e(bs,Mpe),e(Mpe,Uut),e(bs,Jut),e(wo,Yut),e(wo,fe),e(fe,cM),e(cM,Epe),e(Epe,Kut),e(cM,Zut),e(cM,jG),e(jG,ept),e(cM,opt),e(fe,tpt),e(fe,fM),e(fM,ype),e(ype,rpt),e(fM,apt),e(fM,NG),e(NG,spt),e(fM,npt),e(fe,lpt),e(fe,mM),e(mM,wpe),e(wpe,dpt),e(mM,ipt),e(mM,DG),e(DG,cpt),e(mM,fpt),e(fe,mpt),e(fe,gM),e(gM,Ape),e(Ape,gpt),e(gM,hpt),e(gM,qG),e(qG,upt),e(gM,ppt),e(fe,_pt),e(fe,hM),e(hM,Lpe),e(Lpe,bpt),e(hM,vpt),e(hM,GG),e(GG,Tpt),e(hM,Fpt),e(fe,Cpt),e(fe,uM),e(uM,Bpe),e(Bpe,Mpt),e(uM,Ept),e(uM,OG),e(OG,ypt),e(uM,wpt),e(fe,Apt),e(fe,pM),e(pM,xpe),e(xpe,Lpt),e(pM,Bpt),e(pM,XG),e(XG,xpt),e(pM,kpt),e(fe,Rpt),e(fe,_M),e(_M,kpe),e(kpe,Spt),e(_M,Ppt),e(_M,zG),e(zG,$pt),e(_M,Ipt),e(fe,jpt),e(fe,bM),e(bM,Rpe),e(Rpe,Npt),e(bM,Dpt),e(bM,VG),e(VG,qpt),e(bM,Gpt),e(fe,Opt),e(fe,vM),e(vM,Spe),e(Spe,Xpt),e(vM,zpt),e(vM,WG),e(WG,Vpt),e(vM,Wpt),e(fe,Qpt),e(fe,TM),e(TM,Ppe),e(Ppe,Hpt),e(TM,Upt),e(TM,QG),e(QG,Jpt),e(TM,Ypt),e(wo,Kpt),e(wo,$pe),e($pe,Zpt),e(wo,e_t),g(J0,wo,null),b(i,H7e,_),b(i,jc,_),e(jc,FM),e(FM,Ipe),g(Y0,Ipe,null),e(jc,o_t),e(jc,jpe),e(jpe,t_t),b(i,U7e,_),b(i,wt,_),g(K0,wt,null),e(wt,r_t),e(wt,Nc),e(Nc,a_t),e(Nc,Npe),e(Npe,s_t),e(Nc,n_t),e(Nc,Dpe),e(Dpe,l_t),e(Nc,d_t),e(wt,i_t),e(wt,Z0),e(Z0,c_t),e(Z0,qpe),e(qpe,f_t),e(Z0,m_t),e(wt,g_t),e(wt,br),g(e6,br,null),e(br,h_t),e(br,Gpe),e(Gpe,u_t),e(br,p_t),e(br,Dc),e(Dc,__t),e(Dc,Ope),e(Ope,b_t),e(Dc,v_t),e(Dc,Xpe),e(Xpe,T_t),e(Dc,F_t),e(br,C_t),e(br,zpe),e(zpe,M_t),e(br,E_t),g(o6,br,null),e(wt,y_t),e(wt,Ao),g(t6,Ao,null),e(Ao,w_t),e(Ao,Vpe),e(Vpe,A_t),e(Ao,L_t),e(Ao,vs),e(vs,B_t),e(vs,Wpe),e(Wpe,x_t),e(vs,k_t),e(vs,Qpe),e(Qpe,R_t),e(vs,S_t),e(vs,Hpe),e(Hpe,P_t),e(vs,$_t),e(Ao,I_t),e(Ao,be),e(be,CM),e(CM,Upe),e(Upe,j_t),e(CM,N_t),e(CM,HG),e(HG,D_t),e(CM,q_t),e(be,G_t),e(be,MM),e(MM,Jpe),e(Jpe,O_t),e(MM,X_t),e(MM,UG),e(UG,z_t),e(MM,V_t),e(be,W_t),e(be,EM),e(EM,Ype),e(Ype,Q_t),e(EM,H_t),e(EM,JG),e(JG,U_t),e(EM,J_t),e(be,Y_t),e(be,yM),e(yM,Kpe),e(Kpe,K_t),e(yM,Z_t),e(yM,YG),e(YG,ebt),e(yM,obt),e(be,tbt),e(be,wM),e(wM,Zpe),e(Zpe,rbt),e(wM,abt),e(wM,KG),e(KG,sbt),e(wM,nbt),e(be,lbt),e(be,AM),e(AM,e_e),e(e_e,dbt),e(AM,ibt),e(AM,ZG),e(ZG,cbt),e(AM,fbt),e(be,mbt),e(be,LM),e(LM,o_e),e(o_e,gbt),e(LM,hbt),e(LM,eO),e(eO,ubt),e(LM,pbt),e(be,_bt),e(be,BM),e(BM,t_e),e(t_e,bbt),e(BM,vbt),e(BM,oO),e(oO,Tbt),e(BM,Fbt),e(be,Cbt),e(be,xM),e(xM,r_e),e(r_e,Mbt),e(xM,Ebt),e(xM,tO),e(tO,ybt),e(xM,wbt),e(Ao,Abt),e(Ao,a_e),e(a_e,Lbt),e(Ao,Bbt),g(r6,Ao,null),b(i,J7e,_),b(i,qc,_),e(qc,kM),e(kM,s_e),g(a6,s_e,null),e(qc,xbt),e(qc,n_e),e(n_e,kbt),b(i,Y7e,_),b(i,At,_),g(s6,At,null),e(At,Rbt),e(At,Gc),e(Gc,Sbt),e(Gc,l_e),e(l_e,Pbt),e(Gc,$bt),e(Gc,d_e),e(d_e,Ibt),e(Gc,jbt),e(At,Nbt),e(At,n6),e(n6,Dbt),e(n6,i_e),e(i_e,qbt),e(n6,Gbt),e(At,Obt),e(At,vr),g(l6,vr,null),e(vr,Xbt),e(vr,c_e),e(c_e,zbt),e(vr,Vbt),e(vr,Oc),e(Oc,Wbt),e(Oc,f_e),e(f_e,Qbt),e(Oc,Hbt),e(Oc,m_e),e(m_e,Ubt),e(Oc,Jbt),e(vr,Ybt),e(vr,g_e),e(g_e,Kbt),e(vr,Zbt),g(d6,vr,null),e(At,e2t),e(At,Lo),g(i6,Lo,null),e(Lo,o2t),e(Lo,h_e),e(h_e,t2t),e(Lo,r2t),e(Lo,Ts),e(Ts,a2t),e(Ts,u_e),e(u_e,s2t),e(Ts,n2t),e(Ts,p_e),e(p_e,l2t),e(Ts,d2t),e(Ts,__e),e(__e,i2t),e(Ts,c2t),e(Lo,f2t),e(Lo,ve),e(ve,RM),e(RM,b_e),e(b_e,m2t),e(RM,g2t),e(RM,rO),e(rO,h2t),e(RM,u2t),e(ve,p2t),e(ve,SM),e(SM,v_e),e(v_e,_2t),e(SM,b2t),e(SM,aO),e(aO,v2t),e(SM,T2t),e(ve,F2t),e(ve,PM),e(PM,T_e),e(T_e,C2t),e(PM,M2t),e(PM,sO),e(sO,E2t),e(PM,y2t),e(ve,w2t),e(ve,$M),e($M,F_e),e(F_e,A2t),e($M,L2t),e($M,nO),e(nO,B2t),e($M,x2t),e(ve,k2t),e(ve,IM),e(IM,C_e),e(C_e,R2t),e(IM,S2t),e(IM,lO),e(lO,P2t),e(IM,$2t),e(ve,I2t),e(ve,jM),e(jM,M_e),e(M_e,j2t),e(jM,N2t),e(jM,dO),e(dO,D2t),e(jM,q2t),e(ve,G2t),e(ve,NM),e(NM,E_e),e(E_e,O2t),e(NM,X2t),e(NM,iO),e(iO,z2t),e(NM,V2t),e(ve,W2t),e(ve,DM),e(DM,y_e),e(y_e,Q2t),e(DM,H2t),e(DM,cO),e(cO,U2t),e(DM,J2t),e(ve,Y2t),e(ve,qM),e(qM,w_e),e(w_e,K2t),e(qM,Z2t),e(qM,fO),e(fO,evt),e(qM,ovt),e(Lo,tvt),e(Lo,A_e),e(A_e,rvt),e(Lo,avt),g(c6,Lo,null),b(i,K7e,_),b(i,Xc,_),e(Xc,GM),e(GM,L_e),g(f6,L_e,null),e(Xc,svt),e(Xc,B_e),e(B_e,nvt),b(i,Z7e,_),b(i,Lt,_),g(m6,Lt,null),e(Lt,lvt),e(Lt,zc),e(zc,dvt),e(zc,x_e),e(x_e,ivt),e(zc,cvt),e(zc,k_e),e(k_e,fvt),e(zc,mvt),e(Lt,gvt),e(Lt,g6),e(g6,hvt),e(g6,R_e),e(R_e,uvt),e(g6,pvt),e(Lt,_vt),e(Lt,Tr),g(h6,Tr,null),e(Tr,bvt),e(Tr,S_e),e(S_e,vvt),e(Tr,Tvt),e(Tr,Vc),e(Vc,Fvt),e(Vc,P_e),e(P_e,Cvt),e(Vc,Mvt),e(Vc,$_e),e($_e,Evt),e(Vc,yvt),e(Tr,wvt),e(Tr,I_e),e(I_e,Avt),e(Tr,Lvt),g(u6,Tr,null),e(Lt,Bvt),e(Lt,Bo),g(p6,Bo,null),e(Bo,xvt),e(Bo,j_e),e(j_e,kvt),e(Bo,Rvt),e(Bo,Fs),e(Fs,Svt),e(Fs,N_e),e(N_e,Pvt),e(Fs,$vt),e(Fs,D_e),e(D_e,Ivt),e(Fs,jvt),e(Fs,q_e),e(q_e,Nvt),e(Fs,Dvt),e(Bo,qvt),e(Bo,Te),e(Te,OM),e(OM,G_e),e(G_e,Gvt),e(OM,Ovt),e(OM,mO),e(mO,Xvt),e(OM,zvt),e(Te,Vvt),e(Te,XM),e(XM,O_e),e(O_e,Wvt),e(XM,Qvt),e(XM,gO),e(gO,Hvt),e(XM,Uvt),e(Te,Jvt),e(Te,zM),e(zM,X_e),e(X_e,Yvt),e(zM,Kvt),e(zM,hO),e(hO,Zvt),e(zM,eTt),e(Te,oTt),e(Te,VM),e(VM,z_e),e(z_e,tTt),e(VM,rTt),e(VM,uO),e(uO,aTt),e(VM,sTt),e(Te,nTt),e(Te,WM),e(WM,V_e),e(V_e,lTt),e(WM,dTt),e(WM,pO),e(pO,iTt),e(WM,cTt),e(Te,fTt),e(Te,QM),e(QM,W_e),e(W_e,mTt),e(QM,gTt),e(QM,_O),e(_O,hTt),e(QM,uTt),e(Te,pTt),e(Te,HM),e(HM,Q_e),e(Q_e,_Tt),e(HM,bTt),e(HM,bO),e(bO,vTt),e(HM,TTt),e(Te,FTt),e(Te,UM),e(UM,H_e),e(H_e,CTt),e(UM,MTt),e(UM,vO),e(vO,ETt),e(UM,yTt),e(Te,wTt),e(Te,JM),e(JM,U_e),e(U_e,ATt),e(JM,LTt),e(JM,TO),e(TO,BTt),e(JM,xTt),e(Bo,kTt),e(Bo,J_e),e(J_e,RTt),e(Bo,STt),g(_6,Bo,null),b(i,e8e,_),b(i,Wc,_),e(Wc,YM),e(YM,Y_e),g(b6,Y_e,null),e(Wc,PTt),e(Wc,K_e),e(K_e,$Tt),b(i,o8e,_),b(i,Bt,_),g(v6,Bt,null),e(Bt,ITt),e(Bt,Qc),e(Qc,jTt),e(Qc,Z_e),e(Z_e,NTt),e(Qc,DTt),e(Qc,ebe),e(ebe,qTt),e(Qc,GTt),e(Bt,OTt),e(Bt,T6),e(T6,XTt),e(T6,obe),e(obe,zTt),e(T6,VTt),e(Bt,WTt),e(Bt,Fr),g(F6,Fr,null),e(Fr,QTt),e(Fr,tbe),e(tbe,HTt),e(Fr,UTt),e(Fr,Hc),e(Hc,JTt),e(Hc,rbe),e(rbe,YTt),e(Hc,KTt),e(Hc,abe),e(abe,ZTt),e(Hc,e1t),e(Fr,o1t),e(Fr,sbe),e(sbe,t1t),e(Fr,r1t),g(C6,Fr,null),e(Bt,a1t),e(Bt,xo),g(M6,xo,null),e(xo,s1t),e(xo,nbe),e(nbe,n1t),e(xo,l1t),e(xo,Cs),e(Cs,d1t),e(Cs,lbe),e(lbe,i1t),e(Cs,c1t),e(Cs,dbe),e(dbe,f1t),e(Cs,m1t),e(Cs,ibe),e(ibe,g1t),e(Cs,h1t),e(xo,u1t),e(xo,Fe),e(Fe,KM),e(KM,cbe),e(cbe,p1t),e(KM,_1t),e(KM,FO),e(FO,b1t),e(KM,v1t),e(Fe,T1t),e(Fe,ZM),e(ZM,fbe),e(fbe,F1t),e(ZM,C1t),e(ZM,CO),e(CO,M1t),e(ZM,E1t),e(Fe,y1t),e(Fe,eE),e(eE,mbe),e(mbe,w1t),e(eE,A1t),e(eE,MO),e(MO,L1t),e(eE,B1t),e(Fe,x1t),e(Fe,oE),e(oE,gbe),e(gbe,k1t),e(oE,R1t),e(oE,EO),e(EO,S1t),e(oE,P1t),e(Fe,$1t),e(Fe,tE),e(tE,hbe),e(hbe,I1t),e(tE,j1t),e(tE,yO),e(yO,N1t),e(tE,D1t),e(Fe,q1t),e(Fe,rE),e(rE,ube),e(ube,G1t),e(rE,O1t),e(rE,wO),e(wO,X1t),e(rE,z1t),e(Fe,V1t),e(Fe,aE),e(aE,pbe),e(pbe,W1t),e(aE,Q1t),e(aE,AO),e(AO,H1t),e(aE,U1t),e(Fe,J1t),e(Fe,sE),e(sE,_be),e(_be,Y1t),e(sE,K1t),e(sE,LO),e(LO,Z1t),e(sE,eFt),e(Fe,oFt),e(Fe,nE),e(nE,bbe),e(bbe,tFt),e(nE,rFt),e(nE,BO),e(BO,aFt),e(nE,sFt),e(xo,nFt),e(xo,vbe),e(vbe,lFt),e(xo,dFt),g(E6,xo,null),b(i,t8e,_),b(i,Uc,_),e(Uc,lE),e(lE,Tbe),g(y6,Tbe,null),e(Uc,iFt),e(Uc,Fbe),e(Fbe,cFt),b(i,r8e,_),b(i,xt,_),g(w6,xt,null),e(xt,fFt),e(xt,Jc),e(Jc,mFt),e(Jc,Cbe),e(Cbe,gFt),e(Jc,hFt),e(Jc,Mbe),e(Mbe,uFt),e(Jc,pFt),e(xt,_Ft),e(xt,A6),e(A6,bFt),e(A6,Ebe),e(Ebe,vFt),e(A6,TFt),e(xt,FFt),e(xt,Cr),g(L6,Cr,null),e(Cr,CFt),e(Cr,ybe),e(ybe,MFt),e(Cr,EFt),e(Cr,Yc),e(Yc,yFt),e(Yc,wbe),e(wbe,wFt),e(Yc,AFt),e(Yc,Abe),e(Abe,LFt),e(Yc,BFt),e(Cr,xFt),e(Cr,Lbe),e(Lbe,kFt),e(Cr,RFt),g(B6,Cr,null),e(xt,SFt),e(xt,ko),g(x6,ko,null),e(ko,PFt),e(ko,Bbe),e(Bbe,$Ft),e(ko,IFt),e(ko,Ms),e(Ms,jFt),e(Ms,xbe),e(xbe,NFt),e(Ms,DFt),e(Ms,kbe),e(kbe,qFt),e(Ms,GFt),e(Ms,Rbe),e(Rbe,OFt),e(Ms,XFt),e(ko,zFt),e(ko,ao),e(ao,dE),e(dE,Sbe),e(Sbe,VFt),e(dE,WFt),e(dE,xO),e(xO,QFt),e(dE,HFt),e(ao,UFt),e(ao,iE),e(iE,Pbe),e(Pbe,JFt),e(iE,YFt),e(iE,kO),e(kO,KFt),e(iE,ZFt),e(ao,eCt),e(ao,cE),e(cE,$be),e($be,oCt),e(cE,tCt),e(cE,RO),e(RO,rCt),e(cE,aCt),e(ao,sCt),e(ao,fE),e(fE,Ibe),e(Ibe,nCt),e(fE,lCt),e(fE,SO),e(SO,dCt),e(fE,iCt),e(ao,cCt),e(ao,mE),e(mE,jbe),e(jbe,fCt),e(mE,mCt),e(mE,PO),e(PO,gCt),e(mE,hCt),e(ao,uCt),e(ao,gE),e(gE,Nbe),e(Nbe,pCt),e(gE,_Ct),e(gE,$O),e($O,bCt),e(gE,vCt),e(ao,TCt),e(ao,hE),e(hE,Dbe),e(Dbe,FCt),e(hE,CCt),e(hE,IO),e(IO,MCt),e(hE,ECt),e(ko,yCt),e(ko,qbe),e(qbe,wCt),e(ko,ACt),g(k6,ko,null),b(i,a8e,_),b(i,Kc,_),e(Kc,uE),e(uE,Gbe),g(R6,Gbe,null),e(Kc,LCt),e(Kc,Obe),e(Obe,BCt),b(i,s8e,_),b(i,kt,_),g(S6,kt,null),e(kt,xCt),e(kt,Zc),e(Zc,kCt),e(Zc,Xbe),e(Xbe,RCt),e(Zc,SCt),e(Zc,zbe),e(zbe,PCt),e(Zc,$Ct),e(kt,ICt),e(kt,P6),e(P6,jCt),e(P6,Vbe),e(Vbe,NCt),e(P6,DCt),e(kt,qCt),e(kt,Mr),g($6,Mr,null),e(Mr,GCt),e(Mr,Wbe),e(Wbe,OCt),e(Mr,XCt),e(Mr,ef),e(ef,zCt),e(ef,Qbe),e(Qbe,VCt),e(ef,WCt),e(ef,Hbe),e(Hbe,QCt),e(ef,HCt),e(Mr,UCt),e(Mr,Ube),e(Ube,JCt),e(Mr,YCt),g(I6,Mr,null),e(kt,KCt),e(kt,Ro),g(j6,Ro,null),e(Ro,ZCt),e(Ro,Jbe),e(Jbe,e4t),e(Ro,o4t),e(Ro,Es),e(Es,t4t),e(Es,Ybe),e(Ybe,r4t),e(Es,a4t),e(Es,Kbe),e(Kbe,s4t),e(Es,n4t),e(Es,Zbe),e(Zbe,l4t),e(Es,d4t),e(Ro,i4t),e(Ro,so),e(so,pE),e(pE,e2e),e(e2e,c4t),e(pE,f4t),e(pE,jO),e(jO,m4t),e(pE,g4t),e(so,h4t),e(so,_E),e(_E,o2e),e(o2e,u4t),e(_E,p4t),e(_E,NO),e(NO,_4t),e(_E,b4t),e(so,v4t),e(so,bE),e(bE,t2e),e(t2e,T4t),e(bE,F4t),e(bE,DO),e(DO,C4t),e(bE,M4t),e(so,E4t),e(so,vE),e(vE,r2e),e(r2e,y4t),e(vE,w4t),e(vE,qO),e(qO,A4t),e(vE,L4t),e(so,B4t),e(so,TE),e(TE,a2e),e(a2e,x4t),e(TE,k4t),e(TE,GO),e(GO,R4t),e(TE,S4t),e(so,P4t),e(so,FE),e(FE,s2e),e(s2e,$4t),e(FE,I4t),e(FE,OO),e(OO,j4t),e(FE,N4t),e(so,D4t),e(so,CE),e(CE,n2e),e(n2e,q4t),e(CE,G4t),e(CE,XO),e(XO,O4t),e(CE,X4t),e(Ro,z4t),e(Ro,l2e),e(l2e,V4t),e(Ro,W4t),g(N6,Ro,null),b(i,n8e,_),b(i,of,_),e(of,ME),e(ME,d2e),g(D6,d2e,null),e(of,Q4t),e(of,i2e),e(i2e,H4t),b(i,l8e,_),b(i,Rt,_),g(q6,Rt,null),e(Rt,U4t),e(Rt,tf),e(tf,J4t),e(tf,c2e),e(c2e,Y4t),e(tf,K4t),e(tf,f2e),e(f2e,Z4t),e(tf,eMt),e(Rt,oMt),e(Rt,G6),e(G6,tMt),e(G6,m2e),e(m2e,rMt),e(G6,aMt),e(Rt,sMt),e(Rt,Er),g(O6,Er,null),e(Er,nMt),e(Er,g2e),e(g2e,lMt),e(Er,dMt),e(Er,rf),e(rf,iMt),e(rf,h2e),e(h2e,cMt),e(rf,fMt),e(rf,u2e),e(u2e,mMt),e(rf,gMt),e(Er,hMt),e(Er,p2e),e(p2e,uMt),e(Er,pMt),g(X6,Er,null),e(Rt,_Mt),e(Rt,So),g(z6,So,null),e(So,bMt),e(So,_2e),e(_2e,vMt),e(So,TMt),e(So,ys),e(ys,FMt),e(ys,b2e),e(b2e,CMt),e(ys,MMt),e(ys,v2e),e(v2e,EMt),e(ys,yMt),e(ys,T2e),e(T2e,wMt),e(ys,AMt),e(So,LMt),e(So,F2e),e(F2e,EE),e(EE,C2e),e(C2e,BMt),e(EE,xMt),e(EE,zO),e(zO,kMt),e(EE,RMt),e(So,SMt),e(So,M2e),e(M2e,PMt),e(So,$Mt),g(V6,So,null),b(i,d8e,_),b(i,af,_),e(af,yE),e(yE,E2e),g(W6,E2e,null),e(af,IMt),e(af,y2e),e(y2e,jMt),b(i,i8e,_),b(i,St,_),g(Q6,St,null),e(St,NMt),e(St,sf),e(sf,DMt),e(sf,w2e),e(w2e,qMt),e(sf,GMt),e(sf,A2e),e(A2e,OMt),e(sf,XMt),e(St,zMt),e(St,H6),e(H6,VMt),e(H6,L2e),e(L2e,WMt),e(H6,QMt),e(St,HMt),e(St,yr),g(U6,yr,null),e(yr,UMt),e(yr,B2e),e(B2e,JMt),e(yr,YMt),e(yr,nf),e(nf,KMt),e(nf,x2e),e(x2e,ZMt),e(nf,eEt),e(nf,k2e),e(k2e,oEt),e(nf,tEt),e(yr,rEt),e(yr,R2e),e(R2e,aEt),e(yr,sEt),g(J6,yr,null),e(St,nEt),e(St,Po),g(Y6,Po,null),e(Po,lEt),e(Po,S2e),e(S2e,dEt),e(Po,iEt),e(Po,ws),e(ws,cEt),e(ws,P2e),e(P2e,fEt),e(ws,mEt),e(ws,$2e),e($2e,gEt),e(ws,hEt),e(ws,I2e),e(I2e,uEt),e(ws,pEt),e(Po,_Et),e(Po,K6),e(K6,wE),e(wE,j2e),e(j2e,bEt),e(wE,vEt),e(wE,VO),e(VO,TEt),e(wE,FEt),e(K6,CEt),e(K6,AE),e(AE,N2e),e(N2e,MEt),e(AE,EEt),e(AE,WO),e(WO,yEt),e(AE,wEt),e(Po,AEt),e(Po,D2e),e(D2e,LEt),e(Po,BEt),g(Z6,Po,null),b(i,c8e,_),b(i,lf,_),e(lf,LE),e(LE,q2e),g(eL,q2e,null),e(lf,xEt),e(lf,G2e),e(G2e,kEt),b(i,f8e,_),b(i,Pt,_),g(oL,Pt,null),e(Pt,REt),e(Pt,df),e(df,SEt),e(df,O2e),e(O2e,PEt),e(df,$Et),e(df,X2e),e(X2e,IEt),e(df,jEt),e(Pt,NEt),e(Pt,tL),e(tL,DEt),e(tL,z2e),e(z2e,qEt),e(tL,GEt),e(Pt,OEt),e(Pt,wr),g(rL,wr,null),e(wr,XEt),e(wr,V2e),e(V2e,zEt),e(wr,VEt),e(wr,cf),e(cf,WEt),e(cf,W2e),e(W2e,QEt),e(cf,HEt),e(cf,Q2e),e(Q2e,UEt),e(cf,JEt),e(wr,YEt),e(wr,H2e),e(H2e,KEt),e(wr,ZEt),g(aL,wr,null),e(Pt,e3t),e(Pt,$o),g(sL,$o,null),e($o,o3t),e($o,U2e),e(U2e,t3t),e($o,r3t),e($o,As),e(As,a3t),e(As,J2e),e(J2e,s3t),e(As,n3t),e(As,Y2e),e(Y2e,l3t),e(As,d3t),e(As,K2e),e(K2e,i3t),e(As,c3t),e($o,f3t),e($o,Z2e),e(Z2e,BE),e(BE,eve),e(eve,m3t),e(BE,g3t),e(BE,QO),e(QO,h3t),e(BE,u3t),e($o,p3t),e($o,ove),e(ove,_3t),e($o,b3t),g(nL,$o,null),m8e=!0},p(i,[_]){const lL={};_&2&&(lL.$$scope={dirty:_,ctx:i}),_f.$set(lL);const tve={};_&2&&(tve.$$scope={dirty:_,ctx:i}),Wg.$set(tve);const rve={};_&2&&(rve.$$scope={dirty:_,ctx:i}),rh.$set(rve)},i(i){m8e||(h(ce.$$.fragment,i),h(ka.$$.fragment,i),h(k3.$$.fragment,i),h(R3.$$.fragment,i),h(_f.$$.fragment,i),h(S3.$$.fragment,i),h(P3.$$.fragment,i),h(j3.$$.fragment,i),h(N3.$$.fragment,i),h(D3.$$.fragment,i),h(q3.$$.fragment,i),h(G3.$$.fragment,i),h(z3.$$.fragment,i),h(V3.$$.fragment,i),h(W3.$$.fragment,i),h(Q3.$$.fragment,i),h(H3.$$.fragment,i),h(Y3.$$.fragment,i),h(Wg.$$.fragment,i),h(K3.$$.fragment,i),h(Z3.$$.fragment,i),h(e5.$$.fragment,i),h(o5.$$.fragment,i),h(a5.$$.fragment,i),h(rh.$$.fragment,i),h(s5.$$.fragment,i),h(n5.$$.fragment,i),h(l5.$$.fragment,i),h(i5.$$.fragment,i),h(c5.$$.fragment,i),h(f5.$$.fragment,i),h(m5.$$.fragment,i),h(g5.$$.fragment,i),h(h5.$$.fragment,i),h(p5.$$.fragment,i),h(_5.$$.fragment,i),h(b5.$$.fragment,i),h(v5.$$.fragment,i),h(T5.$$.fragment,i),h(F5.$$.fragment,i),h(M5.$$.fragment,i),h(E5.$$.fragment,i),h(y5.$$.fragment,i),h(w5.$$.fragment,i),h(A5.$$.fragment,i),h(L5.$$.fragment,i),h(x5.$$.fragment,i),h(k5.$$.fragment,i),h(R5.$$.fragment,i),h(S5.$$.fragment,i),h(P5.$$.fragment,i),h($5.$$.fragment,i),h(j5.$$.fragment,i),h(N5.$$.fragment,i),h(D5.$$.fragment,i),h(q5.$$.fragment,i),h(G5.$$.fragment,i),h(O5.$$.fragment,i),h(z5.$$.fragment,i),h(V5.$$.fragment,i),h(W5.$$.fragment,i),h(Q5.$$.fragment,i),h(H5.$$.fragment,i),h(U5.$$.fragment,i),h(Y5.$$.fragment,i),h(K5.$$.fragment,i),h(Z5.$$.fragment,i),h(ey.$$.fragment,i),h(oy.$$.fragment,i),h(ty.$$.fragment,i),h(ay.$$.fragment,i),h(sy.$$.fragment,i),h(ny.$$.fragment,i),h(ly.$$.fragment,i),h(dy.$$.fragment,i),h(iy.$$.fragment,i),h(fy.$$.fragment,i),h(my.$$.fragment,i),h(gy.$$.fragment,i),h(hy.$$.fragment,i),h(uy.$$.fragment,i),h(py.$$.fragment,i),h(by.$$.fragment,i),h(vy.$$.fragment,i),h(Ty.$$.fragment,i),h(Fy.$$.fragment,i),h(Cy.$$.fragment,i),h(My.$$.fragment,i),h(yy.$$.fragment,i),h(wy.$$.fragment,i),h(Ay.$$.fragment,i),h(Ly.$$.fragment,i),h(By.$$.fragment,i),h(xy.$$.fragment,i),h(Ry.$$.fragment,i),h(Sy.$$.fragment,i),h(Py.$$.fragment,i),h($y.$$.fragment,i),h(Iy.$$.fragment,i),h(jy.$$.fragment,i),h(Dy.$$.fragment,i),h(qy.$$.fragment,i),h(Gy.$$.fragment,i),h(Oy.$$.fragment,i),h(Xy.$$.fragment,i),h(zy.$$.fragment,i),h(Wy.$$.fragment,i),h(Qy.$$.fragment,i),h(Hy.$$.fragment,i),h(Uy.$$.fragment,i),h(Jy.$$.fragment,i),h(Yy.$$.fragment,i),h(Zy.$$.fragment,i),h(ew.$$.fragment,i),h(ow.$$.fragment,i),h(tw.$$.fragment,i),h(rw.$$.fragment,i),h(aw.$$.fragment,i),h(nw.$$.fragment,i),h(lw.$$.fragment,i),h(dw.$$.fragment,i),h(iw.$$.fragment,i),h(cw.$$.fragment,i),h(fw.$$.fragment,i),h(gw.$$.fragment,i),h(hw.$$.fragment,i),h(uw.$$.fragment,i),h(_w.$$.fragment,i),h(bw.$$.fragment,i),h(vw.$$.fragment,i),h(Fw.$$.fragment,i),h(Cw.$$.fragment,i),h(Mw.$$.fragment,i),h(Ew.$$.fragment,i),h(yw.$$.fragment,i),h(ww.$$.fragment,i),h(Lw.$$.fragment,i),h(Bw.$$.fragment,i),h(xw.$$.fragment,i),h(kw.$$.fragment,i),h(Rw.$$.fragment,i),h(Sw.$$.fragment,i),h($w.$$.fragment,i),h(Iw.$$.fragment,i),h(jw.$$.fragment,i),h(Nw.$$.fragment,i),h(Dw.$$.fragment,i),h(qw.$$.fragment,i),h(Ow.$$.fragment,i),h(Xw.$$.fragment,i),h(zw.$$.fragment,i),h(Ww.$$.fragment,i),h(Qw.$$.fragment,i),h(Hw.$$.fragment,i),h(Jw.$$.fragment,i),h(Yw.$$.fragment,i),h(Kw.$$.fragment,i),h(Zw.$$.fragment,i),h(eA.$$.fragment,i),h(oA.$$.fragment,i),h(rA.$$.fragment,i),h(aA.$$.fragment,i),h(sA.$$.fragment,i),h(nA.$$.fragment,i),h(lA.$$.fragment,i),h(dA.$$.fragment,i),h(cA.$$.fragment,i),h(fA.$$.fragment,i),h(mA.$$.fragment,i),h(gA.$$.fragment,i),h(hA.$$.fragment,i),h(uA.$$.fragment,i),h(_A.$$.fragment,i),h(bA.$$.fragment,i),h(vA.$$.fragment,i),h(TA.$$.fragment,i),h(FA.$$.fragment,i),h(CA.$$.fragment,i),h(EA.$$.fragment,i),h(yA.$$.fragment,i),h(wA.$$.fragment,i),h(AA.$$.fragment,i),h(LA.$$.fragment,i),h(BA.$$.fragment,i),h(kA.$$.fragment,i),h(RA.$$.fragment,i),h(SA.$$.fragment,i),h(PA.$$.fragment,i),h($A.$$.fragment,i),h(IA.$$.fragment,i),h(NA.$$.fragment,i),h(DA.$$.fragment,i),h(qA.$$.fragment,i),h(GA.$$.fragment,i),h(OA.$$.fragment,i),h(XA.$$.fragment,i),h(VA.$$.fragment,i),h(WA.$$.fragment,i),h(QA.$$.fragment,i),h(HA.$$.fragment,i),h(UA.$$.fragment,i),h(JA.$$.fragment,i),h(KA.$$.fragment,i),h(ZA.$$.fragment,i),h(e0.$$.fragment,i),h(o0.$$.fragment,i),h(t0.$$.fragment,i),h(r0.$$.fragment,i),h(s0.$$.fragment,i),h(n0.$$.fragment,i),h(l0.$$.fragment,i),h(d0.$$.fragment,i),h(i0.$$.fragment,i),h(c0.$$.fragment,i),h(m0.$$.fragment,i),h(g0.$$.fragment,i),h(h0.$$.fragment,i),h(u0.$$.fragment,i),h(p0.$$.fragment,i),h(_0.$$.fragment,i),h(v0.$$.fragment,i),h(T0.$$.fragment,i),h(F0.$$.fragment,i),h(C0.$$.fragment,i),h(M0.$$.fragment,i),h(E0.$$.fragment,i),h(w0.$$.fragment,i),h(A0.$$.fragment,i),h(L0.$$.fragment,i),h(B0.$$.fragment,i),h(x0.$$.fragment,i),h(k0.$$.fragment,i),h(S0.$$.fragment,i),h(P0.$$.fragment,i),h($0.$$.fragment,i),h(I0.$$.fragment,i),h(j0.$$.fragment,i),h(N0.$$.fragment,i),h(q0.$$.fragment,i),h(G0.$$.fragment,i),h(O0.$$.fragment,i),h(X0.$$.fragment,i),h(z0.$$.fragment,i),h(V0.$$.fragment,i),h(Q0.$$.fragment,i),h(H0.$$.fragment,i),h(U0.$$.fragment,i),h(J0.$$.fragment,i),h(Y0.$$.fragment,i),h(K0.$$.fragment,i),h(e6.$$.fragment,i),h(o6.$$.fragment,i),h(t6.$$.fragment,i),h(r6.$$.fragment,i),h(a6.$$.fragment,i),h(s6.$$.fragment,i),h(l6.$$.fragment,i),h(d6.$$.fragment,i),h(i6.$$.fragment,i),h(c6.$$.fragment,i),h(f6.$$.fragment,i),h(m6.$$.fragment,i),h(h6.$$.fragment,i),h(u6.$$.fragment,i),h(p6.$$.fragment,i),h(_6.$$.fragment,i),h(b6.$$.fragment,i),h(v6.$$.fragment,i),h(F6.$$.fragment,i),h(C6.$$.fragment,i),h(M6.$$.fragment,i),h(E6.$$.fragment,i),h(y6.$$.fragment,i),h(w6.$$.fragment,i),h(L6.$$.fragment,i),h(B6.$$.fragment,i),h(x6.$$.fragment,i),h(k6.$$.fragment,i),h(R6.$$.fragment,i),h(S6.$$.fragment,i),h($6.$$.fragment,i),h(I6.$$.fragment,i),h(j6.$$.fragment,i),h(N6.$$.fragment,i),h(D6.$$.fragment,i),h(q6.$$.fragment,i),h(O6.$$.fragment,i),h(X6.$$.fragment,i),h(z6.$$.fragment,i),h(V6.$$.fragment,i),h(W6.$$.fragment,i),h(Q6.$$.fragment,i),h(U6.$$.fragment,i),h(J6.$$.fragment,i),h(Y6.$$.fragment,i),h(Z6.$$.fragment,i),h(eL.$$.fragment,i),h(oL.$$.fragment,i),h(rL.$$.fragment,i),h(aL.$$.fragment,i),h(sL.$$.fragment,i),h(nL.$$.fragment,i),m8e=!0)},o(i){u(ce.$$.fragment,i),u(ka.$$.fragment,i),u(k3.$$.fragment,i),u(R3.$$.fragment,i),u(_f.$$.fragment,i),u(S3.$$.fragment,i),u(P3.$$.fragment,i),u(j3.$$.fragment,i),u(N3.$$.fragment,i),u(D3.$$.fragment,i),u(q3.$$.fragment,i),u(G3.$$.fragment,i),u(z3.$$.fragment,i),u(V3.$$.fragment,i),u(W3.$$.fragment,i),u(Q3.$$.fragment,i),u(H3.$$.fragment,i),u(Y3.$$.fragment,i),u(Wg.$$.fragment,i),u(K3.$$.fragment,i),u(Z3.$$.fragment,i),u(e5.$$.fragment,i),u(o5.$$.fragment,i),u(a5.$$.fragment,i),u(rh.$$.fragment,i),u(s5.$$.fragment,i),u(n5.$$.fragment,i),u(l5.$$.fragment,i),u(i5.$$.fragment,i),u(c5.$$.fragment,i),u(f5.$$.fragment,i),u(m5.$$.fragment,i),u(g5.$$.fragment,i),u(h5.$$.fragment,i),u(p5.$$.fragment,i),u(_5.$$.fragment,i),u(b5.$$.fragment,i),u(v5.$$.fragment,i),u(T5.$$.fragment,i),u(F5.$$.fragment,i),u(M5.$$.fragment,i),u(E5.$$.fragment,i),u(y5.$$.fragment,i),u(w5.$$.fragment,i),u(A5.$$.fragment,i),u(L5.$$.fragment,i),u(x5.$$.fragment,i),u(k5.$$.fragment,i),u(R5.$$.fragment,i),u(S5.$$.fragment,i),u(P5.$$.fragment,i),u($5.$$.fragment,i),u(j5.$$.fragment,i),u(N5.$$.fragment,i),u(D5.$$.fragment,i),u(q5.$$.fragment,i),u(G5.$$.fragment,i),u(O5.$$.fragment,i),u(z5.$$.fragment,i),u(V5.$$.fragment,i),u(W5.$$.fragment,i),u(Q5.$$.fragment,i),u(H5.$$.fragment,i),u(U5.$$.fragment,i),u(Y5.$$.fragment,i),u(K5.$$.fragment,i),u(Z5.$$.fragment,i),u(ey.$$.fragment,i),u(oy.$$.fragment,i),u(ty.$$.fragment,i),u(ay.$$.fragment,i),u(sy.$$.fragment,i),u(ny.$$.fragment,i),u(ly.$$.fragment,i),u(dy.$$.fragment,i),u(iy.$$.fragment,i),u(fy.$$.fragment,i),u(my.$$.fragment,i),u(gy.$$.fragment,i),u(hy.$$.fragment,i),u(uy.$$.fragment,i),u(py.$$.fragment,i),u(by.$$.fragment,i),u(vy.$$.fragment,i),u(Ty.$$.fragment,i),u(Fy.$$.fragment,i),u(Cy.$$.fragment,i),u(My.$$.fragment,i),u(yy.$$.fragment,i),u(wy.$$.fragment,i),u(Ay.$$.fragment,i),u(Ly.$$.fragment,i),u(By.$$.fragment,i),u(xy.$$.fragment,i),u(Ry.$$.fragment,i),u(Sy.$$.fragment,i),u(Py.$$.fragment,i),u($y.$$.fragment,i),u(Iy.$$.fragment,i),u(jy.$$.fragment,i),u(Dy.$$.fragment,i),u(qy.$$.fragment,i),u(Gy.$$.fragment,i),u(Oy.$$.fragment,i),u(Xy.$$.fragment,i),u(zy.$$.fragment,i),u(Wy.$$.fragment,i),u(Qy.$$.fragment,i),u(Hy.$$.fragment,i),u(Uy.$$.fragment,i),u(Jy.$$.fragment,i),u(Yy.$$.fragment,i),u(Zy.$$.fragment,i),u(ew.$$.fragment,i),u(ow.$$.fragment,i),u(tw.$$.fragment,i),u(rw.$$.fragment,i),u(aw.$$.fragment,i),u(nw.$$.fragment,i),u(lw.$$.fragment,i),u(dw.$$.fragment,i),u(iw.$$.fragment,i),u(cw.$$.fragment,i),u(fw.$$.fragment,i),u(gw.$$.fragment,i),u(hw.$$.fragment,i),u(uw.$$.fragment,i),u(_w.$$.fragment,i),u(bw.$$.fragment,i),u(vw.$$.fragment,i),u(Fw.$$.fragment,i),u(Cw.$$.fragment,i),u(Mw.$$.fragment,i),u(Ew.$$.fragment,i),u(yw.$$.fragment,i),u(ww.$$.fragment,i),u(Lw.$$.fragment,i),u(Bw.$$.fragment,i),u(xw.$$.fragment,i),u(kw.$$.fragment,i),u(Rw.$$.fragment,i),u(Sw.$$.fragment,i),u($w.$$.fragment,i),u(Iw.$$.fragment,i),u(jw.$$.fragment,i),u(Nw.$$.fragment,i),u(Dw.$$.fragment,i),u(qw.$$.fragment,i),u(Ow.$$.fragment,i),u(Xw.$$.fragment,i),u(zw.$$.fragment,i),u(Ww.$$.fragment,i),u(Qw.$$.fragment,i),u(Hw.$$.fragment,i),u(Jw.$$.fragment,i),u(Yw.$$.fragment,i),u(Kw.$$.fragment,i),u(Zw.$$.fragment,i),u(eA.$$.fragment,i),u(oA.$$.fragment,i),u(rA.$$.fragment,i),u(aA.$$.fragment,i),u(sA.$$.fragment,i),u(nA.$$.fragment,i),u(lA.$$.fragment,i),u(dA.$$.fragment,i),u(cA.$$.fragment,i),u(fA.$$.fragment,i),u(mA.$$.fragment,i),u(gA.$$.fragment,i),u(hA.$$.fragment,i),u(uA.$$.fragment,i),u(_A.$$.fragment,i),u(bA.$$.fragment,i),u(vA.$$.fragment,i),u(TA.$$.fragment,i),u(FA.$$.fragment,i),u(CA.$$.fragment,i),u(EA.$$.fragment,i),u(yA.$$.fragment,i),u(wA.$$.fragment,i),u(AA.$$.fragment,i),u(LA.$$.fragment,i),u(BA.$$.fragment,i),u(kA.$$.fragment,i),u(RA.$$.fragment,i),u(SA.$$.fragment,i),u(PA.$$.fragment,i),u($A.$$.fragment,i),u(IA.$$.fragment,i),u(NA.$$.fragment,i),u(DA.$$.fragment,i),u(qA.$$.fragment,i),u(GA.$$.fragment,i),u(OA.$$.fragment,i),u(XA.$$.fragment,i),u(VA.$$.fragment,i),u(WA.$$.fragment,i),u(QA.$$.fragment,i),u(HA.$$.fragment,i),u(UA.$$.fragment,i),u(JA.$$.fragment,i),u(KA.$$.fragment,i),u(ZA.$$.fragment,i),u(e0.$$.fragment,i),u(o0.$$.fragment,i),u(t0.$$.fragment,i),u(r0.$$.fragment,i),u(s0.$$.fragment,i),u(n0.$$.fragment,i),u(l0.$$.fragment,i),u(d0.$$.fragment,i),u(i0.$$.fragment,i),u(c0.$$.fragment,i),u(m0.$$.fragment,i),u(g0.$$.fragment,i),u(h0.$$.fragment,i),u(u0.$$.fragment,i),u(p0.$$.fragment,i),u(_0.$$.fragment,i),u(v0.$$.fragment,i),u(T0.$$.fragment,i),u(F0.$$.fragment,i),u(C0.$$.fragment,i),u(M0.$$.fragment,i),u(E0.$$.fragment,i),u(w0.$$.fragment,i),u(A0.$$.fragment,i),u(L0.$$.fragment,i),u(B0.$$.fragment,i),u(x0.$$.fragment,i),u(k0.$$.fragment,i),u(S0.$$.fragment,i),u(P0.$$.fragment,i),u($0.$$.fragment,i),u(I0.$$.fragment,i),u(j0.$$.fragment,i),u(N0.$$.fragment,i),u(q0.$$.fragment,i),u(G0.$$.fragment,i),u(O0.$$.fragment,i),u(X0.$$.fragment,i),u(z0.$$.fragment,i),u(V0.$$.fragment,i),u(Q0.$$.fragment,i),u(H0.$$.fragment,i),u(U0.$$.fragment,i),u(J0.$$.fragment,i),u(Y0.$$.fragment,i),u(K0.$$.fragment,i),u(e6.$$.fragment,i),u(o6.$$.fragment,i),u(t6.$$.fragment,i),u(r6.$$.fragment,i),u(a6.$$.fragment,i),u(s6.$$.fragment,i),u(l6.$$.fragment,i),u(d6.$$.fragment,i),u(i6.$$.fragment,i),u(c6.$$.fragment,i),u(f6.$$.fragment,i),u(m6.$$.fragment,i),u(h6.$$.fragment,i),u(u6.$$.fragment,i),u(p6.$$.fragment,i),u(_6.$$.fragment,i),u(b6.$$.fragment,i),u(v6.$$.fragment,i),u(F6.$$.fragment,i),u(C6.$$.fragment,i),u(M6.$$.fragment,i),u(E6.$$.fragment,i),u(y6.$$.fragment,i),u(w6.$$.fragment,i),u(L6.$$.fragment,i),u(B6.$$.fragment,i),u(x6.$$.fragment,i),u(k6.$$.fragment,i),u(R6.$$.fragment,i),u(S6.$$.fragment,i),u($6.$$.fragment,i),u(I6.$$.fragment,i),u(j6.$$.fragment,i),u(N6.$$.fragment,i),u(D6.$$.fragment,i),u(q6.$$.fragment,i),u(O6.$$.fragment,i),u(X6.$$.fragment,i),u(z6.$$.fragment,i),u(V6.$$.fragment,i),u(W6.$$.fragment,i),u(Q6.$$.fragment,i),u(U6.$$.fragment,i),u(J6.$$.fragment,i),u(Y6.$$.fragment,i),u(Z6.$$.fragment,i),u(eL.$$.fragment,i),u(oL.$$.fragment,i),u(rL.$$.fragment,i),u(aL.$$.fragment,i),u(sL.$$.fragment,i),u(nL.$$.fragment,i),m8e=!1},d(i){r(J),i&&r(Ae),i&&r(le),p(ce),i&&r(mf),i&&r(ta),i&&r(Ee),i&&r(no),i&&r(hf),p(ka,i),i&&r(lo),i&&r(ge),i&&r(Do),i&&r(Ra),i&&r(uLe),i&&r(yd),p(k3),i&&r(pLe),i&&r(Rs),i&&r(_Le),p(R3,i),i&&r(bLe),i&&r(d7),i&&r(vLe),p(_f,i),i&&r(TLe),i&&r(wd),p(S3),i&&r(FLe),i&&r(qo),p(P3),p(j3),p(N3),p(D3),i&&r(CLe),i&&r(Ld),p(q3),i&&r(MLe),i&&r(Go),p(G3),p(z3),p(V3),p(W3),i&&r(ELe),i&&r(Bd),p(Q3),i&&r(yLe),i&&r(Oo),p(H3),p(Y3),p(Wg),p(K3),p(Z3),i&&r(wLe),i&&r(xd),p(e5),i&&r(ALe),i&&r(ea),p(o5),p(a5),p(rh),p(s5),i&&r(LLe),i&&r(Rd),p(n5),i&&r(BLe),i&&r(Xo),p(l5),p(i5),p(c5),p(f5),p(m5),i&&r(xLe),i&&r($d),p(g5),i&&r(kLe),i&&r(zo),p(h5),p(p5),p(_5),p(b5),p(v5),i&&r(RLe),i&&r(Nd),p(T5),i&&r(SLe),i&&r(Vo),p(F5),p(M5),p(E5),p(y5),p(w5),i&&r(PLe),i&&r(Gd),p(A5),i&&r($Le),i&&r(Wo),p(L5),p(x5),p(k5),p(R5),p(S5),i&&r(ILe),i&&r(zd),p(P5),i&&r(jLe),i&&r(Qo),p($5),p(j5),p(N5),p(D5),p(q5),i&&r(NLe),i&&r(Qd),p(G5),i&&r(DLe),i&&r(Ho),p(O5),p(z5),p(V5),p(W5),p(Q5),i&&r(qLe),i&&r(Jd),p(H5),i&&r(GLe),i&&r(Uo),p(U5),p(Y5),p(K5),p(Z5),p(ey),i&&r(OLe),i&&r(Zd),p(oy),i&&r(XLe),i&&r(Jo),p(ty),p(ay),p(sy),p(ny),p(ly),i&&r(zLe),i&&r(ti),p(dy),i&&r(VLe),i&&r(Yo),p(iy),p(fy),p(my),p(gy),p(hy),i&&r(WLe),i&&r(si),p(uy),i&&r(QLe),i&&r(Ko),p(py),p(by),p(vy),p(Ty),p(Fy),i&&r(HLe),i&&r(di),p(Cy),i&&r(ULe),i&&r(Zo),p(My),p(yy),p(wy),p(Ay),p(Ly),i&&r(JLe),i&&r(fi),p(By),i&&r(YLe),i&&r(et),p(xy),p(Ry),p(Sy),p(Py),p($y),i&&r(KLe),i&&r(hi),p(Iy),i&&r(ZLe),i&&r(ot),p(jy),p(Dy),p(qy),p(Gy),p(Oy),i&&r(e7e),i&&r(_i),p(Xy),i&&r(o7e),i&&r(tt),p(zy),p(Wy),p(Qy),p(Hy),p(Uy),i&&r(t7e),i&&r(Ti),p(Jy),i&&r(r7e),i&&r(rt),p(Yy),p(Zy),p(ew),p(ow),p(tw),i&&r(a7e),i&&r(Ei),p(rw),i&&r(s7e),i&&r(at),p(aw),p(nw),p(lw),p(dw),p(iw),i&&r(n7e),i&&r(Ai),p(cw),i&&r(l7e),i&&r(st),p(fw),p(gw),p(hw),p(uw),p(_w),i&&r(d7e),i&&r(xi),p(bw),i&&r(i7e),i&&r(nt),p(vw),p(Fw),p(Cw),p(Mw),p(Ew),i&&r(c7e),i&&r(Pi),p(yw),i&&r(f7e),i&&r(lt),p(ww),p(Lw),p(Bw),p(xw),p(kw),i&&r(m7e),i&&r(ji),p(Rw),i&&r(g7e),i&&r(dt),p(Sw),p($w),p(Iw),p(jw),p(Nw),i&&r(h7e),i&&r(qi),p(Dw),i&&r(u7e),i&&r(it),p(qw),p(Ow),p(Xw),p(zw),p(Ww),i&&r(p7e),i&&r(Xi),p(Qw),i&&r(_7e),i&&r(ct),p(Hw),p(Jw),p(Yw),p(Kw),p(Zw),i&&r(b7e),i&&r(Wi),p(eA),i&&r(v7e),i&&r(ft),p(oA),p(rA),p(aA),p(sA),p(nA),i&&r(T7e),i&&r(Ui),p(lA),i&&r(F7e),i&&r(mt),p(dA),p(cA),p(fA),p(mA),p(gA),i&&r(C7e),i&&r(Ki),p(hA),i&&r(M7e),i&&r(gt),p(uA),p(_A),p(bA),p(vA),p(TA),i&&r(E7e),i&&r(oc),p(FA),i&&r(y7e),i&&r(ht),p(CA),p(EA),p(yA),p(wA),p(AA),i&&r(w7e),i&&r(ac),p(LA),i&&r(A7e),i&&r(ut),p(BA),p(kA),p(RA),p(SA),p(PA),i&&r(L7e),i&&r(lc),p($A),i&&r(B7e),i&&r(pt),p(IA),p(NA),p(DA),p(qA),p(GA),i&&r(x7e),i&&r(cc),p(OA),i&&r(k7e),i&&r(_t),p(XA),p(VA),p(WA),p(QA),p(HA),i&&r(R7e),i&&r(gc),p(UA),i&&r(S7e),i&&r(bt),p(JA),p(KA),p(ZA),p(e0),p(o0),i&&r(P7e),i&&r(pc),p(t0),i&&r($7e),i&&r(vt),p(r0),p(s0),p(n0),p(l0),p(d0),i&&r(I7e),i&&r(vc),p(i0),i&&r(j7e),i&&r(Tt),p(c0),p(m0),p(g0),p(h0),p(u0),i&&r(N7e),i&&r(Cc),p(p0),i&&r(D7e),i&&r(Ft),p(_0),p(v0),p(T0),p(F0),p(C0),i&&r(q7e),i&&r(yc),p(M0),i&&r(G7e),i&&r(Ct),p(E0),p(w0),p(A0),p(L0),p(B0),i&&r(O7e),i&&r(Lc),p(x0),i&&r(X7e),i&&r(Mt),p(k0),p(S0),p(P0),p($0),p(I0),i&&r(z7e),i&&r(kc),p(j0),i&&r(V7e),i&&r(Et),p(N0),p(q0),p(G0),p(O0),p(X0),i&&r(W7e),i&&r(Pc),p(z0),i&&r(Q7e),i&&r(yt),p(V0),p(Q0),p(H0),p(U0),p(J0),i&&r(H7e),i&&r(jc),p(Y0),i&&r(U7e),i&&r(wt),p(K0),p(e6),p(o6),p(t6),p(r6),i&&r(J7e),i&&r(qc),p(a6),i&&r(Y7e),i&&r(At),p(s6),p(l6),p(d6),p(i6),p(c6),i&&r(K7e),i&&r(Xc),p(f6),i&&r(Z7e),i&&r(Lt),p(m6),p(h6),p(u6),p(p6),p(_6),i&&r(e8e),i&&r(Wc),p(b6),i&&r(o8e),i&&r(Bt),p(v6),p(F6),p(C6),p(M6),p(E6),i&&r(t8e),i&&r(Uc),p(y6),i&&r(r8e),i&&r(xt),p(w6),p(L6),p(B6),p(x6),p(k6),i&&r(a8e),i&&r(Kc),p(R6),i&&r(s8e),i&&r(kt),p(S6),p($6),p(I6),p(j6),p(N6),i&&r(n8e),i&&r(of),p(D6),i&&r(l8e),i&&r(Rt),p(q6),p(O6),p(X6),p(z6),p(V6),i&&r(d8e),i&&r(af),p(W6),i&&r(i8e),i&&r(St),p(Q6),p(U6),p(J6),p(Y6),p(Z6),i&&r(c8e),i&&r(lf),p(eL),i&&r(f8e),i&&r(Pt),p(oL),p(rL),p(aL),p(sL),p(nL)}}}const Dfr={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function qfr(_d,J,Ae){let{fw:le}=J;return _d.$$set=me=>{"fw"in me&&Ae(0,le=me.fw)},[le]}class Qfr extends kfr{constructor(J){super();Rfr(this,J,qfr,Nfr,Sfr,{fw:0})}}export{Qfr as default,Dfr as metadata};
