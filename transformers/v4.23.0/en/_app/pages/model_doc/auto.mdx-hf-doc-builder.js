import{S as Rba,i as Pba,s as Bba,e as a,k as l,w as F,t as o,M as Iba,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as v,y as M,q as E,o as C,B as w,v as Nba,L as N}from"../../chunks/vendor-hf-doc-builder.js";import{T as YMt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as oe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as I}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function qba($){let g,b,u,m,p,d,h,xo,dd,Rm,vt,cd,fd,Cx,Pm,Ve,He,md,ns,wx,ss,ls,Ax,gd,is,Lx,hd,Bm,Ja;return{c(){g=a("p"),b=o("If your "),u=a("code"),m=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("~transformer.PretrainedConfig"),xo=o(`, make sure its
`),dd=a("code"),Rm=o("model_type"),vt=o(" attribute is set to the same key you use when registering the config (here "),cd=a("code"),fd=o('"new-model"'),Cx=o(")."),Pm=l(),Ve=a("p"),He=o("Likewise, if your "),md=a("code"),ns=o("NewModel"),wx=o(" is a subclass of "),ss=a("a"),ls=o("PreTrainedModel"),Ax=o(`, make sure its
`),gd=a("code"),is=o("config_class"),Lx=o(` attribute is set to the same class you use when registering the model (here
`),hd=a("code"),Bm=o("NewModelConfig"),Ja=o(")."),this.h()},l(Je){g=n(Je,"P",{});var Ae=s(g);b=r(Ae,"If your "),u=n(Ae,"CODE",{});var RI=s(u);m=r(RI,"NewModelConfig"),RI.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var ud=s(d);h=r(ud,"~transformer.PretrainedConfig"),ud.forEach(t),xo=r(Ae,`, make sure its
`),dd=n(Ae,"CODE",{});var PI=s(dd);Rm=r(PI,"model_type"),PI.forEach(t),vt=r(Ae," attribute is set to the same key you use when registering the config (here "),cd=n(Ae,"CODE",{});var BI=s(cd);fd=r(BI,'"new-model"'),BI.forEach(t),Cx=r(Ae,")."),Ae.forEach(t),Pm=i(Je),Ve=n(Je,"P",{});var $o=s(Ve);He=r($o,"Likewise, if your "),md=n($o,"CODE",{});var Ya=s(md);ns=r(Ya,"NewModel"),Ya.forEach(t),wx=r($o," is a subclass of "),ss=n($o,"A",{href:!0});var II=s(ss);ls=r(II,"PreTrainedModel"),II.forEach(t),Ax=r($o,`, make sure its
`),gd=n($o,"CODE",{});var Im=s(gd);is=r(Im,"config_class"),Im.forEach(t),Lx=r($o,` attribute is set to the same class you use when registering the model (here
`),hd=n($o,"CODE",{});var NI=s(hd);Bm=r(NI,"NewModelConfig"),NI.forEach(t),Ja=r($o,")."),$o.forEach(t),this.h()},h(){c(ss,"href","/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel")},m(Je,Ae){v(Je,g,Ae),e(g,b),e(g,u),e(u,m),e(g,p),e(g,d),e(d,h),e(g,xo),e(g,dd),e(dd,Rm),e(g,vt),e(g,cd),e(cd,fd),e(g,Cx),v(Je,Pm,Ae),v(Je,Ve,Ae),e(Ve,He),e(Ve,md),e(md,ns),e(Ve,wx),e(Ve,ss),e(ss,ls),e(Ve,Ax),e(Ve,gd),e(gd,is),e(Ve,Lx),e(Ve,hd),e(hd,Bm),e(Ve,Ja)},d(Je){Je&&t(g),Je&&t(Pm),Je&&t(Ve)}}}function jba($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function Dba($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function Gba($){let g,b,u,m,p;return{c(){g=a("p"),b=o("Passing "),u=a("code"),m=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Passing "),u=n(h,"CODE",{});var xo=s(u);m=r(xo,"use_auth_token=True"),xo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){v(d,g,h),e(g,b),e(g,u),e(u,m),e(g,p)},d(d){d&&t(g)}}}function Oba($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function Vba($){let g,b,u,m,p;return{c(){g=a("p"),b=o("Passing "),u=a("code"),m=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Passing "),u=n(h,"CODE",{});var xo=s(u);m=r(xo,"use_auth_token=True"),xo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){v(d,g,h),e(g,b),e(g,u),e(u,m),e(g,p)},d(d){d&&t(g)}}}function Xba($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function zba($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function Qba($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function Wba($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function Uba($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function Hba($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function Jba($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function Yba($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function Zba($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function Kba($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function e3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function o3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function r3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function t3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function a3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function n3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function s3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function l3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function i3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function d3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function c3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function f3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function m3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function g3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForDocumentQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")
model = AutoModelForDocumentQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function h3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForDocumentQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")

# Update configuration during loading
model = AutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/layoutlm_tf_model_config.json")
model = AutoModelForDocumentQuestionAnswering.from_pretrained(
    "./tf_model/layoutlm_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/layoutlm_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/layoutlm_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function u3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function p3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function _3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVideoClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function v3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVideoClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function b3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function F3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function T3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function M3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function E3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function C3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function w3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function A3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function L3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function y3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function x3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function $3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function k3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function S3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function R3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function P3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function B3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function I3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function N3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function q3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function j3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function D3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function G3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function O3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function V3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForZeroShotObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForZeroShotObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForZeroShotObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForZeroShotObjectDetection.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function X3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForZeroShotObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForZeroShotObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForZeroShotObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForZeroShotObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForZeroShotObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForZeroShotObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForZeroShotObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForZeroShotObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function z3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function Q3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function W3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function U3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function H3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function J3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function Y3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function Z3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function K3a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function e0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSemanticSegmentation.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function o0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function r0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function t0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function a0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function n0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function s0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function l0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function i0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function d0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function c0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function f0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function m0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function g0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForDocumentQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")
model = TFAutoModelForDocumentQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function h0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForDocumentQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")

# Update configuration during loading
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/layoutlm_pt_model_config.json")
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(
    "./pt_model/layoutlm_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/layoutlm_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/layoutlm_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function u0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function p0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function _0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function v0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function b0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function F0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function T0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function M0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function E0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function C0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function w0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function A0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function L0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function y0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function x0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function $0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function k0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function S0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function R0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function P0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function B0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function I0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function N0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function q0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function j0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function D0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function G0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function O0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function V0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function X0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function z0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function Q0a($){let g,b,u,m,p;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:N,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function W0a($){let g,b,u,m,p,d,h,xo,dd,Rm,vt,cd,fd,Cx,Pm,Ve,He,md,ns,wx,ss,ls,Ax,gd,is,Lx,hd,Bm,Ja,Je,Ae,RI,ud,PI,BI,$o,Ya,II,Im,NI,Jno,poo,pd,Nm,Jce,yx,Yno,Yce,Zno,_oo,ds,Kno,Zce,eso,oso,Kce,rso,tso,voo,xx,boo,qI,aso,Foo,qm,Too,_d,jm,efe,$x,nso,ofe,sso,Moo,ko,kx,lso,Sx,iso,jI,dso,cso,fso,Rx,mso,rfe,gso,hso,uso,Ir,Px,pso,tfe,_so,vso,vd,bso,afe,Fso,Tso,nfe,Mso,Eso,Cso,A,Dm,sfe,wso,Aso,DI,Lso,yso,xso,Gm,lfe,$so,kso,GI,Sso,Rso,Pso,Om,ife,Bso,Iso,OI,Nso,qso,jso,Vm,dfe,Dso,Gso,VI,Oso,Vso,Xso,Xm,cfe,zso,Qso,XI,Wso,Uso,Hso,zm,ffe,Jso,Yso,zI,Zso,Kso,elo,Qm,mfe,olo,rlo,QI,tlo,alo,nlo,Wm,gfe,slo,llo,WI,ilo,dlo,clo,Um,hfe,flo,mlo,UI,glo,hlo,ulo,Hm,ufe,plo,_lo,HI,vlo,blo,Flo,Jm,pfe,Tlo,Mlo,JI,Elo,Clo,wlo,Ym,_fe,Alo,Llo,YI,ylo,xlo,$lo,Zm,vfe,klo,Slo,ZI,Rlo,Plo,Blo,Km,bfe,Ilo,Nlo,KI,qlo,jlo,Dlo,eg,Ffe,Glo,Olo,eN,Vlo,Xlo,zlo,og,Tfe,Qlo,Wlo,oN,Ulo,Hlo,Jlo,rg,Mfe,Ylo,Zlo,rN,Klo,eio,oio,tg,Efe,rio,tio,tN,aio,nio,sio,ag,Cfe,lio,iio,aN,dio,cio,fio,ng,wfe,mio,gio,nN,hio,uio,pio,sg,Afe,_io,vio,sN,bio,Fio,Tio,lg,Lfe,Mio,Eio,lN,Cio,wio,Aio,ig,yfe,Lio,yio,iN,xio,$io,kio,dg,xfe,Sio,Rio,dN,Pio,Bio,Iio,cg,$fe,Nio,qio,cN,jio,Dio,Gio,fg,kfe,Oio,Vio,fN,Xio,zio,Qio,mg,Sfe,Wio,Uio,mN,Hio,Jio,Yio,gg,Rfe,Zio,Kio,gN,edo,odo,rdo,hg,Pfe,tdo,ado,hN,ndo,sdo,ldo,ug,Bfe,ido,ddo,uN,cdo,fdo,mdo,pg,Ife,gdo,hdo,pN,udo,pdo,_do,_g,Nfe,vdo,bdo,_N,Fdo,Tdo,Mdo,vg,qfe,Edo,Cdo,vN,wdo,Ado,Ldo,bg,jfe,ydo,xdo,bN,$do,kdo,Sdo,Fg,Dfe,Rdo,Pdo,FN,Bdo,Ido,Ndo,Tg,Gfe,qdo,jdo,TN,Ddo,Gdo,Odo,Mg,Ofe,Vdo,Xdo,MN,zdo,Qdo,Wdo,Eg,Vfe,Udo,Hdo,EN,Jdo,Ydo,Zdo,Cg,Xfe,Kdo,eco,CN,oco,rco,tco,wg,zfe,aco,nco,wN,sco,lco,ico,Ag,Qfe,dco,cco,AN,fco,mco,gco,Lg,Wfe,hco,uco,LN,pco,_co,vco,yg,Ufe,bco,Fco,yN,Tco,Mco,Eco,xg,Hfe,Cco,wco,xN,Aco,Lco,yco,$g,Jfe,xco,$co,$N,kco,Sco,Rco,kg,Yfe,Pco,Bco,kN,Ico,Nco,qco,Sg,Zfe,jco,Dco,SN,Gco,Oco,Vco,Rg,Kfe,Xco,zco,RN,Qco,Wco,Uco,Pg,eme,Hco,Jco,PN,Yco,Zco,Kco,Bg,ome,efo,ofo,BN,rfo,tfo,afo,Ig,rme,nfo,sfo,IN,lfo,ifo,dfo,Ng,tme,cfo,ffo,NN,mfo,gfo,hfo,qg,ame,ufo,pfo,qN,_fo,vfo,bfo,jg,nme,Ffo,Tfo,jN,Mfo,Efo,Cfo,Dg,sme,wfo,Afo,DN,Lfo,yfo,xfo,Gg,lme,$fo,kfo,GN,Sfo,Rfo,Pfo,Og,ime,Bfo,Ifo,ON,Nfo,qfo,jfo,Vg,dme,Dfo,Gfo,VN,Ofo,Vfo,Xfo,Xg,cme,zfo,Qfo,XN,Wfo,Ufo,Hfo,zg,fme,Jfo,Yfo,zN,Zfo,Kfo,emo,Qg,mme,omo,rmo,QN,tmo,amo,nmo,Wg,gme,smo,lmo,WN,imo,dmo,cmo,Ug,hme,fmo,mmo,UN,gmo,hmo,umo,Hg,ume,pmo,_mo,HN,vmo,bmo,Fmo,Jg,pme,Tmo,Mmo,JN,Emo,Cmo,wmo,Yg,_me,Amo,Lmo,YN,ymo,xmo,$mo,Zg,vme,kmo,Smo,ZN,Rmo,Pmo,Bmo,Kg,bme,Imo,Nmo,KN,qmo,jmo,Dmo,eh,Fme,Gmo,Omo,eq,Vmo,Xmo,zmo,oh,Tme,Qmo,Wmo,oq,Umo,Hmo,Jmo,rh,Mme,Ymo,Zmo,rq,Kmo,ego,ogo,th,Eme,rgo,tgo,tq,ago,ngo,sgo,ah,Cme,lgo,igo,aq,dgo,cgo,fgo,nh,wme,mgo,ggo,nq,hgo,ugo,pgo,sh,Ame,_go,vgo,sq,bgo,Fgo,Tgo,lh,Lme,Mgo,Ego,lq,Cgo,wgo,Ago,ih,yme,Lgo,ygo,iq,xgo,$go,kgo,dh,xme,Sgo,Rgo,dq,Pgo,Bgo,Igo,ch,$me,Ngo,qgo,cq,jgo,Dgo,Ggo,fh,kme,Ogo,Vgo,fq,Xgo,zgo,Qgo,mh,Sme,Wgo,Ugo,mq,Hgo,Jgo,Ygo,gh,Rme,Zgo,Kgo,gq,eho,oho,rho,hh,Pme,tho,aho,hq,nho,sho,lho,uh,Bme,iho,dho,uq,cho,fho,mho,ph,Ime,gho,hho,pq,uho,pho,_ho,_h,Nme,vho,bho,_q,Fho,Tho,Mho,vh,qme,Eho,Cho,vq,who,Aho,Lho,bh,jme,yho,xho,bq,$ho,kho,Sho,Fh,Dme,Rho,Pho,Fq,Bho,Iho,Nho,Th,Gme,qho,jho,Tq,Dho,Gho,Oho,Mh,Ome,Vho,Xho,Mq,zho,Qho,Who,Eh,Vme,Uho,Hho,Eq,Jho,Yho,Zho,Ch,Xme,Kho,euo,Cq,ouo,ruo,tuo,wh,zme,auo,nuo,wq,suo,luo,iuo,Ah,Qme,duo,cuo,Aq,fuo,muo,guo,Lh,Wme,huo,uuo,Lq,puo,_uo,vuo,yh,Ume,buo,Fuo,yq,Tuo,Muo,Euo,xh,Hme,Cuo,wuo,xq,Auo,Luo,yuo,$h,Jme,xuo,$uo,$q,kuo,Suo,Ruo,kh,Yme,Puo,Buo,kq,Iuo,Nuo,quo,Sh,Zme,juo,Duo,Sq,Guo,Ouo,Vuo,Rh,Kme,Xuo,zuo,Rq,Quo,Wuo,Uuo,Ph,ege,Huo,Juo,Pq,Yuo,Zuo,Kuo,Bh,oge,epo,opo,Bq,rpo,tpo,apo,Ih,rge,npo,spo,Iq,lpo,ipo,dpo,Nh,tge,cpo,fpo,Nq,mpo,gpo,hpo,qh,age,upo,ppo,qq,_po,vpo,bpo,jh,nge,Fpo,Tpo,jq,Mpo,Epo,Cpo,Dh,sge,wpo,Apo,Dq,Lpo,ypo,xpo,Gh,lge,$po,kpo,Gq,Spo,Rpo,Ppo,Oh,ige,Bpo,Ipo,Oq,Npo,qpo,jpo,Vh,dge,Dpo,Gpo,Vq,Opo,Vpo,Xpo,Xh,cge,zpo,Qpo,Xq,Wpo,Upo,Hpo,zh,fge,Jpo,Ypo,zq,Zpo,Kpo,e_o,Qh,mge,o_o,r_o,Qq,t_o,a_o,n_o,Wh,gge,s_o,l_o,Wq,i_o,d_o,c_o,Uh,hge,f_o,m_o,Uq,g_o,h_o,u_o,Hh,uge,p_o,__o,Hq,v_o,b_o,F_o,Jh,pge,T_o,M_o,Jq,E_o,C_o,w_o,Yh,_ge,A_o,L_o,Yq,y_o,x_o,$_o,Zh,vge,k_o,S_o,Zq,R_o,P_o,B_o,Kh,bge,I_o,N_o,Kq,q_o,j_o,D_o,eu,Fge,G_o,O_o,ej,V_o,X_o,z_o,ou,Tge,Q_o,W_o,oj,U_o,H_o,J_o,ru,Mge,Y_o,Z_o,rj,K_o,e2o,o2o,tu,Ege,r2o,t2o,tj,a2o,n2o,s2o,au,Cge,l2o,i2o,aj,d2o,c2o,f2o,nu,wge,m2o,g2o,nj,h2o,u2o,p2o,su,Age,_2o,v2o,sj,b2o,F2o,T2o,lu,Lge,M2o,E2o,lj,C2o,w2o,A2o,iu,yge,L2o,y2o,ij,x2o,$2o,k2o,du,xge,S2o,R2o,dj,P2o,B2o,I2o,cu,$ge,N2o,q2o,cj,j2o,D2o,G2o,fu,O2o,mu,Bx,V2o,kge,X2o,Eoo,bd,gu,Sge,Ix,z2o,Rge,Q2o,Coo,So,Nx,W2o,qx,U2o,fj,H2o,J2o,Y2o,jx,Z2o,Pge,K2o,evo,ovo,Nr,Dx,rvo,Bge,tvo,avo,Za,nvo,Ige,svo,lvo,Nge,ivo,dvo,qge,cvo,fvo,mvo,k,cs,jge,gvo,hvo,mj,uvo,pvo,gj,_vo,vvo,bvo,fs,Dge,Fvo,Tvo,hj,Mvo,Evo,uj,Cvo,wvo,Avo,ms,Gge,Lvo,yvo,pj,xvo,$vo,_j,kvo,Svo,Rvo,hu,Oge,Pvo,Bvo,vj,Ivo,Nvo,qvo,gs,Vge,jvo,Dvo,bj,Gvo,Ovo,Fj,Vvo,Xvo,zvo,uu,Xge,Qvo,Wvo,Tj,Uvo,Hvo,Jvo,pu,zge,Yvo,Zvo,Mj,Kvo,e4o,o4o,_u,Qge,r4o,t4o,Ej,a4o,n4o,s4o,hs,Wge,l4o,i4o,Cj,d4o,c4o,wj,f4o,m4o,g4o,us,Uge,h4o,u4o,Aj,p4o,_4o,Lj,v4o,b4o,F4o,ps,Hge,T4o,M4o,yj,E4o,C4o,xj,w4o,A4o,L4o,vu,Jge,y4o,x4o,$j,$4o,k4o,S4o,bu,Yge,R4o,P4o,kj,B4o,I4o,N4o,Fu,Zge,q4o,j4o,Sj,D4o,G4o,O4o,_s,Kge,V4o,X4o,Rj,z4o,Q4o,Pj,W4o,U4o,H4o,Tu,ehe,J4o,Y4o,Bj,Z4o,K4o,e1o,vs,ohe,o1o,r1o,Ij,t1o,a1o,Nj,n1o,s1o,l1o,bs,rhe,i1o,d1o,qj,c1o,f1o,jj,m1o,g1o,h1o,Fs,the,u1o,p1o,Dj,_1o,v1o,Gj,b1o,F1o,T1o,Ts,ahe,M1o,E1o,Oj,C1o,w1o,Vj,A1o,L1o,y1o,Mu,nhe,x1o,$1o,Xj,k1o,S1o,R1o,Ms,she,P1o,B1o,zj,I1o,N1o,Qj,q1o,j1o,D1o,Es,lhe,G1o,O1o,Wj,V1o,X1o,Uj,z1o,Q1o,W1o,Cs,ihe,U1o,H1o,Hj,J1o,Y1o,Jj,Z1o,K1o,ebo,ws,dhe,obo,rbo,Yj,tbo,abo,Zj,nbo,sbo,lbo,As,che,ibo,dbo,Kj,cbo,fbo,eD,mbo,gbo,hbo,Ls,fhe,ubo,pbo,oD,_bo,vbo,rD,bbo,Fbo,Tbo,ys,mhe,Mbo,Ebo,tD,Cbo,wbo,aD,Abo,Lbo,ybo,Eu,ghe,xbo,$bo,nD,kbo,Sbo,Rbo,xs,hhe,Pbo,Bbo,sD,Ibo,Nbo,lD,qbo,jbo,Dbo,Cu,uhe,Gbo,Obo,iD,Vbo,Xbo,zbo,$s,phe,Qbo,Wbo,dD,Ubo,Hbo,cD,Jbo,Ybo,Zbo,ks,_he,Kbo,e3o,fD,o3o,r3o,mD,t3o,a3o,n3o,Ss,vhe,s3o,l3o,gD,i3o,d3o,hD,c3o,f3o,m3o,wu,bhe,g3o,h3o,uD,u3o,p3o,_3o,Au,Fhe,v3o,b3o,pD,F3o,T3o,M3o,Rs,The,E3o,C3o,_D,w3o,A3o,vD,L3o,y3o,x3o,Ps,Mhe,$3o,k3o,bD,S3o,R3o,FD,P3o,B3o,I3o,Bs,Ehe,N3o,q3o,TD,j3o,D3o,MD,G3o,O3o,V3o,Lu,Che,X3o,z3o,ED,Q3o,W3o,U3o,Is,whe,H3o,J3o,CD,Y3o,Z3o,wD,K3o,e0o,o0o,Ns,Ahe,r0o,t0o,AD,a0o,n0o,LD,s0o,l0o,i0o,qs,Lhe,d0o,c0o,yD,f0o,m0o,xD,g0o,h0o,u0o,js,yhe,p0o,_0o,$D,v0o,b0o,kD,F0o,T0o,M0o,Ds,xhe,E0o,C0o,SD,w0o,A0o,RD,L0o,y0o,x0o,Gs,$he,$0o,k0o,PD,S0o,R0o,BD,P0o,B0o,I0o,Os,khe,N0o,q0o,ID,j0o,D0o,ND,G0o,O0o,V0o,Vs,She,X0o,z0o,qD,Q0o,W0o,jD,U0o,H0o,J0o,yu,Rhe,Y0o,Z0o,DD,K0o,eFo,oFo,Xs,Phe,rFo,tFo,GD,aFo,nFo,OD,sFo,lFo,iFo,xu,Bhe,dFo,cFo,VD,fFo,mFo,gFo,$u,Ihe,hFo,uFo,XD,pFo,_Fo,vFo,zs,Nhe,bFo,FFo,zD,TFo,MFo,QD,EFo,CFo,wFo,Qs,qhe,AFo,LFo,WD,yFo,xFo,UD,$Fo,kFo,SFo,Ws,jhe,RFo,PFo,HD,BFo,IFo,JD,NFo,qFo,jFo,ku,Dhe,DFo,GFo,YD,OFo,VFo,XFo,Us,Ghe,zFo,QFo,ZD,WFo,UFo,KD,HFo,JFo,YFo,Hs,Ohe,ZFo,KFo,eG,eTo,oTo,oG,rTo,tTo,aTo,Js,Vhe,nTo,sTo,rG,lTo,iTo,tG,dTo,cTo,fTo,Ys,Xhe,mTo,gTo,aG,hTo,uTo,nG,pTo,_To,vTo,Zs,zhe,bTo,FTo,sG,TTo,MTo,lG,ETo,CTo,wTo,Ks,Qhe,ATo,LTo,iG,yTo,xTo,dG,$To,kTo,STo,el,Whe,RTo,PTo,cG,BTo,ITo,fG,NTo,qTo,jTo,ol,Uhe,DTo,GTo,mG,OTo,VTo,gG,XTo,zTo,QTo,Su,Hhe,WTo,UTo,hG,HTo,JTo,YTo,rl,Jhe,ZTo,KTo,uG,eMo,oMo,pG,rMo,tMo,aMo,tl,Yhe,nMo,sMo,_G,lMo,iMo,vG,dMo,cMo,fMo,Ru,Zhe,mMo,gMo,bG,hMo,uMo,pMo,Pu,Khe,_Mo,vMo,FG,bMo,FMo,TMo,Bu,eue,MMo,EMo,TG,CMo,wMo,AMo,Iu,oue,LMo,yMo,MG,xMo,$Mo,kMo,al,rue,SMo,RMo,EG,PMo,BMo,CG,IMo,NMo,qMo,Nu,tue,jMo,DMo,wG,GMo,OMo,VMo,nl,aue,XMo,zMo,AG,QMo,WMo,LG,UMo,HMo,JMo,sl,nue,YMo,ZMo,yG,KMo,eEo,xG,oEo,rEo,tEo,ll,sue,aEo,nEo,$G,sEo,lEo,kG,iEo,dEo,cEo,il,lue,fEo,mEo,SG,gEo,hEo,RG,uEo,pEo,_Eo,dl,iue,vEo,bEo,PG,FEo,TEo,BG,MEo,EEo,CEo,cl,due,wEo,AEo,IG,LEo,yEo,NG,xEo,$Eo,kEo,qu,cue,SEo,REo,qG,PEo,BEo,IEo,ju,fue,NEo,qEo,jG,jEo,DEo,GEo,fl,mue,OEo,VEo,DG,XEo,zEo,GG,QEo,WEo,UEo,ml,gue,HEo,JEo,OG,YEo,ZEo,VG,KEo,eCo,oCo,gl,hue,rCo,tCo,XG,aCo,nCo,zG,sCo,lCo,iCo,Du,uue,dCo,cCo,QG,fCo,mCo,gCo,Gu,pue,hCo,uCo,WG,pCo,_Co,vCo,Ou,_ue,bCo,FCo,UG,TCo,MCo,ECo,hl,vue,CCo,wCo,HG,ACo,LCo,JG,yCo,xCo,$Co,ul,bue,kCo,SCo,YG,RCo,PCo,ZG,BCo,ICo,NCo,Vu,Fue,qCo,jCo,KG,DCo,GCo,OCo,Xu,Tue,VCo,XCo,eO,zCo,QCo,WCo,zu,Mue,UCo,HCo,oO,JCo,YCo,ZCo,Qu,Eue,KCo,e5o,rO,o5o,r5o,t5o,pl,Cue,a5o,n5o,tO,s5o,l5o,aO,i5o,d5o,c5o,_l,wue,f5o,m5o,nO,g5o,h5o,sO,u5o,p5o,_5o,Wu,Aue,v5o,b5o,lO,F5o,T5o,M5o,Uu,Lue,E5o,C5o,iO,w5o,A5o,L5o,vl,yue,y5o,x5o,dO,$5o,k5o,cO,S5o,R5o,P5o,bl,xue,B5o,I5o,fO,N5o,q5o,mO,j5o,D5o,G5o,Fl,$ue,O5o,V5o,gO,X5o,z5o,hO,Q5o,W5o,U5o,Tl,kue,H5o,J5o,uO,Y5o,Z5o,pO,K5o,ewo,owo,Hu,rwo,Ju,Gx,two,Sue,awo,woo,Fd,Yu,Rue,Ox,nwo,Pue,swo,Aoo,Ro,Vx,lwo,Xx,iwo,_O,dwo,cwo,fwo,zx,mwo,Bue,gwo,hwo,uwo,Ye,Qx,pwo,Iue,_wo,vwo,Ka,bwo,Nue,Fwo,Two,que,Mwo,Ewo,jue,Cwo,wwo,Awo,z,Zu,Due,Lwo,ywo,vO,xwo,$wo,kwo,Ku,Gue,Swo,Rwo,bO,Pwo,Bwo,Iwo,ep,Oue,Nwo,qwo,FO,jwo,Dwo,Gwo,op,Vue,Owo,Vwo,TO,Xwo,zwo,Qwo,rp,Xue,Wwo,Uwo,MO,Hwo,Jwo,Ywo,tp,zue,Zwo,Kwo,EO,eAo,oAo,rAo,ap,Que,tAo,aAo,CO,nAo,sAo,lAo,np,Wue,iAo,dAo,wO,cAo,fAo,mAo,sp,Uue,gAo,hAo,AO,uAo,pAo,_Ao,lp,Hue,vAo,bAo,LO,FAo,TAo,MAo,ip,Jue,EAo,CAo,yO,wAo,AAo,LAo,dp,Yue,yAo,xAo,xO,$Ao,kAo,SAo,cp,Zue,RAo,PAo,$O,BAo,IAo,NAo,fp,Kue,qAo,jAo,kO,DAo,GAo,OAo,mp,epe,VAo,XAo,SO,zAo,QAo,WAo,gp,ope,UAo,HAo,RO,JAo,YAo,ZAo,hp,rpe,KAo,e6o,PO,o6o,r6o,t6o,up,tpe,a6o,n6o,BO,s6o,l6o,i6o,pp,ape,d6o,c6o,IO,f6o,m6o,g6o,_p,npe,h6o,u6o,NO,p6o,_6o,v6o,vp,spe,b6o,F6o,qO,T6o,M6o,E6o,bp,lpe,C6o,w6o,jO,A6o,L6o,y6o,Fp,ipe,x6o,$6o,DO,k6o,S6o,R6o,Tp,dpe,P6o,B6o,GO,I6o,N6o,q6o,Mp,cpe,j6o,D6o,OO,G6o,O6o,V6o,Ep,fpe,X6o,z6o,VO,Q6o,W6o,U6o,Cp,mpe,H6o,J6o,XO,Y6o,Z6o,K6o,wp,gpe,e7o,o7o,zO,r7o,t7o,a7o,Ap,hpe,n7o,s7o,QO,l7o,i7o,d7o,Lp,upe,c7o,f7o,WO,m7o,g7o,h7o,yp,ppe,u7o,p7o,UO,_7o,v7o,b7o,xp,_pe,F7o,T7o,HO,M7o,E7o,C7o,$p,vpe,w7o,A7o,JO,L7o,y7o,x7o,kp,bpe,$7o,k7o,YO,S7o,R7o,P7o,Sp,Fpe,B7o,I7o,ZO,N7o,q7o,j7o,Rp,Tpe,D7o,G7o,KO,O7o,V7o,X7o,Pp,Mpe,z7o,Q7o,eV,W7o,U7o,H7o,Bp,Epe,J7o,Y7o,oV,Z7o,K7o,eLo,Ip,Cpe,oLo,rLo,rV,tLo,aLo,nLo,Np,wpe,sLo,lLo,tV,iLo,dLo,cLo,qp,Ape,fLo,mLo,aV,gLo,hLo,uLo,jp,Lpe,pLo,_Lo,nV,vLo,bLo,FLo,Dp,ype,TLo,MLo,sV,ELo,CLo,wLo,Gp,ALo,Op,LLo,Vp,Wx,yLo,xpe,xLo,Loo,Td,Xp,$pe,Ux,$Lo,kpe,kLo,yoo,Po,Hx,SLo,Jx,RLo,lV,PLo,BLo,ILo,Yx,NLo,Spe,qLo,jLo,DLo,Ze,Zx,GLo,Rpe,OLo,VLo,Md,XLo,Ppe,zLo,QLo,Bpe,WLo,ULo,HLo,se,zp,Ipe,JLo,YLo,iV,ZLo,KLo,e8o,Qp,Npe,o8o,r8o,dV,t8o,a8o,n8o,Wp,qpe,s8o,l8o,cV,i8o,d8o,c8o,Up,jpe,f8o,m8o,fV,g8o,h8o,u8o,Hp,Dpe,p8o,_8o,mV,v8o,b8o,F8o,Jp,Gpe,T8o,M8o,gV,E8o,C8o,w8o,Yp,Ope,A8o,L8o,hV,y8o,x8o,$8o,Zp,Vpe,k8o,S8o,uV,R8o,P8o,B8o,Kp,Xpe,I8o,N8o,pV,q8o,j8o,D8o,e_,zpe,G8o,O8o,_V,V8o,X8o,z8o,o_,Qpe,Q8o,W8o,vV,U8o,H8o,J8o,r_,Wpe,Y8o,Z8o,bV,K8o,eyo,oyo,t_,Upe,ryo,tyo,FV,ayo,nyo,syo,a_,Hpe,lyo,iyo,TV,dyo,cyo,fyo,n_,Jpe,myo,gyo,MV,hyo,uyo,pyo,s_,Ype,_yo,vyo,EV,byo,Fyo,Tyo,l_,Zpe,Myo,Eyo,CV,Cyo,wyo,Ayo,i_,Kpe,Lyo,yyo,wV,xyo,$yo,kyo,d_,e_e,Syo,Ryo,AV,Pyo,Byo,Iyo,c_,o_e,Nyo,qyo,LV,jyo,Dyo,Gyo,f_,r_e,Oyo,Vyo,yV,Xyo,zyo,Qyo,m_,t_e,Wyo,Uyo,xV,Hyo,Jyo,Yyo,g_,a_e,Zyo,Kyo,$V,e9o,o9o,r9o,h_,t9o,u_,a9o,p_,Kx,n9o,n_e,s9o,xoo,Ed,__,s_e,e$,l9o,l_e,i9o,$oo,Bo,o$,d9o,Cd,c9o,kV,f9o,m9o,SV,g9o,h9o,u9o,r$,p9o,i_e,_9o,v9o,b9o,bt,t$,F9o,d_e,T9o,M9o,wd,E9o,c_e,C9o,w9o,RV,A9o,L9o,y9o,v_,x9o,Ke,a$,$9o,f_e,k9o,S9o,en,R9o,m_e,P9o,B9o,g_e,I9o,N9o,h_e,q9o,j9o,D9o,y,b_,u_e,G9o,O9o,PV,V9o,X9o,z9o,F_,p_e,Q9o,W9o,BV,U9o,H9o,J9o,T_,__e,Y9o,Z9o,IV,K9o,exo,oxo,M_,v_e,rxo,txo,NV,axo,nxo,sxo,E_,b_e,lxo,ixo,qV,dxo,cxo,fxo,C_,F_e,mxo,gxo,jV,hxo,uxo,pxo,w_,T_e,_xo,vxo,DV,bxo,Fxo,Txo,A_,M_e,Mxo,Exo,GV,Cxo,wxo,Axo,L_,E_e,Lxo,yxo,OV,xxo,$xo,kxo,y_,C_e,Sxo,Rxo,VV,Pxo,Bxo,Ixo,x_,w_e,Nxo,qxo,XV,jxo,Dxo,Gxo,$_,A_e,Oxo,Vxo,zV,Xxo,zxo,Qxo,k_,L_e,Wxo,Uxo,QV,Hxo,Jxo,Yxo,S_,y_e,Zxo,Kxo,WV,e$o,o$o,r$o,R_,x_e,t$o,a$o,UV,n$o,s$o,l$o,P_,$_e,i$o,d$o,HV,c$o,f$o,m$o,B_,k_e,g$o,h$o,JV,u$o,p$o,_$o,I_,S_e,v$o,b$o,YV,F$o,T$o,M$o,N_,R_e,E$o,C$o,ZV,w$o,A$o,L$o,q_,P_e,y$o,x$o,KV,$$o,k$o,S$o,j_,B_e,R$o,P$o,eX,B$o,I$o,N$o,D_,I_e,q$o,j$o,oX,D$o,G$o,O$o,G_,N_e,V$o,X$o,rX,z$o,Q$o,W$o,O_,q_e,U$o,H$o,tX,J$o,Y$o,Z$o,V_,j_e,K$o,eko,aX,oko,rko,tko,X_,D_e,ako,nko,nX,sko,lko,iko,z_,G_e,dko,cko,sX,fko,mko,gko,Q_,O_e,hko,uko,lX,pko,_ko,vko,W_,V_e,bko,Fko,iX,Tko,Mko,Eko,U_,X_e,Cko,wko,dX,Ako,Lko,yko,H_,z_e,xko,$ko,cX,kko,Sko,Rko,J_,Q_e,Pko,Bko,fX,Iko,Nko,qko,Y_,W_e,jko,Dko,mX,Gko,Oko,Vko,Z_,U_e,Xko,zko,gX,Qko,Wko,Uko,K_,H_e,Hko,Jko,hX,Yko,Zko,Kko,e2,J_e,eSo,oSo,uX,rSo,tSo,aSo,o2,Y_e,nSo,sSo,pX,lSo,iSo,dSo,r2,Z_e,cSo,fSo,_X,mSo,gSo,hSo,t2,K_e,uSo,pSo,vX,_So,vSo,bSo,Ml,e2e,FSo,TSo,bX,MSo,ESo,FX,CSo,wSo,ASo,a2,o2e,LSo,ySo,TX,xSo,$So,kSo,n2,r2e,SSo,RSo,MX,PSo,BSo,ISo,s2,t2e,NSo,qSo,EX,jSo,DSo,GSo,l2,a2e,OSo,VSo,CX,XSo,zSo,QSo,i2,n2e,WSo,USo,wX,HSo,JSo,YSo,d2,s2e,ZSo,KSo,AX,eRo,oRo,rRo,c2,l2e,tRo,aRo,LX,nRo,sRo,lRo,f2,i2e,iRo,dRo,yX,cRo,fRo,mRo,m2,d2e,gRo,hRo,xX,uRo,pRo,_Ro,g2,c2e,vRo,bRo,$X,FRo,TRo,MRo,h2,f2e,ERo,CRo,kX,wRo,ARo,LRo,u2,m2e,yRo,xRo,SX,$Ro,kRo,SRo,p2,g2e,RRo,PRo,RX,BRo,IRo,NRo,_2,h2e,qRo,jRo,PX,DRo,GRo,ORo,v2,u2e,VRo,XRo,BX,zRo,QRo,WRo,b2,p2e,URo,HRo,IX,JRo,YRo,ZRo,F2,_2e,KRo,ePo,NX,oPo,rPo,tPo,T2,v2e,aPo,nPo,qX,sPo,lPo,iPo,M2,b2e,dPo,cPo,jX,fPo,mPo,gPo,E2,F2e,hPo,uPo,DX,pPo,_Po,vPo,C2,T2e,bPo,FPo,GX,TPo,MPo,EPo,w2,M2e,CPo,wPo,OX,APo,LPo,yPo,A2,E2e,xPo,$Po,VX,kPo,SPo,RPo,L2,C2e,PPo,BPo,XX,IPo,NPo,qPo,y2,w2e,jPo,DPo,zX,GPo,OPo,VPo,x2,A2e,XPo,zPo,QX,QPo,WPo,UPo,$2,L2e,HPo,JPo,WX,YPo,ZPo,KPo,k2,y2e,eBo,oBo,UX,rBo,tBo,aBo,S2,x2e,nBo,sBo,HX,lBo,iBo,dBo,R2,$2e,cBo,fBo,JX,mBo,gBo,hBo,P2,k2e,uBo,pBo,YX,_Bo,vBo,bBo,B2,S2e,FBo,TBo,ZX,MBo,EBo,CBo,I2,R2e,wBo,ABo,KX,LBo,yBo,xBo,N2,P2e,$Bo,kBo,ez,SBo,RBo,PBo,q2,B2e,BBo,IBo,oz,NBo,qBo,jBo,j2,I2e,DBo,GBo,rz,OBo,VBo,XBo,D2,N2e,zBo,QBo,tz,WBo,UBo,HBo,G2,q2e,JBo,YBo,az,ZBo,KBo,eIo,O2,j2e,oIo,rIo,nz,tIo,aIo,nIo,V2,D2e,sIo,lIo,sz,iIo,dIo,cIo,X2,G2e,fIo,mIo,lz,gIo,hIo,uIo,z2,O2e,pIo,_Io,iz,vIo,bIo,FIo,Q2,V2e,TIo,MIo,dz,EIo,CIo,wIo,W2,X2e,AIo,LIo,cz,yIo,xIo,$Io,U2,z2e,kIo,SIo,fz,RIo,PIo,BIo,H2,Q2e,IIo,NIo,mz,qIo,jIo,DIo,J2,W2e,GIo,OIo,gz,VIo,XIo,zIo,Y2,U2e,QIo,WIo,hz,UIo,HIo,JIo,Z2,H2e,YIo,ZIo,uz,KIo,eNo,oNo,K2,J2e,rNo,tNo,pz,aNo,nNo,sNo,ev,Y2e,lNo,iNo,_z,dNo,cNo,fNo,ov,Z2e,mNo,gNo,vz,hNo,uNo,pNo,rv,K2e,_No,vNo,bz,bNo,FNo,TNo,tv,eve,MNo,ENo,Fz,CNo,wNo,ANo,av,ove,LNo,yNo,Tz,xNo,$No,kNo,nv,rve,SNo,RNo,Mz,PNo,BNo,INo,sv,tve,NNo,qNo,Ez,jNo,DNo,GNo,lv,ave,ONo,VNo,Cz,XNo,zNo,QNo,iv,nve,WNo,UNo,wz,HNo,JNo,YNo,dv,sve,ZNo,KNo,Az,eqo,oqo,rqo,cv,lve,tqo,aqo,Lz,nqo,sqo,lqo,fv,ive,iqo,dqo,yz,cqo,fqo,mqo,mv,dve,gqo,hqo,xz,uqo,pqo,_qo,gv,cve,vqo,bqo,$z,Fqo,Tqo,Mqo,hv,fve,Eqo,Cqo,kz,wqo,Aqo,Lqo,uv,mve,yqo,xqo,Sz,$qo,kqo,Sqo,pv,gve,Rqo,Pqo,Rz,Bqo,Iqo,Nqo,_v,hve,qqo,jqo,Pz,Dqo,Gqo,Oqo,vv,uve,Vqo,Xqo,Bz,zqo,Qqo,Wqo,bv,pve,Uqo,Hqo,Iz,Jqo,Yqo,Zqo,Fv,_ve,Kqo,ejo,Nz,ojo,rjo,tjo,Tv,vve,ajo,njo,qz,sjo,ljo,ijo,Mv,bve,djo,cjo,jz,fjo,mjo,gjo,Ev,Fve,hjo,ujo,Dz,pjo,_jo,vjo,Cv,Tve,bjo,Fjo,Gz,Tjo,Mjo,Ejo,wv,Mve,Cjo,wjo,Oz,Ajo,Ljo,yjo,Av,Eve,xjo,$jo,Vz,kjo,Sjo,Rjo,Lv,Cve,Pjo,Bjo,Xz,Ijo,Njo,qjo,yv,wve,jjo,Djo,zz,Gjo,Ojo,Vjo,xv,Ave,Xjo,zjo,Qz,Qjo,Wjo,Ujo,$v,Lve,Hjo,Jjo,Wz,Yjo,Zjo,Kjo,kv,yve,eDo,oDo,Uz,rDo,tDo,aDo,Sv,xve,nDo,sDo,Hz,lDo,iDo,dDo,Rv,$ve,cDo,fDo,Jz,mDo,gDo,hDo,Pv,kve,uDo,pDo,Yz,_Do,vDo,bDo,Bv,Sve,FDo,TDo,Zz,MDo,EDo,CDo,Iv,Rve,wDo,ADo,Kz,LDo,yDo,xDo,Nv,$Do,Pve,kDo,SDo,Bve,RDo,PDo,qv,koo,Ad,jv,Ive,n$,BDo,Nve,IDo,Soo,Io,s$,NDo,Ld,qDo,eQ,jDo,DDo,oQ,GDo,ODo,VDo,l$,XDo,qve,zDo,QDo,WDo,Ft,i$,UDo,jve,HDo,JDo,yd,YDo,Dve,ZDo,KDo,rQ,eGo,oGo,rGo,Dv,tGo,eo,d$,aGo,Gve,nGo,sGo,on,lGo,Ove,iGo,dGo,Vve,cGo,fGo,Xve,mGo,gGo,hGo,G,Gv,zve,uGo,pGo,tQ,_Go,vGo,bGo,Ov,Qve,FGo,TGo,aQ,MGo,EGo,CGo,Vv,Wve,wGo,AGo,nQ,LGo,yGo,xGo,Xv,Uve,$Go,kGo,sQ,SGo,RGo,PGo,zv,Hve,BGo,IGo,lQ,NGo,qGo,jGo,Qv,Jve,DGo,GGo,iQ,OGo,VGo,XGo,Wv,Yve,zGo,QGo,dQ,WGo,UGo,HGo,Uv,Zve,JGo,YGo,cQ,ZGo,KGo,eOo,Hv,Kve,oOo,rOo,fQ,tOo,aOo,nOo,Jv,e4e,sOo,lOo,mQ,iOo,dOo,cOo,Yv,o4e,fOo,mOo,gQ,gOo,hOo,uOo,Zv,r4e,pOo,_Oo,hQ,vOo,bOo,FOo,Kv,t4e,TOo,MOo,uQ,EOo,COo,wOo,e4,a4e,AOo,LOo,pQ,yOo,xOo,$Oo,o4,n4e,kOo,SOo,_Q,ROo,POo,BOo,r4,s4e,IOo,NOo,vQ,qOo,jOo,DOo,t4,l4e,GOo,OOo,bQ,VOo,XOo,zOo,a4,i4e,QOo,WOo,FQ,UOo,HOo,JOo,n4,d4e,YOo,ZOo,TQ,KOo,eVo,oVo,s4,c4e,rVo,tVo,MQ,aVo,nVo,sVo,l4,f4e,lVo,iVo,EQ,dVo,cVo,fVo,i4,m4e,mVo,gVo,CQ,hVo,uVo,pVo,d4,g4e,_Vo,vVo,wQ,bVo,FVo,TVo,c4,h4e,MVo,EVo,AQ,CVo,wVo,AVo,f4,u4e,LVo,yVo,LQ,xVo,$Vo,kVo,m4,p4e,SVo,RVo,yQ,PVo,BVo,IVo,g4,_4e,NVo,qVo,xQ,jVo,DVo,GVo,h4,v4e,OVo,VVo,$Q,XVo,zVo,QVo,u4,b4e,WVo,UVo,kQ,HVo,JVo,YVo,p4,F4e,ZVo,KVo,SQ,eXo,oXo,rXo,_4,T4e,tXo,aXo,RQ,nXo,sXo,lXo,v4,M4e,iXo,dXo,PQ,cXo,fXo,mXo,b4,E4e,gXo,hXo,BQ,uXo,pXo,_Xo,F4,C4e,vXo,bXo,IQ,FXo,TXo,MXo,T4,w4e,EXo,CXo,NQ,wXo,AXo,LXo,M4,A4e,yXo,xXo,qQ,$Xo,kXo,SXo,E4,L4e,RXo,PXo,jQ,BXo,IXo,NXo,C4,y4e,qXo,jXo,DQ,DXo,GXo,OXo,w4,x4e,VXo,XXo,GQ,zXo,QXo,WXo,A4,$4e,UXo,HXo,OQ,JXo,YXo,ZXo,L4,k4e,KXo,ezo,VQ,ozo,rzo,tzo,y4,S4e,azo,nzo,XQ,szo,lzo,izo,x4,R4e,dzo,czo,zQ,fzo,mzo,gzo,$4,P4e,hzo,uzo,QQ,pzo,_zo,vzo,k4,B4e,bzo,Fzo,WQ,Tzo,Mzo,Ezo,S4,I4e,Czo,wzo,UQ,Azo,Lzo,yzo,R4,N4e,xzo,$zo,HQ,kzo,Szo,Rzo,P4,q4e,Pzo,Bzo,JQ,Izo,Nzo,qzo,B4,jzo,j4e,Dzo,Gzo,D4e,Ozo,Vzo,I4,Roo,xd,N4,G4e,c$,Xzo,O4e,zzo,Poo,No,f$,Qzo,$d,Wzo,YQ,Uzo,Hzo,ZQ,Jzo,Yzo,Zzo,m$,Kzo,V4e,eQo,oQo,rQo,Tt,g$,tQo,X4e,aQo,nQo,kd,sQo,z4e,lQo,iQo,KQ,dQo,cQo,fQo,q4,mQo,oo,h$,gQo,Q4e,hQo,uQo,rn,pQo,W4e,_Qo,vQo,U4e,bQo,FQo,H4e,TQo,MQo,EQo,Q,j4,J4e,CQo,wQo,eW,AQo,LQo,yQo,D4,Y4e,xQo,$Qo,oW,kQo,SQo,RQo,G4,Z4e,PQo,BQo,rW,IQo,NQo,qQo,O4,K4e,jQo,DQo,tW,GQo,OQo,VQo,V4,e1e,XQo,zQo,aW,QQo,WQo,UQo,X4,o1e,HQo,JQo,nW,YQo,ZQo,KQo,z4,r1e,eWo,oWo,sW,rWo,tWo,aWo,Q4,t1e,nWo,sWo,lW,lWo,iWo,dWo,W4,a1e,cWo,fWo,iW,mWo,gWo,hWo,U4,n1e,uWo,pWo,dW,_Wo,vWo,bWo,H4,s1e,FWo,TWo,cW,MWo,EWo,CWo,J4,l1e,wWo,AWo,fW,LWo,yWo,xWo,Y4,i1e,$Wo,kWo,mW,SWo,RWo,PWo,Z4,d1e,BWo,IWo,gW,NWo,qWo,jWo,K4,c1e,DWo,GWo,hW,OWo,VWo,XWo,e1,f1e,zWo,QWo,uW,WWo,UWo,HWo,o1,m1e,JWo,YWo,pW,ZWo,KWo,eUo,r1,g1e,oUo,rUo,_W,tUo,aUo,nUo,t1,h1e,sUo,lUo,vW,iUo,dUo,cUo,a1,u1e,fUo,mUo,bW,gUo,hUo,uUo,n1,p1e,pUo,_Uo,FW,vUo,bUo,FUo,s1,_1e,TUo,MUo,TW,EUo,CUo,wUo,l1,v1e,AUo,LUo,MW,yUo,xUo,$Uo,i1,b1e,kUo,SUo,EW,RUo,PUo,BUo,d1,F1e,IUo,NUo,CW,qUo,jUo,DUo,c1,T1e,GUo,OUo,wW,VUo,XUo,zUo,f1,M1e,QUo,WUo,AW,UUo,HUo,JUo,m1,E1e,YUo,ZUo,LW,KUo,eHo,oHo,g1,C1e,rHo,tHo,yW,aHo,nHo,sHo,h1,w1e,lHo,iHo,xW,dHo,cHo,fHo,u1,A1e,mHo,gHo,$W,hHo,uHo,pHo,p1,L1e,_Ho,vHo,kW,bHo,FHo,THo,_1,y1e,MHo,EHo,SW,CHo,wHo,AHo,v1,x1e,LHo,yHo,RW,xHo,$Ho,kHo,b1,$1e,SHo,RHo,PW,PHo,BHo,IHo,F1,k1e,NHo,qHo,BW,jHo,DHo,GHo,T1,S1e,OHo,VHo,IW,XHo,zHo,QHo,M1,R1e,WHo,UHo,NW,HHo,JHo,YHo,E1,P1e,ZHo,KHo,qW,eJo,oJo,rJo,C1,B1e,tJo,aJo,jW,nJo,sJo,lJo,w1,I1e,iJo,dJo,DW,cJo,fJo,mJo,A1,N1e,gJo,hJo,GW,uJo,pJo,_Jo,L1,vJo,q1e,bJo,FJo,j1e,TJo,MJo,y1,Boo,Sd,x1,D1e,u$,EJo,G1e,CJo,Ioo,qo,p$,wJo,Rd,AJo,OW,LJo,yJo,VW,xJo,$Jo,kJo,_$,SJo,O1e,RJo,PJo,BJo,Mt,v$,IJo,V1e,NJo,qJo,Pd,jJo,X1e,DJo,GJo,XW,OJo,VJo,XJo,$1,zJo,ro,b$,QJo,z1e,WJo,UJo,tn,HJo,Q1e,JJo,YJo,W1e,ZJo,KJo,U1e,eYo,oYo,rYo,J,k1,H1e,tYo,aYo,zW,nYo,sYo,lYo,S1,J1e,iYo,dYo,QW,cYo,fYo,mYo,R1,Y1e,gYo,hYo,WW,uYo,pYo,_Yo,P1,Z1e,vYo,bYo,UW,FYo,TYo,MYo,B1,K1e,EYo,CYo,HW,wYo,AYo,LYo,I1,ebe,yYo,xYo,JW,$Yo,kYo,SYo,N1,obe,RYo,PYo,YW,BYo,IYo,NYo,q1,rbe,qYo,jYo,ZW,DYo,GYo,OYo,j1,tbe,VYo,XYo,KW,zYo,QYo,WYo,D1,abe,UYo,HYo,eU,JYo,YYo,ZYo,G1,nbe,KYo,eZo,oU,oZo,rZo,tZo,O1,sbe,aZo,nZo,rU,sZo,lZo,iZo,V1,lbe,dZo,cZo,tU,fZo,mZo,gZo,X1,ibe,hZo,uZo,aU,pZo,_Zo,vZo,z1,dbe,bZo,FZo,nU,TZo,MZo,EZo,Q1,cbe,CZo,wZo,sU,AZo,LZo,yZo,W1,fbe,xZo,$Zo,lU,kZo,SZo,RZo,U1,mbe,PZo,BZo,iU,IZo,NZo,qZo,H1,gbe,jZo,DZo,dU,GZo,OZo,VZo,J1,hbe,XZo,zZo,cU,QZo,WZo,UZo,Y1,ube,HZo,JZo,fU,YZo,ZZo,KZo,Z1,pbe,eKo,oKo,mU,rKo,tKo,aKo,K1,_be,nKo,sKo,gU,lKo,iKo,dKo,eb,vbe,cKo,fKo,hU,mKo,gKo,hKo,ob,bbe,uKo,pKo,uU,_Ko,vKo,bKo,rb,Fbe,FKo,TKo,pU,MKo,EKo,CKo,tb,Tbe,wKo,AKo,_U,LKo,yKo,xKo,ab,Mbe,$Ko,kKo,vU,SKo,RKo,PKo,nb,Ebe,BKo,IKo,bU,NKo,qKo,jKo,sb,Cbe,DKo,GKo,FU,OKo,VKo,XKo,lb,wbe,zKo,QKo,TU,WKo,UKo,HKo,ib,Abe,JKo,YKo,MU,ZKo,KKo,eer,db,Lbe,oer,rer,EU,ter,aer,ner,cb,ybe,ser,ler,CU,ier,der,cer,fb,xbe,fer,mer,$be,ger,her,uer,mb,kbe,per,_er,wU,ver,ber,Fer,gb,Sbe,Ter,Mer,AU,Eer,Cer,wer,hb,Rbe,Aer,Ler,LU,yer,xer,$er,ub,Pbe,ker,Ser,yU,Rer,Per,Ber,pb,Ier,Bbe,Ner,qer,Ibe,jer,Der,_b,Noo,Bd,vb,Nbe,F$,Ger,qbe,Oer,qoo,jo,T$,Ver,Id,Xer,xU,zer,Qer,$U,Wer,Uer,Her,M$,Jer,jbe,Yer,Zer,Ker,Et,E$,eor,Dbe,oor,ror,Nd,tor,Gbe,aor,nor,kU,sor,lor,ior,bb,dor,to,C$,cor,Obe,mor,gor,an,hor,Vbe,uor,por,Xbe,_or,vor,zbe,bor,For,Tor,me,Fb,Qbe,Mor,Eor,SU,Cor,wor,Aor,Tb,Wbe,Lor,yor,RU,xor,$or,kor,Mb,Ube,Sor,Ror,PU,Por,Bor,Ior,Eb,Hbe,Nor,qor,BU,jor,Dor,Gor,Cb,Jbe,Oor,Vor,IU,Xor,zor,Qor,wb,Ybe,Wor,Uor,NU,Hor,Jor,Yor,Ab,Zbe,Zor,Kor,qU,err,orr,rrr,Lb,Kbe,trr,arr,jU,nrr,srr,lrr,yb,e3e,irr,drr,DU,crr,frr,mrr,xb,o3e,grr,hrr,GU,urr,prr,_rr,$b,r3e,vrr,brr,OU,Frr,Trr,Mrr,kb,t3e,Err,Crr,VU,wrr,Arr,Lrr,Sb,a3e,yrr,xrr,XU,$rr,krr,Srr,Rb,n3e,Rrr,Prr,zU,Brr,Irr,Nrr,Pb,s3e,qrr,jrr,QU,Drr,Grr,Orr,Bb,l3e,Vrr,Xrr,WU,zrr,Qrr,Wrr,Ib,i3e,Urr,Hrr,UU,Jrr,Yrr,Zrr,Nb,d3e,Krr,etr,HU,otr,rtr,ttr,qb,c3e,atr,ntr,JU,str,ltr,itr,jb,f3e,dtr,ctr,YU,ftr,mtr,gtr,Db,htr,m3e,utr,ptr,g3e,_tr,vtr,Gb,joo,qd,Ob,h3e,w$,btr,u3e,Ftr,Doo,Do,A$,Ttr,jd,Mtr,ZU,Etr,Ctr,KU,wtr,Atr,Ltr,L$,ytr,p3e,xtr,$tr,ktr,Ct,y$,Str,_3e,Rtr,Ptr,Dd,Btr,v3e,Itr,Ntr,eH,qtr,jtr,Dtr,Vb,Gtr,ao,x$,Otr,b3e,Vtr,Xtr,nn,ztr,F3e,Qtr,Wtr,T3e,Utr,Htr,M3e,Jtr,Ytr,Ztr,q,Xb,E3e,Ktr,ear,oH,oar,rar,tar,zb,C3e,aar,nar,rH,sar,lar,iar,Qb,w3e,dar,car,tH,far,mar,gar,Wb,A3e,har,uar,aH,par,_ar,bar,Ub,L3e,Far,Tar,nH,Mar,Ear,Car,Hb,y3e,war,Aar,sH,Lar,yar,xar,Jb,x3e,$ar,kar,lH,Sar,Rar,Par,Yb,$3e,Bar,Iar,iH,Nar,qar,jar,Zb,k3e,Dar,Gar,dH,Oar,Var,Xar,Kb,S3e,zar,Qar,cH,War,Uar,Har,e3,R3e,Jar,Yar,fH,Zar,Kar,enr,o3,P3e,onr,rnr,mH,tnr,anr,nnr,r3,B3e,snr,lnr,gH,inr,dnr,cnr,t3,I3e,fnr,mnr,hH,gnr,hnr,unr,a3,N3e,pnr,_nr,uH,vnr,bnr,Fnr,n3,q3e,Tnr,Mnr,pH,Enr,Cnr,wnr,s3,j3e,Anr,Lnr,_H,ynr,xnr,$nr,l3,D3e,knr,Snr,vH,Rnr,Pnr,Bnr,i3,G3e,Inr,Nnr,bH,qnr,jnr,Dnr,d3,O3e,Gnr,Onr,FH,Vnr,Xnr,znr,c3,V3e,Qnr,Wnr,TH,Unr,Hnr,Jnr,f3,X3e,Ynr,Znr,MH,Knr,esr,osr,m3,z3e,rsr,tsr,EH,asr,nsr,ssr,g3,Q3e,lsr,isr,CH,dsr,csr,fsr,h3,W3e,msr,gsr,wH,hsr,usr,psr,u3,U3e,_sr,vsr,AH,bsr,Fsr,Tsr,p3,H3e,Msr,Esr,LH,Csr,wsr,Asr,_3,J3e,Lsr,ysr,yH,xsr,$sr,ksr,v3,Y3e,Ssr,Rsr,xH,Psr,Bsr,Isr,b3,Z3e,Nsr,qsr,$H,jsr,Dsr,Gsr,F3,K3e,Osr,Vsr,kH,Xsr,zsr,Qsr,T3,e0e,Wsr,Usr,SH,Hsr,Jsr,Ysr,M3,o0e,Zsr,Ksr,RH,elr,olr,rlr,E3,r0e,tlr,alr,PH,nlr,slr,llr,C3,t0e,ilr,dlr,BH,clr,flr,mlr,w3,a0e,glr,hlr,IH,ulr,plr,_lr,A3,n0e,vlr,blr,NH,Flr,Tlr,Mlr,L3,s0e,Elr,Clr,qH,wlr,Alr,Llr,y3,l0e,ylr,xlr,jH,$lr,klr,Slr,x3,i0e,Rlr,Plr,DH,Blr,Ilr,Nlr,$3,d0e,qlr,jlr,GH,Dlr,Glr,Olr,k3,c0e,Vlr,Xlr,OH,zlr,Qlr,Wlr,S3,f0e,Ulr,Hlr,VH,Jlr,Ylr,Zlr,R3,m0e,Klr,eir,XH,oir,rir,tir,P3,g0e,air,nir,zH,sir,lir,iir,B3,h0e,dir,cir,QH,fir,mir,gir,I3,u0e,hir,uir,WH,pir,_ir,vir,N3,p0e,bir,Fir,UH,Tir,Mir,Eir,q3,_0e,Cir,wir,HH,Air,Lir,yir,j3,v0e,xir,$ir,JH,kir,Sir,Rir,D3,b0e,Pir,Bir,YH,Iir,Nir,qir,G3,F0e,jir,Dir,ZH,Gir,Oir,Vir,O3,T0e,Xir,zir,KH,Qir,Wir,Uir,V3,M0e,Hir,Jir,eJ,Yir,Zir,Kir,X3,E0e,edr,odr,oJ,rdr,tdr,adr,z3,ndr,C0e,sdr,ldr,w0e,idr,ddr,Q3,Goo,Gd,W3,A0e,$$,cdr,L0e,fdr,Ooo,Go,k$,mdr,Od,gdr,rJ,hdr,udr,tJ,pdr,_dr,vdr,S$,bdr,y0e,Fdr,Tdr,Mdr,wt,R$,Edr,x0e,Cdr,wdr,Vd,Adr,$0e,Ldr,ydr,aJ,xdr,$dr,kdr,U3,Sdr,no,P$,Rdr,k0e,Pdr,Bdr,sn,Idr,S0e,Ndr,qdr,R0e,jdr,Ddr,P0e,Gdr,Odr,Vdr,K,H3,B0e,Xdr,zdr,nJ,Qdr,Wdr,Udr,J3,I0e,Hdr,Jdr,sJ,Ydr,Zdr,Kdr,Y3,N0e,ecr,ocr,lJ,rcr,tcr,acr,Z3,q0e,ncr,scr,iJ,lcr,icr,dcr,K3,j0e,ccr,fcr,dJ,mcr,gcr,hcr,e0,D0e,ucr,pcr,cJ,_cr,vcr,bcr,o0,G0e,Fcr,Tcr,fJ,Mcr,Ecr,Ccr,r0,O0e,wcr,Acr,mJ,Lcr,ycr,xcr,t0,V0e,$cr,kcr,gJ,Scr,Rcr,Pcr,a0,X0e,Bcr,Icr,hJ,Ncr,qcr,jcr,n0,z0e,Dcr,Gcr,uJ,Ocr,Vcr,Xcr,s0,Q0e,zcr,Qcr,pJ,Wcr,Ucr,Hcr,l0,W0e,Jcr,Ycr,_J,Zcr,Kcr,efr,i0,U0e,ofr,rfr,vJ,tfr,afr,nfr,d0,H0e,sfr,lfr,bJ,ifr,dfr,cfr,c0,J0e,ffr,mfr,FJ,gfr,hfr,ufr,f0,Y0e,pfr,_fr,TJ,vfr,bfr,Ffr,m0,Z0e,Tfr,Mfr,MJ,Efr,Cfr,wfr,g0,K0e,Afr,Lfr,EJ,yfr,xfr,$fr,h0,eFe,kfr,Sfr,CJ,Rfr,Pfr,Bfr,u0,oFe,Ifr,Nfr,wJ,qfr,jfr,Dfr,p0,rFe,Gfr,Ofr,AJ,Vfr,Xfr,zfr,_0,tFe,Qfr,Wfr,LJ,Ufr,Hfr,Jfr,v0,aFe,Yfr,Zfr,yJ,Kfr,emr,omr,b0,nFe,rmr,tmr,xJ,amr,nmr,smr,F0,sFe,lmr,imr,$J,dmr,cmr,fmr,T0,lFe,mmr,gmr,kJ,hmr,umr,pmr,M0,iFe,_mr,vmr,SJ,bmr,Fmr,Tmr,E0,dFe,Mmr,Emr,RJ,Cmr,wmr,Amr,C0,cFe,Lmr,ymr,PJ,xmr,$mr,kmr,w0,fFe,Smr,Rmr,BJ,Pmr,Bmr,Imr,A0,mFe,Nmr,qmr,IJ,jmr,Dmr,Gmr,L0,Omr,gFe,Vmr,Xmr,hFe,zmr,Qmr,y0,Voo,Xd,x0,uFe,B$,Wmr,pFe,Umr,Xoo,Oo,I$,Hmr,zd,Jmr,NJ,Ymr,Zmr,qJ,Kmr,egr,ogr,N$,rgr,_Fe,tgr,agr,ngr,At,q$,sgr,vFe,lgr,igr,Qd,dgr,bFe,cgr,fgr,jJ,mgr,ggr,hgr,$0,ugr,so,j$,pgr,FFe,_gr,vgr,ln,bgr,TFe,Fgr,Tgr,MFe,Mgr,Egr,EFe,Cgr,wgr,Agr,Ue,k0,CFe,Lgr,ygr,DJ,xgr,$gr,kgr,S0,wFe,Sgr,Rgr,GJ,Pgr,Bgr,Igr,R0,AFe,Ngr,qgr,OJ,jgr,Dgr,Ggr,P0,LFe,Ogr,Vgr,VJ,Xgr,zgr,Qgr,B0,yFe,Wgr,Ugr,XJ,Hgr,Jgr,Ygr,I0,xFe,Zgr,Kgr,zJ,ehr,ohr,rhr,N0,$Fe,thr,ahr,QJ,nhr,shr,lhr,q0,ihr,kFe,dhr,chr,SFe,fhr,mhr,j0,zoo,Wd,D0,RFe,D$,ghr,PFe,hhr,Qoo,Vo,G$,uhr,Ud,phr,WJ,_hr,vhr,UJ,bhr,Fhr,Thr,O$,Mhr,BFe,Ehr,Chr,whr,Lt,V$,Ahr,IFe,Lhr,yhr,Hd,xhr,NFe,$hr,khr,HJ,Shr,Rhr,Phr,G0,Bhr,lo,X$,Ihr,qFe,Nhr,qhr,dn,jhr,jFe,Dhr,Ghr,DFe,Ohr,Vhr,GFe,Xhr,zhr,Qhr,H,O0,OFe,Whr,Uhr,JJ,Hhr,Jhr,Yhr,V0,VFe,Zhr,Khr,YJ,eur,our,rur,X0,XFe,tur,aur,ZJ,nur,sur,lur,z0,zFe,iur,dur,KJ,cur,fur,mur,Q0,QFe,gur,hur,eY,uur,pur,_ur,W0,WFe,vur,bur,oY,Fur,Tur,Mur,U0,UFe,Eur,Cur,rY,wur,Aur,Lur,H0,HFe,yur,xur,tY,$ur,kur,Sur,J0,JFe,Rur,Pur,aY,Bur,Iur,Nur,Y0,YFe,qur,jur,nY,Dur,Gur,Our,Z0,ZFe,Vur,Xur,sY,zur,Qur,Wur,K0,KFe,Uur,Hur,lY,Jur,Yur,Zur,eF,eTe,Kur,epr,iY,opr,rpr,tpr,oF,oTe,apr,npr,dY,spr,lpr,ipr,rF,rTe,dpr,cpr,cY,fpr,mpr,gpr,tF,tTe,hpr,upr,fY,ppr,_pr,vpr,aF,aTe,bpr,Fpr,mY,Tpr,Mpr,Epr,nF,nTe,Cpr,wpr,gY,Apr,Lpr,ypr,sF,sTe,xpr,$pr,hY,kpr,Spr,Rpr,lF,lTe,Ppr,Bpr,uY,Ipr,Npr,qpr,iF,iTe,jpr,Dpr,pY,Gpr,Opr,Vpr,dF,dTe,Xpr,zpr,_Y,Qpr,Wpr,Upr,cF,cTe,Hpr,Jpr,vY,Ypr,Zpr,Kpr,fF,fTe,e_r,o_r,bY,r_r,t_r,a_r,mF,mTe,n_r,s_r,FY,l_r,i_r,d_r,gF,gTe,c_r,f_r,TY,m_r,g_r,h_r,hF,hTe,u_r,p_r,MY,__r,v_r,b_r,uF,uTe,F_r,T_r,EY,M_r,E_r,C_r,pF,pTe,w_r,A_r,CY,L_r,y_r,x_r,_F,_Te,$_r,k_r,wY,S_r,R_r,P_r,vF,vTe,B_r,I_r,AY,N_r,q_r,j_r,bF,bTe,D_r,G_r,LY,O_r,V_r,X_r,FF,FTe,z_r,Q_r,yY,W_r,U_r,H_r,TF,TTe,J_r,Y_r,xY,Z_r,K_r,e2r,MF,MTe,o2r,r2r,$Y,t2r,a2r,n2r,EF,ETe,s2r,l2r,kY,i2r,d2r,c2r,CF,CTe,f2r,m2r,SY,g2r,h2r,u2r,wF,wTe,p2r,_2r,RY,v2r,b2r,F2r,AF,ATe,T2r,M2r,PY,E2r,C2r,w2r,LF,LTe,A2r,L2r,BY,y2r,x2r,$2r,yF,k2r,yTe,S2r,R2r,xTe,P2r,B2r,xF,Woo,Jd,$F,$Te,z$,I2r,kTe,N2r,Uoo,Xo,Q$,q2r,Yd,j2r,IY,D2r,G2r,NY,O2r,V2r,X2r,W$,z2r,STe,Q2r,W2r,U2r,yt,U$,H2r,RTe,J2r,Y2r,Zd,Z2r,PTe,K2r,evr,qY,ovr,rvr,tvr,kF,avr,io,H$,nvr,BTe,svr,lvr,cn,ivr,ITe,dvr,cvr,NTe,fvr,mvr,qTe,gvr,hvr,uvr,O,SF,jTe,pvr,_vr,jY,vvr,bvr,Fvr,RF,DTe,Tvr,Mvr,DY,Evr,Cvr,wvr,PF,GTe,Avr,Lvr,GY,yvr,xvr,$vr,BF,OTe,kvr,Svr,OY,Rvr,Pvr,Bvr,IF,VTe,Ivr,Nvr,VY,qvr,jvr,Dvr,NF,XTe,Gvr,Ovr,XY,Vvr,Xvr,zvr,qF,zTe,Qvr,Wvr,zY,Uvr,Hvr,Jvr,jF,QTe,Yvr,Zvr,QY,Kvr,e4r,o4r,DF,WTe,r4r,t4r,WY,a4r,n4r,s4r,GF,UTe,l4r,i4r,UY,d4r,c4r,f4r,OF,HTe,m4r,g4r,HY,h4r,u4r,p4r,VF,JTe,_4r,v4r,JY,b4r,F4r,T4r,XF,YTe,M4r,E4r,YY,C4r,w4r,A4r,zF,ZTe,L4r,y4r,ZY,x4r,$4r,k4r,QF,KTe,S4r,R4r,KY,P4r,B4r,I4r,WF,eMe,N4r,q4r,eZ,j4r,D4r,G4r,UF,oMe,O4r,V4r,oZ,X4r,z4r,Q4r,HF,rMe,W4r,U4r,rZ,H4r,J4r,Y4r,JF,tMe,Z4r,K4r,tZ,e1r,o1r,r1r,YF,aMe,t1r,a1r,aZ,n1r,s1r,l1r,ZF,nMe,i1r,d1r,nZ,c1r,f1r,m1r,KF,sMe,g1r,h1r,sZ,u1r,p1r,_1r,eT,lMe,v1r,b1r,lZ,F1r,T1r,M1r,oT,iMe,E1r,C1r,iZ,w1r,A1r,L1r,rT,dMe,y1r,x1r,dZ,$1r,k1r,S1r,tT,cMe,R1r,P1r,cZ,B1r,I1r,N1r,aT,fMe,q1r,j1r,fZ,D1r,G1r,O1r,nT,mMe,V1r,X1r,mZ,z1r,Q1r,W1r,sT,gMe,U1r,H1r,gZ,J1r,Y1r,Z1r,lT,hMe,K1r,ebr,hZ,obr,rbr,tbr,iT,uMe,abr,nbr,uZ,sbr,lbr,ibr,dT,pMe,dbr,cbr,pZ,fbr,mbr,gbr,cT,_Me,hbr,ubr,_Z,pbr,_br,vbr,fT,vMe,bbr,Fbr,vZ,Tbr,Mbr,Ebr,mT,bMe,Cbr,wbr,bZ,Abr,Lbr,ybr,gT,FMe,xbr,$br,FZ,kbr,Sbr,Rbr,hT,TMe,Pbr,Bbr,TZ,Ibr,Nbr,qbr,uT,MMe,jbr,Dbr,MZ,Gbr,Obr,Vbr,pT,EMe,Xbr,zbr,EZ,Qbr,Wbr,Ubr,_T,CMe,Hbr,Jbr,CZ,Ybr,Zbr,Kbr,vT,wMe,e3r,o3r,wZ,r3r,t3r,a3r,bT,AMe,n3r,s3r,AZ,l3r,i3r,d3r,FT,LMe,c3r,f3r,LZ,m3r,g3r,h3r,TT,yMe,u3r,p3r,yZ,_3r,v3r,b3r,MT,xMe,F3r,T3r,xZ,M3r,E3r,C3r,ET,$Me,w3r,A3r,$Z,L3r,y3r,x3r,CT,kMe,$3r,k3r,kZ,S3r,R3r,P3r,wT,B3r,SMe,I3r,N3r,RMe,q3r,j3r,AT,Hoo,Kd,LT,PMe,J$,D3r,BMe,G3r,Joo,zo,Y$,O3r,ec,V3r,SZ,X3r,z3r,RZ,Q3r,W3r,U3r,Z$,H3r,IMe,J3r,Y3r,Z3r,xt,K$,K3r,NMe,e0r,o0r,oc,r0r,qMe,t0r,a0r,PZ,n0r,s0r,l0r,yT,i0r,co,ek,d0r,jMe,c0r,f0r,fn,m0r,DMe,g0r,h0r,GMe,u0r,p0r,OMe,_0r,v0r,b0r,VMe,xT,XMe,F0r,T0r,BZ,M0r,E0r,C0r,$T,w0r,zMe,A0r,L0r,QMe,y0r,x0r,kT,Yoo,rc,ST,WMe,ok,$0r,UMe,k0r,Zoo,Qo,rk,S0r,tc,R0r,IZ,P0r,B0r,NZ,I0r,N0r,q0r,tk,j0r,HMe,D0r,G0r,O0r,$t,ak,V0r,JMe,X0r,z0r,ac,Q0r,YMe,W0r,U0r,qZ,H0r,J0r,Y0r,RT,Z0r,fo,nk,K0r,ZMe,eFr,oFr,mn,rFr,KMe,tFr,aFr,eEe,nFr,sFr,oEe,lFr,iFr,dFr,nc,PT,rEe,cFr,fFr,jZ,mFr,gFr,hFr,BT,tEe,uFr,pFr,DZ,_Fr,vFr,bFr,IT,aEe,FFr,TFr,GZ,MFr,EFr,CFr,NT,wFr,nEe,AFr,LFr,sEe,yFr,xFr,qT,Koo,sc,jT,lEe,sk,$Fr,iEe,kFr,ero,Wo,lk,SFr,lc,RFr,OZ,PFr,BFr,VZ,IFr,NFr,qFr,ik,jFr,dEe,DFr,GFr,OFr,kt,dk,VFr,cEe,XFr,zFr,ic,QFr,fEe,WFr,UFr,XZ,HFr,JFr,YFr,DT,ZFr,mo,ck,KFr,mEe,eTr,oTr,gn,rTr,gEe,tTr,aTr,hEe,nTr,sTr,uEe,lTr,iTr,dTr,ve,GT,pEe,cTr,fTr,zZ,mTr,gTr,hTr,OT,_Ee,uTr,pTr,QZ,_Tr,vTr,bTr,VT,vEe,FTr,TTr,WZ,MTr,ETr,CTr,XT,bEe,wTr,ATr,UZ,LTr,yTr,xTr,El,FEe,$Tr,kTr,HZ,STr,RTr,JZ,PTr,BTr,ITr,zT,TEe,NTr,qTr,YZ,jTr,DTr,GTr,Cl,MEe,OTr,VTr,ZZ,XTr,zTr,KZ,QTr,WTr,UTr,QT,EEe,HTr,JTr,eK,YTr,ZTr,KTr,St,CEe,eMr,oMr,oK,rMr,tMr,rK,aMr,nMr,tK,sMr,lMr,iMr,WT,wEe,dMr,cMr,aK,fMr,mMr,gMr,UT,AEe,hMr,uMr,nK,pMr,_Mr,vMr,HT,LEe,bMr,FMr,sK,TMr,MMr,EMr,JT,yEe,CMr,wMr,lK,AMr,LMr,yMr,YT,xEe,xMr,$Mr,iK,kMr,SMr,RMr,ZT,$Ee,PMr,BMr,dK,IMr,NMr,qMr,KT,kEe,jMr,DMr,cK,GMr,OMr,VMr,eM,SEe,XMr,zMr,fK,QMr,WMr,UMr,oM,REe,HMr,JMr,mK,YMr,ZMr,KMr,rM,eEr,PEe,oEr,rEr,BEe,tEr,aEr,tM,oro,dc,aM,IEe,fk,nEr,NEe,sEr,rro,Uo,mk,lEr,cc,iEr,gK,dEr,cEr,hK,fEr,mEr,gEr,gk,hEr,qEe,uEr,pEr,_Er,Rt,hk,vEr,jEe,bEr,FEr,fc,TEr,DEe,MEr,EEr,uK,CEr,wEr,AEr,nM,LEr,go,uk,yEr,GEe,xEr,$Er,hn,kEr,OEe,SEr,REr,VEe,PEr,BEr,XEe,IEr,NEr,qEr,zEe,sM,QEe,jEr,DEr,pK,GEr,OEr,VEr,lM,XEr,WEe,zEr,QEr,UEe,WEr,UEr,iM,tro,mc,dM,HEe,pk,HEr,JEe,JEr,aro,Ho,_k,YEr,gc,ZEr,_K,KEr,eCr,vK,oCr,rCr,tCr,vk,aCr,YEe,nCr,sCr,lCr,Pt,bk,iCr,ZEe,dCr,cCr,hc,fCr,KEe,mCr,gCr,bK,hCr,uCr,pCr,cM,_Cr,ho,Fk,vCr,eCe,bCr,FCr,un,TCr,oCe,MCr,ECr,rCe,CCr,wCr,tCe,ACr,LCr,yCr,aCe,fM,nCe,xCr,$Cr,FK,kCr,SCr,RCr,mM,PCr,sCe,BCr,ICr,lCe,NCr,qCr,gM,nro,uc,hM,iCe,Tk,jCr,dCe,DCr,sro,Jo,Mk,GCr,pc,OCr,TK,VCr,XCr,MK,zCr,QCr,WCr,Ek,UCr,cCe,HCr,JCr,YCr,Bt,Ck,ZCr,fCe,KCr,e5r,_c,o5r,mCe,r5r,t5r,EK,a5r,n5r,s5r,uM,l5r,uo,wk,i5r,gCe,d5r,c5r,pn,f5r,hCe,m5r,g5r,uCe,h5r,u5r,pCe,p5r,_5r,v5r,_Ce,pM,vCe,b5r,F5r,CK,T5r,M5r,E5r,_M,C5r,bCe,w5r,A5r,FCe,L5r,y5r,vM,lro,vc,bM,TCe,Ak,x5r,MCe,$5r,iro,Yo,Lk,k5r,bc,S5r,wK,R5r,P5r,AK,B5r,I5r,N5r,yk,q5r,ECe,j5r,D5r,G5r,It,xk,O5r,CCe,V5r,X5r,Fc,z5r,wCe,Q5r,W5r,LK,U5r,H5r,J5r,FM,Y5r,po,$k,Z5r,ACe,K5r,ewr,_n,owr,LCe,rwr,twr,yCe,awr,nwr,xCe,swr,lwr,iwr,Pe,TM,$Ce,dwr,cwr,yK,fwr,mwr,gwr,MM,kCe,hwr,uwr,xK,pwr,_wr,vwr,EM,SCe,bwr,Fwr,$K,Twr,Mwr,Ewr,CM,RCe,Cwr,wwr,kK,Awr,Lwr,ywr,wM,PCe,xwr,$wr,SK,kwr,Swr,Rwr,AM,BCe,Pwr,Bwr,RK,Iwr,Nwr,qwr,LM,ICe,jwr,Dwr,PK,Gwr,Owr,Vwr,yM,NCe,Xwr,zwr,BK,Qwr,Wwr,Uwr,xM,qCe,Hwr,Jwr,IK,Ywr,Zwr,Kwr,$M,eAr,jCe,oAr,rAr,DCe,tAr,aAr,kM,dro,Tc,SM,GCe,kk,nAr,OCe,sAr,cro,Zo,Sk,lAr,Mc,iAr,NK,dAr,cAr,qK,fAr,mAr,gAr,Rk,hAr,VCe,uAr,pAr,_Ar,Nt,Pk,vAr,XCe,bAr,FAr,Ec,TAr,zCe,MAr,EAr,jK,CAr,wAr,AAr,RM,LAr,_o,Bk,yAr,QCe,xAr,$Ar,vn,kAr,WCe,SAr,RAr,UCe,PAr,BAr,HCe,IAr,NAr,qAr,gt,PM,JCe,jAr,DAr,DK,GAr,OAr,VAr,BM,YCe,XAr,zAr,GK,QAr,WAr,UAr,IM,ZCe,HAr,JAr,OK,YAr,ZAr,KAr,NM,KCe,e6r,o6r,VK,r6r,t6r,a6r,qM,e5e,n6r,s6r,XK,l6r,i6r,d6r,jM,c6r,o5e,f6r,m6r,r5e,g6r,h6r,DM,fro,Cc,GM,t5e,Ik,u6r,a5e,p6r,mro,Ko,Nk,_6r,wc,v6r,zK,b6r,F6r,QK,T6r,M6r,E6r,qk,C6r,n5e,w6r,A6r,L6r,qt,jk,y6r,s5e,x6r,$6r,Ac,k6r,l5e,S6r,R6r,WK,P6r,B6r,I6r,OM,N6r,vo,Dk,q6r,i5e,j6r,D6r,bn,G6r,d5e,O6r,V6r,c5e,X6r,z6r,f5e,Q6r,W6r,U6r,Le,VM,m5e,H6r,J6r,UK,Y6r,Z6r,K6r,XM,g5e,e7r,o7r,HK,r7r,t7r,a7r,zM,h5e,n7r,s7r,JK,l7r,i7r,d7r,QM,u5e,c7r,f7r,YK,m7r,g7r,h7r,WM,p5e,u7r,p7r,ZK,_7r,v7r,b7r,UM,_5e,F7r,T7r,KK,M7r,E7r,C7r,HM,v5e,w7r,A7r,eee,L7r,y7r,x7r,JM,b5e,$7r,k7r,oee,S7r,R7r,P7r,YM,F5e,B7r,I7r,ree,N7r,q7r,j7r,ZM,T5e,D7r,G7r,tee,O7r,V7r,X7r,KM,z7r,M5e,Q7r,W7r,E5e,U7r,H7r,eE,gro,Lc,oE,C5e,Gk,J7r,w5e,Y7r,hro,er,Ok,Z7r,yc,K7r,aee,eLr,oLr,nee,rLr,tLr,aLr,Vk,nLr,A5e,sLr,lLr,iLr,jt,Xk,dLr,L5e,cLr,fLr,xc,mLr,y5e,gLr,hLr,see,uLr,pLr,_Lr,rE,vLr,bo,zk,bLr,x5e,FLr,TLr,Fn,MLr,$5e,ELr,CLr,k5e,wLr,ALr,S5e,LLr,yLr,xLr,$c,tE,R5e,$Lr,kLr,lee,SLr,RLr,PLr,aE,P5e,BLr,ILr,iee,NLr,qLr,jLr,nE,B5e,DLr,GLr,dee,OLr,VLr,XLr,sE,zLr,I5e,QLr,WLr,N5e,ULr,HLr,lE,uro,kc,iE,q5e,Qk,JLr,j5e,YLr,pro,or,Wk,ZLr,Sc,KLr,cee,e8r,o8r,fee,r8r,t8r,a8r,Uk,n8r,D5e,s8r,l8r,i8r,Dt,Hk,d8r,G5e,c8r,f8r,Rc,m8r,O5e,g8r,h8r,mee,u8r,p8r,_8r,dE,v8r,Fo,Jk,b8r,V5e,F8r,T8r,Tn,M8r,X5e,E8r,C8r,z5e,w8r,A8r,Q5e,L8r,y8r,x8r,ht,cE,W5e,$8r,k8r,gee,S8r,R8r,P8r,fE,U5e,B8r,I8r,hee,N8r,q8r,j8r,mE,H5e,D8r,G8r,uee,O8r,V8r,X8r,gE,J5e,z8r,Q8r,pee,W8r,U8r,H8r,hE,Y5e,J8r,Y8r,_ee,Z8r,K8r,eyr,uE,oyr,Z5e,ryr,tyr,K5e,ayr,nyr,pE,_ro,Pc,_E,ewe,Yk,syr,owe,lyr,vro,rr,Zk,iyr,Bc,dyr,vee,cyr,fyr,bee,myr,gyr,hyr,Kk,uyr,rwe,pyr,_yr,vyr,Gt,eS,byr,twe,Fyr,Tyr,Ic,Myr,awe,Eyr,Cyr,Fee,wyr,Ayr,Lyr,vE,yyr,To,oS,xyr,nwe,$yr,kyr,Mn,Syr,swe,Ryr,Pyr,lwe,Byr,Iyr,iwe,Nyr,qyr,jyr,En,bE,dwe,Dyr,Gyr,Tee,Oyr,Vyr,Xyr,FE,cwe,zyr,Qyr,Mee,Wyr,Uyr,Hyr,TE,fwe,Jyr,Yyr,Eee,Zyr,Kyr,e9r,ME,mwe,o9r,r9r,Cee,t9r,a9r,n9r,EE,s9r,gwe,l9r,i9r,hwe,d9r,c9r,CE,bro,Nc,wE,uwe,rS,f9r,pwe,m9r,Fro,tr,tS,g9r,qc,h9r,wee,u9r,p9r,Aee,_9r,v9r,b9r,aS,F9r,_we,T9r,M9r,E9r,Ot,nS,C9r,vwe,w9r,A9r,jc,L9r,bwe,y9r,x9r,Lee,$9r,k9r,S9r,AE,R9r,Mo,sS,P9r,Fwe,B9r,I9r,Cn,N9r,Twe,q9r,j9r,Mwe,D9r,G9r,Ewe,O9r,V9r,X9r,wn,LE,Cwe,z9r,Q9r,yee,W9r,U9r,H9r,yE,wwe,J9r,Y9r,xee,Z9r,K9r,exr,xE,Awe,oxr,rxr,$ee,txr,axr,nxr,$E,Lwe,sxr,lxr,kee,ixr,dxr,cxr,kE,fxr,ywe,mxr,gxr,xwe,hxr,uxr,SE,Tro,Dc,RE,$we,lS,pxr,kwe,_xr,Mro,ar,iS,vxr,Gc,bxr,See,Fxr,Txr,Ree,Mxr,Exr,Cxr,dS,wxr,Swe,Axr,Lxr,yxr,Vt,cS,xxr,Rwe,$xr,kxr,Oc,Sxr,Pwe,Rxr,Pxr,Pee,Bxr,Ixr,Nxr,PE,qxr,Eo,fS,jxr,Bwe,Dxr,Gxr,An,Oxr,Iwe,Vxr,Xxr,Nwe,zxr,Qxr,qwe,Wxr,Uxr,Hxr,jwe,BE,Dwe,Jxr,Yxr,Bee,Zxr,Kxr,e$r,IE,o$r,Gwe,r$r,t$r,Owe,a$r,n$r,NE,Ero,Vc,qE,Vwe,mS,s$r,Xwe,l$r,Cro,nr,gS,i$r,Xc,d$r,Iee,c$r,f$r,Nee,m$r,g$r,h$r,hS,u$r,zwe,p$r,_$r,v$r,Xt,uS,b$r,Qwe,F$r,T$r,zc,M$r,Wwe,E$r,C$r,qee,w$r,A$r,L$r,jE,y$r,Co,pS,x$r,Uwe,$$r,k$r,Ln,S$r,Hwe,R$r,P$r,Jwe,B$r,I$r,Ywe,N$r,q$r,j$r,ut,DE,Zwe,D$r,G$r,jee,O$r,V$r,X$r,GE,Kwe,z$r,Q$r,Dee,W$r,U$r,H$r,OE,eAe,J$r,Y$r,Gee,Z$r,K$r,ekr,VE,oAe,okr,rkr,Oee,tkr,akr,nkr,XE,rAe,skr,lkr,Vee,ikr,dkr,ckr,zE,fkr,tAe,mkr,gkr,aAe,hkr,ukr,QE,wro,Qc,WE,nAe,_S,pkr,sAe,_kr,Aro,sr,vS,vkr,Wc,bkr,Xee,Fkr,Tkr,zee,Mkr,Ekr,Ckr,bS,wkr,lAe,Akr,Lkr,ykr,zt,FS,xkr,iAe,$kr,kkr,Uc,Skr,dAe,Rkr,Pkr,Qee,Bkr,Ikr,Nkr,UE,qkr,wo,TS,jkr,cAe,Dkr,Gkr,yn,Okr,fAe,Vkr,Xkr,mAe,zkr,Qkr,gAe,Wkr,Ukr,Hkr,hAe,HE,uAe,Jkr,Ykr,Wee,Zkr,Kkr,eSr,JE,oSr,pAe,rSr,tSr,_Ae,aSr,nSr,YE,Lro,Hc,ZE,vAe,MS,sSr,bAe,lSr,yro,lr,ES,iSr,Jc,dSr,Uee,cSr,fSr,Hee,mSr,gSr,hSr,CS,uSr,FAe,pSr,_Sr,vSr,Qt,wS,bSr,TAe,FSr,TSr,Yc,MSr,MAe,ESr,CSr,Jee,wSr,ASr,LSr,KE,ySr,Ao,AS,xSr,EAe,$Sr,kSr,xn,SSr,CAe,RSr,PSr,wAe,BSr,ISr,AAe,NSr,qSr,jSr,LAe,eC,yAe,DSr,GSr,Yee,OSr,VSr,XSr,oC,zSr,xAe,QSr,WSr,$Ae,USr,HSr,rC,xro,Zc,tC,kAe,LS,JSr,SAe,YSr,$ro,ir,yS,ZSr,Kc,KSr,Zee,eRr,oRr,Kee,rRr,tRr,aRr,xS,nRr,RAe,sRr,lRr,iRr,Wt,$S,dRr,PAe,cRr,fRr,ef,mRr,BAe,gRr,hRr,eoe,uRr,pRr,_Rr,aC,vRr,qr,kS,bRr,IAe,FRr,TRr,$n,MRr,NAe,ERr,CRr,qAe,wRr,ARr,jAe,LRr,yRr,xRr,B,nC,DAe,$Rr,kRr,ooe,SRr,RRr,PRr,sC,GAe,BRr,IRr,roe,NRr,qRr,jRr,lC,OAe,DRr,GRr,toe,ORr,VRr,XRr,iC,VAe,zRr,QRr,aoe,WRr,URr,HRr,dC,XAe,JRr,YRr,noe,ZRr,KRr,ePr,cC,zAe,oPr,rPr,soe,tPr,aPr,nPr,fC,QAe,sPr,lPr,loe,iPr,dPr,cPr,mC,WAe,fPr,mPr,ioe,gPr,hPr,uPr,gC,UAe,pPr,_Pr,doe,vPr,bPr,FPr,hC,HAe,TPr,MPr,coe,EPr,CPr,wPr,uC,JAe,APr,LPr,foe,yPr,xPr,$Pr,pC,YAe,kPr,SPr,moe,RPr,PPr,BPr,_C,ZAe,IPr,NPr,goe,qPr,jPr,DPr,vC,KAe,GPr,OPr,hoe,VPr,XPr,zPr,bC,e6e,QPr,WPr,uoe,UPr,HPr,JPr,FC,o6e,YPr,ZPr,poe,KPr,eBr,oBr,TC,r6e,rBr,tBr,_oe,aBr,nBr,sBr,MC,t6e,lBr,iBr,voe,dBr,cBr,fBr,wl,a6e,mBr,gBr,boe,hBr,uBr,Foe,pBr,_Br,vBr,EC,n6e,bBr,FBr,Toe,TBr,MBr,EBr,CC,s6e,CBr,wBr,Moe,ABr,LBr,yBr,wC,l6e,xBr,$Br,Eoe,kBr,SBr,RBr,AC,i6e,PBr,BBr,Coe,IBr,NBr,qBr,LC,d6e,jBr,DBr,woe,GBr,OBr,VBr,yC,c6e,XBr,zBr,Aoe,QBr,WBr,UBr,xC,f6e,HBr,JBr,Loe,YBr,ZBr,KBr,$C,m6e,eIr,oIr,yoe,rIr,tIr,aIr,kC,g6e,nIr,sIr,xoe,lIr,iIr,dIr,SC,h6e,cIr,fIr,$oe,mIr,gIr,hIr,RC,u6e,uIr,pIr,koe,_Ir,vIr,bIr,PC,p6e,FIr,TIr,Soe,MIr,EIr,CIr,BC,_6e,wIr,AIr,Roe,LIr,yIr,xIr,IC,v6e,$Ir,kIr,Poe,SIr,RIr,PIr,NC,b6e,BIr,IIr,Boe,NIr,qIr,jIr,qC,F6e,DIr,GIr,Ioe,OIr,VIr,XIr,jC,T6e,zIr,QIr,Noe,WIr,UIr,HIr,DC,M6e,JIr,YIr,qoe,ZIr,KIr,eNr,GC,E6e,oNr,rNr,joe,tNr,aNr,nNr,OC,C6e,sNr,lNr,Doe,iNr,dNr,cNr,VC,w6e,fNr,mNr,Goe,gNr,hNr,uNr,XC,A6e,pNr,_Nr,Ooe,vNr,bNr,FNr,zC,L6e,TNr,MNr,Voe,ENr,CNr,wNr,QC,y6e,ANr,LNr,Xoe,yNr,xNr,$Nr,WC,x6e,kNr,SNr,zoe,RNr,PNr,BNr,UC,$6e,INr,NNr,Qoe,qNr,jNr,DNr,HC,k6e,GNr,ONr,Woe,VNr,XNr,zNr,JC,S6e,QNr,WNr,Uoe,UNr,HNr,JNr,YC,R6e,YNr,ZNr,Hoe,KNr,eqr,oqr,ZC,P6e,rqr,tqr,Joe,aqr,nqr,sqr,KC,B6e,lqr,iqr,Yoe,dqr,cqr,fqr,e5,I6e,mqr,gqr,Zoe,hqr,uqr,pqr,o5,N6e,_qr,vqr,Koe,bqr,Fqr,Tqr,r5,q6e,Mqr,Eqr,ere,Cqr,wqr,Aqr,t5,j6e,Lqr,yqr,ore,xqr,$qr,kqr,a5,D6e,Sqr,Rqr,rre,Pqr,Bqr,Iqr,n5,G6e,Nqr,qqr,tre,jqr,Dqr,Gqr,s5,kro,of,l5,O6e,SS,Oqr,V6e,Vqr,Sro,dr,RS,Xqr,rf,zqr,are,Qqr,Wqr,nre,Uqr,Hqr,Jqr,PS,Yqr,X6e,Zqr,Kqr,ejr,Ut,BS,ojr,z6e,rjr,tjr,tf,ajr,Q6e,njr,sjr,sre,ljr,ijr,djr,i5,cjr,jr,IS,fjr,W6e,mjr,gjr,kn,hjr,U6e,ujr,pjr,H6e,_jr,vjr,J6e,bjr,Fjr,Tjr,le,d5,Y6e,Mjr,Ejr,lre,Cjr,wjr,Ajr,c5,Z6e,Ljr,yjr,ire,xjr,$jr,kjr,f5,K6e,Sjr,Rjr,dre,Pjr,Bjr,Ijr,m5,e7e,Njr,qjr,cre,jjr,Djr,Gjr,g5,o7e,Ojr,Vjr,fre,Xjr,zjr,Qjr,h5,r7e,Wjr,Ujr,mre,Hjr,Jjr,Yjr,u5,t7e,Zjr,Kjr,gre,eDr,oDr,rDr,p5,a7e,tDr,aDr,hre,nDr,sDr,lDr,_5,n7e,iDr,dDr,ure,cDr,fDr,mDr,v5,s7e,gDr,hDr,pre,uDr,pDr,_Dr,b5,l7e,vDr,bDr,_re,FDr,TDr,MDr,F5,i7e,EDr,CDr,vre,wDr,ADr,LDr,T5,d7e,yDr,xDr,bre,$Dr,kDr,SDr,M5,c7e,RDr,PDr,Fre,BDr,IDr,NDr,E5,f7e,qDr,jDr,Tre,DDr,GDr,ODr,C5,m7e,VDr,XDr,Mre,zDr,QDr,WDr,w5,g7e,UDr,HDr,Ere,JDr,YDr,ZDr,A5,h7e,KDr,eGr,Cre,oGr,rGr,tGr,L5,u7e,aGr,nGr,wre,sGr,lGr,iGr,y5,p7e,dGr,cGr,Are,fGr,mGr,gGr,x5,_7e,hGr,uGr,Lre,pGr,_Gr,vGr,$5,v7e,bGr,FGr,yre,TGr,MGr,EGr,k5,b7e,CGr,wGr,xre,AGr,LGr,yGr,S5,Rro,af,R5,F7e,NS,xGr,T7e,$Gr,Pro,cr,qS,kGr,nf,SGr,$re,RGr,PGr,kre,BGr,IGr,NGr,jS,qGr,M7e,jGr,DGr,GGr,Ht,DS,OGr,E7e,VGr,XGr,sf,zGr,C7e,QGr,WGr,Sre,UGr,HGr,JGr,P5,YGr,Dr,GS,ZGr,w7e,KGr,eOr,Sn,oOr,A7e,rOr,tOr,L7e,aOr,nOr,y7e,sOr,lOr,iOr,Me,B5,x7e,dOr,cOr,Rre,fOr,mOr,gOr,I5,$7e,hOr,uOr,Pre,pOr,_Or,vOr,N5,k7e,bOr,FOr,Bre,TOr,MOr,EOr,q5,S7e,COr,wOr,Ire,AOr,LOr,yOr,j5,R7e,xOr,$Or,Nre,kOr,SOr,ROr,D5,P7e,POr,BOr,qre,IOr,NOr,qOr,G5,B7e,jOr,DOr,jre,GOr,OOr,VOr,O5,I7e,XOr,zOr,Dre,QOr,WOr,UOr,V5,N7e,HOr,JOr,Gre,YOr,ZOr,KOr,X5,q7e,eVr,oVr,Ore,rVr,tVr,aVr,z5,j7e,nVr,sVr,Vre,lVr,iVr,dVr,Q5,D7e,cVr,fVr,Xre,mVr,gVr,hVr,W5,G7e,uVr,pVr,zre,_Vr,vVr,bVr,U5,O7e,FVr,TVr,Qre,MVr,EVr,CVr,H5,Bro,lf,J5,V7e,OS,wVr,X7e,AVr,Iro,fr,VS,LVr,df,yVr,Wre,xVr,$Vr,Ure,kVr,SVr,RVr,XS,PVr,z7e,BVr,IVr,NVr,Jt,zS,qVr,Q7e,jVr,DVr,cf,GVr,W7e,OVr,VVr,Hre,XVr,zVr,QVr,Y5,WVr,Gr,QS,UVr,U7e,HVr,JVr,Rn,YVr,H7e,ZVr,KVr,J7e,eXr,oXr,Y7e,rXr,tXr,aXr,Be,Z5,Z7e,nXr,sXr,Jre,lXr,iXr,dXr,K5,K7e,cXr,fXr,Yre,mXr,gXr,hXr,Al,eLe,uXr,pXr,Zre,_Xr,vXr,Kre,bXr,FXr,TXr,ew,oLe,MXr,EXr,ete,CXr,wXr,AXr,ow,rLe,LXr,yXr,ote,xXr,$Xr,kXr,rw,tLe,SXr,RXr,rte,PXr,BXr,IXr,tw,aLe,NXr,qXr,tte,jXr,DXr,GXr,aw,nLe,OXr,VXr,ate,XXr,zXr,QXr,nw,sLe,WXr,UXr,nte,HXr,JXr,YXr,sw,Nro,ff,lw,lLe,WS,ZXr,iLe,KXr,qro,mr,US,ezr,mf,ozr,ste,rzr,tzr,lte,azr,nzr,szr,HS,lzr,dLe,izr,dzr,czr,Yt,JS,fzr,cLe,mzr,gzr,gf,hzr,fLe,uzr,pzr,ite,_zr,vzr,bzr,iw,Fzr,Or,YS,Tzr,mLe,Mzr,Ezr,Pn,Czr,gLe,wzr,Azr,hLe,Lzr,yzr,uLe,xzr,$zr,kzr,hf,dw,pLe,Szr,Rzr,dte,Pzr,Bzr,Izr,cw,_Le,Nzr,qzr,cte,jzr,Dzr,Gzr,fw,vLe,Ozr,Vzr,fte,Xzr,zzr,Qzr,mw,jro,uf,gw,bLe,ZS,Wzr,FLe,Uzr,Dro,gr,KS,Hzr,pf,Jzr,mte,Yzr,Zzr,gte,Kzr,eQr,oQr,eR,rQr,TLe,tQr,aQr,nQr,Zt,oR,sQr,MLe,lQr,iQr,_f,dQr,ELe,cQr,fQr,hte,mQr,gQr,hQr,hw,uQr,Vr,rR,pQr,CLe,_Qr,vQr,Bn,bQr,wLe,FQr,TQr,ALe,MQr,EQr,LLe,CQr,wQr,AQr,ge,uw,yLe,LQr,yQr,ute,xQr,$Qr,kQr,pw,xLe,SQr,RQr,pte,PQr,BQr,IQr,_w,$Le,NQr,qQr,_te,jQr,DQr,GQr,vw,kLe,OQr,VQr,vte,XQr,zQr,QQr,bw,SLe,WQr,UQr,bte,HQr,JQr,YQr,Fw,RLe,ZQr,KQr,Fte,eWr,oWr,rWr,Tw,PLe,tWr,aWr,Tte,nWr,sWr,lWr,Mw,BLe,iWr,dWr,Mte,cWr,fWr,mWr,Ew,ILe,gWr,hWr,Ete,uWr,pWr,_Wr,Cw,NLe,vWr,bWr,Cte,FWr,TWr,MWr,ww,qLe,EWr,CWr,wte,wWr,AWr,LWr,Aw,jLe,yWr,xWr,Ate,$Wr,kWr,SWr,Lw,DLe,RWr,PWr,Lte,BWr,IWr,NWr,yw,GLe,qWr,jWr,yte,DWr,GWr,OWr,xw,OLe,VWr,XWr,xte,zWr,QWr,WWr,$w,VLe,UWr,HWr,$te,JWr,YWr,ZWr,kw,XLe,KWr,eUr,kte,oUr,rUr,tUr,Sw,zLe,aUr,nUr,Ste,sUr,lUr,iUr,Rw,QLe,dUr,cUr,Rte,fUr,mUr,gUr,Pw,WLe,hUr,uUr,Pte,pUr,_Ur,vUr,Bw,Gro,vf,Iw,ULe,tR,bUr,HLe,FUr,Oro,hr,aR,TUr,bf,MUr,Bte,EUr,CUr,Ite,wUr,AUr,LUr,nR,yUr,JLe,xUr,$Ur,kUr,Kt,sR,SUr,YLe,RUr,PUr,Ff,BUr,ZLe,IUr,NUr,Nte,qUr,jUr,DUr,Nw,GUr,Xr,lR,OUr,KLe,VUr,XUr,In,zUr,e8e,QUr,WUr,o8e,UUr,HUr,r8e,JUr,YUr,ZUr,ye,qw,t8e,KUr,eHr,qte,oHr,rHr,tHr,jw,a8e,aHr,nHr,jte,sHr,lHr,iHr,Dw,n8e,dHr,cHr,Dte,fHr,mHr,gHr,Gw,s8e,hHr,uHr,Gte,pHr,_Hr,vHr,Ow,l8e,bHr,FHr,Ote,THr,MHr,EHr,Vw,i8e,CHr,wHr,Vte,AHr,LHr,yHr,Xw,d8e,xHr,$Hr,Xte,kHr,SHr,RHr,zw,c8e,PHr,BHr,zte,IHr,NHr,qHr,Qw,f8e,jHr,DHr,Qte,GHr,OHr,VHr,Ww,m8e,XHr,zHr,Wte,QHr,WHr,UHr,Uw,Vro,Tf,Hw,g8e,iR,HHr,h8e,JHr,Xro,ur,dR,YHr,Mf,ZHr,Ute,KHr,eJr,Hte,oJr,rJr,tJr,cR,aJr,u8e,nJr,sJr,lJr,ea,fR,iJr,p8e,dJr,cJr,Ef,fJr,_8e,mJr,gJr,Jte,hJr,uJr,pJr,Jw,_Jr,zr,mR,vJr,v8e,bJr,FJr,Nn,TJr,b8e,MJr,EJr,F8e,CJr,wJr,T8e,AJr,LJr,yJr,re,Yw,M8e,xJr,$Jr,Yte,kJr,SJr,RJr,Zw,E8e,PJr,BJr,Zte,IJr,NJr,qJr,Kw,C8e,jJr,DJr,Kte,GJr,OJr,VJr,eA,w8e,XJr,zJr,eae,QJr,WJr,UJr,oA,A8e,HJr,JJr,oae,YJr,ZJr,KJr,rA,L8e,eYr,oYr,rae,rYr,tYr,aYr,tA,y8e,nYr,sYr,tae,lYr,iYr,dYr,aA,x8e,cYr,fYr,aae,mYr,gYr,hYr,nA,$8e,uYr,pYr,nae,_Yr,vYr,bYr,sA,k8e,FYr,TYr,sae,MYr,EYr,CYr,lA,S8e,wYr,AYr,lae,LYr,yYr,xYr,iA,R8e,$Yr,kYr,iae,SYr,RYr,PYr,dA,P8e,BYr,IYr,dae,NYr,qYr,jYr,cA,B8e,DYr,GYr,cae,OYr,VYr,XYr,fA,I8e,zYr,QYr,fae,WYr,UYr,HYr,mA,N8e,JYr,YYr,mae,ZYr,KYr,eZr,gA,q8e,oZr,rZr,gae,tZr,aZr,nZr,hA,j8e,sZr,lZr,hae,iZr,dZr,cZr,uA,D8e,fZr,mZr,uae,gZr,hZr,uZr,pA,G8e,pZr,_Zr,pae,vZr,bZr,FZr,_A,O8e,TZr,MZr,_ae,EZr,CZr,wZr,vA,V8e,AZr,LZr,vae,yZr,xZr,$Zr,bA,X8e,kZr,SZr,bae,RZr,PZr,BZr,FA,z8e,IZr,NZr,Fae,qZr,jZr,DZr,TA,Q8e,GZr,OZr,Tae,VZr,XZr,zZr,MA,W8e,QZr,WZr,Mae,UZr,HZr,JZr,EA,U8e,YZr,ZZr,Eae,KZr,eKr,oKr,CA,zro,Cf,wA,H8e,gR,rKr,J8e,tKr,Qro,pr,hR,aKr,wf,nKr,Cae,sKr,lKr,wae,iKr,dKr,cKr,uR,fKr,Y8e,mKr,gKr,hKr,oa,pR,uKr,Z8e,pKr,_Kr,Af,vKr,K8e,bKr,FKr,Aae,TKr,MKr,EKr,AA,CKr,Qr,_R,wKr,eye,AKr,LKr,qn,yKr,oye,xKr,$Kr,rye,kKr,SKr,tye,RKr,PKr,BKr,be,LA,aye,IKr,NKr,Lae,qKr,jKr,DKr,yA,nye,GKr,OKr,yae,VKr,XKr,zKr,xA,sye,QKr,WKr,xae,UKr,HKr,JKr,$A,lye,YKr,ZKr,$ae,KKr,eet,oet,kA,iye,ret,tet,kae,aet,net,set,SA,dye,iet,det,Sae,cet,fet,met,RA,cye,get,het,Rae,uet,pet,_et,PA,fye,vet,bet,Pae,Fet,Tet,Met,BA,mye,Eet,Cet,Bae,wet,Aet,Let,IA,gye,yet,xet,Iae,$et,ket,Set,NA,hye,Ret,Pet,Nae,Bet,Iet,Net,qA,uye,qet,jet,qae,Det,Get,Oet,jA,pye,Vet,Xet,jae,zet,Qet,Wet,DA,_ye,Uet,Het,Dae,Jet,Yet,Zet,GA,vye,Ket,eot,Gae,oot,rot,tot,OA,bye,aot,not,Oae,sot,lot,iot,VA,Fye,dot,cot,Vae,fot,mot,got,XA,Wro,Lf,zA,Tye,vR,hot,Mye,uot,Uro,_r,bR,pot,yf,_ot,Xae,vot,bot,zae,Fot,Tot,Mot,FR,Eot,Eye,Cot,wot,Aot,ra,TR,Lot,Cye,yot,xot,xf,$ot,wye,kot,Sot,Qae,Rot,Pot,Bot,QA,Iot,Wr,MR,Not,Aye,qot,jot,jn,Dot,Lye,Got,Oot,yye,Vot,Xot,xye,zot,Qot,Wot,ER,WA,$ye,Uot,Hot,Wae,Jot,Yot,Zot,UA,kye,Kot,ert,Uae,ort,rrt,trt,HA,Hro,$f,JA,Sye,CR,art,Rye,nrt,Jro,vr,wR,srt,kf,lrt,Hae,irt,drt,Jae,crt,frt,mrt,AR,grt,Pye,hrt,urt,prt,ta,LR,_rt,Bye,vrt,brt,Sf,Frt,Iye,Trt,Mrt,Yae,Ert,Crt,wrt,YA,Art,Ur,yR,Lrt,Nye,yrt,xrt,Dn,$rt,qye,krt,Srt,jye,Rrt,Prt,Dye,Brt,Irt,Nrt,Gye,ZA,Oye,qrt,jrt,Zae,Drt,Grt,Ort,KA,Yro,Rf,e6,Vye,xR,Vrt,Xye,Xrt,Zro,br,$R,zrt,Pf,Qrt,Kae,Wrt,Urt,ene,Hrt,Jrt,Yrt,kR,Zrt,zye,Krt,ett,ott,aa,SR,rtt,Qye,ttt,att,Bf,ntt,Wye,stt,ltt,one,itt,dtt,ctt,o6,ftt,Hr,RR,mtt,Uye,gtt,htt,Gn,utt,Hye,ptt,_tt,Jye,vtt,btt,Yye,Ftt,Ttt,Mtt,Zye,r6,Kye,Ett,Ctt,rne,wtt,Att,Ltt,t6,Kro,If,a6,e9e,PR,ytt,o9e,xtt,eto,Fr,BR,$tt,Nf,ktt,tne,Stt,Rtt,ane,Ptt,Btt,Itt,IR,Ntt,r9e,qtt,jtt,Dtt,na,NR,Gtt,t9e,Ott,Vtt,qf,Xtt,a9e,ztt,Qtt,nne,Wtt,Utt,Htt,n6,Jtt,Jr,qR,Ytt,n9e,Ztt,Ktt,On,eat,s9e,oat,rat,l9e,tat,aat,i9e,nat,sat,lat,ce,s6,d9e,iat,dat,sne,cat,fat,mat,l6,c9e,gat,hat,lne,uat,pat,_at,i6,f9e,vat,bat,ine,Fat,Tat,Mat,d6,m9e,Eat,Cat,dne,wat,Aat,Lat,c6,g9e,yat,xat,cne,$at,kat,Sat,f6,h9e,Rat,Pat,fne,Bat,Iat,Nat,m6,u9e,qat,jat,mne,Dat,Gat,Oat,g6,p9e,Vat,Xat,gne,zat,Qat,Wat,h6,_9e,Uat,Hat,hne,Jat,Yat,Zat,u6,v9e,Kat,ent,une,ont,rnt,tnt,p6,b9e,ant,nnt,pne,snt,lnt,int,_6,F9e,dnt,cnt,_ne,fnt,mnt,gnt,v6,T9e,hnt,unt,vne,pnt,_nt,vnt,b6,M9e,bnt,Fnt,bne,Tnt,Mnt,Ent,F6,E9e,Cnt,wnt,Fne,Ant,Lnt,ynt,T6,C9e,xnt,$nt,Tne,knt,Snt,Rnt,M6,w9e,Pnt,Bnt,Mne,Int,Nnt,qnt,E6,A9e,jnt,Dnt,Ene,Gnt,Ont,Vnt,C6,L9e,Xnt,znt,Cne,Qnt,Wnt,Unt,w6,y9e,Hnt,Jnt,wne,Ynt,Znt,Knt,A6,x9e,est,ost,Ane,rst,tst,ast,L6,oto,jf,y6,$9e,jR,nst,k9e,sst,rto,Tr,DR,lst,Df,ist,Lne,dst,cst,yne,fst,mst,gst,GR,hst,S9e,ust,pst,_st,sa,OR,vst,R9e,bst,Fst,Gf,Tst,P9e,Mst,Est,xne,Cst,wst,Ast,x6,Lst,Yr,VR,yst,B9e,xst,$st,Vn,kst,I9e,Sst,Rst,N9e,Pst,Bst,q9e,Ist,Nst,qst,fe,$6,j9e,jst,Dst,$ne,Gst,Ost,Vst,k6,D9e,Xst,zst,kne,Qst,Wst,Ust,S6,G9e,Hst,Jst,Sne,Yst,Zst,Kst,R6,O9e,elt,olt,Rne,rlt,tlt,alt,P6,V9e,nlt,slt,Pne,llt,ilt,dlt,B6,X9e,clt,flt,Bne,mlt,glt,hlt,I6,z9e,ult,plt,Ine,_lt,vlt,blt,N6,Q9e,Flt,Tlt,Nne,Mlt,Elt,Clt,q6,W9e,wlt,Alt,qne,Llt,ylt,xlt,j6,U9e,$lt,klt,jne,Slt,Rlt,Plt,D6,H9e,Blt,Ilt,Dne,Nlt,qlt,jlt,G6,J9e,Dlt,Glt,Gne,Olt,Vlt,Xlt,O6,Y9e,zlt,Qlt,One,Wlt,Ult,Hlt,V6,Z9e,Jlt,Ylt,Vne,Zlt,Klt,eit,X6,K9e,oit,rit,Xne,tit,ait,nit,z6,exe,sit,lit,zne,iit,dit,cit,Q6,oxe,fit,mit,Qne,git,hit,uit,W6,rxe,pit,_it,Wne,vit,bit,Fit,U6,txe,Tit,Mit,Une,Eit,Cit,wit,H6,axe,Ait,Lit,Hne,yit,xit,$it,J6,nxe,kit,Sit,Jne,Rit,Pit,Bit,Y6,tto,Of,Z6,sxe,XR,Iit,lxe,Nit,ato,Mr,zR,qit,Vf,jit,Yne,Dit,Git,Zne,Oit,Vit,Xit,QR,zit,ixe,Qit,Wit,Uit,la,WR,Hit,dxe,Jit,Yit,Xf,Zit,cxe,Kit,edt,Kne,odt,rdt,tdt,K6,adt,Zr,UR,ndt,fxe,sdt,ldt,Xn,idt,mxe,ddt,cdt,gxe,fdt,mdt,hxe,gdt,hdt,udt,uxe,e7,pxe,pdt,_dt,ese,vdt,bdt,Fdt,o7,nto,zf,r7,_xe,HR,Tdt,vxe,Mdt,sto,Er,JR,Edt,Qf,Cdt,ose,wdt,Adt,rse,Ldt,ydt,xdt,YR,$dt,bxe,kdt,Sdt,Rdt,ia,ZR,Pdt,Fxe,Bdt,Idt,Wf,Ndt,Txe,qdt,jdt,tse,Ddt,Gdt,Odt,t7,Vdt,Kr,KR,Xdt,Mxe,zdt,Qdt,zn,Wdt,Exe,Udt,Hdt,Cxe,Jdt,Ydt,wxe,Zdt,Kdt,ect,eP,a7,Axe,oct,rct,ase,tct,act,nct,n7,Lxe,sct,lct,nse,ict,dct,cct,s7,lto,Uf,l7,yxe,oP,fct,xxe,mct,ito,Cr,rP,gct,Hf,hct,sse,uct,pct,lse,_ct,vct,bct,tP,Fct,$xe,Tct,Mct,Ect,da,aP,Cct,kxe,wct,Act,Jf,Lct,Sxe,yct,xct,ise,$ct,kct,Sct,i7,Rct,et,nP,Pct,Rxe,Bct,Ict,Qn,Nct,Pxe,qct,jct,Bxe,Dct,Gct,Ixe,Oct,Vct,Xct,te,d7,Nxe,zct,Qct,dse,Wct,Uct,Hct,c7,qxe,Jct,Yct,cse,Zct,Kct,eft,f7,jxe,oft,rft,fse,tft,aft,nft,m7,Dxe,sft,lft,mse,ift,dft,cft,g7,Gxe,fft,mft,gse,gft,hft,uft,h7,Oxe,pft,_ft,hse,vft,bft,Fft,u7,Vxe,Tft,Mft,use,Eft,Cft,wft,p7,Xxe,Aft,Lft,pse,yft,xft,$ft,_7,zxe,kft,Sft,_se,Rft,Pft,Bft,v7,Qxe,Ift,Nft,vse,qft,jft,Dft,b7,Wxe,Gft,Oft,bse,Vft,Xft,zft,F7,Uxe,Qft,Wft,Fse,Uft,Hft,Jft,T7,Hxe,Yft,Zft,Tse,Kft,emt,omt,M7,Jxe,rmt,tmt,Mse,amt,nmt,smt,E7,Yxe,lmt,imt,Ese,dmt,cmt,fmt,C7,Zxe,mmt,gmt,Cse,hmt,umt,pmt,w7,Kxe,_mt,vmt,wse,bmt,Fmt,Tmt,A7,e$e,Mmt,Emt,Ase,Cmt,wmt,Amt,L7,o$e,Lmt,ymt,Lse,xmt,$mt,kmt,y7,r$e,Smt,Rmt,yse,Pmt,Bmt,Imt,x7,t$e,Nmt,qmt,xse,jmt,Dmt,Gmt,$7,a$e,Omt,Vmt,$se,Xmt,zmt,Qmt,k7,n$e,Wmt,Umt,kse,Hmt,Jmt,Ymt,S7,s$e,Zmt,Kmt,Sse,egt,ogt,rgt,R7,l$e,tgt,agt,Rse,ngt,sgt,lgt,P7,i$e,igt,dgt,Pse,cgt,fgt,mgt,B7,d$e,ggt,hgt,Bse,ugt,pgt,_gt,I7,dto,Yf,N7,c$e,sP,vgt,f$e,bgt,cto,wr,lP,Fgt,Zf,Tgt,Ise,Mgt,Egt,Nse,Cgt,wgt,Agt,iP,Lgt,m$e,ygt,xgt,$gt,ca,dP,kgt,g$e,Sgt,Rgt,Kf,Pgt,h$e,Bgt,Igt,qse,Ngt,qgt,jgt,q7,Dgt,ot,cP,Ggt,u$e,Ogt,Vgt,Wn,Xgt,p$e,zgt,Qgt,_$e,Wgt,Ugt,v$e,Hgt,Jgt,Ygt,xe,j7,b$e,Zgt,Kgt,jse,eht,oht,rht,D7,F$e,tht,aht,Dse,nht,sht,lht,G7,T$e,iht,dht,Gse,cht,fht,mht,O7,M$e,ght,hht,Ose,uht,pht,_ht,V7,E$e,vht,bht,Vse,Fht,Tht,Mht,X7,C$e,Eht,Cht,Xse,wht,Aht,Lht,z7,w$e,yht,xht,zse,$ht,kht,Sht,Q7,A$e,Rht,Pht,Qse,Bht,Iht,Nht,W7,L$e,qht,jht,Wse,Dht,Ght,Oht,U7,y$e,Vht,Xht,Use,zht,Qht,Wht,H7,fto,em,J7,x$e,fP,Uht,$$e,Hht,mto,Ar,mP,Jht,om,Yht,Hse,Zht,Kht,Jse,eut,out,rut,gP,tut,k$e,aut,nut,sut,fa,hP,lut,S$e,iut,dut,rm,cut,R$e,fut,mut,Yse,gut,hut,uut,Y7,put,rt,uP,_ut,P$e,vut,but,Un,Fut,B$e,Tut,Mut,I$e,Eut,Cut,N$e,wut,Aut,Lut,Ee,Z7,q$e,yut,xut,Zse,$ut,kut,Sut,K7,j$e,Rut,Put,Kse,But,Iut,Nut,eL,D$e,qut,jut,ele,Dut,Gut,Out,oL,G$e,Vut,Xut,ole,zut,Qut,Wut,rL,O$e,Uut,Hut,rle,Jut,Yut,Zut,tL,V$e,Kut,ept,tle,opt,rpt,tpt,aL,X$e,apt,npt,ale,spt,lpt,ipt,nL,z$e,dpt,cpt,nle,fpt,mpt,gpt,sL,Q$e,hpt,upt,sle,ppt,_pt,vpt,lL,W$e,bpt,Fpt,lle,Tpt,Mpt,Ept,iL,U$e,Cpt,wpt,ile,Apt,Lpt,ypt,dL,H$e,xpt,$pt,dle,kpt,Spt,Rpt,cL,J$e,Ppt,Bpt,cle,Ipt,Npt,qpt,fL,gto,tm,mL,Y$e,pP,jpt,Z$e,Dpt,hto,Lr,_P,Gpt,am,Opt,fle,Vpt,Xpt,mle,zpt,Qpt,Wpt,vP,Upt,K$e,Hpt,Jpt,Ypt,ma,bP,Zpt,eke,Kpt,e_t,nm,o_t,oke,r_t,t_t,gle,a_t,n_t,s_t,gL,l_t,tt,FP,i_t,rke,d_t,c_t,Hn,f_t,tke,m_t,g_t,ake,h_t,u_t,nke,p_t,__t,v_t,$e,hL,ske,b_t,F_t,hle,T_t,M_t,E_t,uL,lke,C_t,w_t,ule,A_t,L_t,y_t,pL,ike,x_t,$_t,ple,k_t,S_t,R_t,_L,dke,P_t,B_t,_le,I_t,N_t,q_t,vL,cke,j_t,D_t,vle,G_t,O_t,V_t,bL,fke,X_t,z_t,ble,Q_t,W_t,U_t,FL,mke,H_t,J_t,Fle,Y_t,Z_t,K_t,TL,gke,e2t,o2t,Tle,r2t,t2t,a2t,ML,hke,n2t,s2t,Mle,l2t,i2t,d2t,EL,uke,c2t,f2t,Ele,m2t,g2t,h2t,CL,uto,sm,wL,pke,TP,u2t,_ke,p2t,pto,yr,MP,_2t,lm,v2t,Cle,b2t,F2t,wle,T2t,M2t,E2t,EP,C2t,vke,w2t,A2t,L2t,ga,CP,y2t,bke,x2t,$2t,im,k2t,Fke,S2t,R2t,Ale,P2t,B2t,I2t,AL,N2t,at,wP,q2t,Tke,j2t,D2t,Jn,G2t,Mke,O2t,V2t,Eke,X2t,z2t,Cke,Q2t,W2t,U2t,ke,LL,wke,H2t,J2t,Lle,Y2t,Z2t,K2t,yL,Ake,evt,ovt,yle,rvt,tvt,avt,xL,Lke,nvt,svt,xle,lvt,ivt,dvt,$L,yke,cvt,fvt,$le,mvt,gvt,hvt,kL,xke,uvt,pvt,kle,_vt,vvt,bvt,SL,$ke,Fvt,Tvt,Sle,Mvt,Evt,Cvt,RL,kke,wvt,Avt,Rle,Lvt,yvt,xvt,PL,Ske,$vt,kvt,Ple,Svt,Rvt,Pvt,BL,Rke,Bvt,Ivt,Ble,Nvt,qvt,jvt,IL,Pke,Dvt,Gvt,Ile,Ovt,Vvt,Xvt,NL,_to,dm,qL,Bke,AP,zvt,Ike,Qvt,vto,xr,LP,Wvt,cm,Uvt,Nle,Hvt,Jvt,qle,Yvt,Zvt,Kvt,yP,e4t,Nke,o4t,r4t,t4t,ha,xP,a4t,qke,n4t,s4t,fm,l4t,jke,i4t,d4t,jle,c4t,f4t,m4t,jL,g4t,nt,$P,h4t,Dke,u4t,p4t,Yn,_4t,Gke,v4t,b4t,Oke,F4t,T4t,Vke,M4t,E4t,C4t,Se,DL,Xke,w4t,A4t,Dle,L4t,y4t,x4t,GL,zke,$4t,k4t,Gle,S4t,R4t,P4t,OL,Qke,B4t,I4t,Ole,N4t,q4t,j4t,VL,Wke,D4t,G4t,Vle,O4t,V4t,X4t,XL,Uke,z4t,Q4t,Xle,W4t,U4t,H4t,zL,Hke,J4t,Y4t,zle,Z4t,K4t,e1t,QL,Jke,o1t,r1t,Qle,t1t,a1t,n1t,WL,Yke,s1t,l1t,Wle,i1t,d1t,c1t,UL,Zke,f1t,m1t,Ule,g1t,h1t,u1t,HL,Kke,p1t,_1t,Hle,v1t,b1t,F1t,JL,bto,mm,YL,eSe,kP,T1t,oSe,M1t,Fto,$r,SP,E1t,gm,C1t,Jle,w1t,A1t,Yle,L1t,y1t,x1t,RP,$1t,rSe,k1t,S1t,R1t,ua,PP,P1t,tSe,B1t,I1t,hm,N1t,aSe,q1t,j1t,Zle,D1t,G1t,O1t,ZL,V1t,st,BP,X1t,nSe,z1t,Q1t,Zn,W1t,sSe,U1t,H1t,lSe,J1t,Y1t,iSe,Z1t,K1t,ebt,Re,KL,dSe,obt,rbt,Kle,tbt,abt,nbt,e8,cSe,sbt,lbt,eie,ibt,dbt,cbt,o8,fSe,fbt,mbt,oie,gbt,hbt,ubt,r8,mSe,pbt,_bt,rie,vbt,bbt,Fbt,t8,gSe,Tbt,Mbt,tie,Ebt,Cbt,wbt,a8,hSe,Abt,Lbt,aie,ybt,xbt,$bt,n8,uSe,kbt,Sbt,nie,Rbt,Pbt,Bbt,s8,pSe,Ibt,Nbt,sie,qbt,jbt,Dbt,l8,_Se,Gbt,Obt,lie,Vbt,Xbt,zbt,i8,vSe,Qbt,Wbt,iie,Ubt,Hbt,Jbt,d8,Tto,um,c8,bSe,IP,Ybt,FSe,Zbt,Mto,kr,NP,Kbt,pm,e3t,die,o3t,r3t,cie,t3t,a3t,n3t,qP,s3t,TSe,l3t,i3t,d3t,pa,jP,c3t,MSe,f3t,m3t,_m,g3t,ESe,h3t,u3t,fie,p3t,_3t,v3t,f8,b3t,lt,DP,F3t,CSe,T3t,M3t,Kn,E3t,wSe,C3t,w3t,ASe,A3t,L3t,LSe,y3t,x3t,$3t,Xe,m8,ySe,k3t,S3t,mie,R3t,P3t,B3t,g8,xSe,I3t,N3t,gie,q3t,j3t,D3t,h8,$Se,G3t,O3t,hie,V3t,X3t,z3t,u8,kSe,Q3t,W3t,uie,U3t,H3t,J3t,p8,SSe,Y3t,Z3t,pie,K3t,e0t,o0t,_8,RSe,r0t,t0t,_ie,a0t,n0t,s0t,v8,PSe,l0t,i0t,vie,d0t,c0t,f0t,b8,BSe,m0t,g0t,bie,h0t,u0t,p0t,F8,Eto,vm,T8,ISe,GP,_0t,NSe,v0t,Cto,Sr,OP,b0t,bm,F0t,Fie,T0t,M0t,Tie,E0t,C0t,w0t,VP,A0t,qSe,L0t,y0t,x0t,_a,XP,$0t,jSe,k0t,S0t,Fm,R0t,DSe,P0t,B0t,Mie,I0t,N0t,q0t,M8,j0t,it,zP,D0t,GSe,G0t,O0t,es,V0t,OSe,X0t,z0t,VSe,Q0t,W0t,XSe,U0t,H0t,J0t,ze,E8,zSe,Y0t,Z0t,Eie,K0t,eFt,oFt,C8,QSe,rFt,tFt,Cie,aFt,nFt,sFt,w8,WSe,lFt,iFt,wie,dFt,cFt,fFt,A8,USe,mFt,gFt,Aie,hFt,uFt,pFt,L8,HSe,_Ft,vFt,Lie,bFt,FFt,TFt,y8,JSe,MFt,EFt,yie,CFt,wFt,AFt,x8,YSe,LFt,yFt,xie,xFt,$Ft,kFt,$8,ZSe,SFt,RFt,$ie,PFt,BFt,IFt,k8,wto,Tm,S8,KSe,QP,NFt,eRe,qFt,Ato,Rr,WP,jFt,Mm,DFt,kie,GFt,OFt,Sie,VFt,XFt,zFt,UP,QFt,oRe,WFt,UFt,HFt,va,HP,JFt,rRe,YFt,ZFt,Em,KFt,tRe,eTt,oTt,Rie,rTt,tTt,aTt,R8,nTt,dt,JP,sTt,aRe,lTt,iTt,os,dTt,nRe,cTt,fTt,sRe,mTt,gTt,lRe,hTt,uTt,pTt,iRe,P8,dRe,_Tt,vTt,Pie,bTt,FTt,TTt,B8,Lto,Cm,I8,cRe,YP,MTt,fRe,ETt,yto,Pr,ZP,CTt,wm,wTt,Bie,ATt,LTt,Iie,yTt,xTt,$Tt,KP,kTt,mRe,STt,RTt,PTt,ba,eB,BTt,gRe,ITt,NTt,Am,qTt,hRe,jTt,DTt,Nie,GTt,OTt,VTt,N8,XTt,ct,oB,zTt,uRe,QTt,WTt,rs,UTt,pRe,HTt,JTt,_Re,YTt,ZTt,vRe,KTt,eMt,oMt,rB,q8,bRe,rMt,tMt,qie,aMt,nMt,sMt,j8,FRe,lMt,iMt,jie,dMt,cMt,fMt,D8,xto,Lm,G8,TRe,tB,mMt,MRe,gMt,$to,Br,aB,hMt,ym,uMt,Die,pMt,_Mt,Gie,vMt,bMt,FMt,nB,TMt,ERe,MMt,EMt,CMt,Fa,sB,wMt,CRe,AMt,LMt,xm,yMt,wRe,xMt,$Mt,Oie,kMt,SMt,RMt,O8,PMt,ft,lB,BMt,ARe,IMt,NMt,ts,qMt,LRe,jMt,DMt,yRe,GMt,OMt,xRe,VMt,XMt,zMt,$Re,V8,kRe,QMt,WMt,Vie,UMt,HMt,JMt,X8,kto;return d=new oe({}),Ja=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),yx=new oe({}),xx=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),qm=new YMt({props:{warning:!0,$$slots:{default:[qba]},$$scope:{ctx:$}}}),$x=new oe({}),kx=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/configuration_auto.py#L659"}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/configuration_auto.py#L682"}}),fu=new I({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[jba]},$$scope:{ctx:$}}}),Bx=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/configuration_auto.py#L805"}}),Ix=new oe({}),Nx=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/tokenization_auto.py#L428"}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/v4.23.0/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/tokenization_auto.py#L442"}}),Hu=new I({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Dba]},$$scope:{ctx:$}}}),Gx=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/tokenization_auto.py#L643"}}),Ox=new oe({}),Vx=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/feature_extraction_auto.py#L203"}}),Qx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/v4.23.0/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/feature_extraction_auto.py#L217"}}),Gp=new YMt({props:{$$slots:{default:[Gba]},$$scope:{ctx:$}}}),Op=new I({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Oba]},$$scope:{ctx:$}}}),Wx=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/feature_extraction_auto.py#L344"}}),Ux=new oe({}),Hx=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/processing_auto.py#L96"}}),Zx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/processing_auto.py#L110"}}),h_=new YMt({props:{$$slots:{default:[Vba]},$$scope:{ctx:$}}}),u_=new I({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[Xba]},$$scope:{ctx:$}}}),Kx=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/processing_auto.py#L277"}}),e$=new oe({}),o$=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_auto.py#L874"}}),t$=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig">ConditionalDetrConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/conditional_detr#transformers.ConditionalDetrModel">ConditionalDetrModel</a> (Conditional DETR model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/deformable_detr#transformers.DeformableDetrConfig">DeformableDetrConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/deformable_detr#transformers.DeformableDetrModel">DeformableDetrModel</a> (Deformable DETR model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/donut#transformers.DonutSwinConfig">DonutSwinConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/donut#transformers.DonutSwinModel">DonutSwinModel</a> (DonutSwin model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/ernie#transformers.ErnieModel">ErnieModel</a> (ERNIE model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/esm#transformers.EsmConfig">EsmConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/esm#transformers.EsmModel">EsmModel</a> (ESM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig">GPTNeoXJapaneseConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseModel">GPTNeoXJapaneseModel</a> (GPT NeoX Japanese model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/markuplm#transformers.MarkupLMConfig">MarkupLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/markuplm#transformers.MarkupLMModel">MarkupLMModel</a> (MarkupLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/pegasus_x#transformers.PegasusXConfig">PegasusXConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/pegasus_x#transformers.PegasusXModel">PegasusXModel</a> (PEGASUS-X model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/time_series_transformer#transformers.TimeSeriesTransformerConfig">TimeSeriesTransformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/time_series_transformer#transformers.TimeSeriesTransformerModel">TimeSeriesTransformerModel</a> (Time Series Transformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/vit_msn#transformers.ViTMSNConfig">ViTMSNConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/vit_msn#transformers.ViTMSNModel">ViTMSNModel</a> (ViTMSN model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/videomae#transformers.VideoMAEModel">VideoMAEModel</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/whisper#transformers.WhisperConfig">WhisperConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/whisper#transformers.WhisperModel">WhisperModel</a> (Whisper model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xclip#transformers.XCLIPConfig">XCLIPConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xclip#transformers.XCLIPModel">XCLIPModel</a> (X-CLIP model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),v_=new I({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[zba]},$$scope:{ctx:$}}}),a$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),qv=new I({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[Qba]},$$scope:{ctx:$}}}),n$=new oe({}),s$=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_auto.py#L881"}}),i$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/ernie#transformers.ErnieForPreTraining">ErnieForPreTraining</a> (ERNIE model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/videomae#transformers.VideoMAEForPreTraining">VideoMAEForPreTraining</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),Dv=new I({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Wba]},$$scope:{ctx:$}}}),d$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),I4=new I({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Uba]},$$scope:{ctx:$}}}),c$=new oe({}),f$=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_auto.py#L896"}}),g$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/ernie#transformers.ErnieForCausalLM">ErnieForCausalLM</a> (ERNIE model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig">GPTNeoXJapaneseConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseForCausalLM">GPTNeoXJapaneseForCausalLM</a> (GPT NeoX Japanese model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),q4=new I({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Hba]},$$scope:{ctx:$}}}),h$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),y1=new I({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Jba]},$$scope:{ctx:$}}}),u$=new oe({}),p$=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_auto.py#L903"}}),v$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/ernie#transformers.ErnieForMaskedLM">ErnieForMaskedLM</a> (ERNIE model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),$1=new I({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Yba]},$$scope:{ctx:$}}}),b$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),_b=new I({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Zba]},$$scope:{ctx:$}}}),F$=new oe({}),T$=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_auto.py#L910"}}),E$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/pegasus_x#transformers.PegasusXConfig">PegasusXConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/pegasus_x#transformers.PegasusXForConditionalGeneration">PegasusXForConditionalGeneration</a> (PEGASUS-X model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),bb=new I({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Kba]},$$scope:{ctx:$}}}),C$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),Gb=new I({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[e3a]},$$scope:{ctx:$}}}),w$=new oe({}),A$=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_auto.py#L919"}}),y$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/ernie#transformers.ErnieForSequenceClassification">ErnieForSequenceClassification</a> (ERNIE model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/esm#transformers.EsmConfig">EsmConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/esm#transformers.EsmForSequenceClassification">EsmForSequenceClassification</a> (ESM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/luke#transformers.LukeForSequenceClassification">LukeForSequenceClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/markuplm#transformers.MarkupLMConfig">MarkupLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/markuplm#transformers.MarkupLMForSequenceClassification">MarkupLMForSequenceClassification</a> (MarkupLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),Vb=new I({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[o3a]},$$scope:{ctx:$}}}),x$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),Q3=new I({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[r3a]},$$scope:{ctx:$}}}),$$=new oe({}),k$=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_auto.py#L975"}}),R$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/ernie#transformers.ErnieForMultipleChoice">ErnieForMultipleChoice</a> (ERNIE model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/luke#transformers.LukeForMultipleChoice">LukeForMultipleChoice</a> (LUKE model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),U3=new I({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[t3a]},$$scope:{ctx:$}}}),P$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),y0=new I({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[a3a]},$$scope:{ctx:$}}}),B$=new oe({}),I$=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_auto.py#L982"}}),q$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/ernie#transformers.ErnieForNextSentencePrediction">ErnieForNextSentencePrediction</a> (ERNIE model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),$0=new I({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[n3a]},$$scope:{ctx:$}}}),j$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),j0=new I({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[s3a]},$$scope:{ctx:$}}}),D$=new oe({}),G$=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_auto.py#L968"}}),V$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/ernie#transformers.ErnieForTokenClassification">ErnieForTokenClassification</a> (ERNIE model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/esm#transformers.EsmConfig">EsmConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/esm#transformers.EsmForTokenClassification">EsmForTokenClassification</a> (ESM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/luke#transformers.LukeForTokenClassification">LukeForTokenClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/markuplm#transformers.MarkupLMConfig">MarkupLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/markuplm#transformers.MarkupLMForTokenClassification">MarkupLMForTokenClassification</a> (MarkupLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),G0=new I({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[l3a]},$$scope:{ctx:$}}}),X$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),xF=new I({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[i3a]},$$scope:{ctx:$}}}),z$=new oe({}),Q$=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_auto.py#L928"}}),U$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bloom#transformers.BloomForQuestionAnswering">BloomForQuestionAnswering</a> (BLOOM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/ernie#transformers.ErnieForQuestionAnswering">ErnieForQuestionAnswering</a> (ERNIE model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/luke#transformers.LukeForQuestionAnswering">LukeForQuestionAnswering</a> (LUKE model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/markuplm#transformers.MarkupLMConfig">MarkupLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/markuplm#transformers.MarkupLMForQuestionAnswering">MarkupLMForQuestionAnswering</a> (MarkupLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/opt#transformers.OPTForQuestionAnswering">OPTForQuestionAnswering</a> (OPT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),kF=new I({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[d3a]},$$scope:{ctx:$}}}),H$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),AT=new I({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[c3a]},$$scope:{ctx:$}}}),J$=new oe({}),Y$=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_auto.py#L935"}}),K$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),yT=new I({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[f3a]},$$scope:{ctx:$}}}),ek=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),kT=new I({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[m3a]},$$scope:{ctx:$}}}),ok=new oe({}),rk=new R({props:{name:"class transformers.AutoModelForDocumentQuestionAnswering",anchor:"transformers.AutoModelForDocumentQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_auto.py#L957"}}),ak=new R({props:{name:"from_config",anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.LayoutLMForQuestionAnswering">LayoutLMForQuestionAnswering</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),RT=new I({props:{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config.example",$$slots:{default:[g3a]},$$scope:{ctx:$}}}),nk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),qT=new I({props:{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.example",$$slots:{default:[h3a]},$$scope:{ctx:$}}}),sk=new oe({}),lk=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_auto.py#L991"}}),dk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/v4.23.0/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/v4.23.0/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/v4.23.0/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/v4.23.0/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/vit_msn#transformers.ViTMSNConfig">ViTMSNConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/vit_msn#transformers.ViTMSNForImageClassification">ViTMSNForImageClassification</a> (ViTMSN model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),DT=new I({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[u3a]},$$scope:{ctx:$}}}),ck=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),tM=new I({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[p3a]},$$scope:{ctx:$}}}),fk=new oe({}),mk=new R({props:{name:"class transformers.AutoModelForVideoClassification",anchor:"transformers.AutoModelForVideoClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_auto.py#L1039"}}),hk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVideoClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/videomae#transformers.VideoMAEForVideoClassification">VideoMAEForVideoClassification</a> (VideoMAE model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),nM=new I({props:{anchor:"transformers.AutoModelForVideoClassification.from_config.example",$$slots:{default:[_3a]},$$scope:{ctx:$}}}),uk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVideoClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),iM=new I({props:{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.example",$$slots:{default:[v3a]},$$scope:{ctx:$}}}),pk=new oe({}),_k=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_auto.py#L1046"}}),bk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),cM=new I({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[b3a]},$$scope:{ctx:$}}}),Fk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),gM=new I({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[F3a]},$$scope:{ctx:$}}}),Tk=new oe({}),Mk=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_auto.py#L946"}}),Ck=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),uM=new I({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[T3a]},$$scope:{ctx:$}}}),wk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),vM=new I({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[M3a]},$$scope:{ctx:$}}}),Ak=new oe({}),Lk=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_auto.py#L1053"}}),xk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),FM=new I({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[E3a]},$$scope:{ctx:$}}}),$k=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),kM=new I({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[C3a]},$$scope:{ctx:$}}}),kk=new oe({}),Sk=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_auto.py#L1076"}}),Pk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),RM=new I({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[w3a]},$$scope:{ctx:$}}}),Bk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),DM=new I({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[A3a]},$$scope:{ctx:$}}}),Ik=new oe({}),Nk=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_auto.py#L1060"}}),jk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),OM=new I({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[L3a]},$$scope:{ctx:$}}}),Dk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),eE=new I({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[y3a]},$$scope:{ctx:$}}}),Gk=new oe({}),Ok=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_auto.py#L1067"}}),Xk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/whisper#transformers.WhisperConfig">WhisperConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/whisper#transformers.WhisperForConditionalGeneration">WhisperForConditionalGeneration</a> (Whisper model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),rE=new I({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[x3a]},$$scope:{ctx:$}}}),zk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),lE=new I({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[$3a]},$$scope:{ctx:$}}}),Qk=new oe({}),Wk=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_auto.py#L1085"}}),Hk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),dE=new I({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[k3a]},$$scope:{ctx:$}}}),Jk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),pE=new I({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[S3a]},$$scope:{ctx:$}}}),Yk=new oe({}),Zk=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_auto.py#L1092"}}),eS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),vE=new I({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[R3a]},$$scope:{ctx:$}}}),oS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),CE=new I({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[P3a]},$$scope:{ctx:$}}}),rS=new oe({}),tS=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_auto.py#L1023"}}),nS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig">ConditionalDetrConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/conditional_detr#transformers.ConditionalDetrForObjectDetection">ConditionalDetrForObjectDetection</a> (Conditional DETR model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/deformable_detr#transformers.DeformableDetrConfig">DeformableDetrConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/deformable_detr#transformers.DeformableDetrForObjectDetection">DeformableDetrForObjectDetection</a> (Deformable DETR model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),AE=new I({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[B3a]},$$scope:{ctx:$}}}),sS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),SE=new I({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[I3a]},$$scope:{ctx:$}}}),lS=new oe({}),iS=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_auto.py#L998"}}),cS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),PE=new I({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[N3a]},$$scope:{ctx:$}}}),fS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),NE=new I({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[q3a]},$$scope:{ctx:$}}}),mS=new oe({}),gS=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_auto.py#L1005"}}),uS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),jE=new I({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[j3a]},$$scope:{ctx:$}}}),pS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),QE=new I({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[D3a]},$$scope:{ctx:$}}}),_S=new oe({}),vS=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_auto.py#L1014"}}),FS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),UE=new I({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[G3a]},$$scope:{ctx:$}}}),TS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),YE=new I({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[O3a]},$$scope:{ctx:$}}}),MS=new oe({}),ES=new R({props:{name:"class transformers.AutoModelForZeroShotObjectDetection",anchor:"transformers.AutoModelForZeroShotObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_auto.py#L1030"}}),wS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForZeroShotObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/owlvit#transformers.OwlViTForObjectDetection">OwlViTForObjectDetection</a> (OWL-ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),KE=new I({props:{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_config.example",$$slots:{default:[V3a]},$$scope:{ctx:$}}}),AS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),rC=new I({props:{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.example",$$slots:{default:[X3a]},$$scope:{ctx:$}}}),LS=new oe({}),yS=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_tf_auto.py#L437"}}),$S=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/groupvit#transformers.TFGroupViTModel">TFGroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model">TFLayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mobilevit#transformers.TFMobileViTModel">TFMobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/whisper#transformers.WhisperConfig">WhisperConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/whisper#transformers.TFWhisperModel">TFWhisperModel</a> (Whisper model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xglm#transformers.TFXGLMModel">TFXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),aC=new I({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[z3a]},$$scope:{ctx:$}}}),kS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),s5=new I({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Q3a]},$$scope:{ctx:$}}}),SS=new oe({}),RS=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),BS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),i5=new I({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[W3a]},$$scope:{ctx:$}}}),IS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),S5=new I({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[U3a]},$$scope:{ctx:$}}}),NS=new oe({}),qS=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_tf_auto.py#L459"}}),DS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xglm#transformers.TFXGLMForCausalLM">TFXGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),P5=new I({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[H3a]},$$scope:{ctx:$}}}),GS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),H5=new I({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[J3a]},$$scope:{ctx:$}}}),OS=new oe({}),VS=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_tf_auto.py#L475"}}),zS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/v4.23.0/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification">TFMobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),Y5=new I({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[Y3a]},$$scope:{ctx:$}}}),QS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),sw=new I({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Z3a]},$$scope:{ctx:$}}}),WS=new oe({}),US=new R({props:{name:"class transformers.TFAutoModelForSemanticSegmentation",anchor:"transformers.TFAutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_tf_auto.py#L484"}}),JS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation">TFData2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation">TFMobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation">TFSegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),iw=new I({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[K3a]},$$scope:{ctx:$}}}),YS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),mw=new I({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[e0a]},$$scope:{ctx:$}}}),ZS=new oe({}),KS=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),oR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),hw=new I({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[o0a]},$$scope:{ctx:$}}}),rR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),Bw=new I({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[r0a]},$$scope:{ctx:$}}}),tR=new oe({}),aR=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),sR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),Nw=new I({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[t0a]},$$scope:{ctx:$}}}),lR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),Uw=new I({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[a0a]},$$scope:{ctx:$}}}),iR=new oe({}),dR=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),fR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification">TFLayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),Jw=new I({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[n0a]},$$scope:{ctx:$}}}),mR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),CA=new I({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[s0a]},$$scope:{ctx:$}}}),gR=new oe({}),hR=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_tf_auto.py#L563"}}),pR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),AA=new I({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[l0a]},$$scope:{ctx:$}}}),_R=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),XA=new I({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[i0a]},$$scope:{ctx:$}}}),vR=new oe({}),bR=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_tf_auto.py#L570"}}),TR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),QA=new I({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[d0a]},$$scope:{ctx:$}}}),MR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),HA=new I({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[c0a]},$$scope:{ctx:$}}}),CR=new oe({}),wR=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_tf_auto.py#L543"}}),LR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),YA=new I({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[f0a]},$$scope:{ctx:$}}}),yR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),KA=new I({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[m0a]},$$scope:{ctx:$}}}),xR=new oe({}),$R=new R({props:{name:"class transformers.TFAutoModelForDocumentQuestionAnswering",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_tf_auto.py#L532"}}),SR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.TFLayoutLMForQuestionAnswering">TFLayoutLMForQuestionAnswering</a> (LayoutLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),o6=new I({props:{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config.example",$$slots:{default:[g0a]},$$scope:{ctx:$}}}),RR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),t6=new I({props:{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.example",$$slots:{default:[h0a]},$$scope:{ctx:$}}}),PR=new oe({}),BR=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_tf_auto.py#L554"}}),NR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification">TFLayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),n6=new I({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[u0a]},$$scope:{ctx:$}}}),qR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),L6=new I({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[p0a]},$$scope:{ctx:$}}}),jR=new oe({}),DR=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_tf_auto.py#L525"}}),OR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering">TFLayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),x6=new I({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[_0a]},$$scope:{ctx:$}}}),VR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),Y6=new I({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[v0a]},$$scope:{ctx:$}}}),XR=new oe({}),zR=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_tf_auto.py#L493"}}),WR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),K6=new I({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[b0a]},$$scope:{ctx:$}}}),UR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),o7=new I({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[F0a]},$$scope:{ctx:$}}}),HR=new oe({}),JR=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_tf_auto.py#L579"}}),ZR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/whisper#transformers.WhisperConfig">WhisperConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/whisper#transformers.TFWhisperForConditionalGeneration">TFWhisperForConditionalGeneration</a> (Whisper model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),t7=new I({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[T0a]},$$scope:{ctx:$}}}),KR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),s7=new I({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[M0a]},$$scope:{ctx:$}}}),oP=new oe({}),rP=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),aP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),i7=new I({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[E0a]},$$scope:{ctx:$}}}),nP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),I7=new I({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[C0a]},$$scope:{ctx:$}}}),sP=new oe({}),lP=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),dP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),q7=new I({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[w0a]},$$scope:{ctx:$}}}),cP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),H7=new I({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[A0a]},$$scope:{ctx:$}}}),fP=new oe({}),mP=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),hP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),Y7=new I({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[L0a]},$$scope:{ctx:$}}}),uP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),fL=new I({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[y0a]},$$scope:{ctx:$}}}),pP=new oe({}),_P=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),bP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),gL=new I({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[x0a]},$$scope:{ctx:$}}}),FP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),CL=new I({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[$0a]},$$scope:{ctx:$}}}),TP=new oe({}),MP=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),CP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),AL=new I({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[k0a]},$$scope:{ctx:$}}}),wP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),NL=new I({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[S0a]},$$scope:{ctx:$}}}),AP=new oe({}),LP=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),xP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),jL=new I({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[R0a]},$$scope:{ctx:$}}}),$P=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),JL=new I({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[P0a]},$$scope:{ctx:$}}}),kP=new oe({}),SP=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),PP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),ZL=new I({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[B0a]},$$scope:{ctx:$}}}),BP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),d8=new I({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[I0a]},$$scope:{ctx:$}}}),IP=new oe({}),NP=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),jP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),f8=new I({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[N0a]},$$scope:{ctx:$}}}),DP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),F8=new I({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[q0a]},$$scope:{ctx:$}}}),GP=new oe({}),OP=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),XP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),M8=new I({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[j0a]},$$scope:{ctx:$}}}),zP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),k8=new I({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[D0a]},$$scope:{ctx:$}}}),QP=new oe({}),WP=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),HP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),R8=new I({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[G0a]},$$scope:{ctx:$}}}),JP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),B8=new I({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[O0a]},$$scope:{ctx:$}}}),YP=new oe({}),ZP=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),eB=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),N8=new I({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[V0a]},$$scope:{ctx:$}}}),oB=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),D8=new I({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[X0a]},$$scope:{ctx:$}}}),tB=new oe({}),aB=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),sB=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.23.0/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/v4.23.0/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L389"}}),O8=new I({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[z0a]},$$scope:{ctx:$}}}),lB=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.23.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.23.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.23.0/src/transformers/models/auto/auto_factory.py#L417"}}),X8=new I({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Q0a]},$$scope:{ctx:$}}}),{c(){g=a("meta"),b=l(),u=a("h1"),m=a("a"),p=a("span"),F(d.$$.fragment),h=l(),xo=a("span"),dd=o("Auto Classes"),Rm=l(),vt=a("p"),cd=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),fd=a("code"),Cx=o("from_pretrained()"),Pm=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ve=l(),He=a("p"),md=o("Instantiating one of "),ns=a("a"),wx=o("AutoConfig"),ss=o(", "),ls=a("a"),Ax=o("AutoModel"),gd=o(`, and
`),is=a("a"),Lx=o("AutoTokenizer"),hd=o(" will directly create a class of the relevant architecture. For instance"),Bm=l(),F(Ja.$$.fragment),Je=l(),Ae=a("p"),RI=o("will create a model that is an instance of "),ud=a("a"),PI=o("BertModel"),BI=o("."),$o=l(),Ya=a("p"),II=o("There is one class of "),Im=a("code"),NI=o("AutoModel"),Jno=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),poo=l(),pd=a("h2"),Nm=a("a"),Jce=a("span"),F(yx.$$.fragment),Yno=l(),Yce=a("span"),Zno=o("Extending the Auto Classes"),_oo=l(),ds=a("p"),Kno=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Zce=a("code"),eso=o("NewModel"),oso=o(", make sure you have a "),Kce=a("code"),rso=o("NewModelConfig"),tso=o(` then you can add those to the auto
classes like this:`),voo=l(),F(xx.$$.fragment),boo=l(),qI=a("p"),aso=o("You will then be able to use the auto classes like you would usually do!"),Foo=l(),F(qm.$$.fragment),Too=l(),_d=a("h2"),jm=a("a"),efe=a("span"),F($x.$$.fragment),nso=l(),ofe=a("span"),sso=o("AutoConfig"),Moo=l(),ko=a("div"),F(kx.$$.fragment),lso=l(),Sx=a("p"),iso=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),jI=a("a"),dso=o("from_pretrained()"),cso=o(" class method."),fso=l(),Rx=a("p"),mso=o("This class cannot be instantiated directly using "),rfe=a("code"),gso=o("__init__()"),hso=o(" (throws an error)."),uso=l(),Ir=a("div"),F(Px.$$.fragment),pso=l(),tfe=a("p"),_so=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),vso=l(),vd=a("p"),bso=o("The configuration class to instantiate is selected based on the "),afe=a("code"),Fso=o("model_type"),Tso=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),nfe=a("code"),Mso=o("pretrained_model_name_or_path"),Eso=o(":"),Cso=l(),A=a("ul"),Dm=a("li"),sfe=a("strong"),wso=o("albert"),Aso=o(" \u2014 "),DI=a("a"),Lso=o("AlbertConfig"),yso=o(" (ALBERT model)"),xso=l(),Gm=a("li"),lfe=a("strong"),$so=o("bart"),kso=o(" \u2014 "),GI=a("a"),Sso=o("BartConfig"),Rso=o(" (BART model)"),Pso=l(),Om=a("li"),ife=a("strong"),Bso=o("beit"),Iso=o(" \u2014 "),OI=a("a"),Nso=o("BeitConfig"),qso=o(" (BEiT model)"),jso=l(),Vm=a("li"),dfe=a("strong"),Dso=o("bert"),Gso=o(" \u2014 "),VI=a("a"),Oso=o("BertConfig"),Vso=o(" (BERT model)"),Xso=l(),Xm=a("li"),cfe=a("strong"),zso=o("bert-generation"),Qso=o(" \u2014 "),XI=a("a"),Wso=o("BertGenerationConfig"),Uso=o(" (Bert Generation model)"),Hso=l(),zm=a("li"),ffe=a("strong"),Jso=o("big_bird"),Yso=o(" \u2014 "),zI=a("a"),Zso=o("BigBirdConfig"),Kso=o(" (BigBird model)"),elo=l(),Qm=a("li"),mfe=a("strong"),olo=o("bigbird_pegasus"),rlo=o(" \u2014 "),QI=a("a"),tlo=o("BigBirdPegasusConfig"),alo=o(" (BigBird-Pegasus model)"),nlo=l(),Wm=a("li"),gfe=a("strong"),slo=o("blenderbot"),llo=o(" \u2014 "),WI=a("a"),ilo=o("BlenderbotConfig"),dlo=o(" (Blenderbot model)"),clo=l(),Um=a("li"),hfe=a("strong"),flo=o("blenderbot-small"),mlo=o(" \u2014 "),UI=a("a"),glo=o("BlenderbotSmallConfig"),hlo=o(" (BlenderbotSmall model)"),ulo=l(),Hm=a("li"),ufe=a("strong"),plo=o("bloom"),_lo=o(" \u2014 "),HI=a("a"),vlo=o("BloomConfig"),blo=o(" (BLOOM model)"),Flo=l(),Jm=a("li"),pfe=a("strong"),Tlo=o("camembert"),Mlo=o(" \u2014 "),JI=a("a"),Elo=o("CamembertConfig"),Clo=o(" (CamemBERT model)"),wlo=l(),Ym=a("li"),_fe=a("strong"),Alo=o("canine"),Llo=o(" \u2014 "),YI=a("a"),ylo=o("CanineConfig"),xlo=o(" (CANINE model)"),$lo=l(),Zm=a("li"),vfe=a("strong"),klo=o("clip"),Slo=o(" \u2014 "),ZI=a("a"),Rlo=o("CLIPConfig"),Plo=o(" (CLIP model)"),Blo=l(),Km=a("li"),bfe=a("strong"),Ilo=o("codegen"),Nlo=o(" \u2014 "),KI=a("a"),qlo=o("CodeGenConfig"),jlo=o(" (CodeGen model)"),Dlo=l(),eg=a("li"),Ffe=a("strong"),Glo=o("conditional_detr"),Olo=o(" \u2014 "),eN=a("a"),Vlo=o("ConditionalDetrConfig"),Xlo=o(" (Conditional DETR model)"),zlo=l(),og=a("li"),Tfe=a("strong"),Qlo=o("convbert"),Wlo=o(" \u2014 "),oN=a("a"),Ulo=o("ConvBertConfig"),Hlo=o(" (ConvBERT model)"),Jlo=l(),rg=a("li"),Mfe=a("strong"),Ylo=o("convnext"),Zlo=o(" \u2014 "),rN=a("a"),Klo=o("ConvNextConfig"),eio=o(" (ConvNeXT model)"),oio=l(),tg=a("li"),Efe=a("strong"),rio=o("ctrl"),tio=o(" \u2014 "),tN=a("a"),aio=o("CTRLConfig"),nio=o(" (CTRL model)"),sio=l(),ag=a("li"),Cfe=a("strong"),lio=o("cvt"),iio=o(" \u2014 "),aN=a("a"),dio=o("CvtConfig"),cio=o(" (CvT model)"),fio=l(),ng=a("li"),wfe=a("strong"),mio=o("data2vec-audio"),gio=o(" \u2014 "),nN=a("a"),hio=o("Data2VecAudioConfig"),uio=o(" (Data2VecAudio model)"),pio=l(),sg=a("li"),Afe=a("strong"),_io=o("data2vec-text"),vio=o(" \u2014 "),sN=a("a"),bio=o("Data2VecTextConfig"),Fio=o(" (Data2VecText model)"),Tio=l(),lg=a("li"),Lfe=a("strong"),Mio=o("data2vec-vision"),Eio=o(" \u2014 "),lN=a("a"),Cio=o("Data2VecVisionConfig"),wio=o(" (Data2VecVision model)"),Aio=l(),ig=a("li"),yfe=a("strong"),Lio=o("deberta"),yio=o(" \u2014 "),iN=a("a"),xio=o("DebertaConfig"),$io=o(" (DeBERTa model)"),kio=l(),dg=a("li"),xfe=a("strong"),Sio=o("deberta-v2"),Rio=o(" \u2014 "),dN=a("a"),Pio=o("DebertaV2Config"),Bio=o(" (DeBERTa-v2 model)"),Iio=l(),cg=a("li"),$fe=a("strong"),Nio=o("decision_transformer"),qio=o(" \u2014 "),cN=a("a"),jio=o("DecisionTransformerConfig"),Dio=o(" (Decision Transformer model)"),Gio=l(),fg=a("li"),kfe=a("strong"),Oio=o("deformable_detr"),Vio=o(" \u2014 "),fN=a("a"),Xio=o("DeformableDetrConfig"),zio=o(" (Deformable DETR model)"),Qio=l(),mg=a("li"),Sfe=a("strong"),Wio=o("deit"),Uio=o(" \u2014 "),mN=a("a"),Hio=o("DeiTConfig"),Jio=o(" (DeiT model)"),Yio=l(),gg=a("li"),Rfe=a("strong"),Zio=o("detr"),Kio=o(" \u2014 "),gN=a("a"),edo=o("DetrConfig"),odo=o(" (DETR model)"),rdo=l(),hg=a("li"),Pfe=a("strong"),tdo=o("distilbert"),ado=o(" \u2014 "),hN=a("a"),ndo=o("DistilBertConfig"),sdo=o(" (DistilBERT model)"),ldo=l(),ug=a("li"),Bfe=a("strong"),ido=o("donut-swin"),ddo=o(" \u2014 "),uN=a("a"),cdo=o("DonutSwinConfig"),fdo=o(" (DonutSwin model)"),mdo=l(),pg=a("li"),Ife=a("strong"),gdo=o("dpr"),hdo=o(" \u2014 "),pN=a("a"),udo=o("DPRConfig"),pdo=o(" (DPR model)"),_do=l(),_g=a("li"),Nfe=a("strong"),vdo=o("dpt"),bdo=o(" \u2014 "),_N=a("a"),Fdo=o("DPTConfig"),Tdo=o(" (DPT model)"),Mdo=l(),vg=a("li"),qfe=a("strong"),Edo=o("electra"),Cdo=o(" \u2014 "),vN=a("a"),wdo=o("ElectraConfig"),Ado=o(" (ELECTRA model)"),Ldo=l(),bg=a("li"),jfe=a("strong"),ydo=o("encoder-decoder"),xdo=o(" \u2014 "),bN=a("a"),$do=o("EncoderDecoderConfig"),kdo=o(" (Encoder decoder model)"),Sdo=l(),Fg=a("li"),Dfe=a("strong"),Rdo=o("ernie"),Pdo=o(" \u2014 "),FN=a("a"),Bdo=o("ErnieConfig"),Ido=o(" (ERNIE model)"),Ndo=l(),Tg=a("li"),Gfe=a("strong"),qdo=o("esm"),jdo=o(" \u2014 "),TN=a("a"),Ddo=o("EsmConfig"),Gdo=o(" (ESM model)"),Odo=l(),Mg=a("li"),Ofe=a("strong"),Vdo=o("flaubert"),Xdo=o(" \u2014 "),MN=a("a"),zdo=o("FlaubertConfig"),Qdo=o(" (FlauBERT model)"),Wdo=l(),Eg=a("li"),Vfe=a("strong"),Udo=o("flava"),Hdo=o(" \u2014 "),EN=a("a"),Jdo=o("FlavaConfig"),Ydo=o(" (FLAVA model)"),Zdo=l(),Cg=a("li"),Xfe=a("strong"),Kdo=o("fnet"),eco=o(" \u2014 "),CN=a("a"),oco=o("FNetConfig"),rco=o(" (FNet model)"),tco=l(),wg=a("li"),zfe=a("strong"),aco=o("fsmt"),nco=o(" \u2014 "),wN=a("a"),sco=o("FSMTConfig"),lco=o(" (FairSeq Machine-Translation model)"),ico=l(),Ag=a("li"),Qfe=a("strong"),dco=o("funnel"),cco=o(" \u2014 "),AN=a("a"),fco=o("FunnelConfig"),mco=o(" (Funnel Transformer model)"),gco=l(),Lg=a("li"),Wfe=a("strong"),hco=o("glpn"),uco=o(" \u2014 "),LN=a("a"),pco=o("GLPNConfig"),_co=o(" (GLPN model)"),vco=l(),yg=a("li"),Ufe=a("strong"),bco=o("gpt2"),Fco=o(" \u2014 "),yN=a("a"),Tco=o("GPT2Config"),Mco=o(" (OpenAI GPT-2 model)"),Eco=l(),xg=a("li"),Hfe=a("strong"),Cco=o("gpt_neo"),wco=o(" \u2014 "),xN=a("a"),Aco=o("GPTNeoConfig"),Lco=o(" (GPT Neo model)"),yco=l(),$g=a("li"),Jfe=a("strong"),xco=o("gpt_neox"),$co=o(" \u2014 "),$N=a("a"),kco=o("GPTNeoXConfig"),Sco=o(" (GPT NeoX model)"),Rco=l(),kg=a("li"),Yfe=a("strong"),Pco=o("gpt_neox_japanese"),Bco=o(" \u2014 "),kN=a("a"),Ico=o("GPTNeoXJapaneseConfig"),Nco=o(" (GPT NeoX Japanese model)"),qco=l(),Sg=a("li"),Zfe=a("strong"),jco=o("gptj"),Dco=o(" \u2014 "),SN=a("a"),Gco=o("GPTJConfig"),Oco=o(" (GPT-J model)"),Vco=l(),Rg=a("li"),Kfe=a("strong"),Xco=o("groupvit"),zco=o(" \u2014 "),RN=a("a"),Qco=o("GroupViTConfig"),Wco=o(" (GroupViT model)"),Uco=l(),Pg=a("li"),eme=a("strong"),Hco=o("hubert"),Jco=o(" \u2014 "),PN=a("a"),Yco=o("HubertConfig"),Zco=o(" (Hubert model)"),Kco=l(),Bg=a("li"),ome=a("strong"),efo=o("ibert"),ofo=o(" \u2014 "),BN=a("a"),rfo=o("IBertConfig"),tfo=o(" (I-BERT model)"),afo=l(),Ig=a("li"),rme=a("strong"),nfo=o("imagegpt"),sfo=o(" \u2014 "),IN=a("a"),lfo=o("ImageGPTConfig"),ifo=o(" (ImageGPT model)"),dfo=l(),Ng=a("li"),tme=a("strong"),cfo=o("layoutlm"),ffo=o(" \u2014 "),NN=a("a"),mfo=o("LayoutLMConfig"),gfo=o(" (LayoutLM model)"),hfo=l(),qg=a("li"),ame=a("strong"),ufo=o("layoutlmv2"),pfo=o(" \u2014 "),qN=a("a"),_fo=o("LayoutLMv2Config"),vfo=o(" (LayoutLMv2 model)"),bfo=l(),jg=a("li"),nme=a("strong"),Ffo=o("layoutlmv3"),Tfo=o(" \u2014 "),jN=a("a"),Mfo=o("LayoutLMv3Config"),Efo=o(" (LayoutLMv3 model)"),Cfo=l(),Dg=a("li"),sme=a("strong"),wfo=o("led"),Afo=o(" \u2014 "),DN=a("a"),Lfo=o("LEDConfig"),yfo=o(" (LED model)"),xfo=l(),Gg=a("li"),lme=a("strong"),$fo=o("levit"),kfo=o(" \u2014 "),GN=a("a"),Sfo=o("LevitConfig"),Rfo=o(" (LeViT model)"),Pfo=l(),Og=a("li"),ime=a("strong"),Bfo=o("longformer"),Ifo=o(" \u2014 "),ON=a("a"),Nfo=o("LongformerConfig"),qfo=o(" (Longformer model)"),jfo=l(),Vg=a("li"),dme=a("strong"),Dfo=o("longt5"),Gfo=o(" \u2014 "),VN=a("a"),Ofo=o("LongT5Config"),Vfo=o(" (LongT5 model)"),Xfo=l(),Xg=a("li"),cme=a("strong"),zfo=o("luke"),Qfo=o(" \u2014 "),XN=a("a"),Wfo=o("LukeConfig"),Ufo=o(" (LUKE model)"),Hfo=l(),zg=a("li"),fme=a("strong"),Jfo=o("lxmert"),Yfo=o(" \u2014 "),zN=a("a"),Zfo=o("LxmertConfig"),Kfo=o(" (LXMERT model)"),emo=l(),Qg=a("li"),mme=a("strong"),omo=o("m2m_100"),rmo=o(" \u2014 "),QN=a("a"),tmo=o("M2M100Config"),amo=o(" (M2M100 model)"),nmo=l(),Wg=a("li"),gme=a("strong"),smo=o("marian"),lmo=o(" \u2014 "),WN=a("a"),imo=o("MarianConfig"),dmo=o(" (Marian model)"),cmo=l(),Ug=a("li"),hme=a("strong"),fmo=o("markuplm"),mmo=o(" \u2014 "),UN=a("a"),gmo=o("MarkupLMConfig"),hmo=o(" (MarkupLM model)"),umo=l(),Hg=a("li"),ume=a("strong"),pmo=o("maskformer"),_mo=o(" \u2014 "),HN=a("a"),vmo=o("MaskFormerConfig"),bmo=o(" (MaskFormer model)"),Fmo=l(),Jg=a("li"),pme=a("strong"),Tmo=o("mbart"),Mmo=o(" \u2014 "),JN=a("a"),Emo=o("MBartConfig"),Cmo=o(" (mBART model)"),wmo=l(),Yg=a("li"),_me=a("strong"),Amo=o("mctct"),Lmo=o(" \u2014 "),YN=a("a"),ymo=o("MCTCTConfig"),xmo=o(" (M-CTC-T model)"),$mo=l(),Zg=a("li"),vme=a("strong"),kmo=o("megatron-bert"),Smo=o(" \u2014 "),ZN=a("a"),Rmo=o("MegatronBertConfig"),Pmo=o(" (Megatron-BERT model)"),Bmo=l(),Kg=a("li"),bme=a("strong"),Imo=o("mobilebert"),Nmo=o(" \u2014 "),KN=a("a"),qmo=o("MobileBertConfig"),jmo=o(" (MobileBERT model)"),Dmo=l(),eh=a("li"),Fme=a("strong"),Gmo=o("mobilevit"),Omo=o(" \u2014 "),eq=a("a"),Vmo=o("MobileViTConfig"),Xmo=o(" (MobileViT model)"),zmo=l(),oh=a("li"),Tme=a("strong"),Qmo=o("mpnet"),Wmo=o(" \u2014 "),oq=a("a"),Umo=o("MPNetConfig"),Hmo=o(" (MPNet model)"),Jmo=l(),rh=a("li"),Mme=a("strong"),Ymo=o("mt5"),Zmo=o(" \u2014 "),rq=a("a"),Kmo=o("MT5Config"),ego=o(" (MT5 model)"),ogo=l(),th=a("li"),Eme=a("strong"),rgo=o("mvp"),tgo=o(" \u2014 "),tq=a("a"),ago=o("MvpConfig"),ngo=o(" (MVP model)"),sgo=l(),ah=a("li"),Cme=a("strong"),lgo=o("nezha"),igo=o(" \u2014 "),aq=a("a"),dgo=o("NezhaConfig"),cgo=o(" (Nezha model)"),fgo=l(),nh=a("li"),wme=a("strong"),mgo=o("nystromformer"),ggo=o(" \u2014 "),nq=a("a"),hgo=o("NystromformerConfig"),ugo=o(" (Nystr\xF6mformer model)"),pgo=l(),sh=a("li"),Ame=a("strong"),_go=o("openai-gpt"),vgo=o(" \u2014 "),sq=a("a"),bgo=o("OpenAIGPTConfig"),Fgo=o(" (OpenAI GPT model)"),Tgo=l(),lh=a("li"),Lme=a("strong"),Mgo=o("opt"),Ego=o(" \u2014 "),lq=a("a"),Cgo=o("OPTConfig"),wgo=o(" (OPT model)"),Ago=l(),ih=a("li"),yme=a("strong"),Lgo=o("owlvit"),ygo=o(" \u2014 "),iq=a("a"),xgo=o("OwlViTConfig"),$go=o(" (OWL-ViT model)"),kgo=l(),dh=a("li"),xme=a("strong"),Sgo=o("pegasus"),Rgo=o(" \u2014 "),dq=a("a"),Pgo=o("PegasusConfig"),Bgo=o(" (Pegasus model)"),Igo=l(),ch=a("li"),$me=a("strong"),Ngo=o("pegasus_x"),qgo=o(" \u2014 "),cq=a("a"),jgo=o("PegasusXConfig"),Dgo=o(" (PEGASUS-X model)"),Ggo=l(),fh=a("li"),kme=a("strong"),Ogo=o("perceiver"),Vgo=o(" \u2014 "),fq=a("a"),Xgo=o("PerceiverConfig"),zgo=o(" (Perceiver model)"),Qgo=l(),mh=a("li"),Sme=a("strong"),Wgo=o("plbart"),Ugo=o(" \u2014 "),mq=a("a"),Hgo=o("PLBartConfig"),Jgo=o(" (PLBart model)"),Ygo=l(),gh=a("li"),Rme=a("strong"),Zgo=o("poolformer"),Kgo=o(" \u2014 "),gq=a("a"),eho=o("PoolFormerConfig"),oho=o(" (PoolFormer model)"),rho=l(),hh=a("li"),Pme=a("strong"),tho=o("prophetnet"),aho=o(" \u2014 "),hq=a("a"),nho=o("ProphetNetConfig"),sho=o(" (ProphetNet model)"),lho=l(),uh=a("li"),Bme=a("strong"),iho=o("qdqbert"),dho=o(" \u2014 "),uq=a("a"),cho=o("QDQBertConfig"),fho=o(" (QDQBert model)"),mho=l(),ph=a("li"),Ime=a("strong"),gho=o("rag"),hho=o(" \u2014 "),pq=a("a"),uho=o("RagConfig"),pho=o(" (RAG model)"),_ho=l(),_h=a("li"),Nme=a("strong"),vho=o("realm"),bho=o(" \u2014 "),_q=a("a"),Fho=o("RealmConfig"),Tho=o(" (REALM model)"),Mho=l(),vh=a("li"),qme=a("strong"),Eho=o("reformer"),Cho=o(" \u2014 "),vq=a("a"),who=o("ReformerConfig"),Aho=o(" (Reformer model)"),Lho=l(),bh=a("li"),jme=a("strong"),yho=o("regnet"),xho=o(" \u2014 "),bq=a("a"),$ho=o("RegNetConfig"),kho=o(" (RegNet model)"),Sho=l(),Fh=a("li"),Dme=a("strong"),Rho=o("rembert"),Pho=o(" \u2014 "),Fq=a("a"),Bho=o("RemBertConfig"),Iho=o(" (RemBERT model)"),Nho=l(),Th=a("li"),Gme=a("strong"),qho=o("resnet"),jho=o(" \u2014 "),Tq=a("a"),Dho=o("ResNetConfig"),Gho=o(" (ResNet model)"),Oho=l(),Mh=a("li"),Ome=a("strong"),Vho=o("retribert"),Xho=o(" \u2014 "),Mq=a("a"),zho=o("RetriBertConfig"),Qho=o(" (RetriBERT model)"),Who=l(),Eh=a("li"),Vme=a("strong"),Uho=o("roberta"),Hho=o(" \u2014 "),Eq=a("a"),Jho=o("RobertaConfig"),Yho=o(" (RoBERTa model)"),Zho=l(),Ch=a("li"),Xme=a("strong"),Kho=o("roformer"),euo=o(" \u2014 "),Cq=a("a"),ouo=o("RoFormerConfig"),ruo=o(" (RoFormer model)"),tuo=l(),wh=a("li"),zme=a("strong"),auo=o("segformer"),nuo=o(" \u2014 "),wq=a("a"),suo=o("SegformerConfig"),luo=o(" (SegFormer model)"),iuo=l(),Ah=a("li"),Qme=a("strong"),duo=o("sew"),cuo=o(" \u2014 "),Aq=a("a"),fuo=o("SEWConfig"),muo=o(" (SEW model)"),guo=l(),Lh=a("li"),Wme=a("strong"),huo=o("sew-d"),uuo=o(" \u2014 "),Lq=a("a"),puo=o("SEWDConfig"),_uo=o(" (SEW-D model)"),vuo=l(),yh=a("li"),Ume=a("strong"),buo=o("speech-encoder-decoder"),Fuo=o(" \u2014 "),yq=a("a"),Tuo=o("SpeechEncoderDecoderConfig"),Muo=o(" (Speech Encoder decoder model)"),Euo=l(),xh=a("li"),Hme=a("strong"),Cuo=o("speech_to_text"),wuo=o(" \u2014 "),xq=a("a"),Auo=o("Speech2TextConfig"),Luo=o(" (Speech2Text model)"),yuo=l(),$h=a("li"),Jme=a("strong"),xuo=o("speech_to_text_2"),$uo=o(" \u2014 "),$q=a("a"),kuo=o("Speech2Text2Config"),Suo=o(" (Speech2Text2 model)"),Ruo=l(),kh=a("li"),Yme=a("strong"),Puo=o("splinter"),Buo=o(" \u2014 "),kq=a("a"),Iuo=o("SplinterConfig"),Nuo=o(" (Splinter model)"),quo=l(),Sh=a("li"),Zme=a("strong"),juo=o("squeezebert"),Duo=o(" \u2014 "),Sq=a("a"),Guo=o("SqueezeBertConfig"),Ouo=o(" (SqueezeBERT model)"),Vuo=l(),Rh=a("li"),Kme=a("strong"),Xuo=o("swin"),zuo=o(" \u2014 "),Rq=a("a"),Quo=o("SwinConfig"),Wuo=o(" (Swin Transformer model)"),Uuo=l(),Ph=a("li"),ege=a("strong"),Huo=o("swinv2"),Juo=o(" \u2014 "),Pq=a("a"),Yuo=o("Swinv2Config"),Zuo=o(" (Swin Transformer V2 model)"),Kuo=l(),Bh=a("li"),oge=a("strong"),epo=o("t5"),opo=o(" \u2014 "),Bq=a("a"),rpo=o("T5Config"),tpo=o(" (T5 model)"),apo=l(),Ih=a("li"),rge=a("strong"),npo=o("tapas"),spo=o(" \u2014 "),Iq=a("a"),lpo=o("TapasConfig"),ipo=o(" (TAPAS model)"),dpo=l(),Nh=a("li"),tge=a("strong"),cpo=o("time_series_transformer"),fpo=o(" \u2014 "),Nq=a("a"),mpo=o("TimeSeriesTransformerConfig"),gpo=o(" (Time Series Transformer model)"),hpo=l(),qh=a("li"),age=a("strong"),upo=o("trajectory_transformer"),ppo=o(" \u2014 "),qq=a("a"),_po=o("TrajectoryTransformerConfig"),vpo=o(" (Trajectory Transformer model)"),bpo=l(),jh=a("li"),nge=a("strong"),Fpo=o("transfo-xl"),Tpo=o(" \u2014 "),jq=a("a"),Mpo=o("TransfoXLConfig"),Epo=o(" (Transformer-XL model)"),Cpo=l(),Dh=a("li"),sge=a("strong"),wpo=o("trocr"),Apo=o(" \u2014 "),Dq=a("a"),Lpo=o("TrOCRConfig"),ypo=o(" (TrOCR model)"),xpo=l(),Gh=a("li"),lge=a("strong"),$po=o("unispeech"),kpo=o(" \u2014 "),Gq=a("a"),Spo=o("UniSpeechConfig"),Rpo=o(" (UniSpeech model)"),Ppo=l(),Oh=a("li"),ige=a("strong"),Bpo=o("unispeech-sat"),Ipo=o(" \u2014 "),Oq=a("a"),Npo=o("UniSpeechSatConfig"),qpo=o(" (UniSpeechSat model)"),jpo=l(),Vh=a("li"),dge=a("strong"),Dpo=o("van"),Gpo=o(" \u2014 "),Vq=a("a"),Opo=o("VanConfig"),Vpo=o(" (VAN model)"),Xpo=l(),Xh=a("li"),cge=a("strong"),zpo=o("videomae"),Qpo=o(" \u2014 "),Xq=a("a"),Wpo=o("VideoMAEConfig"),Upo=o(" (VideoMAE model)"),Hpo=l(),zh=a("li"),fge=a("strong"),Jpo=o("vilt"),Ypo=o(" \u2014 "),zq=a("a"),Zpo=o("ViltConfig"),Kpo=o(" (ViLT model)"),e_o=l(),Qh=a("li"),mge=a("strong"),o_o=o("vision-encoder-decoder"),r_o=o(" \u2014 "),Qq=a("a"),t_o=o("VisionEncoderDecoderConfig"),a_o=o(" (Vision Encoder decoder model)"),n_o=l(),Wh=a("li"),gge=a("strong"),s_o=o("vision-text-dual-encoder"),l_o=o(" \u2014 "),Wq=a("a"),i_o=o("VisionTextDualEncoderConfig"),d_o=o(" (VisionTextDualEncoder model)"),c_o=l(),Uh=a("li"),hge=a("strong"),f_o=o("visual_bert"),m_o=o(" \u2014 "),Uq=a("a"),g_o=o("VisualBertConfig"),h_o=o(" (VisualBERT model)"),u_o=l(),Hh=a("li"),uge=a("strong"),p_o=o("vit"),__o=o(" \u2014 "),Hq=a("a"),v_o=o("ViTConfig"),b_o=o(" (ViT model)"),F_o=l(),Jh=a("li"),pge=a("strong"),T_o=o("vit_mae"),M_o=o(" \u2014 "),Jq=a("a"),E_o=o("ViTMAEConfig"),C_o=o(" (ViTMAE model)"),w_o=l(),Yh=a("li"),_ge=a("strong"),A_o=o("vit_msn"),L_o=o(" \u2014 "),Yq=a("a"),y_o=o("ViTMSNConfig"),x_o=o(" (ViTMSN model)"),$_o=l(),Zh=a("li"),vge=a("strong"),k_o=o("wav2vec2"),S_o=o(" \u2014 "),Zq=a("a"),R_o=o("Wav2Vec2Config"),P_o=o(" (Wav2Vec2 model)"),B_o=l(),Kh=a("li"),bge=a("strong"),I_o=o("wav2vec2-conformer"),N_o=o(" \u2014 "),Kq=a("a"),q_o=o("Wav2Vec2ConformerConfig"),j_o=o(" (Wav2Vec2-Conformer model)"),D_o=l(),eu=a("li"),Fge=a("strong"),G_o=o("wavlm"),O_o=o(" \u2014 "),ej=a("a"),V_o=o("WavLMConfig"),X_o=o(" (WavLM model)"),z_o=l(),ou=a("li"),Tge=a("strong"),Q_o=o("whisper"),W_o=o(" \u2014 "),oj=a("a"),U_o=o("WhisperConfig"),H_o=o(" (Whisper model)"),J_o=l(),ru=a("li"),Mge=a("strong"),Y_o=o("xclip"),Z_o=o(" \u2014 "),rj=a("a"),K_o=o("XCLIPConfig"),e2o=o(" (X-CLIP model)"),o2o=l(),tu=a("li"),Ege=a("strong"),r2o=o("xglm"),t2o=o(" \u2014 "),tj=a("a"),a2o=o("XGLMConfig"),n2o=o(" (XGLM model)"),s2o=l(),au=a("li"),Cge=a("strong"),l2o=o("xlm"),i2o=o(" \u2014 "),aj=a("a"),d2o=o("XLMConfig"),c2o=o(" (XLM model)"),f2o=l(),nu=a("li"),wge=a("strong"),m2o=o("xlm-prophetnet"),g2o=o(" \u2014 "),nj=a("a"),h2o=o("XLMProphetNetConfig"),u2o=o(" (XLM-ProphetNet model)"),p2o=l(),su=a("li"),Age=a("strong"),_2o=o("xlm-roberta"),v2o=o(" \u2014 "),sj=a("a"),b2o=o("XLMRobertaConfig"),F2o=o(" (XLM-RoBERTa model)"),T2o=l(),lu=a("li"),Lge=a("strong"),M2o=o("xlm-roberta-xl"),E2o=o(" \u2014 "),lj=a("a"),C2o=o("XLMRobertaXLConfig"),w2o=o(" (XLM-RoBERTa-XL model)"),A2o=l(),iu=a("li"),yge=a("strong"),L2o=o("xlnet"),y2o=o(" \u2014 "),ij=a("a"),x2o=o("XLNetConfig"),$2o=o(" (XLNet model)"),k2o=l(),du=a("li"),xge=a("strong"),S2o=o("yolos"),R2o=o(" \u2014 "),dj=a("a"),P2o=o("YolosConfig"),B2o=o(" (YOLOS model)"),I2o=l(),cu=a("li"),$ge=a("strong"),N2o=o("yoso"),q2o=o(" \u2014 "),cj=a("a"),j2o=o("YosoConfig"),D2o=o(" (YOSO model)"),G2o=l(),F(fu.$$.fragment),O2o=l(),mu=a("div"),F(Bx.$$.fragment),V2o=l(),kge=a("p"),X2o=o("Register a new configuration for this class."),Eoo=l(),bd=a("h2"),gu=a("a"),Sge=a("span"),F(Ix.$$.fragment),z2o=l(),Rge=a("span"),Q2o=o("AutoTokenizer"),Coo=l(),So=a("div"),F(Nx.$$.fragment),W2o=l(),qx=a("p"),U2o=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),fj=a("a"),H2o=o("AutoTokenizer.from_pretrained()"),J2o=o(" class method."),Y2o=l(),jx=a("p"),Z2o=o("This class cannot be instantiated directly using "),Pge=a("code"),K2o=o("__init__()"),evo=o(" (throws an error)."),ovo=l(),Nr=a("div"),F(Dx.$$.fragment),rvo=l(),Bge=a("p"),tvo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),avo=l(),Za=a("p"),nvo=o("The tokenizer class to instantiate is selected based on the "),Ige=a("code"),svo=o("model_type"),lvo=o(` property of the config object (either
passed as an argument or loaded from `),Nge=a("code"),ivo=o("pretrained_model_name_or_path"),dvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qge=a("code"),cvo=o("pretrained_model_name_or_path"),fvo=o(":"),mvo=l(),k=a("ul"),cs=a("li"),jge=a("strong"),gvo=o("albert"),hvo=o(" \u2014 "),mj=a("a"),uvo=o("AlbertTokenizer"),pvo=o(" or "),gj=a("a"),_vo=o("AlbertTokenizerFast"),vvo=o(" (ALBERT model)"),bvo=l(),fs=a("li"),Dge=a("strong"),Fvo=o("bart"),Tvo=o(" \u2014 "),hj=a("a"),Mvo=o("BartTokenizer"),Evo=o(" or "),uj=a("a"),Cvo=o("BartTokenizerFast"),wvo=o(" (BART model)"),Avo=l(),ms=a("li"),Gge=a("strong"),Lvo=o("barthez"),yvo=o(" \u2014 "),pj=a("a"),xvo=o("BarthezTokenizer"),$vo=o(" or "),_j=a("a"),kvo=o("BarthezTokenizerFast"),Svo=o(" (BARThez model)"),Rvo=l(),hu=a("li"),Oge=a("strong"),Pvo=o("bartpho"),Bvo=o(" \u2014 "),vj=a("a"),Ivo=o("BartphoTokenizer"),Nvo=o(" (BARTpho model)"),qvo=l(),gs=a("li"),Vge=a("strong"),jvo=o("bert"),Dvo=o(" \u2014 "),bj=a("a"),Gvo=o("BertTokenizer"),Ovo=o(" or "),Fj=a("a"),Vvo=o("BertTokenizerFast"),Xvo=o(" (BERT model)"),zvo=l(),uu=a("li"),Xge=a("strong"),Qvo=o("bert-generation"),Wvo=o(" \u2014 "),Tj=a("a"),Uvo=o("BertGenerationTokenizer"),Hvo=o(" (Bert Generation model)"),Jvo=l(),pu=a("li"),zge=a("strong"),Yvo=o("bert-japanese"),Zvo=o(" \u2014 "),Mj=a("a"),Kvo=o("BertJapaneseTokenizer"),e4o=o(" (BertJapanese model)"),o4o=l(),_u=a("li"),Qge=a("strong"),r4o=o("bertweet"),t4o=o(" \u2014 "),Ej=a("a"),a4o=o("BertweetTokenizer"),n4o=o(" (BERTweet model)"),s4o=l(),hs=a("li"),Wge=a("strong"),l4o=o("big_bird"),i4o=o(" \u2014 "),Cj=a("a"),d4o=o("BigBirdTokenizer"),c4o=o(" or "),wj=a("a"),f4o=o("BigBirdTokenizerFast"),m4o=o(" (BigBird model)"),g4o=l(),us=a("li"),Uge=a("strong"),h4o=o("bigbird_pegasus"),u4o=o(" \u2014 "),Aj=a("a"),p4o=o("PegasusTokenizer"),_4o=o(" or "),Lj=a("a"),v4o=o("PegasusTokenizerFast"),b4o=o(" (BigBird-Pegasus model)"),F4o=l(),ps=a("li"),Hge=a("strong"),T4o=o("blenderbot"),M4o=o(" \u2014 "),yj=a("a"),E4o=o("BlenderbotTokenizer"),C4o=o(" or "),xj=a("a"),w4o=o("BlenderbotTokenizerFast"),A4o=o(" (Blenderbot model)"),L4o=l(),vu=a("li"),Jge=a("strong"),y4o=o("blenderbot-small"),x4o=o(" \u2014 "),$j=a("a"),$4o=o("BlenderbotSmallTokenizer"),k4o=o(" (BlenderbotSmall model)"),S4o=l(),bu=a("li"),Yge=a("strong"),R4o=o("bloom"),P4o=o(" \u2014 "),kj=a("a"),B4o=o("BloomTokenizerFast"),I4o=o(" (BLOOM model)"),N4o=l(),Fu=a("li"),Zge=a("strong"),q4o=o("byt5"),j4o=o(" \u2014 "),Sj=a("a"),D4o=o("ByT5Tokenizer"),G4o=o(" (ByT5 model)"),O4o=l(),_s=a("li"),Kge=a("strong"),V4o=o("camembert"),X4o=o(" \u2014 "),Rj=a("a"),z4o=o("CamembertTokenizer"),Q4o=o(" or "),Pj=a("a"),W4o=o("CamembertTokenizerFast"),U4o=o(" (CamemBERT model)"),H4o=l(),Tu=a("li"),ehe=a("strong"),J4o=o("canine"),Y4o=o(" \u2014 "),Bj=a("a"),Z4o=o("CanineTokenizer"),K4o=o(" (CANINE model)"),e1o=l(),vs=a("li"),ohe=a("strong"),o1o=o("clip"),r1o=o(" \u2014 "),Ij=a("a"),t1o=o("CLIPTokenizer"),a1o=o(" or "),Nj=a("a"),n1o=o("CLIPTokenizerFast"),s1o=o(" (CLIP model)"),l1o=l(),bs=a("li"),rhe=a("strong"),i1o=o("codegen"),d1o=o(" \u2014 "),qj=a("a"),c1o=o("CodeGenTokenizer"),f1o=o(" or "),jj=a("a"),m1o=o("CodeGenTokenizerFast"),g1o=o(" (CodeGen model)"),h1o=l(),Fs=a("li"),the=a("strong"),u1o=o("convbert"),p1o=o(" \u2014 "),Dj=a("a"),_1o=o("ConvBertTokenizer"),v1o=o(" or "),Gj=a("a"),b1o=o("ConvBertTokenizerFast"),F1o=o(" (ConvBERT model)"),T1o=l(),Ts=a("li"),ahe=a("strong"),M1o=o("cpm"),E1o=o(" \u2014 "),Oj=a("a"),C1o=o("CpmTokenizer"),w1o=o(" or "),Vj=a("a"),A1o=o("CpmTokenizerFast"),L1o=o(" (CPM model)"),y1o=l(),Mu=a("li"),nhe=a("strong"),x1o=o("ctrl"),$1o=o(" \u2014 "),Xj=a("a"),k1o=o("CTRLTokenizer"),S1o=o(" (CTRL model)"),R1o=l(),Ms=a("li"),she=a("strong"),P1o=o("data2vec-text"),B1o=o(" \u2014 "),zj=a("a"),I1o=o("RobertaTokenizer"),N1o=o(" or "),Qj=a("a"),q1o=o("RobertaTokenizerFast"),j1o=o(" (Data2VecText model)"),D1o=l(),Es=a("li"),lhe=a("strong"),G1o=o("deberta"),O1o=o(" \u2014 "),Wj=a("a"),V1o=o("DebertaTokenizer"),X1o=o(" or "),Uj=a("a"),z1o=o("DebertaTokenizerFast"),Q1o=o(" (DeBERTa model)"),W1o=l(),Cs=a("li"),ihe=a("strong"),U1o=o("deberta-v2"),H1o=o(" \u2014 "),Hj=a("a"),J1o=o("DebertaV2Tokenizer"),Y1o=o(" or "),Jj=a("a"),Z1o=o("DebertaV2TokenizerFast"),K1o=o(" (DeBERTa-v2 model)"),ebo=l(),ws=a("li"),dhe=a("strong"),obo=o("distilbert"),rbo=o(" \u2014 "),Yj=a("a"),tbo=o("DistilBertTokenizer"),abo=o(" or "),Zj=a("a"),nbo=o("DistilBertTokenizerFast"),sbo=o(" (DistilBERT model)"),lbo=l(),As=a("li"),che=a("strong"),ibo=o("dpr"),dbo=o(" \u2014 "),Kj=a("a"),cbo=o("DPRQuestionEncoderTokenizer"),fbo=o(" or "),eD=a("a"),mbo=o("DPRQuestionEncoderTokenizerFast"),gbo=o(" (DPR model)"),hbo=l(),Ls=a("li"),fhe=a("strong"),ubo=o("electra"),pbo=o(" \u2014 "),oD=a("a"),_bo=o("ElectraTokenizer"),vbo=o(" or "),rD=a("a"),bbo=o("ElectraTokenizerFast"),Fbo=o(" (ELECTRA model)"),Tbo=l(),ys=a("li"),mhe=a("strong"),Mbo=o("ernie"),Ebo=o(" \u2014 "),tD=a("a"),Cbo=o("BertTokenizer"),wbo=o(" or "),aD=a("a"),Abo=o("BertTokenizerFast"),Lbo=o(" (ERNIE model)"),ybo=l(),Eu=a("li"),ghe=a("strong"),xbo=o("flaubert"),$bo=o(" \u2014 "),nD=a("a"),kbo=o("FlaubertTokenizer"),Sbo=o(" (FlauBERT model)"),Rbo=l(),xs=a("li"),hhe=a("strong"),Pbo=o("fnet"),Bbo=o(" \u2014 "),sD=a("a"),Ibo=o("FNetTokenizer"),Nbo=o(" or "),lD=a("a"),qbo=o("FNetTokenizerFast"),jbo=o(" (FNet model)"),Dbo=l(),Cu=a("li"),uhe=a("strong"),Gbo=o("fsmt"),Obo=o(" \u2014 "),iD=a("a"),Vbo=o("FSMTTokenizer"),Xbo=o(" (FairSeq Machine-Translation model)"),zbo=l(),$s=a("li"),phe=a("strong"),Qbo=o("funnel"),Wbo=o(" \u2014 "),dD=a("a"),Ubo=o("FunnelTokenizer"),Hbo=o(" or "),cD=a("a"),Jbo=o("FunnelTokenizerFast"),Ybo=o(" (Funnel Transformer model)"),Zbo=l(),ks=a("li"),_he=a("strong"),Kbo=o("gpt2"),e3o=o(" \u2014 "),fD=a("a"),o3o=o("GPT2Tokenizer"),r3o=o(" or "),mD=a("a"),t3o=o("GPT2TokenizerFast"),a3o=o(" (OpenAI GPT-2 model)"),n3o=l(),Ss=a("li"),vhe=a("strong"),s3o=o("gpt_neo"),l3o=o(" \u2014 "),gD=a("a"),i3o=o("GPT2Tokenizer"),d3o=o(" or "),hD=a("a"),c3o=o("GPT2TokenizerFast"),f3o=o(" (GPT Neo model)"),m3o=l(),wu=a("li"),bhe=a("strong"),g3o=o("gpt_neox"),h3o=o(" \u2014 "),uD=a("a"),u3o=o("GPTNeoXTokenizerFast"),p3o=o(" (GPT NeoX model)"),_3o=l(),Au=a("li"),Fhe=a("strong"),v3o=o("gpt_neox_japanese"),b3o=o(" \u2014 "),pD=a("a"),F3o=o("GPTNeoXJapaneseTokenizer"),T3o=o(" (GPT NeoX Japanese model)"),M3o=l(),Rs=a("li"),The=a("strong"),E3o=o("gptj"),C3o=o(" \u2014 "),_D=a("a"),w3o=o("GPT2Tokenizer"),A3o=o(" or "),vD=a("a"),L3o=o("GPT2TokenizerFast"),y3o=o(" (GPT-J model)"),x3o=l(),Ps=a("li"),Mhe=a("strong"),$3o=o("groupvit"),k3o=o(" \u2014 "),bD=a("a"),S3o=o("CLIPTokenizer"),R3o=o(" or "),FD=a("a"),P3o=o("CLIPTokenizerFast"),B3o=o(" (GroupViT model)"),I3o=l(),Bs=a("li"),Ehe=a("strong"),N3o=o("herbert"),q3o=o(" \u2014 "),TD=a("a"),j3o=o("HerbertTokenizer"),D3o=o(" or "),MD=a("a"),G3o=o("HerbertTokenizerFast"),O3o=o(" (HerBERT model)"),V3o=l(),Lu=a("li"),Che=a("strong"),X3o=o("hubert"),z3o=o(" \u2014 "),ED=a("a"),Q3o=o("Wav2Vec2CTCTokenizer"),W3o=o(" (Hubert model)"),U3o=l(),Is=a("li"),whe=a("strong"),H3o=o("ibert"),J3o=o(" \u2014 "),CD=a("a"),Y3o=o("RobertaTokenizer"),Z3o=o(" or "),wD=a("a"),K3o=o("RobertaTokenizerFast"),e0o=o(" (I-BERT model)"),o0o=l(),Ns=a("li"),Ahe=a("strong"),r0o=o("layoutlm"),t0o=o(" \u2014 "),AD=a("a"),a0o=o("LayoutLMTokenizer"),n0o=o(" or "),LD=a("a"),s0o=o("LayoutLMTokenizerFast"),l0o=o(" (LayoutLM model)"),i0o=l(),qs=a("li"),Lhe=a("strong"),d0o=o("layoutlmv2"),c0o=o(" \u2014 "),yD=a("a"),f0o=o("LayoutLMv2Tokenizer"),m0o=o(" or "),xD=a("a"),g0o=o("LayoutLMv2TokenizerFast"),h0o=o(" (LayoutLMv2 model)"),u0o=l(),js=a("li"),yhe=a("strong"),p0o=o("layoutlmv3"),_0o=o(" \u2014 "),$D=a("a"),v0o=o("LayoutLMv3Tokenizer"),b0o=o(" or "),kD=a("a"),F0o=o("LayoutLMv3TokenizerFast"),T0o=o(" (LayoutLMv3 model)"),M0o=l(),Ds=a("li"),xhe=a("strong"),E0o=o("layoutxlm"),C0o=o(" \u2014 "),SD=a("a"),w0o=o("LayoutXLMTokenizer"),A0o=o(" or "),RD=a("a"),L0o=o("LayoutXLMTokenizerFast"),y0o=o(" (LayoutXLM model)"),x0o=l(),Gs=a("li"),$he=a("strong"),$0o=o("led"),k0o=o(" \u2014 "),PD=a("a"),S0o=o("LEDTokenizer"),R0o=o(" or "),BD=a("a"),P0o=o("LEDTokenizerFast"),B0o=o(" (LED model)"),I0o=l(),Os=a("li"),khe=a("strong"),N0o=o("longformer"),q0o=o(" \u2014 "),ID=a("a"),j0o=o("LongformerTokenizer"),D0o=o(" or "),ND=a("a"),G0o=o("LongformerTokenizerFast"),O0o=o(" (Longformer model)"),V0o=l(),Vs=a("li"),She=a("strong"),X0o=o("longt5"),z0o=o(" \u2014 "),qD=a("a"),Q0o=o("T5Tokenizer"),W0o=o(" or "),jD=a("a"),U0o=o("T5TokenizerFast"),H0o=o(" (LongT5 model)"),J0o=l(),yu=a("li"),Rhe=a("strong"),Y0o=o("luke"),Z0o=o(" \u2014 "),DD=a("a"),K0o=o("LukeTokenizer"),eFo=o(" (LUKE model)"),oFo=l(),Xs=a("li"),Phe=a("strong"),rFo=o("lxmert"),tFo=o(" \u2014 "),GD=a("a"),aFo=o("LxmertTokenizer"),nFo=o(" or "),OD=a("a"),sFo=o("LxmertTokenizerFast"),lFo=o(" (LXMERT model)"),iFo=l(),xu=a("li"),Bhe=a("strong"),dFo=o("m2m_100"),cFo=o(" \u2014 "),VD=a("a"),fFo=o("M2M100Tokenizer"),mFo=o(" (M2M100 model)"),gFo=l(),$u=a("li"),Ihe=a("strong"),hFo=o("marian"),uFo=o(" \u2014 "),XD=a("a"),pFo=o("MarianTokenizer"),_Fo=o(" (Marian model)"),vFo=l(),zs=a("li"),Nhe=a("strong"),bFo=o("mbart"),FFo=o(" \u2014 "),zD=a("a"),TFo=o("MBartTokenizer"),MFo=o(" or "),QD=a("a"),EFo=o("MBartTokenizerFast"),CFo=o(" (mBART model)"),wFo=l(),Qs=a("li"),qhe=a("strong"),AFo=o("mbart50"),LFo=o(" \u2014 "),WD=a("a"),yFo=o("MBart50Tokenizer"),xFo=o(" or "),UD=a("a"),$Fo=o("MBart50TokenizerFast"),kFo=o(" (mBART-50 model)"),SFo=l(),Ws=a("li"),jhe=a("strong"),RFo=o("megatron-bert"),PFo=o(" \u2014 "),HD=a("a"),BFo=o("BertTokenizer"),IFo=o(" or "),JD=a("a"),NFo=o("BertTokenizerFast"),qFo=o(" (Megatron-BERT model)"),jFo=l(),ku=a("li"),Dhe=a("strong"),DFo=o("mluke"),GFo=o(" \u2014 "),YD=a("a"),OFo=o("MLukeTokenizer"),VFo=o(" (mLUKE model)"),XFo=l(),Us=a("li"),Ghe=a("strong"),zFo=o("mobilebert"),QFo=o(" \u2014 "),ZD=a("a"),WFo=o("MobileBertTokenizer"),UFo=o(" or "),KD=a("a"),HFo=o("MobileBertTokenizerFast"),JFo=o(" (MobileBERT model)"),YFo=l(),Hs=a("li"),Ohe=a("strong"),ZFo=o("mpnet"),KFo=o(" \u2014 "),eG=a("a"),eTo=o("MPNetTokenizer"),oTo=o(" or "),oG=a("a"),rTo=o("MPNetTokenizerFast"),tTo=o(" (MPNet model)"),aTo=l(),Js=a("li"),Vhe=a("strong"),nTo=o("mt5"),sTo=o(" \u2014 "),rG=a("a"),lTo=o("MT5Tokenizer"),iTo=o(" or "),tG=a("a"),dTo=o("MT5TokenizerFast"),cTo=o(" (MT5 model)"),fTo=l(),Ys=a("li"),Xhe=a("strong"),mTo=o("mvp"),gTo=o(" \u2014 "),aG=a("a"),hTo=o("MvpTokenizer"),uTo=o(" or "),nG=a("a"),pTo=o("MvpTokenizerFast"),_To=o(" (MVP model)"),vTo=l(),Zs=a("li"),zhe=a("strong"),bTo=o("nezha"),FTo=o(" \u2014 "),sG=a("a"),TTo=o("BertTokenizer"),MTo=o(" or "),lG=a("a"),ETo=o("BertTokenizerFast"),CTo=o(" (Nezha model)"),wTo=l(),Ks=a("li"),Qhe=a("strong"),ATo=o("nllb"),LTo=o(" \u2014 "),iG=a("a"),yTo=o("NllbTokenizer"),xTo=o(" or "),dG=a("a"),$To=o("NllbTokenizerFast"),kTo=o(" (NLLB model)"),STo=l(),el=a("li"),Whe=a("strong"),RTo=o("nystromformer"),PTo=o(" \u2014 "),cG=a("a"),BTo=o("AlbertTokenizer"),ITo=o(" or "),fG=a("a"),NTo=o("AlbertTokenizerFast"),qTo=o(" (Nystr\xF6mformer model)"),jTo=l(),ol=a("li"),Uhe=a("strong"),DTo=o("openai-gpt"),GTo=o(" \u2014 "),mG=a("a"),OTo=o("OpenAIGPTTokenizer"),VTo=o(" or "),gG=a("a"),XTo=o("OpenAIGPTTokenizerFast"),zTo=o(" (OpenAI GPT model)"),QTo=l(),Su=a("li"),Hhe=a("strong"),WTo=o("opt"),UTo=o(" \u2014 "),hG=a("a"),HTo=o("GPT2Tokenizer"),JTo=o(" (OPT model)"),YTo=l(),rl=a("li"),Jhe=a("strong"),ZTo=o("owlvit"),KTo=o(" \u2014 "),uG=a("a"),eMo=o("CLIPTokenizer"),oMo=o(" or "),pG=a("a"),rMo=o("CLIPTokenizerFast"),tMo=o(" (OWL-ViT model)"),aMo=l(),tl=a("li"),Yhe=a("strong"),nMo=o("pegasus"),sMo=o(" \u2014 "),_G=a("a"),lMo=o("PegasusTokenizer"),iMo=o(" or "),vG=a("a"),dMo=o("PegasusTokenizerFast"),cMo=o(" (Pegasus model)"),fMo=l(),Ru=a("li"),Zhe=a("strong"),mMo=o("perceiver"),gMo=o(" \u2014 "),bG=a("a"),hMo=o("PerceiverTokenizer"),uMo=o(" (Perceiver model)"),pMo=l(),Pu=a("li"),Khe=a("strong"),_Mo=o("phobert"),vMo=o(" \u2014 "),FG=a("a"),bMo=o("PhobertTokenizer"),FMo=o(" (PhoBERT model)"),TMo=l(),Bu=a("li"),eue=a("strong"),MMo=o("plbart"),EMo=o(" \u2014 "),TG=a("a"),CMo=o("PLBartTokenizer"),wMo=o(" (PLBart model)"),AMo=l(),Iu=a("li"),oue=a("strong"),LMo=o("prophetnet"),yMo=o(" \u2014 "),MG=a("a"),xMo=o("ProphetNetTokenizer"),$Mo=o(" (ProphetNet model)"),kMo=l(),al=a("li"),rue=a("strong"),SMo=o("qdqbert"),RMo=o(" \u2014 "),EG=a("a"),PMo=o("BertTokenizer"),BMo=o(" or "),CG=a("a"),IMo=o("BertTokenizerFast"),NMo=o(" (QDQBert model)"),qMo=l(),Nu=a("li"),tue=a("strong"),jMo=o("rag"),DMo=o(" \u2014 "),wG=a("a"),GMo=o("RagTokenizer"),OMo=o(" (RAG model)"),VMo=l(),nl=a("li"),aue=a("strong"),XMo=o("realm"),zMo=o(" \u2014 "),AG=a("a"),QMo=o("RealmTokenizer"),WMo=o(" or "),LG=a("a"),UMo=o("RealmTokenizerFast"),HMo=o(" (REALM model)"),JMo=l(),sl=a("li"),nue=a("strong"),YMo=o("reformer"),ZMo=o(" \u2014 "),yG=a("a"),KMo=o("ReformerTokenizer"),eEo=o(" or "),xG=a("a"),oEo=o("ReformerTokenizerFast"),rEo=o(" (Reformer model)"),tEo=l(),ll=a("li"),sue=a("strong"),aEo=o("rembert"),nEo=o(" \u2014 "),$G=a("a"),sEo=o("RemBertTokenizer"),lEo=o(" or "),kG=a("a"),iEo=o("RemBertTokenizerFast"),dEo=o(" (RemBERT model)"),cEo=l(),il=a("li"),lue=a("strong"),fEo=o("retribert"),mEo=o(" \u2014 "),SG=a("a"),gEo=o("RetriBertTokenizer"),hEo=o(" or "),RG=a("a"),uEo=o("RetriBertTokenizerFast"),pEo=o(" (RetriBERT model)"),_Eo=l(),dl=a("li"),iue=a("strong"),vEo=o("roberta"),bEo=o(" \u2014 "),PG=a("a"),FEo=o("RobertaTokenizer"),TEo=o(" or "),BG=a("a"),MEo=o("RobertaTokenizerFast"),EEo=o(" (RoBERTa model)"),CEo=l(),cl=a("li"),due=a("strong"),wEo=o("roformer"),AEo=o(" \u2014 "),IG=a("a"),LEo=o("RoFormerTokenizer"),yEo=o(" or "),NG=a("a"),xEo=o("RoFormerTokenizerFast"),$Eo=o(" (RoFormer model)"),kEo=l(),qu=a("li"),cue=a("strong"),SEo=o("speech_to_text"),REo=o(" \u2014 "),qG=a("a"),PEo=o("Speech2TextTokenizer"),BEo=o(" (Speech2Text model)"),IEo=l(),ju=a("li"),fue=a("strong"),NEo=o("speech_to_text_2"),qEo=o(" \u2014 "),jG=a("a"),jEo=o("Speech2Text2Tokenizer"),DEo=o(" (Speech2Text2 model)"),GEo=l(),fl=a("li"),mue=a("strong"),OEo=o("splinter"),VEo=o(" \u2014 "),DG=a("a"),XEo=o("SplinterTokenizer"),zEo=o(" or "),GG=a("a"),QEo=o("SplinterTokenizerFast"),WEo=o(" (Splinter model)"),UEo=l(),ml=a("li"),gue=a("strong"),HEo=o("squeezebert"),JEo=o(" \u2014 "),OG=a("a"),YEo=o("SqueezeBertTokenizer"),ZEo=o(" or "),VG=a("a"),KEo=o("SqueezeBertTokenizerFast"),eCo=o(" (SqueezeBERT model)"),oCo=l(),gl=a("li"),hue=a("strong"),rCo=o("t5"),tCo=o(" \u2014 "),XG=a("a"),aCo=o("T5Tokenizer"),nCo=o(" or "),zG=a("a"),sCo=o("T5TokenizerFast"),lCo=o(" (T5 model)"),iCo=l(),Du=a("li"),uue=a("strong"),dCo=o("tapas"),cCo=o(" \u2014 "),QG=a("a"),fCo=o("TapasTokenizer"),mCo=o(" (TAPAS model)"),gCo=l(),Gu=a("li"),pue=a("strong"),hCo=o("tapex"),uCo=o(" \u2014 "),WG=a("a"),pCo=o("TapexTokenizer"),_Co=o(" (TAPEX model)"),vCo=l(),Ou=a("li"),_ue=a("strong"),bCo=o("transfo-xl"),FCo=o(" \u2014 "),UG=a("a"),TCo=o("TransfoXLTokenizer"),MCo=o(" (Transformer-XL model)"),ECo=l(),hl=a("li"),vue=a("strong"),CCo=o("vilt"),wCo=o(" \u2014 "),HG=a("a"),ACo=o("BertTokenizer"),LCo=o(" or "),JG=a("a"),yCo=o("BertTokenizerFast"),xCo=o(" (ViLT model)"),$Co=l(),ul=a("li"),bue=a("strong"),kCo=o("visual_bert"),SCo=o(" \u2014 "),YG=a("a"),RCo=o("BertTokenizer"),PCo=o(" or "),ZG=a("a"),BCo=o("BertTokenizerFast"),ICo=o(" (VisualBERT model)"),NCo=l(),Vu=a("li"),Fue=a("strong"),qCo=o("wav2vec2"),jCo=o(" \u2014 "),KG=a("a"),DCo=o("Wav2Vec2CTCTokenizer"),GCo=o(" (Wav2Vec2 model)"),OCo=l(),Xu=a("li"),Tue=a("strong"),VCo=o("wav2vec2-conformer"),XCo=o(" \u2014 "),eO=a("a"),zCo=o("Wav2Vec2CTCTokenizer"),QCo=o(" (Wav2Vec2-Conformer model)"),WCo=l(),zu=a("li"),Mue=a("strong"),UCo=o("wav2vec2_phoneme"),HCo=o(" \u2014 "),oO=a("a"),JCo=o("Wav2Vec2PhonemeCTCTokenizer"),YCo=o(" (Wav2Vec2Phoneme model)"),ZCo=l(),Qu=a("li"),Eue=a("strong"),KCo=o("whisper"),e5o=o(" \u2014 "),rO=a("a"),o5o=o("WhisperTokenizer"),r5o=o(" (Whisper model)"),t5o=l(),pl=a("li"),Cue=a("strong"),a5o=o("xclip"),n5o=o(" \u2014 "),tO=a("a"),s5o=o("CLIPTokenizer"),l5o=o(" or "),aO=a("a"),i5o=o("CLIPTokenizerFast"),d5o=o(" (X-CLIP model)"),c5o=l(),_l=a("li"),wue=a("strong"),f5o=o("xglm"),m5o=o(" \u2014 "),nO=a("a"),g5o=o("XGLMTokenizer"),h5o=o(" or "),sO=a("a"),u5o=o("XGLMTokenizerFast"),p5o=o(" (XGLM model)"),_5o=l(),Wu=a("li"),Aue=a("strong"),v5o=o("xlm"),b5o=o(" \u2014 "),lO=a("a"),F5o=o("XLMTokenizer"),T5o=o(" (XLM model)"),M5o=l(),Uu=a("li"),Lue=a("strong"),E5o=o("xlm-prophetnet"),C5o=o(" \u2014 "),iO=a("a"),w5o=o("XLMProphetNetTokenizer"),A5o=o(" (XLM-ProphetNet model)"),L5o=l(),vl=a("li"),yue=a("strong"),y5o=o("xlm-roberta"),x5o=o(" \u2014 "),dO=a("a"),$5o=o("XLMRobertaTokenizer"),k5o=o(" or "),cO=a("a"),S5o=o("XLMRobertaTokenizerFast"),R5o=o(" (XLM-RoBERTa model)"),P5o=l(),bl=a("li"),xue=a("strong"),B5o=o("xlm-roberta-xl"),I5o=o(" \u2014 "),fO=a("a"),N5o=o("XLMRobertaTokenizer"),q5o=o(" or "),mO=a("a"),j5o=o("XLMRobertaTokenizerFast"),D5o=o(" (XLM-RoBERTa-XL model)"),G5o=l(),Fl=a("li"),$ue=a("strong"),O5o=o("xlnet"),V5o=o(" \u2014 "),gO=a("a"),X5o=o("XLNetTokenizer"),z5o=o(" or "),hO=a("a"),Q5o=o("XLNetTokenizerFast"),W5o=o(" (XLNet model)"),U5o=l(),Tl=a("li"),kue=a("strong"),H5o=o("yoso"),J5o=o(" \u2014 "),uO=a("a"),Y5o=o("AlbertTokenizer"),Z5o=o(" or "),pO=a("a"),K5o=o("AlbertTokenizerFast"),ewo=o(" (YOSO model)"),owo=l(),F(Hu.$$.fragment),rwo=l(),Ju=a("div"),F(Gx.$$.fragment),two=l(),Sue=a("p"),awo=o("Register a new tokenizer in this mapping."),woo=l(),Fd=a("h2"),Yu=a("a"),Rue=a("span"),F(Ox.$$.fragment),nwo=l(),Pue=a("span"),swo=o("AutoFeatureExtractor"),Aoo=l(),Ro=a("div"),F(Vx.$$.fragment),lwo=l(),Xx=a("p"),iwo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),_O=a("a"),dwo=o("AutoFeatureExtractor.from_pretrained()"),cwo=o(" class method."),fwo=l(),zx=a("p"),mwo=o("This class cannot be instantiated directly using "),Bue=a("code"),gwo=o("__init__()"),hwo=o(" (throws an error)."),uwo=l(),Ye=a("div"),F(Qx.$$.fragment),pwo=l(),Iue=a("p"),_wo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),vwo=l(),Ka=a("p"),bwo=o("The feature extractor class to instantiate is selected based on the "),Nue=a("code"),Fwo=o("model_type"),Two=o(` property of the config object
(either passed as an argument or loaded from `),que=a("code"),Mwo=o("pretrained_model_name_or_path"),Ewo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),jue=a("code"),Cwo=o("pretrained_model_name_or_path"),wwo=o(":"),Awo=l(),z=a("ul"),Zu=a("li"),Due=a("strong"),Lwo=o("beit"),ywo=o(" \u2014 "),vO=a("a"),xwo=o("BeitFeatureExtractor"),$wo=o(" (BEiT model)"),kwo=l(),Ku=a("li"),Gue=a("strong"),Swo=o("clip"),Rwo=o(" \u2014 "),bO=a("a"),Pwo=o("CLIPFeatureExtractor"),Bwo=o(" (CLIP model)"),Iwo=l(),ep=a("li"),Oue=a("strong"),Nwo=o("conditional_detr"),qwo=o(" \u2014 "),FO=a("a"),jwo=o("ConditionalDetrFeatureExtractor"),Dwo=o(" (Conditional DETR model)"),Gwo=l(),op=a("li"),Vue=a("strong"),Owo=o("convnext"),Vwo=o(" \u2014 "),TO=a("a"),Xwo=o("ConvNextFeatureExtractor"),zwo=o(" (ConvNeXT model)"),Qwo=l(),rp=a("li"),Xue=a("strong"),Wwo=o("cvt"),Uwo=o(" \u2014 "),MO=a("a"),Hwo=o("ConvNextFeatureExtractor"),Jwo=o(" (CvT model)"),Ywo=l(),tp=a("li"),zue=a("strong"),Zwo=o("data2vec-audio"),Kwo=o(" \u2014 "),EO=a("a"),eAo=o("Wav2Vec2FeatureExtractor"),oAo=o(" (Data2VecAudio model)"),rAo=l(),ap=a("li"),Que=a("strong"),tAo=o("data2vec-vision"),aAo=o(" \u2014 "),CO=a("a"),nAo=o("BeitFeatureExtractor"),sAo=o(" (Data2VecVision model)"),lAo=l(),np=a("li"),Wue=a("strong"),iAo=o("deformable_detr"),dAo=o(" \u2014 "),wO=a("a"),cAo=o("DeformableDetrFeatureExtractor"),fAo=o(" (Deformable DETR model)"),mAo=l(),sp=a("li"),Uue=a("strong"),gAo=o("deit"),hAo=o(" \u2014 "),AO=a("a"),uAo=o("DeiTFeatureExtractor"),pAo=o(" (DeiT model)"),_Ao=l(),lp=a("li"),Hue=a("strong"),vAo=o("detr"),bAo=o(" \u2014 "),LO=a("a"),FAo=o("DetrFeatureExtractor"),TAo=o(" (DETR model)"),MAo=l(),ip=a("li"),Jue=a("strong"),EAo=o("donut"),CAo=o(" \u2014 "),yO=a("a"),wAo=o("DonutFeatureExtractor"),AAo=o(" (Donut model)"),LAo=l(),dp=a("li"),Yue=a("strong"),yAo=o("dpt"),xAo=o(" \u2014 "),xO=a("a"),$Ao=o("DPTFeatureExtractor"),kAo=o(" (DPT model)"),SAo=l(),cp=a("li"),Zue=a("strong"),RAo=o("flava"),PAo=o(" \u2014 "),$O=a("a"),BAo=o("FlavaFeatureExtractor"),IAo=o(" (FLAVA model)"),NAo=l(),fp=a("li"),Kue=a("strong"),qAo=o("glpn"),jAo=o(" \u2014 "),kO=a("a"),DAo=o("GLPNFeatureExtractor"),GAo=o(" (GLPN model)"),OAo=l(),mp=a("li"),epe=a("strong"),VAo=o("groupvit"),XAo=o(" \u2014 "),SO=a("a"),zAo=o("CLIPFeatureExtractor"),QAo=o(" (GroupViT model)"),WAo=l(),gp=a("li"),ope=a("strong"),UAo=o("hubert"),HAo=o(" \u2014 "),RO=a("a"),JAo=o("Wav2Vec2FeatureExtractor"),YAo=o(" (Hubert model)"),ZAo=l(),hp=a("li"),rpe=a("strong"),KAo=o("imagegpt"),e6o=o(" \u2014 "),PO=a("a"),o6o=o("ImageGPTFeatureExtractor"),r6o=o(" (ImageGPT model)"),t6o=l(),up=a("li"),tpe=a("strong"),a6o=o("layoutlmv2"),n6o=o(" \u2014 "),BO=a("a"),s6o=o("LayoutLMv2FeatureExtractor"),l6o=o(" (LayoutLMv2 model)"),i6o=l(),pp=a("li"),ape=a("strong"),d6o=o("layoutlmv3"),c6o=o(" \u2014 "),IO=a("a"),f6o=o("LayoutLMv3FeatureExtractor"),m6o=o(" (LayoutLMv3 model)"),g6o=l(),_p=a("li"),npe=a("strong"),h6o=o("levit"),u6o=o(" \u2014 "),NO=a("a"),p6o=o("LevitFeatureExtractor"),_6o=o(" (LeViT model)"),v6o=l(),vp=a("li"),spe=a("strong"),b6o=o("maskformer"),F6o=o(" \u2014 "),qO=a("a"),T6o=o("MaskFormerFeatureExtractor"),M6o=o(" (MaskFormer model)"),E6o=l(),bp=a("li"),lpe=a("strong"),C6o=o("mctct"),w6o=o(" \u2014 "),jO=a("a"),A6o=o("MCTCTFeatureExtractor"),L6o=o(" (M-CTC-T model)"),y6o=l(),Fp=a("li"),ipe=a("strong"),x6o=o("mobilevit"),$6o=o(" \u2014 "),DO=a("a"),k6o=o("MobileViTFeatureExtractor"),S6o=o(" (MobileViT model)"),R6o=l(),Tp=a("li"),dpe=a("strong"),P6o=o("owlvit"),B6o=o(" \u2014 "),GO=a("a"),I6o=o("OwlViTFeatureExtractor"),N6o=o(" (OWL-ViT model)"),q6o=l(),Mp=a("li"),cpe=a("strong"),j6o=o("perceiver"),D6o=o(" \u2014 "),OO=a("a"),G6o=o("PerceiverFeatureExtractor"),O6o=o(" (Perceiver model)"),V6o=l(),Ep=a("li"),fpe=a("strong"),X6o=o("poolformer"),z6o=o(" \u2014 "),VO=a("a"),Q6o=o("PoolFormerFeatureExtractor"),W6o=o(" (PoolFormer model)"),U6o=l(),Cp=a("li"),mpe=a("strong"),H6o=o("regnet"),J6o=o(" \u2014 "),XO=a("a"),Y6o=o("ConvNextFeatureExtractor"),Z6o=o(" (RegNet model)"),K6o=l(),wp=a("li"),gpe=a("strong"),e7o=o("resnet"),o7o=o(" \u2014 "),zO=a("a"),r7o=o("ConvNextFeatureExtractor"),t7o=o(" (ResNet model)"),a7o=l(),Ap=a("li"),hpe=a("strong"),n7o=o("segformer"),s7o=o(" \u2014 "),QO=a("a"),l7o=o("SegformerFeatureExtractor"),i7o=o(" (SegFormer model)"),d7o=l(),Lp=a("li"),upe=a("strong"),c7o=o("speech_to_text"),f7o=o(" \u2014 "),WO=a("a"),m7o=o("Speech2TextFeatureExtractor"),g7o=o(" (Speech2Text model)"),h7o=l(),yp=a("li"),ppe=a("strong"),u7o=o("swin"),p7o=o(" \u2014 "),UO=a("a"),_7o=o("ViTFeatureExtractor"),v7o=o(" (Swin Transformer model)"),b7o=l(),xp=a("li"),_pe=a("strong"),F7o=o("swinv2"),T7o=o(" \u2014 "),HO=a("a"),M7o=o("ViTFeatureExtractor"),E7o=o(" (Swin Transformer V2 model)"),C7o=l(),$p=a("li"),vpe=a("strong"),w7o=o("van"),A7o=o(" \u2014 "),JO=a("a"),L7o=o("ConvNextFeatureExtractor"),y7o=o(" (VAN model)"),x7o=l(),kp=a("li"),bpe=a("strong"),$7o=o("videomae"),k7o=o(" \u2014 "),YO=a("a"),S7o=o("VideoMAEFeatureExtractor"),R7o=o(" (VideoMAE model)"),P7o=l(),Sp=a("li"),Fpe=a("strong"),B7o=o("vilt"),I7o=o(" \u2014 "),ZO=a("a"),N7o=o("ViltFeatureExtractor"),q7o=o(" (ViLT model)"),j7o=l(),Rp=a("li"),Tpe=a("strong"),D7o=o("vit"),G7o=o(" \u2014 "),KO=a("a"),O7o=o("ViTFeatureExtractor"),V7o=o(" (ViT model)"),X7o=l(),Pp=a("li"),Mpe=a("strong"),z7o=o("vit_mae"),Q7o=o(" \u2014 "),eV=a("a"),W7o=o("ViTFeatureExtractor"),U7o=o(" (ViTMAE model)"),H7o=l(),Bp=a("li"),Epe=a("strong"),J7o=o("vit_msn"),Y7o=o(" \u2014 "),oV=a("a"),Z7o=o("ViTFeatureExtractor"),K7o=o(" (ViTMSN model)"),eLo=l(),Ip=a("li"),Cpe=a("strong"),oLo=o("wav2vec2"),rLo=o(" \u2014 "),rV=a("a"),tLo=o("Wav2Vec2FeatureExtractor"),aLo=o(" (Wav2Vec2 model)"),nLo=l(),Np=a("li"),wpe=a("strong"),sLo=o("wav2vec2-conformer"),lLo=o(" \u2014 "),tV=a("a"),iLo=o("Wav2Vec2FeatureExtractor"),dLo=o(" (Wav2Vec2-Conformer model)"),cLo=l(),qp=a("li"),Ape=a("strong"),fLo=o("whisper"),mLo=o(" \u2014 "),aV=a("a"),gLo=o("WhisperFeatureExtractor"),hLo=o(" (Whisper model)"),uLo=l(),jp=a("li"),Lpe=a("strong"),pLo=o("xclip"),_Lo=o(" \u2014 "),nV=a("a"),vLo=o("CLIPFeatureExtractor"),bLo=o(" (X-CLIP model)"),FLo=l(),Dp=a("li"),ype=a("strong"),TLo=o("yolos"),MLo=o(" \u2014 "),sV=a("a"),ELo=o("YolosFeatureExtractor"),CLo=o(" (YOLOS model)"),wLo=l(),F(Gp.$$.fragment),ALo=l(),F(Op.$$.fragment),LLo=l(),Vp=a("div"),F(Wx.$$.fragment),yLo=l(),xpe=a("p"),xLo=o("Register a new feature extractor for this class."),Loo=l(),Td=a("h2"),Xp=a("a"),$pe=a("span"),F(Ux.$$.fragment),$Lo=l(),kpe=a("span"),kLo=o("AutoProcessor"),yoo=l(),Po=a("div"),F(Hx.$$.fragment),SLo=l(),Jx=a("p"),RLo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),lV=a("a"),PLo=o("AutoProcessor.from_pretrained()"),BLo=o(" class method."),ILo=l(),Yx=a("p"),NLo=o("This class cannot be instantiated directly using "),Spe=a("code"),qLo=o("__init__()"),jLo=o(" (throws an error)."),DLo=l(),Ze=a("div"),F(Zx.$$.fragment),GLo=l(),Rpe=a("p"),OLo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),VLo=l(),Md=a("p"),XLo=o("The processor class to instantiate is selected based on the "),Ppe=a("code"),zLo=o("model_type"),QLo=o(` property of the config object (either
passed as an argument or loaded from `),Bpe=a("code"),WLo=o("pretrained_model_name_or_path"),ULo=o(" if possible):"),HLo=l(),se=a("ul"),zp=a("li"),Ipe=a("strong"),JLo=o("clip"),YLo=o(" \u2014 "),iV=a("a"),ZLo=o("CLIPProcessor"),KLo=o(" (CLIP model)"),e8o=l(),Qp=a("li"),Npe=a("strong"),o8o=o("donut"),r8o=o(" \u2014 "),dV=a("a"),t8o=o("DonutProcessor"),a8o=o(" (Donut model)"),n8o=l(),Wp=a("li"),qpe=a("strong"),s8o=o("flava"),l8o=o(" \u2014 "),cV=a("a"),i8o=o("FlavaProcessor"),d8o=o(" (FLAVA model)"),c8o=l(),Up=a("li"),jpe=a("strong"),f8o=o("groupvit"),m8o=o(" \u2014 "),fV=a("a"),g8o=o("CLIPProcessor"),h8o=o(" (GroupViT model)"),u8o=l(),Hp=a("li"),Dpe=a("strong"),p8o=o("layoutlmv2"),_8o=o(" \u2014 "),mV=a("a"),v8o=o("LayoutLMv2Processor"),b8o=o(" (LayoutLMv2 model)"),F8o=l(),Jp=a("li"),Gpe=a("strong"),T8o=o("layoutlmv3"),M8o=o(" \u2014 "),gV=a("a"),E8o=o("LayoutLMv3Processor"),C8o=o(" (LayoutLMv3 model)"),w8o=l(),Yp=a("li"),Ope=a("strong"),A8o=o("layoutxlm"),L8o=o(" \u2014 "),hV=a("a"),y8o=o("LayoutXLMProcessor"),x8o=o(" (LayoutXLM model)"),$8o=l(),Zp=a("li"),Vpe=a("strong"),k8o=o("markuplm"),S8o=o(" \u2014 "),uV=a("a"),R8o=o("MarkupLMProcessor"),P8o=o(" (MarkupLM model)"),B8o=l(),Kp=a("li"),Xpe=a("strong"),I8o=o("owlvit"),N8o=o(" \u2014 "),pV=a("a"),q8o=o("OwlViTProcessor"),j8o=o(" (OWL-ViT model)"),D8o=l(),e_=a("li"),zpe=a("strong"),G8o=o("sew"),O8o=o(" \u2014 "),_V=a("a"),V8o=o("Wav2Vec2Processor"),X8o=o(" (SEW model)"),z8o=l(),o_=a("li"),Qpe=a("strong"),Q8o=o("sew-d"),W8o=o(" \u2014 "),vV=a("a"),U8o=o("Wav2Vec2Processor"),H8o=o(" (SEW-D model)"),J8o=l(),r_=a("li"),Wpe=a("strong"),Y8o=o("speech_to_text"),Z8o=o(" \u2014 "),bV=a("a"),K8o=o("Speech2TextProcessor"),eyo=o(" (Speech2Text model)"),oyo=l(),t_=a("li"),Upe=a("strong"),ryo=o("speech_to_text_2"),tyo=o(" \u2014 "),FV=a("a"),ayo=o("Speech2Text2Processor"),nyo=o(" (Speech2Text2 model)"),syo=l(),a_=a("li"),Hpe=a("strong"),lyo=o("trocr"),iyo=o(" \u2014 "),TV=a("a"),dyo=o("TrOCRProcessor"),cyo=o(" (TrOCR model)"),fyo=l(),n_=a("li"),Jpe=a("strong"),myo=o("unispeech"),gyo=o(" \u2014 "),MV=a("a"),hyo=o("Wav2Vec2Processor"),uyo=o(" (UniSpeech model)"),pyo=l(),s_=a("li"),Ype=a("strong"),_yo=o("unispeech-sat"),vyo=o(" \u2014 "),EV=a("a"),byo=o("Wav2Vec2Processor"),Fyo=o(" (UniSpeechSat model)"),Tyo=l(),l_=a("li"),Zpe=a("strong"),Myo=o("vilt"),Eyo=o(" \u2014 "),CV=a("a"),Cyo=o("ViltProcessor"),wyo=o(" (ViLT model)"),Ayo=l(),i_=a("li"),Kpe=a("strong"),Lyo=o("vision-text-dual-encoder"),yyo=o(" \u2014 "),wV=a("a"),xyo=o("VisionTextDualEncoderProcessor"),$yo=o(" (VisionTextDualEncoder model)"),kyo=l(),d_=a("li"),e_e=a("strong"),Syo=o("wav2vec2"),Ryo=o(" \u2014 "),AV=a("a"),Pyo=o("Wav2Vec2Processor"),Byo=o(" (Wav2Vec2 model)"),Iyo=l(),c_=a("li"),o_e=a("strong"),Nyo=o("wav2vec2-conformer"),qyo=o(" \u2014 "),LV=a("a"),jyo=o("Wav2Vec2Processor"),Dyo=o(" (Wav2Vec2-Conformer model)"),Gyo=l(),f_=a("li"),r_e=a("strong"),Oyo=o("wavlm"),Vyo=o(" \u2014 "),yV=a("a"),Xyo=o("Wav2Vec2Processor"),zyo=o(" (WavLM model)"),Qyo=l(),m_=a("li"),t_e=a("strong"),Wyo=o("whisper"),Uyo=o(" \u2014 "),xV=a("a"),Hyo=o("WhisperProcessor"),Jyo=o(" (Whisper model)"),Yyo=l(),g_=a("li"),a_e=a("strong"),Zyo=o("xclip"),Kyo=o(" \u2014 "),$V=a("a"),e9o=o("CLIPProcessor"),o9o=o(" (X-CLIP model)"),r9o=l(),F(h_.$$.fragment),t9o=l(),F(u_.$$.fragment),a9o=l(),p_=a("div"),F(Kx.$$.fragment),n9o=l(),n_e=a("p"),s9o=o("Register a new processor for this class."),xoo=l(),Ed=a("h2"),__=a("a"),s_e=a("span"),F(e$.$$.fragment),l9o=l(),l_e=a("span"),i9o=o("AutoModel"),$oo=l(),Bo=a("div"),F(o$.$$.fragment),d9o=l(),Cd=a("p"),c9o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kV=a("a"),f9o=o("from_pretrained()"),m9o=o(" class method or the "),SV=a("a"),g9o=o("from_config()"),h9o=o(` class
method.`),u9o=l(),r$=a("p"),p9o=o("This class cannot be instantiated directly using "),i_e=a("code"),_9o=o("__init__()"),v9o=o(" (throws an error)."),b9o=l(),bt=a("div"),F(t$.$$.fragment),F9o=l(),d_e=a("p"),T9o=o("Instantiates one of the base model classes of the library from a configuration."),M9o=l(),wd=a("p"),E9o=o(`Note:
Loading a model from its configuration file does `),c_e=a("strong"),C9o=o("not"),w9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=a("a"),A9o=o("from_pretrained()"),L9o=o(" to load the model weights."),y9o=l(),F(v_.$$.fragment),x9o=l(),Ke=a("div"),F(a$.$$.fragment),$9o=l(),f_e=a("p"),k9o=o("Instantiate one of the base model classes of the library from a pretrained model."),S9o=l(),en=a("p"),R9o=o("The model class to instantiate is selected based on the "),m_e=a("code"),P9o=o("model_type"),B9o=o(` property of the config object (either
passed as an argument or loaded from `),g_e=a("code"),I9o=o("pretrained_model_name_or_path"),N9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=a("code"),q9o=o("pretrained_model_name_or_path"),j9o=o(":"),D9o=l(),y=a("ul"),b_=a("li"),u_e=a("strong"),G9o=o("albert"),O9o=o(" \u2014 "),PV=a("a"),V9o=o("AlbertModel"),X9o=o(" (ALBERT model)"),z9o=l(),F_=a("li"),p_e=a("strong"),Q9o=o("bart"),W9o=o(" \u2014 "),BV=a("a"),U9o=o("BartModel"),H9o=o(" (BART model)"),J9o=l(),T_=a("li"),__e=a("strong"),Y9o=o("beit"),Z9o=o(" \u2014 "),IV=a("a"),K9o=o("BeitModel"),exo=o(" (BEiT model)"),oxo=l(),M_=a("li"),v_e=a("strong"),rxo=o("bert"),txo=o(" \u2014 "),NV=a("a"),axo=o("BertModel"),nxo=o(" (BERT model)"),sxo=l(),E_=a("li"),b_e=a("strong"),lxo=o("bert-generation"),ixo=o(" \u2014 "),qV=a("a"),dxo=o("BertGenerationEncoder"),cxo=o(" (Bert Generation model)"),fxo=l(),C_=a("li"),F_e=a("strong"),mxo=o("big_bird"),gxo=o(" \u2014 "),jV=a("a"),hxo=o("BigBirdModel"),uxo=o(" (BigBird model)"),pxo=l(),w_=a("li"),T_e=a("strong"),_xo=o("bigbird_pegasus"),vxo=o(" \u2014 "),DV=a("a"),bxo=o("BigBirdPegasusModel"),Fxo=o(" (BigBird-Pegasus model)"),Txo=l(),A_=a("li"),M_e=a("strong"),Mxo=o("blenderbot"),Exo=o(" \u2014 "),GV=a("a"),Cxo=o("BlenderbotModel"),wxo=o(" (Blenderbot model)"),Axo=l(),L_=a("li"),E_e=a("strong"),Lxo=o("blenderbot-small"),yxo=o(" \u2014 "),OV=a("a"),xxo=o("BlenderbotSmallModel"),$xo=o(" (BlenderbotSmall model)"),kxo=l(),y_=a("li"),C_e=a("strong"),Sxo=o("bloom"),Rxo=o(" \u2014 "),VV=a("a"),Pxo=o("BloomModel"),Bxo=o(" (BLOOM model)"),Ixo=l(),x_=a("li"),w_e=a("strong"),Nxo=o("camembert"),qxo=o(" \u2014 "),XV=a("a"),jxo=o("CamembertModel"),Dxo=o(" (CamemBERT model)"),Gxo=l(),$_=a("li"),A_e=a("strong"),Oxo=o("canine"),Vxo=o(" \u2014 "),zV=a("a"),Xxo=o("CanineModel"),zxo=o(" (CANINE model)"),Qxo=l(),k_=a("li"),L_e=a("strong"),Wxo=o("clip"),Uxo=o(" \u2014 "),QV=a("a"),Hxo=o("CLIPModel"),Jxo=o(" (CLIP model)"),Yxo=l(),S_=a("li"),y_e=a("strong"),Zxo=o("codegen"),Kxo=o(" \u2014 "),WV=a("a"),e$o=o("CodeGenModel"),o$o=o(" (CodeGen model)"),r$o=l(),R_=a("li"),x_e=a("strong"),t$o=o("conditional_detr"),a$o=o(" \u2014 "),UV=a("a"),n$o=o("ConditionalDetrModel"),s$o=o(" (Conditional DETR model)"),l$o=l(),P_=a("li"),$_e=a("strong"),i$o=o("convbert"),d$o=o(" \u2014 "),HV=a("a"),c$o=o("ConvBertModel"),f$o=o(" (ConvBERT model)"),m$o=l(),B_=a("li"),k_e=a("strong"),g$o=o("convnext"),h$o=o(" \u2014 "),JV=a("a"),u$o=o("ConvNextModel"),p$o=o(" (ConvNeXT model)"),_$o=l(),I_=a("li"),S_e=a("strong"),v$o=o("ctrl"),b$o=o(" \u2014 "),YV=a("a"),F$o=o("CTRLModel"),T$o=o(" (CTRL model)"),M$o=l(),N_=a("li"),R_e=a("strong"),E$o=o("cvt"),C$o=o(" \u2014 "),ZV=a("a"),w$o=o("CvtModel"),A$o=o(" (CvT model)"),L$o=l(),q_=a("li"),P_e=a("strong"),y$o=o("data2vec-audio"),x$o=o(" \u2014 "),KV=a("a"),$$o=o("Data2VecAudioModel"),k$o=o(" (Data2VecAudio model)"),S$o=l(),j_=a("li"),B_e=a("strong"),R$o=o("data2vec-text"),P$o=o(" \u2014 "),eX=a("a"),B$o=o("Data2VecTextModel"),I$o=o(" (Data2VecText model)"),N$o=l(),D_=a("li"),I_e=a("strong"),q$o=o("data2vec-vision"),j$o=o(" \u2014 "),oX=a("a"),D$o=o("Data2VecVisionModel"),G$o=o(" (Data2VecVision model)"),O$o=l(),G_=a("li"),N_e=a("strong"),V$o=o("deberta"),X$o=o(" \u2014 "),rX=a("a"),z$o=o("DebertaModel"),Q$o=o(" (DeBERTa model)"),W$o=l(),O_=a("li"),q_e=a("strong"),U$o=o("deberta-v2"),H$o=o(" \u2014 "),tX=a("a"),J$o=o("DebertaV2Model"),Y$o=o(" (DeBERTa-v2 model)"),Z$o=l(),V_=a("li"),j_e=a("strong"),K$o=o("decision_transformer"),eko=o(" \u2014 "),aX=a("a"),oko=o("DecisionTransformerModel"),rko=o(" (Decision Transformer model)"),tko=l(),X_=a("li"),D_e=a("strong"),ako=o("deformable_detr"),nko=o(" \u2014 "),nX=a("a"),sko=o("DeformableDetrModel"),lko=o(" (Deformable DETR model)"),iko=l(),z_=a("li"),G_e=a("strong"),dko=o("deit"),cko=o(" \u2014 "),sX=a("a"),fko=o("DeiTModel"),mko=o(" (DeiT model)"),gko=l(),Q_=a("li"),O_e=a("strong"),hko=o("detr"),uko=o(" \u2014 "),lX=a("a"),pko=o("DetrModel"),_ko=o(" (DETR model)"),vko=l(),W_=a("li"),V_e=a("strong"),bko=o("distilbert"),Fko=o(" \u2014 "),iX=a("a"),Tko=o("DistilBertModel"),Mko=o(" (DistilBERT model)"),Eko=l(),U_=a("li"),X_e=a("strong"),Cko=o("donut-swin"),wko=o(" \u2014 "),dX=a("a"),Ako=o("DonutSwinModel"),Lko=o(" (DonutSwin model)"),yko=l(),H_=a("li"),z_e=a("strong"),xko=o("dpr"),$ko=o(" \u2014 "),cX=a("a"),kko=o("DPRQuestionEncoder"),Sko=o(" (DPR model)"),Rko=l(),J_=a("li"),Q_e=a("strong"),Pko=o("dpt"),Bko=o(" \u2014 "),fX=a("a"),Iko=o("DPTModel"),Nko=o(" (DPT model)"),qko=l(),Y_=a("li"),W_e=a("strong"),jko=o("electra"),Dko=o(" \u2014 "),mX=a("a"),Gko=o("ElectraModel"),Oko=o(" (ELECTRA model)"),Vko=l(),Z_=a("li"),U_e=a("strong"),Xko=o("ernie"),zko=o(" \u2014 "),gX=a("a"),Qko=o("ErnieModel"),Wko=o(" (ERNIE model)"),Uko=l(),K_=a("li"),H_e=a("strong"),Hko=o("esm"),Jko=o(" \u2014 "),hX=a("a"),Yko=o("EsmModel"),Zko=o(" (ESM model)"),Kko=l(),e2=a("li"),J_e=a("strong"),eSo=o("flaubert"),oSo=o(" \u2014 "),uX=a("a"),rSo=o("FlaubertModel"),tSo=o(" (FlauBERT model)"),aSo=l(),o2=a("li"),Y_e=a("strong"),nSo=o("flava"),sSo=o(" \u2014 "),pX=a("a"),lSo=o("FlavaModel"),iSo=o(" (FLAVA model)"),dSo=l(),r2=a("li"),Z_e=a("strong"),cSo=o("fnet"),fSo=o(" \u2014 "),_X=a("a"),mSo=o("FNetModel"),gSo=o(" (FNet model)"),hSo=l(),t2=a("li"),K_e=a("strong"),uSo=o("fsmt"),pSo=o(" \u2014 "),vX=a("a"),_So=o("FSMTModel"),vSo=o(" (FairSeq Machine-Translation model)"),bSo=l(),Ml=a("li"),e2e=a("strong"),FSo=o("funnel"),TSo=o(" \u2014 "),bX=a("a"),MSo=o("FunnelModel"),ESo=o(" or "),FX=a("a"),CSo=o("FunnelBaseModel"),wSo=o(" (Funnel Transformer model)"),ASo=l(),a2=a("li"),o2e=a("strong"),LSo=o("glpn"),ySo=o(" \u2014 "),TX=a("a"),xSo=o("GLPNModel"),$So=o(" (GLPN model)"),kSo=l(),n2=a("li"),r2e=a("strong"),SSo=o("gpt2"),RSo=o(" \u2014 "),MX=a("a"),PSo=o("GPT2Model"),BSo=o(" (OpenAI GPT-2 model)"),ISo=l(),s2=a("li"),t2e=a("strong"),NSo=o("gpt_neo"),qSo=o(" \u2014 "),EX=a("a"),jSo=o("GPTNeoModel"),DSo=o(" (GPT Neo model)"),GSo=l(),l2=a("li"),a2e=a("strong"),OSo=o("gpt_neox"),VSo=o(" \u2014 "),CX=a("a"),XSo=o("GPTNeoXModel"),zSo=o(" (GPT NeoX model)"),QSo=l(),i2=a("li"),n2e=a("strong"),WSo=o("gpt_neox_japanese"),USo=o(" \u2014 "),wX=a("a"),HSo=o("GPTNeoXJapaneseModel"),JSo=o(" (GPT NeoX Japanese model)"),YSo=l(),d2=a("li"),s2e=a("strong"),ZSo=o("gptj"),KSo=o(" \u2014 "),AX=a("a"),eRo=o("GPTJModel"),oRo=o(" (GPT-J model)"),rRo=l(),c2=a("li"),l2e=a("strong"),tRo=o("groupvit"),aRo=o(" \u2014 "),LX=a("a"),nRo=o("GroupViTModel"),sRo=o(" (GroupViT model)"),lRo=l(),f2=a("li"),i2e=a("strong"),iRo=o("hubert"),dRo=o(" \u2014 "),yX=a("a"),cRo=o("HubertModel"),fRo=o(" (Hubert model)"),mRo=l(),m2=a("li"),d2e=a("strong"),gRo=o("ibert"),hRo=o(" \u2014 "),xX=a("a"),uRo=o("IBertModel"),pRo=o(" (I-BERT model)"),_Ro=l(),g2=a("li"),c2e=a("strong"),vRo=o("imagegpt"),bRo=o(" \u2014 "),$X=a("a"),FRo=o("ImageGPTModel"),TRo=o(" (ImageGPT model)"),MRo=l(),h2=a("li"),f2e=a("strong"),ERo=o("layoutlm"),CRo=o(" \u2014 "),kX=a("a"),wRo=o("LayoutLMModel"),ARo=o(" (LayoutLM model)"),LRo=l(),u2=a("li"),m2e=a("strong"),yRo=o("layoutlmv2"),xRo=o(" \u2014 "),SX=a("a"),$Ro=o("LayoutLMv2Model"),kRo=o(" (LayoutLMv2 model)"),SRo=l(),p2=a("li"),g2e=a("strong"),RRo=o("layoutlmv3"),PRo=o(" \u2014 "),RX=a("a"),BRo=o("LayoutLMv3Model"),IRo=o(" (LayoutLMv3 model)"),NRo=l(),_2=a("li"),h2e=a("strong"),qRo=o("led"),jRo=o(" \u2014 "),PX=a("a"),DRo=o("LEDModel"),GRo=o(" (LED model)"),ORo=l(),v2=a("li"),u2e=a("strong"),VRo=o("levit"),XRo=o(" \u2014 "),BX=a("a"),zRo=o("LevitModel"),QRo=o(" (LeViT model)"),WRo=l(),b2=a("li"),p2e=a("strong"),URo=o("longformer"),HRo=o(" \u2014 "),IX=a("a"),JRo=o("LongformerModel"),YRo=o(" (Longformer model)"),ZRo=l(),F2=a("li"),_2e=a("strong"),KRo=o("longt5"),ePo=o(" \u2014 "),NX=a("a"),oPo=o("LongT5Model"),rPo=o(" (LongT5 model)"),tPo=l(),T2=a("li"),v2e=a("strong"),aPo=o("luke"),nPo=o(" \u2014 "),qX=a("a"),sPo=o("LukeModel"),lPo=o(" (LUKE model)"),iPo=l(),M2=a("li"),b2e=a("strong"),dPo=o("lxmert"),cPo=o(" \u2014 "),jX=a("a"),fPo=o("LxmertModel"),mPo=o(" (LXMERT model)"),gPo=l(),E2=a("li"),F2e=a("strong"),hPo=o("m2m_100"),uPo=o(" \u2014 "),DX=a("a"),pPo=o("M2M100Model"),_Po=o(" (M2M100 model)"),vPo=l(),C2=a("li"),T2e=a("strong"),bPo=o("marian"),FPo=o(" \u2014 "),GX=a("a"),TPo=o("MarianModel"),MPo=o(" (Marian model)"),EPo=l(),w2=a("li"),M2e=a("strong"),CPo=o("markuplm"),wPo=o(" \u2014 "),OX=a("a"),APo=o("MarkupLMModel"),LPo=o(" (MarkupLM model)"),yPo=l(),A2=a("li"),E2e=a("strong"),xPo=o("maskformer"),$Po=o(" \u2014 "),VX=a("a"),kPo=o("MaskFormerModel"),SPo=o(" (MaskFormer model)"),RPo=l(),L2=a("li"),C2e=a("strong"),PPo=o("mbart"),BPo=o(" \u2014 "),XX=a("a"),IPo=o("MBartModel"),NPo=o(" (mBART model)"),qPo=l(),y2=a("li"),w2e=a("strong"),jPo=o("mctct"),DPo=o(" \u2014 "),zX=a("a"),GPo=o("MCTCTModel"),OPo=o(" (M-CTC-T model)"),VPo=l(),x2=a("li"),A2e=a("strong"),XPo=o("megatron-bert"),zPo=o(" \u2014 "),QX=a("a"),QPo=o("MegatronBertModel"),WPo=o(" (Megatron-BERT model)"),UPo=l(),$2=a("li"),L2e=a("strong"),HPo=o("mobilebert"),JPo=o(" \u2014 "),WX=a("a"),YPo=o("MobileBertModel"),ZPo=o(" (MobileBERT model)"),KPo=l(),k2=a("li"),y2e=a("strong"),eBo=o("mobilevit"),oBo=o(" \u2014 "),UX=a("a"),rBo=o("MobileViTModel"),tBo=o(" (MobileViT model)"),aBo=l(),S2=a("li"),x2e=a("strong"),nBo=o("mpnet"),sBo=o(" \u2014 "),HX=a("a"),lBo=o("MPNetModel"),iBo=o(" (MPNet model)"),dBo=l(),R2=a("li"),$2e=a("strong"),cBo=o("mt5"),fBo=o(" \u2014 "),JX=a("a"),mBo=o("MT5Model"),gBo=o(" (MT5 model)"),hBo=l(),P2=a("li"),k2e=a("strong"),uBo=o("mvp"),pBo=o(" \u2014 "),YX=a("a"),_Bo=o("MvpModel"),vBo=o(" (MVP model)"),bBo=l(),B2=a("li"),S2e=a("strong"),FBo=o("nezha"),TBo=o(" \u2014 "),ZX=a("a"),MBo=o("NezhaModel"),EBo=o(" (Nezha model)"),CBo=l(),I2=a("li"),R2e=a("strong"),wBo=o("nllb"),ABo=o(" \u2014 "),KX=a("a"),LBo=o("M2M100Model"),yBo=o(" (NLLB model)"),xBo=l(),N2=a("li"),P2e=a("strong"),$Bo=o("nystromformer"),kBo=o(" \u2014 "),ez=a("a"),SBo=o("NystromformerModel"),RBo=o(" (Nystr\xF6mformer model)"),PBo=l(),q2=a("li"),B2e=a("strong"),BBo=o("openai-gpt"),IBo=o(" \u2014 "),oz=a("a"),NBo=o("OpenAIGPTModel"),qBo=o(" (OpenAI GPT model)"),jBo=l(),j2=a("li"),I2e=a("strong"),DBo=o("opt"),GBo=o(" \u2014 "),rz=a("a"),OBo=o("OPTModel"),VBo=o(" (OPT model)"),XBo=l(),D2=a("li"),N2e=a("strong"),zBo=o("owlvit"),QBo=o(" \u2014 "),tz=a("a"),WBo=o("OwlViTModel"),UBo=o(" (OWL-ViT model)"),HBo=l(),G2=a("li"),q2e=a("strong"),JBo=o("pegasus"),YBo=o(" \u2014 "),az=a("a"),ZBo=o("PegasusModel"),KBo=o(" (Pegasus model)"),eIo=l(),O2=a("li"),j2e=a("strong"),oIo=o("pegasus_x"),rIo=o(" \u2014 "),nz=a("a"),tIo=o("PegasusXModel"),aIo=o(" (PEGASUS-X model)"),nIo=l(),V2=a("li"),D2e=a("strong"),sIo=o("perceiver"),lIo=o(" \u2014 "),sz=a("a"),iIo=o("PerceiverModel"),dIo=o(" (Perceiver model)"),cIo=l(),X2=a("li"),G2e=a("strong"),fIo=o("plbart"),mIo=o(" \u2014 "),lz=a("a"),gIo=o("PLBartModel"),hIo=o(" (PLBart model)"),uIo=l(),z2=a("li"),O2e=a("strong"),pIo=o("poolformer"),_Io=o(" \u2014 "),iz=a("a"),vIo=o("PoolFormerModel"),bIo=o(" (PoolFormer model)"),FIo=l(),Q2=a("li"),V2e=a("strong"),TIo=o("prophetnet"),MIo=o(" \u2014 "),dz=a("a"),EIo=o("ProphetNetModel"),CIo=o(" (ProphetNet model)"),wIo=l(),W2=a("li"),X2e=a("strong"),AIo=o("qdqbert"),LIo=o(" \u2014 "),cz=a("a"),yIo=o("QDQBertModel"),xIo=o(" (QDQBert model)"),$Io=l(),U2=a("li"),z2e=a("strong"),kIo=o("reformer"),SIo=o(" \u2014 "),fz=a("a"),RIo=o("ReformerModel"),PIo=o(" (Reformer model)"),BIo=l(),H2=a("li"),Q2e=a("strong"),IIo=o("regnet"),NIo=o(" \u2014 "),mz=a("a"),qIo=o("RegNetModel"),jIo=o(" (RegNet model)"),DIo=l(),J2=a("li"),W2e=a("strong"),GIo=o("rembert"),OIo=o(" \u2014 "),gz=a("a"),VIo=o("RemBertModel"),XIo=o(" (RemBERT model)"),zIo=l(),Y2=a("li"),U2e=a("strong"),QIo=o("resnet"),WIo=o(" \u2014 "),hz=a("a"),UIo=o("ResNetModel"),HIo=o(" (ResNet model)"),JIo=l(),Z2=a("li"),H2e=a("strong"),YIo=o("retribert"),ZIo=o(" \u2014 "),uz=a("a"),KIo=o("RetriBertModel"),eNo=o(" (RetriBERT model)"),oNo=l(),K2=a("li"),J2e=a("strong"),rNo=o("roberta"),tNo=o(" \u2014 "),pz=a("a"),aNo=o("RobertaModel"),nNo=o(" (RoBERTa model)"),sNo=l(),ev=a("li"),Y2e=a("strong"),lNo=o("roformer"),iNo=o(" \u2014 "),_z=a("a"),dNo=o("RoFormerModel"),cNo=o(" (RoFormer model)"),fNo=l(),ov=a("li"),Z2e=a("strong"),mNo=o("segformer"),gNo=o(" \u2014 "),vz=a("a"),hNo=o("SegformerModel"),uNo=o(" (SegFormer model)"),pNo=l(),rv=a("li"),K2e=a("strong"),_No=o("sew"),vNo=o(" \u2014 "),bz=a("a"),bNo=o("SEWModel"),FNo=o(" (SEW model)"),TNo=l(),tv=a("li"),eve=a("strong"),MNo=o("sew-d"),ENo=o(" \u2014 "),Fz=a("a"),CNo=o("SEWDModel"),wNo=o(" (SEW-D model)"),ANo=l(),av=a("li"),ove=a("strong"),LNo=o("speech_to_text"),yNo=o(" \u2014 "),Tz=a("a"),xNo=o("Speech2TextModel"),$No=o(" (Speech2Text model)"),kNo=l(),nv=a("li"),rve=a("strong"),SNo=o("splinter"),RNo=o(" \u2014 "),Mz=a("a"),PNo=o("SplinterModel"),BNo=o(" (Splinter model)"),INo=l(),sv=a("li"),tve=a("strong"),NNo=o("squeezebert"),qNo=o(" \u2014 "),Ez=a("a"),jNo=o("SqueezeBertModel"),DNo=o(" (SqueezeBERT model)"),GNo=l(),lv=a("li"),ave=a("strong"),ONo=o("swin"),VNo=o(" \u2014 "),Cz=a("a"),XNo=o("SwinModel"),zNo=o(" (Swin Transformer model)"),QNo=l(),iv=a("li"),nve=a("strong"),WNo=o("swinv2"),UNo=o(" \u2014 "),wz=a("a"),HNo=o("Swinv2Model"),JNo=o(" (Swin Transformer V2 model)"),YNo=l(),dv=a("li"),sve=a("strong"),ZNo=o("t5"),KNo=o(" \u2014 "),Az=a("a"),eqo=o("T5Model"),oqo=o(" (T5 model)"),rqo=l(),cv=a("li"),lve=a("strong"),tqo=o("tapas"),aqo=o(" \u2014 "),Lz=a("a"),nqo=o("TapasModel"),sqo=o(" (TAPAS model)"),lqo=l(),fv=a("li"),ive=a("strong"),iqo=o("time_series_transformer"),dqo=o(" \u2014 "),yz=a("a"),cqo=o("TimeSeriesTransformerModel"),fqo=o(" (Time Series Transformer model)"),mqo=l(),mv=a("li"),dve=a("strong"),gqo=o("trajectory_transformer"),hqo=o(" \u2014 "),xz=a("a"),uqo=o("TrajectoryTransformerModel"),pqo=o(" (Trajectory Transformer model)"),_qo=l(),gv=a("li"),cve=a("strong"),vqo=o("transfo-xl"),bqo=o(" \u2014 "),$z=a("a"),Fqo=o("TransfoXLModel"),Tqo=o(" (Transformer-XL model)"),Mqo=l(),hv=a("li"),fve=a("strong"),Eqo=o("unispeech"),Cqo=o(" \u2014 "),kz=a("a"),wqo=o("UniSpeechModel"),Aqo=o(" (UniSpeech model)"),Lqo=l(),uv=a("li"),mve=a("strong"),yqo=o("unispeech-sat"),xqo=o(" \u2014 "),Sz=a("a"),$qo=o("UniSpeechSatModel"),kqo=o(" (UniSpeechSat model)"),Sqo=l(),pv=a("li"),gve=a("strong"),Rqo=o("van"),Pqo=o(" \u2014 "),Rz=a("a"),Bqo=o("VanModel"),Iqo=o(" (VAN model)"),Nqo=l(),_v=a("li"),hve=a("strong"),qqo=o("videomae"),jqo=o(" \u2014 "),Pz=a("a"),Dqo=o("VideoMAEModel"),Gqo=o(" (VideoMAE model)"),Oqo=l(),vv=a("li"),uve=a("strong"),Vqo=o("vilt"),Xqo=o(" \u2014 "),Bz=a("a"),zqo=o("ViltModel"),Qqo=o(" (ViLT model)"),Wqo=l(),bv=a("li"),pve=a("strong"),Uqo=o("vision-text-dual-encoder"),Hqo=o(" \u2014 "),Iz=a("a"),Jqo=o("VisionTextDualEncoderModel"),Yqo=o(" (VisionTextDualEncoder model)"),Zqo=l(),Fv=a("li"),_ve=a("strong"),Kqo=o("visual_bert"),ejo=o(" \u2014 "),Nz=a("a"),ojo=o("VisualBertModel"),rjo=o(" (VisualBERT model)"),tjo=l(),Tv=a("li"),vve=a("strong"),ajo=o("vit"),njo=o(" \u2014 "),qz=a("a"),sjo=o("ViTModel"),ljo=o(" (ViT model)"),ijo=l(),Mv=a("li"),bve=a("strong"),djo=o("vit_mae"),cjo=o(" \u2014 "),jz=a("a"),fjo=o("ViTMAEModel"),mjo=o(" (ViTMAE model)"),gjo=l(),Ev=a("li"),Fve=a("strong"),hjo=o("vit_msn"),ujo=o(" \u2014 "),Dz=a("a"),pjo=o("ViTMSNModel"),_jo=o(" (ViTMSN model)"),vjo=l(),Cv=a("li"),Tve=a("strong"),bjo=o("wav2vec2"),Fjo=o(" \u2014 "),Gz=a("a"),Tjo=o("Wav2Vec2Model"),Mjo=o(" (Wav2Vec2 model)"),Ejo=l(),wv=a("li"),Mve=a("strong"),Cjo=o("wav2vec2-conformer"),wjo=o(" \u2014 "),Oz=a("a"),Ajo=o("Wav2Vec2ConformerModel"),Ljo=o(" (Wav2Vec2-Conformer model)"),yjo=l(),Av=a("li"),Eve=a("strong"),xjo=o("wavlm"),$jo=o(" \u2014 "),Vz=a("a"),kjo=o("WavLMModel"),Sjo=o(" (WavLM model)"),Rjo=l(),Lv=a("li"),Cve=a("strong"),Pjo=o("whisper"),Bjo=o(" \u2014 "),Xz=a("a"),Ijo=o("WhisperModel"),Njo=o(" (Whisper model)"),qjo=l(),yv=a("li"),wve=a("strong"),jjo=o("xclip"),Djo=o(" \u2014 "),zz=a("a"),Gjo=o("XCLIPModel"),Ojo=o(" (X-CLIP model)"),Vjo=l(),xv=a("li"),Ave=a("strong"),Xjo=o("xglm"),zjo=o(" \u2014 "),Qz=a("a"),Qjo=o("XGLMModel"),Wjo=o(" (XGLM model)"),Ujo=l(),$v=a("li"),Lve=a("strong"),Hjo=o("xlm"),Jjo=o(" \u2014 "),Wz=a("a"),Yjo=o("XLMModel"),Zjo=o(" (XLM model)"),Kjo=l(),kv=a("li"),yve=a("strong"),eDo=o("xlm-prophetnet"),oDo=o(" \u2014 "),Uz=a("a"),rDo=o("XLMProphetNetModel"),tDo=o(" (XLM-ProphetNet model)"),aDo=l(),Sv=a("li"),xve=a("strong"),nDo=o("xlm-roberta"),sDo=o(" \u2014 "),Hz=a("a"),lDo=o("XLMRobertaModel"),iDo=o(" (XLM-RoBERTa model)"),dDo=l(),Rv=a("li"),$ve=a("strong"),cDo=o("xlm-roberta-xl"),fDo=o(" \u2014 "),Jz=a("a"),mDo=o("XLMRobertaXLModel"),gDo=o(" (XLM-RoBERTa-XL model)"),hDo=l(),Pv=a("li"),kve=a("strong"),uDo=o("xlnet"),pDo=o(" \u2014 "),Yz=a("a"),_Do=o("XLNetModel"),vDo=o(" (XLNet model)"),bDo=l(),Bv=a("li"),Sve=a("strong"),FDo=o("yolos"),TDo=o(" \u2014 "),Zz=a("a"),MDo=o("YolosModel"),EDo=o(" (YOLOS model)"),CDo=l(),Iv=a("li"),Rve=a("strong"),wDo=o("yoso"),ADo=o(" \u2014 "),Kz=a("a"),LDo=o("YosoModel"),yDo=o(" (YOSO model)"),xDo=l(),Nv=a("p"),$Do=o("The model is set in evaluation mode by default using "),Pve=a("code"),kDo=o("model.eval()"),SDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bve=a("code"),RDo=o("model.train()"),PDo=l(),F(qv.$$.fragment),koo=l(),Ad=a("h2"),jv=a("a"),Ive=a("span"),F(n$.$$.fragment),BDo=l(),Nve=a("span"),IDo=o("AutoModelForPreTraining"),Soo=l(),Io=a("div"),F(s$.$$.fragment),NDo=l(),Ld=a("p"),qDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eQ=a("a"),jDo=o("from_pretrained()"),DDo=o(" class method or the "),oQ=a("a"),GDo=o("from_config()"),ODo=o(` class
method.`),VDo=l(),l$=a("p"),XDo=o("This class cannot be instantiated directly using "),qve=a("code"),zDo=o("__init__()"),QDo=o(" (throws an error)."),WDo=l(),Ft=a("div"),F(i$.$$.fragment),UDo=l(),jve=a("p"),HDo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),JDo=l(),yd=a("p"),YDo=o(`Note:
Loading a model from its configuration file does `),Dve=a("strong"),ZDo=o("not"),KDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rQ=a("a"),eGo=o("from_pretrained()"),oGo=o(" to load the model weights."),rGo=l(),F(Dv.$$.fragment),tGo=l(),eo=a("div"),F(d$.$$.fragment),aGo=l(),Gve=a("p"),nGo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),sGo=l(),on=a("p"),lGo=o("The model class to instantiate is selected based on the "),Ove=a("code"),iGo=o("model_type"),dGo=o(` property of the config object (either
passed as an argument or loaded from `),Vve=a("code"),cGo=o("pretrained_model_name_or_path"),fGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xve=a("code"),mGo=o("pretrained_model_name_or_path"),gGo=o(":"),hGo=l(),G=a("ul"),Gv=a("li"),zve=a("strong"),uGo=o("albert"),pGo=o(" \u2014 "),tQ=a("a"),_Go=o("AlbertForPreTraining"),vGo=o(" (ALBERT model)"),bGo=l(),Ov=a("li"),Qve=a("strong"),FGo=o("bart"),TGo=o(" \u2014 "),aQ=a("a"),MGo=o("BartForConditionalGeneration"),EGo=o(" (BART model)"),CGo=l(),Vv=a("li"),Wve=a("strong"),wGo=o("bert"),AGo=o(" \u2014 "),nQ=a("a"),LGo=o("BertForPreTraining"),yGo=o(" (BERT model)"),xGo=l(),Xv=a("li"),Uve=a("strong"),$Go=o("big_bird"),kGo=o(" \u2014 "),sQ=a("a"),SGo=o("BigBirdForPreTraining"),RGo=o(" (BigBird model)"),PGo=l(),zv=a("li"),Hve=a("strong"),BGo=o("bloom"),IGo=o(" \u2014 "),lQ=a("a"),NGo=o("BloomForCausalLM"),qGo=o(" (BLOOM model)"),jGo=l(),Qv=a("li"),Jve=a("strong"),DGo=o("camembert"),GGo=o(" \u2014 "),iQ=a("a"),OGo=o("CamembertForMaskedLM"),VGo=o(" (CamemBERT model)"),XGo=l(),Wv=a("li"),Yve=a("strong"),zGo=o("ctrl"),QGo=o(" \u2014 "),dQ=a("a"),WGo=o("CTRLLMHeadModel"),UGo=o(" (CTRL model)"),HGo=l(),Uv=a("li"),Zve=a("strong"),JGo=o("data2vec-text"),YGo=o(" \u2014 "),cQ=a("a"),ZGo=o("Data2VecTextForMaskedLM"),KGo=o(" (Data2VecText model)"),eOo=l(),Hv=a("li"),Kve=a("strong"),oOo=o("deberta"),rOo=o(" \u2014 "),fQ=a("a"),tOo=o("DebertaForMaskedLM"),aOo=o(" (DeBERTa model)"),nOo=l(),Jv=a("li"),e4e=a("strong"),sOo=o("deberta-v2"),lOo=o(" \u2014 "),mQ=a("a"),iOo=o("DebertaV2ForMaskedLM"),dOo=o(" (DeBERTa-v2 model)"),cOo=l(),Yv=a("li"),o4e=a("strong"),fOo=o("distilbert"),mOo=o(" \u2014 "),gQ=a("a"),gOo=o("DistilBertForMaskedLM"),hOo=o(" (DistilBERT model)"),uOo=l(),Zv=a("li"),r4e=a("strong"),pOo=o("electra"),_Oo=o(" \u2014 "),hQ=a("a"),vOo=o("ElectraForPreTraining"),bOo=o(" (ELECTRA model)"),FOo=l(),Kv=a("li"),t4e=a("strong"),TOo=o("ernie"),MOo=o(" \u2014 "),uQ=a("a"),EOo=o("ErnieForPreTraining"),COo=o(" (ERNIE model)"),wOo=l(),e4=a("li"),a4e=a("strong"),AOo=o("flaubert"),LOo=o(" \u2014 "),pQ=a("a"),yOo=o("FlaubertWithLMHeadModel"),xOo=o(" (FlauBERT model)"),$Oo=l(),o4=a("li"),n4e=a("strong"),kOo=o("flava"),SOo=o(" \u2014 "),_Q=a("a"),ROo=o("FlavaForPreTraining"),POo=o(" (FLAVA model)"),BOo=l(),r4=a("li"),s4e=a("strong"),IOo=o("fnet"),NOo=o(" \u2014 "),vQ=a("a"),qOo=o("FNetForPreTraining"),jOo=o(" (FNet model)"),DOo=l(),t4=a("li"),l4e=a("strong"),GOo=o("fsmt"),OOo=o(" \u2014 "),bQ=a("a"),VOo=o("FSMTForConditionalGeneration"),XOo=o(" (FairSeq Machine-Translation model)"),zOo=l(),a4=a("li"),i4e=a("strong"),QOo=o("funnel"),WOo=o(" \u2014 "),FQ=a("a"),UOo=o("FunnelForPreTraining"),HOo=o(" (Funnel Transformer model)"),JOo=l(),n4=a("li"),d4e=a("strong"),YOo=o("gpt2"),ZOo=o(" \u2014 "),TQ=a("a"),KOo=o("GPT2LMHeadModel"),eVo=o(" (OpenAI GPT-2 model)"),oVo=l(),s4=a("li"),c4e=a("strong"),rVo=o("ibert"),tVo=o(" \u2014 "),MQ=a("a"),aVo=o("IBertForMaskedLM"),nVo=o(" (I-BERT model)"),sVo=l(),l4=a("li"),f4e=a("strong"),lVo=o("layoutlm"),iVo=o(" \u2014 "),EQ=a("a"),dVo=o("LayoutLMForMaskedLM"),cVo=o(" (LayoutLM model)"),fVo=l(),i4=a("li"),m4e=a("strong"),mVo=o("longformer"),gVo=o(" \u2014 "),CQ=a("a"),hVo=o("LongformerForMaskedLM"),uVo=o(" (Longformer model)"),pVo=l(),d4=a("li"),g4e=a("strong"),_Vo=o("luke"),vVo=o(" \u2014 "),wQ=a("a"),bVo=o("LukeForMaskedLM"),FVo=o(" (LUKE model)"),TVo=l(),c4=a("li"),h4e=a("strong"),MVo=o("lxmert"),EVo=o(" \u2014 "),AQ=a("a"),CVo=o("LxmertForPreTraining"),wVo=o(" (LXMERT model)"),AVo=l(),f4=a("li"),u4e=a("strong"),LVo=o("megatron-bert"),yVo=o(" \u2014 "),LQ=a("a"),xVo=o("MegatronBertForPreTraining"),$Vo=o(" (Megatron-BERT model)"),kVo=l(),m4=a("li"),p4e=a("strong"),SVo=o("mobilebert"),RVo=o(" \u2014 "),yQ=a("a"),PVo=o("MobileBertForPreTraining"),BVo=o(" (MobileBERT model)"),IVo=l(),g4=a("li"),_4e=a("strong"),NVo=o("mpnet"),qVo=o(" \u2014 "),xQ=a("a"),jVo=o("MPNetForMaskedLM"),DVo=o(" (MPNet model)"),GVo=l(),h4=a("li"),v4e=a("strong"),OVo=o("mvp"),VVo=o(" \u2014 "),$Q=a("a"),XVo=o("MvpForConditionalGeneration"),zVo=o(" (MVP model)"),QVo=l(),u4=a("li"),b4e=a("strong"),WVo=o("nezha"),UVo=o(" \u2014 "),kQ=a("a"),HVo=o("NezhaForPreTraining"),JVo=o(" (Nezha model)"),YVo=l(),p4=a("li"),F4e=a("strong"),ZVo=o("openai-gpt"),KVo=o(" \u2014 "),SQ=a("a"),eXo=o("OpenAIGPTLMHeadModel"),oXo=o(" (OpenAI GPT model)"),rXo=l(),_4=a("li"),T4e=a("strong"),tXo=o("retribert"),aXo=o(" \u2014 "),RQ=a("a"),nXo=o("RetriBertModel"),sXo=o(" (RetriBERT model)"),lXo=l(),v4=a("li"),M4e=a("strong"),iXo=o("roberta"),dXo=o(" \u2014 "),PQ=a("a"),cXo=o("RobertaForMaskedLM"),fXo=o(" (RoBERTa model)"),mXo=l(),b4=a("li"),E4e=a("strong"),gXo=o("splinter"),hXo=o(" \u2014 "),BQ=a("a"),uXo=o("SplinterForPreTraining"),pXo=o(" (Splinter model)"),_Xo=l(),F4=a("li"),C4e=a("strong"),vXo=o("squeezebert"),bXo=o(" \u2014 "),IQ=a("a"),FXo=o("SqueezeBertForMaskedLM"),TXo=o(" (SqueezeBERT model)"),MXo=l(),T4=a("li"),w4e=a("strong"),EXo=o("t5"),CXo=o(" \u2014 "),NQ=a("a"),wXo=o("T5ForConditionalGeneration"),AXo=o(" (T5 model)"),LXo=l(),M4=a("li"),A4e=a("strong"),yXo=o("tapas"),xXo=o(" \u2014 "),qQ=a("a"),$Xo=o("TapasForMaskedLM"),kXo=o(" (TAPAS model)"),SXo=l(),E4=a("li"),L4e=a("strong"),RXo=o("transfo-xl"),PXo=o(" \u2014 "),jQ=a("a"),BXo=o("TransfoXLLMHeadModel"),IXo=o(" (Transformer-XL model)"),NXo=l(),C4=a("li"),y4e=a("strong"),qXo=o("unispeech"),jXo=o(" \u2014 "),DQ=a("a"),DXo=o("UniSpeechForPreTraining"),GXo=o(" (UniSpeech model)"),OXo=l(),w4=a("li"),x4e=a("strong"),VXo=o("unispeech-sat"),XXo=o(" \u2014 "),GQ=a("a"),zXo=o("UniSpeechSatForPreTraining"),QXo=o(" (UniSpeechSat model)"),WXo=l(),A4=a("li"),$4e=a("strong"),UXo=o("videomae"),HXo=o(" \u2014 "),OQ=a("a"),JXo=o("VideoMAEForPreTraining"),YXo=o(" (VideoMAE model)"),ZXo=l(),L4=a("li"),k4e=a("strong"),KXo=o("visual_bert"),ezo=o(" \u2014 "),VQ=a("a"),ozo=o("VisualBertForPreTraining"),rzo=o(" (VisualBERT model)"),tzo=l(),y4=a("li"),S4e=a("strong"),azo=o("vit_mae"),nzo=o(" \u2014 "),XQ=a("a"),szo=o("ViTMAEForPreTraining"),lzo=o(" (ViTMAE model)"),izo=l(),x4=a("li"),R4e=a("strong"),dzo=o("wav2vec2"),czo=o(" \u2014 "),zQ=a("a"),fzo=o("Wav2Vec2ForPreTraining"),mzo=o(" (Wav2Vec2 model)"),gzo=l(),$4=a("li"),P4e=a("strong"),hzo=o("wav2vec2-conformer"),uzo=o(" \u2014 "),QQ=a("a"),pzo=o("Wav2Vec2ConformerForPreTraining"),_zo=o(" (Wav2Vec2-Conformer model)"),vzo=l(),k4=a("li"),B4e=a("strong"),bzo=o("xlm"),Fzo=o(" \u2014 "),WQ=a("a"),Tzo=o("XLMWithLMHeadModel"),Mzo=o(" (XLM model)"),Ezo=l(),S4=a("li"),I4e=a("strong"),Czo=o("xlm-roberta"),wzo=o(" \u2014 "),UQ=a("a"),Azo=o("XLMRobertaForMaskedLM"),Lzo=o(" (XLM-RoBERTa model)"),yzo=l(),R4=a("li"),N4e=a("strong"),xzo=o("xlm-roberta-xl"),$zo=o(" \u2014 "),HQ=a("a"),kzo=o("XLMRobertaXLForMaskedLM"),Szo=o(" (XLM-RoBERTa-XL model)"),Rzo=l(),P4=a("li"),q4e=a("strong"),Pzo=o("xlnet"),Bzo=o(" \u2014 "),JQ=a("a"),Izo=o("XLNetLMHeadModel"),Nzo=o(" (XLNet model)"),qzo=l(),B4=a("p"),jzo=o("The model is set in evaluation mode by default using "),j4e=a("code"),Dzo=o("model.eval()"),Gzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D4e=a("code"),Ozo=o("model.train()"),Vzo=l(),F(I4.$$.fragment),Roo=l(),xd=a("h2"),N4=a("a"),G4e=a("span"),F(c$.$$.fragment),Xzo=l(),O4e=a("span"),zzo=o("AutoModelForCausalLM"),Poo=l(),No=a("div"),F(f$.$$.fragment),Qzo=l(),$d=a("p"),Wzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),YQ=a("a"),Uzo=o("from_pretrained()"),Hzo=o(" class method or the "),ZQ=a("a"),Jzo=o("from_config()"),Yzo=o(` class
method.`),Zzo=l(),m$=a("p"),Kzo=o("This class cannot be instantiated directly using "),V4e=a("code"),eQo=o("__init__()"),oQo=o(" (throws an error)."),rQo=l(),Tt=a("div"),F(g$.$$.fragment),tQo=l(),X4e=a("p"),aQo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),nQo=l(),kd=a("p"),sQo=o(`Note:
Loading a model from its configuration file does `),z4e=a("strong"),lQo=o("not"),iQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=a("a"),dQo=o("from_pretrained()"),cQo=o(" to load the model weights."),fQo=l(),F(q4.$$.fragment),mQo=l(),oo=a("div"),F(h$.$$.fragment),gQo=l(),Q4e=a("p"),hQo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),uQo=l(),rn=a("p"),pQo=o("The model class to instantiate is selected based on the "),W4e=a("code"),_Qo=o("model_type"),vQo=o(` property of the config object (either
passed as an argument or loaded from `),U4e=a("code"),bQo=o("pretrained_model_name_or_path"),FQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H4e=a("code"),TQo=o("pretrained_model_name_or_path"),MQo=o(":"),EQo=l(),Q=a("ul"),j4=a("li"),J4e=a("strong"),CQo=o("bart"),wQo=o(" \u2014 "),eW=a("a"),AQo=o("BartForCausalLM"),LQo=o(" (BART model)"),yQo=l(),D4=a("li"),Y4e=a("strong"),xQo=o("bert"),$Qo=o(" \u2014 "),oW=a("a"),kQo=o("BertLMHeadModel"),SQo=o(" (BERT model)"),RQo=l(),G4=a("li"),Z4e=a("strong"),PQo=o("bert-generation"),BQo=o(" \u2014 "),rW=a("a"),IQo=o("BertGenerationDecoder"),NQo=o(" (Bert Generation model)"),qQo=l(),O4=a("li"),K4e=a("strong"),jQo=o("big_bird"),DQo=o(" \u2014 "),tW=a("a"),GQo=o("BigBirdForCausalLM"),OQo=o(" (BigBird model)"),VQo=l(),V4=a("li"),e1e=a("strong"),XQo=o("bigbird_pegasus"),zQo=o(" \u2014 "),aW=a("a"),QQo=o("BigBirdPegasusForCausalLM"),WQo=o(" (BigBird-Pegasus model)"),UQo=l(),X4=a("li"),o1e=a("strong"),HQo=o("blenderbot"),JQo=o(" \u2014 "),nW=a("a"),YQo=o("BlenderbotForCausalLM"),ZQo=o(" (Blenderbot model)"),KQo=l(),z4=a("li"),r1e=a("strong"),eWo=o("blenderbot-small"),oWo=o(" \u2014 "),sW=a("a"),rWo=o("BlenderbotSmallForCausalLM"),tWo=o(" (BlenderbotSmall model)"),aWo=l(),Q4=a("li"),t1e=a("strong"),nWo=o("bloom"),sWo=o(" \u2014 "),lW=a("a"),lWo=o("BloomForCausalLM"),iWo=o(" (BLOOM model)"),dWo=l(),W4=a("li"),a1e=a("strong"),cWo=o("camembert"),fWo=o(" \u2014 "),iW=a("a"),mWo=o("CamembertForCausalLM"),gWo=o(" (CamemBERT model)"),hWo=l(),U4=a("li"),n1e=a("strong"),uWo=o("codegen"),pWo=o(" \u2014 "),dW=a("a"),_Wo=o("CodeGenForCausalLM"),vWo=o(" (CodeGen model)"),bWo=l(),H4=a("li"),s1e=a("strong"),FWo=o("ctrl"),TWo=o(" \u2014 "),cW=a("a"),MWo=o("CTRLLMHeadModel"),EWo=o(" (CTRL model)"),CWo=l(),J4=a("li"),l1e=a("strong"),wWo=o("data2vec-text"),AWo=o(" \u2014 "),fW=a("a"),LWo=o("Data2VecTextForCausalLM"),yWo=o(" (Data2VecText model)"),xWo=l(),Y4=a("li"),i1e=a("strong"),$Wo=o("electra"),kWo=o(" \u2014 "),mW=a("a"),SWo=o("ElectraForCausalLM"),RWo=o(" (ELECTRA model)"),PWo=l(),Z4=a("li"),d1e=a("strong"),BWo=o("ernie"),IWo=o(" \u2014 "),gW=a("a"),NWo=o("ErnieForCausalLM"),qWo=o(" (ERNIE model)"),jWo=l(),K4=a("li"),c1e=a("strong"),DWo=o("gpt2"),GWo=o(" \u2014 "),hW=a("a"),OWo=o("GPT2LMHeadModel"),VWo=o(" (OpenAI GPT-2 model)"),XWo=l(),e1=a("li"),f1e=a("strong"),zWo=o("gpt_neo"),QWo=o(" \u2014 "),uW=a("a"),WWo=o("GPTNeoForCausalLM"),UWo=o(" (GPT Neo model)"),HWo=l(),o1=a("li"),m1e=a("strong"),JWo=o("gpt_neox"),YWo=o(" \u2014 "),pW=a("a"),ZWo=o("GPTNeoXForCausalLM"),KWo=o(" (GPT NeoX model)"),eUo=l(),r1=a("li"),g1e=a("strong"),oUo=o("gpt_neox_japanese"),rUo=o(" \u2014 "),_W=a("a"),tUo=o("GPTNeoXJapaneseForCausalLM"),aUo=o(" (GPT NeoX Japanese model)"),nUo=l(),t1=a("li"),h1e=a("strong"),sUo=o("gptj"),lUo=o(" \u2014 "),vW=a("a"),iUo=o("GPTJForCausalLM"),dUo=o(" (GPT-J model)"),cUo=l(),a1=a("li"),u1e=a("strong"),fUo=o("marian"),mUo=o(" \u2014 "),bW=a("a"),gUo=o("MarianForCausalLM"),hUo=o(" (Marian model)"),uUo=l(),n1=a("li"),p1e=a("strong"),pUo=o("mbart"),_Uo=o(" \u2014 "),FW=a("a"),vUo=o("MBartForCausalLM"),bUo=o(" (mBART model)"),FUo=l(),s1=a("li"),_1e=a("strong"),TUo=o("megatron-bert"),MUo=o(" \u2014 "),TW=a("a"),EUo=o("MegatronBertForCausalLM"),CUo=o(" (Megatron-BERT model)"),wUo=l(),l1=a("li"),v1e=a("strong"),AUo=o("mvp"),LUo=o(" \u2014 "),MW=a("a"),yUo=o("MvpForCausalLM"),xUo=o(" (MVP model)"),$Uo=l(),i1=a("li"),b1e=a("strong"),kUo=o("openai-gpt"),SUo=o(" \u2014 "),EW=a("a"),RUo=o("OpenAIGPTLMHeadModel"),PUo=o(" (OpenAI GPT model)"),BUo=l(),d1=a("li"),F1e=a("strong"),IUo=o("opt"),NUo=o(" \u2014 "),CW=a("a"),qUo=o("OPTForCausalLM"),jUo=o(" (OPT model)"),DUo=l(),c1=a("li"),T1e=a("strong"),GUo=o("pegasus"),OUo=o(" \u2014 "),wW=a("a"),VUo=o("PegasusForCausalLM"),XUo=o(" (Pegasus model)"),zUo=l(),f1=a("li"),M1e=a("strong"),QUo=o("plbart"),WUo=o(" \u2014 "),AW=a("a"),UUo=o("PLBartForCausalLM"),HUo=o(" (PLBart model)"),JUo=l(),m1=a("li"),E1e=a("strong"),YUo=o("prophetnet"),ZUo=o(" \u2014 "),LW=a("a"),KUo=o("ProphetNetForCausalLM"),eHo=o(" (ProphetNet model)"),oHo=l(),g1=a("li"),C1e=a("strong"),rHo=o("qdqbert"),tHo=o(" \u2014 "),yW=a("a"),aHo=o("QDQBertLMHeadModel"),nHo=o(" (QDQBert model)"),sHo=l(),h1=a("li"),w1e=a("strong"),lHo=o("reformer"),iHo=o(" \u2014 "),xW=a("a"),dHo=o("ReformerModelWithLMHead"),cHo=o(" (Reformer model)"),fHo=l(),u1=a("li"),A1e=a("strong"),mHo=o("rembert"),gHo=o(" \u2014 "),$W=a("a"),hHo=o("RemBertForCausalLM"),uHo=o(" (RemBERT model)"),pHo=l(),p1=a("li"),L1e=a("strong"),_Ho=o("roberta"),vHo=o(" \u2014 "),kW=a("a"),bHo=o("RobertaForCausalLM"),FHo=o(" (RoBERTa model)"),THo=l(),_1=a("li"),y1e=a("strong"),MHo=o("roformer"),EHo=o(" \u2014 "),SW=a("a"),CHo=o("RoFormerForCausalLM"),wHo=o(" (RoFormer model)"),AHo=l(),v1=a("li"),x1e=a("strong"),LHo=o("speech_to_text_2"),yHo=o(" \u2014 "),RW=a("a"),xHo=o("Speech2Text2ForCausalLM"),$Ho=o(" (Speech2Text2 model)"),kHo=l(),b1=a("li"),$1e=a("strong"),SHo=o("transfo-xl"),RHo=o(" \u2014 "),PW=a("a"),PHo=o("TransfoXLLMHeadModel"),BHo=o(" (Transformer-XL model)"),IHo=l(),F1=a("li"),k1e=a("strong"),NHo=o("trocr"),qHo=o(" \u2014 "),BW=a("a"),jHo=o("TrOCRForCausalLM"),DHo=o(" (TrOCR model)"),GHo=l(),T1=a("li"),S1e=a("strong"),OHo=o("xglm"),VHo=o(" \u2014 "),IW=a("a"),XHo=o("XGLMForCausalLM"),zHo=o(" (XGLM model)"),QHo=l(),M1=a("li"),R1e=a("strong"),WHo=o("xlm"),UHo=o(" \u2014 "),NW=a("a"),HHo=o("XLMWithLMHeadModel"),JHo=o(" (XLM model)"),YHo=l(),E1=a("li"),P1e=a("strong"),ZHo=o("xlm-prophetnet"),KHo=o(" \u2014 "),qW=a("a"),eJo=o("XLMProphetNetForCausalLM"),oJo=o(" (XLM-ProphetNet model)"),rJo=l(),C1=a("li"),B1e=a("strong"),tJo=o("xlm-roberta"),aJo=o(" \u2014 "),jW=a("a"),nJo=o("XLMRobertaForCausalLM"),sJo=o(" (XLM-RoBERTa model)"),lJo=l(),w1=a("li"),I1e=a("strong"),iJo=o("xlm-roberta-xl"),dJo=o(" \u2014 "),DW=a("a"),cJo=o("XLMRobertaXLForCausalLM"),fJo=o(" (XLM-RoBERTa-XL model)"),mJo=l(),A1=a("li"),N1e=a("strong"),gJo=o("xlnet"),hJo=o(" \u2014 "),GW=a("a"),uJo=o("XLNetLMHeadModel"),pJo=o(" (XLNet model)"),_Jo=l(),L1=a("p"),vJo=o("The model is set in evaluation mode by default using "),q1e=a("code"),bJo=o("model.eval()"),FJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j1e=a("code"),TJo=o("model.train()"),MJo=l(),F(y1.$$.fragment),Boo=l(),Sd=a("h2"),x1=a("a"),D1e=a("span"),F(u$.$$.fragment),EJo=l(),G1e=a("span"),CJo=o("AutoModelForMaskedLM"),Ioo=l(),qo=a("div"),F(p$.$$.fragment),wJo=l(),Rd=a("p"),AJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),OW=a("a"),LJo=o("from_pretrained()"),yJo=o(" class method or the "),VW=a("a"),xJo=o("from_config()"),$Jo=o(` class
method.`),kJo=l(),_$=a("p"),SJo=o("This class cannot be instantiated directly using "),O1e=a("code"),RJo=o("__init__()"),PJo=o(" (throws an error)."),BJo=l(),Mt=a("div"),F(v$.$$.fragment),IJo=l(),V1e=a("p"),NJo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),qJo=l(),Pd=a("p"),jJo=o(`Note:
Loading a model from its configuration file does `),X1e=a("strong"),DJo=o("not"),GJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=a("a"),OJo=o("from_pretrained()"),VJo=o(" to load the model weights."),XJo=l(),F($1.$$.fragment),zJo=l(),ro=a("div"),F(b$.$$.fragment),QJo=l(),z1e=a("p"),WJo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),UJo=l(),tn=a("p"),HJo=o("The model class to instantiate is selected based on the "),Q1e=a("code"),JJo=o("model_type"),YJo=o(` property of the config object (either
passed as an argument or loaded from `),W1e=a("code"),ZJo=o("pretrained_model_name_or_path"),KJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=a("code"),eYo=o("pretrained_model_name_or_path"),oYo=o(":"),rYo=l(),J=a("ul"),k1=a("li"),H1e=a("strong"),tYo=o("albert"),aYo=o(" \u2014 "),zW=a("a"),nYo=o("AlbertForMaskedLM"),sYo=o(" (ALBERT model)"),lYo=l(),S1=a("li"),J1e=a("strong"),iYo=o("bart"),dYo=o(" \u2014 "),QW=a("a"),cYo=o("BartForConditionalGeneration"),fYo=o(" (BART model)"),mYo=l(),R1=a("li"),Y1e=a("strong"),gYo=o("bert"),hYo=o(" \u2014 "),WW=a("a"),uYo=o("BertForMaskedLM"),pYo=o(" (BERT model)"),_Yo=l(),P1=a("li"),Z1e=a("strong"),vYo=o("big_bird"),bYo=o(" \u2014 "),UW=a("a"),FYo=o("BigBirdForMaskedLM"),TYo=o(" (BigBird model)"),MYo=l(),B1=a("li"),K1e=a("strong"),EYo=o("camembert"),CYo=o(" \u2014 "),HW=a("a"),wYo=o("CamembertForMaskedLM"),AYo=o(" (CamemBERT model)"),LYo=l(),I1=a("li"),ebe=a("strong"),yYo=o("convbert"),xYo=o(" \u2014 "),JW=a("a"),$Yo=o("ConvBertForMaskedLM"),kYo=o(" (ConvBERT model)"),SYo=l(),N1=a("li"),obe=a("strong"),RYo=o("data2vec-text"),PYo=o(" \u2014 "),YW=a("a"),BYo=o("Data2VecTextForMaskedLM"),IYo=o(" (Data2VecText model)"),NYo=l(),q1=a("li"),rbe=a("strong"),qYo=o("deberta"),jYo=o(" \u2014 "),ZW=a("a"),DYo=o("DebertaForMaskedLM"),GYo=o(" (DeBERTa model)"),OYo=l(),j1=a("li"),tbe=a("strong"),VYo=o("deberta-v2"),XYo=o(" \u2014 "),KW=a("a"),zYo=o("DebertaV2ForMaskedLM"),QYo=o(" (DeBERTa-v2 model)"),WYo=l(),D1=a("li"),abe=a("strong"),UYo=o("distilbert"),HYo=o(" \u2014 "),eU=a("a"),JYo=o("DistilBertForMaskedLM"),YYo=o(" (DistilBERT model)"),ZYo=l(),G1=a("li"),nbe=a("strong"),KYo=o("electra"),eZo=o(" \u2014 "),oU=a("a"),oZo=o("ElectraForMaskedLM"),rZo=o(" (ELECTRA model)"),tZo=l(),O1=a("li"),sbe=a("strong"),aZo=o("ernie"),nZo=o(" \u2014 "),rU=a("a"),sZo=o("ErnieForMaskedLM"),lZo=o(" (ERNIE model)"),iZo=l(),V1=a("li"),lbe=a("strong"),dZo=o("flaubert"),cZo=o(" \u2014 "),tU=a("a"),fZo=o("FlaubertWithLMHeadModel"),mZo=o(" (FlauBERT model)"),gZo=l(),X1=a("li"),ibe=a("strong"),hZo=o("fnet"),uZo=o(" \u2014 "),aU=a("a"),pZo=o("FNetForMaskedLM"),_Zo=o(" (FNet model)"),vZo=l(),z1=a("li"),dbe=a("strong"),bZo=o("funnel"),FZo=o(" \u2014 "),nU=a("a"),TZo=o("FunnelForMaskedLM"),MZo=o(" (Funnel Transformer model)"),EZo=l(),Q1=a("li"),cbe=a("strong"),CZo=o("ibert"),wZo=o(" \u2014 "),sU=a("a"),AZo=o("IBertForMaskedLM"),LZo=o(" (I-BERT model)"),yZo=l(),W1=a("li"),fbe=a("strong"),xZo=o("layoutlm"),$Zo=o(" \u2014 "),lU=a("a"),kZo=o("LayoutLMForMaskedLM"),SZo=o(" (LayoutLM model)"),RZo=l(),U1=a("li"),mbe=a("strong"),PZo=o("longformer"),BZo=o(" \u2014 "),iU=a("a"),IZo=o("LongformerForMaskedLM"),NZo=o(" (Longformer model)"),qZo=l(),H1=a("li"),gbe=a("strong"),jZo=o("luke"),DZo=o(" \u2014 "),dU=a("a"),GZo=o("LukeForMaskedLM"),OZo=o(" (LUKE model)"),VZo=l(),J1=a("li"),hbe=a("strong"),XZo=o("mbart"),zZo=o(" \u2014 "),cU=a("a"),QZo=o("MBartForConditionalGeneration"),WZo=o(" (mBART model)"),UZo=l(),Y1=a("li"),ube=a("strong"),HZo=o("megatron-bert"),JZo=o(" \u2014 "),fU=a("a"),YZo=o("MegatronBertForMaskedLM"),ZZo=o(" (Megatron-BERT model)"),KZo=l(),Z1=a("li"),pbe=a("strong"),eKo=o("mobilebert"),oKo=o(" \u2014 "),mU=a("a"),rKo=o("MobileBertForMaskedLM"),tKo=o(" (MobileBERT model)"),aKo=l(),K1=a("li"),_be=a("strong"),nKo=o("mpnet"),sKo=o(" \u2014 "),gU=a("a"),lKo=o("MPNetForMaskedLM"),iKo=o(" (MPNet model)"),dKo=l(),eb=a("li"),vbe=a("strong"),cKo=o("mvp"),fKo=o(" \u2014 "),hU=a("a"),mKo=o("MvpForConditionalGeneration"),gKo=o(" (MVP model)"),hKo=l(),ob=a("li"),bbe=a("strong"),uKo=o("nezha"),pKo=o(" \u2014 "),uU=a("a"),_Ko=o("NezhaForMaskedLM"),vKo=o(" (Nezha model)"),bKo=l(),rb=a("li"),Fbe=a("strong"),FKo=o("nystromformer"),TKo=o(" \u2014 "),pU=a("a"),MKo=o("NystromformerForMaskedLM"),EKo=o(" (Nystr\xF6mformer model)"),CKo=l(),tb=a("li"),Tbe=a("strong"),wKo=o("perceiver"),AKo=o(" \u2014 "),_U=a("a"),LKo=o("PerceiverForMaskedLM"),yKo=o(" (Perceiver model)"),xKo=l(),ab=a("li"),Mbe=a("strong"),$Ko=o("qdqbert"),kKo=o(" \u2014 "),vU=a("a"),SKo=o("QDQBertForMaskedLM"),RKo=o(" (QDQBert model)"),PKo=l(),nb=a("li"),Ebe=a("strong"),BKo=o("reformer"),IKo=o(" \u2014 "),bU=a("a"),NKo=o("ReformerForMaskedLM"),qKo=o(" (Reformer model)"),jKo=l(),sb=a("li"),Cbe=a("strong"),DKo=o("rembert"),GKo=o(" \u2014 "),FU=a("a"),OKo=o("RemBertForMaskedLM"),VKo=o(" (RemBERT model)"),XKo=l(),lb=a("li"),wbe=a("strong"),zKo=o("roberta"),QKo=o(" \u2014 "),TU=a("a"),WKo=o("RobertaForMaskedLM"),UKo=o(" (RoBERTa model)"),HKo=l(),ib=a("li"),Abe=a("strong"),JKo=o("roformer"),YKo=o(" \u2014 "),MU=a("a"),ZKo=o("RoFormerForMaskedLM"),KKo=o(" (RoFormer model)"),eer=l(),db=a("li"),Lbe=a("strong"),oer=o("squeezebert"),rer=o(" \u2014 "),EU=a("a"),ter=o("SqueezeBertForMaskedLM"),aer=o(" (SqueezeBERT model)"),ner=l(),cb=a("li"),ybe=a("strong"),ser=o("tapas"),ler=o(" \u2014 "),CU=a("a"),ier=o("TapasForMaskedLM"),der=o(" (TAPAS model)"),cer=l(),fb=a("li"),xbe=a("strong"),fer=o("wav2vec2"),mer=o(" \u2014 "),$be=a("code"),ger=o("Wav2Vec2ForMaskedLM"),her=o(" (Wav2Vec2 model)"),uer=l(),mb=a("li"),kbe=a("strong"),per=o("xlm"),_er=o(" \u2014 "),wU=a("a"),ver=o("XLMWithLMHeadModel"),ber=o(" (XLM model)"),Fer=l(),gb=a("li"),Sbe=a("strong"),Ter=o("xlm-roberta"),Mer=o(" \u2014 "),AU=a("a"),Eer=o("XLMRobertaForMaskedLM"),Cer=o(" (XLM-RoBERTa model)"),wer=l(),hb=a("li"),Rbe=a("strong"),Aer=o("xlm-roberta-xl"),Ler=o(" \u2014 "),LU=a("a"),yer=o("XLMRobertaXLForMaskedLM"),xer=o(" (XLM-RoBERTa-XL model)"),$er=l(),ub=a("li"),Pbe=a("strong"),ker=o("yoso"),Ser=o(" \u2014 "),yU=a("a"),Rer=o("YosoForMaskedLM"),Per=o(" (YOSO model)"),Ber=l(),pb=a("p"),Ier=o("The model is set in evaluation mode by default using "),Bbe=a("code"),Ner=o("model.eval()"),qer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ibe=a("code"),jer=o("model.train()"),Der=l(),F(_b.$$.fragment),Noo=l(),Bd=a("h2"),vb=a("a"),Nbe=a("span"),F(F$.$$.fragment),Ger=l(),qbe=a("span"),Oer=o("AutoModelForSeq2SeqLM"),qoo=l(),jo=a("div"),F(T$.$$.fragment),Ver=l(),Id=a("p"),Xer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),xU=a("a"),zer=o("from_pretrained()"),Qer=o(" class method or the "),$U=a("a"),Wer=o("from_config()"),Uer=o(` class
method.`),Her=l(),M$=a("p"),Jer=o("This class cannot be instantiated directly using "),jbe=a("code"),Yer=o("__init__()"),Zer=o(" (throws an error)."),Ker=l(),Et=a("div"),F(E$.$$.fragment),eor=l(),Dbe=a("p"),oor=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ror=l(),Nd=a("p"),tor=o(`Note:
Loading a model from its configuration file does `),Gbe=a("strong"),aor=o("not"),nor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kU=a("a"),sor=o("from_pretrained()"),lor=o(" to load the model weights."),ior=l(),F(bb.$$.fragment),dor=l(),to=a("div"),F(C$.$$.fragment),cor=l(),Obe=a("p"),mor=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),gor=l(),an=a("p"),hor=o("The model class to instantiate is selected based on the "),Vbe=a("code"),uor=o("model_type"),por=o(` property of the config object (either
passed as an argument or loaded from `),Xbe=a("code"),_or=o("pretrained_model_name_or_path"),vor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zbe=a("code"),bor=o("pretrained_model_name_or_path"),For=o(":"),Tor=l(),me=a("ul"),Fb=a("li"),Qbe=a("strong"),Mor=o("bart"),Eor=o(" \u2014 "),SU=a("a"),Cor=o("BartForConditionalGeneration"),wor=o(" (BART model)"),Aor=l(),Tb=a("li"),Wbe=a("strong"),Lor=o("bigbird_pegasus"),yor=o(" \u2014 "),RU=a("a"),xor=o("BigBirdPegasusForConditionalGeneration"),$or=o(" (BigBird-Pegasus model)"),kor=l(),Mb=a("li"),Ube=a("strong"),Sor=o("blenderbot"),Ror=o(" \u2014 "),PU=a("a"),Por=o("BlenderbotForConditionalGeneration"),Bor=o(" (Blenderbot model)"),Ior=l(),Eb=a("li"),Hbe=a("strong"),Nor=o("blenderbot-small"),qor=o(" \u2014 "),BU=a("a"),jor=o("BlenderbotSmallForConditionalGeneration"),Dor=o(" (BlenderbotSmall model)"),Gor=l(),Cb=a("li"),Jbe=a("strong"),Oor=o("encoder-decoder"),Vor=o(" \u2014 "),IU=a("a"),Xor=o("EncoderDecoderModel"),zor=o(" (Encoder decoder model)"),Qor=l(),wb=a("li"),Ybe=a("strong"),Wor=o("fsmt"),Uor=o(" \u2014 "),NU=a("a"),Hor=o("FSMTForConditionalGeneration"),Jor=o(" (FairSeq Machine-Translation model)"),Yor=l(),Ab=a("li"),Zbe=a("strong"),Zor=o("led"),Kor=o(" \u2014 "),qU=a("a"),err=o("LEDForConditionalGeneration"),orr=o(" (LED model)"),rrr=l(),Lb=a("li"),Kbe=a("strong"),trr=o("longt5"),arr=o(" \u2014 "),jU=a("a"),nrr=o("LongT5ForConditionalGeneration"),srr=o(" (LongT5 model)"),lrr=l(),yb=a("li"),e3e=a("strong"),irr=o("m2m_100"),drr=o(" \u2014 "),DU=a("a"),crr=o("M2M100ForConditionalGeneration"),frr=o(" (M2M100 model)"),mrr=l(),xb=a("li"),o3e=a("strong"),grr=o("marian"),hrr=o(" \u2014 "),GU=a("a"),urr=o("MarianMTModel"),prr=o(" (Marian model)"),_rr=l(),$b=a("li"),r3e=a("strong"),vrr=o("mbart"),brr=o(" \u2014 "),OU=a("a"),Frr=o("MBartForConditionalGeneration"),Trr=o(" (mBART model)"),Mrr=l(),kb=a("li"),t3e=a("strong"),Err=o("mt5"),Crr=o(" \u2014 "),VU=a("a"),wrr=o("MT5ForConditionalGeneration"),Arr=o(" (MT5 model)"),Lrr=l(),Sb=a("li"),a3e=a("strong"),yrr=o("mvp"),xrr=o(" \u2014 "),XU=a("a"),$rr=o("MvpForConditionalGeneration"),krr=o(" (MVP model)"),Srr=l(),Rb=a("li"),n3e=a("strong"),Rrr=o("nllb"),Prr=o(" \u2014 "),zU=a("a"),Brr=o("M2M100ForConditionalGeneration"),Irr=o(" (NLLB model)"),Nrr=l(),Pb=a("li"),s3e=a("strong"),qrr=o("pegasus"),jrr=o(" \u2014 "),QU=a("a"),Drr=o("PegasusForConditionalGeneration"),Grr=o(" (Pegasus model)"),Orr=l(),Bb=a("li"),l3e=a("strong"),Vrr=o("pegasus_x"),Xrr=o(" \u2014 "),WU=a("a"),zrr=o("PegasusXForConditionalGeneration"),Qrr=o(" (PEGASUS-X model)"),Wrr=l(),Ib=a("li"),i3e=a("strong"),Urr=o("plbart"),Hrr=o(" \u2014 "),UU=a("a"),Jrr=o("PLBartForConditionalGeneration"),Yrr=o(" (PLBart model)"),Zrr=l(),Nb=a("li"),d3e=a("strong"),Krr=o("prophetnet"),etr=o(" \u2014 "),HU=a("a"),otr=o("ProphetNetForConditionalGeneration"),rtr=o(" (ProphetNet model)"),ttr=l(),qb=a("li"),c3e=a("strong"),atr=o("t5"),ntr=o(" \u2014 "),JU=a("a"),str=o("T5ForConditionalGeneration"),ltr=o(" (T5 model)"),itr=l(),jb=a("li"),f3e=a("strong"),dtr=o("xlm-prophetnet"),ctr=o(" \u2014 "),YU=a("a"),ftr=o("XLMProphetNetForConditionalGeneration"),mtr=o(" (XLM-ProphetNet model)"),gtr=l(),Db=a("p"),htr=o("The model is set in evaluation mode by default using "),m3e=a("code"),utr=o("model.eval()"),ptr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g3e=a("code"),_tr=o("model.train()"),vtr=l(),F(Gb.$$.fragment),joo=l(),qd=a("h2"),Ob=a("a"),h3e=a("span"),F(w$.$$.fragment),btr=l(),u3e=a("span"),Ftr=o("AutoModelForSequenceClassification"),Doo=l(),Do=a("div"),F(A$.$$.fragment),Ttr=l(),jd=a("p"),Mtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZU=a("a"),Etr=o("from_pretrained()"),Ctr=o(" class method or the "),KU=a("a"),wtr=o("from_config()"),Atr=o(` class
method.`),Ltr=l(),L$=a("p"),ytr=o("This class cannot be instantiated directly using "),p3e=a("code"),xtr=o("__init__()"),$tr=o(" (throws an error)."),ktr=l(),Ct=a("div"),F(y$.$$.fragment),Str=l(),_3e=a("p"),Rtr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Ptr=l(),Dd=a("p"),Btr=o(`Note:
Loading a model from its configuration file does `),v3e=a("strong"),Itr=o("not"),Ntr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=a("a"),qtr=o("from_pretrained()"),jtr=o(" to load the model weights."),Dtr=l(),F(Vb.$$.fragment),Gtr=l(),ao=a("div"),F(x$.$$.fragment),Otr=l(),b3e=a("p"),Vtr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Xtr=l(),nn=a("p"),ztr=o("The model class to instantiate is selected based on the "),F3e=a("code"),Qtr=o("model_type"),Wtr=o(` property of the config object (either
passed as an argument or loaded from `),T3e=a("code"),Utr=o("pretrained_model_name_or_path"),Htr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M3e=a("code"),Jtr=o("pretrained_model_name_or_path"),Ytr=o(":"),Ztr=l(),q=a("ul"),Xb=a("li"),E3e=a("strong"),Ktr=o("albert"),ear=o(" \u2014 "),oH=a("a"),oar=o("AlbertForSequenceClassification"),rar=o(" (ALBERT model)"),tar=l(),zb=a("li"),C3e=a("strong"),aar=o("bart"),nar=o(" \u2014 "),rH=a("a"),sar=o("BartForSequenceClassification"),lar=o(" (BART model)"),iar=l(),Qb=a("li"),w3e=a("strong"),dar=o("bert"),car=o(" \u2014 "),tH=a("a"),far=o("BertForSequenceClassification"),mar=o(" (BERT model)"),gar=l(),Wb=a("li"),A3e=a("strong"),har=o("big_bird"),uar=o(" \u2014 "),aH=a("a"),par=o("BigBirdForSequenceClassification"),_ar=o(" (BigBird model)"),bar=l(),Ub=a("li"),L3e=a("strong"),Far=o("bigbird_pegasus"),Tar=o(" \u2014 "),nH=a("a"),Mar=o("BigBirdPegasusForSequenceClassification"),Ear=o(" (BigBird-Pegasus model)"),Car=l(),Hb=a("li"),y3e=a("strong"),war=o("bloom"),Aar=o(" \u2014 "),sH=a("a"),Lar=o("BloomForSequenceClassification"),yar=o(" (BLOOM model)"),xar=l(),Jb=a("li"),x3e=a("strong"),$ar=o("camembert"),kar=o(" \u2014 "),lH=a("a"),Sar=o("CamembertForSequenceClassification"),Rar=o(" (CamemBERT model)"),Par=l(),Yb=a("li"),$3e=a("strong"),Bar=o("canine"),Iar=o(" \u2014 "),iH=a("a"),Nar=o("CanineForSequenceClassification"),qar=o(" (CANINE model)"),jar=l(),Zb=a("li"),k3e=a("strong"),Dar=o("convbert"),Gar=o(" \u2014 "),dH=a("a"),Oar=o("ConvBertForSequenceClassification"),Var=o(" (ConvBERT model)"),Xar=l(),Kb=a("li"),S3e=a("strong"),zar=o("ctrl"),Qar=o(" \u2014 "),cH=a("a"),War=o("CTRLForSequenceClassification"),Uar=o(" (CTRL model)"),Har=l(),e3=a("li"),R3e=a("strong"),Jar=o("data2vec-text"),Yar=o(" \u2014 "),fH=a("a"),Zar=o("Data2VecTextForSequenceClassification"),Kar=o(" (Data2VecText model)"),enr=l(),o3=a("li"),P3e=a("strong"),onr=o("deberta"),rnr=o(" \u2014 "),mH=a("a"),tnr=o("DebertaForSequenceClassification"),anr=o(" (DeBERTa model)"),nnr=l(),r3=a("li"),B3e=a("strong"),snr=o("deberta-v2"),lnr=o(" \u2014 "),gH=a("a"),inr=o("DebertaV2ForSequenceClassification"),dnr=o(" (DeBERTa-v2 model)"),cnr=l(),t3=a("li"),I3e=a("strong"),fnr=o("distilbert"),mnr=o(" \u2014 "),hH=a("a"),gnr=o("DistilBertForSequenceClassification"),hnr=o(" (DistilBERT model)"),unr=l(),a3=a("li"),N3e=a("strong"),pnr=o("electra"),_nr=o(" \u2014 "),uH=a("a"),vnr=o("ElectraForSequenceClassification"),bnr=o(" (ELECTRA model)"),Fnr=l(),n3=a("li"),q3e=a("strong"),Tnr=o("ernie"),Mnr=o(" \u2014 "),pH=a("a"),Enr=o("ErnieForSequenceClassification"),Cnr=o(" (ERNIE model)"),wnr=l(),s3=a("li"),j3e=a("strong"),Anr=o("esm"),Lnr=o(" \u2014 "),_H=a("a"),ynr=o("EsmForSequenceClassification"),xnr=o(" (ESM model)"),$nr=l(),l3=a("li"),D3e=a("strong"),knr=o("flaubert"),Snr=o(" \u2014 "),vH=a("a"),Rnr=o("FlaubertForSequenceClassification"),Pnr=o(" (FlauBERT model)"),Bnr=l(),i3=a("li"),G3e=a("strong"),Inr=o("fnet"),Nnr=o(" \u2014 "),bH=a("a"),qnr=o("FNetForSequenceClassification"),jnr=o(" (FNet model)"),Dnr=l(),d3=a("li"),O3e=a("strong"),Gnr=o("funnel"),Onr=o(" \u2014 "),FH=a("a"),Vnr=o("FunnelForSequenceClassification"),Xnr=o(" (Funnel Transformer model)"),znr=l(),c3=a("li"),V3e=a("strong"),Qnr=o("gpt2"),Wnr=o(" \u2014 "),TH=a("a"),Unr=o("GPT2ForSequenceClassification"),Hnr=o(" (OpenAI GPT-2 model)"),Jnr=l(),f3=a("li"),X3e=a("strong"),Ynr=o("gpt_neo"),Znr=o(" \u2014 "),MH=a("a"),Knr=o("GPTNeoForSequenceClassification"),esr=o(" (GPT Neo model)"),osr=l(),m3=a("li"),z3e=a("strong"),rsr=o("gptj"),tsr=o(" \u2014 "),EH=a("a"),asr=o("GPTJForSequenceClassification"),nsr=o(" (GPT-J model)"),ssr=l(),g3=a("li"),Q3e=a("strong"),lsr=o("ibert"),isr=o(" \u2014 "),CH=a("a"),dsr=o("IBertForSequenceClassification"),csr=o(" (I-BERT model)"),fsr=l(),h3=a("li"),W3e=a("strong"),msr=o("layoutlm"),gsr=o(" \u2014 "),wH=a("a"),hsr=o("LayoutLMForSequenceClassification"),usr=o(" (LayoutLM model)"),psr=l(),u3=a("li"),U3e=a("strong"),_sr=o("layoutlmv2"),vsr=o(" \u2014 "),AH=a("a"),bsr=o("LayoutLMv2ForSequenceClassification"),Fsr=o(" (LayoutLMv2 model)"),Tsr=l(),p3=a("li"),H3e=a("strong"),Msr=o("layoutlmv3"),Esr=o(" \u2014 "),LH=a("a"),Csr=o("LayoutLMv3ForSequenceClassification"),wsr=o(" (LayoutLMv3 model)"),Asr=l(),_3=a("li"),J3e=a("strong"),Lsr=o("led"),ysr=o(" \u2014 "),yH=a("a"),xsr=o("LEDForSequenceClassification"),$sr=o(" (LED model)"),ksr=l(),v3=a("li"),Y3e=a("strong"),Ssr=o("longformer"),Rsr=o(" \u2014 "),xH=a("a"),Psr=o("LongformerForSequenceClassification"),Bsr=o(" (Longformer model)"),Isr=l(),b3=a("li"),Z3e=a("strong"),Nsr=o("luke"),qsr=o(" \u2014 "),$H=a("a"),jsr=o("LukeForSequenceClassification"),Dsr=o(" (LUKE model)"),Gsr=l(),F3=a("li"),K3e=a("strong"),Osr=o("markuplm"),Vsr=o(" \u2014 "),kH=a("a"),Xsr=o("MarkupLMForSequenceClassification"),zsr=o(" (MarkupLM model)"),Qsr=l(),T3=a("li"),e0e=a("strong"),Wsr=o("mbart"),Usr=o(" \u2014 "),SH=a("a"),Hsr=o("MBartForSequenceClassification"),Jsr=o(" (mBART model)"),Ysr=l(),M3=a("li"),o0e=a("strong"),Zsr=o("megatron-bert"),Ksr=o(" \u2014 "),RH=a("a"),elr=o("MegatronBertForSequenceClassification"),olr=o(" (Megatron-BERT model)"),rlr=l(),E3=a("li"),r0e=a("strong"),tlr=o("mobilebert"),alr=o(" \u2014 "),PH=a("a"),nlr=o("MobileBertForSequenceClassification"),slr=o(" (MobileBERT model)"),llr=l(),C3=a("li"),t0e=a("strong"),ilr=o("mpnet"),dlr=o(" \u2014 "),BH=a("a"),clr=o("MPNetForSequenceClassification"),flr=o(" (MPNet model)"),mlr=l(),w3=a("li"),a0e=a("strong"),glr=o("mvp"),hlr=o(" \u2014 "),IH=a("a"),ulr=o("MvpForSequenceClassification"),plr=o(" (MVP model)"),_lr=l(),A3=a("li"),n0e=a("strong"),vlr=o("nezha"),blr=o(" \u2014 "),NH=a("a"),Flr=o("NezhaForSequenceClassification"),Tlr=o(" (Nezha model)"),Mlr=l(),L3=a("li"),s0e=a("strong"),Elr=o("nystromformer"),Clr=o(" \u2014 "),qH=a("a"),wlr=o("NystromformerForSequenceClassification"),Alr=o(" (Nystr\xF6mformer model)"),Llr=l(),y3=a("li"),l0e=a("strong"),ylr=o("openai-gpt"),xlr=o(" \u2014 "),jH=a("a"),$lr=o("OpenAIGPTForSequenceClassification"),klr=o(" (OpenAI GPT model)"),Slr=l(),x3=a("li"),i0e=a("strong"),Rlr=o("opt"),Plr=o(" \u2014 "),DH=a("a"),Blr=o("OPTForSequenceClassification"),Ilr=o(" (OPT model)"),Nlr=l(),$3=a("li"),d0e=a("strong"),qlr=o("perceiver"),jlr=o(" \u2014 "),GH=a("a"),Dlr=o("PerceiverForSequenceClassification"),Glr=o(" (Perceiver model)"),Olr=l(),k3=a("li"),c0e=a("strong"),Vlr=o("plbart"),Xlr=o(" \u2014 "),OH=a("a"),zlr=o("PLBartForSequenceClassification"),Qlr=o(" (PLBart model)"),Wlr=l(),S3=a("li"),f0e=a("strong"),Ulr=o("qdqbert"),Hlr=o(" \u2014 "),VH=a("a"),Jlr=o("QDQBertForSequenceClassification"),Ylr=o(" (QDQBert model)"),Zlr=l(),R3=a("li"),m0e=a("strong"),Klr=o("reformer"),eir=o(" \u2014 "),XH=a("a"),oir=o("ReformerForSequenceClassification"),rir=o(" (Reformer model)"),tir=l(),P3=a("li"),g0e=a("strong"),air=o("rembert"),nir=o(" \u2014 "),zH=a("a"),sir=o("RemBertForSequenceClassification"),lir=o(" (RemBERT model)"),iir=l(),B3=a("li"),h0e=a("strong"),dir=o("roberta"),cir=o(" \u2014 "),QH=a("a"),fir=o("RobertaForSequenceClassification"),mir=o(" (RoBERTa model)"),gir=l(),I3=a("li"),u0e=a("strong"),hir=o("roformer"),uir=o(" \u2014 "),WH=a("a"),pir=o("RoFormerForSequenceClassification"),_ir=o(" (RoFormer model)"),vir=l(),N3=a("li"),p0e=a("strong"),bir=o("squeezebert"),Fir=o(" \u2014 "),UH=a("a"),Tir=o("SqueezeBertForSequenceClassification"),Mir=o(" (SqueezeBERT model)"),Eir=l(),q3=a("li"),_0e=a("strong"),Cir=o("tapas"),wir=o(" \u2014 "),HH=a("a"),Air=o("TapasForSequenceClassification"),Lir=o(" (TAPAS model)"),yir=l(),j3=a("li"),v0e=a("strong"),xir=o("transfo-xl"),$ir=o(" \u2014 "),JH=a("a"),kir=o("TransfoXLForSequenceClassification"),Sir=o(" (Transformer-XL model)"),Rir=l(),D3=a("li"),b0e=a("strong"),Pir=o("xlm"),Bir=o(" \u2014 "),YH=a("a"),Iir=o("XLMForSequenceClassification"),Nir=o(" (XLM model)"),qir=l(),G3=a("li"),F0e=a("strong"),jir=o("xlm-roberta"),Dir=o(" \u2014 "),ZH=a("a"),Gir=o("XLMRobertaForSequenceClassification"),Oir=o(" (XLM-RoBERTa model)"),Vir=l(),O3=a("li"),T0e=a("strong"),Xir=o("xlm-roberta-xl"),zir=o(" \u2014 "),KH=a("a"),Qir=o("XLMRobertaXLForSequenceClassification"),Wir=o(" (XLM-RoBERTa-XL model)"),Uir=l(),V3=a("li"),M0e=a("strong"),Hir=o("xlnet"),Jir=o(" \u2014 "),eJ=a("a"),Yir=o("XLNetForSequenceClassification"),Zir=o(" (XLNet model)"),Kir=l(),X3=a("li"),E0e=a("strong"),edr=o("yoso"),odr=o(" \u2014 "),oJ=a("a"),rdr=o("YosoForSequenceClassification"),tdr=o(" (YOSO model)"),adr=l(),z3=a("p"),ndr=o("The model is set in evaluation mode by default using "),C0e=a("code"),sdr=o("model.eval()"),ldr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w0e=a("code"),idr=o("model.train()"),ddr=l(),F(Q3.$$.fragment),Goo=l(),Gd=a("h2"),W3=a("a"),A0e=a("span"),F($$.$$.fragment),cdr=l(),L0e=a("span"),fdr=o("AutoModelForMultipleChoice"),Ooo=l(),Go=a("div"),F(k$.$$.fragment),mdr=l(),Od=a("p"),gdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rJ=a("a"),hdr=o("from_pretrained()"),udr=o(" class method or the "),tJ=a("a"),pdr=o("from_config()"),_dr=o(` class
method.`),vdr=l(),S$=a("p"),bdr=o("This class cannot be instantiated directly using "),y0e=a("code"),Fdr=o("__init__()"),Tdr=o(" (throws an error)."),Mdr=l(),wt=a("div"),F(R$.$$.fragment),Edr=l(),x0e=a("p"),Cdr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),wdr=l(),Vd=a("p"),Adr=o(`Note:
Loading a model from its configuration file does `),$0e=a("strong"),Ldr=o("not"),ydr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aJ=a("a"),xdr=o("from_pretrained()"),$dr=o(" to load the model weights."),kdr=l(),F(U3.$$.fragment),Sdr=l(),no=a("div"),F(P$.$$.fragment),Rdr=l(),k0e=a("p"),Pdr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Bdr=l(),sn=a("p"),Idr=o("The model class to instantiate is selected based on the "),S0e=a("code"),Ndr=o("model_type"),qdr=o(` property of the config object (either
passed as an argument or loaded from `),R0e=a("code"),jdr=o("pretrained_model_name_or_path"),Ddr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P0e=a("code"),Gdr=o("pretrained_model_name_or_path"),Odr=o(":"),Vdr=l(),K=a("ul"),H3=a("li"),B0e=a("strong"),Xdr=o("albert"),zdr=o(" \u2014 "),nJ=a("a"),Qdr=o("AlbertForMultipleChoice"),Wdr=o(" (ALBERT model)"),Udr=l(),J3=a("li"),I0e=a("strong"),Hdr=o("bert"),Jdr=o(" \u2014 "),sJ=a("a"),Ydr=o("BertForMultipleChoice"),Zdr=o(" (BERT model)"),Kdr=l(),Y3=a("li"),N0e=a("strong"),ecr=o("big_bird"),ocr=o(" \u2014 "),lJ=a("a"),rcr=o("BigBirdForMultipleChoice"),tcr=o(" (BigBird model)"),acr=l(),Z3=a("li"),q0e=a("strong"),ncr=o("camembert"),scr=o(" \u2014 "),iJ=a("a"),lcr=o("CamembertForMultipleChoice"),icr=o(" (CamemBERT model)"),dcr=l(),K3=a("li"),j0e=a("strong"),ccr=o("canine"),fcr=o(" \u2014 "),dJ=a("a"),mcr=o("CanineForMultipleChoice"),gcr=o(" (CANINE model)"),hcr=l(),e0=a("li"),D0e=a("strong"),ucr=o("convbert"),pcr=o(" \u2014 "),cJ=a("a"),_cr=o("ConvBertForMultipleChoice"),vcr=o(" (ConvBERT model)"),bcr=l(),o0=a("li"),G0e=a("strong"),Fcr=o("data2vec-text"),Tcr=o(" \u2014 "),fJ=a("a"),Mcr=o("Data2VecTextForMultipleChoice"),Ecr=o(" (Data2VecText model)"),Ccr=l(),r0=a("li"),O0e=a("strong"),wcr=o("deberta-v2"),Acr=o(" \u2014 "),mJ=a("a"),Lcr=o("DebertaV2ForMultipleChoice"),ycr=o(" (DeBERTa-v2 model)"),xcr=l(),t0=a("li"),V0e=a("strong"),$cr=o("distilbert"),kcr=o(" \u2014 "),gJ=a("a"),Scr=o("DistilBertForMultipleChoice"),Rcr=o(" (DistilBERT model)"),Pcr=l(),a0=a("li"),X0e=a("strong"),Bcr=o("electra"),Icr=o(" \u2014 "),hJ=a("a"),Ncr=o("ElectraForMultipleChoice"),qcr=o(" (ELECTRA model)"),jcr=l(),n0=a("li"),z0e=a("strong"),Dcr=o("ernie"),Gcr=o(" \u2014 "),uJ=a("a"),Ocr=o("ErnieForMultipleChoice"),Vcr=o(" (ERNIE model)"),Xcr=l(),s0=a("li"),Q0e=a("strong"),zcr=o("flaubert"),Qcr=o(" \u2014 "),pJ=a("a"),Wcr=o("FlaubertForMultipleChoice"),Ucr=o(" (FlauBERT model)"),Hcr=l(),l0=a("li"),W0e=a("strong"),Jcr=o("fnet"),Ycr=o(" \u2014 "),_J=a("a"),Zcr=o("FNetForMultipleChoice"),Kcr=o(" (FNet model)"),efr=l(),i0=a("li"),U0e=a("strong"),ofr=o("funnel"),rfr=o(" \u2014 "),vJ=a("a"),tfr=o("FunnelForMultipleChoice"),afr=o(" (Funnel Transformer model)"),nfr=l(),d0=a("li"),H0e=a("strong"),sfr=o("ibert"),lfr=o(" \u2014 "),bJ=a("a"),ifr=o("IBertForMultipleChoice"),dfr=o(" (I-BERT model)"),cfr=l(),c0=a("li"),J0e=a("strong"),ffr=o("longformer"),mfr=o(" \u2014 "),FJ=a("a"),gfr=o("LongformerForMultipleChoice"),hfr=o(" (Longformer model)"),ufr=l(),f0=a("li"),Y0e=a("strong"),pfr=o("luke"),_fr=o(" \u2014 "),TJ=a("a"),vfr=o("LukeForMultipleChoice"),bfr=o(" (LUKE model)"),Ffr=l(),m0=a("li"),Z0e=a("strong"),Tfr=o("megatron-bert"),Mfr=o(" \u2014 "),MJ=a("a"),Efr=o("MegatronBertForMultipleChoice"),Cfr=o(" (Megatron-BERT model)"),wfr=l(),g0=a("li"),K0e=a("strong"),Afr=o("mobilebert"),Lfr=o(" \u2014 "),EJ=a("a"),yfr=o("MobileBertForMultipleChoice"),xfr=o(" (MobileBERT model)"),$fr=l(),h0=a("li"),eFe=a("strong"),kfr=o("mpnet"),Sfr=o(" \u2014 "),CJ=a("a"),Rfr=o("MPNetForMultipleChoice"),Pfr=o(" (MPNet model)"),Bfr=l(),u0=a("li"),oFe=a("strong"),Ifr=o("nezha"),Nfr=o(" \u2014 "),wJ=a("a"),qfr=o("NezhaForMultipleChoice"),jfr=o(" (Nezha model)"),Dfr=l(),p0=a("li"),rFe=a("strong"),Gfr=o("nystromformer"),Ofr=o(" \u2014 "),AJ=a("a"),Vfr=o("NystromformerForMultipleChoice"),Xfr=o(" (Nystr\xF6mformer model)"),zfr=l(),_0=a("li"),tFe=a("strong"),Qfr=o("qdqbert"),Wfr=o(" \u2014 "),LJ=a("a"),Ufr=o("QDQBertForMultipleChoice"),Hfr=o(" (QDQBert model)"),Jfr=l(),v0=a("li"),aFe=a("strong"),Yfr=o("rembert"),Zfr=o(" \u2014 "),yJ=a("a"),Kfr=o("RemBertForMultipleChoice"),emr=o(" (RemBERT model)"),omr=l(),b0=a("li"),nFe=a("strong"),rmr=o("roberta"),tmr=o(" \u2014 "),xJ=a("a"),amr=o("RobertaForMultipleChoice"),nmr=o(" (RoBERTa model)"),smr=l(),F0=a("li"),sFe=a("strong"),lmr=o("roformer"),imr=o(" \u2014 "),$J=a("a"),dmr=o("RoFormerForMultipleChoice"),cmr=o(" (RoFormer model)"),fmr=l(),T0=a("li"),lFe=a("strong"),mmr=o("squeezebert"),gmr=o(" \u2014 "),kJ=a("a"),hmr=o("SqueezeBertForMultipleChoice"),umr=o(" (SqueezeBERT model)"),pmr=l(),M0=a("li"),iFe=a("strong"),_mr=o("xlm"),vmr=o(" \u2014 "),SJ=a("a"),bmr=o("XLMForMultipleChoice"),Fmr=o(" (XLM model)"),Tmr=l(),E0=a("li"),dFe=a("strong"),Mmr=o("xlm-roberta"),Emr=o(" \u2014 "),RJ=a("a"),Cmr=o("XLMRobertaForMultipleChoice"),wmr=o(" (XLM-RoBERTa model)"),Amr=l(),C0=a("li"),cFe=a("strong"),Lmr=o("xlm-roberta-xl"),ymr=o(" \u2014 "),PJ=a("a"),xmr=o("XLMRobertaXLForMultipleChoice"),$mr=o(" (XLM-RoBERTa-XL model)"),kmr=l(),w0=a("li"),fFe=a("strong"),Smr=o("xlnet"),Rmr=o(" \u2014 "),BJ=a("a"),Pmr=o("XLNetForMultipleChoice"),Bmr=o(" (XLNet model)"),Imr=l(),A0=a("li"),mFe=a("strong"),Nmr=o("yoso"),qmr=o(" \u2014 "),IJ=a("a"),jmr=o("YosoForMultipleChoice"),Dmr=o(" (YOSO model)"),Gmr=l(),L0=a("p"),Omr=o("The model is set in evaluation mode by default using "),gFe=a("code"),Vmr=o("model.eval()"),Xmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hFe=a("code"),zmr=o("model.train()"),Qmr=l(),F(y0.$$.fragment),Voo=l(),Xd=a("h2"),x0=a("a"),uFe=a("span"),F(B$.$$.fragment),Wmr=l(),pFe=a("span"),Umr=o("AutoModelForNextSentencePrediction"),Xoo=l(),Oo=a("div"),F(I$.$$.fragment),Hmr=l(),zd=a("p"),Jmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),NJ=a("a"),Ymr=o("from_pretrained()"),Zmr=o(" class method or the "),qJ=a("a"),Kmr=o("from_config()"),egr=o(` class
method.`),ogr=l(),N$=a("p"),rgr=o("This class cannot be instantiated directly using "),_Fe=a("code"),tgr=o("__init__()"),agr=o(" (throws an error)."),ngr=l(),At=a("div"),F(q$.$$.fragment),sgr=l(),vFe=a("p"),lgr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),igr=l(),Qd=a("p"),dgr=o(`Note:
Loading a model from its configuration file does `),bFe=a("strong"),cgr=o("not"),fgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=a("a"),mgr=o("from_pretrained()"),ggr=o(" to load the model weights."),hgr=l(),F($0.$$.fragment),ugr=l(),so=a("div"),F(j$.$$.fragment),pgr=l(),FFe=a("p"),_gr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),vgr=l(),ln=a("p"),bgr=o("The model class to instantiate is selected based on the "),TFe=a("code"),Fgr=o("model_type"),Tgr=o(` property of the config object (either
passed as an argument or loaded from `),MFe=a("code"),Mgr=o("pretrained_model_name_or_path"),Egr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=a("code"),Cgr=o("pretrained_model_name_or_path"),wgr=o(":"),Agr=l(),Ue=a("ul"),k0=a("li"),CFe=a("strong"),Lgr=o("bert"),ygr=o(" \u2014 "),DJ=a("a"),xgr=o("BertForNextSentencePrediction"),$gr=o(" (BERT model)"),kgr=l(),S0=a("li"),wFe=a("strong"),Sgr=o("ernie"),Rgr=o(" \u2014 "),GJ=a("a"),Pgr=o("ErnieForNextSentencePrediction"),Bgr=o(" (ERNIE model)"),Igr=l(),R0=a("li"),AFe=a("strong"),Ngr=o("fnet"),qgr=o(" \u2014 "),OJ=a("a"),jgr=o("FNetForNextSentencePrediction"),Dgr=o(" (FNet model)"),Ggr=l(),P0=a("li"),LFe=a("strong"),Ogr=o("megatron-bert"),Vgr=o(" \u2014 "),VJ=a("a"),Xgr=o("MegatronBertForNextSentencePrediction"),zgr=o(" (Megatron-BERT model)"),Qgr=l(),B0=a("li"),yFe=a("strong"),Wgr=o("mobilebert"),Ugr=o(" \u2014 "),XJ=a("a"),Hgr=o("MobileBertForNextSentencePrediction"),Jgr=o(" (MobileBERT model)"),Ygr=l(),I0=a("li"),xFe=a("strong"),Zgr=o("nezha"),Kgr=o(" \u2014 "),zJ=a("a"),ehr=o("NezhaForNextSentencePrediction"),ohr=o(" (Nezha model)"),rhr=l(),N0=a("li"),$Fe=a("strong"),thr=o("qdqbert"),ahr=o(" \u2014 "),QJ=a("a"),nhr=o("QDQBertForNextSentencePrediction"),shr=o(" (QDQBert model)"),lhr=l(),q0=a("p"),ihr=o("The model is set in evaluation mode by default using "),kFe=a("code"),dhr=o("model.eval()"),chr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),SFe=a("code"),fhr=o("model.train()"),mhr=l(),F(j0.$$.fragment),zoo=l(),Wd=a("h2"),D0=a("a"),RFe=a("span"),F(D$.$$.fragment),ghr=l(),PFe=a("span"),hhr=o("AutoModelForTokenClassification"),Qoo=l(),Vo=a("div"),F(G$.$$.fragment),uhr=l(),Ud=a("p"),phr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),WJ=a("a"),_hr=o("from_pretrained()"),vhr=o(" class method or the "),UJ=a("a"),bhr=o("from_config()"),Fhr=o(` class
method.`),Thr=l(),O$=a("p"),Mhr=o("This class cannot be instantiated directly using "),BFe=a("code"),Ehr=o("__init__()"),Chr=o(" (throws an error)."),whr=l(),Lt=a("div"),F(V$.$$.fragment),Ahr=l(),IFe=a("p"),Lhr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),yhr=l(),Hd=a("p"),xhr=o(`Note:
Loading a model from its configuration file does `),NFe=a("strong"),$hr=o("not"),khr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HJ=a("a"),Shr=o("from_pretrained()"),Rhr=o(" to load the model weights."),Phr=l(),F(G0.$$.fragment),Bhr=l(),lo=a("div"),F(X$.$$.fragment),Ihr=l(),qFe=a("p"),Nhr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),qhr=l(),dn=a("p"),jhr=o("The model class to instantiate is selected based on the "),jFe=a("code"),Dhr=o("model_type"),Ghr=o(` property of the config object (either
passed as an argument or loaded from `),DFe=a("code"),Ohr=o("pretrained_model_name_or_path"),Vhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GFe=a("code"),Xhr=o("pretrained_model_name_or_path"),zhr=o(":"),Qhr=l(),H=a("ul"),O0=a("li"),OFe=a("strong"),Whr=o("albert"),Uhr=o(" \u2014 "),JJ=a("a"),Hhr=o("AlbertForTokenClassification"),Jhr=o(" (ALBERT model)"),Yhr=l(),V0=a("li"),VFe=a("strong"),Zhr=o("bert"),Khr=o(" \u2014 "),YJ=a("a"),eur=o("BertForTokenClassification"),our=o(" (BERT model)"),rur=l(),X0=a("li"),XFe=a("strong"),tur=o("big_bird"),aur=o(" \u2014 "),ZJ=a("a"),nur=o("BigBirdForTokenClassification"),sur=o(" (BigBird model)"),lur=l(),z0=a("li"),zFe=a("strong"),iur=o("bloom"),dur=o(" \u2014 "),KJ=a("a"),cur=o("BloomForTokenClassification"),fur=o(" (BLOOM model)"),mur=l(),Q0=a("li"),QFe=a("strong"),gur=o("camembert"),hur=o(" \u2014 "),eY=a("a"),uur=o("CamembertForTokenClassification"),pur=o(" (CamemBERT model)"),_ur=l(),W0=a("li"),WFe=a("strong"),vur=o("canine"),bur=o(" \u2014 "),oY=a("a"),Fur=o("CanineForTokenClassification"),Tur=o(" (CANINE model)"),Mur=l(),U0=a("li"),UFe=a("strong"),Eur=o("convbert"),Cur=o(" \u2014 "),rY=a("a"),wur=o("ConvBertForTokenClassification"),Aur=o(" (ConvBERT model)"),Lur=l(),H0=a("li"),HFe=a("strong"),yur=o("data2vec-text"),xur=o(" \u2014 "),tY=a("a"),$ur=o("Data2VecTextForTokenClassification"),kur=o(" (Data2VecText model)"),Sur=l(),J0=a("li"),JFe=a("strong"),Rur=o("deberta"),Pur=o(" \u2014 "),aY=a("a"),Bur=o("DebertaForTokenClassification"),Iur=o(" (DeBERTa model)"),Nur=l(),Y0=a("li"),YFe=a("strong"),qur=o("deberta-v2"),jur=o(" \u2014 "),nY=a("a"),Dur=o("DebertaV2ForTokenClassification"),Gur=o(" (DeBERTa-v2 model)"),Our=l(),Z0=a("li"),ZFe=a("strong"),Vur=o("distilbert"),Xur=o(" \u2014 "),sY=a("a"),zur=o("DistilBertForTokenClassification"),Qur=o(" (DistilBERT model)"),Wur=l(),K0=a("li"),KFe=a("strong"),Uur=o("electra"),Hur=o(" \u2014 "),lY=a("a"),Jur=o("ElectraForTokenClassification"),Yur=o(" (ELECTRA model)"),Zur=l(),eF=a("li"),eTe=a("strong"),Kur=o("ernie"),epr=o(" \u2014 "),iY=a("a"),opr=o("ErnieForTokenClassification"),rpr=o(" (ERNIE model)"),tpr=l(),oF=a("li"),oTe=a("strong"),apr=o("esm"),npr=o(" \u2014 "),dY=a("a"),spr=o("EsmForTokenClassification"),lpr=o(" (ESM model)"),ipr=l(),rF=a("li"),rTe=a("strong"),dpr=o("flaubert"),cpr=o(" \u2014 "),cY=a("a"),fpr=o("FlaubertForTokenClassification"),mpr=o(" (FlauBERT model)"),gpr=l(),tF=a("li"),tTe=a("strong"),hpr=o("fnet"),upr=o(" \u2014 "),fY=a("a"),ppr=o("FNetForTokenClassification"),_pr=o(" (FNet model)"),vpr=l(),aF=a("li"),aTe=a("strong"),bpr=o("funnel"),Fpr=o(" \u2014 "),mY=a("a"),Tpr=o("FunnelForTokenClassification"),Mpr=o(" (Funnel Transformer model)"),Epr=l(),nF=a("li"),nTe=a("strong"),Cpr=o("gpt2"),wpr=o(" \u2014 "),gY=a("a"),Apr=o("GPT2ForTokenClassification"),Lpr=o(" (OpenAI GPT-2 model)"),ypr=l(),sF=a("li"),sTe=a("strong"),xpr=o("ibert"),$pr=o(" \u2014 "),hY=a("a"),kpr=o("IBertForTokenClassification"),Spr=o(" (I-BERT model)"),Rpr=l(),lF=a("li"),lTe=a("strong"),Ppr=o("layoutlm"),Bpr=o(" \u2014 "),uY=a("a"),Ipr=o("LayoutLMForTokenClassification"),Npr=o(" (LayoutLM model)"),qpr=l(),iF=a("li"),iTe=a("strong"),jpr=o("layoutlmv2"),Dpr=o(" \u2014 "),pY=a("a"),Gpr=o("LayoutLMv2ForTokenClassification"),Opr=o(" (LayoutLMv2 model)"),Vpr=l(),dF=a("li"),dTe=a("strong"),Xpr=o("layoutlmv3"),zpr=o(" \u2014 "),_Y=a("a"),Qpr=o("LayoutLMv3ForTokenClassification"),Wpr=o(" (LayoutLMv3 model)"),Upr=l(),cF=a("li"),cTe=a("strong"),Hpr=o("longformer"),Jpr=o(" \u2014 "),vY=a("a"),Ypr=o("LongformerForTokenClassification"),Zpr=o(" (Longformer model)"),Kpr=l(),fF=a("li"),fTe=a("strong"),e_r=o("luke"),o_r=o(" \u2014 "),bY=a("a"),r_r=o("LukeForTokenClassification"),t_r=o(" (LUKE model)"),a_r=l(),mF=a("li"),mTe=a("strong"),n_r=o("markuplm"),s_r=o(" \u2014 "),FY=a("a"),l_r=o("MarkupLMForTokenClassification"),i_r=o(" (MarkupLM model)"),d_r=l(),gF=a("li"),gTe=a("strong"),c_r=o("megatron-bert"),f_r=o(" \u2014 "),TY=a("a"),m_r=o("MegatronBertForTokenClassification"),g_r=o(" (Megatron-BERT model)"),h_r=l(),hF=a("li"),hTe=a("strong"),u_r=o("mobilebert"),p_r=o(" \u2014 "),MY=a("a"),__r=o("MobileBertForTokenClassification"),v_r=o(" (MobileBERT model)"),b_r=l(),uF=a("li"),uTe=a("strong"),F_r=o("mpnet"),T_r=o(" \u2014 "),EY=a("a"),M_r=o("MPNetForTokenClassification"),E_r=o(" (MPNet model)"),C_r=l(),pF=a("li"),pTe=a("strong"),w_r=o("nezha"),A_r=o(" \u2014 "),CY=a("a"),L_r=o("NezhaForTokenClassification"),y_r=o(" (Nezha model)"),x_r=l(),_F=a("li"),_Te=a("strong"),$_r=o("nystromformer"),k_r=o(" \u2014 "),wY=a("a"),S_r=o("NystromformerForTokenClassification"),R_r=o(" (Nystr\xF6mformer model)"),P_r=l(),vF=a("li"),vTe=a("strong"),B_r=o("qdqbert"),I_r=o(" \u2014 "),AY=a("a"),N_r=o("QDQBertForTokenClassification"),q_r=o(" (QDQBert model)"),j_r=l(),bF=a("li"),bTe=a("strong"),D_r=o("rembert"),G_r=o(" \u2014 "),LY=a("a"),O_r=o("RemBertForTokenClassification"),V_r=o(" (RemBERT model)"),X_r=l(),FF=a("li"),FTe=a("strong"),z_r=o("roberta"),Q_r=o(" \u2014 "),yY=a("a"),W_r=o("RobertaForTokenClassification"),U_r=o(" (RoBERTa model)"),H_r=l(),TF=a("li"),TTe=a("strong"),J_r=o("roformer"),Y_r=o(" \u2014 "),xY=a("a"),Z_r=o("RoFormerForTokenClassification"),K_r=o(" (RoFormer model)"),e2r=l(),MF=a("li"),MTe=a("strong"),o2r=o("squeezebert"),r2r=o(" \u2014 "),$Y=a("a"),t2r=o("SqueezeBertForTokenClassification"),a2r=o(" (SqueezeBERT model)"),n2r=l(),EF=a("li"),ETe=a("strong"),s2r=o("xlm"),l2r=o(" \u2014 "),kY=a("a"),i2r=o("XLMForTokenClassification"),d2r=o(" (XLM model)"),c2r=l(),CF=a("li"),CTe=a("strong"),f2r=o("xlm-roberta"),m2r=o(" \u2014 "),SY=a("a"),g2r=o("XLMRobertaForTokenClassification"),h2r=o(" (XLM-RoBERTa model)"),u2r=l(),wF=a("li"),wTe=a("strong"),p2r=o("xlm-roberta-xl"),_2r=o(" \u2014 "),RY=a("a"),v2r=o("XLMRobertaXLForTokenClassification"),b2r=o(" (XLM-RoBERTa-XL model)"),F2r=l(),AF=a("li"),ATe=a("strong"),T2r=o("xlnet"),M2r=o(" \u2014 "),PY=a("a"),E2r=o("XLNetForTokenClassification"),C2r=o(" (XLNet model)"),w2r=l(),LF=a("li"),LTe=a("strong"),A2r=o("yoso"),L2r=o(" \u2014 "),BY=a("a"),y2r=o("YosoForTokenClassification"),x2r=o(" (YOSO model)"),$2r=l(),yF=a("p"),k2r=o("The model is set in evaluation mode by default using "),yTe=a("code"),S2r=o("model.eval()"),R2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xTe=a("code"),P2r=o("model.train()"),B2r=l(),F(xF.$$.fragment),Woo=l(),Jd=a("h2"),$F=a("a"),$Te=a("span"),F(z$.$$.fragment),I2r=l(),kTe=a("span"),N2r=o("AutoModelForQuestionAnswering"),Uoo=l(),Xo=a("div"),F(Q$.$$.fragment),q2r=l(),Yd=a("p"),j2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),IY=a("a"),D2r=o("from_pretrained()"),G2r=o(" class method or the "),NY=a("a"),O2r=o("from_config()"),V2r=o(` class
method.`),X2r=l(),W$=a("p"),z2r=o("This class cannot be instantiated directly using "),STe=a("code"),Q2r=o("__init__()"),W2r=o(" (throws an error)."),U2r=l(),yt=a("div"),F(U$.$$.fragment),H2r=l(),RTe=a("p"),J2r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Y2r=l(),Zd=a("p"),Z2r=o(`Note:
Loading a model from its configuration file does `),PTe=a("strong"),K2r=o("not"),evr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=a("a"),ovr=o("from_pretrained()"),rvr=o(" to load the model weights."),tvr=l(),F(kF.$$.fragment),avr=l(),io=a("div"),F(H$.$$.fragment),nvr=l(),BTe=a("p"),svr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),lvr=l(),cn=a("p"),ivr=o("The model class to instantiate is selected based on the "),ITe=a("code"),dvr=o("model_type"),cvr=o(` property of the config object (either
passed as an argument or loaded from `),NTe=a("code"),fvr=o("pretrained_model_name_or_path"),mvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qTe=a("code"),gvr=o("pretrained_model_name_or_path"),hvr=o(":"),uvr=l(),O=a("ul"),SF=a("li"),jTe=a("strong"),pvr=o("albert"),_vr=o(" \u2014 "),jY=a("a"),vvr=o("AlbertForQuestionAnswering"),bvr=o(" (ALBERT model)"),Fvr=l(),RF=a("li"),DTe=a("strong"),Tvr=o("bart"),Mvr=o(" \u2014 "),DY=a("a"),Evr=o("BartForQuestionAnswering"),Cvr=o(" (BART model)"),wvr=l(),PF=a("li"),GTe=a("strong"),Avr=o("bert"),Lvr=o(" \u2014 "),GY=a("a"),yvr=o("BertForQuestionAnswering"),xvr=o(" (BERT model)"),$vr=l(),BF=a("li"),OTe=a("strong"),kvr=o("big_bird"),Svr=o(" \u2014 "),OY=a("a"),Rvr=o("BigBirdForQuestionAnswering"),Pvr=o(" (BigBird model)"),Bvr=l(),IF=a("li"),VTe=a("strong"),Ivr=o("bigbird_pegasus"),Nvr=o(" \u2014 "),VY=a("a"),qvr=o("BigBirdPegasusForQuestionAnswering"),jvr=o(" (BigBird-Pegasus model)"),Dvr=l(),NF=a("li"),XTe=a("strong"),Gvr=o("bloom"),Ovr=o(" \u2014 "),XY=a("a"),Vvr=o("BloomForQuestionAnswering"),Xvr=o(" (BLOOM model)"),zvr=l(),qF=a("li"),zTe=a("strong"),Qvr=o("camembert"),Wvr=o(" \u2014 "),zY=a("a"),Uvr=o("CamembertForQuestionAnswering"),Hvr=o(" (CamemBERT model)"),Jvr=l(),jF=a("li"),QTe=a("strong"),Yvr=o("canine"),Zvr=o(" \u2014 "),QY=a("a"),Kvr=o("CanineForQuestionAnswering"),e4r=o(" (CANINE model)"),o4r=l(),DF=a("li"),WTe=a("strong"),r4r=o("convbert"),t4r=o(" \u2014 "),WY=a("a"),a4r=o("ConvBertForQuestionAnswering"),n4r=o(" (ConvBERT model)"),s4r=l(),GF=a("li"),UTe=a("strong"),l4r=o("data2vec-text"),i4r=o(" \u2014 "),UY=a("a"),d4r=o("Data2VecTextForQuestionAnswering"),c4r=o(" (Data2VecText model)"),f4r=l(),OF=a("li"),HTe=a("strong"),m4r=o("deberta"),g4r=o(" \u2014 "),HY=a("a"),h4r=o("DebertaForQuestionAnswering"),u4r=o(" (DeBERTa model)"),p4r=l(),VF=a("li"),JTe=a("strong"),_4r=o("deberta-v2"),v4r=o(" \u2014 "),JY=a("a"),b4r=o("DebertaV2ForQuestionAnswering"),F4r=o(" (DeBERTa-v2 model)"),T4r=l(),XF=a("li"),YTe=a("strong"),M4r=o("distilbert"),E4r=o(" \u2014 "),YY=a("a"),C4r=o("DistilBertForQuestionAnswering"),w4r=o(" (DistilBERT model)"),A4r=l(),zF=a("li"),ZTe=a("strong"),L4r=o("electra"),y4r=o(" \u2014 "),ZY=a("a"),x4r=o("ElectraForQuestionAnswering"),$4r=o(" (ELECTRA model)"),k4r=l(),QF=a("li"),KTe=a("strong"),S4r=o("ernie"),R4r=o(" \u2014 "),KY=a("a"),P4r=o("ErnieForQuestionAnswering"),B4r=o(" (ERNIE model)"),I4r=l(),WF=a("li"),eMe=a("strong"),N4r=o("flaubert"),q4r=o(" \u2014 "),eZ=a("a"),j4r=o("FlaubertForQuestionAnsweringSimple"),D4r=o(" (FlauBERT model)"),G4r=l(),UF=a("li"),oMe=a("strong"),O4r=o("fnet"),V4r=o(" \u2014 "),oZ=a("a"),X4r=o("FNetForQuestionAnswering"),z4r=o(" (FNet model)"),Q4r=l(),HF=a("li"),rMe=a("strong"),W4r=o("funnel"),U4r=o(" \u2014 "),rZ=a("a"),H4r=o("FunnelForQuestionAnswering"),J4r=o(" (Funnel Transformer model)"),Y4r=l(),JF=a("li"),tMe=a("strong"),Z4r=o("gptj"),K4r=o(" \u2014 "),tZ=a("a"),e1r=o("GPTJForQuestionAnswering"),o1r=o(" (GPT-J model)"),r1r=l(),YF=a("li"),aMe=a("strong"),t1r=o("ibert"),a1r=o(" \u2014 "),aZ=a("a"),n1r=o("IBertForQuestionAnswering"),s1r=o(" (I-BERT model)"),l1r=l(),ZF=a("li"),nMe=a("strong"),i1r=o("layoutlmv2"),d1r=o(" \u2014 "),nZ=a("a"),c1r=o("LayoutLMv2ForQuestionAnswering"),f1r=o(" (LayoutLMv2 model)"),m1r=l(),KF=a("li"),sMe=a("strong"),g1r=o("layoutlmv3"),h1r=o(" \u2014 "),sZ=a("a"),u1r=o("LayoutLMv3ForQuestionAnswering"),p1r=o(" (LayoutLMv3 model)"),_1r=l(),eT=a("li"),lMe=a("strong"),v1r=o("led"),b1r=o(" \u2014 "),lZ=a("a"),F1r=o("LEDForQuestionAnswering"),T1r=o(" (LED model)"),M1r=l(),oT=a("li"),iMe=a("strong"),E1r=o("longformer"),C1r=o(" \u2014 "),iZ=a("a"),w1r=o("LongformerForQuestionAnswering"),A1r=o(" (Longformer model)"),L1r=l(),rT=a("li"),dMe=a("strong"),y1r=o("luke"),x1r=o(" \u2014 "),dZ=a("a"),$1r=o("LukeForQuestionAnswering"),k1r=o(" (LUKE model)"),S1r=l(),tT=a("li"),cMe=a("strong"),R1r=o("lxmert"),P1r=o(" \u2014 "),cZ=a("a"),B1r=o("LxmertForQuestionAnswering"),I1r=o(" (LXMERT model)"),N1r=l(),aT=a("li"),fMe=a("strong"),q1r=o("markuplm"),j1r=o(" \u2014 "),fZ=a("a"),D1r=o("MarkupLMForQuestionAnswering"),G1r=o(" (MarkupLM model)"),O1r=l(),nT=a("li"),mMe=a("strong"),V1r=o("mbart"),X1r=o(" \u2014 "),mZ=a("a"),z1r=o("MBartForQuestionAnswering"),Q1r=o(" (mBART model)"),W1r=l(),sT=a("li"),gMe=a("strong"),U1r=o("megatron-bert"),H1r=o(" \u2014 "),gZ=a("a"),J1r=o("MegatronBertForQuestionAnswering"),Y1r=o(" (Megatron-BERT model)"),Z1r=l(),lT=a("li"),hMe=a("strong"),K1r=o("mobilebert"),ebr=o(" \u2014 "),hZ=a("a"),obr=o("MobileBertForQuestionAnswering"),rbr=o(" (MobileBERT model)"),tbr=l(),iT=a("li"),uMe=a("strong"),abr=o("mpnet"),nbr=o(" \u2014 "),uZ=a("a"),sbr=o("MPNetForQuestionAnswering"),lbr=o(" (MPNet model)"),ibr=l(),dT=a("li"),pMe=a("strong"),dbr=o("mvp"),cbr=o(" \u2014 "),pZ=a("a"),fbr=o("MvpForQuestionAnswering"),mbr=o(" (MVP model)"),gbr=l(),cT=a("li"),_Me=a("strong"),hbr=o("nezha"),ubr=o(" \u2014 "),_Z=a("a"),pbr=o("NezhaForQuestionAnswering"),_br=o(" (Nezha model)"),vbr=l(),fT=a("li"),vMe=a("strong"),bbr=o("nystromformer"),Fbr=o(" \u2014 "),vZ=a("a"),Tbr=o("NystromformerForQuestionAnswering"),Mbr=o(" (Nystr\xF6mformer model)"),Ebr=l(),mT=a("li"),bMe=a("strong"),Cbr=o("opt"),wbr=o(" \u2014 "),bZ=a("a"),Abr=o("OPTForQuestionAnswering"),Lbr=o(" (OPT model)"),ybr=l(),gT=a("li"),FMe=a("strong"),xbr=o("qdqbert"),$br=o(" \u2014 "),FZ=a("a"),kbr=o("QDQBertForQuestionAnswering"),Sbr=o(" (QDQBert model)"),Rbr=l(),hT=a("li"),TMe=a("strong"),Pbr=o("reformer"),Bbr=o(" \u2014 "),TZ=a("a"),Ibr=o("ReformerForQuestionAnswering"),Nbr=o(" (Reformer model)"),qbr=l(),uT=a("li"),MMe=a("strong"),jbr=o("rembert"),Dbr=o(" \u2014 "),MZ=a("a"),Gbr=o("RemBertForQuestionAnswering"),Obr=o(" (RemBERT model)"),Vbr=l(),pT=a("li"),EMe=a("strong"),Xbr=o("roberta"),zbr=o(" \u2014 "),EZ=a("a"),Qbr=o("RobertaForQuestionAnswering"),Wbr=o(" (RoBERTa model)"),Ubr=l(),_T=a("li"),CMe=a("strong"),Hbr=o("roformer"),Jbr=o(" \u2014 "),CZ=a("a"),Ybr=o("RoFormerForQuestionAnswering"),Zbr=o(" (RoFormer model)"),Kbr=l(),vT=a("li"),wMe=a("strong"),e3r=o("splinter"),o3r=o(" \u2014 "),wZ=a("a"),r3r=o("SplinterForQuestionAnswering"),t3r=o(" (Splinter model)"),a3r=l(),bT=a("li"),AMe=a("strong"),n3r=o("squeezebert"),s3r=o(" \u2014 "),AZ=a("a"),l3r=o("SqueezeBertForQuestionAnswering"),i3r=o(" (SqueezeBERT model)"),d3r=l(),FT=a("li"),LMe=a("strong"),c3r=o("xlm"),f3r=o(" \u2014 "),LZ=a("a"),m3r=o("XLMForQuestionAnsweringSimple"),g3r=o(" (XLM model)"),h3r=l(),TT=a("li"),yMe=a("strong"),u3r=o("xlm-roberta"),p3r=o(" \u2014 "),yZ=a("a"),_3r=o("XLMRobertaForQuestionAnswering"),v3r=o(" (XLM-RoBERTa model)"),b3r=l(),MT=a("li"),xMe=a("strong"),F3r=o("xlm-roberta-xl"),T3r=o(" \u2014 "),xZ=a("a"),M3r=o("XLMRobertaXLForQuestionAnswering"),E3r=o(" (XLM-RoBERTa-XL model)"),C3r=l(),ET=a("li"),$Me=a("strong"),w3r=o("xlnet"),A3r=o(" \u2014 "),$Z=a("a"),L3r=o("XLNetForQuestionAnsweringSimple"),y3r=o(" (XLNet model)"),x3r=l(),CT=a("li"),kMe=a("strong"),$3r=o("yoso"),k3r=o(" \u2014 "),kZ=a("a"),S3r=o("YosoForQuestionAnswering"),R3r=o(" (YOSO model)"),P3r=l(),wT=a("p"),B3r=o("The model is set in evaluation mode by default using "),SMe=a("code"),I3r=o("model.eval()"),N3r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),RMe=a("code"),q3r=o("model.train()"),j3r=l(),F(AT.$$.fragment),Hoo=l(),Kd=a("h2"),LT=a("a"),PMe=a("span"),F(J$.$$.fragment),D3r=l(),BMe=a("span"),G3r=o("AutoModelForTableQuestionAnswering"),Joo=l(),zo=a("div"),F(Y$.$$.fragment),O3r=l(),ec=a("p"),V3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),SZ=a("a"),X3r=o("from_pretrained()"),z3r=o(" class method or the "),RZ=a("a"),Q3r=o("from_config()"),W3r=o(` class
method.`),U3r=l(),Z$=a("p"),H3r=o("This class cannot be instantiated directly using "),IMe=a("code"),J3r=o("__init__()"),Y3r=o(" (throws an error)."),Z3r=l(),xt=a("div"),F(K$.$$.fragment),K3r=l(),NMe=a("p"),e0r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),o0r=l(),oc=a("p"),r0r=o(`Note:
Loading a model from its configuration file does `),qMe=a("strong"),t0r=o("not"),a0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PZ=a("a"),n0r=o("from_pretrained()"),s0r=o(" to load the model weights."),l0r=l(),F(yT.$$.fragment),i0r=l(),co=a("div"),F(ek.$$.fragment),d0r=l(),jMe=a("p"),c0r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),f0r=l(),fn=a("p"),m0r=o("The model class to instantiate is selected based on the "),DMe=a("code"),g0r=o("model_type"),h0r=o(` property of the config object (either
passed as an argument or loaded from `),GMe=a("code"),u0r=o("pretrained_model_name_or_path"),p0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OMe=a("code"),_0r=o("pretrained_model_name_or_path"),v0r=o(":"),b0r=l(),VMe=a("ul"),xT=a("li"),XMe=a("strong"),F0r=o("tapas"),T0r=o(" \u2014 "),BZ=a("a"),M0r=o("TapasForQuestionAnswering"),E0r=o(" (TAPAS model)"),C0r=l(),$T=a("p"),w0r=o("The model is set in evaluation mode by default using "),zMe=a("code"),A0r=o("model.eval()"),L0r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),QMe=a("code"),y0r=o("model.train()"),x0r=l(),F(kT.$$.fragment),Yoo=l(),rc=a("h2"),ST=a("a"),WMe=a("span"),F(ok.$$.fragment),$0r=l(),UMe=a("span"),k0r=o("AutoModelForDocumentQuestionAnswering"),Zoo=l(),Qo=a("div"),F(rk.$$.fragment),S0r=l(),tc=a("p"),R0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),IZ=a("a"),P0r=o("from_pretrained()"),B0r=o(" class method or the "),NZ=a("a"),I0r=o("from_config()"),N0r=o(` class
method.`),q0r=l(),tk=a("p"),j0r=o("This class cannot be instantiated directly using "),HMe=a("code"),D0r=o("__init__()"),G0r=o(" (throws an error)."),O0r=l(),$t=a("div"),F(ak.$$.fragment),V0r=l(),JMe=a("p"),X0r=o("Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),z0r=l(),ac=a("p"),Q0r=o(`Note:
Loading a model from its configuration file does `),YMe=a("strong"),W0r=o("not"),U0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=a("a"),H0r=o("from_pretrained()"),J0r=o(" to load the model weights."),Y0r=l(),F(RT.$$.fragment),Z0r=l(),fo=a("div"),F(nk.$$.fragment),K0r=l(),ZMe=a("p"),eFr=o("Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),oFr=l(),mn=a("p"),rFr=o("The model class to instantiate is selected based on the "),KMe=a("code"),tFr=o("model_type"),aFr=o(` property of the config object (either
passed as an argument or loaded from `),eEe=a("code"),nFr=o("pretrained_model_name_or_path"),sFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oEe=a("code"),lFr=o("pretrained_model_name_or_path"),iFr=o(":"),dFr=l(),nc=a("ul"),PT=a("li"),rEe=a("strong"),cFr=o("layoutlm"),fFr=o(" \u2014 "),jZ=a("a"),mFr=o("LayoutLMForQuestionAnswering"),gFr=o(" (LayoutLM model)"),hFr=l(),BT=a("li"),tEe=a("strong"),uFr=o("layoutlmv2"),pFr=o(" \u2014 "),DZ=a("a"),_Fr=o("LayoutLMv2ForQuestionAnswering"),vFr=o(" (LayoutLMv2 model)"),bFr=l(),IT=a("li"),aEe=a("strong"),FFr=o("layoutlmv3"),TFr=o(" \u2014 "),GZ=a("a"),MFr=o("LayoutLMv3ForQuestionAnswering"),EFr=o(" (LayoutLMv3 model)"),CFr=l(),NT=a("p"),wFr=o("The model is set in evaluation mode by default using "),nEe=a("code"),AFr=o("model.eval()"),LFr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sEe=a("code"),yFr=o("model.train()"),xFr=l(),F(qT.$$.fragment),Koo=l(),sc=a("h2"),jT=a("a"),lEe=a("span"),F(sk.$$.fragment),$Fr=l(),iEe=a("span"),kFr=o("AutoModelForImageClassification"),ero=l(),Wo=a("div"),F(lk.$$.fragment),SFr=l(),lc=a("p"),RFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),OZ=a("a"),PFr=o("from_pretrained()"),BFr=o(" class method or the "),VZ=a("a"),IFr=o("from_config()"),NFr=o(` class
method.`),qFr=l(),ik=a("p"),jFr=o("This class cannot be instantiated directly using "),dEe=a("code"),DFr=o("__init__()"),GFr=o(" (throws an error)."),OFr=l(),kt=a("div"),F(dk.$$.fragment),VFr=l(),cEe=a("p"),XFr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),zFr=l(),ic=a("p"),QFr=o(`Note:
Loading a model from its configuration file does `),fEe=a("strong"),WFr=o("not"),UFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XZ=a("a"),HFr=o("from_pretrained()"),JFr=o(" to load the model weights."),YFr=l(),F(DT.$$.fragment),ZFr=l(),mo=a("div"),F(ck.$$.fragment),KFr=l(),mEe=a("p"),eTr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),oTr=l(),gn=a("p"),rTr=o("The model class to instantiate is selected based on the "),gEe=a("code"),tTr=o("model_type"),aTr=o(` property of the config object (either
passed as an argument or loaded from `),hEe=a("code"),nTr=o("pretrained_model_name_or_path"),sTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uEe=a("code"),lTr=o("pretrained_model_name_or_path"),iTr=o(":"),dTr=l(),ve=a("ul"),GT=a("li"),pEe=a("strong"),cTr=o("beit"),fTr=o(" \u2014 "),zZ=a("a"),mTr=o("BeitForImageClassification"),gTr=o(" (BEiT model)"),hTr=l(),OT=a("li"),_Ee=a("strong"),uTr=o("convnext"),pTr=o(" \u2014 "),QZ=a("a"),_Tr=o("ConvNextForImageClassification"),vTr=o(" (ConvNeXT model)"),bTr=l(),VT=a("li"),vEe=a("strong"),FTr=o("cvt"),TTr=o(" \u2014 "),WZ=a("a"),MTr=o("CvtForImageClassification"),ETr=o(" (CvT model)"),CTr=l(),XT=a("li"),bEe=a("strong"),wTr=o("data2vec-vision"),ATr=o(" \u2014 "),UZ=a("a"),LTr=o("Data2VecVisionForImageClassification"),yTr=o(" (Data2VecVision model)"),xTr=l(),El=a("li"),FEe=a("strong"),$Tr=o("deit"),kTr=o(" \u2014 "),HZ=a("a"),STr=o("DeiTForImageClassification"),RTr=o(" or "),JZ=a("a"),PTr=o("DeiTForImageClassificationWithTeacher"),BTr=o(" (DeiT model)"),ITr=l(),zT=a("li"),TEe=a("strong"),NTr=o("imagegpt"),qTr=o(" \u2014 "),YZ=a("a"),jTr=o("ImageGPTForImageClassification"),DTr=o(" (ImageGPT model)"),GTr=l(),Cl=a("li"),MEe=a("strong"),OTr=o("levit"),VTr=o(" \u2014 "),ZZ=a("a"),XTr=o("LevitForImageClassification"),zTr=o(" or "),KZ=a("a"),QTr=o("LevitForImageClassificationWithTeacher"),WTr=o(" (LeViT model)"),UTr=l(),QT=a("li"),EEe=a("strong"),HTr=o("mobilevit"),JTr=o(" \u2014 "),eK=a("a"),YTr=o("MobileViTForImageClassification"),ZTr=o(" (MobileViT model)"),KTr=l(),St=a("li"),CEe=a("strong"),eMr=o("perceiver"),oMr=o(" \u2014 "),oK=a("a"),rMr=o("PerceiverForImageClassificationLearned"),tMr=o(" or "),rK=a("a"),aMr=o("PerceiverForImageClassificationFourier"),nMr=o(" or "),tK=a("a"),sMr=o("PerceiverForImageClassificationConvProcessing"),lMr=o(" (Perceiver model)"),iMr=l(),WT=a("li"),wEe=a("strong"),dMr=o("poolformer"),cMr=o(" \u2014 "),aK=a("a"),fMr=o("PoolFormerForImageClassification"),mMr=o(" (PoolFormer model)"),gMr=l(),UT=a("li"),AEe=a("strong"),hMr=o("regnet"),uMr=o(" \u2014 "),nK=a("a"),pMr=o("RegNetForImageClassification"),_Mr=o(" (RegNet model)"),vMr=l(),HT=a("li"),LEe=a("strong"),bMr=o("resnet"),FMr=o(" \u2014 "),sK=a("a"),TMr=o("ResNetForImageClassification"),MMr=o(" (ResNet model)"),EMr=l(),JT=a("li"),yEe=a("strong"),CMr=o("segformer"),wMr=o(" \u2014 "),lK=a("a"),AMr=o("SegformerForImageClassification"),LMr=o(" (SegFormer model)"),yMr=l(),YT=a("li"),xEe=a("strong"),xMr=o("swin"),$Mr=o(" \u2014 "),iK=a("a"),kMr=o("SwinForImageClassification"),SMr=o(" (Swin Transformer model)"),RMr=l(),ZT=a("li"),$Ee=a("strong"),PMr=o("swinv2"),BMr=o(" \u2014 "),dK=a("a"),IMr=o("Swinv2ForImageClassification"),NMr=o(" (Swin Transformer V2 model)"),qMr=l(),KT=a("li"),kEe=a("strong"),jMr=o("van"),DMr=o(" \u2014 "),cK=a("a"),GMr=o("VanForImageClassification"),OMr=o(" (VAN model)"),VMr=l(),eM=a("li"),SEe=a("strong"),XMr=o("vit"),zMr=o(" \u2014 "),fK=a("a"),QMr=o("ViTForImageClassification"),WMr=o(" (ViT model)"),UMr=l(),oM=a("li"),REe=a("strong"),HMr=o("vit_msn"),JMr=o(" \u2014 "),mK=a("a"),YMr=o("ViTMSNForImageClassification"),ZMr=o(" (ViTMSN model)"),KMr=l(),rM=a("p"),eEr=o("The model is set in evaluation mode by default using "),PEe=a("code"),oEr=o("model.eval()"),rEr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),BEe=a("code"),tEr=o("model.train()"),aEr=l(),F(tM.$$.fragment),oro=l(),dc=a("h2"),aM=a("a"),IEe=a("span"),F(fk.$$.fragment),nEr=l(),NEe=a("span"),sEr=o("AutoModelForVideoClassification"),rro=l(),Uo=a("div"),F(mk.$$.fragment),lEr=l(),cc=a("p"),iEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),gK=a("a"),dEr=o("from_pretrained()"),cEr=o(" class method or the "),hK=a("a"),fEr=o("from_config()"),mEr=o(` class
method.`),gEr=l(),gk=a("p"),hEr=o("This class cannot be instantiated directly using "),qEe=a("code"),uEr=o("__init__()"),pEr=o(" (throws an error)."),_Er=l(),Rt=a("div"),F(hk.$$.fragment),vEr=l(),jEe=a("p"),bEr=o("Instantiates one of the model classes of the library (with a video classification head) from a configuration."),FEr=l(),fc=a("p"),TEr=o(`Note:
Loading a model from its configuration file does `),DEe=a("strong"),MEr=o("not"),EEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=a("a"),CEr=o("from_pretrained()"),wEr=o(" to load the model weights."),AEr=l(),F(nM.$$.fragment),LEr=l(),go=a("div"),F(uk.$$.fragment),yEr=l(),GEe=a("p"),xEr=o("Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),$Er=l(),hn=a("p"),kEr=o("The model class to instantiate is selected based on the "),OEe=a("code"),SEr=o("model_type"),REr=o(` property of the config object (either
passed as an argument or loaded from `),VEe=a("code"),PEr=o("pretrained_model_name_or_path"),BEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XEe=a("code"),IEr=o("pretrained_model_name_or_path"),NEr=o(":"),qEr=l(),zEe=a("ul"),sM=a("li"),QEe=a("strong"),jEr=o("videomae"),DEr=o(" \u2014 "),pK=a("a"),GEr=o("VideoMAEForVideoClassification"),OEr=o(" (VideoMAE model)"),VEr=l(),lM=a("p"),XEr=o("The model is set in evaluation mode by default using "),WEe=a("code"),zEr=o("model.eval()"),QEr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),UEe=a("code"),WEr=o("model.train()"),UEr=l(),F(iM.$$.fragment),tro=l(),mc=a("h2"),dM=a("a"),HEe=a("span"),F(pk.$$.fragment),HEr=l(),JEe=a("span"),JEr=o("AutoModelForVision2Seq"),aro=l(),Ho=a("div"),F(_k.$$.fragment),YEr=l(),gc=a("p"),ZEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_K=a("a"),KEr=o("from_pretrained()"),eCr=o(" class method or the "),vK=a("a"),oCr=o("from_config()"),rCr=o(` class
method.`),tCr=l(),vk=a("p"),aCr=o("This class cannot be instantiated directly using "),YEe=a("code"),nCr=o("__init__()"),sCr=o(" (throws an error)."),lCr=l(),Pt=a("div"),F(bk.$$.fragment),iCr=l(),ZEe=a("p"),dCr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),cCr=l(),hc=a("p"),fCr=o(`Note:
Loading a model from its configuration file does `),KEe=a("strong"),mCr=o("not"),gCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bK=a("a"),hCr=o("from_pretrained()"),uCr=o(" to load the model weights."),pCr=l(),F(cM.$$.fragment),_Cr=l(),ho=a("div"),F(Fk.$$.fragment),vCr=l(),eCe=a("p"),bCr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),FCr=l(),un=a("p"),TCr=o("The model class to instantiate is selected based on the "),oCe=a("code"),MCr=o("model_type"),ECr=o(` property of the config object (either
passed as an argument or loaded from `),rCe=a("code"),CCr=o("pretrained_model_name_or_path"),wCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tCe=a("code"),ACr=o("pretrained_model_name_or_path"),LCr=o(":"),yCr=l(),aCe=a("ul"),fM=a("li"),nCe=a("strong"),xCr=o("vision-encoder-decoder"),$Cr=o(" \u2014 "),FK=a("a"),kCr=o("VisionEncoderDecoderModel"),SCr=o(" (Vision Encoder decoder model)"),RCr=l(),mM=a("p"),PCr=o("The model is set in evaluation mode by default using "),sCe=a("code"),BCr=o("model.eval()"),ICr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lCe=a("code"),NCr=o("model.train()"),qCr=l(),F(gM.$$.fragment),nro=l(),uc=a("h2"),hM=a("a"),iCe=a("span"),F(Tk.$$.fragment),jCr=l(),dCe=a("span"),DCr=o("AutoModelForVisualQuestionAnswering"),sro=l(),Jo=a("div"),F(Mk.$$.fragment),GCr=l(),pc=a("p"),OCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),TK=a("a"),VCr=o("from_pretrained()"),XCr=o(" class method or the "),MK=a("a"),zCr=o("from_config()"),QCr=o(` class
method.`),WCr=l(),Ek=a("p"),UCr=o("This class cannot be instantiated directly using "),cCe=a("code"),HCr=o("__init__()"),JCr=o(" (throws an error)."),YCr=l(),Bt=a("div"),F(Ck.$$.fragment),ZCr=l(),fCe=a("p"),KCr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),e5r=l(),_c=a("p"),o5r=o(`Note:
Loading a model from its configuration file does `),mCe=a("strong"),r5r=o("not"),t5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EK=a("a"),a5r=o("from_pretrained()"),n5r=o(" to load the model weights."),s5r=l(),F(uM.$$.fragment),l5r=l(),uo=a("div"),F(wk.$$.fragment),i5r=l(),gCe=a("p"),d5r=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),c5r=l(),pn=a("p"),f5r=o("The model class to instantiate is selected based on the "),hCe=a("code"),m5r=o("model_type"),g5r=o(` property of the config object (either
passed as an argument or loaded from `),uCe=a("code"),h5r=o("pretrained_model_name_or_path"),u5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pCe=a("code"),p5r=o("pretrained_model_name_or_path"),_5r=o(":"),v5r=l(),_Ce=a("ul"),pM=a("li"),vCe=a("strong"),b5r=o("vilt"),F5r=o(" \u2014 "),CK=a("a"),T5r=o("ViltForQuestionAnswering"),M5r=o(" (ViLT model)"),E5r=l(),_M=a("p"),C5r=o("The model is set in evaluation mode by default using "),bCe=a("code"),w5r=o("model.eval()"),A5r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),FCe=a("code"),L5r=o("model.train()"),y5r=l(),F(vM.$$.fragment),lro=l(),vc=a("h2"),bM=a("a"),TCe=a("span"),F(Ak.$$.fragment),x5r=l(),MCe=a("span"),$5r=o("AutoModelForAudioClassification"),iro=l(),Yo=a("div"),F(Lk.$$.fragment),k5r=l(),bc=a("p"),S5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),wK=a("a"),R5r=o("from_pretrained()"),P5r=o(" class method or the "),AK=a("a"),B5r=o("from_config()"),I5r=o(` class
method.`),N5r=l(),yk=a("p"),q5r=o("This class cannot be instantiated directly using "),ECe=a("code"),j5r=o("__init__()"),D5r=o(" (throws an error)."),G5r=l(),It=a("div"),F(xk.$$.fragment),O5r=l(),CCe=a("p"),V5r=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),X5r=l(),Fc=a("p"),z5r=o(`Note:
Loading a model from its configuration file does `),wCe=a("strong"),Q5r=o("not"),W5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LK=a("a"),U5r=o("from_pretrained()"),H5r=o(" to load the model weights."),J5r=l(),F(FM.$$.fragment),Y5r=l(),po=a("div"),F($k.$$.fragment),Z5r=l(),ACe=a("p"),K5r=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ewr=l(),_n=a("p"),owr=o("The model class to instantiate is selected based on the "),LCe=a("code"),rwr=o("model_type"),twr=o(` property of the config object (either
passed as an argument or loaded from `),yCe=a("code"),awr=o("pretrained_model_name_or_path"),nwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xCe=a("code"),swr=o("pretrained_model_name_or_path"),lwr=o(":"),iwr=l(),Pe=a("ul"),TM=a("li"),$Ce=a("strong"),dwr=o("data2vec-audio"),cwr=o(" \u2014 "),yK=a("a"),fwr=o("Data2VecAudioForSequenceClassification"),mwr=o(" (Data2VecAudio model)"),gwr=l(),MM=a("li"),kCe=a("strong"),hwr=o("hubert"),uwr=o(" \u2014 "),xK=a("a"),pwr=o("HubertForSequenceClassification"),_wr=o(" (Hubert model)"),vwr=l(),EM=a("li"),SCe=a("strong"),bwr=o("sew"),Fwr=o(" \u2014 "),$K=a("a"),Twr=o("SEWForSequenceClassification"),Mwr=o(" (SEW model)"),Ewr=l(),CM=a("li"),RCe=a("strong"),Cwr=o("sew-d"),wwr=o(" \u2014 "),kK=a("a"),Awr=o("SEWDForSequenceClassification"),Lwr=o(" (SEW-D model)"),ywr=l(),wM=a("li"),PCe=a("strong"),xwr=o("unispeech"),$wr=o(" \u2014 "),SK=a("a"),kwr=o("UniSpeechForSequenceClassification"),Swr=o(" (UniSpeech model)"),Rwr=l(),AM=a("li"),BCe=a("strong"),Pwr=o("unispeech-sat"),Bwr=o(" \u2014 "),RK=a("a"),Iwr=o("UniSpeechSatForSequenceClassification"),Nwr=o(" (UniSpeechSat model)"),qwr=l(),LM=a("li"),ICe=a("strong"),jwr=o("wav2vec2"),Dwr=o(" \u2014 "),PK=a("a"),Gwr=o("Wav2Vec2ForSequenceClassification"),Owr=o(" (Wav2Vec2 model)"),Vwr=l(),yM=a("li"),NCe=a("strong"),Xwr=o("wav2vec2-conformer"),zwr=o(" \u2014 "),BK=a("a"),Qwr=o("Wav2Vec2ConformerForSequenceClassification"),Wwr=o(" (Wav2Vec2-Conformer model)"),Uwr=l(),xM=a("li"),qCe=a("strong"),Hwr=o("wavlm"),Jwr=o(" \u2014 "),IK=a("a"),Ywr=o("WavLMForSequenceClassification"),Zwr=o(" (WavLM model)"),Kwr=l(),$M=a("p"),eAr=o("The model is set in evaluation mode by default using "),jCe=a("code"),oAr=o("model.eval()"),rAr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),DCe=a("code"),tAr=o("model.train()"),aAr=l(),F(kM.$$.fragment),dro=l(),Tc=a("h2"),SM=a("a"),GCe=a("span"),F(kk.$$.fragment),nAr=l(),OCe=a("span"),sAr=o("AutoModelForAudioFrameClassification"),cro=l(),Zo=a("div"),F(Sk.$$.fragment),lAr=l(),Mc=a("p"),iAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),NK=a("a"),dAr=o("from_pretrained()"),cAr=o(" class method or the "),qK=a("a"),fAr=o("from_config()"),mAr=o(` class
method.`),gAr=l(),Rk=a("p"),hAr=o("This class cannot be instantiated directly using "),VCe=a("code"),uAr=o("__init__()"),pAr=o(" (throws an error)."),_Ar=l(),Nt=a("div"),F(Pk.$$.fragment),vAr=l(),XCe=a("p"),bAr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),FAr=l(),Ec=a("p"),TAr=o(`Note:
Loading a model from its configuration file does `),zCe=a("strong"),MAr=o("not"),EAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=a("a"),CAr=o("from_pretrained()"),wAr=o(" to load the model weights."),AAr=l(),F(RM.$$.fragment),LAr=l(),_o=a("div"),F(Bk.$$.fragment),yAr=l(),QCe=a("p"),xAr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),$Ar=l(),vn=a("p"),kAr=o("The model class to instantiate is selected based on the "),WCe=a("code"),SAr=o("model_type"),RAr=o(` property of the config object (either
passed as an argument or loaded from `),UCe=a("code"),PAr=o("pretrained_model_name_or_path"),BAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HCe=a("code"),IAr=o("pretrained_model_name_or_path"),NAr=o(":"),qAr=l(),gt=a("ul"),PM=a("li"),JCe=a("strong"),jAr=o("data2vec-audio"),DAr=o(" \u2014 "),DK=a("a"),GAr=o("Data2VecAudioForAudioFrameClassification"),OAr=o(" (Data2VecAudio model)"),VAr=l(),BM=a("li"),YCe=a("strong"),XAr=o("unispeech-sat"),zAr=o(" \u2014 "),GK=a("a"),QAr=o("UniSpeechSatForAudioFrameClassification"),WAr=o(" (UniSpeechSat model)"),UAr=l(),IM=a("li"),ZCe=a("strong"),HAr=o("wav2vec2"),JAr=o(" \u2014 "),OK=a("a"),YAr=o("Wav2Vec2ForAudioFrameClassification"),ZAr=o(" (Wav2Vec2 model)"),KAr=l(),NM=a("li"),KCe=a("strong"),e6r=o("wav2vec2-conformer"),o6r=o(" \u2014 "),VK=a("a"),r6r=o("Wav2Vec2ConformerForAudioFrameClassification"),t6r=o(" (Wav2Vec2-Conformer model)"),a6r=l(),qM=a("li"),e5e=a("strong"),n6r=o("wavlm"),s6r=o(" \u2014 "),XK=a("a"),l6r=o("WavLMForAudioFrameClassification"),i6r=o(" (WavLM model)"),d6r=l(),jM=a("p"),c6r=o("The model is set in evaluation mode by default using "),o5e=a("code"),f6r=o("model.eval()"),m6r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r5e=a("code"),g6r=o("model.train()"),h6r=l(),F(DM.$$.fragment),fro=l(),Cc=a("h2"),GM=a("a"),t5e=a("span"),F(Ik.$$.fragment),u6r=l(),a5e=a("span"),p6r=o("AutoModelForCTC"),mro=l(),Ko=a("div"),F(Nk.$$.fragment),_6r=l(),wc=a("p"),v6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),zK=a("a"),b6r=o("from_pretrained()"),F6r=o(" class method or the "),QK=a("a"),T6r=o("from_config()"),M6r=o(` class
method.`),E6r=l(),qk=a("p"),C6r=o("This class cannot be instantiated directly using "),n5e=a("code"),w6r=o("__init__()"),A6r=o(" (throws an error)."),L6r=l(),qt=a("div"),F(jk.$$.fragment),y6r=l(),s5e=a("p"),x6r=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),$6r=l(),Ac=a("p"),k6r=o(`Note:
Loading a model from its configuration file does `),l5e=a("strong"),S6r=o("not"),R6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=a("a"),P6r=o("from_pretrained()"),B6r=o(" to load the model weights."),I6r=l(),F(OM.$$.fragment),N6r=l(),vo=a("div"),F(Dk.$$.fragment),q6r=l(),i5e=a("p"),j6r=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),D6r=l(),bn=a("p"),G6r=o("The model class to instantiate is selected based on the "),d5e=a("code"),O6r=o("model_type"),V6r=o(` property of the config object (either
passed as an argument or loaded from `),c5e=a("code"),X6r=o("pretrained_model_name_or_path"),z6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f5e=a("code"),Q6r=o("pretrained_model_name_or_path"),W6r=o(":"),U6r=l(),Le=a("ul"),VM=a("li"),m5e=a("strong"),H6r=o("data2vec-audio"),J6r=o(" \u2014 "),UK=a("a"),Y6r=o("Data2VecAudioForCTC"),Z6r=o(" (Data2VecAudio model)"),K6r=l(),XM=a("li"),g5e=a("strong"),e7r=o("hubert"),o7r=o(" \u2014 "),HK=a("a"),r7r=o("HubertForCTC"),t7r=o(" (Hubert model)"),a7r=l(),zM=a("li"),h5e=a("strong"),n7r=o("mctct"),s7r=o(" \u2014 "),JK=a("a"),l7r=o("MCTCTForCTC"),i7r=o(" (M-CTC-T model)"),d7r=l(),QM=a("li"),u5e=a("strong"),c7r=o("sew"),f7r=o(" \u2014 "),YK=a("a"),m7r=o("SEWForCTC"),g7r=o(" (SEW model)"),h7r=l(),WM=a("li"),p5e=a("strong"),u7r=o("sew-d"),p7r=o(" \u2014 "),ZK=a("a"),_7r=o("SEWDForCTC"),v7r=o(" (SEW-D model)"),b7r=l(),UM=a("li"),_5e=a("strong"),F7r=o("unispeech"),T7r=o(" \u2014 "),KK=a("a"),M7r=o("UniSpeechForCTC"),E7r=o(" (UniSpeech model)"),C7r=l(),HM=a("li"),v5e=a("strong"),w7r=o("unispeech-sat"),A7r=o(" \u2014 "),eee=a("a"),L7r=o("UniSpeechSatForCTC"),y7r=o(" (UniSpeechSat model)"),x7r=l(),JM=a("li"),b5e=a("strong"),$7r=o("wav2vec2"),k7r=o(" \u2014 "),oee=a("a"),S7r=o("Wav2Vec2ForCTC"),R7r=o(" (Wav2Vec2 model)"),P7r=l(),YM=a("li"),F5e=a("strong"),B7r=o("wav2vec2-conformer"),I7r=o(" \u2014 "),ree=a("a"),N7r=o("Wav2Vec2ConformerForCTC"),q7r=o(" (Wav2Vec2-Conformer model)"),j7r=l(),ZM=a("li"),T5e=a("strong"),D7r=o("wavlm"),G7r=o(" \u2014 "),tee=a("a"),O7r=o("WavLMForCTC"),V7r=o(" (WavLM model)"),X7r=l(),KM=a("p"),z7r=o("The model is set in evaluation mode by default using "),M5e=a("code"),Q7r=o("model.eval()"),W7r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E5e=a("code"),U7r=o("model.train()"),H7r=l(),F(eE.$$.fragment),gro=l(),Lc=a("h2"),oE=a("a"),C5e=a("span"),F(Gk.$$.fragment),J7r=l(),w5e=a("span"),Y7r=o("AutoModelForSpeechSeq2Seq"),hro=l(),er=a("div"),F(Ok.$$.fragment),Z7r=l(),yc=a("p"),K7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),aee=a("a"),eLr=o("from_pretrained()"),oLr=o(" class method or the "),nee=a("a"),rLr=o("from_config()"),tLr=o(` class
method.`),aLr=l(),Vk=a("p"),nLr=o("This class cannot be instantiated directly using "),A5e=a("code"),sLr=o("__init__()"),lLr=o(" (throws an error)."),iLr=l(),jt=a("div"),F(Xk.$$.fragment),dLr=l(),L5e=a("p"),cLr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),fLr=l(),xc=a("p"),mLr=o(`Note:
Loading a model from its configuration file does `),y5e=a("strong"),gLr=o("not"),hLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),see=a("a"),uLr=o("from_pretrained()"),pLr=o(" to load the model weights."),_Lr=l(),F(rE.$$.fragment),vLr=l(),bo=a("div"),F(zk.$$.fragment),bLr=l(),x5e=a("p"),FLr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),TLr=l(),Fn=a("p"),MLr=o("The model class to instantiate is selected based on the "),$5e=a("code"),ELr=o("model_type"),CLr=o(` property of the config object (either
passed as an argument or loaded from `),k5e=a("code"),wLr=o("pretrained_model_name_or_path"),ALr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S5e=a("code"),LLr=o("pretrained_model_name_or_path"),yLr=o(":"),xLr=l(),$c=a("ul"),tE=a("li"),R5e=a("strong"),$Lr=o("speech-encoder-decoder"),kLr=o(" \u2014 "),lee=a("a"),SLr=o("SpeechEncoderDecoderModel"),RLr=o(" (Speech Encoder decoder model)"),PLr=l(),aE=a("li"),P5e=a("strong"),BLr=o("speech_to_text"),ILr=o(" \u2014 "),iee=a("a"),NLr=o("Speech2TextForConditionalGeneration"),qLr=o(" (Speech2Text model)"),jLr=l(),nE=a("li"),B5e=a("strong"),DLr=o("whisper"),GLr=o(" \u2014 "),dee=a("a"),OLr=o("WhisperForConditionalGeneration"),VLr=o(" (Whisper model)"),XLr=l(),sE=a("p"),zLr=o("The model is set in evaluation mode by default using "),I5e=a("code"),QLr=o("model.eval()"),WLr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N5e=a("code"),ULr=o("model.train()"),HLr=l(),F(lE.$$.fragment),uro=l(),kc=a("h2"),iE=a("a"),q5e=a("span"),F(Qk.$$.fragment),JLr=l(),j5e=a("span"),YLr=o("AutoModelForAudioXVector"),pro=l(),or=a("div"),F(Wk.$$.fragment),ZLr=l(),Sc=a("p"),KLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),cee=a("a"),e8r=o("from_pretrained()"),o8r=o(" class method or the "),fee=a("a"),r8r=o("from_config()"),t8r=o(` class
method.`),a8r=l(),Uk=a("p"),n8r=o("This class cannot be instantiated directly using "),D5e=a("code"),s8r=o("__init__()"),l8r=o(" (throws an error)."),i8r=l(),Dt=a("div"),F(Hk.$$.fragment),d8r=l(),G5e=a("p"),c8r=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),f8r=l(),Rc=a("p"),m8r=o(`Note:
Loading a model from its configuration file does `),O5e=a("strong"),g8r=o("not"),h8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mee=a("a"),u8r=o("from_pretrained()"),p8r=o(" to load the model weights."),_8r=l(),F(dE.$$.fragment),v8r=l(),Fo=a("div"),F(Jk.$$.fragment),b8r=l(),V5e=a("p"),F8r=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),T8r=l(),Tn=a("p"),M8r=o("The model class to instantiate is selected based on the "),X5e=a("code"),E8r=o("model_type"),C8r=o(` property of the config object (either
passed as an argument or loaded from `),z5e=a("code"),w8r=o("pretrained_model_name_or_path"),A8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q5e=a("code"),L8r=o("pretrained_model_name_or_path"),y8r=o(":"),x8r=l(),ht=a("ul"),cE=a("li"),W5e=a("strong"),$8r=o("data2vec-audio"),k8r=o(" \u2014 "),gee=a("a"),S8r=o("Data2VecAudioForXVector"),R8r=o(" (Data2VecAudio model)"),P8r=l(),fE=a("li"),U5e=a("strong"),B8r=o("unispeech-sat"),I8r=o(" \u2014 "),hee=a("a"),N8r=o("UniSpeechSatForXVector"),q8r=o(" (UniSpeechSat model)"),j8r=l(),mE=a("li"),H5e=a("strong"),D8r=o("wav2vec2"),G8r=o(" \u2014 "),uee=a("a"),O8r=o("Wav2Vec2ForXVector"),V8r=o(" (Wav2Vec2 model)"),X8r=l(),gE=a("li"),J5e=a("strong"),z8r=o("wav2vec2-conformer"),Q8r=o(" \u2014 "),pee=a("a"),W8r=o("Wav2Vec2ConformerForXVector"),U8r=o(" (Wav2Vec2-Conformer model)"),H8r=l(),hE=a("li"),Y5e=a("strong"),J8r=o("wavlm"),Y8r=o(" \u2014 "),_ee=a("a"),Z8r=o("WavLMForXVector"),K8r=o(" (WavLM model)"),eyr=l(),uE=a("p"),oyr=o("The model is set in evaluation mode by default using "),Z5e=a("code"),ryr=o("model.eval()"),tyr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K5e=a("code"),ayr=o("model.train()"),nyr=l(),F(pE.$$.fragment),_ro=l(),Pc=a("h2"),_E=a("a"),ewe=a("span"),F(Yk.$$.fragment),syr=l(),owe=a("span"),lyr=o("AutoModelForMaskedImageModeling"),vro=l(),rr=a("div"),F(Zk.$$.fragment),iyr=l(),Bc=a("p"),dyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),vee=a("a"),cyr=o("from_pretrained()"),fyr=o(" class method or the "),bee=a("a"),myr=o("from_config()"),gyr=o(` class
method.`),hyr=l(),Kk=a("p"),uyr=o("This class cannot be instantiated directly using "),rwe=a("code"),pyr=o("__init__()"),_yr=o(" (throws an error)."),vyr=l(),Gt=a("div"),F(eS.$$.fragment),byr=l(),twe=a("p"),Fyr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Tyr=l(),Ic=a("p"),Myr=o(`Note:
Loading a model from its configuration file does `),awe=a("strong"),Eyr=o("not"),Cyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fee=a("a"),wyr=o("from_pretrained()"),Ayr=o(" to load the model weights."),Lyr=l(),F(vE.$$.fragment),yyr=l(),To=a("div"),F(oS.$$.fragment),xyr=l(),nwe=a("p"),$yr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),kyr=l(),Mn=a("p"),Syr=o("The model class to instantiate is selected based on the "),swe=a("code"),Ryr=o("model_type"),Pyr=o(` property of the config object (either
passed as an argument or loaded from `),lwe=a("code"),Byr=o("pretrained_model_name_or_path"),Iyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iwe=a("code"),Nyr=o("pretrained_model_name_or_path"),qyr=o(":"),jyr=l(),En=a("ul"),bE=a("li"),dwe=a("strong"),Dyr=o("deit"),Gyr=o(" \u2014 "),Tee=a("a"),Oyr=o("DeiTForMaskedImageModeling"),Vyr=o(" (DeiT model)"),Xyr=l(),FE=a("li"),cwe=a("strong"),zyr=o("swin"),Qyr=o(" \u2014 "),Mee=a("a"),Wyr=o("SwinForMaskedImageModeling"),Uyr=o(" (Swin Transformer model)"),Hyr=l(),TE=a("li"),fwe=a("strong"),Jyr=o("swinv2"),Yyr=o(" \u2014 "),Eee=a("a"),Zyr=o("Swinv2ForMaskedImageModeling"),Kyr=o(" (Swin Transformer V2 model)"),e9r=l(),ME=a("li"),mwe=a("strong"),o9r=o("vit"),r9r=o(" \u2014 "),Cee=a("a"),t9r=o("ViTForMaskedImageModeling"),a9r=o(" (ViT model)"),n9r=l(),EE=a("p"),s9r=o("The model is set in evaluation mode by default using "),gwe=a("code"),l9r=o("model.eval()"),i9r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hwe=a("code"),d9r=o("model.train()"),c9r=l(),F(CE.$$.fragment),bro=l(),Nc=a("h2"),wE=a("a"),uwe=a("span"),F(rS.$$.fragment),f9r=l(),pwe=a("span"),m9r=o("AutoModelForObjectDetection"),Fro=l(),tr=a("div"),F(tS.$$.fragment),g9r=l(),qc=a("p"),h9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),wee=a("a"),u9r=o("from_pretrained()"),p9r=o(" class method or the "),Aee=a("a"),_9r=o("from_config()"),v9r=o(` class
method.`),b9r=l(),aS=a("p"),F9r=o("This class cannot be instantiated directly using "),_we=a("code"),T9r=o("__init__()"),M9r=o(" (throws an error)."),E9r=l(),Ot=a("div"),F(nS.$$.fragment),C9r=l(),vwe=a("p"),w9r=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),A9r=l(),jc=a("p"),L9r=o(`Note:
Loading a model from its configuration file does `),bwe=a("strong"),y9r=o("not"),x9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lee=a("a"),$9r=o("from_pretrained()"),k9r=o(" to load the model weights."),S9r=l(),F(AE.$$.fragment),R9r=l(),Mo=a("div"),F(sS.$$.fragment),P9r=l(),Fwe=a("p"),B9r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),I9r=l(),Cn=a("p"),N9r=o("The model class to instantiate is selected based on the "),Twe=a("code"),q9r=o("model_type"),j9r=o(` property of the config object (either
passed as an argument or loaded from `),Mwe=a("code"),D9r=o("pretrained_model_name_or_path"),G9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ewe=a("code"),O9r=o("pretrained_model_name_or_path"),V9r=o(":"),X9r=l(),wn=a("ul"),LE=a("li"),Cwe=a("strong"),z9r=o("conditional_detr"),Q9r=o(" \u2014 "),yee=a("a"),W9r=o("ConditionalDetrForObjectDetection"),U9r=o(" (Conditional DETR model)"),H9r=l(),yE=a("li"),wwe=a("strong"),J9r=o("deformable_detr"),Y9r=o(" \u2014 "),xee=a("a"),Z9r=o("DeformableDetrForObjectDetection"),K9r=o(" (Deformable DETR model)"),exr=l(),xE=a("li"),Awe=a("strong"),oxr=o("detr"),rxr=o(" \u2014 "),$ee=a("a"),txr=o("DetrForObjectDetection"),axr=o(" (DETR model)"),nxr=l(),$E=a("li"),Lwe=a("strong"),sxr=o("yolos"),lxr=o(" \u2014 "),kee=a("a"),ixr=o("YolosForObjectDetection"),dxr=o(" (YOLOS model)"),cxr=l(),kE=a("p"),fxr=o("The model is set in evaluation mode by default using "),ywe=a("code"),mxr=o("model.eval()"),gxr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xwe=a("code"),hxr=o("model.train()"),uxr=l(),F(SE.$$.fragment),Tro=l(),Dc=a("h2"),RE=a("a"),$we=a("span"),F(lS.$$.fragment),pxr=l(),kwe=a("span"),_xr=o("AutoModelForImageSegmentation"),Mro=l(),ar=a("div"),F(iS.$$.fragment),vxr=l(),Gc=a("p"),bxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),See=a("a"),Fxr=o("from_pretrained()"),Txr=o(" class method or the "),Ree=a("a"),Mxr=o("from_config()"),Exr=o(` class
method.`),Cxr=l(),dS=a("p"),wxr=o("This class cannot be instantiated directly using "),Swe=a("code"),Axr=o("__init__()"),Lxr=o(" (throws an error)."),yxr=l(),Vt=a("div"),F(cS.$$.fragment),xxr=l(),Rwe=a("p"),$xr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),kxr=l(),Oc=a("p"),Sxr=o(`Note:
Loading a model from its configuration file does `),Pwe=a("strong"),Rxr=o("not"),Pxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pee=a("a"),Bxr=o("from_pretrained()"),Ixr=o(" to load the model weights."),Nxr=l(),F(PE.$$.fragment),qxr=l(),Eo=a("div"),F(fS.$$.fragment),jxr=l(),Bwe=a("p"),Dxr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Gxr=l(),An=a("p"),Oxr=o("The model class to instantiate is selected based on the "),Iwe=a("code"),Vxr=o("model_type"),Xxr=o(` property of the config object (either
passed as an argument or loaded from `),Nwe=a("code"),zxr=o("pretrained_model_name_or_path"),Qxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qwe=a("code"),Wxr=o("pretrained_model_name_or_path"),Uxr=o(":"),Hxr=l(),jwe=a("ul"),BE=a("li"),Dwe=a("strong"),Jxr=o("detr"),Yxr=o(" \u2014 "),Bee=a("a"),Zxr=o("DetrForSegmentation"),Kxr=o(" (DETR model)"),e$r=l(),IE=a("p"),o$r=o("The model is set in evaluation mode by default using "),Gwe=a("code"),r$r=o("model.eval()"),t$r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Owe=a("code"),a$r=o("model.train()"),n$r=l(),F(NE.$$.fragment),Ero=l(),Vc=a("h2"),qE=a("a"),Vwe=a("span"),F(mS.$$.fragment),s$r=l(),Xwe=a("span"),l$r=o("AutoModelForSemanticSegmentation"),Cro=l(),nr=a("div"),F(gS.$$.fragment),i$r=l(),Xc=a("p"),d$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Iee=a("a"),c$r=o("from_pretrained()"),f$r=o(" class method or the "),Nee=a("a"),m$r=o("from_config()"),g$r=o(` class
method.`),h$r=l(),hS=a("p"),u$r=o("This class cannot be instantiated directly using "),zwe=a("code"),p$r=o("__init__()"),_$r=o(" (throws an error)."),v$r=l(),Xt=a("div"),F(uS.$$.fragment),b$r=l(),Qwe=a("p"),F$r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),T$r=l(),zc=a("p"),M$r=o(`Note:
Loading a model from its configuration file does `),Wwe=a("strong"),E$r=o("not"),C$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qee=a("a"),w$r=o("from_pretrained()"),A$r=o(" to load the model weights."),L$r=l(),F(jE.$$.fragment),y$r=l(),Co=a("div"),F(pS.$$.fragment),x$r=l(),Uwe=a("p"),$$r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),k$r=l(),Ln=a("p"),S$r=o("The model class to instantiate is selected based on the "),Hwe=a("code"),R$r=o("model_type"),P$r=o(` property of the config object (either
passed as an argument or loaded from `),Jwe=a("code"),B$r=o("pretrained_model_name_or_path"),I$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ywe=a("code"),N$r=o("pretrained_model_name_or_path"),q$r=o(":"),j$r=l(),ut=a("ul"),DE=a("li"),Zwe=a("strong"),D$r=o("beit"),G$r=o(" \u2014 "),jee=a("a"),O$r=o("BeitForSemanticSegmentation"),V$r=o(" (BEiT model)"),X$r=l(),GE=a("li"),Kwe=a("strong"),z$r=o("data2vec-vision"),Q$r=o(" \u2014 "),Dee=a("a"),W$r=o("Data2VecVisionForSemanticSegmentation"),U$r=o(" (Data2VecVision model)"),H$r=l(),OE=a("li"),eAe=a("strong"),J$r=o("dpt"),Y$r=o(" \u2014 "),Gee=a("a"),Z$r=o("DPTForSemanticSegmentation"),K$r=o(" (DPT model)"),ekr=l(),VE=a("li"),oAe=a("strong"),okr=o("mobilevit"),rkr=o(" \u2014 "),Oee=a("a"),tkr=o("MobileViTForSemanticSegmentation"),akr=o(" (MobileViT model)"),nkr=l(),XE=a("li"),rAe=a("strong"),skr=o("segformer"),lkr=o(" \u2014 "),Vee=a("a"),ikr=o("SegformerForSemanticSegmentation"),dkr=o(" (SegFormer model)"),ckr=l(),zE=a("p"),fkr=o("The model is set in evaluation mode by default using "),tAe=a("code"),mkr=o("model.eval()"),gkr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aAe=a("code"),hkr=o("model.train()"),ukr=l(),F(QE.$$.fragment),wro=l(),Qc=a("h2"),WE=a("a"),nAe=a("span"),F(_S.$$.fragment),pkr=l(),sAe=a("span"),_kr=o("AutoModelForInstanceSegmentation"),Aro=l(),sr=a("div"),F(vS.$$.fragment),vkr=l(),Wc=a("p"),bkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Xee=a("a"),Fkr=o("from_pretrained()"),Tkr=o(" class method or the "),zee=a("a"),Mkr=o("from_config()"),Ekr=o(` class
method.`),Ckr=l(),bS=a("p"),wkr=o("This class cannot be instantiated directly using "),lAe=a("code"),Akr=o("__init__()"),Lkr=o(" (throws an error)."),ykr=l(),zt=a("div"),F(FS.$$.fragment),xkr=l(),iAe=a("p"),$kr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),kkr=l(),Uc=a("p"),Skr=o(`Note:
Loading a model from its configuration file does `),dAe=a("strong"),Rkr=o("not"),Pkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qee=a("a"),Bkr=o("from_pretrained()"),Ikr=o(" to load the model weights."),Nkr=l(),F(UE.$$.fragment),qkr=l(),wo=a("div"),F(TS.$$.fragment),jkr=l(),cAe=a("p"),Dkr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Gkr=l(),yn=a("p"),Okr=o("The model class to instantiate is selected based on the "),fAe=a("code"),Vkr=o("model_type"),Xkr=o(` property of the config object (either
passed as an argument or loaded from `),mAe=a("code"),zkr=o("pretrained_model_name_or_path"),Qkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gAe=a("code"),Wkr=o("pretrained_model_name_or_path"),Ukr=o(":"),Hkr=l(),hAe=a("ul"),HE=a("li"),uAe=a("strong"),Jkr=o("maskformer"),Ykr=o(" \u2014 "),Wee=a("a"),Zkr=o("MaskFormerForInstanceSegmentation"),Kkr=o(" (MaskFormer model)"),eSr=l(),JE=a("p"),oSr=o("The model is set in evaluation mode by default using "),pAe=a("code"),rSr=o("model.eval()"),tSr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_Ae=a("code"),aSr=o("model.train()"),nSr=l(),F(YE.$$.fragment),Lro=l(),Hc=a("h2"),ZE=a("a"),vAe=a("span"),F(MS.$$.fragment),sSr=l(),bAe=a("span"),lSr=o("AutoModelForZeroShotObjectDetection"),yro=l(),lr=a("div"),F(ES.$$.fragment),iSr=l(),Jc=a("p"),dSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a zero-shot object detection head) when created
with the `),Uee=a("a"),cSr=o("from_pretrained()"),fSr=o(" class method or the "),Hee=a("a"),mSr=o("from_config()"),gSr=o(` class
method.`),hSr=l(),CS=a("p"),uSr=o("This class cannot be instantiated directly using "),FAe=a("code"),pSr=o("__init__()"),_Sr=o(" (throws an error)."),vSr=l(),Qt=a("div"),F(wS.$$.fragment),bSr=l(),TAe=a("p"),FSr=o("Instantiates one of the model classes of the library (with a zero-shot object detection head) from a configuration."),TSr=l(),Yc=a("p"),MSr=o(`Note:
Loading a model from its configuration file does `),MAe=a("strong"),ESr=o("not"),CSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jee=a("a"),wSr=o("from_pretrained()"),ASr=o(" to load the model weights."),LSr=l(),F(KE.$$.fragment),ySr=l(),Ao=a("div"),F(AS.$$.fragment),xSr=l(),EAe=a("p"),$Sr=o("Instantiate one of the model classes of the library (with a zero-shot object detection head) from a pretrained model."),kSr=l(),xn=a("p"),SSr=o("The model class to instantiate is selected based on the "),CAe=a("code"),RSr=o("model_type"),PSr=o(` property of the config object (either
passed as an argument or loaded from `),wAe=a("code"),BSr=o("pretrained_model_name_or_path"),ISr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AAe=a("code"),NSr=o("pretrained_model_name_or_path"),qSr=o(":"),jSr=l(),LAe=a("ul"),eC=a("li"),yAe=a("strong"),DSr=o("owlvit"),GSr=o(" \u2014 "),Yee=a("a"),OSr=o("OwlViTForObjectDetection"),VSr=o(" (OWL-ViT model)"),XSr=l(),oC=a("p"),zSr=o("The model is set in evaluation mode by default using "),xAe=a("code"),QSr=o("model.eval()"),WSr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$Ae=a("code"),USr=o("model.train()"),HSr=l(),F(rC.$$.fragment),xro=l(),Zc=a("h2"),tC=a("a"),kAe=a("span"),F(LS.$$.fragment),JSr=l(),SAe=a("span"),YSr=o("TFAutoModel"),$ro=l(),ir=a("div"),F(yS.$$.fragment),ZSr=l(),Kc=a("p"),KSr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Zee=a("a"),eRr=o("from_pretrained()"),oRr=o(" class method or the "),Kee=a("a"),rRr=o("from_config()"),tRr=o(` class
method.`),aRr=l(),xS=a("p"),nRr=o("This class cannot be instantiated directly using "),RAe=a("code"),sRr=o("__init__()"),lRr=o(" (throws an error)."),iRr=l(),Wt=a("div"),F($S.$$.fragment),dRr=l(),PAe=a("p"),cRr=o("Instantiates one of the base model classes of the library from a configuration."),fRr=l(),ef=a("p"),mRr=o(`Note:
Loading a model from its configuration file does `),BAe=a("strong"),gRr=o("not"),hRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eoe=a("a"),uRr=o("from_pretrained()"),pRr=o(" to load the model weights."),_Rr=l(),F(aC.$$.fragment),vRr=l(),qr=a("div"),F(kS.$$.fragment),bRr=l(),IAe=a("p"),FRr=o("Instantiate one of the base model classes of the library from a pretrained model."),TRr=l(),$n=a("p"),MRr=o("The model class to instantiate is selected based on the "),NAe=a("code"),ERr=o("model_type"),CRr=o(` property of the config object (either
passed as an argument or loaded from `),qAe=a("code"),wRr=o("pretrained_model_name_or_path"),ARr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jAe=a("code"),LRr=o("pretrained_model_name_or_path"),yRr=o(":"),xRr=l(),B=a("ul"),nC=a("li"),DAe=a("strong"),$Rr=o("albert"),kRr=o(" \u2014 "),ooe=a("a"),SRr=o("TFAlbertModel"),RRr=o(" (ALBERT model)"),PRr=l(),sC=a("li"),GAe=a("strong"),BRr=o("bart"),IRr=o(" \u2014 "),roe=a("a"),NRr=o("TFBartModel"),qRr=o(" (BART model)"),jRr=l(),lC=a("li"),OAe=a("strong"),DRr=o("bert"),GRr=o(" \u2014 "),toe=a("a"),ORr=o("TFBertModel"),VRr=o(" (BERT model)"),XRr=l(),iC=a("li"),VAe=a("strong"),zRr=o("blenderbot"),QRr=o(" \u2014 "),aoe=a("a"),WRr=o("TFBlenderbotModel"),URr=o(" (Blenderbot model)"),HRr=l(),dC=a("li"),XAe=a("strong"),JRr=o("blenderbot-small"),YRr=o(" \u2014 "),noe=a("a"),ZRr=o("TFBlenderbotSmallModel"),KRr=o(" (BlenderbotSmall model)"),ePr=l(),cC=a("li"),zAe=a("strong"),oPr=o("camembert"),rPr=o(" \u2014 "),soe=a("a"),tPr=o("TFCamembertModel"),aPr=o(" (CamemBERT model)"),nPr=l(),fC=a("li"),QAe=a("strong"),sPr=o("clip"),lPr=o(" \u2014 "),loe=a("a"),iPr=o("TFCLIPModel"),dPr=o(" (CLIP model)"),cPr=l(),mC=a("li"),WAe=a("strong"),fPr=o("convbert"),mPr=o(" \u2014 "),ioe=a("a"),gPr=o("TFConvBertModel"),hPr=o(" (ConvBERT model)"),uPr=l(),gC=a("li"),UAe=a("strong"),pPr=o("convnext"),_Pr=o(" \u2014 "),doe=a("a"),vPr=o("TFConvNextModel"),bPr=o(" (ConvNeXT model)"),FPr=l(),hC=a("li"),HAe=a("strong"),TPr=o("ctrl"),MPr=o(" \u2014 "),coe=a("a"),EPr=o("TFCTRLModel"),CPr=o(" (CTRL model)"),wPr=l(),uC=a("li"),JAe=a("strong"),APr=o("data2vec-vision"),LPr=o(" \u2014 "),foe=a("a"),yPr=o("TFData2VecVisionModel"),xPr=o(" (Data2VecVision model)"),$Pr=l(),pC=a("li"),YAe=a("strong"),kPr=o("deberta"),SPr=o(" \u2014 "),moe=a("a"),RPr=o("TFDebertaModel"),PPr=o(" (DeBERTa model)"),BPr=l(),_C=a("li"),ZAe=a("strong"),IPr=o("deberta-v2"),NPr=o(" \u2014 "),goe=a("a"),qPr=o("TFDebertaV2Model"),jPr=o(" (DeBERTa-v2 model)"),DPr=l(),vC=a("li"),KAe=a("strong"),GPr=o("deit"),OPr=o(" \u2014 "),hoe=a("a"),VPr=o("TFDeiTModel"),XPr=o(" (DeiT model)"),zPr=l(),bC=a("li"),e6e=a("strong"),QPr=o("distilbert"),WPr=o(" \u2014 "),uoe=a("a"),UPr=o("TFDistilBertModel"),HPr=o(" (DistilBERT model)"),JPr=l(),FC=a("li"),o6e=a("strong"),YPr=o("dpr"),ZPr=o(" \u2014 "),poe=a("a"),KPr=o("TFDPRQuestionEncoder"),eBr=o(" (DPR model)"),oBr=l(),TC=a("li"),r6e=a("strong"),rBr=o("electra"),tBr=o(" \u2014 "),_oe=a("a"),aBr=o("TFElectraModel"),nBr=o(" (ELECTRA model)"),sBr=l(),MC=a("li"),t6e=a("strong"),lBr=o("flaubert"),iBr=o(" \u2014 "),voe=a("a"),dBr=o("TFFlaubertModel"),cBr=o(" (FlauBERT model)"),fBr=l(),wl=a("li"),a6e=a("strong"),mBr=o("funnel"),gBr=o(" \u2014 "),boe=a("a"),hBr=o("TFFunnelModel"),uBr=o(" or "),Foe=a("a"),pBr=o("TFFunnelBaseModel"),_Br=o(" (Funnel Transformer model)"),vBr=l(),EC=a("li"),n6e=a("strong"),bBr=o("gpt2"),FBr=o(" \u2014 "),Toe=a("a"),TBr=o("TFGPT2Model"),MBr=o(" (OpenAI GPT-2 model)"),EBr=l(),CC=a("li"),s6e=a("strong"),CBr=o("gptj"),wBr=o(" \u2014 "),Moe=a("a"),ABr=o("TFGPTJModel"),LBr=o(" (GPT-J model)"),yBr=l(),wC=a("li"),l6e=a("strong"),xBr=o("groupvit"),$Br=o(" \u2014 "),Eoe=a("a"),kBr=o("TFGroupViTModel"),SBr=o(" (GroupViT model)"),RBr=l(),AC=a("li"),i6e=a("strong"),PBr=o("hubert"),BBr=o(" \u2014 "),Coe=a("a"),IBr=o("TFHubertModel"),NBr=o(" (Hubert model)"),qBr=l(),LC=a("li"),d6e=a("strong"),jBr=o("layoutlm"),DBr=o(" \u2014 "),woe=a("a"),GBr=o("TFLayoutLMModel"),OBr=o(" (LayoutLM model)"),VBr=l(),yC=a("li"),c6e=a("strong"),XBr=o("layoutlmv3"),zBr=o(" \u2014 "),Aoe=a("a"),QBr=o("TFLayoutLMv3Model"),WBr=o(" (LayoutLMv3 model)"),UBr=l(),xC=a("li"),f6e=a("strong"),HBr=o("led"),JBr=o(" \u2014 "),Loe=a("a"),YBr=o("TFLEDModel"),ZBr=o(" (LED model)"),KBr=l(),$C=a("li"),m6e=a("strong"),eIr=o("longformer"),oIr=o(" \u2014 "),yoe=a("a"),rIr=o("TFLongformerModel"),tIr=o(" (Longformer model)"),aIr=l(),kC=a("li"),g6e=a("strong"),nIr=o("lxmert"),sIr=o(" \u2014 "),xoe=a("a"),lIr=o("TFLxmertModel"),iIr=o(" (LXMERT model)"),dIr=l(),SC=a("li"),h6e=a("strong"),cIr=o("marian"),fIr=o(" \u2014 "),$oe=a("a"),mIr=o("TFMarianModel"),gIr=o(" (Marian model)"),hIr=l(),RC=a("li"),u6e=a("strong"),uIr=o("mbart"),pIr=o(" \u2014 "),koe=a("a"),_Ir=o("TFMBartModel"),vIr=o(" (mBART model)"),bIr=l(),PC=a("li"),p6e=a("strong"),FIr=o("mobilebert"),TIr=o(" \u2014 "),Soe=a("a"),MIr=o("TFMobileBertModel"),EIr=o(" (MobileBERT model)"),CIr=l(),BC=a("li"),_6e=a("strong"),wIr=o("mobilevit"),AIr=o(" \u2014 "),Roe=a("a"),LIr=o("TFMobileViTModel"),yIr=o(" (MobileViT model)"),xIr=l(),IC=a("li"),v6e=a("strong"),$Ir=o("mpnet"),kIr=o(" \u2014 "),Poe=a("a"),SIr=o("TFMPNetModel"),RIr=o(" (MPNet model)"),PIr=l(),NC=a("li"),b6e=a("strong"),BIr=o("mt5"),IIr=o(" \u2014 "),Boe=a("a"),NIr=o("TFMT5Model"),qIr=o(" (MT5 model)"),jIr=l(),qC=a("li"),F6e=a("strong"),DIr=o("openai-gpt"),GIr=o(" \u2014 "),Ioe=a("a"),OIr=o("TFOpenAIGPTModel"),VIr=o(" (OpenAI GPT model)"),XIr=l(),jC=a("li"),T6e=a("strong"),zIr=o("opt"),QIr=o(" \u2014 "),Noe=a("a"),WIr=o("TFOPTModel"),UIr=o(" (OPT model)"),HIr=l(),DC=a("li"),M6e=a("strong"),JIr=o("pegasus"),YIr=o(" \u2014 "),qoe=a("a"),ZIr=o("TFPegasusModel"),KIr=o(" (Pegasus model)"),eNr=l(),GC=a("li"),E6e=a("strong"),oNr=o("regnet"),rNr=o(" \u2014 "),joe=a("a"),tNr=o("TFRegNetModel"),aNr=o(" (RegNet model)"),nNr=l(),OC=a("li"),C6e=a("strong"),sNr=o("rembert"),lNr=o(" \u2014 "),Doe=a("a"),iNr=o("TFRemBertModel"),dNr=o(" (RemBERT model)"),cNr=l(),VC=a("li"),w6e=a("strong"),fNr=o("resnet"),mNr=o(" \u2014 "),Goe=a("a"),gNr=o("TFResNetModel"),hNr=o(" (ResNet model)"),uNr=l(),XC=a("li"),A6e=a("strong"),pNr=o("roberta"),_Nr=o(" \u2014 "),Ooe=a("a"),vNr=o("TFRobertaModel"),bNr=o(" (RoBERTa model)"),FNr=l(),zC=a("li"),L6e=a("strong"),TNr=o("roformer"),MNr=o(" \u2014 "),Voe=a("a"),ENr=o("TFRoFormerModel"),CNr=o(" (RoFormer model)"),wNr=l(),QC=a("li"),y6e=a("strong"),ANr=o("segformer"),LNr=o(" \u2014 "),Xoe=a("a"),yNr=o("TFSegformerModel"),xNr=o(" (SegFormer model)"),$Nr=l(),WC=a("li"),x6e=a("strong"),kNr=o("speech_to_text"),SNr=o(" \u2014 "),zoe=a("a"),RNr=o("TFSpeech2TextModel"),PNr=o(" (Speech2Text model)"),BNr=l(),UC=a("li"),$6e=a("strong"),INr=o("swin"),NNr=o(" \u2014 "),Qoe=a("a"),qNr=o("TFSwinModel"),jNr=o(" (Swin Transformer model)"),DNr=l(),HC=a("li"),k6e=a("strong"),GNr=o("t5"),ONr=o(" \u2014 "),Woe=a("a"),VNr=o("TFT5Model"),XNr=o(" (T5 model)"),zNr=l(),JC=a("li"),S6e=a("strong"),QNr=o("tapas"),WNr=o(" \u2014 "),Uoe=a("a"),UNr=o("TFTapasModel"),HNr=o(" (TAPAS model)"),JNr=l(),YC=a("li"),R6e=a("strong"),YNr=o("transfo-xl"),ZNr=o(" \u2014 "),Hoe=a("a"),KNr=o("TFTransfoXLModel"),eqr=o(" (Transformer-XL model)"),oqr=l(),ZC=a("li"),P6e=a("strong"),rqr=o("vit"),tqr=o(" \u2014 "),Joe=a("a"),aqr=o("TFViTModel"),nqr=o(" (ViT model)"),sqr=l(),KC=a("li"),B6e=a("strong"),lqr=o("vit_mae"),iqr=o(" \u2014 "),Yoe=a("a"),dqr=o("TFViTMAEModel"),cqr=o(" (ViTMAE model)"),fqr=l(),e5=a("li"),I6e=a("strong"),mqr=o("wav2vec2"),gqr=o(" \u2014 "),Zoe=a("a"),hqr=o("TFWav2Vec2Model"),uqr=o(" (Wav2Vec2 model)"),pqr=l(),o5=a("li"),N6e=a("strong"),_qr=o("whisper"),vqr=o(" \u2014 "),Koe=a("a"),bqr=o("TFWhisperModel"),Fqr=o(" (Whisper model)"),Tqr=l(),r5=a("li"),q6e=a("strong"),Mqr=o("xglm"),Eqr=o(" \u2014 "),ere=a("a"),Cqr=o("TFXGLMModel"),wqr=o(" (XGLM model)"),Aqr=l(),t5=a("li"),j6e=a("strong"),Lqr=o("xlm"),yqr=o(" \u2014 "),ore=a("a"),xqr=o("TFXLMModel"),$qr=o(" (XLM model)"),kqr=l(),a5=a("li"),D6e=a("strong"),Sqr=o("xlm-roberta"),Rqr=o(" \u2014 "),rre=a("a"),Pqr=o("TFXLMRobertaModel"),Bqr=o(" (XLM-RoBERTa model)"),Iqr=l(),n5=a("li"),G6e=a("strong"),Nqr=o("xlnet"),qqr=o(" \u2014 "),tre=a("a"),jqr=o("TFXLNetModel"),Dqr=o(" (XLNet model)"),Gqr=l(),F(s5.$$.fragment),kro=l(),of=a("h2"),l5=a("a"),O6e=a("span"),F(SS.$$.fragment),Oqr=l(),V6e=a("span"),Vqr=o("TFAutoModelForPreTraining"),Sro=l(),dr=a("div"),F(RS.$$.fragment),Xqr=l(),rf=a("p"),zqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),are=a("a"),Qqr=o("from_pretrained()"),Wqr=o(" class method or the "),nre=a("a"),Uqr=o("from_config()"),Hqr=o(` class
method.`),Jqr=l(),PS=a("p"),Yqr=o("This class cannot be instantiated directly using "),X6e=a("code"),Zqr=o("__init__()"),Kqr=o(" (throws an error)."),ejr=l(),Ut=a("div"),F(BS.$$.fragment),ojr=l(),z6e=a("p"),rjr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),tjr=l(),tf=a("p"),ajr=o(`Note:
Loading a model from its configuration file does `),Q6e=a("strong"),njr=o("not"),sjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sre=a("a"),ljr=o("from_pretrained()"),ijr=o(" to load the model weights."),djr=l(),F(i5.$$.fragment),cjr=l(),jr=a("div"),F(IS.$$.fragment),fjr=l(),W6e=a("p"),mjr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),gjr=l(),kn=a("p"),hjr=o("The model class to instantiate is selected based on the "),U6e=a("code"),ujr=o("model_type"),pjr=o(` property of the config object (either
passed as an argument or loaded from `),H6e=a("code"),_jr=o("pretrained_model_name_or_path"),vjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J6e=a("code"),bjr=o("pretrained_model_name_or_path"),Fjr=o(":"),Tjr=l(),le=a("ul"),d5=a("li"),Y6e=a("strong"),Mjr=o("albert"),Ejr=o(" \u2014 "),lre=a("a"),Cjr=o("TFAlbertForPreTraining"),wjr=o(" (ALBERT model)"),Ajr=l(),c5=a("li"),Z6e=a("strong"),Ljr=o("bart"),yjr=o(" \u2014 "),ire=a("a"),xjr=o("TFBartForConditionalGeneration"),$jr=o(" (BART model)"),kjr=l(),f5=a("li"),K6e=a("strong"),Sjr=o("bert"),Rjr=o(" \u2014 "),dre=a("a"),Pjr=o("TFBertForPreTraining"),Bjr=o(" (BERT model)"),Ijr=l(),m5=a("li"),e7e=a("strong"),Njr=o("camembert"),qjr=o(" \u2014 "),cre=a("a"),jjr=o("TFCamembertForMaskedLM"),Djr=o(" (CamemBERT model)"),Gjr=l(),g5=a("li"),o7e=a("strong"),Ojr=o("ctrl"),Vjr=o(" \u2014 "),fre=a("a"),Xjr=o("TFCTRLLMHeadModel"),zjr=o(" (CTRL model)"),Qjr=l(),h5=a("li"),r7e=a("strong"),Wjr=o("distilbert"),Ujr=o(" \u2014 "),mre=a("a"),Hjr=o("TFDistilBertForMaskedLM"),Jjr=o(" (DistilBERT model)"),Yjr=l(),u5=a("li"),t7e=a("strong"),Zjr=o("electra"),Kjr=o(" \u2014 "),gre=a("a"),eDr=o("TFElectraForPreTraining"),oDr=o(" (ELECTRA model)"),rDr=l(),p5=a("li"),a7e=a("strong"),tDr=o("flaubert"),aDr=o(" \u2014 "),hre=a("a"),nDr=o("TFFlaubertWithLMHeadModel"),sDr=o(" (FlauBERT model)"),lDr=l(),_5=a("li"),n7e=a("strong"),iDr=o("funnel"),dDr=o(" \u2014 "),ure=a("a"),cDr=o("TFFunnelForPreTraining"),fDr=o(" (Funnel Transformer model)"),mDr=l(),v5=a("li"),s7e=a("strong"),gDr=o("gpt2"),hDr=o(" \u2014 "),pre=a("a"),uDr=o("TFGPT2LMHeadModel"),pDr=o(" (OpenAI GPT-2 model)"),_Dr=l(),b5=a("li"),l7e=a("strong"),vDr=o("layoutlm"),bDr=o(" \u2014 "),_re=a("a"),FDr=o("TFLayoutLMForMaskedLM"),TDr=o(" (LayoutLM model)"),MDr=l(),F5=a("li"),i7e=a("strong"),EDr=o("lxmert"),CDr=o(" \u2014 "),vre=a("a"),wDr=o("TFLxmertForPreTraining"),ADr=o(" (LXMERT model)"),LDr=l(),T5=a("li"),d7e=a("strong"),yDr=o("mobilebert"),xDr=o(" \u2014 "),bre=a("a"),$Dr=o("TFMobileBertForPreTraining"),kDr=o(" (MobileBERT model)"),SDr=l(),M5=a("li"),c7e=a("strong"),RDr=o("mpnet"),PDr=o(" \u2014 "),Fre=a("a"),BDr=o("TFMPNetForMaskedLM"),IDr=o(" (MPNet model)"),NDr=l(),E5=a("li"),f7e=a("strong"),qDr=o("openai-gpt"),jDr=o(" \u2014 "),Tre=a("a"),DDr=o("TFOpenAIGPTLMHeadModel"),GDr=o(" (OpenAI GPT model)"),ODr=l(),C5=a("li"),m7e=a("strong"),VDr=o("roberta"),XDr=o(" \u2014 "),Mre=a("a"),zDr=o("TFRobertaForMaskedLM"),QDr=o(" (RoBERTa model)"),WDr=l(),w5=a("li"),g7e=a("strong"),UDr=o("t5"),HDr=o(" \u2014 "),Ere=a("a"),JDr=o("TFT5ForConditionalGeneration"),YDr=o(" (T5 model)"),ZDr=l(),A5=a("li"),h7e=a("strong"),KDr=o("tapas"),eGr=o(" \u2014 "),Cre=a("a"),oGr=o("TFTapasForMaskedLM"),rGr=o(" (TAPAS model)"),tGr=l(),L5=a("li"),u7e=a("strong"),aGr=o("transfo-xl"),nGr=o(" \u2014 "),wre=a("a"),sGr=o("TFTransfoXLLMHeadModel"),lGr=o(" (Transformer-XL model)"),iGr=l(),y5=a("li"),p7e=a("strong"),dGr=o("vit_mae"),cGr=o(" \u2014 "),Are=a("a"),fGr=o("TFViTMAEForPreTraining"),mGr=o(" (ViTMAE model)"),gGr=l(),x5=a("li"),_7e=a("strong"),hGr=o("xlm"),uGr=o(" \u2014 "),Lre=a("a"),pGr=o("TFXLMWithLMHeadModel"),_Gr=o(" (XLM model)"),vGr=l(),$5=a("li"),v7e=a("strong"),bGr=o("xlm-roberta"),FGr=o(" \u2014 "),yre=a("a"),TGr=o("TFXLMRobertaForMaskedLM"),MGr=o(" (XLM-RoBERTa model)"),EGr=l(),k5=a("li"),b7e=a("strong"),CGr=o("xlnet"),wGr=o(" \u2014 "),xre=a("a"),AGr=o("TFXLNetLMHeadModel"),LGr=o(" (XLNet model)"),yGr=l(),F(S5.$$.fragment),Rro=l(),af=a("h2"),R5=a("a"),F7e=a("span"),F(NS.$$.fragment),xGr=l(),T7e=a("span"),$Gr=o("TFAutoModelForCausalLM"),Pro=l(),cr=a("div"),F(qS.$$.fragment),kGr=l(),nf=a("p"),SGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$re=a("a"),RGr=o("from_pretrained()"),PGr=o(" class method or the "),kre=a("a"),BGr=o("from_config()"),IGr=o(` class
method.`),NGr=l(),jS=a("p"),qGr=o("This class cannot be instantiated directly using "),M7e=a("code"),jGr=o("__init__()"),DGr=o(" (throws an error)."),GGr=l(),Ht=a("div"),F(DS.$$.fragment),OGr=l(),E7e=a("p"),VGr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),XGr=l(),sf=a("p"),zGr=o(`Note:
Loading a model from its configuration file does `),C7e=a("strong"),QGr=o("not"),WGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sre=a("a"),UGr=o("from_pretrained()"),HGr=o(" to load the model weights."),JGr=l(),F(P5.$$.fragment),YGr=l(),Dr=a("div"),F(GS.$$.fragment),ZGr=l(),w7e=a("p"),KGr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),eOr=l(),Sn=a("p"),oOr=o("The model class to instantiate is selected based on the "),A7e=a("code"),rOr=o("model_type"),tOr=o(` property of the config object (either
passed as an argument or loaded from `),L7e=a("code"),aOr=o("pretrained_model_name_or_path"),nOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y7e=a("code"),sOr=o("pretrained_model_name_or_path"),lOr=o(":"),iOr=l(),Me=a("ul"),B5=a("li"),x7e=a("strong"),dOr=o("bert"),cOr=o(" \u2014 "),Rre=a("a"),fOr=o("TFBertLMHeadModel"),mOr=o(" (BERT model)"),gOr=l(),I5=a("li"),$7e=a("strong"),hOr=o("camembert"),uOr=o(" \u2014 "),Pre=a("a"),pOr=o("TFCamembertForCausalLM"),_Or=o(" (CamemBERT model)"),vOr=l(),N5=a("li"),k7e=a("strong"),bOr=o("ctrl"),FOr=o(" \u2014 "),Bre=a("a"),TOr=o("TFCTRLLMHeadModel"),MOr=o(" (CTRL model)"),EOr=l(),q5=a("li"),S7e=a("strong"),COr=o("gpt2"),wOr=o(" \u2014 "),Ire=a("a"),AOr=o("TFGPT2LMHeadModel"),LOr=o(" (OpenAI GPT-2 model)"),yOr=l(),j5=a("li"),R7e=a("strong"),xOr=o("gptj"),$Or=o(" \u2014 "),Nre=a("a"),kOr=o("TFGPTJForCausalLM"),SOr=o(" (GPT-J model)"),ROr=l(),D5=a("li"),P7e=a("strong"),POr=o("openai-gpt"),BOr=o(" \u2014 "),qre=a("a"),IOr=o("TFOpenAIGPTLMHeadModel"),NOr=o(" (OpenAI GPT model)"),qOr=l(),G5=a("li"),B7e=a("strong"),jOr=o("opt"),DOr=o(" \u2014 "),jre=a("a"),GOr=o("TFOPTForCausalLM"),OOr=o(" (OPT model)"),VOr=l(),O5=a("li"),I7e=a("strong"),XOr=o("rembert"),zOr=o(" \u2014 "),Dre=a("a"),QOr=o("TFRemBertForCausalLM"),WOr=o(" (RemBERT model)"),UOr=l(),V5=a("li"),N7e=a("strong"),HOr=o("roberta"),JOr=o(" \u2014 "),Gre=a("a"),YOr=o("TFRobertaForCausalLM"),ZOr=o(" (RoBERTa model)"),KOr=l(),X5=a("li"),q7e=a("strong"),eVr=o("roformer"),oVr=o(" \u2014 "),Ore=a("a"),rVr=o("TFRoFormerForCausalLM"),tVr=o(" (RoFormer model)"),aVr=l(),z5=a("li"),j7e=a("strong"),nVr=o("transfo-xl"),sVr=o(" \u2014 "),Vre=a("a"),lVr=o("TFTransfoXLLMHeadModel"),iVr=o(" (Transformer-XL model)"),dVr=l(),Q5=a("li"),D7e=a("strong"),cVr=o("xglm"),fVr=o(" \u2014 "),Xre=a("a"),mVr=o("TFXGLMForCausalLM"),gVr=o(" (XGLM model)"),hVr=l(),W5=a("li"),G7e=a("strong"),uVr=o("xlm"),pVr=o(" \u2014 "),zre=a("a"),_Vr=o("TFXLMWithLMHeadModel"),vVr=o(" (XLM model)"),bVr=l(),U5=a("li"),O7e=a("strong"),FVr=o("xlnet"),TVr=o(" \u2014 "),Qre=a("a"),MVr=o("TFXLNetLMHeadModel"),EVr=o(" (XLNet model)"),CVr=l(),F(H5.$$.fragment),Bro=l(),lf=a("h2"),J5=a("a"),V7e=a("span"),F(OS.$$.fragment),wVr=l(),X7e=a("span"),AVr=o("TFAutoModelForImageClassification"),Iro=l(),fr=a("div"),F(VS.$$.fragment),LVr=l(),df=a("p"),yVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Wre=a("a"),xVr=o("from_pretrained()"),$Vr=o(" class method or the "),Ure=a("a"),kVr=o("from_config()"),SVr=o(` class
method.`),RVr=l(),XS=a("p"),PVr=o("This class cannot be instantiated directly using "),z7e=a("code"),BVr=o("__init__()"),IVr=o(" (throws an error)."),NVr=l(),Jt=a("div"),F(zS.$$.fragment),qVr=l(),Q7e=a("p"),jVr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),DVr=l(),cf=a("p"),GVr=o(`Note:
Loading a model from its configuration file does `),W7e=a("strong"),OVr=o("not"),VVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hre=a("a"),XVr=o("from_pretrained()"),zVr=o(" to load the model weights."),QVr=l(),F(Y5.$$.fragment),WVr=l(),Gr=a("div"),F(QS.$$.fragment),UVr=l(),U7e=a("p"),HVr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),JVr=l(),Rn=a("p"),YVr=o("The model class to instantiate is selected based on the "),H7e=a("code"),ZVr=o("model_type"),KVr=o(` property of the config object (either
passed as an argument or loaded from `),J7e=a("code"),eXr=o("pretrained_model_name_or_path"),oXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y7e=a("code"),rXr=o("pretrained_model_name_or_path"),tXr=o(":"),aXr=l(),Be=a("ul"),Z5=a("li"),Z7e=a("strong"),nXr=o("convnext"),sXr=o(" \u2014 "),Jre=a("a"),lXr=o("TFConvNextForImageClassification"),iXr=o(" (ConvNeXT model)"),dXr=l(),K5=a("li"),K7e=a("strong"),cXr=o("data2vec-vision"),fXr=o(" \u2014 "),Yre=a("a"),mXr=o("TFData2VecVisionForImageClassification"),gXr=o(" (Data2VecVision model)"),hXr=l(),Al=a("li"),eLe=a("strong"),uXr=o("deit"),pXr=o(" \u2014 "),Zre=a("a"),_Xr=o("TFDeiTForImageClassification"),vXr=o(" or "),Kre=a("a"),bXr=o("TFDeiTForImageClassificationWithTeacher"),FXr=o(" (DeiT model)"),TXr=l(),ew=a("li"),oLe=a("strong"),MXr=o("mobilevit"),EXr=o(" \u2014 "),ete=a("a"),CXr=o("TFMobileViTForImageClassification"),wXr=o(" (MobileViT model)"),AXr=l(),ow=a("li"),rLe=a("strong"),LXr=o("regnet"),yXr=o(" \u2014 "),ote=a("a"),xXr=o("TFRegNetForImageClassification"),$Xr=o(" (RegNet model)"),kXr=l(),rw=a("li"),tLe=a("strong"),SXr=o("resnet"),RXr=o(" \u2014 "),rte=a("a"),PXr=o("TFResNetForImageClassification"),BXr=o(" (ResNet model)"),IXr=l(),tw=a("li"),aLe=a("strong"),NXr=o("segformer"),qXr=o(" \u2014 "),tte=a("a"),jXr=o("TFSegformerForImageClassification"),DXr=o(" (SegFormer model)"),GXr=l(),aw=a("li"),nLe=a("strong"),OXr=o("swin"),VXr=o(" \u2014 "),ate=a("a"),XXr=o("TFSwinForImageClassification"),zXr=o(" (Swin Transformer model)"),QXr=l(),nw=a("li"),sLe=a("strong"),WXr=o("vit"),UXr=o(" \u2014 "),nte=a("a"),HXr=o("TFViTForImageClassification"),JXr=o(" (ViT model)"),YXr=l(),F(sw.$$.fragment),Nro=l(),ff=a("h2"),lw=a("a"),lLe=a("span"),F(WS.$$.fragment),ZXr=l(),iLe=a("span"),KXr=o("TFAutoModelForSemanticSegmentation"),qro=l(),mr=a("div"),F(US.$$.fragment),ezr=l(),mf=a("p"),ozr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),ste=a("a"),rzr=o("from_pretrained()"),tzr=o(" class method or the "),lte=a("a"),azr=o("from_config()"),nzr=o(` class
method.`),szr=l(),HS=a("p"),lzr=o("This class cannot be instantiated directly using "),dLe=a("code"),izr=o("__init__()"),dzr=o(" (throws an error)."),czr=l(),Yt=a("div"),F(JS.$$.fragment),fzr=l(),cLe=a("p"),mzr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),gzr=l(),gf=a("p"),hzr=o(`Note:
Loading a model from its configuration file does `),fLe=a("strong"),uzr=o("not"),pzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ite=a("a"),_zr=o("from_pretrained()"),vzr=o(" to load the model weights."),bzr=l(),F(iw.$$.fragment),Fzr=l(),Or=a("div"),F(YS.$$.fragment),Tzr=l(),mLe=a("p"),Mzr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Ezr=l(),Pn=a("p"),Czr=o("The model class to instantiate is selected based on the "),gLe=a("code"),wzr=o("model_type"),Azr=o(` property of the config object (either
passed as an argument or loaded from `),hLe=a("code"),Lzr=o("pretrained_model_name_or_path"),yzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uLe=a("code"),xzr=o("pretrained_model_name_or_path"),$zr=o(":"),kzr=l(),hf=a("ul"),dw=a("li"),pLe=a("strong"),Szr=o("data2vec-vision"),Rzr=o(" \u2014 "),dte=a("a"),Pzr=o("TFData2VecVisionForSemanticSegmentation"),Bzr=o(" (Data2VecVision model)"),Izr=l(),cw=a("li"),_Le=a("strong"),Nzr=o("mobilevit"),qzr=o(" \u2014 "),cte=a("a"),jzr=o("TFMobileViTForSemanticSegmentation"),Dzr=o(" (MobileViT model)"),Gzr=l(),fw=a("li"),vLe=a("strong"),Ozr=o("segformer"),Vzr=o(" \u2014 "),fte=a("a"),Xzr=o("TFSegformerForSemanticSegmentation"),zzr=o(" (SegFormer model)"),Qzr=l(),F(mw.$$.fragment),jro=l(),uf=a("h2"),gw=a("a"),bLe=a("span"),F(ZS.$$.fragment),Wzr=l(),FLe=a("span"),Uzr=o("TFAutoModelForMaskedLM"),Dro=l(),gr=a("div"),F(KS.$$.fragment),Hzr=l(),pf=a("p"),Jzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mte=a("a"),Yzr=o("from_pretrained()"),Zzr=o(" class method or the "),gte=a("a"),Kzr=o("from_config()"),eQr=o(` class
method.`),oQr=l(),eR=a("p"),rQr=o("This class cannot be instantiated directly using "),TLe=a("code"),tQr=o("__init__()"),aQr=o(" (throws an error)."),nQr=l(),Zt=a("div"),F(oR.$$.fragment),sQr=l(),MLe=a("p"),lQr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),iQr=l(),_f=a("p"),dQr=o(`Note:
Loading a model from its configuration file does `),ELe=a("strong"),cQr=o("not"),fQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hte=a("a"),mQr=o("from_pretrained()"),gQr=o(" to load the model weights."),hQr=l(),F(hw.$$.fragment),uQr=l(),Vr=a("div"),F(rR.$$.fragment),pQr=l(),CLe=a("p"),_Qr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),vQr=l(),Bn=a("p"),bQr=o("The model class to instantiate is selected based on the "),wLe=a("code"),FQr=o("model_type"),TQr=o(` property of the config object (either
passed as an argument or loaded from `),ALe=a("code"),MQr=o("pretrained_model_name_or_path"),EQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LLe=a("code"),CQr=o("pretrained_model_name_or_path"),wQr=o(":"),AQr=l(),ge=a("ul"),uw=a("li"),yLe=a("strong"),LQr=o("albert"),yQr=o(" \u2014 "),ute=a("a"),xQr=o("TFAlbertForMaskedLM"),$Qr=o(" (ALBERT model)"),kQr=l(),pw=a("li"),xLe=a("strong"),SQr=o("bert"),RQr=o(" \u2014 "),pte=a("a"),PQr=o("TFBertForMaskedLM"),BQr=o(" (BERT model)"),IQr=l(),_w=a("li"),$Le=a("strong"),NQr=o("camembert"),qQr=o(" \u2014 "),_te=a("a"),jQr=o("TFCamembertForMaskedLM"),DQr=o(" (CamemBERT model)"),GQr=l(),vw=a("li"),kLe=a("strong"),OQr=o("convbert"),VQr=o(" \u2014 "),vte=a("a"),XQr=o("TFConvBertForMaskedLM"),zQr=o(" (ConvBERT model)"),QQr=l(),bw=a("li"),SLe=a("strong"),WQr=o("deberta"),UQr=o(" \u2014 "),bte=a("a"),HQr=o("TFDebertaForMaskedLM"),JQr=o(" (DeBERTa model)"),YQr=l(),Fw=a("li"),RLe=a("strong"),ZQr=o("deberta-v2"),KQr=o(" \u2014 "),Fte=a("a"),eWr=o("TFDebertaV2ForMaskedLM"),oWr=o(" (DeBERTa-v2 model)"),rWr=l(),Tw=a("li"),PLe=a("strong"),tWr=o("distilbert"),aWr=o(" \u2014 "),Tte=a("a"),nWr=o("TFDistilBertForMaskedLM"),sWr=o(" (DistilBERT model)"),lWr=l(),Mw=a("li"),BLe=a("strong"),iWr=o("electra"),dWr=o(" \u2014 "),Mte=a("a"),cWr=o("TFElectraForMaskedLM"),fWr=o(" (ELECTRA model)"),mWr=l(),Ew=a("li"),ILe=a("strong"),gWr=o("flaubert"),hWr=o(" \u2014 "),Ete=a("a"),uWr=o("TFFlaubertWithLMHeadModel"),pWr=o(" (FlauBERT model)"),_Wr=l(),Cw=a("li"),NLe=a("strong"),vWr=o("funnel"),bWr=o(" \u2014 "),Cte=a("a"),FWr=o("TFFunnelForMaskedLM"),TWr=o(" (Funnel Transformer model)"),MWr=l(),ww=a("li"),qLe=a("strong"),EWr=o("layoutlm"),CWr=o(" \u2014 "),wte=a("a"),wWr=o("TFLayoutLMForMaskedLM"),AWr=o(" (LayoutLM model)"),LWr=l(),Aw=a("li"),jLe=a("strong"),yWr=o("longformer"),xWr=o(" \u2014 "),Ate=a("a"),$Wr=o("TFLongformerForMaskedLM"),kWr=o(" (Longformer model)"),SWr=l(),Lw=a("li"),DLe=a("strong"),RWr=o("mobilebert"),PWr=o(" \u2014 "),Lte=a("a"),BWr=o("TFMobileBertForMaskedLM"),IWr=o(" (MobileBERT model)"),NWr=l(),yw=a("li"),GLe=a("strong"),qWr=o("mpnet"),jWr=o(" \u2014 "),yte=a("a"),DWr=o("TFMPNetForMaskedLM"),GWr=o(" (MPNet model)"),OWr=l(),xw=a("li"),OLe=a("strong"),VWr=o("rembert"),XWr=o(" \u2014 "),xte=a("a"),zWr=o("TFRemBertForMaskedLM"),QWr=o(" (RemBERT model)"),WWr=l(),$w=a("li"),VLe=a("strong"),UWr=o("roberta"),HWr=o(" \u2014 "),$te=a("a"),JWr=o("TFRobertaForMaskedLM"),YWr=o(" (RoBERTa model)"),ZWr=l(),kw=a("li"),XLe=a("strong"),KWr=o("roformer"),eUr=o(" \u2014 "),kte=a("a"),oUr=o("TFRoFormerForMaskedLM"),rUr=o(" (RoFormer model)"),tUr=l(),Sw=a("li"),zLe=a("strong"),aUr=o("tapas"),nUr=o(" \u2014 "),Ste=a("a"),sUr=o("TFTapasForMaskedLM"),lUr=o(" (TAPAS model)"),iUr=l(),Rw=a("li"),QLe=a("strong"),dUr=o("xlm"),cUr=o(" \u2014 "),Rte=a("a"),fUr=o("TFXLMWithLMHeadModel"),mUr=o(" (XLM model)"),gUr=l(),Pw=a("li"),WLe=a("strong"),hUr=o("xlm-roberta"),uUr=o(" \u2014 "),Pte=a("a"),pUr=o("TFXLMRobertaForMaskedLM"),_Ur=o(" (XLM-RoBERTa model)"),vUr=l(),F(Bw.$$.fragment),Gro=l(),vf=a("h2"),Iw=a("a"),ULe=a("span"),F(tR.$$.fragment),bUr=l(),HLe=a("span"),FUr=o("TFAutoModelForSeq2SeqLM"),Oro=l(),hr=a("div"),F(aR.$$.fragment),TUr=l(),bf=a("p"),MUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Bte=a("a"),EUr=o("from_pretrained()"),CUr=o(" class method or the "),Ite=a("a"),wUr=o("from_config()"),AUr=o(` class
method.`),LUr=l(),nR=a("p"),yUr=o("This class cannot be instantiated directly using "),JLe=a("code"),xUr=o("__init__()"),$Ur=o(" (throws an error)."),kUr=l(),Kt=a("div"),F(sR.$$.fragment),SUr=l(),YLe=a("p"),RUr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),PUr=l(),Ff=a("p"),BUr=o(`Note:
Loading a model from its configuration file does `),ZLe=a("strong"),IUr=o("not"),NUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nte=a("a"),qUr=o("from_pretrained()"),jUr=o(" to load the model weights."),DUr=l(),F(Nw.$$.fragment),GUr=l(),Xr=a("div"),F(lR.$$.fragment),OUr=l(),KLe=a("p"),VUr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),XUr=l(),In=a("p"),zUr=o("The model class to instantiate is selected based on the "),e8e=a("code"),QUr=o("model_type"),WUr=o(` property of the config object (either
passed as an argument or loaded from `),o8e=a("code"),UUr=o("pretrained_model_name_or_path"),HUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r8e=a("code"),JUr=o("pretrained_model_name_or_path"),YUr=o(":"),ZUr=l(),ye=a("ul"),qw=a("li"),t8e=a("strong"),KUr=o("bart"),eHr=o(" \u2014 "),qte=a("a"),oHr=o("TFBartForConditionalGeneration"),rHr=o(" (BART model)"),tHr=l(),jw=a("li"),a8e=a("strong"),aHr=o("blenderbot"),nHr=o(" \u2014 "),jte=a("a"),sHr=o("TFBlenderbotForConditionalGeneration"),lHr=o(" (Blenderbot model)"),iHr=l(),Dw=a("li"),n8e=a("strong"),dHr=o("blenderbot-small"),cHr=o(" \u2014 "),Dte=a("a"),fHr=o("TFBlenderbotSmallForConditionalGeneration"),mHr=o(" (BlenderbotSmall model)"),gHr=l(),Gw=a("li"),s8e=a("strong"),hHr=o("encoder-decoder"),uHr=o(" \u2014 "),Gte=a("a"),pHr=o("TFEncoderDecoderModel"),_Hr=o(" (Encoder decoder model)"),vHr=l(),Ow=a("li"),l8e=a("strong"),bHr=o("led"),FHr=o(" \u2014 "),Ote=a("a"),THr=o("TFLEDForConditionalGeneration"),MHr=o(" (LED model)"),EHr=l(),Vw=a("li"),i8e=a("strong"),CHr=o("marian"),wHr=o(" \u2014 "),Vte=a("a"),AHr=o("TFMarianMTModel"),LHr=o(" (Marian model)"),yHr=l(),Xw=a("li"),d8e=a("strong"),xHr=o("mbart"),$Hr=o(" \u2014 "),Xte=a("a"),kHr=o("TFMBartForConditionalGeneration"),SHr=o(" (mBART model)"),RHr=l(),zw=a("li"),c8e=a("strong"),PHr=o("mt5"),BHr=o(" \u2014 "),zte=a("a"),IHr=o("TFMT5ForConditionalGeneration"),NHr=o(" (MT5 model)"),qHr=l(),Qw=a("li"),f8e=a("strong"),jHr=o("pegasus"),DHr=o(" \u2014 "),Qte=a("a"),GHr=o("TFPegasusForConditionalGeneration"),OHr=o(" (Pegasus model)"),VHr=l(),Ww=a("li"),m8e=a("strong"),XHr=o("t5"),zHr=o(" \u2014 "),Wte=a("a"),QHr=o("TFT5ForConditionalGeneration"),WHr=o(" (T5 model)"),UHr=l(),F(Uw.$$.fragment),Vro=l(),Tf=a("h2"),Hw=a("a"),g8e=a("span"),F(iR.$$.fragment),HHr=l(),h8e=a("span"),JHr=o("TFAutoModelForSequenceClassification"),Xro=l(),ur=a("div"),F(dR.$$.fragment),YHr=l(),Mf=a("p"),ZHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ute=a("a"),KHr=o("from_pretrained()"),eJr=o(" class method or the "),Hte=a("a"),oJr=o("from_config()"),rJr=o(` class
method.`),tJr=l(),cR=a("p"),aJr=o("This class cannot be instantiated directly using "),u8e=a("code"),nJr=o("__init__()"),sJr=o(" (throws an error)."),lJr=l(),ea=a("div"),F(fR.$$.fragment),iJr=l(),p8e=a("p"),dJr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),cJr=l(),Ef=a("p"),fJr=o(`Note:
Loading a model from its configuration file does `),_8e=a("strong"),mJr=o("not"),gJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jte=a("a"),hJr=o("from_pretrained()"),uJr=o(" to load the model weights."),pJr=l(),F(Jw.$$.fragment),_Jr=l(),zr=a("div"),F(mR.$$.fragment),vJr=l(),v8e=a("p"),bJr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),FJr=l(),Nn=a("p"),TJr=o("The model class to instantiate is selected based on the "),b8e=a("code"),MJr=o("model_type"),EJr=o(` property of the config object (either
passed as an argument or loaded from `),F8e=a("code"),CJr=o("pretrained_model_name_or_path"),wJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T8e=a("code"),AJr=o("pretrained_model_name_or_path"),LJr=o(":"),yJr=l(),re=a("ul"),Yw=a("li"),M8e=a("strong"),xJr=o("albert"),$Jr=o(" \u2014 "),Yte=a("a"),kJr=o("TFAlbertForSequenceClassification"),SJr=o(" (ALBERT model)"),RJr=l(),Zw=a("li"),E8e=a("strong"),PJr=o("bert"),BJr=o(" \u2014 "),Zte=a("a"),IJr=o("TFBertForSequenceClassification"),NJr=o(" (BERT model)"),qJr=l(),Kw=a("li"),C8e=a("strong"),jJr=o("camembert"),DJr=o(" \u2014 "),Kte=a("a"),GJr=o("TFCamembertForSequenceClassification"),OJr=o(" (CamemBERT model)"),VJr=l(),eA=a("li"),w8e=a("strong"),XJr=o("convbert"),zJr=o(" \u2014 "),eae=a("a"),QJr=o("TFConvBertForSequenceClassification"),WJr=o(" (ConvBERT model)"),UJr=l(),oA=a("li"),A8e=a("strong"),HJr=o("ctrl"),JJr=o(" \u2014 "),oae=a("a"),YJr=o("TFCTRLForSequenceClassification"),ZJr=o(" (CTRL model)"),KJr=l(),rA=a("li"),L8e=a("strong"),eYr=o("deberta"),oYr=o(" \u2014 "),rae=a("a"),rYr=o("TFDebertaForSequenceClassification"),tYr=o(" (DeBERTa model)"),aYr=l(),tA=a("li"),y8e=a("strong"),nYr=o("deberta-v2"),sYr=o(" \u2014 "),tae=a("a"),lYr=o("TFDebertaV2ForSequenceClassification"),iYr=o(" (DeBERTa-v2 model)"),dYr=l(),aA=a("li"),x8e=a("strong"),cYr=o("distilbert"),fYr=o(" \u2014 "),aae=a("a"),mYr=o("TFDistilBertForSequenceClassification"),gYr=o(" (DistilBERT model)"),hYr=l(),nA=a("li"),$8e=a("strong"),uYr=o("electra"),pYr=o(" \u2014 "),nae=a("a"),_Yr=o("TFElectraForSequenceClassification"),vYr=o(" (ELECTRA model)"),bYr=l(),sA=a("li"),k8e=a("strong"),FYr=o("flaubert"),TYr=o(" \u2014 "),sae=a("a"),MYr=o("TFFlaubertForSequenceClassification"),EYr=o(" (FlauBERT model)"),CYr=l(),lA=a("li"),S8e=a("strong"),wYr=o("funnel"),AYr=o(" \u2014 "),lae=a("a"),LYr=o("TFFunnelForSequenceClassification"),yYr=o(" (Funnel Transformer model)"),xYr=l(),iA=a("li"),R8e=a("strong"),$Yr=o("gpt2"),kYr=o(" \u2014 "),iae=a("a"),SYr=o("TFGPT2ForSequenceClassification"),RYr=o(" (OpenAI GPT-2 model)"),PYr=l(),dA=a("li"),P8e=a("strong"),BYr=o("gptj"),IYr=o(" \u2014 "),dae=a("a"),NYr=o("TFGPTJForSequenceClassification"),qYr=o(" (GPT-J model)"),jYr=l(),cA=a("li"),B8e=a("strong"),DYr=o("layoutlm"),GYr=o(" \u2014 "),cae=a("a"),OYr=o("TFLayoutLMForSequenceClassification"),VYr=o(" (LayoutLM model)"),XYr=l(),fA=a("li"),I8e=a("strong"),zYr=o("layoutlmv3"),QYr=o(" \u2014 "),fae=a("a"),WYr=o("TFLayoutLMv3ForSequenceClassification"),UYr=o(" (LayoutLMv3 model)"),HYr=l(),mA=a("li"),N8e=a("strong"),JYr=o("longformer"),YYr=o(" \u2014 "),mae=a("a"),ZYr=o("TFLongformerForSequenceClassification"),KYr=o(" (Longformer model)"),eZr=l(),gA=a("li"),q8e=a("strong"),oZr=o("mobilebert"),rZr=o(" \u2014 "),gae=a("a"),tZr=o("TFMobileBertForSequenceClassification"),aZr=o(" (MobileBERT model)"),nZr=l(),hA=a("li"),j8e=a("strong"),sZr=o("mpnet"),lZr=o(" \u2014 "),hae=a("a"),iZr=o("TFMPNetForSequenceClassification"),dZr=o(" (MPNet model)"),cZr=l(),uA=a("li"),D8e=a("strong"),fZr=o("openai-gpt"),mZr=o(" \u2014 "),uae=a("a"),gZr=o("TFOpenAIGPTForSequenceClassification"),hZr=o(" (OpenAI GPT model)"),uZr=l(),pA=a("li"),G8e=a("strong"),pZr=o("rembert"),_Zr=o(" \u2014 "),pae=a("a"),vZr=o("TFRemBertForSequenceClassification"),bZr=o(" (RemBERT model)"),FZr=l(),_A=a("li"),O8e=a("strong"),TZr=o("roberta"),MZr=o(" \u2014 "),_ae=a("a"),EZr=o("TFRobertaForSequenceClassification"),CZr=o(" (RoBERTa model)"),wZr=l(),vA=a("li"),V8e=a("strong"),AZr=o("roformer"),LZr=o(" \u2014 "),vae=a("a"),yZr=o("TFRoFormerForSequenceClassification"),xZr=o(" (RoFormer model)"),$Zr=l(),bA=a("li"),X8e=a("strong"),kZr=o("tapas"),SZr=o(" \u2014 "),bae=a("a"),RZr=o("TFTapasForSequenceClassification"),PZr=o(" (TAPAS model)"),BZr=l(),FA=a("li"),z8e=a("strong"),IZr=o("transfo-xl"),NZr=o(" \u2014 "),Fae=a("a"),qZr=o("TFTransfoXLForSequenceClassification"),jZr=o(" (Transformer-XL model)"),DZr=l(),TA=a("li"),Q8e=a("strong"),GZr=o("xlm"),OZr=o(" \u2014 "),Tae=a("a"),VZr=o("TFXLMForSequenceClassification"),XZr=o(" (XLM model)"),zZr=l(),MA=a("li"),W8e=a("strong"),QZr=o("xlm-roberta"),WZr=o(" \u2014 "),Mae=a("a"),UZr=o("TFXLMRobertaForSequenceClassification"),HZr=o(" (XLM-RoBERTa model)"),JZr=l(),EA=a("li"),U8e=a("strong"),YZr=o("xlnet"),ZZr=o(" \u2014 "),Eae=a("a"),KZr=o("TFXLNetForSequenceClassification"),eKr=o(" (XLNet model)"),oKr=l(),F(CA.$$.fragment),zro=l(),Cf=a("h2"),wA=a("a"),H8e=a("span"),F(gR.$$.fragment),rKr=l(),J8e=a("span"),tKr=o("TFAutoModelForMultipleChoice"),Qro=l(),pr=a("div"),F(hR.$$.fragment),aKr=l(),wf=a("p"),nKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Cae=a("a"),sKr=o("from_pretrained()"),lKr=o(" class method or the "),wae=a("a"),iKr=o("from_config()"),dKr=o(` class
method.`),cKr=l(),uR=a("p"),fKr=o("This class cannot be instantiated directly using "),Y8e=a("code"),mKr=o("__init__()"),gKr=o(" (throws an error)."),hKr=l(),oa=a("div"),F(pR.$$.fragment),uKr=l(),Z8e=a("p"),pKr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),_Kr=l(),Af=a("p"),vKr=o(`Note:
Loading a model from its configuration file does `),K8e=a("strong"),bKr=o("not"),FKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aae=a("a"),TKr=o("from_pretrained()"),MKr=o(" to load the model weights."),EKr=l(),F(AA.$$.fragment),CKr=l(),Qr=a("div"),F(_R.$$.fragment),wKr=l(),eye=a("p"),AKr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),LKr=l(),qn=a("p"),yKr=o("The model class to instantiate is selected based on the "),oye=a("code"),xKr=o("model_type"),$Kr=o(` property of the config object (either
passed as an argument or loaded from `),rye=a("code"),kKr=o("pretrained_model_name_or_path"),SKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tye=a("code"),RKr=o("pretrained_model_name_or_path"),PKr=o(":"),BKr=l(),be=a("ul"),LA=a("li"),aye=a("strong"),IKr=o("albert"),NKr=o(" \u2014 "),Lae=a("a"),qKr=o("TFAlbertForMultipleChoice"),jKr=o(" (ALBERT model)"),DKr=l(),yA=a("li"),nye=a("strong"),GKr=o("bert"),OKr=o(" \u2014 "),yae=a("a"),VKr=o("TFBertForMultipleChoice"),XKr=o(" (BERT model)"),zKr=l(),xA=a("li"),sye=a("strong"),QKr=o("camembert"),WKr=o(" \u2014 "),xae=a("a"),UKr=o("TFCamembertForMultipleChoice"),HKr=o(" (CamemBERT model)"),JKr=l(),$A=a("li"),lye=a("strong"),YKr=o("convbert"),ZKr=o(" \u2014 "),$ae=a("a"),KKr=o("TFConvBertForMultipleChoice"),eet=o(" (ConvBERT model)"),oet=l(),kA=a("li"),iye=a("strong"),ret=o("distilbert"),tet=o(" \u2014 "),kae=a("a"),aet=o("TFDistilBertForMultipleChoice"),net=o(" (DistilBERT model)"),set=l(),SA=a("li"),dye=a("strong"),iet=o("electra"),det=o(" \u2014 "),Sae=a("a"),cet=o("TFElectraForMultipleChoice"),fet=o(" (ELECTRA model)"),met=l(),RA=a("li"),cye=a("strong"),get=o("flaubert"),het=o(" \u2014 "),Rae=a("a"),uet=o("TFFlaubertForMultipleChoice"),pet=o(" (FlauBERT model)"),_et=l(),PA=a("li"),fye=a("strong"),vet=o("funnel"),bet=o(" \u2014 "),Pae=a("a"),Fet=o("TFFunnelForMultipleChoice"),Tet=o(" (Funnel Transformer model)"),Met=l(),BA=a("li"),mye=a("strong"),Eet=o("longformer"),Cet=o(" \u2014 "),Bae=a("a"),wet=o("TFLongformerForMultipleChoice"),Aet=o(" (Longformer model)"),Let=l(),IA=a("li"),gye=a("strong"),yet=o("mobilebert"),xet=o(" \u2014 "),Iae=a("a"),$et=o("TFMobileBertForMultipleChoice"),ket=o(" (MobileBERT model)"),Set=l(),NA=a("li"),hye=a("strong"),Ret=o("mpnet"),Pet=o(" \u2014 "),Nae=a("a"),Bet=o("TFMPNetForMultipleChoice"),Iet=o(" (MPNet model)"),Net=l(),qA=a("li"),uye=a("strong"),qet=o("rembert"),jet=o(" \u2014 "),qae=a("a"),Det=o("TFRemBertForMultipleChoice"),Get=o(" (RemBERT model)"),Oet=l(),jA=a("li"),pye=a("strong"),Vet=o("roberta"),Xet=o(" \u2014 "),jae=a("a"),zet=o("TFRobertaForMultipleChoice"),Qet=o(" (RoBERTa model)"),Wet=l(),DA=a("li"),_ye=a("strong"),Uet=o("roformer"),Het=o(" \u2014 "),Dae=a("a"),Jet=o("TFRoFormerForMultipleChoice"),Yet=o(" (RoFormer model)"),Zet=l(),GA=a("li"),vye=a("strong"),Ket=o("xlm"),eot=o(" \u2014 "),Gae=a("a"),oot=o("TFXLMForMultipleChoice"),rot=o(" (XLM model)"),tot=l(),OA=a("li"),bye=a("strong"),aot=o("xlm-roberta"),not=o(" \u2014 "),Oae=a("a"),sot=o("TFXLMRobertaForMultipleChoice"),lot=o(" (XLM-RoBERTa model)"),iot=l(),VA=a("li"),Fye=a("strong"),dot=o("xlnet"),cot=o(" \u2014 "),Vae=a("a"),fot=o("TFXLNetForMultipleChoice"),mot=o(" (XLNet model)"),got=l(),F(XA.$$.fragment),Wro=l(),Lf=a("h2"),zA=a("a"),Tye=a("span"),F(vR.$$.fragment),hot=l(),Mye=a("span"),uot=o("TFAutoModelForNextSentencePrediction"),Uro=l(),_r=a("div"),F(bR.$$.fragment),pot=l(),yf=a("p"),_ot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Xae=a("a"),vot=o("from_pretrained()"),bot=o(" class method or the "),zae=a("a"),Fot=o("from_config()"),Tot=o(` class
method.`),Mot=l(),FR=a("p"),Eot=o("This class cannot be instantiated directly using "),Eye=a("code"),Cot=o("__init__()"),wot=o(" (throws an error)."),Aot=l(),ra=a("div"),F(TR.$$.fragment),Lot=l(),Cye=a("p"),yot=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),xot=l(),xf=a("p"),$ot=o(`Note:
Loading a model from its configuration file does `),wye=a("strong"),kot=o("not"),Sot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qae=a("a"),Rot=o("from_pretrained()"),Pot=o(" to load the model weights."),Bot=l(),F(QA.$$.fragment),Iot=l(),Wr=a("div"),F(MR.$$.fragment),Not=l(),Aye=a("p"),qot=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),jot=l(),jn=a("p"),Dot=o("The model class to instantiate is selected based on the "),Lye=a("code"),Got=o("model_type"),Oot=o(` property of the config object (either
passed as an argument or loaded from `),yye=a("code"),Vot=o("pretrained_model_name_or_path"),Xot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xye=a("code"),zot=o("pretrained_model_name_or_path"),Qot=o(":"),Wot=l(),ER=a("ul"),WA=a("li"),$ye=a("strong"),Uot=o("bert"),Hot=o(" \u2014 "),Wae=a("a"),Jot=o("TFBertForNextSentencePrediction"),Yot=o(" (BERT model)"),Zot=l(),UA=a("li"),kye=a("strong"),Kot=o("mobilebert"),ert=o(" \u2014 "),Uae=a("a"),ort=o("TFMobileBertForNextSentencePrediction"),rrt=o(" (MobileBERT model)"),trt=l(),F(HA.$$.fragment),Hro=l(),$f=a("h2"),JA=a("a"),Sye=a("span"),F(CR.$$.fragment),art=l(),Rye=a("span"),nrt=o("TFAutoModelForTableQuestionAnswering"),Jro=l(),vr=a("div"),F(wR.$$.fragment),srt=l(),kf=a("p"),lrt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Hae=a("a"),irt=o("from_pretrained()"),drt=o(" class method or the "),Jae=a("a"),crt=o("from_config()"),frt=o(` class
method.`),mrt=l(),AR=a("p"),grt=o("This class cannot be instantiated directly using "),Pye=a("code"),hrt=o("__init__()"),urt=o(" (throws an error)."),prt=l(),ta=a("div"),F(LR.$$.fragment),_rt=l(),Bye=a("p"),vrt=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),brt=l(),Sf=a("p"),Frt=o(`Note:
Loading a model from its configuration file does `),Iye=a("strong"),Trt=o("not"),Mrt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yae=a("a"),Ert=o("from_pretrained()"),Crt=o(" to load the model weights."),wrt=l(),F(YA.$$.fragment),Art=l(),Ur=a("div"),F(yR.$$.fragment),Lrt=l(),Nye=a("p"),yrt=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),xrt=l(),Dn=a("p"),$rt=o("The model class to instantiate is selected based on the "),qye=a("code"),krt=o("model_type"),Srt=o(` property of the config object (either
passed as an argument or loaded from `),jye=a("code"),Rrt=o("pretrained_model_name_or_path"),Prt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dye=a("code"),Brt=o("pretrained_model_name_or_path"),Irt=o(":"),Nrt=l(),Gye=a("ul"),ZA=a("li"),Oye=a("strong"),qrt=o("tapas"),jrt=o(" \u2014 "),Zae=a("a"),Drt=o("TFTapasForQuestionAnswering"),Grt=o(" (TAPAS model)"),Ort=l(),F(KA.$$.fragment),Yro=l(),Rf=a("h2"),e6=a("a"),Vye=a("span"),F(xR.$$.fragment),Vrt=l(),Xye=a("span"),Xrt=o("TFAutoModelForDocumentQuestionAnswering"),Zro=l(),br=a("div"),F($R.$$.fragment),zrt=l(),Pf=a("p"),Qrt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),Kae=a("a"),Wrt=o("from_pretrained()"),Urt=o(" class method or the "),ene=a("a"),Hrt=o("from_config()"),Jrt=o(` class
method.`),Yrt=l(),kR=a("p"),Zrt=o("This class cannot be instantiated directly using "),zye=a("code"),Krt=o("__init__()"),ett=o(" (throws an error)."),ott=l(),aa=a("div"),F(SR.$$.fragment),rtt=l(),Qye=a("p"),ttt=o("Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),att=l(),Bf=a("p"),ntt=o(`Note:
Loading a model from its configuration file does `),Wye=a("strong"),stt=o("not"),ltt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),one=a("a"),itt=o("from_pretrained()"),dtt=o(" to load the model weights."),ctt=l(),F(o6.$$.fragment),ftt=l(),Hr=a("div"),F(RR.$$.fragment),mtt=l(),Uye=a("p"),gtt=o("Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),htt=l(),Gn=a("p"),utt=o("The model class to instantiate is selected based on the "),Hye=a("code"),ptt=o("model_type"),_tt=o(` property of the config object (either
passed as an argument or loaded from `),Jye=a("code"),vtt=o("pretrained_model_name_or_path"),btt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yye=a("code"),Ftt=o("pretrained_model_name_or_path"),Ttt=o(":"),Mtt=l(),Zye=a("ul"),r6=a("li"),Kye=a("strong"),Ett=o("layoutlm"),Ctt=o(" \u2014 "),rne=a("a"),wtt=o("TFLayoutLMForQuestionAnswering"),Att=o(" (LayoutLM model)"),Ltt=l(),F(t6.$$.fragment),Kro=l(),If=a("h2"),a6=a("a"),e9e=a("span"),F(PR.$$.fragment),ytt=l(),o9e=a("span"),xtt=o("TFAutoModelForTokenClassification"),eto=l(),Fr=a("div"),F(BR.$$.fragment),$tt=l(),Nf=a("p"),ktt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),tne=a("a"),Stt=o("from_pretrained()"),Rtt=o(" class method or the "),ane=a("a"),Ptt=o("from_config()"),Btt=o(` class
method.`),Itt=l(),IR=a("p"),Ntt=o("This class cannot be instantiated directly using "),r9e=a("code"),qtt=o("__init__()"),jtt=o(" (throws an error)."),Dtt=l(),na=a("div"),F(NR.$$.fragment),Gtt=l(),t9e=a("p"),Ott=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Vtt=l(),qf=a("p"),Xtt=o(`Note:
Loading a model from its configuration file does `),a9e=a("strong"),ztt=o("not"),Qtt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nne=a("a"),Wtt=o("from_pretrained()"),Utt=o(" to load the model weights."),Htt=l(),F(n6.$$.fragment),Jtt=l(),Jr=a("div"),F(qR.$$.fragment),Ytt=l(),n9e=a("p"),Ztt=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Ktt=l(),On=a("p"),eat=o("The model class to instantiate is selected based on the "),s9e=a("code"),oat=o("model_type"),rat=o(` property of the config object (either
passed as an argument or loaded from `),l9e=a("code"),tat=o("pretrained_model_name_or_path"),aat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i9e=a("code"),nat=o("pretrained_model_name_or_path"),sat=o(":"),lat=l(),ce=a("ul"),s6=a("li"),d9e=a("strong"),iat=o("albert"),dat=o(" \u2014 "),sne=a("a"),cat=o("TFAlbertForTokenClassification"),fat=o(" (ALBERT model)"),mat=l(),l6=a("li"),c9e=a("strong"),gat=o("bert"),hat=o(" \u2014 "),lne=a("a"),uat=o("TFBertForTokenClassification"),pat=o(" (BERT model)"),_at=l(),i6=a("li"),f9e=a("strong"),vat=o("camembert"),bat=o(" \u2014 "),ine=a("a"),Fat=o("TFCamembertForTokenClassification"),Tat=o(" (CamemBERT model)"),Mat=l(),d6=a("li"),m9e=a("strong"),Eat=o("convbert"),Cat=o(" \u2014 "),dne=a("a"),wat=o("TFConvBertForTokenClassification"),Aat=o(" (ConvBERT model)"),Lat=l(),c6=a("li"),g9e=a("strong"),yat=o("deberta"),xat=o(" \u2014 "),cne=a("a"),$at=o("TFDebertaForTokenClassification"),kat=o(" (DeBERTa model)"),Sat=l(),f6=a("li"),h9e=a("strong"),Rat=o("deberta-v2"),Pat=o(" \u2014 "),fne=a("a"),Bat=o("TFDebertaV2ForTokenClassification"),Iat=o(" (DeBERTa-v2 model)"),Nat=l(),m6=a("li"),u9e=a("strong"),qat=o("distilbert"),jat=o(" \u2014 "),mne=a("a"),Dat=o("TFDistilBertForTokenClassification"),Gat=o(" (DistilBERT model)"),Oat=l(),g6=a("li"),p9e=a("strong"),Vat=o("electra"),Xat=o(" \u2014 "),gne=a("a"),zat=o("TFElectraForTokenClassification"),Qat=o(" (ELECTRA model)"),Wat=l(),h6=a("li"),_9e=a("strong"),Uat=o("flaubert"),Hat=o(" \u2014 "),hne=a("a"),Jat=o("TFFlaubertForTokenClassification"),Yat=o(" (FlauBERT model)"),Zat=l(),u6=a("li"),v9e=a("strong"),Kat=o("funnel"),ent=o(" \u2014 "),une=a("a"),ont=o("TFFunnelForTokenClassification"),rnt=o(" (Funnel Transformer model)"),tnt=l(),p6=a("li"),b9e=a("strong"),ant=o("layoutlm"),nnt=o(" \u2014 "),pne=a("a"),snt=o("TFLayoutLMForTokenClassification"),lnt=o(" (LayoutLM model)"),int=l(),_6=a("li"),F9e=a("strong"),dnt=o("layoutlmv3"),cnt=o(" \u2014 "),_ne=a("a"),fnt=o("TFLayoutLMv3ForTokenClassification"),mnt=o(" (LayoutLMv3 model)"),gnt=l(),v6=a("li"),T9e=a("strong"),hnt=o("longformer"),unt=o(" \u2014 "),vne=a("a"),pnt=o("TFLongformerForTokenClassification"),_nt=o(" (Longformer model)"),vnt=l(),b6=a("li"),M9e=a("strong"),bnt=o("mobilebert"),Fnt=o(" \u2014 "),bne=a("a"),Tnt=o("TFMobileBertForTokenClassification"),Mnt=o(" (MobileBERT model)"),Ent=l(),F6=a("li"),E9e=a("strong"),Cnt=o("mpnet"),wnt=o(" \u2014 "),Fne=a("a"),Ant=o("TFMPNetForTokenClassification"),Lnt=o(" (MPNet model)"),ynt=l(),T6=a("li"),C9e=a("strong"),xnt=o("rembert"),$nt=o(" \u2014 "),Tne=a("a"),knt=o("TFRemBertForTokenClassification"),Snt=o(" (RemBERT model)"),Rnt=l(),M6=a("li"),w9e=a("strong"),Pnt=o("roberta"),Bnt=o(" \u2014 "),Mne=a("a"),Int=o("TFRobertaForTokenClassification"),Nnt=o(" (RoBERTa model)"),qnt=l(),E6=a("li"),A9e=a("strong"),jnt=o("roformer"),Dnt=o(" \u2014 "),Ene=a("a"),Gnt=o("TFRoFormerForTokenClassification"),Ont=o(" (RoFormer model)"),Vnt=l(),C6=a("li"),L9e=a("strong"),Xnt=o("xlm"),znt=o(" \u2014 "),Cne=a("a"),Qnt=o("TFXLMForTokenClassification"),Wnt=o(" (XLM model)"),Unt=l(),w6=a("li"),y9e=a("strong"),Hnt=o("xlm-roberta"),Jnt=o(" \u2014 "),wne=a("a"),Ynt=o("TFXLMRobertaForTokenClassification"),Znt=o(" (XLM-RoBERTa model)"),Knt=l(),A6=a("li"),x9e=a("strong"),est=o("xlnet"),ost=o(" \u2014 "),Ane=a("a"),rst=o("TFXLNetForTokenClassification"),tst=o(" (XLNet model)"),ast=l(),F(L6.$$.fragment),oto=l(),jf=a("h2"),y6=a("a"),$9e=a("span"),F(jR.$$.fragment),nst=l(),k9e=a("span"),sst=o("TFAutoModelForQuestionAnswering"),rto=l(),Tr=a("div"),F(DR.$$.fragment),lst=l(),Df=a("p"),ist=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Lne=a("a"),dst=o("from_pretrained()"),cst=o(" class method or the "),yne=a("a"),fst=o("from_config()"),mst=o(` class
method.`),gst=l(),GR=a("p"),hst=o("This class cannot be instantiated directly using "),S9e=a("code"),ust=o("__init__()"),pst=o(" (throws an error)."),_st=l(),sa=a("div"),F(OR.$$.fragment),vst=l(),R9e=a("p"),bst=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Fst=l(),Gf=a("p"),Tst=o(`Note:
Loading a model from its configuration file does `),P9e=a("strong"),Mst=o("not"),Est=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xne=a("a"),Cst=o("from_pretrained()"),wst=o(" to load the model weights."),Ast=l(),F(x6.$$.fragment),Lst=l(),Yr=a("div"),F(VR.$$.fragment),yst=l(),B9e=a("p"),xst=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$st=l(),Vn=a("p"),kst=o("The model class to instantiate is selected based on the "),I9e=a("code"),Sst=o("model_type"),Rst=o(` property of the config object (either
passed as an argument or loaded from `),N9e=a("code"),Pst=o("pretrained_model_name_or_path"),Bst=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q9e=a("code"),Ist=o("pretrained_model_name_or_path"),Nst=o(":"),qst=l(),fe=a("ul"),$6=a("li"),j9e=a("strong"),jst=o("albert"),Dst=o(" \u2014 "),$ne=a("a"),Gst=o("TFAlbertForQuestionAnswering"),Ost=o(" (ALBERT model)"),Vst=l(),k6=a("li"),D9e=a("strong"),Xst=o("bert"),zst=o(" \u2014 "),kne=a("a"),Qst=o("TFBertForQuestionAnswering"),Wst=o(" (BERT model)"),Ust=l(),S6=a("li"),G9e=a("strong"),Hst=o("camembert"),Jst=o(" \u2014 "),Sne=a("a"),Yst=o("TFCamembertForQuestionAnswering"),Zst=o(" (CamemBERT model)"),Kst=l(),R6=a("li"),O9e=a("strong"),elt=o("convbert"),olt=o(" \u2014 "),Rne=a("a"),rlt=o("TFConvBertForQuestionAnswering"),tlt=o(" (ConvBERT model)"),alt=l(),P6=a("li"),V9e=a("strong"),nlt=o("deberta"),slt=o(" \u2014 "),Pne=a("a"),llt=o("TFDebertaForQuestionAnswering"),ilt=o(" (DeBERTa model)"),dlt=l(),B6=a("li"),X9e=a("strong"),clt=o("deberta-v2"),flt=o(" \u2014 "),Bne=a("a"),mlt=o("TFDebertaV2ForQuestionAnswering"),glt=o(" (DeBERTa-v2 model)"),hlt=l(),I6=a("li"),z9e=a("strong"),ult=o("distilbert"),plt=o(" \u2014 "),Ine=a("a"),_lt=o("TFDistilBertForQuestionAnswering"),vlt=o(" (DistilBERT model)"),blt=l(),N6=a("li"),Q9e=a("strong"),Flt=o("electra"),Tlt=o(" \u2014 "),Nne=a("a"),Mlt=o("TFElectraForQuestionAnswering"),Elt=o(" (ELECTRA model)"),Clt=l(),q6=a("li"),W9e=a("strong"),wlt=o("flaubert"),Alt=o(" \u2014 "),qne=a("a"),Llt=o("TFFlaubertForQuestionAnsweringSimple"),ylt=o(" (FlauBERT model)"),xlt=l(),j6=a("li"),U9e=a("strong"),$lt=o("funnel"),klt=o(" \u2014 "),jne=a("a"),Slt=o("TFFunnelForQuestionAnswering"),Rlt=o(" (Funnel Transformer model)"),Plt=l(),D6=a("li"),H9e=a("strong"),Blt=o("gptj"),Ilt=o(" \u2014 "),Dne=a("a"),Nlt=o("TFGPTJForQuestionAnswering"),qlt=o(" (GPT-J model)"),jlt=l(),G6=a("li"),J9e=a("strong"),Dlt=o("layoutlmv3"),Glt=o(" \u2014 "),Gne=a("a"),Olt=o("TFLayoutLMv3ForQuestionAnswering"),Vlt=o(" (LayoutLMv3 model)"),Xlt=l(),O6=a("li"),Y9e=a("strong"),zlt=o("longformer"),Qlt=o(" \u2014 "),One=a("a"),Wlt=o("TFLongformerForQuestionAnswering"),Ult=o(" (Longformer model)"),Hlt=l(),V6=a("li"),Z9e=a("strong"),Jlt=o("mobilebert"),Ylt=o(" \u2014 "),Vne=a("a"),Zlt=o("TFMobileBertForQuestionAnswering"),Klt=o(" (MobileBERT model)"),eit=l(),X6=a("li"),K9e=a("strong"),oit=o("mpnet"),rit=o(" \u2014 "),Xne=a("a"),tit=o("TFMPNetForQuestionAnswering"),ait=o(" (MPNet model)"),nit=l(),z6=a("li"),exe=a("strong"),sit=o("rembert"),lit=o(" \u2014 "),zne=a("a"),iit=o("TFRemBertForQuestionAnswering"),dit=o(" (RemBERT model)"),cit=l(),Q6=a("li"),oxe=a("strong"),fit=o("roberta"),mit=o(" \u2014 "),Qne=a("a"),git=o("TFRobertaForQuestionAnswering"),hit=o(" (RoBERTa model)"),uit=l(),W6=a("li"),rxe=a("strong"),pit=o("roformer"),_it=o(" \u2014 "),Wne=a("a"),vit=o("TFRoFormerForQuestionAnswering"),bit=o(" (RoFormer model)"),Fit=l(),U6=a("li"),txe=a("strong"),Tit=o("xlm"),Mit=o(" \u2014 "),Une=a("a"),Eit=o("TFXLMForQuestionAnsweringSimple"),Cit=o(" (XLM model)"),wit=l(),H6=a("li"),axe=a("strong"),Ait=o("xlm-roberta"),Lit=o(" \u2014 "),Hne=a("a"),yit=o("TFXLMRobertaForQuestionAnswering"),xit=o(" (XLM-RoBERTa model)"),$it=l(),J6=a("li"),nxe=a("strong"),kit=o("xlnet"),Sit=o(" \u2014 "),Jne=a("a"),Rit=o("TFXLNetForQuestionAnsweringSimple"),Pit=o(" (XLNet model)"),Bit=l(),F(Y6.$$.fragment),tto=l(),Of=a("h2"),Z6=a("a"),sxe=a("span"),F(XR.$$.fragment),Iit=l(),lxe=a("span"),Nit=o("TFAutoModelForVision2Seq"),ato=l(),Mr=a("div"),F(zR.$$.fragment),qit=l(),Vf=a("p"),jit=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Yne=a("a"),Dit=o("from_pretrained()"),Git=o(" class method or the "),Zne=a("a"),Oit=o("from_config()"),Vit=o(` class
method.`),Xit=l(),QR=a("p"),zit=o("This class cannot be instantiated directly using "),ixe=a("code"),Qit=o("__init__()"),Wit=o(" (throws an error)."),Uit=l(),la=a("div"),F(WR.$$.fragment),Hit=l(),dxe=a("p"),Jit=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Yit=l(),Xf=a("p"),Zit=o(`Note:
Loading a model from its configuration file does `),cxe=a("strong"),Kit=o("not"),edt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kne=a("a"),odt=o("from_pretrained()"),rdt=o(" to load the model weights."),tdt=l(),F(K6.$$.fragment),adt=l(),Zr=a("div"),F(UR.$$.fragment),ndt=l(),fxe=a("p"),sdt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ldt=l(),Xn=a("p"),idt=o("The model class to instantiate is selected based on the "),mxe=a("code"),ddt=o("model_type"),cdt=o(` property of the config object (either
passed as an argument or loaded from `),gxe=a("code"),fdt=o("pretrained_model_name_or_path"),mdt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hxe=a("code"),gdt=o("pretrained_model_name_or_path"),hdt=o(":"),udt=l(),uxe=a("ul"),e7=a("li"),pxe=a("strong"),pdt=o("vision-encoder-decoder"),_dt=o(" \u2014 "),ese=a("a"),vdt=o("TFVisionEncoderDecoderModel"),bdt=o(" (Vision Encoder decoder model)"),Fdt=l(),F(o7.$$.fragment),nto=l(),zf=a("h2"),r7=a("a"),_xe=a("span"),F(HR.$$.fragment),Tdt=l(),vxe=a("span"),Mdt=o("TFAutoModelForSpeechSeq2Seq"),sto=l(),Er=a("div"),F(JR.$$.fragment),Edt=l(),Qf=a("p"),Cdt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ose=a("a"),wdt=o("from_pretrained()"),Adt=o(" class method or the "),rse=a("a"),Ldt=o("from_config()"),ydt=o(` class
method.`),xdt=l(),YR=a("p"),$dt=o("This class cannot be instantiated directly using "),bxe=a("code"),kdt=o("__init__()"),Sdt=o(" (throws an error)."),Rdt=l(),ia=a("div"),F(ZR.$$.fragment),Pdt=l(),Fxe=a("p"),Bdt=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Idt=l(),Wf=a("p"),Ndt=o(`Note:
Loading a model from its configuration file does `),Txe=a("strong"),qdt=o("not"),jdt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tse=a("a"),Ddt=o("from_pretrained()"),Gdt=o(" to load the model weights."),Odt=l(),F(t7.$$.fragment),Vdt=l(),Kr=a("div"),F(KR.$$.fragment),Xdt=l(),Mxe=a("p"),zdt=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Qdt=l(),zn=a("p"),Wdt=o("The model class to instantiate is selected based on the "),Exe=a("code"),Udt=o("model_type"),Hdt=o(` property of the config object (either
passed as an argument or loaded from `),Cxe=a("code"),Jdt=o("pretrained_model_name_or_path"),Ydt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wxe=a("code"),Zdt=o("pretrained_model_name_or_path"),Kdt=o(":"),ect=l(),eP=a("ul"),a7=a("li"),Axe=a("strong"),oct=o("speech_to_text"),rct=o(" \u2014 "),ase=a("a"),tct=o("TFSpeech2TextForConditionalGeneration"),act=o(" (Speech2Text model)"),nct=l(),n7=a("li"),Lxe=a("strong"),sct=o("whisper"),lct=o(" \u2014 "),nse=a("a"),ict=o("TFWhisperForConditionalGeneration"),dct=o(" (Whisper model)"),cct=l(),F(s7.$$.fragment),lto=l(),Uf=a("h2"),l7=a("a"),yxe=a("span"),F(oP.$$.fragment),fct=l(),xxe=a("span"),mct=o("FlaxAutoModel"),ito=l(),Cr=a("div"),F(rP.$$.fragment),gct=l(),Hf=a("p"),hct=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),sse=a("a"),uct=o("from_pretrained()"),pct=o(" class method or the "),lse=a("a"),_ct=o("from_config()"),vct=o(` class
method.`),bct=l(),tP=a("p"),Fct=o("This class cannot be instantiated directly using "),$xe=a("code"),Tct=o("__init__()"),Mct=o(" (throws an error)."),Ect=l(),da=a("div"),F(aP.$$.fragment),Cct=l(),kxe=a("p"),wct=o("Instantiates one of the base model classes of the library from a configuration."),Act=l(),Jf=a("p"),Lct=o(`Note:
Loading a model from its configuration file does `),Sxe=a("strong"),yct=o("not"),xct=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ise=a("a"),$ct=o("from_pretrained()"),kct=o(" to load the model weights."),Sct=l(),F(i7.$$.fragment),Rct=l(),et=a("div"),F(nP.$$.fragment),Pct=l(),Rxe=a("p"),Bct=o("Instantiate one of the base model classes of the library from a pretrained model."),Ict=l(),Qn=a("p"),Nct=o("The model class to instantiate is selected based on the "),Pxe=a("code"),qct=o("model_type"),jct=o(` property of the config object (either
passed as an argument or loaded from `),Bxe=a("code"),Dct=o("pretrained_model_name_or_path"),Gct=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ixe=a("code"),Oct=o("pretrained_model_name_or_path"),Vct=o(":"),Xct=l(),te=a("ul"),d7=a("li"),Nxe=a("strong"),zct=o("albert"),Qct=o(" \u2014 "),dse=a("a"),Wct=o("FlaxAlbertModel"),Uct=o(" (ALBERT model)"),Hct=l(),c7=a("li"),qxe=a("strong"),Jct=o("bart"),Yct=o(" \u2014 "),cse=a("a"),Zct=o("FlaxBartModel"),Kct=o(" (BART model)"),eft=l(),f7=a("li"),jxe=a("strong"),oft=o("beit"),rft=o(" \u2014 "),fse=a("a"),tft=o("FlaxBeitModel"),aft=o(" (BEiT model)"),nft=l(),m7=a("li"),Dxe=a("strong"),sft=o("bert"),lft=o(" \u2014 "),mse=a("a"),ift=o("FlaxBertModel"),dft=o(" (BERT model)"),cft=l(),g7=a("li"),Gxe=a("strong"),fft=o("big_bird"),mft=o(" \u2014 "),gse=a("a"),gft=o("FlaxBigBirdModel"),hft=o(" (BigBird model)"),uft=l(),h7=a("li"),Oxe=a("strong"),pft=o("blenderbot"),_ft=o(" \u2014 "),hse=a("a"),vft=o("FlaxBlenderbotModel"),bft=o(" (Blenderbot model)"),Fft=l(),u7=a("li"),Vxe=a("strong"),Tft=o("blenderbot-small"),Mft=o(" \u2014 "),use=a("a"),Eft=o("FlaxBlenderbotSmallModel"),Cft=o(" (BlenderbotSmall model)"),wft=l(),p7=a("li"),Xxe=a("strong"),Aft=o("clip"),Lft=o(" \u2014 "),pse=a("a"),yft=o("FlaxCLIPModel"),xft=o(" (CLIP model)"),$ft=l(),_7=a("li"),zxe=a("strong"),kft=o("distilbert"),Sft=o(" \u2014 "),_se=a("a"),Rft=o("FlaxDistilBertModel"),Pft=o(" (DistilBERT model)"),Bft=l(),v7=a("li"),Qxe=a("strong"),Ift=o("electra"),Nft=o(" \u2014 "),vse=a("a"),qft=o("FlaxElectraModel"),jft=o(" (ELECTRA model)"),Dft=l(),b7=a("li"),Wxe=a("strong"),Gft=o("gpt2"),Oft=o(" \u2014 "),bse=a("a"),Vft=o("FlaxGPT2Model"),Xft=o(" (OpenAI GPT-2 model)"),zft=l(),F7=a("li"),Uxe=a("strong"),Qft=o("gpt_neo"),Wft=o(" \u2014 "),Fse=a("a"),Uft=o("FlaxGPTNeoModel"),Hft=o(" (GPT Neo model)"),Jft=l(),T7=a("li"),Hxe=a("strong"),Yft=o("gptj"),Zft=o(" \u2014 "),Tse=a("a"),Kft=o("FlaxGPTJModel"),emt=o(" (GPT-J model)"),omt=l(),M7=a("li"),Jxe=a("strong"),rmt=o("longt5"),tmt=o(" \u2014 "),Mse=a("a"),amt=o("FlaxLongT5Model"),nmt=o(" (LongT5 model)"),smt=l(),E7=a("li"),Yxe=a("strong"),lmt=o("marian"),imt=o(" \u2014 "),Ese=a("a"),dmt=o("FlaxMarianModel"),cmt=o(" (Marian model)"),fmt=l(),C7=a("li"),Zxe=a("strong"),mmt=o("mbart"),gmt=o(" \u2014 "),Cse=a("a"),hmt=o("FlaxMBartModel"),umt=o(" (mBART model)"),pmt=l(),w7=a("li"),Kxe=a("strong"),_mt=o("mt5"),vmt=o(" \u2014 "),wse=a("a"),bmt=o("FlaxMT5Model"),Fmt=o(" (MT5 model)"),Tmt=l(),A7=a("li"),e$e=a("strong"),Mmt=o("opt"),Emt=o(" \u2014 "),Ase=a("a"),Cmt=o("FlaxOPTModel"),wmt=o(" (OPT model)"),Amt=l(),L7=a("li"),o$e=a("strong"),Lmt=o("pegasus"),ymt=o(" \u2014 "),Lse=a("a"),xmt=o("FlaxPegasusModel"),$mt=o(" (Pegasus model)"),kmt=l(),y7=a("li"),r$e=a("strong"),Smt=o("roberta"),Rmt=o(" \u2014 "),yse=a("a"),Pmt=o("FlaxRobertaModel"),Bmt=o(" (RoBERTa model)"),Imt=l(),x7=a("li"),t$e=a("strong"),Nmt=o("roformer"),qmt=o(" \u2014 "),xse=a("a"),jmt=o("FlaxRoFormerModel"),Dmt=o(" (RoFormer model)"),Gmt=l(),$7=a("li"),a$e=a("strong"),Omt=o("t5"),Vmt=o(" \u2014 "),$se=a("a"),Xmt=o("FlaxT5Model"),zmt=o(" (T5 model)"),Qmt=l(),k7=a("li"),n$e=a("strong"),Wmt=o("vision-text-dual-encoder"),Umt=o(" \u2014 "),kse=a("a"),Hmt=o("FlaxVisionTextDualEncoderModel"),Jmt=o(" (VisionTextDualEncoder model)"),Ymt=l(),S7=a("li"),s$e=a("strong"),Zmt=o("vit"),Kmt=o(" \u2014 "),Sse=a("a"),egt=o("FlaxViTModel"),ogt=o(" (ViT model)"),rgt=l(),R7=a("li"),l$e=a("strong"),tgt=o("wav2vec2"),agt=o(" \u2014 "),Rse=a("a"),ngt=o("FlaxWav2Vec2Model"),sgt=o(" (Wav2Vec2 model)"),lgt=l(),P7=a("li"),i$e=a("strong"),igt=o("xglm"),dgt=o(" \u2014 "),Pse=a("a"),cgt=o("FlaxXGLMModel"),fgt=o(" (XGLM model)"),mgt=l(),B7=a("li"),d$e=a("strong"),ggt=o("xlm-roberta"),hgt=o(" \u2014 "),Bse=a("a"),ugt=o("FlaxXLMRobertaModel"),pgt=o(" (XLM-RoBERTa model)"),_gt=l(),F(I7.$$.fragment),dto=l(),Yf=a("h2"),N7=a("a"),c$e=a("span"),F(sP.$$.fragment),vgt=l(),f$e=a("span"),bgt=o("FlaxAutoModelForCausalLM"),cto=l(),wr=a("div"),F(lP.$$.fragment),Fgt=l(),Zf=a("p"),Tgt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Ise=a("a"),Mgt=o("from_pretrained()"),Egt=o(" class method or the "),Nse=a("a"),Cgt=o("from_config()"),wgt=o(` class
method.`),Agt=l(),iP=a("p"),Lgt=o("This class cannot be instantiated directly using "),m$e=a("code"),ygt=o("__init__()"),xgt=o(" (throws an error)."),$gt=l(),ca=a("div"),F(dP.$$.fragment),kgt=l(),g$e=a("p"),Sgt=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Rgt=l(),Kf=a("p"),Pgt=o(`Note:
Loading a model from its configuration file does `),h$e=a("strong"),Bgt=o("not"),Igt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qse=a("a"),Ngt=o("from_pretrained()"),qgt=o(" to load the model weights."),jgt=l(),F(q7.$$.fragment),Dgt=l(),ot=a("div"),F(cP.$$.fragment),Ggt=l(),u$e=a("p"),Ogt=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Vgt=l(),Wn=a("p"),Xgt=o("The model class to instantiate is selected based on the "),p$e=a("code"),zgt=o("model_type"),Qgt=o(` property of the config object (either
passed as an argument or loaded from `),_$e=a("code"),Wgt=o("pretrained_model_name_or_path"),Ugt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v$e=a("code"),Hgt=o("pretrained_model_name_or_path"),Jgt=o(":"),Ygt=l(),xe=a("ul"),j7=a("li"),b$e=a("strong"),Zgt=o("bart"),Kgt=o(" \u2014 "),jse=a("a"),eht=o("FlaxBartForCausalLM"),oht=o(" (BART model)"),rht=l(),D7=a("li"),F$e=a("strong"),tht=o("bert"),aht=o(" \u2014 "),Dse=a("a"),nht=o("FlaxBertForCausalLM"),sht=o(" (BERT model)"),lht=l(),G7=a("li"),T$e=a("strong"),iht=o("big_bird"),dht=o(" \u2014 "),Gse=a("a"),cht=o("FlaxBigBirdForCausalLM"),fht=o(" (BigBird model)"),mht=l(),O7=a("li"),M$e=a("strong"),ght=o("electra"),hht=o(" \u2014 "),Ose=a("a"),uht=o("FlaxElectraForCausalLM"),pht=o(" (ELECTRA model)"),_ht=l(),V7=a("li"),E$e=a("strong"),vht=o("gpt2"),bht=o(" \u2014 "),Vse=a("a"),Fht=o("FlaxGPT2LMHeadModel"),Tht=o(" (OpenAI GPT-2 model)"),Mht=l(),X7=a("li"),C$e=a("strong"),Eht=o("gpt_neo"),Cht=o(" \u2014 "),Xse=a("a"),wht=o("FlaxGPTNeoForCausalLM"),Aht=o(" (GPT Neo model)"),Lht=l(),z7=a("li"),w$e=a("strong"),yht=o("gptj"),xht=o(" \u2014 "),zse=a("a"),$ht=o("FlaxGPTJForCausalLM"),kht=o(" (GPT-J model)"),Sht=l(),Q7=a("li"),A$e=a("strong"),Rht=o("opt"),Pht=o(" \u2014 "),Qse=a("a"),Bht=o("FlaxOPTForCausalLM"),Iht=o(" (OPT model)"),Nht=l(),W7=a("li"),L$e=a("strong"),qht=o("roberta"),jht=o(" \u2014 "),Wse=a("a"),Dht=o("FlaxRobertaForCausalLM"),Ght=o(" (RoBERTa model)"),Oht=l(),U7=a("li"),y$e=a("strong"),Vht=o("xglm"),Xht=o(" \u2014 "),Use=a("a"),zht=o("FlaxXGLMForCausalLM"),Qht=o(" (XGLM model)"),Wht=l(),F(H7.$$.fragment),fto=l(),em=a("h2"),J7=a("a"),x$e=a("span"),F(fP.$$.fragment),Uht=l(),$$e=a("span"),Hht=o("FlaxAutoModelForPreTraining"),mto=l(),Ar=a("div"),F(mP.$$.fragment),Jht=l(),om=a("p"),Yht=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Hse=a("a"),Zht=o("from_pretrained()"),Kht=o(" class method or the "),Jse=a("a"),eut=o("from_config()"),out=o(` class
method.`),rut=l(),gP=a("p"),tut=o("This class cannot be instantiated directly using "),k$e=a("code"),aut=o("__init__()"),nut=o(" (throws an error)."),sut=l(),fa=a("div"),F(hP.$$.fragment),lut=l(),S$e=a("p"),iut=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),dut=l(),rm=a("p"),cut=o(`Note:
Loading a model from its configuration file does `),R$e=a("strong"),fut=o("not"),mut=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yse=a("a"),gut=o("from_pretrained()"),hut=o(" to load the model weights."),uut=l(),F(Y7.$$.fragment),put=l(),rt=a("div"),F(uP.$$.fragment),_ut=l(),P$e=a("p"),vut=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),but=l(),Un=a("p"),Fut=o("The model class to instantiate is selected based on the "),B$e=a("code"),Tut=o("model_type"),Mut=o(` property of the config object (either
passed as an argument or loaded from `),I$e=a("code"),Eut=o("pretrained_model_name_or_path"),Cut=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N$e=a("code"),wut=o("pretrained_model_name_or_path"),Aut=o(":"),Lut=l(),Ee=a("ul"),Z7=a("li"),q$e=a("strong"),yut=o("albert"),xut=o(" \u2014 "),Zse=a("a"),$ut=o("FlaxAlbertForPreTraining"),kut=o(" (ALBERT model)"),Sut=l(),K7=a("li"),j$e=a("strong"),Rut=o("bart"),Put=o(" \u2014 "),Kse=a("a"),But=o("FlaxBartForConditionalGeneration"),Iut=o(" (BART model)"),Nut=l(),eL=a("li"),D$e=a("strong"),qut=o("bert"),jut=o(" \u2014 "),ele=a("a"),Dut=o("FlaxBertForPreTraining"),Gut=o(" (BERT model)"),Out=l(),oL=a("li"),G$e=a("strong"),Vut=o("big_bird"),Xut=o(" \u2014 "),ole=a("a"),zut=o("FlaxBigBirdForPreTraining"),Qut=o(" (BigBird model)"),Wut=l(),rL=a("li"),O$e=a("strong"),Uut=o("electra"),Hut=o(" \u2014 "),rle=a("a"),Jut=o("FlaxElectraForPreTraining"),Yut=o(" (ELECTRA model)"),Zut=l(),tL=a("li"),V$e=a("strong"),Kut=o("longt5"),ept=o(" \u2014 "),tle=a("a"),opt=o("FlaxLongT5ForConditionalGeneration"),rpt=o(" (LongT5 model)"),tpt=l(),aL=a("li"),X$e=a("strong"),apt=o("mbart"),npt=o(" \u2014 "),ale=a("a"),spt=o("FlaxMBartForConditionalGeneration"),lpt=o(" (mBART model)"),ipt=l(),nL=a("li"),z$e=a("strong"),dpt=o("mt5"),cpt=o(" \u2014 "),nle=a("a"),fpt=o("FlaxMT5ForConditionalGeneration"),mpt=o(" (MT5 model)"),gpt=l(),sL=a("li"),Q$e=a("strong"),hpt=o("roberta"),upt=o(" \u2014 "),sle=a("a"),ppt=o("FlaxRobertaForMaskedLM"),_pt=o(" (RoBERTa model)"),vpt=l(),lL=a("li"),W$e=a("strong"),bpt=o("roformer"),Fpt=o(" \u2014 "),lle=a("a"),Tpt=o("FlaxRoFormerForMaskedLM"),Mpt=o(" (RoFormer model)"),Ept=l(),iL=a("li"),U$e=a("strong"),Cpt=o("t5"),wpt=o(" \u2014 "),ile=a("a"),Apt=o("FlaxT5ForConditionalGeneration"),Lpt=o(" (T5 model)"),ypt=l(),dL=a("li"),H$e=a("strong"),xpt=o("wav2vec2"),$pt=o(" \u2014 "),dle=a("a"),kpt=o("FlaxWav2Vec2ForPreTraining"),Spt=o(" (Wav2Vec2 model)"),Rpt=l(),cL=a("li"),J$e=a("strong"),Ppt=o("xlm-roberta"),Bpt=o(" \u2014 "),cle=a("a"),Ipt=o("FlaxXLMRobertaForMaskedLM"),Npt=o(" (XLM-RoBERTa model)"),qpt=l(),F(fL.$$.fragment),gto=l(),tm=a("h2"),mL=a("a"),Y$e=a("span"),F(pP.$$.fragment),jpt=l(),Z$e=a("span"),Dpt=o("FlaxAutoModelForMaskedLM"),hto=l(),Lr=a("div"),F(_P.$$.fragment),Gpt=l(),am=a("p"),Opt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fle=a("a"),Vpt=o("from_pretrained()"),Xpt=o(" class method or the "),mle=a("a"),zpt=o("from_config()"),Qpt=o(` class
method.`),Wpt=l(),vP=a("p"),Upt=o("This class cannot be instantiated directly using "),K$e=a("code"),Hpt=o("__init__()"),Jpt=o(" (throws an error)."),Ypt=l(),ma=a("div"),F(bP.$$.fragment),Zpt=l(),eke=a("p"),Kpt=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),e_t=l(),nm=a("p"),o_t=o(`Note:
Loading a model from its configuration file does `),oke=a("strong"),r_t=o("not"),t_t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gle=a("a"),a_t=o("from_pretrained()"),n_t=o(" to load the model weights."),s_t=l(),F(gL.$$.fragment),l_t=l(),tt=a("div"),F(FP.$$.fragment),i_t=l(),rke=a("p"),d_t=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),c_t=l(),Hn=a("p"),f_t=o("The model class to instantiate is selected based on the "),tke=a("code"),m_t=o("model_type"),g_t=o(` property of the config object (either
passed as an argument or loaded from `),ake=a("code"),h_t=o("pretrained_model_name_or_path"),u_t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nke=a("code"),p_t=o("pretrained_model_name_or_path"),__t=o(":"),v_t=l(),$e=a("ul"),hL=a("li"),ske=a("strong"),b_t=o("albert"),F_t=o(" \u2014 "),hle=a("a"),T_t=o("FlaxAlbertForMaskedLM"),M_t=o(" (ALBERT model)"),E_t=l(),uL=a("li"),lke=a("strong"),C_t=o("bart"),w_t=o(" \u2014 "),ule=a("a"),A_t=o("FlaxBartForConditionalGeneration"),L_t=o(" (BART model)"),y_t=l(),pL=a("li"),ike=a("strong"),x_t=o("bert"),$_t=o(" \u2014 "),ple=a("a"),k_t=o("FlaxBertForMaskedLM"),S_t=o(" (BERT model)"),R_t=l(),_L=a("li"),dke=a("strong"),P_t=o("big_bird"),B_t=o(" \u2014 "),_le=a("a"),I_t=o("FlaxBigBirdForMaskedLM"),N_t=o(" (BigBird model)"),q_t=l(),vL=a("li"),cke=a("strong"),j_t=o("distilbert"),D_t=o(" \u2014 "),vle=a("a"),G_t=o("FlaxDistilBertForMaskedLM"),O_t=o(" (DistilBERT model)"),V_t=l(),bL=a("li"),fke=a("strong"),X_t=o("electra"),z_t=o(" \u2014 "),ble=a("a"),Q_t=o("FlaxElectraForMaskedLM"),W_t=o(" (ELECTRA model)"),U_t=l(),FL=a("li"),mke=a("strong"),H_t=o("mbart"),J_t=o(" \u2014 "),Fle=a("a"),Y_t=o("FlaxMBartForConditionalGeneration"),Z_t=o(" (mBART model)"),K_t=l(),TL=a("li"),gke=a("strong"),e2t=o("roberta"),o2t=o(" \u2014 "),Tle=a("a"),r2t=o("FlaxRobertaForMaskedLM"),t2t=o(" (RoBERTa model)"),a2t=l(),ML=a("li"),hke=a("strong"),n2t=o("roformer"),s2t=o(" \u2014 "),Mle=a("a"),l2t=o("FlaxRoFormerForMaskedLM"),i2t=o(" (RoFormer model)"),d2t=l(),EL=a("li"),uke=a("strong"),c2t=o("xlm-roberta"),f2t=o(" \u2014 "),Ele=a("a"),m2t=o("FlaxXLMRobertaForMaskedLM"),g2t=o(" (XLM-RoBERTa model)"),h2t=l(),F(CL.$$.fragment),uto=l(),sm=a("h2"),wL=a("a"),pke=a("span"),F(TP.$$.fragment),u2t=l(),_ke=a("span"),p2t=o("FlaxAutoModelForSeq2SeqLM"),pto=l(),yr=a("div"),F(MP.$$.fragment),_2t=l(),lm=a("p"),v2t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Cle=a("a"),b2t=o("from_pretrained()"),F2t=o(" class method or the "),wle=a("a"),T2t=o("from_config()"),M2t=o(` class
method.`),E2t=l(),EP=a("p"),C2t=o("This class cannot be instantiated directly using "),vke=a("code"),w2t=o("__init__()"),A2t=o(" (throws an error)."),L2t=l(),ga=a("div"),F(CP.$$.fragment),y2t=l(),bke=a("p"),x2t=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),$2t=l(),im=a("p"),k2t=o(`Note:
Loading a model from its configuration file does `),Fke=a("strong"),S2t=o("not"),R2t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ale=a("a"),P2t=o("from_pretrained()"),B2t=o(" to load the model weights."),I2t=l(),F(AL.$$.fragment),N2t=l(),at=a("div"),F(wP.$$.fragment),q2t=l(),Tke=a("p"),j2t=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),D2t=l(),Jn=a("p"),G2t=o("The model class to instantiate is selected based on the "),Mke=a("code"),O2t=o("model_type"),V2t=o(` property of the config object (either
passed as an argument or loaded from `),Eke=a("code"),X2t=o("pretrained_model_name_or_path"),z2t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cke=a("code"),Q2t=o("pretrained_model_name_or_path"),W2t=o(":"),U2t=l(),ke=a("ul"),LL=a("li"),wke=a("strong"),H2t=o("bart"),J2t=o(" \u2014 "),Lle=a("a"),Y2t=o("FlaxBartForConditionalGeneration"),Z2t=o(" (BART model)"),K2t=l(),yL=a("li"),Ake=a("strong"),evt=o("blenderbot"),ovt=o(" \u2014 "),yle=a("a"),rvt=o("FlaxBlenderbotForConditionalGeneration"),tvt=o(" (Blenderbot model)"),avt=l(),xL=a("li"),Lke=a("strong"),nvt=o("blenderbot-small"),svt=o(" \u2014 "),xle=a("a"),lvt=o("FlaxBlenderbotSmallForConditionalGeneration"),ivt=o(" (BlenderbotSmall model)"),dvt=l(),$L=a("li"),yke=a("strong"),cvt=o("encoder-decoder"),fvt=o(" \u2014 "),$le=a("a"),mvt=o("FlaxEncoderDecoderModel"),gvt=o(" (Encoder decoder model)"),hvt=l(),kL=a("li"),xke=a("strong"),uvt=o("longt5"),pvt=o(" \u2014 "),kle=a("a"),_vt=o("FlaxLongT5ForConditionalGeneration"),vvt=o(" (LongT5 model)"),bvt=l(),SL=a("li"),$ke=a("strong"),Fvt=o("marian"),Tvt=o(" \u2014 "),Sle=a("a"),Mvt=o("FlaxMarianMTModel"),Evt=o(" (Marian model)"),Cvt=l(),RL=a("li"),kke=a("strong"),wvt=o("mbart"),Avt=o(" \u2014 "),Rle=a("a"),Lvt=o("FlaxMBartForConditionalGeneration"),yvt=o(" (mBART model)"),xvt=l(),PL=a("li"),Ske=a("strong"),$vt=o("mt5"),kvt=o(" \u2014 "),Ple=a("a"),Svt=o("FlaxMT5ForConditionalGeneration"),Rvt=o(" (MT5 model)"),Pvt=l(),BL=a("li"),Rke=a("strong"),Bvt=o("pegasus"),Ivt=o(" \u2014 "),Ble=a("a"),Nvt=o("FlaxPegasusForConditionalGeneration"),qvt=o(" (Pegasus model)"),jvt=l(),IL=a("li"),Pke=a("strong"),Dvt=o("t5"),Gvt=o(" \u2014 "),Ile=a("a"),Ovt=o("FlaxT5ForConditionalGeneration"),Vvt=o(" (T5 model)"),Xvt=l(),F(NL.$$.fragment),_to=l(),dm=a("h2"),qL=a("a"),Bke=a("span"),F(AP.$$.fragment),zvt=l(),Ike=a("span"),Qvt=o("FlaxAutoModelForSequenceClassification"),vto=l(),xr=a("div"),F(LP.$$.fragment),Wvt=l(),cm=a("p"),Uvt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Nle=a("a"),Hvt=o("from_pretrained()"),Jvt=o(" class method or the "),qle=a("a"),Yvt=o("from_config()"),Zvt=o(` class
method.`),Kvt=l(),yP=a("p"),e4t=o("This class cannot be instantiated directly using "),Nke=a("code"),o4t=o("__init__()"),r4t=o(" (throws an error)."),t4t=l(),ha=a("div"),F(xP.$$.fragment),a4t=l(),qke=a("p"),n4t=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),s4t=l(),fm=a("p"),l4t=o(`Note:
Loading a model from its configuration file does `),jke=a("strong"),i4t=o("not"),d4t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jle=a("a"),c4t=o("from_pretrained()"),f4t=o(" to load the model weights."),m4t=l(),F(jL.$$.fragment),g4t=l(),nt=a("div"),F($P.$$.fragment),h4t=l(),Dke=a("p"),u4t=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),p4t=l(),Yn=a("p"),_4t=o("The model class to instantiate is selected based on the "),Gke=a("code"),v4t=o("model_type"),b4t=o(` property of the config object (either
passed as an argument or loaded from `),Oke=a("code"),F4t=o("pretrained_model_name_or_path"),T4t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vke=a("code"),M4t=o("pretrained_model_name_or_path"),E4t=o(":"),C4t=l(),Se=a("ul"),DL=a("li"),Xke=a("strong"),w4t=o("albert"),A4t=o(" \u2014 "),Dle=a("a"),L4t=o("FlaxAlbertForSequenceClassification"),y4t=o(" (ALBERT model)"),x4t=l(),GL=a("li"),zke=a("strong"),$4t=o("bart"),k4t=o(" \u2014 "),Gle=a("a"),S4t=o("FlaxBartForSequenceClassification"),R4t=o(" (BART model)"),P4t=l(),OL=a("li"),Qke=a("strong"),B4t=o("bert"),I4t=o(" \u2014 "),Ole=a("a"),N4t=o("FlaxBertForSequenceClassification"),q4t=o(" (BERT model)"),j4t=l(),VL=a("li"),Wke=a("strong"),D4t=o("big_bird"),G4t=o(" \u2014 "),Vle=a("a"),O4t=o("FlaxBigBirdForSequenceClassification"),V4t=o(" (BigBird model)"),X4t=l(),XL=a("li"),Uke=a("strong"),z4t=o("distilbert"),Q4t=o(" \u2014 "),Xle=a("a"),W4t=o("FlaxDistilBertForSequenceClassification"),U4t=o(" (DistilBERT model)"),H4t=l(),zL=a("li"),Hke=a("strong"),J4t=o("electra"),Y4t=o(" \u2014 "),zle=a("a"),Z4t=o("FlaxElectraForSequenceClassification"),K4t=o(" (ELECTRA model)"),e1t=l(),QL=a("li"),Jke=a("strong"),o1t=o("mbart"),r1t=o(" \u2014 "),Qle=a("a"),t1t=o("FlaxMBartForSequenceClassification"),a1t=o(" (mBART model)"),n1t=l(),WL=a("li"),Yke=a("strong"),s1t=o("roberta"),l1t=o(" \u2014 "),Wle=a("a"),i1t=o("FlaxRobertaForSequenceClassification"),d1t=o(" (RoBERTa model)"),c1t=l(),UL=a("li"),Zke=a("strong"),f1t=o("roformer"),m1t=o(" \u2014 "),Ule=a("a"),g1t=o("FlaxRoFormerForSequenceClassification"),h1t=o(" (RoFormer model)"),u1t=l(),HL=a("li"),Kke=a("strong"),p1t=o("xlm-roberta"),_1t=o(" \u2014 "),Hle=a("a"),v1t=o("FlaxXLMRobertaForSequenceClassification"),b1t=o(" (XLM-RoBERTa model)"),F1t=l(),F(JL.$$.fragment),bto=l(),mm=a("h2"),YL=a("a"),eSe=a("span"),F(kP.$$.fragment),T1t=l(),oSe=a("span"),M1t=o("FlaxAutoModelForQuestionAnswering"),Fto=l(),$r=a("div"),F(SP.$$.fragment),E1t=l(),gm=a("p"),C1t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Jle=a("a"),w1t=o("from_pretrained()"),A1t=o(" class method or the "),Yle=a("a"),L1t=o("from_config()"),y1t=o(` class
method.`),x1t=l(),RP=a("p"),$1t=o("This class cannot be instantiated directly using "),rSe=a("code"),k1t=o("__init__()"),S1t=o(" (throws an error)."),R1t=l(),ua=a("div"),F(PP.$$.fragment),P1t=l(),tSe=a("p"),B1t=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),I1t=l(),hm=a("p"),N1t=o(`Note:
Loading a model from its configuration file does `),aSe=a("strong"),q1t=o("not"),j1t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zle=a("a"),D1t=o("from_pretrained()"),G1t=o(" to load the model weights."),O1t=l(),F(ZL.$$.fragment),V1t=l(),st=a("div"),F(BP.$$.fragment),X1t=l(),nSe=a("p"),z1t=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Q1t=l(),Zn=a("p"),W1t=o("The model class to instantiate is selected based on the "),sSe=a("code"),U1t=o("model_type"),H1t=o(` property of the config object (either
passed as an argument or loaded from `),lSe=a("code"),J1t=o("pretrained_model_name_or_path"),Y1t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iSe=a("code"),Z1t=o("pretrained_model_name_or_path"),K1t=o(":"),ebt=l(),Re=a("ul"),KL=a("li"),dSe=a("strong"),obt=o("albert"),rbt=o(" \u2014 "),Kle=a("a"),tbt=o("FlaxAlbertForQuestionAnswering"),abt=o(" (ALBERT model)"),nbt=l(),e8=a("li"),cSe=a("strong"),sbt=o("bart"),lbt=o(" \u2014 "),eie=a("a"),ibt=o("FlaxBartForQuestionAnswering"),dbt=o(" (BART model)"),cbt=l(),o8=a("li"),fSe=a("strong"),fbt=o("bert"),mbt=o(" \u2014 "),oie=a("a"),gbt=o("FlaxBertForQuestionAnswering"),hbt=o(" (BERT model)"),ubt=l(),r8=a("li"),mSe=a("strong"),pbt=o("big_bird"),_bt=o(" \u2014 "),rie=a("a"),vbt=o("FlaxBigBirdForQuestionAnswering"),bbt=o(" (BigBird model)"),Fbt=l(),t8=a("li"),gSe=a("strong"),Tbt=o("distilbert"),Mbt=o(" \u2014 "),tie=a("a"),Ebt=o("FlaxDistilBertForQuestionAnswering"),Cbt=o(" (DistilBERT model)"),wbt=l(),a8=a("li"),hSe=a("strong"),Abt=o("electra"),Lbt=o(" \u2014 "),aie=a("a"),ybt=o("FlaxElectraForQuestionAnswering"),xbt=o(" (ELECTRA model)"),$bt=l(),n8=a("li"),uSe=a("strong"),kbt=o("mbart"),Sbt=o(" \u2014 "),nie=a("a"),Rbt=o("FlaxMBartForQuestionAnswering"),Pbt=o(" (mBART model)"),Bbt=l(),s8=a("li"),pSe=a("strong"),Ibt=o("roberta"),Nbt=o(" \u2014 "),sie=a("a"),qbt=o("FlaxRobertaForQuestionAnswering"),jbt=o(" (RoBERTa model)"),Dbt=l(),l8=a("li"),_Se=a("strong"),Gbt=o("roformer"),Obt=o(" \u2014 "),lie=a("a"),Vbt=o("FlaxRoFormerForQuestionAnswering"),Xbt=o(" (RoFormer model)"),zbt=l(),i8=a("li"),vSe=a("strong"),Qbt=o("xlm-roberta"),Wbt=o(" \u2014 "),iie=a("a"),Ubt=o("FlaxXLMRobertaForQuestionAnswering"),Hbt=o(" (XLM-RoBERTa model)"),Jbt=l(),F(d8.$$.fragment),Tto=l(),um=a("h2"),c8=a("a"),bSe=a("span"),F(IP.$$.fragment),Ybt=l(),FSe=a("span"),Zbt=o("FlaxAutoModelForTokenClassification"),Mto=l(),kr=a("div"),F(NP.$$.fragment),Kbt=l(),pm=a("p"),e3t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),die=a("a"),o3t=o("from_pretrained()"),r3t=o(" class method or the "),cie=a("a"),t3t=o("from_config()"),a3t=o(` class
method.`),n3t=l(),qP=a("p"),s3t=o("This class cannot be instantiated directly using "),TSe=a("code"),l3t=o("__init__()"),i3t=o(" (throws an error)."),d3t=l(),pa=a("div"),F(jP.$$.fragment),c3t=l(),MSe=a("p"),f3t=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),m3t=l(),_m=a("p"),g3t=o(`Note:
Loading a model from its configuration file does `),ESe=a("strong"),h3t=o("not"),u3t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fie=a("a"),p3t=o("from_pretrained()"),_3t=o(" to load the model weights."),v3t=l(),F(f8.$$.fragment),b3t=l(),lt=a("div"),F(DP.$$.fragment),F3t=l(),CSe=a("p"),T3t=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),M3t=l(),Kn=a("p"),E3t=o("The model class to instantiate is selected based on the "),wSe=a("code"),C3t=o("model_type"),w3t=o(` property of the config object (either
passed as an argument or loaded from `),ASe=a("code"),A3t=o("pretrained_model_name_or_path"),L3t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LSe=a("code"),y3t=o("pretrained_model_name_or_path"),x3t=o(":"),$3t=l(),Xe=a("ul"),m8=a("li"),ySe=a("strong"),k3t=o("albert"),S3t=o(" \u2014 "),mie=a("a"),R3t=o("FlaxAlbertForTokenClassification"),P3t=o(" (ALBERT model)"),B3t=l(),g8=a("li"),xSe=a("strong"),I3t=o("bert"),N3t=o(" \u2014 "),gie=a("a"),q3t=o("FlaxBertForTokenClassification"),j3t=o(" (BERT model)"),D3t=l(),h8=a("li"),$Se=a("strong"),G3t=o("big_bird"),O3t=o(" \u2014 "),hie=a("a"),V3t=o("FlaxBigBirdForTokenClassification"),X3t=o(" (BigBird model)"),z3t=l(),u8=a("li"),kSe=a("strong"),Q3t=o("distilbert"),W3t=o(" \u2014 "),uie=a("a"),U3t=o("FlaxDistilBertForTokenClassification"),H3t=o(" (DistilBERT model)"),J3t=l(),p8=a("li"),SSe=a("strong"),Y3t=o("electra"),Z3t=o(" \u2014 "),pie=a("a"),K3t=o("FlaxElectraForTokenClassification"),e0t=o(" (ELECTRA model)"),o0t=l(),_8=a("li"),RSe=a("strong"),r0t=o("roberta"),t0t=o(" \u2014 "),_ie=a("a"),a0t=o("FlaxRobertaForTokenClassification"),n0t=o(" (RoBERTa model)"),s0t=l(),v8=a("li"),PSe=a("strong"),l0t=o("roformer"),i0t=o(" \u2014 "),vie=a("a"),d0t=o("FlaxRoFormerForTokenClassification"),c0t=o(" (RoFormer model)"),f0t=l(),b8=a("li"),BSe=a("strong"),m0t=o("xlm-roberta"),g0t=o(" \u2014 "),bie=a("a"),h0t=o("FlaxXLMRobertaForTokenClassification"),u0t=o(" (XLM-RoBERTa model)"),p0t=l(),F(F8.$$.fragment),Eto=l(),vm=a("h2"),T8=a("a"),ISe=a("span"),F(GP.$$.fragment),_0t=l(),NSe=a("span"),v0t=o("FlaxAutoModelForMultipleChoice"),Cto=l(),Sr=a("div"),F(OP.$$.fragment),b0t=l(),bm=a("p"),F0t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Fie=a("a"),T0t=o("from_pretrained()"),M0t=o(" class method or the "),Tie=a("a"),E0t=o("from_config()"),C0t=o(` class
method.`),w0t=l(),VP=a("p"),A0t=o("This class cannot be instantiated directly using "),qSe=a("code"),L0t=o("__init__()"),y0t=o(" (throws an error)."),x0t=l(),_a=a("div"),F(XP.$$.fragment),$0t=l(),jSe=a("p"),k0t=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),S0t=l(),Fm=a("p"),R0t=o(`Note:
Loading a model from its configuration file does `),DSe=a("strong"),P0t=o("not"),B0t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mie=a("a"),I0t=o("from_pretrained()"),N0t=o(" to load the model weights."),q0t=l(),F(M8.$$.fragment),j0t=l(),it=a("div"),F(zP.$$.fragment),D0t=l(),GSe=a("p"),G0t=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),O0t=l(),es=a("p"),V0t=o("The model class to instantiate is selected based on the "),OSe=a("code"),X0t=o("model_type"),z0t=o(` property of the config object (either
passed as an argument or loaded from `),VSe=a("code"),Q0t=o("pretrained_model_name_or_path"),W0t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XSe=a("code"),U0t=o("pretrained_model_name_or_path"),H0t=o(":"),J0t=l(),ze=a("ul"),E8=a("li"),zSe=a("strong"),Y0t=o("albert"),Z0t=o(" \u2014 "),Eie=a("a"),K0t=o("FlaxAlbertForMultipleChoice"),eFt=o(" (ALBERT model)"),oFt=l(),C8=a("li"),QSe=a("strong"),rFt=o("bert"),tFt=o(" \u2014 "),Cie=a("a"),aFt=o("FlaxBertForMultipleChoice"),nFt=o(" (BERT model)"),sFt=l(),w8=a("li"),WSe=a("strong"),lFt=o("big_bird"),iFt=o(" \u2014 "),wie=a("a"),dFt=o("FlaxBigBirdForMultipleChoice"),cFt=o(" (BigBird model)"),fFt=l(),A8=a("li"),USe=a("strong"),mFt=o("distilbert"),gFt=o(" \u2014 "),Aie=a("a"),hFt=o("FlaxDistilBertForMultipleChoice"),uFt=o(" (DistilBERT model)"),pFt=l(),L8=a("li"),HSe=a("strong"),_Ft=o("electra"),vFt=o(" \u2014 "),Lie=a("a"),bFt=o("FlaxElectraForMultipleChoice"),FFt=o(" (ELECTRA model)"),TFt=l(),y8=a("li"),JSe=a("strong"),MFt=o("roberta"),EFt=o(" \u2014 "),yie=a("a"),CFt=o("FlaxRobertaForMultipleChoice"),wFt=o(" (RoBERTa model)"),AFt=l(),x8=a("li"),YSe=a("strong"),LFt=o("roformer"),yFt=o(" \u2014 "),xie=a("a"),xFt=o("FlaxRoFormerForMultipleChoice"),$Ft=o(" (RoFormer model)"),kFt=l(),$8=a("li"),ZSe=a("strong"),SFt=o("xlm-roberta"),RFt=o(" \u2014 "),$ie=a("a"),PFt=o("FlaxXLMRobertaForMultipleChoice"),BFt=o(" (XLM-RoBERTa model)"),IFt=l(),F(k8.$$.fragment),wto=l(),Tm=a("h2"),S8=a("a"),KSe=a("span"),F(QP.$$.fragment),NFt=l(),eRe=a("span"),qFt=o("FlaxAutoModelForNextSentencePrediction"),Ato=l(),Rr=a("div"),F(WP.$$.fragment),jFt=l(),Mm=a("p"),DFt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kie=a("a"),GFt=o("from_pretrained()"),OFt=o(" class method or the "),Sie=a("a"),VFt=o("from_config()"),XFt=o(` class
method.`),zFt=l(),UP=a("p"),QFt=o("This class cannot be instantiated directly using "),oRe=a("code"),WFt=o("__init__()"),UFt=o(" (throws an error)."),HFt=l(),va=a("div"),F(HP.$$.fragment),JFt=l(),rRe=a("p"),YFt=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ZFt=l(),Em=a("p"),KFt=o(`Note:
Loading a model from its configuration file does `),tRe=a("strong"),eTt=o("not"),oTt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rie=a("a"),rTt=o("from_pretrained()"),tTt=o(" to load the model weights."),aTt=l(),F(R8.$$.fragment),nTt=l(),dt=a("div"),F(JP.$$.fragment),sTt=l(),aRe=a("p"),lTt=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),iTt=l(),os=a("p"),dTt=o("The model class to instantiate is selected based on the "),nRe=a("code"),cTt=o("model_type"),fTt=o(` property of the config object (either
passed as an argument or loaded from `),sRe=a("code"),mTt=o("pretrained_model_name_or_path"),gTt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lRe=a("code"),hTt=o("pretrained_model_name_or_path"),uTt=o(":"),pTt=l(),iRe=a("ul"),P8=a("li"),dRe=a("strong"),_Tt=o("bert"),vTt=o(" \u2014 "),Pie=a("a"),bTt=o("FlaxBertForNextSentencePrediction"),FTt=o(" (BERT model)"),TTt=l(),F(B8.$$.fragment),Lto=l(),Cm=a("h2"),I8=a("a"),cRe=a("span"),F(YP.$$.fragment),MTt=l(),fRe=a("span"),ETt=o("FlaxAutoModelForImageClassification"),yto=l(),Pr=a("div"),F(ZP.$$.fragment),CTt=l(),wm=a("p"),wTt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Bie=a("a"),ATt=o("from_pretrained()"),LTt=o(" class method or the "),Iie=a("a"),yTt=o("from_config()"),xTt=o(` class
method.`),$Tt=l(),KP=a("p"),kTt=o("This class cannot be instantiated directly using "),mRe=a("code"),STt=o("__init__()"),RTt=o(" (throws an error)."),PTt=l(),ba=a("div"),F(eB.$$.fragment),BTt=l(),gRe=a("p"),ITt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),NTt=l(),Am=a("p"),qTt=o(`Note:
Loading a model from its configuration file does `),hRe=a("strong"),jTt=o("not"),DTt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nie=a("a"),GTt=o("from_pretrained()"),OTt=o(" to load the model weights."),VTt=l(),F(N8.$$.fragment),XTt=l(),ct=a("div"),F(oB.$$.fragment),zTt=l(),uRe=a("p"),QTt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),WTt=l(),rs=a("p"),UTt=o("The model class to instantiate is selected based on the "),pRe=a("code"),HTt=o("model_type"),JTt=o(` property of the config object (either
passed as an argument or loaded from `),_Re=a("code"),YTt=o("pretrained_model_name_or_path"),ZTt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vRe=a("code"),KTt=o("pretrained_model_name_or_path"),eMt=o(":"),oMt=l(),rB=a("ul"),q8=a("li"),bRe=a("strong"),rMt=o("beit"),tMt=o(" \u2014 "),qie=a("a"),aMt=o("FlaxBeitForImageClassification"),nMt=o(" (BEiT model)"),sMt=l(),j8=a("li"),FRe=a("strong"),lMt=o("vit"),iMt=o(" \u2014 "),jie=a("a"),dMt=o("FlaxViTForImageClassification"),cMt=o(" (ViT model)"),fMt=l(),F(D8.$$.fragment),xto=l(),Lm=a("h2"),G8=a("a"),TRe=a("span"),F(tB.$$.fragment),mMt=l(),MRe=a("span"),gMt=o("FlaxAutoModelForVision2Seq"),$to=l(),Br=a("div"),F(aB.$$.fragment),hMt=l(),ym=a("p"),uMt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Die=a("a"),pMt=o("from_pretrained()"),_Mt=o(" class method or the "),Gie=a("a"),vMt=o("from_config()"),bMt=o(` class
method.`),FMt=l(),nB=a("p"),TMt=o("This class cannot be instantiated directly using "),ERe=a("code"),MMt=o("__init__()"),EMt=o(" (throws an error)."),CMt=l(),Fa=a("div"),F(sB.$$.fragment),wMt=l(),CRe=a("p"),AMt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),LMt=l(),xm=a("p"),yMt=o(`Note:
Loading a model from its configuration file does `),wRe=a("strong"),xMt=o("not"),$Mt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oie=a("a"),kMt=o("from_pretrained()"),SMt=o(" to load the model weights."),RMt=l(),F(O8.$$.fragment),PMt=l(),ft=a("div"),F(lB.$$.fragment),BMt=l(),ARe=a("p"),IMt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),NMt=l(),ts=a("p"),qMt=o("The model class to instantiate is selected based on the "),LRe=a("code"),jMt=o("model_type"),DMt=o(` property of the config object (either
passed as an argument or loaded from `),yRe=a("code"),GMt=o("pretrained_model_name_or_path"),OMt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xRe=a("code"),VMt=o("pretrained_model_name_or_path"),XMt=o(":"),zMt=l(),$Re=a("ul"),V8=a("li"),kRe=a("strong"),QMt=o("vision-encoder-decoder"),WMt=o(" \u2014 "),Vie=a("a"),UMt=o("FlaxVisionEncoderDecoderModel"),HMt=o(" (Vision Encoder decoder model)"),JMt=l(),F(X8.$$.fragment),this.h()},l(f){const _=Iba('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),b=i(f),u=n(f,"H1",{class:!0});var iB=s(u);m=n(iB,"A",{id:!0,class:!0,href:!0});var SRe=s(m);p=n(SRe,"SPAN",{});var RRe=s(p);T(d.$$.fragment,RRe),RRe.forEach(t),SRe.forEach(t),h=i(iB),xo=n(iB,"SPAN",{});var PRe=s(xo);dd=r(PRe,"Auto Classes"),PRe.forEach(t),iB.forEach(t),Rm=i(f),vt=n(f,"P",{});var dB=s(vt);cd=r(dB,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),fd=n(dB,"CODE",{});var BRe=s(fd);Cx=r(BRe,"from_pretrained()"),BRe.forEach(t),Pm=r(dB,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),dB.forEach(t),Ve=i(f),He=n(f,"P",{});var as=s(He);md=r(as,"Instantiating one of "),ns=n(as,"A",{href:!0});var IRe=s(ns);wx=r(IRe,"AutoConfig"),IRe.forEach(t),ss=r(as,", "),ls=n(as,"A",{href:!0});var NRe=s(ls);Ax=r(NRe,"AutoModel"),NRe.forEach(t),gd=r(as,`, and
`),is=n(as,"A",{href:!0});var qRe=s(is);Lx=r(qRe,"AutoTokenizer"),qRe.forEach(t),hd=r(as," will directly create a class of the relevant architecture. For instance"),as.forEach(t),Bm=i(f),T(Ja.$$.fragment,f),Je=i(f),Ae=n(f,"P",{});var cB=s(Ae);RI=r(cB,"will create a model that is an instance of "),ud=n(cB,"A",{href:!0});var jRe=s(ud);PI=r(jRe,"BertModel"),jRe.forEach(t),BI=r(cB,"."),cB.forEach(t),$o=i(f),Ya=n(f,"P",{});var fB=s(Ya);II=r(fB,"There is one class of "),Im=n(fB,"CODE",{});var DRe=s(Im);NI=r(DRe,"AutoModel"),DRe.forEach(t),Jno=r(fB," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),fB.forEach(t),poo=i(f),pd=n(f,"H2",{class:!0});var mB=s(pd);Nm=n(mB,"A",{id:!0,class:!0,href:!0});var GRe=s(Nm);Jce=n(GRe,"SPAN",{});var ORe=s(Jce);T(yx.$$.fragment,ORe),ORe.forEach(t),GRe.forEach(t),Yno=i(mB),Yce=n(mB,"SPAN",{});var VRe=s(Yce);Zno=r(VRe,"Extending the Auto Classes"),VRe.forEach(t),mB.forEach(t),_oo=i(f),ds=n(f,"P",{});var $m=s(ds);Kno=r($m,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Zce=n($m,"CODE",{});var XRe=s(Zce);eso=r(XRe,"NewModel"),XRe.forEach(t),oso=r($m,", make sure you have a "),Kce=n($m,"CODE",{});var zRe=s(Kce);rso=r(zRe,"NewModelConfig"),zRe.forEach(t),tso=r($m,` then you can add those to the auto
classes like this:`),$m.forEach(t),voo=i(f),T(xx.$$.fragment,f),boo=i(f),qI=n(f,"P",{});var QRe=s(qI);aso=r(QRe,"You will then be able to use the auto classes like you would usually do!"),QRe.forEach(t),Foo=i(f),T(qm.$$.fragment,f),Too=i(f),_d=n(f,"H2",{class:!0});var gB=s(_d);jm=n(gB,"A",{id:!0,class:!0,href:!0});var WRe=s(jm);efe=n(WRe,"SPAN",{});var URe=s(efe);T($x.$$.fragment,URe),URe.forEach(t),WRe.forEach(t),nso=i(gB),ofe=n(gB,"SPAN",{});var HRe=s(ofe);sso=r(HRe,"AutoConfig"),HRe.forEach(t),gB.forEach(t),Moo=i(f),ko=n(f,"DIV",{class:!0});var pt=s(ko);T(kx.$$.fragment,pt),lso=i(pt),Sx=n(pt,"P",{});var hB=s(Sx);iso=r(hB,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),jI=n(hB,"A",{href:!0});var JRe=s(jI);dso=r(JRe,"from_pretrained()"),JRe.forEach(t),cso=r(hB," class method."),hB.forEach(t),fso=i(pt),Rx=n(pt,"P",{});var uB=s(Rx);mso=r(uB,"This class cannot be instantiated directly using "),rfe=n(uB,"CODE",{});var YRe=s(rfe);gso=r(YRe,"__init__()"),YRe.forEach(t),hso=r(uB," (throws an error)."),uB.forEach(t),uso=i(pt),Ir=n(pt,"DIV",{class:!0});var _t=s(Ir);T(Px.$$.fragment,_t),pso=i(_t),tfe=n(_t,"P",{});var ZRe=s(tfe);_so=r(ZRe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),ZRe.forEach(t),vso=i(_t),vd=n(_t,"P",{});var km=s(vd);bso=r(km,"The configuration class to instantiate is selected based on the "),afe=n(km,"CODE",{});var KRe=s(afe);Fso=r(KRe,"model_type"),KRe.forEach(t),Tso=r(km,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),nfe=n(km,"CODE",{});var ePe=s(nfe);Mso=r(ePe,"pretrained_model_name_or_path"),ePe.forEach(t),Eso=r(km,":"),km.forEach(t),Cso=i(_t),A=n(_t,"UL",{});var L=s(A);Dm=n(L,"LI",{});var z8=s(Dm);sfe=n(z8,"STRONG",{});var oPe=s(sfe);wso=r(oPe,"albert"),oPe.forEach(t),Aso=r(z8," \u2014 "),DI=n(z8,"A",{href:!0});var rPe=s(DI);Lso=r(rPe,"AlbertConfig"),rPe.forEach(t),yso=r(z8," (ALBERT model)"),z8.forEach(t),xso=i(L),Gm=n(L,"LI",{});var Q8=s(Gm);lfe=n(Q8,"STRONG",{});var tPe=s(lfe);$so=r(tPe,"bart"),tPe.forEach(t),kso=r(Q8," \u2014 "),GI=n(Q8,"A",{href:!0});var aPe=s(GI);Sso=r(aPe,"BartConfig"),aPe.forEach(t),Rso=r(Q8," (BART model)"),Q8.forEach(t),Pso=i(L),Om=n(L,"LI",{});var W8=s(Om);ife=n(W8,"STRONG",{});var nPe=s(ife);Bso=r(nPe,"beit"),nPe.forEach(t),Iso=r(W8," \u2014 "),OI=n(W8,"A",{href:!0});var sPe=s(OI);Nso=r(sPe,"BeitConfig"),sPe.forEach(t),qso=r(W8," (BEiT model)"),W8.forEach(t),jso=i(L),Vm=n(L,"LI",{});var U8=s(Vm);dfe=n(U8,"STRONG",{});var lPe=s(dfe);Dso=r(lPe,"bert"),lPe.forEach(t),Gso=r(U8," \u2014 "),VI=n(U8,"A",{href:!0});var iPe=s(VI);Oso=r(iPe,"BertConfig"),iPe.forEach(t),Vso=r(U8," (BERT model)"),U8.forEach(t),Xso=i(L),Xm=n(L,"LI",{});var H8=s(Xm);cfe=n(H8,"STRONG",{});var dPe=s(cfe);zso=r(dPe,"bert-generation"),dPe.forEach(t),Qso=r(H8," \u2014 "),XI=n(H8,"A",{href:!0});var cPe=s(XI);Wso=r(cPe,"BertGenerationConfig"),cPe.forEach(t),Uso=r(H8," (Bert Generation model)"),H8.forEach(t),Hso=i(L),zm=n(L,"LI",{});var J8=s(zm);ffe=n(J8,"STRONG",{});var fPe=s(ffe);Jso=r(fPe,"big_bird"),fPe.forEach(t),Yso=r(J8," \u2014 "),zI=n(J8,"A",{href:!0});var mPe=s(zI);Zso=r(mPe,"BigBirdConfig"),mPe.forEach(t),Kso=r(J8," (BigBird model)"),J8.forEach(t),elo=i(L),Qm=n(L,"LI",{});var Y8=s(Qm);mfe=n(Y8,"STRONG",{});var gPe=s(mfe);olo=r(gPe,"bigbird_pegasus"),gPe.forEach(t),rlo=r(Y8," \u2014 "),QI=n(Y8,"A",{href:!0});var hPe=s(QI);tlo=r(hPe,"BigBirdPegasusConfig"),hPe.forEach(t),alo=r(Y8," (BigBird-Pegasus model)"),Y8.forEach(t),nlo=i(L),Wm=n(L,"LI",{});var Z8=s(Wm);gfe=n(Z8,"STRONG",{});var uPe=s(gfe);slo=r(uPe,"blenderbot"),uPe.forEach(t),llo=r(Z8," \u2014 "),WI=n(Z8,"A",{href:!0});var pPe=s(WI);ilo=r(pPe,"BlenderbotConfig"),pPe.forEach(t),dlo=r(Z8," (Blenderbot model)"),Z8.forEach(t),clo=i(L),Um=n(L,"LI",{});var K8=s(Um);hfe=n(K8,"STRONG",{});var _Pe=s(hfe);flo=r(_Pe,"blenderbot-small"),_Pe.forEach(t),mlo=r(K8," \u2014 "),UI=n(K8,"A",{href:!0});var vPe=s(UI);glo=r(vPe,"BlenderbotSmallConfig"),vPe.forEach(t),hlo=r(K8," (BlenderbotSmall model)"),K8.forEach(t),ulo=i(L),Hm=n(L,"LI",{});var ey=s(Hm);ufe=n(ey,"STRONG",{});var bPe=s(ufe);plo=r(bPe,"bloom"),bPe.forEach(t),_lo=r(ey," \u2014 "),HI=n(ey,"A",{href:!0});var FPe=s(HI);vlo=r(FPe,"BloomConfig"),FPe.forEach(t),blo=r(ey," (BLOOM model)"),ey.forEach(t),Flo=i(L),Jm=n(L,"LI",{});var oy=s(Jm);pfe=n(oy,"STRONG",{});var TPe=s(pfe);Tlo=r(TPe,"camembert"),TPe.forEach(t),Mlo=r(oy," \u2014 "),JI=n(oy,"A",{href:!0});var MPe=s(JI);Elo=r(MPe,"CamembertConfig"),MPe.forEach(t),Clo=r(oy," (CamemBERT model)"),oy.forEach(t),wlo=i(L),Ym=n(L,"LI",{});var ry=s(Ym);_fe=n(ry,"STRONG",{});var EPe=s(_fe);Alo=r(EPe,"canine"),EPe.forEach(t),Llo=r(ry," \u2014 "),YI=n(ry,"A",{href:!0});var CPe=s(YI);ylo=r(CPe,"CanineConfig"),CPe.forEach(t),xlo=r(ry," (CANINE model)"),ry.forEach(t),$lo=i(L),Zm=n(L,"LI",{});var ty=s(Zm);vfe=n(ty,"STRONG",{});var wPe=s(vfe);klo=r(wPe,"clip"),wPe.forEach(t),Slo=r(ty," \u2014 "),ZI=n(ty,"A",{href:!0});var APe=s(ZI);Rlo=r(APe,"CLIPConfig"),APe.forEach(t),Plo=r(ty," (CLIP model)"),ty.forEach(t),Blo=i(L),Km=n(L,"LI",{});var ay=s(Km);bfe=n(ay,"STRONG",{});var LPe=s(bfe);Ilo=r(LPe,"codegen"),LPe.forEach(t),Nlo=r(ay," \u2014 "),KI=n(ay,"A",{href:!0});var yPe=s(KI);qlo=r(yPe,"CodeGenConfig"),yPe.forEach(t),jlo=r(ay," (CodeGen model)"),ay.forEach(t),Dlo=i(L),eg=n(L,"LI",{});var ny=s(eg);Ffe=n(ny,"STRONG",{});var xPe=s(Ffe);Glo=r(xPe,"conditional_detr"),xPe.forEach(t),Olo=r(ny," \u2014 "),eN=n(ny,"A",{href:!0});var $Pe=s(eN);Vlo=r($Pe,"ConditionalDetrConfig"),$Pe.forEach(t),Xlo=r(ny," (Conditional DETR model)"),ny.forEach(t),zlo=i(L),og=n(L,"LI",{});var sy=s(og);Tfe=n(sy,"STRONG",{});var kPe=s(Tfe);Qlo=r(kPe,"convbert"),kPe.forEach(t),Wlo=r(sy," \u2014 "),oN=n(sy,"A",{href:!0});var SPe=s(oN);Ulo=r(SPe,"ConvBertConfig"),SPe.forEach(t),Hlo=r(sy," (ConvBERT model)"),sy.forEach(t),Jlo=i(L),rg=n(L,"LI",{});var ly=s(rg);Mfe=n(ly,"STRONG",{});var RPe=s(Mfe);Ylo=r(RPe,"convnext"),RPe.forEach(t),Zlo=r(ly," \u2014 "),rN=n(ly,"A",{href:!0});var PPe=s(rN);Klo=r(PPe,"ConvNextConfig"),PPe.forEach(t),eio=r(ly," (ConvNeXT model)"),ly.forEach(t),oio=i(L),tg=n(L,"LI",{});var iy=s(tg);Efe=n(iy,"STRONG",{});var BPe=s(Efe);rio=r(BPe,"ctrl"),BPe.forEach(t),tio=r(iy," \u2014 "),tN=n(iy,"A",{href:!0});var IPe=s(tN);aio=r(IPe,"CTRLConfig"),IPe.forEach(t),nio=r(iy," (CTRL model)"),iy.forEach(t),sio=i(L),ag=n(L,"LI",{});var dy=s(ag);Cfe=n(dy,"STRONG",{});var NPe=s(Cfe);lio=r(NPe,"cvt"),NPe.forEach(t),iio=r(dy," \u2014 "),aN=n(dy,"A",{href:!0});var qPe=s(aN);dio=r(qPe,"CvtConfig"),qPe.forEach(t),cio=r(dy," (CvT model)"),dy.forEach(t),fio=i(L),ng=n(L,"LI",{});var cy=s(ng);wfe=n(cy,"STRONG",{});var jPe=s(wfe);mio=r(jPe,"data2vec-audio"),jPe.forEach(t),gio=r(cy," \u2014 "),nN=n(cy,"A",{href:!0});var DPe=s(nN);hio=r(DPe,"Data2VecAudioConfig"),DPe.forEach(t),uio=r(cy," (Data2VecAudio model)"),cy.forEach(t),pio=i(L),sg=n(L,"LI",{});var fy=s(sg);Afe=n(fy,"STRONG",{});var GPe=s(Afe);_io=r(GPe,"data2vec-text"),GPe.forEach(t),vio=r(fy," \u2014 "),sN=n(fy,"A",{href:!0});var OPe=s(sN);bio=r(OPe,"Data2VecTextConfig"),OPe.forEach(t),Fio=r(fy," (Data2VecText model)"),fy.forEach(t),Tio=i(L),lg=n(L,"LI",{});var my=s(lg);Lfe=n(my,"STRONG",{});var VPe=s(Lfe);Mio=r(VPe,"data2vec-vision"),VPe.forEach(t),Eio=r(my," \u2014 "),lN=n(my,"A",{href:!0});var XPe=s(lN);Cio=r(XPe,"Data2VecVisionConfig"),XPe.forEach(t),wio=r(my," (Data2VecVision model)"),my.forEach(t),Aio=i(L),ig=n(L,"LI",{});var gy=s(ig);yfe=n(gy,"STRONG",{});var zPe=s(yfe);Lio=r(zPe,"deberta"),zPe.forEach(t),yio=r(gy," \u2014 "),iN=n(gy,"A",{href:!0});var QPe=s(iN);xio=r(QPe,"DebertaConfig"),QPe.forEach(t),$io=r(gy," (DeBERTa model)"),gy.forEach(t),kio=i(L),dg=n(L,"LI",{});var hy=s(dg);xfe=n(hy,"STRONG",{});var WPe=s(xfe);Sio=r(WPe,"deberta-v2"),WPe.forEach(t),Rio=r(hy," \u2014 "),dN=n(hy,"A",{href:!0});var UPe=s(dN);Pio=r(UPe,"DebertaV2Config"),UPe.forEach(t),Bio=r(hy," (DeBERTa-v2 model)"),hy.forEach(t),Iio=i(L),cg=n(L,"LI",{});var uy=s(cg);$fe=n(uy,"STRONG",{});var HPe=s($fe);Nio=r(HPe,"decision_transformer"),HPe.forEach(t),qio=r(uy," \u2014 "),cN=n(uy,"A",{href:!0});var JPe=s(cN);jio=r(JPe,"DecisionTransformerConfig"),JPe.forEach(t),Dio=r(uy," (Decision Transformer model)"),uy.forEach(t),Gio=i(L),fg=n(L,"LI",{});var py=s(fg);kfe=n(py,"STRONG",{});var YPe=s(kfe);Oio=r(YPe,"deformable_detr"),YPe.forEach(t),Vio=r(py," \u2014 "),fN=n(py,"A",{href:!0});var ZPe=s(fN);Xio=r(ZPe,"DeformableDetrConfig"),ZPe.forEach(t),zio=r(py," (Deformable DETR model)"),py.forEach(t),Qio=i(L),mg=n(L,"LI",{});var _y=s(mg);Sfe=n(_y,"STRONG",{});var KPe=s(Sfe);Wio=r(KPe,"deit"),KPe.forEach(t),Uio=r(_y," \u2014 "),mN=n(_y,"A",{href:!0});var ZMt=s(mN);Hio=r(ZMt,"DeiTConfig"),ZMt.forEach(t),Jio=r(_y," (DeiT model)"),_y.forEach(t),Yio=i(L),gg=n(L,"LI",{});var eBe=s(gg);Rfe=n(eBe,"STRONG",{});var KMt=s(Rfe);Zio=r(KMt,"detr"),KMt.forEach(t),Kio=r(eBe," \u2014 "),gN=n(eBe,"A",{href:!0});var eEt=s(gN);edo=r(eEt,"DetrConfig"),eEt.forEach(t),odo=r(eBe," (DETR model)"),eBe.forEach(t),rdo=i(L),hg=n(L,"LI",{});var oBe=s(hg);Pfe=n(oBe,"STRONG",{});var oEt=s(Pfe);tdo=r(oEt,"distilbert"),oEt.forEach(t),ado=r(oBe," \u2014 "),hN=n(oBe,"A",{href:!0});var rEt=s(hN);ndo=r(rEt,"DistilBertConfig"),rEt.forEach(t),sdo=r(oBe," (DistilBERT model)"),oBe.forEach(t),ldo=i(L),ug=n(L,"LI",{});var rBe=s(ug);Bfe=n(rBe,"STRONG",{});var tEt=s(Bfe);ido=r(tEt,"donut-swin"),tEt.forEach(t),ddo=r(rBe," \u2014 "),uN=n(rBe,"A",{href:!0});var aEt=s(uN);cdo=r(aEt,"DonutSwinConfig"),aEt.forEach(t),fdo=r(rBe," (DonutSwin model)"),rBe.forEach(t),mdo=i(L),pg=n(L,"LI",{});var tBe=s(pg);Ife=n(tBe,"STRONG",{});var nEt=s(Ife);gdo=r(nEt,"dpr"),nEt.forEach(t),hdo=r(tBe," \u2014 "),pN=n(tBe,"A",{href:!0});var sEt=s(pN);udo=r(sEt,"DPRConfig"),sEt.forEach(t),pdo=r(tBe," (DPR model)"),tBe.forEach(t),_do=i(L),_g=n(L,"LI",{});var aBe=s(_g);Nfe=n(aBe,"STRONG",{});var lEt=s(Nfe);vdo=r(lEt,"dpt"),lEt.forEach(t),bdo=r(aBe," \u2014 "),_N=n(aBe,"A",{href:!0});var iEt=s(_N);Fdo=r(iEt,"DPTConfig"),iEt.forEach(t),Tdo=r(aBe," (DPT model)"),aBe.forEach(t),Mdo=i(L),vg=n(L,"LI",{});var nBe=s(vg);qfe=n(nBe,"STRONG",{});var dEt=s(qfe);Edo=r(dEt,"electra"),dEt.forEach(t),Cdo=r(nBe," \u2014 "),vN=n(nBe,"A",{href:!0});var cEt=s(vN);wdo=r(cEt,"ElectraConfig"),cEt.forEach(t),Ado=r(nBe," (ELECTRA model)"),nBe.forEach(t),Ldo=i(L),bg=n(L,"LI",{});var sBe=s(bg);jfe=n(sBe,"STRONG",{});var fEt=s(jfe);ydo=r(fEt,"encoder-decoder"),fEt.forEach(t),xdo=r(sBe," \u2014 "),bN=n(sBe,"A",{href:!0});var mEt=s(bN);$do=r(mEt,"EncoderDecoderConfig"),mEt.forEach(t),kdo=r(sBe," (Encoder decoder model)"),sBe.forEach(t),Sdo=i(L),Fg=n(L,"LI",{});var lBe=s(Fg);Dfe=n(lBe,"STRONG",{});var gEt=s(Dfe);Rdo=r(gEt,"ernie"),gEt.forEach(t),Pdo=r(lBe," \u2014 "),FN=n(lBe,"A",{href:!0});var hEt=s(FN);Bdo=r(hEt,"ErnieConfig"),hEt.forEach(t),Ido=r(lBe," (ERNIE model)"),lBe.forEach(t),Ndo=i(L),Tg=n(L,"LI",{});var iBe=s(Tg);Gfe=n(iBe,"STRONG",{});var uEt=s(Gfe);qdo=r(uEt,"esm"),uEt.forEach(t),jdo=r(iBe," \u2014 "),TN=n(iBe,"A",{href:!0});var pEt=s(TN);Ddo=r(pEt,"EsmConfig"),pEt.forEach(t),Gdo=r(iBe," (ESM model)"),iBe.forEach(t),Odo=i(L),Mg=n(L,"LI",{});var dBe=s(Mg);Ofe=n(dBe,"STRONG",{});var _Et=s(Ofe);Vdo=r(_Et,"flaubert"),_Et.forEach(t),Xdo=r(dBe," \u2014 "),MN=n(dBe,"A",{href:!0});var vEt=s(MN);zdo=r(vEt,"FlaubertConfig"),vEt.forEach(t),Qdo=r(dBe," (FlauBERT model)"),dBe.forEach(t),Wdo=i(L),Eg=n(L,"LI",{});var cBe=s(Eg);Vfe=n(cBe,"STRONG",{});var bEt=s(Vfe);Udo=r(bEt,"flava"),bEt.forEach(t),Hdo=r(cBe," \u2014 "),EN=n(cBe,"A",{href:!0});var FEt=s(EN);Jdo=r(FEt,"FlavaConfig"),FEt.forEach(t),Ydo=r(cBe," (FLAVA model)"),cBe.forEach(t),Zdo=i(L),Cg=n(L,"LI",{});var fBe=s(Cg);Xfe=n(fBe,"STRONG",{});var TEt=s(Xfe);Kdo=r(TEt,"fnet"),TEt.forEach(t),eco=r(fBe," \u2014 "),CN=n(fBe,"A",{href:!0});var MEt=s(CN);oco=r(MEt,"FNetConfig"),MEt.forEach(t),rco=r(fBe," (FNet model)"),fBe.forEach(t),tco=i(L),wg=n(L,"LI",{});var mBe=s(wg);zfe=n(mBe,"STRONG",{});var EEt=s(zfe);aco=r(EEt,"fsmt"),EEt.forEach(t),nco=r(mBe," \u2014 "),wN=n(mBe,"A",{href:!0});var CEt=s(wN);sco=r(CEt,"FSMTConfig"),CEt.forEach(t),lco=r(mBe," (FairSeq Machine-Translation model)"),mBe.forEach(t),ico=i(L),Ag=n(L,"LI",{});var gBe=s(Ag);Qfe=n(gBe,"STRONG",{});var wEt=s(Qfe);dco=r(wEt,"funnel"),wEt.forEach(t),cco=r(gBe," \u2014 "),AN=n(gBe,"A",{href:!0});var AEt=s(AN);fco=r(AEt,"FunnelConfig"),AEt.forEach(t),mco=r(gBe," (Funnel Transformer model)"),gBe.forEach(t),gco=i(L),Lg=n(L,"LI",{});var hBe=s(Lg);Wfe=n(hBe,"STRONG",{});var LEt=s(Wfe);hco=r(LEt,"glpn"),LEt.forEach(t),uco=r(hBe," \u2014 "),LN=n(hBe,"A",{href:!0});var yEt=s(LN);pco=r(yEt,"GLPNConfig"),yEt.forEach(t),_co=r(hBe," (GLPN model)"),hBe.forEach(t),vco=i(L),yg=n(L,"LI",{});var uBe=s(yg);Ufe=n(uBe,"STRONG",{});var xEt=s(Ufe);bco=r(xEt,"gpt2"),xEt.forEach(t),Fco=r(uBe," \u2014 "),yN=n(uBe,"A",{href:!0});var $Et=s(yN);Tco=r($Et,"GPT2Config"),$Et.forEach(t),Mco=r(uBe," (OpenAI GPT-2 model)"),uBe.forEach(t),Eco=i(L),xg=n(L,"LI",{});var pBe=s(xg);Hfe=n(pBe,"STRONG",{});var kEt=s(Hfe);Cco=r(kEt,"gpt_neo"),kEt.forEach(t),wco=r(pBe," \u2014 "),xN=n(pBe,"A",{href:!0});var SEt=s(xN);Aco=r(SEt,"GPTNeoConfig"),SEt.forEach(t),Lco=r(pBe," (GPT Neo model)"),pBe.forEach(t),yco=i(L),$g=n(L,"LI",{});var _Be=s($g);Jfe=n(_Be,"STRONG",{});var REt=s(Jfe);xco=r(REt,"gpt_neox"),REt.forEach(t),$co=r(_Be," \u2014 "),$N=n(_Be,"A",{href:!0});var PEt=s($N);kco=r(PEt,"GPTNeoXConfig"),PEt.forEach(t),Sco=r(_Be," (GPT NeoX model)"),_Be.forEach(t),Rco=i(L),kg=n(L,"LI",{});var vBe=s(kg);Yfe=n(vBe,"STRONG",{});var BEt=s(Yfe);Pco=r(BEt,"gpt_neox_japanese"),BEt.forEach(t),Bco=r(vBe," \u2014 "),kN=n(vBe,"A",{href:!0});var IEt=s(kN);Ico=r(IEt,"GPTNeoXJapaneseConfig"),IEt.forEach(t),Nco=r(vBe," (GPT NeoX Japanese model)"),vBe.forEach(t),qco=i(L),Sg=n(L,"LI",{});var bBe=s(Sg);Zfe=n(bBe,"STRONG",{});var NEt=s(Zfe);jco=r(NEt,"gptj"),NEt.forEach(t),Dco=r(bBe," \u2014 "),SN=n(bBe,"A",{href:!0});var qEt=s(SN);Gco=r(qEt,"GPTJConfig"),qEt.forEach(t),Oco=r(bBe," (GPT-J model)"),bBe.forEach(t),Vco=i(L),Rg=n(L,"LI",{});var FBe=s(Rg);Kfe=n(FBe,"STRONG",{});var jEt=s(Kfe);Xco=r(jEt,"groupvit"),jEt.forEach(t),zco=r(FBe," \u2014 "),RN=n(FBe,"A",{href:!0});var DEt=s(RN);Qco=r(DEt,"GroupViTConfig"),DEt.forEach(t),Wco=r(FBe," (GroupViT model)"),FBe.forEach(t),Uco=i(L),Pg=n(L,"LI",{});var TBe=s(Pg);eme=n(TBe,"STRONG",{});var GEt=s(eme);Hco=r(GEt,"hubert"),GEt.forEach(t),Jco=r(TBe," \u2014 "),PN=n(TBe,"A",{href:!0});var OEt=s(PN);Yco=r(OEt,"HubertConfig"),OEt.forEach(t),Zco=r(TBe," (Hubert model)"),TBe.forEach(t),Kco=i(L),Bg=n(L,"LI",{});var MBe=s(Bg);ome=n(MBe,"STRONG",{});var VEt=s(ome);efo=r(VEt,"ibert"),VEt.forEach(t),ofo=r(MBe," \u2014 "),BN=n(MBe,"A",{href:!0});var XEt=s(BN);rfo=r(XEt,"IBertConfig"),XEt.forEach(t),tfo=r(MBe," (I-BERT model)"),MBe.forEach(t),afo=i(L),Ig=n(L,"LI",{});var EBe=s(Ig);rme=n(EBe,"STRONG",{});var zEt=s(rme);nfo=r(zEt,"imagegpt"),zEt.forEach(t),sfo=r(EBe," \u2014 "),IN=n(EBe,"A",{href:!0});var QEt=s(IN);lfo=r(QEt,"ImageGPTConfig"),QEt.forEach(t),ifo=r(EBe," (ImageGPT model)"),EBe.forEach(t),dfo=i(L),Ng=n(L,"LI",{});var CBe=s(Ng);tme=n(CBe,"STRONG",{});var WEt=s(tme);cfo=r(WEt,"layoutlm"),WEt.forEach(t),ffo=r(CBe," \u2014 "),NN=n(CBe,"A",{href:!0});var UEt=s(NN);mfo=r(UEt,"LayoutLMConfig"),UEt.forEach(t),gfo=r(CBe," (LayoutLM model)"),CBe.forEach(t),hfo=i(L),qg=n(L,"LI",{});var wBe=s(qg);ame=n(wBe,"STRONG",{});var HEt=s(ame);ufo=r(HEt,"layoutlmv2"),HEt.forEach(t),pfo=r(wBe," \u2014 "),qN=n(wBe,"A",{href:!0});var JEt=s(qN);_fo=r(JEt,"LayoutLMv2Config"),JEt.forEach(t),vfo=r(wBe," (LayoutLMv2 model)"),wBe.forEach(t),bfo=i(L),jg=n(L,"LI",{});var ABe=s(jg);nme=n(ABe,"STRONG",{});var YEt=s(nme);Ffo=r(YEt,"layoutlmv3"),YEt.forEach(t),Tfo=r(ABe," \u2014 "),jN=n(ABe,"A",{href:!0});var ZEt=s(jN);Mfo=r(ZEt,"LayoutLMv3Config"),ZEt.forEach(t),Efo=r(ABe," (LayoutLMv3 model)"),ABe.forEach(t),Cfo=i(L),Dg=n(L,"LI",{});var LBe=s(Dg);sme=n(LBe,"STRONG",{});var KEt=s(sme);wfo=r(KEt,"led"),KEt.forEach(t),Afo=r(LBe," \u2014 "),DN=n(LBe,"A",{href:!0});var eCt=s(DN);Lfo=r(eCt,"LEDConfig"),eCt.forEach(t),yfo=r(LBe," (LED model)"),LBe.forEach(t),xfo=i(L),Gg=n(L,"LI",{});var yBe=s(Gg);lme=n(yBe,"STRONG",{});var oCt=s(lme);$fo=r(oCt,"levit"),oCt.forEach(t),kfo=r(yBe," \u2014 "),GN=n(yBe,"A",{href:!0});var rCt=s(GN);Sfo=r(rCt,"LevitConfig"),rCt.forEach(t),Rfo=r(yBe," (LeViT model)"),yBe.forEach(t),Pfo=i(L),Og=n(L,"LI",{});var xBe=s(Og);ime=n(xBe,"STRONG",{});var tCt=s(ime);Bfo=r(tCt,"longformer"),tCt.forEach(t),Ifo=r(xBe," \u2014 "),ON=n(xBe,"A",{href:!0});var aCt=s(ON);Nfo=r(aCt,"LongformerConfig"),aCt.forEach(t),qfo=r(xBe," (Longformer model)"),xBe.forEach(t),jfo=i(L),Vg=n(L,"LI",{});var $Be=s(Vg);dme=n($Be,"STRONG",{});var nCt=s(dme);Dfo=r(nCt,"longt5"),nCt.forEach(t),Gfo=r($Be," \u2014 "),VN=n($Be,"A",{href:!0});var sCt=s(VN);Ofo=r(sCt,"LongT5Config"),sCt.forEach(t),Vfo=r($Be," (LongT5 model)"),$Be.forEach(t),Xfo=i(L),Xg=n(L,"LI",{});var kBe=s(Xg);cme=n(kBe,"STRONG",{});var lCt=s(cme);zfo=r(lCt,"luke"),lCt.forEach(t),Qfo=r(kBe," \u2014 "),XN=n(kBe,"A",{href:!0});var iCt=s(XN);Wfo=r(iCt,"LukeConfig"),iCt.forEach(t),Ufo=r(kBe," (LUKE model)"),kBe.forEach(t),Hfo=i(L),zg=n(L,"LI",{});var SBe=s(zg);fme=n(SBe,"STRONG",{});var dCt=s(fme);Jfo=r(dCt,"lxmert"),dCt.forEach(t),Yfo=r(SBe," \u2014 "),zN=n(SBe,"A",{href:!0});var cCt=s(zN);Zfo=r(cCt,"LxmertConfig"),cCt.forEach(t),Kfo=r(SBe," (LXMERT model)"),SBe.forEach(t),emo=i(L),Qg=n(L,"LI",{});var RBe=s(Qg);mme=n(RBe,"STRONG",{});var fCt=s(mme);omo=r(fCt,"m2m_100"),fCt.forEach(t),rmo=r(RBe," \u2014 "),QN=n(RBe,"A",{href:!0});var mCt=s(QN);tmo=r(mCt,"M2M100Config"),mCt.forEach(t),amo=r(RBe," (M2M100 model)"),RBe.forEach(t),nmo=i(L),Wg=n(L,"LI",{});var PBe=s(Wg);gme=n(PBe,"STRONG",{});var gCt=s(gme);smo=r(gCt,"marian"),gCt.forEach(t),lmo=r(PBe," \u2014 "),WN=n(PBe,"A",{href:!0});var hCt=s(WN);imo=r(hCt,"MarianConfig"),hCt.forEach(t),dmo=r(PBe," (Marian model)"),PBe.forEach(t),cmo=i(L),Ug=n(L,"LI",{});var BBe=s(Ug);hme=n(BBe,"STRONG",{});var uCt=s(hme);fmo=r(uCt,"markuplm"),uCt.forEach(t),mmo=r(BBe," \u2014 "),UN=n(BBe,"A",{href:!0});var pCt=s(UN);gmo=r(pCt,"MarkupLMConfig"),pCt.forEach(t),hmo=r(BBe," (MarkupLM model)"),BBe.forEach(t),umo=i(L),Hg=n(L,"LI",{});var IBe=s(Hg);ume=n(IBe,"STRONG",{});var _Ct=s(ume);pmo=r(_Ct,"maskformer"),_Ct.forEach(t),_mo=r(IBe," \u2014 "),HN=n(IBe,"A",{href:!0});var vCt=s(HN);vmo=r(vCt,"MaskFormerConfig"),vCt.forEach(t),bmo=r(IBe," (MaskFormer model)"),IBe.forEach(t),Fmo=i(L),Jg=n(L,"LI",{});var NBe=s(Jg);pme=n(NBe,"STRONG",{});var bCt=s(pme);Tmo=r(bCt,"mbart"),bCt.forEach(t),Mmo=r(NBe," \u2014 "),JN=n(NBe,"A",{href:!0});var FCt=s(JN);Emo=r(FCt,"MBartConfig"),FCt.forEach(t),Cmo=r(NBe," (mBART model)"),NBe.forEach(t),wmo=i(L),Yg=n(L,"LI",{});var qBe=s(Yg);_me=n(qBe,"STRONG",{});var TCt=s(_me);Amo=r(TCt,"mctct"),TCt.forEach(t),Lmo=r(qBe," \u2014 "),YN=n(qBe,"A",{href:!0});var MCt=s(YN);ymo=r(MCt,"MCTCTConfig"),MCt.forEach(t),xmo=r(qBe," (M-CTC-T model)"),qBe.forEach(t),$mo=i(L),Zg=n(L,"LI",{});var jBe=s(Zg);vme=n(jBe,"STRONG",{});var ECt=s(vme);kmo=r(ECt,"megatron-bert"),ECt.forEach(t),Smo=r(jBe," \u2014 "),ZN=n(jBe,"A",{href:!0});var CCt=s(ZN);Rmo=r(CCt,"MegatronBertConfig"),CCt.forEach(t),Pmo=r(jBe," (Megatron-BERT model)"),jBe.forEach(t),Bmo=i(L),Kg=n(L,"LI",{});var DBe=s(Kg);bme=n(DBe,"STRONG",{});var wCt=s(bme);Imo=r(wCt,"mobilebert"),wCt.forEach(t),Nmo=r(DBe," \u2014 "),KN=n(DBe,"A",{href:!0});var ACt=s(KN);qmo=r(ACt,"MobileBertConfig"),ACt.forEach(t),jmo=r(DBe," (MobileBERT model)"),DBe.forEach(t),Dmo=i(L),eh=n(L,"LI",{});var GBe=s(eh);Fme=n(GBe,"STRONG",{});var LCt=s(Fme);Gmo=r(LCt,"mobilevit"),LCt.forEach(t),Omo=r(GBe," \u2014 "),eq=n(GBe,"A",{href:!0});var yCt=s(eq);Vmo=r(yCt,"MobileViTConfig"),yCt.forEach(t),Xmo=r(GBe," (MobileViT model)"),GBe.forEach(t),zmo=i(L),oh=n(L,"LI",{});var OBe=s(oh);Tme=n(OBe,"STRONG",{});var xCt=s(Tme);Qmo=r(xCt,"mpnet"),xCt.forEach(t),Wmo=r(OBe," \u2014 "),oq=n(OBe,"A",{href:!0});var $Ct=s(oq);Umo=r($Ct,"MPNetConfig"),$Ct.forEach(t),Hmo=r(OBe," (MPNet model)"),OBe.forEach(t),Jmo=i(L),rh=n(L,"LI",{});var VBe=s(rh);Mme=n(VBe,"STRONG",{});var kCt=s(Mme);Ymo=r(kCt,"mt5"),kCt.forEach(t),Zmo=r(VBe," \u2014 "),rq=n(VBe,"A",{href:!0});var SCt=s(rq);Kmo=r(SCt,"MT5Config"),SCt.forEach(t),ego=r(VBe," (MT5 model)"),VBe.forEach(t),ogo=i(L),th=n(L,"LI",{});var XBe=s(th);Eme=n(XBe,"STRONG",{});var RCt=s(Eme);rgo=r(RCt,"mvp"),RCt.forEach(t),tgo=r(XBe," \u2014 "),tq=n(XBe,"A",{href:!0});var PCt=s(tq);ago=r(PCt,"MvpConfig"),PCt.forEach(t),ngo=r(XBe," (MVP model)"),XBe.forEach(t),sgo=i(L),ah=n(L,"LI",{});var zBe=s(ah);Cme=n(zBe,"STRONG",{});var BCt=s(Cme);lgo=r(BCt,"nezha"),BCt.forEach(t),igo=r(zBe," \u2014 "),aq=n(zBe,"A",{href:!0});var ICt=s(aq);dgo=r(ICt,"NezhaConfig"),ICt.forEach(t),cgo=r(zBe," (Nezha model)"),zBe.forEach(t),fgo=i(L),nh=n(L,"LI",{});var QBe=s(nh);wme=n(QBe,"STRONG",{});var NCt=s(wme);mgo=r(NCt,"nystromformer"),NCt.forEach(t),ggo=r(QBe," \u2014 "),nq=n(QBe,"A",{href:!0});var qCt=s(nq);hgo=r(qCt,"NystromformerConfig"),qCt.forEach(t),ugo=r(QBe," (Nystr\xF6mformer model)"),QBe.forEach(t),pgo=i(L),sh=n(L,"LI",{});var WBe=s(sh);Ame=n(WBe,"STRONG",{});var jCt=s(Ame);_go=r(jCt,"openai-gpt"),jCt.forEach(t),vgo=r(WBe," \u2014 "),sq=n(WBe,"A",{href:!0});var DCt=s(sq);bgo=r(DCt,"OpenAIGPTConfig"),DCt.forEach(t),Fgo=r(WBe," (OpenAI GPT model)"),WBe.forEach(t),Tgo=i(L),lh=n(L,"LI",{});var UBe=s(lh);Lme=n(UBe,"STRONG",{});var GCt=s(Lme);Mgo=r(GCt,"opt"),GCt.forEach(t),Ego=r(UBe," \u2014 "),lq=n(UBe,"A",{href:!0});var OCt=s(lq);Cgo=r(OCt,"OPTConfig"),OCt.forEach(t),wgo=r(UBe," (OPT model)"),UBe.forEach(t),Ago=i(L),ih=n(L,"LI",{});var HBe=s(ih);yme=n(HBe,"STRONG",{});var VCt=s(yme);Lgo=r(VCt,"owlvit"),VCt.forEach(t),ygo=r(HBe," \u2014 "),iq=n(HBe,"A",{href:!0});var XCt=s(iq);xgo=r(XCt,"OwlViTConfig"),XCt.forEach(t),$go=r(HBe," (OWL-ViT model)"),HBe.forEach(t),kgo=i(L),dh=n(L,"LI",{});var JBe=s(dh);xme=n(JBe,"STRONG",{});var zCt=s(xme);Sgo=r(zCt,"pegasus"),zCt.forEach(t),Rgo=r(JBe," \u2014 "),dq=n(JBe,"A",{href:!0});var QCt=s(dq);Pgo=r(QCt,"PegasusConfig"),QCt.forEach(t),Bgo=r(JBe," (Pegasus model)"),JBe.forEach(t),Igo=i(L),ch=n(L,"LI",{});var YBe=s(ch);$me=n(YBe,"STRONG",{});var WCt=s($me);Ngo=r(WCt,"pegasus_x"),WCt.forEach(t),qgo=r(YBe," \u2014 "),cq=n(YBe,"A",{href:!0});var UCt=s(cq);jgo=r(UCt,"PegasusXConfig"),UCt.forEach(t),Dgo=r(YBe," (PEGASUS-X model)"),YBe.forEach(t),Ggo=i(L),fh=n(L,"LI",{});var ZBe=s(fh);kme=n(ZBe,"STRONG",{});var HCt=s(kme);Ogo=r(HCt,"perceiver"),HCt.forEach(t),Vgo=r(ZBe," \u2014 "),fq=n(ZBe,"A",{href:!0});var JCt=s(fq);Xgo=r(JCt,"PerceiverConfig"),JCt.forEach(t),zgo=r(ZBe," (Perceiver model)"),ZBe.forEach(t),Qgo=i(L),mh=n(L,"LI",{});var KBe=s(mh);Sme=n(KBe,"STRONG",{});var YCt=s(Sme);Wgo=r(YCt,"plbart"),YCt.forEach(t),Ugo=r(KBe," \u2014 "),mq=n(KBe,"A",{href:!0});var ZCt=s(mq);Hgo=r(ZCt,"PLBartConfig"),ZCt.forEach(t),Jgo=r(KBe," (PLBart model)"),KBe.forEach(t),Ygo=i(L),gh=n(L,"LI",{});var eIe=s(gh);Rme=n(eIe,"STRONG",{});var KCt=s(Rme);Zgo=r(KCt,"poolformer"),KCt.forEach(t),Kgo=r(eIe," \u2014 "),gq=n(eIe,"A",{href:!0});var e5t=s(gq);eho=r(e5t,"PoolFormerConfig"),e5t.forEach(t),oho=r(eIe," (PoolFormer model)"),eIe.forEach(t),rho=i(L),hh=n(L,"LI",{});var oIe=s(hh);Pme=n(oIe,"STRONG",{});var o5t=s(Pme);tho=r(o5t,"prophetnet"),o5t.forEach(t),aho=r(oIe," \u2014 "),hq=n(oIe,"A",{href:!0});var r5t=s(hq);nho=r(r5t,"ProphetNetConfig"),r5t.forEach(t),sho=r(oIe," (ProphetNet model)"),oIe.forEach(t),lho=i(L),uh=n(L,"LI",{});var rIe=s(uh);Bme=n(rIe,"STRONG",{});var t5t=s(Bme);iho=r(t5t,"qdqbert"),t5t.forEach(t),dho=r(rIe," \u2014 "),uq=n(rIe,"A",{href:!0});var a5t=s(uq);cho=r(a5t,"QDQBertConfig"),a5t.forEach(t),fho=r(rIe," (QDQBert model)"),rIe.forEach(t),mho=i(L),ph=n(L,"LI",{});var tIe=s(ph);Ime=n(tIe,"STRONG",{});var n5t=s(Ime);gho=r(n5t,"rag"),n5t.forEach(t),hho=r(tIe," \u2014 "),pq=n(tIe,"A",{href:!0});var s5t=s(pq);uho=r(s5t,"RagConfig"),s5t.forEach(t),pho=r(tIe," (RAG model)"),tIe.forEach(t),_ho=i(L),_h=n(L,"LI",{});var aIe=s(_h);Nme=n(aIe,"STRONG",{});var l5t=s(Nme);vho=r(l5t,"realm"),l5t.forEach(t),bho=r(aIe," \u2014 "),_q=n(aIe,"A",{href:!0});var i5t=s(_q);Fho=r(i5t,"RealmConfig"),i5t.forEach(t),Tho=r(aIe," (REALM model)"),aIe.forEach(t),Mho=i(L),vh=n(L,"LI",{});var nIe=s(vh);qme=n(nIe,"STRONG",{});var d5t=s(qme);Eho=r(d5t,"reformer"),d5t.forEach(t),Cho=r(nIe," \u2014 "),vq=n(nIe,"A",{href:!0});var c5t=s(vq);who=r(c5t,"ReformerConfig"),c5t.forEach(t),Aho=r(nIe," (Reformer model)"),nIe.forEach(t),Lho=i(L),bh=n(L,"LI",{});var sIe=s(bh);jme=n(sIe,"STRONG",{});var f5t=s(jme);yho=r(f5t,"regnet"),f5t.forEach(t),xho=r(sIe," \u2014 "),bq=n(sIe,"A",{href:!0});var m5t=s(bq);$ho=r(m5t,"RegNetConfig"),m5t.forEach(t),kho=r(sIe," (RegNet model)"),sIe.forEach(t),Sho=i(L),Fh=n(L,"LI",{});var lIe=s(Fh);Dme=n(lIe,"STRONG",{});var g5t=s(Dme);Rho=r(g5t,"rembert"),g5t.forEach(t),Pho=r(lIe," \u2014 "),Fq=n(lIe,"A",{href:!0});var h5t=s(Fq);Bho=r(h5t,"RemBertConfig"),h5t.forEach(t),Iho=r(lIe," (RemBERT model)"),lIe.forEach(t),Nho=i(L),Th=n(L,"LI",{});var iIe=s(Th);Gme=n(iIe,"STRONG",{});var u5t=s(Gme);qho=r(u5t,"resnet"),u5t.forEach(t),jho=r(iIe," \u2014 "),Tq=n(iIe,"A",{href:!0});var p5t=s(Tq);Dho=r(p5t,"ResNetConfig"),p5t.forEach(t),Gho=r(iIe," (ResNet model)"),iIe.forEach(t),Oho=i(L),Mh=n(L,"LI",{});var dIe=s(Mh);Ome=n(dIe,"STRONG",{});var _5t=s(Ome);Vho=r(_5t,"retribert"),_5t.forEach(t),Xho=r(dIe," \u2014 "),Mq=n(dIe,"A",{href:!0});var v5t=s(Mq);zho=r(v5t,"RetriBertConfig"),v5t.forEach(t),Qho=r(dIe," (RetriBERT model)"),dIe.forEach(t),Who=i(L),Eh=n(L,"LI",{});var cIe=s(Eh);Vme=n(cIe,"STRONG",{});var b5t=s(Vme);Uho=r(b5t,"roberta"),b5t.forEach(t),Hho=r(cIe," \u2014 "),Eq=n(cIe,"A",{href:!0});var F5t=s(Eq);Jho=r(F5t,"RobertaConfig"),F5t.forEach(t),Yho=r(cIe," (RoBERTa model)"),cIe.forEach(t),Zho=i(L),Ch=n(L,"LI",{});var fIe=s(Ch);Xme=n(fIe,"STRONG",{});var T5t=s(Xme);Kho=r(T5t,"roformer"),T5t.forEach(t),euo=r(fIe," \u2014 "),Cq=n(fIe,"A",{href:!0});var M5t=s(Cq);ouo=r(M5t,"RoFormerConfig"),M5t.forEach(t),ruo=r(fIe," (RoFormer model)"),fIe.forEach(t),tuo=i(L),wh=n(L,"LI",{});var mIe=s(wh);zme=n(mIe,"STRONG",{});var E5t=s(zme);auo=r(E5t,"segformer"),E5t.forEach(t),nuo=r(mIe," \u2014 "),wq=n(mIe,"A",{href:!0});var C5t=s(wq);suo=r(C5t,"SegformerConfig"),C5t.forEach(t),luo=r(mIe," (SegFormer model)"),mIe.forEach(t),iuo=i(L),Ah=n(L,"LI",{});var gIe=s(Ah);Qme=n(gIe,"STRONG",{});var w5t=s(Qme);duo=r(w5t,"sew"),w5t.forEach(t),cuo=r(gIe," \u2014 "),Aq=n(gIe,"A",{href:!0});var A5t=s(Aq);fuo=r(A5t,"SEWConfig"),A5t.forEach(t),muo=r(gIe," (SEW model)"),gIe.forEach(t),guo=i(L),Lh=n(L,"LI",{});var hIe=s(Lh);Wme=n(hIe,"STRONG",{});var L5t=s(Wme);huo=r(L5t,"sew-d"),L5t.forEach(t),uuo=r(hIe," \u2014 "),Lq=n(hIe,"A",{href:!0});var y5t=s(Lq);puo=r(y5t,"SEWDConfig"),y5t.forEach(t),_uo=r(hIe," (SEW-D model)"),hIe.forEach(t),vuo=i(L),yh=n(L,"LI",{});var uIe=s(yh);Ume=n(uIe,"STRONG",{});var x5t=s(Ume);buo=r(x5t,"speech-encoder-decoder"),x5t.forEach(t),Fuo=r(uIe," \u2014 "),yq=n(uIe,"A",{href:!0});var $5t=s(yq);Tuo=r($5t,"SpeechEncoderDecoderConfig"),$5t.forEach(t),Muo=r(uIe," (Speech Encoder decoder model)"),uIe.forEach(t),Euo=i(L),xh=n(L,"LI",{});var pIe=s(xh);Hme=n(pIe,"STRONG",{});var k5t=s(Hme);Cuo=r(k5t,"speech_to_text"),k5t.forEach(t),wuo=r(pIe," \u2014 "),xq=n(pIe,"A",{href:!0});var S5t=s(xq);Auo=r(S5t,"Speech2TextConfig"),S5t.forEach(t),Luo=r(pIe," (Speech2Text model)"),pIe.forEach(t),yuo=i(L),$h=n(L,"LI",{});var _Ie=s($h);Jme=n(_Ie,"STRONG",{});var R5t=s(Jme);xuo=r(R5t,"speech_to_text_2"),R5t.forEach(t),$uo=r(_Ie," \u2014 "),$q=n(_Ie,"A",{href:!0});var P5t=s($q);kuo=r(P5t,"Speech2Text2Config"),P5t.forEach(t),Suo=r(_Ie," (Speech2Text2 model)"),_Ie.forEach(t),Ruo=i(L),kh=n(L,"LI",{});var vIe=s(kh);Yme=n(vIe,"STRONG",{});var B5t=s(Yme);Puo=r(B5t,"splinter"),B5t.forEach(t),Buo=r(vIe," \u2014 "),kq=n(vIe,"A",{href:!0});var I5t=s(kq);Iuo=r(I5t,"SplinterConfig"),I5t.forEach(t),Nuo=r(vIe," (Splinter model)"),vIe.forEach(t),quo=i(L),Sh=n(L,"LI",{});var bIe=s(Sh);Zme=n(bIe,"STRONG",{});var N5t=s(Zme);juo=r(N5t,"squeezebert"),N5t.forEach(t),Duo=r(bIe," \u2014 "),Sq=n(bIe,"A",{href:!0});var q5t=s(Sq);Guo=r(q5t,"SqueezeBertConfig"),q5t.forEach(t),Ouo=r(bIe," (SqueezeBERT model)"),bIe.forEach(t),Vuo=i(L),Rh=n(L,"LI",{});var FIe=s(Rh);Kme=n(FIe,"STRONG",{});var j5t=s(Kme);Xuo=r(j5t,"swin"),j5t.forEach(t),zuo=r(FIe," \u2014 "),Rq=n(FIe,"A",{href:!0});var D5t=s(Rq);Quo=r(D5t,"SwinConfig"),D5t.forEach(t),Wuo=r(FIe," (Swin Transformer model)"),FIe.forEach(t),Uuo=i(L),Ph=n(L,"LI",{});var TIe=s(Ph);ege=n(TIe,"STRONG",{});var G5t=s(ege);Huo=r(G5t,"swinv2"),G5t.forEach(t),Juo=r(TIe," \u2014 "),Pq=n(TIe,"A",{href:!0});var O5t=s(Pq);Yuo=r(O5t,"Swinv2Config"),O5t.forEach(t),Zuo=r(TIe," (Swin Transformer V2 model)"),TIe.forEach(t),Kuo=i(L),Bh=n(L,"LI",{});var MIe=s(Bh);oge=n(MIe,"STRONG",{});var V5t=s(oge);epo=r(V5t,"t5"),V5t.forEach(t),opo=r(MIe," \u2014 "),Bq=n(MIe,"A",{href:!0});var X5t=s(Bq);rpo=r(X5t,"T5Config"),X5t.forEach(t),tpo=r(MIe," (T5 model)"),MIe.forEach(t),apo=i(L),Ih=n(L,"LI",{});var EIe=s(Ih);rge=n(EIe,"STRONG",{});var z5t=s(rge);npo=r(z5t,"tapas"),z5t.forEach(t),spo=r(EIe," \u2014 "),Iq=n(EIe,"A",{href:!0});var Q5t=s(Iq);lpo=r(Q5t,"TapasConfig"),Q5t.forEach(t),ipo=r(EIe," (TAPAS model)"),EIe.forEach(t),dpo=i(L),Nh=n(L,"LI",{});var CIe=s(Nh);tge=n(CIe,"STRONG",{});var W5t=s(tge);cpo=r(W5t,"time_series_transformer"),W5t.forEach(t),fpo=r(CIe," \u2014 "),Nq=n(CIe,"A",{href:!0});var U5t=s(Nq);mpo=r(U5t,"TimeSeriesTransformerConfig"),U5t.forEach(t),gpo=r(CIe," (Time Series Transformer model)"),CIe.forEach(t),hpo=i(L),qh=n(L,"LI",{});var wIe=s(qh);age=n(wIe,"STRONG",{});var H5t=s(age);upo=r(H5t,"trajectory_transformer"),H5t.forEach(t),ppo=r(wIe," \u2014 "),qq=n(wIe,"A",{href:!0});var J5t=s(qq);_po=r(J5t,"TrajectoryTransformerConfig"),J5t.forEach(t),vpo=r(wIe," (Trajectory Transformer model)"),wIe.forEach(t),bpo=i(L),jh=n(L,"LI",{});var AIe=s(jh);nge=n(AIe,"STRONG",{});var Y5t=s(nge);Fpo=r(Y5t,"transfo-xl"),Y5t.forEach(t),Tpo=r(AIe," \u2014 "),jq=n(AIe,"A",{href:!0});var Z5t=s(jq);Mpo=r(Z5t,"TransfoXLConfig"),Z5t.forEach(t),Epo=r(AIe," (Transformer-XL model)"),AIe.forEach(t),Cpo=i(L),Dh=n(L,"LI",{});var LIe=s(Dh);sge=n(LIe,"STRONG",{});var K5t=s(sge);wpo=r(K5t,"trocr"),K5t.forEach(t),Apo=r(LIe," \u2014 "),Dq=n(LIe,"A",{href:!0});var ewt=s(Dq);Lpo=r(ewt,"TrOCRConfig"),ewt.forEach(t),ypo=r(LIe," (TrOCR model)"),LIe.forEach(t),xpo=i(L),Gh=n(L,"LI",{});var yIe=s(Gh);lge=n(yIe,"STRONG",{});var owt=s(lge);$po=r(owt,"unispeech"),owt.forEach(t),kpo=r(yIe," \u2014 "),Gq=n(yIe,"A",{href:!0});var rwt=s(Gq);Spo=r(rwt,"UniSpeechConfig"),rwt.forEach(t),Rpo=r(yIe," (UniSpeech model)"),yIe.forEach(t),Ppo=i(L),Oh=n(L,"LI",{});var xIe=s(Oh);ige=n(xIe,"STRONG",{});var twt=s(ige);Bpo=r(twt,"unispeech-sat"),twt.forEach(t),Ipo=r(xIe," \u2014 "),Oq=n(xIe,"A",{href:!0});var awt=s(Oq);Npo=r(awt,"UniSpeechSatConfig"),awt.forEach(t),qpo=r(xIe," (UniSpeechSat model)"),xIe.forEach(t),jpo=i(L),Vh=n(L,"LI",{});var $Ie=s(Vh);dge=n($Ie,"STRONG",{});var nwt=s(dge);Dpo=r(nwt,"van"),nwt.forEach(t),Gpo=r($Ie," \u2014 "),Vq=n($Ie,"A",{href:!0});var swt=s(Vq);Opo=r(swt,"VanConfig"),swt.forEach(t),Vpo=r($Ie," (VAN model)"),$Ie.forEach(t),Xpo=i(L),Xh=n(L,"LI",{});var kIe=s(Xh);cge=n(kIe,"STRONG",{});var lwt=s(cge);zpo=r(lwt,"videomae"),lwt.forEach(t),Qpo=r(kIe," \u2014 "),Xq=n(kIe,"A",{href:!0});var iwt=s(Xq);Wpo=r(iwt,"VideoMAEConfig"),iwt.forEach(t),Upo=r(kIe," (VideoMAE model)"),kIe.forEach(t),Hpo=i(L),zh=n(L,"LI",{});var SIe=s(zh);fge=n(SIe,"STRONG",{});var dwt=s(fge);Jpo=r(dwt,"vilt"),dwt.forEach(t),Ypo=r(SIe," \u2014 "),zq=n(SIe,"A",{href:!0});var cwt=s(zq);Zpo=r(cwt,"ViltConfig"),cwt.forEach(t),Kpo=r(SIe," (ViLT model)"),SIe.forEach(t),e_o=i(L),Qh=n(L,"LI",{});var RIe=s(Qh);mge=n(RIe,"STRONG",{});var fwt=s(mge);o_o=r(fwt,"vision-encoder-decoder"),fwt.forEach(t),r_o=r(RIe," \u2014 "),Qq=n(RIe,"A",{href:!0});var mwt=s(Qq);t_o=r(mwt,"VisionEncoderDecoderConfig"),mwt.forEach(t),a_o=r(RIe," (Vision Encoder decoder model)"),RIe.forEach(t),n_o=i(L),Wh=n(L,"LI",{});var PIe=s(Wh);gge=n(PIe,"STRONG",{});var gwt=s(gge);s_o=r(gwt,"vision-text-dual-encoder"),gwt.forEach(t),l_o=r(PIe," \u2014 "),Wq=n(PIe,"A",{href:!0});var hwt=s(Wq);i_o=r(hwt,"VisionTextDualEncoderConfig"),hwt.forEach(t),d_o=r(PIe," (VisionTextDualEncoder model)"),PIe.forEach(t),c_o=i(L),Uh=n(L,"LI",{});var BIe=s(Uh);hge=n(BIe,"STRONG",{});var uwt=s(hge);f_o=r(uwt,"visual_bert"),uwt.forEach(t),m_o=r(BIe," \u2014 "),Uq=n(BIe,"A",{href:!0});var pwt=s(Uq);g_o=r(pwt,"VisualBertConfig"),pwt.forEach(t),h_o=r(BIe," (VisualBERT model)"),BIe.forEach(t),u_o=i(L),Hh=n(L,"LI",{});var IIe=s(Hh);uge=n(IIe,"STRONG",{});var _wt=s(uge);p_o=r(_wt,"vit"),_wt.forEach(t),__o=r(IIe," \u2014 "),Hq=n(IIe,"A",{href:!0});var vwt=s(Hq);v_o=r(vwt,"ViTConfig"),vwt.forEach(t),b_o=r(IIe," (ViT model)"),IIe.forEach(t),F_o=i(L),Jh=n(L,"LI",{});var NIe=s(Jh);pge=n(NIe,"STRONG",{});var bwt=s(pge);T_o=r(bwt,"vit_mae"),bwt.forEach(t),M_o=r(NIe," \u2014 "),Jq=n(NIe,"A",{href:!0});var Fwt=s(Jq);E_o=r(Fwt,"ViTMAEConfig"),Fwt.forEach(t),C_o=r(NIe," (ViTMAE model)"),NIe.forEach(t),w_o=i(L),Yh=n(L,"LI",{});var qIe=s(Yh);_ge=n(qIe,"STRONG",{});var Twt=s(_ge);A_o=r(Twt,"vit_msn"),Twt.forEach(t),L_o=r(qIe," \u2014 "),Yq=n(qIe,"A",{href:!0});var Mwt=s(Yq);y_o=r(Mwt,"ViTMSNConfig"),Mwt.forEach(t),x_o=r(qIe," (ViTMSN model)"),qIe.forEach(t),$_o=i(L),Zh=n(L,"LI",{});var jIe=s(Zh);vge=n(jIe,"STRONG",{});var Ewt=s(vge);k_o=r(Ewt,"wav2vec2"),Ewt.forEach(t),S_o=r(jIe," \u2014 "),Zq=n(jIe,"A",{href:!0});var Cwt=s(Zq);R_o=r(Cwt,"Wav2Vec2Config"),Cwt.forEach(t),P_o=r(jIe," (Wav2Vec2 model)"),jIe.forEach(t),B_o=i(L),Kh=n(L,"LI",{});var DIe=s(Kh);bge=n(DIe,"STRONG",{});var wwt=s(bge);I_o=r(wwt,"wav2vec2-conformer"),wwt.forEach(t),N_o=r(DIe," \u2014 "),Kq=n(DIe,"A",{href:!0});var Awt=s(Kq);q_o=r(Awt,"Wav2Vec2ConformerConfig"),Awt.forEach(t),j_o=r(DIe," (Wav2Vec2-Conformer model)"),DIe.forEach(t),D_o=i(L),eu=n(L,"LI",{});var GIe=s(eu);Fge=n(GIe,"STRONG",{});var Lwt=s(Fge);G_o=r(Lwt,"wavlm"),Lwt.forEach(t),O_o=r(GIe," \u2014 "),ej=n(GIe,"A",{href:!0});var ywt=s(ej);V_o=r(ywt,"WavLMConfig"),ywt.forEach(t),X_o=r(GIe," (WavLM model)"),GIe.forEach(t),z_o=i(L),ou=n(L,"LI",{});var OIe=s(ou);Tge=n(OIe,"STRONG",{});var xwt=s(Tge);Q_o=r(xwt,"whisper"),xwt.forEach(t),W_o=r(OIe," \u2014 "),oj=n(OIe,"A",{href:!0});var $wt=s(oj);U_o=r($wt,"WhisperConfig"),$wt.forEach(t),H_o=r(OIe," (Whisper model)"),OIe.forEach(t),J_o=i(L),ru=n(L,"LI",{});var VIe=s(ru);Mge=n(VIe,"STRONG",{});var kwt=s(Mge);Y_o=r(kwt,"xclip"),kwt.forEach(t),Z_o=r(VIe," \u2014 "),rj=n(VIe,"A",{href:!0});var Swt=s(rj);K_o=r(Swt,"XCLIPConfig"),Swt.forEach(t),e2o=r(VIe," (X-CLIP model)"),VIe.forEach(t),o2o=i(L),tu=n(L,"LI",{});var XIe=s(tu);Ege=n(XIe,"STRONG",{});var Rwt=s(Ege);r2o=r(Rwt,"xglm"),Rwt.forEach(t),t2o=r(XIe," \u2014 "),tj=n(XIe,"A",{href:!0});var Pwt=s(tj);a2o=r(Pwt,"XGLMConfig"),Pwt.forEach(t),n2o=r(XIe," (XGLM model)"),XIe.forEach(t),s2o=i(L),au=n(L,"LI",{});var zIe=s(au);Cge=n(zIe,"STRONG",{});var Bwt=s(Cge);l2o=r(Bwt,"xlm"),Bwt.forEach(t),i2o=r(zIe," \u2014 "),aj=n(zIe,"A",{href:!0});var Iwt=s(aj);d2o=r(Iwt,"XLMConfig"),Iwt.forEach(t),c2o=r(zIe," (XLM model)"),zIe.forEach(t),f2o=i(L),nu=n(L,"LI",{});var QIe=s(nu);wge=n(QIe,"STRONG",{});var Nwt=s(wge);m2o=r(Nwt,"xlm-prophetnet"),Nwt.forEach(t),g2o=r(QIe," \u2014 "),nj=n(QIe,"A",{href:!0});var qwt=s(nj);h2o=r(qwt,"XLMProphetNetConfig"),qwt.forEach(t),u2o=r(QIe," (XLM-ProphetNet model)"),QIe.forEach(t),p2o=i(L),su=n(L,"LI",{});var WIe=s(su);Age=n(WIe,"STRONG",{});var jwt=s(Age);_2o=r(jwt,"xlm-roberta"),jwt.forEach(t),v2o=r(WIe," \u2014 "),sj=n(WIe,"A",{href:!0});var Dwt=s(sj);b2o=r(Dwt,"XLMRobertaConfig"),Dwt.forEach(t),F2o=r(WIe," (XLM-RoBERTa model)"),WIe.forEach(t),T2o=i(L),lu=n(L,"LI",{});var UIe=s(lu);Lge=n(UIe,"STRONG",{});var Gwt=s(Lge);M2o=r(Gwt,"xlm-roberta-xl"),Gwt.forEach(t),E2o=r(UIe," \u2014 "),lj=n(UIe,"A",{href:!0});var Owt=s(lj);C2o=r(Owt,"XLMRobertaXLConfig"),Owt.forEach(t),w2o=r(UIe," (XLM-RoBERTa-XL model)"),UIe.forEach(t),A2o=i(L),iu=n(L,"LI",{});var HIe=s(iu);yge=n(HIe,"STRONG",{});var Vwt=s(yge);L2o=r(Vwt,"xlnet"),Vwt.forEach(t),y2o=r(HIe," \u2014 "),ij=n(HIe,"A",{href:!0});var Xwt=s(ij);x2o=r(Xwt,"XLNetConfig"),Xwt.forEach(t),$2o=r(HIe," (XLNet model)"),HIe.forEach(t),k2o=i(L),du=n(L,"LI",{});var JIe=s(du);xge=n(JIe,"STRONG",{});var zwt=s(xge);S2o=r(zwt,"yolos"),zwt.forEach(t),R2o=r(JIe," \u2014 "),dj=n(JIe,"A",{href:!0});var Qwt=s(dj);P2o=r(Qwt,"YolosConfig"),Qwt.forEach(t),B2o=r(JIe," (YOLOS model)"),JIe.forEach(t),I2o=i(L),cu=n(L,"LI",{});var YIe=s(cu);$ge=n(YIe,"STRONG",{});var Wwt=s($ge);N2o=r(Wwt,"yoso"),Wwt.forEach(t),q2o=r(YIe," \u2014 "),cj=n(YIe,"A",{href:!0});var Uwt=s(cj);j2o=r(Uwt,"YosoConfig"),Uwt.forEach(t),D2o=r(YIe," (YOSO model)"),YIe.forEach(t),L.forEach(t),G2o=i(_t),T(fu.$$.fragment,_t),_t.forEach(t),O2o=i(pt),mu=n(pt,"DIV",{class:!0});var Sto=s(mu);T(Bx.$$.fragment,Sto),V2o=i(Sto),kge=n(Sto,"P",{});var Hwt=s(kge);X2o=r(Hwt,"Register a new configuration for this class."),Hwt.forEach(t),Sto.forEach(t),pt.forEach(t),Eoo=i(f),bd=n(f,"H2",{class:!0});var Rto=s(bd);gu=n(Rto,"A",{id:!0,class:!0,href:!0});var Jwt=s(gu);Sge=n(Jwt,"SPAN",{});var Ywt=s(Sge);T(Ix.$$.fragment,Ywt),Ywt.forEach(t),Jwt.forEach(t),z2o=i(Rto),Rge=n(Rto,"SPAN",{});var Zwt=s(Rge);Q2o=r(Zwt,"AutoTokenizer"),Zwt.forEach(t),Rto.forEach(t),Coo=i(f),So=n(f,"DIV",{class:!0});var Ll=s(So);T(Nx.$$.fragment,Ll),W2o=i(Ll),qx=n(Ll,"P",{});var Pto=s(qx);U2o=r(Pto,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),fj=n(Pto,"A",{href:!0});var Kwt=s(fj);H2o=r(Kwt,"AutoTokenizer.from_pretrained()"),Kwt.forEach(t),J2o=r(Pto," class method."),Pto.forEach(t),Y2o=i(Ll),jx=n(Ll,"P",{});var Bto=s(jx);Z2o=r(Bto,"This class cannot be instantiated directly using "),Pge=n(Bto,"CODE",{});var eAt=s(Pge);K2o=r(eAt,"__init__()"),eAt.forEach(t),evo=r(Bto," (throws an error)."),Bto.forEach(t),ovo=i(Ll),Nr=n(Ll,"DIV",{class:!0});var yl=s(Nr);T(Dx.$$.fragment,yl),rvo=i(yl),Bge=n(yl,"P",{});var oAt=s(Bge);tvo=r(oAt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),oAt.forEach(t),avo=i(yl),Za=n(yl,"P",{});var vy=s(Za);nvo=r(vy,"The tokenizer class to instantiate is selected based on the "),Ige=n(vy,"CODE",{});var rAt=s(Ige);svo=r(rAt,"model_type"),rAt.forEach(t),lvo=r(vy,` property of the config object (either
passed as an argument or loaded from `),Nge=n(vy,"CODE",{});var tAt=s(Nge);ivo=r(tAt,"pretrained_model_name_or_path"),tAt.forEach(t),dvo=r(vy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qge=n(vy,"CODE",{});var aAt=s(qge);cvo=r(aAt,"pretrained_model_name_or_path"),aAt.forEach(t),fvo=r(vy,":"),vy.forEach(t),mvo=i(yl),k=n(yl,"UL",{});var S=s(k);cs=n(S,"LI",{});var pB=s(cs);jge=n(pB,"STRONG",{});var nAt=s(jge);gvo=r(nAt,"albert"),nAt.forEach(t),hvo=r(pB," \u2014 "),mj=n(pB,"A",{href:!0});var sAt=s(mj);uvo=r(sAt,"AlbertTokenizer"),sAt.forEach(t),pvo=r(pB," or "),gj=n(pB,"A",{href:!0});var lAt=s(gj);_vo=r(lAt,"AlbertTokenizerFast"),lAt.forEach(t),vvo=r(pB," (ALBERT model)"),pB.forEach(t),bvo=i(S),fs=n(S,"LI",{});var _B=s(fs);Dge=n(_B,"STRONG",{});var iAt=s(Dge);Fvo=r(iAt,"bart"),iAt.forEach(t),Tvo=r(_B," \u2014 "),hj=n(_B,"A",{href:!0});var dAt=s(hj);Mvo=r(dAt,"BartTokenizer"),dAt.forEach(t),Evo=r(_B," or "),uj=n(_B,"A",{href:!0});var cAt=s(uj);Cvo=r(cAt,"BartTokenizerFast"),cAt.forEach(t),wvo=r(_B," (BART model)"),_B.forEach(t),Avo=i(S),ms=n(S,"LI",{});var vB=s(ms);Gge=n(vB,"STRONG",{});var fAt=s(Gge);Lvo=r(fAt,"barthez"),fAt.forEach(t),yvo=r(vB," \u2014 "),pj=n(vB,"A",{href:!0});var mAt=s(pj);xvo=r(mAt,"BarthezTokenizer"),mAt.forEach(t),$vo=r(vB," or "),_j=n(vB,"A",{href:!0});var gAt=s(_j);kvo=r(gAt,"BarthezTokenizerFast"),gAt.forEach(t),Svo=r(vB," (BARThez model)"),vB.forEach(t),Rvo=i(S),hu=n(S,"LI",{});var ZIe=s(hu);Oge=n(ZIe,"STRONG",{});var hAt=s(Oge);Pvo=r(hAt,"bartpho"),hAt.forEach(t),Bvo=r(ZIe," \u2014 "),vj=n(ZIe,"A",{href:!0});var uAt=s(vj);Ivo=r(uAt,"BartphoTokenizer"),uAt.forEach(t),Nvo=r(ZIe," (BARTpho model)"),ZIe.forEach(t),qvo=i(S),gs=n(S,"LI",{});var bB=s(gs);Vge=n(bB,"STRONG",{});var pAt=s(Vge);jvo=r(pAt,"bert"),pAt.forEach(t),Dvo=r(bB," \u2014 "),bj=n(bB,"A",{href:!0});var _At=s(bj);Gvo=r(_At,"BertTokenizer"),_At.forEach(t),Ovo=r(bB," or "),Fj=n(bB,"A",{href:!0});var vAt=s(Fj);Vvo=r(vAt,"BertTokenizerFast"),vAt.forEach(t),Xvo=r(bB," (BERT model)"),bB.forEach(t),zvo=i(S),uu=n(S,"LI",{});var KIe=s(uu);Xge=n(KIe,"STRONG",{});var bAt=s(Xge);Qvo=r(bAt,"bert-generation"),bAt.forEach(t),Wvo=r(KIe," \u2014 "),Tj=n(KIe,"A",{href:!0});var FAt=s(Tj);Uvo=r(FAt,"BertGenerationTokenizer"),FAt.forEach(t),Hvo=r(KIe," (Bert Generation model)"),KIe.forEach(t),Jvo=i(S),pu=n(S,"LI",{});var eNe=s(pu);zge=n(eNe,"STRONG",{});var TAt=s(zge);Yvo=r(TAt,"bert-japanese"),TAt.forEach(t),Zvo=r(eNe," \u2014 "),Mj=n(eNe,"A",{href:!0});var MAt=s(Mj);Kvo=r(MAt,"BertJapaneseTokenizer"),MAt.forEach(t),e4o=r(eNe," (BertJapanese model)"),eNe.forEach(t),o4o=i(S),_u=n(S,"LI",{});var oNe=s(_u);Qge=n(oNe,"STRONG",{});var EAt=s(Qge);r4o=r(EAt,"bertweet"),EAt.forEach(t),t4o=r(oNe," \u2014 "),Ej=n(oNe,"A",{href:!0});var CAt=s(Ej);a4o=r(CAt,"BertweetTokenizer"),CAt.forEach(t),n4o=r(oNe," (BERTweet model)"),oNe.forEach(t),s4o=i(S),hs=n(S,"LI",{});var FB=s(hs);Wge=n(FB,"STRONG",{});var wAt=s(Wge);l4o=r(wAt,"big_bird"),wAt.forEach(t),i4o=r(FB," \u2014 "),Cj=n(FB,"A",{href:!0});var AAt=s(Cj);d4o=r(AAt,"BigBirdTokenizer"),AAt.forEach(t),c4o=r(FB," or "),wj=n(FB,"A",{href:!0});var LAt=s(wj);f4o=r(LAt,"BigBirdTokenizerFast"),LAt.forEach(t),m4o=r(FB," (BigBird model)"),FB.forEach(t),g4o=i(S),us=n(S,"LI",{});var TB=s(us);Uge=n(TB,"STRONG",{});var yAt=s(Uge);h4o=r(yAt,"bigbird_pegasus"),yAt.forEach(t),u4o=r(TB," \u2014 "),Aj=n(TB,"A",{href:!0});var xAt=s(Aj);p4o=r(xAt,"PegasusTokenizer"),xAt.forEach(t),_4o=r(TB," or "),Lj=n(TB,"A",{href:!0});var $At=s(Lj);v4o=r($At,"PegasusTokenizerFast"),$At.forEach(t),b4o=r(TB," (BigBird-Pegasus model)"),TB.forEach(t),F4o=i(S),ps=n(S,"LI",{});var MB=s(ps);Hge=n(MB,"STRONG",{});var kAt=s(Hge);T4o=r(kAt,"blenderbot"),kAt.forEach(t),M4o=r(MB," \u2014 "),yj=n(MB,"A",{href:!0});var SAt=s(yj);E4o=r(SAt,"BlenderbotTokenizer"),SAt.forEach(t),C4o=r(MB," or "),xj=n(MB,"A",{href:!0});var RAt=s(xj);w4o=r(RAt,"BlenderbotTokenizerFast"),RAt.forEach(t),A4o=r(MB," (Blenderbot model)"),MB.forEach(t),L4o=i(S),vu=n(S,"LI",{});var rNe=s(vu);Jge=n(rNe,"STRONG",{});var PAt=s(Jge);y4o=r(PAt,"blenderbot-small"),PAt.forEach(t),x4o=r(rNe," \u2014 "),$j=n(rNe,"A",{href:!0});var BAt=s($j);$4o=r(BAt,"BlenderbotSmallTokenizer"),BAt.forEach(t),k4o=r(rNe," (BlenderbotSmall model)"),rNe.forEach(t),S4o=i(S),bu=n(S,"LI",{});var tNe=s(bu);Yge=n(tNe,"STRONG",{});var IAt=s(Yge);R4o=r(IAt,"bloom"),IAt.forEach(t),P4o=r(tNe," \u2014 "),kj=n(tNe,"A",{href:!0});var NAt=s(kj);B4o=r(NAt,"BloomTokenizerFast"),NAt.forEach(t),I4o=r(tNe," (BLOOM model)"),tNe.forEach(t),N4o=i(S),Fu=n(S,"LI",{});var aNe=s(Fu);Zge=n(aNe,"STRONG",{});var qAt=s(Zge);q4o=r(qAt,"byt5"),qAt.forEach(t),j4o=r(aNe," \u2014 "),Sj=n(aNe,"A",{href:!0});var jAt=s(Sj);D4o=r(jAt,"ByT5Tokenizer"),jAt.forEach(t),G4o=r(aNe," (ByT5 model)"),aNe.forEach(t),O4o=i(S),_s=n(S,"LI",{});var EB=s(_s);Kge=n(EB,"STRONG",{});var DAt=s(Kge);V4o=r(DAt,"camembert"),DAt.forEach(t),X4o=r(EB," \u2014 "),Rj=n(EB,"A",{href:!0});var GAt=s(Rj);z4o=r(GAt,"CamembertTokenizer"),GAt.forEach(t),Q4o=r(EB," or "),Pj=n(EB,"A",{href:!0});var OAt=s(Pj);W4o=r(OAt,"CamembertTokenizerFast"),OAt.forEach(t),U4o=r(EB," (CamemBERT model)"),EB.forEach(t),H4o=i(S),Tu=n(S,"LI",{});var nNe=s(Tu);ehe=n(nNe,"STRONG",{});var VAt=s(ehe);J4o=r(VAt,"canine"),VAt.forEach(t),Y4o=r(nNe," \u2014 "),Bj=n(nNe,"A",{href:!0});var XAt=s(Bj);Z4o=r(XAt,"CanineTokenizer"),XAt.forEach(t),K4o=r(nNe," (CANINE model)"),nNe.forEach(t),e1o=i(S),vs=n(S,"LI",{});var CB=s(vs);ohe=n(CB,"STRONG",{});var zAt=s(ohe);o1o=r(zAt,"clip"),zAt.forEach(t),r1o=r(CB," \u2014 "),Ij=n(CB,"A",{href:!0});var QAt=s(Ij);t1o=r(QAt,"CLIPTokenizer"),QAt.forEach(t),a1o=r(CB," or "),Nj=n(CB,"A",{href:!0});var WAt=s(Nj);n1o=r(WAt,"CLIPTokenizerFast"),WAt.forEach(t),s1o=r(CB," (CLIP model)"),CB.forEach(t),l1o=i(S),bs=n(S,"LI",{});var wB=s(bs);rhe=n(wB,"STRONG",{});var UAt=s(rhe);i1o=r(UAt,"codegen"),UAt.forEach(t),d1o=r(wB," \u2014 "),qj=n(wB,"A",{href:!0});var HAt=s(qj);c1o=r(HAt,"CodeGenTokenizer"),HAt.forEach(t),f1o=r(wB," or "),jj=n(wB,"A",{href:!0});var JAt=s(jj);m1o=r(JAt,"CodeGenTokenizerFast"),JAt.forEach(t),g1o=r(wB," (CodeGen model)"),wB.forEach(t),h1o=i(S),Fs=n(S,"LI",{});var AB=s(Fs);the=n(AB,"STRONG",{});var YAt=s(the);u1o=r(YAt,"convbert"),YAt.forEach(t),p1o=r(AB," \u2014 "),Dj=n(AB,"A",{href:!0});var ZAt=s(Dj);_1o=r(ZAt,"ConvBertTokenizer"),ZAt.forEach(t),v1o=r(AB," or "),Gj=n(AB,"A",{href:!0});var KAt=s(Gj);b1o=r(KAt,"ConvBertTokenizerFast"),KAt.forEach(t),F1o=r(AB," (ConvBERT model)"),AB.forEach(t),T1o=i(S),Ts=n(S,"LI",{});var LB=s(Ts);ahe=n(LB,"STRONG",{});var e6t=s(ahe);M1o=r(e6t,"cpm"),e6t.forEach(t),E1o=r(LB," \u2014 "),Oj=n(LB,"A",{href:!0});var o6t=s(Oj);C1o=r(o6t,"CpmTokenizer"),o6t.forEach(t),w1o=r(LB," or "),Vj=n(LB,"A",{href:!0});var r6t=s(Vj);A1o=r(r6t,"CpmTokenizerFast"),r6t.forEach(t),L1o=r(LB," (CPM model)"),LB.forEach(t),y1o=i(S),Mu=n(S,"LI",{});var sNe=s(Mu);nhe=n(sNe,"STRONG",{});var t6t=s(nhe);x1o=r(t6t,"ctrl"),t6t.forEach(t),$1o=r(sNe," \u2014 "),Xj=n(sNe,"A",{href:!0});var a6t=s(Xj);k1o=r(a6t,"CTRLTokenizer"),a6t.forEach(t),S1o=r(sNe," (CTRL model)"),sNe.forEach(t),R1o=i(S),Ms=n(S,"LI",{});var yB=s(Ms);she=n(yB,"STRONG",{});var n6t=s(she);P1o=r(n6t,"data2vec-text"),n6t.forEach(t),B1o=r(yB," \u2014 "),zj=n(yB,"A",{href:!0});var s6t=s(zj);I1o=r(s6t,"RobertaTokenizer"),s6t.forEach(t),N1o=r(yB," or "),Qj=n(yB,"A",{href:!0});var l6t=s(Qj);q1o=r(l6t,"RobertaTokenizerFast"),l6t.forEach(t),j1o=r(yB," (Data2VecText model)"),yB.forEach(t),D1o=i(S),Es=n(S,"LI",{});var xB=s(Es);lhe=n(xB,"STRONG",{});var i6t=s(lhe);G1o=r(i6t,"deberta"),i6t.forEach(t),O1o=r(xB," \u2014 "),Wj=n(xB,"A",{href:!0});var d6t=s(Wj);V1o=r(d6t,"DebertaTokenizer"),d6t.forEach(t),X1o=r(xB," or "),Uj=n(xB,"A",{href:!0});var c6t=s(Uj);z1o=r(c6t,"DebertaTokenizerFast"),c6t.forEach(t),Q1o=r(xB," (DeBERTa model)"),xB.forEach(t),W1o=i(S),Cs=n(S,"LI",{});var $B=s(Cs);ihe=n($B,"STRONG",{});var f6t=s(ihe);U1o=r(f6t,"deberta-v2"),f6t.forEach(t),H1o=r($B," \u2014 "),Hj=n($B,"A",{href:!0});var m6t=s(Hj);J1o=r(m6t,"DebertaV2Tokenizer"),m6t.forEach(t),Y1o=r($B," or "),Jj=n($B,"A",{href:!0});var g6t=s(Jj);Z1o=r(g6t,"DebertaV2TokenizerFast"),g6t.forEach(t),K1o=r($B," (DeBERTa-v2 model)"),$B.forEach(t),ebo=i(S),ws=n(S,"LI",{});var kB=s(ws);dhe=n(kB,"STRONG",{});var h6t=s(dhe);obo=r(h6t,"distilbert"),h6t.forEach(t),rbo=r(kB," \u2014 "),Yj=n(kB,"A",{href:!0});var u6t=s(Yj);tbo=r(u6t,"DistilBertTokenizer"),u6t.forEach(t),abo=r(kB," or "),Zj=n(kB,"A",{href:!0});var p6t=s(Zj);nbo=r(p6t,"DistilBertTokenizerFast"),p6t.forEach(t),sbo=r(kB," (DistilBERT model)"),kB.forEach(t),lbo=i(S),As=n(S,"LI",{});var SB=s(As);che=n(SB,"STRONG",{});var _6t=s(che);ibo=r(_6t,"dpr"),_6t.forEach(t),dbo=r(SB," \u2014 "),Kj=n(SB,"A",{href:!0});var v6t=s(Kj);cbo=r(v6t,"DPRQuestionEncoderTokenizer"),v6t.forEach(t),fbo=r(SB," or "),eD=n(SB,"A",{href:!0});var b6t=s(eD);mbo=r(b6t,"DPRQuestionEncoderTokenizerFast"),b6t.forEach(t),gbo=r(SB," (DPR model)"),SB.forEach(t),hbo=i(S),Ls=n(S,"LI",{});var RB=s(Ls);fhe=n(RB,"STRONG",{});var F6t=s(fhe);ubo=r(F6t,"electra"),F6t.forEach(t),pbo=r(RB," \u2014 "),oD=n(RB,"A",{href:!0});var T6t=s(oD);_bo=r(T6t,"ElectraTokenizer"),T6t.forEach(t),vbo=r(RB," or "),rD=n(RB,"A",{href:!0});var M6t=s(rD);bbo=r(M6t,"ElectraTokenizerFast"),M6t.forEach(t),Fbo=r(RB," (ELECTRA model)"),RB.forEach(t),Tbo=i(S),ys=n(S,"LI",{});var PB=s(ys);mhe=n(PB,"STRONG",{});var E6t=s(mhe);Mbo=r(E6t,"ernie"),E6t.forEach(t),Ebo=r(PB," \u2014 "),tD=n(PB,"A",{href:!0});var C6t=s(tD);Cbo=r(C6t,"BertTokenizer"),C6t.forEach(t),wbo=r(PB," or "),aD=n(PB,"A",{href:!0});var w6t=s(aD);Abo=r(w6t,"BertTokenizerFast"),w6t.forEach(t),Lbo=r(PB," (ERNIE model)"),PB.forEach(t),ybo=i(S),Eu=n(S,"LI",{});var lNe=s(Eu);ghe=n(lNe,"STRONG",{});var A6t=s(ghe);xbo=r(A6t,"flaubert"),A6t.forEach(t),$bo=r(lNe," \u2014 "),nD=n(lNe,"A",{href:!0});var L6t=s(nD);kbo=r(L6t,"FlaubertTokenizer"),L6t.forEach(t),Sbo=r(lNe," (FlauBERT model)"),lNe.forEach(t),Rbo=i(S),xs=n(S,"LI",{});var BB=s(xs);hhe=n(BB,"STRONG",{});var y6t=s(hhe);Pbo=r(y6t,"fnet"),y6t.forEach(t),Bbo=r(BB," \u2014 "),sD=n(BB,"A",{href:!0});var x6t=s(sD);Ibo=r(x6t,"FNetTokenizer"),x6t.forEach(t),Nbo=r(BB," or "),lD=n(BB,"A",{href:!0});var $6t=s(lD);qbo=r($6t,"FNetTokenizerFast"),$6t.forEach(t),jbo=r(BB," (FNet model)"),BB.forEach(t),Dbo=i(S),Cu=n(S,"LI",{});var iNe=s(Cu);uhe=n(iNe,"STRONG",{});var k6t=s(uhe);Gbo=r(k6t,"fsmt"),k6t.forEach(t),Obo=r(iNe," \u2014 "),iD=n(iNe,"A",{href:!0});var S6t=s(iD);Vbo=r(S6t,"FSMTTokenizer"),S6t.forEach(t),Xbo=r(iNe," (FairSeq Machine-Translation model)"),iNe.forEach(t),zbo=i(S),$s=n(S,"LI",{});var IB=s($s);phe=n(IB,"STRONG",{});var R6t=s(phe);Qbo=r(R6t,"funnel"),R6t.forEach(t),Wbo=r(IB," \u2014 "),dD=n(IB,"A",{href:!0});var P6t=s(dD);Ubo=r(P6t,"FunnelTokenizer"),P6t.forEach(t),Hbo=r(IB," or "),cD=n(IB,"A",{href:!0});var B6t=s(cD);Jbo=r(B6t,"FunnelTokenizerFast"),B6t.forEach(t),Ybo=r(IB," (Funnel Transformer model)"),IB.forEach(t),Zbo=i(S),ks=n(S,"LI",{});var NB=s(ks);_he=n(NB,"STRONG",{});var I6t=s(_he);Kbo=r(I6t,"gpt2"),I6t.forEach(t),e3o=r(NB," \u2014 "),fD=n(NB,"A",{href:!0});var N6t=s(fD);o3o=r(N6t,"GPT2Tokenizer"),N6t.forEach(t),r3o=r(NB," or "),mD=n(NB,"A",{href:!0});var q6t=s(mD);t3o=r(q6t,"GPT2TokenizerFast"),q6t.forEach(t),a3o=r(NB," (OpenAI GPT-2 model)"),NB.forEach(t),n3o=i(S),Ss=n(S,"LI",{});var qB=s(Ss);vhe=n(qB,"STRONG",{});var j6t=s(vhe);s3o=r(j6t,"gpt_neo"),j6t.forEach(t),l3o=r(qB," \u2014 "),gD=n(qB,"A",{href:!0});var D6t=s(gD);i3o=r(D6t,"GPT2Tokenizer"),D6t.forEach(t),d3o=r(qB," or "),hD=n(qB,"A",{href:!0});var G6t=s(hD);c3o=r(G6t,"GPT2TokenizerFast"),G6t.forEach(t),f3o=r(qB," (GPT Neo model)"),qB.forEach(t),m3o=i(S),wu=n(S,"LI",{});var dNe=s(wu);bhe=n(dNe,"STRONG",{});var O6t=s(bhe);g3o=r(O6t,"gpt_neox"),O6t.forEach(t),h3o=r(dNe," \u2014 "),uD=n(dNe,"A",{href:!0});var V6t=s(uD);u3o=r(V6t,"GPTNeoXTokenizerFast"),V6t.forEach(t),p3o=r(dNe," (GPT NeoX model)"),dNe.forEach(t),_3o=i(S),Au=n(S,"LI",{});var cNe=s(Au);Fhe=n(cNe,"STRONG",{});var X6t=s(Fhe);v3o=r(X6t,"gpt_neox_japanese"),X6t.forEach(t),b3o=r(cNe," \u2014 "),pD=n(cNe,"A",{href:!0});var z6t=s(pD);F3o=r(z6t,"GPTNeoXJapaneseTokenizer"),z6t.forEach(t),T3o=r(cNe," (GPT NeoX Japanese model)"),cNe.forEach(t),M3o=i(S),Rs=n(S,"LI",{});var jB=s(Rs);The=n(jB,"STRONG",{});var Q6t=s(The);E3o=r(Q6t,"gptj"),Q6t.forEach(t),C3o=r(jB," \u2014 "),_D=n(jB,"A",{href:!0});var W6t=s(_D);w3o=r(W6t,"GPT2Tokenizer"),W6t.forEach(t),A3o=r(jB," or "),vD=n(jB,"A",{href:!0});var U6t=s(vD);L3o=r(U6t,"GPT2TokenizerFast"),U6t.forEach(t),y3o=r(jB," (GPT-J model)"),jB.forEach(t),x3o=i(S),Ps=n(S,"LI",{});var DB=s(Ps);Mhe=n(DB,"STRONG",{});var H6t=s(Mhe);$3o=r(H6t,"groupvit"),H6t.forEach(t),k3o=r(DB," \u2014 "),bD=n(DB,"A",{href:!0});var J6t=s(bD);S3o=r(J6t,"CLIPTokenizer"),J6t.forEach(t),R3o=r(DB," or "),FD=n(DB,"A",{href:!0});var Y6t=s(FD);P3o=r(Y6t,"CLIPTokenizerFast"),Y6t.forEach(t),B3o=r(DB," (GroupViT model)"),DB.forEach(t),I3o=i(S),Bs=n(S,"LI",{});var GB=s(Bs);Ehe=n(GB,"STRONG",{});var Z6t=s(Ehe);N3o=r(Z6t,"herbert"),Z6t.forEach(t),q3o=r(GB," \u2014 "),TD=n(GB,"A",{href:!0});var K6t=s(TD);j3o=r(K6t,"HerbertTokenizer"),K6t.forEach(t),D3o=r(GB," or "),MD=n(GB,"A",{href:!0});var e7t=s(MD);G3o=r(e7t,"HerbertTokenizerFast"),e7t.forEach(t),O3o=r(GB," (HerBERT model)"),GB.forEach(t),V3o=i(S),Lu=n(S,"LI",{});var fNe=s(Lu);Che=n(fNe,"STRONG",{});var o7t=s(Che);X3o=r(o7t,"hubert"),o7t.forEach(t),z3o=r(fNe," \u2014 "),ED=n(fNe,"A",{href:!0});var r7t=s(ED);Q3o=r(r7t,"Wav2Vec2CTCTokenizer"),r7t.forEach(t),W3o=r(fNe," (Hubert model)"),fNe.forEach(t),U3o=i(S),Is=n(S,"LI",{});var OB=s(Is);whe=n(OB,"STRONG",{});var t7t=s(whe);H3o=r(t7t,"ibert"),t7t.forEach(t),J3o=r(OB," \u2014 "),CD=n(OB,"A",{href:!0});var a7t=s(CD);Y3o=r(a7t,"RobertaTokenizer"),a7t.forEach(t),Z3o=r(OB," or "),wD=n(OB,"A",{href:!0});var n7t=s(wD);K3o=r(n7t,"RobertaTokenizerFast"),n7t.forEach(t),e0o=r(OB," (I-BERT model)"),OB.forEach(t),o0o=i(S),Ns=n(S,"LI",{});var VB=s(Ns);Ahe=n(VB,"STRONG",{});var s7t=s(Ahe);r0o=r(s7t,"layoutlm"),s7t.forEach(t),t0o=r(VB," \u2014 "),AD=n(VB,"A",{href:!0});var l7t=s(AD);a0o=r(l7t,"LayoutLMTokenizer"),l7t.forEach(t),n0o=r(VB," or "),LD=n(VB,"A",{href:!0});var i7t=s(LD);s0o=r(i7t,"LayoutLMTokenizerFast"),i7t.forEach(t),l0o=r(VB," (LayoutLM model)"),VB.forEach(t),i0o=i(S),qs=n(S,"LI",{});var XB=s(qs);Lhe=n(XB,"STRONG",{});var d7t=s(Lhe);d0o=r(d7t,"layoutlmv2"),d7t.forEach(t),c0o=r(XB," \u2014 "),yD=n(XB,"A",{href:!0});var c7t=s(yD);f0o=r(c7t,"LayoutLMv2Tokenizer"),c7t.forEach(t),m0o=r(XB," or "),xD=n(XB,"A",{href:!0});var f7t=s(xD);g0o=r(f7t,"LayoutLMv2TokenizerFast"),f7t.forEach(t),h0o=r(XB," (LayoutLMv2 model)"),XB.forEach(t),u0o=i(S),js=n(S,"LI",{});var zB=s(js);yhe=n(zB,"STRONG",{});var m7t=s(yhe);p0o=r(m7t,"layoutlmv3"),m7t.forEach(t),_0o=r(zB," \u2014 "),$D=n(zB,"A",{href:!0});var g7t=s($D);v0o=r(g7t,"LayoutLMv3Tokenizer"),g7t.forEach(t),b0o=r(zB," or "),kD=n(zB,"A",{href:!0});var h7t=s(kD);F0o=r(h7t,"LayoutLMv3TokenizerFast"),h7t.forEach(t),T0o=r(zB," (LayoutLMv3 model)"),zB.forEach(t),M0o=i(S),Ds=n(S,"LI",{});var QB=s(Ds);xhe=n(QB,"STRONG",{});var u7t=s(xhe);E0o=r(u7t,"layoutxlm"),u7t.forEach(t),C0o=r(QB," \u2014 "),SD=n(QB,"A",{href:!0});var p7t=s(SD);w0o=r(p7t,"LayoutXLMTokenizer"),p7t.forEach(t),A0o=r(QB," or "),RD=n(QB,"A",{href:!0});var _7t=s(RD);L0o=r(_7t,"LayoutXLMTokenizerFast"),_7t.forEach(t),y0o=r(QB," (LayoutXLM model)"),QB.forEach(t),x0o=i(S),Gs=n(S,"LI",{});var WB=s(Gs);$he=n(WB,"STRONG",{});var v7t=s($he);$0o=r(v7t,"led"),v7t.forEach(t),k0o=r(WB," \u2014 "),PD=n(WB,"A",{href:!0});var b7t=s(PD);S0o=r(b7t,"LEDTokenizer"),b7t.forEach(t),R0o=r(WB," or "),BD=n(WB,"A",{href:!0});var F7t=s(BD);P0o=r(F7t,"LEDTokenizerFast"),F7t.forEach(t),B0o=r(WB," (LED model)"),WB.forEach(t),I0o=i(S),Os=n(S,"LI",{});var UB=s(Os);khe=n(UB,"STRONG",{});var T7t=s(khe);N0o=r(T7t,"longformer"),T7t.forEach(t),q0o=r(UB," \u2014 "),ID=n(UB,"A",{href:!0});var M7t=s(ID);j0o=r(M7t,"LongformerTokenizer"),M7t.forEach(t),D0o=r(UB," or "),ND=n(UB,"A",{href:!0});var E7t=s(ND);G0o=r(E7t,"LongformerTokenizerFast"),E7t.forEach(t),O0o=r(UB," (Longformer model)"),UB.forEach(t),V0o=i(S),Vs=n(S,"LI",{});var HB=s(Vs);She=n(HB,"STRONG",{});var C7t=s(She);X0o=r(C7t,"longt5"),C7t.forEach(t),z0o=r(HB," \u2014 "),qD=n(HB,"A",{href:!0});var w7t=s(qD);Q0o=r(w7t,"T5Tokenizer"),w7t.forEach(t),W0o=r(HB," or "),jD=n(HB,"A",{href:!0});var A7t=s(jD);U0o=r(A7t,"T5TokenizerFast"),A7t.forEach(t),H0o=r(HB," (LongT5 model)"),HB.forEach(t),J0o=i(S),yu=n(S,"LI",{});var mNe=s(yu);Rhe=n(mNe,"STRONG",{});var L7t=s(Rhe);Y0o=r(L7t,"luke"),L7t.forEach(t),Z0o=r(mNe," \u2014 "),DD=n(mNe,"A",{href:!0});var y7t=s(DD);K0o=r(y7t,"LukeTokenizer"),y7t.forEach(t),eFo=r(mNe," (LUKE model)"),mNe.forEach(t),oFo=i(S),Xs=n(S,"LI",{});var JB=s(Xs);Phe=n(JB,"STRONG",{});var x7t=s(Phe);rFo=r(x7t,"lxmert"),x7t.forEach(t),tFo=r(JB," \u2014 "),GD=n(JB,"A",{href:!0});var $7t=s(GD);aFo=r($7t,"LxmertTokenizer"),$7t.forEach(t),nFo=r(JB," or "),OD=n(JB,"A",{href:!0});var k7t=s(OD);sFo=r(k7t,"LxmertTokenizerFast"),k7t.forEach(t),lFo=r(JB," (LXMERT model)"),JB.forEach(t),iFo=i(S),xu=n(S,"LI",{});var gNe=s(xu);Bhe=n(gNe,"STRONG",{});var S7t=s(Bhe);dFo=r(S7t,"m2m_100"),S7t.forEach(t),cFo=r(gNe," \u2014 "),VD=n(gNe,"A",{href:!0});var R7t=s(VD);fFo=r(R7t,"M2M100Tokenizer"),R7t.forEach(t),mFo=r(gNe," (M2M100 model)"),gNe.forEach(t),gFo=i(S),$u=n(S,"LI",{});var hNe=s($u);Ihe=n(hNe,"STRONG",{});var P7t=s(Ihe);hFo=r(P7t,"marian"),P7t.forEach(t),uFo=r(hNe," \u2014 "),XD=n(hNe,"A",{href:!0});var B7t=s(XD);pFo=r(B7t,"MarianTokenizer"),B7t.forEach(t),_Fo=r(hNe," (Marian model)"),hNe.forEach(t),vFo=i(S),zs=n(S,"LI",{});var YB=s(zs);Nhe=n(YB,"STRONG",{});var I7t=s(Nhe);bFo=r(I7t,"mbart"),I7t.forEach(t),FFo=r(YB," \u2014 "),zD=n(YB,"A",{href:!0});var N7t=s(zD);TFo=r(N7t,"MBartTokenizer"),N7t.forEach(t),MFo=r(YB," or "),QD=n(YB,"A",{href:!0});var q7t=s(QD);EFo=r(q7t,"MBartTokenizerFast"),q7t.forEach(t),CFo=r(YB," (mBART model)"),YB.forEach(t),wFo=i(S),Qs=n(S,"LI",{});var ZB=s(Qs);qhe=n(ZB,"STRONG",{});var j7t=s(qhe);AFo=r(j7t,"mbart50"),j7t.forEach(t),LFo=r(ZB," \u2014 "),WD=n(ZB,"A",{href:!0});var D7t=s(WD);yFo=r(D7t,"MBart50Tokenizer"),D7t.forEach(t),xFo=r(ZB," or "),UD=n(ZB,"A",{href:!0});var G7t=s(UD);$Fo=r(G7t,"MBart50TokenizerFast"),G7t.forEach(t),kFo=r(ZB," (mBART-50 model)"),ZB.forEach(t),SFo=i(S),Ws=n(S,"LI",{});var KB=s(Ws);jhe=n(KB,"STRONG",{});var O7t=s(jhe);RFo=r(O7t,"megatron-bert"),O7t.forEach(t),PFo=r(KB," \u2014 "),HD=n(KB,"A",{href:!0});var V7t=s(HD);BFo=r(V7t,"BertTokenizer"),V7t.forEach(t),IFo=r(KB," or "),JD=n(KB,"A",{href:!0});var X7t=s(JD);NFo=r(X7t,"BertTokenizerFast"),X7t.forEach(t),qFo=r(KB," (Megatron-BERT model)"),KB.forEach(t),jFo=i(S),ku=n(S,"LI",{});var uNe=s(ku);Dhe=n(uNe,"STRONG",{});var z7t=s(Dhe);DFo=r(z7t,"mluke"),z7t.forEach(t),GFo=r(uNe," \u2014 "),YD=n(uNe,"A",{href:!0});var Q7t=s(YD);OFo=r(Q7t,"MLukeTokenizer"),Q7t.forEach(t),VFo=r(uNe," (mLUKE model)"),uNe.forEach(t),XFo=i(S),Us=n(S,"LI",{});var eI=s(Us);Ghe=n(eI,"STRONG",{});var W7t=s(Ghe);zFo=r(W7t,"mobilebert"),W7t.forEach(t),QFo=r(eI," \u2014 "),ZD=n(eI,"A",{href:!0});var U7t=s(ZD);WFo=r(U7t,"MobileBertTokenizer"),U7t.forEach(t),UFo=r(eI," or "),KD=n(eI,"A",{href:!0});var H7t=s(KD);HFo=r(H7t,"MobileBertTokenizerFast"),H7t.forEach(t),JFo=r(eI," (MobileBERT model)"),eI.forEach(t),YFo=i(S),Hs=n(S,"LI",{});var oI=s(Hs);Ohe=n(oI,"STRONG",{});var J7t=s(Ohe);ZFo=r(J7t,"mpnet"),J7t.forEach(t),KFo=r(oI," \u2014 "),eG=n(oI,"A",{href:!0});var Y7t=s(eG);eTo=r(Y7t,"MPNetTokenizer"),Y7t.forEach(t),oTo=r(oI," or "),oG=n(oI,"A",{href:!0});var Z7t=s(oG);rTo=r(Z7t,"MPNetTokenizerFast"),Z7t.forEach(t),tTo=r(oI," (MPNet model)"),oI.forEach(t),aTo=i(S),Js=n(S,"LI",{});var rI=s(Js);Vhe=n(rI,"STRONG",{});var K7t=s(Vhe);nTo=r(K7t,"mt5"),K7t.forEach(t),sTo=r(rI," \u2014 "),rG=n(rI,"A",{href:!0});var eLt=s(rG);lTo=r(eLt,"MT5Tokenizer"),eLt.forEach(t),iTo=r(rI," or "),tG=n(rI,"A",{href:!0});var oLt=s(tG);dTo=r(oLt,"MT5TokenizerFast"),oLt.forEach(t),cTo=r(rI," (MT5 model)"),rI.forEach(t),fTo=i(S),Ys=n(S,"LI",{});var tI=s(Ys);Xhe=n(tI,"STRONG",{});var rLt=s(Xhe);mTo=r(rLt,"mvp"),rLt.forEach(t),gTo=r(tI," \u2014 "),aG=n(tI,"A",{href:!0});var tLt=s(aG);hTo=r(tLt,"MvpTokenizer"),tLt.forEach(t),uTo=r(tI," or "),nG=n(tI,"A",{href:!0});var aLt=s(nG);pTo=r(aLt,"MvpTokenizerFast"),aLt.forEach(t),_To=r(tI," (MVP model)"),tI.forEach(t),vTo=i(S),Zs=n(S,"LI",{});var aI=s(Zs);zhe=n(aI,"STRONG",{});var nLt=s(zhe);bTo=r(nLt,"nezha"),nLt.forEach(t),FTo=r(aI," \u2014 "),sG=n(aI,"A",{href:!0});var sLt=s(sG);TTo=r(sLt,"BertTokenizer"),sLt.forEach(t),MTo=r(aI," or "),lG=n(aI,"A",{href:!0});var lLt=s(lG);ETo=r(lLt,"BertTokenizerFast"),lLt.forEach(t),CTo=r(aI," (Nezha model)"),aI.forEach(t),wTo=i(S),Ks=n(S,"LI",{});var nI=s(Ks);Qhe=n(nI,"STRONG",{});var iLt=s(Qhe);ATo=r(iLt,"nllb"),iLt.forEach(t),LTo=r(nI," \u2014 "),iG=n(nI,"A",{href:!0});var dLt=s(iG);yTo=r(dLt,"NllbTokenizer"),dLt.forEach(t),xTo=r(nI," or "),dG=n(nI,"A",{href:!0});var cLt=s(dG);$To=r(cLt,"NllbTokenizerFast"),cLt.forEach(t),kTo=r(nI," (NLLB model)"),nI.forEach(t),STo=i(S),el=n(S,"LI",{});var sI=s(el);Whe=n(sI,"STRONG",{});var fLt=s(Whe);RTo=r(fLt,"nystromformer"),fLt.forEach(t),PTo=r(sI," \u2014 "),cG=n(sI,"A",{href:!0});var mLt=s(cG);BTo=r(mLt,"AlbertTokenizer"),mLt.forEach(t),ITo=r(sI," or "),fG=n(sI,"A",{href:!0});var gLt=s(fG);NTo=r(gLt,"AlbertTokenizerFast"),gLt.forEach(t),qTo=r(sI," (Nystr\xF6mformer model)"),sI.forEach(t),jTo=i(S),ol=n(S,"LI",{});var lI=s(ol);Uhe=n(lI,"STRONG",{});var hLt=s(Uhe);DTo=r(hLt,"openai-gpt"),hLt.forEach(t),GTo=r(lI," \u2014 "),mG=n(lI,"A",{href:!0});var uLt=s(mG);OTo=r(uLt,"OpenAIGPTTokenizer"),uLt.forEach(t),VTo=r(lI," or "),gG=n(lI,"A",{href:!0});var pLt=s(gG);XTo=r(pLt,"OpenAIGPTTokenizerFast"),pLt.forEach(t),zTo=r(lI," (OpenAI GPT model)"),lI.forEach(t),QTo=i(S),Su=n(S,"LI",{});var pNe=s(Su);Hhe=n(pNe,"STRONG",{});var _Lt=s(Hhe);WTo=r(_Lt,"opt"),_Lt.forEach(t),UTo=r(pNe," \u2014 "),hG=n(pNe,"A",{href:!0});var vLt=s(hG);HTo=r(vLt,"GPT2Tokenizer"),vLt.forEach(t),JTo=r(pNe," (OPT model)"),pNe.forEach(t),YTo=i(S),rl=n(S,"LI",{});var iI=s(rl);Jhe=n(iI,"STRONG",{});var bLt=s(Jhe);ZTo=r(bLt,"owlvit"),bLt.forEach(t),KTo=r(iI," \u2014 "),uG=n(iI,"A",{href:!0});var FLt=s(uG);eMo=r(FLt,"CLIPTokenizer"),FLt.forEach(t),oMo=r(iI," or "),pG=n(iI,"A",{href:!0});var TLt=s(pG);rMo=r(TLt,"CLIPTokenizerFast"),TLt.forEach(t),tMo=r(iI," (OWL-ViT model)"),iI.forEach(t),aMo=i(S),tl=n(S,"LI",{});var dI=s(tl);Yhe=n(dI,"STRONG",{});var MLt=s(Yhe);nMo=r(MLt,"pegasus"),MLt.forEach(t),sMo=r(dI," \u2014 "),_G=n(dI,"A",{href:!0});var ELt=s(_G);lMo=r(ELt,"PegasusTokenizer"),ELt.forEach(t),iMo=r(dI," or "),vG=n(dI,"A",{href:!0});var CLt=s(vG);dMo=r(CLt,"PegasusTokenizerFast"),CLt.forEach(t),cMo=r(dI," (Pegasus model)"),dI.forEach(t),fMo=i(S),Ru=n(S,"LI",{});var _Ne=s(Ru);Zhe=n(_Ne,"STRONG",{});var wLt=s(Zhe);mMo=r(wLt,"perceiver"),wLt.forEach(t),gMo=r(_Ne," \u2014 "),bG=n(_Ne,"A",{href:!0});var ALt=s(bG);hMo=r(ALt,"PerceiverTokenizer"),ALt.forEach(t),uMo=r(_Ne," (Perceiver model)"),_Ne.forEach(t),pMo=i(S),Pu=n(S,"LI",{});var vNe=s(Pu);Khe=n(vNe,"STRONG",{});var LLt=s(Khe);_Mo=r(LLt,"phobert"),LLt.forEach(t),vMo=r(vNe," \u2014 "),FG=n(vNe,"A",{href:!0});var yLt=s(FG);bMo=r(yLt,"PhobertTokenizer"),yLt.forEach(t),FMo=r(vNe," (PhoBERT model)"),vNe.forEach(t),TMo=i(S),Bu=n(S,"LI",{});var bNe=s(Bu);eue=n(bNe,"STRONG",{});var xLt=s(eue);MMo=r(xLt,"plbart"),xLt.forEach(t),EMo=r(bNe," \u2014 "),TG=n(bNe,"A",{href:!0});var $Lt=s(TG);CMo=r($Lt,"PLBartTokenizer"),$Lt.forEach(t),wMo=r(bNe," (PLBart model)"),bNe.forEach(t),AMo=i(S),Iu=n(S,"LI",{});var FNe=s(Iu);oue=n(FNe,"STRONG",{});var kLt=s(oue);LMo=r(kLt,"prophetnet"),kLt.forEach(t),yMo=r(FNe," \u2014 "),MG=n(FNe,"A",{href:!0});var SLt=s(MG);xMo=r(SLt,"ProphetNetTokenizer"),SLt.forEach(t),$Mo=r(FNe," (ProphetNet model)"),FNe.forEach(t),kMo=i(S),al=n(S,"LI",{});var cI=s(al);rue=n(cI,"STRONG",{});var RLt=s(rue);SMo=r(RLt,"qdqbert"),RLt.forEach(t),RMo=r(cI," \u2014 "),EG=n(cI,"A",{href:!0});var PLt=s(EG);PMo=r(PLt,"BertTokenizer"),PLt.forEach(t),BMo=r(cI," or "),CG=n(cI,"A",{href:!0});var BLt=s(CG);IMo=r(BLt,"BertTokenizerFast"),BLt.forEach(t),NMo=r(cI," (QDQBert model)"),cI.forEach(t),qMo=i(S),Nu=n(S,"LI",{});var TNe=s(Nu);tue=n(TNe,"STRONG",{});var ILt=s(tue);jMo=r(ILt,"rag"),ILt.forEach(t),DMo=r(TNe," \u2014 "),wG=n(TNe,"A",{href:!0});var NLt=s(wG);GMo=r(NLt,"RagTokenizer"),NLt.forEach(t),OMo=r(TNe," (RAG model)"),TNe.forEach(t),VMo=i(S),nl=n(S,"LI",{});var fI=s(nl);aue=n(fI,"STRONG",{});var qLt=s(aue);XMo=r(qLt,"realm"),qLt.forEach(t),zMo=r(fI," \u2014 "),AG=n(fI,"A",{href:!0});var jLt=s(AG);QMo=r(jLt,"RealmTokenizer"),jLt.forEach(t),WMo=r(fI," or "),LG=n(fI,"A",{href:!0});var DLt=s(LG);UMo=r(DLt,"RealmTokenizerFast"),DLt.forEach(t),HMo=r(fI," (REALM model)"),fI.forEach(t),JMo=i(S),sl=n(S,"LI",{});var mI=s(sl);nue=n(mI,"STRONG",{});var GLt=s(nue);YMo=r(GLt,"reformer"),GLt.forEach(t),ZMo=r(mI," \u2014 "),yG=n(mI,"A",{href:!0});var OLt=s(yG);KMo=r(OLt,"ReformerTokenizer"),OLt.forEach(t),eEo=r(mI," or "),xG=n(mI,"A",{href:!0});var VLt=s(xG);oEo=r(VLt,"ReformerTokenizerFast"),VLt.forEach(t),rEo=r(mI," (Reformer model)"),mI.forEach(t),tEo=i(S),ll=n(S,"LI",{});var gI=s(ll);sue=n(gI,"STRONG",{});var XLt=s(sue);aEo=r(XLt,"rembert"),XLt.forEach(t),nEo=r(gI," \u2014 "),$G=n(gI,"A",{href:!0});var zLt=s($G);sEo=r(zLt,"RemBertTokenizer"),zLt.forEach(t),lEo=r(gI," or "),kG=n(gI,"A",{href:!0});var QLt=s(kG);iEo=r(QLt,"RemBertTokenizerFast"),QLt.forEach(t),dEo=r(gI," (RemBERT model)"),gI.forEach(t),cEo=i(S),il=n(S,"LI",{});var hI=s(il);lue=n(hI,"STRONG",{});var WLt=s(lue);fEo=r(WLt,"retribert"),WLt.forEach(t),mEo=r(hI," \u2014 "),SG=n(hI,"A",{href:!0});var ULt=s(SG);gEo=r(ULt,"RetriBertTokenizer"),ULt.forEach(t),hEo=r(hI," or "),RG=n(hI,"A",{href:!0});var HLt=s(RG);uEo=r(HLt,"RetriBertTokenizerFast"),HLt.forEach(t),pEo=r(hI," (RetriBERT model)"),hI.forEach(t),_Eo=i(S),dl=n(S,"LI",{});var uI=s(dl);iue=n(uI,"STRONG",{});var JLt=s(iue);vEo=r(JLt,"roberta"),JLt.forEach(t),bEo=r(uI," \u2014 "),PG=n(uI,"A",{href:!0});var YLt=s(PG);FEo=r(YLt,"RobertaTokenizer"),YLt.forEach(t),TEo=r(uI," or "),BG=n(uI,"A",{href:!0});var ZLt=s(BG);MEo=r(ZLt,"RobertaTokenizerFast"),ZLt.forEach(t),EEo=r(uI," (RoBERTa model)"),uI.forEach(t),CEo=i(S),cl=n(S,"LI",{});var pI=s(cl);due=n(pI,"STRONG",{});var KLt=s(due);wEo=r(KLt,"roformer"),KLt.forEach(t),AEo=r(pI," \u2014 "),IG=n(pI,"A",{href:!0});var e8t=s(IG);LEo=r(e8t,"RoFormerTokenizer"),e8t.forEach(t),yEo=r(pI," or "),NG=n(pI,"A",{href:!0});var o8t=s(NG);xEo=r(o8t,"RoFormerTokenizerFast"),o8t.forEach(t),$Eo=r(pI," (RoFormer model)"),pI.forEach(t),kEo=i(S),qu=n(S,"LI",{});var MNe=s(qu);cue=n(MNe,"STRONG",{});var r8t=s(cue);SEo=r(r8t,"speech_to_text"),r8t.forEach(t),REo=r(MNe," \u2014 "),qG=n(MNe,"A",{href:!0});var t8t=s(qG);PEo=r(t8t,"Speech2TextTokenizer"),t8t.forEach(t),BEo=r(MNe," (Speech2Text model)"),MNe.forEach(t),IEo=i(S),ju=n(S,"LI",{});var ENe=s(ju);fue=n(ENe,"STRONG",{});var a8t=s(fue);NEo=r(a8t,"speech_to_text_2"),a8t.forEach(t),qEo=r(ENe," \u2014 "),jG=n(ENe,"A",{href:!0});var n8t=s(jG);jEo=r(n8t,"Speech2Text2Tokenizer"),n8t.forEach(t),DEo=r(ENe," (Speech2Text2 model)"),ENe.forEach(t),GEo=i(S),fl=n(S,"LI",{});var _I=s(fl);mue=n(_I,"STRONG",{});var s8t=s(mue);OEo=r(s8t,"splinter"),s8t.forEach(t),VEo=r(_I," \u2014 "),DG=n(_I,"A",{href:!0});var l8t=s(DG);XEo=r(l8t,"SplinterTokenizer"),l8t.forEach(t),zEo=r(_I," or "),GG=n(_I,"A",{href:!0});var i8t=s(GG);QEo=r(i8t,"SplinterTokenizerFast"),i8t.forEach(t),WEo=r(_I," (Splinter model)"),_I.forEach(t),UEo=i(S),ml=n(S,"LI",{});var vI=s(ml);gue=n(vI,"STRONG",{});var d8t=s(gue);HEo=r(d8t,"squeezebert"),d8t.forEach(t),JEo=r(vI," \u2014 "),OG=n(vI,"A",{href:!0});var c8t=s(OG);YEo=r(c8t,"SqueezeBertTokenizer"),c8t.forEach(t),ZEo=r(vI," or "),VG=n(vI,"A",{href:!0});var f8t=s(VG);KEo=r(f8t,"SqueezeBertTokenizerFast"),f8t.forEach(t),eCo=r(vI," (SqueezeBERT model)"),vI.forEach(t),oCo=i(S),gl=n(S,"LI",{});var bI=s(gl);hue=n(bI,"STRONG",{});var m8t=s(hue);rCo=r(m8t,"t5"),m8t.forEach(t),tCo=r(bI," \u2014 "),XG=n(bI,"A",{href:!0});var g8t=s(XG);aCo=r(g8t,"T5Tokenizer"),g8t.forEach(t),nCo=r(bI," or "),zG=n(bI,"A",{href:!0});var h8t=s(zG);sCo=r(h8t,"T5TokenizerFast"),h8t.forEach(t),lCo=r(bI," (T5 model)"),bI.forEach(t),iCo=i(S),Du=n(S,"LI",{});var CNe=s(Du);uue=n(CNe,"STRONG",{});var u8t=s(uue);dCo=r(u8t,"tapas"),u8t.forEach(t),cCo=r(CNe," \u2014 "),QG=n(CNe,"A",{href:!0});var p8t=s(QG);fCo=r(p8t,"TapasTokenizer"),p8t.forEach(t),mCo=r(CNe," (TAPAS model)"),CNe.forEach(t),gCo=i(S),Gu=n(S,"LI",{});var wNe=s(Gu);pue=n(wNe,"STRONG",{});var _8t=s(pue);hCo=r(_8t,"tapex"),_8t.forEach(t),uCo=r(wNe," \u2014 "),WG=n(wNe,"A",{href:!0});var v8t=s(WG);pCo=r(v8t,"TapexTokenizer"),v8t.forEach(t),_Co=r(wNe," (TAPEX model)"),wNe.forEach(t),vCo=i(S),Ou=n(S,"LI",{});var ANe=s(Ou);_ue=n(ANe,"STRONG",{});var b8t=s(_ue);bCo=r(b8t,"transfo-xl"),b8t.forEach(t),FCo=r(ANe," \u2014 "),UG=n(ANe,"A",{href:!0});var F8t=s(UG);TCo=r(F8t,"TransfoXLTokenizer"),F8t.forEach(t),MCo=r(ANe," (Transformer-XL model)"),ANe.forEach(t),ECo=i(S),hl=n(S,"LI",{});var FI=s(hl);vue=n(FI,"STRONG",{});var T8t=s(vue);CCo=r(T8t,"vilt"),T8t.forEach(t),wCo=r(FI," \u2014 "),HG=n(FI,"A",{href:!0});var M8t=s(HG);ACo=r(M8t,"BertTokenizer"),M8t.forEach(t),LCo=r(FI," or "),JG=n(FI,"A",{href:!0});var E8t=s(JG);yCo=r(E8t,"BertTokenizerFast"),E8t.forEach(t),xCo=r(FI," (ViLT model)"),FI.forEach(t),$Co=i(S),ul=n(S,"LI",{});var TI=s(ul);bue=n(TI,"STRONG",{});var C8t=s(bue);kCo=r(C8t,"visual_bert"),C8t.forEach(t),SCo=r(TI," \u2014 "),YG=n(TI,"A",{href:!0});var w8t=s(YG);RCo=r(w8t,"BertTokenizer"),w8t.forEach(t),PCo=r(TI," or "),ZG=n(TI,"A",{href:!0});var A8t=s(ZG);BCo=r(A8t,"BertTokenizerFast"),A8t.forEach(t),ICo=r(TI," (VisualBERT model)"),TI.forEach(t),NCo=i(S),Vu=n(S,"LI",{});var LNe=s(Vu);Fue=n(LNe,"STRONG",{});var L8t=s(Fue);qCo=r(L8t,"wav2vec2"),L8t.forEach(t),jCo=r(LNe," \u2014 "),KG=n(LNe,"A",{href:!0});var y8t=s(KG);DCo=r(y8t,"Wav2Vec2CTCTokenizer"),y8t.forEach(t),GCo=r(LNe," (Wav2Vec2 model)"),LNe.forEach(t),OCo=i(S),Xu=n(S,"LI",{});var yNe=s(Xu);Tue=n(yNe,"STRONG",{});var x8t=s(Tue);VCo=r(x8t,"wav2vec2-conformer"),x8t.forEach(t),XCo=r(yNe," \u2014 "),eO=n(yNe,"A",{href:!0});var $8t=s(eO);zCo=r($8t,"Wav2Vec2CTCTokenizer"),$8t.forEach(t),QCo=r(yNe," (Wav2Vec2-Conformer model)"),yNe.forEach(t),WCo=i(S),zu=n(S,"LI",{});var xNe=s(zu);Mue=n(xNe,"STRONG",{});var k8t=s(Mue);UCo=r(k8t,"wav2vec2_phoneme"),k8t.forEach(t),HCo=r(xNe," \u2014 "),oO=n(xNe,"A",{href:!0});var S8t=s(oO);JCo=r(S8t,"Wav2Vec2PhonemeCTCTokenizer"),S8t.forEach(t),YCo=r(xNe," (Wav2Vec2Phoneme model)"),xNe.forEach(t),ZCo=i(S),Qu=n(S,"LI",{});var $Ne=s(Qu);Eue=n($Ne,"STRONG",{});var R8t=s(Eue);KCo=r(R8t,"whisper"),R8t.forEach(t),e5o=r($Ne," \u2014 "),rO=n($Ne,"A",{href:!0});var P8t=s(rO);o5o=r(P8t,"WhisperTokenizer"),P8t.forEach(t),r5o=r($Ne," (Whisper model)"),$Ne.forEach(t),t5o=i(S),pl=n(S,"LI",{});var MI=s(pl);Cue=n(MI,"STRONG",{});var B8t=s(Cue);a5o=r(B8t,"xclip"),B8t.forEach(t),n5o=r(MI," \u2014 "),tO=n(MI,"A",{href:!0});var I8t=s(tO);s5o=r(I8t,"CLIPTokenizer"),I8t.forEach(t),l5o=r(MI," or "),aO=n(MI,"A",{href:!0});var N8t=s(aO);i5o=r(N8t,"CLIPTokenizerFast"),N8t.forEach(t),d5o=r(MI," (X-CLIP model)"),MI.forEach(t),c5o=i(S),_l=n(S,"LI",{});var EI=s(_l);wue=n(EI,"STRONG",{});var q8t=s(wue);f5o=r(q8t,"xglm"),q8t.forEach(t),m5o=r(EI," \u2014 "),nO=n(EI,"A",{href:!0});var j8t=s(nO);g5o=r(j8t,"XGLMTokenizer"),j8t.forEach(t),h5o=r(EI," or "),sO=n(EI,"A",{href:!0});var D8t=s(sO);u5o=r(D8t,"XGLMTokenizerFast"),D8t.forEach(t),p5o=r(EI," (XGLM model)"),EI.forEach(t),_5o=i(S),Wu=n(S,"LI",{});var kNe=s(Wu);Aue=n(kNe,"STRONG",{});var G8t=s(Aue);v5o=r(G8t,"xlm"),G8t.forEach(t),b5o=r(kNe," \u2014 "),lO=n(kNe,"A",{href:!0});var O8t=s(lO);F5o=r(O8t,"XLMTokenizer"),O8t.forEach(t),T5o=r(kNe," (XLM model)"),kNe.forEach(t),M5o=i(S),Uu=n(S,"LI",{});var SNe=s(Uu);Lue=n(SNe,"STRONG",{});var V8t=s(Lue);E5o=r(V8t,"xlm-prophetnet"),V8t.forEach(t),C5o=r(SNe," \u2014 "),iO=n(SNe,"A",{href:!0});var X8t=s(iO);w5o=r(X8t,"XLMProphetNetTokenizer"),X8t.forEach(t),A5o=r(SNe," (XLM-ProphetNet model)"),SNe.forEach(t),L5o=i(S),vl=n(S,"LI",{});var CI=s(vl);yue=n(CI,"STRONG",{});var z8t=s(yue);y5o=r(z8t,"xlm-roberta"),z8t.forEach(t),x5o=r(CI," \u2014 "),dO=n(CI,"A",{href:!0});var Q8t=s(dO);$5o=r(Q8t,"XLMRobertaTokenizer"),Q8t.forEach(t),k5o=r(CI," or "),cO=n(CI,"A",{href:!0});var W8t=s(cO);S5o=r(W8t,"XLMRobertaTokenizerFast"),W8t.forEach(t),R5o=r(CI," (XLM-RoBERTa model)"),CI.forEach(t),P5o=i(S),bl=n(S,"LI",{});var wI=s(bl);xue=n(wI,"STRONG",{});var U8t=s(xue);B5o=r(U8t,"xlm-roberta-xl"),U8t.forEach(t),I5o=r(wI," \u2014 "),fO=n(wI,"A",{href:!0});var H8t=s(fO);N5o=r(H8t,"XLMRobertaTokenizer"),H8t.forEach(t),q5o=r(wI," or "),mO=n(wI,"A",{href:!0});var J8t=s(mO);j5o=r(J8t,"XLMRobertaTokenizerFast"),J8t.forEach(t),D5o=r(wI," (XLM-RoBERTa-XL model)"),wI.forEach(t),G5o=i(S),Fl=n(S,"LI",{});var AI=s(Fl);$ue=n(AI,"STRONG",{});var Y8t=s($ue);O5o=r(Y8t,"xlnet"),Y8t.forEach(t),V5o=r(AI," \u2014 "),gO=n(AI,"A",{href:!0});var Z8t=s(gO);X5o=r(Z8t,"XLNetTokenizer"),Z8t.forEach(t),z5o=r(AI," or "),hO=n(AI,"A",{href:!0});var K8t=s(hO);Q5o=r(K8t,"XLNetTokenizerFast"),K8t.forEach(t),W5o=r(AI," (XLNet model)"),AI.forEach(t),U5o=i(S),Tl=n(S,"LI",{});var LI=s(Tl);kue=n(LI,"STRONG",{});var eyt=s(kue);H5o=r(eyt,"yoso"),eyt.forEach(t),J5o=r(LI," \u2014 "),uO=n(LI,"A",{href:!0});var oyt=s(uO);Y5o=r(oyt,"AlbertTokenizer"),oyt.forEach(t),Z5o=r(LI," or "),pO=n(LI,"A",{href:!0});var ryt=s(pO);K5o=r(ryt,"AlbertTokenizerFast"),ryt.forEach(t),ewo=r(LI," (YOSO model)"),LI.forEach(t),S.forEach(t),owo=i(yl),T(Hu.$$.fragment,yl),yl.forEach(t),rwo=i(Ll),Ju=n(Ll,"DIV",{class:!0});var Ito=s(Ju);T(Gx.$$.fragment,Ito),two=i(Ito),Sue=n(Ito,"P",{});var tyt=s(Sue);awo=r(tyt,"Register a new tokenizer in this mapping."),tyt.forEach(t),Ito.forEach(t),Ll.forEach(t),woo=i(f),Fd=n(f,"H2",{class:!0});var Nto=s(Fd);Yu=n(Nto,"A",{id:!0,class:!0,href:!0});var ayt=s(Yu);Rue=n(ayt,"SPAN",{});var nyt=s(Rue);T(Ox.$$.fragment,nyt),nyt.forEach(t),ayt.forEach(t),nwo=i(Nto),Pue=n(Nto,"SPAN",{});var syt=s(Pue);swo=r(syt,"AutoFeatureExtractor"),syt.forEach(t),Nto.forEach(t),Aoo=i(f),Ro=n(f,"DIV",{class:!0});var xl=s(Ro);T(Vx.$$.fragment,xl),lwo=i(xl),Xx=n(xl,"P",{});var qto=s(Xx);iwo=r(qto,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),_O=n(qto,"A",{href:!0});var lyt=s(_O);dwo=r(lyt,"AutoFeatureExtractor.from_pretrained()"),lyt.forEach(t),cwo=r(qto," class method."),qto.forEach(t),fwo=i(xl),zx=n(xl,"P",{});var jto=s(zx);mwo=r(jto,"This class cannot be instantiated directly using "),Bue=n(jto,"CODE",{});var iyt=s(Bue);gwo=r(iyt,"__init__()"),iyt.forEach(t),hwo=r(jto," (throws an error)."),jto.forEach(t),uwo=i(xl),Ye=n(xl,"DIV",{class:!0});var Ta=s(Ye);T(Qx.$$.fragment,Ta),pwo=i(Ta),Iue=n(Ta,"P",{});var dyt=s(Iue);_wo=r(dyt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),dyt.forEach(t),vwo=i(Ta),Ka=n(Ta,"P",{});var by=s(Ka);bwo=r(by,"The feature extractor class to instantiate is selected based on the "),Nue=n(by,"CODE",{});var cyt=s(Nue);Fwo=r(cyt,"model_type"),cyt.forEach(t),Two=r(by,` property of the config object
(either passed as an argument or loaded from `),que=n(by,"CODE",{});var fyt=s(que);Mwo=r(fyt,"pretrained_model_name_or_path"),fyt.forEach(t),Ewo=r(by,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),jue=n(by,"CODE",{});var myt=s(jue);Cwo=r(myt,"pretrained_model_name_or_path"),myt.forEach(t),wwo=r(by,":"),by.forEach(t),Awo=i(Ta),z=n(Ta,"UL",{});var W=s(z);Zu=n(W,"LI",{});var RNe=s(Zu);Due=n(RNe,"STRONG",{});var gyt=s(Due);Lwo=r(gyt,"beit"),gyt.forEach(t),ywo=r(RNe," \u2014 "),vO=n(RNe,"A",{href:!0});var hyt=s(vO);xwo=r(hyt,"BeitFeatureExtractor"),hyt.forEach(t),$wo=r(RNe," (BEiT model)"),RNe.forEach(t),kwo=i(W),Ku=n(W,"LI",{});var PNe=s(Ku);Gue=n(PNe,"STRONG",{});var uyt=s(Gue);Swo=r(uyt,"clip"),uyt.forEach(t),Rwo=r(PNe," \u2014 "),bO=n(PNe,"A",{href:!0});var pyt=s(bO);Pwo=r(pyt,"CLIPFeatureExtractor"),pyt.forEach(t),Bwo=r(PNe," (CLIP model)"),PNe.forEach(t),Iwo=i(W),ep=n(W,"LI",{});var BNe=s(ep);Oue=n(BNe,"STRONG",{});var _yt=s(Oue);Nwo=r(_yt,"conditional_detr"),_yt.forEach(t),qwo=r(BNe," \u2014 "),FO=n(BNe,"A",{href:!0});var vyt=s(FO);jwo=r(vyt,"ConditionalDetrFeatureExtractor"),vyt.forEach(t),Dwo=r(BNe," (Conditional DETR model)"),BNe.forEach(t),Gwo=i(W),op=n(W,"LI",{});var INe=s(op);Vue=n(INe,"STRONG",{});var byt=s(Vue);Owo=r(byt,"convnext"),byt.forEach(t),Vwo=r(INe," \u2014 "),TO=n(INe,"A",{href:!0});var Fyt=s(TO);Xwo=r(Fyt,"ConvNextFeatureExtractor"),Fyt.forEach(t),zwo=r(INe," (ConvNeXT model)"),INe.forEach(t),Qwo=i(W),rp=n(W,"LI",{});var NNe=s(rp);Xue=n(NNe,"STRONG",{});var Tyt=s(Xue);Wwo=r(Tyt,"cvt"),Tyt.forEach(t),Uwo=r(NNe," \u2014 "),MO=n(NNe,"A",{href:!0});var Myt=s(MO);Hwo=r(Myt,"ConvNextFeatureExtractor"),Myt.forEach(t),Jwo=r(NNe," (CvT model)"),NNe.forEach(t),Ywo=i(W),tp=n(W,"LI",{});var qNe=s(tp);zue=n(qNe,"STRONG",{});var Eyt=s(zue);Zwo=r(Eyt,"data2vec-audio"),Eyt.forEach(t),Kwo=r(qNe," \u2014 "),EO=n(qNe,"A",{href:!0});var Cyt=s(EO);eAo=r(Cyt,"Wav2Vec2FeatureExtractor"),Cyt.forEach(t),oAo=r(qNe," (Data2VecAudio model)"),qNe.forEach(t),rAo=i(W),ap=n(W,"LI",{});var jNe=s(ap);Que=n(jNe,"STRONG",{});var wyt=s(Que);tAo=r(wyt,"data2vec-vision"),wyt.forEach(t),aAo=r(jNe," \u2014 "),CO=n(jNe,"A",{href:!0});var Ayt=s(CO);nAo=r(Ayt,"BeitFeatureExtractor"),Ayt.forEach(t),sAo=r(jNe," (Data2VecVision model)"),jNe.forEach(t),lAo=i(W),np=n(W,"LI",{});var DNe=s(np);Wue=n(DNe,"STRONG",{});var Lyt=s(Wue);iAo=r(Lyt,"deformable_detr"),Lyt.forEach(t),dAo=r(DNe," \u2014 "),wO=n(DNe,"A",{href:!0});var yyt=s(wO);cAo=r(yyt,"DeformableDetrFeatureExtractor"),yyt.forEach(t),fAo=r(DNe," (Deformable DETR model)"),DNe.forEach(t),mAo=i(W),sp=n(W,"LI",{});var GNe=s(sp);Uue=n(GNe,"STRONG",{});var xyt=s(Uue);gAo=r(xyt,"deit"),xyt.forEach(t),hAo=r(GNe," \u2014 "),AO=n(GNe,"A",{href:!0});var $yt=s(AO);uAo=r($yt,"DeiTFeatureExtractor"),$yt.forEach(t),pAo=r(GNe," (DeiT model)"),GNe.forEach(t),_Ao=i(W),lp=n(W,"LI",{});var ONe=s(lp);Hue=n(ONe,"STRONG",{});var kyt=s(Hue);vAo=r(kyt,"detr"),kyt.forEach(t),bAo=r(ONe," \u2014 "),LO=n(ONe,"A",{href:!0});var Syt=s(LO);FAo=r(Syt,"DetrFeatureExtractor"),Syt.forEach(t),TAo=r(ONe," (DETR model)"),ONe.forEach(t),MAo=i(W),ip=n(W,"LI",{});var VNe=s(ip);Jue=n(VNe,"STRONG",{});var Ryt=s(Jue);EAo=r(Ryt,"donut"),Ryt.forEach(t),CAo=r(VNe," \u2014 "),yO=n(VNe,"A",{href:!0});var Pyt=s(yO);wAo=r(Pyt,"DonutFeatureExtractor"),Pyt.forEach(t),AAo=r(VNe," (Donut model)"),VNe.forEach(t),LAo=i(W),dp=n(W,"LI",{});var XNe=s(dp);Yue=n(XNe,"STRONG",{});var Byt=s(Yue);yAo=r(Byt,"dpt"),Byt.forEach(t),xAo=r(XNe," \u2014 "),xO=n(XNe,"A",{href:!0});var Iyt=s(xO);$Ao=r(Iyt,"DPTFeatureExtractor"),Iyt.forEach(t),kAo=r(XNe," (DPT model)"),XNe.forEach(t),SAo=i(W),cp=n(W,"LI",{});var zNe=s(cp);Zue=n(zNe,"STRONG",{});var Nyt=s(Zue);RAo=r(Nyt,"flava"),Nyt.forEach(t),PAo=r(zNe," \u2014 "),$O=n(zNe,"A",{href:!0});var qyt=s($O);BAo=r(qyt,"FlavaFeatureExtractor"),qyt.forEach(t),IAo=r(zNe," (FLAVA model)"),zNe.forEach(t),NAo=i(W),fp=n(W,"LI",{});var QNe=s(fp);Kue=n(QNe,"STRONG",{});var jyt=s(Kue);qAo=r(jyt,"glpn"),jyt.forEach(t),jAo=r(QNe," \u2014 "),kO=n(QNe,"A",{href:!0});var Dyt=s(kO);DAo=r(Dyt,"GLPNFeatureExtractor"),Dyt.forEach(t),GAo=r(QNe," (GLPN model)"),QNe.forEach(t),OAo=i(W),mp=n(W,"LI",{});var WNe=s(mp);epe=n(WNe,"STRONG",{});var Gyt=s(epe);VAo=r(Gyt,"groupvit"),Gyt.forEach(t),XAo=r(WNe," \u2014 "),SO=n(WNe,"A",{href:!0});var Oyt=s(SO);zAo=r(Oyt,"CLIPFeatureExtractor"),Oyt.forEach(t),QAo=r(WNe," (GroupViT model)"),WNe.forEach(t),WAo=i(W),gp=n(W,"LI",{});var UNe=s(gp);ope=n(UNe,"STRONG",{});var Vyt=s(ope);UAo=r(Vyt,"hubert"),Vyt.forEach(t),HAo=r(UNe," \u2014 "),RO=n(UNe,"A",{href:!0});var Xyt=s(RO);JAo=r(Xyt,"Wav2Vec2FeatureExtractor"),Xyt.forEach(t),YAo=r(UNe," (Hubert model)"),UNe.forEach(t),ZAo=i(W),hp=n(W,"LI",{});var HNe=s(hp);rpe=n(HNe,"STRONG",{});var zyt=s(rpe);KAo=r(zyt,"imagegpt"),zyt.forEach(t),e6o=r(HNe," \u2014 "),PO=n(HNe,"A",{href:!0});var Qyt=s(PO);o6o=r(Qyt,"ImageGPTFeatureExtractor"),Qyt.forEach(t),r6o=r(HNe," (ImageGPT model)"),HNe.forEach(t),t6o=i(W),up=n(W,"LI",{});var JNe=s(up);tpe=n(JNe,"STRONG",{});var Wyt=s(tpe);a6o=r(Wyt,"layoutlmv2"),Wyt.forEach(t),n6o=r(JNe," \u2014 "),BO=n(JNe,"A",{href:!0});var Uyt=s(BO);s6o=r(Uyt,"LayoutLMv2FeatureExtractor"),Uyt.forEach(t),l6o=r(JNe," (LayoutLMv2 model)"),JNe.forEach(t),i6o=i(W),pp=n(W,"LI",{});var YNe=s(pp);ape=n(YNe,"STRONG",{});var Hyt=s(ape);d6o=r(Hyt,"layoutlmv3"),Hyt.forEach(t),c6o=r(YNe," \u2014 "),IO=n(YNe,"A",{href:!0});var Jyt=s(IO);f6o=r(Jyt,"LayoutLMv3FeatureExtractor"),Jyt.forEach(t),m6o=r(YNe," (LayoutLMv3 model)"),YNe.forEach(t),g6o=i(W),_p=n(W,"LI",{});var ZNe=s(_p);npe=n(ZNe,"STRONG",{});var Yyt=s(npe);h6o=r(Yyt,"levit"),Yyt.forEach(t),u6o=r(ZNe," \u2014 "),NO=n(ZNe,"A",{href:!0});var Zyt=s(NO);p6o=r(Zyt,"LevitFeatureExtractor"),Zyt.forEach(t),_6o=r(ZNe," (LeViT model)"),ZNe.forEach(t),v6o=i(W),vp=n(W,"LI",{});var KNe=s(vp);spe=n(KNe,"STRONG",{});var Kyt=s(spe);b6o=r(Kyt,"maskformer"),Kyt.forEach(t),F6o=r(KNe," \u2014 "),qO=n(KNe,"A",{href:!0});var e9t=s(qO);T6o=r(e9t,"MaskFormerFeatureExtractor"),e9t.forEach(t),M6o=r(KNe," (MaskFormer model)"),KNe.forEach(t),E6o=i(W),bp=n(W,"LI",{});var eqe=s(bp);lpe=n(eqe,"STRONG",{});var o9t=s(lpe);C6o=r(o9t,"mctct"),o9t.forEach(t),w6o=r(eqe," \u2014 "),jO=n(eqe,"A",{href:!0});var r9t=s(jO);A6o=r(r9t,"MCTCTFeatureExtractor"),r9t.forEach(t),L6o=r(eqe," (M-CTC-T model)"),eqe.forEach(t),y6o=i(W),Fp=n(W,"LI",{});var oqe=s(Fp);ipe=n(oqe,"STRONG",{});var t9t=s(ipe);x6o=r(t9t,"mobilevit"),t9t.forEach(t),$6o=r(oqe," \u2014 "),DO=n(oqe,"A",{href:!0});var a9t=s(DO);k6o=r(a9t,"MobileViTFeatureExtractor"),a9t.forEach(t),S6o=r(oqe," (MobileViT model)"),oqe.forEach(t),R6o=i(W),Tp=n(W,"LI",{});var rqe=s(Tp);dpe=n(rqe,"STRONG",{});var n9t=s(dpe);P6o=r(n9t,"owlvit"),n9t.forEach(t),B6o=r(rqe," \u2014 "),GO=n(rqe,"A",{href:!0});var s9t=s(GO);I6o=r(s9t,"OwlViTFeatureExtractor"),s9t.forEach(t),N6o=r(rqe," (OWL-ViT model)"),rqe.forEach(t),q6o=i(W),Mp=n(W,"LI",{});var tqe=s(Mp);cpe=n(tqe,"STRONG",{});var l9t=s(cpe);j6o=r(l9t,"perceiver"),l9t.forEach(t),D6o=r(tqe," \u2014 "),OO=n(tqe,"A",{href:!0});var i9t=s(OO);G6o=r(i9t,"PerceiverFeatureExtractor"),i9t.forEach(t),O6o=r(tqe," (Perceiver model)"),tqe.forEach(t),V6o=i(W),Ep=n(W,"LI",{});var aqe=s(Ep);fpe=n(aqe,"STRONG",{});var d9t=s(fpe);X6o=r(d9t,"poolformer"),d9t.forEach(t),z6o=r(aqe," \u2014 "),VO=n(aqe,"A",{href:!0});var c9t=s(VO);Q6o=r(c9t,"PoolFormerFeatureExtractor"),c9t.forEach(t),W6o=r(aqe," (PoolFormer model)"),aqe.forEach(t),U6o=i(W),Cp=n(W,"LI",{});var nqe=s(Cp);mpe=n(nqe,"STRONG",{});var f9t=s(mpe);H6o=r(f9t,"regnet"),f9t.forEach(t),J6o=r(nqe," \u2014 "),XO=n(nqe,"A",{href:!0});var m9t=s(XO);Y6o=r(m9t,"ConvNextFeatureExtractor"),m9t.forEach(t),Z6o=r(nqe," (RegNet model)"),nqe.forEach(t),K6o=i(W),wp=n(W,"LI",{});var sqe=s(wp);gpe=n(sqe,"STRONG",{});var g9t=s(gpe);e7o=r(g9t,"resnet"),g9t.forEach(t),o7o=r(sqe," \u2014 "),zO=n(sqe,"A",{href:!0});var h9t=s(zO);r7o=r(h9t,"ConvNextFeatureExtractor"),h9t.forEach(t),t7o=r(sqe," (ResNet model)"),sqe.forEach(t),a7o=i(W),Ap=n(W,"LI",{});var lqe=s(Ap);hpe=n(lqe,"STRONG",{});var u9t=s(hpe);n7o=r(u9t,"segformer"),u9t.forEach(t),s7o=r(lqe," \u2014 "),QO=n(lqe,"A",{href:!0});var p9t=s(QO);l7o=r(p9t,"SegformerFeatureExtractor"),p9t.forEach(t),i7o=r(lqe," (SegFormer model)"),lqe.forEach(t),d7o=i(W),Lp=n(W,"LI",{});var iqe=s(Lp);upe=n(iqe,"STRONG",{});var _9t=s(upe);c7o=r(_9t,"speech_to_text"),_9t.forEach(t),f7o=r(iqe," \u2014 "),WO=n(iqe,"A",{href:!0});var v9t=s(WO);m7o=r(v9t,"Speech2TextFeatureExtractor"),v9t.forEach(t),g7o=r(iqe," (Speech2Text model)"),iqe.forEach(t),h7o=i(W),yp=n(W,"LI",{});var dqe=s(yp);ppe=n(dqe,"STRONG",{});var b9t=s(ppe);u7o=r(b9t,"swin"),b9t.forEach(t),p7o=r(dqe," \u2014 "),UO=n(dqe,"A",{href:!0});var F9t=s(UO);_7o=r(F9t,"ViTFeatureExtractor"),F9t.forEach(t),v7o=r(dqe," (Swin Transformer model)"),dqe.forEach(t),b7o=i(W),xp=n(W,"LI",{});var cqe=s(xp);_pe=n(cqe,"STRONG",{});var T9t=s(_pe);F7o=r(T9t,"swinv2"),T9t.forEach(t),T7o=r(cqe," \u2014 "),HO=n(cqe,"A",{href:!0});var M9t=s(HO);M7o=r(M9t,"ViTFeatureExtractor"),M9t.forEach(t),E7o=r(cqe," (Swin Transformer V2 model)"),cqe.forEach(t),C7o=i(W),$p=n(W,"LI",{});var fqe=s($p);vpe=n(fqe,"STRONG",{});var E9t=s(vpe);w7o=r(E9t,"van"),E9t.forEach(t),A7o=r(fqe," \u2014 "),JO=n(fqe,"A",{href:!0});var C9t=s(JO);L7o=r(C9t,"ConvNextFeatureExtractor"),C9t.forEach(t),y7o=r(fqe," (VAN model)"),fqe.forEach(t),x7o=i(W),kp=n(W,"LI",{});var mqe=s(kp);bpe=n(mqe,"STRONG",{});var w9t=s(bpe);$7o=r(w9t,"videomae"),w9t.forEach(t),k7o=r(mqe," \u2014 "),YO=n(mqe,"A",{href:!0});var A9t=s(YO);S7o=r(A9t,"VideoMAEFeatureExtractor"),A9t.forEach(t),R7o=r(mqe," (VideoMAE model)"),mqe.forEach(t),P7o=i(W),Sp=n(W,"LI",{});var gqe=s(Sp);Fpe=n(gqe,"STRONG",{});var L9t=s(Fpe);B7o=r(L9t,"vilt"),L9t.forEach(t),I7o=r(gqe," \u2014 "),ZO=n(gqe,"A",{href:!0});var y9t=s(ZO);N7o=r(y9t,"ViltFeatureExtractor"),y9t.forEach(t),q7o=r(gqe," (ViLT model)"),gqe.forEach(t),j7o=i(W),Rp=n(W,"LI",{});var hqe=s(Rp);Tpe=n(hqe,"STRONG",{});var x9t=s(Tpe);D7o=r(x9t,"vit"),x9t.forEach(t),G7o=r(hqe," \u2014 "),KO=n(hqe,"A",{href:!0});var $9t=s(KO);O7o=r($9t,"ViTFeatureExtractor"),$9t.forEach(t),V7o=r(hqe," (ViT model)"),hqe.forEach(t),X7o=i(W),Pp=n(W,"LI",{});var uqe=s(Pp);Mpe=n(uqe,"STRONG",{});var k9t=s(Mpe);z7o=r(k9t,"vit_mae"),k9t.forEach(t),Q7o=r(uqe," \u2014 "),eV=n(uqe,"A",{href:!0});var S9t=s(eV);W7o=r(S9t,"ViTFeatureExtractor"),S9t.forEach(t),U7o=r(uqe," (ViTMAE model)"),uqe.forEach(t),H7o=i(W),Bp=n(W,"LI",{});var pqe=s(Bp);Epe=n(pqe,"STRONG",{});var R9t=s(Epe);J7o=r(R9t,"vit_msn"),R9t.forEach(t),Y7o=r(pqe," \u2014 "),oV=n(pqe,"A",{href:!0});var P9t=s(oV);Z7o=r(P9t,"ViTFeatureExtractor"),P9t.forEach(t),K7o=r(pqe," (ViTMSN model)"),pqe.forEach(t),eLo=i(W),Ip=n(W,"LI",{});var _qe=s(Ip);Cpe=n(_qe,"STRONG",{});var B9t=s(Cpe);oLo=r(B9t,"wav2vec2"),B9t.forEach(t),rLo=r(_qe," \u2014 "),rV=n(_qe,"A",{href:!0});var I9t=s(rV);tLo=r(I9t,"Wav2Vec2FeatureExtractor"),I9t.forEach(t),aLo=r(_qe," (Wav2Vec2 model)"),_qe.forEach(t),nLo=i(W),Np=n(W,"LI",{});var vqe=s(Np);wpe=n(vqe,"STRONG",{});var N9t=s(wpe);sLo=r(N9t,"wav2vec2-conformer"),N9t.forEach(t),lLo=r(vqe," \u2014 "),tV=n(vqe,"A",{href:!0});var q9t=s(tV);iLo=r(q9t,"Wav2Vec2FeatureExtractor"),q9t.forEach(t),dLo=r(vqe," (Wav2Vec2-Conformer model)"),vqe.forEach(t),cLo=i(W),qp=n(W,"LI",{});var bqe=s(qp);Ape=n(bqe,"STRONG",{});var j9t=s(Ape);fLo=r(j9t,"whisper"),j9t.forEach(t),mLo=r(bqe," \u2014 "),aV=n(bqe,"A",{href:!0});var D9t=s(aV);gLo=r(D9t,"WhisperFeatureExtractor"),D9t.forEach(t),hLo=r(bqe," (Whisper model)"),bqe.forEach(t),uLo=i(W),jp=n(W,"LI",{});var Fqe=s(jp);Lpe=n(Fqe,"STRONG",{});var G9t=s(Lpe);pLo=r(G9t,"xclip"),G9t.forEach(t),_Lo=r(Fqe," \u2014 "),nV=n(Fqe,"A",{href:!0});var O9t=s(nV);vLo=r(O9t,"CLIPFeatureExtractor"),O9t.forEach(t),bLo=r(Fqe," (X-CLIP model)"),Fqe.forEach(t),FLo=i(W),Dp=n(W,"LI",{});var Tqe=s(Dp);ype=n(Tqe,"STRONG",{});var V9t=s(ype);TLo=r(V9t,"yolos"),V9t.forEach(t),MLo=r(Tqe," \u2014 "),sV=n(Tqe,"A",{href:!0});var X9t=s(sV);ELo=r(X9t,"YolosFeatureExtractor"),X9t.forEach(t),CLo=r(Tqe," (YOLOS model)"),Tqe.forEach(t),W.forEach(t),wLo=i(Ta),T(Gp.$$.fragment,Ta),ALo=i(Ta),T(Op.$$.fragment,Ta),Ta.forEach(t),LLo=i(xl),Vp=n(xl,"DIV",{class:!0});var Dto=s(Vp);T(Wx.$$.fragment,Dto),yLo=i(Dto),xpe=n(Dto,"P",{});var z9t=s(xpe);xLo=r(z9t,"Register a new feature extractor for this class."),z9t.forEach(t),Dto.forEach(t),xl.forEach(t),Loo=i(f),Td=n(f,"H2",{class:!0});var Gto=s(Td);Xp=n(Gto,"A",{id:!0,class:!0,href:!0});var Q9t=s(Xp);$pe=n(Q9t,"SPAN",{});var W9t=s($pe);T(Ux.$$.fragment,W9t),W9t.forEach(t),Q9t.forEach(t),$Lo=i(Gto),kpe=n(Gto,"SPAN",{});var U9t=s(kpe);kLo=r(U9t,"AutoProcessor"),U9t.forEach(t),Gto.forEach(t),yoo=i(f),Po=n(f,"DIV",{class:!0});var $l=s(Po);T(Hx.$$.fragment,$l),SLo=i($l),Jx=n($l,"P",{});var Oto=s(Jx);RLo=r(Oto,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),lV=n(Oto,"A",{href:!0});var H9t=s(lV);PLo=r(H9t,"AutoProcessor.from_pretrained()"),H9t.forEach(t),BLo=r(Oto," class method."),Oto.forEach(t),ILo=i($l),Yx=n($l,"P",{});var Vto=s(Yx);NLo=r(Vto,"This class cannot be instantiated directly using "),Spe=n(Vto,"CODE",{});var J9t=s(Spe);qLo=r(J9t,"__init__()"),J9t.forEach(t),jLo=r(Vto," (throws an error)."),Vto.forEach(t),DLo=i($l),Ze=n($l,"DIV",{class:!0});var Ma=s(Ze);T(Zx.$$.fragment,Ma),GLo=i(Ma),Rpe=n(Ma,"P",{});var Y9t=s(Rpe);OLo=r(Y9t,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Y9t.forEach(t),VLo=i(Ma),Md=n(Ma,"P",{});var Xie=s(Md);XLo=r(Xie,"The processor class to instantiate is selected based on the "),Ppe=n(Xie,"CODE",{});var Z9t=s(Ppe);zLo=r(Z9t,"model_type"),Z9t.forEach(t),QLo=r(Xie,` property of the config object (either
passed as an argument or loaded from `),Bpe=n(Xie,"CODE",{});var K9t=s(Bpe);WLo=r(K9t,"pretrained_model_name_or_path"),K9t.forEach(t),ULo=r(Xie," if possible):"),Xie.forEach(t),HLo=i(Ma),se=n(Ma,"UL",{});var ie=s(se);zp=n(ie,"LI",{});var Mqe=s(zp);Ipe=n(Mqe,"STRONG",{});var ext=s(Ipe);JLo=r(ext,"clip"),ext.forEach(t),YLo=r(Mqe," \u2014 "),iV=n(Mqe,"A",{href:!0});var oxt=s(iV);ZLo=r(oxt,"CLIPProcessor"),oxt.forEach(t),KLo=r(Mqe," (CLIP model)"),Mqe.forEach(t),e8o=i(ie),Qp=n(ie,"LI",{});var Eqe=s(Qp);Npe=n(Eqe,"STRONG",{});var rxt=s(Npe);o8o=r(rxt,"donut"),rxt.forEach(t),r8o=r(Eqe," \u2014 "),dV=n(Eqe,"A",{href:!0});var txt=s(dV);t8o=r(txt,"DonutProcessor"),txt.forEach(t),a8o=r(Eqe," (Donut model)"),Eqe.forEach(t),n8o=i(ie),Wp=n(ie,"LI",{});var Cqe=s(Wp);qpe=n(Cqe,"STRONG",{});var axt=s(qpe);s8o=r(axt,"flava"),axt.forEach(t),l8o=r(Cqe," \u2014 "),cV=n(Cqe,"A",{href:!0});var nxt=s(cV);i8o=r(nxt,"FlavaProcessor"),nxt.forEach(t),d8o=r(Cqe," (FLAVA model)"),Cqe.forEach(t),c8o=i(ie),Up=n(ie,"LI",{});var wqe=s(Up);jpe=n(wqe,"STRONG",{});var sxt=s(jpe);f8o=r(sxt,"groupvit"),sxt.forEach(t),m8o=r(wqe," \u2014 "),fV=n(wqe,"A",{href:!0});var lxt=s(fV);g8o=r(lxt,"CLIPProcessor"),lxt.forEach(t),h8o=r(wqe," (GroupViT model)"),wqe.forEach(t),u8o=i(ie),Hp=n(ie,"LI",{});var Aqe=s(Hp);Dpe=n(Aqe,"STRONG",{});var ixt=s(Dpe);p8o=r(ixt,"layoutlmv2"),ixt.forEach(t),_8o=r(Aqe," \u2014 "),mV=n(Aqe,"A",{href:!0});var dxt=s(mV);v8o=r(dxt,"LayoutLMv2Processor"),dxt.forEach(t),b8o=r(Aqe," (LayoutLMv2 model)"),Aqe.forEach(t),F8o=i(ie),Jp=n(ie,"LI",{});var Lqe=s(Jp);Gpe=n(Lqe,"STRONG",{});var cxt=s(Gpe);T8o=r(cxt,"layoutlmv3"),cxt.forEach(t),M8o=r(Lqe," \u2014 "),gV=n(Lqe,"A",{href:!0});var fxt=s(gV);E8o=r(fxt,"LayoutLMv3Processor"),fxt.forEach(t),C8o=r(Lqe," (LayoutLMv3 model)"),Lqe.forEach(t),w8o=i(ie),Yp=n(ie,"LI",{});var yqe=s(Yp);Ope=n(yqe,"STRONG",{});var mxt=s(Ope);A8o=r(mxt,"layoutxlm"),mxt.forEach(t),L8o=r(yqe," \u2014 "),hV=n(yqe,"A",{href:!0});var gxt=s(hV);y8o=r(gxt,"LayoutXLMProcessor"),gxt.forEach(t),x8o=r(yqe," (LayoutXLM model)"),yqe.forEach(t),$8o=i(ie),Zp=n(ie,"LI",{});var xqe=s(Zp);Vpe=n(xqe,"STRONG",{});var hxt=s(Vpe);k8o=r(hxt,"markuplm"),hxt.forEach(t),S8o=r(xqe," \u2014 "),uV=n(xqe,"A",{href:!0});var uxt=s(uV);R8o=r(uxt,"MarkupLMProcessor"),uxt.forEach(t),P8o=r(xqe," (MarkupLM model)"),xqe.forEach(t),B8o=i(ie),Kp=n(ie,"LI",{});var $qe=s(Kp);Xpe=n($qe,"STRONG",{});var pxt=s(Xpe);I8o=r(pxt,"owlvit"),pxt.forEach(t),N8o=r($qe," \u2014 "),pV=n($qe,"A",{href:!0});var _xt=s(pV);q8o=r(_xt,"OwlViTProcessor"),_xt.forEach(t),j8o=r($qe," (OWL-ViT model)"),$qe.forEach(t),D8o=i(ie),e_=n(ie,"LI",{});var kqe=s(e_);zpe=n(kqe,"STRONG",{});var vxt=s(zpe);G8o=r(vxt,"sew"),vxt.forEach(t),O8o=r(kqe," \u2014 "),_V=n(kqe,"A",{href:!0});var bxt=s(_V);V8o=r(bxt,"Wav2Vec2Processor"),bxt.forEach(t),X8o=r(kqe," (SEW model)"),kqe.forEach(t),z8o=i(ie),o_=n(ie,"LI",{});var Sqe=s(o_);Qpe=n(Sqe,"STRONG",{});var Fxt=s(Qpe);Q8o=r(Fxt,"sew-d"),Fxt.forEach(t),W8o=r(Sqe," \u2014 "),vV=n(Sqe,"A",{href:!0});var Txt=s(vV);U8o=r(Txt,"Wav2Vec2Processor"),Txt.forEach(t),H8o=r(Sqe," (SEW-D model)"),Sqe.forEach(t),J8o=i(ie),r_=n(ie,"LI",{});var Rqe=s(r_);Wpe=n(Rqe,"STRONG",{});var Mxt=s(Wpe);Y8o=r(Mxt,"speech_to_text"),Mxt.forEach(t),Z8o=r(Rqe," \u2014 "),bV=n(Rqe,"A",{href:!0});var Ext=s(bV);K8o=r(Ext,"Speech2TextProcessor"),Ext.forEach(t),eyo=r(Rqe," (Speech2Text model)"),Rqe.forEach(t),oyo=i(ie),t_=n(ie,"LI",{});var Pqe=s(t_);Upe=n(Pqe,"STRONG",{});var Cxt=s(Upe);ryo=r(Cxt,"speech_to_text_2"),Cxt.forEach(t),tyo=r(Pqe," \u2014 "),FV=n(Pqe,"A",{href:!0});var wxt=s(FV);ayo=r(wxt,"Speech2Text2Processor"),wxt.forEach(t),nyo=r(Pqe," (Speech2Text2 model)"),Pqe.forEach(t),syo=i(ie),a_=n(ie,"LI",{});var Bqe=s(a_);Hpe=n(Bqe,"STRONG",{});var Axt=s(Hpe);lyo=r(Axt,"trocr"),Axt.forEach(t),iyo=r(Bqe," \u2014 "),TV=n(Bqe,"A",{href:!0});var Lxt=s(TV);dyo=r(Lxt,"TrOCRProcessor"),Lxt.forEach(t),cyo=r(Bqe," (TrOCR model)"),Bqe.forEach(t),fyo=i(ie),n_=n(ie,"LI",{});var Iqe=s(n_);Jpe=n(Iqe,"STRONG",{});var yxt=s(Jpe);myo=r(yxt,"unispeech"),yxt.forEach(t),gyo=r(Iqe," \u2014 "),MV=n(Iqe,"A",{href:!0});var xxt=s(MV);hyo=r(xxt,"Wav2Vec2Processor"),xxt.forEach(t),uyo=r(Iqe," (UniSpeech model)"),Iqe.forEach(t),pyo=i(ie),s_=n(ie,"LI",{});var Nqe=s(s_);Ype=n(Nqe,"STRONG",{});var $xt=s(Ype);_yo=r($xt,"unispeech-sat"),$xt.forEach(t),vyo=r(Nqe," \u2014 "),EV=n(Nqe,"A",{href:!0});var kxt=s(EV);byo=r(kxt,"Wav2Vec2Processor"),kxt.forEach(t),Fyo=r(Nqe," (UniSpeechSat model)"),Nqe.forEach(t),Tyo=i(ie),l_=n(ie,"LI",{});var qqe=s(l_);Zpe=n(qqe,"STRONG",{});var Sxt=s(Zpe);Myo=r(Sxt,"vilt"),Sxt.forEach(t),Eyo=r(qqe," \u2014 "),CV=n(qqe,"A",{href:!0});var Rxt=s(CV);Cyo=r(Rxt,"ViltProcessor"),Rxt.forEach(t),wyo=r(qqe," (ViLT model)"),qqe.forEach(t),Ayo=i(ie),i_=n(ie,"LI",{});var jqe=s(i_);Kpe=n(jqe,"STRONG",{});var Pxt=s(Kpe);Lyo=r(Pxt,"vision-text-dual-encoder"),Pxt.forEach(t),yyo=r(jqe," \u2014 "),wV=n(jqe,"A",{href:!0});var Bxt=s(wV);xyo=r(Bxt,"VisionTextDualEncoderProcessor"),Bxt.forEach(t),$yo=r(jqe," (VisionTextDualEncoder model)"),jqe.forEach(t),kyo=i(ie),d_=n(ie,"LI",{});var Dqe=s(d_);e_e=n(Dqe,"STRONG",{});var Ixt=s(e_e);Syo=r(Ixt,"wav2vec2"),Ixt.forEach(t),Ryo=r(Dqe," \u2014 "),AV=n(Dqe,"A",{href:!0});var Nxt=s(AV);Pyo=r(Nxt,"Wav2Vec2Processor"),Nxt.forEach(t),Byo=r(Dqe," (Wav2Vec2 model)"),Dqe.forEach(t),Iyo=i(ie),c_=n(ie,"LI",{});var Gqe=s(c_);o_e=n(Gqe,"STRONG",{});var qxt=s(o_e);Nyo=r(qxt,"wav2vec2-conformer"),qxt.forEach(t),qyo=r(Gqe," \u2014 "),LV=n(Gqe,"A",{href:!0});var jxt=s(LV);jyo=r(jxt,"Wav2Vec2Processor"),jxt.forEach(t),Dyo=r(Gqe," (Wav2Vec2-Conformer model)"),Gqe.forEach(t),Gyo=i(ie),f_=n(ie,"LI",{});var Oqe=s(f_);r_e=n(Oqe,"STRONG",{});var Dxt=s(r_e);Oyo=r(Dxt,"wavlm"),Dxt.forEach(t),Vyo=r(Oqe," \u2014 "),yV=n(Oqe,"A",{href:!0});var Gxt=s(yV);Xyo=r(Gxt,"Wav2Vec2Processor"),Gxt.forEach(t),zyo=r(Oqe," (WavLM model)"),Oqe.forEach(t),Qyo=i(ie),m_=n(ie,"LI",{});var Vqe=s(m_);t_e=n(Vqe,"STRONG",{});var Oxt=s(t_e);Wyo=r(Oxt,"whisper"),Oxt.forEach(t),Uyo=r(Vqe," \u2014 "),xV=n(Vqe,"A",{href:!0});var Vxt=s(xV);Hyo=r(Vxt,"WhisperProcessor"),Vxt.forEach(t),Jyo=r(Vqe," (Whisper model)"),Vqe.forEach(t),Yyo=i(ie),g_=n(ie,"LI",{});var Xqe=s(g_);a_e=n(Xqe,"STRONG",{});var Xxt=s(a_e);Zyo=r(Xxt,"xclip"),Xxt.forEach(t),Kyo=r(Xqe," \u2014 "),$V=n(Xqe,"A",{href:!0});var zxt=s($V);e9o=r(zxt,"CLIPProcessor"),zxt.forEach(t),o9o=r(Xqe," (X-CLIP model)"),Xqe.forEach(t),ie.forEach(t),r9o=i(Ma),T(h_.$$.fragment,Ma),t9o=i(Ma),T(u_.$$.fragment,Ma),Ma.forEach(t),a9o=i($l),p_=n($l,"DIV",{class:!0});var Xto=s(p_);T(Kx.$$.fragment,Xto),n9o=i(Xto),n_e=n(Xto,"P",{});var Qxt=s(n_e);s9o=r(Qxt,"Register a new processor for this class."),Qxt.forEach(t),Xto.forEach(t),$l.forEach(t),xoo=i(f),Ed=n(f,"H2",{class:!0});var zto=s(Ed);__=n(zto,"A",{id:!0,class:!0,href:!0});var Wxt=s(__);s_e=n(Wxt,"SPAN",{});var Uxt=s(s_e);T(e$.$$.fragment,Uxt),Uxt.forEach(t),Wxt.forEach(t),l9o=i(zto),l_e=n(zto,"SPAN",{});var Hxt=s(l_e);i9o=r(Hxt,"AutoModel"),Hxt.forEach(t),zto.forEach(t),$oo=i(f),Bo=n(f,"DIV",{class:!0});var kl=s(Bo);T(o$.$$.fragment,kl),d9o=i(kl),Cd=n(kl,"P",{});var zie=s(Cd);c9o=r(zie,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kV=n(zie,"A",{href:!0});var Jxt=s(kV);f9o=r(Jxt,"from_pretrained()"),Jxt.forEach(t),m9o=r(zie," class method or the "),SV=n(zie,"A",{href:!0});var Yxt=s(SV);g9o=r(Yxt,"from_config()"),Yxt.forEach(t),h9o=r(zie,` class
method.`),zie.forEach(t),u9o=i(kl),r$=n(kl,"P",{});var Qto=s(r$);p9o=r(Qto,"This class cannot be instantiated directly using "),i_e=n(Qto,"CODE",{});var Zxt=s(i_e);_9o=r(Zxt,"__init__()"),Zxt.forEach(t),v9o=r(Qto," (throws an error)."),Qto.forEach(t),b9o=i(kl),bt=n(kl,"DIV",{class:!0});var Fy=s(bt);T(t$.$$.fragment,Fy),F9o=i(Fy),d_e=n(Fy,"P",{});var Kxt=s(d_e);T9o=r(Kxt,"Instantiates one of the base model classes of the library from a configuration."),Kxt.forEach(t),M9o=i(Fy),wd=n(Fy,"P",{});var Qie=s(wd);E9o=r(Qie,`Note:
Loading a model from its configuration file does `),c_e=n(Qie,"STRONG",{});var e$t=s(c_e);C9o=r(e$t,"not"),e$t.forEach(t),w9o=r(Qie,` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=n(Qie,"A",{href:!0});var o$t=s(RV);A9o=r(o$t,"from_pretrained()"),o$t.forEach(t),L9o=r(Qie," to load the model weights."),Qie.forEach(t),y9o=i(Fy),T(v_.$$.fragment,Fy),Fy.forEach(t),x9o=i(kl),Ke=n(kl,"DIV",{class:!0});var Ea=s(Ke);T(a$.$$.fragment,Ea),$9o=i(Ea),f_e=n(Ea,"P",{});var r$t=s(f_e);k9o=r(r$t,"Instantiate one of the base model classes of the library from a pretrained model."),r$t.forEach(t),S9o=i(Ea),en=n(Ea,"P",{});var Ty=s(en);R9o=r(Ty,"The model class to instantiate is selected based on the "),m_e=n(Ty,"CODE",{});var t$t=s(m_e);P9o=r(t$t,"model_type"),t$t.forEach(t),B9o=r(Ty,` property of the config object (either
passed as an argument or loaded from `),g_e=n(Ty,"CODE",{});var a$t=s(g_e);I9o=r(a$t,"pretrained_model_name_or_path"),a$t.forEach(t),N9o=r(Ty,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=n(Ty,"CODE",{});var n$t=s(h_e);q9o=r(n$t,"pretrained_model_name_or_path"),n$t.forEach(t),j9o=r(Ty,":"),Ty.forEach(t),D9o=i(Ea),y=n(Ea,"UL",{});var x=s(y);b_=n(x,"LI",{});var zqe=s(b_);u_e=n(zqe,"STRONG",{});var s$t=s(u_e);G9o=r(s$t,"albert"),s$t.forEach(t),O9o=r(zqe," \u2014 "),PV=n(zqe,"A",{href:!0});var l$t=s(PV);V9o=r(l$t,"AlbertModel"),l$t.forEach(t),X9o=r(zqe," (ALBERT model)"),zqe.forEach(t),z9o=i(x),F_=n(x,"LI",{});var Qqe=s(F_);p_e=n(Qqe,"STRONG",{});var i$t=s(p_e);Q9o=r(i$t,"bart"),i$t.forEach(t),W9o=r(Qqe," \u2014 "),BV=n(Qqe,"A",{href:!0});var d$t=s(BV);U9o=r(d$t,"BartModel"),d$t.forEach(t),H9o=r(Qqe," (BART model)"),Qqe.forEach(t),J9o=i(x),T_=n(x,"LI",{});var Wqe=s(T_);__e=n(Wqe,"STRONG",{});var c$t=s(__e);Y9o=r(c$t,"beit"),c$t.forEach(t),Z9o=r(Wqe," \u2014 "),IV=n(Wqe,"A",{href:!0});var f$t=s(IV);K9o=r(f$t,"BeitModel"),f$t.forEach(t),exo=r(Wqe," (BEiT model)"),Wqe.forEach(t),oxo=i(x),M_=n(x,"LI",{});var Uqe=s(M_);v_e=n(Uqe,"STRONG",{});var m$t=s(v_e);rxo=r(m$t,"bert"),m$t.forEach(t),txo=r(Uqe," \u2014 "),NV=n(Uqe,"A",{href:!0});var g$t=s(NV);axo=r(g$t,"BertModel"),g$t.forEach(t),nxo=r(Uqe," (BERT model)"),Uqe.forEach(t),sxo=i(x),E_=n(x,"LI",{});var Hqe=s(E_);b_e=n(Hqe,"STRONG",{});var h$t=s(b_e);lxo=r(h$t,"bert-generation"),h$t.forEach(t),ixo=r(Hqe," \u2014 "),qV=n(Hqe,"A",{href:!0});var u$t=s(qV);dxo=r(u$t,"BertGenerationEncoder"),u$t.forEach(t),cxo=r(Hqe," (Bert Generation model)"),Hqe.forEach(t),fxo=i(x),C_=n(x,"LI",{});var Jqe=s(C_);F_e=n(Jqe,"STRONG",{});var p$t=s(F_e);mxo=r(p$t,"big_bird"),p$t.forEach(t),gxo=r(Jqe," \u2014 "),jV=n(Jqe,"A",{href:!0});var _$t=s(jV);hxo=r(_$t,"BigBirdModel"),_$t.forEach(t),uxo=r(Jqe," (BigBird model)"),Jqe.forEach(t),pxo=i(x),w_=n(x,"LI",{});var Yqe=s(w_);T_e=n(Yqe,"STRONG",{});var v$t=s(T_e);_xo=r(v$t,"bigbird_pegasus"),v$t.forEach(t),vxo=r(Yqe," \u2014 "),DV=n(Yqe,"A",{href:!0});var b$t=s(DV);bxo=r(b$t,"BigBirdPegasusModel"),b$t.forEach(t),Fxo=r(Yqe," (BigBird-Pegasus model)"),Yqe.forEach(t),Txo=i(x),A_=n(x,"LI",{});var Zqe=s(A_);M_e=n(Zqe,"STRONG",{});var F$t=s(M_e);Mxo=r(F$t,"blenderbot"),F$t.forEach(t),Exo=r(Zqe," \u2014 "),GV=n(Zqe,"A",{href:!0});var T$t=s(GV);Cxo=r(T$t,"BlenderbotModel"),T$t.forEach(t),wxo=r(Zqe," (Blenderbot model)"),Zqe.forEach(t),Axo=i(x),L_=n(x,"LI",{});var Kqe=s(L_);E_e=n(Kqe,"STRONG",{});var M$t=s(E_e);Lxo=r(M$t,"blenderbot-small"),M$t.forEach(t),yxo=r(Kqe," \u2014 "),OV=n(Kqe,"A",{href:!0});var E$t=s(OV);xxo=r(E$t,"BlenderbotSmallModel"),E$t.forEach(t),$xo=r(Kqe," (BlenderbotSmall model)"),Kqe.forEach(t),kxo=i(x),y_=n(x,"LI",{});var eje=s(y_);C_e=n(eje,"STRONG",{});var C$t=s(C_e);Sxo=r(C$t,"bloom"),C$t.forEach(t),Rxo=r(eje," \u2014 "),VV=n(eje,"A",{href:!0});var w$t=s(VV);Pxo=r(w$t,"BloomModel"),w$t.forEach(t),Bxo=r(eje," (BLOOM model)"),eje.forEach(t),Ixo=i(x),x_=n(x,"LI",{});var oje=s(x_);w_e=n(oje,"STRONG",{});var A$t=s(w_e);Nxo=r(A$t,"camembert"),A$t.forEach(t),qxo=r(oje," \u2014 "),XV=n(oje,"A",{href:!0});var L$t=s(XV);jxo=r(L$t,"CamembertModel"),L$t.forEach(t),Dxo=r(oje," (CamemBERT model)"),oje.forEach(t),Gxo=i(x),$_=n(x,"LI",{});var rje=s($_);A_e=n(rje,"STRONG",{});var y$t=s(A_e);Oxo=r(y$t,"canine"),y$t.forEach(t),Vxo=r(rje," \u2014 "),zV=n(rje,"A",{href:!0});var x$t=s(zV);Xxo=r(x$t,"CanineModel"),x$t.forEach(t),zxo=r(rje," (CANINE model)"),rje.forEach(t),Qxo=i(x),k_=n(x,"LI",{});var tje=s(k_);L_e=n(tje,"STRONG",{});var $$t=s(L_e);Wxo=r($$t,"clip"),$$t.forEach(t),Uxo=r(tje," \u2014 "),QV=n(tje,"A",{href:!0});var k$t=s(QV);Hxo=r(k$t,"CLIPModel"),k$t.forEach(t),Jxo=r(tje," (CLIP model)"),tje.forEach(t),Yxo=i(x),S_=n(x,"LI",{});var aje=s(S_);y_e=n(aje,"STRONG",{});var S$t=s(y_e);Zxo=r(S$t,"codegen"),S$t.forEach(t),Kxo=r(aje," \u2014 "),WV=n(aje,"A",{href:!0});var R$t=s(WV);e$o=r(R$t,"CodeGenModel"),R$t.forEach(t),o$o=r(aje," (CodeGen model)"),aje.forEach(t),r$o=i(x),R_=n(x,"LI",{});var nje=s(R_);x_e=n(nje,"STRONG",{});var P$t=s(x_e);t$o=r(P$t,"conditional_detr"),P$t.forEach(t),a$o=r(nje," \u2014 "),UV=n(nje,"A",{href:!0});var B$t=s(UV);n$o=r(B$t,"ConditionalDetrModel"),B$t.forEach(t),s$o=r(nje," (Conditional DETR model)"),nje.forEach(t),l$o=i(x),P_=n(x,"LI",{});var sje=s(P_);$_e=n(sje,"STRONG",{});var I$t=s($_e);i$o=r(I$t,"convbert"),I$t.forEach(t),d$o=r(sje," \u2014 "),HV=n(sje,"A",{href:!0});var N$t=s(HV);c$o=r(N$t,"ConvBertModel"),N$t.forEach(t),f$o=r(sje," (ConvBERT model)"),sje.forEach(t),m$o=i(x),B_=n(x,"LI",{});var lje=s(B_);k_e=n(lje,"STRONG",{});var q$t=s(k_e);g$o=r(q$t,"convnext"),q$t.forEach(t),h$o=r(lje," \u2014 "),JV=n(lje,"A",{href:!0});var j$t=s(JV);u$o=r(j$t,"ConvNextModel"),j$t.forEach(t),p$o=r(lje," (ConvNeXT model)"),lje.forEach(t),_$o=i(x),I_=n(x,"LI",{});var ije=s(I_);S_e=n(ije,"STRONG",{});var D$t=s(S_e);v$o=r(D$t,"ctrl"),D$t.forEach(t),b$o=r(ije," \u2014 "),YV=n(ije,"A",{href:!0});var G$t=s(YV);F$o=r(G$t,"CTRLModel"),G$t.forEach(t),T$o=r(ije," (CTRL model)"),ije.forEach(t),M$o=i(x),N_=n(x,"LI",{});var dje=s(N_);R_e=n(dje,"STRONG",{});var O$t=s(R_e);E$o=r(O$t,"cvt"),O$t.forEach(t),C$o=r(dje," \u2014 "),ZV=n(dje,"A",{href:!0});var V$t=s(ZV);w$o=r(V$t,"CvtModel"),V$t.forEach(t),A$o=r(dje," (CvT model)"),dje.forEach(t),L$o=i(x),q_=n(x,"LI",{});var cje=s(q_);P_e=n(cje,"STRONG",{});var X$t=s(P_e);y$o=r(X$t,"data2vec-audio"),X$t.forEach(t),x$o=r(cje," \u2014 "),KV=n(cje,"A",{href:!0});var z$t=s(KV);$$o=r(z$t,"Data2VecAudioModel"),z$t.forEach(t),k$o=r(cje," (Data2VecAudio model)"),cje.forEach(t),S$o=i(x),j_=n(x,"LI",{});var fje=s(j_);B_e=n(fje,"STRONG",{});var Q$t=s(B_e);R$o=r(Q$t,"data2vec-text"),Q$t.forEach(t),P$o=r(fje," \u2014 "),eX=n(fje,"A",{href:!0});var W$t=s(eX);B$o=r(W$t,"Data2VecTextModel"),W$t.forEach(t),I$o=r(fje," (Data2VecText model)"),fje.forEach(t),N$o=i(x),D_=n(x,"LI",{});var mje=s(D_);I_e=n(mje,"STRONG",{});var U$t=s(I_e);q$o=r(U$t,"data2vec-vision"),U$t.forEach(t),j$o=r(mje," \u2014 "),oX=n(mje,"A",{href:!0});var H$t=s(oX);D$o=r(H$t,"Data2VecVisionModel"),H$t.forEach(t),G$o=r(mje," (Data2VecVision model)"),mje.forEach(t),O$o=i(x),G_=n(x,"LI",{});var gje=s(G_);N_e=n(gje,"STRONG",{});var J$t=s(N_e);V$o=r(J$t,"deberta"),J$t.forEach(t),X$o=r(gje," \u2014 "),rX=n(gje,"A",{href:!0});var Y$t=s(rX);z$o=r(Y$t,"DebertaModel"),Y$t.forEach(t),Q$o=r(gje," (DeBERTa model)"),gje.forEach(t),W$o=i(x),O_=n(x,"LI",{});var hje=s(O_);q_e=n(hje,"STRONG",{});var Z$t=s(q_e);U$o=r(Z$t,"deberta-v2"),Z$t.forEach(t),H$o=r(hje," \u2014 "),tX=n(hje,"A",{href:!0});var K$t=s(tX);J$o=r(K$t,"DebertaV2Model"),K$t.forEach(t),Y$o=r(hje," (DeBERTa-v2 model)"),hje.forEach(t),Z$o=i(x),V_=n(x,"LI",{});var uje=s(V_);j_e=n(uje,"STRONG",{});var ekt=s(j_e);K$o=r(ekt,"decision_transformer"),ekt.forEach(t),eko=r(uje," \u2014 "),aX=n(uje,"A",{href:!0});var okt=s(aX);oko=r(okt,"DecisionTransformerModel"),okt.forEach(t),rko=r(uje," (Decision Transformer model)"),uje.forEach(t),tko=i(x),X_=n(x,"LI",{});var pje=s(X_);D_e=n(pje,"STRONG",{});var rkt=s(D_e);ako=r(rkt,"deformable_detr"),rkt.forEach(t),nko=r(pje," \u2014 "),nX=n(pje,"A",{href:!0});var tkt=s(nX);sko=r(tkt,"DeformableDetrModel"),tkt.forEach(t),lko=r(pje," (Deformable DETR model)"),pje.forEach(t),iko=i(x),z_=n(x,"LI",{});var _je=s(z_);G_e=n(_je,"STRONG",{});var akt=s(G_e);dko=r(akt,"deit"),akt.forEach(t),cko=r(_je," \u2014 "),sX=n(_je,"A",{href:!0});var nkt=s(sX);fko=r(nkt,"DeiTModel"),nkt.forEach(t),mko=r(_je," (DeiT model)"),_je.forEach(t),gko=i(x),Q_=n(x,"LI",{});var vje=s(Q_);O_e=n(vje,"STRONG",{});var skt=s(O_e);hko=r(skt,"detr"),skt.forEach(t),uko=r(vje," \u2014 "),lX=n(vje,"A",{href:!0});var lkt=s(lX);pko=r(lkt,"DetrModel"),lkt.forEach(t),_ko=r(vje," (DETR model)"),vje.forEach(t),vko=i(x),W_=n(x,"LI",{});var bje=s(W_);V_e=n(bje,"STRONG",{});var ikt=s(V_e);bko=r(ikt,"distilbert"),ikt.forEach(t),Fko=r(bje," \u2014 "),iX=n(bje,"A",{href:!0});var dkt=s(iX);Tko=r(dkt,"DistilBertModel"),dkt.forEach(t),Mko=r(bje," (DistilBERT model)"),bje.forEach(t),Eko=i(x),U_=n(x,"LI",{});var Fje=s(U_);X_e=n(Fje,"STRONG",{});var ckt=s(X_e);Cko=r(ckt,"donut-swin"),ckt.forEach(t),wko=r(Fje," \u2014 "),dX=n(Fje,"A",{href:!0});var fkt=s(dX);Ako=r(fkt,"DonutSwinModel"),fkt.forEach(t),Lko=r(Fje," (DonutSwin model)"),Fje.forEach(t),yko=i(x),H_=n(x,"LI",{});var Tje=s(H_);z_e=n(Tje,"STRONG",{});var mkt=s(z_e);xko=r(mkt,"dpr"),mkt.forEach(t),$ko=r(Tje," \u2014 "),cX=n(Tje,"A",{href:!0});var gkt=s(cX);kko=r(gkt,"DPRQuestionEncoder"),gkt.forEach(t),Sko=r(Tje," (DPR model)"),Tje.forEach(t),Rko=i(x),J_=n(x,"LI",{});var Mje=s(J_);Q_e=n(Mje,"STRONG",{});var hkt=s(Q_e);Pko=r(hkt,"dpt"),hkt.forEach(t),Bko=r(Mje," \u2014 "),fX=n(Mje,"A",{href:!0});var ukt=s(fX);Iko=r(ukt,"DPTModel"),ukt.forEach(t),Nko=r(Mje," (DPT model)"),Mje.forEach(t),qko=i(x),Y_=n(x,"LI",{});var Eje=s(Y_);W_e=n(Eje,"STRONG",{});var pkt=s(W_e);jko=r(pkt,"electra"),pkt.forEach(t),Dko=r(Eje," \u2014 "),mX=n(Eje,"A",{href:!0});var _kt=s(mX);Gko=r(_kt,"ElectraModel"),_kt.forEach(t),Oko=r(Eje," (ELECTRA model)"),Eje.forEach(t),Vko=i(x),Z_=n(x,"LI",{});var Cje=s(Z_);U_e=n(Cje,"STRONG",{});var vkt=s(U_e);Xko=r(vkt,"ernie"),vkt.forEach(t),zko=r(Cje," \u2014 "),gX=n(Cje,"A",{href:!0});var bkt=s(gX);Qko=r(bkt,"ErnieModel"),bkt.forEach(t),Wko=r(Cje," (ERNIE model)"),Cje.forEach(t),Uko=i(x),K_=n(x,"LI",{});var wje=s(K_);H_e=n(wje,"STRONG",{});var Fkt=s(H_e);Hko=r(Fkt,"esm"),Fkt.forEach(t),Jko=r(wje," \u2014 "),hX=n(wje,"A",{href:!0});var Tkt=s(hX);Yko=r(Tkt,"EsmModel"),Tkt.forEach(t),Zko=r(wje," (ESM model)"),wje.forEach(t),Kko=i(x),e2=n(x,"LI",{});var Aje=s(e2);J_e=n(Aje,"STRONG",{});var Mkt=s(J_e);eSo=r(Mkt,"flaubert"),Mkt.forEach(t),oSo=r(Aje," \u2014 "),uX=n(Aje,"A",{href:!0});var Ekt=s(uX);rSo=r(Ekt,"FlaubertModel"),Ekt.forEach(t),tSo=r(Aje," (FlauBERT model)"),Aje.forEach(t),aSo=i(x),o2=n(x,"LI",{});var Lje=s(o2);Y_e=n(Lje,"STRONG",{});var Ckt=s(Y_e);nSo=r(Ckt,"flava"),Ckt.forEach(t),sSo=r(Lje," \u2014 "),pX=n(Lje,"A",{href:!0});var wkt=s(pX);lSo=r(wkt,"FlavaModel"),wkt.forEach(t),iSo=r(Lje," (FLAVA model)"),Lje.forEach(t),dSo=i(x),r2=n(x,"LI",{});var yje=s(r2);Z_e=n(yje,"STRONG",{});var Akt=s(Z_e);cSo=r(Akt,"fnet"),Akt.forEach(t),fSo=r(yje," \u2014 "),_X=n(yje,"A",{href:!0});var Lkt=s(_X);mSo=r(Lkt,"FNetModel"),Lkt.forEach(t),gSo=r(yje," (FNet model)"),yje.forEach(t),hSo=i(x),t2=n(x,"LI",{});var xje=s(t2);K_e=n(xje,"STRONG",{});var ykt=s(K_e);uSo=r(ykt,"fsmt"),ykt.forEach(t),pSo=r(xje," \u2014 "),vX=n(xje,"A",{href:!0});var xkt=s(vX);_So=r(xkt,"FSMTModel"),xkt.forEach(t),vSo=r(xje," (FairSeq Machine-Translation model)"),xje.forEach(t),bSo=i(x),Ml=n(x,"LI",{});var yI=s(Ml);e2e=n(yI,"STRONG",{});var $kt=s(e2e);FSo=r($kt,"funnel"),$kt.forEach(t),TSo=r(yI," \u2014 "),bX=n(yI,"A",{href:!0});var kkt=s(bX);MSo=r(kkt,"FunnelModel"),kkt.forEach(t),ESo=r(yI," or "),FX=n(yI,"A",{href:!0});var Skt=s(FX);CSo=r(Skt,"FunnelBaseModel"),Skt.forEach(t),wSo=r(yI," (Funnel Transformer model)"),yI.forEach(t),ASo=i(x),a2=n(x,"LI",{});var $je=s(a2);o2e=n($je,"STRONG",{});var Rkt=s(o2e);LSo=r(Rkt,"glpn"),Rkt.forEach(t),ySo=r($je," \u2014 "),TX=n($je,"A",{href:!0});var Pkt=s(TX);xSo=r(Pkt,"GLPNModel"),Pkt.forEach(t),$So=r($je," (GLPN model)"),$je.forEach(t),kSo=i(x),n2=n(x,"LI",{});var kje=s(n2);r2e=n(kje,"STRONG",{});var Bkt=s(r2e);SSo=r(Bkt,"gpt2"),Bkt.forEach(t),RSo=r(kje," \u2014 "),MX=n(kje,"A",{href:!0});var Ikt=s(MX);PSo=r(Ikt,"GPT2Model"),Ikt.forEach(t),BSo=r(kje," (OpenAI GPT-2 model)"),kje.forEach(t),ISo=i(x),s2=n(x,"LI",{});var Sje=s(s2);t2e=n(Sje,"STRONG",{});var Nkt=s(t2e);NSo=r(Nkt,"gpt_neo"),Nkt.forEach(t),qSo=r(Sje," \u2014 "),EX=n(Sje,"A",{href:!0});var qkt=s(EX);jSo=r(qkt,"GPTNeoModel"),qkt.forEach(t),DSo=r(Sje," (GPT Neo model)"),Sje.forEach(t),GSo=i(x),l2=n(x,"LI",{});var Rje=s(l2);a2e=n(Rje,"STRONG",{});var jkt=s(a2e);OSo=r(jkt,"gpt_neox"),jkt.forEach(t),VSo=r(Rje," \u2014 "),CX=n(Rje,"A",{href:!0});var Dkt=s(CX);XSo=r(Dkt,"GPTNeoXModel"),Dkt.forEach(t),zSo=r(Rje," (GPT NeoX model)"),Rje.forEach(t),QSo=i(x),i2=n(x,"LI",{});var Pje=s(i2);n2e=n(Pje,"STRONG",{});var Gkt=s(n2e);WSo=r(Gkt,"gpt_neox_japanese"),Gkt.forEach(t),USo=r(Pje," \u2014 "),wX=n(Pje,"A",{href:!0});var Okt=s(wX);HSo=r(Okt,"GPTNeoXJapaneseModel"),Okt.forEach(t),JSo=r(Pje," (GPT NeoX Japanese model)"),Pje.forEach(t),YSo=i(x),d2=n(x,"LI",{});var Bje=s(d2);s2e=n(Bje,"STRONG",{});var Vkt=s(s2e);ZSo=r(Vkt,"gptj"),Vkt.forEach(t),KSo=r(Bje," \u2014 "),AX=n(Bje,"A",{href:!0});var Xkt=s(AX);eRo=r(Xkt,"GPTJModel"),Xkt.forEach(t),oRo=r(Bje," (GPT-J model)"),Bje.forEach(t),rRo=i(x),c2=n(x,"LI",{});var Ije=s(c2);l2e=n(Ije,"STRONG",{});var zkt=s(l2e);tRo=r(zkt,"groupvit"),zkt.forEach(t),aRo=r(Ije," \u2014 "),LX=n(Ije,"A",{href:!0});var Qkt=s(LX);nRo=r(Qkt,"GroupViTModel"),Qkt.forEach(t),sRo=r(Ije," (GroupViT model)"),Ije.forEach(t),lRo=i(x),f2=n(x,"LI",{});var Nje=s(f2);i2e=n(Nje,"STRONG",{});var Wkt=s(i2e);iRo=r(Wkt,"hubert"),Wkt.forEach(t),dRo=r(Nje," \u2014 "),yX=n(Nje,"A",{href:!0});var Ukt=s(yX);cRo=r(Ukt,"HubertModel"),Ukt.forEach(t),fRo=r(Nje," (Hubert model)"),Nje.forEach(t),mRo=i(x),m2=n(x,"LI",{});var qje=s(m2);d2e=n(qje,"STRONG",{});var Hkt=s(d2e);gRo=r(Hkt,"ibert"),Hkt.forEach(t),hRo=r(qje," \u2014 "),xX=n(qje,"A",{href:!0});var Jkt=s(xX);uRo=r(Jkt,"IBertModel"),Jkt.forEach(t),pRo=r(qje," (I-BERT model)"),qje.forEach(t),_Ro=i(x),g2=n(x,"LI",{});var jje=s(g2);c2e=n(jje,"STRONG",{});var Ykt=s(c2e);vRo=r(Ykt,"imagegpt"),Ykt.forEach(t),bRo=r(jje," \u2014 "),$X=n(jje,"A",{href:!0});var Zkt=s($X);FRo=r(Zkt,"ImageGPTModel"),Zkt.forEach(t),TRo=r(jje," (ImageGPT model)"),jje.forEach(t),MRo=i(x),h2=n(x,"LI",{});var Dje=s(h2);f2e=n(Dje,"STRONG",{});var Kkt=s(f2e);ERo=r(Kkt,"layoutlm"),Kkt.forEach(t),CRo=r(Dje," \u2014 "),kX=n(Dje,"A",{href:!0});var eSt=s(kX);wRo=r(eSt,"LayoutLMModel"),eSt.forEach(t),ARo=r(Dje," (LayoutLM model)"),Dje.forEach(t),LRo=i(x),u2=n(x,"LI",{});var Gje=s(u2);m2e=n(Gje,"STRONG",{});var oSt=s(m2e);yRo=r(oSt,"layoutlmv2"),oSt.forEach(t),xRo=r(Gje," \u2014 "),SX=n(Gje,"A",{href:!0});var rSt=s(SX);$Ro=r(rSt,"LayoutLMv2Model"),rSt.forEach(t),kRo=r(Gje," (LayoutLMv2 model)"),Gje.forEach(t),SRo=i(x),p2=n(x,"LI",{});var Oje=s(p2);g2e=n(Oje,"STRONG",{});var tSt=s(g2e);RRo=r(tSt,"layoutlmv3"),tSt.forEach(t),PRo=r(Oje," \u2014 "),RX=n(Oje,"A",{href:!0});var aSt=s(RX);BRo=r(aSt,"LayoutLMv3Model"),aSt.forEach(t),IRo=r(Oje," (LayoutLMv3 model)"),Oje.forEach(t),NRo=i(x),_2=n(x,"LI",{});var Vje=s(_2);h2e=n(Vje,"STRONG",{});var nSt=s(h2e);qRo=r(nSt,"led"),nSt.forEach(t),jRo=r(Vje," \u2014 "),PX=n(Vje,"A",{href:!0});var sSt=s(PX);DRo=r(sSt,"LEDModel"),sSt.forEach(t),GRo=r(Vje," (LED model)"),Vje.forEach(t),ORo=i(x),v2=n(x,"LI",{});var Xje=s(v2);u2e=n(Xje,"STRONG",{});var lSt=s(u2e);VRo=r(lSt,"levit"),lSt.forEach(t),XRo=r(Xje," \u2014 "),BX=n(Xje,"A",{href:!0});var iSt=s(BX);zRo=r(iSt,"LevitModel"),iSt.forEach(t),QRo=r(Xje," (LeViT model)"),Xje.forEach(t),WRo=i(x),b2=n(x,"LI",{});var zje=s(b2);p2e=n(zje,"STRONG",{});var dSt=s(p2e);URo=r(dSt,"longformer"),dSt.forEach(t),HRo=r(zje," \u2014 "),IX=n(zje,"A",{href:!0});var cSt=s(IX);JRo=r(cSt,"LongformerModel"),cSt.forEach(t),YRo=r(zje," (Longformer model)"),zje.forEach(t),ZRo=i(x),F2=n(x,"LI",{});var Qje=s(F2);_2e=n(Qje,"STRONG",{});var fSt=s(_2e);KRo=r(fSt,"longt5"),fSt.forEach(t),ePo=r(Qje," \u2014 "),NX=n(Qje,"A",{href:!0});var mSt=s(NX);oPo=r(mSt,"LongT5Model"),mSt.forEach(t),rPo=r(Qje," (LongT5 model)"),Qje.forEach(t),tPo=i(x),T2=n(x,"LI",{});var Wje=s(T2);v2e=n(Wje,"STRONG",{});var gSt=s(v2e);aPo=r(gSt,"luke"),gSt.forEach(t),nPo=r(Wje," \u2014 "),qX=n(Wje,"A",{href:!0});var hSt=s(qX);sPo=r(hSt,"LukeModel"),hSt.forEach(t),lPo=r(Wje," (LUKE model)"),Wje.forEach(t),iPo=i(x),M2=n(x,"LI",{});var Uje=s(M2);b2e=n(Uje,"STRONG",{});var uSt=s(b2e);dPo=r(uSt,"lxmert"),uSt.forEach(t),cPo=r(Uje," \u2014 "),jX=n(Uje,"A",{href:!0});var pSt=s(jX);fPo=r(pSt,"LxmertModel"),pSt.forEach(t),mPo=r(Uje," (LXMERT model)"),Uje.forEach(t),gPo=i(x),E2=n(x,"LI",{});var Hje=s(E2);F2e=n(Hje,"STRONG",{});var _St=s(F2e);hPo=r(_St,"m2m_100"),_St.forEach(t),uPo=r(Hje," \u2014 "),DX=n(Hje,"A",{href:!0});var vSt=s(DX);pPo=r(vSt,"M2M100Model"),vSt.forEach(t),_Po=r(Hje," (M2M100 model)"),Hje.forEach(t),vPo=i(x),C2=n(x,"LI",{});var Jje=s(C2);T2e=n(Jje,"STRONG",{});var bSt=s(T2e);bPo=r(bSt,"marian"),bSt.forEach(t),FPo=r(Jje," \u2014 "),GX=n(Jje,"A",{href:!0});var FSt=s(GX);TPo=r(FSt,"MarianModel"),FSt.forEach(t),MPo=r(Jje," (Marian model)"),Jje.forEach(t),EPo=i(x),w2=n(x,"LI",{});var Yje=s(w2);M2e=n(Yje,"STRONG",{});var TSt=s(M2e);CPo=r(TSt,"markuplm"),TSt.forEach(t),wPo=r(Yje," \u2014 "),OX=n(Yje,"A",{href:!0});var MSt=s(OX);APo=r(MSt,"MarkupLMModel"),MSt.forEach(t),LPo=r(Yje," (MarkupLM model)"),Yje.forEach(t),yPo=i(x),A2=n(x,"LI",{});var Zje=s(A2);E2e=n(Zje,"STRONG",{});var ESt=s(E2e);xPo=r(ESt,"maskformer"),ESt.forEach(t),$Po=r(Zje," \u2014 "),VX=n(Zje,"A",{href:!0});var CSt=s(VX);kPo=r(CSt,"MaskFormerModel"),CSt.forEach(t),SPo=r(Zje," (MaskFormer model)"),Zje.forEach(t),RPo=i(x),L2=n(x,"LI",{});var Kje=s(L2);C2e=n(Kje,"STRONG",{});var wSt=s(C2e);PPo=r(wSt,"mbart"),wSt.forEach(t),BPo=r(Kje," \u2014 "),XX=n(Kje,"A",{href:!0});var ASt=s(XX);IPo=r(ASt,"MBartModel"),ASt.forEach(t),NPo=r(Kje," (mBART model)"),Kje.forEach(t),qPo=i(x),y2=n(x,"LI",{});var eDe=s(y2);w2e=n(eDe,"STRONG",{});var LSt=s(w2e);jPo=r(LSt,"mctct"),LSt.forEach(t),DPo=r(eDe," \u2014 "),zX=n(eDe,"A",{href:!0});var ySt=s(zX);GPo=r(ySt,"MCTCTModel"),ySt.forEach(t),OPo=r(eDe," (M-CTC-T model)"),eDe.forEach(t),VPo=i(x),x2=n(x,"LI",{});var oDe=s(x2);A2e=n(oDe,"STRONG",{});var xSt=s(A2e);XPo=r(xSt,"megatron-bert"),xSt.forEach(t),zPo=r(oDe," \u2014 "),QX=n(oDe,"A",{href:!0});var $St=s(QX);QPo=r($St,"MegatronBertModel"),$St.forEach(t),WPo=r(oDe," (Megatron-BERT model)"),oDe.forEach(t),UPo=i(x),$2=n(x,"LI",{});var rDe=s($2);L2e=n(rDe,"STRONG",{});var kSt=s(L2e);HPo=r(kSt,"mobilebert"),kSt.forEach(t),JPo=r(rDe," \u2014 "),WX=n(rDe,"A",{href:!0});var SSt=s(WX);YPo=r(SSt,"MobileBertModel"),SSt.forEach(t),ZPo=r(rDe," (MobileBERT model)"),rDe.forEach(t),KPo=i(x),k2=n(x,"LI",{});var tDe=s(k2);y2e=n(tDe,"STRONG",{});var RSt=s(y2e);eBo=r(RSt,"mobilevit"),RSt.forEach(t),oBo=r(tDe," \u2014 "),UX=n(tDe,"A",{href:!0});var PSt=s(UX);rBo=r(PSt,"MobileViTModel"),PSt.forEach(t),tBo=r(tDe," (MobileViT model)"),tDe.forEach(t),aBo=i(x),S2=n(x,"LI",{});var aDe=s(S2);x2e=n(aDe,"STRONG",{});var BSt=s(x2e);nBo=r(BSt,"mpnet"),BSt.forEach(t),sBo=r(aDe," \u2014 "),HX=n(aDe,"A",{href:!0});var ISt=s(HX);lBo=r(ISt,"MPNetModel"),ISt.forEach(t),iBo=r(aDe," (MPNet model)"),aDe.forEach(t),dBo=i(x),R2=n(x,"LI",{});var nDe=s(R2);$2e=n(nDe,"STRONG",{});var NSt=s($2e);cBo=r(NSt,"mt5"),NSt.forEach(t),fBo=r(nDe," \u2014 "),JX=n(nDe,"A",{href:!0});var qSt=s(JX);mBo=r(qSt,"MT5Model"),qSt.forEach(t),gBo=r(nDe," (MT5 model)"),nDe.forEach(t),hBo=i(x),P2=n(x,"LI",{});var sDe=s(P2);k2e=n(sDe,"STRONG",{});var jSt=s(k2e);uBo=r(jSt,"mvp"),jSt.forEach(t),pBo=r(sDe," \u2014 "),YX=n(sDe,"A",{href:!0});var DSt=s(YX);_Bo=r(DSt,"MvpModel"),DSt.forEach(t),vBo=r(sDe," (MVP model)"),sDe.forEach(t),bBo=i(x),B2=n(x,"LI",{});var lDe=s(B2);S2e=n(lDe,"STRONG",{});var GSt=s(S2e);FBo=r(GSt,"nezha"),GSt.forEach(t),TBo=r(lDe," \u2014 "),ZX=n(lDe,"A",{href:!0});var OSt=s(ZX);MBo=r(OSt,"NezhaModel"),OSt.forEach(t),EBo=r(lDe," (Nezha model)"),lDe.forEach(t),CBo=i(x),I2=n(x,"LI",{});var iDe=s(I2);R2e=n(iDe,"STRONG",{});var VSt=s(R2e);wBo=r(VSt,"nllb"),VSt.forEach(t),ABo=r(iDe," \u2014 "),KX=n(iDe,"A",{href:!0});var XSt=s(KX);LBo=r(XSt,"M2M100Model"),XSt.forEach(t),yBo=r(iDe," (NLLB model)"),iDe.forEach(t),xBo=i(x),N2=n(x,"LI",{});var dDe=s(N2);P2e=n(dDe,"STRONG",{});var zSt=s(P2e);$Bo=r(zSt,"nystromformer"),zSt.forEach(t),kBo=r(dDe," \u2014 "),ez=n(dDe,"A",{href:!0});var QSt=s(ez);SBo=r(QSt,"NystromformerModel"),QSt.forEach(t),RBo=r(dDe," (Nystr\xF6mformer model)"),dDe.forEach(t),PBo=i(x),q2=n(x,"LI",{});var cDe=s(q2);B2e=n(cDe,"STRONG",{});var WSt=s(B2e);BBo=r(WSt,"openai-gpt"),WSt.forEach(t),IBo=r(cDe," \u2014 "),oz=n(cDe,"A",{href:!0});var USt=s(oz);NBo=r(USt,"OpenAIGPTModel"),USt.forEach(t),qBo=r(cDe," (OpenAI GPT model)"),cDe.forEach(t),jBo=i(x),j2=n(x,"LI",{});var fDe=s(j2);I2e=n(fDe,"STRONG",{});var HSt=s(I2e);DBo=r(HSt,"opt"),HSt.forEach(t),GBo=r(fDe," \u2014 "),rz=n(fDe,"A",{href:!0});var JSt=s(rz);OBo=r(JSt,"OPTModel"),JSt.forEach(t),VBo=r(fDe," (OPT model)"),fDe.forEach(t),XBo=i(x),D2=n(x,"LI",{});var mDe=s(D2);N2e=n(mDe,"STRONG",{});var YSt=s(N2e);zBo=r(YSt,"owlvit"),YSt.forEach(t),QBo=r(mDe," \u2014 "),tz=n(mDe,"A",{href:!0});var ZSt=s(tz);WBo=r(ZSt,"OwlViTModel"),ZSt.forEach(t),UBo=r(mDe," (OWL-ViT model)"),mDe.forEach(t),HBo=i(x),G2=n(x,"LI",{});var gDe=s(G2);q2e=n(gDe,"STRONG",{});var KSt=s(q2e);JBo=r(KSt,"pegasus"),KSt.forEach(t),YBo=r(gDe," \u2014 "),az=n(gDe,"A",{href:!0});var eRt=s(az);ZBo=r(eRt,"PegasusModel"),eRt.forEach(t),KBo=r(gDe," (Pegasus model)"),gDe.forEach(t),eIo=i(x),O2=n(x,"LI",{});var hDe=s(O2);j2e=n(hDe,"STRONG",{});var oRt=s(j2e);oIo=r(oRt,"pegasus_x"),oRt.forEach(t),rIo=r(hDe," \u2014 "),nz=n(hDe,"A",{href:!0});var rRt=s(nz);tIo=r(rRt,"PegasusXModel"),rRt.forEach(t),aIo=r(hDe," (PEGASUS-X model)"),hDe.forEach(t),nIo=i(x),V2=n(x,"LI",{});var uDe=s(V2);D2e=n(uDe,"STRONG",{});var tRt=s(D2e);sIo=r(tRt,"perceiver"),tRt.forEach(t),lIo=r(uDe," \u2014 "),sz=n(uDe,"A",{href:!0});var aRt=s(sz);iIo=r(aRt,"PerceiverModel"),aRt.forEach(t),dIo=r(uDe," (Perceiver model)"),uDe.forEach(t),cIo=i(x),X2=n(x,"LI",{});var pDe=s(X2);G2e=n(pDe,"STRONG",{});var nRt=s(G2e);fIo=r(nRt,"plbart"),nRt.forEach(t),mIo=r(pDe," \u2014 "),lz=n(pDe,"A",{href:!0});var sRt=s(lz);gIo=r(sRt,"PLBartModel"),sRt.forEach(t),hIo=r(pDe," (PLBart model)"),pDe.forEach(t),uIo=i(x),z2=n(x,"LI",{});var _De=s(z2);O2e=n(_De,"STRONG",{});var lRt=s(O2e);pIo=r(lRt,"poolformer"),lRt.forEach(t),_Io=r(_De," \u2014 "),iz=n(_De,"A",{href:!0});var iRt=s(iz);vIo=r(iRt,"PoolFormerModel"),iRt.forEach(t),bIo=r(_De," (PoolFormer model)"),_De.forEach(t),FIo=i(x),Q2=n(x,"LI",{});var vDe=s(Q2);V2e=n(vDe,"STRONG",{});var dRt=s(V2e);TIo=r(dRt,"prophetnet"),dRt.forEach(t),MIo=r(vDe," \u2014 "),dz=n(vDe,"A",{href:!0});var cRt=s(dz);EIo=r(cRt,"ProphetNetModel"),cRt.forEach(t),CIo=r(vDe," (ProphetNet model)"),vDe.forEach(t),wIo=i(x),W2=n(x,"LI",{});var bDe=s(W2);X2e=n(bDe,"STRONG",{});var fRt=s(X2e);AIo=r(fRt,"qdqbert"),fRt.forEach(t),LIo=r(bDe," \u2014 "),cz=n(bDe,"A",{href:!0});var mRt=s(cz);yIo=r(mRt,"QDQBertModel"),mRt.forEach(t),xIo=r(bDe," (QDQBert model)"),bDe.forEach(t),$Io=i(x),U2=n(x,"LI",{});var FDe=s(U2);z2e=n(FDe,"STRONG",{});var gRt=s(z2e);kIo=r(gRt,"reformer"),gRt.forEach(t),SIo=r(FDe," \u2014 "),fz=n(FDe,"A",{href:!0});var hRt=s(fz);RIo=r(hRt,"ReformerModel"),hRt.forEach(t),PIo=r(FDe," (Reformer model)"),FDe.forEach(t),BIo=i(x),H2=n(x,"LI",{});var TDe=s(H2);Q2e=n(TDe,"STRONG",{});var uRt=s(Q2e);IIo=r(uRt,"regnet"),uRt.forEach(t),NIo=r(TDe," \u2014 "),mz=n(TDe,"A",{href:!0});var pRt=s(mz);qIo=r(pRt,"RegNetModel"),pRt.forEach(t),jIo=r(TDe," (RegNet model)"),TDe.forEach(t),DIo=i(x),J2=n(x,"LI",{});var MDe=s(J2);W2e=n(MDe,"STRONG",{});var _Rt=s(W2e);GIo=r(_Rt,"rembert"),_Rt.forEach(t),OIo=r(MDe," \u2014 "),gz=n(MDe,"A",{href:!0});var vRt=s(gz);VIo=r(vRt,"RemBertModel"),vRt.forEach(t),XIo=r(MDe," (RemBERT model)"),MDe.forEach(t),zIo=i(x),Y2=n(x,"LI",{});var EDe=s(Y2);U2e=n(EDe,"STRONG",{});var bRt=s(U2e);QIo=r(bRt,"resnet"),bRt.forEach(t),WIo=r(EDe," \u2014 "),hz=n(EDe,"A",{href:!0});var FRt=s(hz);UIo=r(FRt,"ResNetModel"),FRt.forEach(t),HIo=r(EDe," (ResNet model)"),EDe.forEach(t),JIo=i(x),Z2=n(x,"LI",{});var CDe=s(Z2);H2e=n(CDe,"STRONG",{});var TRt=s(H2e);YIo=r(TRt,"retribert"),TRt.forEach(t),ZIo=r(CDe," \u2014 "),uz=n(CDe,"A",{href:!0});var MRt=s(uz);KIo=r(MRt,"RetriBertModel"),MRt.forEach(t),eNo=r(CDe," (RetriBERT model)"),CDe.forEach(t),oNo=i(x),K2=n(x,"LI",{});var wDe=s(K2);J2e=n(wDe,"STRONG",{});var ERt=s(J2e);rNo=r(ERt,"roberta"),ERt.forEach(t),tNo=r(wDe," \u2014 "),pz=n(wDe,"A",{href:!0});var CRt=s(pz);aNo=r(CRt,"RobertaModel"),CRt.forEach(t),nNo=r(wDe," (RoBERTa model)"),wDe.forEach(t),sNo=i(x),ev=n(x,"LI",{});var ADe=s(ev);Y2e=n(ADe,"STRONG",{});var wRt=s(Y2e);lNo=r(wRt,"roformer"),wRt.forEach(t),iNo=r(ADe," \u2014 "),_z=n(ADe,"A",{href:!0});var ARt=s(_z);dNo=r(ARt,"RoFormerModel"),ARt.forEach(t),cNo=r(ADe," (RoFormer model)"),ADe.forEach(t),fNo=i(x),ov=n(x,"LI",{});var LDe=s(ov);Z2e=n(LDe,"STRONG",{});var LRt=s(Z2e);mNo=r(LRt,"segformer"),LRt.forEach(t),gNo=r(LDe," \u2014 "),vz=n(LDe,"A",{href:!0});var yRt=s(vz);hNo=r(yRt,"SegformerModel"),yRt.forEach(t),uNo=r(LDe," (SegFormer model)"),LDe.forEach(t),pNo=i(x),rv=n(x,"LI",{});var yDe=s(rv);K2e=n(yDe,"STRONG",{});var xRt=s(K2e);_No=r(xRt,"sew"),xRt.forEach(t),vNo=r(yDe," \u2014 "),bz=n(yDe,"A",{href:!0});var $Rt=s(bz);bNo=r($Rt,"SEWModel"),$Rt.forEach(t),FNo=r(yDe," (SEW model)"),yDe.forEach(t),TNo=i(x),tv=n(x,"LI",{});var xDe=s(tv);eve=n(xDe,"STRONG",{});var kRt=s(eve);MNo=r(kRt,"sew-d"),kRt.forEach(t),ENo=r(xDe," \u2014 "),Fz=n(xDe,"A",{href:!0});var SRt=s(Fz);CNo=r(SRt,"SEWDModel"),SRt.forEach(t),wNo=r(xDe," (SEW-D model)"),xDe.forEach(t),ANo=i(x),av=n(x,"LI",{});var $De=s(av);ove=n($De,"STRONG",{});var RRt=s(ove);LNo=r(RRt,"speech_to_text"),RRt.forEach(t),yNo=r($De," \u2014 "),Tz=n($De,"A",{href:!0});var PRt=s(Tz);xNo=r(PRt,"Speech2TextModel"),PRt.forEach(t),$No=r($De," (Speech2Text model)"),$De.forEach(t),kNo=i(x),nv=n(x,"LI",{});var kDe=s(nv);rve=n(kDe,"STRONG",{});var BRt=s(rve);SNo=r(BRt,"splinter"),BRt.forEach(t),RNo=r(kDe," \u2014 "),Mz=n(kDe,"A",{href:!0});var IRt=s(Mz);PNo=r(IRt,"SplinterModel"),IRt.forEach(t),BNo=r(kDe," (Splinter model)"),kDe.forEach(t),INo=i(x),sv=n(x,"LI",{});var SDe=s(sv);tve=n(SDe,"STRONG",{});var NRt=s(tve);NNo=r(NRt,"squeezebert"),NRt.forEach(t),qNo=r(SDe," \u2014 "),Ez=n(SDe,"A",{href:!0});var qRt=s(Ez);jNo=r(qRt,"SqueezeBertModel"),qRt.forEach(t),DNo=r(SDe," (SqueezeBERT model)"),SDe.forEach(t),GNo=i(x),lv=n(x,"LI",{});var RDe=s(lv);ave=n(RDe,"STRONG",{});var jRt=s(ave);ONo=r(jRt,"swin"),jRt.forEach(t),VNo=r(RDe," \u2014 "),Cz=n(RDe,"A",{href:!0});var DRt=s(Cz);XNo=r(DRt,"SwinModel"),DRt.forEach(t),zNo=r(RDe," (Swin Transformer model)"),RDe.forEach(t),QNo=i(x),iv=n(x,"LI",{});var PDe=s(iv);nve=n(PDe,"STRONG",{});var GRt=s(nve);WNo=r(GRt,"swinv2"),GRt.forEach(t),UNo=r(PDe," \u2014 "),wz=n(PDe,"A",{href:!0});var ORt=s(wz);HNo=r(ORt,"Swinv2Model"),ORt.forEach(t),JNo=r(PDe," (Swin Transformer V2 model)"),PDe.forEach(t),YNo=i(x),dv=n(x,"LI",{});var BDe=s(dv);sve=n(BDe,"STRONG",{});var VRt=s(sve);ZNo=r(VRt,"t5"),VRt.forEach(t),KNo=r(BDe," \u2014 "),Az=n(BDe,"A",{href:!0});var XRt=s(Az);eqo=r(XRt,"T5Model"),XRt.forEach(t),oqo=r(BDe," (T5 model)"),BDe.forEach(t),rqo=i(x),cv=n(x,"LI",{});var IDe=s(cv);lve=n(IDe,"STRONG",{});var zRt=s(lve);tqo=r(zRt,"tapas"),zRt.forEach(t),aqo=r(IDe," \u2014 "),Lz=n(IDe,"A",{href:!0});var QRt=s(Lz);nqo=r(QRt,"TapasModel"),QRt.forEach(t),sqo=r(IDe," (TAPAS model)"),IDe.forEach(t),lqo=i(x),fv=n(x,"LI",{});var NDe=s(fv);ive=n(NDe,"STRONG",{});var WRt=s(ive);iqo=r(WRt,"time_series_transformer"),WRt.forEach(t),dqo=r(NDe," \u2014 "),yz=n(NDe,"A",{href:!0});var URt=s(yz);cqo=r(URt,"TimeSeriesTransformerModel"),URt.forEach(t),fqo=r(NDe," (Time Series Transformer model)"),NDe.forEach(t),mqo=i(x),mv=n(x,"LI",{});var qDe=s(mv);dve=n(qDe,"STRONG",{});var HRt=s(dve);gqo=r(HRt,"trajectory_transformer"),HRt.forEach(t),hqo=r(qDe," \u2014 "),xz=n(qDe,"A",{href:!0});var JRt=s(xz);uqo=r(JRt,"TrajectoryTransformerModel"),JRt.forEach(t),pqo=r(qDe," (Trajectory Transformer model)"),qDe.forEach(t),_qo=i(x),gv=n(x,"LI",{});var jDe=s(gv);cve=n(jDe,"STRONG",{});var YRt=s(cve);vqo=r(YRt,"transfo-xl"),YRt.forEach(t),bqo=r(jDe," \u2014 "),$z=n(jDe,"A",{href:!0});var ZRt=s($z);Fqo=r(ZRt,"TransfoXLModel"),ZRt.forEach(t),Tqo=r(jDe," (Transformer-XL model)"),jDe.forEach(t),Mqo=i(x),hv=n(x,"LI",{});var DDe=s(hv);fve=n(DDe,"STRONG",{});var KRt=s(fve);Eqo=r(KRt,"unispeech"),KRt.forEach(t),Cqo=r(DDe," \u2014 "),kz=n(DDe,"A",{href:!0});var ePt=s(kz);wqo=r(ePt,"UniSpeechModel"),ePt.forEach(t),Aqo=r(DDe," (UniSpeech model)"),DDe.forEach(t),Lqo=i(x),uv=n(x,"LI",{});var GDe=s(uv);mve=n(GDe,"STRONG",{});var oPt=s(mve);yqo=r(oPt,"unispeech-sat"),oPt.forEach(t),xqo=r(GDe," \u2014 "),Sz=n(GDe,"A",{href:!0});var rPt=s(Sz);$qo=r(rPt,"UniSpeechSatModel"),rPt.forEach(t),kqo=r(GDe," (UniSpeechSat model)"),GDe.forEach(t),Sqo=i(x),pv=n(x,"LI",{});var ODe=s(pv);gve=n(ODe,"STRONG",{});var tPt=s(gve);Rqo=r(tPt,"van"),tPt.forEach(t),Pqo=r(ODe," \u2014 "),Rz=n(ODe,"A",{href:!0});var aPt=s(Rz);Bqo=r(aPt,"VanModel"),aPt.forEach(t),Iqo=r(ODe," (VAN model)"),ODe.forEach(t),Nqo=i(x),_v=n(x,"LI",{});var VDe=s(_v);hve=n(VDe,"STRONG",{});var nPt=s(hve);qqo=r(nPt,"videomae"),nPt.forEach(t),jqo=r(VDe," \u2014 "),Pz=n(VDe,"A",{href:!0});var sPt=s(Pz);Dqo=r(sPt,"VideoMAEModel"),sPt.forEach(t),Gqo=r(VDe," (VideoMAE model)"),VDe.forEach(t),Oqo=i(x),vv=n(x,"LI",{});var XDe=s(vv);uve=n(XDe,"STRONG",{});var lPt=s(uve);Vqo=r(lPt,"vilt"),lPt.forEach(t),Xqo=r(XDe," \u2014 "),Bz=n(XDe,"A",{href:!0});var iPt=s(Bz);zqo=r(iPt,"ViltModel"),iPt.forEach(t),Qqo=r(XDe," (ViLT model)"),XDe.forEach(t),Wqo=i(x),bv=n(x,"LI",{});var zDe=s(bv);pve=n(zDe,"STRONG",{});var dPt=s(pve);Uqo=r(dPt,"vision-text-dual-encoder"),dPt.forEach(t),Hqo=r(zDe," \u2014 "),Iz=n(zDe,"A",{href:!0});var cPt=s(Iz);Jqo=r(cPt,"VisionTextDualEncoderModel"),cPt.forEach(t),Yqo=r(zDe," (VisionTextDualEncoder model)"),zDe.forEach(t),Zqo=i(x),Fv=n(x,"LI",{});var QDe=s(Fv);_ve=n(QDe,"STRONG",{});var fPt=s(_ve);Kqo=r(fPt,"visual_bert"),fPt.forEach(t),ejo=r(QDe," \u2014 "),Nz=n(QDe,"A",{href:!0});var mPt=s(Nz);ojo=r(mPt,"VisualBertModel"),mPt.forEach(t),rjo=r(QDe," (VisualBERT model)"),QDe.forEach(t),tjo=i(x),Tv=n(x,"LI",{});var WDe=s(Tv);vve=n(WDe,"STRONG",{});var gPt=s(vve);ajo=r(gPt,"vit"),gPt.forEach(t),njo=r(WDe," \u2014 "),qz=n(WDe,"A",{href:!0});var hPt=s(qz);sjo=r(hPt,"ViTModel"),hPt.forEach(t),ljo=r(WDe," (ViT model)"),WDe.forEach(t),ijo=i(x),Mv=n(x,"LI",{});var UDe=s(Mv);bve=n(UDe,"STRONG",{});var uPt=s(bve);djo=r(uPt,"vit_mae"),uPt.forEach(t),cjo=r(UDe," \u2014 "),jz=n(UDe,"A",{href:!0});var pPt=s(jz);fjo=r(pPt,"ViTMAEModel"),pPt.forEach(t),mjo=r(UDe," (ViTMAE model)"),UDe.forEach(t),gjo=i(x),Ev=n(x,"LI",{});var HDe=s(Ev);Fve=n(HDe,"STRONG",{});var _Pt=s(Fve);hjo=r(_Pt,"vit_msn"),_Pt.forEach(t),ujo=r(HDe," \u2014 "),Dz=n(HDe,"A",{href:!0});var vPt=s(Dz);pjo=r(vPt,"ViTMSNModel"),vPt.forEach(t),_jo=r(HDe," (ViTMSN model)"),HDe.forEach(t),vjo=i(x),Cv=n(x,"LI",{});var JDe=s(Cv);Tve=n(JDe,"STRONG",{});var bPt=s(Tve);bjo=r(bPt,"wav2vec2"),bPt.forEach(t),Fjo=r(JDe," \u2014 "),Gz=n(JDe,"A",{href:!0});var FPt=s(Gz);Tjo=r(FPt,"Wav2Vec2Model"),FPt.forEach(t),Mjo=r(JDe," (Wav2Vec2 model)"),JDe.forEach(t),Ejo=i(x),wv=n(x,"LI",{});var YDe=s(wv);Mve=n(YDe,"STRONG",{});var TPt=s(Mve);Cjo=r(TPt,"wav2vec2-conformer"),TPt.forEach(t),wjo=r(YDe," \u2014 "),Oz=n(YDe,"A",{href:!0});var MPt=s(Oz);Ajo=r(MPt,"Wav2Vec2ConformerModel"),MPt.forEach(t),Ljo=r(YDe," (Wav2Vec2-Conformer model)"),YDe.forEach(t),yjo=i(x),Av=n(x,"LI",{});var ZDe=s(Av);Eve=n(ZDe,"STRONG",{});var EPt=s(Eve);xjo=r(EPt,"wavlm"),EPt.forEach(t),$jo=r(ZDe," \u2014 "),Vz=n(ZDe,"A",{href:!0});var CPt=s(Vz);kjo=r(CPt,"WavLMModel"),CPt.forEach(t),Sjo=r(ZDe," (WavLM model)"),ZDe.forEach(t),Rjo=i(x),Lv=n(x,"LI",{});var KDe=s(Lv);Cve=n(KDe,"STRONG",{});var wPt=s(Cve);Pjo=r(wPt,"whisper"),wPt.forEach(t),Bjo=r(KDe," \u2014 "),Xz=n(KDe,"A",{href:!0});var APt=s(Xz);Ijo=r(APt,"WhisperModel"),APt.forEach(t),Njo=r(KDe," (Whisper model)"),KDe.forEach(t),qjo=i(x),yv=n(x,"LI",{});var eGe=s(yv);wve=n(eGe,"STRONG",{});var LPt=s(wve);jjo=r(LPt,"xclip"),LPt.forEach(t),Djo=r(eGe," \u2014 "),zz=n(eGe,"A",{href:!0});var yPt=s(zz);Gjo=r(yPt,"XCLIPModel"),yPt.forEach(t),Ojo=r(eGe," (X-CLIP model)"),eGe.forEach(t),Vjo=i(x),xv=n(x,"LI",{});var oGe=s(xv);Ave=n(oGe,"STRONG",{});var xPt=s(Ave);Xjo=r(xPt,"xglm"),xPt.forEach(t),zjo=r(oGe," \u2014 "),Qz=n(oGe,"A",{href:!0});var $Pt=s(Qz);Qjo=r($Pt,"XGLMModel"),$Pt.forEach(t),Wjo=r(oGe," (XGLM model)"),oGe.forEach(t),Ujo=i(x),$v=n(x,"LI",{});var rGe=s($v);Lve=n(rGe,"STRONG",{});var kPt=s(Lve);Hjo=r(kPt,"xlm"),kPt.forEach(t),Jjo=r(rGe," \u2014 "),Wz=n(rGe,"A",{href:!0});var SPt=s(Wz);Yjo=r(SPt,"XLMModel"),SPt.forEach(t),Zjo=r(rGe," (XLM model)"),rGe.forEach(t),Kjo=i(x),kv=n(x,"LI",{});var tGe=s(kv);yve=n(tGe,"STRONG",{});var RPt=s(yve);eDo=r(RPt,"xlm-prophetnet"),RPt.forEach(t),oDo=r(tGe," \u2014 "),Uz=n(tGe,"A",{href:!0});var PPt=s(Uz);rDo=r(PPt,"XLMProphetNetModel"),PPt.forEach(t),tDo=r(tGe," (XLM-ProphetNet model)"),tGe.forEach(t),aDo=i(x),Sv=n(x,"LI",{});var aGe=s(Sv);xve=n(aGe,"STRONG",{});var BPt=s(xve);nDo=r(BPt,"xlm-roberta"),BPt.forEach(t),sDo=r(aGe," \u2014 "),Hz=n(aGe,"A",{href:!0});var IPt=s(Hz);lDo=r(IPt,"XLMRobertaModel"),IPt.forEach(t),iDo=r(aGe," (XLM-RoBERTa model)"),aGe.forEach(t),dDo=i(x),Rv=n(x,"LI",{});var nGe=s(Rv);$ve=n(nGe,"STRONG",{});var NPt=s($ve);cDo=r(NPt,"xlm-roberta-xl"),NPt.forEach(t),fDo=r(nGe," \u2014 "),Jz=n(nGe,"A",{href:!0});var qPt=s(Jz);mDo=r(qPt,"XLMRobertaXLModel"),qPt.forEach(t),gDo=r(nGe," (XLM-RoBERTa-XL model)"),nGe.forEach(t),hDo=i(x),Pv=n(x,"LI",{});var sGe=s(Pv);kve=n(sGe,"STRONG",{});var jPt=s(kve);uDo=r(jPt,"xlnet"),jPt.forEach(t),pDo=r(sGe," \u2014 "),Yz=n(sGe,"A",{href:!0});var DPt=s(Yz);_Do=r(DPt,"XLNetModel"),DPt.forEach(t),vDo=r(sGe," (XLNet model)"),sGe.forEach(t),bDo=i(x),Bv=n(x,"LI",{});var lGe=s(Bv);Sve=n(lGe,"STRONG",{});var GPt=s(Sve);FDo=r(GPt,"yolos"),GPt.forEach(t),TDo=r(lGe," \u2014 "),Zz=n(lGe,"A",{href:!0});var OPt=s(Zz);MDo=r(OPt,"YolosModel"),OPt.forEach(t),EDo=r(lGe," (YOLOS model)"),lGe.forEach(t),CDo=i(x),Iv=n(x,"LI",{});var iGe=s(Iv);Rve=n(iGe,"STRONG",{});var VPt=s(Rve);wDo=r(VPt,"yoso"),VPt.forEach(t),ADo=r(iGe," \u2014 "),Kz=n(iGe,"A",{href:!0});var XPt=s(Kz);LDo=r(XPt,"YosoModel"),XPt.forEach(t),yDo=r(iGe," (YOSO model)"),iGe.forEach(t),x.forEach(t),xDo=i(Ea),Nv=n(Ea,"P",{});var dGe=s(Nv);$Do=r(dGe,"The model is set in evaluation mode by default using "),Pve=n(dGe,"CODE",{});var zPt=s(Pve);kDo=r(zPt,"model.eval()"),zPt.forEach(t),SDo=r(dGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bve=n(dGe,"CODE",{});var QPt=s(Bve);RDo=r(QPt,"model.train()"),QPt.forEach(t),dGe.forEach(t),PDo=i(Ea),T(qv.$$.fragment,Ea),Ea.forEach(t),kl.forEach(t),koo=i(f),Ad=n(f,"H2",{class:!0});var Wto=s(Ad);jv=n(Wto,"A",{id:!0,class:!0,href:!0});var WPt=s(jv);Ive=n(WPt,"SPAN",{});var UPt=s(Ive);T(n$.$$.fragment,UPt),UPt.forEach(t),WPt.forEach(t),BDo=i(Wto),Nve=n(Wto,"SPAN",{});var HPt=s(Nve);IDo=r(HPt,"AutoModelForPreTraining"),HPt.forEach(t),Wto.forEach(t),Soo=i(f),Io=n(f,"DIV",{class:!0});var Sl=s(Io);T(s$.$$.fragment,Sl),NDo=i(Sl),Ld=n(Sl,"P",{});var Wie=s(Ld);qDo=r(Wie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eQ=n(Wie,"A",{href:!0});var JPt=s(eQ);jDo=r(JPt,"from_pretrained()"),JPt.forEach(t),DDo=r(Wie," class method or the "),oQ=n(Wie,"A",{href:!0});var YPt=s(oQ);GDo=r(YPt,"from_config()"),YPt.forEach(t),ODo=r(Wie,` class
method.`),Wie.forEach(t),VDo=i(Sl),l$=n(Sl,"P",{});var Uto=s(l$);XDo=r(Uto,"This class cannot be instantiated directly using "),qve=n(Uto,"CODE",{});var ZPt=s(qve);zDo=r(ZPt,"__init__()"),ZPt.forEach(t),QDo=r(Uto," (throws an error)."),Uto.forEach(t),WDo=i(Sl),Ft=n(Sl,"DIV",{class:!0});var My=s(Ft);T(i$.$$.fragment,My),UDo=i(My),jve=n(My,"P",{});var KPt=s(jve);HDo=r(KPt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),KPt.forEach(t),JDo=i(My),yd=n(My,"P",{});var Uie=s(yd);YDo=r(Uie,`Note:
Loading a model from its configuration file does `),Dve=n(Uie,"STRONG",{});var eBt=s(Dve);ZDo=r(eBt,"not"),eBt.forEach(t),KDo=r(Uie,` load the model weights. It only affects the
model\u2019s configuration. Use `),rQ=n(Uie,"A",{href:!0});var oBt=s(rQ);eGo=r(oBt,"from_pretrained()"),oBt.forEach(t),oGo=r(Uie," to load the model weights."),Uie.forEach(t),rGo=i(My),T(Dv.$$.fragment,My),My.forEach(t),tGo=i(Sl),eo=n(Sl,"DIV",{class:!0});var Ca=s(eo);T(d$.$$.fragment,Ca),aGo=i(Ca),Gve=n(Ca,"P",{});var rBt=s(Gve);nGo=r(rBt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),rBt.forEach(t),sGo=i(Ca),on=n(Ca,"P",{});var Ey=s(on);lGo=r(Ey,"The model class to instantiate is selected based on the "),Ove=n(Ey,"CODE",{});var tBt=s(Ove);iGo=r(tBt,"model_type"),tBt.forEach(t),dGo=r(Ey,` property of the config object (either
passed as an argument or loaded from `),Vve=n(Ey,"CODE",{});var aBt=s(Vve);cGo=r(aBt,"pretrained_model_name_or_path"),aBt.forEach(t),fGo=r(Ey,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xve=n(Ey,"CODE",{});var nBt=s(Xve);mGo=r(nBt,"pretrained_model_name_or_path"),nBt.forEach(t),gGo=r(Ey,":"),Ey.forEach(t),hGo=i(Ca),G=n(Ca,"UL",{});var V=s(G);Gv=n(V,"LI",{});var cGe=s(Gv);zve=n(cGe,"STRONG",{});var sBt=s(zve);uGo=r(sBt,"albert"),sBt.forEach(t),pGo=r(cGe," \u2014 "),tQ=n(cGe,"A",{href:!0});var lBt=s(tQ);_Go=r(lBt,"AlbertForPreTraining"),lBt.forEach(t),vGo=r(cGe," (ALBERT model)"),cGe.forEach(t),bGo=i(V),Ov=n(V,"LI",{});var fGe=s(Ov);Qve=n(fGe,"STRONG",{});var iBt=s(Qve);FGo=r(iBt,"bart"),iBt.forEach(t),TGo=r(fGe," \u2014 "),aQ=n(fGe,"A",{href:!0});var dBt=s(aQ);MGo=r(dBt,"BartForConditionalGeneration"),dBt.forEach(t),EGo=r(fGe," (BART model)"),fGe.forEach(t),CGo=i(V),Vv=n(V,"LI",{});var mGe=s(Vv);Wve=n(mGe,"STRONG",{});var cBt=s(Wve);wGo=r(cBt,"bert"),cBt.forEach(t),AGo=r(mGe," \u2014 "),nQ=n(mGe,"A",{href:!0});var fBt=s(nQ);LGo=r(fBt,"BertForPreTraining"),fBt.forEach(t),yGo=r(mGe," (BERT model)"),mGe.forEach(t),xGo=i(V),Xv=n(V,"LI",{});var gGe=s(Xv);Uve=n(gGe,"STRONG",{});var mBt=s(Uve);$Go=r(mBt,"big_bird"),mBt.forEach(t),kGo=r(gGe," \u2014 "),sQ=n(gGe,"A",{href:!0});var gBt=s(sQ);SGo=r(gBt,"BigBirdForPreTraining"),gBt.forEach(t),RGo=r(gGe," (BigBird model)"),gGe.forEach(t),PGo=i(V),zv=n(V,"LI",{});var hGe=s(zv);Hve=n(hGe,"STRONG",{});var hBt=s(Hve);BGo=r(hBt,"bloom"),hBt.forEach(t),IGo=r(hGe," \u2014 "),lQ=n(hGe,"A",{href:!0});var uBt=s(lQ);NGo=r(uBt,"BloomForCausalLM"),uBt.forEach(t),qGo=r(hGe," (BLOOM model)"),hGe.forEach(t),jGo=i(V),Qv=n(V,"LI",{});var uGe=s(Qv);Jve=n(uGe,"STRONG",{});var pBt=s(Jve);DGo=r(pBt,"camembert"),pBt.forEach(t),GGo=r(uGe," \u2014 "),iQ=n(uGe,"A",{href:!0});var _Bt=s(iQ);OGo=r(_Bt,"CamembertForMaskedLM"),_Bt.forEach(t),VGo=r(uGe," (CamemBERT model)"),uGe.forEach(t),XGo=i(V),Wv=n(V,"LI",{});var pGe=s(Wv);Yve=n(pGe,"STRONG",{});var vBt=s(Yve);zGo=r(vBt,"ctrl"),vBt.forEach(t),QGo=r(pGe," \u2014 "),dQ=n(pGe,"A",{href:!0});var bBt=s(dQ);WGo=r(bBt,"CTRLLMHeadModel"),bBt.forEach(t),UGo=r(pGe," (CTRL model)"),pGe.forEach(t),HGo=i(V),Uv=n(V,"LI",{});var _Ge=s(Uv);Zve=n(_Ge,"STRONG",{});var FBt=s(Zve);JGo=r(FBt,"data2vec-text"),FBt.forEach(t),YGo=r(_Ge," \u2014 "),cQ=n(_Ge,"A",{href:!0});var TBt=s(cQ);ZGo=r(TBt,"Data2VecTextForMaskedLM"),TBt.forEach(t),KGo=r(_Ge," (Data2VecText model)"),_Ge.forEach(t),eOo=i(V),Hv=n(V,"LI",{});var vGe=s(Hv);Kve=n(vGe,"STRONG",{});var MBt=s(Kve);oOo=r(MBt,"deberta"),MBt.forEach(t),rOo=r(vGe," \u2014 "),fQ=n(vGe,"A",{href:!0});var EBt=s(fQ);tOo=r(EBt,"DebertaForMaskedLM"),EBt.forEach(t),aOo=r(vGe," (DeBERTa model)"),vGe.forEach(t),nOo=i(V),Jv=n(V,"LI",{});var bGe=s(Jv);e4e=n(bGe,"STRONG",{});var CBt=s(e4e);sOo=r(CBt,"deberta-v2"),CBt.forEach(t),lOo=r(bGe," \u2014 "),mQ=n(bGe,"A",{href:!0});var wBt=s(mQ);iOo=r(wBt,"DebertaV2ForMaskedLM"),wBt.forEach(t),dOo=r(bGe," (DeBERTa-v2 model)"),bGe.forEach(t),cOo=i(V),Yv=n(V,"LI",{});var FGe=s(Yv);o4e=n(FGe,"STRONG",{});var ABt=s(o4e);fOo=r(ABt,"distilbert"),ABt.forEach(t),mOo=r(FGe," \u2014 "),gQ=n(FGe,"A",{href:!0});var LBt=s(gQ);gOo=r(LBt,"DistilBertForMaskedLM"),LBt.forEach(t),hOo=r(FGe," (DistilBERT model)"),FGe.forEach(t),uOo=i(V),Zv=n(V,"LI",{});var TGe=s(Zv);r4e=n(TGe,"STRONG",{});var yBt=s(r4e);pOo=r(yBt,"electra"),yBt.forEach(t),_Oo=r(TGe," \u2014 "),hQ=n(TGe,"A",{href:!0});var xBt=s(hQ);vOo=r(xBt,"ElectraForPreTraining"),xBt.forEach(t),bOo=r(TGe," (ELECTRA model)"),TGe.forEach(t),FOo=i(V),Kv=n(V,"LI",{});var MGe=s(Kv);t4e=n(MGe,"STRONG",{});var $Bt=s(t4e);TOo=r($Bt,"ernie"),$Bt.forEach(t),MOo=r(MGe," \u2014 "),uQ=n(MGe,"A",{href:!0});var kBt=s(uQ);EOo=r(kBt,"ErnieForPreTraining"),kBt.forEach(t),COo=r(MGe," (ERNIE model)"),MGe.forEach(t),wOo=i(V),e4=n(V,"LI",{});var EGe=s(e4);a4e=n(EGe,"STRONG",{});var SBt=s(a4e);AOo=r(SBt,"flaubert"),SBt.forEach(t),LOo=r(EGe," \u2014 "),pQ=n(EGe,"A",{href:!0});var RBt=s(pQ);yOo=r(RBt,"FlaubertWithLMHeadModel"),RBt.forEach(t),xOo=r(EGe," (FlauBERT model)"),EGe.forEach(t),$Oo=i(V),o4=n(V,"LI",{});var CGe=s(o4);n4e=n(CGe,"STRONG",{});var PBt=s(n4e);kOo=r(PBt,"flava"),PBt.forEach(t),SOo=r(CGe," \u2014 "),_Q=n(CGe,"A",{href:!0});var BBt=s(_Q);ROo=r(BBt,"FlavaForPreTraining"),BBt.forEach(t),POo=r(CGe," (FLAVA model)"),CGe.forEach(t),BOo=i(V),r4=n(V,"LI",{});var wGe=s(r4);s4e=n(wGe,"STRONG",{});var IBt=s(s4e);IOo=r(IBt,"fnet"),IBt.forEach(t),NOo=r(wGe," \u2014 "),vQ=n(wGe,"A",{href:!0});var NBt=s(vQ);qOo=r(NBt,"FNetForPreTraining"),NBt.forEach(t),jOo=r(wGe," (FNet model)"),wGe.forEach(t),DOo=i(V),t4=n(V,"LI",{});var AGe=s(t4);l4e=n(AGe,"STRONG",{});var qBt=s(l4e);GOo=r(qBt,"fsmt"),qBt.forEach(t),OOo=r(AGe," \u2014 "),bQ=n(AGe,"A",{href:!0});var jBt=s(bQ);VOo=r(jBt,"FSMTForConditionalGeneration"),jBt.forEach(t),XOo=r(AGe," (FairSeq Machine-Translation model)"),AGe.forEach(t),zOo=i(V),a4=n(V,"LI",{});var LGe=s(a4);i4e=n(LGe,"STRONG",{});var DBt=s(i4e);QOo=r(DBt,"funnel"),DBt.forEach(t),WOo=r(LGe," \u2014 "),FQ=n(LGe,"A",{href:!0});var GBt=s(FQ);UOo=r(GBt,"FunnelForPreTraining"),GBt.forEach(t),HOo=r(LGe," (Funnel Transformer model)"),LGe.forEach(t),JOo=i(V),n4=n(V,"LI",{});var yGe=s(n4);d4e=n(yGe,"STRONG",{});var OBt=s(d4e);YOo=r(OBt,"gpt2"),OBt.forEach(t),ZOo=r(yGe," \u2014 "),TQ=n(yGe,"A",{href:!0});var VBt=s(TQ);KOo=r(VBt,"GPT2LMHeadModel"),VBt.forEach(t),eVo=r(yGe," (OpenAI GPT-2 model)"),yGe.forEach(t),oVo=i(V),s4=n(V,"LI",{});var xGe=s(s4);c4e=n(xGe,"STRONG",{});var XBt=s(c4e);rVo=r(XBt,"ibert"),XBt.forEach(t),tVo=r(xGe," \u2014 "),MQ=n(xGe,"A",{href:!0});var zBt=s(MQ);aVo=r(zBt,"IBertForMaskedLM"),zBt.forEach(t),nVo=r(xGe," (I-BERT model)"),xGe.forEach(t),sVo=i(V),l4=n(V,"LI",{});var $Ge=s(l4);f4e=n($Ge,"STRONG",{});var QBt=s(f4e);lVo=r(QBt,"layoutlm"),QBt.forEach(t),iVo=r($Ge," \u2014 "),EQ=n($Ge,"A",{href:!0});var WBt=s(EQ);dVo=r(WBt,"LayoutLMForMaskedLM"),WBt.forEach(t),cVo=r($Ge," (LayoutLM model)"),$Ge.forEach(t),fVo=i(V),i4=n(V,"LI",{});var kGe=s(i4);m4e=n(kGe,"STRONG",{});var UBt=s(m4e);mVo=r(UBt,"longformer"),UBt.forEach(t),gVo=r(kGe," \u2014 "),CQ=n(kGe,"A",{href:!0});var HBt=s(CQ);hVo=r(HBt,"LongformerForMaskedLM"),HBt.forEach(t),uVo=r(kGe," (Longformer model)"),kGe.forEach(t),pVo=i(V),d4=n(V,"LI",{});var SGe=s(d4);g4e=n(SGe,"STRONG",{});var JBt=s(g4e);_Vo=r(JBt,"luke"),JBt.forEach(t),vVo=r(SGe," \u2014 "),wQ=n(SGe,"A",{href:!0});var YBt=s(wQ);bVo=r(YBt,"LukeForMaskedLM"),YBt.forEach(t),FVo=r(SGe," (LUKE model)"),SGe.forEach(t),TVo=i(V),c4=n(V,"LI",{});var RGe=s(c4);h4e=n(RGe,"STRONG",{});var ZBt=s(h4e);MVo=r(ZBt,"lxmert"),ZBt.forEach(t),EVo=r(RGe," \u2014 "),AQ=n(RGe,"A",{href:!0});var KBt=s(AQ);CVo=r(KBt,"LxmertForPreTraining"),KBt.forEach(t),wVo=r(RGe," (LXMERT model)"),RGe.forEach(t),AVo=i(V),f4=n(V,"LI",{});var PGe=s(f4);u4e=n(PGe,"STRONG",{});var eIt=s(u4e);LVo=r(eIt,"megatron-bert"),eIt.forEach(t),yVo=r(PGe," \u2014 "),LQ=n(PGe,"A",{href:!0});var oIt=s(LQ);xVo=r(oIt,"MegatronBertForPreTraining"),oIt.forEach(t),$Vo=r(PGe," (Megatron-BERT model)"),PGe.forEach(t),kVo=i(V),m4=n(V,"LI",{});var BGe=s(m4);p4e=n(BGe,"STRONG",{});var rIt=s(p4e);SVo=r(rIt,"mobilebert"),rIt.forEach(t),RVo=r(BGe," \u2014 "),yQ=n(BGe,"A",{href:!0});var tIt=s(yQ);PVo=r(tIt,"MobileBertForPreTraining"),tIt.forEach(t),BVo=r(BGe," (MobileBERT model)"),BGe.forEach(t),IVo=i(V),g4=n(V,"LI",{});var IGe=s(g4);_4e=n(IGe,"STRONG",{});var aIt=s(_4e);NVo=r(aIt,"mpnet"),aIt.forEach(t),qVo=r(IGe," \u2014 "),xQ=n(IGe,"A",{href:!0});var nIt=s(xQ);jVo=r(nIt,"MPNetForMaskedLM"),nIt.forEach(t),DVo=r(IGe," (MPNet model)"),IGe.forEach(t),GVo=i(V),h4=n(V,"LI",{});var NGe=s(h4);v4e=n(NGe,"STRONG",{});var sIt=s(v4e);OVo=r(sIt,"mvp"),sIt.forEach(t),VVo=r(NGe," \u2014 "),$Q=n(NGe,"A",{href:!0});var lIt=s($Q);XVo=r(lIt,"MvpForConditionalGeneration"),lIt.forEach(t),zVo=r(NGe," (MVP model)"),NGe.forEach(t),QVo=i(V),u4=n(V,"LI",{});var qGe=s(u4);b4e=n(qGe,"STRONG",{});var iIt=s(b4e);WVo=r(iIt,"nezha"),iIt.forEach(t),UVo=r(qGe," \u2014 "),kQ=n(qGe,"A",{href:!0});var dIt=s(kQ);HVo=r(dIt,"NezhaForPreTraining"),dIt.forEach(t),JVo=r(qGe," (Nezha model)"),qGe.forEach(t),YVo=i(V),p4=n(V,"LI",{});var jGe=s(p4);F4e=n(jGe,"STRONG",{});var cIt=s(F4e);ZVo=r(cIt,"openai-gpt"),cIt.forEach(t),KVo=r(jGe," \u2014 "),SQ=n(jGe,"A",{href:!0});var fIt=s(SQ);eXo=r(fIt,"OpenAIGPTLMHeadModel"),fIt.forEach(t),oXo=r(jGe," (OpenAI GPT model)"),jGe.forEach(t),rXo=i(V),_4=n(V,"LI",{});var DGe=s(_4);T4e=n(DGe,"STRONG",{});var mIt=s(T4e);tXo=r(mIt,"retribert"),mIt.forEach(t),aXo=r(DGe," \u2014 "),RQ=n(DGe,"A",{href:!0});var gIt=s(RQ);nXo=r(gIt,"RetriBertModel"),gIt.forEach(t),sXo=r(DGe," (RetriBERT model)"),DGe.forEach(t),lXo=i(V),v4=n(V,"LI",{});var GGe=s(v4);M4e=n(GGe,"STRONG",{});var hIt=s(M4e);iXo=r(hIt,"roberta"),hIt.forEach(t),dXo=r(GGe," \u2014 "),PQ=n(GGe,"A",{href:!0});var uIt=s(PQ);cXo=r(uIt,"RobertaForMaskedLM"),uIt.forEach(t),fXo=r(GGe," (RoBERTa model)"),GGe.forEach(t),mXo=i(V),b4=n(V,"LI",{});var OGe=s(b4);E4e=n(OGe,"STRONG",{});var pIt=s(E4e);gXo=r(pIt,"splinter"),pIt.forEach(t),hXo=r(OGe," \u2014 "),BQ=n(OGe,"A",{href:!0});var _It=s(BQ);uXo=r(_It,"SplinterForPreTraining"),_It.forEach(t),pXo=r(OGe," (Splinter model)"),OGe.forEach(t),_Xo=i(V),F4=n(V,"LI",{});var VGe=s(F4);C4e=n(VGe,"STRONG",{});var vIt=s(C4e);vXo=r(vIt,"squeezebert"),vIt.forEach(t),bXo=r(VGe," \u2014 "),IQ=n(VGe,"A",{href:!0});var bIt=s(IQ);FXo=r(bIt,"SqueezeBertForMaskedLM"),bIt.forEach(t),TXo=r(VGe," (SqueezeBERT model)"),VGe.forEach(t),MXo=i(V),T4=n(V,"LI",{});var XGe=s(T4);w4e=n(XGe,"STRONG",{});var FIt=s(w4e);EXo=r(FIt,"t5"),FIt.forEach(t),CXo=r(XGe," \u2014 "),NQ=n(XGe,"A",{href:!0});var TIt=s(NQ);wXo=r(TIt,"T5ForConditionalGeneration"),TIt.forEach(t),AXo=r(XGe," (T5 model)"),XGe.forEach(t),LXo=i(V),M4=n(V,"LI",{});var zGe=s(M4);A4e=n(zGe,"STRONG",{});var MIt=s(A4e);yXo=r(MIt,"tapas"),MIt.forEach(t),xXo=r(zGe," \u2014 "),qQ=n(zGe,"A",{href:!0});var EIt=s(qQ);$Xo=r(EIt,"TapasForMaskedLM"),EIt.forEach(t),kXo=r(zGe," (TAPAS model)"),zGe.forEach(t),SXo=i(V),E4=n(V,"LI",{});var QGe=s(E4);L4e=n(QGe,"STRONG",{});var CIt=s(L4e);RXo=r(CIt,"transfo-xl"),CIt.forEach(t),PXo=r(QGe," \u2014 "),jQ=n(QGe,"A",{href:!0});var wIt=s(jQ);BXo=r(wIt,"TransfoXLLMHeadModel"),wIt.forEach(t),IXo=r(QGe," (Transformer-XL model)"),QGe.forEach(t),NXo=i(V),C4=n(V,"LI",{});var WGe=s(C4);y4e=n(WGe,"STRONG",{});var AIt=s(y4e);qXo=r(AIt,"unispeech"),AIt.forEach(t),jXo=r(WGe," \u2014 "),DQ=n(WGe,"A",{href:!0});var LIt=s(DQ);DXo=r(LIt,"UniSpeechForPreTraining"),LIt.forEach(t),GXo=r(WGe," (UniSpeech model)"),WGe.forEach(t),OXo=i(V),w4=n(V,"LI",{});var UGe=s(w4);x4e=n(UGe,"STRONG",{});var yIt=s(x4e);VXo=r(yIt,"unispeech-sat"),yIt.forEach(t),XXo=r(UGe," \u2014 "),GQ=n(UGe,"A",{href:!0});var xIt=s(GQ);zXo=r(xIt,"UniSpeechSatForPreTraining"),xIt.forEach(t),QXo=r(UGe," (UniSpeechSat model)"),UGe.forEach(t),WXo=i(V),A4=n(V,"LI",{});var HGe=s(A4);$4e=n(HGe,"STRONG",{});var $It=s($4e);UXo=r($It,"videomae"),$It.forEach(t),HXo=r(HGe," \u2014 "),OQ=n(HGe,"A",{href:!0});var kIt=s(OQ);JXo=r(kIt,"VideoMAEForPreTraining"),kIt.forEach(t),YXo=r(HGe," (VideoMAE model)"),HGe.forEach(t),ZXo=i(V),L4=n(V,"LI",{});var JGe=s(L4);k4e=n(JGe,"STRONG",{});var SIt=s(k4e);KXo=r(SIt,"visual_bert"),SIt.forEach(t),ezo=r(JGe," \u2014 "),VQ=n(JGe,"A",{href:!0});var RIt=s(VQ);ozo=r(RIt,"VisualBertForPreTraining"),RIt.forEach(t),rzo=r(JGe," (VisualBERT model)"),JGe.forEach(t),tzo=i(V),y4=n(V,"LI",{});var YGe=s(y4);S4e=n(YGe,"STRONG",{});var PIt=s(S4e);azo=r(PIt,"vit_mae"),PIt.forEach(t),nzo=r(YGe," \u2014 "),XQ=n(YGe,"A",{href:!0});var BIt=s(XQ);szo=r(BIt,"ViTMAEForPreTraining"),BIt.forEach(t),lzo=r(YGe," (ViTMAE model)"),YGe.forEach(t),izo=i(V),x4=n(V,"LI",{});var ZGe=s(x4);R4e=n(ZGe,"STRONG",{});var IIt=s(R4e);dzo=r(IIt,"wav2vec2"),IIt.forEach(t),czo=r(ZGe," \u2014 "),zQ=n(ZGe,"A",{href:!0});var NIt=s(zQ);fzo=r(NIt,"Wav2Vec2ForPreTraining"),NIt.forEach(t),mzo=r(ZGe," (Wav2Vec2 model)"),ZGe.forEach(t),gzo=i(V),$4=n(V,"LI",{});var KGe=s($4);P4e=n(KGe,"STRONG",{});var qIt=s(P4e);hzo=r(qIt,"wav2vec2-conformer"),qIt.forEach(t),uzo=r(KGe," \u2014 "),QQ=n(KGe,"A",{href:!0});var jIt=s(QQ);pzo=r(jIt,"Wav2Vec2ConformerForPreTraining"),jIt.forEach(t),_zo=r(KGe," (Wav2Vec2-Conformer model)"),KGe.forEach(t),vzo=i(V),k4=n(V,"LI",{});var eOe=s(k4);B4e=n(eOe,"STRONG",{});var DIt=s(B4e);bzo=r(DIt,"xlm"),DIt.forEach(t),Fzo=r(eOe," \u2014 "),WQ=n(eOe,"A",{href:!0});var GIt=s(WQ);Tzo=r(GIt,"XLMWithLMHeadModel"),GIt.forEach(t),Mzo=r(eOe," (XLM model)"),eOe.forEach(t),Ezo=i(V),S4=n(V,"LI",{});var oOe=s(S4);I4e=n(oOe,"STRONG",{});var OIt=s(I4e);Czo=r(OIt,"xlm-roberta"),OIt.forEach(t),wzo=r(oOe," \u2014 "),UQ=n(oOe,"A",{href:!0});var VIt=s(UQ);Azo=r(VIt,"XLMRobertaForMaskedLM"),VIt.forEach(t),Lzo=r(oOe," (XLM-RoBERTa model)"),oOe.forEach(t),yzo=i(V),R4=n(V,"LI",{});var rOe=s(R4);N4e=n(rOe,"STRONG",{});var XIt=s(N4e);xzo=r(XIt,"xlm-roberta-xl"),XIt.forEach(t),$zo=r(rOe," \u2014 "),HQ=n(rOe,"A",{href:!0});var zIt=s(HQ);kzo=r(zIt,"XLMRobertaXLForMaskedLM"),zIt.forEach(t),Szo=r(rOe," (XLM-RoBERTa-XL model)"),rOe.forEach(t),Rzo=i(V),P4=n(V,"LI",{});var tOe=s(P4);q4e=n(tOe,"STRONG",{});var QIt=s(q4e);Pzo=r(QIt,"xlnet"),QIt.forEach(t),Bzo=r(tOe," \u2014 "),JQ=n(tOe,"A",{href:!0});var WIt=s(JQ);Izo=r(WIt,"XLNetLMHeadModel"),WIt.forEach(t),Nzo=r(tOe," (XLNet model)"),tOe.forEach(t),V.forEach(t),qzo=i(Ca),B4=n(Ca,"P",{});var aOe=s(B4);jzo=r(aOe,"The model is set in evaluation mode by default using "),j4e=n(aOe,"CODE",{});var UIt=s(j4e);Dzo=r(UIt,"model.eval()"),UIt.forEach(t),Gzo=r(aOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D4e=n(aOe,"CODE",{});var HIt=s(D4e);Ozo=r(HIt,"model.train()"),HIt.forEach(t),aOe.forEach(t),Vzo=i(Ca),T(I4.$$.fragment,Ca),Ca.forEach(t),Sl.forEach(t),Roo=i(f),xd=n(f,"H2",{class:!0});var Hto=s(xd);N4=n(Hto,"A",{id:!0,class:!0,href:!0});var JIt=s(N4);G4e=n(JIt,"SPAN",{});var YIt=s(G4e);T(c$.$$.fragment,YIt),YIt.forEach(t),JIt.forEach(t),Xzo=i(Hto),O4e=n(Hto,"SPAN",{});var ZIt=s(O4e);zzo=r(ZIt,"AutoModelForCausalLM"),ZIt.forEach(t),Hto.forEach(t),Poo=i(f),No=n(f,"DIV",{class:!0});var Rl=s(No);T(f$.$$.fragment,Rl),Qzo=i(Rl),$d=n(Rl,"P",{});var Hie=s($d);Wzo=r(Hie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),YQ=n(Hie,"A",{href:!0});var KIt=s(YQ);Uzo=r(KIt,"from_pretrained()"),KIt.forEach(t),Hzo=r(Hie," class method or the "),ZQ=n(Hie,"A",{href:!0});var eNt=s(ZQ);Jzo=r(eNt,"from_config()"),eNt.forEach(t),Yzo=r(Hie,` class
method.`),Hie.forEach(t),Zzo=i(Rl),m$=n(Rl,"P",{});var Jto=s(m$);Kzo=r(Jto,"This class cannot be instantiated directly using "),V4e=n(Jto,"CODE",{});var oNt=s(V4e);eQo=r(oNt,"__init__()"),oNt.forEach(t),oQo=r(Jto," (throws an error)."),Jto.forEach(t),rQo=i(Rl),Tt=n(Rl,"DIV",{class:!0});var Cy=s(Tt);T(g$.$$.fragment,Cy),tQo=i(Cy),X4e=n(Cy,"P",{});var rNt=s(X4e);aQo=r(rNt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),rNt.forEach(t),nQo=i(Cy),kd=n(Cy,"P",{});var Jie=s(kd);sQo=r(Jie,`Note:
Loading a model from its configuration file does `),z4e=n(Jie,"STRONG",{});var tNt=s(z4e);lQo=r(tNt,"not"),tNt.forEach(t),iQo=r(Jie,` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=n(Jie,"A",{href:!0});var aNt=s(KQ);dQo=r(aNt,"from_pretrained()"),aNt.forEach(t),cQo=r(Jie," to load the model weights."),Jie.forEach(t),fQo=i(Cy),T(q4.$$.fragment,Cy),Cy.forEach(t),mQo=i(Rl),oo=n(Rl,"DIV",{class:!0});var wa=s(oo);T(h$.$$.fragment,wa),gQo=i(wa),Q4e=n(wa,"P",{});var nNt=s(Q4e);hQo=r(nNt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),nNt.forEach(t),uQo=i(wa),rn=n(wa,"P",{});var wy=s(rn);pQo=r(wy,"The model class to instantiate is selected based on the "),W4e=n(wy,"CODE",{});var sNt=s(W4e);_Qo=r(sNt,"model_type"),sNt.forEach(t),vQo=r(wy,` property of the config object (either
passed as an argument or loaded from `),U4e=n(wy,"CODE",{});var lNt=s(U4e);bQo=r(lNt,"pretrained_model_name_or_path"),lNt.forEach(t),FQo=r(wy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H4e=n(wy,"CODE",{});var iNt=s(H4e);TQo=r(iNt,"pretrained_model_name_or_path"),iNt.forEach(t),MQo=r(wy,":"),wy.forEach(t),EQo=i(wa),Q=n(wa,"UL",{});var U=s(Q);j4=n(U,"LI",{});var nOe=s(j4);J4e=n(nOe,"STRONG",{});var dNt=s(J4e);CQo=r(dNt,"bart"),dNt.forEach(t),wQo=r(nOe," \u2014 "),eW=n(nOe,"A",{href:!0});var cNt=s(eW);AQo=r(cNt,"BartForCausalLM"),cNt.forEach(t),LQo=r(nOe," (BART model)"),nOe.forEach(t),yQo=i(U),D4=n(U,"LI",{});var sOe=s(D4);Y4e=n(sOe,"STRONG",{});var fNt=s(Y4e);xQo=r(fNt,"bert"),fNt.forEach(t),$Qo=r(sOe," \u2014 "),oW=n(sOe,"A",{href:!0});var mNt=s(oW);kQo=r(mNt,"BertLMHeadModel"),mNt.forEach(t),SQo=r(sOe," (BERT model)"),sOe.forEach(t),RQo=i(U),G4=n(U,"LI",{});var lOe=s(G4);Z4e=n(lOe,"STRONG",{});var gNt=s(Z4e);PQo=r(gNt,"bert-generation"),gNt.forEach(t),BQo=r(lOe," \u2014 "),rW=n(lOe,"A",{href:!0});var hNt=s(rW);IQo=r(hNt,"BertGenerationDecoder"),hNt.forEach(t),NQo=r(lOe," (Bert Generation model)"),lOe.forEach(t),qQo=i(U),O4=n(U,"LI",{});var iOe=s(O4);K4e=n(iOe,"STRONG",{});var uNt=s(K4e);jQo=r(uNt,"big_bird"),uNt.forEach(t),DQo=r(iOe," \u2014 "),tW=n(iOe,"A",{href:!0});var pNt=s(tW);GQo=r(pNt,"BigBirdForCausalLM"),pNt.forEach(t),OQo=r(iOe," (BigBird model)"),iOe.forEach(t),VQo=i(U),V4=n(U,"LI",{});var dOe=s(V4);e1e=n(dOe,"STRONG",{});var _Nt=s(e1e);XQo=r(_Nt,"bigbird_pegasus"),_Nt.forEach(t),zQo=r(dOe," \u2014 "),aW=n(dOe,"A",{href:!0});var vNt=s(aW);QQo=r(vNt,"BigBirdPegasusForCausalLM"),vNt.forEach(t),WQo=r(dOe," (BigBird-Pegasus model)"),dOe.forEach(t),UQo=i(U),X4=n(U,"LI",{});var cOe=s(X4);o1e=n(cOe,"STRONG",{});var bNt=s(o1e);HQo=r(bNt,"blenderbot"),bNt.forEach(t),JQo=r(cOe," \u2014 "),nW=n(cOe,"A",{href:!0});var FNt=s(nW);YQo=r(FNt,"BlenderbotForCausalLM"),FNt.forEach(t),ZQo=r(cOe," (Blenderbot model)"),cOe.forEach(t),KQo=i(U),z4=n(U,"LI",{});var fOe=s(z4);r1e=n(fOe,"STRONG",{});var TNt=s(r1e);eWo=r(TNt,"blenderbot-small"),TNt.forEach(t),oWo=r(fOe," \u2014 "),sW=n(fOe,"A",{href:!0});var MNt=s(sW);rWo=r(MNt,"BlenderbotSmallForCausalLM"),MNt.forEach(t),tWo=r(fOe," (BlenderbotSmall model)"),fOe.forEach(t),aWo=i(U),Q4=n(U,"LI",{});var mOe=s(Q4);t1e=n(mOe,"STRONG",{});var ENt=s(t1e);nWo=r(ENt,"bloom"),ENt.forEach(t),sWo=r(mOe," \u2014 "),lW=n(mOe,"A",{href:!0});var CNt=s(lW);lWo=r(CNt,"BloomForCausalLM"),CNt.forEach(t),iWo=r(mOe," (BLOOM model)"),mOe.forEach(t),dWo=i(U),W4=n(U,"LI",{});var gOe=s(W4);a1e=n(gOe,"STRONG",{});var wNt=s(a1e);cWo=r(wNt,"camembert"),wNt.forEach(t),fWo=r(gOe," \u2014 "),iW=n(gOe,"A",{href:!0});var ANt=s(iW);mWo=r(ANt,"CamembertForCausalLM"),ANt.forEach(t),gWo=r(gOe," (CamemBERT model)"),gOe.forEach(t),hWo=i(U),U4=n(U,"LI",{});var hOe=s(U4);n1e=n(hOe,"STRONG",{});var LNt=s(n1e);uWo=r(LNt,"codegen"),LNt.forEach(t),pWo=r(hOe," \u2014 "),dW=n(hOe,"A",{href:!0});var yNt=s(dW);_Wo=r(yNt,"CodeGenForCausalLM"),yNt.forEach(t),vWo=r(hOe," (CodeGen model)"),hOe.forEach(t),bWo=i(U),H4=n(U,"LI",{});var uOe=s(H4);s1e=n(uOe,"STRONG",{});var xNt=s(s1e);FWo=r(xNt,"ctrl"),xNt.forEach(t),TWo=r(uOe," \u2014 "),cW=n(uOe,"A",{href:!0});var $Nt=s(cW);MWo=r($Nt,"CTRLLMHeadModel"),$Nt.forEach(t),EWo=r(uOe," (CTRL model)"),uOe.forEach(t),CWo=i(U),J4=n(U,"LI",{});var pOe=s(J4);l1e=n(pOe,"STRONG",{});var kNt=s(l1e);wWo=r(kNt,"data2vec-text"),kNt.forEach(t),AWo=r(pOe," \u2014 "),fW=n(pOe,"A",{href:!0});var SNt=s(fW);LWo=r(SNt,"Data2VecTextForCausalLM"),SNt.forEach(t),yWo=r(pOe," (Data2VecText model)"),pOe.forEach(t),xWo=i(U),Y4=n(U,"LI",{});var _Oe=s(Y4);i1e=n(_Oe,"STRONG",{});var RNt=s(i1e);$Wo=r(RNt,"electra"),RNt.forEach(t),kWo=r(_Oe," \u2014 "),mW=n(_Oe,"A",{href:!0});var PNt=s(mW);SWo=r(PNt,"ElectraForCausalLM"),PNt.forEach(t),RWo=r(_Oe," (ELECTRA model)"),_Oe.forEach(t),PWo=i(U),Z4=n(U,"LI",{});var vOe=s(Z4);d1e=n(vOe,"STRONG",{});var BNt=s(d1e);BWo=r(BNt,"ernie"),BNt.forEach(t),IWo=r(vOe," \u2014 "),gW=n(vOe,"A",{href:!0});var INt=s(gW);NWo=r(INt,"ErnieForCausalLM"),INt.forEach(t),qWo=r(vOe," (ERNIE model)"),vOe.forEach(t),jWo=i(U),K4=n(U,"LI",{});var bOe=s(K4);c1e=n(bOe,"STRONG",{});var NNt=s(c1e);DWo=r(NNt,"gpt2"),NNt.forEach(t),GWo=r(bOe," \u2014 "),hW=n(bOe,"A",{href:!0});var qNt=s(hW);OWo=r(qNt,"GPT2LMHeadModel"),qNt.forEach(t),VWo=r(bOe," (OpenAI GPT-2 model)"),bOe.forEach(t),XWo=i(U),e1=n(U,"LI",{});var FOe=s(e1);f1e=n(FOe,"STRONG",{});var jNt=s(f1e);zWo=r(jNt,"gpt_neo"),jNt.forEach(t),QWo=r(FOe," \u2014 "),uW=n(FOe,"A",{href:!0});var DNt=s(uW);WWo=r(DNt,"GPTNeoForCausalLM"),DNt.forEach(t),UWo=r(FOe," (GPT Neo model)"),FOe.forEach(t),HWo=i(U),o1=n(U,"LI",{});var TOe=s(o1);m1e=n(TOe,"STRONG",{});var GNt=s(m1e);JWo=r(GNt,"gpt_neox"),GNt.forEach(t),YWo=r(TOe," \u2014 "),pW=n(TOe,"A",{href:!0});var ONt=s(pW);ZWo=r(ONt,"GPTNeoXForCausalLM"),ONt.forEach(t),KWo=r(TOe," (GPT NeoX model)"),TOe.forEach(t),eUo=i(U),r1=n(U,"LI",{});var MOe=s(r1);g1e=n(MOe,"STRONG",{});var VNt=s(g1e);oUo=r(VNt,"gpt_neox_japanese"),VNt.forEach(t),rUo=r(MOe," \u2014 "),_W=n(MOe,"A",{href:!0});var XNt=s(_W);tUo=r(XNt,"GPTNeoXJapaneseForCausalLM"),XNt.forEach(t),aUo=r(MOe," (GPT NeoX Japanese model)"),MOe.forEach(t),nUo=i(U),t1=n(U,"LI",{});var EOe=s(t1);h1e=n(EOe,"STRONG",{});var zNt=s(h1e);sUo=r(zNt,"gptj"),zNt.forEach(t),lUo=r(EOe," \u2014 "),vW=n(EOe,"A",{href:!0});var QNt=s(vW);iUo=r(QNt,"GPTJForCausalLM"),QNt.forEach(t),dUo=r(EOe," (GPT-J model)"),EOe.forEach(t),cUo=i(U),a1=n(U,"LI",{});var COe=s(a1);u1e=n(COe,"STRONG",{});var WNt=s(u1e);fUo=r(WNt,"marian"),WNt.forEach(t),mUo=r(COe," \u2014 "),bW=n(COe,"A",{href:!0});var UNt=s(bW);gUo=r(UNt,"MarianForCausalLM"),UNt.forEach(t),hUo=r(COe," (Marian model)"),COe.forEach(t),uUo=i(U),n1=n(U,"LI",{});var wOe=s(n1);p1e=n(wOe,"STRONG",{});var HNt=s(p1e);pUo=r(HNt,"mbart"),HNt.forEach(t),_Uo=r(wOe," \u2014 "),FW=n(wOe,"A",{href:!0});var JNt=s(FW);vUo=r(JNt,"MBartForCausalLM"),JNt.forEach(t),bUo=r(wOe," (mBART model)"),wOe.forEach(t),FUo=i(U),s1=n(U,"LI",{});var AOe=s(s1);_1e=n(AOe,"STRONG",{});var YNt=s(_1e);TUo=r(YNt,"megatron-bert"),YNt.forEach(t),MUo=r(AOe," \u2014 "),TW=n(AOe,"A",{href:!0});var ZNt=s(TW);EUo=r(ZNt,"MegatronBertForCausalLM"),ZNt.forEach(t),CUo=r(AOe," (Megatron-BERT model)"),AOe.forEach(t),wUo=i(U),l1=n(U,"LI",{});var LOe=s(l1);v1e=n(LOe,"STRONG",{});var KNt=s(v1e);AUo=r(KNt,"mvp"),KNt.forEach(t),LUo=r(LOe," \u2014 "),MW=n(LOe,"A",{href:!0});var eqt=s(MW);yUo=r(eqt,"MvpForCausalLM"),eqt.forEach(t),xUo=r(LOe," (MVP model)"),LOe.forEach(t),$Uo=i(U),i1=n(U,"LI",{});var yOe=s(i1);b1e=n(yOe,"STRONG",{});var oqt=s(b1e);kUo=r(oqt,"openai-gpt"),oqt.forEach(t),SUo=r(yOe," \u2014 "),EW=n(yOe,"A",{href:!0});var rqt=s(EW);RUo=r(rqt,"OpenAIGPTLMHeadModel"),rqt.forEach(t),PUo=r(yOe," (OpenAI GPT model)"),yOe.forEach(t),BUo=i(U),d1=n(U,"LI",{});var xOe=s(d1);F1e=n(xOe,"STRONG",{});var tqt=s(F1e);IUo=r(tqt,"opt"),tqt.forEach(t),NUo=r(xOe," \u2014 "),CW=n(xOe,"A",{href:!0});var aqt=s(CW);qUo=r(aqt,"OPTForCausalLM"),aqt.forEach(t),jUo=r(xOe," (OPT model)"),xOe.forEach(t),DUo=i(U),c1=n(U,"LI",{});var $Oe=s(c1);T1e=n($Oe,"STRONG",{});var nqt=s(T1e);GUo=r(nqt,"pegasus"),nqt.forEach(t),OUo=r($Oe," \u2014 "),wW=n($Oe,"A",{href:!0});var sqt=s(wW);VUo=r(sqt,"PegasusForCausalLM"),sqt.forEach(t),XUo=r($Oe," (Pegasus model)"),$Oe.forEach(t),zUo=i(U),f1=n(U,"LI",{});var kOe=s(f1);M1e=n(kOe,"STRONG",{});var lqt=s(M1e);QUo=r(lqt,"plbart"),lqt.forEach(t),WUo=r(kOe," \u2014 "),AW=n(kOe,"A",{href:!0});var iqt=s(AW);UUo=r(iqt,"PLBartForCausalLM"),iqt.forEach(t),HUo=r(kOe," (PLBart model)"),kOe.forEach(t),JUo=i(U),m1=n(U,"LI",{});var SOe=s(m1);E1e=n(SOe,"STRONG",{});var dqt=s(E1e);YUo=r(dqt,"prophetnet"),dqt.forEach(t),ZUo=r(SOe," \u2014 "),LW=n(SOe,"A",{href:!0});var cqt=s(LW);KUo=r(cqt,"ProphetNetForCausalLM"),cqt.forEach(t),eHo=r(SOe," (ProphetNet model)"),SOe.forEach(t),oHo=i(U),g1=n(U,"LI",{});var ROe=s(g1);C1e=n(ROe,"STRONG",{});var fqt=s(C1e);rHo=r(fqt,"qdqbert"),fqt.forEach(t),tHo=r(ROe," \u2014 "),yW=n(ROe,"A",{href:!0});var mqt=s(yW);aHo=r(mqt,"QDQBertLMHeadModel"),mqt.forEach(t),nHo=r(ROe," (QDQBert model)"),ROe.forEach(t),sHo=i(U),h1=n(U,"LI",{});var POe=s(h1);w1e=n(POe,"STRONG",{});var gqt=s(w1e);lHo=r(gqt,"reformer"),gqt.forEach(t),iHo=r(POe," \u2014 "),xW=n(POe,"A",{href:!0});var hqt=s(xW);dHo=r(hqt,"ReformerModelWithLMHead"),hqt.forEach(t),cHo=r(POe," (Reformer model)"),POe.forEach(t),fHo=i(U),u1=n(U,"LI",{});var BOe=s(u1);A1e=n(BOe,"STRONG",{});var uqt=s(A1e);mHo=r(uqt,"rembert"),uqt.forEach(t),gHo=r(BOe," \u2014 "),$W=n(BOe,"A",{href:!0});var pqt=s($W);hHo=r(pqt,"RemBertForCausalLM"),pqt.forEach(t),uHo=r(BOe," (RemBERT model)"),BOe.forEach(t),pHo=i(U),p1=n(U,"LI",{});var IOe=s(p1);L1e=n(IOe,"STRONG",{});var _qt=s(L1e);_Ho=r(_qt,"roberta"),_qt.forEach(t),vHo=r(IOe," \u2014 "),kW=n(IOe,"A",{href:!0});var vqt=s(kW);bHo=r(vqt,"RobertaForCausalLM"),vqt.forEach(t),FHo=r(IOe," (RoBERTa model)"),IOe.forEach(t),THo=i(U),_1=n(U,"LI",{});var NOe=s(_1);y1e=n(NOe,"STRONG",{});var bqt=s(y1e);MHo=r(bqt,"roformer"),bqt.forEach(t),EHo=r(NOe," \u2014 "),SW=n(NOe,"A",{href:!0});var Fqt=s(SW);CHo=r(Fqt,"RoFormerForCausalLM"),Fqt.forEach(t),wHo=r(NOe," (RoFormer model)"),NOe.forEach(t),AHo=i(U),v1=n(U,"LI",{});var qOe=s(v1);x1e=n(qOe,"STRONG",{});var Tqt=s(x1e);LHo=r(Tqt,"speech_to_text_2"),Tqt.forEach(t),yHo=r(qOe," \u2014 "),RW=n(qOe,"A",{href:!0});var Mqt=s(RW);xHo=r(Mqt,"Speech2Text2ForCausalLM"),Mqt.forEach(t),$Ho=r(qOe," (Speech2Text2 model)"),qOe.forEach(t),kHo=i(U),b1=n(U,"LI",{});var jOe=s(b1);$1e=n(jOe,"STRONG",{});var Eqt=s($1e);SHo=r(Eqt,"transfo-xl"),Eqt.forEach(t),RHo=r(jOe," \u2014 "),PW=n(jOe,"A",{href:!0});var Cqt=s(PW);PHo=r(Cqt,"TransfoXLLMHeadModel"),Cqt.forEach(t),BHo=r(jOe," (Transformer-XL model)"),jOe.forEach(t),IHo=i(U),F1=n(U,"LI",{});var DOe=s(F1);k1e=n(DOe,"STRONG",{});var wqt=s(k1e);NHo=r(wqt,"trocr"),wqt.forEach(t),qHo=r(DOe," \u2014 "),BW=n(DOe,"A",{href:!0});var Aqt=s(BW);jHo=r(Aqt,"TrOCRForCausalLM"),Aqt.forEach(t),DHo=r(DOe," (TrOCR model)"),DOe.forEach(t),GHo=i(U),T1=n(U,"LI",{});var GOe=s(T1);S1e=n(GOe,"STRONG",{});var Lqt=s(S1e);OHo=r(Lqt,"xglm"),Lqt.forEach(t),VHo=r(GOe," \u2014 "),IW=n(GOe,"A",{href:!0});var yqt=s(IW);XHo=r(yqt,"XGLMForCausalLM"),yqt.forEach(t),zHo=r(GOe," (XGLM model)"),GOe.forEach(t),QHo=i(U),M1=n(U,"LI",{});var OOe=s(M1);R1e=n(OOe,"STRONG",{});var xqt=s(R1e);WHo=r(xqt,"xlm"),xqt.forEach(t),UHo=r(OOe," \u2014 "),NW=n(OOe,"A",{href:!0});var $qt=s(NW);HHo=r($qt,"XLMWithLMHeadModel"),$qt.forEach(t),JHo=r(OOe," (XLM model)"),OOe.forEach(t),YHo=i(U),E1=n(U,"LI",{});var VOe=s(E1);P1e=n(VOe,"STRONG",{});var kqt=s(P1e);ZHo=r(kqt,"xlm-prophetnet"),kqt.forEach(t),KHo=r(VOe," \u2014 "),qW=n(VOe,"A",{href:!0});var Sqt=s(qW);eJo=r(Sqt,"XLMProphetNetForCausalLM"),Sqt.forEach(t),oJo=r(VOe," (XLM-ProphetNet model)"),VOe.forEach(t),rJo=i(U),C1=n(U,"LI",{});var XOe=s(C1);B1e=n(XOe,"STRONG",{});var Rqt=s(B1e);tJo=r(Rqt,"xlm-roberta"),Rqt.forEach(t),aJo=r(XOe," \u2014 "),jW=n(XOe,"A",{href:!0});var Pqt=s(jW);nJo=r(Pqt,"XLMRobertaForCausalLM"),Pqt.forEach(t),sJo=r(XOe," (XLM-RoBERTa model)"),XOe.forEach(t),lJo=i(U),w1=n(U,"LI",{});var zOe=s(w1);I1e=n(zOe,"STRONG",{});var Bqt=s(I1e);iJo=r(Bqt,"xlm-roberta-xl"),Bqt.forEach(t),dJo=r(zOe," \u2014 "),DW=n(zOe,"A",{href:!0});var Iqt=s(DW);cJo=r(Iqt,"XLMRobertaXLForCausalLM"),Iqt.forEach(t),fJo=r(zOe," (XLM-RoBERTa-XL model)"),zOe.forEach(t),mJo=i(U),A1=n(U,"LI",{});var QOe=s(A1);N1e=n(QOe,"STRONG",{});var Nqt=s(N1e);gJo=r(Nqt,"xlnet"),Nqt.forEach(t),hJo=r(QOe," \u2014 "),GW=n(QOe,"A",{href:!0});var qqt=s(GW);uJo=r(qqt,"XLNetLMHeadModel"),qqt.forEach(t),pJo=r(QOe," (XLNet model)"),QOe.forEach(t),U.forEach(t),_Jo=i(wa),L1=n(wa,"P",{});var WOe=s(L1);vJo=r(WOe,"The model is set in evaluation mode by default using "),q1e=n(WOe,"CODE",{});var jqt=s(q1e);bJo=r(jqt,"model.eval()"),jqt.forEach(t),FJo=r(WOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j1e=n(WOe,"CODE",{});var Dqt=s(j1e);TJo=r(Dqt,"model.train()"),Dqt.forEach(t),WOe.forEach(t),MJo=i(wa),T(y1.$$.fragment,wa),wa.forEach(t),Rl.forEach(t),Boo=i(f),Sd=n(f,"H2",{class:!0});var Yto=s(Sd);x1=n(Yto,"A",{id:!0,class:!0,href:!0});var Gqt=s(x1);D1e=n(Gqt,"SPAN",{});var Oqt=s(D1e);T(u$.$$.fragment,Oqt),Oqt.forEach(t),Gqt.forEach(t),EJo=i(Yto),G1e=n(Yto,"SPAN",{});var Vqt=s(G1e);CJo=r(Vqt,"AutoModelForMaskedLM"),Vqt.forEach(t),Yto.forEach(t),Ioo=i(f),qo=n(f,"DIV",{class:!0});var Pl=s(qo);T(p$.$$.fragment,Pl),wJo=i(Pl),Rd=n(Pl,"P",{});var Yie=s(Rd);AJo=r(Yie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),OW=n(Yie,"A",{href:!0});var Xqt=s(OW);LJo=r(Xqt,"from_pretrained()"),Xqt.forEach(t),yJo=r(Yie," class method or the "),VW=n(Yie,"A",{href:!0});var zqt=s(VW);xJo=r(zqt,"from_config()"),zqt.forEach(t),$Jo=r(Yie,` class
method.`),Yie.forEach(t),kJo=i(Pl),_$=n(Pl,"P",{});var Zto=s(_$);SJo=r(Zto,"This class cannot be instantiated directly using "),O1e=n(Zto,"CODE",{});var Qqt=s(O1e);RJo=r(Qqt,"__init__()"),Qqt.forEach(t),PJo=r(Zto," (throws an error)."),Zto.forEach(t),BJo=i(Pl),Mt=n(Pl,"DIV",{class:!0});var Ay=s(Mt);T(v$.$$.fragment,Ay),IJo=i(Ay),V1e=n(Ay,"P",{});var Wqt=s(V1e);NJo=r(Wqt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Wqt.forEach(t),qJo=i(Ay),Pd=n(Ay,"P",{});var Zie=s(Pd);jJo=r(Zie,`Note:
Loading a model from its configuration file does `),X1e=n(Zie,"STRONG",{});var Uqt=s(X1e);DJo=r(Uqt,"not"),Uqt.forEach(t),GJo=r(Zie,` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=n(Zie,"A",{href:!0});var Hqt=s(XW);OJo=r(Hqt,"from_pretrained()"),Hqt.forEach(t),VJo=r(Zie," to load the model weights."),Zie.forEach(t),XJo=i(Ay),T($1.$$.fragment,Ay),Ay.forEach(t),zJo=i(Pl),ro=n(Pl,"DIV",{class:!0});var Aa=s(ro);T(b$.$$.fragment,Aa),QJo=i(Aa),z1e=n(Aa,"P",{});var Jqt=s(z1e);WJo=r(Jqt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Jqt.forEach(t),UJo=i(Aa),tn=n(Aa,"P",{});var Ly=s(tn);HJo=r(Ly,"The model class to instantiate is selected based on the "),Q1e=n(Ly,"CODE",{});var Yqt=s(Q1e);JJo=r(Yqt,"model_type"),Yqt.forEach(t),YJo=r(Ly,` property of the config object (either
passed as an argument or loaded from `),W1e=n(Ly,"CODE",{});var Zqt=s(W1e);ZJo=r(Zqt,"pretrained_model_name_or_path"),Zqt.forEach(t),KJo=r(Ly,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=n(Ly,"CODE",{});var Kqt=s(U1e);eYo=r(Kqt,"pretrained_model_name_or_path"),Kqt.forEach(t),oYo=r(Ly,":"),Ly.forEach(t),rYo=i(Aa),J=n(Aa,"UL",{});var Z=s(J);k1=n(Z,"LI",{});var UOe=s(k1);H1e=n(UOe,"STRONG",{});var ejt=s(H1e);tYo=r(ejt,"albert"),ejt.forEach(t),aYo=r(UOe," \u2014 "),zW=n(UOe,"A",{href:!0});var ojt=s(zW);nYo=r(ojt,"AlbertForMaskedLM"),ojt.forEach(t),sYo=r(UOe," (ALBERT model)"),UOe.forEach(t),lYo=i(Z),S1=n(Z,"LI",{});var HOe=s(S1);J1e=n(HOe,"STRONG",{});var rjt=s(J1e);iYo=r(rjt,"bart"),rjt.forEach(t),dYo=r(HOe," \u2014 "),QW=n(HOe,"A",{href:!0});var tjt=s(QW);cYo=r(tjt,"BartForConditionalGeneration"),tjt.forEach(t),fYo=r(HOe," (BART model)"),HOe.forEach(t),mYo=i(Z),R1=n(Z,"LI",{});var JOe=s(R1);Y1e=n(JOe,"STRONG",{});var ajt=s(Y1e);gYo=r(ajt,"bert"),ajt.forEach(t),hYo=r(JOe," \u2014 "),WW=n(JOe,"A",{href:!0});var njt=s(WW);uYo=r(njt,"BertForMaskedLM"),njt.forEach(t),pYo=r(JOe," (BERT model)"),JOe.forEach(t),_Yo=i(Z),P1=n(Z,"LI",{});var YOe=s(P1);Z1e=n(YOe,"STRONG",{});var sjt=s(Z1e);vYo=r(sjt,"big_bird"),sjt.forEach(t),bYo=r(YOe," \u2014 "),UW=n(YOe,"A",{href:!0});var ljt=s(UW);FYo=r(ljt,"BigBirdForMaskedLM"),ljt.forEach(t),TYo=r(YOe," (BigBird model)"),YOe.forEach(t),MYo=i(Z),B1=n(Z,"LI",{});var ZOe=s(B1);K1e=n(ZOe,"STRONG",{});var ijt=s(K1e);EYo=r(ijt,"camembert"),ijt.forEach(t),CYo=r(ZOe," \u2014 "),HW=n(ZOe,"A",{href:!0});var djt=s(HW);wYo=r(djt,"CamembertForMaskedLM"),djt.forEach(t),AYo=r(ZOe," (CamemBERT model)"),ZOe.forEach(t),LYo=i(Z),I1=n(Z,"LI",{});var KOe=s(I1);ebe=n(KOe,"STRONG",{});var cjt=s(ebe);yYo=r(cjt,"convbert"),cjt.forEach(t),xYo=r(KOe," \u2014 "),JW=n(KOe,"A",{href:!0});var fjt=s(JW);$Yo=r(fjt,"ConvBertForMaskedLM"),fjt.forEach(t),kYo=r(KOe," (ConvBERT model)"),KOe.forEach(t),SYo=i(Z),N1=n(Z,"LI",{});var eVe=s(N1);obe=n(eVe,"STRONG",{});var mjt=s(obe);RYo=r(mjt,"data2vec-text"),mjt.forEach(t),PYo=r(eVe," \u2014 "),YW=n(eVe,"A",{href:!0});var gjt=s(YW);BYo=r(gjt,"Data2VecTextForMaskedLM"),gjt.forEach(t),IYo=r(eVe," (Data2VecText model)"),eVe.forEach(t),NYo=i(Z),q1=n(Z,"LI",{});var oVe=s(q1);rbe=n(oVe,"STRONG",{});var hjt=s(rbe);qYo=r(hjt,"deberta"),hjt.forEach(t),jYo=r(oVe," \u2014 "),ZW=n(oVe,"A",{href:!0});var ujt=s(ZW);DYo=r(ujt,"DebertaForMaskedLM"),ujt.forEach(t),GYo=r(oVe," (DeBERTa model)"),oVe.forEach(t),OYo=i(Z),j1=n(Z,"LI",{});var rVe=s(j1);tbe=n(rVe,"STRONG",{});var pjt=s(tbe);VYo=r(pjt,"deberta-v2"),pjt.forEach(t),XYo=r(rVe," \u2014 "),KW=n(rVe,"A",{href:!0});var _jt=s(KW);zYo=r(_jt,"DebertaV2ForMaskedLM"),_jt.forEach(t),QYo=r(rVe," (DeBERTa-v2 model)"),rVe.forEach(t),WYo=i(Z),D1=n(Z,"LI",{});var tVe=s(D1);abe=n(tVe,"STRONG",{});var vjt=s(abe);UYo=r(vjt,"distilbert"),vjt.forEach(t),HYo=r(tVe," \u2014 "),eU=n(tVe,"A",{href:!0});var bjt=s(eU);JYo=r(bjt,"DistilBertForMaskedLM"),bjt.forEach(t),YYo=r(tVe," (DistilBERT model)"),tVe.forEach(t),ZYo=i(Z),G1=n(Z,"LI",{});var aVe=s(G1);nbe=n(aVe,"STRONG",{});var Fjt=s(nbe);KYo=r(Fjt,"electra"),Fjt.forEach(t),eZo=r(aVe," \u2014 "),oU=n(aVe,"A",{href:!0});var Tjt=s(oU);oZo=r(Tjt,"ElectraForMaskedLM"),Tjt.forEach(t),rZo=r(aVe," (ELECTRA model)"),aVe.forEach(t),tZo=i(Z),O1=n(Z,"LI",{});var nVe=s(O1);sbe=n(nVe,"STRONG",{});var Mjt=s(sbe);aZo=r(Mjt,"ernie"),Mjt.forEach(t),nZo=r(nVe," \u2014 "),rU=n(nVe,"A",{href:!0});var Ejt=s(rU);sZo=r(Ejt,"ErnieForMaskedLM"),Ejt.forEach(t),lZo=r(nVe," (ERNIE model)"),nVe.forEach(t),iZo=i(Z),V1=n(Z,"LI",{});var sVe=s(V1);lbe=n(sVe,"STRONG",{});var Cjt=s(lbe);dZo=r(Cjt,"flaubert"),Cjt.forEach(t),cZo=r(sVe," \u2014 "),tU=n(sVe,"A",{href:!0});var wjt=s(tU);fZo=r(wjt,"FlaubertWithLMHeadModel"),wjt.forEach(t),mZo=r(sVe," (FlauBERT model)"),sVe.forEach(t),gZo=i(Z),X1=n(Z,"LI",{});var lVe=s(X1);ibe=n(lVe,"STRONG",{});var Ajt=s(ibe);hZo=r(Ajt,"fnet"),Ajt.forEach(t),uZo=r(lVe," \u2014 "),aU=n(lVe,"A",{href:!0});var Ljt=s(aU);pZo=r(Ljt,"FNetForMaskedLM"),Ljt.forEach(t),_Zo=r(lVe," (FNet model)"),lVe.forEach(t),vZo=i(Z),z1=n(Z,"LI",{});var iVe=s(z1);dbe=n(iVe,"STRONG",{});var yjt=s(dbe);bZo=r(yjt,"funnel"),yjt.forEach(t),FZo=r(iVe," \u2014 "),nU=n(iVe,"A",{href:!0});var xjt=s(nU);TZo=r(xjt,"FunnelForMaskedLM"),xjt.forEach(t),MZo=r(iVe," (Funnel Transformer model)"),iVe.forEach(t),EZo=i(Z),Q1=n(Z,"LI",{});var dVe=s(Q1);cbe=n(dVe,"STRONG",{});var $jt=s(cbe);CZo=r($jt,"ibert"),$jt.forEach(t),wZo=r(dVe," \u2014 "),sU=n(dVe,"A",{href:!0});var kjt=s(sU);AZo=r(kjt,"IBertForMaskedLM"),kjt.forEach(t),LZo=r(dVe," (I-BERT model)"),dVe.forEach(t),yZo=i(Z),W1=n(Z,"LI",{});var cVe=s(W1);fbe=n(cVe,"STRONG",{});var Sjt=s(fbe);xZo=r(Sjt,"layoutlm"),Sjt.forEach(t),$Zo=r(cVe," \u2014 "),lU=n(cVe,"A",{href:!0});var Rjt=s(lU);kZo=r(Rjt,"LayoutLMForMaskedLM"),Rjt.forEach(t),SZo=r(cVe," (LayoutLM model)"),cVe.forEach(t),RZo=i(Z),U1=n(Z,"LI",{});var fVe=s(U1);mbe=n(fVe,"STRONG",{});var Pjt=s(mbe);PZo=r(Pjt,"longformer"),Pjt.forEach(t),BZo=r(fVe," \u2014 "),iU=n(fVe,"A",{href:!0});var Bjt=s(iU);IZo=r(Bjt,"LongformerForMaskedLM"),Bjt.forEach(t),NZo=r(fVe," (Longformer model)"),fVe.forEach(t),qZo=i(Z),H1=n(Z,"LI",{});var mVe=s(H1);gbe=n(mVe,"STRONG",{});var Ijt=s(gbe);jZo=r(Ijt,"luke"),Ijt.forEach(t),DZo=r(mVe," \u2014 "),dU=n(mVe,"A",{href:!0});var Njt=s(dU);GZo=r(Njt,"LukeForMaskedLM"),Njt.forEach(t),OZo=r(mVe," (LUKE model)"),mVe.forEach(t),VZo=i(Z),J1=n(Z,"LI",{});var gVe=s(J1);hbe=n(gVe,"STRONG",{});var qjt=s(hbe);XZo=r(qjt,"mbart"),qjt.forEach(t),zZo=r(gVe," \u2014 "),cU=n(gVe,"A",{href:!0});var jjt=s(cU);QZo=r(jjt,"MBartForConditionalGeneration"),jjt.forEach(t),WZo=r(gVe," (mBART model)"),gVe.forEach(t),UZo=i(Z),Y1=n(Z,"LI",{});var hVe=s(Y1);ube=n(hVe,"STRONG",{});var Djt=s(ube);HZo=r(Djt,"megatron-bert"),Djt.forEach(t),JZo=r(hVe," \u2014 "),fU=n(hVe,"A",{href:!0});var Gjt=s(fU);YZo=r(Gjt,"MegatronBertForMaskedLM"),Gjt.forEach(t),ZZo=r(hVe," (Megatron-BERT model)"),hVe.forEach(t),KZo=i(Z),Z1=n(Z,"LI",{});var uVe=s(Z1);pbe=n(uVe,"STRONG",{});var Ojt=s(pbe);eKo=r(Ojt,"mobilebert"),Ojt.forEach(t),oKo=r(uVe," \u2014 "),mU=n(uVe,"A",{href:!0});var Vjt=s(mU);rKo=r(Vjt,"MobileBertForMaskedLM"),Vjt.forEach(t),tKo=r(uVe," (MobileBERT model)"),uVe.forEach(t),aKo=i(Z),K1=n(Z,"LI",{});var pVe=s(K1);_be=n(pVe,"STRONG",{});var Xjt=s(_be);nKo=r(Xjt,"mpnet"),Xjt.forEach(t),sKo=r(pVe," \u2014 "),gU=n(pVe,"A",{href:!0});var zjt=s(gU);lKo=r(zjt,"MPNetForMaskedLM"),zjt.forEach(t),iKo=r(pVe," (MPNet model)"),pVe.forEach(t),dKo=i(Z),eb=n(Z,"LI",{});var _Ve=s(eb);vbe=n(_Ve,"STRONG",{});var Qjt=s(vbe);cKo=r(Qjt,"mvp"),Qjt.forEach(t),fKo=r(_Ve," \u2014 "),hU=n(_Ve,"A",{href:!0});var Wjt=s(hU);mKo=r(Wjt,"MvpForConditionalGeneration"),Wjt.forEach(t),gKo=r(_Ve," (MVP model)"),_Ve.forEach(t),hKo=i(Z),ob=n(Z,"LI",{});var vVe=s(ob);bbe=n(vVe,"STRONG",{});var Ujt=s(bbe);uKo=r(Ujt,"nezha"),Ujt.forEach(t),pKo=r(vVe," \u2014 "),uU=n(vVe,"A",{href:!0});var Hjt=s(uU);_Ko=r(Hjt,"NezhaForMaskedLM"),Hjt.forEach(t),vKo=r(vVe," (Nezha model)"),vVe.forEach(t),bKo=i(Z),rb=n(Z,"LI",{});var bVe=s(rb);Fbe=n(bVe,"STRONG",{});var Jjt=s(Fbe);FKo=r(Jjt,"nystromformer"),Jjt.forEach(t),TKo=r(bVe," \u2014 "),pU=n(bVe,"A",{href:!0});var Yjt=s(pU);MKo=r(Yjt,"NystromformerForMaskedLM"),Yjt.forEach(t),EKo=r(bVe," (Nystr\xF6mformer model)"),bVe.forEach(t),CKo=i(Z),tb=n(Z,"LI",{});var FVe=s(tb);Tbe=n(FVe,"STRONG",{});var Zjt=s(Tbe);wKo=r(Zjt,"perceiver"),Zjt.forEach(t),AKo=r(FVe," \u2014 "),_U=n(FVe,"A",{href:!0});var Kjt=s(_U);LKo=r(Kjt,"PerceiverForMaskedLM"),Kjt.forEach(t),yKo=r(FVe," (Perceiver model)"),FVe.forEach(t),xKo=i(Z),ab=n(Z,"LI",{});var TVe=s(ab);Mbe=n(TVe,"STRONG",{});var eDt=s(Mbe);$Ko=r(eDt,"qdqbert"),eDt.forEach(t),kKo=r(TVe," \u2014 "),vU=n(TVe,"A",{href:!0});var oDt=s(vU);SKo=r(oDt,"QDQBertForMaskedLM"),oDt.forEach(t),RKo=r(TVe," (QDQBert model)"),TVe.forEach(t),PKo=i(Z),nb=n(Z,"LI",{});var MVe=s(nb);Ebe=n(MVe,"STRONG",{});var rDt=s(Ebe);BKo=r(rDt,"reformer"),rDt.forEach(t),IKo=r(MVe," \u2014 "),bU=n(MVe,"A",{href:!0});var tDt=s(bU);NKo=r(tDt,"ReformerForMaskedLM"),tDt.forEach(t),qKo=r(MVe," (Reformer model)"),MVe.forEach(t),jKo=i(Z),sb=n(Z,"LI",{});var EVe=s(sb);Cbe=n(EVe,"STRONG",{});var aDt=s(Cbe);DKo=r(aDt,"rembert"),aDt.forEach(t),GKo=r(EVe," \u2014 "),FU=n(EVe,"A",{href:!0});var nDt=s(FU);OKo=r(nDt,"RemBertForMaskedLM"),nDt.forEach(t),VKo=r(EVe," (RemBERT model)"),EVe.forEach(t),XKo=i(Z),lb=n(Z,"LI",{});var CVe=s(lb);wbe=n(CVe,"STRONG",{});var sDt=s(wbe);zKo=r(sDt,"roberta"),sDt.forEach(t),QKo=r(CVe," \u2014 "),TU=n(CVe,"A",{href:!0});var lDt=s(TU);WKo=r(lDt,"RobertaForMaskedLM"),lDt.forEach(t),UKo=r(CVe," (RoBERTa model)"),CVe.forEach(t),HKo=i(Z),ib=n(Z,"LI",{});var wVe=s(ib);Abe=n(wVe,"STRONG",{});var iDt=s(Abe);JKo=r(iDt,"roformer"),iDt.forEach(t),YKo=r(wVe," \u2014 "),MU=n(wVe,"A",{href:!0});var dDt=s(MU);ZKo=r(dDt,"RoFormerForMaskedLM"),dDt.forEach(t),KKo=r(wVe," (RoFormer model)"),wVe.forEach(t),eer=i(Z),db=n(Z,"LI",{});var AVe=s(db);Lbe=n(AVe,"STRONG",{});var cDt=s(Lbe);oer=r(cDt,"squeezebert"),cDt.forEach(t),rer=r(AVe," \u2014 "),EU=n(AVe,"A",{href:!0});var fDt=s(EU);ter=r(fDt,"SqueezeBertForMaskedLM"),fDt.forEach(t),aer=r(AVe," (SqueezeBERT model)"),AVe.forEach(t),ner=i(Z),cb=n(Z,"LI",{});var LVe=s(cb);ybe=n(LVe,"STRONG",{});var mDt=s(ybe);ser=r(mDt,"tapas"),mDt.forEach(t),ler=r(LVe," \u2014 "),CU=n(LVe,"A",{href:!0});var gDt=s(CU);ier=r(gDt,"TapasForMaskedLM"),gDt.forEach(t),der=r(LVe," (TAPAS model)"),LVe.forEach(t),cer=i(Z),fb=n(Z,"LI",{});var yVe=s(fb);xbe=n(yVe,"STRONG",{});var hDt=s(xbe);fer=r(hDt,"wav2vec2"),hDt.forEach(t),mer=r(yVe," \u2014 "),$be=n(yVe,"CODE",{});var uDt=s($be);ger=r(uDt,"Wav2Vec2ForMaskedLM"),uDt.forEach(t),her=r(yVe," (Wav2Vec2 model)"),yVe.forEach(t),uer=i(Z),mb=n(Z,"LI",{});var xVe=s(mb);kbe=n(xVe,"STRONG",{});var pDt=s(kbe);per=r(pDt,"xlm"),pDt.forEach(t),_er=r(xVe," \u2014 "),wU=n(xVe,"A",{href:!0});var _Dt=s(wU);ver=r(_Dt,"XLMWithLMHeadModel"),_Dt.forEach(t),ber=r(xVe," (XLM model)"),xVe.forEach(t),Fer=i(Z),gb=n(Z,"LI",{});var $Ve=s(gb);Sbe=n($Ve,"STRONG",{});var vDt=s(Sbe);Ter=r(vDt,"xlm-roberta"),vDt.forEach(t),Mer=r($Ve," \u2014 "),AU=n($Ve,"A",{href:!0});var bDt=s(AU);Eer=r(bDt,"XLMRobertaForMaskedLM"),bDt.forEach(t),Cer=r($Ve," (XLM-RoBERTa model)"),$Ve.forEach(t),wer=i(Z),hb=n(Z,"LI",{});var kVe=s(hb);Rbe=n(kVe,"STRONG",{});var FDt=s(Rbe);Aer=r(FDt,"xlm-roberta-xl"),FDt.forEach(t),Ler=r(kVe," \u2014 "),LU=n(kVe,"A",{href:!0});var TDt=s(LU);yer=r(TDt,"XLMRobertaXLForMaskedLM"),TDt.forEach(t),xer=r(kVe," (XLM-RoBERTa-XL model)"),kVe.forEach(t),$er=i(Z),ub=n(Z,"LI",{});var SVe=s(ub);Pbe=n(SVe,"STRONG",{});var MDt=s(Pbe);ker=r(MDt,"yoso"),MDt.forEach(t),Ser=r(SVe," \u2014 "),yU=n(SVe,"A",{href:!0});var EDt=s(yU);Rer=r(EDt,"YosoForMaskedLM"),EDt.forEach(t),Per=r(SVe," (YOSO model)"),SVe.forEach(t),Z.forEach(t),Ber=i(Aa),pb=n(Aa,"P",{});var RVe=s(pb);Ier=r(RVe,"The model is set in evaluation mode by default using "),Bbe=n(RVe,"CODE",{});var CDt=s(Bbe);Ner=r(CDt,"model.eval()"),CDt.forEach(t),qer=r(RVe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ibe=n(RVe,"CODE",{});var wDt=s(Ibe);jer=r(wDt,"model.train()"),wDt.forEach(t),RVe.forEach(t),Der=i(Aa),T(_b.$$.fragment,Aa),Aa.forEach(t),Pl.forEach(t),Noo=i(f),Bd=n(f,"H2",{class:!0});var Kto=s(Bd);vb=n(Kto,"A",{id:!0,class:!0,href:!0});var ADt=s(vb);Nbe=n(ADt,"SPAN",{});var LDt=s(Nbe);T(F$.$$.fragment,LDt),LDt.forEach(t),ADt.forEach(t),Ger=i(Kto),qbe=n(Kto,"SPAN",{});var yDt=s(qbe);Oer=r(yDt,"AutoModelForSeq2SeqLM"),yDt.forEach(t),Kto.forEach(t),qoo=i(f),jo=n(f,"DIV",{class:!0});var Bl=s(jo);T(T$.$$.fragment,Bl),Ver=i(Bl),Id=n(Bl,"P",{});var Kie=s(Id);Xer=r(Kie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),xU=n(Kie,"A",{href:!0});var xDt=s(xU);zer=r(xDt,"from_pretrained()"),xDt.forEach(t),Qer=r(Kie," class method or the "),$U=n(Kie,"A",{href:!0});var $Dt=s($U);Wer=r($Dt,"from_config()"),$Dt.forEach(t),Uer=r(Kie,` class
method.`),Kie.forEach(t),Her=i(Bl),M$=n(Bl,"P",{});var eao=s(M$);Jer=r(eao,"This class cannot be instantiated directly using "),jbe=n(eao,"CODE",{});var kDt=s(jbe);Yer=r(kDt,"__init__()"),kDt.forEach(t),Zer=r(eao," (throws an error)."),eao.forEach(t),Ker=i(Bl),Et=n(Bl,"DIV",{class:!0});var yy=s(Et);T(E$.$$.fragment,yy),eor=i(yy),Dbe=n(yy,"P",{});var SDt=s(Dbe);oor=r(SDt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),SDt.forEach(t),ror=i(yy),Nd=n(yy,"P",{});var ede=s(Nd);tor=r(ede,`Note:
Loading a model from its configuration file does `),Gbe=n(ede,"STRONG",{});var RDt=s(Gbe);aor=r(RDt,"not"),RDt.forEach(t),nor=r(ede,` load the model weights. It only affects the
model\u2019s configuration. Use `),kU=n(ede,"A",{href:!0});var PDt=s(kU);sor=r(PDt,"from_pretrained()"),PDt.forEach(t),lor=r(ede," to load the model weights."),ede.forEach(t),ior=i(yy),T(bb.$$.fragment,yy),yy.forEach(t),dor=i(Bl),to=n(Bl,"DIV",{class:!0});var La=s(to);T(C$.$$.fragment,La),cor=i(La),Obe=n(La,"P",{});var BDt=s(Obe);mor=r(BDt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),BDt.forEach(t),gor=i(La),an=n(La,"P",{});var xy=s(an);hor=r(xy,"The model class to instantiate is selected based on the "),Vbe=n(xy,"CODE",{});var IDt=s(Vbe);uor=r(IDt,"model_type"),IDt.forEach(t),por=r(xy,` property of the config object (either
passed as an argument or loaded from `),Xbe=n(xy,"CODE",{});var NDt=s(Xbe);_or=r(NDt,"pretrained_model_name_or_path"),NDt.forEach(t),vor=r(xy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zbe=n(xy,"CODE",{});var qDt=s(zbe);bor=r(qDt,"pretrained_model_name_or_path"),qDt.forEach(t),For=r(xy,":"),xy.forEach(t),Tor=i(La),me=n(La,"UL",{});var pe=s(me);Fb=n(pe,"LI",{});var PVe=s(Fb);Qbe=n(PVe,"STRONG",{});var jDt=s(Qbe);Mor=r(jDt,"bart"),jDt.forEach(t),Eor=r(PVe," \u2014 "),SU=n(PVe,"A",{href:!0});var DDt=s(SU);Cor=r(DDt,"BartForConditionalGeneration"),DDt.forEach(t),wor=r(PVe," (BART model)"),PVe.forEach(t),Aor=i(pe),Tb=n(pe,"LI",{});var BVe=s(Tb);Wbe=n(BVe,"STRONG",{});var GDt=s(Wbe);Lor=r(GDt,"bigbird_pegasus"),GDt.forEach(t),yor=r(BVe," \u2014 "),RU=n(BVe,"A",{href:!0});var ODt=s(RU);xor=r(ODt,"BigBirdPegasusForConditionalGeneration"),ODt.forEach(t),$or=r(BVe," (BigBird-Pegasus model)"),BVe.forEach(t),kor=i(pe),Mb=n(pe,"LI",{});var IVe=s(Mb);Ube=n(IVe,"STRONG",{});var VDt=s(Ube);Sor=r(VDt,"blenderbot"),VDt.forEach(t),Ror=r(IVe," \u2014 "),PU=n(IVe,"A",{href:!0});var XDt=s(PU);Por=r(XDt,"BlenderbotForConditionalGeneration"),XDt.forEach(t),Bor=r(IVe," (Blenderbot model)"),IVe.forEach(t),Ior=i(pe),Eb=n(pe,"LI",{});var NVe=s(Eb);Hbe=n(NVe,"STRONG",{});var zDt=s(Hbe);Nor=r(zDt,"blenderbot-small"),zDt.forEach(t),qor=r(NVe," \u2014 "),BU=n(NVe,"A",{href:!0});var QDt=s(BU);jor=r(QDt,"BlenderbotSmallForConditionalGeneration"),QDt.forEach(t),Dor=r(NVe," (BlenderbotSmall model)"),NVe.forEach(t),Gor=i(pe),Cb=n(pe,"LI",{});var qVe=s(Cb);Jbe=n(qVe,"STRONG",{});var WDt=s(Jbe);Oor=r(WDt,"encoder-decoder"),WDt.forEach(t),Vor=r(qVe," \u2014 "),IU=n(qVe,"A",{href:!0});var UDt=s(IU);Xor=r(UDt,"EncoderDecoderModel"),UDt.forEach(t),zor=r(qVe," (Encoder decoder model)"),qVe.forEach(t),Qor=i(pe),wb=n(pe,"LI",{});var jVe=s(wb);Ybe=n(jVe,"STRONG",{});var HDt=s(Ybe);Wor=r(HDt,"fsmt"),HDt.forEach(t),Uor=r(jVe," \u2014 "),NU=n(jVe,"A",{href:!0});var JDt=s(NU);Hor=r(JDt,"FSMTForConditionalGeneration"),JDt.forEach(t),Jor=r(jVe," (FairSeq Machine-Translation model)"),jVe.forEach(t),Yor=i(pe),Ab=n(pe,"LI",{});var DVe=s(Ab);Zbe=n(DVe,"STRONG",{});var YDt=s(Zbe);Zor=r(YDt,"led"),YDt.forEach(t),Kor=r(DVe," \u2014 "),qU=n(DVe,"A",{href:!0});var ZDt=s(qU);err=r(ZDt,"LEDForConditionalGeneration"),ZDt.forEach(t),orr=r(DVe," (LED model)"),DVe.forEach(t),rrr=i(pe),Lb=n(pe,"LI",{});var GVe=s(Lb);Kbe=n(GVe,"STRONG",{});var KDt=s(Kbe);trr=r(KDt,"longt5"),KDt.forEach(t),arr=r(GVe," \u2014 "),jU=n(GVe,"A",{href:!0});var eGt=s(jU);nrr=r(eGt,"LongT5ForConditionalGeneration"),eGt.forEach(t),srr=r(GVe," (LongT5 model)"),GVe.forEach(t),lrr=i(pe),yb=n(pe,"LI",{});var OVe=s(yb);e3e=n(OVe,"STRONG",{});var oGt=s(e3e);irr=r(oGt,"m2m_100"),oGt.forEach(t),drr=r(OVe," \u2014 "),DU=n(OVe,"A",{href:!0});var rGt=s(DU);crr=r(rGt,"M2M100ForConditionalGeneration"),rGt.forEach(t),frr=r(OVe," (M2M100 model)"),OVe.forEach(t),mrr=i(pe),xb=n(pe,"LI",{});var VVe=s(xb);o3e=n(VVe,"STRONG",{});var tGt=s(o3e);grr=r(tGt,"marian"),tGt.forEach(t),hrr=r(VVe," \u2014 "),GU=n(VVe,"A",{href:!0});var aGt=s(GU);urr=r(aGt,"MarianMTModel"),aGt.forEach(t),prr=r(VVe," (Marian model)"),VVe.forEach(t),_rr=i(pe),$b=n(pe,"LI",{});var XVe=s($b);r3e=n(XVe,"STRONG",{});var nGt=s(r3e);vrr=r(nGt,"mbart"),nGt.forEach(t),brr=r(XVe," \u2014 "),OU=n(XVe,"A",{href:!0});var sGt=s(OU);Frr=r(sGt,"MBartForConditionalGeneration"),sGt.forEach(t),Trr=r(XVe," (mBART model)"),XVe.forEach(t),Mrr=i(pe),kb=n(pe,"LI",{});var zVe=s(kb);t3e=n(zVe,"STRONG",{});var lGt=s(t3e);Err=r(lGt,"mt5"),lGt.forEach(t),Crr=r(zVe," \u2014 "),VU=n(zVe,"A",{href:!0});var iGt=s(VU);wrr=r(iGt,"MT5ForConditionalGeneration"),iGt.forEach(t),Arr=r(zVe," (MT5 model)"),zVe.forEach(t),Lrr=i(pe),Sb=n(pe,"LI",{});var QVe=s(Sb);a3e=n(QVe,"STRONG",{});var dGt=s(a3e);yrr=r(dGt,"mvp"),dGt.forEach(t),xrr=r(QVe," \u2014 "),XU=n(QVe,"A",{href:!0});var cGt=s(XU);$rr=r(cGt,"MvpForConditionalGeneration"),cGt.forEach(t),krr=r(QVe," (MVP model)"),QVe.forEach(t),Srr=i(pe),Rb=n(pe,"LI",{});var WVe=s(Rb);n3e=n(WVe,"STRONG",{});var fGt=s(n3e);Rrr=r(fGt,"nllb"),fGt.forEach(t),Prr=r(WVe," \u2014 "),zU=n(WVe,"A",{href:!0});var mGt=s(zU);Brr=r(mGt,"M2M100ForConditionalGeneration"),mGt.forEach(t),Irr=r(WVe," (NLLB model)"),WVe.forEach(t),Nrr=i(pe),Pb=n(pe,"LI",{});var UVe=s(Pb);s3e=n(UVe,"STRONG",{});var gGt=s(s3e);qrr=r(gGt,"pegasus"),gGt.forEach(t),jrr=r(UVe," \u2014 "),QU=n(UVe,"A",{href:!0});var hGt=s(QU);Drr=r(hGt,"PegasusForConditionalGeneration"),hGt.forEach(t),Grr=r(UVe," (Pegasus model)"),UVe.forEach(t),Orr=i(pe),Bb=n(pe,"LI",{});var HVe=s(Bb);l3e=n(HVe,"STRONG",{});var uGt=s(l3e);Vrr=r(uGt,"pegasus_x"),uGt.forEach(t),Xrr=r(HVe," \u2014 "),WU=n(HVe,"A",{href:!0});var pGt=s(WU);zrr=r(pGt,"PegasusXForConditionalGeneration"),pGt.forEach(t),Qrr=r(HVe," (PEGASUS-X model)"),HVe.forEach(t),Wrr=i(pe),Ib=n(pe,"LI",{});var JVe=s(Ib);i3e=n(JVe,"STRONG",{});var _Gt=s(i3e);Urr=r(_Gt,"plbart"),_Gt.forEach(t),Hrr=r(JVe," \u2014 "),UU=n(JVe,"A",{href:!0});var vGt=s(UU);Jrr=r(vGt,"PLBartForConditionalGeneration"),vGt.forEach(t),Yrr=r(JVe," (PLBart model)"),JVe.forEach(t),Zrr=i(pe),Nb=n(pe,"LI",{});var YVe=s(Nb);d3e=n(YVe,"STRONG",{});var bGt=s(d3e);Krr=r(bGt,"prophetnet"),bGt.forEach(t),etr=r(YVe," \u2014 "),HU=n(YVe,"A",{href:!0});var FGt=s(HU);otr=r(FGt,"ProphetNetForConditionalGeneration"),FGt.forEach(t),rtr=r(YVe," (ProphetNet model)"),YVe.forEach(t),ttr=i(pe),qb=n(pe,"LI",{});var ZVe=s(qb);c3e=n(ZVe,"STRONG",{});var TGt=s(c3e);atr=r(TGt,"t5"),TGt.forEach(t),ntr=r(ZVe," \u2014 "),JU=n(ZVe,"A",{href:!0});var MGt=s(JU);str=r(MGt,"T5ForConditionalGeneration"),MGt.forEach(t),ltr=r(ZVe," (T5 model)"),ZVe.forEach(t),itr=i(pe),jb=n(pe,"LI",{});var KVe=s(jb);f3e=n(KVe,"STRONG",{});var EGt=s(f3e);dtr=r(EGt,"xlm-prophetnet"),EGt.forEach(t),ctr=r(KVe," \u2014 "),YU=n(KVe,"A",{href:!0});var CGt=s(YU);ftr=r(CGt,"XLMProphetNetForConditionalGeneration"),CGt.forEach(t),mtr=r(KVe," (XLM-ProphetNet model)"),KVe.forEach(t),pe.forEach(t),gtr=i(La),Db=n(La,"P",{});var eXe=s(Db);htr=r(eXe,"The model is set in evaluation mode by default using "),m3e=n(eXe,"CODE",{});var wGt=s(m3e);utr=r(wGt,"model.eval()"),wGt.forEach(t),ptr=r(eXe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g3e=n(eXe,"CODE",{});var AGt=s(g3e);_tr=r(AGt,"model.train()"),AGt.forEach(t),eXe.forEach(t),vtr=i(La),T(Gb.$$.fragment,La),La.forEach(t),Bl.forEach(t),joo=i(f),qd=n(f,"H2",{class:!0});var oao=s(qd);Ob=n(oao,"A",{id:!0,class:!0,href:!0});var LGt=s(Ob);h3e=n(LGt,"SPAN",{});var yGt=s(h3e);T(w$.$$.fragment,yGt),yGt.forEach(t),LGt.forEach(t),btr=i(oao),u3e=n(oao,"SPAN",{});var xGt=s(u3e);Ftr=r(xGt,"AutoModelForSequenceClassification"),xGt.forEach(t),oao.forEach(t),Doo=i(f),Do=n(f,"DIV",{class:!0});var Il=s(Do);T(A$.$$.fragment,Il),Ttr=i(Il),jd=n(Il,"P",{});var ode=s(jd);Mtr=r(ode,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZU=n(ode,"A",{href:!0});var $Gt=s(ZU);Etr=r($Gt,"from_pretrained()"),$Gt.forEach(t),Ctr=r(ode," class method or the "),KU=n(ode,"A",{href:!0});var kGt=s(KU);wtr=r(kGt,"from_config()"),kGt.forEach(t),Atr=r(ode,` class
method.`),ode.forEach(t),Ltr=i(Il),L$=n(Il,"P",{});var rao=s(L$);ytr=r(rao,"This class cannot be instantiated directly using "),p3e=n(rao,"CODE",{});var SGt=s(p3e);xtr=r(SGt,"__init__()"),SGt.forEach(t),$tr=r(rao," (throws an error)."),rao.forEach(t),ktr=i(Il),Ct=n(Il,"DIV",{class:!0});var $y=s(Ct);T(y$.$$.fragment,$y),Str=i($y),_3e=n($y,"P",{});var RGt=s(_3e);Rtr=r(RGt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),RGt.forEach(t),Ptr=i($y),Dd=n($y,"P",{});var rde=s(Dd);Btr=r(rde,`Note:
Loading a model from its configuration file does `),v3e=n(rde,"STRONG",{});var PGt=s(v3e);Itr=r(PGt,"not"),PGt.forEach(t),Ntr=r(rde,` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=n(rde,"A",{href:!0});var BGt=s(eH);qtr=r(BGt,"from_pretrained()"),BGt.forEach(t),jtr=r(rde," to load the model weights."),rde.forEach(t),Dtr=i($y),T(Vb.$$.fragment,$y),$y.forEach(t),Gtr=i(Il),ao=n(Il,"DIV",{class:!0});var ya=s(ao);T(x$.$$.fragment,ya),Otr=i(ya),b3e=n(ya,"P",{});var IGt=s(b3e);Vtr=r(IGt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),IGt.forEach(t),Xtr=i(ya),nn=n(ya,"P",{});var ky=s(nn);ztr=r(ky,"The model class to instantiate is selected based on the "),F3e=n(ky,"CODE",{});var NGt=s(F3e);Qtr=r(NGt,"model_type"),NGt.forEach(t),Wtr=r(ky,` property of the config object (either
passed as an argument or loaded from `),T3e=n(ky,"CODE",{});var qGt=s(T3e);Utr=r(qGt,"pretrained_model_name_or_path"),qGt.forEach(t),Htr=r(ky,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M3e=n(ky,"CODE",{});var jGt=s(M3e);Jtr=r(jGt,"pretrained_model_name_or_path"),jGt.forEach(t),Ytr=r(ky,":"),ky.forEach(t),Ztr=i(ya),q=n(ya,"UL",{});var D=s(q);Xb=n(D,"LI",{});var oXe=s(Xb);E3e=n(oXe,"STRONG",{});var DGt=s(E3e);Ktr=r(DGt,"albert"),DGt.forEach(t),ear=r(oXe," \u2014 "),oH=n(oXe,"A",{href:!0});var GGt=s(oH);oar=r(GGt,"AlbertForSequenceClassification"),GGt.forEach(t),rar=r(oXe," (ALBERT model)"),oXe.forEach(t),tar=i(D),zb=n(D,"LI",{});var rXe=s(zb);C3e=n(rXe,"STRONG",{});var OGt=s(C3e);aar=r(OGt,"bart"),OGt.forEach(t),nar=r(rXe," \u2014 "),rH=n(rXe,"A",{href:!0});var VGt=s(rH);sar=r(VGt,"BartForSequenceClassification"),VGt.forEach(t),lar=r(rXe," (BART model)"),rXe.forEach(t),iar=i(D),Qb=n(D,"LI",{});var tXe=s(Qb);w3e=n(tXe,"STRONG",{});var XGt=s(w3e);dar=r(XGt,"bert"),XGt.forEach(t),car=r(tXe," \u2014 "),tH=n(tXe,"A",{href:!0});var zGt=s(tH);far=r(zGt,"BertForSequenceClassification"),zGt.forEach(t),mar=r(tXe," (BERT model)"),tXe.forEach(t),gar=i(D),Wb=n(D,"LI",{});var aXe=s(Wb);A3e=n(aXe,"STRONG",{});var QGt=s(A3e);har=r(QGt,"big_bird"),QGt.forEach(t),uar=r(aXe," \u2014 "),aH=n(aXe,"A",{href:!0});var WGt=s(aH);par=r(WGt,"BigBirdForSequenceClassification"),WGt.forEach(t),_ar=r(aXe," (BigBird model)"),aXe.forEach(t),bar=i(D),Ub=n(D,"LI",{});var nXe=s(Ub);L3e=n(nXe,"STRONG",{});var UGt=s(L3e);Far=r(UGt,"bigbird_pegasus"),UGt.forEach(t),Tar=r(nXe," \u2014 "),nH=n(nXe,"A",{href:!0});var HGt=s(nH);Mar=r(HGt,"BigBirdPegasusForSequenceClassification"),HGt.forEach(t),Ear=r(nXe," (BigBird-Pegasus model)"),nXe.forEach(t),Car=i(D),Hb=n(D,"LI",{});var sXe=s(Hb);y3e=n(sXe,"STRONG",{});var JGt=s(y3e);war=r(JGt,"bloom"),JGt.forEach(t),Aar=r(sXe," \u2014 "),sH=n(sXe,"A",{href:!0});var YGt=s(sH);Lar=r(YGt,"BloomForSequenceClassification"),YGt.forEach(t),yar=r(sXe," (BLOOM model)"),sXe.forEach(t),xar=i(D),Jb=n(D,"LI",{});var lXe=s(Jb);x3e=n(lXe,"STRONG",{});var ZGt=s(x3e);$ar=r(ZGt,"camembert"),ZGt.forEach(t),kar=r(lXe," \u2014 "),lH=n(lXe,"A",{href:!0});var KGt=s(lH);Sar=r(KGt,"CamembertForSequenceClassification"),KGt.forEach(t),Rar=r(lXe," (CamemBERT model)"),lXe.forEach(t),Par=i(D),Yb=n(D,"LI",{});var iXe=s(Yb);$3e=n(iXe,"STRONG",{});var eOt=s($3e);Bar=r(eOt,"canine"),eOt.forEach(t),Iar=r(iXe," \u2014 "),iH=n(iXe,"A",{href:!0});var oOt=s(iH);Nar=r(oOt,"CanineForSequenceClassification"),oOt.forEach(t),qar=r(iXe," (CANINE model)"),iXe.forEach(t),jar=i(D),Zb=n(D,"LI",{});var dXe=s(Zb);k3e=n(dXe,"STRONG",{});var rOt=s(k3e);Dar=r(rOt,"convbert"),rOt.forEach(t),Gar=r(dXe," \u2014 "),dH=n(dXe,"A",{href:!0});var tOt=s(dH);Oar=r(tOt,"ConvBertForSequenceClassification"),tOt.forEach(t),Var=r(dXe," (ConvBERT model)"),dXe.forEach(t),Xar=i(D),Kb=n(D,"LI",{});var cXe=s(Kb);S3e=n(cXe,"STRONG",{});var aOt=s(S3e);zar=r(aOt,"ctrl"),aOt.forEach(t),Qar=r(cXe," \u2014 "),cH=n(cXe,"A",{href:!0});var nOt=s(cH);War=r(nOt,"CTRLForSequenceClassification"),nOt.forEach(t),Uar=r(cXe," (CTRL model)"),cXe.forEach(t),Har=i(D),e3=n(D,"LI",{});var fXe=s(e3);R3e=n(fXe,"STRONG",{});var sOt=s(R3e);Jar=r(sOt,"data2vec-text"),sOt.forEach(t),Yar=r(fXe," \u2014 "),fH=n(fXe,"A",{href:!0});var lOt=s(fH);Zar=r(lOt,"Data2VecTextForSequenceClassification"),lOt.forEach(t),Kar=r(fXe," (Data2VecText model)"),fXe.forEach(t),enr=i(D),o3=n(D,"LI",{});var mXe=s(o3);P3e=n(mXe,"STRONG",{});var iOt=s(P3e);onr=r(iOt,"deberta"),iOt.forEach(t),rnr=r(mXe," \u2014 "),mH=n(mXe,"A",{href:!0});var dOt=s(mH);tnr=r(dOt,"DebertaForSequenceClassification"),dOt.forEach(t),anr=r(mXe," (DeBERTa model)"),mXe.forEach(t),nnr=i(D),r3=n(D,"LI",{});var gXe=s(r3);B3e=n(gXe,"STRONG",{});var cOt=s(B3e);snr=r(cOt,"deberta-v2"),cOt.forEach(t),lnr=r(gXe," \u2014 "),gH=n(gXe,"A",{href:!0});var fOt=s(gH);inr=r(fOt,"DebertaV2ForSequenceClassification"),fOt.forEach(t),dnr=r(gXe," (DeBERTa-v2 model)"),gXe.forEach(t),cnr=i(D),t3=n(D,"LI",{});var hXe=s(t3);I3e=n(hXe,"STRONG",{});var mOt=s(I3e);fnr=r(mOt,"distilbert"),mOt.forEach(t),mnr=r(hXe," \u2014 "),hH=n(hXe,"A",{href:!0});var gOt=s(hH);gnr=r(gOt,"DistilBertForSequenceClassification"),gOt.forEach(t),hnr=r(hXe," (DistilBERT model)"),hXe.forEach(t),unr=i(D),a3=n(D,"LI",{});var uXe=s(a3);N3e=n(uXe,"STRONG",{});var hOt=s(N3e);pnr=r(hOt,"electra"),hOt.forEach(t),_nr=r(uXe," \u2014 "),uH=n(uXe,"A",{href:!0});var uOt=s(uH);vnr=r(uOt,"ElectraForSequenceClassification"),uOt.forEach(t),bnr=r(uXe," (ELECTRA model)"),uXe.forEach(t),Fnr=i(D),n3=n(D,"LI",{});var pXe=s(n3);q3e=n(pXe,"STRONG",{});var pOt=s(q3e);Tnr=r(pOt,"ernie"),pOt.forEach(t),Mnr=r(pXe," \u2014 "),pH=n(pXe,"A",{href:!0});var _Ot=s(pH);Enr=r(_Ot,"ErnieForSequenceClassification"),_Ot.forEach(t),Cnr=r(pXe," (ERNIE model)"),pXe.forEach(t),wnr=i(D),s3=n(D,"LI",{});var _Xe=s(s3);j3e=n(_Xe,"STRONG",{});var vOt=s(j3e);Anr=r(vOt,"esm"),vOt.forEach(t),Lnr=r(_Xe," \u2014 "),_H=n(_Xe,"A",{href:!0});var bOt=s(_H);ynr=r(bOt,"EsmForSequenceClassification"),bOt.forEach(t),xnr=r(_Xe," (ESM model)"),_Xe.forEach(t),$nr=i(D),l3=n(D,"LI",{});var vXe=s(l3);D3e=n(vXe,"STRONG",{});var FOt=s(D3e);knr=r(FOt,"flaubert"),FOt.forEach(t),Snr=r(vXe," \u2014 "),vH=n(vXe,"A",{href:!0});var TOt=s(vH);Rnr=r(TOt,"FlaubertForSequenceClassification"),TOt.forEach(t),Pnr=r(vXe," (FlauBERT model)"),vXe.forEach(t),Bnr=i(D),i3=n(D,"LI",{});var bXe=s(i3);G3e=n(bXe,"STRONG",{});var MOt=s(G3e);Inr=r(MOt,"fnet"),MOt.forEach(t),Nnr=r(bXe," \u2014 "),bH=n(bXe,"A",{href:!0});var EOt=s(bH);qnr=r(EOt,"FNetForSequenceClassification"),EOt.forEach(t),jnr=r(bXe," (FNet model)"),bXe.forEach(t),Dnr=i(D),d3=n(D,"LI",{});var FXe=s(d3);O3e=n(FXe,"STRONG",{});var COt=s(O3e);Gnr=r(COt,"funnel"),COt.forEach(t),Onr=r(FXe," \u2014 "),FH=n(FXe,"A",{href:!0});var wOt=s(FH);Vnr=r(wOt,"FunnelForSequenceClassification"),wOt.forEach(t),Xnr=r(FXe," (Funnel Transformer model)"),FXe.forEach(t),znr=i(D),c3=n(D,"LI",{});var TXe=s(c3);V3e=n(TXe,"STRONG",{});var AOt=s(V3e);Qnr=r(AOt,"gpt2"),AOt.forEach(t),Wnr=r(TXe," \u2014 "),TH=n(TXe,"A",{href:!0});var LOt=s(TH);Unr=r(LOt,"GPT2ForSequenceClassification"),LOt.forEach(t),Hnr=r(TXe," (OpenAI GPT-2 model)"),TXe.forEach(t),Jnr=i(D),f3=n(D,"LI",{});var MXe=s(f3);X3e=n(MXe,"STRONG",{});var yOt=s(X3e);Ynr=r(yOt,"gpt_neo"),yOt.forEach(t),Znr=r(MXe," \u2014 "),MH=n(MXe,"A",{href:!0});var xOt=s(MH);Knr=r(xOt,"GPTNeoForSequenceClassification"),xOt.forEach(t),esr=r(MXe," (GPT Neo model)"),MXe.forEach(t),osr=i(D),m3=n(D,"LI",{});var EXe=s(m3);z3e=n(EXe,"STRONG",{});var $Ot=s(z3e);rsr=r($Ot,"gptj"),$Ot.forEach(t),tsr=r(EXe," \u2014 "),EH=n(EXe,"A",{href:!0});var kOt=s(EH);asr=r(kOt,"GPTJForSequenceClassification"),kOt.forEach(t),nsr=r(EXe," (GPT-J model)"),EXe.forEach(t),ssr=i(D),g3=n(D,"LI",{});var CXe=s(g3);Q3e=n(CXe,"STRONG",{});var SOt=s(Q3e);lsr=r(SOt,"ibert"),SOt.forEach(t),isr=r(CXe," \u2014 "),CH=n(CXe,"A",{href:!0});var ROt=s(CH);dsr=r(ROt,"IBertForSequenceClassification"),ROt.forEach(t),csr=r(CXe," (I-BERT model)"),CXe.forEach(t),fsr=i(D),h3=n(D,"LI",{});var wXe=s(h3);W3e=n(wXe,"STRONG",{});var POt=s(W3e);msr=r(POt,"layoutlm"),POt.forEach(t),gsr=r(wXe," \u2014 "),wH=n(wXe,"A",{href:!0});var BOt=s(wH);hsr=r(BOt,"LayoutLMForSequenceClassification"),BOt.forEach(t),usr=r(wXe," (LayoutLM model)"),wXe.forEach(t),psr=i(D),u3=n(D,"LI",{});var AXe=s(u3);U3e=n(AXe,"STRONG",{});var IOt=s(U3e);_sr=r(IOt,"layoutlmv2"),IOt.forEach(t),vsr=r(AXe," \u2014 "),AH=n(AXe,"A",{href:!0});var NOt=s(AH);bsr=r(NOt,"LayoutLMv2ForSequenceClassification"),NOt.forEach(t),Fsr=r(AXe," (LayoutLMv2 model)"),AXe.forEach(t),Tsr=i(D),p3=n(D,"LI",{});var LXe=s(p3);H3e=n(LXe,"STRONG",{});var qOt=s(H3e);Msr=r(qOt,"layoutlmv3"),qOt.forEach(t),Esr=r(LXe," \u2014 "),LH=n(LXe,"A",{href:!0});var jOt=s(LH);Csr=r(jOt,"LayoutLMv3ForSequenceClassification"),jOt.forEach(t),wsr=r(LXe," (LayoutLMv3 model)"),LXe.forEach(t),Asr=i(D),_3=n(D,"LI",{});var yXe=s(_3);J3e=n(yXe,"STRONG",{});var DOt=s(J3e);Lsr=r(DOt,"led"),DOt.forEach(t),ysr=r(yXe," \u2014 "),yH=n(yXe,"A",{href:!0});var GOt=s(yH);xsr=r(GOt,"LEDForSequenceClassification"),GOt.forEach(t),$sr=r(yXe," (LED model)"),yXe.forEach(t),ksr=i(D),v3=n(D,"LI",{});var xXe=s(v3);Y3e=n(xXe,"STRONG",{});var OOt=s(Y3e);Ssr=r(OOt,"longformer"),OOt.forEach(t),Rsr=r(xXe," \u2014 "),xH=n(xXe,"A",{href:!0});var VOt=s(xH);Psr=r(VOt,"LongformerForSequenceClassification"),VOt.forEach(t),Bsr=r(xXe," (Longformer model)"),xXe.forEach(t),Isr=i(D),b3=n(D,"LI",{});var $Xe=s(b3);Z3e=n($Xe,"STRONG",{});var XOt=s(Z3e);Nsr=r(XOt,"luke"),XOt.forEach(t),qsr=r($Xe," \u2014 "),$H=n($Xe,"A",{href:!0});var zOt=s($H);jsr=r(zOt,"LukeForSequenceClassification"),zOt.forEach(t),Dsr=r($Xe," (LUKE model)"),$Xe.forEach(t),Gsr=i(D),F3=n(D,"LI",{});var kXe=s(F3);K3e=n(kXe,"STRONG",{});var QOt=s(K3e);Osr=r(QOt,"markuplm"),QOt.forEach(t),Vsr=r(kXe," \u2014 "),kH=n(kXe,"A",{href:!0});var WOt=s(kH);Xsr=r(WOt,"MarkupLMForSequenceClassification"),WOt.forEach(t),zsr=r(kXe," (MarkupLM model)"),kXe.forEach(t),Qsr=i(D),T3=n(D,"LI",{});var SXe=s(T3);e0e=n(SXe,"STRONG",{});var UOt=s(e0e);Wsr=r(UOt,"mbart"),UOt.forEach(t),Usr=r(SXe," \u2014 "),SH=n(SXe,"A",{href:!0});var HOt=s(SH);Hsr=r(HOt,"MBartForSequenceClassification"),HOt.forEach(t),Jsr=r(SXe," (mBART model)"),SXe.forEach(t),Ysr=i(D),M3=n(D,"LI",{});var RXe=s(M3);o0e=n(RXe,"STRONG",{});var JOt=s(o0e);Zsr=r(JOt,"megatron-bert"),JOt.forEach(t),Ksr=r(RXe," \u2014 "),RH=n(RXe,"A",{href:!0});var YOt=s(RH);elr=r(YOt,"MegatronBertForSequenceClassification"),YOt.forEach(t),olr=r(RXe," (Megatron-BERT model)"),RXe.forEach(t),rlr=i(D),E3=n(D,"LI",{});var PXe=s(E3);r0e=n(PXe,"STRONG",{});var ZOt=s(r0e);tlr=r(ZOt,"mobilebert"),ZOt.forEach(t),alr=r(PXe," \u2014 "),PH=n(PXe,"A",{href:!0});var KOt=s(PH);nlr=r(KOt,"MobileBertForSequenceClassification"),KOt.forEach(t),slr=r(PXe," (MobileBERT model)"),PXe.forEach(t),llr=i(D),C3=n(D,"LI",{});var BXe=s(C3);t0e=n(BXe,"STRONG",{});var eVt=s(t0e);ilr=r(eVt,"mpnet"),eVt.forEach(t),dlr=r(BXe," \u2014 "),BH=n(BXe,"A",{href:!0});var oVt=s(BH);clr=r(oVt,"MPNetForSequenceClassification"),oVt.forEach(t),flr=r(BXe," (MPNet model)"),BXe.forEach(t),mlr=i(D),w3=n(D,"LI",{});var IXe=s(w3);a0e=n(IXe,"STRONG",{});var rVt=s(a0e);glr=r(rVt,"mvp"),rVt.forEach(t),hlr=r(IXe," \u2014 "),IH=n(IXe,"A",{href:!0});var tVt=s(IH);ulr=r(tVt,"MvpForSequenceClassification"),tVt.forEach(t),plr=r(IXe," (MVP model)"),IXe.forEach(t),_lr=i(D),A3=n(D,"LI",{});var NXe=s(A3);n0e=n(NXe,"STRONG",{});var aVt=s(n0e);vlr=r(aVt,"nezha"),aVt.forEach(t),blr=r(NXe," \u2014 "),NH=n(NXe,"A",{href:!0});var nVt=s(NH);Flr=r(nVt,"NezhaForSequenceClassification"),nVt.forEach(t),Tlr=r(NXe," (Nezha model)"),NXe.forEach(t),Mlr=i(D),L3=n(D,"LI",{});var qXe=s(L3);s0e=n(qXe,"STRONG",{});var sVt=s(s0e);Elr=r(sVt,"nystromformer"),sVt.forEach(t),Clr=r(qXe," \u2014 "),qH=n(qXe,"A",{href:!0});var lVt=s(qH);wlr=r(lVt,"NystromformerForSequenceClassification"),lVt.forEach(t),Alr=r(qXe," (Nystr\xF6mformer model)"),qXe.forEach(t),Llr=i(D),y3=n(D,"LI",{});var jXe=s(y3);l0e=n(jXe,"STRONG",{});var iVt=s(l0e);ylr=r(iVt,"openai-gpt"),iVt.forEach(t),xlr=r(jXe," \u2014 "),jH=n(jXe,"A",{href:!0});var dVt=s(jH);$lr=r(dVt,"OpenAIGPTForSequenceClassification"),dVt.forEach(t),klr=r(jXe," (OpenAI GPT model)"),jXe.forEach(t),Slr=i(D),x3=n(D,"LI",{});var DXe=s(x3);i0e=n(DXe,"STRONG",{});var cVt=s(i0e);Rlr=r(cVt,"opt"),cVt.forEach(t),Plr=r(DXe," \u2014 "),DH=n(DXe,"A",{href:!0});var fVt=s(DH);Blr=r(fVt,"OPTForSequenceClassification"),fVt.forEach(t),Ilr=r(DXe," (OPT model)"),DXe.forEach(t),Nlr=i(D),$3=n(D,"LI",{});var GXe=s($3);d0e=n(GXe,"STRONG",{});var mVt=s(d0e);qlr=r(mVt,"perceiver"),mVt.forEach(t),jlr=r(GXe," \u2014 "),GH=n(GXe,"A",{href:!0});var gVt=s(GH);Dlr=r(gVt,"PerceiverForSequenceClassification"),gVt.forEach(t),Glr=r(GXe," (Perceiver model)"),GXe.forEach(t),Olr=i(D),k3=n(D,"LI",{});var OXe=s(k3);c0e=n(OXe,"STRONG",{});var hVt=s(c0e);Vlr=r(hVt,"plbart"),hVt.forEach(t),Xlr=r(OXe," \u2014 "),OH=n(OXe,"A",{href:!0});var uVt=s(OH);zlr=r(uVt,"PLBartForSequenceClassification"),uVt.forEach(t),Qlr=r(OXe," (PLBart model)"),OXe.forEach(t),Wlr=i(D),S3=n(D,"LI",{});var VXe=s(S3);f0e=n(VXe,"STRONG",{});var pVt=s(f0e);Ulr=r(pVt,"qdqbert"),pVt.forEach(t),Hlr=r(VXe," \u2014 "),VH=n(VXe,"A",{href:!0});var _Vt=s(VH);Jlr=r(_Vt,"QDQBertForSequenceClassification"),_Vt.forEach(t),Ylr=r(VXe," (QDQBert model)"),VXe.forEach(t),Zlr=i(D),R3=n(D,"LI",{});var XXe=s(R3);m0e=n(XXe,"STRONG",{});var vVt=s(m0e);Klr=r(vVt,"reformer"),vVt.forEach(t),eir=r(XXe," \u2014 "),XH=n(XXe,"A",{href:!0});var bVt=s(XH);oir=r(bVt,"ReformerForSequenceClassification"),bVt.forEach(t),rir=r(XXe," (Reformer model)"),XXe.forEach(t),tir=i(D),P3=n(D,"LI",{});var zXe=s(P3);g0e=n(zXe,"STRONG",{});var FVt=s(g0e);air=r(FVt,"rembert"),FVt.forEach(t),nir=r(zXe," \u2014 "),zH=n(zXe,"A",{href:!0});var TVt=s(zH);sir=r(TVt,"RemBertForSequenceClassification"),TVt.forEach(t),lir=r(zXe," (RemBERT model)"),zXe.forEach(t),iir=i(D),B3=n(D,"LI",{});var QXe=s(B3);h0e=n(QXe,"STRONG",{});var MVt=s(h0e);dir=r(MVt,"roberta"),MVt.forEach(t),cir=r(QXe," \u2014 "),QH=n(QXe,"A",{href:!0});var EVt=s(QH);fir=r(EVt,"RobertaForSequenceClassification"),EVt.forEach(t),mir=r(QXe," (RoBERTa model)"),QXe.forEach(t),gir=i(D),I3=n(D,"LI",{});var WXe=s(I3);u0e=n(WXe,"STRONG",{});var CVt=s(u0e);hir=r(CVt,"roformer"),CVt.forEach(t),uir=r(WXe," \u2014 "),WH=n(WXe,"A",{href:!0});var wVt=s(WH);pir=r(wVt,"RoFormerForSequenceClassification"),wVt.forEach(t),_ir=r(WXe," (RoFormer model)"),WXe.forEach(t),vir=i(D),N3=n(D,"LI",{});var UXe=s(N3);p0e=n(UXe,"STRONG",{});var AVt=s(p0e);bir=r(AVt,"squeezebert"),AVt.forEach(t),Fir=r(UXe," \u2014 "),UH=n(UXe,"A",{href:!0});var LVt=s(UH);Tir=r(LVt,"SqueezeBertForSequenceClassification"),LVt.forEach(t),Mir=r(UXe," (SqueezeBERT model)"),UXe.forEach(t),Eir=i(D),q3=n(D,"LI",{});var HXe=s(q3);_0e=n(HXe,"STRONG",{});var yVt=s(_0e);Cir=r(yVt,"tapas"),yVt.forEach(t),wir=r(HXe," \u2014 "),HH=n(HXe,"A",{href:!0});var xVt=s(HH);Air=r(xVt,"TapasForSequenceClassification"),xVt.forEach(t),Lir=r(HXe," (TAPAS model)"),HXe.forEach(t),yir=i(D),j3=n(D,"LI",{});var JXe=s(j3);v0e=n(JXe,"STRONG",{});var $Vt=s(v0e);xir=r($Vt,"transfo-xl"),$Vt.forEach(t),$ir=r(JXe," \u2014 "),JH=n(JXe,"A",{href:!0});var kVt=s(JH);kir=r(kVt,"TransfoXLForSequenceClassification"),kVt.forEach(t),Sir=r(JXe," (Transformer-XL model)"),JXe.forEach(t),Rir=i(D),D3=n(D,"LI",{});var YXe=s(D3);b0e=n(YXe,"STRONG",{});var SVt=s(b0e);Pir=r(SVt,"xlm"),SVt.forEach(t),Bir=r(YXe," \u2014 "),YH=n(YXe,"A",{href:!0});var RVt=s(YH);Iir=r(RVt,"XLMForSequenceClassification"),RVt.forEach(t),Nir=r(YXe," (XLM model)"),YXe.forEach(t),qir=i(D),G3=n(D,"LI",{});var ZXe=s(G3);F0e=n(ZXe,"STRONG",{});var PVt=s(F0e);jir=r(PVt,"xlm-roberta"),PVt.forEach(t),Dir=r(ZXe," \u2014 "),ZH=n(ZXe,"A",{href:!0});var BVt=s(ZH);Gir=r(BVt,"XLMRobertaForSequenceClassification"),BVt.forEach(t),Oir=r(ZXe," (XLM-RoBERTa model)"),ZXe.forEach(t),Vir=i(D),O3=n(D,"LI",{});var KXe=s(O3);T0e=n(KXe,"STRONG",{});var IVt=s(T0e);Xir=r(IVt,"xlm-roberta-xl"),IVt.forEach(t),zir=r(KXe," \u2014 "),KH=n(KXe,"A",{href:!0});var NVt=s(KH);Qir=r(NVt,"XLMRobertaXLForSequenceClassification"),NVt.forEach(t),Wir=r(KXe," (XLM-RoBERTa-XL model)"),KXe.forEach(t),Uir=i(D),V3=n(D,"LI",{});var eze=s(V3);M0e=n(eze,"STRONG",{});var qVt=s(M0e);Hir=r(qVt,"xlnet"),qVt.forEach(t),Jir=r(eze," \u2014 "),eJ=n(eze,"A",{href:!0});var jVt=s(eJ);Yir=r(jVt,"XLNetForSequenceClassification"),jVt.forEach(t),Zir=r(eze," (XLNet model)"),eze.forEach(t),Kir=i(D),X3=n(D,"LI",{});var oze=s(X3);E0e=n(oze,"STRONG",{});var DVt=s(E0e);edr=r(DVt,"yoso"),DVt.forEach(t),odr=r(oze," \u2014 "),oJ=n(oze,"A",{href:!0});var GVt=s(oJ);rdr=r(GVt,"YosoForSequenceClassification"),GVt.forEach(t),tdr=r(oze," (YOSO model)"),oze.forEach(t),D.forEach(t),adr=i(ya),z3=n(ya,"P",{});var rze=s(z3);ndr=r(rze,"The model is set in evaluation mode by default using "),C0e=n(rze,"CODE",{});var OVt=s(C0e);sdr=r(OVt,"model.eval()"),OVt.forEach(t),ldr=r(rze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w0e=n(rze,"CODE",{});var VVt=s(w0e);idr=r(VVt,"model.train()"),VVt.forEach(t),rze.forEach(t),ddr=i(ya),T(Q3.$$.fragment,ya),ya.forEach(t),Il.forEach(t),Goo=i(f),Gd=n(f,"H2",{class:!0});var tao=s(Gd);W3=n(tao,"A",{id:!0,class:!0,href:!0});var XVt=s(W3);A0e=n(XVt,"SPAN",{});var zVt=s(A0e);T($$.$$.fragment,zVt),zVt.forEach(t),XVt.forEach(t),cdr=i(tao),L0e=n(tao,"SPAN",{});var QVt=s(L0e);fdr=r(QVt,"AutoModelForMultipleChoice"),QVt.forEach(t),tao.forEach(t),Ooo=i(f),Go=n(f,"DIV",{class:!0});var Nl=s(Go);T(k$.$$.fragment,Nl),mdr=i(Nl),Od=n(Nl,"P",{});var tde=s(Od);gdr=r(tde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rJ=n(tde,"A",{href:!0});var WVt=s(rJ);hdr=r(WVt,"from_pretrained()"),WVt.forEach(t),udr=r(tde," class method or the "),tJ=n(tde,"A",{href:!0});var UVt=s(tJ);pdr=r(UVt,"from_config()"),UVt.forEach(t),_dr=r(tde,` class
method.`),tde.forEach(t),vdr=i(Nl),S$=n(Nl,"P",{});var aao=s(S$);bdr=r(aao,"This class cannot be instantiated directly using "),y0e=n(aao,"CODE",{});var HVt=s(y0e);Fdr=r(HVt,"__init__()"),HVt.forEach(t),Tdr=r(aao," (throws an error)."),aao.forEach(t),Mdr=i(Nl),wt=n(Nl,"DIV",{class:!0});var Sy=s(wt);T(R$.$$.fragment,Sy),Edr=i(Sy),x0e=n(Sy,"P",{});var JVt=s(x0e);Cdr=r(JVt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),JVt.forEach(t),wdr=i(Sy),Vd=n(Sy,"P",{});var ade=s(Vd);Adr=r(ade,`Note:
Loading a model from its configuration file does `),$0e=n(ade,"STRONG",{});var YVt=s($0e);Ldr=r(YVt,"not"),YVt.forEach(t),ydr=r(ade,` load the model weights. It only affects the
model\u2019s configuration. Use `),aJ=n(ade,"A",{href:!0});var ZVt=s(aJ);xdr=r(ZVt,"from_pretrained()"),ZVt.forEach(t),$dr=r(ade," to load the model weights."),ade.forEach(t),kdr=i(Sy),T(U3.$$.fragment,Sy),Sy.forEach(t),Sdr=i(Nl),no=n(Nl,"DIV",{class:!0});var xa=s(no);T(P$.$$.fragment,xa),Rdr=i(xa),k0e=n(xa,"P",{});var KVt=s(k0e);Pdr=r(KVt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),KVt.forEach(t),Bdr=i(xa),sn=n(xa,"P",{});var Ry=s(sn);Idr=r(Ry,"The model class to instantiate is selected based on the "),S0e=n(Ry,"CODE",{});var eXt=s(S0e);Ndr=r(eXt,"model_type"),eXt.forEach(t),qdr=r(Ry,` property of the config object (either
passed as an argument or loaded from `),R0e=n(Ry,"CODE",{});var oXt=s(R0e);jdr=r(oXt,"pretrained_model_name_or_path"),oXt.forEach(t),Ddr=r(Ry,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P0e=n(Ry,"CODE",{});var rXt=s(P0e);Gdr=r(rXt,"pretrained_model_name_or_path"),rXt.forEach(t),Odr=r(Ry,":"),Ry.forEach(t),Vdr=i(xa),K=n(xa,"UL",{});var ee=s(K);H3=n(ee,"LI",{});var tze=s(H3);B0e=n(tze,"STRONG",{});var tXt=s(B0e);Xdr=r(tXt,"albert"),tXt.forEach(t),zdr=r(tze," \u2014 "),nJ=n(tze,"A",{href:!0});var aXt=s(nJ);Qdr=r(aXt,"AlbertForMultipleChoice"),aXt.forEach(t),Wdr=r(tze," (ALBERT model)"),tze.forEach(t),Udr=i(ee),J3=n(ee,"LI",{});var aze=s(J3);I0e=n(aze,"STRONG",{});var nXt=s(I0e);Hdr=r(nXt,"bert"),nXt.forEach(t),Jdr=r(aze," \u2014 "),sJ=n(aze,"A",{href:!0});var sXt=s(sJ);Ydr=r(sXt,"BertForMultipleChoice"),sXt.forEach(t),Zdr=r(aze," (BERT model)"),aze.forEach(t),Kdr=i(ee),Y3=n(ee,"LI",{});var nze=s(Y3);N0e=n(nze,"STRONG",{});var lXt=s(N0e);ecr=r(lXt,"big_bird"),lXt.forEach(t),ocr=r(nze," \u2014 "),lJ=n(nze,"A",{href:!0});var iXt=s(lJ);rcr=r(iXt,"BigBirdForMultipleChoice"),iXt.forEach(t),tcr=r(nze," (BigBird model)"),nze.forEach(t),acr=i(ee),Z3=n(ee,"LI",{});var sze=s(Z3);q0e=n(sze,"STRONG",{});var dXt=s(q0e);ncr=r(dXt,"camembert"),dXt.forEach(t),scr=r(sze," \u2014 "),iJ=n(sze,"A",{href:!0});var cXt=s(iJ);lcr=r(cXt,"CamembertForMultipleChoice"),cXt.forEach(t),icr=r(sze," (CamemBERT model)"),sze.forEach(t),dcr=i(ee),K3=n(ee,"LI",{});var lze=s(K3);j0e=n(lze,"STRONG",{});var fXt=s(j0e);ccr=r(fXt,"canine"),fXt.forEach(t),fcr=r(lze," \u2014 "),dJ=n(lze,"A",{href:!0});var mXt=s(dJ);mcr=r(mXt,"CanineForMultipleChoice"),mXt.forEach(t),gcr=r(lze," (CANINE model)"),lze.forEach(t),hcr=i(ee),e0=n(ee,"LI",{});var ize=s(e0);D0e=n(ize,"STRONG",{});var gXt=s(D0e);ucr=r(gXt,"convbert"),gXt.forEach(t),pcr=r(ize," \u2014 "),cJ=n(ize,"A",{href:!0});var hXt=s(cJ);_cr=r(hXt,"ConvBertForMultipleChoice"),hXt.forEach(t),vcr=r(ize," (ConvBERT model)"),ize.forEach(t),bcr=i(ee),o0=n(ee,"LI",{});var dze=s(o0);G0e=n(dze,"STRONG",{});var uXt=s(G0e);Fcr=r(uXt,"data2vec-text"),uXt.forEach(t),Tcr=r(dze," \u2014 "),fJ=n(dze,"A",{href:!0});var pXt=s(fJ);Mcr=r(pXt,"Data2VecTextForMultipleChoice"),pXt.forEach(t),Ecr=r(dze," (Data2VecText model)"),dze.forEach(t),Ccr=i(ee),r0=n(ee,"LI",{});var cze=s(r0);O0e=n(cze,"STRONG",{});var _Xt=s(O0e);wcr=r(_Xt,"deberta-v2"),_Xt.forEach(t),Acr=r(cze," \u2014 "),mJ=n(cze,"A",{href:!0});var vXt=s(mJ);Lcr=r(vXt,"DebertaV2ForMultipleChoice"),vXt.forEach(t),ycr=r(cze," (DeBERTa-v2 model)"),cze.forEach(t),xcr=i(ee),t0=n(ee,"LI",{});var fze=s(t0);V0e=n(fze,"STRONG",{});var bXt=s(V0e);$cr=r(bXt,"distilbert"),bXt.forEach(t),kcr=r(fze," \u2014 "),gJ=n(fze,"A",{href:!0});var FXt=s(gJ);Scr=r(FXt,"DistilBertForMultipleChoice"),FXt.forEach(t),Rcr=r(fze," (DistilBERT model)"),fze.forEach(t),Pcr=i(ee),a0=n(ee,"LI",{});var mze=s(a0);X0e=n(mze,"STRONG",{});var TXt=s(X0e);Bcr=r(TXt,"electra"),TXt.forEach(t),Icr=r(mze," \u2014 "),hJ=n(mze,"A",{href:!0});var MXt=s(hJ);Ncr=r(MXt,"ElectraForMultipleChoice"),MXt.forEach(t),qcr=r(mze," (ELECTRA model)"),mze.forEach(t),jcr=i(ee),n0=n(ee,"LI",{});var gze=s(n0);z0e=n(gze,"STRONG",{});var EXt=s(z0e);Dcr=r(EXt,"ernie"),EXt.forEach(t),Gcr=r(gze," \u2014 "),uJ=n(gze,"A",{href:!0});var CXt=s(uJ);Ocr=r(CXt,"ErnieForMultipleChoice"),CXt.forEach(t),Vcr=r(gze," (ERNIE model)"),gze.forEach(t),Xcr=i(ee),s0=n(ee,"LI",{});var hze=s(s0);Q0e=n(hze,"STRONG",{});var wXt=s(Q0e);zcr=r(wXt,"flaubert"),wXt.forEach(t),Qcr=r(hze," \u2014 "),pJ=n(hze,"A",{href:!0});var AXt=s(pJ);Wcr=r(AXt,"FlaubertForMultipleChoice"),AXt.forEach(t),Ucr=r(hze," (FlauBERT model)"),hze.forEach(t),Hcr=i(ee),l0=n(ee,"LI",{});var uze=s(l0);W0e=n(uze,"STRONG",{});var LXt=s(W0e);Jcr=r(LXt,"fnet"),LXt.forEach(t),Ycr=r(uze," \u2014 "),_J=n(uze,"A",{href:!0});var yXt=s(_J);Zcr=r(yXt,"FNetForMultipleChoice"),yXt.forEach(t),Kcr=r(uze," (FNet model)"),uze.forEach(t),efr=i(ee),i0=n(ee,"LI",{});var pze=s(i0);U0e=n(pze,"STRONG",{});var xXt=s(U0e);ofr=r(xXt,"funnel"),xXt.forEach(t),rfr=r(pze," \u2014 "),vJ=n(pze,"A",{href:!0});var $Xt=s(vJ);tfr=r($Xt,"FunnelForMultipleChoice"),$Xt.forEach(t),afr=r(pze," (Funnel Transformer model)"),pze.forEach(t),nfr=i(ee),d0=n(ee,"LI",{});var _ze=s(d0);H0e=n(_ze,"STRONG",{});var kXt=s(H0e);sfr=r(kXt,"ibert"),kXt.forEach(t),lfr=r(_ze," \u2014 "),bJ=n(_ze,"A",{href:!0});var SXt=s(bJ);ifr=r(SXt,"IBertForMultipleChoice"),SXt.forEach(t),dfr=r(_ze," (I-BERT model)"),_ze.forEach(t),cfr=i(ee),c0=n(ee,"LI",{});var vze=s(c0);J0e=n(vze,"STRONG",{});var RXt=s(J0e);ffr=r(RXt,"longformer"),RXt.forEach(t),mfr=r(vze," \u2014 "),FJ=n(vze,"A",{href:!0});var PXt=s(FJ);gfr=r(PXt,"LongformerForMultipleChoice"),PXt.forEach(t),hfr=r(vze," (Longformer model)"),vze.forEach(t),ufr=i(ee),f0=n(ee,"LI",{});var bze=s(f0);Y0e=n(bze,"STRONG",{});var BXt=s(Y0e);pfr=r(BXt,"luke"),BXt.forEach(t),_fr=r(bze," \u2014 "),TJ=n(bze,"A",{href:!0});var IXt=s(TJ);vfr=r(IXt,"LukeForMultipleChoice"),IXt.forEach(t),bfr=r(bze," (LUKE model)"),bze.forEach(t),Ffr=i(ee),m0=n(ee,"LI",{});var Fze=s(m0);Z0e=n(Fze,"STRONG",{});var NXt=s(Z0e);Tfr=r(NXt,"megatron-bert"),NXt.forEach(t),Mfr=r(Fze," \u2014 "),MJ=n(Fze,"A",{href:!0});var qXt=s(MJ);Efr=r(qXt,"MegatronBertForMultipleChoice"),qXt.forEach(t),Cfr=r(Fze," (Megatron-BERT model)"),Fze.forEach(t),wfr=i(ee),g0=n(ee,"LI",{});var Tze=s(g0);K0e=n(Tze,"STRONG",{});var jXt=s(K0e);Afr=r(jXt,"mobilebert"),jXt.forEach(t),Lfr=r(Tze," \u2014 "),EJ=n(Tze,"A",{href:!0});var DXt=s(EJ);yfr=r(DXt,"MobileBertForMultipleChoice"),DXt.forEach(t),xfr=r(Tze," (MobileBERT model)"),Tze.forEach(t),$fr=i(ee),h0=n(ee,"LI",{});var Mze=s(h0);eFe=n(Mze,"STRONG",{});var GXt=s(eFe);kfr=r(GXt,"mpnet"),GXt.forEach(t),Sfr=r(Mze," \u2014 "),CJ=n(Mze,"A",{href:!0});var OXt=s(CJ);Rfr=r(OXt,"MPNetForMultipleChoice"),OXt.forEach(t),Pfr=r(Mze," (MPNet model)"),Mze.forEach(t),Bfr=i(ee),u0=n(ee,"LI",{});var Eze=s(u0);oFe=n(Eze,"STRONG",{});var VXt=s(oFe);Ifr=r(VXt,"nezha"),VXt.forEach(t),Nfr=r(Eze," \u2014 "),wJ=n(Eze,"A",{href:!0});var XXt=s(wJ);qfr=r(XXt,"NezhaForMultipleChoice"),XXt.forEach(t),jfr=r(Eze," (Nezha model)"),Eze.forEach(t),Dfr=i(ee),p0=n(ee,"LI",{});var Cze=s(p0);rFe=n(Cze,"STRONG",{});var zXt=s(rFe);Gfr=r(zXt,"nystromformer"),zXt.forEach(t),Ofr=r(Cze," \u2014 "),AJ=n(Cze,"A",{href:!0});var QXt=s(AJ);Vfr=r(QXt,"NystromformerForMultipleChoice"),QXt.forEach(t),Xfr=r(Cze," (Nystr\xF6mformer model)"),Cze.forEach(t),zfr=i(ee),_0=n(ee,"LI",{});var wze=s(_0);tFe=n(wze,"STRONG",{});var WXt=s(tFe);Qfr=r(WXt,"qdqbert"),WXt.forEach(t),Wfr=r(wze," \u2014 "),LJ=n(wze,"A",{href:!0});var UXt=s(LJ);Ufr=r(UXt,"QDQBertForMultipleChoice"),UXt.forEach(t),Hfr=r(wze," (QDQBert model)"),wze.forEach(t),Jfr=i(ee),v0=n(ee,"LI",{});var Aze=s(v0);aFe=n(Aze,"STRONG",{});var HXt=s(aFe);Yfr=r(HXt,"rembert"),HXt.forEach(t),Zfr=r(Aze," \u2014 "),yJ=n(Aze,"A",{href:!0});var JXt=s(yJ);Kfr=r(JXt,"RemBertForMultipleChoice"),JXt.forEach(t),emr=r(Aze," (RemBERT model)"),Aze.forEach(t),omr=i(ee),b0=n(ee,"LI",{});var Lze=s(b0);nFe=n(Lze,"STRONG",{});var YXt=s(nFe);rmr=r(YXt,"roberta"),YXt.forEach(t),tmr=r(Lze," \u2014 "),xJ=n(Lze,"A",{href:!0});var ZXt=s(xJ);amr=r(ZXt,"RobertaForMultipleChoice"),ZXt.forEach(t),nmr=r(Lze," (RoBERTa model)"),Lze.forEach(t),smr=i(ee),F0=n(ee,"LI",{});var yze=s(F0);sFe=n(yze,"STRONG",{});var KXt=s(sFe);lmr=r(KXt,"roformer"),KXt.forEach(t),imr=r(yze," \u2014 "),$J=n(yze,"A",{href:!0});var ezt=s($J);dmr=r(ezt,"RoFormerForMultipleChoice"),ezt.forEach(t),cmr=r(yze," (RoFormer model)"),yze.forEach(t),fmr=i(ee),T0=n(ee,"LI",{});var xze=s(T0);lFe=n(xze,"STRONG",{});var ozt=s(lFe);mmr=r(ozt,"squeezebert"),ozt.forEach(t),gmr=r(xze," \u2014 "),kJ=n(xze,"A",{href:!0});var rzt=s(kJ);hmr=r(rzt,"SqueezeBertForMultipleChoice"),rzt.forEach(t),umr=r(xze," (SqueezeBERT model)"),xze.forEach(t),pmr=i(ee),M0=n(ee,"LI",{});var $ze=s(M0);iFe=n($ze,"STRONG",{});var tzt=s(iFe);_mr=r(tzt,"xlm"),tzt.forEach(t),vmr=r($ze," \u2014 "),SJ=n($ze,"A",{href:!0});var azt=s(SJ);bmr=r(azt,"XLMForMultipleChoice"),azt.forEach(t),Fmr=r($ze," (XLM model)"),$ze.forEach(t),Tmr=i(ee),E0=n(ee,"LI",{});var kze=s(E0);dFe=n(kze,"STRONG",{});var nzt=s(dFe);Mmr=r(nzt,"xlm-roberta"),nzt.forEach(t),Emr=r(kze," \u2014 "),RJ=n(kze,"A",{href:!0});var szt=s(RJ);Cmr=r(szt,"XLMRobertaForMultipleChoice"),szt.forEach(t),wmr=r(kze," (XLM-RoBERTa model)"),kze.forEach(t),Amr=i(ee),C0=n(ee,"LI",{});var Sze=s(C0);cFe=n(Sze,"STRONG",{});var lzt=s(cFe);Lmr=r(lzt,"xlm-roberta-xl"),lzt.forEach(t),ymr=r(Sze," \u2014 "),PJ=n(Sze,"A",{href:!0});var izt=s(PJ);xmr=r(izt,"XLMRobertaXLForMultipleChoice"),izt.forEach(t),$mr=r(Sze," (XLM-RoBERTa-XL model)"),Sze.forEach(t),kmr=i(ee),w0=n(ee,"LI",{});var Rze=s(w0);fFe=n(Rze,"STRONG",{});var dzt=s(fFe);Smr=r(dzt,"xlnet"),dzt.forEach(t),Rmr=r(Rze," \u2014 "),BJ=n(Rze,"A",{href:!0});var czt=s(BJ);Pmr=r(czt,"XLNetForMultipleChoice"),czt.forEach(t),Bmr=r(Rze," (XLNet model)"),Rze.forEach(t),Imr=i(ee),A0=n(ee,"LI",{});var Pze=s(A0);mFe=n(Pze,"STRONG",{});var fzt=s(mFe);Nmr=r(fzt,"yoso"),fzt.forEach(t),qmr=r(Pze," \u2014 "),IJ=n(Pze,"A",{href:!0});var mzt=s(IJ);jmr=r(mzt,"YosoForMultipleChoice"),mzt.forEach(t),Dmr=r(Pze," (YOSO model)"),Pze.forEach(t),ee.forEach(t),Gmr=i(xa),L0=n(xa,"P",{});var Bze=s(L0);Omr=r(Bze,"The model is set in evaluation mode by default using "),gFe=n(Bze,"CODE",{});var gzt=s(gFe);Vmr=r(gzt,"model.eval()"),gzt.forEach(t),Xmr=r(Bze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hFe=n(Bze,"CODE",{});var hzt=s(hFe);zmr=r(hzt,"model.train()"),hzt.forEach(t),Bze.forEach(t),Qmr=i(xa),T(y0.$$.fragment,xa),xa.forEach(t),Nl.forEach(t),Voo=i(f),Xd=n(f,"H2",{class:!0});var nao=s(Xd);x0=n(nao,"A",{id:!0,class:!0,href:!0});var uzt=s(x0);uFe=n(uzt,"SPAN",{});var pzt=s(uFe);T(B$.$$.fragment,pzt),pzt.forEach(t),uzt.forEach(t),Wmr=i(nao),pFe=n(nao,"SPAN",{});var _zt=s(pFe);Umr=r(_zt,"AutoModelForNextSentencePrediction"),_zt.forEach(t),nao.forEach(t),Xoo=i(f),Oo=n(f,"DIV",{class:!0});var ql=s(Oo);T(I$.$$.fragment,ql),Hmr=i(ql),zd=n(ql,"P",{});var nde=s(zd);Jmr=r(nde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),NJ=n(nde,"A",{href:!0});var vzt=s(NJ);Ymr=r(vzt,"from_pretrained()"),vzt.forEach(t),Zmr=r(nde," class method or the "),qJ=n(nde,"A",{href:!0});var bzt=s(qJ);Kmr=r(bzt,"from_config()"),bzt.forEach(t),egr=r(nde,` class
method.`),nde.forEach(t),ogr=i(ql),N$=n(ql,"P",{});var sao=s(N$);rgr=r(sao,"This class cannot be instantiated directly using "),_Fe=n(sao,"CODE",{});var Fzt=s(_Fe);tgr=r(Fzt,"__init__()"),Fzt.forEach(t),agr=r(sao," (throws an error)."),sao.forEach(t),ngr=i(ql),At=n(ql,"DIV",{class:!0});var Py=s(At);T(q$.$$.fragment,Py),sgr=i(Py),vFe=n(Py,"P",{});var Tzt=s(vFe);lgr=r(Tzt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Tzt.forEach(t),igr=i(Py),Qd=n(Py,"P",{});var sde=s(Qd);dgr=r(sde,`Note:
Loading a model from its configuration file does `),bFe=n(sde,"STRONG",{});var Mzt=s(bFe);cgr=r(Mzt,"not"),Mzt.forEach(t),fgr=r(sde,` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=n(sde,"A",{href:!0});var Ezt=s(jJ);mgr=r(Ezt,"from_pretrained()"),Ezt.forEach(t),ggr=r(sde," to load the model weights."),sde.forEach(t),hgr=i(Py),T($0.$$.fragment,Py),Py.forEach(t),ugr=i(ql),so=n(ql,"DIV",{class:!0});var $a=s(so);T(j$.$$.fragment,$a),pgr=i($a),FFe=n($a,"P",{});var Czt=s(FFe);_gr=r(Czt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Czt.forEach(t),vgr=i($a),ln=n($a,"P",{});var By=s(ln);bgr=r(By,"The model class to instantiate is selected based on the "),TFe=n(By,"CODE",{});var wzt=s(TFe);Fgr=r(wzt,"model_type"),wzt.forEach(t),Tgr=r(By,` property of the config object (either
passed as an argument or loaded from `),MFe=n(By,"CODE",{});var Azt=s(MFe);Mgr=r(Azt,"pretrained_model_name_or_path"),Azt.forEach(t),Egr=r(By,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=n(By,"CODE",{});var Lzt=s(EFe);Cgr=r(Lzt,"pretrained_model_name_or_path"),Lzt.forEach(t),wgr=r(By,":"),By.forEach(t),Agr=i($a),Ue=n($a,"UL",{});var mt=s(Ue);k0=n(mt,"LI",{});var Ize=s(k0);CFe=n(Ize,"STRONG",{});var yzt=s(CFe);Lgr=r(yzt,"bert"),yzt.forEach(t),ygr=r(Ize," \u2014 "),DJ=n(Ize,"A",{href:!0});var xzt=s(DJ);xgr=r(xzt,"BertForNextSentencePrediction"),xzt.forEach(t),$gr=r(Ize," (BERT model)"),Ize.forEach(t),kgr=i(mt),S0=n(mt,"LI",{});var Nze=s(S0);wFe=n(Nze,"STRONG",{});var $zt=s(wFe);Sgr=r($zt,"ernie"),$zt.forEach(t),Rgr=r(Nze," \u2014 "),GJ=n(Nze,"A",{href:!0});var kzt=s(GJ);Pgr=r(kzt,"ErnieForNextSentencePrediction"),kzt.forEach(t),Bgr=r(Nze," (ERNIE model)"),Nze.forEach(t),Igr=i(mt),R0=n(mt,"LI",{});var qze=s(R0);AFe=n(qze,"STRONG",{});var Szt=s(AFe);Ngr=r(Szt,"fnet"),Szt.forEach(t),qgr=r(qze," \u2014 "),OJ=n(qze,"A",{href:!0});var Rzt=s(OJ);jgr=r(Rzt,"FNetForNextSentencePrediction"),Rzt.forEach(t),Dgr=r(qze," (FNet model)"),qze.forEach(t),Ggr=i(mt),P0=n(mt,"LI",{});var jze=s(P0);LFe=n(jze,"STRONG",{});var Pzt=s(LFe);Ogr=r(Pzt,"megatron-bert"),Pzt.forEach(t),Vgr=r(jze," \u2014 "),VJ=n(jze,"A",{href:!0});var Bzt=s(VJ);Xgr=r(Bzt,"MegatronBertForNextSentencePrediction"),Bzt.forEach(t),zgr=r(jze," (Megatron-BERT model)"),jze.forEach(t),Qgr=i(mt),B0=n(mt,"LI",{});var Dze=s(B0);yFe=n(Dze,"STRONG",{});var Izt=s(yFe);Wgr=r(Izt,"mobilebert"),Izt.forEach(t),Ugr=r(Dze," \u2014 "),XJ=n(Dze,"A",{href:!0});var Nzt=s(XJ);Hgr=r(Nzt,"MobileBertForNextSentencePrediction"),Nzt.forEach(t),Jgr=r(Dze," (MobileBERT model)"),Dze.forEach(t),Ygr=i(mt),I0=n(mt,"LI",{});var Gze=s(I0);xFe=n(Gze,"STRONG",{});var qzt=s(xFe);Zgr=r(qzt,"nezha"),qzt.forEach(t),Kgr=r(Gze," \u2014 "),zJ=n(Gze,"A",{href:!0});var jzt=s(zJ);ehr=r(jzt,"NezhaForNextSentencePrediction"),jzt.forEach(t),ohr=r(Gze," (Nezha model)"),Gze.forEach(t),rhr=i(mt),N0=n(mt,"LI",{});var Oze=s(N0);$Fe=n(Oze,"STRONG",{});var Dzt=s($Fe);thr=r(Dzt,"qdqbert"),Dzt.forEach(t),ahr=r(Oze," \u2014 "),QJ=n(Oze,"A",{href:!0});var Gzt=s(QJ);nhr=r(Gzt,"QDQBertForNextSentencePrediction"),Gzt.forEach(t),shr=r(Oze," (QDQBert model)"),Oze.forEach(t),mt.forEach(t),lhr=i($a),q0=n($a,"P",{});var Vze=s(q0);ihr=r(Vze,"The model is set in evaluation mode by default using "),kFe=n(Vze,"CODE",{});var Ozt=s(kFe);dhr=r(Ozt,"model.eval()"),Ozt.forEach(t),chr=r(Vze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),SFe=n(Vze,"CODE",{});var Vzt=s(SFe);fhr=r(Vzt,"model.train()"),Vzt.forEach(t),Vze.forEach(t),mhr=i($a),T(j0.$$.fragment,$a),$a.forEach(t),ql.forEach(t),zoo=i(f),Wd=n(f,"H2",{class:!0});var lao=s(Wd);D0=n(lao,"A",{id:!0,class:!0,href:!0});var Xzt=s(D0);RFe=n(Xzt,"SPAN",{});var zzt=s(RFe);T(D$.$$.fragment,zzt),zzt.forEach(t),Xzt.forEach(t),ghr=i(lao),PFe=n(lao,"SPAN",{});var Qzt=s(PFe);hhr=r(Qzt,"AutoModelForTokenClassification"),Qzt.forEach(t),lao.forEach(t),Qoo=i(f),Vo=n(f,"DIV",{class:!0});var jl=s(Vo);T(G$.$$.fragment,jl),uhr=i(jl),Ud=n(jl,"P",{});var lde=s(Ud);phr=r(lde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),WJ=n(lde,"A",{href:!0});var Wzt=s(WJ);_hr=r(Wzt,"from_pretrained()"),Wzt.forEach(t),vhr=r(lde," class method or the "),UJ=n(lde,"A",{href:!0});var Uzt=s(UJ);bhr=r(Uzt,"from_config()"),Uzt.forEach(t),Fhr=r(lde,` class
method.`),lde.forEach(t),Thr=i(jl),O$=n(jl,"P",{});var iao=s(O$);Mhr=r(iao,"This class cannot be instantiated directly using "),BFe=n(iao,"CODE",{});var Hzt=s(BFe);Ehr=r(Hzt,"__init__()"),Hzt.forEach(t),Chr=r(iao," (throws an error)."),iao.forEach(t),whr=i(jl),Lt=n(jl,"DIV",{class:!0});var Iy=s(Lt);T(V$.$$.fragment,Iy),Ahr=i(Iy),IFe=n(Iy,"P",{});var Jzt=s(IFe);Lhr=r(Jzt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Jzt.forEach(t),yhr=i(Iy),Hd=n(Iy,"P",{});var ide=s(Hd);xhr=r(ide,`Note:
Loading a model from its configuration file does `),NFe=n(ide,"STRONG",{});var Yzt=s(NFe);$hr=r(Yzt,"not"),Yzt.forEach(t),khr=r(ide,` load the model weights. It only affects the
model\u2019s configuration. Use `),HJ=n(ide,"A",{href:!0});var Zzt=s(HJ);Shr=r(Zzt,"from_pretrained()"),Zzt.forEach(t),Rhr=r(ide," to load the model weights."),ide.forEach(t),Phr=i(Iy),T(G0.$$.fragment,Iy),Iy.forEach(t),Bhr=i(jl),lo=n(jl,"DIV",{class:!0});var ka=s(lo);T(X$.$$.fragment,ka),Ihr=i(ka),qFe=n(ka,"P",{});var Kzt=s(qFe);Nhr=r(Kzt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Kzt.forEach(t),qhr=i(ka),dn=n(ka,"P",{});var Ny=s(dn);jhr=r(Ny,"The model class to instantiate is selected based on the "),jFe=n(Ny,"CODE",{});var eQt=s(jFe);Dhr=r(eQt,"model_type"),eQt.forEach(t),Ghr=r(Ny,` property of the config object (either
passed as an argument or loaded from `),DFe=n(Ny,"CODE",{});var oQt=s(DFe);Ohr=r(oQt,"pretrained_model_name_or_path"),oQt.forEach(t),Vhr=r(Ny,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GFe=n(Ny,"CODE",{});var rQt=s(GFe);Xhr=r(rQt,"pretrained_model_name_or_path"),rQt.forEach(t),zhr=r(Ny,":"),Ny.forEach(t),Qhr=i(ka),H=n(ka,"UL",{});var Y=s(H);O0=n(Y,"LI",{});var Xze=s(O0);OFe=n(Xze,"STRONG",{});var tQt=s(OFe);Whr=r(tQt,"albert"),tQt.forEach(t),Uhr=r(Xze," \u2014 "),JJ=n(Xze,"A",{href:!0});var aQt=s(JJ);Hhr=r(aQt,"AlbertForTokenClassification"),aQt.forEach(t),Jhr=r(Xze," (ALBERT model)"),Xze.forEach(t),Yhr=i(Y),V0=n(Y,"LI",{});var zze=s(V0);VFe=n(zze,"STRONG",{});var nQt=s(VFe);Zhr=r(nQt,"bert"),nQt.forEach(t),Khr=r(zze," \u2014 "),YJ=n(zze,"A",{href:!0});var sQt=s(YJ);eur=r(sQt,"BertForTokenClassification"),sQt.forEach(t),our=r(zze," (BERT model)"),zze.forEach(t),rur=i(Y),X0=n(Y,"LI",{});var Qze=s(X0);XFe=n(Qze,"STRONG",{});var lQt=s(XFe);tur=r(lQt,"big_bird"),lQt.forEach(t),aur=r(Qze," \u2014 "),ZJ=n(Qze,"A",{href:!0});var iQt=s(ZJ);nur=r(iQt,"BigBirdForTokenClassification"),iQt.forEach(t),sur=r(Qze," (BigBird model)"),Qze.forEach(t),lur=i(Y),z0=n(Y,"LI",{});var Wze=s(z0);zFe=n(Wze,"STRONG",{});var dQt=s(zFe);iur=r(dQt,"bloom"),dQt.forEach(t),dur=r(Wze," \u2014 "),KJ=n(Wze,"A",{href:!0});var cQt=s(KJ);cur=r(cQt,"BloomForTokenClassification"),cQt.forEach(t),fur=r(Wze," (BLOOM model)"),Wze.forEach(t),mur=i(Y),Q0=n(Y,"LI",{});var Uze=s(Q0);QFe=n(Uze,"STRONG",{});var fQt=s(QFe);gur=r(fQt,"camembert"),fQt.forEach(t),hur=r(Uze," \u2014 "),eY=n(Uze,"A",{href:!0});var mQt=s(eY);uur=r(mQt,"CamembertForTokenClassification"),mQt.forEach(t),pur=r(Uze," (CamemBERT model)"),Uze.forEach(t),_ur=i(Y),W0=n(Y,"LI",{});var Hze=s(W0);WFe=n(Hze,"STRONG",{});var gQt=s(WFe);vur=r(gQt,"canine"),gQt.forEach(t),bur=r(Hze," \u2014 "),oY=n(Hze,"A",{href:!0});var hQt=s(oY);Fur=r(hQt,"CanineForTokenClassification"),hQt.forEach(t),Tur=r(Hze," (CANINE model)"),Hze.forEach(t),Mur=i(Y),U0=n(Y,"LI",{});var Jze=s(U0);UFe=n(Jze,"STRONG",{});var uQt=s(UFe);Eur=r(uQt,"convbert"),uQt.forEach(t),Cur=r(Jze," \u2014 "),rY=n(Jze,"A",{href:!0});var pQt=s(rY);wur=r(pQt,"ConvBertForTokenClassification"),pQt.forEach(t),Aur=r(Jze," (ConvBERT model)"),Jze.forEach(t),Lur=i(Y),H0=n(Y,"LI",{});var Yze=s(H0);HFe=n(Yze,"STRONG",{});var _Qt=s(HFe);yur=r(_Qt,"data2vec-text"),_Qt.forEach(t),xur=r(Yze," \u2014 "),tY=n(Yze,"A",{href:!0});var vQt=s(tY);$ur=r(vQt,"Data2VecTextForTokenClassification"),vQt.forEach(t),kur=r(Yze," (Data2VecText model)"),Yze.forEach(t),Sur=i(Y),J0=n(Y,"LI",{});var Zze=s(J0);JFe=n(Zze,"STRONG",{});var bQt=s(JFe);Rur=r(bQt,"deberta"),bQt.forEach(t),Pur=r(Zze," \u2014 "),aY=n(Zze,"A",{href:!0});var FQt=s(aY);Bur=r(FQt,"DebertaForTokenClassification"),FQt.forEach(t),Iur=r(Zze," (DeBERTa model)"),Zze.forEach(t),Nur=i(Y),Y0=n(Y,"LI",{});var Kze=s(Y0);YFe=n(Kze,"STRONG",{});var TQt=s(YFe);qur=r(TQt,"deberta-v2"),TQt.forEach(t),jur=r(Kze," \u2014 "),nY=n(Kze,"A",{href:!0});var MQt=s(nY);Dur=r(MQt,"DebertaV2ForTokenClassification"),MQt.forEach(t),Gur=r(Kze," (DeBERTa-v2 model)"),Kze.forEach(t),Our=i(Y),Z0=n(Y,"LI",{});var eQe=s(Z0);ZFe=n(eQe,"STRONG",{});var EQt=s(ZFe);Vur=r(EQt,"distilbert"),EQt.forEach(t),Xur=r(eQe," \u2014 "),sY=n(eQe,"A",{href:!0});var CQt=s(sY);zur=r(CQt,"DistilBertForTokenClassification"),CQt.forEach(t),Qur=r(eQe," (DistilBERT model)"),eQe.forEach(t),Wur=i(Y),K0=n(Y,"LI",{});var oQe=s(K0);KFe=n(oQe,"STRONG",{});var wQt=s(KFe);Uur=r(wQt,"electra"),wQt.forEach(t),Hur=r(oQe," \u2014 "),lY=n(oQe,"A",{href:!0});var AQt=s(lY);Jur=r(AQt,"ElectraForTokenClassification"),AQt.forEach(t),Yur=r(oQe," (ELECTRA model)"),oQe.forEach(t),Zur=i(Y),eF=n(Y,"LI",{});var rQe=s(eF);eTe=n(rQe,"STRONG",{});var LQt=s(eTe);Kur=r(LQt,"ernie"),LQt.forEach(t),epr=r(rQe," \u2014 "),iY=n(rQe,"A",{href:!0});var yQt=s(iY);opr=r(yQt,"ErnieForTokenClassification"),yQt.forEach(t),rpr=r(rQe," (ERNIE model)"),rQe.forEach(t),tpr=i(Y),oF=n(Y,"LI",{});var tQe=s(oF);oTe=n(tQe,"STRONG",{});var xQt=s(oTe);apr=r(xQt,"esm"),xQt.forEach(t),npr=r(tQe," \u2014 "),dY=n(tQe,"A",{href:!0});var $Qt=s(dY);spr=r($Qt,"EsmForTokenClassification"),$Qt.forEach(t),lpr=r(tQe," (ESM model)"),tQe.forEach(t),ipr=i(Y),rF=n(Y,"LI",{});var aQe=s(rF);rTe=n(aQe,"STRONG",{});var kQt=s(rTe);dpr=r(kQt,"flaubert"),kQt.forEach(t),cpr=r(aQe," \u2014 "),cY=n(aQe,"A",{href:!0});var SQt=s(cY);fpr=r(SQt,"FlaubertForTokenClassification"),SQt.forEach(t),mpr=r(aQe," (FlauBERT model)"),aQe.forEach(t),gpr=i(Y),tF=n(Y,"LI",{});var nQe=s(tF);tTe=n(nQe,"STRONG",{});var RQt=s(tTe);hpr=r(RQt,"fnet"),RQt.forEach(t),upr=r(nQe," \u2014 "),fY=n(nQe,"A",{href:!0});var PQt=s(fY);ppr=r(PQt,"FNetForTokenClassification"),PQt.forEach(t),_pr=r(nQe," (FNet model)"),nQe.forEach(t),vpr=i(Y),aF=n(Y,"LI",{});var sQe=s(aF);aTe=n(sQe,"STRONG",{});var BQt=s(aTe);bpr=r(BQt,"funnel"),BQt.forEach(t),Fpr=r(sQe," \u2014 "),mY=n(sQe,"A",{href:!0});var IQt=s(mY);Tpr=r(IQt,"FunnelForTokenClassification"),IQt.forEach(t),Mpr=r(sQe," (Funnel Transformer model)"),sQe.forEach(t),Epr=i(Y),nF=n(Y,"LI",{});var lQe=s(nF);nTe=n(lQe,"STRONG",{});var NQt=s(nTe);Cpr=r(NQt,"gpt2"),NQt.forEach(t),wpr=r(lQe," \u2014 "),gY=n(lQe,"A",{href:!0});var qQt=s(gY);Apr=r(qQt,"GPT2ForTokenClassification"),qQt.forEach(t),Lpr=r(lQe," (OpenAI GPT-2 model)"),lQe.forEach(t),ypr=i(Y),sF=n(Y,"LI",{});var iQe=s(sF);sTe=n(iQe,"STRONG",{});var jQt=s(sTe);xpr=r(jQt,"ibert"),jQt.forEach(t),$pr=r(iQe," \u2014 "),hY=n(iQe,"A",{href:!0});var DQt=s(hY);kpr=r(DQt,"IBertForTokenClassification"),DQt.forEach(t),Spr=r(iQe," (I-BERT model)"),iQe.forEach(t),Rpr=i(Y),lF=n(Y,"LI",{});var dQe=s(lF);lTe=n(dQe,"STRONG",{});var GQt=s(lTe);Ppr=r(GQt,"layoutlm"),GQt.forEach(t),Bpr=r(dQe," \u2014 "),uY=n(dQe,"A",{href:!0});var OQt=s(uY);Ipr=r(OQt,"LayoutLMForTokenClassification"),OQt.forEach(t),Npr=r(dQe," (LayoutLM model)"),dQe.forEach(t),qpr=i(Y),iF=n(Y,"LI",{});var cQe=s(iF);iTe=n(cQe,"STRONG",{});var VQt=s(iTe);jpr=r(VQt,"layoutlmv2"),VQt.forEach(t),Dpr=r(cQe," \u2014 "),pY=n(cQe,"A",{href:!0});var XQt=s(pY);Gpr=r(XQt,"LayoutLMv2ForTokenClassification"),XQt.forEach(t),Opr=r(cQe," (LayoutLMv2 model)"),cQe.forEach(t),Vpr=i(Y),dF=n(Y,"LI",{});var fQe=s(dF);dTe=n(fQe,"STRONG",{});var zQt=s(dTe);Xpr=r(zQt,"layoutlmv3"),zQt.forEach(t),zpr=r(fQe," \u2014 "),_Y=n(fQe,"A",{href:!0});var QQt=s(_Y);Qpr=r(QQt,"LayoutLMv3ForTokenClassification"),QQt.forEach(t),Wpr=r(fQe," (LayoutLMv3 model)"),fQe.forEach(t),Upr=i(Y),cF=n(Y,"LI",{});var mQe=s(cF);cTe=n(mQe,"STRONG",{});var WQt=s(cTe);Hpr=r(WQt,"longformer"),WQt.forEach(t),Jpr=r(mQe," \u2014 "),vY=n(mQe,"A",{href:!0});var UQt=s(vY);Ypr=r(UQt,"LongformerForTokenClassification"),UQt.forEach(t),Zpr=r(mQe," (Longformer model)"),mQe.forEach(t),Kpr=i(Y),fF=n(Y,"LI",{});var gQe=s(fF);fTe=n(gQe,"STRONG",{});var HQt=s(fTe);e_r=r(HQt,"luke"),HQt.forEach(t),o_r=r(gQe," \u2014 "),bY=n(gQe,"A",{href:!0});var JQt=s(bY);r_r=r(JQt,"LukeForTokenClassification"),JQt.forEach(t),t_r=r(gQe," (LUKE model)"),gQe.forEach(t),a_r=i(Y),mF=n(Y,"LI",{});var hQe=s(mF);mTe=n(hQe,"STRONG",{});var YQt=s(mTe);n_r=r(YQt,"markuplm"),YQt.forEach(t),s_r=r(hQe," \u2014 "),FY=n(hQe,"A",{href:!0});var ZQt=s(FY);l_r=r(ZQt,"MarkupLMForTokenClassification"),ZQt.forEach(t),i_r=r(hQe," (MarkupLM model)"),hQe.forEach(t),d_r=i(Y),gF=n(Y,"LI",{});var uQe=s(gF);gTe=n(uQe,"STRONG",{});var KQt=s(gTe);c_r=r(KQt,"megatron-bert"),KQt.forEach(t),f_r=r(uQe," \u2014 "),TY=n(uQe,"A",{href:!0});var eWt=s(TY);m_r=r(eWt,"MegatronBertForTokenClassification"),eWt.forEach(t),g_r=r(uQe," (Megatron-BERT model)"),uQe.forEach(t),h_r=i(Y),hF=n(Y,"LI",{});var pQe=s(hF);hTe=n(pQe,"STRONG",{});var oWt=s(hTe);u_r=r(oWt,"mobilebert"),oWt.forEach(t),p_r=r(pQe," \u2014 "),MY=n(pQe,"A",{href:!0});var rWt=s(MY);__r=r(rWt,"MobileBertForTokenClassification"),rWt.forEach(t),v_r=r(pQe," (MobileBERT model)"),pQe.forEach(t),b_r=i(Y),uF=n(Y,"LI",{});var _Qe=s(uF);uTe=n(_Qe,"STRONG",{});var tWt=s(uTe);F_r=r(tWt,"mpnet"),tWt.forEach(t),T_r=r(_Qe," \u2014 "),EY=n(_Qe,"A",{href:!0});var aWt=s(EY);M_r=r(aWt,"MPNetForTokenClassification"),aWt.forEach(t),E_r=r(_Qe," (MPNet model)"),_Qe.forEach(t),C_r=i(Y),pF=n(Y,"LI",{});var vQe=s(pF);pTe=n(vQe,"STRONG",{});var nWt=s(pTe);w_r=r(nWt,"nezha"),nWt.forEach(t),A_r=r(vQe," \u2014 "),CY=n(vQe,"A",{href:!0});var sWt=s(CY);L_r=r(sWt,"NezhaForTokenClassification"),sWt.forEach(t),y_r=r(vQe," (Nezha model)"),vQe.forEach(t),x_r=i(Y),_F=n(Y,"LI",{});var bQe=s(_F);_Te=n(bQe,"STRONG",{});var lWt=s(_Te);$_r=r(lWt,"nystromformer"),lWt.forEach(t),k_r=r(bQe," \u2014 "),wY=n(bQe,"A",{href:!0});var iWt=s(wY);S_r=r(iWt,"NystromformerForTokenClassification"),iWt.forEach(t),R_r=r(bQe," (Nystr\xF6mformer model)"),bQe.forEach(t),P_r=i(Y),vF=n(Y,"LI",{});var FQe=s(vF);vTe=n(FQe,"STRONG",{});var dWt=s(vTe);B_r=r(dWt,"qdqbert"),dWt.forEach(t),I_r=r(FQe," \u2014 "),AY=n(FQe,"A",{href:!0});var cWt=s(AY);N_r=r(cWt,"QDQBertForTokenClassification"),cWt.forEach(t),q_r=r(FQe," (QDQBert model)"),FQe.forEach(t),j_r=i(Y),bF=n(Y,"LI",{});var TQe=s(bF);bTe=n(TQe,"STRONG",{});var fWt=s(bTe);D_r=r(fWt,"rembert"),fWt.forEach(t),G_r=r(TQe," \u2014 "),LY=n(TQe,"A",{href:!0});var mWt=s(LY);O_r=r(mWt,"RemBertForTokenClassification"),mWt.forEach(t),V_r=r(TQe," (RemBERT model)"),TQe.forEach(t),X_r=i(Y),FF=n(Y,"LI",{});var MQe=s(FF);FTe=n(MQe,"STRONG",{});var gWt=s(FTe);z_r=r(gWt,"roberta"),gWt.forEach(t),Q_r=r(MQe," \u2014 "),yY=n(MQe,"A",{href:!0});var hWt=s(yY);W_r=r(hWt,"RobertaForTokenClassification"),hWt.forEach(t),U_r=r(MQe," (RoBERTa model)"),MQe.forEach(t),H_r=i(Y),TF=n(Y,"LI",{});var EQe=s(TF);TTe=n(EQe,"STRONG",{});var uWt=s(TTe);J_r=r(uWt,"roformer"),uWt.forEach(t),Y_r=r(EQe," \u2014 "),xY=n(EQe,"A",{href:!0});var pWt=s(xY);Z_r=r(pWt,"RoFormerForTokenClassification"),pWt.forEach(t),K_r=r(EQe," (RoFormer model)"),EQe.forEach(t),e2r=i(Y),MF=n(Y,"LI",{});var CQe=s(MF);MTe=n(CQe,"STRONG",{});var _Wt=s(MTe);o2r=r(_Wt,"squeezebert"),_Wt.forEach(t),r2r=r(CQe," \u2014 "),$Y=n(CQe,"A",{href:!0});var vWt=s($Y);t2r=r(vWt,"SqueezeBertForTokenClassification"),vWt.forEach(t),a2r=r(CQe," (SqueezeBERT model)"),CQe.forEach(t),n2r=i(Y),EF=n(Y,"LI",{});var wQe=s(EF);ETe=n(wQe,"STRONG",{});var bWt=s(ETe);s2r=r(bWt,"xlm"),bWt.forEach(t),l2r=r(wQe," \u2014 "),kY=n(wQe,"A",{href:!0});var FWt=s(kY);i2r=r(FWt,"XLMForTokenClassification"),FWt.forEach(t),d2r=r(wQe," (XLM model)"),wQe.forEach(t),c2r=i(Y),CF=n(Y,"LI",{});var AQe=s(CF);CTe=n(AQe,"STRONG",{});var TWt=s(CTe);f2r=r(TWt,"xlm-roberta"),TWt.forEach(t),m2r=r(AQe," \u2014 "),SY=n(AQe,"A",{href:!0});var MWt=s(SY);g2r=r(MWt,"XLMRobertaForTokenClassification"),MWt.forEach(t),h2r=r(AQe," (XLM-RoBERTa model)"),AQe.forEach(t),u2r=i(Y),wF=n(Y,"LI",{});var LQe=s(wF);wTe=n(LQe,"STRONG",{});var EWt=s(wTe);p2r=r(EWt,"xlm-roberta-xl"),EWt.forEach(t),_2r=r(LQe," \u2014 "),RY=n(LQe,"A",{href:!0});var CWt=s(RY);v2r=r(CWt,"XLMRobertaXLForTokenClassification"),CWt.forEach(t),b2r=r(LQe," (XLM-RoBERTa-XL model)"),LQe.forEach(t),F2r=i(Y),AF=n(Y,"LI",{});var yQe=s(AF);ATe=n(yQe,"STRONG",{});var wWt=s(ATe);T2r=r(wWt,"xlnet"),wWt.forEach(t),M2r=r(yQe," \u2014 "),PY=n(yQe,"A",{href:!0});var AWt=s(PY);E2r=r(AWt,"XLNetForTokenClassification"),AWt.forEach(t),C2r=r(yQe," (XLNet model)"),yQe.forEach(t),w2r=i(Y),LF=n(Y,"LI",{});var xQe=s(LF);LTe=n(xQe,"STRONG",{});var LWt=s(LTe);A2r=r(LWt,"yoso"),LWt.forEach(t),L2r=r(xQe," \u2014 "),BY=n(xQe,"A",{href:!0});var yWt=s(BY);y2r=r(yWt,"YosoForTokenClassification"),yWt.forEach(t),x2r=r(xQe," (YOSO model)"),xQe.forEach(t),Y.forEach(t),$2r=i(ka),yF=n(ka,"P",{});var $Qe=s(yF);k2r=r($Qe,"The model is set in evaluation mode by default using "),yTe=n($Qe,"CODE",{});var xWt=s(yTe);S2r=r(xWt,"model.eval()"),xWt.forEach(t),R2r=r($Qe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xTe=n($Qe,"CODE",{});var $Wt=s(xTe);P2r=r($Wt,"model.train()"),$Wt.forEach(t),$Qe.forEach(t),B2r=i(ka),T(xF.$$.fragment,ka),ka.forEach(t),jl.forEach(t),Woo=i(f),Jd=n(f,"H2",{class:!0});var dao=s(Jd);$F=n(dao,"A",{id:!0,class:!0,href:!0});var kWt=s($F);$Te=n(kWt,"SPAN",{});var SWt=s($Te);T(z$.$$.fragment,SWt),SWt.forEach(t),kWt.forEach(t),I2r=i(dao),kTe=n(dao,"SPAN",{});var RWt=s(kTe);N2r=r(RWt,"AutoModelForQuestionAnswering"),RWt.forEach(t),dao.forEach(t),Uoo=i(f),Xo=n(f,"DIV",{class:!0});var Dl=s(Xo);T(Q$.$$.fragment,Dl),q2r=i(Dl),Yd=n(Dl,"P",{});var dde=s(Yd);j2r=r(dde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),IY=n(dde,"A",{href:!0});var PWt=s(IY);D2r=r(PWt,"from_pretrained()"),PWt.forEach(t),G2r=r(dde," class method or the "),NY=n(dde,"A",{href:!0});var BWt=s(NY);O2r=r(BWt,"from_config()"),BWt.forEach(t),V2r=r(dde,` class
method.`),dde.forEach(t),X2r=i(Dl),W$=n(Dl,"P",{});var cao=s(W$);z2r=r(cao,"This class cannot be instantiated directly using "),STe=n(cao,"CODE",{});var IWt=s(STe);Q2r=r(IWt,"__init__()"),IWt.forEach(t),W2r=r(cao," (throws an error)."),cao.forEach(t),U2r=i(Dl),yt=n(Dl,"DIV",{class:!0});var qy=s(yt);T(U$.$$.fragment,qy),H2r=i(qy),RTe=n(qy,"P",{});var NWt=s(RTe);J2r=r(NWt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),NWt.forEach(t),Y2r=i(qy),Zd=n(qy,"P",{});var cde=s(Zd);Z2r=r(cde,`Note:
Loading a model from its configuration file does `),PTe=n(cde,"STRONG",{});var qWt=s(PTe);K2r=r(qWt,"not"),qWt.forEach(t),evr=r(cde,` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=n(cde,"A",{href:!0});var jWt=s(qY);ovr=r(jWt,"from_pretrained()"),jWt.forEach(t),rvr=r(cde," to load the model weights."),cde.forEach(t),tvr=i(qy),T(kF.$$.fragment,qy),qy.forEach(t),avr=i(Dl),io=n(Dl,"DIV",{class:!0});var Sa=s(io);T(H$.$$.fragment,Sa),nvr=i(Sa),BTe=n(Sa,"P",{});var DWt=s(BTe);svr=r(DWt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),DWt.forEach(t),lvr=i(Sa),cn=n(Sa,"P",{});var jy=s(cn);ivr=r(jy,"The model class to instantiate is selected based on the "),ITe=n(jy,"CODE",{});var GWt=s(ITe);dvr=r(GWt,"model_type"),GWt.forEach(t),cvr=r(jy,` property of the config object (either
passed as an argument or loaded from `),NTe=n(jy,"CODE",{});var OWt=s(NTe);fvr=r(OWt,"pretrained_model_name_or_path"),OWt.forEach(t),mvr=r(jy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qTe=n(jy,"CODE",{});var VWt=s(qTe);gvr=r(VWt,"pretrained_model_name_or_path"),VWt.forEach(t),hvr=r(jy,":"),jy.forEach(t),uvr=i(Sa),O=n(Sa,"UL",{});var X=s(O);SF=n(X,"LI",{});var kQe=s(SF);jTe=n(kQe,"STRONG",{});var XWt=s(jTe);pvr=r(XWt,"albert"),XWt.forEach(t),_vr=r(kQe," \u2014 "),jY=n(kQe,"A",{href:!0});var zWt=s(jY);vvr=r(zWt,"AlbertForQuestionAnswering"),zWt.forEach(t),bvr=r(kQe," (ALBERT model)"),kQe.forEach(t),Fvr=i(X),RF=n(X,"LI",{});var SQe=s(RF);DTe=n(SQe,"STRONG",{});var QWt=s(DTe);Tvr=r(QWt,"bart"),QWt.forEach(t),Mvr=r(SQe," \u2014 "),DY=n(SQe,"A",{href:!0});var WWt=s(DY);Evr=r(WWt,"BartForQuestionAnswering"),WWt.forEach(t),Cvr=r(SQe," (BART model)"),SQe.forEach(t),wvr=i(X),PF=n(X,"LI",{});var RQe=s(PF);GTe=n(RQe,"STRONG",{});var UWt=s(GTe);Avr=r(UWt,"bert"),UWt.forEach(t),Lvr=r(RQe," \u2014 "),GY=n(RQe,"A",{href:!0});var HWt=s(GY);yvr=r(HWt,"BertForQuestionAnswering"),HWt.forEach(t),xvr=r(RQe," (BERT model)"),RQe.forEach(t),$vr=i(X),BF=n(X,"LI",{});var PQe=s(BF);OTe=n(PQe,"STRONG",{});var JWt=s(OTe);kvr=r(JWt,"big_bird"),JWt.forEach(t),Svr=r(PQe," \u2014 "),OY=n(PQe,"A",{href:!0});var YWt=s(OY);Rvr=r(YWt,"BigBirdForQuestionAnswering"),YWt.forEach(t),Pvr=r(PQe," (BigBird model)"),PQe.forEach(t),Bvr=i(X),IF=n(X,"LI",{});var BQe=s(IF);VTe=n(BQe,"STRONG",{});var ZWt=s(VTe);Ivr=r(ZWt,"bigbird_pegasus"),ZWt.forEach(t),Nvr=r(BQe," \u2014 "),VY=n(BQe,"A",{href:!0});var KWt=s(VY);qvr=r(KWt,"BigBirdPegasusForQuestionAnswering"),KWt.forEach(t),jvr=r(BQe," (BigBird-Pegasus model)"),BQe.forEach(t),Dvr=i(X),NF=n(X,"LI",{});var IQe=s(NF);XTe=n(IQe,"STRONG",{});var eUt=s(XTe);Gvr=r(eUt,"bloom"),eUt.forEach(t),Ovr=r(IQe," \u2014 "),XY=n(IQe,"A",{href:!0});var oUt=s(XY);Vvr=r(oUt,"BloomForQuestionAnswering"),oUt.forEach(t),Xvr=r(IQe," (BLOOM model)"),IQe.forEach(t),zvr=i(X),qF=n(X,"LI",{});var NQe=s(qF);zTe=n(NQe,"STRONG",{});var rUt=s(zTe);Qvr=r(rUt,"camembert"),rUt.forEach(t),Wvr=r(NQe," \u2014 "),zY=n(NQe,"A",{href:!0});var tUt=s(zY);Uvr=r(tUt,"CamembertForQuestionAnswering"),tUt.forEach(t),Hvr=r(NQe," (CamemBERT model)"),NQe.forEach(t),Jvr=i(X),jF=n(X,"LI",{});var qQe=s(jF);QTe=n(qQe,"STRONG",{});var aUt=s(QTe);Yvr=r(aUt,"canine"),aUt.forEach(t),Zvr=r(qQe," \u2014 "),QY=n(qQe,"A",{href:!0});var nUt=s(QY);Kvr=r(nUt,"CanineForQuestionAnswering"),nUt.forEach(t),e4r=r(qQe," (CANINE model)"),qQe.forEach(t),o4r=i(X),DF=n(X,"LI",{});var jQe=s(DF);WTe=n(jQe,"STRONG",{});var sUt=s(WTe);r4r=r(sUt,"convbert"),sUt.forEach(t),t4r=r(jQe," \u2014 "),WY=n(jQe,"A",{href:!0});var lUt=s(WY);a4r=r(lUt,"ConvBertForQuestionAnswering"),lUt.forEach(t),n4r=r(jQe," (ConvBERT model)"),jQe.forEach(t),s4r=i(X),GF=n(X,"LI",{});var DQe=s(GF);UTe=n(DQe,"STRONG",{});var iUt=s(UTe);l4r=r(iUt,"data2vec-text"),iUt.forEach(t),i4r=r(DQe," \u2014 "),UY=n(DQe,"A",{href:!0});var dUt=s(UY);d4r=r(dUt,"Data2VecTextForQuestionAnswering"),dUt.forEach(t),c4r=r(DQe," (Data2VecText model)"),DQe.forEach(t),f4r=i(X),OF=n(X,"LI",{});var GQe=s(OF);HTe=n(GQe,"STRONG",{});var cUt=s(HTe);m4r=r(cUt,"deberta"),cUt.forEach(t),g4r=r(GQe," \u2014 "),HY=n(GQe,"A",{href:!0});var fUt=s(HY);h4r=r(fUt,"DebertaForQuestionAnswering"),fUt.forEach(t),u4r=r(GQe," (DeBERTa model)"),GQe.forEach(t),p4r=i(X),VF=n(X,"LI",{});var OQe=s(VF);JTe=n(OQe,"STRONG",{});var mUt=s(JTe);_4r=r(mUt,"deberta-v2"),mUt.forEach(t),v4r=r(OQe," \u2014 "),JY=n(OQe,"A",{href:!0});var gUt=s(JY);b4r=r(gUt,"DebertaV2ForQuestionAnswering"),gUt.forEach(t),F4r=r(OQe," (DeBERTa-v2 model)"),OQe.forEach(t),T4r=i(X),XF=n(X,"LI",{});var VQe=s(XF);YTe=n(VQe,"STRONG",{});var hUt=s(YTe);M4r=r(hUt,"distilbert"),hUt.forEach(t),E4r=r(VQe," \u2014 "),YY=n(VQe,"A",{href:!0});var uUt=s(YY);C4r=r(uUt,"DistilBertForQuestionAnswering"),uUt.forEach(t),w4r=r(VQe," (DistilBERT model)"),VQe.forEach(t),A4r=i(X),zF=n(X,"LI",{});var XQe=s(zF);ZTe=n(XQe,"STRONG",{});var pUt=s(ZTe);L4r=r(pUt,"electra"),pUt.forEach(t),y4r=r(XQe," \u2014 "),ZY=n(XQe,"A",{href:!0});var _Ut=s(ZY);x4r=r(_Ut,"ElectraForQuestionAnswering"),_Ut.forEach(t),$4r=r(XQe," (ELECTRA model)"),XQe.forEach(t),k4r=i(X),QF=n(X,"LI",{});var zQe=s(QF);KTe=n(zQe,"STRONG",{});var vUt=s(KTe);S4r=r(vUt,"ernie"),vUt.forEach(t),R4r=r(zQe," \u2014 "),KY=n(zQe,"A",{href:!0});var bUt=s(KY);P4r=r(bUt,"ErnieForQuestionAnswering"),bUt.forEach(t),B4r=r(zQe," (ERNIE model)"),zQe.forEach(t),I4r=i(X),WF=n(X,"LI",{});var QQe=s(WF);eMe=n(QQe,"STRONG",{});var FUt=s(eMe);N4r=r(FUt,"flaubert"),FUt.forEach(t),q4r=r(QQe," \u2014 "),eZ=n(QQe,"A",{href:!0});var TUt=s(eZ);j4r=r(TUt,"FlaubertForQuestionAnsweringSimple"),TUt.forEach(t),D4r=r(QQe," (FlauBERT model)"),QQe.forEach(t),G4r=i(X),UF=n(X,"LI",{});var WQe=s(UF);oMe=n(WQe,"STRONG",{});var MUt=s(oMe);O4r=r(MUt,"fnet"),MUt.forEach(t),V4r=r(WQe," \u2014 "),oZ=n(WQe,"A",{href:!0});var EUt=s(oZ);X4r=r(EUt,"FNetForQuestionAnswering"),EUt.forEach(t),z4r=r(WQe," (FNet model)"),WQe.forEach(t),Q4r=i(X),HF=n(X,"LI",{});var UQe=s(HF);rMe=n(UQe,"STRONG",{});var CUt=s(rMe);W4r=r(CUt,"funnel"),CUt.forEach(t),U4r=r(UQe," \u2014 "),rZ=n(UQe,"A",{href:!0});var wUt=s(rZ);H4r=r(wUt,"FunnelForQuestionAnswering"),wUt.forEach(t),J4r=r(UQe," (Funnel Transformer model)"),UQe.forEach(t),Y4r=i(X),JF=n(X,"LI",{});var HQe=s(JF);tMe=n(HQe,"STRONG",{});var AUt=s(tMe);Z4r=r(AUt,"gptj"),AUt.forEach(t),K4r=r(HQe," \u2014 "),tZ=n(HQe,"A",{href:!0});var LUt=s(tZ);e1r=r(LUt,"GPTJForQuestionAnswering"),LUt.forEach(t),o1r=r(HQe," (GPT-J model)"),HQe.forEach(t),r1r=i(X),YF=n(X,"LI",{});var JQe=s(YF);aMe=n(JQe,"STRONG",{});var yUt=s(aMe);t1r=r(yUt,"ibert"),yUt.forEach(t),a1r=r(JQe," \u2014 "),aZ=n(JQe,"A",{href:!0});var xUt=s(aZ);n1r=r(xUt,"IBertForQuestionAnswering"),xUt.forEach(t),s1r=r(JQe," (I-BERT model)"),JQe.forEach(t),l1r=i(X),ZF=n(X,"LI",{});var YQe=s(ZF);nMe=n(YQe,"STRONG",{});var $Ut=s(nMe);i1r=r($Ut,"layoutlmv2"),$Ut.forEach(t),d1r=r(YQe," \u2014 "),nZ=n(YQe,"A",{href:!0});var kUt=s(nZ);c1r=r(kUt,"LayoutLMv2ForQuestionAnswering"),kUt.forEach(t),f1r=r(YQe," (LayoutLMv2 model)"),YQe.forEach(t),m1r=i(X),KF=n(X,"LI",{});var ZQe=s(KF);sMe=n(ZQe,"STRONG",{});var SUt=s(sMe);g1r=r(SUt,"layoutlmv3"),SUt.forEach(t),h1r=r(ZQe," \u2014 "),sZ=n(ZQe,"A",{href:!0});var RUt=s(sZ);u1r=r(RUt,"LayoutLMv3ForQuestionAnswering"),RUt.forEach(t),p1r=r(ZQe," (LayoutLMv3 model)"),ZQe.forEach(t),_1r=i(X),eT=n(X,"LI",{});var KQe=s(eT);lMe=n(KQe,"STRONG",{});var PUt=s(lMe);v1r=r(PUt,"led"),PUt.forEach(t),b1r=r(KQe," \u2014 "),lZ=n(KQe,"A",{href:!0});var BUt=s(lZ);F1r=r(BUt,"LEDForQuestionAnswering"),BUt.forEach(t),T1r=r(KQe," (LED model)"),KQe.forEach(t),M1r=i(X),oT=n(X,"LI",{});var eWe=s(oT);iMe=n(eWe,"STRONG",{});var IUt=s(iMe);E1r=r(IUt,"longformer"),IUt.forEach(t),C1r=r(eWe," \u2014 "),iZ=n(eWe,"A",{href:!0});var NUt=s(iZ);w1r=r(NUt,"LongformerForQuestionAnswering"),NUt.forEach(t),A1r=r(eWe," (Longformer model)"),eWe.forEach(t),L1r=i(X),rT=n(X,"LI",{});var oWe=s(rT);dMe=n(oWe,"STRONG",{});var qUt=s(dMe);y1r=r(qUt,"luke"),qUt.forEach(t),x1r=r(oWe," \u2014 "),dZ=n(oWe,"A",{href:!0});var jUt=s(dZ);$1r=r(jUt,"LukeForQuestionAnswering"),jUt.forEach(t),k1r=r(oWe," (LUKE model)"),oWe.forEach(t),S1r=i(X),tT=n(X,"LI",{});var rWe=s(tT);cMe=n(rWe,"STRONG",{});var DUt=s(cMe);R1r=r(DUt,"lxmert"),DUt.forEach(t),P1r=r(rWe," \u2014 "),cZ=n(rWe,"A",{href:!0});var GUt=s(cZ);B1r=r(GUt,"LxmertForQuestionAnswering"),GUt.forEach(t),I1r=r(rWe," (LXMERT model)"),rWe.forEach(t),N1r=i(X),aT=n(X,"LI",{});var tWe=s(aT);fMe=n(tWe,"STRONG",{});var OUt=s(fMe);q1r=r(OUt,"markuplm"),OUt.forEach(t),j1r=r(tWe," \u2014 "),fZ=n(tWe,"A",{href:!0});var VUt=s(fZ);D1r=r(VUt,"MarkupLMForQuestionAnswering"),VUt.forEach(t),G1r=r(tWe," (MarkupLM model)"),tWe.forEach(t),O1r=i(X),nT=n(X,"LI",{});var aWe=s(nT);mMe=n(aWe,"STRONG",{});var XUt=s(mMe);V1r=r(XUt,"mbart"),XUt.forEach(t),X1r=r(aWe," \u2014 "),mZ=n(aWe,"A",{href:!0});var zUt=s(mZ);z1r=r(zUt,"MBartForQuestionAnswering"),zUt.forEach(t),Q1r=r(aWe," (mBART model)"),aWe.forEach(t),W1r=i(X),sT=n(X,"LI",{});var nWe=s(sT);gMe=n(nWe,"STRONG",{});var QUt=s(gMe);U1r=r(QUt,"megatron-bert"),QUt.forEach(t),H1r=r(nWe," \u2014 "),gZ=n(nWe,"A",{href:!0});var WUt=s(gZ);J1r=r(WUt,"MegatronBertForQuestionAnswering"),WUt.forEach(t),Y1r=r(nWe," (Megatron-BERT model)"),nWe.forEach(t),Z1r=i(X),lT=n(X,"LI",{});var sWe=s(lT);hMe=n(sWe,"STRONG",{});var UUt=s(hMe);K1r=r(UUt,"mobilebert"),UUt.forEach(t),ebr=r(sWe," \u2014 "),hZ=n(sWe,"A",{href:!0});var HUt=s(hZ);obr=r(HUt,"MobileBertForQuestionAnswering"),HUt.forEach(t),rbr=r(sWe," (MobileBERT model)"),sWe.forEach(t),tbr=i(X),iT=n(X,"LI",{});var lWe=s(iT);uMe=n(lWe,"STRONG",{});var JUt=s(uMe);abr=r(JUt,"mpnet"),JUt.forEach(t),nbr=r(lWe," \u2014 "),uZ=n(lWe,"A",{href:!0});var YUt=s(uZ);sbr=r(YUt,"MPNetForQuestionAnswering"),YUt.forEach(t),lbr=r(lWe," (MPNet model)"),lWe.forEach(t),ibr=i(X),dT=n(X,"LI",{});var iWe=s(dT);pMe=n(iWe,"STRONG",{});var ZUt=s(pMe);dbr=r(ZUt,"mvp"),ZUt.forEach(t),cbr=r(iWe," \u2014 "),pZ=n(iWe,"A",{href:!0});var KUt=s(pZ);fbr=r(KUt,"MvpForQuestionAnswering"),KUt.forEach(t),mbr=r(iWe," (MVP model)"),iWe.forEach(t),gbr=i(X),cT=n(X,"LI",{});var dWe=s(cT);_Me=n(dWe,"STRONG",{});var eHt=s(_Me);hbr=r(eHt,"nezha"),eHt.forEach(t),ubr=r(dWe," \u2014 "),_Z=n(dWe,"A",{href:!0});var oHt=s(_Z);pbr=r(oHt,"NezhaForQuestionAnswering"),oHt.forEach(t),_br=r(dWe," (Nezha model)"),dWe.forEach(t),vbr=i(X),fT=n(X,"LI",{});var cWe=s(fT);vMe=n(cWe,"STRONG",{});var rHt=s(vMe);bbr=r(rHt,"nystromformer"),rHt.forEach(t),Fbr=r(cWe," \u2014 "),vZ=n(cWe,"A",{href:!0});var tHt=s(vZ);Tbr=r(tHt,"NystromformerForQuestionAnswering"),tHt.forEach(t),Mbr=r(cWe," (Nystr\xF6mformer model)"),cWe.forEach(t),Ebr=i(X),mT=n(X,"LI",{});var fWe=s(mT);bMe=n(fWe,"STRONG",{});var aHt=s(bMe);Cbr=r(aHt,"opt"),aHt.forEach(t),wbr=r(fWe," \u2014 "),bZ=n(fWe,"A",{href:!0});var nHt=s(bZ);Abr=r(nHt,"OPTForQuestionAnswering"),nHt.forEach(t),Lbr=r(fWe," (OPT model)"),fWe.forEach(t),ybr=i(X),gT=n(X,"LI",{});var mWe=s(gT);FMe=n(mWe,"STRONG",{});var sHt=s(FMe);xbr=r(sHt,"qdqbert"),sHt.forEach(t),$br=r(mWe," \u2014 "),FZ=n(mWe,"A",{href:!0});var lHt=s(FZ);kbr=r(lHt,"QDQBertForQuestionAnswering"),lHt.forEach(t),Sbr=r(mWe," (QDQBert model)"),mWe.forEach(t),Rbr=i(X),hT=n(X,"LI",{});var gWe=s(hT);TMe=n(gWe,"STRONG",{});var iHt=s(TMe);Pbr=r(iHt,"reformer"),iHt.forEach(t),Bbr=r(gWe," \u2014 "),TZ=n(gWe,"A",{href:!0});var dHt=s(TZ);Ibr=r(dHt,"ReformerForQuestionAnswering"),dHt.forEach(t),Nbr=r(gWe," (Reformer model)"),gWe.forEach(t),qbr=i(X),uT=n(X,"LI",{});var hWe=s(uT);MMe=n(hWe,"STRONG",{});var cHt=s(MMe);jbr=r(cHt,"rembert"),cHt.forEach(t),Dbr=r(hWe," \u2014 "),MZ=n(hWe,"A",{href:!0});var fHt=s(MZ);Gbr=r(fHt,"RemBertForQuestionAnswering"),fHt.forEach(t),Obr=r(hWe," (RemBERT model)"),hWe.forEach(t),Vbr=i(X),pT=n(X,"LI",{});var uWe=s(pT);EMe=n(uWe,"STRONG",{});var mHt=s(EMe);Xbr=r(mHt,"roberta"),mHt.forEach(t),zbr=r(uWe," \u2014 "),EZ=n(uWe,"A",{href:!0});var gHt=s(EZ);Qbr=r(gHt,"RobertaForQuestionAnswering"),gHt.forEach(t),Wbr=r(uWe," (RoBERTa model)"),uWe.forEach(t),Ubr=i(X),_T=n(X,"LI",{});var pWe=s(_T);CMe=n(pWe,"STRONG",{});var hHt=s(CMe);Hbr=r(hHt,"roformer"),hHt.forEach(t),Jbr=r(pWe," \u2014 "),CZ=n(pWe,"A",{href:!0});var uHt=s(CZ);Ybr=r(uHt,"RoFormerForQuestionAnswering"),uHt.forEach(t),Zbr=r(pWe," (RoFormer model)"),pWe.forEach(t),Kbr=i(X),vT=n(X,"LI",{});var _We=s(vT);wMe=n(_We,"STRONG",{});var pHt=s(wMe);e3r=r(pHt,"splinter"),pHt.forEach(t),o3r=r(_We," \u2014 "),wZ=n(_We,"A",{href:!0});var _Ht=s(wZ);r3r=r(_Ht,"SplinterForQuestionAnswering"),_Ht.forEach(t),t3r=r(_We," (Splinter model)"),_We.forEach(t),a3r=i(X),bT=n(X,"LI",{});var vWe=s(bT);AMe=n(vWe,"STRONG",{});var vHt=s(AMe);n3r=r(vHt,"squeezebert"),vHt.forEach(t),s3r=r(vWe," \u2014 "),AZ=n(vWe,"A",{href:!0});var bHt=s(AZ);l3r=r(bHt,"SqueezeBertForQuestionAnswering"),bHt.forEach(t),i3r=r(vWe," (SqueezeBERT model)"),vWe.forEach(t),d3r=i(X),FT=n(X,"LI",{});var bWe=s(FT);LMe=n(bWe,"STRONG",{});var FHt=s(LMe);c3r=r(FHt,"xlm"),FHt.forEach(t),f3r=r(bWe," \u2014 "),LZ=n(bWe,"A",{href:!0});var THt=s(LZ);m3r=r(THt,"XLMForQuestionAnsweringSimple"),THt.forEach(t),g3r=r(bWe," (XLM model)"),bWe.forEach(t),h3r=i(X),TT=n(X,"LI",{});var FWe=s(TT);yMe=n(FWe,"STRONG",{});var MHt=s(yMe);u3r=r(MHt,"xlm-roberta"),MHt.forEach(t),p3r=r(FWe," \u2014 "),yZ=n(FWe,"A",{href:!0});var EHt=s(yZ);_3r=r(EHt,"XLMRobertaForQuestionAnswering"),EHt.forEach(t),v3r=r(FWe," (XLM-RoBERTa model)"),FWe.forEach(t),b3r=i(X),MT=n(X,"LI",{});var TWe=s(MT);xMe=n(TWe,"STRONG",{});var CHt=s(xMe);F3r=r(CHt,"xlm-roberta-xl"),CHt.forEach(t),T3r=r(TWe," \u2014 "),xZ=n(TWe,"A",{href:!0});var wHt=s(xZ);M3r=r(wHt,"XLMRobertaXLForQuestionAnswering"),wHt.forEach(t),E3r=r(TWe," (XLM-RoBERTa-XL model)"),TWe.forEach(t),C3r=i(X),ET=n(X,"LI",{});var MWe=s(ET);$Me=n(MWe,"STRONG",{});var AHt=s($Me);w3r=r(AHt,"xlnet"),AHt.forEach(t),A3r=r(MWe," \u2014 "),$Z=n(MWe,"A",{href:!0});var LHt=s($Z);L3r=r(LHt,"XLNetForQuestionAnsweringSimple"),LHt.forEach(t),y3r=r(MWe," (XLNet model)"),MWe.forEach(t),x3r=i(X),CT=n(X,"LI",{});var EWe=s(CT);kMe=n(EWe,"STRONG",{});var yHt=s(kMe);$3r=r(yHt,"yoso"),yHt.forEach(t),k3r=r(EWe," \u2014 "),kZ=n(EWe,"A",{href:!0});var xHt=s(kZ);S3r=r(xHt,"YosoForQuestionAnswering"),xHt.forEach(t),R3r=r(EWe," (YOSO model)"),EWe.forEach(t),X.forEach(t),P3r=i(Sa),wT=n(Sa,"P",{});var CWe=s(wT);B3r=r(CWe,"The model is set in evaluation mode by default using "),SMe=n(CWe,"CODE",{});var $Ht=s(SMe);I3r=r($Ht,"model.eval()"),$Ht.forEach(t),N3r=r(CWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),RMe=n(CWe,"CODE",{});var kHt=s(RMe);q3r=r(kHt,"model.train()"),kHt.forEach(t),CWe.forEach(t),j3r=i(Sa),T(AT.$$.fragment,Sa),Sa.forEach(t),Dl.forEach(t),Hoo=i(f),Kd=n(f,"H2",{class:!0});var fao=s(Kd);LT=n(fao,"A",{id:!0,class:!0,href:!0});var SHt=s(LT);PMe=n(SHt,"SPAN",{});var RHt=s(PMe);T(J$.$$.fragment,RHt),RHt.forEach(t),SHt.forEach(t),D3r=i(fao),BMe=n(fao,"SPAN",{});var PHt=s(BMe);G3r=r(PHt,"AutoModelForTableQuestionAnswering"),PHt.forEach(t),fao.forEach(t),Joo=i(f),zo=n(f,"DIV",{class:!0});var Gl=s(zo);T(Y$.$$.fragment,Gl),O3r=i(Gl),ec=n(Gl,"P",{});var fde=s(ec);V3r=r(fde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),SZ=n(fde,"A",{href:!0});var BHt=s(SZ);X3r=r(BHt,"from_pretrained()"),BHt.forEach(t),z3r=r(fde," class method or the "),RZ=n(fde,"A",{href:!0});var IHt=s(RZ);Q3r=r(IHt,"from_config()"),IHt.forEach(t),W3r=r(fde,` class
method.`),fde.forEach(t),U3r=i(Gl),Z$=n(Gl,"P",{});var mao=s(Z$);H3r=r(mao,"This class cannot be instantiated directly using "),IMe=n(mao,"CODE",{});var NHt=s(IMe);J3r=r(NHt,"__init__()"),NHt.forEach(t),Y3r=r(mao," (throws an error)."),mao.forEach(t),Z3r=i(Gl),xt=n(Gl,"DIV",{class:!0});var Dy=s(xt);T(K$.$$.fragment,Dy),K3r=i(Dy),NMe=n(Dy,"P",{});var qHt=s(NMe);e0r=r(qHt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),qHt.forEach(t),o0r=i(Dy),oc=n(Dy,"P",{});var mde=s(oc);r0r=r(mde,`Note:
Loading a model from its configuration file does `),qMe=n(mde,"STRONG",{});var jHt=s(qMe);t0r=r(jHt,"not"),jHt.forEach(t),a0r=r(mde,` load the model weights. It only affects the
model\u2019s configuration. Use `),PZ=n(mde,"A",{href:!0});var DHt=s(PZ);n0r=r(DHt,"from_pretrained()"),DHt.forEach(t),s0r=r(mde," to load the model weights."),mde.forEach(t),l0r=i(Dy),T(yT.$$.fragment,Dy),Dy.forEach(t),i0r=i(Gl),co=n(Gl,"DIV",{class:!0});var Ra=s(co);T(ek.$$.fragment,Ra),d0r=i(Ra),jMe=n(Ra,"P",{});var GHt=s(jMe);c0r=r(GHt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),GHt.forEach(t),f0r=i(Ra),fn=n(Ra,"P",{});var Gy=s(fn);m0r=r(Gy,"The model class to instantiate is selected based on the "),DMe=n(Gy,"CODE",{});var OHt=s(DMe);g0r=r(OHt,"model_type"),OHt.forEach(t),h0r=r(Gy,` property of the config object (either
passed as an argument or loaded from `),GMe=n(Gy,"CODE",{});var VHt=s(GMe);u0r=r(VHt,"pretrained_model_name_or_path"),VHt.forEach(t),p0r=r(Gy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OMe=n(Gy,"CODE",{});var XHt=s(OMe);_0r=r(XHt,"pretrained_model_name_or_path"),XHt.forEach(t),v0r=r(Gy,":"),Gy.forEach(t),b0r=i(Ra),VMe=n(Ra,"UL",{});var zHt=s(VMe);xT=n(zHt,"LI",{});var wWe=s(xT);XMe=n(wWe,"STRONG",{});var QHt=s(XMe);F0r=r(QHt,"tapas"),QHt.forEach(t),T0r=r(wWe," \u2014 "),BZ=n(wWe,"A",{href:!0});var WHt=s(BZ);M0r=r(WHt,"TapasForQuestionAnswering"),WHt.forEach(t),E0r=r(wWe," (TAPAS model)"),wWe.forEach(t),zHt.forEach(t),C0r=i(Ra),$T=n(Ra,"P",{});var AWe=s($T);w0r=r(AWe,"The model is set in evaluation mode by default using "),zMe=n(AWe,"CODE",{});var UHt=s(zMe);A0r=r(UHt,"model.eval()"),UHt.forEach(t),L0r=r(AWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),QMe=n(AWe,"CODE",{});var HHt=s(QMe);y0r=r(HHt,"model.train()"),HHt.forEach(t),AWe.forEach(t),x0r=i(Ra),T(kT.$$.fragment,Ra),Ra.forEach(t),Gl.forEach(t),Yoo=i(f),rc=n(f,"H2",{class:!0});var gao=s(rc);ST=n(gao,"A",{id:!0,class:!0,href:!0});var JHt=s(ST);WMe=n(JHt,"SPAN",{});var YHt=s(WMe);T(ok.$$.fragment,YHt),YHt.forEach(t),JHt.forEach(t),$0r=i(gao),UMe=n(gao,"SPAN",{});var ZHt=s(UMe);k0r=r(ZHt,"AutoModelForDocumentQuestionAnswering"),ZHt.forEach(t),gao.forEach(t),Zoo=i(f),Qo=n(f,"DIV",{class:!0});var Ol=s(Qo);T(rk.$$.fragment,Ol),S0r=i(Ol),tc=n(Ol,"P",{});var gde=s(tc);R0r=r(gde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),IZ=n(gde,"A",{href:!0});var KHt=s(IZ);P0r=r(KHt,"from_pretrained()"),KHt.forEach(t),B0r=r(gde," class method or the "),NZ=n(gde,"A",{href:!0});var eJt=s(NZ);I0r=r(eJt,"from_config()"),eJt.forEach(t),N0r=r(gde,` class
method.`),gde.forEach(t),q0r=i(Ol),tk=n(Ol,"P",{});var hao=s(tk);j0r=r(hao,"This class cannot be instantiated directly using "),HMe=n(hao,"CODE",{});var oJt=s(HMe);D0r=r(oJt,"__init__()"),oJt.forEach(t),G0r=r(hao," (throws an error)."),hao.forEach(t),O0r=i(Ol),$t=n(Ol,"DIV",{class:!0});var Oy=s($t);T(ak.$$.fragment,Oy),V0r=i(Oy),JMe=n(Oy,"P",{});var rJt=s(JMe);X0r=r(rJt,"Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),rJt.forEach(t),z0r=i(Oy),ac=n(Oy,"P",{});var hde=s(ac);Q0r=r(hde,`Note:
Loading a model from its configuration file does `),YMe=n(hde,"STRONG",{});var tJt=s(YMe);W0r=r(tJt,"not"),tJt.forEach(t),U0r=r(hde,` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=n(hde,"A",{href:!0});var aJt=s(qZ);H0r=r(aJt,"from_pretrained()"),aJt.forEach(t),J0r=r(hde," to load the model weights."),hde.forEach(t),Y0r=i(Oy),T(RT.$$.fragment,Oy),Oy.forEach(t),Z0r=i(Ol),fo=n(Ol,"DIV",{class:!0});var Pa=s(fo);T(nk.$$.fragment,Pa),K0r=i(Pa),ZMe=n(Pa,"P",{});var nJt=s(ZMe);eFr=r(nJt,"Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),nJt.forEach(t),oFr=i(Pa),mn=n(Pa,"P",{});var Vy=s(mn);rFr=r(Vy,"The model class to instantiate is selected based on the "),KMe=n(Vy,"CODE",{});var sJt=s(KMe);tFr=r(sJt,"model_type"),sJt.forEach(t),aFr=r(Vy,` property of the config object (either
passed as an argument or loaded from `),eEe=n(Vy,"CODE",{});var lJt=s(eEe);nFr=r(lJt,"pretrained_model_name_or_path"),lJt.forEach(t),sFr=r(Vy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oEe=n(Vy,"CODE",{});var iJt=s(oEe);lFr=r(iJt,"pretrained_model_name_or_path"),iJt.forEach(t),iFr=r(Vy,":"),Vy.forEach(t),dFr=i(Pa),nc=n(Pa,"UL",{});var ude=s(nc);PT=n(ude,"LI",{});var LWe=s(PT);rEe=n(LWe,"STRONG",{});var dJt=s(rEe);cFr=r(dJt,"layoutlm"),dJt.forEach(t),fFr=r(LWe," \u2014 "),jZ=n(LWe,"A",{href:!0});var cJt=s(jZ);mFr=r(cJt,"LayoutLMForQuestionAnswering"),cJt.forEach(t),gFr=r(LWe," (LayoutLM model)"),LWe.forEach(t),hFr=i(ude),BT=n(ude,"LI",{});var yWe=s(BT);tEe=n(yWe,"STRONG",{});var fJt=s(tEe);uFr=r(fJt,"layoutlmv2"),fJt.forEach(t),pFr=r(yWe," \u2014 "),DZ=n(yWe,"A",{href:!0});var mJt=s(DZ);_Fr=r(mJt,"LayoutLMv2ForQuestionAnswering"),mJt.forEach(t),vFr=r(yWe," (LayoutLMv2 model)"),yWe.forEach(t),bFr=i(ude),IT=n(ude,"LI",{});var xWe=s(IT);aEe=n(xWe,"STRONG",{});var gJt=s(aEe);FFr=r(gJt,"layoutlmv3"),gJt.forEach(t),TFr=r(xWe," \u2014 "),GZ=n(xWe,"A",{href:!0});var hJt=s(GZ);MFr=r(hJt,"LayoutLMv3ForQuestionAnswering"),hJt.forEach(t),EFr=r(xWe," (LayoutLMv3 model)"),xWe.forEach(t),ude.forEach(t),CFr=i(Pa),NT=n(Pa,"P",{});var $We=s(NT);wFr=r($We,"The model is set in evaluation mode by default using "),nEe=n($We,"CODE",{});var uJt=s(nEe);AFr=r(uJt,"model.eval()"),uJt.forEach(t),LFr=r($We,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sEe=n($We,"CODE",{});var pJt=s(sEe);yFr=r(pJt,"model.train()"),pJt.forEach(t),$We.forEach(t),xFr=i(Pa),T(qT.$$.fragment,Pa),Pa.forEach(t),Ol.forEach(t),Koo=i(f),sc=n(f,"H2",{class:!0});var uao=s(sc);jT=n(uao,"A",{id:!0,class:!0,href:!0});var _Jt=s(jT);lEe=n(_Jt,"SPAN",{});var vJt=s(lEe);T(sk.$$.fragment,vJt),vJt.forEach(t),_Jt.forEach(t),$Fr=i(uao),iEe=n(uao,"SPAN",{});var bJt=s(iEe);kFr=r(bJt,"AutoModelForImageClassification"),bJt.forEach(t),uao.forEach(t),ero=i(f),Wo=n(f,"DIV",{class:!0});var Vl=s(Wo);T(lk.$$.fragment,Vl),SFr=i(Vl),lc=n(Vl,"P",{});var pde=s(lc);RFr=r(pde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),OZ=n(pde,"A",{href:!0});var FJt=s(OZ);PFr=r(FJt,"from_pretrained()"),FJt.forEach(t),BFr=r(pde," class method or the "),VZ=n(pde,"A",{href:!0});var TJt=s(VZ);IFr=r(TJt,"from_config()"),TJt.forEach(t),NFr=r(pde,` class
method.`),pde.forEach(t),qFr=i(Vl),ik=n(Vl,"P",{});var pao=s(ik);jFr=r(pao,"This class cannot be instantiated directly using "),dEe=n(pao,"CODE",{});var MJt=s(dEe);DFr=r(MJt,"__init__()"),MJt.forEach(t),GFr=r(pao," (throws an error)."),pao.forEach(t),OFr=i(Vl),kt=n(Vl,"DIV",{class:!0});var Xy=s(kt);T(dk.$$.fragment,Xy),VFr=i(Xy),cEe=n(Xy,"P",{});var EJt=s(cEe);XFr=r(EJt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),EJt.forEach(t),zFr=i(Xy),ic=n(Xy,"P",{});var _de=s(ic);QFr=r(_de,`Note:
Loading a model from its configuration file does `),fEe=n(_de,"STRONG",{});var CJt=s(fEe);WFr=r(CJt,"not"),CJt.forEach(t),UFr=r(_de,` load the model weights. It only affects the
model\u2019s configuration. Use `),XZ=n(_de,"A",{href:!0});var wJt=s(XZ);HFr=r(wJt,"from_pretrained()"),wJt.forEach(t),JFr=r(_de," to load the model weights."),_de.forEach(t),YFr=i(Xy),T(DT.$$.fragment,Xy),Xy.forEach(t),ZFr=i(Vl),mo=n(Vl,"DIV",{class:!0});var Ba=s(mo);T(ck.$$.fragment,Ba),KFr=i(Ba),mEe=n(Ba,"P",{});var AJt=s(mEe);eTr=r(AJt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),AJt.forEach(t),oTr=i(Ba),gn=n(Ba,"P",{});var zy=s(gn);rTr=r(zy,"The model class to instantiate is selected based on the "),gEe=n(zy,"CODE",{});var LJt=s(gEe);tTr=r(LJt,"model_type"),LJt.forEach(t),aTr=r(zy,` property of the config object (either
passed as an argument or loaded from `),hEe=n(zy,"CODE",{});var yJt=s(hEe);nTr=r(yJt,"pretrained_model_name_or_path"),yJt.forEach(t),sTr=r(zy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uEe=n(zy,"CODE",{});var xJt=s(uEe);lTr=r(xJt,"pretrained_model_name_or_path"),xJt.forEach(t),iTr=r(zy,":"),zy.forEach(t),dTr=i(Ba),ve=n(Ba,"UL",{});var Fe=s(ve);GT=n(Fe,"LI",{});var kWe=s(GT);pEe=n(kWe,"STRONG",{});var $Jt=s(pEe);cTr=r($Jt,"beit"),$Jt.forEach(t),fTr=r(kWe," \u2014 "),zZ=n(kWe,"A",{href:!0});var kJt=s(zZ);mTr=r(kJt,"BeitForImageClassification"),kJt.forEach(t),gTr=r(kWe," (BEiT model)"),kWe.forEach(t),hTr=i(Fe),OT=n(Fe,"LI",{});var SWe=s(OT);_Ee=n(SWe,"STRONG",{});var SJt=s(_Ee);uTr=r(SJt,"convnext"),SJt.forEach(t),pTr=r(SWe," \u2014 "),QZ=n(SWe,"A",{href:!0});var RJt=s(QZ);_Tr=r(RJt,"ConvNextForImageClassification"),RJt.forEach(t),vTr=r(SWe," (ConvNeXT model)"),SWe.forEach(t),bTr=i(Fe),VT=n(Fe,"LI",{});var RWe=s(VT);vEe=n(RWe,"STRONG",{});var PJt=s(vEe);FTr=r(PJt,"cvt"),PJt.forEach(t),TTr=r(RWe," \u2014 "),WZ=n(RWe,"A",{href:!0});var BJt=s(WZ);MTr=r(BJt,"CvtForImageClassification"),BJt.forEach(t),ETr=r(RWe," (CvT model)"),RWe.forEach(t),CTr=i(Fe),XT=n(Fe,"LI",{});var PWe=s(XT);bEe=n(PWe,"STRONG",{});var IJt=s(bEe);wTr=r(IJt,"data2vec-vision"),IJt.forEach(t),ATr=r(PWe," \u2014 "),UZ=n(PWe,"A",{href:!0});var NJt=s(UZ);LTr=r(NJt,"Data2VecVisionForImageClassification"),NJt.forEach(t),yTr=r(PWe," (Data2VecVision model)"),PWe.forEach(t),xTr=i(Fe),El=n(Fe,"LI",{});var xI=s(El);FEe=n(xI,"STRONG",{});var qJt=s(FEe);$Tr=r(qJt,"deit"),qJt.forEach(t),kTr=r(xI," \u2014 "),HZ=n(xI,"A",{href:!0});var jJt=s(HZ);STr=r(jJt,"DeiTForImageClassification"),jJt.forEach(t),RTr=r(xI," or "),JZ=n(xI,"A",{href:!0});var DJt=s(JZ);PTr=r(DJt,"DeiTForImageClassificationWithTeacher"),DJt.forEach(t),BTr=r(xI," (DeiT model)"),xI.forEach(t),ITr=i(Fe),zT=n(Fe,"LI",{});var BWe=s(zT);TEe=n(BWe,"STRONG",{});var GJt=s(TEe);NTr=r(GJt,"imagegpt"),GJt.forEach(t),qTr=r(BWe," \u2014 "),YZ=n(BWe,"A",{href:!0});var OJt=s(YZ);jTr=r(OJt,"ImageGPTForImageClassification"),OJt.forEach(t),DTr=r(BWe," (ImageGPT model)"),BWe.forEach(t),GTr=i(Fe),Cl=n(Fe,"LI",{});var $I=s(Cl);MEe=n($I,"STRONG",{});var VJt=s(MEe);OTr=r(VJt,"levit"),VJt.forEach(t),VTr=r($I," \u2014 "),ZZ=n($I,"A",{href:!0});var XJt=s(ZZ);XTr=r(XJt,"LevitForImageClassification"),XJt.forEach(t),zTr=r($I," or "),KZ=n($I,"A",{href:!0});var zJt=s(KZ);QTr=r(zJt,"LevitForImageClassificationWithTeacher"),zJt.forEach(t),WTr=r($I," (LeViT model)"),$I.forEach(t),UTr=i(Fe),QT=n(Fe,"LI",{});var IWe=s(QT);EEe=n(IWe,"STRONG",{});var QJt=s(EEe);HTr=r(QJt,"mobilevit"),QJt.forEach(t),JTr=r(IWe," \u2014 "),eK=n(IWe,"A",{href:!0});var WJt=s(eK);YTr=r(WJt,"MobileViTForImageClassification"),WJt.forEach(t),ZTr=r(IWe," (MobileViT model)"),IWe.forEach(t),KTr=i(Fe),St=n(Fe,"LI",{});var Sm=s(St);CEe=n(Sm,"STRONG",{});var UJt=s(CEe);eMr=r(UJt,"perceiver"),UJt.forEach(t),oMr=r(Sm," \u2014 "),oK=n(Sm,"A",{href:!0});var HJt=s(oK);rMr=r(HJt,"PerceiverForImageClassificationLearned"),HJt.forEach(t),tMr=r(Sm," or "),rK=n(Sm,"A",{href:!0});var JJt=s(rK);aMr=r(JJt,"PerceiverForImageClassificationFourier"),JJt.forEach(t),nMr=r(Sm," or "),tK=n(Sm,"A",{href:!0});var YJt=s(tK);sMr=r(YJt,"PerceiverForImageClassificationConvProcessing"),YJt.forEach(t),lMr=r(Sm," (Perceiver model)"),Sm.forEach(t),iMr=i(Fe),WT=n(Fe,"LI",{});var NWe=s(WT);wEe=n(NWe,"STRONG",{});var ZJt=s(wEe);dMr=r(ZJt,"poolformer"),ZJt.forEach(t),cMr=r(NWe," \u2014 "),aK=n(NWe,"A",{href:!0});var KJt=s(aK);fMr=r(KJt,"PoolFormerForImageClassification"),KJt.forEach(t),mMr=r(NWe," (PoolFormer model)"),NWe.forEach(t),gMr=i(Fe),UT=n(Fe,"LI",{});var qWe=s(UT);AEe=n(qWe,"STRONG",{});var eYt=s(AEe);hMr=r(eYt,"regnet"),eYt.forEach(t),uMr=r(qWe," \u2014 "),nK=n(qWe,"A",{href:!0});var oYt=s(nK);pMr=r(oYt,"RegNetForImageClassification"),oYt.forEach(t),_Mr=r(qWe," (RegNet model)"),qWe.forEach(t),vMr=i(Fe),HT=n(Fe,"LI",{});var jWe=s(HT);LEe=n(jWe,"STRONG",{});var rYt=s(LEe);bMr=r(rYt,"resnet"),rYt.forEach(t),FMr=r(jWe," \u2014 "),sK=n(jWe,"A",{href:!0});var tYt=s(sK);TMr=r(tYt,"ResNetForImageClassification"),tYt.forEach(t),MMr=r(jWe," (ResNet model)"),jWe.forEach(t),EMr=i(Fe),JT=n(Fe,"LI",{});var DWe=s(JT);yEe=n(DWe,"STRONG",{});var aYt=s(yEe);CMr=r(aYt,"segformer"),aYt.forEach(t),wMr=r(DWe," \u2014 "),lK=n(DWe,"A",{href:!0});var nYt=s(lK);AMr=r(nYt,"SegformerForImageClassification"),nYt.forEach(t),LMr=r(DWe," (SegFormer model)"),DWe.forEach(t),yMr=i(Fe),YT=n(Fe,"LI",{});var GWe=s(YT);xEe=n(GWe,"STRONG",{});var sYt=s(xEe);xMr=r(sYt,"swin"),sYt.forEach(t),$Mr=r(GWe," \u2014 "),iK=n(GWe,"A",{href:!0});var lYt=s(iK);kMr=r(lYt,"SwinForImageClassification"),lYt.forEach(t),SMr=r(GWe," (Swin Transformer model)"),GWe.forEach(t),RMr=i(Fe),ZT=n(Fe,"LI",{});var OWe=s(ZT);$Ee=n(OWe,"STRONG",{});var iYt=s($Ee);PMr=r(iYt,"swinv2"),iYt.forEach(t),BMr=r(OWe," \u2014 "),dK=n(OWe,"A",{href:!0});var dYt=s(dK);IMr=r(dYt,"Swinv2ForImageClassification"),dYt.forEach(t),NMr=r(OWe," (Swin Transformer V2 model)"),OWe.forEach(t),qMr=i(Fe),KT=n(Fe,"LI",{});var VWe=s(KT);kEe=n(VWe,"STRONG",{});var cYt=s(kEe);jMr=r(cYt,"van"),cYt.forEach(t),DMr=r(VWe," \u2014 "),cK=n(VWe,"A",{href:!0});var fYt=s(cK);GMr=r(fYt,"VanForImageClassification"),fYt.forEach(t),OMr=r(VWe," (VAN model)"),VWe.forEach(t),VMr=i(Fe),eM=n(Fe,"LI",{});var XWe=s(eM);SEe=n(XWe,"STRONG",{});var mYt=s(SEe);XMr=r(mYt,"vit"),mYt.forEach(t),zMr=r(XWe," \u2014 "),fK=n(XWe,"A",{href:!0});var gYt=s(fK);QMr=r(gYt,"ViTForImageClassification"),gYt.forEach(t),WMr=r(XWe," (ViT model)"),XWe.forEach(t),UMr=i(Fe),oM=n(Fe,"LI",{});var zWe=s(oM);REe=n(zWe,"STRONG",{});var hYt=s(REe);HMr=r(hYt,"vit_msn"),hYt.forEach(t),JMr=r(zWe," \u2014 "),mK=n(zWe,"A",{href:!0});var uYt=s(mK);YMr=r(uYt,"ViTMSNForImageClassification"),uYt.forEach(t),ZMr=r(zWe," (ViTMSN model)"),zWe.forEach(t),Fe.forEach(t),KMr=i(Ba),rM=n(Ba,"P",{});var QWe=s(rM);eEr=r(QWe,"The model is set in evaluation mode by default using "),PEe=n(QWe,"CODE",{});var pYt=s(PEe);oEr=r(pYt,"model.eval()"),pYt.forEach(t),rEr=r(QWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),BEe=n(QWe,"CODE",{});var _Yt=s(BEe);tEr=r(_Yt,"model.train()"),_Yt.forEach(t),QWe.forEach(t),aEr=i(Ba),T(tM.$$.fragment,Ba),Ba.forEach(t),Vl.forEach(t),oro=i(f),dc=n(f,"H2",{class:!0});var _ao=s(dc);aM=n(_ao,"A",{id:!0,class:!0,href:!0});var vYt=s(aM);IEe=n(vYt,"SPAN",{});var bYt=s(IEe);T(fk.$$.fragment,bYt),bYt.forEach(t),vYt.forEach(t),nEr=i(_ao),NEe=n(_ao,"SPAN",{});var FYt=s(NEe);sEr=r(FYt,"AutoModelForVideoClassification"),FYt.forEach(t),_ao.forEach(t),rro=i(f),Uo=n(f,"DIV",{class:!0});var Xl=s(Uo);T(mk.$$.fragment,Xl),lEr=i(Xl),cc=n(Xl,"P",{});var vde=s(cc);iEr=r(vde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),gK=n(vde,"A",{href:!0});var TYt=s(gK);dEr=r(TYt,"from_pretrained()"),TYt.forEach(t),cEr=r(vde," class method or the "),hK=n(vde,"A",{href:!0});var MYt=s(hK);fEr=r(MYt,"from_config()"),MYt.forEach(t),mEr=r(vde,` class
method.`),vde.forEach(t),gEr=i(Xl),gk=n(Xl,"P",{});var vao=s(gk);hEr=r(vao,"This class cannot be instantiated directly using "),qEe=n(vao,"CODE",{});var EYt=s(qEe);uEr=r(EYt,"__init__()"),EYt.forEach(t),pEr=r(vao," (throws an error)."),vao.forEach(t),_Er=i(Xl),Rt=n(Xl,"DIV",{class:!0});var Qy=s(Rt);T(hk.$$.fragment,Qy),vEr=i(Qy),jEe=n(Qy,"P",{});var CYt=s(jEe);bEr=r(CYt,"Instantiates one of the model classes of the library (with a video classification head) from a configuration."),CYt.forEach(t),FEr=i(Qy),fc=n(Qy,"P",{});var bde=s(fc);TEr=r(bde,`Note:
Loading a model from its configuration file does `),DEe=n(bde,"STRONG",{});var wYt=s(DEe);MEr=r(wYt,"not"),wYt.forEach(t),EEr=r(bde,` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=n(bde,"A",{href:!0});var AYt=s(uK);CEr=r(AYt,"from_pretrained()"),AYt.forEach(t),wEr=r(bde," to load the model weights."),bde.forEach(t),AEr=i(Qy),T(nM.$$.fragment,Qy),Qy.forEach(t),LEr=i(Xl),go=n(Xl,"DIV",{class:!0});var Ia=s(go);T(uk.$$.fragment,Ia),yEr=i(Ia),GEe=n(Ia,"P",{});var LYt=s(GEe);xEr=r(LYt,"Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),LYt.forEach(t),$Er=i(Ia),hn=n(Ia,"P",{});var Wy=s(hn);kEr=r(Wy,"The model class to instantiate is selected based on the "),OEe=n(Wy,"CODE",{});var yYt=s(OEe);SEr=r(yYt,"model_type"),yYt.forEach(t),REr=r(Wy,` property of the config object (either
passed as an argument or loaded from `),VEe=n(Wy,"CODE",{});var xYt=s(VEe);PEr=r(xYt,"pretrained_model_name_or_path"),xYt.forEach(t),BEr=r(Wy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XEe=n(Wy,"CODE",{});var $Yt=s(XEe);IEr=r($Yt,"pretrained_model_name_or_path"),$Yt.forEach(t),NEr=r(Wy,":"),Wy.forEach(t),qEr=i(Ia),zEe=n(Ia,"UL",{});var kYt=s(zEe);sM=n(kYt,"LI",{});var WWe=s(sM);QEe=n(WWe,"STRONG",{});var SYt=s(QEe);jEr=r(SYt,"videomae"),SYt.forEach(t),DEr=r(WWe," \u2014 "),pK=n(WWe,"A",{href:!0});var RYt=s(pK);GEr=r(RYt,"VideoMAEForVideoClassification"),RYt.forEach(t),OEr=r(WWe," (VideoMAE model)"),WWe.forEach(t),kYt.forEach(t),VEr=i(Ia),lM=n(Ia,"P",{});var UWe=s(lM);XEr=r(UWe,"The model is set in evaluation mode by default using "),WEe=n(UWe,"CODE",{});var PYt=s(WEe);zEr=r(PYt,"model.eval()"),PYt.forEach(t),QEr=r(UWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),UEe=n(UWe,"CODE",{});var BYt=s(UEe);WEr=r(BYt,"model.train()"),BYt.forEach(t),UWe.forEach(t),UEr=i(Ia),T(iM.$$.fragment,Ia),Ia.forEach(t),Xl.forEach(t),tro=i(f),mc=n(f,"H2",{class:!0});var bao=s(mc);dM=n(bao,"A",{id:!0,class:!0,href:!0});var IYt=s(dM);HEe=n(IYt,"SPAN",{});var NYt=s(HEe);T(pk.$$.fragment,NYt),NYt.forEach(t),IYt.forEach(t),HEr=i(bao),JEe=n(bao,"SPAN",{});var qYt=s(JEe);JEr=r(qYt,"AutoModelForVision2Seq"),qYt.forEach(t),bao.forEach(t),aro=i(f),Ho=n(f,"DIV",{class:!0});var zl=s(Ho);T(_k.$$.fragment,zl),YEr=i(zl),gc=n(zl,"P",{});var Fde=s(gc);ZEr=r(Fde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_K=n(Fde,"A",{href:!0});var jYt=s(_K);KEr=r(jYt,"from_pretrained()"),jYt.forEach(t),eCr=r(Fde," class method or the "),vK=n(Fde,"A",{href:!0});var DYt=s(vK);oCr=r(DYt,"from_config()"),DYt.forEach(t),rCr=r(Fde,` class
method.`),Fde.forEach(t),tCr=i(zl),vk=n(zl,"P",{});var Fao=s(vk);aCr=r(Fao,"This class cannot be instantiated directly using "),YEe=n(Fao,"CODE",{});var GYt=s(YEe);nCr=r(GYt,"__init__()"),GYt.forEach(t),sCr=r(Fao," (throws an error)."),Fao.forEach(t),lCr=i(zl),Pt=n(zl,"DIV",{class:!0});var Uy=s(Pt);T(bk.$$.fragment,Uy),iCr=i(Uy),ZEe=n(Uy,"P",{});var OYt=s(ZEe);dCr=r(OYt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),OYt.forEach(t),cCr=i(Uy),hc=n(Uy,"P",{});var Tde=s(hc);fCr=r(Tde,`Note:
Loading a model from its configuration file does `),KEe=n(Tde,"STRONG",{});var VYt=s(KEe);mCr=r(VYt,"not"),VYt.forEach(t),gCr=r(Tde,` load the model weights. It only affects the
model\u2019s configuration. Use `),bK=n(Tde,"A",{href:!0});var XYt=s(bK);hCr=r(XYt,"from_pretrained()"),XYt.forEach(t),uCr=r(Tde," to load the model weights."),Tde.forEach(t),pCr=i(Uy),T(cM.$$.fragment,Uy),Uy.forEach(t),_Cr=i(zl),ho=n(zl,"DIV",{class:!0});var Na=s(ho);T(Fk.$$.fragment,Na),vCr=i(Na),eCe=n(Na,"P",{});var zYt=s(eCe);bCr=r(zYt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),zYt.forEach(t),FCr=i(Na),un=n(Na,"P",{});var Hy=s(un);TCr=r(Hy,"The model class to instantiate is selected based on the "),oCe=n(Hy,"CODE",{});var QYt=s(oCe);MCr=r(QYt,"model_type"),QYt.forEach(t),ECr=r(Hy,` property of the config object (either
passed as an argument or loaded from `),rCe=n(Hy,"CODE",{});var WYt=s(rCe);CCr=r(WYt,"pretrained_model_name_or_path"),WYt.forEach(t),wCr=r(Hy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tCe=n(Hy,"CODE",{});var UYt=s(tCe);ACr=r(UYt,"pretrained_model_name_or_path"),UYt.forEach(t),LCr=r(Hy,":"),Hy.forEach(t),yCr=i(Na),aCe=n(Na,"UL",{});var HYt=s(aCe);fM=n(HYt,"LI",{});var HWe=s(fM);nCe=n(HWe,"STRONG",{});var JYt=s(nCe);xCr=r(JYt,"vision-encoder-decoder"),JYt.forEach(t),$Cr=r(HWe," \u2014 "),FK=n(HWe,"A",{href:!0});var YYt=s(FK);kCr=r(YYt,"VisionEncoderDecoderModel"),YYt.forEach(t),SCr=r(HWe," (Vision Encoder decoder model)"),HWe.forEach(t),HYt.forEach(t),RCr=i(Na),mM=n(Na,"P",{});var JWe=s(mM);PCr=r(JWe,"The model is set in evaluation mode by default using "),sCe=n(JWe,"CODE",{});var ZYt=s(sCe);BCr=r(ZYt,"model.eval()"),ZYt.forEach(t),ICr=r(JWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lCe=n(JWe,"CODE",{});var KYt=s(lCe);NCr=r(KYt,"model.train()"),KYt.forEach(t),JWe.forEach(t),qCr=i(Na),T(gM.$$.fragment,Na),Na.forEach(t),zl.forEach(t),nro=i(f),uc=n(f,"H2",{class:!0});var Tao=s(uc);hM=n(Tao,"A",{id:!0,class:!0,href:!0});var eZt=s(hM);iCe=n(eZt,"SPAN",{});var oZt=s(iCe);T(Tk.$$.fragment,oZt),oZt.forEach(t),eZt.forEach(t),jCr=i(Tao),dCe=n(Tao,"SPAN",{});var rZt=s(dCe);DCr=r(rZt,"AutoModelForVisualQuestionAnswering"),rZt.forEach(t),Tao.forEach(t),sro=i(f),Jo=n(f,"DIV",{class:!0});var Ql=s(Jo);T(Mk.$$.fragment,Ql),GCr=i(Ql),pc=n(Ql,"P",{});var Mde=s(pc);OCr=r(Mde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),TK=n(Mde,"A",{href:!0});var tZt=s(TK);VCr=r(tZt,"from_pretrained()"),tZt.forEach(t),XCr=r(Mde," class method or the "),MK=n(Mde,"A",{href:!0});var aZt=s(MK);zCr=r(aZt,"from_config()"),aZt.forEach(t),QCr=r(Mde,` class
method.`),Mde.forEach(t),WCr=i(Ql),Ek=n(Ql,"P",{});var Mao=s(Ek);UCr=r(Mao,"This class cannot be instantiated directly using "),cCe=n(Mao,"CODE",{});var nZt=s(cCe);HCr=r(nZt,"__init__()"),nZt.forEach(t),JCr=r(Mao," (throws an error)."),Mao.forEach(t),YCr=i(Ql),Bt=n(Ql,"DIV",{class:!0});var Jy=s(Bt);T(Ck.$$.fragment,Jy),ZCr=i(Jy),fCe=n(Jy,"P",{});var sZt=s(fCe);KCr=r(sZt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),sZt.forEach(t),e5r=i(Jy),_c=n(Jy,"P",{});var Ede=s(_c);o5r=r(Ede,`Note:
Loading a model from its configuration file does `),mCe=n(Ede,"STRONG",{});var lZt=s(mCe);r5r=r(lZt,"not"),lZt.forEach(t),t5r=r(Ede,` load the model weights. It only affects the
model\u2019s configuration. Use `),EK=n(Ede,"A",{href:!0});var iZt=s(EK);a5r=r(iZt,"from_pretrained()"),iZt.forEach(t),n5r=r(Ede," to load the model weights."),Ede.forEach(t),s5r=i(Jy),T(uM.$$.fragment,Jy),Jy.forEach(t),l5r=i(Ql),uo=n(Ql,"DIV",{class:!0});var qa=s(uo);T(wk.$$.fragment,qa),i5r=i(qa),gCe=n(qa,"P",{});var dZt=s(gCe);d5r=r(dZt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),dZt.forEach(t),c5r=i(qa),pn=n(qa,"P",{});var Yy=s(pn);f5r=r(Yy,"The model class to instantiate is selected based on the "),hCe=n(Yy,"CODE",{});var cZt=s(hCe);m5r=r(cZt,"model_type"),cZt.forEach(t),g5r=r(Yy,` property of the config object (either
passed as an argument or loaded from `),uCe=n(Yy,"CODE",{});var fZt=s(uCe);h5r=r(fZt,"pretrained_model_name_or_path"),fZt.forEach(t),u5r=r(Yy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pCe=n(Yy,"CODE",{});var mZt=s(pCe);p5r=r(mZt,"pretrained_model_name_or_path"),mZt.forEach(t),_5r=r(Yy,":"),Yy.forEach(t),v5r=i(qa),_Ce=n(qa,"UL",{});var gZt=s(_Ce);pM=n(gZt,"LI",{});var YWe=s(pM);vCe=n(YWe,"STRONG",{});var hZt=s(vCe);b5r=r(hZt,"vilt"),hZt.forEach(t),F5r=r(YWe," \u2014 "),CK=n(YWe,"A",{href:!0});var uZt=s(CK);T5r=r(uZt,"ViltForQuestionAnswering"),uZt.forEach(t),M5r=r(YWe," (ViLT model)"),YWe.forEach(t),gZt.forEach(t),E5r=i(qa),_M=n(qa,"P",{});var ZWe=s(_M);C5r=r(ZWe,"The model is set in evaluation mode by default using "),bCe=n(ZWe,"CODE",{});var pZt=s(bCe);w5r=r(pZt,"model.eval()"),pZt.forEach(t),A5r=r(ZWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),FCe=n(ZWe,"CODE",{});var _Zt=s(FCe);L5r=r(_Zt,"model.train()"),_Zt.forEach(t),ZWe.forEach(t),y5r=i(qa),T(vM.$$.fragment,qa),qa.forEach(t),Ql.forEach(t),lro=i(f),vc=n(f,"H2",{class:!0});var Eao=s(vc);bM=n(Eao,"A",{id:!0,class:!0,href:!0});var vZt=s(bM);TCe=n(vZt,"SPAN",{});var bZt=s(TCe);T(Ak.$$.fragment,bZt),bZt.forEach(t),vZt.forEach(t),x5r=i(Eao),MCe=n(Eao,"SPAN",{});var FZt=s(MCe);$5r=r(FZt,"AutoModelForAudioClassification"),FZt.forEach(t),Eao.forEach(t),iro=i(f),Yo=n(f,"DIV",{class:!0});var Wl=s(Yo);T(Lk.$$.fragment,Wl),k5r=i(Wl),bc=n(Wl,"P",{});var Cde=s(bc);S5r=r(Cde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),wK=n(Cde,"A",{href:!0});var TZt=s(wK);R5r=r(TZt,"from_pretrained()"),TZt.forEach(t),P5r=r(Cde," class method or the "),AK=n(Cde,"A",{href:!0});var MZt=s(AK);B5r=r(MZt,"from_config()"),MZt.forEach(t),I5r=r(Cde,` class
method.`),Cde.forEach(t),N5r=i(Wl),yk=n(Wl,"P",{});var Cao=s(yk);q5r=r(Cao,"This class cannot be instantiated directly using "),ECe=n(Cao,"CODE",{});var EZt=s(ECe);j5r=r(EZt,"__init__()"),EZt.forEach(t),D5r=r(Cao," (throws an error)."),Cao.forEach(t),G5r=i(Wl),It=n(Wl,"DIV",{class:!0});var Zy=s(It);T(xk.$$.fragment,Zy),O5r=i(Zy),CCe=n(Zy,"P",{});var CZt=s(CCe);V5r=r(CZt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),CZt.forEach(t),X5r=i(Zy),Fc=n(Zy,"P",{});var wde=s(Fc);z5r=r(wde,`Note:
Loading a model from its configuration file does `),wCe=n(wde,"STRONG",{});var wZt=s(wCe);Q5r=r(wZt,"not"),wZt.forEach(t),W5r=r(wde,` load the model weights. It only affects the
model\u2019s configuration. Use `),LK=n(wde,"A",{href:!0});var AZt=s(LK);U5r=r(AZt,"from_pretrained()"),AZt.forEach(t),H5r=r(wde," to load the model weights."),wde.forEach(t),J5r=i(Zy),T(FM.$$.fragment,Zy),Zy.forEach(t),Y5r=i(Wl),po=n(Wl,"DIV",{class:!0});var ja=s(po);T($k.$$.fragment,ja),Z5r=i(ja),ACe=n(ja,"P",{});var LZt=s(ACe);K5r=r(LZt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),LZt.forEach(t),ewr=i(ja),_n=n(ja,"P",{});var Ky=s(_n);owr=r(Ky,"The model class to instantiate is selected based on the "),LCe=n(Ky,"CODE",{});var yZt=s(LCe);rwr=r(yZt,"model_type"),yZt.forEach(t),twr=r(Ky,` property of the config object (either
passed as an argument or loaded from `),yCe=n(Ky,"CODE",{});var xZt=s(yCe);awr=r(xZt,"pretrained_model_name_or_path"),xZt.forEach(t),nwr=r(Ky,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xCe=n(Ky,"CODE",{});var $Zt=s(xCe);swr=r($Zt,"pretrained_model_name_or_path"),$Zt.forEach(t),lwr=r(Ky,":"),Ky.forEach(t),iwr=i(ja),Pe=n(ja,"UL",{});var Qe=s(Pe);TM=n(Qe,"LI",{});var KWe=s(TM);$Ce=n(KWe,"STRONG",{});var kZt=s($Ce);dwr=r(kZt,"data2vec-audio"),kZt.forEach(t),cwr=r(KWe," \u2014 "),yK=n(KWe,"A",{href:!0});var SZt=s(yK);fwr=r(SZt,"Data2VecAudioForSequenceClassification"),SZt.forEach(t),mwr=r(KWe," (Data2VecAudio model)"),KWe.forEach(t),gwr=i(Qe),MM=n(Qe,"LI",{});var eUe=s(MM);kCe=n(eUe,"STRONG",{});var RZt=s(kCe);hwr=r(RZt,"hubert"),RZt.forEach(t),uwr=r(eUe," \u2014 "),xK=n(eUe,"A",{href:!0});var PZt=s(xK);pwr=r(PZt,"HubertForSequenceClassification"),PZt.forEach(t),_wr=r(eUe," (Hubert model)"),eUe.forEach(t),vwr=i(Qe),EM=n(Qe,"LI",{});var oUe=s(EM);SCe=n(oUe,"STRONG",{});var BZt=s(SCe);bwr=r(BZt,"sew"),BZt.forEach(t),Fwr=r(oUe," \u2014 "),$K=n(oUe,"A",{href:!0});var IZt=s($K);Twr=r(IZt,"SEWForSequenceClassification"),IZt.forEach(t),Mwr=r(oUe," (SEW model)"),oUe.forEach(t),Ewr=i(Qe),CM=n(Qe,"LI",{});var rUe=s(CM);RCe=n(rUe,"STRONG",{});var NZt=s(RCe);Cwr=r(NZt,"sew-d"),NZt.forEach(t),wwr=r(rUe," \u2014 "),kK=n(rUe,"A",{href:!0});var qZt=s(kK);Awr=r(qZt,"SEWDForSequenceClassification"),qZt.forEach(t),Lwr=r(rUe," (SEW-D model)"),rUe.forEach(t),ywr=i(Qe),wM=n(Qe,"LI",{});var tUe=s(wM);PCe=n(tUe,"STRONG",{});var jZt=s(PCe);xwr=r(jZt,"unispeech"),jZt.forEach(t),$wr=r(tUe," \u2014 "),SK=n(tUe,"A",{href:!0});var DZt=s(SK);kwr=r(DZt,"UniSpeechForSequenceClassification"),DZt.forEach(t),Swr=r(tUe," (UniSpeech model)"),tUe.forEach(t),Rwr=i(Qe),AM=n(Qe,"LI",{});var aUe=s(AM);BCe=n(aUe,"STRONG",{});var GZt=s(BCe);Pwr=r(GZt,"unispeech-sat"),GZt.forEach(t),Bwr=r(aUe," \u2014 "),RK=n(aUe,"A",{href:!0});var OZt=s(RK);Iwr=r(OZt,"UniSpeechSatForSequenceClassification"),OZt.forEach(t),Nwr=r(aUe," (UniSpeechSat model)"),aUe.forEach(t),qwr=i(Qe),LM=n(Qe,"LI",{});var nUe=s(LM);ICe=n(nUe,"STRONG",{});var VZt=s(ICe);jwr=r(VZt,"wav2vec2"),VZt.forEach(t),Dwr=r(nUe," \u2014 "),PK=n(nUe,"A",{href:!0});var XZt=s(PK);Gwr=r(XZt,"Wav2Vec2ForSequenceClassification"),XZt.forEach(t),Owr=r(nUe," (Wav2Vec2 model)"),nUe.forEach(t),Vwr=i(Qe),yM=n(Qe,"LI",{});var sUe=s(yM);NCe=n(sUe,"STRONG",{});var zZt=s(NCe);Xwr=r(zZt,"wav2vec2-conformer"),zZt.forEach(t),zwr=r(sUe," \u2014 "),BK=n(sUe,"A",{href:!0});var QZt=s(BK);Qwr=r(QZt,"Wav2Vec2ConformerForSequenceClassification"),QZt.forEach(t),Wwr=r(sUe," (Wav2Vec2-Conformer model)"),sUe.forEach(t),Uwr=i(Qe),xM=n(Qe,"LI",{});var lUe=s(xM);qCe=n(lUe,"STRONG",{});var WZt=s(qCe);Hwr=r(WZt,"wavlm"),WZt.forEach(t),Jwr=r(lUe," \u2014 "),IK=n(lUe,"A",{href:!0});var UZt=s(IK);Ywr=r(UZt,"WavLMForSequenceClassification"),UZt.forEach(t),Zwr=r(lUe," (WavLM model)"),lUe.forEach(t),Qe.forEach(t),Kwr=i(ja),$M=n(ja,"P",{});var iUe=s($M);eAr=r(iUe,"The model is set in evaluation mode by default using "),jCe=n(iUe,"CODE",{});var HZt=s(jCe);oAr=r(HZt,"model.eval()"),HZt.forEach(t),rAr=r(iUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),DCe=n(iUe,"CODE",{});var JZt=s(DCe);tAr=r(JZt,"model.train()"),JZt.forEach(t),iUe.forEach(t),aAr=i(ja),T(kM.$$.fragment,ja),ja.forEach(t),Wl.forEach(t),dro=i(f),Tc=n(f,"H2",{class:!0});var wao=s(Tc);SM=n(wao,"A",{id:!0,class:!0,href:!0});var YZt=s(SM);GCe=n(YZt,"SPAN",{});var ZZt=s(GCe);T(kk.$$.fragment,ZZt),ZZt.forEach(t),YZt.forEach(t),nAr=i(wao),OCe=n(wao,"SPAN",{});var KZt=s(OCe);sAr=r(KZt,"AutoModelForAudioFrameClassification"),KZt.forEach(t),wao.forEach(t),cro=i(f),Zo=n(f,"DIV",{class:!0});var Ul=s(Zo);T(Sk.$$.fragment,Ul),lAr=i(Ul),Mc=n(Ul,"P",{});var Ade=s(Mc);iAr=r(Ade,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),NK=n(Ade,"A",{href:!0});var eKt=s(NK);dAr=r(eKt,"from_pretrained()"),eKt.forEach(t),cAr=r(Ade," class method or the "),qK=n(Ade,"A",{href:!0});var oKt=s(qK);fAr=r(oKt,"from_config()"),oKt.forEach(t),mAr=r(Ade,` class
method.`),Ade.forEach(t),gAr=i(Ul),Rk=n(Ul,"P",{});var Aao=s(Rk);hAr=r(Aao,"This class cannot be instantiated directly using "),VCe=n(Aao,"CODE",{});var rKt=s(VCe);uAr=r(rKt,"__init__()"),rKt.forEach(t),pAr=r(Aao," (throws an error)."),Aao.forEach(t),_Ar=i(Ul),Nt=n(Ul,"DIV",{class:!0});var e9=s(Nt);T(Pk.$$.fragment,e9),vAr=i(e9),XCe=n(e9,"P",{});var tKt=s(XCe);bAr=r(tKt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),tKt.forEach(t),FAr=i(e9),Ec=n(e9,"P",{});var Lde=s(Ec);TAr=r(Lde,`Note:
Loading a model from its configuration file does `),zCe=n(Lde,"STRONG",{});var aKt=s(zCe);MAr=r(aKt,"not"),aKt.forEach(t),EAr=r(Lde,` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=n(Lde,"A",{href:!0});var nKt=s(jK);CAr=r(nKt,"from_pretrained()"),nKt.forEach(t),wAr=r(Lde," to load the model weights."),Lde.forEach(t),AAr=i(e9),T(RM.$$.fragment,e9),e9.forEach(t),LAr=i(Ul),_o=n(Ul,"DIV",{class:!0});var Da=s(_o);T(Bk.$$.fragment,Da),yAr=i(Da),QCe=n(Da,"P",{});var sKt=s(QCe);xAr=r(sKt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),sKt.forEach(t),$Ar=i(Da),vn=n(Da,"P",{});var o9=s(vn);kAr=r(o9,"The model class to instantiate is selected based on the "),WCe=n(o9,"CODE",{});var lKt=s(WCe);SAr=r(lKt,"model_type"),lKt.forEach(t),RAr=r(o9,` property of the config object (either
passed as an argument or loaded from `),UCe=n(o9,"CODE",{});var iKt=s(UCe);PAr=r(iKt,"pretrained_model_name_or_path"),iKt.forEach(t),BAr=r(o9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HCe=n(o9,"CODE",{});var dKt=s(HCe);IAr=r(dKt,"pretrained_model_name_or_path"),dKt.forEach(t),NAr=r(o9,":"),o9.forEach(t),qAr=i(Da),gt=n(Da,"UL",{});var Hl=s(gt);PM=n(Hl,"LI",{});var dUe=s(PM);JCe=n(dUe,"STRONG",{});var cKt=s(JCe);jAr=r(cKt,"data2vec-audio"),cKt.forEach(t),DAr=r(dUe," \u2014 "),DK=n(dUe,"A",{href:!0});var fKt=s(DK);GAr=r(fKt,"Data2VecAudioForAudioFrameClassification"),fKt.forEach(t),OAr=r(dUe," (Data2VecAudio model)"),dUe.forEach(t),VAr=i(Hl),BM=n(Hl,"LI",{});var cUe=s(BM);YCe=n(cUe,"STRONG",{});var mKt=s(YCe);XAr=r(mKt,"unispeech-sat"),mKt.forEach(t),zAr=r(cUe," \u2014 "),GK=n(cUe,"A",{href:!0});var gKt=s(GK);QAr=r(gKt,"UniSpeechSatForAudioFrameClassification"),gKt.forEach(t),WAr=r(cUe," (UniSpeechSat model)"),cUe.forEach(t),UAr=i(Hl),IM=n(Hl,"LI",{});var fUe=s(IM);ZCe=n(fUe,"STRONG",{});var hKt=s(ZCe);HAr=r(hKt,"wav2vec2"),hKt.forEach(t),JAr=r(fUe," \u2014 "),OK=n(fUe,"A",{href:!0});var uKt=s(OK);YAr=r(uKt,"Wav2Vec2ForAudioFrameClassification"),uKt.forEach(t),ZAr=r(fUe," (Wav2Vec2 model)"),fUe.forEach(t),KAr=i(Hl),NM=n(Hl,"LI",{});var mUe=s(NM);KCe=n(mUe,"STRONG",{});var pKt=s(KCe);e6r=r(pKt,"wav2vec2-conformer"),pKt.forEach(t),o6r=r(mUe," \u2014 "),VK=n(mUe,"A",{href:!0});var _Kt=s(VK);r6r=r(_Kt,"Wav2Vec2ConformerForAudioFrameClassification"),_Kt.forEach(t),t6r=r(mUe," (Wav2Vec2-Conformer model)"),mUe.forEach(t),a6r=i(Hl),qM=n(Hl,"LI",{});var gUe=s(qM);e5e=n(gUe,"STRONG",{});var vKt=s(e5e);n6r=r(vKt,"wavlm"),vKt.forEach(t),s6r=r(gUe," \u2014 "),XK=n(gUe,"A",{href:!0});var bKt=s(XK);l6r=r(bKt,"WavLMForAudioFrameClassification"),bKt.forEach(t),i6r=r(gUe," (WavLM model)"),gUe.forEach(t),Hl.forEach(t),d6r=i(Da),jM=n(Da,"P",{});var hUe=s(jM);c6r=r(hUe,"The model is set in evaluation mode by default using "),o5e=n(hUe,"CODE",{});var FKt=s(o5e);f6r=r(FKt,"model.eval()"),FKt.forEach(t),m6r=r(hUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r5e=n(hUe,"CODE",{});var TKt=s(r5e);g6r=r(TKt,"model.train()"),TKt.forEach(t),hUe.forEach(t),h6r=i(Da),T(DM.$$.fragment,Da),Da.forEach(t),Ul.forEach(t),fro=i(f),Cc=n(f,"H2",{class:!0});var Lao=s(Cc);GM=n(Lao,"A",{id:!0,class:!0,href:!0});var MKt=s(GM);t5e=n(MKt,"SPAN",{});var EKt=s(t5e);T(Ik.$$.fragment,EKt),EKt.forEach(t),MKt.forEach(t),u6r=i(Lao),a5e=n(Lao,"SPAN",{});var CKt=s(a5e);p6r=r(CKt,"AutoModelForCTC"),CKt.forEach(t),Lao.forEach(t),mro=i(f),Ko=n(f,"DIV",{class:!0});var Jl=s(Ko);T(Nk.$$.fragment,Jl),_6r=i(Jl),wc=n(Jl,"P",{});var yde=s(wc);v6r=r(yde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),zK=n(yde,"A",{href:!0});var wKt=s(zK);b6r=r(wKt,"from_pretrained()"),wKt.forEach(t),F6r=r(yde," class method or the "),QK=n(yde,"A",{href:!0});var AKt=s(QK);T6r=r(AKt,"from_config()"),AKt.forEach(t),M6r=r(yde,` class
method.`),yde.forEach(t),E6r=i(Jl),qk=n(Jl,"P",{});var yao=s(qk);C6r=r(yao,"This class cannot be instantiated directly using "),n5e=n(yao,"CODE",{});var LKt=s(n5e);w6r=r(LKt,"__init__()"),LKt.forEach(t),A6r=r(yao," (throws an error)."),yao.forEach(t),L6r=i(Jl),qt=n(Jl,"DIV",{class:!0});var r9=s(qt);T(jk.$$.fragment,r9),y6r=i(r9),s5e=n(r9,"P",{});var yKt=s(s5e);x6r=r(yKt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),yKt.forEach(t),$6r=i(r9),Ac=n(r9,"P",{});var xde=s(Ac);k6r=r(xde,`Note:
Loading a model from its configuration file does `),l5e=n(xde,"STRONG",{});var xKt=s(l5e);S6r=r(xKt,"not"),xKt.forEach(t),R6r=r(xde,` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=n(xde,"A",{href:!0});var $Kt=s(WK);P6r=r($Kt,"from_pretrained()"),$Kt.forEach(t),B6r=r(xde," to load the model weights."),xde.forEach(t),I6r=i(r9),T(OM.$$.fragment,r9),r9.forEach(t),N6r=i(Jl),vo=n(Jl,"DIV",{class:!0});var Ga=s(vo);T(Dk.$$.fragment,Ga),q6r=i(Ga),i5e=n(Ga,"P",{});var kKt=s(i5e);j6r=r(kKt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),kKt.forEach(t),D6r=i(Ga),bn=n(Ga,"P",{});var t9=s(bn);G6r=r(t9,"The model class to instantiate is selected based on the "),d5e=n(t9,"CODE",{});var SKt=s(d5e);O6r=r(SKt,"model_type"),SKt.forEach(t),V6r=r(t9,` property of the config object (either
passed as an argument or loaded from `),c5e=n(t9,"CODE",{});var RKt=s(c5e);X6r=r(RKt,"pretrained_model_name_or_path"),RKt.forEach(t),z6r=r(t9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f5e=n(t9,"CODE",{});var PKt=s(f5e);Q6r=r(PKt,"pretrained_model_name_or_path"),PKt.forEach(t),W6r=r(t9,":"),t9.forEach(t),U6r=i(Ga),Le=n(Ga,"UL",{});var Ie=s(Le);VM=n(Ie,"LI",{});var uUe=s(VM);m5e=n(uUe,"STRONG",{});var BKt=s(m5e);H6r=r(BKt,"data2vec-audio"),BKt.forEach(t),J6r=r(uUe," \u2014 "),UK=n(uUe,"A",{href:!0});var IKt=s(UK);Y6r=r(IKt,"Data2VecAudioForCTC"),IKt.forEach(t),Z6r=r(uUe," (Data2VecAudio model)"),uUe.forEach(t),K6r=i(Ie),XM=n(Ie,"LI",{});var pUe=s(XM);g5e=n(pUe,"STRONG",{});var NKt=s(g5e);e7r=r(NKt,"hubert"),NKt.forEach(t),o7r=r(pUe," \u2014 "),HK=n(pUe,"A",{href:!0});var qKt=s(HK);r7r=r(qKt,"HubertForCTC"),qKt.forEach(t),t7r=r(pUe," (Hubert model)"),pUe.forEach(t),a7r=i(Ie),zM=n(Ie,"LI",{});var _Ue=s(zM);h5e=n(_Ue,"STRONG",{});var jKt=s(h5e);n7r=r(jKt,"mctct"),jKt.forEach(t),s7r=r(_Ue," \u2014 "),JK=n(_Ue,"A",{href:!0});var DKt=s(JK);l7r=r(DKt,"MCTCTForCTC"),DKt.forEach(t),i7r=r(_Ue," (M-CTC-T model)"),_Ue.forEach(t),d7r=i(Ie),QM=n(Ie,"LI",{});var vUe=s(QM);u5e=n(vUe,"STRONG",{});var GKt=s(u5e);c7r=r(GKt,"sew"),GKt.forEach(t),f7r=r(vUe," \u2014 "),YK=n(vUe,"A",{href:!0});var OKt=s(YK);m7r=r(OKt,"SEWForCTC"),OKt.forEach(t),g7r=r(vUe," (SEW model)"),vUe.forEach(t),h7r=i(Ie),WM=n(Ie,"LI",{});var bUe=s(WM);p5e=n(bUe,"STRONG",{});var VKt=s(p5e);u7r=r(VKt,"sew-d"),VKt.forEach(t),p7r=r(bUe," \u2014 "),ZK=n(bUe,"A",{href:!0});var XKt=s(ZK);_7r=r(XKt,"SEWDForCTC"),XKt.forEach(t),v7r=r(bUe," (SEW-D model)"),bUe.forEach(t),b7r=i(Ie),UM=n(Ie,"LI",{});var FUe=s(UM);_5e=n(FUe,"STRONG",{});var zKt=s(_5e);F7r=r(zKt,"unispeech"),zKt.forEach(t),T7r=r(FUe," \u2014 "),KK=n(FUe,"A",{href:!0});var QKt=s(KK);M7r=r(QKt,"UniSpeechForCTC"),QKt.forEach(t),E7r=r(FUe," (UniSpeech model)"),FUe.forEach(t),C7r=i(Ie),HM=n(Ie,"LI",{});var TUe=s(HM);v5e=n(TUe,"STRONG",{});var WKt=s(v5e);w7r=r(WKt,"unispeech-sat"),WKt.forEach(t),A7r=r(TUe," \u2014 "),eee=n(TUe,"A",{href:!0});var UKt=s(eee);L7r=r(UKt,"UniSpeechSatForCTC"),UKt.forEach(t),y7r=r(TUe," (UniSpeechSat model)"),TUe.forEach(t),x7r=i(Ie),JM=n(Ie,"LI",{});var MUe=s(JM);b5e=n(MUe,"STRONG",{});var HKt=s(b5e);$7r=r(HKt,"wav2vec2"),HKt.forEach(t),k7r=r(MUe," \u2014 "),oee=n(MUe,"A",{href:!0});var JKt=s(oee);S7r=r(JKt,"Wav2Vec2ForCTC"),JKt.forEach(t),R7r=r(MUe," (Wav2Vec2 model)"),MUe.forEach(t),P7r=i(Ie),YM=n(Ie,"LI",{});var EUe=s(YM);F5e=n(EUe,"STRONG",{});var YKt=s(F5e);B7r=r(YKt,"wav2vec2-conformer"),YKt.forEach(t),I7r=r(EUe," \u2014 "),ree=n(EUe,"A",{href:!0});var ZKt=s(ree);N7r=r(ZKt,"Wav2Vec2ConformerForCTC"),ZKt.forEach(t),q7r=r(EUe," (Wav2Vec2-Conformer model)"),EUe.forEach(t),j7r=i(Ie),ZM=n(Ie,"LI",{});var CUe=s(ZM);T5e=n(CUe,"STRONG",{});var KKt=s(T5e);D7r=r(KKt,"wavlm"),KKt.forEach(t),G7r=r(CUe," \u2014 "),tee=n(CUe,"A",{href:!0});var eea=s(tee);O7r=r(eea,"WavLMForCTC"),eea.forEach(t),V7r=r(CUe," (WavLM model)"),CUe.forEach(t),Ie.forEach(t),X7r=i(Ga),KM=n(Ga,"P",{});var wUe=s(KM);z7r=r(wUe,"The model is set in evaluation mode by default using "),M5e=n(wUe,"CODE",{});var oea=s(M5e);Q7r=r(oea,"model.eval()"),oea.forEach(t),W7r=r(wUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E5e=n(wUe,"CODE",{});var rea=s(E5e);U7r=r(rea,"model.train()"),rea.forEach(t),wUe.forEach(t),H7r=i(Ga),T(eE.$$.fragment,Ga),Ga.forEach(t),Jl.forEach(t),gro=i(f),Lc=n(f,"H2",{class:!0});var xao=s(Lc);oE=n(xao,"A",{id:!0,class:!0,href:!0});var tea=s(oE);C5e=n(tea,"SPAN",{});var aea=s(C5e);T(Gk.$$.fragment,aea),aea.forEach(t),tea.forEach(t),J7r=i(xao),w5e=n(xao,"SPAN",{});var nea=s(w5e);Y7r=r(nea,"AutoModelForSpeechSeq2Seq"),nea.forEach(t),xao.forEach(t),hro=i(f),er=n(f,"DIV",{class:!0});var Yl=s(er);T(Ok.$$.fragment,Yl),Z7r=i(Yl),yc=n(Yl,"P",{});var $de=s(yc);K7r=r($de,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),aee=n($de,"A",{href:!0});var sea=s(aee);eLr=r(sea,"from_pretrained()"),sea.forEach(t),oLr=r($de," class method or the "),nee=n($de,"A",{href:!0});var lea=s(nee);rLr=r(lea,"from_config()"),lea.forEach(t),tLr=r($de,` class
method.`),$de.forEach(t),aLr=i(Yl),Vk=n(Yl,"P",{});var $ao=s(Vk);nLr=r($ao,"This class cannot be instantiated directly using "),A5e=n($ao,"CODE",{});var iea=s(A5e);sLr=r(iea,"__init__()"),iea.forEach(t),lLr=r($ao," (throws an error)."),$ao.forEach(t),iLr=i(Yl),jt=n(Yl,"DIV",{class:!0});var a9=s(jt);T(Xk.$$.fragment,a9),dLr=i(a9),L5e=n(a9,"P",{});var dea=s(L5e);cLr=r(dea,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),dea.forEach(t),fLr=i(a9),xc=n(a9,"P",{});var kde=s(xc);mLr=r(kde,`Note:
Loading a model from its configuration file does `),y5e=n(kde,"STRONG",{});var cea=s(y5e);gLr=r(cea,"not"),cea.forEach(t),hLr=r(kde,` load the model weights. It only affects the
model\u2019s configuration. Use `),see=n(kde,"A",{href:!0});var fea=s(see);uLr=r(fea,"from_pretrained()"),fea.forEach(t),pLr=r(kde," to load the model weights."),kde.forEach(t),_Lr=i(a9),T(rE.$$.fragment,a9),a9.forEach(t),vLr=i(Yl),bo=n(Yl,"DIV",{class:!0});var Oa=s(bo);T(zk.$$.fragment,Oa),bLr=i(Oa),x5e=n(Oa,"P",{});var mea=s(x5e);FLr=r(mea,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),mea.forEach(t),TLr=i(Oa),Fn=n(Oa,"P",{});var n9=s(Fn);MLr=r(n9,"The model class to instantiate is selected based on the "),$5e=n(n9,"CODE",{});var gea=s($5e);ELr=r(gea,"model_type"),gea.forEach(t),CLr=r(n9,` property of the config object (either
passed as an argument or loaded from `),k5e=n(n9,"CODE",{});var hea=s(k5e);wLr=r(hea,"pretrained_model_name_or_path"),hea.forEach(t),ALr=r(n9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S5e=n(n9,"CODE",{});var uea=s(S5e);LLr=r(uea,"pretrained_model_name_or_path"),uea.forEach(t),yLr=r(n9,":"),n9.forEach(t),xLr=i(Oa),$c=n(Oa,"UL",{});var Sde=s($c);tE=n(Sde,"LI",{});var AUe=s(tE);R5e=n(AUe,"STRONG",{});var pea=s(R5e);$Lr=r(pea,"speech-encoder-decoder"),pea.forEach(t),kLr=r(AUe," \u2014 "),lee=n(AUe,"A",{href:!0});var _ea=s(lee);SLr=r(_ea,"SpeechEncoderDecoderModel"),_ea.forEach(t),RLr=r(AUe," (Speech Encoder decoder model)"),AUe.forEach(t),PLr=i(Sde),aE=n(Sde,"LI",{});var LUe=s(aE);P5e=n(LUe,"STRONG",{});var vea=s(P5e);BLr=r(vea,"speech_to_text"),vea.forEach(t),ILr=r(LUe," \u2014 "),iee=n(LUe,"A",{href:!0});var bea=s(iee);NLr=r(bea,"Speech2TextForConditionalGeneration"),bea.forEach(t),qLr=r(LUe," (Speech2Text model)"),LUe.forEach(t),jLr=i(Sde),nE=n(Sde,"LI",{});var yUe=s(nE);B5e=n(yUe,"STRONG",{});var Fea=s(B5e);DLr=r(Fea,"whisper"),Fea.forEach(t),GLr=r(yUe," \u2014 "),dee=n(yUe,"A",{href:!0});var Tea=s(dee);OLr=r(Tea,"WhisperForConditionalGeneration"),Tea.forEach(t),VLr=r(yUe," (Whisper model)"),yUe.forEach(t),Sde.forEach(t),XLr=i(Oa),sE=n(Oa,"P",{});var xUe=s(sE);zLr=r(xUe,"The model is set in evaluation mode by default using "),I5e=n(xUe,"CODE",{});var Mea=s(I5e);QLr=r(Mea,"model.eval()"),Mea.forEach(t),WLr=r(xUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N5e=n(xUe,"CODE",{});var Eea=s(N5e);ULr=r(Eea,"model.train()"),Eea.forEach(t),xUe.forEach(t),HLr=i(Oa),T(lE.$$.fragment,Oa),Oa.forEach(t),Yl.forEach(t),uro=i(f),kc=n(f,"H2",{class:!0});var kao=s(kc);iE=n(kao,"A",{id:!0,class:!0,href:!0});var Cea=s(iE);q5e=n(Cea,"SPAN",{});var wea=s(q5e);T(Qk.$$.fragment,wea),wea.forEach(t),Cea.forEach(t),JLr=i(kao),j5e=n(kao,"SPAN",{});var Aea=s(j5e);YLr=r(Aea,"AutoModelForAudioXVector"),Aea.forEach(t),kao.forEach(t),pro=i(f),or=n(f,"DIV",{class:!0});var Zl=s(or);T(Wk.$$.fragment,Zl),ZLr=i(Zl),Sc=n(Zl,"P",{});var Rde=s(Sc);KLr=r(Rde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),cee=n(Rde,"A",{href:!0});var Lea=s(cee);e8r=r(Lea,"from_pretrained()"),Lea.forEach(t),o8r=r(Rde," class method or the "),fee=n(Rde,"A",{href:!0});var yea=s(fee);r8r=r(yea,"from_config()"),yea.forEach(t),t8r=r(Rde,` class
method.`),Rde.forEach(t),a8r=i(Zl),Uk=n(Zl,"P",{});var Sao=s(Uk);n8r=r(Sao,"This class cannot be instantiated directly using "),D5e=n(Sao,"CODE",{});var xea=s(D5e);s8r=r(xea,"__init__()"),xea.forEach(t),l8r=r(Sao," (throws an error)."),Sao.forEach(t),i8r=i(Zl),Dt=n(Zl,"DIV",{class:!0});var s9=s(Dt);T(Hk.$$.fragment,s9),d8r=i(s9),G5e=n(s9,"P",{});var $ea=s(G5e);c8r=r($ea,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),$ea.forEach(t),f8r=i(s9),Rc=n(s9,"P",{});var Pde=s(Rc);m8r=r(Pde,`Note:
Loading a model from its configuration file does `),O5e=n(Pde,"STRONG",{});var kea=s(O5e);g8r=r(kea,"not"),kea.forEach(t),h8r=r(Pde,` load the model weights. It only affects the
model\u2019s configuration. Use `),mee=n(Pde,"A",{href:!0});var Sea=s(mee);u8r=r(Sea,"from_pretrained()"),Sea.forEach(t),p8r=r(Pde," to load the model weights."),Pde.forEach(t),_8r=i(s9),T(dE.$$.fragment,s9),s9.forEach(t),v8r=i(Zl),Fo=n(Zl,"DIV",{class:!0});var Va=s(Fo);T(Jk.$$.fragment,Va),b8r=i(Va),V5e=n(Va,"P",{});var Rea=s(V5e);F8r=r(Rea,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Rea.forEach(t),T8r=i(Va),Tn=n(Va,"P",{});var l9=s(Tn);M8r=r(l9,"The model class to instantiate is selected based on the "),X5e=n(l9,"CODE",{});var Pea=s(X5e);E8r=r(Pea,"model_type"),Pea.forEach(t),C8r=r(l9,` property of the config object (either
passed as an argument or loaded from `),z5e=n(l9,"CODE",{});var Bea=s(z5e);w8r=r(Bea,"pretrained_model_name_or_path"),Bea.forEach(t),A8r=r(l9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q5e=n(l9,"CODE",{});var Iea=s(Q5e);L8r=r(Iea,"pretrained_model_name_or_path"),Iea.forEach(t),y8r=r(l9,":"),l9.forEach(t),x8r=i(Va),ht=n(Va,"UL",{});var Kl=s(ht);cE=n(Kl,"LI",{});var $Ue=s(cE);W5e=n($Ue,"STRONG",{});var Nea=s(W5e);$8r=r(Nea,"data2vec-audio"),Nea.forEach(t),k8r=r($Ue," \u2014 "),gee=n($Ue,"A",{href:!0});var qea=s(gee);S8r=r(qea,"Data2VecAudioForXVector"),qea.forEach(t),R8r=r($Ue," (Data2VecAudio model)"),$Ue.forEach(t),P8r=i(Kl),fE=n(Kl,"LI",{});var kUe=s(fE);U5e=n(kUe,"STRONG",{});var jea=s(U5e);B8r=r(jea,"unispeech-sat"),jea.forEach(t),I8r=r(kUe," \u2014 "),hee=n(kUe,"A",{href:!0});var Dea=s(hee);N8r=r(Dea,"UniSpeechSatForXVector"),Dea.forEach(t),q8r=r(kUe," (UniSpeechSat model)"),kUe.forEach(t),j8r=i(Kl),mE=n(Kl,"LI",{});var SUe=s(mE);H5e=n(SUe,"STRONG",{});var Gea=s(H5e);D8r=r(Gea,"wav2vec2"),Gea.forEach(t),G8r=r(SUe," \u2014 "),uee=n(SUe,"A",{href:!0});var Oea=s(uee);O8r=r(Oea,"Wav2Vec2ForXVector"),Oea.forEach(t),V8r=r(SUe," (Wav2Vec2 model)"),SUe.forEach(t),X8r=i(Kl),gE=n(Kl,"LI",{});var RUe=s(gE);J5e=n(RUe,"STRONG",{});var Vea=s(J5e);z8r=r(Vea,"wav2vec2-conformer"),Vea.forEach(t),Q8r=r(RUe," \u2014 "),pee=n(RUe,"A",{href:!0});var Xea=s(pee);W8r=r(Xea,"Wav2Vec2ConformerForXVector"),Xea.forEach(t),U8r=r(RUe," (Wav2Vec2-Conformer model)"),RUe.forEach(t),H8r=i(Kl),hE=n(Kl,"LI",{});var PUe=s(hE);Y5e=n(PUe,"STRONG",{});var zea=s(Y5e);J8r=r(zea,"wavlm"),zea.forEach(t),Y8r=r(PUe," \u2014 "),_ee=n(PUe,"A",{href:!0});var Qea=s(_ee);Z8r=r(Qea,"WavLMForXVector"),Qea.forEach(t),K8r=r(PUe," (WavLM model)"),PUe.forEach(t),Kl.forEach(t),eyr=i(Va),uE=n(Va,"P",{});var BUe=s(uE);oyr=r(BUe,"The model is set in evaluation mode by default using "),Z5e=n(BUe,"CODE",{});var Wea=s(Z5e);ryr=r(Wea,"model.eval()"),Wea.forEach(t),tyr=r(BUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K5e=n(BUe,"CODE",{});var Uea=s(K5e);ayr=r(Uea,"model.train()"),Uea.forEach(t),BUe.forEach(t),nyr=i(Va),T(pE.$$.fragment,Va),Va.forEach(t),Zl.forEach(t),_ro=i(f),Pc=n(f,"H2",{class:!0});var Rao=s(Pc);_E=n(Rao,"A",{id:!0,class:!0,href:!0});var Hea=s(_E);ewe=n(Hea,"SPAN",{});var Jea=s(ewe);T(Yk.$$.fragment,Jea),Jea.forEach(t),Hea.forEach(t),syr=i(Rao),owe=n(Rao,"SPAN",{});var Yea=s(owe);lyr=r(Yea,"AutoModelForMaskedImageModeling"),Yea.forEach(t),Rao.forEach(t),vro=i(f),rr=n(f,"DIV",{class:!0});var ei=s(rr);T(Zk.$$.fragment,ei),iyr=i(ei),Bc=n(ei,"P",{});var Bde=s(Bc);dyr=r(Bde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),vee=n(Bde,"A",{href:!0});var Zea=s(vee);cyr=r(Zea,"from_pretrained()"),Zea.forEach(t),fyr=r(Bde," class method or the "),bee=n(Bde,"A",{href:!0});var Kea=s(bee);myr=r(Kea,"from_config()"),Kea.forEach(t),gyr=r(Bde,` class
method.`),Bde.forEach(t),hyr=i(ei),Kk=n(ei,"P",{});var Pao=s(Kk);uyr=r(Pao,"This class cannot be instantiated directly using "),rwe=n(Pao,"CODE",{});var eoa=s(rwe);pyr=r(eoa,"__init__()"),eoa.forEach(t),_yr=r(Pao," (throws an error)."),Pao.forEach(t),vyr=i(ei),Gt=n(ei,"DIV",{class:!0});var i9=s(Gt);T(eS.$$.fragment,i9),byr=i(i9),twe=n(i9,"P",{});var ooa=s(twe);Fyr=r(ooa,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),ooa.forEach(t),Tyr=i(i9),Ic=n(i9,"P",{});var Ide=s(Ic);Myr=r(Ide,`Note:
Loading a model from its configuration file does `),awe=n(Ide,"STRONG",{});var roa=s(awe);Eyr=r(roa,"not"),roa.forEach(t),Cyr=r(Ide,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fee=n(Ide,"A",{href:!0});var toa=s(Fee);wyr=r(toa,"from_pretrained()"),toa.forEach(t),Ayr=r(Ide," to load the model weights."),Ide.forEach(t),Lyr=i(i9),T(vE.$$.fragment,i9),i9.forEach(t),yyr=i(ei),To=n(ei,"DIV",{class:!0});var Xa=s(To);T(oS.$$.fragment,Xa),xyr=i(Xa),nwe=n(Xa,"P",{});var aoa=s(nwe);$yr=r(aoa,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),aoa.forEach(t),kyr=i(Xa),Mn=n(Xa,"P",{});var d9=s(Mn);Syr=r(d9,"The model class to instantiate is selected based on the "),swe=n(d9,"CODE",{});var noa=s(swe);Ryr=r(noa,"model_type"),noa.forEach(t),Pyr=r(d9,` property of the config object (either
passed as an argument or loaded from `),lwe=n(d9,"CODE",{});var soa=s(lwe);Byr=r(soa,"pretrained_model_name_or_path"),soa.forEach(t),Iyr=r(d9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iwe=n(d9,"CODE",{});var loa=s(iwe);Nyr=r(loa,"pretrained_model_name_or_path"),loa.forEach(t),qyr=r(d9,":"),d9.forEach(t),jyr=i(Xa),En=n(Xa,"UL",{});var c9=s(En);bE=n(c9,"LI",{});var IUe=s(bE);dwe=n(IUe,"STRONG",{});var ioa=s(dwe);Dyr=r(ioa,"deit"),ioa.forEach(t),Gyr=r(IUe," \u2014 "),Tee=n(IUe,"A",{href:!0});var doa=s(Tee);Oyr=r(doa,"DeiTForMaskedImageModeling"),doa.forEach(t),Vyr=r(IUe," (DeiT model)"),IUe.forEach(t),Xyr=i(c9),FE=n(c9,"LI",{});var NUe=s(FE);cwe=n(NUe,"STRONG",{});var coa=s(cwe);zyr=r(coa,"swin"),coa.forEach(t),Qyr=r(NUe," \u2014 "),Mee=n(NUe,"A",{href:!0});var foa=s(Mee);Wyr=r(foa,"SwinForMaskedImageModeling"),foa.forEach(t),Uyr=r(NUe," (Swin Transformer model)"),NUe.forEach(t),Hyr=i(c9),TE=n(c9,"LI",{});var qUe=s(TE);fwe=n(qUe,"STRONG",{});var moa=s(fwe);Jyr=r(moa,"swinv2"),moa.forEach(t),Yyr=r(qUe," \u2014 "),Eee=n(qUe,"A",{href:!0});var goa=s(Eee);Zyr=r(goa,"Swinv2ForMaskedImageModeling"),goa.forEach(t),Kyr=r(qUe," (Swin Transformer V2 model)"),qUe.forEach(t),e9r=i(c9),ME=n(c9,"LI",{});var jUe=s(ME);mwe=n(jUe,"STRONG",{});var hoa=s(mwe);o9r=r(hoa,"vit"),hoa.forEach(t),r9r=r(jUe," \u2014 "),Cee=n(jUe,"A",{href:!0});var uoa=s(Cee);t9r=r(uoa,"ViTForMaskedImageModeling"),uoa.forEach(t),a9r=r(jUe," (ViT model)"),jUe.forEach(t),c9.forEach(t),n9r=i(Xa),EE=n(Xa,"P",{});var DUe=s(EE);s9r=r(DUe,"The model is set in evaluation mode by default using "),gwe=n(DUe,"CODE",{});var poa=s(gwe);l9r=r(poa,"model.eval()"),poa.forEach(t),i9r=r(DUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hwe=n(DUe,"CODE",{});var _oa=s(hwe);d9r=r(_oa,"model.train()"),_oa.forEach(t),DUe.forEach(t),c9r=i(Xa),T(CE.$$.fragment,Xa),Xa.forEach(t),ei.forEach(t),bro=i(f),Nc=n(f,"H2",{class:!0});var Bao=s(Nc);wE=n(Bao,"A",{id:!0,class:!0,href:!0});var voa=s(wE);uwe=n(voa,"SPAN",{});var boa=s(uwe);T(rS.$$.fragment,boa),boa.forEach(t),voa.forEach(t),f9r=i(Bao),pwe=n(Bao,"SPAN",{});var Foa=s(pwe);m9r=r(Foa,"AutoModelForObjectDetection"),Foa.forEach(t),Bao.forEach(t),Fro=i(f),tr=n(f,"DIV",{class:!0});var oi=s(tr);T(tS.$$.fragment,oi),g9r=i(oi),qc=n(oi,"P",{});var Nde=s(qc);h9r=r(Nde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),wee=n(Nde,"A",{href:!0});var Toa=s(wee);u9r=r(Toa,"from_pretrained()"),Toa.forEach(t),p9r=r(Nde," class method or the "),Aee=n(Nde,"A",{href:!0});var Moa=s(Aee);_9r=r(Moa,"from_config()"),Moa.forEach(t),v9r=r(Nde,` class
method.`),Nde.forEach(t),b9r=i(oi),aS=n(oi,"P",{});var Iao=s(aS);F9r=r(Iao,"This class cannot be instantiated directly using "),_we=n(Iao,"CODE",{});var Eoa=s(_we);T9r=r(Eoa,"__init__()"),Eoa.forEach(t),M9r=r(Iao," (throws an error)."),Iao.forEach(t),E9r=i(oi),Ot=n(oi,"DIV",{class:!0});var f9=s(Ot);T(nS.$$.fragment,f9),C9r=i(f9),vwe=n(f9,"P",{});var Coa=s(vwe);w9r=r(Coa,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Coa.forEach(t),A9r=i(f9),jc=n(f9,"P",{});var qde=s(jc);L9r=r(qde,`Note:
Loading a model from its configuration file does `),bwe=n(qde,"STRONG",{});var woa=s(bwe);y9r=r(woa,"not"),woa.forEach(t),x9r=r(qde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lee=n(qde,"A",{href:!0});var Aoa=s(Lee);$9r=r(Aoa,"from_pretrained()"),Aoa.forEach(t),k9r=r(qde," to load the model weights."),qde.forEach(t),S9r=i(f9),T(AE.$$.fragment,f9),f9.forEach(t),R9r=i(oi),Mo=n(oi,"DIV",{class:!0});var za=s(Mo);T(sS.$$.fragment,za),P9r=i(za),Fwe=n(za,"P",{});var Loa=s(Fwe);B9r=r(Loa,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Loa.forEach(t),I9r=i(za),Cn=n(za,"P",{});var m9=s(Cn);N9r=r(m9,"The model class to instantiate is selected based on the "),Twe=n(m9,"CODE",{});var yoa=s(Twe);q9r=r(yoa,"model_type"),yoa.forEach(t),j9r=r(m9,` property of the config object (either
passed as an argument or loaded from `),Mwe=n(m9,"CODE",{});var xoa=s(Mwe);D9r=r(xoa,"pretrained_model_name_or_path"),xoa.forEach(t),G9r=r(m9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ewe=n(m9,"CODE",{});var $oa=s(Ewe);O9r=r($oa,"pretrained_model_name_or_path"),$oa.forEach(t),V9r=r(m9,":"),m9.forEach(t),X9r=i(za),wn=n(za,"UL",{});var g9=s(wn);LE=n(g9,"LI",{});var GUe=s(LE);Cwe=n(GUe,"STRONG",{});var koa=s(Cwe);z9r=r(koa,"conditional_detr"),koa.forEach(t),Q9r=r(GUe," \u2014 "),yee=n(GUe,"A",{href:!0});var Soa=s(yee);W9r=r(Soa,"ConditionalDetrForObjectDetection"),Soa.forEach(t),U9r=r(GUe," (Conditional DETR model)"),GUe.forEach(t),H9r=i(g9),yE=n(g9,"LI",{});var OUe=s(yE);wwe=n(OUe,"STRONG",{});var Roa=s(wwe);J9r=r(Roa,"deformable_detr"),Roa.forEach(t),Y9r=r(OUe," \u2014 "),xee=n(OUe,"A",{href:!0});var Poa=s(xee);Z9r=r(Poa,"DeformableDetrForObjectDetection"),Poa.forEach(t),K9r=r(OUe," (Deformable DETR model)"),OUe.forEach(t),exr=i(g9),xE=n(g9,"LI",{});var VUe=s(xE);Awe=n(VUe,"STRONG",{});var Boa=s(Awe);oxr=r(Boa,"detr"),Boa.forEach(t),rxr=r(VUe," \u2014 "),$ee=n(VUe,"A",{href:!0});var Ioa=s($ee);txr=r(Ioa,"DetrForObjectDetection"),Ioa.forEach(t),axr=r(VUe," (DETR model)"),VUe.forEach(t),nxr=i(g9),$E=n(g9,"LI",{});var XUe=s($E);Lwe=n(XUe,"STRONG",{});var Noa=s(Lwe);sxr=r(Noa,"yolos"),Noa.forEach(t),lxr=r(XUe," \u2014 "),kee=n(XUe,"A",{href:!0});var qoa=s(kee);ixr=r(qoa,"YolosForObjectDetection"),qoa.forEach(t),dxr=r(XUe," (YOLOS model)"),XUe.forEach(t),g9.forEach(t),cxr=i(za),kE=n(za,"P",{});var zUe=s(kE);fxr=r(zUe,"The model is set in evaluation mode by default using "),ywe=n(zUe,"CODE",{});var joa=s(ywe);mxr=r(joa,"model.eval()"),joa.forEach(t),gxr=r(zUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xwe=n(zUe,"CODE",{});var Doa=s(xwe);hxr=r(Doa,"model.train()"),Doa.forEach(t),zUe.forEach(t),uxr=i(za),T(SE.$$.fragment,za),za.forEach(t),oi.forEach(t),Tro=i(f),Dc=n(f,"H2",{class:!0});var Nao=s(Dc);RE=n(Nao,"A",{id:!0,class:!0,href:!0});var Goa=s(RE);$we=n(Goa,"SPAN",{});var Ooa=s($we);T(lS.$$.fragment,Ooa),Ooa.forEach(t),Goa.forEach(t),pxr=i(Nao),kwe=n(Nao,"SPAN",{});var Voa=s(kwe);_xr=r(Voa,"AutoModelForImageSegmentation"),Voa.forEach(t),Nao.forEach(t),Mro=i(f),ar=n(f,"DIV",{class:!0});var ri=s(ar);T(iS.$$.fragment,ri),vxr=i(ri),Gc=n(ri,"P",{});var jde=s(Gc);bxr=r(jde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),See=n(jde,"A",{href:!0});var Xoa=s(See);Fxr=r(Xoa,"from_pretrained()"),Xoa.forEach(t),Txr=r(jde," class method or the "),Ree=n(jde,"A",{href:!0});var zoa=s(Ree);Mxr=r(zoa,"from_config()"),zoa.forEach(t),Exr=r(jde,` class
method.`),jde.forEach(t),Cxr=i(ri),dS=n(ri,"P",{});var qao=s(dS);wxr=r(qao,"This class cannot be instantiated directly using "),Swe=n(qao,"CODE",{});var Qoa=s(Swe);Axr=r(Qoa,"__init__()"),Qoa.forEach(t),Lxr=r(qao," (throws an error)."),qao.forEach(t),yxr=i(ri),Vt=n(ri,"DIV",{class:!0});var h9=s(Vt);T(cS.$$.fragment,h9),xxr=i(h9),Rwe=n(h9,"P",{});var Woa=s(Rwe);$xr=r(Woa,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Woa.forEach(t),kxr=i(h9),Oc=n(h9,"P",{});var Dde=s(Oc);Sxr=r(Dde,`Note:
Loading a model from its configuration file does `),Pwe=n(Dde,"STRONG",{});var Uoa=s(Pwe);Rxr=r(Uoa,"not"),Uoa.forEach(t),Pxr=r(Dde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pee=n(Dde,"A",{href:!0});var Hoa=s(Pee);Bxr=r(Hoa,"from_pretrained()"),Hoa.forEach(t),Ixr=r(Dde," to load the model weights."),Dde.forEach(t),Nxr=i(h9),T(PE.$$.fragment,h9),h9.forEach(t),qxr=i(ri),Eo=n(ri,"DIV",{class:!0});var Qa=s(Eo);T(fS.$$.fragment,Qa),jxr=i(Qa),Bwe=n(Qa,"P",{});var Joa=s(Bwe);Dxr=r(Joa,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Joa.forEach(t),Gxr=i(Qa),An=n(Qa,"P",{});var u9=s(An);Oxr=r(u9,"The model class to instantiate is selected based on the "),Iwe=n(u9,"CODE",{});var Yoa=s(Iwe);Vxr=r(Yoa,"model_type"),Yoa.forEach(t),Xxr=r(u9,` property of the config object (either
passed as an argument or loaded from `),Nwe=n(u9,"CODE",{});var Zoa=s(Nwe);zxr=r(Zoa,"pretrained_model_name_or_path"),Zoa.forEach(t),Qxr=r(u9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qwe=n(u9,"CODE",{});var Koa=s(qwe);Wxr=r(Koa,"pretrained_model_name_or_path"),Koa.forEach(t),Uxr=r(u9,":"),u9.forEach(t),Hxr=i(Qa),jwe=n(Qa,"UL",{});var era=s(jwe);BE=n(era,"LI",{});var QUe=s(BE);Dwe=n(QUe,"STRONG",{});var ora=s(Dwe);Jxr=r(ora,"detr"),ora.forEach(t),Yxr=r(QUe," \u2014 "),Bee=n(QUe,"A",{href:!0});var rra=s(Bee);Zxr=r(rra,"DetrForSegmentation"),rra.forEach(t),Kxr=r(QUe," (DETR model)"),QUe.forEach(t),era.forEach(t),e$r=i(Qa),IE=n(Qa,"P",{});var WUe=s(IE);o$r=r(WUe,"The model is set in evaluation mode by default using "),Gwe=n(WUe,"CODE",{});var tra=s(Gwe);r$r=r(tra,"model.eval()"),tra.forEach(t),t$r=r(WUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Owe=n(WUe,"CODE",{});var ara=s(Owe);a$r=r(ara,"model.train()"),ara.forEach(t),WUe.forEach(t),n$r=i(Qa),T(NE.$$.fragment,Qa),Qa.forEach(t),ri.forEach(t),Ero=i(f),Vc=n(f,"H2",{class:!0});var jao=s(Vc);qE=n(jao,"A",{id:!0,class:!0,href:!0});var nra=s(qE);Vwe=n(nra,"SPAN",{});var sra=s(Vwe);T(mS.$$.fragment,sra),sra.forEach(t),nra.forEach(t),s$r=i(jao),Xwe=n(jao,"SPAN",{});var lra=s(Xwe);l$r=r(lra,"AutoModelForSemanticSegmentation"),lra.forEach(t),jao.forEach(t),Cro=i(f),nr=n(f,"DIV",{class:!0});var ti=s(nr);T(gS.$$.fragment,ti),i$r=i(ti),Xc=n(ti,"P",{});var Gde=s(Xc);d$r=r(Gde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Iee=n(Gde,"A",{href:!0});var ira=s(Iee);c$r=r(ira,"from_pretrained()"),ira.forEach(t),f$r=r(Gde," class method or the "),Nee=n(Gde,"A",{href:!0});var dra=s(Nee);m$r=r(dra,"from_config()"),dra.forEach(t),g$r=r(Gde,` class
method.`),Gde.forEach(t),h$r=i(ti),hS=n(ti,"P",{});var Dao=s(hS);u$r=r(Dao,"This class cannot be instantiated directly using "),zwe=n(Dao,"CODE",{});var cra=s(zwe);p$r=r(cra,"__init__()"),cra.forEach(t),_$r=r(Dao," (throws an error)."),Dao.forEach(t),v$r=i(ti),Xt=n(ti,"DIV",{class:!0});var p9=s(Xt);T(uS.$$.fragment,p9),b$r=i(p9),Qwe=n(p9,"P",{});var fra=s(Qwe);F$r=r(fra,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),fra.forEach(t),T$r=i(p9),zc=n(p9,"P",{});var Ode=s(zc);M$r=r(Ode,`Note:
Loading a model from its configuration file does `),Wwe=n(Ode,"STRONG",{});var mra=s(Wwe);E$r=r(mra,"not"),mra.forEach(t),C$r=r(Ode,` load the model weights. It only affects the
model\u2019s configuration. Use `),qee=n(Ode,"A",{href:!0});var gra=s(qee);w$r=r(gra,"from_pretrained()"),gra.forEach(t),A$r=r(Ode," to load the model weights."),Ode.forEach(t),L$r=i(p9),T(jE.$$.fragment,p9),p9.forEach(t),y$r=i(ti),Co=n(ti,"DIV",{class:!0});var Wa=s(Co);T(pS.$$.fragment,Wa),x$r=i(Wa),Uwe=n(Wa,"P",{});var hra=s(Uwe);$$r=r(hra,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),hra.forEach(t),k$r=i(Wa),Ln=n(Wa,"P",{});var _9=s(Ln);S$r=r(_9,"The model class to instantiate is selected based on the "),Hwe=n(_9,"CODE",{});var ura=s(Hwe);R$r=r(ura,"model_type"),ura.forEach(t),P$r=r(_9,` property of the config object (either
passed as an argument or loaded from `),Jwe=n(_9,"CODE",{});var pra=s(Jwe);B$r=r(pra,"pretrained_model_name_or_path"),pra.forEach(t),I$r=r(_9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ywe=n(_9,"CODE",{});var _ra=s(Ywe);N$r=r(_ra,"pretrained_model_name_or_path"),_ra.forEach(t),q$r=r(_9,":"),_9.forEach(t),j$r=i(Wa),ut=n(Wa,"UL",{});var ai=s(ut);DE=n(ai,"LI",{});var UUe=s(DE);Zwe=n(UUe,"STRONG",{});var vra=s(Zwe);D$r=r(vra,"beit"),vra.forEach(t),G$r=r(UUe," \u2014 "),jee=n(UUe,"A",{href:!0});var bra=s(jee);O$r=r(bra,"BeitForSemanticSegmentation"),bra.forEach(t),V$r=r(UUe," (BEiT model)"),UUe.forEach(t),X$r=i(ai),GE=n(ai,"LI",{});var HUe=s(GE);Kwe=n(HUe,"STRONG",{});var Fra=s(Kwe);z$r=r(Fra,"data2vec-vision"),Fra.forEach(t),Q$r=r(HUe," \u2014 "),Dee=n(HUe,"A",{href:!0});var Tra=s(Dee);W$r=r(Tra,"Data2VecVisionForSemanticSegmentation"),Tra.forEach(t),U$r=r(HUe," (Data2VecVision model)"),HUe.forEach(t),H$r=i(ai),OE=n(ai,"LI",{});var JUe=s(OE);eAe=n(JUe,"STRONG",{});var Mra=s(eAe);J$r=r(Mra,"dpt"),Mra.forEach(t),Y$r=r(JUe," \u2014 "),Gee=n(JUe,"A",{href:!0});var Era=s(Gee);Z$r=r(Era,"DPTForSemanticSegmentation"),Era.forEach(t),K$r=r(JUe," (DPT model)"),JUe.forEach(t),ekr=i(ai),VE=n(ai,"LI",{});var YUe=s(VE);oAe=n(YUe,"STRONG",{});var Cra=s(oAe);okr=r(Cra,"mobilevit"),Cra.forEach(t),rkr=r(YUe," \u2014 "),Oee=n(YUe,"A",{href:!0});var wra=s(Oee);tkr=r(wra,"MobileViTForSemanticSegmentation"),wra.forEach(t),akr=r(YUe," (MobileViT model)"),YUe.forEach(t),nkr=i(ai),XE=n(ai,"LI",{});var ZUe=s(XE);rAe=n(ZUe,"STRONG",{});var Ara=s(rAe);skr=r(Ara,"segformer"),Ara.forEach(t),lkr=r(ZUe," \u2014 "),Vee=n(ZUe,"A",{href:!0});var Lra=s(Vee);ikr=r(Lra,"SegformerForSemanticSegmentation"),Lra.forEach(t),dkr=r(ZUe," (SegFormer model)"),ZUe.forEach(t),ai.forEach(t),ckr=i(Wa),zE=n(Wa,"P",{});var KUe=s(zE);fkr=r(KUe,"The model is set in evaluation mode by default using "),tAe=n(KUe,"CODE",{});var yra=s(tAe);mkr=r(yra,"model.eval()"),yra.forEach(t),gkr=r(KUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aAe=n(KUe,"CODE",{});var xra=s(aAe);hkr=r(xra,"model.train()"),xra.forEach(t),KUe.forEach(t),ukr=i(Wa),T(QE.$$.fragment,Wa),Wa.forEach(t),ti.forEach(t),wro=i(f),Qc=n(f,"H2",{class:!0});var Gao=s(Qc);WE=n(Gao,"A",{id:!0,class:!0,href:!0});var $ra=s(WE);nAe=n($ra,"SPAN",{});var kra=s(nAe);T(_S.$$.fragment,kra),kra.forEach(t),$ra.forEach(t),pkr=i(Gao),sAe=n(Gao,"SPAN",{});var Sra=s(sAe);_kr=r(Sra,"AutoModelForInstanceSegmentation"),Sra.forEach(t),Gao.forEach(t),Aro=i(f),sr=n(f,"DIV",{class:!0});var ni=s(sr);T(vS.$$.fragment,ni),vkr=i(ni),Wc=n(ni,"P",{});var Vde=s(Wc);bkr=r(Vde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Xee=n(Vde,"A",{href:!0});var Rra=s(Xee);Fkr=r(Rra,"from_pretrained()"),Rra.forEach(t),Tkr=r(Vde," class method or the "),zee=n(Vde,"A",{href:!0});var Pra=s(zee);Mkr=r(Pra,"from_config()"),Pra.forEach(t),Ekr=r(Vde,` class
method.`),Vde.forEach(t),Ckr=i(ni),bS=n(ni,"P",{});var Oao=s(bS);wkr=r(Oao,"This class cannot be instantiated directly using "),lAe=n(Oao,"CODE",{});var Bra=s(lAe);Akr=r(Bra,"__init__()"),Bra.forEach(t),Lkr=r(Oao," (throws an error)."),Oao.forEach(t),ykr=i(ni),zt=n(ni,"DIV",{class:!0});var v9=s(zt);T(FS.$$.fragment,v9),xkr=i(v9),iAe=n(v9,"P",{});var Ira=s(iAe);$kr=r(Ira,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Ira.forEach(t),kkr=i(v9),Uc=n(v9,"P",{});var Xde=s(Uc);Skr=r(Xde,`Note:
Loading a model from its configuration file does `),dAe=n(Xde,"STRONG",{});var Nra=s(dAe);Rkr=r(Nra,"not"),Nra.forEach(t),Pkr=r(Xde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qee=n(Xde,"A",{href:!0});var qra=s(Qee);Bkr=r(qra,"from_pretrained()"),qra.forEach(t),Ikr=r(Xde," to load the model weights."),Xde.forEach(t),Nkr=i(v9),T(UE.$$.fragment,v9),v9.forEach(t),qkr=i(ni),wo=n(ni,"DIV",{class:!0});var Ua=s(wo);T(TS.$$.fragment,Ua),jkr=i(Ua),cAe=n(Ua,"P",{});var jra=s(cAe);Dkr=r(jra,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),jra.forEach(t),Gkr=i(Ua),yn=n(Ua,"P",{});var b9=s(yn);Okr=r(b9,"The model class to instantiate is selected based on the "),fAe=n(b9,"CODE",{});var Dra=s(fAe);Vkr=r(Dra,"model_type"),Dra.forEach(t),Xkr=r(b9,` property of the config object (either
passed as an argument or loaded from `),mAe=n(b9,"CODE",{});var Gra=s(mAe);zkr=r(Gra,"pretrained_model_name_or_path"),Gra.forEach(t),Qkr=r(b9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gAe=n(b9,"CODE",{});var Ora=s(gAe);Wkr=r(Ora,"pretrained_model_name_or_path"),Ora.forEach(t),Ukr=r(b9,":"),b9.forEach(t),Hkr=i(Ua),hAe=n(Ua,"UL",{});var Vra=s(hAe);HE=n(Vra,"LI",{});var eHe=s(HE);uAe=n(eHe,"STRONG",{});var Xra=s(uAe);Jkr=r(Xra,"maskformer"),Xra.forEach(t),Ykr=r(eHe," \u2014 "),Wee=n(eHe,"A",{href:!0});var zra=s(Wee);Zkr=r(zra,"MaskFormerForInstanceSegmentation"),zra.forEach(t),Kkr=r(eHe," (MaskFormer model)"),eHe.forEach(t),Vra.forEach(t),eSr=i(Ua),JE=n(Ua,"P",{});var oHe=s(JE);oSr=r(oHe,"The model is set in evaluation mode by default using "),pAe=n(oHe,"CODE",{});var Qra=s(pAe);rSr=r(Qra,"model.eval()"),Qra.forEach(t),tSr=r(oHe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_Ae=n(oHe,"CODE",{});var Wra=s(_Ae);aSr=r(Wra,"model.train()"),Wra.forEach(t),oHe.forEach(t),nSr=i(Ua),T(YE.$$.fragment,Ua),Ua.forEach(t),ni.forEach(t),Lro=i(f),Hc=n(f,"H2",{class:!0});var Vao=s(Hc);ZE=n(Vao,"A",{id:!0,class:!0,href:!0});var Ura=s(ZE);vAe=n(Ura,"SPAN",{});var Hra=s(vAe);T(MS.$$.fragment,Hra),Hra.forEach(t),Ura.forEach(t),sSr=i(Vao),bAe=n(Vao,"SPAN",{});var Jra=s(bAe);lSr=r(Jra,"AutoModelForZeroShotObjectDetection"),Jra.forEach(t),Vao.forEach(t),yro=i(f),lr=n(f,"DIV",{class:!0});var si=s(lr);T(ES.$$.fragment,si),iSr=i(si),Jc=n(si,"P",{});var zde=s(Jc);dSr=r(zde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a zero-shot object detection head) when created
with the `),Uee=n(zde,"A",{href:!0});var Yra=s(Uee);cSr=r(Yra,"from_pretrained()"),Yra.forEach(t),fSr=r(zde," class method or the "),Hee=n(zde,"A",{href:!0});var Zra=s(Hee);mSr=r(Zra,"from_config()"),Zra.forEach(t),gSr=r(zde,` class
method.`),zde.forEach(t),hSr=i(si),CS=n(si,"P",{});var Xao=s(CS);uSr=r(Xao,"This class cannot be instantiated directly using "),FAe=n(Xao,"CODE",{});var Kra=s(FAe);pSr=r(Kra,"__init__()"),Kra.forEach(t),_Sr=r(Xao," (throws an error)."),Xao.forEach(t),vSr=i(si),Qt=n(si,"DIV",{class:!0});var F9=s(Qt);T(wS.$$.fragment,F9),bSr=i(F9),TAe=n(F9,"P",{});var eta=s(TAe);FSr=r(eta,"Instantiates one of the model classes of the library (with a zero-shot object detection head) from a configuration."),eta.forEach(t),TSr=i(F9),Yc=n(F9,"P",{});var Qde=s(Yc);MSr=r(Qde,`Note:
Loading a model from its configuration file does `),MAe=n(Qde,"STRONG",{});var ota=s(MAe);ESr=r(ota,"not"),ota.forEach(t),CSr=r(Qde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jee=n(Qde,"A",{href:!0});var rta=s(Jee);wSr=r(rta,"from_pretrained()"),rta.forEach(t),ASr=r(Qde," to load the model weights."),Qde.forEach(t),LSr=i(F9),T(KE.$$.fragment,F9),F9.forEach(t),ySr=i(si),Ao=n(si,"DIV",{class:!0});var Ha=s(Ao);T(AS.$$.fragment,Ha),xSr=i(Ha),EAe=n(Ha,"P",{});var tta=s(EAe);$Sr=r(tta,"Instantiate one of the model classes of the library (with a zero-shot object detection head) from a pretrained model."),tta.forEach(t),kSr=i(Ha),xn=n(Ha,"P",{});var T9=s(xn);SSr=r(T9,"The model class to instantiate is selected based on the "),CAe=n(T9,"CODE",{});var ata=s(CAe);RSr=r(ata,"model_type"),ata.forEach(t),PSr=r(T9,` property of the config object (either
passed as an argument or loaded from `),wAe=n(T9,"CODE",{});var nta=s(wAe);BSr=r(nta,"pretrained_model_name_or_path"),nta.forEach(t),ISr=r(T9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AAe=n(T9,"CODE",{});var sta=s(AAe);NSr=r(sta,"pretrained_model_name_or_path"),sta.forEach(t),qSr=r(T9,":"),T9.forEach(t),jSr=i(Ha),LAe=n(Ha,"UL",{});var lta=s(LAe);eC=n(lta,"LI",{});var rHe=s(eC);yAe=n(rHe,"STRONG",{});var ita=s(yAe);DSr=r(ita,"owlvit"),ita.forEach(t),GSr=r(rHe," \u2014 "),Yee=n(rHe,"A",{href:!0});var dta=s(Yee);OSr=r(dta,"OwlViTForObjectDetection"),dta.forEach(t),VSr=r(rHe," (OWL-ViT model)"),rHe.forEach(t),lta.forEach(t),XSr=i(Ha),oC=n(Ha,"P",{});var tHe=s(oC);zSr=r(tHe,"The model is set in evaluation mode by default using "),xAe=n(tHe,"CODE",{});var cta=s(xAe);QSr=r(cta,"model.eval()"),cta.forEach(t),WSr=r(tHe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$Ae=n(tHe,"CODE",{});var fta=s($Ae);USr=r(fta,"model.train()"),fta.forEach(t),tHe.forEach(t),HSr=i(Ha),T(rC.$$.fragment,Ha),Ha.forEach(t),si.forEach(t),xro=i(f),Zc=n(f,"H2",{class:!0});var zao=s(Zc);tC=n(zao,"A",{id:!0,class:!0,href:!0});var mta=s(tC);kAe=n(mta,"SPAN",{});var gta=s(kAe);T(LS.$$.fragment,gta),gta.forEach(t),mta.forEach(t),JSr=i(zao),SAe=n(zao,"SPAN",{});var hta=s(SAe);YSr=r(hta,"TFAutoModel"),hta.forEach(t),zao.forEach(t),$ro=i(f),ir=n(f,"DIV",{class:!0});var li=s(ir);T(yS.$$.fragment,li),ZSr=i(li),Kc=n(li,"P",{});var Wde=s(Kc);KSr=r(Wde,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Zee=n(Wde,"A",{href:!0});var uta=s(Zee);eRr=r(uta,"from_pretrained()"),uta.forEach(t),oRr=r(Wde," class method or the "),Kee=n(Wde,"A",{href:!0});var pta=s(Kee);rRr=r(pta,"from_config()"),pta.forEach(t),tRr=r(Wde,` class
method.`),Wde.forEach(t),aRr=i(li),xS=n(li,"P",{});var Qao=s(xS);nRr=r(Qao,"This class cannot be instantiated directly using "),RAe=n(Qao,"CODE",{});var _ta=s(RAe);sRr=r(_ta,"__init__()"),_ta.forEach(t),lRr=r(Qao," (throws an error)."),Qao.forEach(t),iRr=i(li),Wt=n(li,"DIV",{class:!0});var M9=s(Wt);T($S.$$.fragment,M9),dRr=i(M9),PAe=n(M9,"P",{});var vta=s(PAe);cRr=r(vta,"Instantiates one of the base model classes of the library from a configuration."),vta.forEach(t),fRr=i(M9),ef=n(M9,"P",{});var Ude=s(ef);mRr=r(Ude,`Note:
Loading a model from its configuration file does `),BAe=n(Ude,"STRONG",{});var bta=s(BAe);gRr=r(bta,"not"),bta.forEach(t),hRr=r(Ude,` load the model weights. It only affects the
model\u2019s configuration. Use `),eoe=n(Ude,"A",{href:!0});var Fta=s(eoe);uRr=r(Fta,"from_pretrained()"),Fta.forEach(t),pRr=r(Ude," to load the model weights."),Ude.forEach(t),_Rr=i(M9),T(aC.$$.fragment,M9),M9.forEach(t),vRr=i(li),qr=n(li,"DIV",{class:!0});var ii=s(qr);T(kS.$$.fragment,ii),bRr=i(ii),IAe=n(ii,"P",{});var Tta=s(IAe);FRr=r(Tta,"Instantiate one of the base model classes of the library from a pretrained model."),Tta.forEach(t),TRr=i(ii),$n=n(ii,"P",{});var E9=s($n);MRr=r(E9,"The model class to instantiate is selected based on the "),NAe=n(E9,"CODE",{});var Mta=s(NAe);ERr=r(Mta,"model_type"),Mta.forEach(t),CRr=r(E9,` property of the config object (either
passed as an argument or loaded from `),qAe=n(E9,"CODE",{});var Eta=s(qAe);wRr=r(Eta,"pretrained_model_name_or_path"),Eta.forEach(t),ARr=r(E9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jAe=n(E9,"CODE",{});var Cta=s(jAe);LRr=r(Cta,"pretrained_model_name_or_path"),Cta.forEach(t),yRr=r(E9,":"),E9.forEach(t),xRr=i(ii),B=n(ii,"UL",{});var j=s(B);nC=n(j,"LI",{});var aHe=s(nC);DAe=n(aHe,"STRONG",{});var wta=s(DAe);$Rr=r(wta,"albert"),wta.forEach(t),kRr=r(aHe," \u2014 "),ooe=n(aHe,"A",{href:!0});var Ata=s(ooe);SRr=r(Ata,"TFAlbertModel"),Ata.forEach(t),RRr=r(aHe," (ALBERT model)"),aHe.forEach(t),PRr=i(j),sC=n(j,"LI",{});var nHe=s(sC);GAe=n(nHe,"STRONG",{});var Lta=s(GAe);BRr=r(Lta,"bart"),Lta.forEach(t),IRr=r(nHe," \u2014 "),roe=n(nHe,"A",{href:!0});var yta=s(roe);NRr=r(yta,"TFBartModel"),yta.forEach(t),qRr=r(nHe," (BART model)"),nHe.forEach(t),jRr=i(j),lC=n(j,"LI",{});var sHe=s(lC);OAe=n(sHe,"STRONG",{});var xta=s(OAe);DRr=r(xta,"bert"),xta.forEach(t),GRr=r(sHe," \u2014 "),toe=n(sHe,"A",{href:!0});var $ta=s(toe);ORr=r($ta,"TFBertModel"),$ta.forEach(t),VRr=r(sHe," (BERT model)"),sHe.forEach(t),XRr=i(j),iC=n(j,"LI",{});var lHe=s(iC);VAe=n(lHe,"STRONG",{});var kta=s(VAe);zRr=r(kta,"blenderbot"),kta.forEach(t),QRr=r(lHe," \u2014 "),aoe=n(lHe,"A",{href:!0});var Sta=s(aoe);WRr=r(Sta,"TFBlenderbotModel"),Sta.forEach(t),URr=r(lHe," (Blenderbot model)"),lHe.forEach(t),HRr=i(j),dC=n(j,"LI",{});var iHe=s(dC);XAe=n(iHe,"STRONG",{});var Rta=s(XAe);JRr=r(Rta,"blenderbot-small"),Rta.forEach(t),YRr=r(iHe," \u2014 "),noe=n(iHe,"A",{href:!0});var Pta=s(noe);ZRr=r(Pta,"TFBlenderbotSmallModel"),Pta.forEach(t),KRr=r(iHe," (BlenderbotSmall model)"),iHe.forEach(t),ePr=i(j),cC=n(j,"LI",{});var dHe=s(cC);zAe=n(dHe,"STRONG",{});var Bta=s(zAe);oPr=r(Bta,"camembert"),Bta.forEach(t),rPr=r(dHe," \u2014 "),soe=n(dHe,"A",{href:!0});var Ita=s(soe);tPr=r(Ita,"TFCamembertModel"),Ita.forEach(t),aPr=r(dHe," (CamemBERT model)"),dHe.forEach(t),nPr=i(j),fC=n(j,"LI",{});var cHe=s(fC);QAe=n(cHe,"STRONG",{});var Nta=s(QAe);sPr=r(Nta,"clip"),Nta.forEach(t),lPr=r(cHe," \u2014 "),loe=n(cHe,"A",{href:!0});var qta=s(loe);iPr=r(qta,"TFCLIPModel"),qta.forEach(t),dPr=r(cHe," (CLIP model)"),cHe.forEach(t),cPr=i(j),mC=n(j,"LI",{});var fHe=s(mC);WAe=n(fHe,"STRONG",{});var jta=s(WAe);fPr=r(jta,"convbert"),jta.forEach(t),mPr=r(fHe," \u2014 "),ioe=n(fHe,"A",{href:!0});var Dta=s(ioe);gPr=r(Dta,"TFConvBertModel"),Dta.forEach(t),hPr=r(fHe," (ConvBERT model)"),fHe.forEach(t),uPr=i(j),gC=n(j,"LI",{});var mHe=s(gC);UAe=n(mHe,"STRONG",{});var Gta=s(UAe);pPr=r(Gta,"convnext"),Gta.forEach(t),_Pr=r(mHe," \u2014 "),doe=n(mHe,"A",{href:!0});var Ota=s(doe);vPr=r(Ota,"TFConvNextModel"),Ota.forEach(t),bPr=r(mHe," (ConvNeXT model)"),mHe.forEach(t),FPr=i(j),hC=n(j,"LI",{});var gHe=s(hC);HAe=n(gHe,"STRONG",{});var Vta=s(HAe);TPr=r(Vta,"ctrl"),Vta.forEach(t),MPr=r(gHe," \u2014 "),coe=n(gHe,"A",{href:!0});var Xta=s(coe);EPr=r(Xta,"TFCTRLModel"),Xta.forEach(t),CPr=r(gHe," (CTRL model)"),gHe.forEach(t),wPr=i(j),uC=n(j,"LI",{});var hHe=s(uC);JAe=n(hHe,"STRONG",{});var zta=s(JAe);APr=r(zta,"data2vec-vision"),zta.forEach(t),LPr=r(hHe," \u2014 "),foe=n(hHe,"A",{href:!0});var Qta=s(foe);yPr=r(Qta,"TFData2VecVisionModel"),Qta.forEach(t),xPr=r(hHe," (Data2VecVision model)"),hHe.forEach(t),$Pr=i(j),pC=n(j,"LI",{});var uHe=s(pC);YAe=n(uHe,"STRONG",{});var Wta=s(YAe);kPr=r(Wta,"deberta"),Wta.forEach(t),SPr=r(uHe," \u2014 "),moe=n(uHe,"A",{href:!0});var Uta=s(moe);RPr=r(Uta,"TFDebertaModel"),Uta.forEach(t),PPr=r(uHe," (DeBERTa model)"),uHe.forEach(t),BPr=i(j),_C=n(j,"LI",{});var pHe=s(_C);ZAe=n(pHe,"STRONG",{});var Hta=s(ZAe);IPr=r(Hta,"deberta-v2"),Hta.forEach(t),NPr=r(pHe," \u2014 "),goe=n(pHe,"A",{href:!0});var Jta=s(goe);qPr=r(Jta,"TFDebertaV2Model"),Jta.forEach(t),jPr=r(pHe," (DeBERTa-v2 model)"),pHe.forEach(t),DPr=i(j),vC=n(j,"LI",{});var _He=s(vC);KAe=n(_He,"STRONG",{});var Yta=s(KAe);GPr=r(Yta,"deit"),Yta.forEach(t),OPr=r(_He," \u2014 "),hoe=n(_He,"A",{href:!0});var Zta=s(hoe);VPr=r(Zta,"TFDeiTModel"),Zta.forEach(t),XPr=r(_He," (DeiT model)"),_He.forEach(t),zPr=i(j),bC=n(j,"LI",{});var vHe=s(bC);e6e=n(vHe,"STRONG",{});var Kta=s(e6e);QPr=r(Kta,"distilbert"),Kta.forEach(t),WPr=r(vHe," \u2014 "),uoe=n(vHe,"A",{href:!0});var eaa=s(uoe);UPr=r(eaa,"TFDistilBertModel"),eaa.forEach(t),HPr=r(vHe," (DistilBERT model)"),vHe.forEach(t),JPr=i(j),FC=n(j,"LI",{});var bHe=s(FC);o6e=n(bHe,"STRONG",{});var oaa=s(o6e);YPr=r(oaa,"dpr"),oaa.forEach(t),ZPr=r(bHe," \u2014 "),poe=n(bHe,"A",{href:!0});var raa=s(poe);KPr=r(raa,"TFDPRQuestionEncoder"),raa.forEach(t),eBr=r(bHe," (DPR model)"),bHe.forEach(t),oBr=i(j),TC=n(j,"LI",{});var FHe=s(TC);r6e=n(FHe,"STRONG",{});var taa=s(r6e);rBr=r(taa,"electra"),taa.forEach(t),tBr=r(FHe," \u2014 "),_oe=n(FHe,"A",{href:!0});var aaa=s(_oe);aBr=r(aaa,"TFElectraModel"),aaa.forEach(t),nBr=r(FHe," (ELECTRA model)"),FHe.forEach(t),sBr=i(j),MC=n(j,"LI",{});var THe=s(MC);t6e=n(THe,"STRONG",{});var naa=s(t6e);lBr=r(naa,"flaubert"),naa.forEach(t),iBr=r(THe," \u2014 "),voe=n(THe,"A",{href:!0});var saa=s(voe);dBr=r(saa,"TFFlaubertModel"),saa.forEach(t),cBr=r(THe," (FlauBERT model)"),THe.forEach(t),fBr=i(j),wl=n(j,"LI",{});var kI=s(wl);a6e=n(kI,"STRONG",{});var laa=s(a6e);mBr=r(laa,"funnel"),laa.forEach(t),gBr=r(kI," \u2014 "),boe=n(kI,"A",{href:!0});var iaa=s(boe);hBr=r(iaa,"TFFunnelModel"),iaa.forEach(t),uBr=r(kI," or "),Foe=n(kI,"A",{href:!0});var daa=s(Foe);pBr=r(daa,"TFFunnelBaseModel"),daa.forEach(t),_Br=r(kI," (Funnel Transformer model)"),kI.forEach(t),vBr=i(j),EC=n(j,"LI",{});var MHe=s(EC);n6e=n(MHe,"STRONG",{});var caa=s(n6e);bBr=r(caa,"gpt2"),caa.forEach(t),FBr=r(MHe," \u2014 "),Toe=n(MHe,"A",{href:!0});var faa=s(Toe);TBr=r(faa,"TFGPT2Model"),faa.forEach(t),MBr=r(MHe," (OpenAI GPT-2 model)"),MHe.forEach(t),EBr=i(j),CC=n(j,"LI",{});var EHe=s(CC);s6e=n(EHe,"STRONG",{});var maa=s(s6e);CBr=r(maa,"gptj"),maa.forEach(t),wBr=r(EHe," \u2014 "),Moe=n(EHe,"A",{href:!0});var gaa=s(Moe);ABr=r(gaa,"TFGPTJModel"),gaa.forEach(t),LBr=r(EHe," (GPT-J model)"),EHe.forEach(t),yBr=i(j),wC=n(j,"LI",{});var CHe=s(wC);l6e=n(CHe,"STRONG",{});var haa=s(l6e);xBr=r(haa,"groupvit"),haa.forEach(t),$Br=r(CHe," \u2014 "),Eoe=n(CHe,"A",{href:!0});var uaa=s(Eoe);kBr=r(uaa,"TFGroupViTModel"),uaa.forEach(t),SBr=r(CHe," (GroupViT model)"),CHe.forEach(t),RBr=i(j),AC=n(j,"LI",{});var wHe=s(AC);i6e=n(wHe,"STRONG",{});var paa=s(i6e);PBr=r(paa,"hubert"),paa.forEach(t),BBr=r(wHe," \u2014 "),Coe=n(wHe,"A",{href:!0});var _aa=s(Coe);IBr=r(_aa,"TFHubertModel"),_aa.forEach(t),NBr=r(wHe," (Hubert model)"),wHe.forEach(t),qBr=i(j),LC=n(j,"LI",{});var AHe=s(LC);d6e=n(AHe,"STRONG",{});var vaa=s(d6e);jBr=r(vaa,"layoutlm"),vaa.forEach(t),DBr=r(AHe," \u2014 "),woe=n(AHe,"A",{href:!0});var baa=s(woe);GBr=r(baa,"TFLayoutLMModel"),baa.forEach(t),OBr=r(AHe," (LayoutLM model)"),AHe.forEach(t),VBr=i(j),yC=n(j,"LI",{});var LHe=s(yC);c6e=n(LHe,"STRONG",{});var Faa=s(c6e);XBr=r(Faa,"layoutlmv3"),Faa.forEach(t),zBr=r(LHe," \u2014 "),Aoe=n(LHe,"A",{href:!0});var Taa=s(Aoe);QBr=r(Taa,"TFLayoutLMv3Model"),Taa.forEach(t),WBr=r(LHe," (LayoutLMv3 model)"),LHe.forEach(t),UBr=i(j),xC=n(j,"LI",{});var yHe=s(xC);f6e=n(yHe,"STRONG",{});var Maa=s(f6e);HBr=r(Maa,"led"),Maa.forEach(t),JBr=r(yHe," \u2014 "),Loe=n(yHe,"A",{href:!0});var Eaa=s(Loe);YBr=r(Eaa,"TFLEDModel"),Eaa.forEach(t),ZBr=r(yHe," (LED model)"),yHe.forEach(t),KBr=i(j),$C=n(j,"LI",{});var xHe=s($C);m6e=n(xHe,"STRONG",{});var Caa=s(m6e);eIr=r(Caa,"longformer"),Caa.forEach(t),oIr=r(xHe," \u2014 "),yoe=n(xHe,"A",{href:!0});var waa=s(yoe);rIr=r(waa,"TFLongformerModel"),waa.forEach(t),tIr=r(xHe," (Longformer model)"),xHe.forEach(t),aIr=i(j),kC=n(j,"LI",{});var $He=s(kC);g6e=n($He,"STRONG",{});var Aaa=s(g6e);nIr=r(Aaa,"lxmert"),Aaa.forEach(t),sIr=r($He," \u2014 "),xoe=n($He,"A",{href:!0});var Laa=s(xoe);lIr=r(Laa,"TFLxmertModel"),Laa.forEach(t),iIr=r($He," (LXMERT model)"),$He.forEach(t),dIr=i(j),SC=n(j,"LI",{});var kHe=s(SC);h6e=n(kHe,"STRONG",{});var yaa=s(h6e);cIr=r(yaa,"marian"),yaa.forEach(t),fIr=r(kHe," \u2014 "),$oe=n(kHe,"A",{href:!0});var xaa=s($oe);mIr=r(xaa,"TFMarianModel"),xaa.forEach(t),gIr=r(kHe," (Marian model)"),kHe.forEach(t),hIr=i(j),RC=n(j,"LI",{});var SHe=s(RC);u6e=n(SHe,"STRONG",{});var $aa=s(u6e);uIr=r($aa,"mbart"),$aa.forEach(t),pIr=r(SHe," \u2014 "),koe=n(SHe,"A",{href:!0});var kaa=s(koe);_Ir=r(kaa,"TFMBartModel"),kaa.forEach(t),vIr=r(SHe," (mBART model)"),SHe.forEach(t),bIr=i(j),PC=n(j,"LI",{});var RHe=s(PC);p6e=n(RHe,"STRONG",{});var Saa=s(p6e);FIr=r(Saa,"mobilebert"),Saa.forEach(t),TIr=r(RHe," \u2014 "),Soe=n(RHe,"A",{href:!0});var Raa=s(Soe);MIr=r(Raa,"TFMobileBertModel"),Raa.forEach(t),EIr=r(RHe," (MobileBERT model)"),RHe.forEach(t),CIr=i(j),BC=n(j,"LI",{});var PHe=s(BC);_6e=n(PHe,"STRONG",{});var Paa=s(_6e);wIr=r(Paa,"mobilevit"),Paa.forEach(t),AIr=r(PHe," \u2014 "),Roe=n(PHe,"A",{href:!0});var Baa=s(Roe);LIr=r(Baa,"TFMobileViTModel"),Baa.forEach(t),yIr=r(PHe," (MobileViT model)"),PHe.forEach(t),xIr=i(j),IC=n(j,"LI",{});var BHe=s(IC);v6e=n(BHe,"STRONG",{});var Iaa=s(v6e);$Ir=r(Iaa,"mpnet"),Iaa.forEach(t),kIr=r(BHe," \u2014 "),Poe=n(BHe,"A",{href:!0});var Naa=s(Poe);SIr=r(Naa,"TFMPNetModel"),Naa.forEach(t),RIr=r(BHe," (MPNet model)"),BHe.forEach(t),PIr=i(j),NC=n(j,"LI",{});var IHe=s(NC);b6e=n(IHe,"STRONG",{});var qaa=s(b6e);BIr=r(qaa,"mt5"),qaa.forEach(t),IIr=r(IHe," \u2014 "),Boe=n(IHe,"A",{href:!0});var jaa=s(Boe);NIr=r(jaa,"TFMT5Model"),jaa.forEach(t),qIr=r(IHe," (MT5 model)"),IHe.forEach(t),jIr=i(j),qC=n(j,"LI",{});var NHe=s(qC);F6e=n(NHe,"STRONG",{});var Daa=s(F6e);DIr=r(Daa,"openai-gpt"),Daa.forEach(t),GIr=r(NHe," \u2014 "),Ioe=n(NHe,"A",{href:!0});var Gaa=s(Ioe);OIr=r(Gaa,"TFOpenAIGPTModel"),Gaa.forEach(t),VIr=r(NHe," (OpenAI GPT model)"),NHe.forEach(t),XIr=i(j),jC=n(j,"LI",{});var qHe=s(jC);T6e=n(qHe,"STRONG",{});var Oaa=s(T6e);zIr=r(Oaa,"opt"),Oaa.forEach(t),QIr=r(qHe," \u2014 "),Noe=n(qHe,"A",{href:!0});var Vaa=s(Noe);WIr=r(Vaa,"TFOPTModel"),Vaa.forEach(t),UIr=r(qHe," (OPT model)"),qHe.forEach(t),HIr=i(j),DC=n(j,"LI",{});var jHe=s(DC);M6e=n(jHe,"STRONG",{});var Xaa=s(M6e);JIr=r(Xaa,"pegasus"),Xaa.forEach(t),YIr=r(jHe," \u2014 "),qoe=n(jHe,"A",{href:!0});var zaa=s(qoe);ZIr=r(zaa,"TFPegasusModel"),zaa.forEach(t),KIr=r(jHe," (Pegasus model)"),jHe.forEach(t),eNr=i(j),GC=n(j,"LI",{});var DHe=s(GC);E6e=n(DHe,"STRONG",{});var Qaa=s(E6e);oNr=r(Qaa,"regnet"),Qaa.forEach(t),rNr=r(DHe," \u2014 "),joe=n(DHe,"A",{href:!0});var Waa=s(joe);tNr=r(Waa,"TFRegNetModel"),Waa.forEach(t),aNr=r(DHe," (RegNet model)"),DHe.forEach(t),nNr=i(j),OC=n(j,"LI",{});var GHe=s(OC);C6e=n(GHe,"STRONG",{});var Uaa=s(C6e);sNr=r(Uaa,"rembert"),Uaa.forEach(t),lNr=r(GHe," \u2014 "),Doe=n(GHe,"A",{href:!0});var Haa=s(Doe);iNr=r(Haa,"TFRemBertModel"),Haa.forEach(t),dNr=r(GHe," (RemBERT model)"),GHe.forEach(t),cNr=i(j),VC=n(j,"LI",{});var OHe=s(VC);w6e=n(OHe,"STRONG",{});var Jaa=s(w6e);fNr=r(Jaa,"resnet"),Jaa.forEach(t),mNr=r(OHe," \u2014 "),Goe=n(OHe,"A",{href:!0});var Yaa=s(Goe);gNr=r(Yaa,"TFResNetModel"),Yaa.forEach(t),hNr=r(OHe," (ResNet model)"),OHe.forEach(t),uNr=i(j),XC=n(j,"LI",{});var VHe=s(XC);A6e=n(VHe,"STRONG",{});var Zaa=s(A6e);pNr=r(Zaa,"roberta"),Zaa.forEach(t),_Nr=r(VHe," \u2014 "),Ooe=n(VHe,"A",{href:!0});var Kaa=s(Ooe);vNr=r(Kaa,"TFRobertaModel"),Kaa.forEach(t),bNr=r(VHe," (RoBERTa model)"),VHe.forEach(t),FNr=i(j),zC=n(j,"LI",{});var XHe=s(zC);L6e=n(XHe,"STRONG",{});var ena=s(L6e);TNr=r(ena,"roformer"),ena.forEach(t),MNr=r(XHe," \u2014 "),Voe=n(XHe,"A",{href:!0});var ona=s(Voe);ENr=r(ona,"TFRoFormerModel"),ona.forEach(t),CNr=r(XHe," (RoFormer model)"),XHe.forEach(t),wNr=i(j),QC=n(j,"LI",{});var zHe=s(QC);y6e=n(zHe,"STRONG",{});var rna=s(y6e);ANr=r(rna,"segformer"),rna.forEach(t),LNr=r(zHe," \u2014 "),Xoe=n(zHe,"A",{href:!0});var tna=s(Xoe);yNr=r(tna,"TFSegformerModel"),tna.forEach(t),xNr=r(zHe," (SegFormer model)"),zHe.forEach(t),$Nr=i(j),WC=n(j,"LI",{});var QHe=s(WC);x6e=n(QHe,"STRONG",{});var ana=s(x6e);kNr=r(ana,"speech_to_text"),ana.forEach(t),SNr=r(QHe," \u2014 "),zoe=n(QHe,"A",{href:!0});var nna=s(zoe);RNr=r(nna,"TFSpeech2TextModel"),nna.forEach(t),PNr=r(QHe," (Speech2Text model)"),QHe.forEach(t),BNr=i(j),UC=n(j,"LI",{});var WHe=s(UC);$6e=n(WHe,"STRONG",{});var sna=s($6e);INr=r(sna,"swin"),sna.forEach(t),NNr=r(WHe," \u2014 "),Qoe=n(WHe,"A",{href:!0});var lna=s(Qoe);qNr=r(lna,"TFSwinModel"),lna.forEach(t),jNr=r(WHe," (Swin Transformer model)"),WHe.forEach(t),DNr=i(j),HC=n(j,"LI",{});var UHe=s(HC);k6e=n(UHe,"STRONG",{});var ina=s(k6e);GNr=r(ina,"t5"),ina.forEach(t),ONr=r(UHe," \u2014 "),Woe=n(UHe,"A",{href:!0});var dna=s(Woe);VNr=r(dna,"TFT5Model"),dna.forEach(t),XNr=r(UHe," (T5 model)"),UHe.forEach(t),zNr=i(j),JC=n(j,"LI",{});var HHe=s(JC);S6e=n(HHe,"STRONG",{});var cna=s(S6e);QNr=r(cna,"tapas"),cna.forEach(t),WNr=r(HHe," \u2014 "),Uoe=n(HHe,"A",{href:!0});var fna=s(Uoe);UNr=r(fna,"TFTapasModel"),fna.forEach(t),HNr=r(HHe," (TAPAS model)"),HHe.forEach(t),JNr=i(j),YC=n(j,"LI",{});var JHe=s(YC);R6e=n(JHe,"STRONG",{});var mna=s(R6e);YNr=r(mna,"transfo-xl"),mna.forEach(t),ZNr=r(JHe," \u2014 "),Hoe=n(JHe,"A",{href:!0});var gna=s(Hoe);KNr=r(gna,"TFTransfoXLModel"),gna.forEach(t),eqr=r(JHe," (Transformer-XL model)"),JHe.forEach(t),oqr=i(j),ZC=n(j,"LI",{});var YHe=s(ZC);P6e=n(YHe,"STRONG",{});var hna=s(P6e);rqr=r(hna,"vit"),hna.forEach(t),tqr=r(YHe," \u2014 "),Joe=n(YHe,"A",{href:!0});var una=s(Joe);aqr=r(una,"TFViTModel"),una.forEach(t),nqr=r(YHe," (ViT model)"),YHe.forEach(t),sqr=i(j),KC=n(j,"LI",{});var ZHe=s(KC);B6e=n(ZHe,"STRONG",{});var pna=s(B6e);lqr=r(pna,"vit_mae"),pna.forEach(t),iqr=r(ZHe," \u2014 "),Yoe=n(ZHe,"A",{href:!0});var _na=s(Yoe);dqr=r(_na,"TFViTMAEModel"),_na.forEach(t),cqr=r(ZHe," (ViTMAE model)"),ZHe.forEach(t),fqr=i(j),e5=n(j,"LI",{});var KHe=s(e5);I6e=n(KHe,"STRONG",{});var vna=s(I6e);mqr=r(vna,"wav2vec2"),vna.forEach(t),gqr=r(KHe," \u2014 "),Zoe=n(KHe,"A",{href:!0});var bna=s(Zoe);hqr=r(bna,"TFWav2Vec2Model"),bna.forEach(t),uqr=r(KHe," (Wav2Vec2 model)"),KHe.forEach(t),pqr=i(j),o5=n(j,"LI",{});var eJe=s(o5);N6e=n(eJe,"STRONG",{});var Fna=s(N6e);_qr=r(Fna,"whisper"),Fna.forEach(t),vqr=r(eJe," \u2014 "),Koe=n(eJe,"A",{href:!0});var Tna=s(Koe);bqr=r(Tna,"TFWhisperModel"),Tna.forEach(t),Fqr=r(eJe," (Whisper model)"),eJe.forEach(t),Tqr=i(j),r5=n(j,"LI",{});var oJe=s(r5);q6e=n(oJe,"STRONG",{});var Mna=s(q6e);Mqr=r(Mna,"xglm"),Mna.forEach(t),Eqr=r(oJe," \u2014 "),ere=n(oJe,"A",{href:!0});var Ena=s(ere);Cqr=r(Ena,"TFXGLMModel"),Ena.forEach(t),wqr=r(oJe," (XGLM model)"),oJe.forEach(t),Aqr=i(j),t5=n(j,"LI",{});var rJe=s(t5);j6e=n(rJe,"STRONG",{});var Cna=s(j6e);Lqr=r(Cna,"xlm"),Cna.forEach(t),yqr=r(rJe," \u2014 "),ore=n(rJe,"A",{href:!0});var wna=s(ore);xqr=r(wna,"TFXLMModel"),wna.forEach(t),$qr=r(rJe," (XLM model)"),rJe.forEach(t),kqr=i(j),a5=n(j,"LI",{});var tJe=s(a5);D6e=n(tJe,"STRONG",{});var Ana=s(D6e);Sqr=r(Ana,"xlm-roberta"),Ana.forEach(t),Rqr=r(tJe," \u2014 "),rre=n(tJe,"A",{href:!0});var Lna=s(rre);Pqr=r(Lna,"TFXLMRobertaModel"),Lna.forEach(t),Bqr=r(tJe," (XLM-RoBERTa model)"),tJe.forEach(t),Iqr=i(j),n5=n(j,"LI",{});var aJe=s(n5);G6e=n(aJe,"STRONG",{});var yna=s(G6e);Nqr=r(yna,"xlnet"),yna.forEach(t),qqr=r(aJe," \u2014 "),tre=n(aJe,"A",{href:!0});var xna=s(tre);jqr=r(xna,"TFXLNetModel"),xna.forEach(t),Dqr=r(aJe," (XLNet model)"),aJe.forEach(t),j.forEach(t),Gqr=i(ii),T(s5.$$.fragment,ii),ii.forEach(t),li.forEach(t),kro=i(f),of=n(f,"H2",{class:!0});var Wao=s(of);l5=n(Wao,"A",{id:!0,class:!0,href:!0});var $na=s(l5);O6e=n($na,"SPAN",{});var kna=s(O6e);T(SS.$$.fragment,kna),kna.forEach(t),$na.forEach(t),Oqr=i(Wao),V6e=n(Wao,"SPAN",{});var Sna=s(V6e);Vqr=r(Sna,"TFAutoModelForPreTraining"),Sna.forEach(t),Wao.forEach(t),Sro=i(f),dr=n(f,"DIV",{class:!0});var di=s(dr);T(RS.$$.fragment,di),Xqr=i(di),rf=n(di,"P",{});var Hde=s(rf);zqr=r(Hde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),are=n(Hde,"A",{href:!0});var Rna=s(are);Qqr=r(Rna,"from_pretrained()"),Rna.forEach(t),Wqr=r(Hde," class method or the "),nre=n(Hde,"A",{href:!0});var Pna=s(nre);Uqr=r(Pna,"from_config()"),Pna.forEach(t),Hqr=r(Hde,` class
method.`),Hde.forEach(t),Jqr=i(di),PS=n(di,"P",{});var Uao=s(PS);Yqr=r(Uao,"This class cannot be instantiated directly using "),X6e=n(Uao,"CODE",{});var Bna=s(X6e);Zqr=r(Bna,"__init__()"),Bna.forEach(t),Kqr=r(Uao," (throws an error)."),Uao.forEach(t),ejr=i(di),Ut=n(di,"DIV",{class:!0});var C9=s(Ut);T(BS.$$.fragment,C9),ojr=i(C9),z6e=n(C9,"P",{});var Ina=s(z6e);rjr=r(Ina,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ina.forEach(t),tjr=i(C9),tf=n(C9,"P",{});var Jde=s(tf);ajr=r(Jde,`Note:
Loading a model from its configuration file does `),Q6e=n(Jde,"STRONG",{});var Nna=s(Q6e);njr=r(Nna,"not"),Nna.forEach(t),sjr=r(Jde,` load the model weights. It only affects the
model\u2019s configuration. Use `),sre=n(Jde,"A",{href:!0});var qna=s(sre);ljr=r(qna,"from_pretrained()"),qna.forEach(t),ijr=r(Jde," to load the model weights."),Jde.forEach(t),djr=i(C9),T(i5.$$.fragment,C9),C9.forEach(t),cjr=i(di),jr=n(di,"DIV",{class:!0});var ci=s(jr);T(IS.$$.fragment,ci),fjr=i(ci),W6e=n(ci,"P",{});var jna=s(W6e);mjr=r(jna,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),jna.forEach(t),gjr=i(ci),kn=n(ci,"P",{});var w9=s(kn);hjr=r(w9,"The model class to instantiate is selected based on the "),U6e=n(w9,"CODE",{});var Dna=s(U6e);ujr=r(Dna,"model_type"),Dna.forEach(t),pjr=r(w9,` property of the config object (either
passed as an argument or loaded from `),H6e=n(w9,"CODE",{});var Gna=s(H6e);_jr=r(Gna,"pretrained_model_name_or_path"),Gna.forEach(t),vjr=r(w9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J6e=n(w9,"CODE",{});var Ona=s(J6e);bjr=r(Ona,"pretrained_model_name_or_path"),Ona.forEach(t),Fjr=r(w9,":"),w9.forEach(t),Tjr=i(ci),le=n(ci,"UL",{});var de=s(le);d5=n(de,"LI",{});var nJe=s(d5);Y6e=n(nJe,"STRONG",{});var Vna=s(Y6e);Mjr=r(Vna,"albert"),Vna.forEach(t),Ejr=r(nJe," \u2014 "),lre=n(nJe,"A",{href:!0});var Xna=s(lre);Cjr=r(Xna,"TFAlbertForPreTraining"),Xna.forEach(t),wjr=r(nJe," (ALBERT model)"),nJe.forEach(t),Ajr=i(de),c5=n(de,"LI",{});var sJe=s(c5);Z6e=n(sJe,"STRONG",{});var zna=s(Z6e);Ljr=r(zna,"bart"),zna.forEach(t),yjr=r(sJe," \u2014 "),ire=n(sJe,"A",{href:!0});var Qna=s(ire);xjr=r(Qna,"TFBartForConditionalGeneration"),Qna.forEach(t),$jr=r(sJe," (BART model)"),sJe.forEach(t),kjr=i(de),f5=n(de,"LI",{});var lJe=s(f5);K6e=n(lJe,"STRONG",{});var Wna=s(K6e);Sjr=r(Wna,"bert"),Wna.forEach(t),Rjr=r(lJe," \u2014 "),dre=n(lJe,"A",{href:!0});var Una=s(dre);Pjr=r(Una,"TFBertForPreTraining"),Una.forEach(t),Bjr=r(lJe," (BERT model)"),lJe.forEach(t),Ijr=i(de),m5=n(de,"LI",{});var iJe=s(m5);e7e=n(iJe,"STRONG",{});var Hna=s(e7e);Njr=r(Hna,"camembert"),Hna.forEach(t),qjr=r(iJe," \u2014 "),cre=n(iJe,"A",{href:!0});var Jna=s(cre);jjr=r(Jna,"TFCamembertForMaskedLM"),Jna.forEach(t),Djr=r(iJe," (CamemBERT model)"),iJe.forEach(t),Gjr=i(de),g5=n(de,"LI",{});var dJe=s(g5);o7e=n(dJe,"STRONG",{});var Yna=s(o7e);Ojr=r(Yna,"ctrl"),Yna.forEach(t),Vjr=r(dJe," \u2014 "),fre=n(dJe,"A",{href:!0});var Zna=s(fre);Xjr=r(Zna,"TFCTRLLMHeadModel"),Zna.forEach(t),zjr=r(dJe," (CTRL model)"),dJe.forEach(t),Qjr=i(de),h5=n(de,"LI",{});var cJe=s(h5);r7e=n(cJe,"STRONG",{});var Kna=s(r7e);Wjr=r(Kna,"distilbert"),Kna.forEach(t),Ujr=r(cJe," \u2014 "),mre=n(cJe,"A",{href:!0});var esa=s(mre);Hjr=r(esa,"TFDistilBertForMaskedLM"),esa.forEach(t),Jjr=r(cJe," (DistilBERT model)"),cJe.forEach(t),Yjr=i(de),u5=n(de,"LI",{});var fJe=s(u5);t7e=n(fJe,"STRONG",{});var osa=s(t7e);Zjr=r(osa,"electra"),osa.forEach(t),Kjr=r(fJe," \u2014 "),gre=n(fJe,"A",{href:!0});var rsa=s(gre);eDr=r(rsa,"TFElectraForPreTraining"),rsa.forEach(t),oDr=r(fJe," (ELECTRA model)"),fJe.forEach(t),rDr=i(de),p5=n(de,"LI",{});var mJe=s(p5);a7e=n(mJe,"STRONG",{});var tsa=s(a7e);tDr=r(tsa,"flaubert"),tsa.forEach(t),aDr=r(mJe," \u2014 "),hre=n(mJe,"A",{href:!0});var asa=s(hre);nDr=r(asa,"TFFlaubertWithLMHeadModel"),asa.forEach(t),sDr=r(mJe," (FlauBERT model)"),mJe.forEach(t),lDr=i(de),_5=n(de,"LI",{});var gJe=s(_5);n7e=n(gJe,"STRONG",{});var nsa=s(n7e);iDr=r(nsa,"funnel"),nsa.forEach(t),dDr=r(gJe," \u2014 "),ure=n(gJe,"A",{href:!0});var ssa=s(ure);cDr=r(ssa,"TFFunnelForPreTraining"),ssa.forEach(t),fDr=r(gJe," (Funnel Transformer model)"),gJe.forEach(t),mDr=i(de),v5=n(de,"LI",{});var hJe=s(v5);s7e=n(hJe,"STRONG",{});var lsa=s(s7e);gDr=r(lsa,"gpt2"),lsa.forEach(t),hDr=r(hJe," \u2014 "),pre=n(hJe,"A",{href:!0});var isa=s(pre);uDr=r(isa,"TFGPT2LMHeadModel"),isa.forEach(t),pDr=r(hJe," (OpenAI GPT-2 model)"),hJe.forEach(t),_Dr=i(de),b5=n(de,"LI",{});var uJe=s(b5);l7e=n(uJe,"STRONG",{});var dsa=s(l7e);vDr=r(dsa,"layoutlm"),dsa.forEach(t),bDr=r(uJe," \u2014 "),_re=n(uJe,"A",{href:!0});var csa=s(_re);FDr=r(csa,"TFLayoutLMForMaskedLM"),csa.forEach(t),TDr=r(uJe," (LayoutLM model)"),uJe.forEach(t),MDr=i(de),F5=n(de,"LI",{});var pJe=s(F5);i7e=n(pJe,"STRONG",{});var fsa=s(i7e);EDr=r(fsa,"lxmert"),fsa.forEach(t),CDr=r(pJe," \u2014 "),vre=n(pJe,"A",{href:!0});var msa=s(vre);wDr=r(msa,"TFLxmertForPreTraining"),msa.forEach(t),ADr=r(pJe," (LXMERT model)"),pJe.forEach(t),LDr=i(de),T5=n(de,"LI",{});var _Je=s(T5);d7e=n(_Je,"STRONG",{});var gsa=s(d7e);yDr=r(gsa,"mobilebert"),gsa.forEach(t),xDr=r(_Je," \u2014 "),bre=n(_Je,"A",{href:!0});var hsa=s(bre);$Dr=r(hsa,"TFMobileBertForPreTraining"),hsa.forEach(t),kDr=r(_Je," (MobileBERT model)"),_Je.forEach(t),SDr=i(de),M5=n(de,"LI",{});var vJe=s(M5);c7e=n(vJe,"STRONG",{});var usa=s(c7e);RDr=r(usa,"mpnet"),usa.forEach(t),PDr=r(vJe," \u2014 "),Fre=n(vJe,"A",{href:!0});var psa=s(Fre);BDr=r(psa,"TFMPNetForMaskedLM"),psa.forEach(t),IDr=r(vJe," (MPNet model)"),vJe.forEach(t),NDr=i(de),E5=n(de,"LI",{});var bJe=s(E5);f7e=n(bJe,"STRONG",{});var _sa=s(f7e);qDr=r(_sa,"openai-gpt"),_sa.forEach(t),jDr=r(bJe," \u2014 "),Tre=n(bJe,"A",{href:!0});var vsa=s(Tre);DDr=r(vsa,"TFOpenAIGPTLMHeadModel"),vsa.forEach(t),GDr=r(bJe," (OpenAI GPT model)"),bJe.forEach(t),ODr=i(de),C5=n(de,"LI",{});var FJe=s(C5);m7e=n(FJe,"STRONG",{});var bsa=s(m7e);VDr=r(bsa,"roberta"),bsa.forEach(t),XDr=r(FJe," \u2014 "),Mre=n(FJe,"A",{href:!0});var Fsa=s(Mre);zDr=r(Fsa,"TFRobertaForMaskedLM"),Fsa.forEach(t),QDr=r(FJe," (RoBERTa model)"),FJe.forEach(t),WDr=i(de),w5=n(de,"LI",{});var TJe=s(w5);g7e=n(TJe,"STRONG",{});var Tsa=s(g7e);UDr=r(Tsa,"t5"),Tsa.forEach(t),HDr=r(TJe," \u2014 "),Ere=n(TJe,"A",{href:!0});var Msa=s(Ere);JDr=r(Msa,"TFT5ForConditionalGeneration"),Msa.forEach(t),YDr=r(TJe," (T5 model)"),TJe.forEach(t),ZDr=i(de),A5=n(de,"LI",{});var MJe=s(A5);h7e=n(MJe,"STRONG",{});var Esa=s(h7e);KDr=r(Esa,"tapas"),Esa.forEach(t),eGr=r(MJe," \u2014 "),Cre=n(MJe,"A",{href:!0});var Csa=s(Cre);oGr=r(Csa,"TFTapasForMaskedLM"),Csa.forEach(t),rGr=r(MJe," (TAPAS model)"),MJe.forEach(t),tGr=i(de),L5=n(de,"LI",{});var EJe=s(L5);u7e=n(EJe,"STRONG",{});var wsa=s(u7e);aGr=r(wsa,"transfo-xl"),wsa.forEach(t),nGr=r(EJe," \u2014 "),wre=n(EJe,"A",{href:!0});var Asa=s(wre);sGr=r(Asa,"TFTransfoXLLMHeadModel"),Asa.forEach(t),lGr=r(EJe," (Transformer-XL model)"),EJe.forEach(t),iGr=i(de),y5=n(de,"LI",{});var CJe=s(y5);p7e=n(CJe,"STRONG",{});var Lsa=s(p7e);dGr=r(Lsa,"vit_mae"),Lsa.forEach(t),cGr=r(CJe," \u2014 "),Are=n(CJe,"A",{href:!0});var ysa=s(Are);fGr=r(ysa,"TFViTMAEForPreTraining"),ysa.forEach(t),mGr=r(CJe," (ViTMAE model)"),CJe.forEach(t),gGr=i(de),x5=n(de,"LI",{});var wJe=s(x5);_7e=n(wJe,"STRONG",{});var xsa=s(_7e);hGr=r(xsa,"xlm"),xsa.forEach(t),uGr=r(wJe," \u2014 "),Lre=n(wJe,"A",{href:!0});var $sa=s(Lre);pGr=r($sa,"TFXLMWithLMHeadModel"),$sa.forEach(t),_Gr=r(wJe," (XLM model)"),wJe.forEach(t),vGr=i(de),$5=n(de,"LI",{});var AJe=s($5);v7e=n(AJe,"STRONG",{});var ksa=s(v7e);bGr=r(ksa,"xlm-roberta"),ksa.forEach(t),FGr=r(AJe," \u2014 "),yre=n(AJe,"A",{href:!0});var Ssa=s(yre);TGr=r(Ssa,"TFXLMRobertaForMaskedLM"),Ssa.forEach(t),MGr=r(AJe," (XLM-RoBERTa model)"),AJe.forEach(t),EGr=i(de),k5=n(de,"LI",{});var LJe=s(k5);b7e=n(LJe,"STRONG",{});var Rsa=s(b7e);CGr=r(Rsa,"xlnet"),Rsa.forEach(t),wGr=r(LJe," \u2014 "),xre=n(LJe,"A",{href:!0});var Psa=s(xre);AGr=r(Psa,"TFXLNetLMHeadModel"),Psa.forEach(t),LGr=r(LJe," (XLNet model)"),LJe.forEach(t),de.forEach(t),yGr=i(ci),T(S5.$$.fragment,ci),ci.forEach(t),di.forEach(t),Rro=i(f),af=n(f,"H2",{class:!0});var Hao=s(af);R5=n(Hao,"A",{id:!0,class:!0,href:!0});var Bsa=s(R5);F7e=n(Bsa,"SPAN",{});var Isa=s(F7e);T(NS.$$.fragment,Isa),Isa.forEach(t),Bsa.forEach(t),xGr=i(Hao),T7e=n(Hao,"SPAN",{});var Nsa=s(T7e);$Gr=r(Nsa,"TFAutoModelForCausalLM"),Nsa.forEach(t),Hao.forEach(t),Pro=i(f),cr=n(f,"DIV",{class:!0});var fi=s(cr);T(qS.$$.fragment,fi),kGr=i(fi),nf=n(fi,"P",{});var Yde=s(nf);SGr=r(Yde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$re=n(Yde,"A",{href:!0});var qsa=s($re);RGr=r(qsa,"from_pretrained()"),qsa.forEach(t),PGr=r(Yde," class method or the "),kre=n(Yde,"A",{href:!0});var jsa=s(kre);BGr=r(jsa,"from_config()"),jsa.forEach(t),IGr=r(Yde,` class
method.`),Yde.forEach(t),NGr=i(fi),jS=n(fi,"P",{});var Jao=s(jS);qGr=r(Jao,"This class cannot be instantiated directly using "),M7e=n(Jao,"CODE",{});var Dsa=s(M7e);jGr=r(Dsa,"__init__()"),Dsa.forEach(t),DGr=r(Jao," (throws an error)."),Jao.forEach(t),GGr=i(fi),Ht=n(fi,"DIV",{class:!0});var A9=s(Ht);T(DS.$$.fragment,A9),OGr=i(A9),E7e=n(A9,"P",{});var Gsa=s(E7e);VGr=r(Gsa,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Gsa.forEach(t),XGr=i(A9),sf=n(A9,"P",{});var Zde=s(sf);zGr=r(Zde,`Note:
Loading a model from its configuration file does `),C7e=n(Zde,"STRONG",{});var Osa=s(C7e);QGr=r(Osa,"not"),Osa.forEach(t),WGr=r(Zde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sre=n(Zde,"A",{href:!0});var Vsa=s(Sre);UGr=r(Vsa,"from_pretrained()"),Vsa.forEach(t),HGr=r(Zde," to load the model weights."),Zde.forEach(t),JGr=i(A9),T(P5.$$.fragment,A9),A9.forEach(t),YGr=i(fi),Dr=n(fi,"DIV",{class:!0});var mi=s(Dr);T(GS.$$.fragment,mi),ZGr=i(mi),w7e=n(mi,"P",{});var Xsa=s(w7e);KGr=r(Xsa,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Xsa.forEach(t),eOr=i(mi),Sn=n(mi,"P",{});var L9=s(Sn);oOr=r(L9,"The model class to instantiate is selected based on the "),A7e=n(L9,"CODE",{});var zsa=s(A7e);rOr=r(zsa,"model_type"),zsa.forEach(t),tOr=r(L9,` property of the config object (either
passed as an argument or loaded from `),L7e=n(L9,"CODE",{});var Qsa=s(L7e);aOr=r(Qsa,"pretrained_model_name_or_path"),Qsa.forEach(t),nOr=r(L9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y7e=n(L9,"CODE",{});var Wsa=s(y7e);sOr=r(Wsa,"pretrained_model_name_or_path"),Wsa.forEach(t),lOr=r(L9,":"),L9.forEach(t),iOr=i(mi),Me=n(mi,"UL",{});var Ce=s(Me);B5=n(Ce,"LI",{});var yJe=s(B5);x7e=n(yJe,"STRONG",{});var Usa=s(x7e);dOr=r(Usa,"bert"),Usa.forEach(t),cOr=r(yJe," \u2014 "),Rre=n(yJe,"A",{href:!0});var Hsa=s(Rre);fOr=r(Hsa,"TFBertLMHeadModel"),Hsa.forEach(t),mOr=r(yJe," (BERT model)"),yJe.forEach(t),gOr=i(Ce),I5=n(Ce,"LI",{});var xJe=s(I5);$7e=n(xJe,"STRONG",{});var Jsa=s($7e);hOr=r(Jsa,"camembert"),Jsa.forEach(t),uOr=r(xJe," \u2014 "),Pre=n(xJe,"A",{href:!0});var Ysa=s(Pre);pOr=r(Ysa,"TFCamembertForCausalLM"),Ysa.forEach(t),_Or=r(xJe," (CamemBERT model)"),xJe.forEach(t),vOr=i(Ce),N5=n(Ce,"LI",{});var $Je=s(N5);k7e=n($Je,"STRONG",{});var Zsa=s(k7e);bOr=r(Zsa,"ctrl"),Zsa.forEach(t),FOr=r($Je," \u2014 "),Bre=n($Je,"A",{href:!0});var Ksa=s(Bre);TOr=r(Ksa,"TFCTRLLMHeadModel"),Ksa.forEach(t),MOr=r($Je," (CTRL model)"),$Je.forEach(t),EOr=i(Ce),q5=n(Ce,"LI",{});var kJe=s(q5);S7e=n(kJe,"STRONG",{});var ela=s(S7e);COr=r(ela,"gpt2"),ela.forEach(t),wOr=r(kJe," \u2014 "),Ire=n(kJe,"A",{href:!0});var ola=s(Ire);AOr=r(ola,"TFGPT2LMHeadModel"),ola.forEach(t),LOr=r(kJe," (OpenAI GPT-2 model)"),kJe.forEach(t),yOr=i(Ce),j5=n(Ce,"LI",{});var SJe=s(j5);R7e=n(SJe,"STRONG",{});var rla=s(R7e);xOr=r(rla,"gptj"),rla.forEach(t),$Or=r(SJe," \u2014 "),Nre=n(SJe,"A",{href:!0});var tla=s(Nre);kOr=r(tla,"TFGPTJForCausalLM"),tla.forEach(t),SOr=r(SJe," (GPT-J model)"),SJe.forEach(t),ROr=i(Ce),D5=n(Ce,"LI",{});var RJe=s(D5);P7e=n(RJe,"STRONG",{});var ala=s(P7e);POr=r(ala,"openai-gpt"),ala.forEach(t),BOr=r(RJe," \u2014 "),qre=n(RJe,"A",{href:!0});var nla=s(qre);IOr=r(nla,"TFOpenAIGPTLMHeadModel"),nla.forEach(t),NOr=r(RJe," (OpenAI GPT model)"),RJe.forEach(t),qOr=i(Ce),G5=n(Ce,"LI",{});var PJe=s(G5);B7e=n(PJe,"STRONG",{});var sla=s(B7e);jOr=r(sla,"opt"),sla.forEach(t),DOr=r(PJe," \u2014 "),jre=n(PJe,"A",{href:!0});var lla=s(jre);GOr=r(lla,"TFOPTForCausalLM"),lla.forEach(t),OOr=r(PJe," (OPT model)"),PJe.forEach(t),VOr=i(Ce),O5=n(Ce,"LI",{});var BJe=s(O5);I7e=n(BJe,"STRONG",{});var ila=s(I7e);XOr=r(ila,"rembert"),ila.forEach(t),zOr=r(BJe," \u2014 "),Dre=n(BJe,"A",{href:!0});var dla=s(Dre);QOr=r(dla,"TFRemBertForCausalLM"),dla.forEach(t),WOr=r(BJe," (RemBERT model)"),BJe.forEach(t),UOr=i(Ce),V5=n(Ce,"LI",{});var IJe=s(V5);N7e=n(IJe,"STRONG",{});var cla=s(N7e);HOr=r(cla,"roberta"),cla.forEach(t),JOr=r(IJe," \u2014 "),Gre=n(IJe,"A",{href:!0});var fla=s(Gre);YOr=r(fla,"TFRobertaForCausalLM"),fla.forEach(t),ZOr=r(IJe," (RoBERTa model)"),IJe.forEach(t),KOr=i(Ce),X5=n(Ce,"LI",{});var NJe=s(X5);q7e=n(NJe,"STRONG",{});var mla=s(q7e);eVr=r(mla,"roformer"),mla.forEach(t),oVr=r(NJe," \u2014 "),Ore=n(NJe,"A",{href:!0});var gla=s(Ore);rVr=r(gla,"TFRoFormerForCausalLM"),gla.forEach(t),tVr=r(NJe," (RoFormer model)"),NJe.forEach(t),aVr=i(Ce),z5=n(Ce,"LI",{});var qJe=s(z5);j7e=n(qJe,"STRONG",{});var hla=s(j7e);nVr=r(hla,"transfo-xl"),hla.forEach(t),sVr=r(qJe," \u2014 "),Vre=n(qJe,"A",{href:!0});var ula=s(Vre);lVr=r(ula,"TFTransfoXLLMHeadModel"),ula.forEach(t),iVr=r(qJe," (Transformer-XL model)"),qJe.forEach(t),dVr=i(Ce),Q5=n(Ce,"LI",{});var jJe=s(Q5);D7e=n(jJe,"STRONG",{});var pla=s(D7e);cVr=r(pla,"xglm"),pla.forEach(t),fVr=r(jJe," \u2014 "),Xre=n(jJe,"A",{href:!0});var _la=s(Xre);mVr=r(_la,"TFXGLMForCausalLM"),_la.forEach(t),gVr=r(jJe," (XGLM model)"),jJe.forEach(t),hVr=i(Ce),W5=n(Ce,"LI",{});var DJe=s(W5);G7e=n(DJe,"STRONG",{});var vla=s(G7e);uVr=r(vla,"xlm"),vla.forEach(t),pVr=r(DJe," \u2014 "),zre=n(DJe,"A",{href:!0});var bla=s(zre);_Vr=r(bla,"TFXLMWithLMHeadModel"),bla.forEach(t),vVr=r(DJe," (XLM model)"),DJe.forEach(t),bVr=i(Ce),U5=n(Ce,"LI",{});var GJe=s(U5);O7e=n(GJe,"STRONG",{});var Fla=s(O7e);FVr=r(Fla,"xlnet"),Fla.forEach(t),TVr=r(GJe," \u2014 "),Qre=n(GJe,"A",{href:!0});var Tla=s(Qre);MVr=r(Tla,"TFXLNetLMHeadModel"),Tla.forEach(t),EVr=r(GJe," (XLNet model)"),GJe.forEach(t),Ce.forEach(t),CVr=i(mi),T(H5.$$.fragment,mi),mi.forEach(t),fi.forEach(t),Bro=i(f),lf=n(f,"H2",{class:!0});var Yao=s(lf);J5=n(Yao,"A",{id:!0,class:!0,href:!0});var Mla=s(J5);V7e=n(Mla,"SPAN",{});var Ela=s(V7e);T(OS.$$.fragment,Ela),Ela.forEach(t),Mla.forEach(t),wVr=i(Yao),X7e=n(Yao,"SPAN",{});var Cla=s(X7e);AVr=r(Cla,"TFAutoModelForImageClassification"),Cla.forEach(t),Yao.forEach(t),Iro=i(f),fr=n(f,"DIV",{class:!0});var gi=s(fr);T(VS.$$.fragment,gi),LVr=i(gi),df=n(gi,"P",{});var Kde=s(df);yVr=r(Kde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Wre=n(Kde,"A",{href:!0});var wla=s(Wre);xVr=r(wla,"from_pretrained()"),wla.forEach(t),$Vr=r(Kde," class method or the "),Ure=n(Kde,"A",{href:!0});var Ala=s(Ure);kVr=r(Ala,"from_config()"),Ala.forEach(t),SVr=r(Kde,` class
method.`),Kde.forEach(t),RVr=i(gi),XS=n(gi,"P",{});var Zao=s(XS);PVr=r(Zao,"This class cannot be instantiated directly using "),z7e=n(Zao,"CODE",{});var Lla=s(z7e);BVr=r(Lla,"__init__()"),Lla.forEach(t),IVr=r(Zao," (throws an error)."),Zao.forEach(t),NVr=i(gi),Jt=n(gi,"DIV",{class:!0});var y9=s(Jt);T(zS.$$.fragment,y9),qVr=i(y9),Q7e=n(y9,"P",{});var yla=s(Q7e);jVr=r(yla,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),yla.forEach(t),DVr=i(y9),cf=n(y9,"P",{});var ece=s(cf);GVr=r(ece,`Note:
Loading a model from its configuration file does `),W7e=n(ece,"STRONG",{});var xla=s(W7e);OVr=r(xla,"not"),xla.forEach(t),VVr=r(ece,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hre=n(ece,"A",{href:!0});var $la=s(Hre);XVr=r($la,"from_pretrained()"),$la.forEach(t),zVr=r(ece," to load the model weights."),ece.forEach(t),QVr=i(y9),T(Y5.$$.fragment,y9),y9.forEach(t),WVr=i(gi),Gr=n(gi,"DIV",{class:!0});var hi=s(Gr);T(QS.$$.fragment,hi),UVr=i(hi),U7e=n(hi,"P",{});var kla=s(U7e);HVr=r(kla,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),kla.forEach(t),JVr=i(hi),Rn=n(hi,"P",{});var x9=s(Rn);YVr=r(x9,"The model class to instantiate is selected based on the "),H7e=n(x9,"CODE",{});var Sla=s(H7e);ZVr=r(Sla,"model_type"),Sla.forEach(t),KVr=r(x9,` property of the config object (either
passed as an argument or loaded from `),J7e=n(x9,"CODE",{});var Rla=s(J7e);eXr=r(Rla,"pretrained_model_name_or_path"),Rla.forEach(t),oXr=r(x9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y7e=n(x9,"CODE",{});var Pla=s(Y7e);rXr=r(Pla,"pretrained_model_name_or_path"),Pla.forEach(t),tXr=r(x9,":"),x9.forEach(t),aXr=i(hi),Be=n(hi,"UL",{});var We=s(Be);Z5=n(We,"LI",{});var OJe=s(Z5);Z7e=n(OJe,"STRONG",{});var Bla=s(Z7e);nXr=r(Bla,"convnext"),Bla.forEach(t),sXr=r(OJe," \u2014 "),Jre=n(OJe,"A",{href:!0});var Ila=s(Jre);lXr=r(Ila,"TFConvNextForImageClassification"),Ila.forEach(t),iXr=r(OJe," (ConvNeXT model)"),OJe.forEach(t),dXr=i(We),K5=n(We,"LI",{});var VJe=s(K5);K7e=n(VJe,"STRONG",{});var Nla=s(K7e);cXr=r(Nla,"data2vec-vision"),Nla.forEach(t),fXr=r(VJe," \u2014 "),Yre=n(VJe,"A",{href:!0});var qla=s(Yre);mXr=r(qla,"TFData2VecVisionForImageClassification"),qla.forEach(t),gXr=r(VJe," (Data2VecVision model)"),VJe.forEach(t),hXr=i(We),Al=n(We,"LI",{});var SI=s(Al);eLe=n(SI,"STRONG",{});var jla=s(eLe);uXr=r(jla,"deit"),jla.forEach(t),pXr=r(SI," \u2014 "),Zre=n(SI,"A",{href:!0});var Dla=s(Zre);_Xr=r(Dla,"TFDeiTForImageClassification"),Dla.forEach(t),vXr=r(SI," or "),Kre=n(SI,"A",{href:!0});var Gla=s(Kre);bXr=r(Gla,"TFDeiTForImageClassificationWithTeacher"),Gla.forEach(t),FXr=r(SI," (DeiT model)"),SI.forEach(t),TXr=i(We),ew=n(We,"LI",{});var XJe=s(ew);oLe=n(XJe,"STRONG",{});var Ola=s(oLe);MXr=r(Ola,"mobilevit"),Ola.forEach(t),EXr=r(XJe," \u2014 "),ete=n(XJe,"A",{href:!0});var Vla=s(ete);CXr=r(Vla,"TFMobileViTForImageClassification"),Vla.forEach(t),wXr=r(XJe," (MobileViT model)"),XJe.forEach(t),AXr=i(We),ow=n(We,"LI",{});var zJe=s(ow);rLe=n(zJe,"STRONG",{});var Xla=s(rLe);LXr=r(Xla,"regnet"),Xla.forEach(t),yXr=r(zJe," \u2014 "),ote=n(zJe,"A",{href:!0});var zla=s(ote);xXr=r(zla,"TFRegNetForImageClassification"),zla.forEach(t),$Xr=r(zJe," (RegNet model)"),zJe.forEach(t),kXr=i(We),rw=n(We,"LI",{});var QJe=s(rw);tLe=n(QJe,"STRONG",{});var Qla=s(tLe);SXr=r(Qla,"resnet"),Qla.forEach(t),RXr=r(QJe," \u2014 "),rte=n(QJe,"A",{href:!0});var Wla=s(rte);PXr=r(Wla,"TFResNetForImageClassification"),Wla.forEach(t),BXr=r(QJe," (ResNet model)"),QJe.forEach(t),IXr=i(We),tw=n(We,"LI",{});var WJe=s(tw);aLe=n(WJe,"STRONG",{});var Ula=s(aLe);NXr=r(Ula,"segformer"),Ula.forEach(t),qXr=r(WJe," \u2014 "),tte=n(WJe,"A",{href:!0});var Hla=s(tte);jXr=r(Hla,"TFSegformerForImageClassification"),Hla.forEach(t),DXr=r(WJe," (SegFormer model)"),WJe.forEach(t),GXr=i(We),aw=n(We,"LI",{});var UJe=s(aw);nLe=n(UJe,"STRONG",{});var Jla=s(nLe);OXr=r(Jla,"swin"),Jla.forEach(t),VXr=r(UJe," \u2014 "),ate=n(UJe,"A",{href:!0});var Yla=s(ate);XXr=r(Yla,"TFSwinForImageClassification"),Yla.forEach(t),zXr=r(UJe," (Swin Transformer model)"),UJe.forEach(t),QXr=i(We),nw=n(We,"LI",{});var HJe=s(nw);sLe=n(HJe,"STRONG",{});var Zla=s(sLe);WXr=r(Zla,"vit"),Zla.forEach(t),UXr=r(HJe," \u2014 "),nte=n(HJe,"A",{href:!0});var Kla=s(nte);HXr=r(Kla,"TFViTForImageClassification"),Kla.forEach(t),JXr=r(HJe," (ViT model)"),HJe.forEach(t),We.forEach(t),YXr=i(hi),T(sw.$$.fragment,hi),hi.forEach(t),gi.forEach(t),Nro=i(f),ff=n(f,"H2",{class:!0});var Kao=s(ff);lw=n(Kao,"A",{id:!0,class:!0,href:!0});var eia=s(lw);lLe=n(eia,"SPAN",{});var oia=s(lLe);T(WS.$$.fragment,oia),oia.forEach(t),eia.forEach(t),ZXr=i(Kao),iLe=n(Kao,"SPAN",{});var ria=s(iLe);KXr=r(ria,"TFAutoModelForSemanticSegmentation"),ria.forEach(t),Kao.forEach(t),qro=i(f),mr=n(f,"DIV",{class:!0});var ui=s(mr);T(US.$$.fragment,ui),ezr=i(ui),mf=n(ui,"P",{});var oce=s(mf);ozr=r(oce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),ste=n(oce,"A",{href:!0});var tia=s(ste);rzr=r(tia,"from_pretrained()"),tia.forEach(t),tzr=r(oce," class method or the "),lte=n(oce,"A",{href:!0});var aia=s(lte);azr=r(aia,"from_config()"),aia.forEach(t),nzr=r(oce,` class
method.`),oce.forEach(t),szr=i(ui),HS=n(ui,"P",{});var eno=s(HS);lzr=r(eno,"This class cannot be instantiated directly using "),dLe=n(eno,"CODE",{});var nia=s(dLe);izr=r(nia,"__init__()"),nia.forEach(t),dzr=r(eno," (throws an error)."),eno.forEach(t),czr=i(ui),Yt=n(ui,"DIV",{class:!0});var $9=s(Yt);T(JS.$$.fragment,$9),fzr=i($9),cLe=n($9,"P",{});var sia=s(cLe);mzr=r(sia,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),sia.forEach(t),gzr=i($9),gf=n($9,"P",{});var rce=s(gf);hzr=r(rce,`Note:
Loading a model from its configuration file does `),fLe=n(rce,"STRONG",{});var lia=s(fLe);uzr=r(lia,"not"),lia.forEach(t),pzr=r(rce,` load the model weights. It only affects the
model\u2019s configuration. Use `),ite=n(rce,"A",{href:!0});var iia=s(ite);_zr=r(iia,"from_pretrained()"),iia.forEach(t),vzr=r(rce," to load the model weights."),rce.forEach(t),bzr=i($9),T(iw.$$.fragment,$9),$9.forEach(t),Fzr=i(ui),Or=n(ui,"DIV",{class:!0});var pi=s(Or);T(YS.$$.fragment,pi),Tzr=i(pi),mLe=n(pi,"P",{});var dia=s(mLe);Mzr=r(dia,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),dia.forEach(t),Ezr=i(pi),Pn=n(pi,"P",{});var k9=s(Pn);Czr=r(k9,"The model class to instantiate is selected based on the "),gLe=n(k9,"CODE",{});var cia=s(gLe);wzr=r(cia,"model_type"),cia.forEach(t),Azr=r(k9,` property of the config object (either
passed as an argument or loaded from `),hLe=n(k9,"CODE",{});var fia=s(hLe);Lzr=r(fia,"pretrained_model_name_or_path"),fia.forEach(t),yzr=r(k9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uLe=n(k9,"CODE",{});var mia=s(uLe);xzr=r(mia,"pretrained_model_name_or_path"),mia.forEach(t),$zr=r(k9,":"),k9.forEach(t),kzr=i(pi),hf=n(pi,"UL",{});var tce=s(hf);dw=n(tce,"LI",{});var JJe=s(dw);pLe=n(JJe,"STRONG",{});var gia=s(pLe);Szr=r(gia,"data2vec-vision"),gia.forEach(t),Rzr=r(JJe," \u2014 "),dte=n(JJe,"A",{href:!0});var hia=s(dte);Pzr=r(hia,"TFData2VecVisionForSemanticSegmentation"),hia.forEach(t),Bzr=r(JJe," (Data2VecVision model)"),JJe.forEach(t),Izr=i(tce),cw=n(tce,"LI",{});var YJe=s(cw);_Le=n(YJe,"STRONG",{});var uia=s(_Le);Nzr=r(uia,"mobilevit"),uia.forEach(t),qzr=r(YJe," \u2014 "),cte=n(YJe,"A",{href:!0});var pia=s(cte);jzr=r(pia,"TFMobileViTForSemanticSegmentation"),pia.forEach(t),Dzr=r(YJe," (MobileViT model)"),YJe.forEach(t),Gzr=i(tce),fw=n(tce,"LI",{});var ZJe=s(fw);vLe=n(ZJe,"STRONG",{});var _ia=s(vLe);Ozr=r(_ia,"segformer"),_ia.forEach(t),Vzr=r(ZJe," \u2014 "),fte=n(ZJe,"A",{href:!0});var via=s(fte);Xzr=r(via,"TFSegformerForSemanticSegmentation"),via.forEach(t),zzr=r(ZJe," (SegFormer model)"),ZJe.forEach(t),tce.forEach(t),Qzr=i(pi),T(mw.$$.fragment,pi),pi.forEach(t),ui.forEach(t),jro=i(f),uf=n(f,"H2",{class:!0});var ono=s(uf);gw=n(ono,"A",{id:!0,class:!0,href:!0});var bia=s(gw);bLe=n(bia,"SPAN",{});var Fia=s(bLe);T(ZS.$$.fragment,Fia),Fia.forEach(t),bia.forEach(t),Wzr=i(ono),FLe=n(ono,"SPAN",{});var Tia=s(FLe);Uzr=r(Tia,"TFAutoModelForMaskedLM"),Tia.forEach(t),ono.forEach(t),Dro=i(f),gr=n(f,"DIV",{class:!0});var _i=s(gr);T(KS.$$.fragment,_i),Hzr=i(_i),pf=n(_i,"P",{});var ace=s(pf);Jzr=r(ace,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mte=n(ace,"A",{href:!0});var Mia=s(mte);Yzr=r(Mia,"from_pretrained()"),Mia.forEach(t),Zzr=r(ace," class method or the "),gte=n(ace,"A",{href:!0});var Eia=s(gte);Kzr=r(Eia,"from_config()"),Eia.forEach(t),eQr=r(ace,` class
method.`),ace.forEach(t),oQr=i(_i),eR=n(_i,"P",{});var rno=s(eR);rQr=r(rno,"This class cannot be instantiated directly using "),TLe=n(rno,"CODE",{});var Cia=s(TLe);tQr=r(Cia,"__init__()"),Cia.forEach(t),aQr=r(rno," (throws an error)."),rno.forEach(t),nQr=i(_i),Zt=n(_i,"DIV",{class:!0});var S9=s(Zt);T(oR.$$.fragment,S9),sQr=i(S9),MLe=n(S9,"P",{});var wia=s(MLe);lQr=r(wia,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),wia.forEach(t),iQr=i(S9),_f=n(S9,"P",{});var nce=s(_f);dQr=r(nce,`Note:
Loading a model from its configuration file does `),ELe=n(nce,"STRONG",{});var Aia=s(ELe);cQr=r(Aia,"not"),Aia.forEach(t),fQr=r(nce,` load the model weights. It only affects the
model\u2019s configuration. Use `),hte=n(nce,"A",{href:!0});var Lia=s(hte);mQr=r(Lia,"from_pretrained()"),Lia.forEach(t),gQr=r(nce," to load the model weights."),nce.forEach(t),hQr=i(S9),T(hw.$$.fragment,S9),S9.forEach(t),uQr=i(_i),Vr=n(_i,"DIV",{class:!0});var vi=s(Vr);T(rR.$$.fragment,vi),pQr=i(vi),CLe=n(vi,"P",{});var yia=s(CLe);_Qr=r(yia,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),yia.forEach(t),vQr=i(vi),Bn=n(vi,"P",{});var R9=s(Bn);bQr=r(R9,"The model class to instantiate is selected based on the "),wLe=n(R9,"CODE",{});var xia=s(wLe);FQr=r(xia,"model_type"),xia.forEach(t),TQr=r(R9,` property of the config object (either
passed as an argument or loaded from `),ALe=n(R9,"CODE",{});var $ia=s(ALe);MQr=r($ia,"pretrained_model_name_or_path"),$ia.forEach(t),EQr=r(R9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LLe=n(R9,"CODE",{});var kia=s(LLe);CQr=r(kia,"pretrained_model_name_or_path"),kia.forEach(t),wQr=r(R9,":"),R9.forEach(t),AQr=i(vi),ge=n(vi,"UL",{});var _e=s(ge);uw=n(_e,"LI",{});var KJe=s(uw);yLe=n(KJe,"STRONG",{});var Sia=s(yLe);LQr=r(Sia,"albert"),Sia.forEach(t),yQr=r(KJe," \u2014 "),ute=n(KJe,"A",{href:!0});var Ria=s(ute);xQr=r(Ria,"TFAlbertForMaskedLM"),Ria.forEach(t),$Qr=r(KJe," (ALBERT model)"),KJe.forEach(t),kQr=i(_e),pw=n(_e,"LI",{});var eYe=s(pw);xLe=n(eYe,"STRONG",{});var Pia=s(xLe);SQr=r(Pia,"bert"),Pia.forEach(t),RQr=r(eYe," \u2014 "),pte=n(eYe,"A",{href:!0});var Bia=s(pte);PQr=r(Bia,"TFBertForMaskedLM"),Bia.forEach(t),BQr=r(eYe," (BERT model)"),eYe.forEach(t),IQr=i(_e),_w=n(_e,"LI",{});var oYe=s(_w);$Le=n(oYe,"STRONG",{});var Iia=s($Le);NQr=r(Iia,"camembert"),Iia.forEach(t),qQr=r(oYe," \u2014 "),_te=n(oYe,"A",{href:!0});var Nia=s(_te);jQr=r(Nia,"TFCamembertForMaskedLM"),Nia.forEach(t),DQr=r(oYe," (CamemBERT model)"),oYe.forEach(t),GQr=i(_e),vw=n(_e,"LI",{});var rYe=s(vw);kLe=n(rYe,"STRONG",{});var qia=s(kLe);OQr=r(qia,"convbert"),qia.forEach(t),VQr=r(rYe," \u2014 "),vte=n(rYe,"A",{href:!0});var jia=s(vte);XQr=r(jia,"TFConvBertForMaskedLM"),jia.forEach(t),zQr=r(rYe," (ConvBERT model)"),rYe.forEach(t),QQr=i(_e),bw=n(_e,"LI",{});var tYe=s(bw);SLe=n(tYe,"STRONG",{});var Dia=s(SLe);WQr=r(Dia,"deberta"),Dia.forEach(t),UQr=r(tYe," \u2014 "),bte=n(tYe,"A",{href:!0});var Gia=s(bte);HQr=r(Gia,"TFDebertaForMaskedLM"),Gia.forEach(t),JQr=r(tYe," (DeBERTa model)"),tYe.forEach(t),YQr=i(_e),Fw=n(_e,"LI",{});var aYe=s(Fw);RLe=n(aYe,"STRONG",{});var Oia=s(RLe);ZQr=r(Oia,"deberta-v2"),Oia.forEach(t),KQr=r(aYe," \u2014 "),Fte=n(aYe,"A",{href:!0});var Via=s(Fte);eWr=r(Via,"TFDebertaV2ForMaskedLM"),Via.forEach(t),oWr=r(aYe," (DeBERTa-v2 model)"),aYe.forEach(t),rWr=i(_e),Tw=n(_e,"LI",{});var nYe=s(Tw);PLe=n(nYe,"STRONG",{});var Xia=s(PLe);tWr=r(Xia,"distilbert"),Xia.forEach(t),aWr=r(nYe," \u2014 "),Tte=n(nYe,"A",{href:!0});var zia=s(Tte);nWr=r(zia,"TFDistilBertForMaskedLM"),zia.forEach(t),sWr=r(nYe," (DistilBERT model)"),nYe.forEach(t),lWr=i(_e),Mw=n(_e,"LI",{});var sYe=s(Mw);BLe=n(sYe,"STRONG",{});var Qia=s(BLe);iWr=r(Qia,"electra"),Qia.forEach(t),dWr=r(sYe," \u2014 "),Mte=n(sYe,"A",{href:!0});var Wia=s(Mte);cWr=r(Wia,"TFElectraForMaskedLM"),Wia.forEach(t),fWr=r(sYe," (ELECTRA model)"),sYe.forEach(t),mWr=i(_e),Ew=n(_e,"LI",{});var lYe=s(Ew);ILe=n(lYe,"STRONG",{});var Uia=s(ILe);gWr=r(Uia,"flaubert"),Uia.forEach(t),hWr=r(lYe," \u2014 "),Ete=n(lYe,"A",{href:!0});var Hia=s(Ete);uWr=r(Hia,"TFFlaubertWithLMHeadModel"),Hia.forEach(t),pWr=r(lYe," (FlauBERT model)"),lYe.forEach(t),_Wr=i(_e),Cw=n(_e,"LI",{});var iYe=s(Cw);NLe=n(iYe,"STRONG",{});var Jia=s(NLe);vWr=r(Jia,"funnel"),Jia.forEach(t),bWr=r(iYe," \u2014 "),Cte=n(iYe,"A",{href:!0});var Yia=s(Cte);FWr=r(Yia,"TFFunnelForMaskedLM"),Yia.forEach(t),TWr=r(iYe," (Funnel Transformer model)"),iYe.forEach(t),MWr=i(_e),ww=n(_e,"LI",{});var dYe=s(ww);qLe=n(dYe,"STRONG",{});var Zia=s(qLe);EWr=r(Zia,"layoutlm"),Zia.forEach(t),CWr=r(dYe," \u2014 "),wte=n(dYe,"A",{href:!0});var Kia=s(wte);wWr=r(Kia,"TFLayoutLMForMaskedLM"),Kia.forEach(t),AWr=r(dYe," (LayoutLM model)"),dYe.forEach(t),LWr=i(_e),Aw=n(_e,"LI",{});var cYe=s(Aw);jLe=n(cYe,"STRONG",{});var eda=s(jLe);yWr=r(eda,"longformer"),eda.forEach(t),xWr=r(cYe," \u2014 "),Ate=n(cYe,"A",{href:!0});var oda=s(Ate);$Wr=r(oda,"TFLongformerForMaskedLM"),oda.forEach(t),kWr=r(cYe," (Longformer model)"),cYe.forEach(t),SWr=i(_e),Lw=n(_e,"LI",{});var fYe=s(Lw);DLe=n(fYe,"STRONG",{});var rda=s(DLe);RWr=r(rda,"mobilebert"),rda.forEach(t),PWr=r(fYe," \u2014 "),Lte=n(fYe,"A",{href:!0});var tda=s(Lte);BWr=r(tda,"TFMobileBertForMaskedLM"),tda.forEach(t),IWr=r(fYe," (MobileBERT model)"),fYe.forEach(t),NWr=i(_e),yw=n(_e,"LI",{});var mYe=s(yw);GLe=n(mYe,"STRONG",{});var ada=s(GLe);qWr=r(ada,"mpnet"),ada.forEach(t),jWr=r(mYe," \u2014 "),yte=n(mYe,"A",{href:!0});var nda=s(yte);DWr=r(nda,"TFMPNetForMaskedLM"),nda.forEach(t),GWr=r(mYe," (MPNet model)"),mYe.forEach(t),OWr=i(_e),xw=n(_e,"LI",{});var gYe=s(xw);OLe=n(gYe,"STRONG",{});var sda=s(OLe);VWr=r(sda,"rembert"),sda.forEach(t),XWr=r(gYe," \u2014 "),xte=n(gYe,"A",{href:!0});var lda=s(xte);zWr=r(lda,"TFRemBertForMaskedLM"),lda.forEach(t),QWr=r(gYe," (RemBERT model)"),gYe.forEach(t),WWr=i(_e),$w=n(_e,"LI",{});var hYe=s($w);VLe=n(hYe,"STRONG",{});var ida=s(VLe);UWr=r(ida,"roberta"),ida.forEach(t),HWr=r(hYe," \u2014 "),$te=n(hYe,"A",{href:!0});var dda=s($te);JWr=r(dda,"TFRobertaForMaskedLM"),dda.forEach(t),YWr=r(hYe," (RoBERTa model)"),hYe.forEach(t),ZWr=i(_e),kw=n(_e,"LI",{});var uYe=s(kw);XLe=n(uYe,"STRONG",{});var cda=s(XLe);KWr=r(cda,"roformer"),cda.forEach(t),eUr=r(uYe," \u2014 "),kte=n(uYe,"A",{href:!0});var fda=s(kte);oUr=r(fda,"TFRoFormerForMaskedLM"),fda.forEach(t),rUr=r(uYe," (RoFormer model)"),uYe.forEach(t),tUr=i(_e),Sw=n(_e,"LI",{});var pYe=s(Sw);zLe=n(pYe,"STRONG",{});var mda=s(zLe);aUr=r(mda,"tapas"),mda.forEach(t),nUr=r(pYe," \u2014 "),Ste=n(pYe,"A",{href:!0});var gda=s(Ste);sUr=r(gda,"TFTapasForMaskedLM"),gda.forEach(t),lUr=r(pYe," (TAPAS model)"),pYe.forEach(t),iUr=i(_e),Rw=n(_e,"LI",{});var _Ye=s(Rw);QLe=n(_Ye,"STRONG",{});var hda=s(QLe);dUr=r(hda,"xlm"),hda.forEach(t),cUr=r(_Ye," \u2014 "),Rte=n(_Ye,"A",{href:!0});var uda=s(Rte);fUr=r(uda,"TFXLMWithLMHeadModel"),uda.forEach(t),mUr=r(_Ye," (XLM model)"),_Ye.forEach(t),gUr=i(_e),Pw=n(_e,"LI",{});var vYe=s(Pw);WLe=n(vYe,"STRONG",{});var pda=s(WLe);hUr=r(pda,"xlm-roberta"),pda.forEach(t),uUr=r(vYe," \u2014 "),Pte=n(vYe,"A",{href:!0});var _da=s(Pte);pUr=r(_da,"TFXLMRobertaForMaskedLM"),_da.forEach(t),_Ur=r(vYe," (XLM-RoBERTa model)"),vYe.forEach(t),_e.forEach(t),vUr=i(vi),T(Bw.$$.fragment,vi),vi.forEach(t),_i.forEach(t),Gro=i(f),vf=n(f,"H2",{class:!0});var tno=s(vf);Iw=n(tno,"A",{id:!0,class:!0,href:!0});var vda=s(Iw);ULe=n(vda,"SPAN",{});var bda=s(ULe);T(tR.$$.fragment,bda),bda.forEach(t),vda.forEach(t),bUr=i(tno),HLe=n(tno,"SPAN",{});var Fda=s(HLe);FUr=r(Fda,"TFAutoModelForSeq2SeqLM"),Fda.forEach(t),tno.forEach(t),Oro=i(f),hr=n(f,"DIV",{class:!0});var bi=s(hr);T(aR.$$.fragment,bi),TUr=i(bi),bf=n(bi,"P",{});var sce=s(bf);MUr=r(sce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Bte=n(sce,"A",{href:!0});var Tda=s(Bte);EUr=r(Tda,"from_pretrained()"),Tda.forEach(t),CUr=r(sce," class method or the "),Ite=n(sce,"A",{href:!0});var Mda=s(Ite);wUr=r(Mda,"from_config()"),Mda.forEach(t),AUr=r(sce,` class
method.`),sce.forEach(t),LUr=i(bi),nR=n(bi,"P",{});var ano=s(nR);yUr=r(ano,"This class cannot be instantiated directly using "),JLe=n(ano,"CODE",{});var Eda=s(JLe);xUr=r(Eda,"__init__()"),Eda.forEach(t),$Ur=r(ano," (throws an error)."),ano.forEach(t),kUr=i(bi),Kt=n(bi,"DIV",{class:!0});var P9=s(Kt);T(sR.$$.fragment,P9),SUr=i(P9),YLe=n(P9,"P",{});var Cda=s(YLe);RUr=r(Cda,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Cda.forEach(t),PUr=i(P9),Ff=n(P9,"P",{});var lce=s(Ff);BUr=r(lce,`Note:
Loading a model from its configuration file does `),ZLe=n(lce,"STRONG",{});var wda=s(ZLe);IUr=r(wda,"not"),wda.forEach(t),NUr=r(lce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nte=n(lce,"A",{href:!0});var Ada=s(Nte);qUr=r(Ada,"from_pretrained()"),Ada.forEach(t),jUr=r(lce," to load the model weights."),lce.forEach(t),DUr=i(P9),T(Nw.$$.fragment,P9),P9.forEach(t),GUr=i(bi),Xr=n(bi,"DIV",{class:!0});var Fi=s(Xr);T(lR.$$.fragment,Fi),OUr=i(Fi),KLe=n(Fi,"P",{});var Lda=s(KLe);VUr=r(Lda,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Lda.forEach(t),XUr=i(Fi),In=n(Fi,"P",{});var B9=s(In);zUr=r(B9,"The model class to instantiate is selected based on the "),e8e=n(B9,"CODE",{});var yda=s(e8e);QUr=r(yda,"model_type"),yda.forEach(t),WUr=r(B9,` property of the config object (either
passed as an argument or loaded from `),o8e=n(B9,"CODE",{});var xda=s(o8e);UUr=r(xda,"pretrained_model_name_or_path"),xda.forEach(t),HUr=r(B9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r8e=n(B9,"CODE",{});var $da=s(r8e);JUr=r($da,"pretrained_model_name_or_path"),$da.forEach(t),YUr=r(B9,":"),B9.forEach(t),ZUr=i(Fi),ye=n(Fi,"UL",{});var Ne=s(ye);qw=n(Ne,"LI",{});var bYe=s(qw);t8e=n(bYe,"STRONG",{});var kda=s(t8e);KUr=r(kda,"bart"),kda.forEach(t),eHr=r(bYe," \u2014 "),qte=n(bYe,"A",{href:!0});var Sda=s(qte);oHr=r(Sda,"TFBartForConditionalGeneration"),Sda.forEach(t),rHr=r(bYe," (BART model)"),bYe.forEach(t),tHr=i(Ne),jw=n(Ne,"LI",{});var FYe=s(jw);a8e=n(FYe,"STRONG",{});var Rda=s(a8e);aHr=r(Rda,"blenderbot"),Rda.forEach(t),nHr=r(FYe," \u2014 "),jte=n(FYe,"A",{href:!0});var Pda=s(jte);sHr=r(Pda,"TFBlenderbotForConditionalGeneration"),Pda.forEach(t),lHr=r(FYe," (Blenderbot model)"),FYe.forEach(t),iHr=i(Ne),Dw=n(Ne,"LI",{});var TYe=s(Dw);n8e=n(TYe,"STRONG",{});var Bda=s(n8e);dHr=r(Bda,"blenderbot-small"),Bda.forEach(t),cHr=r(TYe," \u2014 "),Dte=n(TYe,"A",{href:!0});var Ida=s(Dte);fHr=r(Ida,"TFBlenderbotSmallForConditionalGeneration"),Ida.forEach(t),mHr=r(TYe," (BlenderbotSmall model)"),TYe.forEach(t),gHr=i(Ne),Gw=n(Ne,"LI",{});var MYe=s(Gw);s8e=n(MYe,"STRONG",{});var Nda=s(s8e);hHr=r(Nda,"encoder-decoder"),Nda.forEach(t),uHr=r(MYe," \u2014 "),Gte=n(MYe,"A",{href:!0});var qda=s(Gte);pHr=r(qda,"TFEncoderDecoderModel"),qda.forEach(t),_Hr=r(MYe," (Encoder decoder model)"),MYe.forEach(t),vHr=i(Ne),Ow=n(Ne,"LI",{});var EYe=s(Ow);l8e=n(EYe,"STRONG",{});var jda=s(l8e);bHr=r(jda,"led"),jda.forEach(t),FHr=r(EYe," \u2014 "),Ote=n(EYe,"A",{href:!0});var Dda=s(Ote);THr=r(Dda,"TFLEDForConditionalGeneration"),Dda.forEach(t),MHr=r(EYe," (LED model)"),EYe.forEach(t),EHr=i(Ne),Vw=n(Ne,"LI",{});var CYe=s(Vw);i8e=n(CYe,"STRONG",{});var Gda=s(i8e);CHr=r(Gda,"marian"),Gda.forEach(t),wHr=r(CYe," \u2014 "),Vte=n(CYe,"A",{href:!0});var Oda=s(Vte);AHr=r(Oda,"TFMarianMTModel"),Oda.forEach(t),LHr=r(CYe," (Marian model)"),CYe.forEach(t),yHr=i(Ne),Xw=n(Ne,"LI",{});var wYe=s(Xw);d8e=n(wYe,"STRONG",{});var Vda=s(d8e);xHr=r(Vda,"mbart"),Vda.forEach(t),$Hr=r(wYe," \u2014 "),Xte=n(wYe,"A",{href:!0});var Xda=s(Xte);kHr=r(Xda,"TFMBartForConditionalGeneration"),Xda.forEach(t),SHr=r(wYe," (mBART model)"),wYe.forEach(t),RHr=i(Ne),zw=n(Ne,"LI",{});var AYe=s(zw);c8e=n(AYe,"STRONG",{});var zda=s(c8e);PHr=r(zda,"mt5"),zda.forEach(t),BHr=r(AYe," \u2014 "),zte=n(AYe,"A",{href:!0});var Qda=s(zte);IHr=r(Qda,"TFMT5ForConditionalGeneration"),Qda.forEach(t),NHr=r(AYe," (MT5 model)"),AYe.forEach(t),qHr=i(Ne),Qw=n(Ne,"LI",{});var LYe=s(Qw);f8e=n(LYe,"STRONG",{});var Wda=s(f8e);jHr=r(Wda,"pegasus"),Wda.forEach(t),DHr=r(LYe," \u2014 "),Qte=n(LYe,"A",{href:!0});var Uda=s(Qte);GHr=r(Uda,"TFPegasusForConditionalGeneration"),Uda.forEach(t),OHr=r(LYe," (Pegasus model)"),LYe.forEach(t),VHr=i(Ne),Ww=n(Ne,"LI",{});var yYe=s(Ww);m8e=n(yYe,"STRONG",{});var Hda=s(m8e);XHr=r(Hda,"t5"),Hda.forEach(t),zHr=r(yYe," \u2014 "),Wte=n(yYe,"A",{href:!0});var Jda=s(Wte);QHr=r(Jda,"TFT5ForConditionalGeneration"),Jda.forEach(t),WHr=r(yYe," (T5 model)"),yYe.forEach(t),Ne.forEach(t),UHr=i(Fi),T(Uw.$$.fragment,Fi),Fi.forEach(t),bi.forEach(t),Vro=i(f),Tf=n(f,"H2",{class:!0});var nno=s(Tf);Hw=n(nno,"A",{id:!0,class:!0,href:!0});var Yda=s(Hw);g8e=n(Yda,"SPAN",{});var Zda=s(g8e);T(iR.$$.fragment,Zda),Zda.forEach(t),Yda.forEach(t),HHr=i(nno),h8e=n(nno,"SPAN",{});var Kda=s(h8e);JHr=r(Kda,"TFAutoModelForSequenceClassification"),Kda.forEach(t),nno.forEach(t),Xro=i(f),ur=n(f,"DIV",{class:!0});var Ti=s(ur);T(dR.$$.fragment,Ti),YHr=i(Ti),Mf=n(Ti,"P",{});var ice=s(Mf);ZHr=r(ice,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ute=n(ice,"A",{href:!0});var eca=s(Ute);KHr=r(eca,"from_pretrained()"),eca.forEach(t),eJr=r(ice," class method or the "),Hte=n(ice,"A",{href:!0});var oca=s(Hte);oJr=r(oca,"from_config()"),oca.forEach(t),rJr=r(ice,` class
method.`),ice.forEach(t),tJr=i(Ti),cR=n(Ti,"P",{});var sno=s(cR);aJr=r(sno,"This class cannot be instantiated directly using "),u8e=n(sno,"CODE",{});var rca=s(u8e);nJr=r(rca,"__init__()"),rca.forEach(t),sJr=r(sno," (throws an error)."),sno.forEach(t),lJr=i(Ti),ea=n(Ti,"DIV",{class:!0});var I9=s(ea);T(fR.$$.fragment,I9),iJr=i(I9),p8e=n(I9,"P",{});var tca=s(p8e);dJr=r(tca,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),tca.forEach(t),cJr=i(I9),Ef=n(I9,"P",{});var dce=s(Ef);fJr=r(dce,`Note:
Loading a model from its configuration file does `),_8e=n(dce,"STRONG",{});var aca=s(_8e);mJr=r(aca,"not"),aca.forEach(t),gJr=r(dce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jte=n(dce,"A",{href:!0});var nca=s(Jte);hJr=r(nca,"from_pretrained()"),nca.forEach(t),uJr=r(dce," to load the model weights."),dce.forEach(t),pJr=i(I9),T(Jw.$$.fragment,I9),I9.forEach(t),_Jr=i(Ti),zr=n(Ti,"DIV",{class:!0});var Mi=s(zr);T(mR.$$.fragment,Mi),vJr=i(Mi),v8e=n(Mi,"P",{});var sca=s(v8e);bJr=r(sca,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),sca.forEach(t),FJr=i(Mi),Nn=n(Mi,"P",{});var N9=s(Nn);TJr=r(N9,"The model class to instantiate is selected based on the "),b8e=n(N9,"CODE",{});var lca=s(b8e);MJr=r(lca,"model_type"),lca.forEach(t),EJr=r(N9,` property of the config object (either
passed as an argument or loaded from `),F8e=n(N9,"CODE",{});var ica=s(F8e);CJr=r(ica,"pretrained_model_name_or_path"),ica.forEach(t),wJr=r(N9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T8e=n(N9,"CODE",{});var dca=s(T8e);AJr=r(dca,"pretrained_model_name_or_path"),dca.forEach(t),LJr=r(N9,":"),N9.forEach(t),yJr=i(Mi),re=n(Mi,"UL",{});var ae=s(re);Yw=n(ae,"LI",{});var xYe=s(Yw);M8e=n(xYe,"STRONG",{});var cca=s(M8e);xJr=r(cca,"albert"),cca.forEach(t),$Jr=r(xYe," \u2014 "),Yte=n(xYe,"A",{href:!0});var fca=s(Yte);kJr=r(fca,"TFAlbertForSequenceClassification"),fca.forEach(t),SJr=r(xYe," (ALBERT model)"),xYe.forEach(t),RJr=i(ae),Zw=n(ae,"LI",{});var $Ye=s(Zw);E8e=n($Ye,"STRONG",{});var mca=s(E8e);PJr=r(mca,"bert"),mca.forEach(t),BJr=r($Ye," \u2014 "),Zte=n($Ye,"A",{href:!0});var gca=s(Zte);IJr=r(gca,"TFBertForSequenceClassification"),gca.forEach(t),NJr=r($Ye," (BERT model)"),$Ye.forEach(t),qJr=i(ae),Kw=n(ae,"LI",{});var kYe=s(Kw);C8e=n(kYe,"STRONG",{});var hca=s(C8e);jJr=r(hca,"camembert"),hca.forEach(t),DJr=r(kYe," \u2014 "),Kte=n(kYe,"A",{href:!0});var uca=s(Kte);GJr=r(uca,"TFCamembertForSequenceClassification"),uca.forEach(t),OJr=r(kYe," (CamemBERT model)"),kYe.forEach(t),VJr=i(ae),eA=n(ae,"LI",{});var SYe=s(eA);w8e=n(SYe,"STRONG",{});var pca=s(w8e);XJr=r(pca,"convbert"),pca.forEach(t),zJr=r(SYe," \u2014 "),eae=n(SYe,"A",{href:!0});var _ca=s(eae);QJr=r(_ca,"TFConvBertForSequenceClassification"),_ca.forEach(t),WJr=r(SYe," (ConvBERT model)"),SYe.forEach(t),UJr=i(ae),oA=n(ae,"LI",{});var RYe=s(oA);A8e=n(RYe,"STRONG",{});var vca=s(A8e);HJr=r(vca,"ctrl"),vca.forEach(t),JJr=r(RYe," \u2014 "),oae=n(RYe,"A",{href:!0});var bca=s(oae);YJr=r(bca,"TFCTRLForSequenceClassification"),bca.forEach(t),ZJr=r(RYe," (CTRL model)"),RYe.forEach(t),KJr=i(ae),rA=n(ae,"LI",{});var PYe=s(rA);L8e=n(PYe,"STRONG",{});var Fca=s(L8e);eYr=r(Fca,"deberta"),Fca.forEach(t),oYr=r(PYe," \u2014 "),rae=n(PYe,"A",{href:!0});var Tca=s(rae);rYr=r(Tca,"TFDebertaForSequenceClassification"),Tca.forEach(t),tYr=r(PYe," (DeBERTa model)"),PYe.forEach(t),aYr=i(ae),tA=n(ae,"LI",{});var BYe=s(tA);y8e=n(BYe,"STRONG",{});var Mca=s(y8e);nYr=r(Mca,"deberta-v2"),Mca.forEach(t),sYr=r(BYe," \u2014 "),tae=n(BYe,"A",{href:!0});var Eca=s(tae);lYr=r(Eca,"TFDebertaV2ForSequenceClassification"),Eca.forEach(t),iYr=r(BYe," (DeBERTa-v2 model)"),BYe.forEach(t),dYr=i(ae),aA=n(ae,"LI",{});var IYe=s(aA);x8e=n(IYe,"STRONG",{});var Cca=s(x8e);cYr=r(Cca,"distilbert"),Cca.forEach(t),fYr=r(IYe," \u2014 "),aae=n(IYe,"A",{href:!0});var wca=s(aae);mYr=r(wca,"TFDistilBertForSequenceClassification"),wca.forEach(t),gYr=r(IYe," (DistilBERT model)"),IYe.forEach(t),hYr=i(ae),nA=n(ae,"LI",{});var NYe=s(nA);$8e=n(NYe,"STRONG",{});var Aca=s($8e);uYr=r(Aca,"electra"),Aca.forEach(t),pYr=r(NYe," \u2014 "),nae=n(NYe,"A",{href:!0});var Lca=s(nae);_Yr=r(Lca,"TFElectraForSequenceClassification"),Lca.forEach(t),vYr=r(NYe," (ELECTRA model)"),NYe.forEach(t),bYr=i(ae),sA=n(ae,"LI",{});var qYe=s(sA);k8e=n(qYe,"STRONG",{});var yca=s(k8e);FYr=r(yca,"flaubert"),yca.forEach(t),TYr=r(qYe," \u2014 "),sae=n(qYe,"A",{href:!0});var xca=s(sae);MYr=r(xca,"TFFlaubertForSequenceClassification"),xca.forEach(t),EYr=r(qYe," (FlauBERT model)"),qYe.forEach(t),CYr=i(ae),lA=n(ae,"LI",{});var jYe=s(lA);S8e=n(jYe,"STRONG",{});var $ca=s(S8e);wYr=r($ca,"funnel"),$ca.forEach(t),AYr=r(jYe," \u2014 "),lae=n(jYe,"A",{href:!0});var kca=s(lae);LYr=r(kca,"TFFunnelForSequenceClassification"),kca.forEach(t),yYr=r(jYe," (Funnel Transformer model)"),jYe.forEach(t),xYr=i(ae),iA=n(ae,"LI",{});var DYe=s(iA);R8e=n(DYe,"STRONG",{});var Sca=s(R8e);$Yr=r(Sca,"gpt2"),Sca.forEach(t),kYr=r(DYe," \u2014 "),iae=n(DYe,"A",{href:!0});var Rca=s(iae);SYr=r(Rca,"TFGPT2ForSequenceClassification"),Rca.forEach(t),RYr=r(DYe," (OpenAI GPT-2 model)"),DYe.forEach(t),PYr=i(ae),dA=n(ae,"LI",{});var GYe=s(dA);P8e=n(GYe,"STRONG",{});var Pca=s(P8e);BYr=r(Pca,"gptj"),Pca.forEach(t),IYr=r(GYe," \u2014 "),dae=n(GYe,"A",{href:!0});var Bca=s(dae);NYr=r(Bca,"TFGPTJForSequenceClassification"),Bca.forEach(t),qYr=r(GYe," (GPT-J model)"),GYe.forEach(t),jYr=i(ae),cA=n(ae,"LI",{});var OYe=s(cA);B8e=n(OYe,"STRONG",{});var Ica=s(B8e);DYr=r(Ica,"layoutlm"),Ica.forEach(t),GYr=r(OYe," \u2014 "),cae=n(OYe,"A",{href:!0});var Nca=s(cae);OYr=r(Nca,"TFLayoutLMForSequenceClassification"),Nca.forEach(t),VYr=r(OYe," (LayoutLM model)"),OYe.forEach(t),XYr=i(ae),fA=n(ae,"LI",{});var VYe=s(fA);I8e=n(VYe,"STRONG",{});var qca=s(I8e);zYr=r(qca,"layoutlmv3"),qca.forEach(t),QYr=r(VYe," \u2014 "),fae=n(VYe,"A",{href:!0});var jca=s(fae);WYr=r(jca,"TFLayoutLMv3ForSequenceClassification"),jca.forEach(t),UYr=r(VYe," (LayoutLMv3 model)"),VYe.forEach(t),HYr=i(ae),mA=n(ae,"LI",{});var XYe=s(mA);N8e=n(XYe,"STRONG",{});var Dca=s(N8e);JYr=r(Dca,"longformer"),Dca.forEach(t),YYr=r(XYe," \u2014 "),mae=n(XYe,"A",{href:!0});var Gca=s(mae);ZYr=r(Gca,"TFLongformerForSequenceClassification"),Gca.forEach(t),KYr=r(XYe," (Longformer model)"),XYe.forEach(t),eZr=i(ae),gA=n(ae,"LI",{});var zYe=s(gA);q8e=n(zYe,"STRONG",{});var Oca=s(q8e);oZr=r(Oca,"mobilebert"),Oca.forEach(t),rZr=r(zYe," \u2014 "),gae=n(zYe,"A",{href:!0});var Vca=s(gae);tZr=r(Vca,"TFMobileBertForSequenceClassification"),Vca.forEach(t),aZr=r(zYe," (MobileBERT model)"),zYe.forEach(t),nZr=i(ae),hA=n(ae,"LI",{});var QYe=s(hA);j8e=n(QYe,"STRONG",{});var Xca=s(j8e);sZr=r(Xca,"mpnet"),Xca.forEach(t),lZr=r(QYe," \u2014 "),hae=n(QYe,"A",{href:!0});var zca=s(hae);iZr=r(zca,"TFMPNetForSequenceClassification"),zca.forEach(t),dZr=r(QYe," (MPNet model)"),QYe.forEach(t),cZr=i(ae),uA=n(ae,"LI",{});var WYe=s(uA);D8e=n(WYe,"STRONG",{});var Qca=s(D8e);fZr=r(Qca,"openai-gpt"),Qca.forEach(t),mZr=r(WYe," \u2014 "),uae=n(WYe,"A",{href:!0});var Wca=s(uae);gZr=r(Wca,"TFOpenAIGPTForSequenceClassification"),Wca.forEach(t),hZr=r(WYe," (OpenAI GPT model)"),WYe.forEach(t),uZr=i(ae),pA=n(ae,"LI",{});var UYe=s(pA);G8e=n(UYe,"STRONG",{});var Uca=s(G8e);pZr=r(Uca,"rembert"),Uca.forEach(t),_Zr=r(UYe," \u2014 "),pae=n(UYe,"A",{href:!0});var Hca=s(pae);vZr=r(Hca,"TFRemBertForSequenceClassification"),Hca.forEach(t),bZr=r(UYe," (RemBERT model)"),UYe.forEach(t),FZr=i(ae),_A=n(ae,"LI",{});var HYe=s(_A);O8e=n(HYe,"STRONG",{});var Jca=s(O8e);TZr=r(Jca,"roberta"),Jca.forEach(t),MZr=r(HYe," \u2014 "),_ae=n(HYe,"A",{href:!0});var Yca=s(_ae);EZr=r(Yca,"TFRobertaForSequenceClassification"),Yca.forEach(t),CZr=r(HYe," (RoBERTa model)"),HYe.forEach(t),wZr=i(ae),vA=n(ae,"LI",{});var JYe=s(vA);V8e=n(JYe,"STRONG",{});var Zca=s(V8e);AZr=r(Zca,"roformer"),Zca.forEach(t),LZr=r(JYe," \u2014 "),vae=n(JYe,"A",{href:!0});var Kca=s(vae);yZr=r(Kca,"TFRoFormerForSequenceClassification"),Kca.forEach(t),xZr=r(JYe," (RoFormer model)"),JYe.forEach(t),$Zr=i(ae),bA=n(ae,"LI",{});var YYe=s(bA);X8e=n(YYe,"STRONG",{});var efa=s(X8e);kZr=r(efa,"tapas"),efa.forEach(t),SZr=r(YYe," \u2014 "),bae=n(YYe,"A",{href:!0});var ofa=s(bae);RZr=r(ofa,"TFTapasForSequenceClassification"),ofa.forEach(t),PZr=r(YYe," (TAPAS model)"),YYe.forEach(t),BZr=i(ae),FA=n(ae,"LI",{});var ZYe=s(FA);z8e=n(ZYe,"STRONG",{});var rfa=s(z8e);IZr=r(rfa,"transfo-xl"),rfa.forEach(t),NZr=r(ZYe," \u2014 "),Fae=n(ZYe,"A",{href:!0});var tfa=s(Fae);qZr=r(tfa,"TFTransfoXLForSequenceClassification"),tfa.forEach(t),jZr=r(ZYe," (Transformer-XL model)"),ZYe.forEach(t),DZr=i(ae),TA=n(ae,"LI",{});var KYe=s(TA);Q8e=n(KYe,"STRONG",{});var afa=s(Q8e);GZr=r(afa,"xlm"),afa.forEach(t),OZr=r(KYe," \u2014 "),Tae=n(KYe,"A",{href:!0});var nfa=s(Tae);VZr=r(nfa,"TFXLMForSequenceClassification"),nfa.forEach(t),XZr=r(KYe," (XLM model)"),KYe.forEach(t),zZr=i(ae),MA=n(ae,"LI",{});var eZe=s(MA);W8e=n(eZe,"STRONG",{});var sfa=s(W8e);QZr=r(sfa,"xlm-roberta"),sfa.forEach(t),WZr=r(eZe," \u2014 "),Mae=n(eZe,"A",{href:!0});var lfa=s(Mae);UZr=r(lfa,"TFXLMRobertaForSequenceClassification"),lfa.forEach(t),HZr=r(eZe," (XLM-RoBERTa model)"),eZe.forEach(t),JZr=i(ae),EA=n(ae,"LI",{});var oZe=s(EA);U8e=n(oZe,"STRONG",{});var ifa=s(U8e);YZr=r(ifa,"xlnet"),ifa.forEach(t),ZZr=r(oZe," \u2014 "),Eae=n(oZe,"A",{href:!0});var dfa=s(Eae);KZr=r(dfa,"TFXLNetForSequenceClassification"),dfa.forEach(t),eKr=r(oZe," (XLNet model)"),oZe.forEach(t),ae.forEach(t),oKr=i(Mi),T(CA.$$.fragment,Mi),Mi.forEach(t),Ti.forEach(t),zro=i(f),Cf=n(f,"H2",{class:!0});var lno=s(Cf);wA=n(lno,"A",{id:!0,class:!0,href:!0});var cfa=s(wA);H8e=n(cfa,"SPAN",{});var ffa=s(H8e);T(gR.$$.fragment,ffa),ffa.forEach(t),cfa.forEach(t),rKr=i(lno),J8e=n(lno,"SPAN",{});var mfa=s(J8e);tKr=r(mfa,"TFAutoModelForMultipleChoice"),mfa.forEach(t),lno.forEach(t),Qro=i(f),pr=n(f,"DIV",{class:!0});var Ei=s(pr);T(hR.$$.fragment,Ei),aKr=i(Ei),wf=n(Ei,"P",{});var cce=s(wf);nKr=r(cce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Cae=n(cce,"A",{href:!0});var gfa=s(Cae);sKr=r(gfa,"from_pretrained()"),gfa.forEach(t),lKr=r(cce," class method or the "),wae=n(cce,"A",{href:!0});var hfa=s(wae);iKr=r(hfa,"from_config()"),hfa.forEach(t),dKr=r(cce,` class
method.`),cce.forEach(t),cKr=i(Ei),uR=n(Ei,"P",{});var ino=s(uR);fKr=r(ino,"This class cannot be instantiated directly using "),Y8e=n(ino,"CODE",{});var ufa=s(Y8e);mKr=r(ufa,"__init__()"),ufa.forEach(t),gKr=r(ino," (throws an error)."),ino.forEach(t),hKr=i(Ei),oa=n(Ei,"DIV",{class:!0});var q9=s(oa);T(pR.$$.fragment,q9),uKr=i(q9),Z8e=n(q9,"P",{});var pfa=s(Z8e);pKr=r(pfa,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),pfa.forEach(t),_Kr=i(q9),Af=n(q9,"P",{});var fce=s(Af);vKr=r(fce,`Note:
Loading a model from its configuration file does `),K8e=n(fce,"STRONG",{});var _fa=s(K8e);bKr=r(_fa,"not"),_fa.forEach(t),FKr=r(fce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aae=n(fce,"A",{href:!0});var vfa=s(Aae);TKr=r(vfa,"from_pretrained()"),vfa.forEach(t),MKr=r(fce," to load the model weights."),fce.forEach(t),EKr=i(q9),T(AA.$$.fragment,q9),q9.forEach(t),CKr=i(Ei),Qr=n(Ei,"DIV",{class:!0});var Ci=s(Qr);T(_R.$$.fragment,Ci),wKr=i(Ci),eye=n(Ci,"P",{});var bfa=s(eye);AKr=r(bfa,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),bfa.forEach(t),LKr=i(Ci),qn=n(Ci,"P",{});var j9=s(qn);yKr=r(j9,"The model class to instantiate is selected based on the "),oye=n(j9,"CODE",{});var Ffa=s(oye);xKr=r(Ffa,"model_type"),Ffa.forEach(t),$Kr=r(j9,` property of the config object (either
passed as an argument or loaded from `),rye=n(j9,"CODE",{});var Tfa=s(rye);kKr=r(Tfa,"pretrained_model_name_or_path"),Tfa.forEach(t),SKr=r(j9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tye=n(j9,"CODE",{});var Mfa=s(tye);RKr=r(Mfa,"pretrained_model_name_or_path"),Mfa.forEach(t),PKr=r(j9,":"),j9.forEach(t),BKr=i(Ci),be=n(Ci,"UL",{});var Te=s(be);LA=n(Te,"LI",{});var rZe=s(LA);aye=n(rZe,"STRONG",{});var Efa=s(aye);IKr=r(Efa,"albert"),Efa.forEach(t),NKr=r(rZe," \u2014 "),Lae=n(rZe,"A",{href:!0});var Cfa=s(Lae);qKr=r(Cfa,"TFAlbertForMultipleChoice"),Cfa.forEach(t),jKr=r(rZe," (ALBERT model)"),rZe.forEach(t),DKr=i(Te),yA=n(Te,"LI",{});var tZe=s(yA);nye=n(tZe,"STRONG",{});var wfa=s(nye);GKr=r(wfa,"bert"),wfa.forEach(t),OKr=r(tZe," \u2014 "),yae=n(tZe,"A",{href:!0});var Afa=s(yae);VKr=r(Afa,"TFBertForMultipleChoice"),Afa.forEach(t),XKr=r(tZe," (BERT model)"),tZe.forEach(t),zKr=i(Te),xA=n(Te,"LI",{});var aZe=s(xA);sye=n(aZe,"STRONG",{});var Lfa=s(sye);QKr=r(Lfa,"camembert"),Lfa.forEach(t),WKr=r(aZe," \u2014 "),xae=n(aZe,"A",{href:!0});var yfa=s(xae);UKr=r(yfa,"TFCamembertForMultipleChoice"),yfa.forEach(t),HKr=r(aZe," (CamemBERT model)"),aZe.forEach(t),JKr=i(Te),$A=n(Te,"LI",{});var nZe=s($A);lye=n(nZe,"STRONG",{});var xfa=s(lye);YKr=r(xfa,"convbert"),xfa.forEach(t),ZKr=r(nZe," \u2014 "),$ae=n(nZe,"A",{href:!0});var $fa=s($ae);KKr=r($fa,"TFConvBertForMultipleChoice"),$fa.forEach(t),eet=r(nZe," (ConvBERT model)"),nZe.forEach(t),oet=i(Te),kA=n(Te,"LI",{});var sZe=s(kA);iye=n(sZe,"STRONG",{});var kfa=s(iye);ret=r(kfa,"distilbert"),kfa.forEach(t),tet=r(sZe," \u2014 "),kae=n(sZe,"A",{href:!0});var Sfa=s(kae);aet=r(Sfa,"TFDistilBertForMultipleChoice"),Sfa.forEach(t),net=r(sZe," (DistilBERT model)"),sZe.forEach(t),set=i(Te),SA=n(Te,"LI",{});var lZe=s(SA);dye=n(lZe,"STRONG",{});var Rfa=s(dye);iet=r(Rfa,"electra"),Rfa.forEach(t),det=r(lZe," \u2014 "),Sae=n(lZe,"A",{href:!0});var Pfa=s(Sae);cet=r(Pfa,"TFElectraForMultipleChoice"),Pfa.forEach(t),fet=r(lZe," (ELECTRA model)"),lZe.forEach(t),met=i(Te),RA=n(Te,"LI",{});var iZe=s(RA);cye=n(iZe,"STRONG",{});var Bfa=s(cye);get=r(Bfa,"flaubert"),Bfa.forEach(t),het=r(iZe," \u2014 "),Rae=n(iZe,"A",{href:!0});var Ifa=s(Rae);uet=r(Ifa,"TFFlaubertForMultipleChoice"),Ifa.forEach(t),pet=r(iZe," (FlauBERT model)"),iZe.forEach(t),_et=i(Te),PA=n(Te,"LI",{});var dZe=s(PA);fye=n(dZe,"STRONG",{});var Nfa=s(fye);vet=r(Nfa,"funnel"),Nfa.forEach(t),bet=r(dZe," \u2014 "),Pae=n(dZe,"A",{href:!0});var qfa=s(Pae);Fet=r(qfa,"TFFunnelForMultipleChoice"),qfa.forEach(t),Tet=r(dZe," (Funnel Transformer model)"),dZe.forEach(t),Met=i(Te),BA=n(Te,"LI",{});var cZe=s(BA);mye=n(cZe,"STRONG",{});var jfa=s(mye);Eet=r(jfa,"longformer"),jfa.forEach(t),Cet=r(cZe," \u2014 "),Bae=n(cZe,"A",{href:!0});var Dfa=s(Bae);wet=r(Dfa,"TFLongformerForMultipleChoice"),Dfa.forEach(t),Aet=r(cZe," (Longformer model)"),cZe.forEach(t),Let=i(Te),IA=n(Te,"LI",{});var fZe=s(IA);gye=n(fZe,"STRONG",{});var Gfa=s(gye);yet=r(Gfa,"mobilebert"),Gfa.forEach(t),xet=r(fZe," \u2014 "),Iae=n(fZe,"A",{href:!0});var Ofa=s(Iae);$et=r(Ofa,"TFMobileBertForMultipleChoice"),Ofa.forEach(t),ket=r(fZe," (MobileBERT model)"),fZe.forEach(t),Set=i(Te),NA=n(Te,"LI",{});var mZe=s(NA);hye=n(mZe,"STRONG",{});var Vfa=s(hye);Ret=r(Vfa,"mpnet"),Vfa.forEach(t),Pet=r(mZe," \u2014 "),Nae=n(mZe,"A",{href:!0});var Xfa=s(Nae);Bet=r(Xfa,"TFMPNetForMultipleChoice"),Xfa.forEach(t),Iet=r(mZe," (MPNet model)"),mZe.forEach(t),Net=i(Te),qA=n(Te,"LI",{});var gZe=s(qA);uye=n(gZe,"STRONG",{});var zfa=s(uye);qet=r(zfa,"rembert"),zfa.forEach(t),jet=r(gZe," \u2014 "),qae=n(gZe,"A",{href:!0});var Qfa=s(qae);Det=r(Qfa,"TFRemBertForMultipleChoice"),Qfa.forEach(t),Get=r(gZe," (RemBERT model)"),gZe.forEach(t),Oet=i(Te),jA=n(Te,"LI",{});var hZe=s(jA);pye=n(hZe,"STRONG",{});var Wfa=s(pye);Vet=r(Wfa,"roberta"),Wfa.forEach(t),Xet=r(hZe," \u2014 "),jae=n(hZe,"A",{href:!0});var Ufa=s(jae);zet=r(Ufa,"TFRobertaForMultipleChoice"),Ufa.forEach(t),Qet=r(hZe," (RoBERTa model)"),hZe.forEach(t),Wet=i(Te),DA=n(Te,"LI",{});var uZe=s(DA);_ye=n(uZe,"STRONG",{});var Hfa=s(_ye);Uet=r(Hfa,"roformer"),Hfa.forEach(t),Het=r(uZe," \u2014 "),Dae=n(uZe,"A",{href:!0});var Jfa=s(Dae);Jet=r(Jfa,"TFRoFormerForMultipleChoice"),Jfa.forEach(t),Yet=r(uZe," (RoFormer model)"),uZe.forEach(t),Zet=i(Te),GA=n(Te,"LI",{});var pZe=s(GA);vye=n(pZe,"STRONG",{});var Yfa=s(vye);Ket=r(Yfa,"xlm"),Yfa.forEach(t),eot=r(pZe," \u2014 "),Gae=n(pZe,"A",{href:!0});var Zfa=s(Gae);oot=r(Zfa,"TFXLMForMultipleChoice"),Zfa.forEach(t),rot=r(pZe," (XLM model)"),pZe.forEach(t),tot=i(Te),OA=n(Te,"LI",{});var _Ze=s(OA);bye=n(_Ze,"STRONG",{});var Kfa=s(bye);aot=r(Kfa,"xlm-roberta"),Kfa.forEach(t),not=r(_Ze," \u2014 "),Oae=n(_Ze,"A",{href:!0});var ema=s(Oae);sot=r(ema,"TFXLMRobertaForMultipleChoice"),ema.forEach(t),lot=r(_Ze," (XLM-RoBERTa model)"),_Ze.forEach(t),iot=i(Te),VA=n(Te,"LI",{});var vZe=s(VA);Fye=n(vZe,"STRONG",{});var oma=s(Fye);dot=r(oma,"xlnet"),oma.forEach(t),cot=r(vZe," \u2014 "),Vae=n(vZe,"A",{href:!0});var rma=s(Vae);fot=r(rma,"TFXLNetForMultipleChoice"),rma.forEach(t),mot=r(vZe," (XLNet model)"),vZe.forEach(t),Te.forEach(t),got=i(Ci),T(XA.$$.fragment,Ci),Ci.forEach(t),Ei.forEach(t),Wro=i(f),Lf=n(f,"H2",{class:!0});var dno=s(Lf);zA=n(dno,"A",{id:!0,class:!0,href:!0});var tma=s(zA);Tye=n(tma,"SPAN",{});var ama=s(Tye);T(vR.$$.fragment,ama),ama.forEach(t),tma.forEach(t),hot=i(dno),Mye=n(dno,"SPAN",{});var nma=s(Mye);uot=r(nma,"TFAutoModelForNextSentencePrediction"),nma.forEach(t),dno.forEach(t),Uro=i(f),_r=n(f,"DIV",{class:!0});var wi=s(_r);T(bR.$$.fragment,wi),pot=i(wi),yf=n(wi,"P",{});var mce=s(yf);_ot=r(mce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Xae=n(mce,"A",{href:!0});var sma=s(Xae);vot=r(sma,"from_pretrained()"),sma.forEach(t),bot=r(mce," class method or the "),zae=n(mce,"A",{href:!0});var lma=s(zae);Fot=r(lma,"from_config()"),lma.forEach(t),Tot=r(mce,` class
method.`),mce.forEach(t),Mot=i(wi),FR=n(wi,"P",{});var cno=s(FR);Eot=r(cno,"This class cannot be instantiated directly using "),Eye=n(cno,"CODE",{});var ima=s(Eye);Cot=r(ima,"__init__()"),ima.forEach(t),wot=r(cno," (throws an error)."),cno.forEach(t),Aot=i(wi),ra=n(wi,"DIV",{class:!0});var D9=s(ra);T(TR.$$.fragment,D9),Lot=i(D9),Cye=n(D9,"P",{});var dma=s(Cye);yot=r(dma,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),dma.forEach(t),xot=i(D9),xf=n(D9,"P",{});var gce=s(xf);$ot=r(gce,`Note:
Loading a model from its configuration file does `),wye=n(gce,"STRONG",{});var cma=s(wye);kot=r(cma,"not"),cma.forEach(t),Sot=r(gce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qae=n(gce,"A",{href:!0});var fma=s(Qae);Rot=r(fma,"from_pretrained()"),fma.forEach(t),Pot=r(gce," to load the model weights."),gce.forEach(t),Bot=i(D9),T(QA.$$.fragment,D9),D9.forEach(t),Iot=i(wi),Wr=n(wi,"DIV",{class:!0});var Ai=s(Wr);T(MR.$$.fragment,Ai),Not=i(Ai),Aye=n(Ai,"P",{});var mma=s(Aye);qot=r(mma,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),mma.forEach(t),jot=i(Ai),jn=n(Ai,"P",{});var G9=s(jn);Dot=r(G9,"The model class to instantiate is selected based on the "),Lye=n(G9,"CODE",{});var gma=s(Lye);Got=r(gma,"model_type"),gma.forEach(t),Oot=r(G9,` property of the config object (either
passed as an argument or loaded from `),yye=n(G9,"CODE",{});var hma=s(yye);Vot=r(hma,"pretrained_model_name_or_path"),hma.forEach(t),Xot=r(G9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xye=n(G9,"CODE",{});var uma=s(xye);zot=r(uma,"pretrained_model_name_or_path"),uma.forEach(t),Qot=r(G9,":"),G9.forEach(t),Wot=i(Ai),ER=n(Ai,"UL",{});var fno=s(ER);WA=n(fno,"LI",{});var bZe=s(WA);$ye=n(bZe,"STRONG",{});var pma=s($ye);Uot=r(pma,"bert"),pma.forEach(t),Hot=r(bZe," \u2014 "),Wae=n(bZe,"A",{href:!0});var _ma=s(Wae);Jot=r(_ma,"TFBertForNextSentencePrediction"),_ma.forEach(t),Yot=r(bZe," (BERT model)"),bZe.forEach(t),Zot=i(fno),UA=n(fno,"LI",{});var FZe=s(UA);kye=n(FZe,"STRONG",{});var vma=s(kye);Kot=r(vma,"mobilebert"),vma.forEach(t),ert=r(FZe," \u2014 "),Uae=n(FZe,"A",{href:!0});var bma=s(Uae);ort=r(bma,"TFMobileBertForNextSentencePrediction"),bma.forEach(t),rrt=r(FZe," (MobileBERT model)"),FZe.forEach(t),fno.forEach(t),trt=i(Ai),T(HA.$$.fragment,Ai),Ai.forEach(t),wi.forEach(t),Hro=i(f),$f=n(f,"H2",{class:!0});var mno=s($f);JA=n(mno,"A",{id:!0,class:!0,href:!0});var Fma=s(JA);Sye=n(Fma,"SPAN",{});var Tma=s(Sye);T(CR.$$.fragment,Tma),Tma.forEach(t),Fma.forEach(t),art=i(mno),Rye=n(mno,"SPAN",{});var Mma=s(Rye);nrt=r(Mma,"TFAutoModelForTableQuestionAnswering"),Mma.forEach(t),mno.forEach(t),Jro=i(f),vr=n(f,"DIV",{class:!0});var Li=s(vr);T(wR.$$.fragment,Li),srt=i(Li),kf=n(Li,"P",{});var hce=s(kf);lrt=r(hce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Hae=n(hce,"A",{href:!0});var Ema=s(Hae);irt=r(Ema,"from_pretrained()"),Ema.forEach(t),drt=r(hce," class method or the "),Jae=n(hce,"A",{href:!0});var Cma=s(Jae);crt=r(Cma,"from_config()"),Cma.forEach(t),frt=r(hce,` class
method.`),hce.forEach(t),mrt=i(Li),AR=n(Li,"P",{});var gno=s(AR);grt=r(gno,"This class cannot be instantiated directly using "),Pye=n(gno,"CODE",{});var wma=s(Pye);hrt=r(wma,"__init__()"),wma.forEach(t),urt=r(gno," (throws an error)."),gno.forEach(t),prt=i(Li),ta=n(Li,"DIV",{class:!0});var O9=s(ta);T(LR.$$.fragment,O9),_rt=i(O9),Bye=n(O9,"P",{});var Ama=s(Bye);vrt=r(Ama,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Ama.forEach(t),brt=i(O9),Sf=n(O9,"P",{});var uce=s(Sf);Frt=r(uce,`Note:
Loading a model from its configuration file does `),Iye=n(uce,"STRONG",{});var Lma=s(Iye);Trt=r(Lma,"not"),Lma.forEach(t),Mrt=r(uce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yae=n(uce,"A",{href:!0});var yma=s(Yae);Ert=r(yma,"from_pretrained()"),yma.forEach(t),Crt=r(uce," to load the model weights."),uce.forEach(t),wrt=i(O9),T(YA.$$.fragment,O9),O9.forEach(t),Art=i(Li),Ur=n(Li,"DIV",{class:!0});var yi=s(Ur);T(yR.$$.fragment,yi),Lrt=i(yi),Nye=n(yi,"P",{});var xma=s(Nye);yrt=r(xma,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),xma.forEach(t),xrt=i(yi),Dn=n(yi,"P",{});var V9=s(Dn);$rt=r(V9,"The model class to instantiate is selected based on the "),qye=n(V9,"CODE",{});var $ma=s(qye);krt=r($ma,"model_type"),$ma.forEach(t),Srt=r(V9,` property of the config object (either
passed as an argument or loaded from `),jye=n(V9,"CODE",{});var kma=s(jye);Rrt=r(kma,"pretrained_model_name_or_path"),kma.forEach(t),Prt=r(V9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dye=n(V9,"CODE",{});var Sma=s(Dye);Brt=r(Sma,"pretrained_model_name_or_path"),Sma.forEach(t),Irt=r(V9,":"),V9.forEach(t),Nrt=i(yi),Gye=n(yi,"UL",{});var Rma=s(Gye);ZA=n(Rma,"LI",{});var TZe=s(ZA);Oye=n(TZe,"STRONG",{});var Pma=s(Oye);qrt=r(Pma,"tapas"),Pma.forEach(t),jrt=r(TZe," \u2014 "),Zae=n(TZe,"A",{href:!0});var Bma=s(Zae);Drt=r(Bma,"TFTapasForQuestionAnswering"),Bma.forEach(t),Grt=r(TZe," (TAPAS model)"),TZe.forEach(t),Rma.forEach(t),Ort=i(yi),T(KA.$$.fragment,yi),yi.forEach(t),Li.forEach(t),Yro=i(f),Rf=n(f,"H2",{class:!0});var hno=s(Rf);e6=n(hno,"A",{id:!0,class:!0,href:!0});var Ima=s(e6);Vye=n(Ima,"SPAN",{});var Nma=s(Vye);T(xR.$$.fragment,Nma),Nma.forEach(t),Ima.forEach(t),Vrt=i(hno),Xye=n(hno,"SPAN",{});var qma=s(Xye);Xrt=r(qma,"TFAutoModelForDocumentQuestionAnswering"),qma.forEach(t),hno.forEach(t),Zro=i(f),br=n(f,"DIV",{class:!0});var xi=s(br);T($R.$$.fragment,xi),zrt=i(xi),Pf=n(xi,"P",{});var pce=s(Pf);Qrt=r(pce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),Kae=n(pce,"A",{href:!0});var jma=s(Kae);Wrt=r(jma,"from_pretrained()"),jma.forEach(t),Urt=r(pce," class method or the "),ene=n(pce,"A",{href:!0});var Dma=s(ene);Hrt=r(Dma,"from_config()"),Dma.forEach(t),Jrt=r(pce,` class
method.`),pce.forEach(t),Yrt=i(xi),kR=n(xi,"P",{});var uno=s(kR);Zrt=r(uno,"This class cannot be instantiated directly using "),zye=n(uno,"CODE",{});var Gma=s(zye);Krt=r(Gma,"__init__()"),Gma.forEach(t),ett=r(uno," (throws an error)."),uno.forEach(t),ott=i(xi),aa=n(xi,"DIV",{class:!0});var X9=s(aa);T(SR.$$.fragment,X9),rtt=i(X9),Qye=n(X9,"P",{});var Oma=s(Qye);ttt=r(Oma,"Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),Oma.forEach(t),att=i(X9),Bf=n(X9,"P",{});var _ce=s(Bf);ntt=r(_ce,`Note:
Loading a model from its configuration file does `),Wye=n(_ce,"STRONG",{});var Vma=s(Wye);stt=r(Vma,"not"),Vma.forEach(t),ltt=r(_ce,` load the model weights. It only affects the
model\u2019s configuration. Use `),one=n(_ce,"A",{href:!0});var Xma=s(one);itt=r(Xma,"from_pretrained()"),Xma.forEach(t),dtt=r(_ce," to load the model weights."),_ce.forEach(t),ctt=i(X9),T(o6.$$.fragment,X9),X9.forEach(t),ftt=i(xi),Hr=n(xi,"DIV",{class:!0});var $i=s(Hr);T(RR.$$.fragment,$i),mtt=i($i),Uye=n($i,"P",{});var zma=s(Uye);gtt=r(zma,"Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),zma.forEach(t),htt=i($i),Gn=n($i,"P",{});var z9=s(Gn);utt=r(z9,"The model class to instantiate is selected based on the "),Hye=n(z9,"CODE",{});var Qma=s(Hye);ptt=r(Qma,"model_type"),Qma.forEach(t),_tt=r(z9,` property of the config object (either
passed as an argument or loaded from `),Jye=n(z9,"CODE",{});var Wma=s(Jye);vtt=r(Wma,"pretrained_model_name_or_path"),Wma.forEach(t),btt=r(z9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yye=n(z9,"CODE",{});var Uma=s(Yye);Ftt=r(Uma,"pretrained_model_name_or_path"),Uma.forEach(t),Ttt=r(z9,":"),z9.forEach(t),Mtt=i($i),Zye=n($i,"UL",{});var Hma=s(Zye);r6=n(Hma,"LI",{});var MZe=s(r6);Kye=n(MZe,"STRONG",{});var Jma=s(Kye);Ett=r(Jma,"layoutlm"),Jma.forEach(t),Ctt=r(MZe," \u2014 "),rne=n(MZe,"A",{href:!0});var Yma=s(rne);wtt=r(Yma,"TFLayoutLMForQuestionAnswering"),Yma.forEach(t),Att=r(MZe," (LayoutLM model)"),MZe.forEach(t),Hma.forEach(t),Ltt=i($i),T(t6.$$.fragment,$i),$i.forEach(t),xi.forEach(t),Kro=i(f),If=n(f,"H2",{class:!0});var pno=s(If);a6=n(pno,"A",{id:!0,class:!0,href:!0});var Zma=s(a6);e9e=n(Zma,"SPAN",{});var Kma=s(e9e);T(PR.$$.fragment,Kma),Kma.forEach(t),Zma.forEach(t),ytt=i(pno),o9e=n(pno,"SPAN",{});var ega=s(o9e);xtt=r(ega,"TFAutoModelForTokenClassification"),ega.forEach(t),pno.forEach(t),eto=i(f),Fr=n(f,"DIV",{class:!0});var ki=s(Fr);T(BR.$$.fragment,ki),$tt=i(ki),Nf=n(ki,"P",{});var vce=s(Nf);ktt=r(vce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),tne=n(vce,"A",{href:!0});var oga=s(tne);Stt=r(oga,"from_pretrained()"),oga.forEach(t),Rtt=r(vce," class method or the "),ane=n(vce,"A",{href:!0});var rga=s(ane);Ptt=r(rga,"from_config()"),rga.forEach(t),Btt=r(vce,` class
method.`),vce.forEach(t),Itt=i(ki),IR=n(ki,"P",{});var _no=s(IR);Ntt=r(_no,"This class cannot be instantiated directly using "),r9e=n(_no,"CODE",{});var tga=s(r9e);qtt=r(tga,"__init__()"),tga.forEach(t),jtt=r(_no," (throws an error)."),_no.forEach(t),Dtt=i(ki),na=n(ki,"DIV",{class:!0});var Q9=s(na);T(NR.$$.fragment,Q9),Gtt=i(Q9),t9e=n(Q9,"P",{});var aga=s(t9e);Ott=r(aga,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),aga.forEach(t),Vtt=i(Q9),qf=n(Q9,"P",{});var bce=s(qf);Xtt=r(bce,`Note:
Loading a model from its configuration file does `),a9e=n(bce,"STRONG",{});var nga=s(a9e);ztt=r(nga,"not"),nga.forEach(t),Qtt=r(bce,` load the model weights. It only affects the
model\u2019s configuration. Use `),nne=n(bce,"A",{href:!0});var sga=s(nne);Wtt=r(sga,"from_pretrained()"),sga.forEach(t),Utt=r(bce," to load the model weights."),bce.forEach(t),Htt=i(Q9),T(n6.$$.fragment,Q9),Q9.forEach(t),Jtt=i(ki),Jr=n(ki,"DIV",{class:!0});var Si=s(Jr);T(qR.$$.fragment,Si),Ytt=i(Si),n9e=n(Si,"P",{});var lga=s(n9e);Ztt=r(lga,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),lga.forEach(t),Ktt=i(Si),On=n(Si,"P",{});var W9=s(On);eat=r(W9,"The model class to instantiate is selected based on the "),s9e=n(W9,"CODE",{});var iga=s(s9e);oat=r(iga,"model_type"),iga.forEach(t),rat=r(W9,` property of the config object (either
passed as an argument or loaded from `),l9e=n(W9,"CODE",{});var dga=s(l9e);tat=r(dga,"pretrained_model_name_or_path"),dga.forEach(t),aat=r(W9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i9e=n(W9,"CODE",{});var cga=s(i9e);nat=r(cga,"pretrained_model_name_or_path"),cga.forEach(t),sat=r(W9,":"),W9.forEach(t),lat=i(Si),ce=n(Si,"UL",{});var he=s(ce);s6=n(he,"LI",{});var EZe=s(s6);d9e=n(EZe,"STRONG",{});var fga=s(d9e);iat=r(fga,"albert"),fga.forEach(t),dat=r(EZe," \u2014 "),sne=n(EZe,"A",{href:!0});var mga=s(sne);cat=r(mga,"TFAlbertForTokenClassification"),mga.forEach(t),fat=r(EZe," (ALBERT model)"),EZe.forEach(t),mat=i(he),l6=n(he,"LI",{});var CZe=s(l6);c9e=n(CZe,"STRONG",{});var gga=s(c9e);gat=r(gga,"bert"),gga.forEach(t),hat=r(CZe," \u2014 "),lne=n(CZe,"A",{href:!0});var hga=s(lne);uat=r(hga,"TFBertForTokenClassification"),hga.forEach(t),pat=r(CZe," (BERT model)"),CZe.forEach(t),_at=i(he),i6=n(he,"LI",{});var wZe=s(i6);f9e=n(wZe,"STRONG",{});var uga=s(f9e);vat=r(uga,"camembert"),uga.forEach(t),bat=r(wZe," \u2014 "),ine=n(wZe,"A",{href:!0});var pga=s(ine);Fat=r(pga,"TFCamembertForTokenClassification"),pga.forEach(t),Tat=r(wZe," (CamemBERT model)"),wZe.forEach(t),Mat=i(he),d6=n(he,"LI",{});var AZe=s(d6);m9e=n(AZe,"STRONG",{});var _ga=s(m9e);Eat=r(_ga,"convbert"),_ga.forEach(t),Cat=r(AZe," \u2014 "),dne=n(AZe,"A",{href:!0});var vga=s(dne);wat=r(vga,"TFConvBertForTokenClassification"),vga.forEach(t),Aat=r(AZe," (ConvBERT model)"),AZe.forEach(t),Lat=i(he),c6=n(he,"LI",{});var LZe=s(c6);g9e=n(LZe,"STRONG",{});var bga=s(g9e);yat=r(bga,"deberta"),bga.forEach(t),xat=r(LZe," \u2014 "),cne=n(LZe,"A",{href:!0});var Fga=s(cne);$at=r(Fga,"TFDebertaForTokenClassification"),Fga.forEach(t),kat=r(LZe," (DeBERTa model)"),LZe.forEach(t),Sat=i(he),f6=n(he,"LI",{});var yZe=s(f6);h9e=n(yZe,"STRONG",{});var Tga=s(h9e);Rat=r(Tga,"deberta-v2"),Tga.forEach(t),Pat=r(yZe," \u2014 "),fne=n(yZe,"A",{href:!0});var Mga=s(fne);Bat=r(Mga,"TFDebertaV2ForTokenClassification"),Mga.forEach(t),Iat=r(yZe," (DeBERTa-v2 model)"),yZe.forEach(t),Nat=i(he),m6=n(he,"LI",{});var xZe=s(m6);u9e=n(xZe,"STRONG",{});var Ega=s(u9e);qat=r(Ega,"distilbert"),Ega.forEach(t),jat=r(xZe," \u2014 "),mne=n(xZe,"A",{href:!0});var Cga=s(mne);Dat=r(Cga,"TFDistilBertForTokenClassification"),Cga.forEach(t),Gat=r(xZe," (DistilBERT model)"),xZe.forEach(t),Oat=i(he),g6=n(he,"LI",{});var $Ze=s(g6);p9e=n($Ze,"STRONG",{});var wga=s(p9e);Vat=r(wga,"electra"),wga.forEach(t),Xat=r($Ze," \u2014 "),gne=n($Ze,"A",{href:!0});var Aga=s(gne);zat=r(Aga,"TFElectraForTokenClassification"),Aga.forEach(t),Qat=r($Ze," (ELECTRA model)"),$Ze.forEach(t),Wat=i(he),h6=n(he,"LI",{});var kZe=s(h6);_9e=n(kZe,"STRONG",{});var Lga=s(_9e);Uat=r(Lga,"flaubert"),Lga.forEach(t),Hat=r(kZe," \u2014 "),hne=n(kZe,"A",{href:!0});var yga=s(hne);Jat=r(yga,"TFFlaubertForTokenClassification"),yga.forEach(t),Yat=r(kZe," (FlauBERT model)"),kZe.forEach(t),Zat=i(he),u6=n(he,"LI",{});var SZe=s(u6);v9e=n(SZe,"STRONG",{});var xga=s(v9e);Kat=r(xga,"funnel"),xga.forEach(t),ent=r(SZe," \u2014 "),une=n(SZe,"A",{href:!0});var $ga=s(une);ont=r($ga,"TFFunnelForTokenClassification"),$ga.forEach(t),rnt=r(SZe," (Funnel Transformer model)"),SZe.forEach(t),tnt=i(he),p6=n(he,"LI",{});var RZe=s(p6);b9e=n(RZe,"STRONG",{});var kga=s(b9e);ant=r(kga,"layoutlm"),kga.forEach(t),nnt=r(RZe," \u2014 "),pne=n(RZe,"A",{href:!0});var Sga=s(pne);snt=r(Sga,"TFLayoutLMForTokenClassification"),Sga.forEach(t),lnt=r(RZe," (LayoutLM model)"),RZe.forEach(t),int=i(he),_6=n(he,"LI",{});var PZe=s(_6);F9e=n(PZe,"STRONG",{});var Rga=s(F9e);dnt=r(Rga,"layoutlmv3"),Rga.forEach(t),cnt=r(PZe," \u2014 "),_ne=n(PZe,"A",{href:!0});var Pga=s(_ne);fnt=r(Pga,"TFLayoutLMv3ForTokenClassification"),Pga.forEach(t),mnt=r(PZe," (LayoutLMv3 model)"),PZe.forEach(t),gnt=i(he),v6=n(he,"LI",{});var BZe=s(v6);T9e=n(BZe,"STRONG",{});var Bga=s(T9e);hnt=r(Bga,"longformer"),Bga.forEach(t),unt=r(BZe," \u2014 "),vne=n(BZe,"A",{href:!0});var Iga=s(vne);pnt=r(Iga,"TFLongformerForTokenClassification"),Iga.forEach(t),_nt=r(BZe," (Longformer model)"),BZe.forEach(t),vnt=i(he),b6=n(he,"LI",{});var IZe=s(b6);M9e=n(IZe,"STRONG",{});var Nga=s(M9e);bnt=r(Nga,"mobilebert"),Nga.forEach(t),Fnt=r(IZe," \u2014 "),bne=n(IZe,"A",{href:!0});var qga=s(bne);Tnt=r(qga,"TFMobileBertForTokenClassification"),qga.forEach(t),Mnt=r(IZe," (MobileBERT model)"),IZe.forEach(t),Ent=i(he),F6=n(he,"LI",{});var NZe=s(F6);E9e=n(NZe,"STRONG",{});var jga=s(E9e);Cnt=r(jga,"mpnet"),jga.forEach(t),wnt=r(NZe," \u2014 "),Fne=n(NZe,"A",{href:!0});var Dga=s(Fne);Ant=r(Dga,"TFMPNetForTokenClassification"),Dga.forEach(t),Lnt=r(NZe," (MPNet model)"),NZe.forEach(t),ynt=i(he),T6=n(he,"LI",{});var qZe=s(T6);C9e=n(qZe,"STRONG",{});var Gga=s(C9e);xnt=r(Gga,"rembert"),Gga.forEach(t),$nt=r(qZe," \u2014 "),Tne=n(qZe,"A",{href:!0});var Oga=s(Tne);knt=r(Oga,"TFRemBertForTokenClassification"),Oga.forEach(t),Snt=r(qZe," (RemBERT model)"),qZe.forEach(t),Rnt=i(he),M6=n(he,"LI",{});var jZe=s(M6);w9e=n(jZe,"STRONG",{});var Vga=s(w9e);Pnt=r(Vga,"roberta"),Vga.forEach(t),Bnt=r(jZe," \u2014 "),Mne=n(jZe,"A",{href:!0});var Xga=s(Mne);Int=r(Xga,"TFRobertaForTokenClassification"),Xga.forEach(t),Nnt=r(jZe," (RoBERTa model)"),jZe.forEach(t),qnt=i(he),E6=n(he,"LI",{});var DZe=s(E6);A9e=n(DZe,"STRONG",{});var zga=s(A9e);jnt=r(zga,"roformer"),zga.forEach(t),Dnt=r(DZe," \u2014 "),Ene=n(DZe,"A",{href:!0});var Qga=s(Ene);Gnt=r(Qga,"TFRoFormerForTokenClassification"),Qga.forEach(t),Ont=r(DZe," (RoFormer model)"),DZe.forEach(t),Vnt=i(he),C6=n(he,"LI",{});var GZe=s(C6);L9e=n(GZe,"STRONG",{});var Wga=s(L9e);Xnt=r(Wga,"xlm"),Wga.forEach(t),znt=r(GZe," \u2014 "),Cne=n(GZe,"A",{href:!0});var Uga=s(Cne);Qnt=r(Uga,"TFXLMForTokenClassification"),Uga.forEach(t),Wnt=r(GZe," (XLM model)"),GZe.forEach(t),Unt=i(he),w6=n(he,"LI",{});var OZe=s(w6);y9e=n(OZe,"STRONG",{});var Hga=s(y9e);Hnt=r(Hga,"xlm-roberta"),Hga.forEach(t),Jnt=r(OZe," \u2014 "),wne=n(OZe,"A",{href:!0});var Jga=s(wne);Ynt=r(Jga,"TFXLMRobertaForTokenClassification"),Jga.forEach(t),Znt=r(OZe," (XLM-RoBERTa model)"),OZe.forEach(t),Knt=i(he),A6=n(he,"LI",{});var VZe=s(A6);x9e=n(VZe,"STRONG",{});var Yga=s(x9e);est=r(Yga,"xlnet"),Yga.forEach(t),ost=r(VZe," \u2014 "),Ane=n(VZe,"A",{href:!0});var Zga=s(Ane);rst=r(Zga,"TFXLNetForTokenClassification"),Zga.forEach(t),tst=r(VZe," (XLNet model)"),VZe.forEach(t),he.forEach(t),ast=i(Si),T(L6.$$.fragment,Si),Si.forEach(t),ki.forEach(t),oto=i(f),jf=n(f,"H2",{class:!0});var vno=s(jf);y6=n(vno,"A",{id:!0,class:!0,href:!0});var Kga=s(y6);$9e=n(Kga,"SPAN",{});var eha=s($9e);T(jR.$$.fragment,eha),eha.forEach(t),Kga.forEach(t),nst=i(vno),k9e=n(vno,"SPAN",{});var oha=s(k9e);sst=r(oha,"TFAutoModelForQuestionAnswering"),oha.forEach(t),vno.forEach(t),rto=i(f),Tr=n(f,"DIV",{class:!0});var Ri=s(Tr);T(DR.$$.fragment,Ri),lst=i(Ri),Df=n(Ri,"P",{});var Fce=s(Df);ist=r(Fce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Lne=n(Fce,"A",{href:!0});var rha=s(Lne);dst=r(rha,"from_pretrained()"),rha.forEach(t),cst=r(Fce," class method or the "),yne=n(Fce,"A",{href:!0});var tha=s(yne);fst=r(tha,"from_config()"),tha.forEach(t),mst=r(Fce,` class
method.`),Fce.forEach(t),gst=i(Ri),GR=n(Ri,"P",{});var bno=s(GR);hst=r(bno,"This class cannot be instantiated directly using "),S9e=n(bno,"CODE",{});var aha=s(S9e);ust=r(aha,"__init__()"),aha.forEach(t),pst=r(bno," (throws an error)."),bno.forEach(t),_st=i(Ri),sa=n(Ri,"DIV",{class:!0});var U9=s(sa);T(OR.$$.fragment,U9),vst=i(U9),R9e=n(U9,"P",{});var nha=s(R9e);bst=r(nha,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),nha.forEach(t),Fst=i(U9),Gf=n(U9,"P",{});var Tce=s(Gf);Tst=r(Tce,`Note:
Loading a model from its configuration file does `),P9e=n(Tce,"STRONG",{});var sha=s(P9e);Mst=r(sha,"not"),sha.forEach(t),Est=r(Tce,` load the model weights. It only affects the
model\u2019s configuration. Use `),xne=n(Tce,"A",{href:!0});var lha=s(xne);Cst=r(lha,"from_pretrained()"),lha.forEach(t),wst=r(Tce," to load the model weights."),Tce.forEach(t),Ast=i(U9),T(x6.$$.fragment,U9),U9.forEach(t),Lst=i(Ri),Yr=n(Ri,"DIV",{class:!0});var Pi=s(Yr);T(VR.$$.fragment,Pi),yst=i(Pi),B9e=n(Pi,"P",{});var iha=s(B9e);xst=r(iha,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),iha.forEach(t),$st=i(Pi),Vn=n(Pi,"P",{});var H9=s(Vn);kst=r(H9,"The model class to instantiate is selected based on the "),I9e=n(H9,"CODE",{});var dha=s(I9e);Sst=r(dha,"model_type"),dha.forEach(t),Rst=r(H9,` property of the config object (either
passed as an argument or loaded from `),N9e=n(H9,"CODE",{});var cha=s(N9e);Pst=r(cha,"pretrained_model_name_or_path"),cha.forEach(t),Bst=r(H9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q9e=n(H9,"CODE",{});var fha=s(q9e);Ist=r(fha,"pretrained_model_name_or_path"),fha.forEach(t),Nst=r(H9,":"),H9.forEach(t),qst=i(Pi),fe=n(Pi,"UL",{});var ue=s(fe);$6=n(ue,"LI",{});var XZe=s($6);j9e=n(XZe,"STRONG",{});var mha=s(j9e);jst=r(mha,"albert"),mha.forEach(t),Dst=r(XZe," \u2014 "),$ne=n(XZe,"A",{href:!0});var gha=s($ne);Gst=r(gha,"TFAlbertForQuestionAnswering"),gha.forEach(t),Ost=r(XZe," (ALBERT model)"),XZe.forEach(t),Vst=i(ue),k6=n(ue,"LI",{});var zZe=s(k6);D9e=n(zZe,"STRONG",{});var hha=s(D9e);Xst=r(hha,"bert"),hha.forEach(t),zst=r(zZe," \u2014 "),kne=n(zZe,"A",{href:!0});var uha=s(kne);Qst=r(uha,"TFBertForQuestionAnswering"),uha.forEach(t),Wst=r(zZe," (BERT model)"),zZe.forEach(t),Ust=i(ue),S6=n(ue,"LI",{});var QZe=s(S6);G9e=n(QZe,"STRONG",{});var pha=s(G9e);Hst=r(pha,"camembert"),pha.forEach(t),Jst=r(QZe," \u2014 "),Sne=n(QZe,"A",{href:!0});var _ha=s(Sne);Yst=r(_ha,"TFCamembertForQuestionAnswering"),_ha.forEach(t),Zst=r(QZe," (CamemBERT model)"),QZe.forEach(t),Kst=i(ue),R6=n(ue,"LI",{});var WZe=s(R6);O9e=n(WZe,"STRONG",{});var vha=s(O9e);elt=r(vha,"convbert"),vha.forEach(t),olt=r(WZe," \u2014 "),Rne=n(WZe,"A",{href:!0});var bha=s(Rne);rlt=r(bha,"TFConvBertForQuestionAnswering"),bha.forEach(t),tlt=r(WZe," (ConvBERT model)"),WZe.forEach(t),alt=i(ue),P6=n(ue,"LI",{});var UZe=s(P6);V9e=n(UZe,"STRONG",{});var Fha=s(V9e);nlt=r(Fha,"deberta"),Fha.forEach(t),slt=r(UZe," \u2014 "),Pne=n(UZe,"A",{href:!0});var Tha=s(Pne);llt=r(Tha,"TFDebertaForQuestionAnswering"),Tha.forEach(t),ilt=r(UZe," (DeBERTa model)"),UZe.forEach(t),dlt=i(ue),B6=n(ue,"LI",{});var HZe=s(B6);X9e=n(HZe,"STRONG",{});var Mha=s(X9e);clt=r(Mha,"deberta-v2"),Mha.forEach(t),flt=r(HZe," \u2014 "),Bne=n(HZe,"A",{href:!0});var Eha=s(Bne);mlt=r(Eha,"TFDebertaV2ForQuestionAnswering"),Eha.forEach(t),glt=r(HZe," (DeBERTa-v2 model)"),HZe.forEach(t),hlt=i(ue),I6=n(ue,"LI",{});var JZe=s(I6);z9e=n(JZe,"STRONG",{});var Cha=s(z9e);ult=r(Cha,"distilbert"),Cha.forEach(t),plt=r(JZe," \u2014 "),Ine=n(JZe,"A",{href:!0});var wha=s(Ine);_lt=r(wha,"TFDistilBertForQuestionAnswering"),wha.forEach(t),vlt=r(JZe," (DistilBERT model)"),JZe.forEach(t),blt=i(ue),N6=n(ue,"LI",{});var YZe=s(N6);Q9e=n(YZe,"STRONG",{});var Aha=s(Q9e);Flt=r(Aha,"electra"),Aha.forEach(t),Tlt=r(YZe," \u2014 "),Nne=n(YZe,"A",{href:!0});var Lha=s(Nne);Mlt=r(Lha,"TFElectraForQuestionAnswering"),Lha.forEach(t),Elt=r(YZe," (ELECTRA model)"),YZe.forEach(t),Clt=i(ue),q6=n(ue,"LI",{});var ZZe=s(q6);W9e=n(ZZe,"STRONG",{});var yha=s(W9e);wlt=r(yha,"flaubert"),yha.forEach(t),Alt=r(ZZe," \u2014 "),qne=n(ZZe,"A",{href:!0});var xha=s(qne);Llt=r(xha,"TFFlaubertForQuestionAnsweringSimple"),xha.forEach(t),ylt=r(ZZe," (FlauBERT model)"),ZZe.forEach(t),xlt=i(ue),j6=n(ue,"LI",{});var KZe=s(j6);U9e=n(KZe,"STRONG",{});var $ha=s(U9e);$lt=r($ha,"funnel"),$ha.forEach(t),klt=r(KZe," \u2014 "),jne=n(KZe,"A",{href:!0});var kha=s(jne);Slt=r(kha,"TFFunnelForQuestionAnswering"),kha.forEach(t),Rlt=r(KZe," (Funnel Transformer model)"),KZe.forEach(t),Plt=i(ue),D6=n(ue,"LI",{});var eKe=s(D6);H9e=n(eKe,"STRONG",{});var Sha=s(H9e);Blt=r(Sha,"gptj"),Sha.forEach(t),Ilt=r(eKe," \u2014 "),Dne=n(eKe,"A",{href:!0});var Rha=s(Dne);Nlt=r(Rha,"TFGPTJForQuestionAnswering"),Rha.forEach(t),qlt=r(eKe," (GPT-J model)"),eKe.forEach(t),jlt=i(ue),G6=n(ue,"LI",{});var oKe=s(G6);J9e=n(oKe,"STRONG",{});var Pha=s(J9e);Dlt=r(Pha,"layoutlmv3"),Pha.forEach(t),Glt=r(oKe," \u2014 "),Gne=n(oKe,"A",{href:!0});var Bha=s(Gne);Olt=r(Bha,"TFLayoutLMv3ForQuestionAnswering"),Bha.forEach(t),Vlt=r(oKe," (LayoutLMv3 model)"),oKe.forEach(t),Xlt=i(ue),O6=n(ue,"LI",{});var rKe=s(O6);Y9e=n(rKe,"STRONG",{});var Iha=s(Y9e);zlt=r(Iha,"longformer"),Iha.forEach(t),Qlt=r(rKe," \u2014 "),One=n(rKe,"A",{href:!0});var Nha=s(One);Wlt=r(Nha,"TFLongformerForQuestionAnswering"),Nha.forEach(t),Ult=r(rKe," (Longformer model)"),rKe.forEach(t),Hlt=i(ue),V6=n(ue,"LI",{});var tKe=s(V6);Z9e=n(tKe,"STRONG",{});var qha=s(Z9e);Jlt=r(qha,"mobilebert"),qha.forEach(t),Ylt=r(tKe," \u2014 "),Vne=n(tKe,"A",{href:!0});var jha=s(Vne);Zlt=r(jha,"TFMobileBertForQuestionAnswering"),jha.forEach(t),Klt=r(tKe," (MobileBERT model)"),tKe.forEach(t),eit=i(ue),X6=n(ue,"LI",{});var aKe=s(X6);K9e=n(aKe,"STRONG",{});var Dha=s(K9e);oit=r(Dha,"mpnet"),Dha.forEach(t),rit=r(aKe," \u2014 "),Xne=n(aKe,"A",{href:!0});var Gha=s(Xne);tit=r(Gha,"TFMPNetForQuestionAnswering"),Gha.forEach(t),ait=r(aKe," (MPNet model)"),aKe.forEach(t),nit=i(ue),z6=n(ue,"LI",{});var nKe=s(z6);exe=n(nKe,"STRONG",{});var Oha=s(exe);sit=r(Oha,"rembert"),Oha.forEach(t),lit=r(nKe," \u2014 "),zne=n(nKe,"A",{href:!0});var Vha=s(zne);iit=r(Vha,"TFRemBertForQuestionAnswering"),Vha.forEach(t),dit=r(nKe," (RemBERT model)"),nKe.forEach(t),cit=i(ue),Q6=n(ue,"LI",{});var sKe=s(Q6);oxe=n(sKe,"STRONG",{});var Xha=s(oxe);fit=r(Xha,"roberta"),Xha.forEach(t),mit=r(sKe," \u2014 "),Qne=n(sKe,"A",{href:!0});var zha=s(Qne);git=r(zha,"TFRobertaForQuestionAnswering"),zha.forEach(t),hit=r(sKe," (RoBERTa model)"),sKe.forEach(t),uit=i(ue),W6=n(ue,"LI",{});var lKe=s(W6);rxe=n(lKe,"STRONG",{});var Qha=s(rxe);pit=r(Qha,"roformer"),Qha.forEach(t),_it=r(lKe," \u2014 "),Wne=n(lKe,"A",{href:!0});var Wha=s(Wne);vit=r(Wha,"TFRoFormerForQuestionAnswering"),Wha.forEach(t),bit=r(lKe," (RoFormer model)"),lKe.forEach(t),Fit=i(ue),U6=n(ue,"LI",{});var iKe=s(U6);txe=n(iKe,"STRONG",{});var Uha=s(txe);Tit=r(Uha,"xlm"),Uha.forEach(t),Mit=r(iKe," \u2014 "),Une=n(iKe,"A",{href:!0});var Hha=s(Une);Eit=r(Hha,"TFXLMForQuestionAnsweringSimple"),Hha.forEach(t),Cit=r(iKe," (XLM model)"),iKe.forEach(t),wit=i(ue),H6=n(ue,"LI",{});var dKe=s(H6);axe=n(dKe,"STRONG",{});var Jha=s(axe);Ait=r(Jha,"xlm-roberta"),Jha.forEach(t),Lit=r(dKe," \u2014 "),Hne=n(dKe,"A",{href:!0});var Yha=s(Hne);yit=r(Yha,"TFXLMRobertaForQuestionAnswering"),Yha.forEach(t),xit=r(dKe," (XLM-RoBERTa model)"),dKe.forEach(t),$it=i(ue),J6=n(ue,"LI",{});var cKe=s(J6);nxe=n(cKe,"STRONG",{});var Zha=s(nxe);kit=r(Zha,"xlnet"),Zha.forEach(t),Sit=r(cKe," \u2014 "),Jne=n(cKe,"A",{href:!0});var Kha=s(Jne);Rit=r(Kha,"TFXLNetForQuestionAnsweringSimple"),Kha.forEach(t),Pit=r(cKe," (XLNet model)"),cKe.forEach(t),ue.forEach(t),Bit=i(Pi),T(Y6.$$.fragment,Pi),Pi.forEach(t),Ri.forEach(t),tto=i(f),Of=n(f,"H2",{class:!0});var Fno=s(Of);Z6=n(Fno,"A",{id:!0,class:!0,href:!0});var eua=s(Z6);sxe=n(eua,"SPAN",{});var oua=s(sxe);T(XR.$$.fragment,oua),oua.forEach(t),eua.forEach(t),Iit=i(Fno),lxe=n(Fno,"SPAN",{});var rua=s(lxe);Nit=r(rua,"TFAutoModelForVision2Seq"),rua.forEach(t),Fno.forEach(t),ato=i(f),Mr=n(f,"DIV",{class:!0});var Bi=s(Mr);T(zR.$$.fragment,Bi),qit=i(Bi),Vf=n(Bi,"P",{});var Mce=s(Vf);jit=r(Mce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Yne=n(Mce,"A",{href:!0});var tua=s(Yne);Dit=r(tua,"from_pretrained()"),tua.forEach(t),Git=r(Mce," class method or the "),Zne=n(Mce,"A",{href:!0});var aua=s(Zne);Oit=r(aua,"from_config()"),aua.forEach(t),Vit=r(Mce,` class
method.`),Mce.forEach(t),Xit=i(Bi),QR=n(Bi,"P",{});var Tno=s(QR);zit=r(Tno,"This class cannot be instantiated directly using "),ixe=n(Tno,"CODE",{});var nua=s(ixe);Qit=r(nua,"__init__()"),nua.forEach(t),Wit=r(Tno," (throws an error)."),Tno.forEach(t),Uit=i(Bi),la=n(Bi,"DIV",{class:!0});var J9=s(la);T(WR.$$.fragment,J9),Hit=i(J9),dxe=n(J9,"P",{});var sua=s(dxe);Jit=r(sua,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),sua.forEach(t),Yit=i(J9),Xf=n(J9,"P",{});var Ece=s(Xf);Zit=r(Ece,`Note:
Loading a model from its configuration file does `),cxe=n(Ece,"STRONG",{});var lua=s(cxe);Kit=r(lua,"not"),lua.forEach(t),edt=r(Ece,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kne=n(Ece,"A",{href:!0});var iua=s(Kne);odt=r(iua,"from_pretrained()"),iua.forEach(t),rdt=r(Ece," to load the model weights."),Ece.forEach(t),tdt=i(J9),T(K6.$$.fragment,J9),J9.forEach(t),adt=i(Bi),Zr=n(Bi,"DIV",{class:!0});var Ii=s(Zr);T(UR.$$.fragment,Ii),ndt=i(Ii),fxe=n(Ii,"P",{});var dua=s(fxe);sdt=r(dua,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),dua.forEach(t),ldt=i(Ii),Xn=n(Ii,"P",{});var Y9=s(Xn);idt=r(Y9,"The model class to instantiate is selected based on the "),mxe=n(Y9,"CODE",{});var cua=s(mxe);ddt=r(cua,"model_type"),cua.forEach(t),cdt=r(Y9,` property of the config object (either
passed as an argument or loaded from `),gxe=n(Y9,"CODE",{});var fua=s(gxe);fdt=r(fua,"pretrained_model_name_or_path"),fua.forEach(t),mdt=r(Y9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hxe=n(Y9,"CODE",{});var mua=s(hxe);gdt=r(mua,"pretrained_model_name_or_path"),mua.forEach(t),hdt=r(Y9,":"),Y9.forEach(t),udt=i(Ii),uxe=n(Ii,"UL",{});var gua=s(uxe);e7=n(gua,"LI",{});var fKe=s(e7);pxe=n(fKe,"STRONG",{});var hua=s(pxe);pdt=r(hua,"vision-encoder-decoder"),hua.forEach(t),_dt=r(fKe," \u2014 "),ese=n(fKe,"A",{href:!0});var uua=s(ese);vdt=r(uua,"TFVisionEncoderDecoderModel"),uua.forEach(t),bdt=r(fKe," (Vision Encoder decoder model)"),fKe.forEach(t),gua.forEach(t),Fdt=i(Ii),T(o7.$$.fragment,Ii),Ii.forEach(t),Bi.forEach(t),nto=i(f),zf=n(f,"H2",{class:!0});var Mno=s(zf);r7=n(Mno,"A",{id:!0,class:!0,href:!0});var pua=s(r7);_xe=n(pua,"SPAN",{});var _ua=s(_xe);T(HR.$$.fragment,_ua),_ua.forEach(t),pua.forEach(t),Tdt=i(Mno),vxe=n(Mno,"SPAN",{});var vua=s(vxe);Mdt=r(vua,"TFAutoModelForSpeechSeq2Seq"),vua.forEach(t),Mno.forEach(t),sto=i(f),Er=n(f,"DIV",{class:!0});var Ni=s(Er);T(JR.$$.fragment,Ni),Edt=i(Ni),Qf=n(Ni,"P",{});var Cce=s(Qf);Cdt=r(Cce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ose=n(Cce,"A",{href:!0});var bua=s(ose);wdt=r(bua,"from_pretrained()"),bua.forEach(t),Adt=r(Cce," class method or the "),rse=n(Cce,"A",{href:!0});var Fua=s(rse);Ldt=r(Fua,"from_config()"),Fua.forEach(t),ydt=r(Cce,` class
method.`),Cce.forEach(t),xdt=i(Ni),YR=n(Ni,"P",{});var Eno=s(YR);$dt=r(Eno,"This class cannot be instantiated directly using "),bxe=n(Eno,"CODE",{});var Tua=s(bxe);kdt=r(Tua,"__init__()"),Tua.forEach(t),Sdt=r(Eno," (throws an error)."),Eno.forEach(t),Rdt=i(Ni),ia=n(Ni,"DIV",{class:!0});var Z9=s(ia);T(ZR.$$.fragment,Z9),Pdt=i(Z9),Fxe=n(Z9,"P",{});var Mua=s(Fxe);Bdt=r(Mua,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Mua.forEach(t),Idt=i(Z9),Wf=n(Z9,"P",{});var wce=s(Wf);Ndt=r(wce,`Note:
Loading a model from its configuration file does `),Txe=n(wce,"STRONG",{});var Eua=s(Txe);qdt=r(Eua,"not"),Eua.forEach(t),jdt=r(wce,` load the model weights. It only affects the
model\u2019s configuration. Use `),tse=n(wce,"A",{href:!0});var Cua=s(tse);Ddt=r(Cua,"from_pretrained()"),Cua.forEach(t),Gdt=r(wce," to load the model weights."),wce.forEach(t),Odt=i(Z9),T(t7.$$.fragment,Z9),Z9.forEach(t),Vdt=i(Ni),Kr=n(Ni,"DIV",{class:!0});var qi=s(Kr);T(KR.$$.fragment,qi),Xdt=i(qi),Mxe=n(qi,"P",{});var wua=s(Mxe);zdt=r(wua,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),wua.forEach(t),Qdt=i(qi),zn=n(qi,"P",{});var K9=s(zn);Wdt=r(K9,"The model class to instantiate is selected based on the "),Exe=n(K9,"CODE",{});var Aua=s(Exe);Udt=r(Aua,"model_type"),Aua.forEach(t),Hdt=r(K9,` property of the config object (either
passed as an argument or loaded from `),Cxe=n(K9,"CODE",{});var Lua=s(Cxe);Jdt=r(Lua,"pretrained_model_name_or_path"),Lua.forEach(t),Ydt=r(K9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wxe=n(K9,"CODE",{});var yua=s(wxe);Zdt=r(yua,"pretrained_model_name_or_path"),yua.forEach(t),Kdt=r(K9,":"),K9.forEach(t),ect=i(qi),eP=n(qi,"UL",{});var Cno=s(eP);a7=n(Cno,"LI",{});var mKe=s(a7);Axe=n(mKe,"STRONG",{});var xua=s(Axe);oct=r(xua,"speech_to_text"),xua.forEach(t),rct=r(mKe," \u2014 "),ase=n(mKe,"A",{href:!0});var $ua=s(ase);tct=r($ua,"TFSpeech2TextForConditionalGeneration"),$ua.forEach(t),act=r(mKe," (Speech2Text model)"),mKe.forEach(t),nct=i(Cno),n7=n(Cno,"LI",{});var gKe=s(n7);Lxe=n(gKe,"STRONG",{});var kua=s(Lxe);sct=r(kua,"whisper"),kua.forEach(t),lct=r(gKe," \u2014 "),nse=n(gKe,"A",{href:!0});var Sua=s(nse);ict=r(Sua,"TFWhisperForConditionalGeneration"),Sua.forEach(t),dct=r(gKe," (Whisper model)"),gKe.forEach(t),Cno.forEach(t),cct=i(qi),T(s7.$$.fragment,qi),qi.forEach(t),Ni.forEach(t),lto=i(f),Uf=n(f,"H2",{class:!0});var wno=s(Uf);l7=n(wno,"A",{id:!0,class:!0,href:!0});var Rua=s(l7);yxe=n(Rua,"SPAN",{});var Pua=s(yxe);T(oP.$$.fragment,Pua),Pua.forEach(t),Rua.forEach(t),fct=i(wno),xxe=n(wno,"SPAN",{});var Bua=s(xxe);mct=r(Bua,"FlaxAutoModel"),Bua.forEach(t),wno.forEach(t),ito=i(f),Cr=n(f,"DIV",{class:!0});var ji=s(Cr);T(rP.$$.fragment,ji),gct=i(ji),Hf=n(ji,"P",{});var Ace=s(Hf);hct=r(Ace,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),sse=n(Ace,"A",{href:!0});var Iua=s(sse);uct=r(Iua,"from_pretrained()"),Iua.forEach(t),pct=r(Ace," class method or the "),lse=n(Ace,"A",{href:!0});var Nua=s(lse);_ct=r(Nua,"from_config()"),Nua.forEach(t),vct=r(Ace,` class
method.`),Ace.forEach(t),bct=i(ji),tP=n(ji,"P",{});var Ano=s(tP);Fct=r(Ano,"This class cannot be instantiated directly using "),$xe=n(Ano,"CODE",{});var qua=s($xe);Tct=r(qua,"__init__()"),qua.forEach(t),Mct=r(Ano," (throws an error)."),Ano.forEach(t),Ect=i(ji),da=n(ji,"DIV",{class:!0});var ex=s(da);T(aP.$$.fragment,ex),Cct=i(ex),kxe=n(ex,"P",{});var jua=s(kxe);wct=r(jua,"Instantiates one of the base model classes of the library from a configuration."),jua.forEach(t),Act=i(ex),Jf=n(ex,"P",{});var Lce=s(Jf);Lct=r(Lce,`Note:
Loading a model from its configuration file does `),Sxe=n(Lce,"STRONG",{});var Dua=s(Sxe);yct=r(Dua,"not"),Dua.forEach(t),xct=r(Lce,` load the model weights. It only affects the
model\u2019s configuration. Use `),ise=n(Lce,"A",{href:!0});var Gua=s(ise);$ct=r(Gua,"from_pretrained()"),Gua.forEach(t),kct=r(Lce," to load the model weights."),Lce.forEach(t),Sct=i(ex),T(i7.$$.fragment,ex),ex.forEach(t),Rct=i(ji),et=n(ji,"DIV",{class:!0});var Di=s(et);T(nP.$$.fragment,Di),Pct=i(Di),Rxe=n(Di,"P",{});var Oua=s(Rxe);Bct=r(Oua,"Instantiate one of the base model classes of the library from a pretrained model."),Oua.forEach(t),Ict=i(Di),Qn=n(Di,"P",{});var ox=s(Qn);Nct=r(ox,"The model class to instantiate is selected based on the "),Pxe=n(ox,"CODE",{});var Vua=s(Pxe);qct=r(Vua,"model_type"),Vua.forEach(t),jct=r(ox,` property of the config object (either
passed as an argument or loaded from `),Bxe=n(ox,"CODE",{});var Xua=s(Bxe);Dct=r(Xua,"pretrained_model_name_or_path"),Xua.forEach(t),Gct=r(ox,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ixe=n(ox,"CODE",{});var zua=s(Ixe);Oct=r(zua,"pretrained_model_name_or_path"),zua.forEach(t),Vct=r(ox,":"),ox.forEach(t),Xct=i(Di),te=n(Di,"UL",{});var ne=s(te);d7=n(ne,"LI",{});var hKe=s(d7);Nxe=n(hKe,"STRONG",{});var Qua=s(Nxe);zct=r(Qua,"albert"),Qua.forEach(t),Qct=r(hKe," \u2014 "),dse=n(hKe,"A",{href:!0});var Wua=s(dse);Wct=r(Wua,"FlaxAlbertModel"),Wua.forEach(t),Uct=r(hKe," (ALBERT model)"),hKe.forEach(t),Hct=i(ne),c7=n(ne,"LI",{});var uKe=s(c7);qxe=n(uKe,"STRONG",{});var Uua=s(qxe);Jct=r(Uua,"bart"),Uua.forEach(t),Yct=r(uKe," \u2014 "),cse=n(uKe,"A",{href:!0});var Hua=s(cse);Zct=r(Hua,"FlaxBartModel"),Hua.forEach(t),Kct=r(uKe," (BART model)"),uKe.forEach(t),eft=i(ne),f7=n(ne,"LI",{});var pKe=s(f7);jxe=n(pKe,"STRONG",{});var Jua=s(jxe);oft=r(Jua,"beit"),Jua.forEach(t),rft=r(pKe," \u2014 "),fse=n(pKe,"A",{href:!0});var Yua=s(fse);tft=r(Yua,"FlaxBeitModel"),Yua.forEach(t),aft=r(pKe," (BEiT model)"),pKe.forEach(t),nft=i(ne),m7=n(ne,"LI",{});var _Ke=s(m7);Dxe=n(_Ke,"STRONG",{});var Zua=s(Dxe);sft=r(Zua,"bert"),Zua.forEach(t),lft=r(_Ke," \u2014 "),mse=n(_Ke,"A",{href:!0});var Kua=s(mse);ift=r(Kua,"FlaxBertModel"),Kua.forEach(t),dft=r(_Ke," (BERT model)"),_Ke.forEach(t),cft=i(ne),g7=n(ne,"LI",{});var vKe=s(g7);Gxe=n(vKe,"STRONG",{});var epa=s(Gxe);fft=r(epa,"big_bird"),epa.forEach(t),mft=r(vKe," \u2014 "),gse=n(vKe,"A",{href:!0});var opa=s(gse);gft=r(opa,"FlaxBigBirdModel"),opa.forEach(t),hft=r(vKe," (BigBird model)"),vKe.forEach(t),uft=i(ne),h7=n(ne,"LI",{});var bKe=s(h7);Oxe=n(bKe,"STRONG",{});var rpa=s(Oxe);pft=r(rpa,"blenderbot"),rpa.forEach(t),_ft=r(bKe," \u2014 "),hse=n(bKe,"A",{href:!0});var tpa=s(hse);vft=r(tpa,"FlaxBlenderbotModel"),tpa.forEach(t),bft=r(bKe," (Blenderbot model)"),bKe.forEach(t),Fft=i(ne),u7=n(ne,"LI",{});var FKe=s(u7);Vxe=n(FKe,"STRONG",{});var apa=s(Vxe);Tft=r(apa,"blenderbot-small"),apa.forEach(t),Mft=r(FKe," \u2014 "),use=n(FKe,"A",{href:!0});var npa=s(use);Eft=r(npa,"FlaxBlenderbotSmallModel"),npa.forEach(t),Cft=r(FKe," (BlenderbotSmall model)"),FKe.forEach(t),wft=i(ne),p7=n(ne,"LI",{});var TKe=s(p7);Xxe=n(TKe,"STRONG",{});var spa=s(Xxe);Aft=r(spa,"clip"),spa.forEach(t),Lft=r(TKe," \u2014 "),pse=n(TKe,"A",{href:!0});var lpa=s(pse);yft=r(lpa,"FlaxCLIPModel"),lpa.forEach(t),xft=r(TKe," (CLIP model)"),TKe.forEach(t),$ft=i(ne),_7=n(ne,"LI",{});var MKe=s(_7);zxe=n(MKe,"STRONG",{});var ipa=s(zxe);kft=r(ipa,"distilbert"),ipa.forEach(t),Sft=r(MKe," \u2014 "),_se=n(MKe,"A",{href:!0});var dpa=s(_se);Rft=r(dpa,"FlaxDistilBertModel"),dpa.forEach(t),Pft=r(MKe," (DistilBERT model)"),MKe.forEach(t),Bft=i(ne),v7=n(ne,"LI",{});var EKe=s(v7);Qxe=n(EKe,"STRONG",{});var cpa=s(Qxe);Ift=r(cpa,"electra"),cpa.forEach(t),Nft=r(EKe," \u2014 "),vse=n(EKe,"A",{href:!0});var fpa=s(vse);qft=r(fpa,"FlaxElectraModel"),fpa.forEach(t),jft=r(EKe," (ELECTRA model)"),EKe.forEach(t),Dft=i(ne),b7=n(ne,"LI",{});var CKe=s(b7);Wxe=n(CKe,"STRONG",{});var mpa=s(Wxe);Gft=r(mpa,"gpt2"),mpa.forEach(t),Oft=r(CKe," \u2014 "),bse=n(CKe,"A",{href:!0});var gpa=s(bse);Vft=r(gpa,"FlaxGPT2Model"),gpa.forEach(t),Xft=r(CKe," (OpenAI GPT-2 model)"),CKe.forEach(t),zft=i(ne),F7=n(ne,"LI",{});var wKe=s(F7);Uxe=n(wKe,"STRONG",{});var hpa=s(Uxe);Qft=r(hpa,"gpt_neo"),hpa.forEach(t),Wft=r(wKe," \u2014 "),Fse=n(wKe,"A",{href:!0});var upa=s(Fse);Uft=r(upa,"FlaxGPTNeoModel"),upa.forEach(t),Hft=r(wKe," (GPT Neo model)"),wKe.forEach(t),Jft=i(ne),T7=n(ne,"LI",{});var AKe=s(T7);Hxe=n(AKe,"STRONG",{});var ppa=s(Hxe);Yft=r(ppa,"gptj"),ppa.forEach(t),Zft=r(AKe," \u2014 "),Tse=n(AKe,"A",{href:!0});var _pa=s(Tse);Kft=r(_pa,"FlaxGPTJModel"),_pa.forEach(t),emt=r(AKe," (GPT-J model)"),AKe.forEach(t),omt=i(ne),M7=n(ne,"LI",{});var LKe=s(M7);Jxe=n(LKe,"STRONG",{});var vpa=s(Jxe);rmt=r(vpa,"longt5"),vpa.forEach(t),tmt=r(LKe," \u2014 "),Mse=n(LKe,"A",{href:!0});var bpa=s(Mse);amt=r(bpa,"FlaxLongT5Model"),bpa.forEach(t),nmt=r(LKe," (LongT5 model)"),LKe.forEach(t),smt=i(ne),E7=n(ne,"LI",{});var yKe=s(E7);Yxe=n(yKe,"STRONG",{});var Fpa=s(Yxe);lmt=r(Fpa,"marian"),Fpa.forEach(t),imt=r(yKe," \u2014 "),Ese=n(yKe,"A",{href:!0});var Tpa=s(Ese);dmt=r(Tpa,"FlaxMarianModel"),Tpa.forEach(t),cmt=r(yKe," (Marian model)"),yKe.forEach(t),fmt=i(ne),C7=n(ne,"LI",{});var xKe=s(C7);Zxe=n(xKe,"STRONG",{});var Mpa=s(Zxe);mmt=r(Mpa,"mbart"),Mpa.forEach(t),gmt=r(xKe," \u2014 "),Cse=n(xKe,"A",{href:!0});var Epa=s(Cse);hmt=r(Epa,"FlaxMBartModel"),Epa.forEach(t),umt=r(xKe," (mBART model)"),xKe.forEach(t),pmt=i(ne),w7=n(ne,"LI",{});var $Ke=s(w7);Kxe=n($Ke,"STRONG",{});var Cpa=s(Kxe);_mt=r(Cpa,"mt5"),Cpa.forEach(t),vmt=r($Ke," \u2014 "),wse=n($Ke,"A",{href:!0});var wpa=s(wse);bmt=r(wpa,"FlaxMT5Model"),wpa.forEach(t),Fmt=r($Ke," (MT5 model)"),$Ke.forEach(t),Tmt=i(ne),A7=n(ne,"LI",{});var kKe=s(A7);e$e=n(kKe,"STRONG",{});var Apa=s(e$e);Mmt=r(Apa,"opt"),Apa.forEach(t),Emt=r(kKe," \u2014 "),Ase=n(kKe,"A",{href:!0});var Lpa=s(Ase);Cmt=r(Lpa,"FlaxOPTModel"),Lpa.forEach(t),wmt=r(kKe," (OPT model)"),kKe.forEach(t),Amt=i(ne),L7=n(ne,"LI",{});var SKe=s(L7);o$e=n(SKe,"STRONG",{});var ypa=s(o$e);Lmt=r(ypa,"pegasus"),ypa.forEach(t),ymt=r(SKe," \u2014 "),Lse=n(SKe,"A",{href:!0});var xpa=s(Lse);xmt=r(xpa,"FlaxPegasusModel"),xpa.forEach(t),$mt=r(SKe," (Pegasus model)"),SKe.forEach(t),kmt=i(ne),y7=n(ne,"LI",{});var RKe=s(y7);r$e=n(RKe,"STRONG",{});var $pa=s(r$e);Smt=r($pa,"roberta"),$pa.forEach(t),Rmt=r(RKe," \u2014 "),yse=n(RKe,"A",{href:!0});var kpa=s(yse);Pmt=r(kpa,"FlaxRobertaModel"),kpa.forEach(t),Bmt=r(RKe," (RoBERTa model)"),RKe.forEach(t),Imt=i(ne),x7=n(ne,"LI",{});var PKe=s(x7);t$e=n(PKe,"STRONG",{});var Spa=s(t$e);Nmt=r(Spa,"roformer"),Spa.forEach(t),qmt=r(PKe," \u2014 "),xse=n(PKe,"A",{href:!0});var Rpa=s(xse);jmt=r(Rpa,"FlaxRoFormerModel"),Rpa.forEach(t),Dmt=r(PKe," (RoFormer model)"),PKe.forEach(t),Gmt=i(ne),$7=n(ne,"LI",{});var BKe=s($7);a$e=n(BKe,"STRONG",{});var Ppa=s(a$e);Omt=r(Ppa,"t5"),Ppa.forEach(t),Vmt=r(BKe," \u2014 "),$se=n(BKe,"A",{href:!0});var Bpa=s($se);Xmt=r(Bpa,"FlaxT5Model"),Bpa.forEach(t),zmt=r(BKe," (T5 model)"),BKe.forEach(t),Qmt=i(ne),k7=n(ne,"LI",{});var IKe=s(k7);n$e=n(IKe,"STRONG",{});var Ipa=s(n$e);Wmt=r(Ipa,"vision-text-dual-encoder"),Ipa.forEach(t),Umt=r(IKe," \u2014 "),kse=n(IKe,"A",{href:!0});var Npa=s(kse);Hmt=r(Npa,"FlaxVisionTextDualEncoderModel"),Npa.forEach(t),Jmt=r(IKe," (VisionTextDualEncoder model)"),IKe.forEach(t),Ymt=i(ne),S7=n(ne,"LI",{});var NKe=s(S7);s$e=n(NKe,"STRONG",{});var qpa=s(s$e);Zmt=r(qpa,"vit"),qpa.forEach(t),Kmt=r(NKe," \u2014 "),Sse=n(NKe,"A",{href:!0});var jpa=s(Sse);egt=r(jpa,"FlaxViTModel"),jpa.forEach(t),ogt=r(NKe," (ViT model)"),NKe.forEach(t),rgt=i(ne),R7=n(ne,"LI",{});var qKe=s(R7);l$e=n(qKe,"STRONG",{});var Dpa=s(l$e);tgt=r(Dpa,"wav2vec2"),Dpa.forEach(t),agt=r(qKe," \u2014 "),Rse=n(qKe,"A",{href:!0});var Gpa=s(Rse);ngt=r(Gpa,"FlaxWav2Vec2Model"),Gpa.forEach(t),sgt=r(qKe," (Wav2Vec2 model)"),qKe.forEach(t),lgt=i(ne),P7=n(ne,"LI",{});var jKe=s(P7);i$e=n(jKe,"STRONG",{});var Opa=s(i$e);igt=r(Opa,"xglm"),Opa.forEach(t),dgt=r(jKe," \u2014 "),Pse=n(jKe,"A",{href:!0});var Vpa=s(Pse);cgt=r(Vpa,"FlaxXGLMModel"),Vpa.forEach(t),fgt=r(jKe," (XGLM model)"),jKe.forEach(t),mgt=i(ne),B7=n(ne,"LI",{});var DKe=s(B7);d$e=n(DKe,"STRONG",{});var Xpa=s(d$e);ggt=r(Xpa,"xlm-roberta"),Xpa.forEach(t),hgt=r(DKe," \u2014 "),Bse=n(DKe,"A",{href:!0});var zpa=s(Bse);ugt=r(zpa,"FlaxXLMRobertaModel"),zpa.forEach(t),pgt=r(DKe," (XLM-RoBERTa model)"),DKe.forEach(t),ne.forEach(t),_gt=i(Di),T(I7.$$.fragment,Di),Di.forEach(t),ji.forEach(t),dto=i(f),Yf=n(f,"H2",{class:!0});var Lno=s(Yf);N7=n(Lno,"A",{id:!0,class:!0,href:!0});var Qpa=s(N7);c$e=n(Qpa,"SPAN",{});var Wpa=s(c$e);T(sP.$$.fragment,Wpa),Wpa.forEach(t),Qpa.forEach(t),vgt=i(Lno),f$e=n(Lno,"SPAN",{});var Upa=s(f$e);bgt=r(Upa,"FlaxAutoModelForCausalLM"),Upa.forEach(t),Lno.forEach(t),cto=i(f),wr=n(f,"DIV",{class:!0});var Gi=s(wr);T(lP.$$.fragment,Gi),Fgt=i(Gi),Zf=n(Gi,"P",{});var yce=s(Zf);Tgt=r(yce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Ise=n(yce,"A",{href:!0});var Hpa=s(Ise);Mgt=r(Hpa,"from_pretrained()"),Hpa.forEach(t),Egt=r(yce," class method or the "),Nse=n(yce,"A",{href:!0});var Jpa=s(Nse);Cgt=r(Jpa,"from_config()"),Jpa.forEach(t),wgt=r(yce,` class
method.`),yce.forEach(t),Agt=i(Gi),iP=n(Gi,"P",{});var yno=s(iP);Lgt=r(yno,"This class cannot be instantiated directly using "),m$e=n(yno,"CODE",{});var Ypa=s(m$e);ygt=r(Ypa,"__init__()"),Ypa.forEach(t),xgt=r(yno," (throws an error)."),yno.forEach(t),$gt=i(Gi),ca=n(Gi,"DIV",{class:!0});var rx=s(ca);T(dP.$$.fragment,rx),kgt=i(rx),g$e=n(rx,"P",{});var Zpa=s(g$e);Sgt=r(Zpa,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Zpa.forEach(t),Rgt=i(rx),Kf=n(rx,"P",{});var xce=s(Kf);Pgt=r(xce,`Note:
Loading a model from its configuration file does `),h$e=n(xce,"STRONG",{});var Kpa=s(h$e);Bgt=r(Kpa,"not"),Kpa.forEach(t),Igt=r(xce,` load the model weights. It only affects the
model\u2019s configuration. Use `),qse=n(xce,"A",{href:!0});var e_a=s(qse);Ngt=r(e_a,"from_pretrained()"),e_a.forEach(t),qgt=r(xce," to load the model weights."),xce.forEach(t),jgt=i(rx),T(q7.$$.fragment,rx),rx.forEach(t),Dgt=i(Gi),ot=n(Gi,"DIV",{class:!0});var Oi=s(ot);T(cP.$$.fragment,Oi),Ggt=i(Oi),u$e=n(Oi,"P",{});var o_a=s(u$e);Ogt=r(o_a,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),o_a.forEach(t),Vgt=i(Oi),Wn=n(Oi,"P",{});var tx=s(Wn);Xgt=r(tx,"The model class to instantiate is selected based on the "),p$e=n(tx,"CODE",{});var r_a=s(p$e);zgt=r(r_a,"model_type"),r_a.forEach(t),Qgt=r(tx,` property of the config object (either
passed as an argument or loaded from `),_$e=n(tx,"CODE",{});var t_a=s(_$e);Wgt=r(t_a,"pretrained_model_name_or_path"),t_a.forEach(t),Ugt=r(tx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v$e=n(tx,"CODE",{});var a_a=s(v$e);Hgt=r(a_a,"pretrained_model_name_or_path"),a_a.forEach(t),Jgt=r(tx,":"),tx.forEach(t),Ygt=i(Oi),xe=n(Oi,"UL",{});var qe=s(xe);j7=n(qe,"LI",{});var GKe=s(j7);b$e=n(GKe,"STRONG",{});var n_a=s(b$e);Zgt=r(n_a,"bart"),n_a.forEach(t),Kgt=r(GKe," \u2014 "),jse=n(GKe,"A",{href:!0});var s_a=s(jse);eht=r(s_a,"FlaxBartForCausalLM"),s_a.forEach(t),oht=r(GKe," (BART model)"),GKe.forEach(t),rht=i(qe),D7=n(qe,"LI",{});var OKe=s(D7);F$e=n(OKe,"STRONG",{});var l_a=s(F$e);tht=r(l_a,"bert"),l_a.forEach(t),aht=r(OKe," \u2014 "),Dse=n(OKe,"A",{href:!0});var i_a=s(Dse);nht=r(i_a,"FlaxBertForCausalLM"),i_a.forEach(t),sht=r(OKe," (BERT model)"),OKe.forEach(t),lht=i(qe),G7=n(qe,"LI",{});var VKe=s(G7);T$e=n(VKe,"STRONG",{});var d_a=s(T$e);iht=r(d_a,"big_bird"),d_a.forEach(t),dht=r(VKe," \u2014 "),Gse=n(VKe,"A",{href:!0});var c_a=s(Gse);cht=r(c_a,"FlaxBigBirdForCausalLM"),c_a.forEach(t),fht=r(VKe," (BigBird model)"),VKe.forEach(t),mht=i(qe),O7=n(qe,"LI",{});var XKe=s(O7);M$e=n(XKe,"STRONG",{});var f_a=s(M$e);ght=r(f_a,"electra"),f_a.forEach(t),hht=r(XKe," \u2014 "),Ose=n(XKe,"A",{href:!0});var m_a=s(Ose);uht=r(m_a,"FlaxElectraForCausalLM"),m_a.forEach(t),pht=r(XKe," (ELECTRA model)"),XKe.forEach(t),_ht=i(qe),V7=n(qe,"LI",{});var zKe=s(V7);E$e=n(zKe,"STRONG",{});var g_a=s(E$e);vht=r(g_a,"gpt2"),g_a.forEach(t),bht=r(zKe," \u2014 "),Vse=n(zKe,"A",{href:!0});var h_a=s(Vse);Fht=r(h_a,"FlaxGPT2LMHeadModel"),h_a.forEach(t),Tht=r(zKe," (OpenAI GPT-2 model)"),zKe.forEach(t),Mht=i(qe),X7=n(qe,"LI",{});var QKe=s(X7);C$e=n(QKe,"STRONG",{});var u_a=s(C$e);Eht=r(u_a,"gpt_neo"),u_a.forEach(t),Cht=r(QKe," \u2014 "),Xse=n(QKe,"A",{href:!0});var p_a=s(Xse);wht=r(p_a,"FlaxGPTNeoForCausalLM"),p_a.forEach(t),Aht=r(QKe," (GPT Neo model)"),QKe.forEach(t),Lht=i(qe),z7=n(qe,"LI",{});var WKe=s(z7);w$e=n(WKe,"STRONG",{});var __a=s(w$e);yht=r(__a,"gptj"),__a.forEach(t),xht=r(WKe," \u2014 "),zse=n(WKe,"A",{href:!0});var v_a=s(zse);$ht=r(v_a,"FlaxGPTJForCausalLM"),v_a.forEach(t),kht=r(WKe," (GPT-J model)"),WKe.forEach(t),Sht=i(qe),Q7=n(qe,"LI",{});var UKe=s(Q7);A$e=n(UKe,"STRONG",{});var b_a=s(A$e);Rht=r(b_a,"opt"),b_a.forEach(t),Pht=r(UKe," \u2014 "),Qse=n(UKe,"A",{href:!0});var F_a=s(Qse);Bht=r(F_a,"FlaxOPTForCausalLM"),F_a.forEach(t),Iht=r(UKe," (OPT model)"),UKe.forEach(t),Nht=i(qe),W7=n(qe,"LI",{});var HKe=s(W7);L$e=n(HKe,"STRONG",{});var T_a=s(L$e);qht=r(T_a,"roberta"),T_a.forEach(t),jht=r(HKe," \u2014 "),Wse=n(HKe,"A",{href:!0});var M_a=s(Wse);Dht=r(M_a,"FlaxRobertaForCausalLM"),M_a.forEach(t),Ght=r(HKe," (RoBERTa model)"),HKe.forEach(t),Oht=i(qe),U7=n(qe,"LI",{});var JKe=s(U7);y$e=n(JKe,"STRONG",{});var E_a=s(y$e);Vht=r(E_a,"xglm"),E_a.forEach(t),Xht=r(JKe," \u2014 "),Use=n(JKe,"A",{href:!0});var C_a=s(Use);zht=r(C_a,"FlaxXGLMForCausalLM"),C_a.forEach(t),Qht=r(JKe," (XGLM model)"),JKe.forEach(t),qe.forEach(t),Wht=i(Oi),T(H7.$$.fragment,Oi),Oi.forEach(t),Gi.forEach(t),fto=i(f),em=n(f,"H2",{class:!0});var xno=s(em);J7=n(xno,"A",{id:!0,class:!0,href:!0});var w_a=s(J7);x$e=n(w_a,"SPAN",{});var A_a=s(x$e);T(fP.$$.fragment,A_a),A_a.forEach(t),w_a.forEach(t),Uht=i(xno),$$e=n(xno,"SPAN",{});var L_a=s($$e);Hht=r(L_a,"FlaxAutoModelForPreTraining"),L_a.forEach(t),xno.forEach(t),mto=i(f),Ar=n(f,"DIV",{class:!0});var Vi=s(Ar);T(mP.$$.fragment,Vi),Jht=i(Vi),om=n(Vi,"P",{});var $ce=s(om);Yht=r($ce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Hse=n($ce,"A",{href:!0});var y_a=s(Hse);Zht=r(y_a,"from_pretrained()"),y_a.forEach(t),Kht=r($ce," class method or the "),Jse=n($ce,"A",{href:!0});var x_a=s(Jse);eut=r(x_a,"from_config()"),x_a.forEach(t),out=r($ce,` class
method.`),$ce.forEach(t),rut=i(Vi),gP=n(Vi,"P",{});var $no=s(gP);tut=r($no,"This class cannot be instantiated directly using "),k$e=n($no,"CODE",{});var $_a=s(k$e);aut=r($_a,"__init__()"),$_a.forEach(t),nut=r($no," (throws an error)."),$no.forEach(t),sut=i(Vi),fa=n(Vi,"DIV",{class:!0});var ax=s(fa);T(hP.$$.fragment,ax),lut=i(ax),S$e=n(ax,"P",{});var k_a=s(S$e);iut=r(k_a,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),k_a.forEach(t),dut=i(ax),rm=n(ax,"P",{});var kce=s(rm);cut=r(kce,`Note:
Loading a model from its configuration file does `),R$e=n(kce,"STRONG",{});var S_a=s(R$e);fut=r(S_a,"not"),S_a.forEach(t),mut=r(kce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yse=n(kce,"A",{href:!0});var R_a=s(Yse);gut=r(R_a,"from_pretrained()"),R_a.forEach(t),hut=r(kce," to load the model weights."),kce.forEach(t),uut=i(ax),T(Y7.$$.fragment,ax),ax.forEach(t),put=i(Vi),rt=n(Vi,"DIV",{class:!0});var Xi=s(rt);T(uP.$$.fragment,Xi),_ut=i(Xi),P$e=n(Xi,"P",{});var P_a=s(P$e);vut=r(P_a,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),P_a.forEach(t),but=i(Xi),Un=n(Xi,"P",{});var nx=s(Un);Fut=r(nx,"The model class to instantiate is selected based on the "),B$e=n(nx,"CODE",{});var B_a=s(B$e);Tut=r(B_a,"model_type"),B_a.forEach(t),Mut=r(nx,` property of the config object (either
passed as an argument or loaded from `),I$e=n(nx,"CODE",{});var I_a=s(I$e);Eut=r(I_a,"pretrained_model_name_or_path"),I_a.forEach(t),Cut=r(nx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N$e=n(nx,"CODE",{});var N_a=s(N$e);wut=r(N_a,"pretrained_model_name_or_path"),N_a.forEach(t),Aut=r(nx,":"),nx.forEach(t),Lut=i(Xi),Ee=n(Xi,"UL",{});var we=s(Ee);Z7=n(we,"LI",{});var YKe=s(Z7);q$e=n(YKe,"STRONG",{});var q_a=s(q$e);yut=r(q_a,"albert"),q_a.forEach(t),xut=r(YKe," \u2014 "),Zse=n(YKe,"A",{href:!0});var j_a=s(Zse);$ut=r(j_a,"FlaxAlbertForPreTraining"),j_a.forEach(t),kut=r(YKe," (ALBERT model)"),YKe.forEach(t),Sut=i(we),K7=n(we,"LI",{});var ZKe=s(K7);j$e=n(ZKe,"STRONG",{});var D_a=s(j$e);Rut=r(D_a,"bart"),D_a.forEach(t),Put=r(ZKe," \u2014 "),Kse=n(ZKe,"A",{href:!0});var G_a=s(Kse);But=r(G_a,"FlaxBartForConditionalGeneration"),G_a.forEach(t),Iut=r(ZKe," (BART model)"),ZKe.forEach(t),Nut=i(we),eL=n(we,"LI",{});var KKe=s(eL);D$e=n(KKe,"STRONG",{});var O_a=s(D$e);qut=r(O_a,"bert"),O_a.forEach(t),jut=r(KKe," \u2014 "),ele=n(KKe,"A",{href:!0});var V_a=s(ele);Dut=r(V_a,"FlaxBertForPreTraining"),V_a.forEach(t),Gut=r(KKe," (BERT model)"),KKe.forEach(t),Out=i(we),oL=n(we,"LI",{});var eeo=s(oL);G$e=n(eeo,"STRONG",{});var X_a=s(G$e);Vut=r(X_a,"big_bird"),X_a.forEach(t),Xut=r(eeo," \u2014 "),ole=n(eeo,"A",{href:!0});var z_a=s(ole);zut=r(z_a,"FlaxBigBirdForPreTraining"),z_a.forEach(t),Qut=r(eeo," (BigBird model)"),eeo.forEach(t),Wut=i(we),rL=n(we,"LI",{});var oeo=s(rL);O$e=n(oeo,"STRONG",{});var Q_a=s(O$e);Uut=r(Q_a,"electra"),Q_a.forEach(t),Hut=r(oeo," \u2014 "),rle=n(oeo,"A",{href:!0});var W_a=s(rle);Jut=r(W_a,"FlaxElectraForPreTraining"),W_a.forEach(t),Yut=r(oeo," (ELECTRA model)"),oeo.forEach(t),Zut=i(we),tL=n(we,"LI",{});var reo=s(tL);V$e=n(reo,"STRONG",{});var U_a=s(V$e);Kut=r(U_a,"longt5"),U_a.forEach(t),ept=r(reo," \u2014 "),tle=n(reo,"A",{href:!0});var H_a=s(tle);opt=r(H_a,"FlaxLongT5ForConditionalGeneration"),H_a.forEach(t),rpt=r(reo," (LongT5 model)"),reo.forEach(t),tpt=i(we),aL=n(we,"LI",{});var teo=s(aL);X$e=n(teo,"STRONG",{});var J_a=s(X$e);apt=r(J_a,"mbart"),J_a.forEach(t),npt=r(teo," \u2014 "),ale=n(teo,"A",{href:!0});var Y_a=s(ale);spt=r(Y_a,"FlaxMBartForConditionalGeneration"),Y_a.forEach(t),lpt=r(teo," (mBART model)"),teo.forEach(t),ipt=i(we),nL=n(we,"LI",{});var aeo=s(nL);z$e=n(aeo,"STRONG",{});var Z_a=s(z$e);dpt=r(Z_a,"mt5"),Z_a.forEach(t),cpt=r(aeo," \u2014 "),nle=n(aeo,"A",{href:!0});var K_a=s(nle);fpt=r(K_a,"FlaxMT5ForConditionalGeneration"),K_a.forEach(t),mpt=r(aeo," (MT5 model)"),aeo.forEach(t),gpt=i(we),sL=n(we,"LI",{});var neo=s(sL);Q$e=n(neo,"STRONG",{});var e2a=s(Q$e);hpt=r(e2a,"roberta"),e2a.forEach(t),upt=r(neo," \u2014 "),sle=n(neo,"A",{href:!0});var o2a=s(sle);ppt=r(o2a,"FlaxRobertaForMaskedLM"),o2a.forEach(t),_pt=r(neo," (RoBERTa model)"),neo.forEach(t),vpt=i(we),lL=n(we,"LI",{});var seo=s(lL);W$e=n(seo,"STRONG",{});var r2a=s(W$e);bpt=r(r2a,"roformer"),r2a.forEach(t),Fpt=r(seo," \u2014 "),lle=n(seo,"A",{href:!0});var t2a=s(lle);Tpt=r(t2a,"FlaxRoFormerForMaskedLM"),t2a.forEach(t),Mpt=r(seo," (RoFormer model)"),seo.forEach(t),Ept=i(we),iL=n(we,"LI",{});var leo=s(iL);U$e=n(leo,"STRONG",{});var a2a=s(U$e);Cpt=r(a2a,"t5"),a2a.forEach(t),wpt=r(leo," \u2014 "),ile=n(leo,"A",{href:!0});var n2a=s(ile);Apt=r(n2a,"FlaxT5ForConditionalGeneration"),n2a.forEach(t),Lpt=r(leo," (T5 model)"),leo.forEach(t),ypt=i(we),dL=n(we,"LI",{});var ieo=s(dL);H$e=n(ieo,"STRONG",{});var s2a=s(H$e);xpt=r(s2a,"wav2vec2"),s2a.forEach(t),$pt=r(ieo," \u2014 "),dle=n(ieo,"A",{href:!0});var l2a=s(dle);kpt=r(l2a,"FlaxWav2Vec2ForPreTraining"),l2a.forEach(t),Spt=r(ieo," (Wav2Vec2 model)"),ieo.forEach(t),Rpt=i(we),cL=n(we,"LI",{});var deo=s(cL);J$e=n(deo,"STRONG",{});var i2a=s(J$e);Ppt=r(i2a,"xlm-roberta"),i2a.forEach(t),Bpt=r(deo," \u2014 "),cle=n(deo,"A",{href:!0});var d2a=s(cle);Ipt=r(d2a,"FlaxXLMRobertaForMaskedLM"),d2a.forEach(t),Npt=r(deo," (XLM-RoBERTa model)"),deo.forEach(t),we.forEach(t),qpt=i(Xi),T(fL.$$.fragment,Xi),Xi.forEach(t),Vi.forEach(t),gto=i(f),tm=n(f,"H2",{class:!0});var kno=s(tm);mL=n(kno,"A",{id:!0,class:!0,href:!0});var c2a=s(mL);Y$e=n(c2a,"SPAN",{});var f2a=s(Y$e);T(pP.$$.fragment,f2a),f2a.forEach(t),c2a.forEach(t),jpt=i(kno),Z$e=n(kno,"SPAN",{});var m2a=s(Z$e);Dpt=r(m2a,"FlaxAutoModelForMaskedLM"),m2a.forEach(t),kno.forEach(t),hto=i(f),Lr=n(f,"DIV",{class:!0});var zi=s(Lr);T(_P.$$.fragment,zi),Gpt=i(zi),am=n(zi,"P",{});var Sce=s(am);Opt=r(Sce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fle=n(Sce,"A",{href:!0});var g2a=s(fle);Vpt=r(g2a,"from_pretrained()"),g2a.forEach(t),Xpt=r(Sce," class method or the "),mle=n(Sce,"A",{href:!0});var h2a=s(mle);zpt=r(h2a,"from_config()"),h2a.forEach(t),Qpt=r(Sce,` class
method.`),Sce.forEach(t),Wpt=i(zi),vP=n(zi,"P",{});var Sno=s(vP);Upt=r(Sno,"This class cannot be instantiated directly using "),K$e=n(Sno,"CODE",{});var u2a=s(K$e);Hpt=r(u2a,"__init__()"),u2a.forEach(t),Jpt=r(Sno," (throws an error)."),Sno.forEach(t),Ypt=i(zi),ma=n(zi,"DIV",{class:!0});var sx=s(ma);T(bP.$$.fragment,sx),Zpt=i(sx),eke=n(sx,"P",{});var p2a=s(eke);Kpt=r(p2a,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),p2a.forEach(t),e_t=i(sx),nm=n(sx,"P",{});var Rce=s(nm);o_t=r(Rce,`Note:
Loading a model from its configuration file does `),oke=n(Rce,"STRONG",{});var _2a=s(oke);r_t=r(_2a,"not"),_2a.forEach(t),t_t=r(Rce,` load the model weights. It only affects the
model\u2019s configuration. Use `),gle=n(Rce,"A",{href:!0});var v2a=s(gle);a_t=r(v2a,"from_pretrained()"),v2a.forEach(t),n_t=r(Rce," to load the model weights."),Rce.forEach(t),s_t=i(sx),T(gL.$$.fragment,sx),sx.forEach(t),l_t=i(zi),tt=n(zi,"DIV",{class:!0});var Qi=s(tt);T(FP.$$.fragment,Qi),i_t=i(Qi),rke=n(Qi,"P",{});var b2a=s(rke);d_t=r(b2a,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),b2a.forEach(t),c_t=i(Qi),Hn=n(Qi,"P",{});var lx=s(Hn);f_t=r(lx,"The model class to instantiate is selected based on the "),tke=n(lx,"CODE",{});var F2a=s(tke);m_t=r(F2a,"model_type"),F2a.forEach(t),g_t=r(lx,` property of the config object (either
passed as an argument or loaded from `),ake=n(lx,"CODE",{});var T2a=s(ake);h_t=r(T2a,"pretrained_model_name_or_path"),T2a.forEach(t),u_t=r(lx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nke=n(lx,"CODE",{});var M2a=s(nke);p_t=r(M2a,"pretrained_model_name_or_path"),M2a.forEach(t),__t=r(lx,":"),lx.forEach(t),v_t=i(Qi),$e=n(Qi,"UL",{});var je=s($e);hL=n(je,"LI",{});var ceo=s(hL);ske=n(ceo,"STRONG",{});var E2a=s(ske);b_t=r(E2a,"albert"),E2a.forEach(t),F_t=r(ceo," \u2014 "),hle=n(ceo,"A",{href:!0});var C2a=s(hle);T_t=r(C2a,"FlaxAlbertForMaskedLM"),C2a.forEach(t),M_t=r(ceo," (ALBERT model)"),ceo.forEach(t),E_t=i(je),uL=n(je,"LI",{});var feo=s(uL);lke=n(feo,"STRONG",{});var w2a=s(lke);C_t=r(w2a,"bart"),w2a.forEach(t),w_t=r(feo," \u2014 "),ule=n(feo,"A",{href:!0});var A2a=s(ule);A_t=r(A2a,"FlaxBartForConditionalGeneration"),A2a.forEach(t),L_t=r(feo," (BART model)"),feo.forEach(t),y_t=i(je),pL=n(je,"LI",{});var meo=s(pL);ike=n(meo,"STRONG",{});var L2a=s(ike);x_t=r(L2a,"bert"),L2a.forEach(t),$_t=r(meo," \u2014 "),ple=n(meo,"A",{href:!0});var y2a=s(ple);k_t=r(y2a,"FlaxBertForMaskedLM"),y2a.forEach(t),S_t=r(meo," (BERT model)"),meo.forEach(t),R_t=i(je),_L=n(je,"LI",{});var geo=s(_L);dke=n(geo,"STRONG",{});var x2a=s(dke);P_t=r(x2a,"big_bird"),x2a.forEach(t),B_t=r(geo," \u2014 "),_le=n(geo,"A",{href:!0});var $2a=s(_le);I_t=r($2a,"FlaxBigBirdForMaskedLM"),$2a.forEach(t),N_t=r(geo," (BigBird model)"),geo.forEach(t),q_t=i(je),vL=n(je,"LI",{});var heo=s(vL);cke=n(heo,"STRONG",{});var k2a=s(cke);j_t=r(k2a,"distilbert"),k2a.forEach(t),D_t=r(heo," \u2014 "),vle=n(heo,"A",{href:!0});var S2a=s(vle);G_t=r(S2a,"FlaxDistilBertForMaskedLM"),S2a.forEach(t),O_t=r(heo," (DistilBERT model)"),heo.forEach(t),V_t=i(je),bL=n(je,"LI",{});var ueo=s(bL);fke=n(ueo,"STRONG",{});var R2a=s(fke);X_t=r(R2a,"electra"),R2a.forEach(t),z_t=r(ueo," \u2014 "),ble=n(ueo,"A",{href:!0});var P2a=s(ble);Q_t=r(P2a,"FlaxElectraForMaskedLM"),P2a.forEach(t),W_t=r(ueo," (ELECTRA model)"),ueo.forEach(t),U_t=i(je),FL=n(je,"LI",{});var peo=s(FL);mke=n(peo,"STRONG",{});var B2a=s(mke);H_t=r(B2a,"mbart"),B2a.forEach(t),J_t=r(peo," \u2014 "),Fle=n(peo,"A",{href:!0});var I2a=s(Fle);Y_t=r(I2a,"FlaxMBartForConditionalGeneration"),I2a.forEach(t),Z_t=r(peo," (mBART model)"),peo.forEach(t),K_t=i(je),TL=n(je,"LI",{});var _eo=s(TL);gke=n(_eo,"STRONG",{});var N2a=s(gke);e2t=r(N2a,"roberta"),N2a.forEach(t),o2t=r(_eo," \u2014 "),Tle=n(_eo,"A",{href:!0});var q2a=s(Tle);r2t=r(q2a,"FlaxRobertaForMaskedLM"),q2a.forEach(t),t2t=r(_eo," (RoBERTa model)"),_eo.forEach(t),a2t=i(je),ML=n(je,"LI",{});var veo=s(ML);hke=n(veo,"STRONG",{});var j2a=s(hke);n2t=r(j2a,"roformer"),j2a.forEach(t),s2t=r(veo," \u2014 "),Mle=n(veo,"A",{href:!0});var D2a=s(Mle);l2t=r(D2a,"FlaxRoFormerForMaskedLM"),D2a.forEach(t),i2t=r(veo," (RoFormer model)"),veo.forEach(t),d2t=i(je),EL=n(je,"LI",{});var beo=s(EL);uke=n(beo,"STRONG",{});var G2a=s(uke);c2t=r(G2a,"xlm-roberta"),G2a.forEach(t),f2t=r(beo," \u2014 "),Ele=n(beo,"A",{href:!0});var O2a=s(Ele);m2t=r(O2a,"FlaxXLMRobertaForMaskedLM"),O2a.forEach(t),g2t=r(beo," (XLM-RoBERTa model)"),beo.forEach(t),je.forEach(t),h2t=i(Qi),T(CL.$$.fragment,Qi),Qi.forEach(t),zi.forEach(t),uto=i(f),sm=n(f,"H2",{class:!0});var Rno=s(sm);wL=n(Rno,"A",{id:!0,class:!0,href:!0});var V2a=s(wL);pke=n(V2a,"SPAN",{});var X2a=s(pke);T(TP.$$.fragment,X2a),X2a.forEach(t),V2a.forEach(t),u2t=i(Rno),_ke=n(Rno,"SPAN",{});var z2a=s(_ke);p2t=r(z2a,"FlaxAutoModelForSeq2SeqLM"),z2a.forEach(t),Rno.forEach(t),pto=i(f),yr=n(f,"DIV",{class:!0});var Wi=s(yr);T(MP.$$.fragment,Wi),_2t=i(Wi),lm=n(Wi,"P",{});var Pce=s(lm);v2t=r(Pce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Cle=n(Pce,"A",{href:!0});var Q2a=s(Cle);b2t=r(Q2a,"from_pretrained()"),Q2a.forEach(t),F2t=r(Pce," class method or the "),wle=n(Pce,"A",{href:!0});var W2a=s(wle);T2t=r(W2a,"from_config()"),W2a.forEach(t),M2t=r(Pce,` class
method.`),Pce.forEach(t),E2t=i(Wi),EP=n(Wi,"P",{});var Pno=s(EP);C2t=r(Pno,"This class cannot be instantiated directly using "),vke=n(Pno,"CODE",{});var U2a=s(vke);w2t=r(U2a,"__init__()"),U2a.forEach(t),A2t=r(Pno," (throws an error)."),Pno.forEach(t),L2t=i(Wi),ga=n(Wi,"DIV",{class:!0});var ix=s(ga);T(CP.$$.fragment,ix),y2t=i(ix),bke=n(ix,"P",{});var H2a=s(bke);x2t=r(H2a,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),H2a.forEach(t),$2t=i(ix),im=n(ix,"P",{});var Bce=s(im);k2t=r(Bce,`Note:
Loading a model from its configuration file does `),Fke=n(Bce,"STRONG",{});var J2a=s(Fke);S2t=r(J2a,"not"),J2a.forEach(t),R2t=r(Bce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ale=n(Bce,"A",{href:!0});var Y2a=s(Ale);P2t=r(Y2a,"from_pretrained()"),Y2a.forEach(t),B2t=r(Bce," to load the model weights."),Bce.forEach(t),I2t=i(ix),T(AL.$$.fragment,ix),ix.forEach(t),N2t=i(Wi),at=n(Wi,"DIV",{class:!0});var Ui=s(at);T(wP.$$.fragment,Ui),q2t=i(Ui),Tke=n(Ui,"P",{});var Z2a=s(Tke);j2t=r(Z2a,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Z2a.forEach(t),D2t=i(Ui),Jn=n(Ui,"P",{});var dx=s(Jn);G2t=r(dx,"The model class to instantiate is selected based on the "),Mke=n(dx,"CODE",{});var K2a=s(Mke);O2t=r(K2a,"model_type"),K2a.forEach(t),V2t=r(dx,` property of the config object (either
passed as an argument or loaded from `),Eke=n(dx,"CODE",{});var eva=s(Eke);X2t=r(eva,"pretrained_model_name_or_path"),eva.forEach(t),z2t=r(dx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cke=n(dx,"CODE",{});var ova=s(Cke);Q2t=r(ova,"pretrained_model_name_or_path"),ova.forEach(t),W2t=r(dx,":"),dx.forEach(t),U2t=i(Ui),ke=n(Ui,"UL",{});var De=s(ke);LL=n(De,"LI",{});var Feo=s(LL);wke=n(Feo,"STRONG",{});var rva=s(wke);H2t=r(rva,"bart"),rva.forEach(t),J2t=r(Feo," \u2014 "),Lle=n(Feo,"A",{href:!0});var tva=s(Lle);Y2t=r(tva,"FlaxBartForConditionalGeneration"),tva.forEach(t),Z2t=r(Feo," (BART model)"),Feo.forEach(t),K2t=i(De),yL=n(De,"LI",{});var Teo=s(yL);Ake=n(Teo,"STRONG",{});var ava=s(Ake);evt=r(ava,"blenderbot"),ava.forEach(t),ovt=r(Teo," \u2014 "),yle=n(Teo,"A",{href:!0});var nva=s(yle);rvt=r(nva,"FlaxBlenderbotForConditionalGeneration"),nva.forEach(t),tvt=r(Teo," (Blenderbot model)"),Teo.forEach(t),avt=i(De),xL=n(De,"LI",{});var Meo=s(xL);Lke=n(Meo,"STRONG",{});var sva=s(Lke);nvt=r(sva,"blenderbot-small"),sva.forEach(t),svt=r(Meo," \u2014 "),xle=n(Meo,"A",{href:!0});var lva=s(xle);lvt=r(lva,"FlaxBlenderbotSmallForConditionalGeneration"),lva.forEach(t),ivt=r(Meo," (BlenderbotSmall model)"),Meo.forEach(t),dvt=i(De),$L=n(De,"LI",{});var Eeo=s($L);yke=n(Eeo,"STRONG",{});var iva=s(yke);cvt=r(iva,"encoder-decoder"),iva.forEach(t),fvt=r(Eeo," \u2014 "),$le=n(Eeo,"A",{href:!0});var dva=s($le);mvt=r(dva,"FlaxEncoderDecoderModel"),dva.forEach(t),gvt=r(Eeo," (Encoder decoder model)"),Eeo.forEach(t),hvt=i(De),kL=n(De,"LI",{});var Ceo=s(kL);xke=n(Ceo,"STRONG",{});var cva=s(xke);uvt=r(cva,"longt5"),cva.forEach(t),pvt=r(Ceo," \u2014 "),kle=n(Ceo,"A",{href:!0});var fva=s(kle);_vt=r(fva,"FlaxLongT5ForConditionalGeneration"),fva.forEach(t),vvt=r(Ceo," (LongT5 model)"),Ceo.forEach(t),bvt=i(De),SL=n(De,"LI",{});var weo=s(SL);$ke=n(weo,"STRONG",{});var mva=s($ke);Fvt=r(mva,"marian"),mva.forEach(t),Tvt=r(weo," \u2014 "),Sle=n(weo,"A",{href:!0});var gva=s(Sle);Mvt=r(gva,"FlaxMarianMTModel"),gva.forEach(t),Evt=r(weo," (Marian model)"),weo.forEach(t),Cvt=i(De),RL=n(De,"LI",{});var Aeo=s(RL);kke=n(Aeo,"STRONG",{});var hva=s(kke);wvt=r(hva,"mbart"),hva.forEach(t),Avt=r(Aeo," \u2014 "),Rle=n(Aeo,"A",{href:!0});var uva=s(Rle);Lvt=r(uva,"FlaxMBartForConditionalGeneration"),uva.forEach(t),yvt=r(Aeo," (mBART model)"),Aeo.forEach(t),xvt=i(De),PL=n(De,"LI",{});var Leo=s(PL);Ske=n(Leo,"STRONG",{});var pva=s(Ske);$vt=r(pva,"mt5"),pva.forEach(t),kvt=r(Leo," \u2014 "),Ple=n(Leo,"A",{href:!0});var _va=s(Ple);Svt=r(_va,"FlaxMT5ForConditionalGeneration"),_va.forEach(t),Rvt=r(Leo," (MT5 model)"),Leo.forEach(t),Pvt=i(De),BL=n(De,"LI",{});var yeo=s(BL);Rke=n(yeo,"STRONG",{});var vva=s(Rke);Bvt=r(vva,"pegasus"),vva.forEach(t),Ivt=r(yeo," \u2014 "),Ble=n(yeo,"A",{href:!0});var bva=s(Ble);Nvt=r(bva,"FlaxPegasusForConditionalGeneration"),bva.forEach(t),qvt=r(yeo," (Pegasus model)"),yeo.forEach(t),jvt=i(De),IL=n(De,"LI",{});var xeo=s(IL);Pke=n(xeo,"STRONG",{});var Fva=s(Pke);Dvt=r(Fva,"t5"),Fva.forEach(t),Gvt=r(xeo," \u2014 "),Ile=n(xeo,"A",{href:!0});var Tva=s(Ile);Ovt=r(Tva,"FlaxT5ForConditionalGeneration"),Tva.forEach(t),Vvt=r(xeo," (T5 model)"),xeo.forEach(t),De.forEach(t),Xvt=i(Ui),T(NL.$$.fragment,Ui),Ui.forEach(t),Wi.forEach(t),_to=i(f),dm=n(f,"H2",{class:!0});var Bno=s(dm);qL=n(Bno,"A",{id:!0,class:!0,href:!0});var Mva=s(qL);Bke=n(Mva,"SPAN",{});var Eva=s(Bke);T(AP.$$.fragment,Eva),Eva.forEach(t),Mva.forEach(t),zvt=i(Bno),Ike=n(Bno,"SPAN",{});var Cva=s(Ike);Qvt=r(Cva,"FlaxAutoModelForSequenceClassification"),Cva.forEach(t),Bno.forEach(t),vto=i(f),xr=n(f,"DIV",{class:!0});var Hi=s(xr);T(LP.$$.fragment,Hi),Wvt=i(Hi),cm=n(Hi,"P",{});var Ice=s(cm);Uvt=r(Ice,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Nle=n(Ice,"A",{href:!0});var wva=s(Nle);Hvt=r(wva,"from_pretrained()"),wva.forEach(t),Jvt=r(Ice," class method or the "),qle=n(Ice,"A",{href:!0});var Ava=s(qle);Yvt=r(Ava,"from_config()"),Ava.forEach(t),Zvt=r(Ice,` class
method.`),Ice.forEach(t),Kvt=i(Hi),yP=n(Hi,"P",{});var Ino=s(yP);e4t=r(Ino,"This class cannot be instantiated directly using "),Nke=n(Ino,"CODE",{});var Lva=s(Nke);o4t=r(Lva,"__init__()"),Lva.forEach(t),r4t=r(Ino," (throws an error)."),Ino.forEach(t),t4t=i(Hi),ha=n(Hi,"DIV",{class:!0});var cx=s(ha);T(xP.$$.fragment,cx),a4t=i(cx),qke=n(cx,"P",{});var yva=s(qke);n4t=r(yva,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),yva.forEach(t),s4t=i(cx),fm=n(cx,"P",{});var Nce=s(fm);l4t=r(Nce,`Note:
Loading a model from its configuration file does `),jke=n(Nce,"STRONG",{});var xva=s(jke);i4t=r(xva,"not"),xva.forEach(t),d4t=r(Nce,` load the model weights. It only affects the
model\u2019s configuration. Use `),jle=n(Nce,"A",{href:!0});var $va=s(jle);c4t=r($va,"from_pretrained()"),$va.forEach(t),f4t=r(Nce," to load the model weights."),Nce.forEach(t),m4t=i(cx),T(jL.$$.fragment,cx),cx.forEach(t),g4t=i(Hi),nt=n(Hi,"DIV",{class:!0});var Ji=s(nt);T($P.$$.fragment,Ji),h4t=i(Ji),Dke=n(Ji,"P",{});var kva=s(Dke);u4t=r(kva,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),kva.forEach(t),p4t=i(Ji),Yn=n(Ji,"P",{});var fx=s(Yn);_4t=r(fx,"The model class to instantiate is selected based on the "),Gke=n(fx,"CODE",{});var Sva=s(Gke);v4t=r(Sva,"model_type"),Sva.forEach(t),b4t=r(fx,` property of the config object (either
passed as an argument or loaded from `),Oke=n(fx,"CODE",{});var Rva=s(Oke);F4t=r(Rva,"pretrained_model_name_or_path"),Rva.forEach(t),T4t=r(fx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vke=n(fx,"CODE",{});var Pva=s(Vke);M4t=r(Pva,"pretrained_model_name_or_path"),Pva.forEach(t),E4t=r(fx,":"),fx.forEach(t),C4t=i(Ji),Se=n(Ji,"UL",{});var Ge=s(Se);DL=n(Ge,"LI",{});var $eo=s(DL);Xke=n($eo,"STRONG",{});var Bva=s(Xke);w4t=r(Bva,"albert"),Bva.forEach(t),A4t=r($eo," \u2014 "),Dle=n($eo,"A",{href:!0});var Iva=s(Dle);L4t=r(Iva,"FlaxAlbertForSequenceClassification"),Iva.forEach(t),y4t=r($eo," (ALBERT model)"),$eo.forEach(t),x4t=i(Ge),GL=n(Ge,"LI",{});var keo=s(GL);zke=n(keo,"STRONG",{});var Nva=s(zke);$4t=r(Nva,"bart"),Nva.forEach(t),k4t=r(keo," \u2014 "),Gle=n(keo,"A",{href:!0});var qva=s(Gle);S4t=r(qva,"FlaxBartForSequenceClassification"),qva.forEach(t),R4t=r(keo," (BART model)"),keo.forEach(t),P4t=i(Ge),OL=n(Ge,"LI",{});var Seo=s(OL);Qke=n(Seo,"STRONG",{});var jva=s(Qke);B4t=r(jva,"bert"),jva.forEach(t),I4t=r(Seo," \u2014 "),Ole=n(Seo,"A",{href:!0});var Dva=s(Ole);N4t=r(Dva,"FlaxBertForSequenceClassification"),Dva.forEach(t),q4t=r(Seo," (BERT model)"),Seo.forEach(t),j4t=i(Ge),VL=n(Ge,"LI",{});var Reo=s(VL);Wke=n(Reo,"STRONG",{});var Gva=s(Wke);D4t=r(Gva,"big_bird"),Gva.forEach(t),G4t=r(Reo," \u2014 "),Vle=n(Reo,"A",{href:!0});var Ova=s(Vle);O4t=r(Ova,"FlaxBigBirdForSequenceClassification"),Ova.forEach(t),V4t=r(Reo," (BigBird model)"),Reo.forEach(t),X4t=i(Ge),XL=n(Ge,"LI",{});var Peo=s(XL);Uke=n(Peo,"STRONG",{});var Vva=s(Uke);z4t=r(Vva,"distilbert"),Vva.forEach(t),Q4t=r(Peo," \u2014 "),Xle=n(Peo,"A",{href:!0});var Xva=s(Xle);W4t=r(Xva,"FlaxDistilBertForSequenceClassification"),Xva.forEach(t),U4t=r(Peo," (DistilBERT model)"),Peo.forEach(t),H4t=i(Ge),zL=n(Ge,"LI",{});var Beo=s(zL);Hke=n(Beo,"STRONG",{});var zva=s(Hke);J4t=r(zva,"electra"),zva.forEach(t),Y4t=r(Beo," \u2014 "),zle=n(Beo,"A",{href:!0});var Qva=s(zle);Z4t=r(Qva,"FlaxElectraForSequenceClassification"),Qva.forEach(t),K4t=r(Beo," (ELECTRA model)"),Beo.forEach(t),e1t=i(Ge),QL=n(Ge,"LI",{});var Ieo=s(QL);Jke=n(Ieo,"STRONG",{});var Wva=s(Jke);o1t=r(Wva,"mbart"),Wva.forEach(t),r1t=r(Ieo," \u2014 "),Qle=n(Ieo,"A",{href:!0});var Uva=s(Qle);t1t=r(Uva,"FlaxMBartForSequenceClassification"),Uva.forEach(t),a1t=r(Ieo," (mBART model)"),Ieo.forEach(t),n1t=i(Ge),WL=n(Ge,"LI",{});var Neo=s(WL);Yke=n(Neo,"STRONG",{});var Hva=s(Yke);s1t=r(Hva,"roberta"),Hva.forEach(t),l1t=r(Neo," \u2014 "),Wle=n(Neo,"A",{href:!0});var Jva=s(Wle);i1t=r(Jva,"FlaxRobertaForSequenceClassification"),Jva.forEach(t),d1t=r(Neo," (RoBERTa model)"),Neo.forEach(t),c1t=i(Ge),UL=n(Ge,"LI",{});var qeo=s(UL);Zke=n(qeo,"STRONG",{});var Yva=s(Zke);f1t=r(Yva,"roformer"),Yva.forEach(t),m1t=r(qeo," \u2014 "),Ule=n(qeo,"A",{href:!0});var Zva=s(Ule);g1t=r(Zva,"FlaxRoFormerForSequenceClassification"),Zva.forEach(t),h1t=r(qeo," (RoFormer model)"),qeo.forEach(t),u1t=i(Ge),HL=n(Ge,"LI",{});var jeo=s(HL);Kke=n(jeo,"STRONG",{});var Kva=s(Kke);p1t=r(Kva,"xlm-roberta"),Kva.forEach(t),_1t=r(jeo," \u2014 "),Hle=n(jeo,"A",{href:!0});var e4a=s(Hle);v1t=r(e4a,"FlaxXLMRobertaForSequenceClassification"),e4a.forEach(t),b1t=r(jeo," (XLM-RoBERTa model)"),jeo.forEach(t),Ge.forEach(t),F1t=i(Ji),T(JL.$$.fragment,Ji),Ji.forEach(t),Hi.forEach(t),bto=i(f),mm=n(f,"H2",{class:!0});var Nno=s(mm);YL=n(Nno,"A",{id:!0,class:!0,href:!0});var o4a=s(YL);eSe=n(o4a,"SPAN",{});var r4a=s(eSe);T(kP.$$.fragment,r4a),r4a.forEach(t),o4a.forEach(t),T1t=i(Nno),oSe=n(Nno,"SPAN",{});var t4a=s(oSe);M1t=r(t4a,"FlaxAutoModelForQuestionAnswering"),t4a.forEach(t),Nno.forEach(t),Fto=i(f),$r=n(f,"DIV",{class:!0});var Yi=s($r);T(SP.$$.fragment,Yi),E1t=i(Yi),gm=n(Yi,"P",{});var qce=s(gm);C1t=r(qce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Jle=n(qce,"A",{href:!0});var a4a=s(Jle);w1t=r(a4a,"from_pretrained()"),a4a.forEach(t),A1t=r(qce," class method or the "),Yle=n(qce,"A",{href:!0});var n4a=s(Yle);L1t=r(n4a,"from_config()"),n4a.forEach(t),y1t=r(qce,` class
method.`),qce.forEach(t),x1t=i(Yi),RP=n(Yi,"P",{});var qno=s(RP);$1t=r(qno,"This class cannot be instantiated directly using "),rSe=n(qno,"CODE",{});var s4a=s(rSe);k1t=r(s4a,"__init__()"),s4a.forEach(t),S1t=r(qno," (throws an error)."),qno.forEach(t),R1t=i(Yi),ua=n(Yi,"DIV",{class:!0});var mx=s(ua);T(PP.$$.fragment,mx),P1t=i(mx),tSe=n(mx,"P",{});var l4a=s(tSe);B1t=r(l4a,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),l4a.forEach(t),I1t=i(mx),hm=n(mx,"P",{});var jce=s(hm);N1t=r(jce,`Note:
Loading a model from its configuration file does `),aSe=n(jce,"STRONG",{});var i4a=s(aSe);q1t=r(i4a,"not"),i4a.forEach(t),j1t=r(jce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zle=n(jce,"A",{href:!0});var d4a=s(Zle);D1t=r(d4a,"from_pretrained()"),d4a.forEach(t),G1t=r(jce," to load the model weights."),jce.forEach(t),O1t=i(mx),T(ZL.$$.fragment,mx),mx.forEach(t),V1t=i(Yi),st=n(Yi,"DIV",{class:!0});var Zi=s(st);T(BP.$$.fragment,Zi),X1t=i(Zi),nSe=n(Zi,"P",{});var c4a=s(nSe);z1t=r(c4a,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),c4a.forEach(t),Q1t=i(Zi),Zn=n(Zi,"P",{});var gx=s(Zn);W1t=r(gx,"The model class to instantiate is selected based on the "),sSe=n(gx,"CODE",{});var f4a=s(sSe);U1t=r(f4a,"model_type"),f4a.forEach(t),H1t=r(gx,` property of the config object (either
passed as an argument or loaded from `),lSe=n(gx,"CODE",{});var m4a=s(lSe);J1t=r(m4a,"pretrained_model_name_or_path"),m4a.forEach(t),Y1t=r(gx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iSe=n(gx,"CODE",{});var g4a=s(iSe);Z1t=r(g4a,"pretrained_model_name_or_path"),g4a.forEach(t),K1t=r(gx,":"),gx.forEach(t),ebt=i(Zi),Re=n(Zi,"UL",{});var Oe=s(Re);KL=n(Oe,"LI",{});var Deo=s(KL);dSe=n(Deo,"STRONG",{});var h4a=s(dSe);obt=r(h4a,"albert"),h4a.forEach(t),rbt=r(Deo," \u2014 "),Kle=n(Deo,"A",{href:!0});var u4a=s(Kle);tbt=r(u4a,"FlaxAlbertForQuestionAnswering"),u4a.forEach(t),abt=r(Deo," (ALBERT model)"),Deo.forEach(t),nbt=i(Oe),e8=n(Oe,"LI",{});var Geo=s(e8);cSe=n(Geo,"STRONG",{});var p4a=s(cSe);sbt=r(p4a,"bart"),p4a.forEach(t),lbt=r(Geo," \u2014 "),eie=n(Geo,"A",{href:!0});var _4a=s(eie);ibt=r(_4a,"FlaxBartForQuestionAnswering"),_4a.forEach(t),dbt=r(Geo," (BART model)"),Geo.forEach(t),cbt=i(Oe),o8=n(Oe,"LI",{});var Oeo=s(o8);fSe=n(Oeo,"STRONG",{});var v4a=s(fSe);fbt=r(v4a,"bert"),v4a.forEach(t),mbt=r(Oeo," \u2014 "),oie=n(Oeo,"A",{href:!0});var b4a=s(oie);gbt=r(b4a,"FlaxBertForQuestionAnswering"),b4a.forEach(t),hbt=r(Oeo," (BERT model)"),Oeo.forEach(t),ubt=i(Oe),r8=n(Oe,"LI",{});var Veo=s(r8);mSe=n(Veo,"STRONG",{});var F4a=s(mSe);pbt=r(F4a,"big_bird"),F4a.forEach(t),_bt=r(Veo," \u2014 "),rie=n(Veo,"A",{href:!0});var T4a=s(rie);vbt=r(T4a,"FlaxBigBirdForQuestionAnswering"),T4a.forEach(t),bbt=r(Veo," (BigBird model)"),Veo.forEach(t),Fbt=i(Oe),t8=n(Oe,"LI",{});var Xeo=s(t8);gSe=n(Xeo,"STRONG",{});var M4a=s(gSe);Tbt=r(M4a,"distilbert"),M4a.forEach(t),Mbt=r(Xeo," \u2014 "),tie=n(Xeo,"A",{href:!0});var E4a=s(tie);Ebt=r(E4a,"FlaxDistilBertForQuestionAnswering"),E4a.forEach(t),Cbt=r(Xeo," (DistilBERT model)"),Xeo.forEach(t),wbt=i(Oe),a8=n(Oe,"LI",{});var zeo=s(a8);hSe=n(zeo,"STRONG",{});var C4a=s(hSe);Abt=r(C4a,"electra"),C4a.forEach(t),Lbt=r(zeo," \u2014 "),aie=n(zeo,"A",{href:!0});var w4a=s(aie);ybt=r(w4a,"FlaxElectraForQuestionAnswering"),w4a.forEach(t),xbt=r(zeo," (ELECTRA model)"),zeo.forEach(t),$bt=i(Oe),n8=n(Oe,"LI",{});var Qeo=s(n8);uSe=n(Qeo,"STRONG",{});var A4a=s(uSe);kbt=r(A4a,"mbart"),A4a.forEach(t),Sbt=r(Qeo," \u2014 "),nie=n(Qeo,"A",{href:!0});var L4a=s(nie);Rbt=r(L4a,"FlaxMBartForQuestionAnswering"),L4a.forEach(t),Pbt=r(Qeo," (mBART model)"),Qeo.forEach(t),Bbt=i(Oe),s8=n(Oe,"LI",{});var Weo=s(s8);pSe=n(Weo,"STRONG",{});var y4a=s(pSe);Ibt=r(y4a,"roberta"),y4a.forEach(t),Nbt=r(Weo," \u2014 "),sie=n(Weo,"A",{href:!0});var x4a=s(sie);qbt=r(x4a,"FlaxRobertaForQuestionAnswering"),x4a.forEach(t),jbt=r(Weo," (RoBERTa model)"),Weo.forEach(t),Dbt=i(Oe),l8=n(Oe,"LI",{});var Ueo=s(l8);_Se=n(Ueo,"STRONG",{});var $4a=s(_Se);Gbt=r($4a,"roformer"),$4a.forEach(t),Obt=r(Ueo," \u2014 "),lie=n(Ueo,"A",{href:!0});var k4a=s(lie);Vbt=r(k4a,"FlaxRoFormerForQuestionAnswering"),k4a.forEach(t),Xbt=r(Ueo," (RoFormer model)"),Ueo.forEach(t),zbt=i(Oe),i8=n(Oe,"LI",{});var Heo=s(i8);vSe=n(Heo,"STRONG",{});var S4a=s(vSe);Qbt=r(S4a,"xlm-roberta"),S4a.forEach(t),Wbt=r(Heo," \u2014 "),iie=n(Heo,"A",{href:!0});var R4a=s(iie);Ubt=r(R4a,"FlaxXLMRobertaForQuestionAnswering"),R4a.forEach(t),Hbt=r(Heo," (XLM-RoBERTa model)"),Heo.forEach(t),Oe.forEach(t),Jbt=i(Zi),T(d8.$$.fragment,Zi),Zi.forEach(t),Yi.forEach(t),Tto=i(f),um=n(f,"H2",{class:!0});var jno=s(um);c8=n(jno,"A",{id:!0,class:!0,href:!0});var P4a=s(c8);bSe=n(P4a,"SPAN",{});var B4a=s(bSe);T(IP.$$.fragment,B4a),B4a.forEach(t),P4a.forEach(t),Ybt=i(jno),FSe=n(jno,"SPAN",{});var I4a=s(FSe);Zbt=r(I4a,"FlaxAutoModelForTokenClassification"),I4a.forEach(t),jno.forEach(t),Mto=i(f),kr=n(f,"DIV",{class:!0});var Ki=s(kr);T(NP.$$.fragment,Ki),Kbt=i(Ki),pm=n(Ki,"P",{});var Dce=s(pm);e3t=r(Dce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),die=n(Dce,"A",{href:!0});var N4a=s(die);o3t=r(N4a,"from_pretrained()"),N4a.forEach(t),r3t=r(Dce," class method or the "),cie=n(Dce,"A",{href:!0});var q4a=s(cie);t3t=r(q4a,"from_config()"),q4a.forEach(t),a3t=r(Dce,` class
method.`),Dce.forEach(t),n3t=i(Ki),qP=n(Ki,"P",{});var Dno=s(qP);s3t=r(Dno,"This class cannot be instantiated directly using "),TSe=n(Dno,"CODE",{});var j4a=s(TSe);l3t=r(j4a,"__init__()"),j4a.forEach(t),i3t=r(Dno," (throws an error)."),Dno.forEach(t),d3t=i(Ki),pa=n(Ki,"DIV",{class:!0});var hx=s(pa);T(jP.$$.fragment,hx),c3t=i(hx),MSe=n(hx,"P",{});var D4a=s(MSe);f3t=r(D4a,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),D4a.forEach(t),m3t=i(hx),_m=n(hx,"P",{});var Gce=s(_m);g3t=r(Gce,`Note:
Loading a model from its configuration file does `),ESe=n(Gce,"STRONG",{});var G4a=s(ESe);h3t=r(G4a,"not"),G4a.forEach(t),u3t=r(Gce,` load the model weights. It only affects the
model\u2019s configuration. Use `),fie=n(Gce,"A",{href:!0});var O4a=s(fie);p3t=r(O4a,"from_pretrained()"),O4a.forEach(t),_3t=r(Gce," to load the model weights."),Gce.forEach(t),v3t=i(hx),T(f8.$$.fragment,hx),hx.forEach(t),b3t=i(Ki),lt=n(Ki,"DIV",{class:!0});var ed=s(lt);T(DP.$$.fragment,ed),F3t=i(ed),CSe=n(ed,"P",{});var V4a=s(CSe);T3t=r(V4a,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),V4a.forEach(t),M3t=i(ed),Kn=n(ed,"P",{});var ux=s(Kn);E3t=r(ux,"The model class to instantiate is selected based on the "),wSe=n(ux,"CODE",{});var X4a=s(wSe);C3t=r(X4a,"model_type"),X4a.forEach(t),w3t=r(ux,` property of the config object (either
passed as an argument or loaded from `),ASe=n(ux,"CODE",{});var z4a=s(ASe);A3t=r(z4a,"pretrained_model_name_or_path"),z4a.forEach(t),L3t=r(ux,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LSe=n(ux,"CODE",{});var Q4a=s(LSe);y3t=r(Q4a,"pretrained_model_name_or_path"),Q4a.forEach(t),x3t=r(ux,":"),ux.forEach(t),$3t=i(ed),Xe=n(ed,"UL",{});var Lo=s(Xe);m8=n(Lo,"LI",{});var Jeo=s(m8);ySe=n(Jeo,"STRONG",{});var W4a=s(ySe);k3t=r(W4a,"albert"),W4a.forEach(t),S3t=r(Jeo," \u2014 "),mie=n(Jeo,"A",{href:!0});var U4a=s(mie);R3t=r(U4a,"FlaxAlbertForTokenClassification"),U4a.forEach(t),P3t=r(Jeo," (ALBERT model)"),Jeo.forEach(t),B3t=i(Lo),g8=n(Lo,"LI",{});var Yeo=s(g8);xSe=n(Yeo,"STRONG",{});var H4a=s(xSe);I3t=r(H4a,"bert"),H4a.forEach(t),N3t=r(Yeo," \u2014 "),gie=n(Yeo,"A",{href:!0});var J4a=s(gie);q3t=r(J4a,"FlaxBertForTokenClassification"),J4a.forEach(t),j3t=r(Yeo," (BERT model)"),Yeo.forEach(t),D3t=i(Lo),h8=n(Lo,"LI",{});var Zeo=s(h8);$Se=n(Zeo,"STRONG",{});var Y4a=s($Se);G3t=r(Y4a,"big_bird"),Y4a.forEach(t),O3t=r(Zeo," \u2014 "),hie=n(Zeo,"A",{href:!0});var Z4a=s(hie);V3t=r(Z4a,"FlaxBigBirdForTokenClassification"),Z4a.forEach(t),X3t=r(Zeo," (BigBird model)"),Zeo.forEach(t),z3t=i(Lo),u8=n(Lo,"LI",{});var Keo=s(u8);kSe=n(Keo,"STRONG",{});var K4a=s(kSe);Q3t=r(K4a,"distilbert"),K4a.forEach(t),W3t=r(Keo," \u2014 "),uie=n(Keo,"A",{href:!0});var e1a=s(uie);U3t=r(e1a,"FlaxDistilBertForTokenClassification"),e1a.forEach(t),H3t=r(Keo," (DistilBERT model)"),Keo.forEach(t),J3t=i(Lo),p8=n(Lo,"LI",{});var eoo=s(p8);SSe=n(eoo,"STRONG",{});var o1a=s(SSe);Y3t=r(o1a,"electra"),o1a.forEach(t),Z3t=r(eoo," \u2014 "),pie=n(eoo,"A",{href:!0});var r1a=s(pie);K3t=r(r1a,"FlaxElectraForTokenClassification"),r1a.forEach(t),e0t=r(eoo," (ELECTRA model)"),eoo.forEach(t),o0t=i(Lo),_8=n(Lo,"LI",{});var ooo=s(_8);RSe=n(ooo,"STRONG",{});var t1a=s(RSe);r0t=r(t1a,"roberta"),t1a.forEach(t),t0t=r(ooo," \u2014 "),_ie=n(ooo,"A",{href:!0});var a1a=s(_ie);a0t=r(a1a,"FlaxRobertaForTokenClassification"),a1a.forEach(t),n0t=r(ooo," (RoBERTa model)"),ooo.forEach(t),s0t=i(Lo),v8=n(Lo,"LI",{});var roo=s(v8);PSe=n(roo,"STRONG",{});var n1a=s(PSe);l0t=r(n1a,"roformer"),n1a.forEach(t),i0t=r(roo," \u2014 "),vie=n(roo,"A",{href:!0});var s1a=s(vie);d0t=r(s1a,"FlaxRoFormerForTokenClassification"),s1a.forEach(t),c0t=r(roo," (RoFormer model)"),roo.forEach(t),f0t=i(Lo),b8=n(Lo,"LI",{});var too=s(b8);BSe=n(too,"STRONG",{});var l1a=s(BSe);m0t=r(l1a,"xlm-roberta"),l1a.forEach(t),g0t=r(too," \u2014 "),bie=n(too,"A",{href:!0});var i1a=s(bie);h0t=r(i1a,"FlaxXLMRobertaForTokenClassification"),i1a.forEach(t),u0t=r(too," (XLM-RoBERTa model)"),too.forEach(t),Lo.forEach(t),p0t=i(ed),T(F8.$$.fragment,ed),ed.forEach(t),Ki.forEach(t),Eto=i(f),vm=n(f,"H2",{class:!0});var Gno=s(vm);T8=n(Gno,"A",{id:!0,class:!0,href:!0});var d1a=s(T8);ISe=n(d1a,"SPAN",{});var c1a=s(ISe);T(GP.$$.fragment,c1a),c1a.forEach(t),d1a.forEach(t),_0t=i(Gno),NSe=n(Gno,"SPAN",{});var f1a=s(NSe);v0t=r(f1a,"FlaxAutoModelForMultipleChoice"),f1a.forEach(t),Gno.forEach(t),Cto=i(f),Sr=n(f,"DIV",{class:!0});var od=s(Sr);T(OP.$$.fragment,od),b0t=i(od),bm=n(od,"P",{});var Oce=s(bm);F0t=r(Oce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Fie=n(Oce,"A",{href:!0});var m1a=s(Fie);T0t=r(m1a,"from_pretrained()"),m1a.forEach(t),M0t=r(Oce," class method or the "),Tie=n(Oce,"A",{href:!0});var g1a=s(Tie);E0t=r(g1a,"from_config()"),g1a.forEach(t),C0t=r(Oce,` class
method.`),Oce.forEach(t),w0t=i(od),VP=n(od,"P",{});var Ono=s(VP);A0t=r(Ono,"This class cannot be instantiated directly using "),qSe=n(Ono,"CODE",{});var h1a=s(qSe);L0t=r(h1a,"__init__()"),h1a.forEach(t),y0t=r(Ono," (throws an error)."),Ono.forEach(t),x0t=i(od),_a=n(od,"DIV",{class:!0});var px=s(_a);T(XP.$$.fragment,px),$0t=i(px),jSe=n(px,"P",{});var u1a=s(jSe);k0t=r(u1a,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),u1a.forEach(t),S0t=i(px),Fm=n(px,"P",{});var Vce=s(Fm);R0t=r(Vce,`Note:
Loading a model from its configuration file does `),DSe=n(Vce,"STRONG",{});var p1a=s(DSe);P0t=r(p1a,"not"),p1a.forEach(t),B0t=r(Vce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mie=n(Vce,"A",{href:!0});var _1a=s(Mie);I0t=r(_1a,"from_pretrained()"),_1a.forEach(t),N0t=r(Vce," to load the model weights."),Vce.forEach(t),q0t=i(px),T(M8.$$.fragment,px),px.forEach(t),j0t=i(od),it=n(od,"DIV",{class:!0});var rd=s(it);T(zP.$$.fragment,rd),D0t=i(rd),GSe=n(rd,"P",{});var v1a=s(GSe);G0t=r(v1a,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),v1a.forEach(t),O0t=i(rd),es=n(rd,"P",{});var _x=s(es);V0t=r(_x,"The model class to instantiate is selected based on the "),OSe=n(_x,"CODE",{});var b1a=s(OSe);X0t=r(b1a,"model_type"),b1a.forEach(t),z0t=r(_x,` property of the config object (either
passed as an argument or loaded from `),VSe=n(_x,"CODE",{});var F1a=s(VSe);Q0t=r(F1a,"pretrained_model_name_or_path"),F1a.forEach(t),W0t=r(_x,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XSe=n(_x,"CODE",{});var T1a=s(XSe);U0t=r(T1a,"pretrained_model_name_or_path"),T1a.forEach(t),H0t=r(_x,":"),_x.forEach(t),J0t=i(rd),ze=n(rd,"UL",{});var yo=s(ze);E8=n(yo,"LI",{});var aoo=s(E8);zSe=n(aoo,"STRONG",{});var M1a=s(zSe);Y0t=r(M1a,"albert"),M1a.forEach(t),Z0t=r(aoo," \u2014 "),Eie=n(aoo,"A",{href:!0});var E1a=s(Eie);K0t=r(E1a,"FlaxAlbertForMultipleChoice"),E1a.forEach(t),eFt=r(aoo," (ALBERT model)"),aoo.forEach(t),oFt=i(yo),C8=n(yo,"LI",{});var noo=s(C8);QSe=n(noo,"STRONG",{});var C1a=s(QSe);rFt=r(C1a,"bert"),C1a.forEach(t),tFt=r(noo," \u2014 "),Cie=n(noo,"A",{href:!0});var w1a=s(Cie);aFt=r(w1a,"FlaxBertForMultipleChoice"),w1a.forEach(t),nFt=r(noo," (BERT model)"),noo.forEach(t),sFt=i(yo),w8=n(yo,"LI",{});var soo=s(w8);WSe=n(soo,"STRONG",{});var A1a=s(WSe);lFt=r(A1a,"big_bird"),A1a.forEach(t),iFt=r(soo," \u2014 "),wie=n(soo,"A",{href:!0});var L1a=s(wie);dFt=r(L1a,"FlaxBigBirdForMultipleChoice"),L1a.forEach(t),cFt=r(soo," (BigBird model)"),soo.forEach(t),fFt=i(yo),A8=n(yo,"LI",{});var loo=s(A8);USe=n(loo,"STRONG",{});var y1a=s(USe);mFt=r(y1a,"distilbert"),y1a.forEach(t),gFt=r(loo," \u2014 "),Aie=n(loo,"A",{href:!0});var x1a=s(Aie);hFt=r(x1a,"FlaxDistilBertForMultipleChoice"),x1a.forEach(t),uFt=r(loo," (DistilBERT model)"),loo.forEach(t),pFt=i(yo),L8=n(yo,"LI",{});var ioo=s(L8);HSe=n(ioo,"STRONG",{});var $1a=s(HSe);_Ft=r($1a,"electra"),$1a.forEach(t),vFt=r(ioo," \u2014 "),Lie=n(ioo,"A",{href:!0});var k1a=s(Lie);bFt=r(k1a,"FlaxElectraForMultipleChoice"),k1a.forEach(t),FFt=r(ioo," (ELECTRA model)"),ioo.forEach(t),TFt=i(yo),y8=n(yo,"LI",{});var doo=s(y8);JSe=n(doo,"STRONG",{});var S1a=s(JSe);MFt=r(S1a,"roberta"),S1a.forEach(t),EFt=r(doo," \u2014 "),yie=n(doo,"A",{href:!0});var R1a=s(yie);CFt=r(R1a,"FlaxRobertaForMultipleChoice"),R1a.forEach(t),wFt=r(doo," (RoBERTa model)"),doo.forEach(t),AFt=i(yo),x8=n(yo,"LI",{});var coo=s(x8);YSe=n(coo,"STRONG",{});var P1a=s(YSe);LFt=r(P1a,"roformer"),P1a.forEach(t),yFt=r(coo," \u2014 "),xie=n(coo,"A",{href:!0});var B1a=s(xie);xFt=r(B1a,"FlaxRoFormerForMultipleChoice"),B1a.forEach(t),$Ft=r(coo," (RoFormer model)"),coo.forEach(t),kFt=i(yo),$8=n(yo,"LI",{});var foo=s($8);ZSe=n(foo,"STRONG",{});var I1a=s(ZSe);SFt=r(I1a,"xlm-roberta"),I1a.forEach(t),RFt=r(foo," \u2014 "),$ie=n(foo,"A",{href:!0});var N1a=s($ie);PFt=r(N1a,"FlaxXLMRobertaForMultipleChoice"),N1a.forEach(t),BFt=r(foo," (XLM-RoBERTa model)"),foo.forEach(t),yo.forEach(t),IFt=i(rd),T(k8.$$.fragment,rd),rd.forEach(t),od.forEach(t),wto=i(f),Tm=n(f,"H2",{class:!0});var Vno=s(Tm);S8=n(Vno,"A",{id:!0,class:!0,href:!0});var q1a=s(S8);KSe=n(q1a,"SPAN",{});var j1a=s(KSe);T(QP.$$.fragment,j1a),j1a.forEach(t),q1a.forEach(t),NFt=i(Vno),eRe=n(Vno,"SPAN",{});var D1a=s(eRe);qFt=r(D1a,"FlaxAutoModelForNextSentencePrediction"),D1a.forEach(t),Vno.forEach(t),Ato=i(f),Rr=n(f,"DIV",{class:!0});var td=s(Rr);T(WP.$$.fragment,td),jFt=i(td),Mm=n(td,"P",{});var Xce=s(Mm);DFt=r(Xce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kie=n(Xce,"A",{href:!0});var G1a=s(kie);GFt=r(G1a,"from_pretrained()"),G1a.forEach(t),OFt=r(Xce," class method or the "),Sie=n(Xce,"A",{href:!0});var O1a=s(Sie);VFt=r(O1a,"from_config()"),O1a.forEach(t),XFt=r(Xce,` class
method.`),Xce.forEach(t),zFt=i(td),UP=n(td,"P",{});var Xno=s(UP);QFt=r(Xno,"This class cannot be instantiated directly using "),oRe=n(Xno,"CODE",{});var V1a=s(oRe);WFt=r(V1a,"__init__()"),V1a.forEach(t),UFt=r(Xno," (throws an error)."),Xno.forEach(t),HFt=i(td),va=n(td,"DIV",{class:!0});var vx=s(va);T(HP.$$.fragment,vx),JFt=i(vx),rRe=n(vx,"P",{});var X1a=s(rRe);YFt=r(X1a,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),X1a.forEach(t),ZFt=i(vx),Em=n(vx,"P",{});var zce=s(Em);KFt=r(zce,`Note:
Loading a model from its configuration file does `),tRe=n(zce,"STRONG",{});var z1a=s(tRe);eTt=r(z1a,"not"),z1a.forEach(t),oTt=r(zce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rie=n(zce,"A",{href:!0});var Q1a=s(Rie);rTt=r(Q1a,"from_pretrained()"),Q1a.forEach(t),tTt=r(zce," to load the model weights."),zce.forEach(t),aTt=i(vx),T(R8.$$.fragment,vx),vx.forEach(t),nTt=i(td),dt=n(td,"DIV",{class:!0});var ad=s(dt);T(JP.$$.fragment,ad),sTt=i(ad),aRe=n(ad,"P",{});var W1a=s(aRe);lTt=r(W1a,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),W1a.forEach(t),iTt=i(ad),os=n(ad,"P",{});var bx=s(os);dTt=r(bx,"The model class to instantiate is selected based on the "),nRe=n(bx,"CODE",{});var U1a=s(nRe);cTt=r(U1a,"model_type"),U1a.forEach(t),fTt=r(bx,` property of the config object (either
passed as an argument or loaded from `),sRe=n(bx,"CODE",{});var H1a=s(sRe);mTt=r(H1a,"pretrained_model_name_or_path"),H1a.forEach(t),gTt=r(bx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lRe=n(bx,"CODE",{});var J1a=s(lRe);hTt=r(J1a,"pretrained_model_name_or_path"),J1a.forEach(t),uTt=r(bx,":"),bx.forEach(t),pTt=i(ad),iRe=n(ad,"UL",{});var Y1a=s(iRe);P8=n(Y1a,"LI",{});var moo=s(P8);dRe=n(moo,"STRONG",{});var Z1a=s(dRe);_Tt=r(Z1a,"bert"),Z1a.forEach(t),vTt=r(moo," \u2014 "),Pie=n(moo,"A",{href:!0});var K1a=s(Pie);bTt=r(K1a,"FlaxBertForNextSentencePrediction"),K1a.forEach(t),FTt=r(moo," (BERT model)"),moo.forEach(t),Y1a.forEach(t),TTt=i(ad),T(B8.$$.fragment,ad),ad.forEach(t),td.forEach(t),Lto=i(f),Cm=n(f,"H2",{class:!0});var zno=s(Cm);I8=n(zno,"A",{id:!0,class:!0,href:!0});var eba=s(I8);cRe=n(eba,"SPAN",{});var oba=s(cRe);T(YP.$$.fragment,oba),oba.forEach(t),eba.forEach(t),MTt=i(zno),fRe=n(zno,"SPAN",{});var rba=s(fRe);ETt=r(rba,"FlaxAutoModelForImageClassification"),rba.forEach(t),zno.forEach(t),yto=i(f),Pr=n(f,"DIV",{class:!0});var nd=s(Pr);T(ZP.$$.fragment,nd),CTt=i(nd),wm=n(nd,"P",{});var Qce=s(wm);wTt=r(Qce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Bie=n(Qce,"A",{href:!0});var tba=s(Bie);ATt=r(tba,"from_pretrained()"),tba.forEach(t),LTt=r(Qce," class method or the "),Iie=n(Qce,"A",{href:!0});var aba=s(Iie);yTt=r(aba,"from_config()"),aba.forEach(t),xTt=r(Qce,` class
method.`),Qce.forEach(t),$Tt=i(nd),KP=n(nd,"P",{});var Qno=s(KP);kTt=r(Qno,"This class cannot be instantiated directly using "),mRe=n(Qno,"CODE",{});var nba=s(mRe);STt=r(nba,"__init__()"),nba.forEach(t),RTt=r(Qno," (throws an error)."),Qno.forEach(t),PTt=i(nd),ba=n(nd,"DIV",{class:!0});var Fx=s(ba);T(eB.$$.fragment,Fx),BTt=i(Fx),gRe=n(Fx,"P",{});var sba=s(gRe);ITt=r(sba,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),sba.forEach(t),NTt=i(Fx),Am=n(Fx,"P",{});var Wce=s(Am);qTt=r(Wce,`Note:
Loading a model from its configuration file does `),hRe=n(Wce,"STRONG",{});var lba=s(hRe);jTt=r(lba,"not"),lba.forEach(t),DTt=r(Wce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nie=n(Wce,"A",{href:!0});var iba=s(Nie);GTt=r(iba,"from_pretrained()"),iba.forEach(t),OTt=r(Wce," to load the model weights."),Wce.forEach(t),VTt=i(Fx),T(N8.$$.fragment,Fx),Fx.forEach(t),XTt=i(nd),ct=n(nd,"DIV",{class:!0});var sd=s(ct);T(oB.$$.fragment,sd),zTt=i(sd),uRe=n(sd,"P",{});var dba=s(uRe);QTt=r(dba,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),dba.forEach(t),WTt=i(sd),rs=n(sd,"P",{});var Tx=s(rs);UTt=r(Tx,"The model class to instantiate is selected based on the "),pRe=n(Tx,"CODE",{});var cba=s(pRe);HTt=r(cba,"model_type"),cba.forEach(t),JTt=r(Tx,` property of the config object (either
passed as an argument or loaded from `),_Re=n(Tx,"CODE",{});var fba=s(_Re);YTt=r(fba,"pretrained_model_name_or_path"),fba.forEach(t),ZTt=r(Tx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vRe=n(Tx,"CODE",{});var mba=s(vRe);KTt=r(mba,"pretrained_model_name_or_path"),mba.forEach(t),eMt=r(Tx,":"),Tx.forEach(t),oMt=i(sd),rB=n(sd,"UL",{});var Wno=s(rB);q8=n(Wno,"LI",{});var goo=s(q8);bRe=n(goo,"STRONG",{});var gba=s(bRe);rMt=r(gba,"beit"),gba.forEach(t),tMt=r(goo," \u2014 "),qie=n(goo,"A",{href:!0});var hba=s(qie);aMt=r(hba,"FlaxBeitForImageClassification"),hba.forEach(t),nMt=r(goo," (BEiT model)"),goo.forEach(t),sMt=i(Wno),j8=n(Wno,"LI",{});var hoo=s(j8);FRe=n(hoo,"STRONG",{});var uba=s(FRe);lMt=r(uba,"vit"),uba.forEach(t),iMt=r(hoo," \u2014 "),jie=n(hoo,"A",{href:!0});var pba=s(jie);dMt=r(pba,"FlaxViTForImageClassification"),pba.forEach(t),cMt=r(hoo," (ViT model)"),hoo.forEach(t),Wno.forEach(t),fMt=i(sd),T(D8.$$.fragment,sd),sd.forEach(t),nd.forEach(t),xto=i(f),Lm=n(f,"H2",{class:!0});var Uno=s(Lm);G8=n(Uno,"A",{id:!0,class:!0,href:!0});var _ba=s(G8);TRe=n(_ba,"SPAN",{});var vba=s(TRe);T(tB.$$.fragment,vba),vba.forEach(t),_ba.forEach(t),mMt=i(Uno),MRe=n(Uno,"SPAN",{});var bba=s(MRe);gMt=r(bba,"FlaxAutoModelForVision2Seq"),bba.forEach(t),Uno.forEach(t),$to=i(f),Br=n(f,"DIV",{class:!0});var ld=s(Br);T(aB.$$.fragment,ld),hMt=i(ld),ym=n(ld,"P",{});var Uce=s(ym);uMt=r(Uce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Die=n(Uce,"A",{href:!0});var Fba=s(Die);pMt=r(Fba,"from_pretrained()"),Fba.forEach(t),_Mt=r(Uce," class method or the "),Gie=n(Uce,"A",{href:!0});var Tba=s(Gie);vMt=r(Tba,"from_config()"),Tba.forEach(t),bMt=r(Uce,` class
method.`),Uce.forEach(t),FMt=i(ld),nB=n(ld,"P",{});var Hno=s(nB);TMt=r(Hno,"This class cannot be instantiated directly using "),ERe=n(Hno,"CODE",{});var Mba=s(ERe);MMt=r(Mba,"__init__()"),Mba.forEach(t),EMt=r(Hno," (throws an error)."),Hno.forEach(t),CMt=i(ld),Fa=n(ld,"DIV",{class:!0});var Mx=s(Fa);T(sB.$$.fragment,Mx),wMt=i(Mx),CRe=n(Mx,"P",{});var Eba=s(CRe);AMt=r(Eba,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Eba.forEach(t),LMt=i(Mx),xm=n(Mx,"P",{});var Hce=s(xm);yMt=r(Hce,`Note:
Loading a model from its configuration file does `),wRe=n(Hce,"STRONG",{});var Cba=s(wRe);xMt=r(Cba,"not"),Cba.forEach(t),$Mt=r(Hce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oie=n(Hce,"A",{href:!0});var wba=s(Oie);kMt=r(wba,"from_pretrained()"),wba.forEach(t),SMt=r(Hce," to load the model weights."),Hce.forEach(t),RMt=i(Mx),T(O8.$$.fragment,Mx),Mx.forEach(t),PMt=i(ld),ft=n(ld,"DIV",{class:!0});var id=s(ft);T(lB.$$.fragment,id),BMt=i(id),ARe=n(id,"P",{});var Aba=s(ARe);IMt=r(Aba,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Aba.forEach(t),NMt=i(id),ts=n(id,"P",{});var Ex=s(ts);qMt=r(Ex,"The model class to instantiate is selected based on the "),LRe=n(Ex,"CODE",{});var Lba=s(LRe);jMt=r(Lba,"model_type"),Lba.forEach(t),DMt=r(Ex,` property of the config object (either
passed as an argument or loaded from `),yRe=n(Ex,"CODE",{});var yba=s(yRe);GMt=r(yba,"pretrained_model_name_or_path"),yba.forEach(t),OMt=r(Ex,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xRe=n(Ex,"CODE",{});var xba=s(xRe);VMt=r(xba,"pretrained_model_name_or_path"),xba.forEach(t),XMt=r(Ex,":"),Ex.forEach(t),zMt=i(id),$Re=n(id,"UL",{});var $ba=s($Re);V8=n($ba,"LI",{});var uoo=s(V8);kRe=n(uoo,"STRONG",{});var kba=s(kRe);QMt=r(kba,"vision-encoder-decoder"),kba.forEach(t),WMt=r(uoo," \u2014 "),Vie=n(uoo,"A",{href:!0});var Sba=s(Vie);UMt=r(Sba,"FlaxVisionEncoderDecoderModel"),Sba.forEach(t),HMt=r(uoo," (Vision Encoder decoder model)"),uoo.forEach(t),$ba.forEach(t),JMt=i(id),T(X8.$$.fragment,id),id.forEach(t),ld.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(U0a)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(u,"class","relative group"),c(ns,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.AutoConfig"),c(ls,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.AutoModel"),c(is,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.AutoTokenizer"),c(ud,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertModel"),c(Nm,"id","extending-the-auto-classes"),c(Nm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nm,"href","#extending-the-auto-classes"),c(pd,"class","relative group"),c(jm,"id","transformers.AutoConfig"),c(jm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jm,"href","#transformers.AutoConfig"),c(_d,"class","relative group"),c(jI,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(DI,"href","/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertConfig"),c(GI,"href","/docs/transformers/v4.23.0/en/model_doc/bart#transformers.BartConfig"),c(OI,"href","/docs/transformers/v4.23.0/en/model_doc/beit#transformers.BeitConfig"),c(VI,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertConfig"),c(XI,"href","/docs/transformers/v4.23.0/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(zI,"href","/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.BigBirdConfig"),c(QI,"href","/docs/transformers/v4.23.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(WI,"href","/docs/transformers/v4.23.0/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(UI,"href","/docs/transformers/v4.23.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(HI,"href","/docs/transformers/v4.23.0/en/model_doc/bloom#transformers.BloomConfig"),c(JI,"href","/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.CamembertConfig"),c(YI,"href","/docs/transformers/v4.23.0/en/model_doc/canine#transformers.CanineConfig"),c(ZI,"href","/docs/transformers/v4.23.0/en/model_doc/clip#transformers.CLIPConfig"),c(KI,"href","/docs/transformers/v4.23.0/en/model_doc/codegen#transformers.CodeGenConfig"),c(eN,"href","/docs/transformers/v4.23.0/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig"),c(oN,"href","/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.ConvBertConfig"),c(rN,"href","/docs/transformers/v4.23.0/en/model_doc/convnext#transformers.ConvNextConfig"),c(tN,"href","/docs/transformers/v4.23.0/en/model_doc/ctrl#transformers.CTRLConfig"),c(aN,"href","/docs/transformers/v4.23.0/en/model_doc/cvt#transformers.CvtConfig"),c(nN,"href","/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(sN,"href","/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(lN,"href","/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(iN,"href","/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.DebertaConfig"),c(dN,"href","/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(cN,"href","/docs/transformers/v4.23.0/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(fN,"href","/docs/transformers/v4.23.0/en/model_doc/deformable_detr#transformers.DeformableDetrConfig"),c(mN,"href","/docs/transformers/v4.23.0/en/model_doc/deit#transformers.DeiTConfig"),c(gN,"href","/docs/transformers/v4.23.0/en/model_doc/detr#transformers.DetrConfig"),c(hN,"href","/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertConfig"),c(uN,"href","/docs/transformers/v4.23.0/en/model_doc/donut#transformers.DonutSwinConfig"),c(pN,"href","/docs/transformers/v4.23.0/en/model_doc/dpr#transformers.DPRConfig"),c(_N,"href","/docs/transformers/v4.23.0/en/model_doc/dpt#transformers.DPTConfig"),c(vN,"href","/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraConfig"),c(bN,"href","/docs/transformers/v4.23.0/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(FN,"href","/docs/transformers/v4.23.0/en/model_doc/ernie#transformers.ErnieConfig"),c(TN,"href","/docs/transformers/v4.23.0/en/model_doc/esm#transformers.EsmConfig"),c(MN,"href","/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.FlaubertConfig"),c(EN,"href","/docs/transformers/v4.23.0/en/model_doc/flava#transformers.FlavaConfig"),c(CN,"href","/docs/transformers/v4.23.0/en/model_doc/fnet#transformers.FNetConfig"),c(wN,"href","/docs/transformers/v4.23.0/en/model_doc/fsmt#transformers.FSMTConfig"),c(AN,"href","/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.FunnelConfig"),c(LN,"href","/docs/transformers/v4.23.0/en/model_doc/glpn#transformers.GLPNConfig"),c(yN,"href","/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.GPT2Config"),c(xN,"href","/docs/transformers/v4.23.0/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c($N,"href","/docs/transformers/v4.23.0/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(kN,"href","/docs/transformers/v4.23.0/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig"),c(SN,"href","/docs/transformers/v4.23.0/en/model_doc/gptj#transformers.GPTJConfig"),c(RN,"href","/docs/transformers/v4.23.0/en/model_doc/groupvit#transformers.GroupViTConfig"),c(PN,"href","/docs/transformers/v4.23.0/en/model_doc/hubert#transformers.HubertConfig"),c(BN,"href","/docs/transformers/v4.23.0/en/model_doc/ibert#transformers.IBertConfig"),c(IN,"href","/docs/transformers/v4.23.0/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(NN,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(qN,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(jN,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(DN,"href","/docs/transformers/v4.23.0/en/model_doc/led#transformers.LEDConfig"),c(GN,"href","/docs/transformers/v4.23.0/en/model_doc/levit#transformers.LevitConfig"),c(ON,"href","/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.LongformerConfig"),c(VN,"href","/docs/transformers/v4.23.0/en/model_doc/longt5#transformers.LongT5Config"),c(XN,"href","/docs/transformers/v4.23.0/en/model_doc/luke#transformers.LukeConfig"),c(zN,"href","/docs/transformers/v4.23.0/en/model_doc/lxmert#transformers.LxmertConfig"),c(QN,"href","/docs/transformers/v4.23.0/en/model_doc/m2m_100#transformers.M2M100Config"),c(WN,"href","/docs/transformers/v4.23.0/en/model_doc/marian#transformers.MarianConfig"),c(UN,"href","/docs/transformers/v4.23.0/en/model_doc/markuplm#transformers.MarkupLMConfig"),c(HN,"href","/docs/transformers/v4.23.0/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(JN,"href","/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.MBartConfig"),c(YN,"href","/docs/transformers/v4.23.0/en/model_doc/mctct#transformers.MCTCTConfig"),c(ZN,"href","/docs/transformers/v4.23.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(KN,"href","/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(eq,"href","/docs/transformers/v4.23.0/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(oq,"href","/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.MPNetConfig"),c(rq,"href","/docs/transformers/v4.23.0/en/model_doc/mt5#transformers.MT5Config"),c(tq,"href","/docs/transformers/v4.23.0/en/model_doc/mvp#transformers.MvpConfig"),c(aq,"href","/docs/transformers/v4.23.0/en/model_doc/nezha#transformers.NezhaConfig"),c(nq,"href","/docs/transformers/v4.23.0/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(sq,"href","/docs/transformers/v4.23.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(lq,"href","/docs/transformers/v4.23.0/en/model_doc/opt#transformers.OPTConfig"),c(iq,"href","/docs/transformers/v4.23.0/en/model_doc/owlvit#transformers.OwlViTConfig"),c(dq,"href","/docs/transformers/v4.23.0/en/model_doc/pegasus#transformers.PegasusConfig"),c(cq,"href","/docs/transformers/v4.23.0/en/model_doc/pegasus_x#transformers.PegasusXConfig"),c(fq,"href","/docs/transformers/v4.23.0/en/model_doc/perceiver#transformers.PerceiverConfig"),c(mq,"href","/docs/transformers/v4.23.0/en/model_doc/plbart#transformers.PLBartConfig"),c(gq,"href","/docs/transformers/v4.23.0/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(hq,"href","/docs/transformers/v4.23.0/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(uq,"href","/docs/transformers/v4.23.0/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(pq,"href","/docs/transformers/v4.23.0/en/model_doc/rag#transformers.RagConfig"),c(_q,"href","/docs/transformers/v4.23.0/en/model_doc/realm#transformers.RealmConfig"),c(vq,"href","/docs/transformers/v4.23.0/en/model_doc/reformer#transformers.ReformerConfig"),c(bq,"href","/docs/transformers/v4.23.0/en/model_doc/regnet#transformers.RegNetConfig"),c(Fq,"href","/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.RemBertConfig"),c(Tq,"href","/docs/transformers/v4.23.0/en/model_doc/resnet#transformers.ResNetConfig"),c(Mq,"href","/docs/transformers/v4.23.0/en/model_doc/retribert#transformers.RetriBertConfig"),c(Eq,"href","/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaConfig"),c(Cq,"href","/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerConfig"),c(wq,"href","/docs/transformers/v4.23.0/en/model_doc/segformer#transformers.SegformerConfig"),c(Aq,"href","/docs/transformers/v4.23.0/en/model_doc/sew#transformers.SEWConfig"),c(Lq,"href","/docs/transformers/v4.23.0/en/model_doc/sew-d#transformers.SEWDConfig"),c(yq,"href","/docs/transformers/v4.23.0/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(xq,"href","/docs/transformers/v4.23.0/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c($q,"href","/docs/transformers/v4.23.0/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(kq,"href","/docs/transformers/v4.23.0/en/model_doc/splinter#transformers.SplinterConfig"),c(Sq,"href","/docs/transformers/v4.23.0/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Rq,"href","/docs/transformers/v4.23.0/en/model_doc/swin#transformers.SwinConfig"),c(Pq,"href","/docs/transformers/v4.23.0/en/model_doc/swinv2#transformers.Swinv2Config"),c(Bq,"href","/docs/transformers/v4.23.0/en/model_doc/t5#transformers.T5Config"),c(Iq,"href","/docs/transformers/v4.23.0/en/model_doc/tapas#transformers.TapasConfig"),c(Nq,"href","/docs/transformers/v4.23.0/en/model_doc/time_series_transformer#transformers.TimeSeriesTransformerConfig"),c(qq,"href","/docs/transformers/v4.23.0/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(jq,"href","/docs/transformers/v4.23.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(Dq,"href","/docs/transformers/v4.23.0/en/model_doc/trocr#transformers.TrOCRConfig"),c(Gq,"href","/docs/transformers/v4.23.0/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(Oq,"href","/docs/transformers/v4.23.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(Vq,"href","/docs/transformers/v4.23.0/en/model_doc/van#transformers.VanConfig"),c(Xq,"href","/docs/transformers/v4.23.0/en/model_doc/videomae#transformers.VideoMAEConfig"),c(zq,"href","/docs/transformers/v4.23.0/en/model_doc/vilt#transformers.ViltConfig"),c(Qq,"href","/docs/transformers/v4.23.0/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(Wq,"href","/docs/transformers/v4.23.0/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(Uq,"href","/docs/transformers/v4.23.0/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(Hq,"href","/docs/transformers/v4.23.0/en/model_doc/vit#transformers.ViTConfig"),c(Jq,"href","/docs/transformers/v4.23.0/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(Yq,"href","/docs/transformers/v4.23.0/en/model_doc/vit_msn#transformers.ViTMSNConfig"),c(Zq,"href","/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(Kq,"href","/docs/transformers/v4.23.0/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(ej,"href","/docs/transformers/v4.23.0/en/model_doc/wavlm#transformers.WavLMConfig"),c(oj,"href","/docs/transformers/v4.23.0/en/model_doc/whisper#transformers.WhisperConfig"),c(rj,"href","/docs/transformers/v4.23.0/en/model_doc/xclip#transformers.XCLIPConfig"),c(tj,"href","/docs/transformers/v4.23.0/en/model_doc/xglm#transformers.XGLMConfig"),c(aj,"href","/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.XLMConfig"),c(nj,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(sj,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(lj,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(ij,"href","/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.XLNetConfig"),c(dj,"href","/docs/transformers/v4.23.0/en/model_doc/yolos#transformers.YolosConfig"),c(cj,"href","/docs/transformers/v4.23.0/en/model_doc/yoso#transformers.YosoConfig"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gu,"id","transformers.AutoTokenizer"),c(gu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gu,"href","#transformers.AutoTokenizer"),c(bd,"class","relative group"),c(fj,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(mj,"href","/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertTokenizer"),c(gj,"href","/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(hj,"href","/docs/transformers/v4.23.0/en/model_doc/bart#transformers.BartTokenizer"),c(uj,"href","/docs/transformers/v4.23.0/en/model_doc/bart#transformers.BartTokenizerFast"),c(pj,"href","/docs/transformers/v4.23.0/en/model_doc/barthez#transformers.BarthezTokenizer"),c(_j,"href","/docs/transformers/v4.23.0/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(vj,"href","/docs/transformers/v4.23.0/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(bj,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertTokenizer"),c(Fj,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertTokenizerFast"),c(Tj,"href","/docs/transformers/v4.23.0/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(Mj,"href","/docs/transformers/v4.23.0/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(Ej,"href","/docs/transformers/v4.23.0/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(Cj,"href","/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(wj,"href","/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(Aj,"href","/docs/transformers/v4.23.0/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Lj,"href","/docs/transformers/v4.23.0/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(yj,"href","/docs/transformers/v4.23.0/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(xj,"href","/docs/transformers/v4.23.0/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c($j,"href","/docs/transformers/v4.23.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(kj,"href","/docs/transformers/v4.23.0/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(Sj,"href","/docs/transformers/v4.23.0/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(Rj,"href","/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.CamembertTokenizer"),c(Pj,"href","/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(Bj,"href","/docs/transformers/v4.23.0/en/model_doc/canine#transformers.CanineTokenizer"),c(Ij,"href","/docs/transformers/v4.23.0/en/model_doc/clip#transformers.CLIPTokenizer"),c(Nj,"href","/docs/transformers/v4.23.0/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(qj,"href","/docs/transformers/v4.23.0/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(jj,"href","/docs/transformers/v4.23.0/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(Dj,"href","/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(Gj,"href","/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(Oj,"href","/docs/transformers/v4.23.0/en/model_doc/cpm#transformers.CpmTokenizer"),c(Vj,"href","/docs/transformers/v4.23.0/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(Xj,"href","/docs/transformers/v4.23.0/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(zj,"href","/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Qj,"href","/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Wj,"href","/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.DebertaTokenizer"),c(Uj,"href","/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(Hj,"href","/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(Jj,"href","/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(Yj,"href","/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(Zj,"href","/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(Kj,"href","/docs/transformers/v4.23.0/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(eD,"href","/docs/transformers/v4.23.0/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(oD,"href","/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraTokenizer"),c(rD,"href","/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(tD,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertTokenizer"),c(aD,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertTokenizerFast"),c(nD,"href","/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(sD,"href","/docs/transformers/v4.23.0/en/model_doc/fnet#transformers.FNetTokenizer"),c(lD,"href","/docs/transformers/v4.23.0/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(iD,"href","/docs/transformers/v4.23.0/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(dD,"href","/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.FunnelTokenizer"),c(cD,"href","/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(fD,"href","/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(mD,"href","/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(gD,"href","/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(hD,"href","/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(uD,"href","/docs/transformers/v4.23.0/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(pD,"href","/docs/transformers/v4.23.0/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseTokenizer"),c(_D,"href","/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(vD,"href","/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(bD,"href","/docs/transformers/v4.23.0/en/model_doc/clip#transformers.CLIPTokenizer"),c(FD,"href","/docs/transformers/v4.23.0/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(TD,"href","/docs/transformers/v4.23.0/en/model_doc/herbert#transformers.HerbertTokenizer"),c(MD,"href","/docs/transformers/v4.23.0/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(ED,"href","/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(CD,"href","/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaTokenizer"),c(wD,"href","/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(AD,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(LD,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(yD,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(xD,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c($D,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(kD,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(SD,"href","/docs/transformers/v4.23.0/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(RD,"href","/docs/transformers/v4.23.0/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(PD,"href","/docs/transformers/v4.23.0/en/model_doc/led#transformers.LEDTokenizer"),c(BD,"href","/docs/transformers/v4.23.0/en/model_doc/led#transformers.LEDTokenizerFast"),c(ID,"href","/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.LongformerTokenizer"),c(ND,"href","/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(qD,"href","/docs/transformers/v4.23.0/en/model_doc/mt5#transformers.T5Tokenizer"),c(jD,"href","/docs/transformers/v4.23.0/en/model_doc/mt5#transformers.T5TokenizerFast"),c(DD,"href","/docs/transformers/v4.23.0/en/model_doc/luke#transformers.LukeTokenizer"),c(GD,"href","/docs/transformers/v4.23.0/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(OD,"href","/docs/transformers/v4.23.0/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(VD,"href","/docs/transformers/v4.23.0/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(XD,"href","/docs/transformers/v4.23.0/en/model_doc/marian#transformers.MarianTokenizer"),c(zD,"href","/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.MBartTokenizer"),c(QD,"href","/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(WD,"href","/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(UD,"href","/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(HD,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertTokenizer"),c(JD,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertTokenizerFast"),c(YD,"href","/docs/transformers/v4.23.0/en/model_doc/mluke#transformers.MLukeTokenizer"),c(ZD,"href","/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(KD,"href","/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(eG,"href","/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(oG,"href","/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(rG,"href","/docs/transformers/v4.23.0/en/model_doc/mt5#transformers.T5Tokenizer"),c(tG,"href","/docs/transformers/v4.23.0/en/model_doc/mt5#transformers.T5TokenizerFast"),c(aG,"href","/docs/transformers/v4.23.0/en/model_doc/mvp#transformers.MvpTokenizer"),c(nG,"href","/docs/transformers/v4.23.0/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(sG,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertTokenizer"),c(lG,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertTokenizerFast"),c(iG,"href","/docs/transformers/v4.23.0/en/model_doc/nllb#transformers.NllbTokenizer"),c(dG,"href","/docs/transformers/v4.23.0/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(cG,"href","/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertTokenizer"),c(fG,"href","/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(mG,"href","/docs/transformers/v4.23.0/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(gG,"href","/docs/transformers/v4.23.0/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(hG,"href","/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(uG,"href","/docs/transformers/v4.23.0/en/model_doc/clip#transformers.CLIPTokenizer"),c(pG,"href","/docs/transformers/v4.23.0/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(_G,"href","/docs/transformers/v4.23.0/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(vG,"href","/docs/transformers/v4.23.0/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(bG,"href","/docs/transformers/v4.23.0/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(FG,"href","/docs/transformers/v4.23.0/en/model_doc/phobert#transformers.PhobertTokenizer"),c(TG,"href","/docs/transformers/v4.23.0/en/model_doc/plbart#transformers.PLBartTokenizer"),c(MG,"href","/docs/transformers/v4.23.0/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(EG,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertTokenizer"),c(CG,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertTokenizerFast"),c(wG,"href","/docs/transformers/v4.23.0/en/model_doc/rag#transformers.RagTokenizer"),c(AG,"href","/docs/transformers/v4.23.0/en/model_doc/realm#transformers.RealmTokenizer"),c(LG,"href","/docs/transformers/v4.23.0/en/model_doc/realm#transformers.RealmTokenizerFast"),c(yG,"href","/docs/transformers/v4.23.0/en/model_doc/reformer#transformers.ReformerTokenizer"),c(xG,"href","/docs/transformers/v4.23.0/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c($G,"href","/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.RemBertTokenizer"),c(kG,"href","/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(SG,"href","/docs/transformers/v4.23.0/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(RG,"href","/docs/transformers/v4.23.0/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(PG,"href","/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaTokenizer"),c(BG,"href","/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(IG,"href","/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(NG,"href","/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(qG,"href","/docs/transformers/v4.23.0/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(jG,"href","/docs/transformers/v4.23.0/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(DG,"href","/docs/transformers/v4.23.0/en/model_doc/splinter#transformers.SplinterTokenizer"),c(GG,"href","/docs/transformers/v4.23.0/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(OG,"href","/docs/transformers/v4.23.0/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(VG,"href","/docs/transformers/v4.23.0/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(XG,"href","/docs/transformers/v4.23.0/en/model_doc/mt5#transformers.T5Tokenizer"),c(zG,"href","/docs/transformers/v4.23.0/en/model_doc/mt5#transformers.T5TokenizerFast"),c(QG,"href","/docs/transformers/v4.23.0/en/model_doc/tapas#transformers.TapasTokenizer"),c(WG,"href","/docs/transformers/v4.23.0/en/model_doc/tapex#transformers.TapexTokenizer"),c(UG,"href","/docs/transformers/v4.23.0/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(HG,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertTokenizer"),c(JG,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertTokenizerFast"),c(YG,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertTokenizer"),c(ZG,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertTokenizerFast"),c(KG,"href","/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(eO,"href","/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(oO,"href","/docs/transformers/v4.23.0/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(rO,"href","/docs/transformers/v4.23.0/en/model_doc/whisper#transformers.WhisperTokenizer"),c(tO,"href","/docs/transformers/v4.23.0/en/model_doc/clip#transformers.CLIPTokenizer"),c(aO,"href","/docs/transformers/v4.23.0/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(nO,"href","/docs/transformers/v4.23.0/en/model_doc/xglm#transformers.XGLMTokenizer"),c(sO,"href","/docs/transformers/v4.23.0/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(lO,"href","/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.XLMTokenizer"),c(iO,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(dO,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(cO,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(fO,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(mO,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(gO,"href","/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(hO,"href","/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(uO,"href","/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertTokenizer"),c(pO,"href","/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ju,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yu,"id","transformers.AutoFeatureExtractor"),c(Yu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yu,"href","#transformers.AutoFeatureExtractor"),c(Fd,"class","relative group"),c(_O,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(vO,"href","/docs/transformers/v4.23.0/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(bO,"href","/docs/transformers/v4.23.0/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(FO,"href","/docs/transformers/v4.23.0/en/model_doc/conditional_detr#transformers.ConditionalDetrFeatureExtractor"),c(TO,"href","/docs/transformers/v4.23.0/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(MO,"href","/docs/transformers/v4.23.0/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(EO,"href","/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(CO,"href","/docs/transformers/v4.23.0/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(wO,"href","/docs/transformers/v4.23.0/en/model_doc/deformable_detr#transformers.DeformableDetrFeatureExtractor"),c(AO,"href","/docs/transformers/v4.23.0/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(LO,"href","/docs/transformers/v4.23.0/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(yO,"href","/docs/transformers/v4.23.0/en/model_doc/donut#transformers.DonutFeatureExtractor"),c(xO,"href","/docs/transformers/v4.23.0/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c($O,"href","/docs/transformers/v4.23.0/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(kO,"href","/docs/transformers/v4.23.0/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(SO,"href","/docs/transformers/v4.23.0/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(RO,"href","/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(PO,"href","/docs/transformers/v4.23.0/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(BO,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(IO,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(NO,"href","/docs/transformers/v4.23.0/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(qO,"href","/docs/transformers/v4.23.0/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(jO,"href","/docs/transformers/v4.23.0/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(DO,"href","/docs/transformers/v4.23.0/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(GO,"href","/docs/transformers/v4.23.0/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),c(OO,"href","/docs/transformers/v4.23.0/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(VO,"href","/docs/transformers/v4.23.0/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(XO,"href","/docs/transformers/v4.23.0/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(zO,"href","/docs/transformers/v4.23.0/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(QO,"href","/docs/transformers/v4.23.0/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(WO,"href","/docs/transformers/v4.23.0/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(UO,"href","/docs/transformers/v4.23.0/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(HO,"href","/docs/transformers/v4.23.0/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(JO,"href","/docs/transformers/v4.23.0/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(YO,"href","/docs/transformers/v4.23.0/en/model_doc/videomae#transformers.VideoMAEFeatureExtractor"),c(ZO,"href","/docs/transformers/v4.23.0/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(KO,"href","/docs/transformers/v4.23.0/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(eV,"href","/docs/transformers/v4.23.0/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(oV,"href","/docs/transformers/v4.23.0/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(rV,"href","/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(tV,"href","/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(aV,"href","/docs/transformers/v4.23.0/en/model_doc/whisper#transformers.WhisperFeatureExtractor"),c(nV,"href","/docs/transformers/v4.23.0/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(sV,"href","/docs/transformers/v4.23.0/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xp,"id","transformers.AutoProcessor"),c(Xp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xp,"href","#transformers.AutoProcessor"),c(Td,"class","relative group"),c(lV,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(iV,"href","/docs/transformers/v4.23.0/en/model_doc/clip#transformers.CLIPProcessor"),c(dV,"href","/docs/transformers/v4.23.0/en/model_doc/donut#transformers.DonutProcessor"),c(cV,"href","/docs/transformers/v4.23.0/en/model_doc/flava#transformers.FlavaProcessor"),c(fV,"href","/docs/transformers/v4.23.0/en/model_doc/clip#transformers.CLIPProcessor"),c(mV,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(gV,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(hV,"href","/docs/transformers/v4.23.0/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(uV,"href","/docs/transformers/v4.23.0/en/model_doc/markuplm#transformers.MarkupLMProcessor"),c(pV,"href","/docs/transformers/v4.23.0/en/model_doc/owlvit#transformers.OwlViTProcessor"),c(_V,"href","/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(vV,"href","/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(bV,"href","/docs/transformers/v4.23.0/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(FV,"href","/docs/transformers/v4.23.0/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(TV,"href","/docs/transformers/v4.23.0/en/model_doc/trocr#transformers.TrOCRProcessor"),c(MV,"href","/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(EV,"href","/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(CV,"href","/docs/transformers/v4.23.0/en/model_doc/vilt#transformers.ViltProcessor"),c(wV,"href","/docs/transformers/v4.23.0/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(AV,"href","/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(LV,"href","/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(yV,"href","/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(xV,"href","/docs/transformers/v4.23.0/en/model_doc/whisper#transformers.WhisperProcessor"),c($V,"href","/docs/transformers/v4.23.0/en/model_doc/clip#transformers.CLIPProcessor"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(__,"id","transformers.AutoModel"),c(__,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(__,"href","#transformers.AutoModel"),c(Ed,"class","relative group"),c(kV,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SV,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RV,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PV,"href","/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertModel"),c(BV,"href","/docs/transformers/v4.23.0/en/model_doc/bart#transformers.BartModel"),c(IV,"href","/docs/transformers/v4.23.0/en/model_doc/beit#transformers.BeitModel"),c(NV,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertModel"),c(qV,"href","/docs/transformers/v4.23.0/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(jV,"href","/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.BigBirdModel"),c(DV,"href","/docs/transformers/v4.23.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(GV,"href","/docs/transformers/v4.23.0/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(OV,"href","/docs/transformers/v4.23.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(VV,"href","/docs/transformers/v4.23.0/en/model_doc/bloom#transformers.BloomModel"),c(XV,"href","/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.CamembertModel"),c(zV,"href","/docs/transformers/v4.23.0/en/model_doc/canine#transformers.CanineModel"),c(QV,"href","/docs/transformers/v4.23.0/en/model_doc/clip#transformers.CLIPModel"),c(WV,"href","/docs/transformers/v4.23.0/en/model_doc/codegen#transformers.CodeGenModel"),c(UV,"href","/docs/transformers/v4.23.0/en/model_doc/conditional_detr#transformers.ConditionalDetrModel"),c(HV,"href","/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.ConvBertModel"),c(JV,"href","/docs/transformers/v4.23.0/en/model_doc/convnext#transformers.ConvNextModel"),c(YV,"href","/docs/transformers/v4.23.0/en/model_doc/ctrl#transformers.CTRLModel"),c(ZV,"href","/docs/transformers/v4.23.0/en/model_doc/cvt#transformers.CvtModel"),c(KV,"href","/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(eX,"href","/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(oX,"href","/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(rX,"href","/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.DebertaModel"),c(tX,"href","/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(aX,"href","/docs/transformers/v4.23.0/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(nX,"href","/docs/transformers/v4.23.0/en/model_doc/deformable_detr#transformers.DeformableDetrModel"),c(sX,"href","/docs/transformers/v4.23.0/en/model_doc/deit#transformers.DeiTModel"),c(lX,"href","/docs/transformers/v4.23.0/en/model_doc/detr#transformers.DetrModel"),c(iX,"href","/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertModel"),c(dX,"href","/docs/transformers/v4.23.0/en/model_doc/donut#transformers.DonutSwinModel"),c(cX,"href","/docs/transformers/v4.23.0/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(fX,"href","/docs/transformers/v4.23.0/en/model_doc/dpt#transformers.DPTModel"),c(mX,"href","/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraModel"),c(gX,"href","/docs/transformers/v4.23.0/en/model_doc/ernie#transformers.ErnieModel"),c(hX,"href","/docs/transformers/v4.23.0/en/model_doc/esm#transformers.EsmModel"),c(uX,"href","/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.FlaubertModel"),c(pX,"href","/docs/transformers/v4.23.0/en/model_doc/flava#transformers.FlavaModel"),c(_X,"href","/docs/transformers/v4.23.0/en/model_doc/fnet#transformers.FNetModel"),c(vX,"href","/docs/transformers/v4.23.0/en/model_doc/fsmt#transformers.FSMTModel"),c(bX,"href","/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.FunnelModel"),c(FX,"href","/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.FunnelBaseModel"),c(TX,"href","/docs/transformers/v4.23.0/en/model_doc/glpn#transformers.GLPNModel"),c(MX,"href","/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.GPT2Model"),c(EX,"href","/docs/transformers/v4.23.0/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(CX,"href","/docs/transformers/v4.23.0/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(wX,"href","/docs/transformers/v4.23.0/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseModel"),c(AX,"href","/docs/transformers/v4.23.0/en/model_doc/gptj#transformers.GPTJModel"),c(LX,"href","/docs/transformers/v4.23.0/en/model_doc/groupvit#transformers.GroupViTModel"),c(yX,"href","/docs/transformers/v4.23.0/en/model_doc/hubert#transformers.HubertModel"),c(xX,"href","/docs/transformers/v4.23.0/en/model_doc/ibert#transformers.IBertModel"),c($X,"href","/docs/transformers/v4.23.0/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(kX,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(SX,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(RX,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(PX,"href","/docs/transformers/v4.23.0/en/model_doc/led#transformers.LEDModel"),c(BX,"href","/docs/transformers/v4.23.0/en/model_doc/levit#transformers.LevitModel"),c(IX,"href","/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.LongformerModel"),c(NX,"href","/docs/transformers/v4.23.0/en/model_doc/longt5#transformers.LongT5Model"),c(qX,"href","/docs/transformers/v4.23.0/en/model_doc/luke#transformers.LukeModel"),c(jX,"href","/docs/transformers/v4.23.0/en/model_doc/lxmert#transformers.LxmertModel"),c(DX,"href","/docs/transformers/v4.23.0/en/model_doc/m2m_100#transformers.M2M100Model"),c(GX,"href","/docs/transformers/v4.23.0/en/model_doc/marian#transformers.MarianModel"),c(OX,"href","/docs/transformers/v4.23.0/en/model_doc/markuplm#transformers.MarkupLMModel"),c(VX,"href","/docs/transformers/v4.23.0/en/model_doc/maskformer#transformers.MaskFormerModel"),c(XX,"href","/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.MBartModel"),c(zX,"href","/docs/transformers/v4.23.0/en/model_doc/mctct#transformers.MCTCTModel"),c(QX,"href","/docs/transformers/v4.23.0/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(WX,"href","/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.MobileBertModel"),c(UX,"href","/docs/transformers/v4.23.0/en/model_doc/mobilevit#transformers.MobileViTModel"),c(HX,"href","/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.MPNetModel"),c(JX,"href","/docs/transformers/v4.23.0/en/model_doc/mt5#transformers.MT5Model"),c(YX,"href","/docs/transformers/v4.23.0/en/model_doc/mvp#transformers.MvpModel"),c(ZX,"href","/docs/transformers/v4.23.0/en/model_doc/nezha#transformers.NezhaModel"),c(KX,"href","/docs/transformers/v4.23.0/en/model_doc/m2m_100#transformers.M2M100Model"),c(ez,"href","/docs/transformers/v4.23.0/en/model_doc/nystromformer#transformers.NystromformerModel"),c(oz,"href","/docs/transformers/v4.23.0/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(rz,"href","/docs/transformers/v4.23.0/en/model_doc/opt#transformers.OPTModel"),c(tz,"href","/docs/transformers/v4.23.0/en/model_doc/owlvit#transformers.OwlViTModel"),c(az,"href","/docs/transformers/v4.23.0/en/model_doc/pegasus#transformers.PegasusModel"),c(nz,"href","/docs/transformers/v4.23.0/en/model_doc/pegasus_x#transformers.PegasusXModel"),c(sz,"href","/docs/transformers/v4.23.0/en/model_doc/perceiver#transformers.PerceiverModel"),c(lz,"href","/docs/transformers/v4.23.0/en/model_doc/plbart#transformers.PLBartModel"),c(iz,"href","/docs/transformers/v4.23.0/en/model_doc/poolformer#transformers.PoolFormerModel"),c(dz,"href","/docs/transformers/v4.23.0/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(cz,"href","/docs/transformers/v4.23.0/en/model_doc/qdqbert#transformers.QDQBertModel"),c(fz,"href","/docs/transformers/v4.23.0/en/model_doc/reformer#transformers.ReformerModel"),c(mz,"href","/docs/transformers/v4.23.0/en/model_doc/regnet#transformers.RegNetModel"),c(gz,"href","/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.RemBertModel"),c(hz,"href","/docs/transformers/v4.23.0/en/model_doc/resnet#transformers.ResNetModel"),c(uz,"href","/docs/transformers/v4.23.0/en/model_doc/retribert#transformers.RetriBertModel"),c(pz,"href","/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaModel"),c(_z,"href","/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerModel"),c(vz,"href","/docs/transformers/v4.23.0/en/model_doc/segformer#transformers.SegformerModel"),c(bz,"href","/docs/transformers/v4.23.0/en/model_doc/sew#transformers.SEWModel"),c(Fz,"href","/docs/transformers/v4.23.0/en/model_doc/sew-d#transformers.SEWDModel"),c(Tz,"href","/docs/transformers/v4.23.0/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Mz,"href","/docs/transformers/v4.23.0/en/model_doc/splinter#transformers.SplinterModel"),c(Ez,"href","/docs/transformers/v4.23.0/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Cz,"href","/docs/transformers/v4.23.0/en/model_doc/swin#transformers.SwinModel"),c(wz,"href","/docs/transformers/v4.23.0/en/model_doc/swinv2#transformers.Swinv2Model"),c(Az,"href","/docs/transformers/v4.23.0/en/model_doc/t5#transformers.T5Model"),c(Lz,"href","/docs/transformers/v4.23.0/en/model_doc/tapas#transformers.TapasModel"),c(yz,"href","/docs/transformers/v4.23.0/en/model_doc/time_series_transformer#transformers.TimeSeriesTransformerModel"),c(xz,"href","/docs/transformers/v4.23.0/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c($z,"href","/docs/transformers/v4.23.0/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(kz,"href","/docs/transformers/v4.23.0/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Sz,"href","/docs/transformers/v4.23.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Rz,"href","/docs/transformers/v4.23.0/en/model_doc/van#transformers.VanModel"),c(Pz,"href","/docs/transformers/v4.23.0/en/model_doc/videomae#transformers.VideoMAEModel"),c(Bz,"href","/docs/transformers/v4.23.0/en/model_doc/vilt#transformers.ViltModel"),c(Iz,"href","/docs/transformers/v4.23.0/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Nz,"href","/docs/transformers/v4.23.0/en/model_doc/visual_bert#transformers.VisualBertModel"),c(qz,"href","/docs/transformers/v4.23.0/en/model_doc/vit#transformers.ViTModel"),c(jz,"href","/docs/transformers/v4.23.0/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Dz,"href","/docs/transformers/v4.23.0/en/model_doc/vit_msn#transformers.ViTMSNModel"),c(Gz,"href","/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Oz,"href","/docs/transformers/v4.23.0/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Vz,"href","/docs/transformers/v4.23.0/en/model_doc/wavlm#transformers.WavLMModel"),c(Xz,"href","/docs/transformers/v4.23.0/en/model_doc/whisper#transformers.WhisperModel"),c(zz,"href","/docs/transformers/v4.23.0/en/model_doc/xclip#transformers.XCLIPModel"),c(Qz,"href","/docs/transformers/v4.23.0/en/model_doc/xglm#transformers.XGLMModel"),c(Wz,"href","/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.XLMModel"),c(Uz,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Hz,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Jz,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Yz,"href","/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.XLNetModel"),c(Zz,"href","/docs/transformers/v4.23.0/en/model_doc/yolos#transformers.YolosModel"),c(Kz,"href","/docs/transformers/v4.23.0/en/model_doc/yoso#transformers.YosoModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jv,"id","transformers.AutoModelForPreTraining"),c(jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jv,"href","#transformers.AutoModelForPreTraining"),c(Ad,"class","relative group"),c(eQ,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oQ,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rQ,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tQ,"href","/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertForPreTraining"),c(aQ,"href","/docs/transformers/v4.23.0/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(nQ,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertForPreTraining"),c(sQ,"href","/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(lQ,"href","/docs/transformers/v4.23.0/en/model_doc/bloom#transformers.BloomForCausalLM"),c(iQ,"href","/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(dQ,"href","/docs/transformers/v4.23.0/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(cQ,"href","/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(fQ,"href","/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(mQ,"href","/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(gQ,"href","/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(hQ,"href","/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraForPreTraining"),c(uQ,"href","/docs/transformers/v4.23.0/en/model_doc/ernie#transformers.ErnieForPreTraining"),c(pQ,"href","/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(_Q,"href","/docs/transformers/v4.23.0/en/model_doc/flava#transformers.FlavaForPreTraining"),c(vQ,"href","/docs/transformers/v4.23.0/en/model_doc/fnet#transformers.FNetForPreTraining"),c(bQ,"href","/docs/transformers/v4.23.0/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(FQ,"href","/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(TQ,"href","/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(MQ,"href","/docs/transformers/v4.23.0/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(EQ,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(CQ,"href","/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(wQ,"href","/docs/transformers/v4.23.0/en/model_doc/luke#transformers.LukeForMaskedLM"),c(AQ,"href","/docs/transformers/v4.23.0/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(LQ,"href","/docs/transformers/v4.23.0/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(yQ,"href","/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(xQ,"href","/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c($Q,"href","/docs/transformers/v4.23.0/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(kQ,"href","/docs/transformers/v4.23.0/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(SQ,"href","/docs/transformers/v4.23.0/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(RQ,"href","/docs/transformers/v4.23.0/en/model_doc/retribert#transformers.RetriBertModel"),c(PQ,"href","/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(BQ,"href","/docs/transformers/v4.23.0/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(IQ,"href","/docs/transformers/v4.23.0/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(NQ,"href","/docs/transformers/v4.23.0/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(qQ,"href","/docs/transformers/v4.23.0/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(jQ,"href","/docs/transformers/v4.23.0/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(DQ,"href","/docs/transformers/v4.23.0/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(GQ,"href","/docs/transformers/v4.23.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(OQ,"href","/docs/transformers/v4.23.0/en/model_doc/videomae#transformers.VideoMAEForPreTraining"),c(VQ,"href","/docs/transformers/v4.23.0/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(XQ,"href","/docs/transformers/v4.23.0/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(zQ,"href","/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(QQ,"href","/docs/transformers/v4.23.0/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(WQ,"href","/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(UQ,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(HQ,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(JQ,"href","/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N4,"id","transformers.AutoModelForCausalLM"),c(N4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N4,"href","#transformers.AutoModelForCausalLM"),c(xd,"class","relative group"),c(YQ,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZQ,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KQ,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eW,"href","/docs/transformers/v4.23.0/en/model_doc/bart#transformers.BartForCausalLM"),c(oW,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertLMHeadModel"),c(rW,"href","/docs/transformers/v4.23.0/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(tW,"href","/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(aW,"href","/docs/transformers/v4.23.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(nW,"href","/docs/transformers/v4.23.0/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(sW,"href","/docs/transformers/v4.23.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(lW,"href","/docs/transformers/v4.23.0/en/model_doc/bloom#transformers.BloomForCausalLM"),c(iW,"href","/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(dW,"href","/docs/transformers/v4.23.0/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(cW,"href","/docs/transformers/v4.23.0/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(fW,"href","/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(mW,"href","/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraForCausalLM"),c(gW,"href","/docs/transformers/v4.23.0/en/model_doc/ernie#transformers.ErnieForCausalLM"),c(hW,"href","/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(uW,"href","/docs/transformers/v4.23.0/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(pW,"href","/docs/transformers/v4.23.0/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(_W,"href","/docs/transformers/v4.23.0/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseForCausalLM"),c(vW,"href","/docs/transformers/v4.23.0/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(bW,"href","/docs/transformers/v4.23.0/en/model_doc/marian#transformers.MarianForCausalLM"),c(FW,"href","/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.MBartForCausalLM"),c(TW,"href","/docs/transformers/v4.23.0/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(MW,"href","/docs/transformers/v4.23.0/en/model_doc/mvp#transformers.MvpForCausalLM"),c(EW,"href","/docs/transformers/v4.23.0/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(CW,"href","/docs/transformers/v4.23.0/en/model_doc/opt#transformers.OPTForCausalLM"),c(wW,"href","/docs/transformers/v4.23.0/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(AW,"href","/docs/transformers/v4.23.0/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(LW,"href","/docs/transformers/v4.23.0/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(yW,"href","/docs/transformers/v4.23.0/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(xW,"href","/docs/transformers/v4.23.0/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c($W,"href","/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(kW,"href","/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(SW,"href","/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(RW,"href","/docs/transformers/v4.23.0/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(PW,"href","/docs/transformers/v4.23.0/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(BW,"href","/docs/transformers/v4.23.0/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(IW,"href","/docs/transformers/v4.23.0/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(NW,"href","/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(qW,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(jW,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(DW,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(GW,"href","/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x1,"id","transformers.AutoModelForMaskedLM"),c(x1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x1,"href","#transformers.AutoModelForMaskedLM"),c(Sd,"class","relative group"),c(OW,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VW,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XW,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zW,"href","/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(QW,"href","/docs/transformers/v4.23.0/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(WW,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertForMaskedLM"),c(UW,"href","/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(HW,"href","/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(JW,"href","/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(YW,"href","/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(ZW,"href","/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(KW,"href","/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(eU,"href","/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(oU,"href","/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(rU,"href","/docs/transformers/v4.23.0/en/model_doc/ernie#transformers.ErnieForMaskedLM"),c(tU,"href","/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(aU,"href","/docs/transformers/v4.23.0/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(nU,"href","/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(sU,"href","/docs/transformers/v4.23.0/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(lU,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(iU,"href","/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(dU,"href","/docs/transformers/v4.23.0/en/model_doc/luke#transformers.LukeForMaskedLM"),c(cU,"href","/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(fU,"href","/docs/transformers/v4.23.0/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(mU,"href","/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(gU,"href","/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(hU,"href","/docs/transformers/v4.23.0/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(uU,"href","/docs/transformers/v4.23.0/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(pU,"href","/docs/transformers/v4.23.0/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(_U,"href","/docs/transformers/v4.23.0/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(vU,"href","/docs/transformers/v4.23.0/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(bU,"href","/docs/transformers/v4.23.0/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(FU,"href","/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(TU,"href","/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(MU,"href","/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(EU,"href","/docs/transformers/v4.23.0/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(CU,"href","/docs/transformers/v4.23.0/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(wU,"href","/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(AU,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(LU,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(yU,"href","/docs/transformers/v4.23.0/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vb,"id","transformers.AutoModelForSeq2SeqLM"),c(vb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vb,"href","#transformers.AutoModelForSeq2SeqLM"),c(Bd,"class","relative group"),c(xU,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($U,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kU,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SU,"href","/docs/transformers/v4.23.0/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(RU,"href","/docs/transformers/v4.23.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(PU,"href","/docs/transformers/v4.23.0/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(BU,"href","/docs/transformers/v4.23.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(IU,"href","/docs/transformers/v4.23.0/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(NU,"href","/docs/transformers/v4.23.0/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(qU,"href","/docs/transformers/v4.23.0/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(jU,"href","/docs/transformers/v4.23.0/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(DU,"href","/docs/transformers/v4.23.0/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(GU,"href","/docs/transformers/v4.23.0/en/model_doc/marian#transformers.MarianMTModel"),c(OU,"href","/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(VU,"href","/docs/transformers/v4.23.0/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(XU,"href","/docs/transformers/v4.23.0/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(zU,"href","/docs/transformers/v4.23.0/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(QU,"href","/docs/transformers/v4.23.0/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(WU,"href","/docs/transformers/v4.23.0/en/model_doc/pegasus_x#transformers.PegasusXForConditionalGeneration"),c(UU,"href","/docs/transformers/v4.23.0/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(HU,"href","/docs/transformers/v4.23.0/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(JU,"href","/docs/transformers/v4.23.0/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(YU,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ob,"id","transformers.AutoModelForSequenceClassification"),c(Ob,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ob,"href","#transformers.AutoModelForSequenceClassification"),c(qd,"class","relative group"),c(ZU,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KU,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eH,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oH,"href","/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(rH,"href","/docs/transformers/v4.23.0/en/model_doc/bart#transformers.BartForSequenceClassification"),c(tH,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertForSequenceClassification"),c(aH,"href","/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(nH,"href","/docs/transformers/v4.23.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(sH,"href","/docs/transformers/v4.23.0/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(lH,"href","/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(iH,"href","/docs/transformers/v4.23.0/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(dH,"href","/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(cH,"href","/docs/transformers/v4.23.0/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(fH,"href","/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(mH,"href","/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(gH,"href","/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(hH,"href","/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(uH,"href","/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(pH,"href","/docs/transformers/v4.23.0/en/model_doc/ernie#transformers.ErnieForSequenceClassification"),c(_H,"href","/docs/transformers/v4.23.0/en/model_doc/esm#transformers.EsmForSequenceClassification"),c(vH,"href","/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(bH,"href","/docs/transformers/v4.23.0/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(FH,"href","/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(TH,"href","/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(MH,"href","/docs/transformers/v4.23.0/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(EH,"href","/docs/transformers/v4.23.0/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(CH,"href","/docs/transformers/v4.23.0/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(wH,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(AH,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(LH,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(yH,"href","/docs/transformers/v4.23.0/en/model_doc/led#transformers.LEDForSequenceClassification"),c(xH,"href","/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c($H,"href","/docs/transformers/v4.23.0/en/model_doc/luke#transformers.LukeForSequenceClassification"),c(kH,"href","/docs/transformers/v4.23.0/en/model_doc/markuplm#transformers.MarkupLMForSequenceClassification"),c(SH,"href","/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(RH,"href","/docs/transformers/v4.23.0/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(PH,"href","/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(BH,"href","/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(IH,"href","/docs/transformers/v4.23.0/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(NH,"href","/docs/transformers/v4.23.0/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(qH,"href","/docs/transformers/v4.23.0/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(jH,"href","/docs/transformers/v4.23.0/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(DH,"href","/docs/transformers/v4.23.0/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(GH,"href","/docs/transformers/v4.23.0/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(OH,"href","/docs/transformers/v4.23.0/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(VH,"href","/docs/transformers/v4.23.0/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(XH,"href","/docs/transformers/v4.23.0/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(zH,"href","/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(QH,"href","/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(WH,"href","/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(UH,"href","/docs/transformers/v4.23.0/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(HH,"href","/docs/transformers/v4.23.0/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(JH,"href","/docs/transformers/v4.23.0/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(YH,"href","/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(ZH,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(KH,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(eJ,"href","/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(oJ,"href","/docs/transformers/v4.23.0/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W3,"id","transformers.AutoModelForMultipleChoice"),c(W3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W3,"href","#transformers.AutoModelForMultipleChoice"),c(Gd,"class","relative group"),c(rJ,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tJ,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aJ,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nJ,"href","/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(sJ,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertForMultipleChoice"),c(lJ,"href","/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(iJ,"href","/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(dJ,"href","/docs/transformers/v4.23.0/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(cJ,"href","/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(fJ,"href","/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(mJ,"href","/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(gJ,"href","/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(hJ,"href","/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(uJ,"href","/docs/transformers/v4.23.0/en/model_doc/ernie#transformers.ErnieForMultipleChoice"),c(pJ,"href","/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(_J,"href","/docs/transformers/v4.23.0/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(vJ,"href","/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(bJ,"href","/docs/transformers/v4.23.0/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(FJ,"href","/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(TJ,"href","/docs/transformers/v4.23.0/en/model_doc/luke#transformers.LukeForMultipleChoice"),c(MJ,"href","/docs/transformers/v4.23.0/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(EJ,"href","/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(CJ,"href","/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(wJ,"href","/docs/transformers/v4.23.0/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(AJ,"href","/docs/transformers/v4.23.0/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(LJ,"href","/docs/transformers/v4.23.0/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(yJ,"href","/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(xJ,"href","/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c($J,"href","/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(kJ,"href","/docs/transformers/v4.23.0/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(SJ,"href","/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(RJ,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(PJ,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(BJ,"href","/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(IJ,"href","/docs/transformers/v4.23.0/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x0,"id","transformers.AutoModelForNextSentencePrediction"),c(x0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x0,"href","#transformers.AutoModelForNextSentencePrediction"),c(Xd,"class","relative group"),c(NJ,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qJ,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jJ,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DJ,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(GJ,"href","/docs/transformers/v4.23.0/en/model_doc/ernie#transformers.ErnieForNextSentencePrediction"),c(OJ,"href","/docs/transformers/v4.23.0/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(VJ,"href","/docs/transformers/v4.23.0/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(XJ,"href","/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(zJ,"href","/docs/transformers/v4.23.0/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(QJ,"href","/docs/transformers/v4.23.0/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D0,"id","transformers.AutoModelForTokenClassification"),c(D0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D0,"href","#transformers.AutoModelForTokenClassification"),c(Wd,"class","relative group"),c(WJ,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UJ,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HJ,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JJ,"href","/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(YJ,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertForTokenClassification"),c(ZJ,"href","/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(KJ,"href","/docs/transformers/v4.23.0/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(eY,"href","/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(oY,"href","/docs/transformers/v4.23.0/en/model_doc/canine#transformers.CanineForTokenClassification"),c(rY,"href","/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(tY,"href","/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(aY,"href","/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(nY,"href","/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(sY,"href","/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(lY,"href","/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(iY,"href","/docs/transformers/v4.23.0/en/model_doc/ernie#transformers.ErnieForTokenClassification"),c(dY,"href","/docs/transformers/v4.23.0/en/model_doc/esm#transformers.EsmForTokenClassification"),c(cY,"href","/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(fY,"href","/docs/transformers/v4.23.0/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(mY,"href","/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(gY,"href","/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(hY,"href","/docs/transformers/v4.23.0/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(uY,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(pY,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(_Y,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(vY,"href","/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(bY,"href","/docs/transformers/v4.23.0/en/model_doc/luke#transformers.LukeForTokenClassification"),c(FY,"href","/docs/transformers/v4.23.0/en/model_doc/markuplm#transformers.MarkupLMForTokenClassification"),c(TY,"href","/docs/transformers/v4.23.0/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(MY,"href","/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(EY,"href","/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(CY,"href","/docs/transformers/v4.23.0/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(wY,"href","/docs/transformers/v4.23.0/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(AY,"href","/docs/transformers/v4.23.0/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(LY,"href","/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(yY,"href","/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(xY,"href","/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c($Y,"href","/docs/transformers/v4.23.0/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(kY,"href","/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(SY,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(RY,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(PY,"href","/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(BY,"href","/docs/transformers/v4.23.0/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($F,"id","transformers.AutoModelForQuestionAnswering"),c($F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($F,"href","#transformers.AutoModelForQuestionAnswering"),c(Jd,"class","relative group"),c(IY,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NY,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qY,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jY,"href","/docs/transformers/v4.23.0/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(DY,"href","/docs/transformers/v4.23.0/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(GY,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(OY,"href","/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(VY,"href","/docs/transformers/v4.23.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(XY,"href","/docs/transformers/v4.23.0/en/model_doc/bloom#transformers.BloomForQuestionAnswering"),c(zY,"href","/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(QY,"href","/docs/transformers/v4.23.0/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(WY,"href","/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(UY,"href","/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(HY,"href","/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(JY,"href","/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(YY,"href","/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(ZY,"href","/docs/transformers/v4.23.0/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(KY,"href","/docs/transformers/v4.23.0/en/model_doc/ernie#transformers.ErnieForQuestionAnswering"),c(eZ,"href","/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(oZ,"href","/docs/transformers/v4.23.0/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(rZ,"href","/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(tZ,"href","/docs/transformers/v4.23.0/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(aZ,"href","/docs/transformers/v4.23.0/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(nZ,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(sZ,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(lZ,"href","/docs/transformers/v4.23.0/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(iZ,"href","/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(dZ,"href","/docs/transformers/v4.23.0/en/model_doc/luke#transformers.LukeForQuestionAnswering"),c(cZ,"href","/docs/transformers/v4.23.0/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(fZ,"href","/docs/transformers/v4.23.0/en/model_doc/markuplm#transformers.MarkupLMForQuestionAnswering"),c(mZ,"href","/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(gZ,"href","/docs/transformers/v4.23.0/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(hZ,"href","/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(uZ,"href","/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(pZ,"href","/docs/transformers/v4.23.0/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(_Z,"href","/docs/transformers/v4.23.0/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(vZ,"href","/docs/transformers/v4.23.0/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(bZ,"href","/docs/transformers/v4.23.0/en/model_doc/opt#transformers.OPTForQuestionAnswering"),c(FZ,"href","/docs/transformers/v4.23.0/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(TZ,"href","/docs/transformers/v4.23.0/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(MZ,"href","/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(EZ,"href","/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(CZ,"href","/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(wZ,"href","/docs/transformers/v4.23.0/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(AZ,"href","/docs/transformers/v4.23.0/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(LZ,"href","/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(yZ,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(xZ,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c($Z,"href","/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(kZ,"href","/docs/transformers/v4.23.0/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LT,"id","transformers.AutoModelForTableQuestionAnswering"),c(LT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Kd,"class","relative group"),c(SZ,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RZ,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PZ,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BZ,"href","/docs/transformers/v4.23.0/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ST,"id","transformers.AutoModelForDocumentQuestionAnswering"),c(ST,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ST,"href","#transformers.AutoModelForDocumentQuestionAnswering"),c(rc,"class","relative group"),c(IZ,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NZ,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qZ,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jZ,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.LayoutLMForQuestionAnswering"),c(DZ,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(GZ,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jT,"id","transformers.AutoModelForImageClassification"),c(jT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jT,"href","#transformers.AutoModelForImageClassification"),c(sc,"class","relative group"),c(OZ,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VZ,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XZ,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zZ,"href","/docs/transformers/v4.23.0/en/model_doc/beit#transformers.BeitForImageClassification"),c(QZ,"href","/docs/transformers/v4.23.0/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(WZ,"href","/docs/transformers/v4.23.0/en/model_doc/cvt#transformers.CvtForImageClassification"),c(UZ,"href","/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(HZ,"href","/docs/transformers/v4.23.0/en/model_doc/deit#transformers.DeiTForImageClassification"),c(JZ,"href","/docs/transformers/v4.23.0/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(YZ,"href","/docs/transformers/v4.23.0/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(ZZ,"href","/docs/transformers/v4.23.0/en/model_doc/levit#transformers.LevitForImageClassification"),c(KZ,"href","/docs/transformers/v4.23.0/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(eK,"href","/docs/transformers/v4.23.0/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(oK,"href","/docs/transformers/v4.23.0/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(rK,"href","/docs/transformers/v4.23.0/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(tK,"href","/docs/transformers/v4.23.0/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(aK,"href","/docs/transformers/v4.23.0/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(nK,"href","/docs/transformers/v4.23.0/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(sK,"href","/docs/transformers/v4.23.0/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(lK,"href","/docs/transformers/v4.23.0/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(iK,"href","/docs/transformers/v4.23.0/en/model_doc/swin#transformers.SwinForImageClassification"),c(dK,"href","/docs/transformers/v4.23.0/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),c(cK,"href","/docs/transformers/v4.23.0/en/model_doc/van#transformers.VanForImageClassification"),c(fK,"href","/docs/transformers/v4.23.0/en/model_doc/vit#transformers.ViTForImageClassification"),c(mK,"href","/docs/transformers/v4.23.0/en/model_doc/vit_msn#transformers.ViTMSNForImageClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aM,"id","transformers.AutoModelForVideoClassification"),c(aM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aM,"href","#transformers.AutoModelForVideoClassification"),c(dc,"class","relative group"),c(gK,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hK,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uK,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pK,"href","/docs/transformers/v4.23.0/en/model_doc/videomae#transformers.VideoMAEForVideoClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dM,"id","transformers.AutoModelForVision2Seq"),c(dM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dM,"href","#transformers.AutoModelForVision2Seq"),c(mc,"class","relative group"),c(_K,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vK,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bK,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FK,"href","/docs/transformers/v4.23.0/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hM,"id","transformers.AutoModelForVisualQuestionAnswering"),c(hM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hM,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(uc,"class","relative group"),c(TK,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MK,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EK,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CK,"href","/docs/transformers/v4.23.0/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bM,"id","transformers.AutoModelForAudioClassification"),c(bM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bM,"href","#transformers.AutoModelForAudioClassification"),c(vc,"class","relative group"),c(wK,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AK,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LK,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yK,"href","/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(xK,"href","/docs/transformers/v4.23.0/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c($K,"href","/docs/transformers/v4.23.0/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(kK,"href","/docs/transformers/v4.23.0/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(SK,"href","/docs/transformers/v4.23.0/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(RK,"href","/docs/transformers/v4.23.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(PK,"href","/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(BK,"href","/docs/transformers/v4.23.0/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(IK,"href","/docs/transformers/v4.23.0/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SM,"id","transformers.AutoModelForAudioFrameClassification"),c(SM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SM,"href","#transformers.AutoModelForAudioFrameClassification"),c(Tc,"class","relative group"),c(NK,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qK,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jK,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DK,"href","/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(GK,"href","/docs/transformers/v4.23.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(OK,"href","/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(VK,"href","/docs/transformers/v4.23.0/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(XK,"href","/docs/transformers/v4.23.0/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GM,"id","transformers.AutoModelForCTC"),c(GM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GM,"href","#transformers.AutoModelForCTC"),c(Cc,"class","relative group"),c(zK,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QK,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WK,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UK,"href","/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(HK,"href","/docs/transformers/v4.23.0/en/model_doc/hubert#transformers.HubertForCTC"),c(JK,"href","/docs/transformers/v4.23.0/en/model_doc/mctct#transformers.MCTCTForCTC"),c(YK,"href","/docs/transformers/v4.23.0/en/model_doc/sew#transformers.SEWForCTC"),c(ZK,"href","/docs/transformers/v4.23.0/en/model_doc/sew-d#transformers.SEWDForCTC"),c(KK,"href","/docs/transformers/v4.23.0/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(eee,"href","/docs/transformers/v4.23.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(oee,"href","/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(ree,"href","/docs/transformers/v4.23.0/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(tee,"href","/docs/transformers/v4.23.0/en/model_doc/wavlm#transformers.WavLMForCTC"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oE,"id","transformers.AutoModelForSpeechSeq2Seq"),c(oE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oE,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Lc,"class","relative group"),c(aee,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nee,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(see,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lee,"href","/docs/transformers/v4.23.0/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(iee,"href","/docs/transformers/v4.23.0/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(dee,"href","/docs/transformers/v4.23.0/en/model_doc/whisper#transformers.WhisperForConditionalGeneration"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iE,"id","transformers.AutoModelForAudioXVector"),c(iE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iE,"href","#transformers.AutoModelForAudioXVector"),c(kc,"class","relative group"),c(cee,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fee,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mee,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gee,"href","/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(hee,"href","/docs/transformers/v4.23.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(uee,"href","/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(pee,"href","/docs/transformers/v4.23.0/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(_ee,"href","/docs/transformers/v4.23.0/en/model_doc/wavlm#transformers.WavLMForXVector"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_E,"id","transformers.AutoModelForMaskedImageModeling"),c(_E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_E,"href","#transformers.AutoModelForMaskedImageModeling"),c(Pc,"class","relative group"),c(vee,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bee,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fee,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tee,"href","/docs/transformers/v4.23.0/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(Mee,"href","/docs/transformers/v4.23.0/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Eee,"href","/docs/transformers/v4.23.0/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),c(Cee,"href","/docs/transformers/v4.23.0/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wE,"id","transformers.AutoModelForObjectDetection"),c(wE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wE,"href","#transformers.AutoModelForObjectDetection"),c(Nc,"class","relative group"),c(wee,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Aee,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lee,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yee,"href","/docs/transformers/v4.23.0/en/model_doc/conditional_detr#transformers.ConditionalDetrForObjectDetection"),c(xee,"href","/docs/transformers/v4.23.0/en/model_doc/deformable_detr#transformers.DeformableDetrForObjectDetection"),c($ee,"href","/docs/transformers/v4.23.0/en/model_doc/detr#transformers.DetrForObjectDetection"),c(kee,"href","/docs/transformers/v4.23.0/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RE,"id","transformers.AutoModelForImageSegmentation"),c(RE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RE,"href","#transformers.AutoModelForImageSegmentation"),c(Dc,"class","relative group"),c(See,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ree,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pee,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bee,"href","/docs/transformers/v4.23.0/en/model_doc/detr#transformers.DetrForSegmentation"),c(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qE,"id","transformers.AutoModelForSemanticSegmentation"),c(qE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qE,"href","#transformers.AutoModelForSemanticSegmentation"),c(Vc,"class","relative group"),c(Iee,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nee,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qee,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jee,"href","/docs/transformers/v4.23.0/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(Dee,"href","/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(Gee,"href","/docs/transformers/v4.23.0/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(Oee,"href","/docs/transformers/v4.23.0/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(Vee,"href","/docs/transformers/v4.23.0/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WE,"id","transformers.AutoModelForInstanceSegmentation"),c(WE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WE,"href","#transformers.AutoModelForInstanceSegmentation"),c(Qc,"class","relative group"),c(Xee,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zee,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qee,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wee,"href","/docs/transformers/v4.23.0/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZE,"id","transformers.AutoModelForZeroShotObjectDetection"),c(ZE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZE,"href","#transformers.AutoModelForZeroShotObjectDetection"),c(Hc,"class","relative group"),c(Uee,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hee,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jee,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yee,"href","/docs/transformers/v4.23.0/en/model_doc/owlvit#transformers.OwlViTForObjectDetection"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tC,"id","transformers.TFAutoModel"),c(tC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tC,"href","#transformers.TFAutoModel"),c(Zc,"class","relative group"),c(Zee,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kee,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eoe,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ooe,"href","/docs/transformers/v4.23.0/en/model_doc/albert#transformers.TFAlbertModel"),c(roe,"href","/docs/transformers/v4.23.0/en/model_doc/bart#transformers.TFBartModel"),c(toe,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.TFBertModel"),c(aoe,"href","/docs/transformers/v4.23.0/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(noe,"href","/docs/transformers/v4.23.0/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(soe,"href","/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.TFCamembertModel"),c(loe,"href","/docs/transformers/v4.23.0/en/model_doc/clip#transformers.TFCLIPModel"),c(ioe,"href","/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.TFConvBertModel"),c(doe,"href","/docs/transformers/v4.23.0/en/model_doc/convnext#transformers.TFConvNextModel"),c(coe,"href","/docs/transformers/v4.23.0/en/model_doc/ctrl#transformers.TFCTRLModel"),c(foe,"href","/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(moe,"href","/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.TFDebertaModel"),c(goe,"href","/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(hoe,"href","/docs/transformers/v4.23.0/en/model_doc/deit#transformers.TFDeiTModel"),c(uoe,"href","/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(poe,"href","/docs/transformers/v4.23.0/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(_oe,"href","/docs/transformers/v4.23.0/en/model_doc/electra#transformers.TFElectraModel"),c(voe,"href","/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(boe,"href","/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.TFFunnelModel"),c(Foe,"href","/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(Toe,"href","/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.TFGPT2Model"),c(Moe,"href","/docs/transformers/v4.23.0/en/model_doc/gptj#transformers.TFGPTJModel"),c(Eoe,"href","/docs/transformers/v4.23.0/en/model_doc/groupvit#transformers.TFGroupViTModel"),c(Coe,"href","/docs/transformers/v4.23.0/en/model_doc/hubert#transformers.TFHubertModel"),c(woe,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Aoe,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model"),c(Loe,"href","/docs/transformers/v4.23.0/en/model_doc/led#transformers.TFLEDModel"),c(yoe,"href","/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.TFLongformerModel"),c(xoe,"href","/docs/transformers/v4.23.0/en/model_doc/lxmert#transformers.TFLxmertModel"),c($oe,"href","/docs/transformers/v4.23.0/en/model_doc/marian#transformers.TFMarianModel"),c(koe,"href","/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.TFMBartModel"),c(Soe,"href","/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(Roe,"href","/docs/transformers/v4.23.0/en/model_doc/mobilevit#transformers.TFMobileViTModel"),c(Poe,"href","/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.TFMPNetModel"),c(Boe,"href","/docs/transformers/v4.23.0/en/model_doc/mt5#transformers.TFMT5Model"),c(Ioe,"href","/docs/transformers/v4.23.0/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Noe,"href","/docs/transformers/v4.23.0/en/model_doc/opt#transformers.TFOPTModel"),c(qoe,"href","/docs/transformers/v4.23.0/en/model_doc/pegasus#transformers.TFPegasusModel"),c(joe,"href","/docs/transformers/v4.23.0/en/model_doc/regnet#transformers.TFRegNetModel"),c(Doe,"href","/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.TFRemBertModel"),c(Goe,"href","/docs/transformers/v4.23.0/en/model_doc/resnet#transformers.TFResNetModel"),c(Ooe,"href","/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.TFRobertaModel"),c(Voe,"href","/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Xoe,"href","/docs/transformers/v4.23.0/en/model_doc/segformer#transformers.TFSegformerModel"),c(zoe,"href","/docs/transformers/v4.23.0/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Qoe,"href","/docs/transformers/v4.23.0/en/model_doc/swin#transformers.TFSwinModel"),c(Woe,"href","/docs/transformers/v4.23.0/en/model_doc/t5#transformers.TFT5Model"),c(Uoe,"href","/docs/transformers/v4.23.0/en/model_doc/tapas#transformers.TFTapasModel"),c(Hoe,"href","/docs/transformers/v4.23.0/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(Joe,"href","/docs/transformers/v4.23.0/en/model_doc/vit#transformers.TFViTModel"),c(Yoe,"href","/docs/transformers/v4.23.0/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(Zoe,"href","/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(Koe,"href","/docs/transformers/v4.23.0/en/model_doc/whisper#transformers.TFWhisperModel"),c(ere,"href","/docs/transformers/v4.23.0/en/model_doc/xglm#transformers.TFXGLMModel"),c(ore,"href","/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.TFXLMModel"),c(rre,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(tre,"href","/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.TFXLNetModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l5,"id","transformers.TFAutoModelForPreTraining"),c(l5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l5,"href","#transformers.TFAutoModelForPreTraining"),c(of,"class","relative group"),c(are,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nre,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sre,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lre,"href","/docs/transformers/v4.23.0/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(ire,"href","/docs/transformers/v4.23.0/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(dre,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.TFBertForPreTraining"),c(cre,"href","/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(fre,"href","/docs/transformers/v4.23.0/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(mre,"href","/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(gre,"href","/docs/transformers/v4.23.0/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(hre,"href","/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(ure,"href","/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(pre,"href","/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(_re,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(vre,"href","/docs/transformers/v4.23.0/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(bre,"href","/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(Fre,"href","/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(Tre,"href","/docs/transformers/v4.23.0/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Mre,"href","/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(Ere,"href","/docs/transformers/v4.23.0/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Cre,"href","/docs/transformers/v4.23.0/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(wre,"href","/docs/transformers/v4.23.0/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(Are,"href","/docs/transformers/v4.23.0/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(Lre,"href","/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(yre,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xre,"href","/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R5,"id","transformers.TFAutoModelForCausalLM"),c(R5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R5,"href","#transformers.TFAutoModelForCausalLM"),c(af,"class","relative group"),c($re,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kre,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sre,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rre,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(Pre,"href","/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(Bre,"href","/docs/transformers/v4.23.0/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Ire,"href","/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Nre,"href","/docs/transformers/v4.23.0/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(qre,"href","/docs/transformers/v4.23.0/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(jre,"href","/docs/transformers/v4.23.0/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(Dre,"href","/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(Gre,"href","/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(Ore,"href","/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(Vre,"href","/docs/transformers/v4.23.0/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(Xre,"href","/docs/transformers/v4.23.0/en/model_doc/xglm#transformers.TFXGLMForCausalLM"),c(zre,"href","/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Qre,"href","/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J5,"id","transformers.TFAutoModelForImageClassification"),c(J5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J5,"href","#transformers.TFAutoModelForImageClassification"),c(lf,"class","relative group"),c(Wre,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ure,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hre,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jre,"href","/docs/transformers/v4.23.0/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(Yre,"href","/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(Zre,"href","/docs/transformers/v4.23.0/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(Kre,"href","/docs/transformers/v4.23.0/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(ete,"href","/docs/transformers/v4.23.0/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification"),c(ote,"href","/docs/transformers/v4.23.0/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(rte,"href","/docs/transformers/v4.23.0/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(tte,"href","/docs/transformers/v4.23.0/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),c(ate,"href","/docs/transformers/v4.23.0/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(nte,"href","/docs/transformers/v4.23.0/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lw,"id","transformers.TFAutoModelForSemanticSegmentation"),c(lw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lw,"href","#transformers.TFAutoModelForSemanticSegmentation"),c(ff,"class","relative group"),c(ste,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lte,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ite,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dte,"href","/docs/transformers/v4.23.0/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation"),c(cte,"href","/docs/transformers/v4.23.0/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation"),c(fte,"href","/docs/transformers/v4.23.0/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gw,"id","transformers.TFAutoModelForMaskedLM"),c(gw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gw,"href","#transformers.TFAutoModelForMaskedLM"),c(uf,"class","relative group"),c(mte,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gte,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hte,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ute,"href","/docs/transformers/v4.23.0/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(pte,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(_te,"href","/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(vte,"href","/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(bte,"href","/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(Fte,"href","/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(Tte,"href","/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Mte,"href","/docs/transformers/v4.23.0/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(Ete,"href","/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Cte,"href","/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(wte,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Ate,"href","/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(Lte,"href","/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(yte,"href","/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(xte,"href","/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c($te,"href","/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(kte,"href","/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(Ste,"href","/docs/transformers/v4.23.0/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(Rte,"href","/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Pte,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iw,"id","transformers.TFAutoModelForSeq2SeqLM"),c(Iw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iw,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(vf,"class","relative group"),c(Bte,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ite,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nte,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qte,"href","/docs/transformers/v4.23.0/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(jte,"href","/docs/transformers/v4.23.0/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(Dte,"href","/docs/transformers/v4.23.0/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(Gte,"href","/docs/transformers/v4.23.0/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(Ote,"href","/docs/transformers/v4.23.0/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(Vte,"href","/docs/transformers/v4.23.0/en/model_doc/marian#transformers.TFMarianMTModel"),c(Xte,"href","/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(zte,"href","/docs/transformers/v4.23.0/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(Qte,"href","/docs/transformers/v4.23.0/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(Wte,"href","/docs/transformers/v4.23.0/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hw,"id","transformers.TFAutoModelForSequenceClassification"),c(Hw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hw,"href","#transformers.TFAutoModelForSequenceClassification"),c(Tf,"class","relative group"),c(Ute,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hte,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jte,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yte,"href","/docs/transformers/v4.23.0/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(Zte,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(Kte,"href","/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(eae,"href","/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(oae,"href","/docs/transformers/v4.23.0/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(rae,"href","/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(tae,"href","/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(aae,"href","/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(nae,"href","/docs/transformers/v4.23.0/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(sae,"href","/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(lae,"href","/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(iae,"href","/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(dae,"href","/docs/transformers/v4.23.0/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(cae,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(fae,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification"),c(mae,"href","/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(gae,"href","/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(hae,"href","/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(uae,"href","/docs/transformers/v4.23.0/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(pae,"href","/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(_ae,"href","/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(vae,"href","/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(bae,"href","/docs/transformers/v4.23.0/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(Fae,"href","/docs/transformers/v4.23.0/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(Tae,"href","/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(Mae,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(Eae,"href","/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wA,"id","transformers.TFAutoModelForMultipleChoice"),c(wA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wA,"href","#transformers.TFAutoModelForMultipleChoice"),c(Cf,"class","relative group"),c(Cae,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wae,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Aae,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lae,"href","/docs/transformers/v4.23.0/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(yae,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(xae,"href","/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c($ae,"href","/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(kae,"href","/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(Sae,"href","/docs/transformers/v4.23.0/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(Rae,"href","/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(Pae,"href","/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(Bae,"href","/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(Iae,"href","/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(Nae,"href","/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(qae,"href","/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(jae,"href","/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(Dae,"href","/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(Gae,"href","/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(Oae,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(Vae,"href","/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zA,"id","transformers.TFAutoModelForNextSentencePrediction"),c(zA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zA,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Lf,"class","relative group"),c(Xae,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zae,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qae,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wae,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(Uae,"href","/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JA,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(JA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JA,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c($f,"class","relative group"),c(Hae,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jae,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yae,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zae,"href","/docs/transformers/v4.23.0/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e6,"id","transformers.TFAutoModelForDocumentQuestionAnswering"),c(e6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e6,"href","#transformers.TFAutoModelForDocumentQuestionAnswering"),c(Rf,"class","relative group"),c(Kae,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ene,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(one,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rne,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.TFLayoutLMForQuestionAnswering"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a6,"id","transformers.TFAutoModelForTokenClassification"),c(a6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a6,"href","#transformers.TFAutoModelForTokenClassification"),c(If,"class","relative group"),c(tne,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ane,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nne,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sne,"href","/docs/transformers/v4.23.0/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(lne,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(ine,"href","/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(dne,"href","/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(cne,"href","/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(fne,"href","/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(mne,"href","/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(gne,"href","/docs/transformers/v4.23.0/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(hne,"href","/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(une,"href","/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(pne,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(_ne,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification"),c(vne,"href","/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(bne,"href","/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(Fne,"href","/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(Tne,"href","/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(Mne,"href","/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(Ene,"href","/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(Cne,"href","/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(wne,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(Ane,"href","/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y6,"id","transformers.TFAutoModelForQuestionAnswering"),c(y6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y6,"href","#transformers.TFAutoModelForQuestionAnswering"),c(jf,"class","relative group"),c(Lne,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yne,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xne,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($ne,"href","/docs/transformers/v4.23.0/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(kne,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(Sne,"href","/docs/transformers/v4.23.0/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(Rne,"href","/docs/transformers/v4.23.0/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(Pne,"href","/docs/transformers/v4.23.0/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(Bne,"href","/docs/transformers/v4.23.0/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(Ine,"href","/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(Nne,"href","/docs/transformers/v4.23.0/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(qne,"href","/docs/transformers/v4.23.0/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(jne,"href","/docs/transformers/v4.23.0/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(Dne,"href","/docs/transformers/v4.23.0/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(Gne,"href","/docs/transformers/v4.23.0/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering"),c(One,"href","/docs/transformers/v4.23.0/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(Vne,"href","/docs/transformers/v4.23.0/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(Xne,"href","/docs/transformers/v4.23.0/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(zne,"href","/docs/transformers/v4.23.0/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(Qne,"href","/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(Wne,"href","/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(Une,"href","/docs/transformers/v4.23.0/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(Hne,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(Jne,"href","/docs/transformers/v4.23.0/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z6,"id","transformers.TFAutoModelForVision2Seq"),c(Z6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z6,"href","#transformers.TFAutoModelForVision2Seq"),c(Of,"class","relative group"),c(Yne,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zne,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kne,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ese,"href","/docs/transformers/v4.23.0/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r7,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(r7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r7,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(zf,"class","relative group"),c(ose,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rse,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tse,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ase,"href","/docs/transformers/v4.23.0/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(nse,"href","/docs/transformers/v4.23.0/en/model_doc/whisper#transformers.TFWhisperForConditionalGeneration"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l7,"id","transformers.FlaxAutoModel"),c(l7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l7,"href","#transformers.FlaxAutoModel"),c(Uf,"class","relative group"),c(sse,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lse,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ise,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dse,"href","/docs/transformers/v4.23.0/en/model_doc/albert#transformers.FlaxAlbertModel"),c(cse,"href","/docs/transformers/v4.23.0/en/model_doc/bart#transformers.FlaxBartModel"),c(fse,"href","/docs/transformers/v4.23.0/en/model_doc/beit#transformers.FlaxBeitModel"),c(mse,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.FlaxBertModel"),c(gse,"href","/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(hse,"href","/docs/transformers/v4.23.0/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(use,"href","/docs/transformers/v4.23.0/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(pse,"href","/docs/transformers/v4.23.0/en/model_doc/clip#transformers.FlaxCLIPModel"),c(_se,"href","/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(vse,"href","/docs/transformers/v4.23.0/en/model_doc/electra#transformers.FlaxElectraModel"),c(bse,"href","/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(Fse,"href","/docs/transformers/v4.23.0/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(Tse,"href","/docs/transformers/v4.23.0/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(Mse,"href","/docs/transformers/v4.23.0/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(Ese,"href","/docs/transformers/v4.23.0/en/model_doc/marian#transformers.FlaxMarianModel"),c(Cse,"href","/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.FlaxMBartModel"),c(wse,"href","/docs/transformers/v4.23.0/en/model_doc/mt5#transformers.FlaxMT5Model"),c(Ase,"href","/docs/transformers/v4.23.0/en/model_doc/opt#transformers.FlaxOPTModel"),c(Lse,"href","/docs/transformers/v4.23.0/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(yse,"href","/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(xse,"href","/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c($se,"href","/docs/transformers/v4.23.0/en/model_doc/t5#transformers.FlaxT5Model"),c(kse,"href","/docs/transformers/v4.23.0/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(Sse,"href","/docs/transformers/v4.23.0/en/model_doc/vit#transformers.FlaxViTModel"),c(Rse,"href","/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(Pse,"href","/docs/transformers/v4.23.0/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(Bse,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N7,"id","transformers.FlaxAutoModelForCausalLM"),c(N7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N7,"href","#transformers.FlaxAutoModelForCausalLM"),c(Yf,"class","relative group"),c(Ise,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nse,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qse,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jse,"href","/docs/transformers/v4.23.0/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Dse,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(Gse,"href","/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(Ose,"href","/docs/transformers/v4.23.0/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Vse,"href","/docs/transformers/v4.23.0/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(Xse,"href","/docs/transformers/v4.23.0/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(zse,"href","/docs/transformers/v4.23.0/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Qse,"href","/docs/transformers/v4.23.0/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Wse,"href","/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(Use,"href","/docs/transformers/v4.23.0/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J7,"id","transformers.FlaxAutoModelForPreTraining"),c(J7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J7,"href","#transformers.FlaxAutoModelForPreTraining"),c(em,"class","relative group"),c(Hse,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jse,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yse,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zse,"href","/docs/transformers/v4.23.0/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Kse,"href","/docs/transformers/v4.23.0/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(ele,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(ole,"href","/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(rle,"href","/docs/transformers/v4.23.0/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(tle,"href","/docs/transformers/v4.23.0/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(ale,"href","/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(nle,"href","/docs/transformers/v4.23.0/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(sle,"href","/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(lle,"href","/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(ile,"href","/docs/transformers/v4.23.0/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(dle,"href","/docs/transformers/v4.23.0/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(cle,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mL,"id","transformers.FlaxAutoModelForMaskedLM"),c(mL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mL,"href","#transformers.FlaxAutoModelForMaskedLM"),c(tm,"class","relative group"),c(fle,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mle,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gle,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hle,"href","/docs/transformers/v4.23.0/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(ule,"href","/docs/transformers/v4.23.0/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(ple,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(_le,"href","/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(vle,"href","/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(ble,"href","/docs/transformers/v4.23.0/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(Fle,"href","/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Tle,"href","/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Mle,"href","/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Ele,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wL,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(wL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wL,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(sm,"class","relative group"),c(Cle,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wle,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ale,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lle,"href","/docs/transformers/v4.23.0/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(yle,"href","/docs/transformers/v4.23.0/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(xle,"href","/docs/transformers/v4.23.0/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c($le,"href","/docs/transformers/v4.23.0/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(kle,"href","/docs/transformers/v4.23.0/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Sle,"href","/docs/transformers/v4.23.0/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Rle,"href","/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Ple,"href","/docs/transformers/v4.23.0/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Ble,"href","/docs/transformers/v4.23.0/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Ile,"href","/docs/transformers/v4.23.0/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qL,"id","transformers.FlaxAutoModelForSequenceClassification"),c(qL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qL,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(dm,"class","relative group"),c(Nle,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qle,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jle,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ha,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dle,"href","/docs/transformers/v4.23.0/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Gle,"href","/docs/transformers/v4.23.0/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Ole,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Vle,"href","/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Xle,"href","/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(zle,"href","/docs/transformers/v4.23.0/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Qle,"href","/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Wle,"href","/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Ule,"href","/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Hle,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YL,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(YL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YL,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(mm,"class","relative group"),c(Jle,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yle,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zle,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kle,"href","/docs/transformers/v4.23.0/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(eie,"href","/docs/transformers/v4.23.0/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(oie,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(rie,"href","/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(tie,"href","/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(aie,"href","/docs/transformers/v4.23.0/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(nie,"href","/docs/transformers/v4.23.0/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(sie,"href","/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(lie,"href","/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(iie,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c8,"id","transformers.FlaxAutoModelForTokenClassification"),c(c8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c8,"href","#transformers.FlaxAutoModelForTokenClassification"),c(um,"class","relative group"),c(die,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cie,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fie,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mie,"href","/docs/transformers/v4.23.0/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(gie,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(hie,"href","/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(uie,"href","/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(pie,"href","/docs/transformers/v4.23.0/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(_ie,"href","/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(vie,"href","/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(bie,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T8,"id","transformers.FlaxAutoModelForMultipleChoice"),c(T8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T8,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(vm,"class","relative group"),c(Fie,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tie,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mie,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eie,"href","/docs/transformers/v4.23.0/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Cie,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(wie,"href","/docs/transformers/v4.23.0/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Aie,"href","/docs/transformers/v4.23.0/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Lie,"href","/docs/transformers/v4.23.0/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(yie,"href","/docs/transformers/v4.23.0/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(xie,"href","/docs/transformers/v4.23.0/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c($ie,"href","/docs/transformers/v4.23.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S8,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(S8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S8,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Tm,"class","relative group"),c(kie,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sie,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rie,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(va,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pie,"href","/docs/transformers/v4.23.0/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I8,"id","transformers.FlaxAutoModelForImageClassification"),c(I8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I8,"href","#transformers.FlaxAutoModelForImageClassification"),c(Cm,"class","relative group"),c(Bie,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iie,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nie,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ba,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qie,"href","/docs/transformers/v4.23.0/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(jie,"href","/docs/transformers/v4.23.0/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G8,"id","transformers.FlaxAutoModelForVision2Seq"),c(G8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G8,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Lm,"class","relative group"),c(Die,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gie,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Oie,"href","/docs/transformers/v4.23.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vie,"href","/docs/transformers/v4.23.0/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),v(f,b,_),v(f,u,_),e(u,m),e(m,p),M(d,p,null),e(u,h),e(u,xo),e(xo,dd),v(f,Rm,_),v(f,vt,_),e(vt,cd),e(vt,fd),e(fd,Cx),e(vt,Pm),v(f,Ve,_),v(f,He,_),e(He,md),e(He,ns),e(ns,wx),e(He,ss),e(He,ls),e(ls,Ax),e(He,gd),e(He,is),e(is,Lx),e(He,hd),v(f,Bm,_),M(Ja,f,_),v(f,Je,_),v(f,Ae,_),e(Ae,RI),e(Ae,ud),e(ud,PI),e(Ae,BI),v(f,$o,_),v(f,Ya,_),e(Ya,II),e(Ya,Im),e(Im,NI),e(Ya,Jno),v(f,poo,_),v(f,pd,_),e(pd,Nm),e(Nm,Jce),M(yx,Jce,null),e(pd,Yno),e(pd,Yce),e(Yce,Zno),v(f,_oo,_),v(f,ds,_),e(ds,Kno),e(ds,Zce),e(Zce,eso),e(ds,oso),e(ds,Kce),e(Kce,rso),e(ds,tso),v(f,voo,_),M(xx,f,_),v(f,boo,_),v(f,qI,_),e(qI,aso),v(f,Foo,_),M(qm,f,_),v(f,Too,_),v(f,_d,_),e(_d,jm),e(jm,efe),M($x,efe,null),e(_d,nso),e(_d,ofe),e(ofe,sso),v(f,Moo,_),v(f,ko,_),M(kx,ko,null),e(ko,lso),e(ko,Sx),e(Sx,iso),e(Sx,jI),e(jI,dso),e(Sx,cso),e(ko,fso),e(ko,Rx),e(Rx,mso),e(Rx,rfe),e(rfe,gso),e(Rx,hso),e(ko,uso),e(ko,Ir),M(Px,Ir,null),e(Ir,pso),e(Ir,tfe),e(tfe,_so),e(Ir,vso),e(Ir,vd),e(vd,bso),e(vd,afe),e(afe,Fso),e(vd,Tso),e(vd,nfe),e(nfe,Mso),e(vd,Eso),e(Ir,Cso),e(Ir,A),e(A,Dm),e(Dm,sfe),e(sfe,wso),e(Dm,Aso),e(Dm,DI),e(DI,Lso),e(Dm,yso),e(A,xso),e(A,Gm),e(Gm,lfe),e(lfe,$so),e(Gm,kso),e(Gm,GI),e(GI,Sso),e(Gm,Rso),e(A,Pso),e(A,Om),e(Om,ife),e(ife,Bso),e(Om,Iso),e(Om,OI),e(OI,Nso),e(Om,qso),e(A,jso),e(A,Vm),e(Vm,dfe),e(dfe,Dso),e(Vm,Gso),e(Vm,VI),e(VI,Oso),e(Vm,Vso),e(A,Xso),e(A,Xm),e(Xm,cfe),e(cfe,zso),e(Xm,Qso),e(Xm,XI),e(XI,Wso),e(Xm,Uso),e(A,Hso),e(A,zm),e(zm,ffe),e(ffe,Jso),e(zm,Yso),e(zm,zI),e(zI,Zso),e(zm,Kso),e(A,elo),e(A,Qm),e(Qm,mfe),e(mfe,olo),e(Qm,rlo),e(Qm,QI),e(QI,tlo),e(Qm,alo),e(A,nlo),e(A,Wm),e(Wm,gfe),e(gfe,slo),e(Wm,llo),e(Wm,WI),e(WI,ilo),e(Wm,dlo),e(A,clo),e(A,Um),e(Um,hfe),e(hfe,flo),e(Um,mlo),e(Um,UI),e(UI,glo),e(Um,hlo),e(A,ulo),e(A,Hm),e(Hm,ufe),e(ufe,plo),e(Hm,_lo),e(Hm,HI),e(HI,vlo),e(Hm,blo),e(A,Flo),e(A,Jm),e(Jm,pfe),e(pfe,Tlo),e(Jm,Mlo),e(Jm,JI),e(JI,Elo),e(Jm,Clo),e(A,wlo),e(A,Ym),e(Ym,_fe),e(_fe,Alo),e(Ym,Llo),e(Ym,YI),e(YI,ylo),e(Ym,xlo),e(A,$lo),e(A,Zm),e(Zm,vfe),e(vfe,klo),e(Zm,Slo),e(Zm,ZI),e(ZI,Rlo),e(Zm,Plo),e(A,Blo),e(A,Km),e(Km,bfe),e(bfe,Ilo),e(Km,Nlo),e(Km,KI),e(KI,qlo),e(Km,jlo),e(A,Dlo),e(A,eg),e(eg,Ffe),e(Ffe,Glo),e(eg,Olo),e(eg,eN),e(eN,Vlo),e(eg,Xlo),e(A,zlo),e(A,og),e(og,Tfe),e(Tfe,Qlo),e(og,Wlo),e(og,oN),e(oN,Ulo),e(og,Hlo),e(A,Jlo),e(A,rg),e(rg,Mfe),e(Mfe,Ylo),e(rg,Zlo),e(rg,rN),e(rN,Klo),e(rg,eio),e(A,oio),e(A,tg),e(tg,Efe),e(Efe,rio),e(tg,tio),e(tg,tN),e(tN,aio),e(tg,nio),e(A,sio),e(A,ag),e(ag,Cfe),e(Cfe,lio),e(ag,iio),e(ag,aN),e(aN,dio),e(ag,cio),e(A,fio),e(A,ng),e(ng,wfe),e(wfe,mio),e(ng,gio),e(ng,nN),e(nN,hio),e(ng,uio),e(A,pio),e(A,sg),e(sg,Afe),e(Afe,_io),e(sg,vio),e(sg,sN),e(sN,bio),e(sg,Fio),e(A,Tio),e(A,lg),e(lg,Lfe),e(Lfe,Mio),e(lg,Eio),e(lg,lN),e(lN,Cio),e(lg,wio),e(A,Aio),e(A,ig),e(ig,yfe),e(yfe,Lio),e(ig,yio),e(ig,iN),e(iN,xio),e(ig,$io),e(A,kio),e(A,dg),e(dg,xfe),e(xfe,Sio),e(dg,Rio),e(dg,dN),e(dN,Pio),e(dg,Bio),e(A,Iio),e(A,cg),e(cg,$fe),e($fe,Nio),e(cg,qio),e(cg,cN),e(cN,jio),e(cg,Dio),e(A,Gio),e(A,fg),e(fg,kfe),e(kfe,Oio),e(fg,Vio),e(fg,fN),e(fN,Xio),e(fg,zio),e(A,Qio),e(A,mg),e(mg,Sfe),e(Sfe,Wio),e(mg,Uio),e(mg,mN),e(mN,Hio),e(mg,Jio),e(A,Yio),e(A,gg),e(gg,Rfe),e(Rfe,Zio),e(gg,Kio),e(gg,gN),e(gN,edo),e(gg,odo),e(A,rdo),e(A,hg),e(hg,Pfe),e(Pfe,tdo),e(hg,ado),e(hg,hN),e(hN,ndo),e(hg,sdo),e(A,ldo),e(A,ug),e(ug,Bfe),e(Bfe,ido),e(ug,ddo),e(ug,uN),e(uN,cdo),e(ug,fdo),e(A,mdo),e(A,pg),e(pg,Ife),e(Ife,gdo),e(pg,hdo),e(pg,pN),e(pN,udo),e(pg,pdo),e(A,_do),e(A,_g),e(_g,Nfe),e(Nfe,vdo),e(_g,bdo),e(_g,_N),e(_N,Fdo),e(_g,Tdo),e(A,Mdo),e(A,vg),e(vg,qfe),e(qfe,Edo),e(vg,Cdo),e(vg,vN),e(vN,wdo),e(vg,Ado),e(A,Ldo),e(A,bg),e(bg,jfe),e(jfe,ydo),e(bg,xdo),e(bg,bN),e(bN,$do),e(bg,kdo),e(A,Sdo),e(A,Fg),e(Fg,Dfe),e(Dfe,Rdo),e(Fg,Pdo),e(Fg,FN),e(FN,Bdo),e(Fg,Ido),e(A,Ndo),e(A,Tg),e(Tg,Gfe),e(Gfe,qdo),e(Tg,jdo),e(Tg,TN),e(TN,Ddo),e(Tg,Gdo),e(A,Odo),e(A,Mg),e(Mg,Ofe),e(Ofe,Vdo),e(Mg,Xdo),e(Mg,MN),e(MN,zdo),e(Mg,Qdo),e(A,Wdo),e(A,Eg),e(Eg,Vfe),e(Vfe,Udo),e(Eg,Hdo),e(Eg,EN),e(EN,Jdo),e(Eg,Ydo),e(A,Zdo),e(A,Cg),e(Cg,Xfe),e(Xfe,Kdo),e(Cg,eco),e(Cg,CN),e(CN,oco),e(Cg,rco),e(A,tco),e(A,wg),e(wg,zfe),e(zfe,aco),e(wg,nco),e(wg,wN),e(wN,sco),e(wg,lco),e(A,ico),e(A,Ag),e(Ag,Qfe),e(Qfe,dco),e(Ag,cco),e(Ag,AN),e(AN,fco),e(Ag,mco),e(A,gco),e(A,Lg),e(Lg,Wfe),e(Wfe,hco),e(Lg,uco),e(Lg,LN),e(LN,pco),e(Lg,_co),e(A,vco),e(A,yg),e(yg,Ufe),e(Ufe,bco),e(yg,Fco),e(yg,yN),e(yN,Tco),e(yg,Mco),e(A,Eco),e(A,xg),e(xg,Hfe),e(Hfe,Cco),e(xg,wco),e(xg,xN),e(xN,Aco),e(xg,Lco),e(A,yco),e(A,$g),e($g,Jfe),e(Jfe,xco),e($g,$co),e($g,$N),e($N,kco),e($g,Sco),e(A,Rco),e(A,kg),e(kg,Yfe),e(Yfe,Pco),e(kg,Bco),e(kg,kN),e(kN,Ico),e(kg,Nco),e(A,qco),e(A,Sg),e(Sg,Zfe),e(Zfe,jco),e(Sg,Dco),e(Sg,SN),e(SN,Gco),e(Sg,Oco),e(A,Vco),e(A,Rg),e(Rg,Kfe),e(Kfe,Xco),e(Rg,zco),e(Rg,RN),e(RN,Qco),e(Rg,Wco),e(A,Uco),e(A,Pg),e(Pg,eme),e(eme,Hco),e(Pg,Jco),e(Pg,PN),e(PN,Yco),e(Pg,Zco),e(A,Kco),e(A,Bg),e(Bg,ome),e(ome,efo),e(Bg,ofo),e(Bg,BN),e(BN,rfo),e(Bg,tfo),e(A,afo),e(A,Ig),e(Ig,rme),e(rme,nfo),e(Ig,sfo),e(Ig,IN),e(IN,lfo),e(Ig,ifo),e(A,dfo),e(A,Ng),e(Ng,tme),e(tme,cfo),e(Ng,ffo),e(Ng,NN),e(NN,mfo),e(Ng,gfo),e(A,hfo),e(A,qg),e(qg,ame),e(ame,ufo),e(qg,pfo),e(qg,qN),e(qN,_fo),e(qg,vfo),e(A,bfo),e(A,jg),e(jg,nme),e(nme,Ffo),e(jg,Tfo),e(jg,jN),e(jN,Mfo),e(jg,Efo),e(A,Cfo),e(A,Dg),e(Dg,sme),e(sme,wfo),e(Dg,Afo),e(Dg,DN),e(DN,Lfo),e(Dg,yfo),e(A,xfo),e(A,Gg),e(Gg,lme),e(lme,$fo),e(Gg,kfo),e(Gg,GN),e(GN,Sfo),e(Gg,Rfo),e(A,Pfo),e(A,Og),e(Og,ime),e(ime,Bfo),e(Og,Ifo),e(Og,ON),e(ON,Nfo),e(Og,qfo),e(A,jfo),e(A,Vg),e(Vg,dme),e(dme,Dfo),e(Vg,Gfo),e(Vg,VN),e(VN,Ofo),e(Vg,Vfo),e(A,Xfo),e(A,Xg),e(Xg,cme),e(cme,zfo),e(Xg,Qfo),e(Xg,XN),e(XN,Wfo),e(Xg,Ufo),e(A,Hfo),e(A,zg),e(zg,fme),e(fme,Jfo),e(zg,Yfo),e(zg,zN),e(zN,Zfo),e(zg,Kfo),e(A,emo),e(A,Qg),e(Qg,mme),e(mme,omo),e(Qg,rmo),e(Qg,QN),e(QN,tmo),e(Qg,amo),e(A,nmo),e(A,Wg),e(Wg,gme),e(gme,smo),e(Wg,lmo),e(Wg,WN),e(WN,imo),e(Wg,dmo),e(A,cmo),e(A,Ug),e(Ug,hme),e(hme,fmo),e(Ug,mmo),e(Ug,UN),e(UN,gmo),e(Ug,hmo),e(A,umo),e(A,Hg),e(Hg,ume),e(ume,pmo),e(Hg,_mo),e(Hg,HN),e(HN,vmo),e(Hg,bmo),e(A,Fmo),e(A,Jg),e(Jg,pme),e(pme,Tmo),e(Jg,Mmo),e(Jg,JN),e(JN,Emo),e(Jg,Cmo),e(A,wmo),e(A,Yg),e(Yg,_me),e(_me,Amo),e(Yg,Lmo),e(Yg,YN),e(YN,ymo),e(Yg,xmo),e(A,$mo),e(A,Zg),e(Zg,vme),e(vme,kmo),e(Zg,Smo),e(Zg,ZN),e(ZN,Rmo),e(Zg,Pmo),e(A,Bmo),e(A,Kg),e(Kg,bme),e(bme,Imo),e(Kg,Nmo),e(Kg,KN),e(KN,qmo),e(Kg,jmo),e(A,Dmo),e(A,eh),e(eh,Fme),e(Fme,Gmo),e(eh,Omo),e(eh,eq),e(eq,Vmo),e(eh,Xmo),e(A,zmo),e(A,oh),e(oh,Tme),e(Tme,Qmo),e(oh,Wmo),e(oh,oq),e(oq,Umo),e(oh,Hmo),e(A,Jmo),e(A,rh),e(rh,Mme),e(Mme,Ymo),e(rh,Zmo),e(rh,rq),e(rq,Kmo),e(rh,ego),e(A,ogo),e(A,th),e(th,Eme),e(Eme,rgo),e(th,tgo),e(th,tq),e(tq,ago),e(th,ngo),e(A,sgo),e(A,ah),e(ah,Cme),e(Cme,lgo),e(ah,igo),e(ah,aq),e(aq,dgo),e(ah,cgo),e(A,fgo),e(A,nh),e(nh,wme),e(wme,mgo),e(nh,ggo),e(nh,nq),e(nq,hgo),e(nh,ugo),e(A,pgo),e(A,sh),e(sh,Ame),e(Ame,_go),e(sh,vgo),e(sh,sq),e(sq,bgo),e(sh,Fgo),e(A,Tgo),e(A,lh),e(lh,Lme),e(Lme,Mgo),e(lh,Ego),e(lh,lq),e(lq,Cgo),e(lh,wgo),e(A,Ago),e(A,ih),e(ih,yme),e(yme,Lgo),e(ih,ygo),e(ih,iq),e(iq,xgo),e(ih,$go),e(A,kgo),e(A,dh),e(dh,xme),e(xme,Sgo),e(dh,Rgo),e(dh,dq),e(dq,Pgo),e(dh,Bgo),e(A,Igo),e(A,ch),e(ch,$me),e($me,Ngo),e(ch,qgo),e(ch,cq),e(cq,jgo),e(ch,Dgo),e(A,Ggo),e(A,fh),e(fh,kme),e(kme,Ogo),e(fh,Vgo),e(fh,fq),e(fq,Xgo),e(fh,zgo),e(A,Qgo),e(A,mh),e(mh,Sme),e(Sme,Wgo),e(mh,Ugo),e(mh,mq),e(mq,Hgo),e(mh,Jgo),e(A,Ygo),e(A,gh),e(gh,Rme),e(Rme,Zgo),e(gh,Kgo),e(gh,gq),e(gq,eho),e(gh,oho),e(A,rho),e(A,hh),e(hh,Pme),e(Pme,tho),e(hh,aho),e(hh,hq),e(hq,nho),e(hh,sho),e(A,lho),e(A,uh),e(uh,Bme),e(Bme,iho),e(uh,dho),e(uh,uq),e(uq,cho),e(uh,fho),e(A,mho),e(A,ph),e(ph,Ime),e(Ime,gho),e(ph,hho),e(ph,pq),e(pq,uho),e(ph,pho),e(A,_ho),e(A,_h),e(_h,Nme),e(Nme,vho),e(_h,bho),e(_h,_q),e(_q,Fho),e(_h,Tho),e(A,Mho),e(A,vh),e(vh,qme),e(qme,Eho),e(vh,Cho),e(vh,vq),e(vq,who),e(vh,Aho),e(A,Lho),e(A,bh),e(bh,jme),e(jme,yho),e(bh,xho),e(bh,bq),e(bq,$ho),e(bh,kho),e(A,Sho),e(A,Fh),e(Fh,Dme),e(Dme,Rho),e(Fh,Pho),e(Fh,Fq),e(Fq,Bho),e(Fh,Iho),e(A,Nho),e(A,Th),e(Th,Gme),e(Gme,qho),e(Th,jho),e(Th,Tq),e(Tq,Dho),e(Th,Gho),e(A,Oho),e(A,Mh),e(Mh,Ome),e(Ome,Vho),e(Mh,Xho),e(Mh,Mq),e(Mq,zho),e(Mh,Qho),e(A,Who),e(A,Eh),e(Eh,Vme),e(Vme,Uho),e(Eh,Hho),e(Eh,Eq),e(Eq,Jho),e(Eh,Yho),e(A,Zho),e(A,Ch),e(Ch,Xme),e(Xme,Kho),e(Ch,euo),e(Ch,Cq),e(Cq,ouo),e(Ch,ruo),e(A,tuo),e(A,wh),e(wh,zme),e(zme,auo),e(wh,nuo),e(wh,wq),e(wq,suo),e(wh,luo),e(A,iuo),e(A,Ah),e(Ah,Qme),e(Qme,duo),e(Ah,cuo),e(Ah,Aq),e(Aq,fuo),e(Ah,muo),e(A,guo),e(A,Lh),e(Lh,Wme),e(Wme,huo),e(Lh,uuo),e(Lh,Lq),e(Lq,puo),e(Lh,_uo),e(A,vuo),e(A,yh),e(yh,Ume),e(Ume,buo),e(yh,Fuo),e(yh,yq),e(yq,Tuo),e(yh,Muo),e(A,Euo),e(A,xh),e(xh,Hme),e(Hme,Cuo),e(xh,wuo),e(xh,xq),e(xq,Auo),e(xh,Luo),e(A,yuo),e(A,$h),e($h,Jme),e(Jme,xuo),e($h,$uo),e($h,$q),e($q,kuo),e($h,Suo),e(A,Ruo),e(A,kh),e(kh,Yme),e(Yme,Puo),e(kh,Buo),e(kh,kq),e(kq,Iuo),e(kh,Nuo),e(A,quo),e(A,Sh),e(Sh,Zme),e(Zme,juo),e(Sh,Duo),e(Sh,Sq),e(Sq,Guo),e(Sh,Ouo),e(A,Vuo),e(A,Rh),e(Rh,Kme),e(Kme,Xuo),e(Rh,zuo),e(Rh,Rq),e(Rq,Quo),e(Rh,Wuo),e(A,Uuo),e(A,Ph),e(Ph,ege),e(ege,Huo),e(Ph,Juo),e(Ph,Pq),e(Pq,Yuo),e(Ph,Zuo),e(A,Kuo),e(A,Bh),e(Bh,oge),e(oge,epo),e(Bh,opo),e(Bh,Bq),e(Bq,rpo),e(Bh,tpo),e(A,apo),e(A,Ih),e(Ih,rge),e(rge,npo),e(Ih,spo),e(Ih,Iq),e(Iq,lpo),e(Ih,ipo),e(A,dpo),e(A,Nh),e(Nh,tge),e(tge,cpo),e(Nh,fpo),e(Nh,Nq),e(Nq,mpo),e(Nh,gpo),e(A,hpo),e(A,qh),e(qh,age),e(age,upo),e(qh,ppo),e(qh,qq),e(qq,_po),e(qh,vpo),e(A,bpo),e(A,jh),e(jh,nge),e(nge,Fpo),e(jh,Tpo),e(jh,jq),e(jq,Mpo),e(jh,Epo),e(A,Cpo),e(A,Dh),e(Dh,sge),e(sge,wpo),e(Dh,Apo),e(Dh,Dq),e(Dq,Lpo),e(Dh,ypo),e(A,xpo),e(A,Gh),e(Gh,lge),e(lge,$po),e(Gh,kpo),e(Gh,Gq),e(Gq,Spo),e(Gh,Rpo),e(A,Ppo),e(A,Oh),e(Oh,ige),e(ige,Bpo),e(Oh,Ipo),e(Oh,Oq),e(Oq,Npo),e(Oh,qpo),e(A,jpo),e(A,Vh),e(Vh,dge),e(dge,Dpo),e(Vh,Gpo),e(Vh,Vq),e(Vq,Opo),e(Vh,Vpo),e(A,Xpo),e(A,Xh),e(Xh,cge),e(cge,zpo),e(Xh,Qpo),e(Xh,Xq),e(Xq,Wpo),e(Xh,Upo),e(A,Hpo),e(A,zh),e(zh,fge),e(fge,Jpo),e(zh,Ypo),e(zh,zq),e(zq,Zpo),e(zh,Kpo),e(A,e_o),e(A,Qh),e(Qh,mge),e(mge,o_o),e(Qh,r_o),e(Qh,Qq),e(Qq,t_o),e(Qh,a_o),e(A,n_o),e(A,Wh),e(Wh,gge),e(gge,s_o),e(Wh,l_o),e(Wh,Wq),e(Wq,i_o),e(Wh,d_o),e(A,c_o),e(A,Uh),e(Uh,hge),e(hge,f_o),e(Uh,m_o),e(Uh,Uq),e(Uq,g_o),e(Uh,h_o),e(A,u_o),e(A,Hh),e(Hh,uge),e(uge,p_o),e(Hh,__o),e(Hh,Hq),e(Hq,v_o),e(Hh,b_o),e(A,F_o),e(A,Jh),e(Jh,pge),e(pge,T_o),e(Jh,M_o),e(Jh,Jq),e(Jq,E_o),e(Jh,C_o),e(A,w_o),e(A,Yh),e(Yh,_ge),e(_ge,A_o),e(Yh,L_o),e(Yh,Yq),e(Yq,y_o),e(Yh,x_o),e(A,$_o),e(A,Zh),e(Zh,vge),e(vge,k_o),e(Zh,S_o),e(Zh,Zq),e(Zq,R_o),e(Zh,P_o),e(A,B_o),e(A,Kh),e(Kh,bge),e(bge,I_o),e(Kh,N_o),e(Kh,Kq),e(Kq,q_o),e(Kh,j_o),e(A,D_o),e(A,eu),e(eu,Fge),e(Fge,G_o),e(eu,O_o),e(eu,ej),e(ej,V_o),e(eu,X_o),e(A,z_o),e(A,ou),e(ou,Tge),e(Tge,Q_o),e(ou,W_o),e(ou,oj),e(oj,U_o),e(ou,H_o),e(A,J_o),e(A,ru),e(ru,Mge),e(Mge,Y_o),e(ru,Z_o),e(ru,rj),e(rj,K_o),e(ru,e2o),e(A,o2o),e(A,tu),e(tu,Ege),e(Ege,r2o),e(tu,t2o),e(tu,tj),e(tj,a2o),e(tu,n2o),e(A,s2o),e(A,au),e(au,Cge),e(Cge,l2o),e(au,i2o),e(au,aj),e(aj,d2o),e(au,c2o),e(A,f2o),e(A,nu),e(nu,wge),e(wge,m2o),e(nu,g2o),e(nu,nj),e(nj,h2o),e(nu,u2o),e(A,p2o),e(A,su),e(su,Age),e(Age,_2o),e(su,v2o),e(su,sj),e(sj,b2o),e(su,F2o),e(A,T2o),e(A,lu),e(lu,Lge),e(Lge,M2o),e(lu,E2o),e(lu,lj),e(lj,C2o),e(lu,w2o),e(A,A2o),e(A,iu),e(iu,yge),e(yge,L2o),e(iu,y2o),e(iu,ij),e(ij,x2o),e(iu,$2o),e(A,k2o),e(A,du),e(du,xge),e(xge,S2o),e(du,R2o),e(du,dj),e(dj,P2o),e(du,B2o),e(A,I2o),e(A,cu),e(cu,$ge),e($ge,N2o),e(cu,q2o),e(cu,cj),e(cj,j2o),e(cu,D2o),e(Ir,G2o),M(fu,Ir,null),e(ko,O2o),e(ko,mu),M(Bx,mu,null),e(mu,V2o),e(mu,kge),e(kge,X2o),v(f,Eoo,_),v(f,bd,_),e(bd,gu),e(gu,Sge),M(Ix,Sge,null),e(bd,z2o),e(bd,Rge),e(Rge,Q2o),v(f,Coo,_),v(f,So,_),M(Nx,So,null),e(So,W2o),e(So,qx),e(qx,U2o),e(qx,fj),e(fj,H2o),e(qx,J2o),e(So,Y2o),e(So,jx),e(jx,Z2o),e(jx,Pge),e(Pge,K2o),e(jx,evo),e(So,ovo),e(So,Nr),M(Dx,Nr,null),e(Nr,rvo),e(Nr,Bge),e(Bge,tvo),e(Nr,avo),e(Nr,Za),e(Za,nvo),e(Za,Ige),e(Ige,svo),e(Za,lvo),e(Za,Nge),e(Nge,ivo),e(Za,dvo),e(Za,qge),e(qge,cvo),e(Za,fvo),e(Nr,mvo),e(Nr,k),e(k,cs),e(cs,jge),e(jge,gvo),e(cs,hvo),e(cs,mj),e(mj,uvo),e(cs,pvo),e(cs,gj),e(gj,_vo),e(cs,vvo),e(k,bvo),e(k,fs),e(fs,Dge),e(Dge,Fvo),e(fs,Tvo),e(fs,hj),e(hj,Mvo),e(fs,Evo),e(fs,uj),e(uj,Cvo),e(fs,wvo),e(k,Avo),e(k,ms),e(ms,Gge),e(Gge,Lvo),e(ms,yvo),e(ms,pj),e(pj,xvo),e(ms,$vo),e(ms,_j),e(_j,kvo),e(ms,Svo),e(k,Rvo),e(k,hu),e(hu,Oge),e(Oge,Pvo),e(hu,Bvo),e(hu,vj),e(vj,Ivo),e(hu,Nvo),e(k,qvo),e(k,gs),e(gs,Vge),e(Vge,jvo),e(gs,Dvo),e(gs,bj),e(bj,Gvo),e(gs,Ovo),e(gs,Fj),e(Fj,Vvo),e(gs,Xvo),e(k,zvo),e(k,uu),e(uu,Xge),e(Xge,Qvo),e(uu,Wvo),e(uu,Tj),e(Tj,Uvo),e(uu,Hvo),e(k,Jvo),e(k,pu),e(pu,zge),e(zge,Yvo),e(pu,Zvo),e(pu,Mj),e(Mj,Kvo),e(pu,e4o),e(k,o4o),e(k,_u),e(_u,Qge),e(Qge,r4o),e(_u,t4o),e(_u,Ej),e(Ej,a4o),e(_u,n4o),e(k,s4o),e(k,hs),e(hs,Wge),e(Wge,l4o),e(hs,i4o),e(hs,Cj),e(Cj,d4o),e(hs,c4o),e(hs,wj),e(wj,f4o),e(hs,m4o),e(k,g4o),e(k,us),e(us,Uge),e(Uge,h4o),e(us,u4o),e(us,Aj),e(Aj,p4o),e(us,_4o),e(us,Lj),e(Lj,v4o),e(us,b4o),e(k,F4o),e(k,ps),e(ps,Hge),e(Hge,T4o),e(ps,M4o),e(ps,yj),e(yj,E4o),e(ps,C4o),e(ps,xj),e(xj,w4o),e(ps,A4o),e(k,L4o),e(k,vu),e(vu,Jge),e(Jge,y4o),e(vu,x4o),e(vu,$j),e($j,$4o),e(vu,k4o),e(k,S4o),e(k,bu),e(bu,Yge),e(Yge,R4o),e(bu,P4o),e(bu,kj),e(kj,B4o),e(bu,I4o),e(k,N4o),e(k,Fu),e(Fu,Zge),e(Zge,q4o),e(Fu,j4o),e(Fu,Sj),e(Sj,D4o),e(Fu,G4o),e(k,O4o),e(k,_s),e(_s,Kge),e(Kge,V4o),e(_s,X4o),e(_s,Rj),e(Rj,z4o),e(_s,Q4o),e(_s,Pj),e(Pj,W4o),e(_s,U4o),e(k,H4o),e(k,Tu),e(Tu,ehe),e(ehe,J4o),e(Tu,Y4o),e(Tu,Bj),e(Bj,Z4o),e(Tu,K4o),e(k,e1o),e(k,vs),e(vs,ohe),e(ohe,o1o),e(vs,r1o),e(vs,Ij),e(Ij,t1o),e(vs,a1o),e(vs,Nj),e(Nj,n1o),e(vs,s1o),e(k,l1o),e(k,bs),e(bs,rhe),e(rhe,i1o),e(bs,d1o),e(bs,qj),e(qj,c1o),e(bs,f1o),e(bs,jj),e(jj,m1o),e(bs,g1o),e(k,h1o),e(k,Fs),e(Fs,the),e(the,u1o),e(Fs,p1o),e(Fs,Dj),e(Dj,_1o),e(Fs,v1o),e(Fs,Gj),e(Gj,b1o),e(Fs,F1o),e(k,T1o),e(k,Ts),e(Ts,ahe),e(ahe,M1o),e(Ts,E1o),e(Ts,Oj),e(Oj,C1o),e(Ts,w1o),e(Ts,Vj),e(Vj,A1o),e(Ts,L1o),e(k,y1o),e(k,Mu),e(Mu,nhe),e(nhe,x1o),e(Mu,$1o),e(Mu,Xj),e(Xj,k1o),e(Mu,S1o),e(k,R1o),e(k,Ms),e(Ms,she),e(she,P1o),e(Ms,B1o),e(Ms,zj),e(zj,I1o),e(Ms,N1o),e(Ms,Qj),e(Qj,q1o),e(Ms,j1o),e(k,D1o),e(k,Es),e(Es,lhe),e(lhe,G1o),e(Es,O1o),e(Es,Wj),e(Wj,V1o),e(Es,X1o),e(Es,Uj),e(Uj,z1o),e(Es,Q1o),e(k,W1o),e(k,Cs),e(Cs,ihe),e(ihe,U1o),e(Cs,H1o),e(Cs,Hj),e(Hj,J1o),e(Cs,Y1o),e(Cs,Jj),e(Jj,Z1o),e(Cs,K1o),e(k,ebo),e(k,ws),e(ws,dhe),e(dhe,obo),e(ws,rbo),e(ws,Yj),e(Yj,tbo),e(ws,abo),e(ws,Zj),e(Zj,nbo),e(ws,sbo),e(k,lbo),e(k,As),e(As,che),e(che,ibo),e(As,dbo),e(As,Kj),e(Kj,cbo),e(As,fbo),e(As,eD),e(eD,mbo),e(As,gbo),e(k,hbo),e(k,Ls),e(Ls,fhe),e(fhe,ubo),e(Ls,pbo),e(Ls,oD),e(oD,_bo),e(Ls,vbo),e(Ls,rD),e(rD,bbo),e(Ls,Fbo),e(k,Tbo),e(k,ys),e(ys,mhe),e(mhe,Mbo),e(ys,Ebo),e(ys,tD),e(tD,Cbo),e(ys,wbo),e(ys,aD),e(aD,Abo),e(ys,Lbo),e(k,ybo),e(k,Eu),e(Eu,ghe),e(ghe,xbo),e(Eu,$bo),e(Eu,nD),e(nD,kbo),e(Eu,Sbo),e(k,Rbo),e(k,xs),e(xs,hhe),e(hhe,Pbo),e(xs,Bbo),e(xs,sD),e(sD,Ibo),e(xs,Nbo),e(xs,lD),e(lD,qbo),e(xs,jbo),e(k,Dbo),e(k,Cu),e(Cu,uhe),e(uhe,Gbo),e(Cu,Obo),e(Cu,iD),e(iD,Vbo),e(Cu,Xbo),e(k,zbo),e(k,$s),e($s,phe),e(phe,Qbo),e($s,Wbo),e($s,dD),e(dD,Ubo),e($s,Hbo),e($s,cD),e(cD,Jbo),e($s,Ybo),e(k,Zbo),e(k,ks),e(ks,_he),e(_he,Kbo),e(ks,e3o),e(ks,fD),e(fD,o3o),e(ks,r3o),e(ks,mD),e(mD,t3o),e(ks,a3o),e(k,n3o),e(k,Ss),e(Ss,vhe),e(vhe,s3o),e(Ss,l3o),e(Ss,gD),e(gD,i3o),e(Ss,d3o),e(Ss,hD),e(hD,c3o),e(Ss,f3o),e(k,m3o),e(k,wu),e(wu,bhe),e(bhe,g3o),e(wu,h3o),e(wu,uD),e(uD,u3o),e(wu,p3o),e(k,_3o),e(k,Au),e(Au,Fhe),e(Fhe,v3o),e(Au,b3o),e(Au,pD),e(pD,F3o),e(Au,T3o),e(k,M3o),e(k,Rs),e(Rs,The),e(The,E3o),e(Rs,C3o),e(Rs,_D),e(_D,w3o),e(Rs,A3o),e(Rs,vD),e(vD,L3o),e(Rs,y3o),e(k,x3o),e(k,Ps),e(Ps,Mhe),e(Mhe,$3o),e(Ps,k3o),e(Ps,bD),e(bD,S3o),e(Ps,R3o),e(Ps,FD),e(FD,P3o),e(Ps,B3o),e(k,I3o),e(k,Bs),e(Bs,Ehe),e(Ehe,N3o),e(Bs,q3o),e(Bs,TD),e(TD,j3o),e(Bs,D3o),e(Bs,MD),e(MD,G3o),e(Bs,O3o),e(k,V3o),e(k,Lu),e(Lu,Che),e(Che,X3o),e(Lu,z3o),e(Lu,ED),e(ED,Q3o),e(Lu,W3o),e(k,U3o),e(k,Is),e(Is,whe),e(whe,H3o),e(Is,J3o),e(Is,CD),e(CD,Y3o),e(Is,Z3o),e(Is,wD),e(wD,K3o),e(Is,e0o),e(k,o0o),e(k,Ns),e(Ns,Ahe),e(Ahe,r0o),e(Ns,t0o),e(Ns,AD),e(AD,a0o),e(Ns,n0o),e(Ns,LD),e(LD,s0o),e(Ns,l0o),e(k,i0o),e(k,qs),e(qs,Lhe),e(Lhe,d0o),e(qs,c0o),e(qs,yD),e(yD,f0o),e(qs,m0o),e(qs,xD),e(xD,g0o),e(qs,h0o),e(k,u0o),e(k,js),e(js,yhe),e(yhe,p0o),e(js,_0o),e(js,$D),e($D,v0o),e(js,b0o),e(js,kD),e(kD,F0o),e(js,T0o),e(k,M0o),e(k,Ds),e(Ds,xhe),e(xhe,E0o),e(Ds,C0o),e(Ds,SD),e(SD,w0o),e(Ds,A0o),e(Ds,RD),e(RD,L0o),e(Ds,y0o),e(k,x0o),e(k,Gs),e(Gs,$he),e($he,$0o),e(Gs,k0o),e(Gs,PD),e(PD,S0o),e(Gs,R0o),e(Gs,BD),e(BD,P0o),e(Gs,B0o),e(k,I0o),e(k,Os),e(Os,khe),e(khe,N0o),e(Os,q0o),e(Os,ID),e(ID,j0o),e(Os,D0o),e(Os,ND),e(ND,G0o),e(Os,O0o),e(k,V0o),e(k,Vs),e(Vs,She),e(She,X0o),e(Vs,z0o),e(Vs,qD),e(qD,Q0o),e(Vs,W0o),e(Vs,jD),e(jD,U0o),e(Vs,H0o),e(k,J0o),e(k,yu),e(yu,Rhe),e(Rhe,Y0o),e(yu,Z0o),e(yu,DD),e(DD,K0o),e(yu,eFo),e(k,oFo),e(k,Xs),e(Xs,Phe),e(Phe,rFo),e(Xs,tFo),e(Xs,GD),e(GD,aFo),e(Xs,nFo),e(Xs,OD),e(OD,sFo),e(Xs,lFo),e(k,iFo),e(k,xu),e(xu,Bhe),e(Bhe,dFo),e(xu,cFo),e(xu,VD),e(VD,fFo),e(xu,mFo),e(k,gFo),e(k,$u),e($u,Ihe),e(Ihe,hFo),e($u,uFo),e($u,XD),e(XD,pFo),e($u,_Fo),e(k,vFo),e(k,zs),e(zs,Nhe),e(Nhe,bFo),e(zs,FFo),e(zs,zD),e(zD,TFo),e(zs,MFo),e(zs,QD),e(QD,EFo),e(zs,CFo),e(k,wFo),e(k,Qs),e(Qs,qhe),e(qhe,AFo),e(Qs,LFo),e(Qs,WD),e(WD,yFo),e(Qs,xFo),e(Qs,UD),e(UD,$Fo),e(Qs,kFo),e(k,SFo),e(k,Ws),e(Ws,jhe),e(jhe,RFo),e(Ws,PFo),e(Ws,HD),e(HD,BFo),e(Ws,IFo),e(Ws,JD),e(JD,NFo),e(Ws,qFo),e(k,jFo),e(k,ku),e(ku,Dhe),e(Dhe,DFo),e(ku,GFo),e(ku,YD),e(YD,OFo),e(ku,VFo),e(k,XFo),e(k,Us),e(Us,Ghe),e(Ghe,zFo),e(Us,QFo),e(Us,ZD),e(ZD,WFo),e(Us,UFo),e(Us,KD),e(KD,HFo),e(Us,JFo),e(k,YFo),e(k,Hs),e(Hs,Ohe),e(Ohe,ZFo),e(Hs,KFo),e(Hs,eG),e(eG,eTo),e(Hs,oTo),e(Hs,oG),e(oG,rTo),e(Hs,tTo),e(k,aTo),e(k,Js),e(Js,Vhe),e(Vhe,nTo),e(Js,sTo),e(Js,rG),e(rG,lTo),e(Js,iTo),e(Js,tG),e(tG,dTo),e(Js,cTo),e(k,fTo),e(k,Ys),e(Ys,Xhe),e(Xhe,mTo),e(Ys,gTo),e(Ys,aG),e(aG,hTo),e(Ys,uTo),e(Ys,nG),e(nG,pTo),e(Ys,_To),e(k,vTo),e(k,Zs),e(Zs,zhe),e(zhe,bTo),e(Zs,FTo),e(Zs,sG),e(sG,TTo),e(Zs,MTo),e(Zs,lG),e(lG,ETo),e(Zs,CTo),e(k,wTo),e(k,Ks),e(Ks,Qhe),e(Qhe,ATo),e(Ks,LTo),e(Ks,iG),e(iG,yTo),e(Ks,xTo),e(Ks,dG),e(dG,$To),e(Ks,kTo),e(k,STo),e(k,el),e(el,Whe),e(Whe,RTo),e(el,PTo),e(el,cG),e(cG,BTo),e(el,ITo),e(el,fG),e(fG,NTo),e(el,qTo),e(k,jTo),e(k,ol),e(ol,Uhe),e(Uhe,DTo),e(ol,GTo),e(ol,mG),e(mG,OTo),e(ol,VTo),e(ol,gG),e(gG,XTo),e(ol,zTo),e(k,QTo),e(k,Su),e(Su,Hhe),e(Hhe,WTo),e(Su,UTo),e(Su,hG),e(hG,HTo),e(Su,JTo),e(k,YTo),e(k,rl),e(rl,Jhe),e(Jhe,ZTo),e(rl,KTo),e(rl,uG),e(uG,eMo),e(rl,oMo),e(rl,pG),e(pG,rMo),e(rl,tMo),e(k,aMo),e(k,tl),e(tl,Yhe),e(Yhe,nMo),e(tl,sMo),e(tl,_G),e(_G,lMo),e(tl,iMo),e(tl,vG),e(vG,dMo),e(tl,cMo),e(k,fMo),e(k,Ru),e(Ru,Zhe),e(Zhe,mMo),e(Ru,gMo),e(Ru,bG),e(bG,hMo),e(Ru,uMo),e(k,pMo),e(k,Pu),e(Pu,Khe),e(Khe,_Mo),e(Pu,vMo),e(Pu,FG),e(FG,bMo),e(Pu,FMo),e(k,TMo),e(k,Bu),e(Bu,eue),e(eue,MMo),e(Bu,EMo),e(Bu,TG),e(TG,CMo),e(Bu,wMo),e(k,AMo),e(k,Iu),e(Iu,oue),e(oue,LMo),e(Iu,yMo),e(Iu,MG),e(MG,xMo),e(Iu,$Mo),e(k,kMo),e(k,al),e(al,rue),e(rue,SMo),e(al,RMo),e(al,EG),e(EG,PMo),e(al,BMo),e(al,CG),e(CG,IMo),e(al,NMo),e(k,qMo),e(k,Nu),e(Nu,tue),e(tue,jMo),e(Nu,DMo),e(Nu,wG),e(wG,GMo),e(Nu,OMo),e(k,VMo),e(k,nl),e(nl,aue),e(aue,XMo),e(nl,zMo),e(nl,AG),e(AG,QMo),e(nl,WMo),e(nl,LG),e(LG,UMo),e(nl,HMo),e(k,JMo),e(k,sl),e(sl,nue),e(nue,YMo),e(sl,ZMo),e(sl,yG),e(yG,KMo),e(sl,eEo),e(sl,xG),e(xG,oEo),e(sl,rEo),e(k,tEo),e(k,ll),e(ll,sue),e(sue,aEo),e(ll,nEo),e(ll,$G),e($G,sEo),e(ll,lEo),e(ll,kG),e(kG,iEo),e(ll,dEo),e(k,cEo),e(k,il),e(il,lue),e(lue,fEo),e(il,mEo),e(il,SG),e(SG,gEo),e(il,hEo),e(il,RG),e(RG,uEo),e(il,pEo),e(k,_Eo),e(k,dl),e(dl,iue),e(iue,vEo),e(dl,bEo),e(dl,PG),e(PG,FEo),e(dl,TEo),e(dl,BG),e(BG,MEo),e(dl,EEo),e(k,CEo),e(k,cl),e(cl,due),e(due,wEo),e(cl,AEo),e(cl,IG),e(IG,LEo),e(cl,yEo),e(cl,NG),e(NG,xEo),e(cl,$Eo),e(k,kEo),e(k,qu),e(qu,cue),e(cue,SEo),e(qu,REo),e(qu,qG),e(qG,PEo),e(qu,BEo),e(k,IEo),e(k,ju),e(ju,fue),e(fue,NEo),e(ju,qEo),e(ju,jG),e(jG,jEo),e(ju,DEo),e(k,GEo),e(k,fl),e(fl,mue),e(mue,OEo),e(fl,VEo),e(fl,DG),e(DG,XEo),e(fl,zEo),e(fl,GG),e(GG,QEo),e(fl,WEo),e(k,UEo),e(k,ml),e(ml,gue),e(gue,HEo),e(ml,JEo),e(ml,OG),e(OG,YEo),e(ml,ZEo),e(ml,VG),e(VG,KEo),e(ml,eCo),e(k,oCo),e(k,gl),e(gl,hue),e(hue,rCo),e(gl,tCo),e(gl,XG),e(XG,aCo),e(gl,nCo),e(gl,zG),e(zG,sCo),e(gl,lCo),e(k,iCo),e(k,Du),e(Du,uue),e(uue,dCo),e(Du,cCo),e(Du,QG),e(QG,fCo),e(Du,mCo),e(k,gCo),e(k,Gu),e(Gu,pue),e(pue,hCo),e(Gu,uCo),e(Gu,WG),e(WG,pCo),e(Gu,_Co),e(k,vCo),e(k,Ou),e(Ou,_ue),e(_ue,bCo),e(Ou,FCo),e(Ou,UG),e(UG,TCo),e(Ou,MCo),e(k,ECo),e(k,hl),e(hl,vue),e(vue,CCo),e(hl,wCo),e(hl,HG),e(HG,ACo),e(hl,LCo),e(hl,JG),e(JG,yCo),e(hl,xCo),e(k,$Co),e(k,ul),e(ul,bue),e(bue,kCo),e(ul,SCo),e(ul,YG),e(YG,RCo),e(ul,PCo),e(ul,ZG),e(ZG,BCo),e(ul,ICo),e(k,NCo),e(k,Vu),e(Vu,Fue),e(Fue,qCo),e(Vu,jCo),e(Vu,KG),e(KG,DCo),e(Vu,GCo),e(k,OCo),e(k,Xu),e(Xu,Tue),e(Tue,VCo),e(Xu,XCo),e(Xu,eO),e(eO,zCo),e(Xu,QCo),e(k,WCo),e(k,zu),e(zu,Mue),e(Mue,UCo),e(zu,HCo),e(zu,oO),e(oO,JCo),e(zu,YCo),e(k,ZCo),e(k,Qu),e(Qu,Eue),e(Eue,KCo),e(Qu,e5o),e(Qu,rO),e(rO,o5o),e(Qu,r5o),e(k,t5o),e(k,pl),e(pl,Cue),e(Cue,a5o),e(pl,n5o),e(pl,tO),e(tO,s5o),e(pl,l5o),e(pl,aO),e(aO,i5o),e(pl,d5o),e(k,c5o),e(k,_l),e(_l,wue),e(wue,f5o),e(_l,m5o),e(_l,nO),e(nO,g5o),e(_l,h5o),e(_l,sO),e(sO,u5o),e(_l,p5o),e(k,_5o),e(k,Wu),e(Wu,Aue),e(Aue,v5o),e(Wu,b5o),e(Wu,lO),e(lO,F5o),e(Wu,T5o),e(k,M5o),e(k,Uu),e(Uu,Lue),e(Lue,E5o),e(Uu,C5o),e(Uu,iO),e(iO,w5o),e(Uu,A5o),e(k,L5o),e(k,vl),e(vl,yue),e(yue,y5o),e(vl,x5o),e(vl,dO),e(dO,$5o),e(vl,k5o),e(vl,cO),e(cO,S5o),e(vl,R5o),e(k,P5o),e(k,bl),e(bl,xue),e(xue,B5o),e(bl,I5o),e(bl,fO),e(fO,N5o),e(bl,q5o),e(bl,mO),e(mO,j5o),e(bl,D5o),e(k,G5o),e(k,Fl),e(Fl,$ue),e($ue,O5o),e(Fl,V5o),e(Fl,gO),e(gO,X5o),e(Fl,z5o),e(Fl,hO),e(hO,Q5o),e(Fl,W5o),e(k,U5o),e(k,Tl),e(Tl,kue),e(kue,H5o),e(Tl,J5o),e(Tl,uO),e(uO,Y5o),e(Tl,Z5o),e(Tl,pO),e(pO,K5o),e(Tl,ewo),e(Nr,owo),M(Hu,Nr,null),e(So,rwo),e(So,Ju),M(Gx,Ju,null),e(Ju,two),e(Ju,Sue),e(Sue,awo),v(f,woo,_),v(f,Fd,_),e(Fd,Yu),e(Yu,Rue),M(Ox,Rue,null),e(Fd,nwo),e(Fd,Pue),e(Pue,swo),v(f,Aoo,_),v(f,Ro,_),M(Vx,Ro,null),e(Ro,lwo),e(Ro,Xx),e(Xx,iwo),e(Xx,_O),e(_O,dwo),e(Xx,cwo),e(Ro,fwo),e(Ro,zx),e(zx,mwo),e(zx,Bue),e(Bue,gwo),e(zx,hwo),e(Ro,uwo),e(Ro,Ye),M(Qx,Ye,null),e(Ye,pwo),e(Ye,Iue),e(Iue,_wo),e(Ye,vwo),e(Ye,Ka),e(Ka,bwo),e(Ka,Nue),e(Nue,Fwo),e(Ka,Two),e(Ka,que),e(que,Mwo),e(Ka,Ewo),e(Ka,jue),e(jue,Cwo),e(Ka,wwo),e(Ye,Awo),e(Ye,z),e(z,Zu),e(Zu,Due),e(Due,Lwo),e(Zu,ywo),e(Zu,vO),e(vO,xwo),e(Zu,$wo),e(z,kwo),e(z,Ku),e(Ku,Gue),e(Gue,Swo),e(Ku,Rwo),e(Ku,bO),e(bO,Pwo),e(Ku,Bwo),e(z,Iwo),e(z,ep),e(ep,Oue),e(Oue,Nwo),e(ep,qwo),e(ep,FO),e(FO,jwo),e(ep,Dwo),e(z,Gwo),e(z,op),e(op,Vue),e(Vue,Owo),e(op,Vwo),e(op,TO),e(TO,Xwo),e(op,zwo),e(z,Qwo),e(z,rp),e(rp,Xue),e(Xue,Wwo),e(rp,Uwo),e(rp,MO),e(MO,Hwo),e(rp,Jwo),e(z,Ywo),e(z,tp),e(tp,zue),e(zue,Zwo),e(tp,Kwo),e(tp,EO),e(EO,eAo),e(tp,oAo),e(z,rAo),e(z,ap),e(ap,Que),e(Que,tAo),e(ap,aAo),e(ap,CO),e(CO,nAo),e(ap,sAo),e(z,lAo),e(z,np),e(np,Wue),e(Wue,iAo),e(np,dAo),e(np,wO),e(wO,cAo),e(np,fAo),e(z,mAo),e(z,sp),e(sp,Uue),e(Uue,gAo),e(sp,hAo),e(sp,AO),e(AO,uAo),e(sp,pAo),e(z,_Ao),e(z,lp),e(lp,Hue),e(Hue,vAo),e(lp,bAo),e(lp,LO),e(LO,FAo),e(lp,TAo),e(z,MAo),e(z,ip),e(ip,Jue),e(Jue,EAo),e(ip,CAo),e(ip,yO),e(yO,wAo),e(ip,AAo),e(z,LAo),e(z,dp),e(dp,Yue),e(Yue,yAo),e(dp,xAo),e(dp,xO),e(xO,$Ao),e(dp,kAo),e(z,SAo),e(z,cp),e(cp,Zue),e(Zue,RAo),e(cp,PAo),e(cp,$O),e($O,BAo),e(cp,IAo),e(z,NAo),e(z,fp),e(fp,Kue),e(Kue,qAo),e(fp,jAo),e(fp,kO),e(kO,DAo),e(fp,GAo),e(z,OAo),e(z,mp),e(mp,epe),e(epe,VAo),e(mp,XAo),e(mp,SO),e(SO,zAo),e(mp,QAo),e(z,WAo),e(z,gp),e(gp,ope),e(ope,UAo),e(gp,HAo),e(gp,RO),e(RO,JAo),e(gp,YAo),e(z,ZAo),e(z,hp),e(hp,rpe),e(rpe,KAo),e(hp,e6o),e(hp,PO),e(PO,o6o),e(hp,r6o),e(z,t6o),e(z,up),e(up,tpe),e(tpe,a6o),e(up,n6o),e(up,BO),e(BO,s6o),e(up,l6o),e(z,i6o),e(z,pp),e(pp,ape),e(ape,d6o),e(pp,c6o),e(pp,IO),e(IO,f6o),e(pp,m6o),e(z,g6o),e(z,_p),e(_p,npe),e(npe,h6o),e(_p,u6o),e(_p,NO),e(NO,p6o),e(_p,_6o),e(z,v6o),e(z,vp),e(vp,spe),e(spe,b6o),e(vp,F6o),e(vp,qO),e(qO,T6o),e(vp,M6o),e(z,E6o),e(z,bp),e(bp,lpe),e(lpe,C6o),e(bp,w6o),e(bp,jO),e(jO,A6o),e(bp,L6o),e(z,y6o),e(z,Fp),e(Fp,ipe),e(ipe,x6o),e(Fp,$6o),e(Fp,DO),e(DO,k6o),e(Fp,S6o),e(z,R6o),e(z,Tp),e(Tp,dpe),e(dpe,P6o),e(Tp,B6o),e(Tp,GO),e(GO,I6o),e(Tp,N6o),e(z,q6o),e(z,Mp),e(Mp,cpe),e(cpe,j6o),e(Mp,D6o),e(Mp,OO),e(OO,G6o),e(Mp,O6o),e(z,V6o),e(z,Ep),e(Ep,fpe),e(fpe,X6o),e(Ep,z6o),e(Ep,VO),e(VO,Q6o),e(Ep,W6o),e(z,U6o),e(z,Cp),e(Cp,mpe),e(mpe,H6o),e(Cp,J6o),e(Cp,XO),e(XO,Y6o),e(Cp,Z6o),e(z,K6o),e(z,wp),e(wp,gpe),e(gpe,e7o),e(wp,o7o),e(wp,zO),e(zO,r7o),e(wp,t7o),e(z,a7o),e(z,Ap),e(Ap,hpe),e(hpe,n7o),e(Ap,s7o),e(Ap,QO),e(QO,l7o),e(Ap,i7o),e(z,d7o),e(z,Lp),e(Lp,upe),e(upe,c7o),e(Lp,f7o),e(Lp,WO),e(WO,m7o),e(Lp,g7o),e(z,h7o),e(z,yp),e(yp,ppe),e(ppe,u7o),e(yp,p7o),e(yp,UO),e(UO,_7o),e(yp,v7o),e(z,b7o),e(z,xp),e(xp,_pe),e(_pe,F7o),e(xp,T7o),e(xp,HO),e(HO,M7o),e(xp,E7o),e(z,C7o),e(z,$p),e($p,vpe),e(vpe,w7o),e($p,A7o),e($p,JO),e(JO,L7o),e($p,y7o),e(z,x7o),e(z,kp),e(kp,bpe),e(bpe,$7o),e(kp,k7o),e(kp,YO),e(YO,S7o),e(kp,R7o),e(z,P7o),e(z,Sp),e(Sp,Fpe),e(Fpe,B7o),e(Sp,I7o),e(Sp,ZO),e(ZO,N7o),e(Sp,q7o),e(z,j7o),e(z,Rp),e(Rp,Tpe),e(Tpe,D7o),e(Rp,G7o),e(Rp,KO),e(KO,O7o),e(Rp,V7o),e(z,X7o),e(z,Pp),e(Pp,Mpe),e(Mpe,z7o),e(Pp,Q7o),e(Pp,eV),e(eV,W7o),e(Pp,U7o),e(z,H7o),e(z,Bp),e(Bp,Epe),e(Epe,J7o),e(Bp,Y7o),e(Bp,oV),e(oV,Z7o),e(Bp,K7o),e(z,eLo),e(z,Ip),e(Ip,Cpe),e(Cpe,oLo),e(Ip,rLo),e(Ip,rV),e(rV,tLo),e(Ip,aLo),e(z,nLo),e(z,Np),e(Np,wpe),e(wpe,sLo),e(Np,lLo),e(Np,tV),e(tV,iLo),e(Np,dLo),e(z,cLo),e(z,qp),e(qp,Ape),e(Ape,fLo),e(qp,mLo),e(qp,aV),e(aV,gLo),e(qp,hLo),e(z,uLo),e(z,jp),e(jp,Lpe),e(Lpe,pLo),e(jp,_Lo),e(jp,nV),e(nV,vLo),e(jp,bLo),e(z,FLo),e(z,Dp),e(Dp,ype),e(ype,TLo),e(Dp,MLo),e(Dp,sV),e(sV,ELo),e(Dp,CLo),e(Ye,wLo),M(Gp,Ye,null),e(Ye,ALo),M(Op,Ye,null),e(Ro,LLo),e(Ro,Vp),M(Wx,Vp,null),e(Vp,yLo),e(Vp,xpe),e(xpe,xLo),v(f,Loo,_),v(f,Td,_),e(Td,Xp),e(Xp,$pe),M(Ux,$pe,null),e(Td,$Lo),e(Td,kpe),e(kpe,kLo),v(f,yoo,_),v(f,Po,_),M(Hx,Po,null),e(Po,SLo),e(Po,Jx),e(Jx,RLo),e(Jx,lV),e(lV,PLo),e(Jx,BLo),e(Po,ILo),e(Po,Yx),e(Yx,NLo),e(Yx,Spe),e(Spe,qLo),e(Yx,jLo),e(Po,DLo),e(Po,Ze),M(Zx,Ze,null),e(Ze,GLo),e(Ze,Rpe),e(Rpe,OLo),e(Ze,VLo),e(Ze,Md),e(Md,XLo),e(Md,Ppe),e(Ppe,zLo),e(Md,QLo),e(Md,Bpe),e(Bpe,WLo),e(Md,ULo),e(Ze,HLo),e(Ze,se),e(se,zp),e(zp,Ipe),e(Ipe,JLo),e(zp,YLo),e(zp,iV),e(iV,ZLo),e(zp,KLo),e(se,e8o),e(se,Qp),e(Qp,Npe),e(Npe,o8o),e(Qp,r8o),e(Qp,dV),e(dV,t8o),e(Qp,a8o),e(se,n8o),e(se,Wp),e(Wp,qpe),e(qpe,s8o),e(Wp,l8o),e(Wp,cV),e(cV,i8o),e(Wp,d8o),e(se,c8o),e(se,Up),e(Up,jpe),e(jpe,f8o),e(Up,m8o),e(Up,fV),e(fV,g8o),e(Up,h8o),e(se,u8o),e(se,Hp),e(Hp,Dpe),e(Dpe,p8o),e(Hp,_8o),e(Hp,mV),e(mV,v8o),e(Hp,b8o),e(se,F8o),e(se,Jp),e(Jp,Gpe),e(Gpe,T8o),e(Jp,M8o),e(Jp,gV),e(gV,E8o),e(Jp,C8o),e(se,w8o),e(se,Yp),e(Yp,Ope),e(Ope,A8o),e(Yp,L8o),e(Yp,hV),e(hV,y8o),e(Yp,x8o),e(se,$8o),e(se,Zp),e(Zp,Vpe),e(Vpe,k8o),e(Zp,S8o),e(Zp,uV),e(uV,R8o),e(Zp,P8o),e(se,B8o),e(se,Kp),e(Kp,Xpe),e(Xpe,I8o),e(Kp,N8o),e(Kp,pV),e(pV,q8o),e(Kp,j8o),e(se,D8o),e(se,e_),e(e_,zpe),e(zpe,G8o),e(e_,O8o),e(e_,_V),e(_V,V8o),e(e_,X8o),e(se,z8o),e(se,o_),e(o_,Qpe),e(Qpe,Q8o),e(o_,W8o),e(o_,vV),e(vV,U8o),e(o_,H8o),e(se,J8o),e(se,r_),e(r_,Wpe),e(Wpe,Y8o),e(r_,Z8o),e(r_,bV),e(bV,K8o),e(r_,eyo),e(se,oyo),e(se,t_),e(t_,Upe),e(Upe,ryo),e(t_,tyo),e(t_,FV),e(FV,ayo),e(t_,nyo),e(se,syo),e(se,a_),e(a_,Hpe),e(Hpe,lyo),e(a_,iyo),e(a_,TV),e(TV,dyo),e(a_,cyo),e(se,fyo),e(se,n_),e(n_,Jpe),e(Jpe,myo),e(n_,gyo),e(n_,MV),e(MV,hyo),e(n_,uyo),e(se,pyo),e(se,s_),e(s_,Ype),e(Ype,_yo),e(s_,vyo),e(s_,EV),e(EV,byo),e(s_,Fyo),e(se,Tyo),e(se,l_),e(l_,Zpe),e(Zpe,Myo),e(l_,Eyo),e(l_,CV),e(CV,Cyo),e(l_,wyo),e(se,Ayo),e(se,i_),e(i_,Kpe),e(Kpe,Lyo),e(i_,yyo),e(i_,wV),e(wV,xyo),e(i_,$yo),e(se,kyo),e(se,d_),e(d_,e_e),e(e_e,Syo),e(d_,Ryo),e(d_,AV),e(AV,Pyo),e(d_,Byo),e(se,Iyo),e(se,c_),e(c_,o_e),e(o_e,Nyo),e(c_,qyo),e(c_,LV),e(LV,jyo),e(c_,Dyo),e(se,Gyo),e(se,f_),e(f_,r_e),e(r_e,Oyo),e(f_,Vyo),e(f_,yV),e(yV,Xyo),e(f_,zyo),e(se,Qyo),e(se,m_),e(m_,t_e),e(t_e,Wyo),e(m_,Uyo),e(m_,xV),e(xV,Hyo),e(m_,Jyo),e(se,Yyo),e(se,g_),e(g_,a_e),e(a_e,Zyo),e(g_,Kyo),e(g_,$V),e($V,e9o),e(g_,o9o),e(Ze,r9o),M(h_,Ze,null),e(Ze,t9o),M(u_,Ze,null),e(Po,a9o),e(Po,p_),M(Kx,p_,null),e(p_,n9o),e(p_,n_e),e(n_e,s9o),v(f,xoo,_),v(f,Ed,_),e(Ed,__),e(__,s_e),M(e$,s_e,null),e(Ed,l9o),e(Ed,l_e),e(l_e,i9o),v(f,$oo,_),v(f,Bo,_),M(o$,Bo,null),e(Bo,d9o),e(Bo,Cd),e(Cd,c9o),e(Cd,kV),e(kV,f9o),e(Cd,m9o),e(Cd,SV),e(SV,g9o),e(Cd,h9o),e(Bo,u9o),e(Bo,r$),e(r$,p9o),e(r$,i_e),e(i_e,_9o),e(r$,v9o),e(Bo,b9o),e(Bo,bt),M(t$,bt,null),e(bt,F9o),e(bt,d_e),e(d_e,T9o),e(bt,M9o),e(bt,wd),e(wd,E9o),e(wd,c_e),e(c_e,C9o),e(wd,w9o),e(wd,RV),e(RV,A9o),e(wd,L9o),e(bt,y9o),M(v_,bt,null),e(Bo,x9o),e(Bo,Ke),M(a$,Ke,null),e(Ke,$9o),e(Ke,f_e),e(f_e,k9o),e(Ke,S9o),e(Ke,en),e(en,R9o),e(en,m_e),e(m_e,P9o),e(en,B9o),e(en,g_e),e(g_e,I9o),e(en,N9o),e(en,h_e),e(h_e,q9o),e(en,j9o),e(Ke,D9o),e(Ke,y),e(y,b_),e(b_,u_e),e(u_e,G9o),e(b_,O9o),e(b_,PV),e(PV,V9o),e(b_,X9o),e(y,z9o),e(y,F_),e(F_,p_e),e(p_e,Q9o),e(F_,W9o),e(F_,BV),e(BV,U9o),e(F_,H9o),e(y,J9o),e(y,T_),e(T_,__e),e(__e,Y9o),e(T_,Z9o),e(T_,IV),e(IV,K9o),e(T_,exo),e(y,oxo),e(y,M_),e(M_,v_e),e(v_e,rxo),e(M_,txo),e(M_,NV),e(NV,axo),e(M_,nxo),e(y,sxo),e(y,E_),e(E_,b_e),e(b_e,lxo),e(E_,ixo),e(E_,qV),e(qV,dxo),e(E_,cxo),e(y,fxo),e(y,C_),e(C_,F_e),e(F_e,mxo),e(C_,gxo),e(C_,jV),e(jV,hxo),e(C_,uxo),e(y,pxo),e(y,w_),e(w_,T_e),e(T_e,_xo),e(w_,vxo),e(w_,DV),e(DV,bxo),e(w_,Fxo),e(y,Txo),e(y,A_),e(A_,M_e),e(M_e,Mxo),e(A_,Exo),e(A_,GV),e(GV,Cxo),e(A_,wxo),e(y,Axo),e(y,L_),e(L_,E_e),e(E_e,Lxo),e(L_,yxo),e(L_,OV),e(OV,xxo),e(L_,$xo),e(y,kxo),e(y,y_),e(y_,C_e),e(C_e,Sxo),e(y_,Rxo),e(y_,VV),e(VV,Pxo),e(y_,Bxo),e(y,Ixo),e(y,x_),e(x_,w_e),e(w_e,Nxo),e(x_,qxo),e(x_,XV),e(XV,jxo),e(x_,Dxo),e(y,Gxo),e(y,$_),e($_,A_e),e(A_e,Oxo),e($_,Vxo),e($_,zV),e(zV,Xxo),e($_,zxo),e(y,Qxo),e(y,k_),e(k_,L_e),e(L_e,Wxo),e(k_,Uxo),e(k_,QV),e(QV,Hxo),e(k_,Jxo),e(y,Yxo),e(y,S_),e(S_,y_e),e(y_e,Zxo),e(S_,Kxo),e(S_,WV),e(WV,e$o),e(S_,o$o),e(y,r$o),e(y,R_),e(R_,x_e),e(x_e,t$o),e(R_,a$o),e(R_,UV),e(UV,n$o),e(R_,s$o),e(y,l$o),e(y,P_),e(P_,$_e),e($_e,i$o),e(P_,d$o),e(P_,HV),e(HV,c$o),e(P_,f$o),e(y,m$o),e(y,B_),e(B_,k_e),e(k_e,g$o),e(B_,h$o),e(B_,JV),e(JV,u$o),e(B_,p$o),e(y,_$o),e(y,I_),e(I_,S_e),e(S_e,v$o),e(I_,b$o),e(I_,YV),e(YV,F$o),e(I_,T$o),e(y,M$o),e(y,N_),e(N_,R_e),e(R_e,E$o),e(N_,C$o),e(N_,ZV),e(ZV,w$o),e(N_,A$o),e(y,L$o),e(y,q_),e(q_,P_e),e(P_e,y$o),e(q_,x$o),e(q_,KV),e(KV,$$o),e(q_,k$o),e(y,S$o),e(y,j_),e(j_,B_e),e(B_e,R$o),e(j_,P$o),e(j_,eX),e(eX,B$o),e(j_,I$o),e(y,N$o),e(y,D_),e(D_,I_e),e(I_e,q$o),e(D_,j$o),e(D_,oX),e(oX,D$o),e(D_,G$o),e(y,O$o),e(y,G_),e(G_,N_e),e(N_e,V$o),e(G_,X$o),e(G_,rX),e(rX,z$o),e(G_,Q$o),e(y,W$o),e(y,O_),e(O_,q_e),e(q_e,U$o),e(O_,H$o),e(O_,tX),e(tX,J$o),e(O_,Y$o),e(y,Z$o),e(y,V_),e(V_,j_e),e(j_e,K$o),e(V_,eko),e(V_,aX),e(aX,oko),e(V_,rko),e(y,tko),e(y,X_),e(X_,D_e),e(D_e,ako),e(X_,nko),e(X_,nX),e(nX,sko),e(X_,lko),e(y,iko),e(y,z_),e(z_,G_e),e(G_e,dko),e(z_,cko),e(z_,sX),e(sX,fko),e(z_,mko),e(y,gko),e(y,Q_),e(Q_,O_e),e(O_e,hko),e(Q_,uko),e(Q_,lX),e(lX,pko),e(Q_,_ko),e(y,vko),e(y,W_),e(W_,V_e),e(V_e,bko),e(W_,Fko),e(W_,iX),e(iX,Tko),e(W_,Mko),e(y,Eko),e(y,U_),e(U_,X_e),e(X_e,Cko),e(U_,wko),e(U_,dX),e(dX,Ako),e(U_,Lko),e(y,yko),e(y,H_),e(H_,z_e),e(z_e,xko),e(H_,$ko),e(H_,cX),e(cX,kko),e(H_,Sko),e(y,Rko),e(y,J_),e(J_,Q_e),e(Q_e,Pko),e(J_,Bko),e(J_,fX),e(fX,Iko),e(J_,Nko),e(y,qko),e(y,Y_),e(Y_,W_e),e(W_e,jko),e(Y_,Dko),e(Y_,mX),e(mX,Gko),e(Y_,Oko),e(y,Vko),e(y,Z_),e(Z_,U_e),e(U_e,Xko),e(Z_,zko),e(Z_,gX),e(gX,Qko),e(Z_,Wko),e(y,Uko),e(y,K_),e(K_,H_e),e(H_e,Hko),e(K_,Jko),e(K_,hX),e(hX,Yko),e(K_,Zko),e(y,Kko),e(y,e2),e(e2,J_e),e(J_e,eSo),e(e2,oSo),e(e2,uX),e(uX,rSo),e(e2,tSo),e(y,aSo),e(y,o2),e(o2,Y_e),e(Y_e,nSo),e(o2,sSo),e(o2,pX),e(pX,lSo),e(o2,iSo),e(y,dSo),e(y,r2),e(r2,Z_e),e(Z_e,cSo),e(r2,fSo),e(r2,_X),e(_X,mSo),e(r2,gSo),e(y,hSo),e(y,t2),e(t2,K_e),e(K_e,uSo),e(t2,pSo),e(t2,vX),e(vX,_So),e(t2,vSo),e(y,bSo),e(y,Ml),e(Ml,e2e),e(e2e,FSo),e(Ml,TSo),e(Ml,bX),e(bX,MSo),e(Ml,ESo),e(Ml,FX),e(FX,CSo),e(Ml,wSo),e(y,ASo),e(y,a2),e(a2,o2e),e(o2e,LSo),e(a2,ySo),e(a2,TX),e(TX,xSo),e(a2,$So),e(y,kSo),e(y,n2),e(n2,r2e),e(r2e,SSo),e(n2,RSo),e(n2,MX),e(MX,PSo),e(n2,BSo),e(y,ISo),e(y,s2),e(s2,t2e),e(t2e,NSo),e(s2,qSo),e(s2,EX),e(EX,jSo),e(s2,DSo),e(y,GSo),e(y,l2),e(l2,a2e),e(a2e,OSo),e(l2,VSo),e(l2,CX),e(CX,XSo),e(l2,zSo),e(y,QSo),e(y,i2),e(i2,n2e),e(n2e,WSo),e(i2,USo),e(i2,wX),e(wX,HSo),e(i2,JSo),e(y,YSo),e(y,d2),e(d2,s2e),e(s2e,ZSo),e(d2,KSo),e(d2,AX),e(AX,eRo),e(d2,oRo),e(y,rRo),e(y,c2),e(c2,l2e),e(l2e,tRo),e(c2,aRo),e(c2,LX),e(LX,nRo),e(c2,sRo),e(y,lRo),e(y,f2),e(f2,i2e),e(i2e,iRo),e(f2,dRo),e(f2,yX),e(yX,cRo),e(f2,fRo),e(y,mRo),e(y,m2),e(m2,d2e),e(d2e,gRo),e(m2,hRo),e(m2,xX),e(xX,uRo),e(m2,pRo),e(y,_Ro),e(y,g2),e(g2,c2e),e(c2e,vRo),e(g2,bRo),e(g2,$X),e($X,FRo),e(g2,TRo),e(y,MRo),e(y,h2),e(h2,f2e),e(f2e,ERo),e(h2,CRo),e(h2,kX),e(kX,wRo),e(h2,ARo),e(y,LRo),e(y,u2),e(u2,m2e),e(m2e,yRo),e(u2,xRo),e(u2,SX),e(SX,$Ro),e(u2,kRo),e(y,SRo),e(y,p2),e(p2,g2e),e(g2e,RRo),e(p2,PRo),e(p2,RX),e(RX,BRo),e(p2,IRo),e(y,NRo),e(y,_2),e(_2,h2e),e(h2e,qRo),e(_2,jRo),e(_2,PX),e(PX,DRo),e(_2,GRo),e(y,ORo),e(y,v2),e(v2,u2e),e(u2e,VRo),e(v2,XRo),e(v2,BX),e(BX,zRo),e(v2,QRo),e(y,WRo),e(y,b2),e(b2,p2e),e(p2e,URo),e(b2,HRo),e(b2,IX),e(IX,JRo),e(b2,YRo),e(y,ZRo),e(y,F2),e(F2,_2e),e(_2e,KRo),e(F2,ePo),e(F2,NX),e(NX,oPo),e(F2,rPo),e(y,tPo),e(y,T2),e(T2,v2e),e(v2e,aPo),e(T2,nPo),e(T2,qX),e(qX,sPo),e(T2,lPo),e(y,iPo),e(y,M2),e(M2,b2e),e(b2e,dPo),e(M2,cPo),e(M2,jX),e(jX,fPo),e(M2,mPo),e(y,gPo),e(y,E2),e(E2,F2e),e(F2e,hPo),e(E2,uPo),e(E2,DX),e(DX,pPo),e(E2,_Po),e(y,vPo),e(y,C2),e(C2,T2e),e(T2e,bPo),e(C2,FPo),e(C2,GX),e(GX,TPo),e(C2,MPo),e(y,EPo),e(y,w2),e(w2,M2e),e(M2e,CPo),e(w2,wPo),e(w2,OX),e(OX,APo),e(w2,LPo),e(y,yPo),e(y,A2),e(A2,E2e),e(E2e,xPo),e(A2,$Po),e(A2,VX),e(VX,kPo),e(A2,SPo),e(y,RPo),e(y,L2),e(L2,C2e),e(C2e,PPo),e(L2,BPo),e(L2,XX),e(XX,IPo),e(L2,NPo),e(y,qPo),e(y,y2),e(y2,w2e),e(w2e,jPo),e(y2,DPo),e(y2,zX),e(zX,GPo),e(y2,OPo),e(y,VPo),e(y,x2),e(x2,A2e),e(A2e,XPo),e(x2,zPo),e(x2,QX),e(QX,QPo),e(x2,WPo),e(y,UPo),e(y,$2),e($2,L2e),e(L2e,HPo),e($2,JPo),e($2,WX),e(WX,YPo),e($2,ZPo),e(y,KPo),e(y,k2),e(k2,y2e),e(y2e,eBo),e(k2,oBo),e(k2,UX),e(UX,rBo),e(k2,tBo),e(y,aBo),e(y,S2),e(S2,x2e),e(x2e,nBo),e(S2,sBo),e(S2,HX),e(HX,lBo),e(S2,iBo),e(y,dBo),e(y,R2),e(R2,$2e),e($2e,cBo),e(R2,fBo),e(R2,JX),e(JX,mBo),e(R2,gBo),e(y,hBo),e(y,P2),e(P2,k2e),e(k2e,uBo),e(P2,pBo),e(P2,YX),e(YX,_Bo),e(P2,vBo),e(y,bBo),e(y,B2),e(B2,S2e),e(S2e,FBo),e(B2,TBo),e(B2,ZX),e(ZX,MBo),e(B2,EBo),e(y,CBo),e(y,I2),e(I2,R2e),e(R2e,wBo),e(I2,ABo),e(I2,KX),e(KX,LBo),e(I2,yBo),e(y,xBo),e(y,N2),e(N2,P2e),e(P2e,$Bo),e(N2,kBo),e(N2,ez),e(ez,SBo),e(N2,RBo),e(y,PBo),e(y,q2),e(q2,B2e),e(B2e,BBo),e(q2,IBo),e(q2,oz),e(oz,NBo),e(q2,qBo),e(y,jBo),e(y,j2),e(j2,I2e),e(I2e,DBo),e(j2,GBo),e(j2,rz),e(rz,OBo),e(j2,VBo),e(y,XBo),e(y,D2),e(D2,N2e),e(N2e,zBo),e(D2,QBo),e(D2,tz),e(tz,WBo),e(D2,UBo),e(y,HBo),e(y,G2),e(G2,q2e),e(q2e,JBo),e(G2,YBo),e(G2,az),e(az,ZBo),e(G2,KBo),e(y,eIo),e(y,O2),e(O2,j2e),e(j2e,oIo),e(O2,rIo),e(O2,nz),e(nz,tIo),e(O2,aIo),e(y,nIo),e(y,V2),e(V2,D2e),e(D2e,sIo),e(V2,lIo),e(V2,sz),e(sz,iIo),e(V2,dIo),e(y,cIo),e(y,X2),e(X2,G2e),e(G2e,fIo),e(X2,mIo),e(X2,lz),e(lz,gIo),e(X2,hIo),e(y,uIo),e(y,z2),e(z2,O2e),e(O2e,pIo),e(z2,_Io),e(z2,iz),e(iz,vIo),e(z2,bIo),e(y,FIo),e(y,Q2),e(Q2,V2e),e(V2e,TIo),e(Q2,MIo),e(Q2,dz),e(dz,EIo),e(Q2,CIo),e(y,wIo),e(y,W2),e(W2,X2e),e(X2e,AIo),e(W2,LIo),e(W2,cz),e(cz,yIo),e(W2,xIo),e(y,$Io),e(y,U2),e(U2,z2e),e(z2e,kIo),e(U2,SIo),e(U2,fz),e(fz,RIo),e(U2,PIo),e(y,BIo),e(y,H2),e(H2,Q2e),e(Q2e,IIo),e(H2,NIo),e(H2,mz),e(mz,qIo),e(H2,jIo),e(y,DIo),e(y,J2),e(J2,W2e),e(W2e,GIo),e(J2,OIo),e(J2,gz),e(gz,VIo),e(J2,XIo),e(y,zIo),e(y,Y2),e(Y2,U2e),e(U2e,QIo),e(Y2,WIo),e(Y2,hz),e(hz,UIo),e(Y2,HIo),e(y,JIo),e(y,Z2),e(Z2,H2e),e(H2e,YIo),e(Z2,ZIo),e(Z2,uz),e(uz,KIo),e(Z2,eNo),e(y,oNo),e(y,K2),e(K2,J2e),e(J2e,rNo),e(K2,tNo),e(K2,pz),e(pz,aNo),e(K2,nNo),e(y,sNo),e(y,ev),e(ev,Y2e),e(Y2e,lNo),e(ev,iNo),e(ev,_z),e(_z,dNo),e(ev,cNo),e(y,fNo),e(y,ov),e(ov,Z2e),e(Z2e,mNo),e(ov,gNo),e(ov,vz),e(vz,hNo),e(ov,uNo),e(y,pNo),e(y,rv),e(rv,K2e),e(K2e,_No),e(rv,vNo),e(rv,bz),e(bz,bNo),e(rv,FNo),e(y,TNo),e(y,tv),e(tv,eve),e(eve,MNo),e(tv,ENo),e(tv,Fz),e(Fz,CNo),e(tv,wNo),e(y,ANo),e(y,av),e(av,ove),e(ove,LNo),e(av,yNo),e(av,Tz),e(Tz,xNo),e(av,$No),e(y,kNo),e(y,nv),e(nv,rve),e(rve,SNo),e(nv,RNo),e(nv,Mz),e(Mz,PNo),e(nv,BNo),e(y,INo),e(y,sv),e(sv,tve),e(tve,NNo),e(sv,qNo),e(sv,Ez),e(Ez,jNo),e(sv,DNo),e(y,GNo),e(y,lv),e(lv,ave),e(ave,ONo),e(lv,VNo),e(lv,Cz),e(Cz,XNo),e(lv,zNo),e(y,QNo),e(y,iv),e(iv,nve),e(nve,WNo),e(iv,UNo),e(iv,wz),e(wz,HNo),e(iv,JNo),e(y,YNo),e(y,dv),e(dv,sve),e(sve,ZNo),e(dv,KNo),e(dv,Az),e(Az,eqo),e(dv,oqo),e(y,rqo),e(y,cv),e(cv,lve),e(lve,tqo),e(cv,aqo),e(cv,Lz),e(Lz,nqo),e(cv,sqo),e(y,lqo),e(y,fv),e(fv,ive),e(ive,iqo),e(fv,dqo),e(fv,yz),e(yz,cqo),e(fv,fqo),e(y,mqo),e(y,mv),e(mv,dve),e(dve,gqo),e(mv,hqo),e(mv,xz),e(xz,uqo),e(mv,pqo),e(y,_qo),e(y,gv),e(gv,cve),e(cve,vqo),e(gv,bqo),e(gv,$z),e($z,Fqo),e(gv,Tqo),e(y,Mqo),e(y,hv),e(hv,fve),e(fve,Eqo),e(hv,Cqo),e(hv,kz),e(kz,wqo),e(hv,Aqo),e(y,Lqo),e(y,uv),e(uv,mve),e(mve,yqo),e(uv,xqo),e(uv,Sz),e(Sz,$qo),e(uv,kqo),e(y,Sqo),e(y,pv),e(pv,gve),e(gve,Rqo),e(pv,Pqo),e(pv,Rz),e(Rz,Bqo),e(pv,Iqo),e(y,Nqo),e(y,_v),e(_v,hve),e(hve,qqo),e(_v,jqo),e(_v,Pz),e(Pz,Dqo),e(_v,Gqo),e(y,Oqo),e(y,vv),e(vv,uve),e(uve,Vqo),e(vv,Xqo),e(vv,Bz),e(Bz,zqo),e(vv,Qqo),e(y,Wqo),e(y,bv),e(bv,pve),e(pve,Uqo),e(bv,Hqo),e(bv,Iz),e(Iz,Jqo),e(bv,Yqo),e(y,Zqo),e(y,Fv),e(Fv,_ve),e(_ve,Kqo),e(Fv,ejo),e(Fv,Nz),e(Nz,ojo),e(Fv,rjo),e(y,tjo),e(y,Tv),e(Tv,vve),e(vve,ajo),e(Tv,njo),e(Tv,qz),e(qz,sjo),e(Tv,ljo),e(y,ijo),e(y,Mv),e(Mv,bve),e(bve,djo),e(Mv,cjo),e(Mv,jz),e(jz,fjo),e(Mv,mjo),e(y,gjo),e(y,Ev),e(Ev,Fve),e(Fve,hjo),e(Ev,ujo),e(Ev,Dz),e(Dz,pjo),e(Ev,_jo),e(y,vjo),e(y,Cv),e(Cv,Tve),e(Tve,bjo),e(Cv,Fjo),e(Cv,Gz),e(Gz,Tjo),e(Cv,Mjo),e(y,Ejo),e(y,wv),e(wv,Mve),e(Mve,Cjo),e(wv,wjo),e(wv,Oz),e(Oz,Ajo),e(wv,Ljo),e(y,yjo),e(y,Av),e(Av,Eve),e(Eve,xjo),e(Av,$jo),e(Av,Vz),e(Vz,kjo),e(Av,Sjo),e(y,Rjo),e(y,Lv),e(Lv,Cve),e(Cve,Pjo),e(Lv,Bjo),e(Lv,Xz),e(Xz,Ijo),e(Lv,Njo),e(y,qjo),e(y,yv),e(yv,wve),e(wve,jjo),e(yv,Djo),e(yv,zz),e(zz,Gjo),e(yv,Ojo),e(y,Vjo),e(y,xv),e(xv,Ave),e(Ave,Xjo),e(xv,zjo),e(xv,Qz),e(Qz,Qjo),e(xv,Wjo),e(y,Ujo),e(y,$v),e($v,Lve),e(Lve,Hjo),e($v,Jjo),e($v,Wz),e(Wz,Yjo),e($v,Zjo),e(y,Kjo),e(y,kv),e(kv,yve),e(yve,eDo),e(kv,oDo),e(kv,Uz),e(Uz,rDo),e(kv,tDo),e(y,aDo),e(y,Sv),e(Sv,xve),e(xve,nDo),e(Sv,sDo),e(Sv,Hz),e(Hz,lDo),e(Sv,iDo),e(y,dDo),e(y,Rv),e(Rv,$ve),e($ve,cDo),e(Rv,fDo),e(Rv,Jz),e(Jz,mDo),e(Rv,gDo),e(y,hDo),e(y,Pv),e(Pv,kve),e(kve,uDo),e(Pv,pDo),e(Pv,Yz),e(Yz,_Do),e(Pv,vDo),e(y,bDo),e(y,Bv),e(Bv,Sve),e(Sve,FDo),e(Bv,TDo),e(Bv,Zz),e(Zz,MDo),e(Bv,EDo),e(y,CDo),e(y,Iv),e(Iv,Rve),e(Rve,wDo),e(Iv,ADo),e(Iv,Kz),e(Kz,LDo),e(Iv,yDo),e(Ke,xDo),e(Ke,Nv),e(Nv,$Do),e(Nv,Pve),e(Pve,kDo),e(Nv,SDo),e(Nv,Bve),e(Bve,RDo),e(Ke,PDo),M(qv,Ke,null),v(f,koo,_),v(f,Ad,_),e(Ad,jv),e(jv,Ive),M(n$,Ive,null),e(Ad,BDo),e(Ad,Nve),e(Nve,IDo),v(f,Soo,_),v(f,Io,_),M(s$,Io,null),e(Io,NDo),e(Io,Ld),e(Ld,qDo),e(Ld,eQ),e(eQ,jDo),e(Ld,DDo),e(Ld,oQ),e(oQ,GDo),e(Ld,ODo),e(Io,VDo),e(Io,l$),e(l$,XDo),e(l$,qve),e(qve,zDo),e(l$,QDo),e(Io,WDo),e(Io,Ft),M(i$,Ft,null),e(Ft,UDo),e(Ft,jve),e(jve,HDo),e(Ft,JDo),e(Ft,yd),e(yd,YDo),e(yd,Dve),e(Dve,ZDo),e(yd,KDo),e(yd,rQ),e(rQ,eGo),e(yd,oGo),e(Ft,rGo),M(Dv,Ft,null),e(Io,tGo),e(Io,eo),M(d$,eo,null),e(eo,aGo),e(eo,Gve),e(Gve,nGo),e(eo,sGo),e(eo,on),e(on,lGo),e(on,Ove),e(Ove,iGo),e(on,dGo),e(on,Vve),e(Vve,cGo),e(on,fGo),e(on,Xve),e(Xve,mGo),e(on,gGo),e(eo,hGo),e(eo,G),e(G,Gv),e(Gv,zve),e(zve,uGo),e(Gv,pGo),e(Gv,tQ),e(tQ,_Go),e(Gv,vGo),e(G,bGo),e(G,Ov),e(Ov,Qve),e(Qve,FGo),e(Ov,TGo),e(Ov,aQ),e(aQ,MGo),e(Ov,EGo),e(G,CGo),e(G,Vv),e(Vv,Wve),e(Wve,wGo),e(Vv,AGo),e(Vv,nQ),e(nQ,LGo),e(Vv,yGo),e(G,xGo),e(G,Xv),e(Xv,Uve),e(Uve,$Go),e(Xv,kGo),e(Xv,sQ),e(sQ,SGo),e(Xv,RGo),e(G,PGo),e(G,zv),e(zv,Hve),e(Hve,BGo),e(zv,IGo),e(zv,lQ),e(lQ,NGo),e(zv,qGo),e(G,jGo),e(G,Qv),e(Qv,Jve),e(Jve,DGo),e(Qv,GGo),e(Qv,iQ),e(iQ,OGo),e(Qv,VGo),e(G,XGo),e(G,Wv),e(Wv,Yve),e(Yve,zGo),e(Wv,QGo),e(Wv,dQ),e(dQ,WGo),e(Wv,UGo),e(G,HGo),e(G,Uv),e(Uv,Zve),e(Zve,JGo),e(Uv,YGo),e(Uv,cQ),e(cQ,ZGo),e(Uv,KGo),e(G,eOo),e(G,Hv),e(Hv,Kve),e(Kve,oOo),e(Hv,rOo),e(Hv,fQ),e(fQ,tOo),e(Hv,aOo),e(G,nOo),e(G,Jv),e(Jv,e4e),e(e4e,sOo),e(Jv,lOo),e(Jv,mQ),e(mQ,iOo),e(Jv,dOo),e(G,cOo),e(G,Yv),e(Yv,o4e),e(o4e,fOo),e(Yv,mOo),e(Yv,gQ),e(gQ,gOo),e(Yv,hOo),e(G,uOo),e(G,Zv),e(Zv,r4e),e(r4e,pOo),e(Zv,_Oo),e(Zv,hQ),e(hQ,vOo),e(Zv,bOo),e(G,FOo),e(G,Kv),e(Kv,t4e),e(t4e,TOo),e(Kv,MOo),e(Kv,uQ),e(uQ,EOo),e(Kv,COo),e(G,wOo),e(G,e4),e(e4,a4e),e(a4e,AOo),e(e4,LOo),e(e4,pQ),e(pQ,yOo),e(e4,xOo),e(G,$Oo),e(G,o4),e(o4,n4e),e(n4e,kOo),e(o4,SOo),e(o4,_Q),e(_Q,ROo),e(o4,POo),e(G,BOo),e(G,r4),e(r4,s4e),e(s4e,IOo),e(r4,NOo),e(r4,vQ),e(vQ,qOo),e(r4,jOo),e(G,DOo),e(G,t4),e(t4,l4e),e(l4e,GOo),e(t4,OOo),e(t4,bQ),e(bQ,VOo),e(t4,XOo),e(G,zOo),e(G,a4),e(a4,i4e),e(i4e,QOo),e(a4,WOo),e(a4,FQ),e(FQ,UOo),e(a4,HOo),e(G,JOo),e(G,n4),e(n4,d4e),e(d4e,YOo),e(n4,ZOo),e(n4,TQ),e(TQ,KOo),e(n4,eVo),e(G,oVo),e(G,s4),e(s4,c4e),e(c4e,rVo),e(s4,tVo),e(s4,MQ),e(MQ,aVo),e(s4,nVo),e(G,sVo),e(G,l4),e(l4,f4e),e(f4e,lVo),e(l4,iVo),e(l4,EQ),e(EQ,dVo),e(l4,cVo),e(G,fVo),e(G,i4),e(i4,m4e),e(m4e,mVo),e(i4,gVo),e(i4,CQ),e(CQ,hVo),e(i4,uVo),e(G,pVo),e(G,d4),e(d4,g4e),e(g4e,_Vo),e(d4,vVo),e(d4,wQ),e(wQ,bVo),e(d4,FVo),e(G,TVo),e(G,c4),e(c4,h4e),e(h4e,MVo),e(c4,EVo),e(c4,AQ),e(AQ,CVo),e(c4,wVo),e(G,AVo),e(G,f4),e(f4,u4e),e(u4e,LVo),e(f4,yVo),e(f4,LQ),e(LQ,xVo),e(f4,$Vo),e(G,kVo),e(G,m4),e(m4,p4e),e(p4e,SVo),e(m4,RVo),e(m4,yQ),e(yQ,PVo),e(m4,BVo),e(G,IVo),e(G,g4),e(g4,_4e),e(_4e,NVo),e(g4,qVo),e(g4,xQ),e(xQ,jVo),e(g4,DVo),e(G,GVo),e(G,h4),e(h4,v4e),e(v4e,OVo),e(h4,VVo),e(h4,$Q),e($Q,XVo),e(h4,zVo),e(G,QVo),e(G,u4),e(u4,b4e),e(b4e,WVo),e(u4,UVo),e(u4,kQ),e(kQ,HVo),e(u4,JVo),e(G,YVo),e(G,p4),e(p4,F4e),e(F4e,ZVo),e(p4,KVo),e(p4,SQ),e(SQ,eXo),e(p4,oXo),e(G,rXo),e(G,_4),e(_4,T4e),e(T4e,tXo),e(_4,aXo),e(_4,RQ),e(RQ,nXo),e(_4,sXo),e(G,lXo),e(G,v4),e(v4,M4e),e(M4e,iXo),e(v4,dXo),e(v4,PQ),e(PQ,cXo),e(v4,fXo),e(G,mXo),e(G,b4),e(b4,E4e),e(E4e,gXo),e(b4,hXo),e(b4,BQ),e(BQ,uXo),e(b4,pXo),e(G,_Xo),e(G,F4),e(F4,C4e),e(C4e,vXo),e(F4,bXo),e(F4,IQ),e(IQ,FXo),e(F4,TXo),e(G,MXo),e(G,T4),e(T4,w4e),e(w4e,EXo),e(T4,CXo),e(T4,NQ),e(NQ,wXo),e(T4,AXo),e(G,LXo),e(G,M4),e(M4,A4e),e(A4e,yXo),e(M4,xXo),e(M4,qQ),e(qQ,$Xo),e(M4,kXo),e(G,SXo),e(G,E4),e(E4,L4e),e(L4e,RXo),e(E4,PXo),e(E4,jQ),e(jQ,BXo),e(E4,IXo),e(G,NXo),e(G,C4),e(C4,y4e),e(y4e,qXo),e(C4,jXo),e(C4,DQ),e(DQ,DXo),e(C4,GXo),e(G,OXo),e(G,w4),e(w4,x4e),e(x4e,VXo),e(w4,XXo),e(w4,GQ),e(GQ,zXo),e(w4,QXo),e(G,WXo),e(G,A4),e(A4,$4e),e($4e,UXo),e(A4,HXo),e(A4,OQ),e(OQ,JXo),e(A4,YXo),e(G,ZXo),e(G,L4),e(L4,k4e),e(k4e,KXo),e(L4,ezo),e(L4,VQ),e(VQ,ozo),e(L4,rzo),e(G,tzo),e(G,y4),e(y4,S4e),e(S4e,azo),e(y4,nzo),e(y4,XQ),e(XQ,szo),e(y4,lzo),e(G,izo),e(G,x4),e(x4,R4e),e(R4e,dzo),e(x4,czo),e(x4,zQ),e(zQ,fzo),e(x4,mzo),e(G,gzo),e(G,$4),e($4,P4e),e(P4e,hzo),e($4,uzo),e($4,QQ),e(QQ,pzo),e($4,_zo),e(G,vzo),e(G,k4),e(k4,B4e),e(B4e,bzo),e(k4,Fzo),e(k4,WQ),e(WQ,Tzo),e(k4,Mzo),e(G,Ezo),e(G,S4),e(S4,I4e),e(I4e,Czo),e(S4,wzo),e(S4,UQ),e(UQ,Azo),e(S4,Lzo),e(G,yzo),e(G,R4),e(R4,N4e),e(N4e,xzo),e(R4,$zo),e(R4,HQ),e(HQ,kzo),e(R4,Szo),e(G,Rzo),e(G,P4),e(P4,q4e),e(q4e,Pzo),e(P4,Bzo),e(P4,JQ),e(JQ,Izo),e(P4,Nzo),e(eo,qzo),e(eo,B4),e(B4,jzo),e(B4,j4e),e(j4e,Dzo),e(B4,Gzo),e(B4,D4e),e(D4e,Ozo),e(eo,Vzo),M(I4,eo,null),v(f,Roo,_),v(f,xd,_),e(xd,N4),e(N4,G4e),M(c$,G4e,null),e(xd,Xzo),e(xd,O4e),e(O4e,zzo),v(f,Poo,_),v(f,No,_),M(f$,No,null),e(No,Qzo),e(No,$d),e($d,Wzo),e($d,YQ),e(YQ,Uzo),e($d,Hzo),e($d,ZQ),e(ZQ,Jzo),e($d,Yzo),e(No,Zzo),e(No,m$),e(m$,Kzo),e(m$,V4e),e(V4e,eQo),e(m$,oQo),e(No,rQo),e(No,Tt),M(g$,Tt,null),e(Tt,tQo),e(Tt,X4e),e(X4e,aQo),e(Tt,nQo),e(Tt,kd),e(kd,sQo),e(kd,z4e),e(z4e,lQo),e(kd,iQo),e(kd,KQ),e(KQ,dQo),e(kd,cQo),e(Tt,fQo),M(q4,Tt,null),e(No,mQo),e(No,oo),M(h$,oo,null),e(oo,gQo),e(oo,Q4e),e(Q4e,hQo),e(oo,uQo),e(oo,rn),e(rn,pQo),e(rn,W4e),e(W4e,_Qo),e(rn,vQo),e(rn,U4e),e(U4e,bQo),e(rn,FQo),e(rn,H4e),e(H4e,TQo),e(rn,MQo),e(oo,EQo),e(oo,Q),e(Q,j4),e(j4,J4e),e(J4e,CQo),e(j4,wQo),e(j4,eW),e(eW,AQo),e(j4,LQo),e(Q,yQo),e(Q,D4),e(D4,Y4e),e(Y4e,xQo),e(D4,$Qo),e(D4,oW),e(oW,kQo),e(D4,SQo),e(Q,RQo),e(Q,G4),e(G4,Z4e),e(Z4e,PQo),e(G4,BQo),e(G4,rW),e(rW,IQo),e(G4,NQo),e(Q,qQo),e(Q,O4),e(O4,K4e),e(K4e,jQo),e(O4,DQo),e(O4,tW),e(tW,GQo),e(O4,OQo),e(Q,VQo),e(Q,V4),e(V4,e1e),e(e1e,XQo),e(V4,zQo),e(V4,aW),e(aW,QQo),e(V4,WQo),e(Q,UQo),e(Q,X4),e(X4,o1e),e(o1e,HQo),e(X4,JQo),e(X4,nW),e(nW,YQo),e(X4,ZQo),e(Q,KQo),e(Q,z4),e(z4,r1e),e(r1e,eWo),e(z4,oWo),e(z4,sW),e(sW,rWo),e(z4,tWo),e(Q,aWo),e(Q,Q4),e(Q4,t1e),e(t1e,nWo),e(Q4,sWo),e(Q4,lW),e(lW,lWo),e(Q4,iWo),e(Q,dWo),e(Q,W4),e(W4,a1e),e(a1e,cWo),e(W4,fWo),e(W4,iW),e(iW,mWo),e(W4,gWo),e(Q,hWo),e(Q,U4),e(U4,n1e),e(n1e,uWo),e(U4,pWo),e(U4,dW),e(dW,_Wo),e(U4,vWo),e(Q,bWo),e(Q,H4),e(H4,s1e),e(s1e,FWo),e(H4,TWo),e(H4,cW),e(cW,MWo),e(H4,EWo),e(Q,CWo),e(Q,J4),e(J4,l1e),e(l1e,wWo),e(J4,AWo),e(J4,fW),e(fW,LWo),e(J4,yWo),e(Q,xWo),e(Q,Y4),e(Y4,i1e),e(i1e,$Wo),e(Y4,kWo),e(Y4,mW),e(mW,SWo),e(Y4,RWo),e(Q,PWo),e(Q,Z4),e(Z4,d1e),e(d1e,BWo),e(Z4,IWo),e(Z4,gW),e(gW,NWo),e(Z4,qWo),e(Q,jWo),e(Q,K4),e(K4,c1e),e(c1e,DWo),e(K4,GWo),e(K4,hW),e(hW,OWo),e(K4,VWo),e(Q,XWo),e(Q,e1),e(e1,f1e),e(f1e,zWo),e(e1,QWo),e(e1,uW),e(uW,WWo),e(e1,UWo),e(Q,HWo),e(Q,o1),e(o1,m1e),e(m1e,JWo),e(o1,YWo),e(o1,pW),e(pW,ZWo),e(o1,KWo),e(Q,eUo),e(Q,r1),e(r1,g1e),e(g1e,oUo),e(r1,rUo),e(r1,_W),e(_W,tUo),e(r1,aUo),e(Q,nUo),e(Q,t1),e(t1,h1e),e(h1e,sUo),e(t1,lUo),e(t1,vW),e(vW,iUo),e(t1,dUo),e(Q,cUo),e(Q,a1),e(a1,u1e),e(u1e,fUo),e(a1,mUo),e(a1,bW),e(bW,gUo),e(a1,hUo),e(Q,uUo),e(Q,n1),e(n1,p1e),e(p1e,pUo),e(n1,_Uo),e(n1,FW),e(FW,vUo),e(n1,bUo),e(Q,FUo),e(Q,s1),e(s1,_1e),e(_1e,TUo),e(s1,MUo),e(s1,TW),e(TW,EUo),e(s1,CUo),e(Q,wUo),e(Q,l1),e(l1,v1e),e(v1e,AUo),e(l1,LUo),e(l1,MW),e(MW,yUo),e(l1,xUo),e(Q,$Uo),e(Q,i1),e(i1,b1e),e(b1e,kUo),e(i1,SUo),e(i1,EW),e(EW,RUo),e(i1,PUo),e(Q,BUo),e(Q,d1),e(d1,F1e),e(F1e,IUo),e(d1,NUo),e(d1,CW),e(CW,qUo),e(d1,jUo),e(Q,DUo),e(Q,c1),e(c1,T1e),e(T1e,GUo),e(c1,OUo),e(c1,wW),e(wW,VUo),e(c1,XUo),e(Q,zUo),e(Q,f1),e(f1,M1e),e(M1e,QUo),e(f1,WUo),e(f1,AW),e(AW,UUo),e(f1,HUo),e(Q,JUo),e(Q,m1),e(m1,E1e),e(E1e,YUo),e(m1,ZUo),e(m1,LW),e(LW,KUo),e(m1,eHo),e(Q,oHo),e(Q,g1),e(g1,C1e),e(C1e,rHo),e(g1,tHo),e(g1,yW),e(yW,aHo),e(g1,nHo),e(Q,sHo),e(Q,h1),e(h1,w1e),e(w1e,lHo),e(h1,iHo),e(h1,xW),e(xW,dHo),e(h1,cHo),e(Q,fHo),e(Q,u1),e(u1,A1e),e(A1e,mHo),e(u1,gHo),e(u1,$W),e($W,hHo),e(u1,uHo),e(Q,pHo),e(Q,p1),e(p1,L1e),e(L1e,_Ho),e(p1,vHo),e(p1,kW),e(kW,bHo),e(p1,FHo),e(Q,THo),e(Q,_1),e(_1,y1e),e(y1e,MHo),e(_1,EHo),e(_1,SW),e(SW,CHo),e(_1,wHo),e(Q,AHo),e(Q,v1),e(v1,x1e),e(x1e,LHo),e(v1,yHo),e(v1,RW),e(RW,xHo),e(v1,$Ho),e(Q,kHo),e(Q,b1),e(b1,$1e),e($1e,SHo),e(b1,RHo),e(b1,PW),e(PW,PHo),e(b1,BHo),e(Q,IHo),e(Q,F1),e(F1,k1e),e(k1e,NHo),e(F1,qHo),e(F1,BW),e(BW,jHo),e(F1,DHo),e(Q,GHo),e(Q,T1),e(T1,S1e),e(S1e,OHo),e(T1,VHo),e(T1,IW),e(IW,XHo),e(T1,zHo),e(Q,QHo),e(Q,M1),e(M1,R1e),e(R1e,WHo),e(M1,UHo),e(M1,NW),e(NW,HHo),e(M1,JHo),e(Q,YHo),e(Q,E1),e(E1,P1e),e(P1e,ZHo),e(E1,KHo),e(E1,qW),e(qW,eJo),e(E1,oJo),e(Q,rJo),e(Q,C1),e(C1,B1e),e(B1e,tJo),e(C1,aJo),e(C1,jW),e(jW,nJo),e(C1,sJo),e(Q,lJo),e(Q,w1),e(w1,I1e),e(I1e,iJo),e(w1,dJo),e(w1,DW),e(DW,cJo),e(w1,fJo),e(Q,mJo),e(Q,A1),e(A1,N1e),e(N1e,gJo),e(A1,hJo),e(A1,GW),e(GW,uJo),e(A1,pJo),e(oo,_Jo),e(oo,L1),e(L1,vJo),e(L1,q1e),e(q1e,bJo),e(L1,FJo),e(L1,j1e),e(j1e,TJo),e(oo,MJo),M(y1,oo,null),v(f,Boo,_),v(f,Sd,_),e(Sd,x1),e(x1,D1e),M(u$,D1e,null),e(Sd,EJo),e(Sd,G1e),e(G1e,CJo),v(f,Ioo,_),v(f,qo,_),M(p$,qo,null),e(qo,wJo),e(qo,Rd),e(Rd,AJo),e(Rd,OW),e(OW,LJo),e(Rd,yJo),e(Rd,VW),e(VW,xJo),e(Rd,$Jo),e(qo,kJo),e(qo,_$),e(_$,SJo),e(_$,O1e),e(O1e,RJo),e(_$,PJo),e(qo,BJo),e(qo,Mt),M(v$,Mt,null),e(Mt,IJo),e(Mt,V1e),e(V1e,NJo),e(Mt,qJo),e(Mt,Pd),e(Pd,jJo),e(Pd,X1e),e(X1e,DJo),e(Pd,GJo),e(Pd,XW),e(XW,OJo),e(Pd,VJo),e(Mt,XJo),M($1,Mt,null),e(qo,zJo),e(qo,ro),M(b$,ro,null),e(ro,QJo),e(ro,z1e),e(z1e,WJo),e(ro,UJo),e(ro,tn),e(tn,HJo),e(tn,Q1e),e(Q1e,JJo),e(tn,YJo),e(tn,W1e),e(W1e,ZJo),e(tn,KJo),e(tn,U1e),e(U1e,eYo),e(tn,oYo),e(ro,rYo),e(ro,J),e(J,k1),e(k1,H1e),e(H1e,tYo),e(k1,aYo),e(k1,zW),e(zW,nYo),e(k1,sYo),e(J,lYo),e(J,S1),e(S1,J1e),e(J1e,iYo),e(S1,dYo),e(S1,QW),e(QW,cYo),e(S1,fYo),e(J,mYo),e(J,R1),e(R1,Y1e),e(Y1e,gYo),e(R1,hYo),e(R1,WW),e(WW,uYo),e(R1,pYo),e(J,_Yo),e(J,P1),e(P1,Z1e),e(Z1e,vYo),e(P1,bYo),e(P1,UW),e(UW,FYo),e(P1,TYo),e(J,MYo),e(J,B1),e(B1,K1e),e(K1e,EYo),e(B1,CYo),e(B1,HW),e(HW,wYo),e(B1,AYo),e(J,LYo),e(J,I1),e(I1,ebe),e(ebe,yYo),e(I1,xYo),e(I1,JW),e(JW,$Yo),e(I1,kYo),e(J,SYo),e(J,N1),e(N1,obe),e(obe,RYo),e(N1,PYo),e(N1,YW),e(YW,BYo),e(N1,IYo),e(J,NYo),e(J,q1),e(q1,rbe),e(rbe,qYo),e(q1,jYo),e(q1,ZW),e(ZW,DYo),e(q1,GYo),e(J,OYo),e(J,j1),e(j1,tbe),e(tbe,VYo),e(j1,XYo),e(j1,KW),e(KW,zYo),e(j1,QYo),e(J,WYo),e(J,D1),e(D1,abe),e(abe,UYo),e(D1,HYo),e(D1,eU),e(eU,JYo),e(D1,YYo),e(J,ZYo),e(J,G1),e(G1,nbe),e(nbe,KYo),e(G1,eZo),e(G1,oU),e(oU,oZo),e(G1,rZo),e(J,tZo),e(J,O1),e(O1,sbe),e(sbe,aZo),e(O1,nZo),e(O1,rU),e(rU,sZo),e(O1,lZo),e(J,iZo),e(J,V1),e(V1,lbe),e(lbe,dZo),e(V1,cZo),e(V1,tU),e(tU,fZo),e(V1,mZo),e(J,gZo),e(J,X1),e(X1,ibe),e(ibe,hZo),e(X1,uZo),e(X1,aU),e(aU,pZo),e(X1,_Zo),e(J,vZo),e(J,z1),e(z1,dbe),e(dbe,bZo),e(z1,FZo),e(z1,nU),e(nU,TZo),e(z1,MZo),e(J,EZo),e(J,Q1),e(Q1,cbe),e(cbe,CZo),e(Q1,wZo),e(Q1,sU),e(sU,AZo),e(Q1,LZo),e(J,yZo),e(J,W1),e(W1,fbe),e(fbe,xZo),e(W1,$Zo),e(W1,lU),e(lU,kZo),e(W1,SZo),e(J,RZo),e(J,U1),e(U1,mbe),e(mbe,PZo),e(U1,BZo),e(U1,iU),e(iU,IZo),e(U1,NZo),e(J,qZo),e(J,H1),e(H1,gbe),e(gbe,jZo),e(H1,DZo),e(H1,dU),e(dU,GZo),e(H1,OZo),e(J,VZo),e(J,J1),e(J1,hbe),e(hbe,XZo),e(J1,zZo),e(J1,cU),e(cU,QZo),e(J1,WZo),e(J,UZo),e(J,Y1),e(Y1,ube),e(ube,HZo),e(Y1,JZo),e(Y1,fU),e(fU,YZo),e(Y1,ZZo),e(J,KZo),e(J,Z1),e(Z1,pbe),e(pbe,eKo),e(Z1,oKo),e(Z1,mU),e(mU,rKo),e(Z1,tKo),e(J,aKo),e(J,K1),e(K1,_be),e(_be,nKo),e(K1,sKo),e(K1,gU),e(gU,lKo),e(K1,iKo),e(J,dKo),e(J,eb),e(eb,vbe),e(vbe,cKo),e(eb,fKo),e(eb,hU),e(hU,mKo),e(eb,gKo),e(J,hKo),e(J,ob),e(ob,bbe),e(bbe,uKo),e(ob,pKo),e(ob,uU),e(uU,_Ko),e(ob,vKo),e(J,bKo),e(J,rb),e(rb,Fbe),e(Fbe,FKo),e(rb,TKo),e(rb,pU),e(pU,MKo),e(rb,EKo),e(J,CKo),e(J,tb),e(tb,Tbe),e(Tbe,wKo),e(tb,AKo),e(tb,_U),e(_U,LKo),e(tb,yKo),e(J,xKo),e(J,ab),e(ab,Mbe),e(Mbe,$Ko),e(ab,kKo),e(ab,vU),e(vU,SKo),e(ab,RKo),e(J,PKo),e(J,nb),e(nb,Ebe),e(Ebe,BKo),e(nb,IKo),e(nb,bU),e(bU,NKo),e(nb,qKo),e(J,jKo),e(J,sb),e(sb,Cbe),e(Cbe,DKo),e(sb,GKo),e(sb,FU),e(FU,OKo),e(sb,VKo),e(J,XKo),e(J,lb),e(lb,wbe),e(wbe,zKo),e(lb,QKo),e(lb,TU),e(TU,WKo),e(lb,UKo),e(J,HKo),e(J,ib),e(ib,Abe),e(Abe,JKo),e(ib,YKo),e(ib,MU),e(MU,ZKo),e(ib,KKo),e(J,eer),e(J,db),e(db,Lbe),e(Lbe,oer),e(db,rer),e(db,EU),e(EU,ter),e(db,aer),e(J,ner),e(J,cb),e(cb,ybe),e(ybe,ser),e(cb,ler),e(cb,CU),e(CU,ier),e(cb,der),e(J,cer),e(J,fb),e(fb,xbe),e(xbe,fer),e(fb,mer),e(fb,$be),e($be,ger),e(fb,her),e(J,uer),e(J,mb),e(mb,kbe),e(kbe,per),e(mb,_er),e(mb,wU),e(wU,ver),e(mb,ber),e(J,Fer),e(J,gb),e(gb,Sbe),e(Sbe,Ter),e(gb,Mer),e(gb,AU),e(AU,Eer),e(gb,Cer),e(J,wer),e(J,hb),e(hb,Rbe),e(Rbe,Aer),e(hb,Ler),e(hb,LU),e(LU,yer),e(hb,xer),e(J,$er),e(J,ub),e(ub,Pbe),e(Pbe,ker),e(ub,Ser),e(ub,yU),e(yU,Rer),e(ub,Per),e(ro,Ber),e(ro,pb),e(pb,Ier),e(pb,Bbe),e(Bbe,Ner),e(pb,qer),e(pb,Ibe),e(Ibe,jer),e(ro,Der),M(_b,ro,null),v(f,Noo,_),v(f,Bd,_),e(Bd,vb),e(vb,Nbe),M(F$,Nbe,null),e(Bd,Ger),e(Bd,qbe),e(qbe,Oer),v(f,qoo,_),v(f,jo,_),M(T$,jo,null),e(jo,Ver),e(jo,Id),e(Id,Xer),e(Id,xU),e(xU,zer),e(Id,Qer),e(Id,$U),e($U,Wer),e(Id,Uer),e(jo,Her),e(jo,M$),e(M$,Jer),e(M$,jbe),e(jbe,Yer),e(M$,Zer),e(jo,Ker),e(jo,Et),M(E$,Et,null),e(Et,eor),e(Et,Dbe),e(Dbe,oor),e(Et,ror),e(Et,Nd),e(Nd,tor),e(Nd,Gbe),e(Gbe,aor),e(Nd,nor),e(Nd,kU),e(kU,sor),e(Nd,lor),e(Et,ior),M(bb,Et,null),e(jo,dor),e(jo,to),M(C$,to,null),e(to,cor),e(to,Obe),e(Obe,mor),e(to,gor),e(to,an),e(an,hor),e(an,Vbe),e(Vbe,uor),e(an,por),e(an,Xbe),e(Xbe,_or),e(an,vor),e(an,zbe),e(zbe,bor),e(an,For),e(to,Tor),e(to,me),e(me,Fb),e(Fb,Qbe),e(Qbe,Mor),e(Fb,Eor),e(Fb,SU),e(SU,Cor),e(Fb,wor),e(me,Aor),e(me,Tb),e(Tb,Wbe),e(Wbe,Lor),e(Tb,yor),e(Tb,RU),e(RU,xor),e(Tb,$or),e(me,kor),e(me,Mb),e(Mb,Ube),e(Ube,Sor),e(Mb,Ror),e(Mb,PU),e(PU,Por),e(Mb,Bor),e(me,Ior),e(me,Eb),e(Eb,Hbe),e(Hbe,Nor),e(Eb,qor),e(Eb,BU),e(BU,jor),e(Eb,Dor),e(me,Gor),e(me,Cb),e(Cb,Jbe),e(Jbe,Oor),e(Cb,Vor),e(Cb,IU),e(IU,Xor),e(Cb,zor),e(me,Qor),e(me,wb),e(wb,Ybe),e(Ybe,Wor),e(wb,Uor),e(wb,NU),e(NU,Hor),e(wb,Jor),e(me,Yor),e(me,Ab),e(Ab,Zbe),e(Zbe,Zor),e(Ab,Kor),e(Ab,qU),e(qU,err),e(Ab,orr),e(me,rrr),e(me,Lb),e(Lb,Kbe),e(Kbe,trr),e(Lb,arr),e(Lb,jU),e(jU,nrr),e(Lb,srr),e(me,lrr),e(me,yb),e(yb,e3e),e(e3e,irr),e(yb,drr),e(yb,DU),e(DU,crr),e(yb,frr),e(me,mrr),e(me,xb),e(xb,o3e),e(o3e,grr),e(xb,hrr),e(xb,GU),e(GU,urr),e(xb,prr),e(me,_rr),e(me,$b),e($b,r3e),e(r3e,vrr),e($b,brr),e($b,OU),e(OU,Frr),e($b,Trr),e(me,Mrr),e(me,kb),e(kb,t3e),e(t3e,Err),e(kb,Crr),e(kb,VU),e(VU,wrr),e(kb,Arr),e(me,Lrr),e(me,Sb),e(Sb,a3e),e(a3e,yrr),e(Sb,xrr),e(Sb,XU),e(XU,$rr),e(Sb,krr),e(me,Srr),e(me,Rb),e(Rb,n3e),e(n3e,Rrr),e(Rb,Prr),e(Rb,zU),e(zU,Brr),e(Rb,Irr),e(me,Nrr),e(me,Pb),e(Pb,s3e),e(s3e,qrr),e(Pb,jrr),e(Pb,QU),e(QU,Drr),e(Pb,Grr),e(me,Orr),e(me,Bb),e(Bb,l3e),e(l3e,Vrr),e(Bb,Xrr),e(Bb,WU),e(WU,zrr),e(Bb,Qrr),e(me,Wrr),e(me,Ib),e(Ib,i3e),e(i3e,Urr),e(Ib,Hrr),e(Ib,UU),e(UU,Jrr),e(Ib,Yrr),e(me,Zrr),e(me,Nb),e(Nb,d3e),e(d3e,Krr),e(Nb,etr),e(Nb,HU),e(HU,otr),e(Nb,rtr),e(me,ttr),e(me,qb),e(qb,c3e),e(c3e,atr),e(qb,ntr),e(qb,JU),e(JU,str),e(qb,ltr),e(me,itr),e(me,jb),e(jb,f3e),e(f3e,dtr),e(jb,ctr),e(jb,YU),e(YU,ftr),e(jb,mtr),e(to,gtr),e(to,Db),e(Db,htr),e(Db,m3e),e(m3e,utr),e(Db,ptr),e(Db,g3e),e(g3e,_tr),e(to,vtr),M(Gb,to,null),v(f,joo,_),v(f,qd,_),e(qd,Ob),e(Ob,h3e),M(w$,h3e,null),e(qd,btr),e(qd,u3e),e(u3e,Ftr),v(f,Doo,_),v(f,Do,_),M(A$,Do,null),e(Do,Ttr),e(Do,jd),e(jd,Mtr),e(jd,ZU),e(ZU,Etr),e(jd,Ctr),e(jd,KU),e(KU,wtr),e(jd,Atr),e(Do,Ltr),e(Do,L$),e(L$,ytr),e(L$,p3e),e(p3e,xtr),e(L$,$tr),e(Do,ktr),e(Do,Ct),M(y$,Ct,null),e(Ct,Str),e(Ct,_3e),e(_3e,Rtr),e(Ct,Ptr),e(Ct,Dd),e(Dd,Btr),e(Dd,v3e),e(v3e,Itr),e(Dd,Ntr),e(Dd,eH),e(eH,qtr),e(Dd,jtr),e(Ct,Dtr),M(Vb,Ct,null),e(Do,Gtr),e(Do,ao),M(x$,ao,null),e(ao,Otr),e(ao,b3e),e(b3e,Vtr),e(ao,Xtr),e(ao,nn),e(nn,ztr),e(nn,F3e),e(F3e,Qtr),e(nn,Wtr),e(nn,T3e),e(T3e,Utr),e(nn,Htr),e(nn,M3e),e(M3e,Jtr),e(nn,Ytr),e(ao,Ztr),e(ao,q),e(q,Xb),e(Xb,E3e),e(E3e,Ktr),e(Xb,ear),e(Xb,oH),e(oH,oar),e(Xb,rar),e(q,tar),e(q,zb),e(zb,C3e),e(C3e,aar),e(zb,nar),e(zb,rH),e(rH,sar),e(zb,lar),e(q,iar),e(q,Qb),e(Qb,w3e),e(w3e,dar),e(Qb,car),e(Qb,tH),e(tH,far),e(Qb,mar),e(q,gar),e(q,Wb),e(Wb,A3e),e(A3e,har),e(Wb,uar),e(Wb,aH),e(aH,par),e(Wb,_ar),e(q,bar),e(q,Ub),e(Ub,L3e),e(L3e,Far),e(Ub,Tar),e(Ub,nH),e(nH,Mar),e(Ub,Ear),e(q,Car),e(q,Hb),e(Hb,y3e),e(y3e,war),e(Hb,Aar),e(Hb,sH),e(sH,Lar),e(Hb,yar),e(q,xar),e(q,Jb),e(Jb,x3e),e(x3e,$ar),e(Jb,kar),e(Jb,lH),e(lH,Sar),e(Jb,Rar),e(q,Par),e(q,Yb),e(Yb,$3e),e($3e,Bar),e(Yb,Iar),e(Yb,iH),e(iH,Nar),e(Yb,qar),e(q,jar),e(q,Zb),e(Zb,k3e),e(k3e,Dar),e(Zb,Gar),e(Zb,dH),e(dH,Oar),e(Zb,Var),e(q,Xar),e(q,Kb),e(Kb,S3e),e(S3e,zar),e(Kb,Qar),e(Kb,cH),e(cH,War),e(Kb,Uar),e(q,Har),e(q,e3),e(e3,R3e),e(R3e,Jar),e(e3,Yar),e(e3,fH),e(fH,Zar),e(e3,Kar),e(q,enr),e(q,o3),e(o3,P3e),e(P3e,onr),e(o3,rnr),e(o3,mH),e(mH,tnr),e(o3,anr),e(q,nnr),e(q,r3),e(r3,B3e),e(B3e,snr),e(r3,lnr),e(r3,gH),e(gH,inr),e(r3,dnr),e(q,cnr),e(q,t3),e(t3,I3e),e(I3e,fnr),e(t3,mnr),e(t3,hH),e(hH,gnr),e(t3,hnr),e(q,unr),e(q,a3),e(a3,N3e),e(N3e,pnr),e(a3,_nr),e(a3,uH),e(uH,vnr),e(a3,bnr),e(q,Fnr),e(q,n3),e(n3,q3e),e(q3e,Tnr),e(n3,Mnr),e(n3,pH),e(pH,Enr),e(n3,Cnr),e(q,wnr),e(q,s3),e(s3,j3e),e(j3e,Anr),e(s3,Lnr),e(s3,_H),e(_H,ynr),e(s3,xnr),e(q,$nr),e(q,l3),e(l3,D3e),e(D3e,knr),e(l3,Snr),e(l3,vH),e(vH,Rnr),e(l3,Pnr),e(q,Bnr),e(q,i3),e(i3,G3e),e(G3e,Inr),e(i3,Nnr),e(i3,bH),e(bH,qnr),e(i3,jnr),e(q,Dnr),e(q,d3),e(d3,O3e),e(O3e,Gnr),e(d3,Onr),e(d3,FH),e(FH,Vnr),e(d3,Xnr),e(q,znr),e(q,c3),e(c3,V3e),e(V3e,Qnr),e(c3,Wnr),e(c3,TH),e(TH,Unr),e(c3,Hnr),e(q,Jnr),e(q,f3),e(f3,X3e),e(X3e,Ynr),e(f3,Znr),e(f3,MH),e(MH,Knr),e(f3,esr),e(q,osr),e(q,m3),e(m3,z3e),e(z3e,rsr),e(m3,tsr),e(m3,EH),e(EH,asr),e(m3,nsr),e(q,ssr),e(q,g3),e(g3,Q3e),e(Q3e,lsr),e(g3,isr),e(g3,CH),e(CH,dsr),e(g3,csr),e(q,fsr),e(q,h3),e(h3,W3e),e(W3e,msr),e(h3,gsr),e(h3,wH),e(wH,hsr),e(h3,usr),e(q,psr),e(q,u3),e(u3,U3e),e(U3e,_sr),e(u3,vsr),e(u3,AH),e(AH,bsr),e(u3,Fsr),e(q,Tsr),e(q,p3),e(p3,H3e),e(H3e,Msr),e(p3,Esr),e(p3,LH),e(LH,Csr),e(p3,wsr),e(q,Asr),e(q,_3),e(_3,J3e),e(J3e,Lsr),e(_3,ysr),e(_3,yH),e(yH,xsr),e(_3,$sr),e(q,ksr),e(q,v3),e(v3,Y3e),e(Y3e,Ssr),e(v3,Rsr),e(v3,xH),e(xH,Psr),e(v3,Bsr),e(q,Isr),e(q,b3),e(b3,Z3e),e(Z3e,Nsr),e(b3,qsr),e(b3,$H),e($H,jsr),e(b3,Dsr),e(q,Gsr),e(q,F3),e(F3,K3e),e(K3e,Osr),e(F3,Vsr),e(F3,kH),e(kH,Xsr),e(F3,zsr),e(q,Qsr),e(q,T3),e(T3,e0e),e(e0e,Wsr),e(T3,Usr),e(T3,SH),e(SH,Hsr),e(T3,Jsr),e(q,Ysr),e(q,M3),e(M3,o0e),e(o0e,Zsr),e(M3,Ksr),e(M3,RH),e(RH,elr),e(M3,olr),e(q,rlr),e(q,E3),e(E3,r0e),e(r0e,tlr),e(E3,alr),e(E3,PH),e(PH,nlr),e(E3,slr),e(q,llr),e(q,C3),e(C3,t0e),e(t0e,ilr),e(C3,dlr),e(C3,BH),e(BH,clr),e(C3,flr),e(q,mlr),e(q,w3),e(w3,a0e),e(a0e,glr),e(w3,hlr),e(w3,IH),e(IH,ulr),e(w3,plr),e(q,_lr),e(q,A3),e(A3,n0e),e(n0e,vlr),e(A3,blr),e(A3,NH),e(NH,Flr),e(A3,Tlr),e(q,Mlr),e(q,L3),e(L3,s0e),e(s0e,Elr),e(L3,Clr),e(L3,qH),e(qH,wlr),e(L3,Alr),e(q,Llr),e(q,y3),e(y3,l0e),e(l0e,ylr),e(y3,xlr),e(y3,jH),e(jH,$lr),e(y3,klr),e(q,Slr),e(q,x3),e(x3,i0e),e(i0e,Rlr),e(x3,Plr),e(x3,DH),e(DH,Blr),e(x3,Ilr),e(q,Nlr),e(q,$3),e($3,d0e),e(d0e,qlr),e($3,jlr),e($3,GH),e(GH,Dlr),e($3,Glr),e(q,Olr),e(q,k3),e(k3,c0e),e(c0e,Vlr),e(k3,Xlr),e(k3,OH),e(OH,zlr),e(k3,Qlr),e(q,Wlr),e(q,S3),e(S3,f0e),e(f0e,Ulr),e(S3,Hlr),e(S3,VH),e(VH,Jlr),e(S3,Ylr),e(q,Zlr),e(q,R3),e(R3,m0e),e(m0e,Klr),e(R3,eir),e(R3,XH),e(XH,oir),e(R3,rir),e(q,tir),e(q,P3),e(P3,g0e),e(g0e,air),e(P3,nir),e(P3,zH),e(zH,sir),e(P3,lir),e(q,iir),e(q,B3),e(B3,h0e),e(h0e,dir),e(B3,cir),e(B3,QH),e(QH,fir),e(B3,mir),e(q,gir),e(q,I3),e(I3,u0e),e(u0e,hir),e(I3,uir),e(I3,WH),e(WH,pir),e(I3,_ir),e(q,vir),e(q,N3),e(N3,p0e),e(p0e,bir),e(N3,Fir),e(N3,UH),e(UH,Tir),e(N3,Mir),e(q,Eir),e(q,q3),e(q3,_0e),e(_0e,Cir),e(q3,wir),e(q3,HH),e(HH,Air),e(q3,Lir),e(q,yir),e(q,j3),e(j3,v0e),e(v0e,xir),e(j3,$ir),e(j3,JH),e(JH,kir),e(j3,Sir),e(q,Rir),e(q,D3),e(D3,b0e),e(b0e,Pir),e(D3,Bir),e(D3,YH),e(YH,Iir),e(D3,Nir),e(q,qir),e(q,G3),e(G3,F0e),e(F0e,jir),e(G3,Dir),e(G3,ZH),e(ZH,Gir),e(G3,Oir),e(q,Vir),e(q,O3),e(O3,T0e),e(T0e,Xir),e(O3,zir),e(O3,KH),e(KH,Qir),e(O3,Wir),e(q,Uir),e(q,V3),e(V3,M0e),e(M0e,Hir),e(V3,Jir),e(V3,eJ),e(eJ,Yir),e(V3,Zir),e(q,Kir),e(q,X3),e(X3,E0e),e(E0e,edr),e(X3,odr),e(X3,oJ),e(oJ,rdr),e(X3,tdr),e(ao,adr),e(ao,z3),e(z3,ndr),e(z3,C0e),e(C0e,sdr),e(z3,ldr),e(z3,w0e),e(w0e,idr),e(ao,ddr),M(Q3,ao,null),v(f,Goo,_),v(f,Gd,_),e(Gd,W3),e(W3,A0e),M($$,A0e,null),e(Gd,cdr),e(Gd,L0e),e(L0e,fdr),v(f,Ooo,_),v(f,Go,_),M(k$,Go,null),e(Go,mdr),e(Go,Od),e(Od,gdr),e(Od,rJ),e(rJ,hdr),e(Od,udr),e(Od,tJ),e(tJ,pdr),e(Od,_dr),e(Go,vdr),e(Go,S$),e(S$,bdr),e(S$,y0e),e(y0e,Fdr),e(S$,Tdr),e(Go,Mdr),e(Go,wt),M(R$,wt,null),e(wt,Edr),e(wt,x0e),e(x0e,Cdr),e(wt,wdr),e(wt,Vd),e(Vd,Adr),e(Vd,$0e),e($0e,Ldr),e(Vd,ydr),e(Vd,aJ),e(aJ,xdr),e(Vd,$dr),e(wt,kdr),M(U3,wt,null),e(Go,Sdr),e(Go,no),M(P$,no,null),e(no,Rdr),e(no,k0e),e(k0e,Pdr),e(no,Bdr),e(no,sn),e(sn,Idr),e(sn,S0e),e(S0e,Ndr),e(sn,qdr),e(sn,R0e),e(R0e,jdr),e(sn,Ddr),e(sn,P0e),e(P0e,Gdr),e(sn,Odr),e(no,Vdr),e(no,K),e(K,H3),e(H3,B0e),e(B0e,Xdr),e(H3,zdr),e(H3,nJ),e(nJ,Qdr),e(H3,Wdr),e(K,Udr),e(K,J3),e(J3,I0e),e(I0e,Hdr),e(J3,Jdr),e(J3,sJ),e(sJ,Ydr),e(J3,Zdr),e(K,Kdr),e(K,Y3),e(Y3,N0e),e(N0e,ecr),e(Y3,ocr),e(Y3,lJ),e(lJ,rcr),e(Y3,tcr),e(K,acr),e(K,Z3),e(Z3,q0e),e(q0e,ncr),e(Z3,scr),e(Z3,iJ),e(iJ,lcr),e(Z3,icr),e(K,dcr),e(K,K3),e(K3,j0e),e(j0e,ccr),e(K3,fcr),e(K3,dJ),e(dJ,mcr),e(K3,gcr),e(K,hcr),e(K,e0),e(e0,D0e),e(D0e,ucr),e(e0,pcr),e(e0,cJ),e(cJ,_cr),e(e0,vcr),e(K,bcr),e(K,o0),e(o0,G0e),e(G0e,Fcr),e(o0,Tcr),e(o0,fJ),e(fJ,Mcr),e(o0,Ecr),e(K,Ccr),e(K,r0),e(r0,O0e),e(O0e,wcr),e(r0,Acr),e(r0,mJ),e(mJ,Lcr),e(r0,ycr),e(K,xcr),e(K,t0),e(t0,V0e),e(V0e,$cr),e(t0,kcr),e(t0,gJ),e(gJ,Scr),e(t0,Rcr),e(K,Pcr),e(K,a0),e(a0,X0e),e(X0e,Bcr),e(a0,Icr),e(a0,hJ),e(hJ,Ncr),e(a0,qcr),e(K,jcr),e(K,n0),e(n0,z0e),e(z0e,Dcr),e(n0,Gcr),e(n0,uJ),e(uJ,Ocr),e(n0,Vcr),e(K,Xcr),e(K,s0),e(s0,Q0e),e(Q0e,zcr),e(s0,Qcr),e(s0,pJ),e(pJ,Wcr),e(s0,Ucr),e(K,Hcr),e(K,l0),e(l0,W0e),e(W0e,Jcr),e(l0,Ycr),e(l0,_J),e(_J,Zcr),e(l0,Kcr),e(K,efr),e(K,i0),e(i0,U0e),e(U0e,ofr),e(i0,rfr),e(i0,vJ),e(vJ,tfr),e(i0,afr),e(K,nfr),e(K,d0),e(d0,H0e),e(H0e,sfr),e(d0,lfr),e(d0,bJ),e(bJ,ifr),e(d0,dfr),e(K,cfr),e(K,c0),e(c0,J0e),e(J0e,ffr),e(c0,mfr),e(c0,FJ),e(FJ,gfr),e(c0,hfr),e(K,ufr),e(K,f0),e(f0,Y0e),e(Y0e,pfr),e(f0,_fr),e(f0,TJ),e(TJ,vfr),e(f0,bfr),e(K,Ffr),e(K,m0),e(m0,Z0e),e(Z0e,Tfr),e(m0,Mfr),e(m0,MJ),e(MJ,Efr),e(m0,Cfr),e(K,wfr),e(K,g0),e(g0,K0e),e(K0e,Afr),e(g0,Lfr),e(g0,EJ),e(EJ,yfr),e(g0,xfr),e(K,$fr),e(K,h0),e(h0,eFe),e(eFe,kfr),e(h0,Sfr),e(h0,CJ),e(CJ,Rfr),e(h0,Pfr),e(K,Bfr),e(K,u0),e(u0,oFe),e(oFe,Ifr),e(u0,Nfr),e(u0,wJ),e(wJ,qfr),e(u0,jfr),e(K,Dfr),e(K,p0),e(p0,rFe),e(rFe,Gfr),e(p0,Ofr),e(p0,AJ),e(AJ,Vfr),e(p0,Xfr),e(K,zfr),e(K,_0),e(_0,tFe),e(tFe,Qfr),e(_0,Wfr),e(_0,LJ),e(LJ,Ufr),e(_0,Hfr),e(K,Jfr),e(K,v0),e(v0,aFe),e(aFe,Yfr),e(v0,Zfr),e(v0,yJ),e(yJ,Kfr),e(v0,emr),e(K,omr),e(K,b0),e(b0,nFe),e(nFe,rmr),e(b0,tmr),e(b0,xJ),e(xJ,amr),e(b0,nmr),e(K,smr),e(K,F0),e(F0,sFe),e(sFe,lmr),e(F0,imr),e(F0,$J),e($J,dmr),e(F0,cmr),e(K,fmr),e(K,T0),e(T0,lFe),e(lFe,mmr),e(T0,gmr),e(T0,kJ),e(kJ,hmr),e(T0,umr),e(K,pmr),e(K,M0),e(M0,iFe),e(iFe,_mr),e(M0,vmr),e(M0,SJ),e(SJ,bmr),e(M0,Fmr),e(K,Tmr),e(K,E0),e(E0,dFe),e(dFe,Mmr),e(E0,Emr),e(E0,RJ),e(RJ,Cmr),e(E0,wmr),e(K,Amr),e(K,C0),e(C0,cFe),e(cFe,Lmr),e(C0,ymr),e(C0,PJ),e(PJ,xmr),e(C0,$mr),e(K,kmr),e(K,w0),e(w0,fFe),e(fFe,Smr),e(w0,Rmr),e(w0,BJ),e(BJ,Pmr),e(w0,Bmr),e(K,Imr),e(K,A0),e(A0,mFe),e(mFe,Nmr),e(A0,qmr),e(A0,IJ),e(IJ,jmr),e(A0,Dmr),e(no,Gmr),e(no,L0),e(L0,Omr),e(L0,gFe),e(gFe,Vmr),e(L0,Xmr),e(L0,hFe),e(hFe,zmr),e(no,Qmr),M(y0,no,null),v(f,Voo,_),v(f,Xd,_),e(Xd,x0),e(x0,uFe),M(B$,uFe,null),e(Xd,Wmr),e(Xd,pFe),e(pFe,Umr),v(f,Xoo,_),v(f,Oo,_),M(I$,Oo,null),e(Oo,Hmr),e(Oo,zd),e(zd,Jmr),e(zd,NJ),e(NJ,Ymr),e(zd,Zmr),e(zd,qJ),e(qJ,Kmr),e(zd,egr),e(Oo,ogr),e(Oo,N$),e(N$,rgr),e(N$,_Fe),e(_Fe,tgr),e(N$,agr),e(Oo,ngr),e(Oo,At),M(q$,At,null),e(At,sgr),e(At,vFe),e(vFe,lgr),e(At,igr),e(At,Qd),e(Qd,dgr),e(Qd,bFe),e(bFe,cgr),e(Qd,fgr),e(Qd,jJ),e(jJ,mgr),e(Qd,ggr),e(At,hgr),M($0,At,null),e(Oo,ugr),e(Oo,so),M(j$,so,null),e(so,pgr),e(so,FFe),e(FFe,_gr),e(so,vgr),e(so,ln),e(ln,bgr),e(ln,TFe),e(TFe,Fgr),e(ln,Tgr),e(ln,MFe),e(MFe,Mgr),e(ln,Egr),e(ln,EFe),e(EFe,Cgr),e(ln,wgr),e(so,Agr),e(so,Ue),e(Ue,k0),e(k0,CFe),e(CFe,Lgr),e(k0,ygr),e(k0,DJ),e(DJ,xgr),e(k0,$gr),e(Ue,kgr),e(Ue,S0),e(S0,wFe),e(wFe,Sgr),e(S0,Rgr),e(S0,GJ),e(GJ,Pgr),e(S0,Bgr),e(Ue,Igr),e(Ue,R0),e(R0,AFe),e(AFe,Ngr),e(R0,qgr),e(R0,OJ),e(OJ,jgr),e(R0,Dgr),e(Ue,Ggr),e(Ue,P0),e(P0,LFe),e(LFe,Ogr),e(P0,Vgr),e(P0,VJ),e(VJ,Xgr),e(P0,zgr),e(Ue,Qgr),e(Ue,B0),e(B0,yFe),e(yFe,Wgr),e(B0,Ugr),e(B0,XJ),e(XJ,Hgr),e(B0,Jgr),e(Ue,Ygr),e(Ue,I0),e(I0,xFe),e(xFe,Zgr),e(I0,Kgr),e(I0,zJ),e(zJ,ehr),e(I0,ohr),e(Ue,rhr),e(Ue,N0),e(N0,$Fe),e($Fe,thr),e(N0,ahr),e(N0,QJ),e(QJ,nhr),e(N0,shr),e(so,lhr),e(so,q0),e(q0,ihr),e(q0,kFe),e(kFe,dhr),e(q0,chr),e(q0,SFe),e(SFe,fhr),e(so,mhr),M(j0,so,null),v(f,zoo,_),v(f,Wd,_),e(Wd,D0),e(D0,RFe),M(D$,RFe,null),e(Wd,ghr),e(Wd,PFe),e(PFe,hhr),v(f,Qoo,_),v(f,Vo,_),M(G$,Vo,null),e(Vo,uhr),e(Vo,Ud),e(Ud,phr),e(Ud,WJ),e(WJ,_hr),e(Ud,vhr),e(Ud,UJ),e(UJ,bhr),e(Ud,Fhr),e(Vo,Thr),e(Vo,O$),e(O$,Mhr),e(O$,BFe),e(BFe,Ehr),e(O$,Chr),e(Vo,whr),e(Vo,Lt),M(V$,Lt,null),e(Lt,Ahr),e(Lt,IFe),e(IFe,Lhr),e(Lt,yhr),e(Lt,Hd),e(Hd,xhr),e(Hd,NFe),e(NFe,$hr),e(Hd,khr),e(Hd,HJ),e(HJ,Shr),e(Hd,Rhr),e(Lt,Phr),M(G0,Lt,null),e(Vo,Bhr),e(Vo,lo),M(X$,lo,null),e(lo,Ihr),e(lo,qFe),e(qFe,Nhr),e(lo,qhr),e(lo,dn),e(dn,jhr),e(dn,jFe),e(jFe,Dhr),e(dn,Ghr),e(dn,DFe),e(DFe,Ohr),e(dn,Vhr),e(dn,GFe),e(GFe,Xhr),e(dn,zhr),e(lo,Qhr),e(lo,H),e(H,O0),e(O0,OFe),e(OFe,Whr),e(O0,Uhr),e(O0,JJ),e(JJ,Hhr),e(O0,Jhr),e(H,Yhr),e(H,V0),e(V0,VFe),e(VFe,Zhr),e(V0,Khr),e(V0,YJ),e(YJ,eur),e(V0,our),e(H,rur),e(H,X0),e(X0,XFe),e(XFe,tur),e(X0,aur),e(X0,ZJ),e(ZJ,nur),e(X0,sur),e(H,lur),e(H,z0),e(z0,zFe),e(zFe,iur),e(z0,dur),e(z0,KJ),e(KJ,cur),e(z0,fur),e(H,mur),e(H,Q0),e(Q0,QFe),e(QFe,gur),e(Q0,hur),e(Q0,eY),e(eY,uur),e(Q0,pur),e(H,_ur),e(H,W0),e(W0,WFe),e(WFe,vur),e(W0,bur),e(W0,oY),e(oY,Fur),e(W0,Tur),e(H,Mur),e(H,U0),e(U0,UFe),e(UFe,Eur),e(U0,Cur),e(U0,rY),e(rY,wur),e(U0,Aur),e(H,Lur),e(H,H0),e(H0,HFe),e(HFe,yur),e(H0,xur),e(H0,tY),e(tY,$ur),e(H0,kur),e(H,Sur),e(H,J0),e(J0,JFe),e(JFe,Rur),e(J0,Pur),e(J0,aY),e(aY,Bur),e(J0,Iur),e(H,Nur),e(H,Y0),e(Y0,YFe),e(YFe,qur),e(Y0,jur),e(Y0,nY),e(nY,Dur),e(Y0,Gur),e(H,Our),e(H,Z0),e(Z0,ZFe),e(ZFe,Vur),e(Z0,Xur),e(Z0,sY),e(sY,zur),e(Z0,Qur),e(H,Wur),e(H,K0),e(K0,KFe),e(KFe,Uur),e(K0,Hur),e(K0,lY),e(lY,Jur),e(K0,Yur),e(H,Zur),e(H,eF),e(eF,eTe),e(eTe,Kur),e(eF,epr),e(eF,iY),e(iY,opr),e(eF,rpr),e(H,tpr),e(H,oF),e(oF,oTe),e(oTe,apr),e(oF,npr),e(oF,dY),e(dY,spr),e(oF,lpr),e(H,ipr),e(H,rF),e(rF,rTe),e(rTe,dpr),e(rF,cpr),e(rF,cY),e(cY,fpr),e(rF,mpr),e(H,gpr),e(H,tF),e(tF,tTe),e(tTe,hpr),e(tF,upr),e(tF,fY),e(fY,ppr),e(tF,_pr),e(H,vpr),e(H,aF),e(aF,aTe),e(aTe,bpr),e(aF,Fpr),e(aF,mY),e(mY,Tpr),e(aF,Mpr),e(H,Epr),e(H,nF),e(nF,nTe),e(nTe,Cpr),e(nF,wpr),e(nF,gY),e(gY,Apr),e(nF,Lpr),e(H,ypr),e(H,sF),e(sF,sTe),e(sTe,xpr),e(sF,$pr),e(sF,hY),e(hY,kpr),e(sF,Spr),e(H,Rpr),e(H,lF),e(lF,lTe),e(lTe,Ppr),e(lF,Bpr),e(lF,uY),e(uY,Ipr),e(lF,Npr),e(H,qpr),e(H,iF),e(iF,iTe),e(iTe,jpr),e(iF,Dpr),e(iF,pY),e(pY,Gpr),e(iF,Opr),e(H,Vpr),e(H,dF),e(dF,dTe),e(dTe,Xpr),e(dF,zpr),e(dF,_Y),e(_Y,Qpr),e(dF,Wpr),e(H,Upr),e(H,cF),e(cF,cTe),e(cTe,Hpr),e(cF,Jpr),e(cF,vY),e(vY,Ypr),e(cF,Zpr),e(H,Kpr),e(H,fF),e(fF,fTe),e(fTe,e_r),e(fF,o_r),e(fF,bY),e(bY,r_r),e(fF,t_r),e(H,a_r),e(H,mF),e(mF,mTe),e(mTe,n_r),e(mF,s_r),e(mF,FY),e(FY,l_r),e(mF,i_r),e(H,d_r),e(H,gF),e(gF,gTe),e(gTe,c_r),e(gF,f_r),e(gF,TY),e(TY,m_r),e(gF,g_r),e(H,h_r),e(H,hF),e(hF,hTe),e(hTe,u_r),e(hF,p_r),e(hF,MY),e(MY,__r),e(hF,v_r),e(H,b_r),e(H,uF),e(uF,uTe),e(uTe,F_r),e(uF,T_r),e(uF,EY),e(EY,M_r),e(uF,E_r),e(H,C_r),e(H,pF),e(pF,pTe),e(pTe,w_r),e(pF,A_r),e(pF,CY),e(CY,L_r),e(pF,y_r),e(H,x_r),e(H,_F),e(_F,_Te),e(_Te,$_r),e(_F,k_r),e(_F,wY),e(wY,S_r),e(_F,R_r),e(H,P_r),e(H,vF),e(vF,vTe),e(vTe,B_r),e(vF,I_r),e(vF,AY),e(AY,N_r),e(vF,q_r),e(H,j_r),e(H,bF),e(bF,bTe),e(bTe,D_r),e(bF,G_r),e(bF,LY),e(LY,O_r),e(bF,V_r),e(H,X_r),e(H,FF),e(FF,FTe),e(FTe,z_r),e(FF,Q_r),e(FF,yY),e(yY,W_r),e(FF,U_r),e(H,H_r),e(H,TF),e(TF,TTe),e(TTe,J_r),e(TF,Y_r),e(TF,xY),e(xY,Z_r),e(TF,K_r),e(H,e2r),e(H,MF),e(MF,MTe),e(MTe,o2r),e(MF,r2r),e(MF,$Y),e($Y,t2r),e(MF,a2r),e(H,n2r),e(H,EF),e(EF,ETe),e(ETe,s2r),e(EF,l2r),e(EF,kY),e(kY,i2r),e(EF,d2r),e(H,c2r),e(H,CF),e(CF,CTe),e(CTe,f2r),e(CF,m2r),e(CF,SY),e(SY,g2r),e(CF,h2r),e(H,u2r),e(H,wF),e(wF,wTe),e(wTe,p2r),e(wF,_2r),e(wF,RY),e(RY,v2r),e(wF,b2r),e(H,F2r),e(H,AF),e(AF,ATe),e(ATe,T2r),e(AF,M2r),e(AF,PY),e(PY,E2r),e(AF,C2r),e(H,w2r),e(H,LF),e(LF,LTe),e(LTe,A2r),e(LF,L2r),e(LF,BY),e(BY,y2r),e(LF,x2r),e(lo,$2r),e(lo,yF),e(yF,k2r),e(yF,yTe),e(yTe,S2r),e(yF,R2r),e(yF,xTe),e(xTe,P2r),e(lo,B2r),M(xF,lo,null),v(f,Woo,_),v(f,Jd,_),e(Jd,$F),e($F,$Te),M(z$,$Te,null),e(Jd,I2r),e(Jd,kTe),e(kTe,N2r),v(f,Uoo,_),v(f,Xo,_),M(Q$,Xo,null),e(Xo,q2r),e(Xo,Yd),e(Yd,j2r),e(Yd,IY),e(IY,D2r),e(Yd,G2r),e(Yd,NY),e(NY,O2r),e(Yd,V2r),e(Xo,X2r),e(Xo,W$),e(W$,z2r),e(W$,STe),e(STe,Q2r),e(W$,W2r),e(Xo,U2r),e(Xo,yt),M(U$,yt,null),e(yt,H2r),e(yt,RTe),e(RTe,J2r),e(yt,Y2r),e(yt,Zd),e(Zd,Z2r),e(Zd,PTe),e(PTe,K2r),e(Zd,evr),e(Zd,qY),e(qY,ovr),e(Zd,rvr),e(yt,tvr),M(kF,yt,null),e(Xo,avr),e(Xo,io),M(H$,io,null),e(io,nvr),e(io,BTe),e(BTe,svr),e(io,lvr),e(io,cn),e(cn,ivr),e(cn,ITe),e(ITe,dvr),e(cn,cvr),e(cn,NTe),e(NTe,fvr),e(cn,mvr),e(cn,qTe),e(qTe,gvr),e(cn,hvr),e(io,uvr),e(io,O),e(O,SF),e(SF,jTe),e(jTe,pvr),e(SF,_vr),e(SF,jY),e(jY,vvr),e(SF,bvr),e(O,Fvr),e(O,RF),e(RF,DTe),e(DTe,Tvr),e(RF,Mvr),e(RF,DY),e(DY,Evr),e(RF,Cvr),e(O,wvr),e(O,PF),e(PF,GTe),e(GTe,Avr),e(PF,Lvr),e(PF,GY),e(GY,yvr),e(PF,xvr),e(O,$vr),e(O,BF),e(BF,OTe),e(OTe,kvr),e(BF,Svr),e(BF,OY),e(OY,Rvr),e(BF,Pvr),e(O,Bvr),e(O,IF),e(IF,VTe),e(VTe,Ivr),e(IF,Nvr),e(IF,VY),e(VY,qvr),e(IF,jvr),e(O,Dvr),e(O,NF),e(NF,XTe),e(XTe,Gvr),e(NF,Ovr),e(NF,XY),e(XY,Vvr),e(NF,Xvr),e(O,zvr),e(O,qF),e(qF,zTe),e(zTe,Qvr),e(qF,Wvr),e(qF,zY),e(zY,Uvr),e(qF,Hvr),e(O,Jvr),e(O,jF),e(jF,QTe),e(QTe,Yvr),e(jF,Zvr),e(jF,QY),e(QY,Kvr),e(jF,e4r),e(O,o4r),e(O,DF),e(DF,WTe),e(WTe,r4r),e(DF,t4r),e(DF,WY),e(WY,a4r),e(DF,n4r),e(O,s4r),e(O,GF),e(GF,UTe),e(UTe,l4r),e(GF,i4r),e(GF,UY),e(UY,d4r),e(GF,c4r),e(O,f4r),e(O,OF),e(OF,HTe),e(HTe,m4r),e(OF,g4r),e(OF,HY),e(HY,h4r),e(OF,u4r),e(O,p4r),e(O,VF),e(VF,JTe),e(JTe,_4r),e(VF,v4r),e(VF,JY),e(JY,b4r),e(VF,F4r),e(O,T4r),e(O,XF),e(XF,YTe),e(YTe,M4r),e(XF,E4r),e(XF,YY),e(YY,C4r),e(XF,w4r),e(O,A4r),e(O,zF),e(zF,ZTe),e(ZTe,L4r),e(zF,y4r),e(zF,ZY),e(ZY,x4r),e(zF,$4r),e(O,k4r),e(O,QF),e(QF,KTe),e(KTe,S4r),e(QF,R4r),e(QF,KY),e(KY,P4r),e(QF,B4r),e(O,I4r),e(O,WF),e(WF,eMe),e(eMe,N4r),e(WF,q4r),e(WF,eZ),e(eZ,j4r),e(WF,D4r),e(O,G4r),e(O,UF),e(UF,oMe),e(oMe,O4r),e(UF,V4r),e(UF,oZ),e(oZ,X4r),e(UF,z4r),e(O,Q4r),e(O,HF),e(HF,rMe),e(rMe,W4r),e(HF,U4r),e(HF,rZ),e(rZ,H4r),e(HF,J4r),e(O,Y4r),e(O,JF),e(JF,tMe),e(tMe,Z4r),e(JF,K4r),e(JF,tZ),e(tZ,e1r),e(JF,o1r),e(O,r1r),e(O,YF),e(YF,aMe),e(aMe,t1r),e(YF,a1r),e(YF,aZ),e(aZ,n1r),e(YF,s1r),e(O,l1r),e(O,ZF),e(ZF,nMe),e(nMe,i1r),e(ZF,d1r),e(ZF,nZ),e(nZ,c1r),e(ZF,f1r),e(O,m1r),e(O,KF),e(KF,sMe),e(sMe,g1r),e(KF,h1r),e(KF,sZ),e(sZ,u1r),e(KF,p1r),e(O,_1r),e(O,eT),e(eT,lMe),e(lMe,v1r),e(eT,b1r),e(eT,lZ),e(lZ,F1r),e(eT,T1r),e(O,M1r),e(O,oT),e(oT,iMe),e(iMe,E1r),e(oT,C1r),e(oT,iZ),e(iZ,w1r),e(oT,A1r),e(O,L1r),e(O,rT),e(rT,dMe),e(dMe,y1r),e(rT,x1r),e(rT,dZ),e(dZ,$1r),e(rT,k1r),e(O,S1r),e(O,tT),e(tT,cMe),e(cMe,R1r),e(tT,P1r),e(tT,cZ),e(cZ,B1r),e(tT,I1r),e(O,N1r),e(O,aT),e(aT,fMe),e(fMe,q1r),e(aT,j1r),e(aT,fZ),e(fZ,D1r),e(aT,G1r),e(O,O1r),e(O,nT),e(nT,mMe),e(mMe,V1r),e(nT,X1r),e(nT,mZ),e(mZ,z1r),e(nT,Q1r),e(O,W1r),e(O,sT),e(sT,gMe),e(gMe,U1r),e(sT,H1r),e(sT,gZ),e(gZ,J1r),e(sT,Y1r),e(O,Z1r),e(O,lT),e(lT,hMe),e(hMe,K1r),e(lT,ebr),e(lT,hZ),e(hZ,obr),e(lT,rbr),e(O,tbr),e(O,iT),e(iT,uMe),e(uMe,abr),e(iT,nbr),e(iT,uZ),e(uZ,sbr),e(iT,lbr),e(O,ibr),e(O,dT),e(dT,pMe),e(pMe,dbr),e(dT,cbr),e(dT,pZ),e(pZ,fbr),e(dT,mbr),e(O,gbr),e(O,cT),e(cT,_Me),e(_Me,hbr),e(cT,ubr),e(cT,_Z),e(_Z,pbr),e(cT,_br),e(O,vbr),e(O,fT),e(fT,vMe),e(vMe,bbr),e(fT,Fbr),e(fT,vZ),e(vZ,Tbr),e(fT,Mbr),e(O,Ebr),e(O,mT),e(mT,bMe),e(bMe,Cbr),e(mT,wbr),e(mT,bZ),e(bZ,Abr),e(mT,Lbr),e(O,ybr),e(O,gT),e(gT,FMe),e(FMe,xbr),e(gT,$br),e(gT,FZ),e(FZ,kbr),e(gT,Sbr),e(O,Rbr),e(O,hT),e(hT,TMe),e(TMe,Pbr),e(hT,Bbr),e(hT,TZ),e(TZ,Ibr),e(hT,Nbr),e(O,qbr),e(O,uT),e(uT,MMe),e(MMe,jbr),e(uT,Dbr),e(uT,MZ),e(MZ,Gbr),e(uT,Obr),e(O,Vbr),e(O,pT),e(pT,EMe),e(EMe,Xbr),e(pT,zbr),e(pT,EZ),e(EZ,Qbr),e(pT,Wbr),e(O,Ubr),e(O,_T),e(_T,CMe),e(CMe,Hbr),e(_T,Jbr),e(_T,CZ),e(CZ,Ybr),e(_T,Zbr),e(O,Kbr),e(O,vT),e(vT,wMe),e(wMe,e3r),e(vT,o3r),e(vT,wZ),e(wZ,r3r),e(vT,t3r),e(O,a3r),e(O,bT),e(bT,AMe),e(AMe,n3r),e(bT,s3r),e(bT,AZ),e(AZ,l3r),e(bT,i3r),e(O,d3r),e(O,FT),e(FT,LMe),e(LMe,c3r),e(FT,f3r),e(FT,LZ),e(LZ,m3r),e(FT,g3r),e(O,h3r),e(O,TT),e(TT,yMe),e(yMe,u3r),e(TT,p3r),e(TT,yZ),e(yZ,_3r),e(TT,v3r),e(O,b3r),e(O,MT),e(MT,xMe),e(xMe,F3r),e(MT,T3r),e(MT,xZ),e(xZ,M3r),e(MT,E3r),e(O,C3r),e(O,ET),e(ET,$Me),e($Me,w3r),e(ET,A3r),e(ET,$Z),e($Z,L3r),e(ET,y3r),e(O,x3r),e(O,CT),e(CT,kMe),e(kMe,$3r),e(CT,k3r),e(CT,kZ),e(kZ,S3r),e(CT,R3r),e(io,P3r),e(io,wT),e(wT,B3r),e(wT,SMe),e(SMe,I3r),e(wT,N3r),e(wT,RMe),e(RMe,q3r),e(io,j3r),M(AT,io,null),v(f,Hoo,_),v(f,Kd,_),e(Kd,LT),e(LT,PMe),M(J$,PMe,null),e(Kd,D3r),e(Kd,BMe),e(BMe,G3r),v(f,Joo,_),v(f,zo,_),M(Y$,zo,null),e(zo,O3r),e(zo,ec),e(ec,V3r),e(ec,SZ),e(SZ,X3r),e(ec,z3r),e(ec,RZ),e(RZ,Q3r),e(ec,W3r),e(zo,U3r),e(zo,Z$),e(Z$,H3r),e(Z$,IMe),e(IMe,J3r),e(Z$,Y3r),e(zo,Z3r),e(zo,xt),M(K$,xt,null),e(xt,K3r),e(xt,NMe),e(NMe,e0r),e(xt,o0r),e(xt,oc),e(oc,r0r),e(oc,qMe),e(qMe,t0r),e(oc,a0r),e(oc,PZ),e(PZ,n0r),e(oc,s0r),e(xt,l0r),M(yT,xt,null),e(zo,i0r),e(zo,co),M(ek,co,null),e(co,d0r),e(co,jMe),e(jMe,c0r),e(co,f0r),e(co,fn),e(fn,m0r),e(fn,DMe),e(DMe,g0r),e(fn,h0r),e(fn,GMe),e(GMe,u0r),e(fn,p0r),e(fn,OMe),e(OMe,_0r),e(fn,v0r),e(co,b0r),e(co,VMe),e(VMe,xT),e(xT,XMe),e(XMe,F0r),e(xT,T0r),e(xT,BZ),e(BZ,M0r),e(xT,E0r),e(co,C0r),e(co,$T),e($T,w0r),e($T,zMe),e(zMe,A0r),e($T,L0r),e($T,QMe),e(QMe,y0r),e(co,x0r),M(kT,co,null),v(f,Yoo,_),v(f,rc,_),e(rc,ST),e(ST,WMe),M(ok,WMe,null),e(rc,$0r),e(rc,UMe),e(UMe,k0r),v(f,Zoo,_),v(f,Qo,_),M(rk,Qo,null),e(Qo,S0r),e(Qo,tc),e(tc,R0r),e(tc,IZ),e(IZ,P0r),e(tc,B0r),e(tc,NZ),e(NZ,I0r),e(tc,N0r),e(Qo,q0r),e(Qo,tk),e(tk,j0r),e(tk,HMe),e(HMe,D0r),e(tk,G0r),e(Qo,O0r),e(Qo,$t),M(ak,$t,null),e($t,V0r),e($t,JMe),e(JMe,X0r),e($t,z0r),e($t,ac),e(ac,Q0r),e(ac,YMe),e(YMe,W0r),e(ac,U0r),e(ac,qZ),e(qZ,H0r),e(ac,J0r),e($t,Y0r),M(RT,$t,null),e(Qo,Z0r),e(Qo,fo),M(nk,fo,null),e(fo,K0r),e(fo,ZMe),e(ZMe,eFr),e(fo,oFr),e(fo,mn),e(mn,rFr),e(mn,KMe),e(KMe,tFr),e(mn,aFr),e(mn,eEe),e(eEe,nFr),e(mn,sFr),e(mn,oEe),e(oEe,lFr),e(mn,iFr),e(fo,dFr),e(fo,nc),e(nc,PT),e(PT,rEe),e(rEe,cFr),e(PT,fFr),e(PT,jZ),e(jZ,mFr),e(PT,gFr),e(nc,hFr),e(nc,BT),e(BT,tEe),e(tEe,uFr),e(BT,pFr),e(BT,DZ),e(DZ,_Fr),e(BT,vFr),e(nc,bFr),e(nc,IT),e(IT,aEe),e(aEe,FFr),e(IT,TFr),e(IT,GZ),e(GZ,MFr),e(IT,EFr),e(fo,CFr),e(fo,NT),e(NT,wFr),e(NT,nEe),e(nEe,AFr),e(NT,LFr),e(NT,sEe),e(sEe,yFr),e(fo,xFr),M(qT,fo,null),v(f,Koo,_),v(f,sc,_),e(sc,jT),e(jT,lEe),M(sk,lEe,null),e(sc,$Fr),e(sc,iEe),e(iEe,kFr),v(f,ero,_),v(f,Wo,_),M(lk,Wo,null),e(Wo,SFr),e(Wo,lc),e(lc,RFr),e(lc,OZ),e(OZ,PFr),e(lc,BFr),e(lc,VZ),e(VZ,IFr),e(lc,NFr),e(Wo,qFr),e(Wo,ik),e(ik,jFr),e(ik,dEe),e(dEe,DFr),e(ik,GFr),e(Wo,OFr),e(Wo,kt),M(dk,kt,null),e(kt,VFr),e(kt,cEe),e(cEe,XFr),e(kt,zFr),e(kt,ic),e(ic,QFr),e(ic,fEe),e(fEe,WFr),e(ic,UFr),e(ic,XZ),e(XZ,HFr),e(ic,JFr),e(kt,YFr),M(DT,kt,null),e(Wo,ZFr),e(Wo,mo),M(ck,mo,null),e(mo,KFr),e(mo,mEe),e(mEe,eTr),e(mo,oTr),e(mo,gn),e(gn,rTr),e(gn,gEe),e(gEe,tTr),e(gn,aTr),e(gn,hEe),e(hEe,nTr),e(gn,sTr),e(gn,uEe),e(uEe,lTr),e(gn,iTr),e(mo,dTr),e(mo,ve),e(ve,GT),e(GT,pEe),e(pEe,cTr),e(GT,fTr),e(GT,zZ),e(zZ,mTr),e(GT,gTr),e(ve,hTr),e(ve,OT),e(OT,_Ee),e(_Ee,uTr),e(OT,pTr),e(OT,QZ),e(QZ,_Tr),e(OT,vTr),e(ve,bTr),e(ve,VT),e(VT,vEe),e(vEe,FTr),e(VT,TTr),e(VT,WZ),e(WZ,MTr),e(VT,ETr),e(ve,CTr),e(ve,XT),e(XT,bEe),e(bEe,wTr),e(XT,ATr),e(XT,UZ),e(UZ,LTr),e(XT,yTr),e(ve,xTr),e(ve,El),e(El,FEe),e(FEe,$Tr),e(El,kTr),e(El,HZ),e(HZ,STr),e(El,RTr),e(El,JZ),e(JZ,PTr),e(El,BTr),e(ve,ITr),e(ve,zT),e(zT,TEe),e(TEe,NTr),e(zT,qTr),e(zT,YZ),e(YZ,jTr),e(zT,DTr),e(ve,GTr),e(ve,Cl),e(Cl,MEe),e(MEe,OTr),e(Cl,VTr),e(Cl,ZZ),e(ZZ,XTr),e(Cl,zTr),e(Cl,KZ),e(KZ,QTr),e(Cl,WTr),e(ve,UTr),e(ve,QT),e(QT,EEe),e(EEe,HTr),e(QT,JTr),e(QT,eK),e(eK,YTr),e(QT,ZTr),e(ve,KTr),e(ve,St),e(St,CEe),e(CEe,eMr),e(St,oMr),e(St,oK),e(oK,rMr),e(St,tMr),e(St,rK),e(rK,aMr),e(St,nMr),e(St,tK),e(tK,sMr),e(St,lMr),e(ve,iMr),e(ve,WT),e(WT,wEe),e(wEe,dMr),e(WT,cMr),e(WT,aK),e(aK,fMr),e(WT,mMr),e(ve,gMr),e(ve,UT),e(UT,AEe),e(AEe,hMr),e(UT,uMr),e(UT,nK),e(nK,pMr),e(UT,_Mr),e(ve,vMr),e(ve,HT),e(HT,LEe),e(LEe,bMr),e(HT,FMr),e(HT,sK),e(sK,TMr),e(HT,MMr),e(ve,EMr),e(ve,JT),e(JT,yEe),e(yEe,CMr),e(JT,wMr),e(JT,lK),e(lK,AMr),e(JT,LMr),e(ve,yMr),e(ve,YT),e(YT,xEe),e(xEe,xMr),e(YT,$Mr),e(YT,iK),e(iK,kMr),e(YT,SMr),e(ve,RMr),e(ve,ZT),e(ZT,$Ee),e($Ee,PMr),e(ZT,BMr),e(ZT,dK),e(dK,IMr),e(ZT,NMr),e(ve,qMr),e(ve,KT),e(KT,kEe),e(kEe,jMr),e(KT,DMr),e(KT,cK),e(cK,GMr),e(KT,OMr),e(ve,VMr),e(ve,eM),e(eM,SEe),e(SEe,XMr),e(eM,zMr),e(eM,fK),e(fK,QMr),e(eM,WMr),e(ve,UMr),e(ve,oM),e(oM,REe),e(REe,HMr),e(oM,JMr),e(oM,mK),e(mK,YMr),e(oM,ZMr),e(mo,KMr),e(mo,rM),e(rM,eEr),e(rM,PEe),e(PEe,oEr),e(rM,rEr),e(rM,BEe),e(BEe,tEr),e(mo,aEr),M(tM,mo,null),v(f,oro,_),v(f,dc,_),e(dc,aM),e(aM,IEe),M(fk,IEe,null),e(dc,nEr),e(dc,NEe),e(NEe,sEr),v(f,rro,_),v(f,Uo,_),M(mk,Uo,null),e(Uo,lEr),e(Uo,cc),e(cc,iEr),e(cc,gK),e(gK,dEr),e(cc,cEr),e(cc,hK),e(hK,fEr),e(cc,mEr),e(Uo,gEr),e(Uo,gk),e(gk,hEr),e(gk,qEe),e(qEe,uEr),e(gk,pEr),e(Uo,_Er),e(Uo,Rt),M(hk,Rt,null),e(Rt,vEr),e(Rt,jEe),e(jEe,bEr),e(Rt,FEr),e(Rt,fc),e(fc,TEr),e(fc,DEe),e(DEe,MEr),e(fc,EEr),e(fc,uK),e(uK,CEr),e(fc,wEr),e(Rt,AEr),M(nM,Rt,null),e(Uo,LEr),e(Uo,go),M(uk,go,null),e(go,yEr),e(go,GEe),e(GEe,xEr),e(go,$Er),e(go,hn),e(hn,kEr),e(hn,OEe),e(OEe,SEr),e(hn,REr),e(hn,VEe),e(VEe,PEr),e(hn,BEr),e(hn,XEe),e(XEe,IEr),e(hn,NEr),e(go,qEr),e(go,zEe),e(zEe,sM),e(sM,QEe),e(QEe,jEr),e(sM,DEr),e(sM,pK),e(pK,GEr),e(sM,OEr),e(go,VEr),e(go,lM),e(lM,XEr),e(lM,WEe),e(WEe,zEr),e(lM,QEr),e(lM,UEe),e(UEe,WEr),e(go,UEr),M(iM,go,null),v(f,tro,_),v(f,mc,_),e(mc,dM),e(dM,HEe),M(pk,HEe,null),e(mc,HEr),e(mc,JEe),e(JEe,JEr),v(f,aro,_),v(f,Ho,_),M(_k,Ho,null),e(Ho,YEr),e(Ho,gc),e(gc,ZEr),e(gc,_K),e(_K,KEr),e(gc,eCr),e(gc,vK),e(vK,oCr),e(gc,rCr),e(Ho,tCr),e(Ho,vk),e(vk,aCr),e(vk,YEe),e(YEe,nCr),e(vk,sCr),e(Ho,lCr),e(Ho,Pt),M(bk,Pt,null),e(Pt,iCr),e(Pt,ZEe),e(ZEe,dCr),e(Pt,cCr),e(Pt,hc),e(hc,fCr),e(hc,KEe),e(KEe,mCr),e(hc,gCr),e(hc,bK),e(bK,hCr),e(hc,uCr),e(Pt,pCr),M(cM,Pt,null),e(Ho,_Cr),e(Ho,ho),M(Fk,ho,null),e(ho,vCr),e(ho,eCe),e(eCe,bCr),e(ho,FCr),e(ho,un),e(un,TCr),e(un,oCe),e(oCe,MCr),e(un,ECr),e(un,rCe),e(rCe,CCr),e(un,wCr),e(un,tCe),e(tCe,ACr),e(un,LCr),e(ho,yCr),e(ho,aCe),e(aCe,fM),e(fM,nCe),e(nCe,xCr),e(fM,$Cr),e(fM,FK),e(FK,kCr),e(fM,SCr),e(ho,RCr),e(ho,mM),e(mM,PCr),e(mM,sCe),e(sCe,BCr),e(mM,ICr),e(mM,lCe),e(lCe,NCr),e(ho,qCr),M(gM,ho,null),v(f,nro,_),v(f,uc,_),e(uc,hM),e(hM,iCe),M(Tk,iCe,null),e(uc,jCr),e(uc,dCe),e(dCe,DCr),v(f,sro,_),v(f,Jo,_),M(Mk,Jo,null),e(Jo,GCr),e(Jo,pc),e(pc,OCr),e(pc,TK),e(TK,VCr),e(pc,XCr),e(pc,MK),e(MK,zCr),e(pc,QCr),e(Jo,WCr),e(Jo,Ek),e(Ek,UCr),e(Ek,cCe),e(cCe,HCr),e(Ek,JCr),e(Jo,YCr),e(Jo,Bt),M(Ck,Bt,null),e(Bt,ZCr),e(Bt,fCe),e(fCe,KCr),e(Bt,e5r),e(Bt,_c),e(_c,o5r),e(_c,mCe),e(mCe,r5r),e(_c,t5r),e(_c,EK),e(EK,a5r),e(_c,n5r),e(Bt,s5r),M(uM,Bt,null),e(Jo,l5r),e(Jo,uo),M(wk,uo,null),e(uo,i5r),e(uo,gCe),e(gCe,d5r),e(uo,c5r),e(uo,pn),e(pn,f5r),e(pn,hCe),e(hCe,m5r),e(pn,g5r),e(pn,uCe),e(uCe,h5r),e(pn,u5r),e(pn,pCe),e(pCe,p5r),e(pn,_5r),e(uo,v5r),e(uo,_Ce),e(_Ce,pM),e(pM,vCe),e(vCe,b5r),e(pM,F5r),e(pM,CK),e(CK,T5r),e(pM,M5r),e(uo,E5r),e(uo,_M),e(_M,C5r),e(_M,bCe),e(bCe,w5r),e(_M,A5r),e(_M,FCe),e(FCe,L5r),e(uo,y5r),M(vM,uo,null),v(f,lro,_),v(f,vc,_),e(vc,bM),e(bM,TCe),M(Ak,TCe,null),e(vc,x5r),e(vc,MCe),e(MCe,$5r),v(f,iro,_),v(f,Yo,_),M(Lk,Yo,null),e(Yo,k5r),e(Yo,bc),e(bc,S5r),e(bc,wK),e(wK,R5r),e(bc,P5r),e(bc,AK),e(AK,B5r),e(bc,I5r),e(Yo,N5r),e(Yo,yk),e(yk,q5r),e(yk,ECe),e(ECe,j5r),e(yk,D5r),e(Yo,G5r),e(Yo,It),M(xk,It,null),e(It,O5r),e(It,CCe),e(CCe,V5r),e(It,X5r),e(It,Fc),e(Fc,z5r),e(Fc,wCe),e(wCe,Q5r),e(Fc,W5r),e(Fc,LK),e(LK,U5r),e(Fc,H5r),e(It,J5r),M(FM,It,null),e(Yo,Y5r),e(Yo,po),M($k,po,null),e(po,Z5r),e(po,ACe),e(ACe,K5r),e(po,ewr),e(po,_n),e(_n,owr),e(_n,LCe),e(LCe,rwr),e(_n,twr),e(_n,yCe),e(yCe,awr),e(_n,nwr),e(_n,xCe),e(xCe,swr),e(_n,lwr),e(po,iwr),e(po,Pe),e(Pe,TM),e(TM,$Ce),e($Ce,dwr),e(TM,cwr),e(TM,yK),e(yK,fwr),e(TM,mwr),e(Pe,gwr),e(Pe,MM),e(MM,kCe),e(kCe,hwr),e(MM,uwr),e(MM,xK),e(xK,pwr),e(MM,_wr),e(Pe,vwr),e(Pe,EM),e(EM,SCe),e(SCe,bwr),e(EM,Fwr),e(EM,$K),e($K,Twr),e(EM,Mwr),e(Pe,Ewr),e(Pe,CM),e(CM,RCe),e(RCe,Cwr),e(CM,wwr),e(CM,kK),e(kK,Awr),e(CM,Lwr),e(Pe,ywr),e(Pe,wM),e(wM,PCe),e(PCe,xwr),e(wM,$wr),e(wM,SK),e(SK,kwr),e(wM,Swr),e(Pe,Rwr),e(Pe,AM),e(AM,BCe),e(BCe,Pwr),e(AM,Bwr),e(AM,RK),e(RK,Iwr),e(AM,Nwr),e(Pe,qwr),e(Pe,LM),e(LM,ICe),e(ICe,jwr),e(LM,Dwr),e(LM,PK),e(PK,Gwr),e(LM,Owr),e(Pe,Vwr),e(Pe,yM),e(yM,NCe),e(NCe,Xwr),e(yM,zwr),e(yM,BK),e(BK,Qwr),e(yM,Wwr),e(Pe,Uwr),e(Pe,xM),e(xM,qCe),e(qCe,Hwr),e(xM,Jwr),e(xM,IK),e(IK,Ywr),e(xM,Zwr),e(po,Kwr),e(po,$M),e($M,eAr),e($M,jCe),e(jCe,oAr),e($M,rAr),e($M,DCe),e(DCe,tAr),e(po,aAr),M(kM,po,null),v(f,dro,_),v(f,Tc,_),e(Tc,SM),e(SM,GCe),M(kk,GCe,null),e(Tc,nAr),e(Tc,OCe),e(OCe,sAr),v(f,cro,_),v(f,Zo,_),M(Sk,Zo,null),e(Zo,lAr),e(Zo,Mc),e(Mc,iAr),e(Mc,NK),e(NK,dAr),e(Mc,cAr),e(Mc,qK),e(qK,fAr),e(Mc,mAr),e(Zo,gAr),e(Zo,Rk),e(Rk,hAr),e(Rk,VCe),e(VCe,uAr),e(Rk,pAr),e(Zo,_Ar),e(Zo,Nt),M(Pk,Nt,null),e(Nt,vAr),e(Nt,XCe),e(XCe,bAr),e(Nt,FAr),e(Nt,Ec),e(Ec,TAr),e(Ec,zCe),e(zCe,MAr),e(Ec,EAr),e(Ec,jK),e(jK,CAr),e(Ec,wAr),e(Nt,AAr),M(RM,Nt,null),e(Zo,LAr),e(Zo,_o),M(Bk,_o,null),e(_o,yAr),e(_o,QCe),e(QCe,xAr),e(_o,$Ar),e(_o,vn),e(vn,kAr),e(vn,WCe),e(WCe,SAr),e(vn,RAr),e(vn,UCe),e(UCe,PAr),e(vn,BAr),e(vn,HCe),e(HCe,IAr),e(vn,NAr),e(_o,qAr),e(_o,gt),e(gt,PM),e(PM,JCe),e(JCe,jAr),e(PM,DAr),e(PM,DK),e(DK,GAr),e(PM,OAr),e(gt,VAr),e(gt,BM),e(BM,YCe),e(YCe,XAr),e(BM,zAr),e(BM,GK),e(GK,QAr),e(BM,WAr),e(gt,UAr),e(gt,IM),e(IM,ZCe),e(ZCe,HAr),e(IM,JAr),e(IM,OK),e(OK,YAr),e(IM,ZAr),e(gt,KAr),e(gt,NM),e(NM,KCe),e(KCe,e6r),e(NM,o6r),e(NM,VK),e(VK,r6r),e(NM,t6r),e(gt,a6r),e(gt,qM),e(qM,e5e),e(e5e,n6r),e(qM,s6r),e(qM,XK),e(XK,l6r),e(qM,i6r),e(_o,d6r),e(_o,jM),e(jM,c6r),e(jM,o5e),e(o5e,f6r),e(jM,m6r),e(jM,r5e),e(r5e,g6r),e(_o,h6r),M(DM,_o,null),v(f,fro,_),v(f,Cc,_),e(Cc,GM),e(GM,t5e),M(Ik,t5e,null),e(Cc,u6r),e(Cc,a5e),e(a5e,p6r),v(f,mro,_),v(f,Ko,_),M(Nk,Ko,null),e(Ko,_6r),e(Ko,wc),e(wc,v6r),e(wc,zK),e(zK,b6r),e(wc,F6r),e(wc,QK),e(QK,T6r),e(wc,M6r),e(Ko,E6r),e(Ko,qk),e(qk,C6r),e(qk,n5e),e(n5e,w6r),e(qk,A6r),e(Ko,L6r),e(Ko,qt),M(jk,qt,null),e(qt,y6r),e(qt,s5e),e(s5e,x6r),e(qt,$6r),e(qt,Ac),e(Ac,k6r),e(Ac,l5e),e(l5e,S6r),e(Ac,R6r),e(Ac,WK),e(WK,P6r),e(Ac,B6r),e(qt,I6r),M(OM,qt,null),e(Ko,N6r),e(Ko,vo),M(Dk,vo,null),e(vo,q6r),e(vo,i5e),e(i5e,j6r),e(vo,D6r),e(vo,bn),e(bn,G6r),e(bn,d5e),e(d5e,O6r),e(bn,V6r),e(bn,c5e),e(c5e,X6r),e(bn,z6r),e(bn,f5e),e(f5e,Q6r),e(bn,W6r),e(vo,U6r),e(vo,Le),e(Le,VM),e(VM,m5e),e(m5e,H6r),e(VM,J6r),e(VM,UK),e(UK,Y6r),e(VM,Z6r),e(Le,K6r),e(Le,XM),e(XM,g5e),e(g5e,e7r),e(XM,o7r),e(XM,HK),e(HK,r7r),e(XM,t7r),e(Le,a7r),e(Le,zM),e(zM,h5e),e(h5e,n7r),e(zM,s7r),e(zM,JK),e(JK,l7r),e(zM,i7r),e(Le,d7r),e(Le,QM),e(QM,u5e),e(u5e,c7r),e(QM,f7r),e(QM,YK),e(YK,m7r),e(QM,g7r),e(Le,h7r),e(Le,WM),e(WM,p5e),e(p5e,u7r),e(WM,p7r),e(WM,ZK),e(ZK,_7r),e(WM,v7r),e(Le,b7r),e(Le,UM),e(UM,_5e),e(_5e,F7r),e(UM,T7r),e(UM,KK),e(KK,M7r),e(UM,E7r),e(Le,C7r),e(Le,HM),e(HM,v5e),e(v5e,w7r),e(HM,A7r),e(HM,eee),e(eee,L7r),e(HM,y7r),e(Le,x7r),e(Le,JM),e(JM,b5e),e(b5e,$7r),e(JM,k7r),e(JM,oee),e(oee,S7r),e(JM,R7r),e(Le,P7r),e(Le,YM),e(YM,F5e),e(F5e,B7r),e(YM,I7r),e(YM,ree),e(ree,N7r),e(YM,q7r),e(Le,j7r),e(Le,ZM),e(ZM,T5e),e(T5e,D7r),e(ZM,G7r),e(ZM,tee),e(tee,O7r),e(ZM,V7r),e(vo,X7r),e(vo,KM),e(KM,z7r),e(KM,M5e),e(M5e,Q7r),e(KM,W7r),e(KM,E5e),e(E5e,U7r),e(vo,H7r),M(eE,vo,null),v(f,gro,_),v(f,Lc,_),e(Lc,oE),e(oE,C5e),M(Gk,C5e,null),e(Lc,J7r),e(Lc,w5e),e(w5e,Y7r),v(f,hro,_),v(f,er,_),M(Ok,er,null),e(er,Z7r),e(er,yc),e(yc,K7r),e(yc,aee),e(aee,eLr),e(yc,oLr),e(yc,nee),e(nee,rLr),e(yc,tLr),e(er,aLr),e(er,Vk),e(Vk,nLr),e(Vk,A5e),e(A5e,sLr),e(Vk,lLr),e(er,iLr),e(er,jt),M(Xk,jt,null),e(jt,dLr),e(jt,L5e),e(L5e,cLr),e(jt,fLr),e(jt,xc),e(xc,mLr),e(xc,y5e),e(y5e,gLr),e(xc,hLr),e(xc,see),e(see,uLr),e(xc,pLr),e(jt,_Lr),M(rE,jt,null),e(er,vLr),e(er,bo),M(zk,bo,null),e(bo,bLr),e(bo,x5e),e(x5e,FLr),e(bo,TLr),e(bo,Fn),e(Fn,MLr),e(Fn,$5e),e($5e,ELr),e(Fn,CLr),e(Fn,k5e),e(k5e,wLr),e(Fn,ALr),e(Fn,S5e),e(S5e,LLr),e(Fn,yLr),e(bo,xLr),e(bo,$c),e($c,tE),e(tE,R5e),e(R5e,$Lr),e(tE,kLr),e(tE,lee),e(lee,SLr),e(tE,RLr),e($c,PLr),e($c,aE),e(aE,P5e),e(P5e,BLr),e(aE,ILr),e(aE,iee),e(iee,NLr),e(aE,qLr),e($c,jLr),e($c,nE),e(nE,B5e),e(B5e,DLr),e(nE,GLr),e(nE,dee),e(dee,OLr),e(nE,VLr),e(bo,XLr),e(bo,sE),e(sE,zLr),e(sE,I5e),e(I5e,QLr),e(sE,WLr),e(sE,N5e),e(N5e,ULr),e(bo,HLr),M(lE,bo,null),v(f,uro,_),v(f,kc,_),e(kc,iE),e(iE,q5e),M(Qk,q5e,null),e(kc,JLr),e(kc,j5e),e(j5e,YLr),v(f,pro,_),v(f,or,_),M(Wk,or,null),e(or,ZLr),e(or,Sc),e(Sc,KLr),e(Sc,cee),e(cee,e8r),e(Sc,o8r),e(Sc,fee),e(fee,r8r),e(Sc,t8r),e(or,a8r),e(or,Uk),e(Uk,n8r),e(Uk,D5e),e(D5e,s8r),e(Uk,l8r),e(or,i8r),e(or,Dt),M(Hk,Dt,null),e(Dt,d8r),e(Dt,G5e),e(G5e,c8r),e(Dt,f8r),e(Dt,Rc),e(Rc,m8r),e(Rc,O5e),e(O5e,g8r),e(Rc,h8r),e(Rc,mee),e(mee,u8r),e(Rc,p8r),e(Dt,_8r),M(dE,Dt,null),e(or,v8r),e(or,Fo),M(Jk,Fo,null),e(Fo,b8r),e(Fo,V5e),e(V5e,F8r),e(Fo,T8r),e(Fo,Tn),e(Tn,M8r),e(Tn,X5e),e(X5e,E8r),e(Tn,C8r),e(Tn,z5e),e(z5e,w8r),e(Tn,A8r),e(Tn,Q5e),e(Q5e,L8r),e(Tn,y8r),e(Fo,x8r),e(Fo,ht),e(ht,cE),e(cE,W5e),e(W5e,$8r),e(cE,k8r),e(cE,gee),e(gee,S8r),e(cE,R8r),e(ht,P8r),e(ht,fE),e(fE,U5e),e(U5e,B8r),e(fE,I8r),e(fE,hee),e(hee,N8r),e(fE,q8r),e(ht,j8r),e(ht,mE),e(mE,H5e),e(H5e,D8r),e(mE,G8r),e(mE,uee),e(uee,O8r),e(mE,V8r),e(ht,X8r),e(ht,gE),e(gE,J5e),e(J5e,z8r),e(gE,Q8r),e(gE,pee),e(pee,W8r),e(gE,U8r),e(ht,H8r),e(ht,hE),e(hE,Y5e),e(Y5e,J8r),e(hE,Y8r),e(hE,_ee),e(_ee,Z8r),e(hE,K8r),e(Fo,eyr),e(Fo,uE),e(uE,oyr),e(uE,Z5e),e(Z5e,ryr),e(uE,tyr),e(uE,K5e),e(K5e,ayr),e(Fo,nyr),M(pE,Fo,null),v(f,_ro,_),v(f,Pc,_),e(Pc,_E),e(_E,ewe),M(Yk,ewe,null),e(Pc,syr),e(Pc,owe),e(owe,lyr),v(f,vro,_),v(f,rr,_),M(Zk,rr,null),e(rr,iyr),e(rr,Bc),e(Bc,dyr),e(Bc,vee),e(vee,cyr),e(Bc,fyr),e(Bc,bee),e(bee,myr),e(Bc,gyr),e(rr,hyr),e(rr,Kk),e(Kk,uyr),e(Kk,rwe),e(rwe,pyr),e(Kk,_yr),e(rr,vyr),e(rr,Gt),M(eS,Gt,null),e(Gt,byr),e(Gt,twe),e(twe,Fyr),e(Gt,Tyr),e(Gt,Ic),e(Ic,Myr),e(Ic,awe),e(awe,Eyr),e(Ic,Cyr),e(Ic,Fee),e(Fee,wyr),e(Ic,Ayr),e(Gt,Lyr),M(vE,Gt,null),e(rr,yyr),e(rr,To),M(oS,To,null),e(To,xyr),e(To,nwe),e(nwe,$yr),e(To,kyr),e(To,Mn),e(Mn,Syr),e(Mn,swe),e(swe,Ryr),e(Mn,Pyr),e(Mn,lwe),e(lwe,Byr),e(Mn,Iyr),e(Mn,iwe),e(iwe,Nyr),e(Mn,qyr),e(To,jyr),e(To,En),e(En,bE),e(bE,dwe),e(dwe,Dyr),e(bE,Gyr),e(bE,Tee),e(Tee,Oyr),e(bE,Vyr),e(En,Xyr),e(En,FE),e(FE,cwe),e(cwe,zyr),e(FE,Qyr),e(FE,Mee),e(Mee,Wyr),e(FE,Uyr),e(En,Hyr),e(En,TE),e(TE,fwe),e(fwe,Jyr),e(TE,Yyr),e(TE,Eee),e(Eee,Zyr),e(TE,Kyr),e(En,e9r),e(En,ME),e(ME,mwe),e(mwe,o9r),e(ME,r9r),e(ME,Cee),e(Cee,t9r),e(ME,a9r),e(To,n9r),e(To,EE),e(EE,s9r),e(EE,gwe),e(gwe,l9r),e(EE,i9r),e(EE,hwe),e(hwe,d9r),e(To,c9r),M(CE,To,null),v(f,bro,_),v(f,Nc,_),e(Nc,wE),e(wE,uwe),M(rS,uwe,null),e(Nc,f9r),e(Nc,pwe),e(pwe,m9r),v(f,Fro,_),v(f,tr,_),M(tS,tr,null),e(tr,g9r),e(tr,qc),e(qc,h9r),e(qc,wee),e(wee,u9r),e(qc,p9r),e(qc,Aee),e(Aee,_9r),e(qc,v9r),e(tr,b9r),e(tr,aS),e(aS,F9r),e(aS,_we),e(_we,T9r),e(aS,M9r),e(tr,E9r),e(tr,Ot),M(nS,Ot,null),e(Ot,C9r),e(Ot,vwe),e(vwe,w9r),e(Ot,A9r),e(Ot,jc),e(jc,L9r),e(jc,bwe),e(bwe,y9r),e(jc,x9r),e(jc,Lee),e(Lee,$9r),e(jc,k9r),e(Ot,S9r),M(AE,Ot,null),e(tr,R9r),e(tr,Mo),M(sS,Mo,null),e(Mo,P9r),e(Mo,Fwe),e(Fwe,B9r),e(Mo,I9r),e(Mo,Cn),e(Cn,N9r),e(Cn,Twe),e(Twe,q9r),e(Cn,j9r),e(Cn,Mwe),e(Mwe,D9r),e(Cn,G9r),e(Cn,Ewe),e(Ewe,O9r),e(Cn,V9r),e(Mo,X9r),e(Mo,wn),e(wn,LE),e(LE,Cwe),e(Cwe,z9r),e(LE,Q9r),e(LE,yee),e(yee,W9r),e(LE,U9r),e(wn,H9r),e(wn,yE),e(yE,wwe),e(wwe,J9r),e(yE,Y9r),e(yE,xee),e(xee,Z9r),e(yE,K9r),e(wn,exr),e(wn,xE),e(xE,Awe),e(Awe,oxr),e(xE,rxr),e(xE,$ee),e($ee,txr),e(xE,axr),e(wn,nxr),e(wn,$E),e($E,Lwe),e(Lwe,sxr),e($E,lxr),e($E,kee),e(kee,ixr),e($E,dxr),e(Mo,cxr),e(Mo,kE),e(kE,fxr),e(kE,ywe),e(ywe,mxr),e(kE,gxr),e(kE,xwe),e(xwe,hxr),e(Mo,uxr),M(SE,Mo,null),v(f,Tro,_),v(f,Dc,_),e(Dc,RE),e(RE,$we),M(lS,$we,null),e(Dc,pxr),e(Dc,kwe),e(kwe,_xr),v(f,Mro,_),v(f,ar,_),M(iS,ar,null),e(ar,vxr),e(ar,Gc),e(Gc,bxr),e(Gc,See),e(See,Fxr),e(Gc,Txr),e(Gc,Ree),e(Ree,Mxr),e(Gc,Exr),e(ar,Cxr),e(ar,dS),e(dS,wxr),e(dS,Swe),e(Swe,Axr),e(dS,Lxr),e(ar,yxr),e(ar,Vt),M(cS,Vt,null),e(Vt,xxr),e(Vt,Rwe),e(Rwe,$xr),e(Vt,kxr),e(Vt,Oc),e(Oc,Sxr),e(Oc,Pwe),e(Pwe,Rxr),e(Oc,Pxr),e(Oc,Pee),e(Pee,Bxr),e(Oc,Ixr),e(Vt,Nxr),M(PE,Vt,null),e(ar,qxr),e(ar,Eo),M(fS,Eo,null),e(Eo,jxr),e(Eo,Bwe),e(Bwe,Dxr),e(Eo,Gxr),e(Eo,An),e(An,Oxr),e(An,Iwe),e(Iwe,Vxr),e(An,Xxr),e(An,Nwe),e(Nwe,zxr),e(An,Qxr),e(An,qwe),e(qwe,Wxr),e(An,Uxr),e(Eo,Hxr),e(Eo,jwe),e(jwe,BE),e(BE,Dwe),e(Dwe,Jxr),e(BE,Yxr),e(BE,Bee),e(Bee,Zxr),e(BE,Kxr),e(Eo,e$r),e(Eo,IE),e(IE,o$r),e(IE,Gwe),e(Gwe,r$r),e(IE,t$r),e(IE,Owe),e(Owe,a$r),e(Eo,n$r),M(NE,Eo,null),v(f,Ero,_),v(f,Vc,_),e(Vc,qE),e(qE,Vwe),M(mS,Vwe,null),e(Vc,s$r),e(Vc,Xwe),e(Xwe,l$r),v(f,Cro,_),v(f,nr,_),M(gS,nr,null),e(nr,i$r),e(nr,Xc),e(Xc,d$r),e(Xc,Iee),e(Iee,c$r),e(Xc,f$r),e(Xc,Nee),e(Nee,m$r),e(Xc,g$r),e(nr,h$r),e(nr,hS),e(hS,u$r),e(hS,zwe),e(zwe,p$r),e(hS,_$r),e(nr,v$r),e(nr,Xt),M(uS,Xt,null),e(Xt,b$r),e(Xt,Qwe),e(Qwe,F$r),e(Xt,T$r),e(Xt,zc),e(zc,M$r),e(zc,Wwe),e(Wwe,E$r),e(zc,C$r),e(zc,qee),e(qee,w$r),e(zc,A$r),e(Xt,L$r),M(jE,Xt,null),e(nr,y$r),e(nr,Co),M(pS,Co,null),e(Co,x$r),e(Co,Uwe),e(Uwe,$$r),e(Co,k$r),e(Co,Ln),e(Ln,S$r),e(Ln,Hwe),e(Hwe,R$r),e(Ln,P$r),e(Ln,Jwe),e(Jwe,B$r),e(Ln,I$r),e(Ln,Ywe),e(Ywe,N$r),e(Ln,q$r),e(Co,j$r),e(Co,ut),e(ut,DE),e(DE,Zwe),e(Zwe,D$r),e(DE,G$r),e(DE,jee),e(jee,O$r),e(DE,V$r),e(ut,X$r),e(ut,GE),e(GE,Kwe),e(Kwe,z$r),e(GE,Q$r),e(GE,Dee),e(Dee,W$r),e(GE,U$r),e(ut,H$r),e(ut,OE),e(OE,eAe),e(eAe,J$r),e(OE,Y$r),e(OE,Gee),e(Gee,Z$r),e(OE,K$r),e(ut,ekr),e(ut,VE),e(VE,oAe),e(oAe,okr),e(VE,rkr),e(VE,Oee),e(Oee,tkr),e(VE,akr),e(ut,nkr),e(ut,XE),e(XE,rAe),e(rAe,skr),e(XE,lkr),e(XE,Vee),e(Vee,ikr),e(XE,dkr),e(Co,ckr),e(Co,zE),e(zE,fkr),e(zE,tAe),e(tAe,mkr),e(zE,gkr),e(zE,aAe),e(aAe,hkr),e(Co,ukr),M(QE,Co,null),v(f,wro,_),v(f,Qc,_),e(Qc,WE),e(WE,nAe),M(_S,nAe,null),e(Qc,pkr),e(Qc,sAe),e(sAe,_kr),v(f,Aro,_),v(f,sr,_),M(vS,sr,null),e(sr,vkr),e(sr,Wc),e(Wc,bkr),e(Wc,Xee),e(Xee,Fkr),e(Wc,Tkr),e(Wc,zee),e(zee,Mkr),e(Wc,Ekr),e(sr,Ckr),e(sr,bS),e(bS,wkr),e(bS,lAe),e(lAe,Akr),e(bS,Lkr),e(sr,ykr),e(sr,zt),M(FS,zt,null),e(zt,xkr),e(zt,iAe),e(iAe,$kr),e(zt,kkr),e(zt,Uc),e(Uc,Skr),e(Uc,dAe),e(dAe,Rkr),e(Uc,Pkr),e(Uc,Qee),e(Qee,Bkr),e(Uc,Ikr),e(zt,Nkr),M(UE,zt,null),e(sr,qkr),e(sr,wo),M(TS,wo,null),e(wo,jkr),e(wo,cAe),e(cAe,Dkr),e(wo,Gkr),e(wo,yn),e(yn,Okr),e(yn,fAe),e(fAe,Vkr),e(yn,Xkr),e(yn,mAe),e(mAe,zkr),e(yn,Qkr),e(yn,gAe),e(gAe,Wkr),e(yn,Ukr),e(wo,Hkr),e(wo,hAe),e(hAe,HE),e(HE,uAe),e(uAe,Jkr),e(HE,Ykr),e(HE,Wee),e(Wee,Zkr),e(HE,Kkr),e(wo,eSr),e(wo,JE),e(JE,oSr),e(JE,pAe),e(pAe,rSr),e(JE,tSr),e(JE,_Ae),e(_Ae,aSr),e(wo,nSr),M(YE,wo,null),v(f,Lro,_),v(f,Hc,_),e(Hc,ZE),e(ZE,vAe),M(MS,vAe,null),e(Hc,sSr),e(Hc,bAe),e(bAe,lSr),v(f,yro,_),v(f,lr,_),M(ES,lr,null),e(lr,iSr),e(lr,Jc),e(Jc,dSr),e(Jc,Uee),e(Uee,cSr),e(Jc,fSr),e(Jc,Hee),e(Hee,mSr),e(Jc,gSr),e(lr,hSr),e(lr,CS),e(CS,uSr),e(CS,FAe),e(FAe,pSr),e(CS,_Sr),e(lr,vSr),e(lr,Qt),M(wS,Qt,null),e(Qt,bSr),e(Qt,TAe),e(TAe,FSr),e(Qt,TSr),e(Qt,Yc),e(Yc,MSr),e(Yc,MAe),e(MAe,ESr),e(Yc,CSr),e(Yc,Jee),e(Jee,wSr),e(Yc,ASr),e(Qt,LSr),M(KE,Qt,null),e(lr,ySr),e(lr,Ao),M(AS,Ao,null),e(Ao,xSr),e(Ao,EAe),e(EAe,$Sr),e(Ao,kSr),e(Ao,xn),e(xn,SSr),e(xn,CAe),e(CAe,RSr),e(xn,PSr),e(xn,wAe),e(wAe,BSr),e(xn,ISr),e(xn,AAe),e(AAe,NSr),e(xn,qSr),e(Ao,jSr),e(Ao,LAe),e(LAe,eC),e(eC,yAe),e(yAe,DSr),e(eC,GSr),e(eC,Yee),e(Yee,OSr),e(eC,VSr),e(Ao,XSr),e(Ao,oC),e(oC,zSr),e(oC,xAe),e(xAe,QSr),e(oC,WSr),e(oC,$Ae),e($Ae,USr),e(Ao,HSr),M(rC,Ao,null),v(f,xro,_),v(f,Zc,_),e(Zc,tC),e(tC,kAe),M(LS,kAe,null),e(Zc,JSr),e(Zc,SAe),e(SAe,YSr),v(f,$ro,_),v(f,ir,_),M(yS,ir,null),e(ir,ZSr),e(ir,Kc),e(Kc,KSr),e(Kc,Zee),e(Zee,eRr),e(Kc,oRr),e(Kc,Kee),e(Kee,rRr),e(Kc,tRr),e(ir,aRr),e(ir,xS),e(xS,nRr),e(xS,RAe),e(RAe,sRr),e(xS,lRr),e(ir,iRr),e(ir,Wt),M($S,Wt,null),e(Wt,dRr),e(Wt,PAe),e(PAe,cRr),e(Wt,fRr),e(Wt,ef),e(ef,mRr),e(ef,BAe),e(BAe,gRr),e(ef,hRr),e(ef,eoe),e(eoe,uRr),e(ef,pRr),e(Wt,_Rr),M(aC,Wt,null),e(ir,vRr),e(ir,qr),M(kS,qr,null),e(qr,bRr),e(qr,IAe),e(IAe,FRr),e(qr,TRr),e(qr,$n),e($n,MRr),e($n,NAe),e(NAe,ERr),e($n,CRr),e($n,qAe),e(qAe,wRr),e($n,ARr),e($n,jAe),e(jAe,LRr),e($n,yRr),e(qr,xRr),e(qr,B),e(B,nC),e(nC,DAe),e(DAe,$Rr),e(nC,kRr),e(nC,ooe),e(ooe,SRr),e(nC,RRr),e(B,PRr),e(B,sC),e(sC,GAe),e(GAe,BRr),e(sC,IRr),e(sC,roe),e(roe,NRr),e(sC,qRr),e(B,jRr),e(B,lC),e(lC,OAe),e(OAe,DRr),e(lC,GRr),e(lC,toe),e(toe,ORr),e(lC,VRr),e(B,XRr),e(B,iC),e(iC,VAe),e(VAe,zRr),e(iC,QRr),e(iC,aoe),e(aoe,WRr),e(iC,URr),e(B,HRr),e(B,dC),e(dC,XAe),e(XAe,JRr),e(dC,YRr),e(dC,noe),e(noe,ZRr),e(dC,KRr),e(B,ePr),e(B,cC),e(cC,zAe),e(zAe,oPr),e(cC,rPr),e(cC,soe),e(soe,tPr),e(cC,aPr),e(B,nPr),e(B,fC),e(fC,QAe),e(QAe,sPr),e(fC,lPr),e(fC,loe),e(loe,iPr),e(fC,dPr),e(B,cPr),e(B,mC),e(mC,WAe),e(WAe,fPr),e(mC,mPr),e(mC,ioe),e(ioe,gPr),e(mC,hPr),e(B,uPr),e(B,gC),e(gC,UAe),e(UAe,pPr),e(gC,_Pr),e(gC,doe),e(doe,vPr),e(gC,bPr),e(B,FPr),e(B,hC),e(hC,HAe),e(HAe,TPr),e(hC,MPr),e(hC,coe),e(coe,EPr),e(hC,CPr),e(B,wPr),e(B,uC),e(uC,JAe),e(JAe,APr),e(uC,LPr),e(uC,foe),e(foe,yPr),e(uC,xPr),e(B,$Pr),e(B,pC),e(pC,YAe),e(YAe,kPr),e(pC,SPr),e(pC,moe),e(moe,RPr),e(pC,PPr),e(B,BPr),e(B,_C),e(_C,ZAe),e(ZAe,IPr),e(_C,NPr),e(_C,goe),e(goe,qPr),e(_C,jPr),e(B,DPr),e(B,vC),e(vC,KAe),e(KAe,GPr),e(vC,OPr),e(vC,hoe),e(hoe,VPr),e(vC,XPr),e(B,zPr),e(B,bC),e(bC,e6e),e(e6e,QPr),e(bC,WPr),e(bC,uoe),e(uoe,UPr),e(bC,HPr),e(B,JPr),e(B,FC),e(FC,o6e),e(o6e,YPr),e(FC,ZPr),e(FC,poe),e(poe,KPr),e(FC,eBr),e(B,oBr),e(B,TC),e(TC,r6e),e(r6e,rBr),e(TC,tBr),e(TC,_oe),e(_oe,aBr),e(TC,nBr),e(B,sBr),e(B,MC),e(MC,t6e),e(t6e,lBr),e(MC,iBr),e(MC,voe),e(voe,dBr),e(MC,cBr),e(B,fBr),e(B,wl),e(wl,a6e),e(a6e,mBr),e(wl,gBr),e(wl,boe),e(boe,hBr),e(wl,uBr),e(wl,Foe),e(Foe,pBr),e(wl,_Br),e(B,vBr),e(B,EC),e(EC,n6e),e(n6e,bBr),e(EC,FBr),e(EC,Toe),e(Toe,TBr),e(EC,MBr),e(B,EBr),e(B,CC),e(CC,s6e),e(s6e,CBr),e(CC,wBr),e(CC,Moe),e(Moe,ABr),e(CC,LBr),e(B,yBr),e(B,wC),e(wC,l6e),e(l6e,xBr),e(wC,$Br),e(wC,Eoe),e(Eoe,kBr),e(wC,SBr),e(B,RBr),e(B,AC),e(AC,i6e),e(i6e,PBr),e(AC,BBr),e(AC,Coe),e(Coe,IBr),e(AC,NBr),e(B,qBr),e(B,LC),e(LC,d6e),e(d6e,jBr),e(LC,DBr),e(LC,woe),e(woe,GBr),e(LC,OBr),e(B,VBr),e(B,yC),e(yC,c6e),e(c6e,XBr),e(yC,zBr),e(yC,Aoe),e(Aoe,QBr),e(yC,WBr),e(B,UBr),e(B,xC),e(xC,f6e),e(f6e,HBr),e(xC,JBr),e(xC,Loe),e(Loe,YBr),e(xC,ZBr),e(B,KBr),e(B,$C),e($C,m6e),e(m6e,eIr),e($C,oIr),e($C,yoe),e(yoe,rIr),e($C,tIr),e(B,aIr),e(B,kC),e(kC,g6e),e(g6e,nIr),e(kC,sIr),e(kC,xoe),e(xoe,lIr),e(kC,iIr),e(B,dIr),e(B,SC),e(SC,h6e),e(h6e,cIr),e(SC,fIr),e(SC,$oe),e($oe,mIr),e(SC,gIr),e(B,hIr),e(B,RC),e(RC,u6e),e(u6e,uIr),e(RC,pIr),e(RC,koe),e(koe,_Ir),e(RC,vIr),e(B,bIr),e(B,PC),e(PC,p6e),e(p6e,FIr),e(PC,TIr),e(PC,Soe),e(Soe,MIr),e(PC,EIr),e(B,CIr),e(B,BC),e(BC,_6e),e(_6e,wIr),e(BC,AIr),e(BC,Roe),e(Roe,LIr),e(BC,yIr),e(B,xIr),e(B,IC),e(IC,v6e),e(v6e,$Ir),e(IC,kIr),e(IC,Poe),e(Poe,SIr),e(IC,RIr),e(B,PIr),e(B,NC),e(NC,b6e),e(b6e,BIr),e(NC,IIr),e(NC,Boe),e(Boe,NIr),e(NC,qIr),e(B,jIr),e(B,qC),e(qC,F6e),e(F6e,DIr),e(qC,GIr),e(qC,Ioe),e(Ioe,OIr),e(qC,VIr),e(B,XIr),e(B,jC),e(jC,T6e),e(T6e,zIr),e(jC,QIr),e(jC,Noe),e(Noe,WIr),e(jC,UIr),e(B,HIr),e(B,DC),e(DC,M6e),e(M6e,JIr),e(DC,YIr),e(DC,qoe),e(qoe,ZIr),e(DC,KIr),e(B,eNr),e(B,GC),e(GC,E6e),e(E6e,oNr),e(GC,rNr),e(GC,joe),e(joe,tNr),e(GC,aNr),e(B,nNr),e(B,OC),e(OC,C6e),e(C6e,sNr),e(OC,lNr),e(OC,Doe),e(Doe,iNr),e(OC,dNr),e(B,cNr),e(B,VC),e(VC,w6e),e(w6e,fNr),e(VC,mNr),e(VC,Goe),e(Goe,gNr),e(VC,hNr),e(B,uNr),e(B,XC),e(XC,A6e),e(A6e,pNr),e(XC,_Nr),e(XC,Ooe),e(Ooe,vNr),e(XC,bNr),e(B,FNr),e(B,zC),e(zC,L6e),e(L6e,TNr),e(zC,MNr),e(zC,Voe),e(Voe,ENr),e(zC,CNr),e(B,wNr),e(B,QC),e(QC,y6e),e(y6e,ANr),e(QC,LNr),e(QC,Xoe),e(Xoe,yNr),e(QC,xNr),e(B,$Nr),e(B,WC),e(WC,x6e),e(x6e,kNr),e(WC,SNr),e(WC,zoe),e(zoe,RNr),e(WC,PNr),e(B,BNr),e(B,UC),e(UC,$6e),e($6e,INr),e(UC,NNr),e(UC,Qoe),e(Qoe,qNr),e(UC,jNr),e(B,DNr),e(B,HC),e(HC,k6e),e(k6e,GNr),e(HC,ONr),e(HC,Woe),e(Woe,VNr),e(HC,XNr),e(B,zNr),e(B,JC),e(JC,S6e),e(S6e,QNr),e(JC,WNr),e(JC,Uoe),e(Uoe,UNr),e(JC,HNr),e(B,JNr),e(B,YC),e(YC,R6e),e(R6e,YNr),e(YC,ZNr),e(YC,Hoe),e(Hoe,KNr),e(YC,eqr),e(B,oqr),e(B,ZC),e(ZC,P6e),e(P6e,rqr),e(ZC,tqr),e(ZC,Joe),e(Joe,aqr),e(ZC,nqr),e(B,sqr),e(B,KC),e(KC,B6e),e(B6e,lqr),e(KC,iqr),e(KC,Yoe),e(Yoe,dqr),e(KC,cqr),e(B,fqr),e(B,e5),e(e5,I6e),e(I6e,mqr),e(e5,gqr),e(e5,Zoe),e(Zoe,hqr),e(e5,uqr),e(B,pqr),e(B,o5),e(o5,N6e),e(N6e,_qr),e(o5,vqr),e(o5,Koe),e(Koe,bqr),e(o5,Fqr),e(B,Tqr),e(B,r5),e(r5,q6e),e(q6e,Mqr),e(r5,Eqr),e(r5,ere),e(ere,Cqr),e(r5,wqr),e(B,Aqr),e(B,t5),e(t5,j6e),e(j6e,Lqr),e(t5,yqr),e(t5,ore),e(ore,xqr),e(t5,$qr),e(B,kqr),e(B,a5),e(a5,D6e),e(D6e,Sqr),e(a5,Rqr),e(a5,rre),e(rre,Pqr),e(a5,Bqr),e(B,Iqr),e(B,n5),e(n5,G6e),e(G6e,Nqr),e(n5,qqr),e(n5,tre),e(tre,jqr),e(n5,Dqr),e(qr,Gqr),M(s5,qr,null),v(f,kro,_),v(f,of,_),e(of,l5),e(l5,O6e),M(SS,O6e,null),e(of,Oqr),e(of,V6e),e(V6e,Vqr),v(f,Sro,_),v(f,dr,_),M(RS,dr,null),e(dr,Xqr),e(dr,rf),e(rf,zqr),e(rf,are),e(are,Qqr),e(rf,Wqr),e(rf,nre),e(nre,Uqr),e(rf,Hqr),e(dr,Jqr),e(dr,PS),e(PS,Yqr),e(PS,X6e),e(X6e,Zqr),e(PS,Kqr),e(dr,ejr),e(dr,Ut),M(BS,Ut,null),e(Ut,ojr),e(Ut,z6e),e(z6e,rjr),e(Ut,tjr),e(Ut,tf),e(tf,ajr),e(tf,Q6e),e(Q6e,njr),e(tf,sjr),e(tf,sre),e(sre,ljr),e(tf,ijr),e(Ut,djr),M(i5,Ut,null),e(dr,cjr),e(dr,jr),M(IS,jr,null),e(jr,fjr),e(jr,W6e),e(W6e,mjr),e(jr,gjr),e(jr,kn),e(kn,hjr),e(kn,U6e),e(U6e,ujr),e(kn,pjr),e(kn,H6e),e(H6e,_jr),e(kn,vjr),e(kn,J6e),e(J6e,bjr),e(kn,Fjr),e(jr,Tjr),e(jr,le),e(le,d5),e(d5,Y6e),e(Y6e,Mjr),e(d5,Ejr),e(d5,lre),e(lre,Cjr),e(d5,wjr),e(le,Ajr),e(le,c5),e(c5,Z6e),e(Z6e,Ljr),e(c5,yjr),e(c5,ire),e(ire,xjr),e(c5,$jr),e(le,kjr),e(le,f5),e(f5,K6e),e(K6e,Sjr),e(f5,Rjr),e(f5,dre),e(dre,Pjr),e(f5,Bjr),e(le,Ijr),e(le,m5),e(m5,e7e),e(e7e,Njr),e(m5,qjr),e(m5,cre),e(cre,jjr),e(m5,Djr),e(le,Gjr),e(le,g5),e(g5,o7e),e(o7e,Ojr),e(g5,Vjr),e(g5,fre),e(fre,Xjr),e(g5,zjr),e(le,Qjr),e(le,h5),e(h5,r7e),e(r7e,Wjr),e(h5,Ujr),e(h5,mre),e(mre,Hjr),e(h5,Jjr),e(le,Yjr),e(le,u5),e(u5,t7e),e(t7e,Zjr),e(u5,Kjr),e(u5,gre),e(gre,eDr),e(u5,oDr),e(le,rDr),e(le,p5),e(p5,a7e),e(a7e,tDr),e(p5,aDr),e(p5,hre),e(hre,nDr),e(p5,sDr),e(le,lDr),e(le,_5),e(_5,n7e),e(n7e,iDr),e(_5,dDr),e(_5,ure),e(ure,cDr),e(_5,fDr),e(le,mDr),e(le,v5),e(v5,s7e),e(s7e,gDr),e(v5,hDr),e(v5,pre),e(pre,uDr),e(v5,pDr),e(le,_Dr),e(le,b5),e(b5,l7e),e(l7e,vDr),e(b5,bDr),e(b5,_re),e(_re,FDr),e(b5,TDr),e(le,MDr),e(le,F5),e(F5,i7e),e(i7e,EDr),e(F5,CDr),e(F5,vre),e(vre,wDr),e(F5,ADr),e(le,LDr),e(le,T5),e(T5,d7e),e(d7e,yDr),e(T5,xDr),e(T5,bre),e(bre,$Dr),e(T5,kDr),e(le,SDr),e(le,M5),e(M5,c7e),e(c7e,RDr),e(M5,PDr),e(M5,Fre),e(Fre,BDr),e(M5,IDr),e(le,NDr),e(le,E5),e(E5,f7e),e(f7e,qDr),e(E5,jDr),e(E5,Tre),e(Tre,DDr),e(E5,GDr),e(le,ODr),e(le,C5),e(C5,m7e),e(m7e,VDr),e(C5,XDr),e(C5,Mre),e(Mre,zDr),e(C5,QDr),e(le,WDr),e(le,w5),e(w5,g7e),e(g7e,UDr),e(w5,HDr),e(w5,Ere),e(Ere,JDr),e(w5,YDr),e(le,ZDr),e(le,A5),e(A5,h7e),e(h7e,KDr),e(A5,eGr),e(A5,Cre),e(Cre,oGr),e(A5,rGr),e(le,tGr),e(le,L5),e(L5,u7e),e(u7e,aGr),e(L5,nGr),e(L5,wre),e(wre,sGr),e(L5,lGr),e(le,iGr),e(le,y5),e(y5,p7e),e(p7e,dGr),e(y5,cGr),e(y5,Are),e(Are,fGr),e(y5,mGr),e(le,gGr),e(le,x5),e(x5,_7e),e(_7e,hGr),e(x5,uGr),e(x5,Lre),e(Lre,pGr),e(x5,_Gr),e(le,vGr),e(le,$5),e($5,v7e),e(v7e,bGr),e($5,FGr),e($5,yre),e(yre,TGr),e($5,MGr),e(le,EGr),e(le,k5),e(k5,b7e),e(b7e,CGr),e(k5,wGr),e(k5,xre),e(xre,AGr),e(k5,LGr),e(jr,yGr),M(S5,jr,null),v(f,Rro,_),v(f,af,_),e(af,R5),e(R5,F7e),M(NS,F7e,null),e(af,xGr),e(af,T7e),e(T7e,$Gr),v(f,Pro,_),v(f,cr,_),M(qS,cr,null),e(cr,kGr),e(cr,nf),e(nf,SGr),e(nf,$re),e($re,RGr),e(nf,PGr),e(nf,kre),e(kre,BGr),e(nf,IGr),e(cr,NGr),e(cr,jS),e(jS,qGr),e(jS,M7e),e(M7e,jGr),e(jS,DGr),e(cr,GGr),e(cr,Ht),M(DS,Ht,null),e(Ht,OGr),e(Ht,E7e),e(E7e,VGr),e(Ht,XGr),e(Ht,sf),e(sf,zGr),e(sf,C7e),e(C7e,QGr),e(sf,WGr),e(sf,Sre),e(Sre,UGr),e(sf,HGr),e(Ht,JGr),M(P5,Ht,null),e(cr,YGr),e(cr,Dr),M(GS,Dr,null),e(Dr,ZGr),e(Dr,w7e),e(w7e,KGr),e(Dr,eOr),e(Dr,Sn),e(Sn,oOr),e(Sn,A7e),e(A7e,rOr),e(Sn,tOr),e(Sn,L7e),e(L7e,aOr),e(Sn,nOr),e(Sn,y7e),e(y7e,sOr),e(Sn,lOr),e(Dr,iOr),e(Dr,Me),e(Me,B5),e(B5,x7e),e(x7e,dOr),e(B5,cOr),e(B5,Rre),e(Rre,fOr),e(B5,mOr),e(Me,gOr),e(Me,I5),e(I5,$7e),e($7e,hOr),e(I5,uOr),e(I5,Pre),e(Pre,pOr),e(I5,_Or),e(Me,vOr),e(Me,N5),e(N5,k7e),e(k7e,bOr),e(N5,FOr),e(N5,Bre),e(Bre,TOr),e(N5,MOr),e(Me,EOr),e(Me,q5),e(q5,S7e),e(S7e,COr),e(q5,wOr),e(q5,Ire),e(Ire,AOr),e(q5,LOr),e(Me,yOr),e(Me,j5),e(j5,R7e),e(R7e,xOr),e(j5,$Or),e(j5,Nre),e(Nre,kOr),e(j5,SOr),e(Me,ROr),e(Me,D5),e(D5,P7e),e(P7e,POr),e(D5,BOr),e(D5,qre),e(qre,IOr),e(D5,NOr),e(Me,qOr),e(Me,G5),e(G5,B7e),e(B7e,jOr),e(G5,DOr),e(G5,jre),e(jre,GOr),e(G5,OOr),e(Me,VOr),e(Me,O5),e(O5,I7e),e(I7e,XOr),e(O5,zOr),e(O5,Dre),e(Dre,QOr),e(O5,WOr),e(Me,UOr),e(Me,V5),e(V5,N7e),e(N7e,HOr),e(V5,JOr),e(V5,Gre),e(Gre,YOr),e(V5,ZOr),e(Me,KOr),e(Me,X5),e(X5,q7e),e(q7e,eVr),e(X5,oVr),e(X5,Ore),e(Ore,rVr),e(X5,tVr),e(Me,aVr),e(Me,z5),e(z5,j7e),e(j7e,nVr),e(z5,sVr),e(z5,Vre),e(Vre,lVr),e(z5,iVr),e(Me,dVr),e(Me,Q5),e(Q5,D7e),e(D7e,cVr),e(Q5,fVr),e(Q5,Xre),e(Xre,mVr),e(Q5,gVr),e(Me,hVr),e(Me,W5),e(W5,G7e),e(G7e,uVr),e(W5,pVr),e(W5,zre),e(zre,_Vr),e(W5,vVr),e(Me,bVr),e(Me,U5),e(U5,O7e),e(O7e,FVr),e(U5,TVr),e(U5,Qre),e(Qre,MVr),e(U5,EVr),e(Dr,CVr),M(H5,Dr,null),v(f,Bro,_),v(f,lf,_),e(lf,J5),e(J5,V7e),M(OS,V7e,null),e(lf,wVr),e(lf,X7e),e(X7e,AVr),v(f,Iro,_),v(f,fr,_),M(VS,fr,null),e(fr,LVr),e(fr,df),e(df,yVr),e(df,Wre),e(Wre,xVr),e(df,$Vr),e(df,Ure),e(Ure,kVr),e(df,SVr),e(fr,RVr),e(fr,XS),e(XS,PVr),e(XS,z7e),e(z7e,BVr),e(XS,IVr),e(fr,NVr),e(fr,Jt),M(zS,Jt,null),e(Jt,qVr),e(Jt,Q7e),e(Q7e,jVr),e(Jt,DVr),e(Jt,cf),e(cf,GVr),e(cf,W7e),e(W7e,OVr),e(cf,VVr),e(cf,Hre),e(Hre,XVr),e(cf,zVr),e(Jt,QVr),M(Y5,Jt,null),e(fr,WVr),e(fr,Gr),M(QS,Gr,null),e(Gr,UVr),e(Gr,U7e),e(U7e,HVr),e(Gr,JVr),e(Gr,Rn),e(Rn,YVr),e(Rn,H7e),e(H7e,ZVr),e(Rn,KVr),e(Rn,J7e),e(J7e,eXr),e(Rn,oXr),e(Rn,Y7e),e(Y7e,rXr),e(Rn,tXr),e(Gr,aXr),e(Gr,Be),e(Be,Z5),e(Z5,Z7e),e(Z7e,nXr),e(Z5,sXr),e(Z5,Jre),e(Jre,lXr),e(Z5,iXr),e(Be,dXr),e(Be,K5),e(K5,K7e),e(K7e,cXr),e(K5,fXr),e(K5,Yre),e(Yre,mXr),e(K5,gXr),e(Be,hXr),e(Be,Al),e(Al,eLe),e(eLe,uXr),e(Al,pXr),e(Al,Zre),e(Zre,_Xr),e(Al,vXr),e(Al,Kre),e(Kre,bXr),e(Al,FXr),e(Be,TXr),e(Be,ew),e(ew,oLe),e(oLe,MXr),e(ew,EXr),e(ew,ete),e(ete,CXr),e(ew,wXr),e(Be,AXr),e(Be,ow),e(ow,rLe),e(rLe,LXr),e(ow,yXr),e(ow,ote),e(ote,xXr),e(ow,$Xr),e(Be,kXr),e(Be,rw),e(rw,tLe),e(tLe,SXr),e(rw,RXr),e(rw,rte),e(rte,PXr),e(rw,BXr),e(Be,IXr),e(Be,tw),e(tw,aLe),e(aLe,NXr),e(tw,qXr),e(tw,tte),e(tte,jXr),e(tw,DXr),e(Be,GXr),e(Be,aw),e(aw,nLe),e(nLe,OXr),e(aw,VXr),e(aw,ate),e(ate,XXr),e(aw,zXr),e(Be,QXr),e(Be,nw),e(nw,sLe),e(sLe,WXr),e(nw,UXr),e(nw,nte),e(nte,HXr),e(nw,JXr),e(Gr,YXr),M(sw,Gr,null),v(f,Nro,_),v(f,ff,_),e(ff,lw),e(lw,lLe),M(WS,lLe,null),e(ff,ZXr),e(ff,iLe),e(iLe,KXr),v(f,qro,_),v(f,mr,_),M(US,mr,null),e(mr,ezr),e(mr,mf),e(mf,ozr),e(mf,ste),e(ste,rzr),e(mf,tzr),e(mf,lte),e(lte,azr),e(mf,nzr),e(mr,szr),e(mr,HS),e(HS,lzr),e(HS,dLe),e(dLe,izr),e(HS,dzr),e(mr,czr),e(mr,Yt),M(JS,Yt,null),e(Yt,fzr),e(Yt,cLe),e(cLe,mzr),e(Yt,gzr),e(Yt,gf),e(gf,hzr),e(gf,fLe),e(fLe,uzr),e(gf,pzr),e(gf,ite),e(ite,_zr),e(gf,vzr),e(Yt,bzr),M(iw,Yt,null),e(mr,Fzr),e(mr,Or),M(YS,Or,null),e(Or,Tzr),e(Or,mLe),e(mLe,Mzr),e(Or,Ezr),e(Or,Pn),e(Pn,Czr),e(Pn,gLe),e(gLe,wzr),e(Pn,Azr),e(Pn,hLe),e(hLe,Lzr),e(Pn,yzr),e(Pn,uLe),e(uLe,xzr),e(Pn,$zr),e(Or,kzr),e(Or,hf),e(hf,dw),e(dw,pLe),e(pLe,Szr),e(dw,Rzr),e(dw,dte),e(dte,Pzr),e(dw,Bzr),e(hf,Izr),e(hf,cw),e(cw,_Le),e(_Le,Nzr),e(cw,qzr),e(cw,cte),e(cte,jzr),e(cw,Dzr),e(hf,Gzr),e(hf,fw),e(fw,vLe),e(vLe,Ozr),e(fw,Vzr),e(fw,fte),e(fte,Xzr),e(fw,zzr),e(Or,Qzr),M(mw,Or,null),v(f,jro,_),v(f,uf,_),e(uf,gw),e(gw,bLe),M(ZS,bLe,null),e(uf,Wzr),e(uf,FLe),e(FLe,Uzr),v(f,Dro,_),v(f,gr,_),M(KS,gr,null),e(gr,Hzr),e(gr,pf),e(pf,Jzr),e(pf,mte),e(mte,Yzr),e(pf,Zzr),e(pf,gte),e(gte,Kzr),e(pf,eQr),e(gr,oQr),e(gr,eR),e(eR,rQr),e(eR,TLe),e(TLe,tQr),e(eR,aQr),e(gr,nQr),e(gr,Zt),M(oR,Zt,null),e(Zt,sQr),e(Zt,MLe),e(MLe,lQr),e(Zt,iQr),e(Zt,_f),e(_f,dQr),e(_f,ELe),e(ELe,cQr),e(_f,fQr),e(_f,hte),e(hte,mQr),e(_f,gQr),e(Zt,hQr),M(hw,Zt,null),e(gr,uQr),e(gr,Vr),M(rR,Vr,null),e(Vr,pQr),e(Vr,CLe),e(CLe,_Qr),e(Vr,vQr),e(Vr,Bn),e(Bn,bQr),e(Bn,wLe),e(wLe,FQr),e(Bn,TQr),e(Bn,ALe),e(ALe,MQr),e(Bn,EQr),e(Bn,LLe),e(LLe,CQr),e(Bn,wQr),e(Vr,AQr),e(Vr,ge),e(ge,uw),e(uw,yLe),e(yLe,LQr),e(uw,yQr),e(uw,ute),e(ute,xQr),e(uw,$Qr),e(ge,kQr),e(ge,pw),e(pw,xLe),e(xLe,SQr),e(pw,RQr),e(pw,pte),e(pte,PQr),e(pw,BQr),e(ge,IQr),e(ge,_w),e(_w,$Le),e($Le,NQr),e(_w,qQr),e(_w,_te),e(_te,jQr),e(_w,DQr),e(ge,GQr),e(ge,vw),e(vw,kLe),e(kLe,OQr),e(vw,VQr),e(vw,vte),e(vte,XQr),e(vw,zQr),e(ge,QQr),e(ge,bw),e(bw,SLe),e(SLe,WQr),e(bw,UQr),e(bw,bte),e(bte,HQr),e(bw,JQr),e(ge,YQr),e(ge,Fw),e(Fw,RLe),e(RLe,ZQr),e(Fw,KQr),e(Fw,Fte),e(Fte,eWr),e(Fw,oWr),e(ge,rWr),e(ge,Tw),e(Tw,PLe),e(PLe,tWr),e(Tw,aWr),e(Tw,Tte),e(Tte,nWr),e(Tw,sWr),e(ge,lWr),e(ge,Mw),e(Mw,BLe),e(BLe,iWr),e(Mw,dWr),e(Mw,Mte),e(Mte,cWr),e(Mw,fWr),e(ge,mWr),e(ge,Ew),e(Ew,ILe),e(ILe,gWr),e(Ew,hWr),e(Ew,Ete),e(Ete,uWr),e(Ew,pWr),e(ge,_Wr),e(ge,Cw),e(Cw,NLe),e(NLe,vWr),e(Cw,bWr),e(Cw,Cte),e(Cte,FWr),e(Cw,TWr),e(ge,MWr),e(ge,ww),e(ww,qLe),e(qLe,EWr),e(ww,CWr),e(ww,wte),e(wte,wWr),e(ww,AWr),e(ge,LWr),e(ge,Aw),e(Aw,jLe),e(jLe,yWr),e(Aw,xWr),e(Aw,Ate),e(Ate,$Wr),e(Aw,kWr),e(ge,SWr),e(ge,Lw),e(Lw,DLe),e(DLe,RWr),e(Lw,PWr),e(Lw,Lte),e(Lte,BWr),e(Lw,IWr),e(ge,NWr),e(ge,yw),e(yw,GLe),e(GLe,qWr),e(yw,jWr),e(yw,yte),e(yte,DWr),e(yw,GWr),e(ge,OWr),e(ge,xw),e(xw,OLe),e(OLe,VWr),e(xw,XWr),e(xw,xte),e(xte,zWr),e(xw,QWr),e(ge,WWr),e(ge,$w),e($w,VLe),e(VLe,UWr),e($w,HWr),e($w,$te),e($te,JWr),e($w,YWr),e(ge,ZWr),e(ge,kw),e(kw,XLe),e(XLe,KWr),e(kw,eUr),e(kw,kte),e(kte,oUr),e(kw,rUr),e(ge,tUr),e(ge,Sw),e(Sw,zLe),e(zLe,aUr),e(Sw,nUr),e(Sw,Ste),e(Ste,sUr),e(Sw,lUr),e(ge,iUr),e(ge,Rw),e(Rw,QLe),e(QLe,dUr),e(Rw,cUr),e(Rw,Rte),e(Rte,fUr),e(Rw,mUr),e(ge,gUr),e(ge,Pw),e(Pw,WLe),e(WLe,hUr),e(Pw,uUr),e(Pw,Pte),e(Pte,pUr),e(Pw,_Ur),e(Vr,vUr),M(Bw,Vr,null),v(f,Gro,_),v(f,vf,_),e(vf,Iw),e(Iw,ULe),M(tR,ULe,null),e(vf,bUr),e(vf,HLe),e(HLe,FUr),v(f,Oro,_),v(f,hr,_),M(aR,hr,null),e(hr,TUr),e(hr,bf),e(bf,MUr),e(bf,Bte),e(Bte,EUr),e(bf,CUr),e(bf,Ite),e(Ite,wUr),e(bf,AUr),e(hr,LUr),e(hr,nR),e(nR,yUr),e(nR,JLe),e(JLe,xUr),e(nR,$Ur),e(hr,kUr),e(hr,Kt),M(sR,Kt,null),e(Kt,SUr),e(Kt,YLe),e(YLe,RUr),e(Kt,PUr),e(Kt,Ff),e(Ff,BUr),e(Ff,ZLe),e(ZLe,IUr),e(Ff,NUr),e(Ff,Nte),e(Nte,qUr),e(Ff,jUr),e(Kt,DUr),M(Nw,Kt,null),e(hr,GUr),e(hr,Xr),M(lR,Xr,null),e(Xr,OUr),e(Xr,KLe),e(KLe,VUr),e(Xr,XUr),e(Xr,In),e(In,zUr),e(In,e8e),e(e8e,QUr),e(In,WUr),e(In,o8e),e(o8e,UUr),e(In,HUr),e(In,r8e),e(r8e,JUr),e(In,YUr),e(Xr,ZUr),e(Xr,ye),e(ye,qw),e(qw,t8e),e(t8e,KUr),e(qw,eHr),e(qw,qte),e(qte,oHr),e(qw,rHr),e(ye,tHr),e(ye,jw),e(jw,a8e),e(a8e,aHr),e(jw,nHr),e(jw,jte),e(jte,sHr),e(jw,lHr),e(ye,iHr),e(ye,Dw),e(Dw,n8e),e(n8e,dHr),e(Dw,cHr),e(Dw,Dte),e(Dte,fHr),e(Dw,mHr),e(ye,gHr),e(ye,Gw),e(Gw,s8e),e(s8e,hHr),e(Gw,uHr),e(Gw,Gte),e(Gte,pHr),e(Gw,_Hr),e(ye,vHr),e(ye,Ow),e(Ow,l8e),e(l8e,bHr),e(Ow,FHr),e(Ow,Ote),e(Ote,THr),e(Ow,MHr),e(ye,EHr),e(ye,Vw),e(Vw,i8e),e(i8e,CHr),e(Vw,wHr),e(Vw,Vte),e(Vte,AHr),e(Vw,LHr),e(ye,yHr),e(ye,Xw),e(Xw,d8e),e(d8e,xHr),e(Xw,$Hr),e(Xw,Xte),e(Xte,kHr),e(Xw,SHr),e(ye,RHr),e(ye,zw),e(zw,c8e),e(c8e,PHr),e(zw,BHr),e(zw,zte),e(zte,IHr),e(zw,NHr),e(ye,qHr),e(ye,Qw),e(Qw,f8e),e(f8e,jHr),e(Qw,DHr),e(Qw,Qte),e(Qte,GHr),e(Qw,OHr),e(ye,VHr),e(ye,Ww),e(Ww,m8e),e(m8e,XHr),e(Ww,zHr),e(Ww,Wte),e(Wte,QHr),e(Ww,WHr),e(Xr,UHr),M(Uw,Xr,null),v(f,Vro,_),v(f,Tf,_),e(Tf,Hw),e(Hw,g8e),M(iR,g8e,null),e(Tf,HHr),e(Tf,h8e),e(h8e,JHr),v(f,Xro,_),v(f,ur,_),M(dR,ur,null),e(ur,YHr),e(ur,Mf),e(Mf,ZHr),e(Mf,Ute),e(Ute,KHr),e(Mf,eJr),e(Mf,Hte),e(Hte,oJr),e(Mf,rJr),e(ur,tJr),e(ur,cR),e(cR,aJr),e(cR,u8e),e(u8e,nJr),e(cR,sJr),e(ur,lJr),e(ur,ea),M(fR,ea,null),e(ea,iJr),e(ea,p8e),e(p8e,dJr),e(ea,cJr),e(ea,Ef),e(Ef,fJr),e(Ef,_8e),e(_8e,mJr),e(Ef,gJr),e(Ef,Jte),e(Jte,hJr),e(Ef,uJr),e(ea,pJr),M(Jw,ea,null),e(ur,_Jr),e(ur,zr),M(mR,zr,null),e(zr,vJr),e(zr,v8e),e(v8e,bJr),e(zr,FJr),e(zr,Nn),e(Nn,TJr),e(Nn,b8e),e(b8e,MJr),e(Nn,EJr),e(Nn,F8e),e(F8e,CJr),e(Nn,wJr),e(Nn,T8e),e(T8e,AJr),e(Nn,LJr),e(zr,yJr),e(zr,re),e(re,Yw),e(Yw,M8e),e(M8e,xJr),e(Yw,$Jr),e(Yw,Yte),e(Yte,kJr),e(Yw,SJr),e(re,RJr),e(re,Zw),e(Zw,E8e),e(E8e,PJr),e(Zw,BJr),e(Zw,Zte),e(Zte,IJr),e(Zw,NJr),e(re,qJr),e(re,Kw),e(Kw,C8e),e(C8e,jJr),e(Kw,DJr),e(Kw,Kte),e(Kte,GJr),e(Kw,OJr),e(re,VJr),e(re,eA),e(eA,w8e),e(w8e,XJr),e(eA,zJr),e(eA,eae),e(eae,QJr),e(eA,WJr),e(re,UJr),e(re,oA),e(oA,A8e),e(A8e,HJr),e(oA,JJr),e(oA,oae),e(oae,YJr),e(oA,ZJr),e(re,KJr),e(re,rA),e(rA,L8e),e(L8e,eYr),e(rA,oYr),e(rA,rae),e(rae,rYr),e(rA,tYr),e(re,aYr),e(re,tA),e(tA,y8e),e(y8e,nYr),e(tA,sYr),e(tA,tae),e(tae,lYr),e(tA,iYr),e(re,dYr),e(re,aA),e(aA,x8e),e(x8e,cYr),e(aA,fYr),e(aA,aae),e(aae,mYr),e(aA,gYr),e(re,hYr),e(re,nA),e(nA,$8e),e($8e,uYr),e(nA,pYr),e(nA,nae),e(nae,_Yr),e(nA,vYr),e(re,bYr),e(re,sA),e(sA,k8e),e(k8e,FYr),e(sA,TYr),e(sA,sae),e(sae,MYr),e(sA,EYr),e(re,CYr),e(re,lA),e(lA,S8e),e(S8e,wYr),e(lA,AYr),e(lA,lae),e(lae,LYr),e(lA,yYr),e(re,xYr),e(re,iA),e(iA,R8e),e(R8e,$Yr),e(iA,kYr),e(iA,iae),e(iae,SYr),e(iA,RYr),e(re,PYr),e(re,dA),e(dA,P8e),e(P8e,BYr),e(dA,IYr),e(dA,dae),e(dae,NYr),e(dA,qYr),e(re,jYr),e(re,cA),e(cA,B8e),e(B8e,DYr),e(cA,GYr),e(cA,cae),e(cae,OYr),e(cA,VYr),e(re,XYr),e(re,fA),e(fA,I8e),e(I8e,zYr),e(fA,QYr),e(fA,fae),e(fae,WYr),e(fA,UYr),e(re,HYr),e(re,mA),e(mA,N8e),e(N8e,JYr),e(mA,YYr),e(mA,mae),e(mae,ZYr),e(mA,KYr),e(re,eZr),e(re,gA),e(gA,q8e),e(q8e,oZr),e(gA,rZr),e(gA,gae),e(gae,tZr),e(gA,aZr),e(re,nZr),e(re,hA),e(hA,j8e),e(j8e,sZr),e(hA,lZr),e(hA,hae),e(hae,iZr),e(hA,dZr),e(re,cZr),e(re,uA),e(uA,D8e),e(D8e,fZr),e(uA,mZr),e(uA,uae),e(uae,gZr),e(uA,hZr),e(re,uZr),e(re,pA),e(pA,G8e),e(G8e,pZr),e(pA,_Zr),e(pA,pae),e(pae,vZr),e(pA,bZr),e(re,FZr),e(re,_A),e(_A,O8e),e(O8e,TZr),e(_A,MZr),e(_A,_ae),e(_ae,EZr),e(_A,CZr),e(re,wZr),e(re,vA),e(vA,V8e),e(V8e,AZr),e(vA,LZr),e(vA,vae),e(vae,yZr),e(vA,xZr),e(re,$Zr),e(re,bA),e(bA,X8e),e(X8e,kZr),e(bA,SZr),e(bA,bae),e(bae,RZr),e(bA,PZr),e(re,BZr),e(re,FA),e(FA,z8e),e(z8e,IZr),e(FA,NZr),e(FA,Fae),e(Fae,qZr),e(FA,jZr),e(re,DZr),e(re,TA),e(TA,Q8e),e(Q8e,GZr),e(TA,OZr),e(TA,Tae),e(Tae,VZr),e(TA,XZr),e(re,zZr),e(re,MA),e(MA,W8e),e(W8e,QZr),e(MA,WZr),e(MA,Mae),e(Mae,UZr),e(MA,HZr),e(re,JZr),e(re,EA),e(EA,U8e),e(U8e,YZr),e(EA,ZZr),e(EA,Eae),e(Eae,KZr),e(EA,eKr),e(zr,oKr),M(CA,zr,null),v(f,zro,_),v(f,Cf,_),e(Cf,wA),e(wA,H8e),M(gR,H8e,null),e(Cf,rKr),e(Cf,J8e),e(J8e,tKr),v(f,Qro,_),v(f,pr,_),M(hR,pr,null),e(pr,aKr),e(pr,wf),e(wf,nKr),e(wf,Cae),e(Cae,sKr),e(wf,lKr),e(wf,wae),e(wae,iKr),e(wf,dKr),e(pr,cKr),e(pr,uR),e(uR,fKr),e(uR,Y8e),e(Y8e,mKr),e(uR,gKr),e(pr,hKr),e(pr,oa),M(pR,oa,null),e(oa,uKr),e(oa,Z8e),e(Z8e,pKr),e(oa,_Kr),e(oa,Af),e(Af,vKr),e(Af,K8e),e(K8e,bKr),e(Af,FKr),e(Af,Aae),e(Aae,TKr),e(Af,MKr),e(oa,EKr),M(AA,oa,null),e(pr,CKr),e(pr,Qr),M(_R,Qr,null),e(Qr,wKr),e(Qr,eye),e(eye,AKr),e(Qr,LKr),e(Qr,qn),e(qn,yKr),e(qn,oye),e(oye,xKr),e(qn,$Kr),e(qn,rye),e(rye,kKr),e(qn,SKr),e(qn,tye),e(tye,RKr),e(qn,PKr),e(Qr,BKr),e(Qr,be),e(be,LA),e(LA,aye),e(aye,IKr),e(LA,NKr),e(LA,Lae),e(Lae,qKr),e(LA,jKr),e(be,DKr),e(be,yA),e(yA,nye),e(nye,GKr),e(yA,OKr),e(yA,yae),e(yae,VKr),e(yA,XKr),e(be,zKr),e(be,xA),e(xA,sye),e(sye,QKr),e(xA,WKr),e(xA,xae),e(xae,UKr),e(xA,HKr),e(be,JKr),e(be,$A),e($A,lye),e(lye,YKr),e($A,ZKr),e($A,$ae),e($ae,KKr),e($A,eet),e(be,oet),e(be,kA),e(kA,iye),e(iye,ret),e(kA,tet),e(kA,kae),e(kae,aet),e(kA,net),e(be,set),e(be,SA),e(SA,dye),e(dye,iet),e(SA,det),e(SA,Sae),e(Sae,cet),e(SA,fet),e(be,met),e(be,RA),e(RA,cye),e(cye,get),e(RA,het),e(RA,Rae),e(Rae,uet),e(RA,pet),e(be,_et),e(be,PA),e(PA,fye),e(fye,vet),e(PA,bet),e(PA,Pae),e(Pae,Fet),e(PA,Tet),e(be,Met),e(be,BA),e(BA,mye),e(mye,Eet),e(BA,Cet),e(BA,Bae),e(Bae,wet),e(BA,Aet),e(be,Let),e(be,IA),e(IA,gye),e(gye,yet),e(IA,xet),e(IA,Iae),e(Iae,$et),e(IA,ket),e(be,Set),e(be,NA),e(NA,hye),e(hye,Ret),e(NA,Pet),e(NA,Nae),e(Nae,Bet),e(NA,Iet),e(be,Net),e(be,qA),e(qA,uye),e(uye,qet),e(qA,jet),e(qA,qae),e(qae,Det),e(qA,Get),e(be,Oet),e(be,jA),e(jA,pye),e(pye,Vet),e(jA,Xet),e(jA,jae),e(jae,zet),e(jA,Qet),e(be,Wet),e(be,DA),e(DA,_ye),e(_ye,Uet),e(DA,Het),e(DA,Dae),e(Dae,Jet),e(DA,Yet),e(be,Zet),e(be,GA),e(GA,vye),e(vye,Ket),e(GA,eot),e(GA,Gae),e(Gae,oot),e(GA,rot),e(be,tot),e(be,OA),e(OA,bye),e(bye,aot),e(OA,not),e(OA,Oae),e(Oae,sot),e(OA,lot),e(be,iot),e(be,VA),e(VA,Fye),e(Fye,dot),e(VA,cot),e(VA,Vae),e(Vae,fot),e(VA,mot),e(Qr,got),M(XA,Qr,null),v(f,Wro,_),v(f,Lf,_),e(Lf,zA),e(zA,Tye),M(vR,Tye,null),e(Lf,hot),e(Lf,Mye),e(Mye,uot),v(f,Uro,_),v(f,_r,_),M(bR,_r,null),e(_r,pot),e(_r,yf),e(yf,_ot),e(yf,Xae),e(Xae,vot),e(yf,bot),e(yf,zae),e(zae,Fot),e(yf,Tot),e(_r,Mot),e(_r,FR),e(FR,Eot),e(FR,Eye),e(Eye,Cot),e(FR,wot),e(_r,Aot),e(_r,ra),M(TR,ra,null),e(ra,Lot),e(ra,Cye),e(Cye,yot),e(ra,xot),e(ra,xf),e(xf,$ot),e(xf,wye),e(wye,kot),e(xf,Sot),e(xf,Qae),e(Qae,Rot),e(xf,Pot),e(ra,Bot),M(QA,ra,null),e(_r,Iot),e(_r,Wr),M(MR,Wr,null),e(Wr,Not),e(Wr,Aye),e(Aye,qot),e(Wr,jot),e(Wr,jn),e(jn,Dot),e(jn,Lye),e(Lye,Got),e(jn,Oot),e(jn,yye),e(yye,Vot),e(jn,Xot),e(jn,xye),e(xye,zot),e(jn,Qot),e(Wr,Wot),e(Wr,ER),e(ER,WA),e(WA,$ye),e($ye,Uot),e(WA,Hot),e(WA,Wae),e(Wae,Jot),e(WA,Yot),e(ER,Zot),e(ER,UA),e(UA,kye),e(kye,Kot),e(UA,ert),e(UA,Uae),e(Uae,ort),e(UA,rrt),e(Wr,trt),M(HA,Wr,null),v(f,Hro,_),v(f,$f,_),e($f,JA),e(JA,Sye),M(CR,Sye,null),e($f,art),e($f,Rye),e(Rye,nrt),v(f,Jro,_),v(f,vr,_),M(wR,vr,null),e(vr,srt),e(vr,kf),e(kf,lrt),e(kf,Hae),e(Hae,irt),e(kf,drt),e(kf,Jae),e(Jae,crt),e(kf,frt),e(vr,mrt),e(vr,AR),e(AR,grt),e(AR,Pye),e(Pye,hrt),e(AR,urt),e(vr,prt),e(vr,ta),M(LR,ta,null),e(ta,_rt),e(ta,Bye),e(Bye,vrt),e(ta,brt),e(ta,Sf),e(Sf,Frt),e(Sf,Iye),e(Iye,Trt),e(Sf,Mrt),e(Sf,Yae),e(Yae,Ert),e(Sf,Crt),e(ta,wrt),M(YA,ta,null),e(vr,Art),e(vr,Ur),M(yR,Ur,null),e(Ur,Lrt),e(Ur,Nye),e(Nye,yrt),e(Ur,xrt),e(Ur,Dn),e(Dn,$rt),e(Dn,qye),e(qye,krt),e(Dn,Srt),e(Dn,jye),e(jye,Rrt),e(Dn,Prt),e(Dn,Dye),e(Dye,Brt),e(Dn,Irt),e(Ur,Nrt),e(Ur,Gye),e(Gye,ZA),e(ZA,Oye),e(Oye,qrt),e(ZA,jrt),e(ZA,Zae),e(Zae,Drt),e(ZA,Grt),e(Ur,Ort),M(KA,Ur,null),v(f,Yro,_),v(f,Rf,_),e(Rf,e6),e(e6,Vye),M(xR,Vye,null),e(Rf,Vrt),e(Rf,Xye),e(Xye,Xrt),v(f,Zro,_),v(f,br,_),M($R,br,null),e(br,zrt),e(br,Pf),e(Pf,Qrt),e(Pf,Kae),e(Kae,Wrt),e(Pf,Urt),e(Pf,ene),e(ene,Hrt),e(Pf,Jrt),e(br,Yrt),e(br,kR),e(kR,Zrt),e(kR,zye),e(zye,Krt),e(kR,ett),e(br,ott),e(br,aa),M(SR,aa,null),e(aa,rtt),e(aa,Qye),e(Qye,ttt),e(aa,att),e(aa,Bf),e(Bf,ntt),e(Bf,Wye),e(Wye,stt),e(Bf,ltt),e(Bf,one),e(one,itt),e(Bf,dtt),e(aa,ctt),M(o6,aa,null),e(br,ftt),e(br,Hr),M(RR,Hr,null),e(Hr,mtt),e(Hr,Uye),e(Uye,gtt),e(Hr,htt),e(Hr,Gn),e(Gn,utt),e(Gn,Hye),e(Hye,ptt),e(Gn,_tt),e(Gn,Jye),e(Jye,vtt),e(Gn,btt),e(Gn,Yye),e(Yye,Ftt),e(Gn,Ttt),e(Hr,Mtt),e(Hr,Zye),e(Zye,r6),e(r6,Kye),e(Kye,Ett),e(r6,Ctt),e(r6,rne),e(rne,wtt),e(r6,Att),e(Hr,Ltt),M(t6,Hr,null),v(f,Kro,_),v(f,If,_),e(If,a6),e(a6,e9e),M(PR,e9e,null),e(If,ytt),e(If,o9e),e(o9e,xtt),v(f,eto,_),v(f,Fr,_),M(BR,Fr,null),e(Fr,$tt),e(Fr,Nf),e(Nf,ktt),e(Nf,tne),e(tne,Stt),e(Nf,Rtt),e(Nf,ane),e(ane,Ptt),e(Nf,Btt),e(Fr,Itt),e(Fr,IR),e(IR,Ntt),e(IR,r9e),e(r9e,qtt),e(IR,jtt),e(Fr,Dtt),e(Fr,na),M(NR,na,null),e(na,Gtt),e(na,t9e),e(t9e,Ott),e(na,Vtt),e(na,qf),e(qf,Xtt),e(qf,a9e),e(a9e,ztt),e(qf,Qtt),e(qf,nne),e(nne,Wtt),e(qf,Utt),e(na,Htt),M(n6,na,null),e(Fr,Jtt),e(Fr,Jr),M(qR,Jr,null),e(Jr,Ytt),e(Jr,n9e),e(n9e,Ztt),e(Jr,Ktt),e(Jr,On),e(On,eat),e(On,s9e),e(s9e,oat),e(On,rat),e(On,l9e),e(l9e,tat),e(On,aat),e(On,i9e),e(i9e,nat),e(On,sat),e(Jr,lat),e(Jr,ce),e(ce,s6),e(s6,d9e),e(d9e,iat),e(s6,dat),e(s6,sne),e(sne,cat),e(s6,fat),e(ce,mat),e(ce,l6),e(l6,c9e),e(c9e,gat),e(l6,hat),e(l6,lne),e(lne,uat),e(l6,pat),e(ce,_at),e(ce,i6),e(i6,f9e),e(f9e,vat),e(i6,bat),e(i6,ine),e(ine,Fat),e(i6,Tat),e(ce,Mat),e(ce,d6),e(d6,m9e),e(m9e,Eat),e(d6,Cat),e(d6,dne),e(dne,wat),e(d6,Aat),e(ce,Lat),e(ce,c6),e(c6,g9e),e(g9e,yat),e(c6,xat),e(c6,cne),e(cne,$at),e(c6,kat),e(ce,Sat),e(ce,f6),e(f6,h9e),e(h9e,Rat),e(f6,Pat),e(f6,fne),e(fne,Bat),e(f6,Iat),e(ce,Nat),e(ce,m6),e(m6,u9e),e(u9e,qat),e(m6,jat),e(m6,mne),e(mne,Dat),e(m6,Gat),e(ce,Oat),e(ce,g6),e(g6,p9e),e(p9e,Vat),e(g6,Xat),e(g6,gne),e(gne,zat),e(g6,Qat),e(ce,Wat),e(ce,h6),e(h6,_9e),e(_9e,Uat),e(h6,Hat),e(h6,hne),e(hne,Jat),e(h6,Yat),e(ce,Zat),e(ce,u6),e(u6,v9e),e(v9e,Kat),e(u6,ent),e(u6,une),e(une,ont),e(u6,rnt),e(ce,tnt),e(ce,p6),e(p6,b9e),e(b9e,ant),e(p6,nnt),e(p6,pne),e(pne,snt),e(p6,lnt),e(ce,int),e(ce,_6),e(_6,F9e),e(F9e,dnt),e(_6,cnt),e(_6,_ne),e(_ne,fnt),e(_6,mnt),e(ce,gnt),e(ce,v6),e(v6,T9e),e(T9e,hnt),e(v6,unt),e(v6,vne),e(vne,pnt),e(v6,_nt),e(ce,vnt),e(ce,b6),e(b6,M9e),e(M9e,bnt),e(b6,Fnt),e(b6,bne),e(bne,Tnt),e(b6,Mnt),e(ce,Ent),e(ce,F6),e(F6,E9e),e(E9e,Cnt),e(F6,wnt),e(F6,Fne),e(Fne,Ant),e(F6,Lnt),e(ce,ynt),e(ce,T6),e(T6,C9e),e(C9e,xnt),e(T6,$nt),e(T6,Tne),e(Tne,knt),e(T6,Snt),e(ce,Rnt),e(ce,M6),e(M6,w9e),e(w9e,Pnt),e(M6,Bnt),e(M6,Mne),e(Mne,Int),e(M6,Nnt),e(ce,qnt),e(ce,E6),e(E6,A9e),e(A9e,jnt),e(E6,Dnt),e(E6,Ene),e(Ene,Gnt),e(E6,Ont),e(ce,Vnt),e(ce,C6),e(C6,L9e),e(L9e,Xnt),e(C6,znt),e(C6,Cne),e(Cne,Qnt),e(C6,Wnt),e(ce,Unt),e(ce,w6),e(w6,y9e),e(y9e,Hnt),e(w6,Jnt),e(w6,wne),e(wne,Ynt),e(w6,Znt),e(ce,Knt),e(ce,A6),e(A6,x9e),e(x9e,est),e(A6,ost),e(A6,Ane),e(Ane,rst),e(A6,tst),e(Jr,ast),M(L6,Jr,null),v(f,oto,_),v(f,jf,_),e(jf,y6),e(y6,$9e),M(jR,$9e,null),e(jf,nst),e(jf,k9e),e(k9e,sst),v(f,rto,_),v(f,Tr,_),M(DR,Tr,null),e(Tr,lst),e(Tr,Df),e(Df,ist),e(Df,Lne),e(Lne,dst),e(Df,cst),e(Df,yne),e(yne,fst),e(Df,mst),e(Tr,gst),e(Tr,GR),e(GR,hst),e(GR,S9e),e(S9e,ust),e(GR,pst),e(Tr,_st),e(Tr,sa),M(OR,sa,null),e(sa,vst),e(sa,R9e),e(R9e,bst),e(sa,Fst),e(sa,Gf),e(Gf,Tst),e(Gf,P9e),e(P9e,Mst),e(Gf,Est),e(Gf,xne),e(xne,Cst),e(Gf,wst),e(sa,Ast),M(x6,sa,null),e(Tr,Lst),e(Tr,Yr),M(VR,Yr,null),e(Yr,yst),e(Yr,B9e),e(B9e,xst),e(Yr,$st),e(Yr,Vn),e(Vn,kst),e(Vn,I9e),e(I9e,Sst),e(Vn,Rst),e(Vn,N9e),e(N9e,Pst),e(Vn,Bst),e(Vn,q9e),e(q9e,Ist),e(Vn,Nst),e(Yr,qst),e(Yr,fe),e(fe,$6),e($6,j9e),e(j9e,jst),e($6,Dst),e($6,$ne),e($ne,Gst),e($6,Ost),e(fe,Vst),e(fe,k6),e(k6,D9e),e(D9e,Xst),e(k6,zst),e(k6,kne),e(kne,Qst),e(k6,Wst),e(fe,Ust),e(fe,S6),e(S6,G9e),e(G9e,Hst),e(S6,Jst),e(S6,Sne),e(Sne,Yst),e(S6,Zst),e(fe,Kst),e(fe,R6),e(R6,O9e),e(O9e,elt),e(R6,olt),e(R6,Rne),e(Rne,rlt),e(R6,tlt),e(fe,alt),e(fe,P6),e(P6,V9e),e(V9e,nlt),e(P6,slt),e(P6,Pne),e(Pne,llt),e(P6,ilt),e(fe,dlt),e(fe,B6),e(B6,X9e),e(X9e,clt),e(B6,flt),e(B6,Bne),e(Bne,mlt),e(B6,glt),e(fe,hlt),e(fe,I6),e(I6,z9e),e(z9e,ult),e(I6,plt),e(I6,Ine),e(Ine,_lt),e(I6,vlt),e(fe,blt),e(fe,N6),e(N6,Q9e),e(Q9e,Flt),e(N6,Tlt),e(N6,Nne),e(Nne,Mlt),e(N6,Elt),e(fe,Clt),e(fe,q6),e(q6,W9e),e(W9e,wlt),e(q6,Alt),e(q6,qne),e(qne,Llt),e(q6,ylt),e(fe,xlt),e(fe,j6),e(j6,U9e),e(U9e,$lt),e(j6,klt),e(j6,jne),e(jne,Slt),e(j6,Rlt),e(fe,Plt),e(fe,D6),e(D6,H9e),e(H9e,Blt),e(D6,Ilt),e(D6,Dne),e(Dne,Nlt),e(D6,qlt),e(fe,jlt),e(fe,G6),e(G6,J9e),e(J9e,Dlt),e(G6,Glt),e(G6,Gne),e(Gne,Olt),e(G6,Vlt),e(fe,Xlt),e(fe,O6),e(O6,Y9e),e(Y9e,zlt),e(O6,Qlt),e(O6,One),e(One,Wlt),e(O6,Ult),e(fe,Hlt),e(fe,V6),e(V6,Z9e),e(Z9e,Jlt),e(V6,Ylt),e(V6,Vne),e(Vne,Zlt),e(V6,Klt),e(fe,eit),e(fe,X6),e(X6,K9e),e(K9e,oit),e(X6,rit),e(X6,Xne),e(Xne,tit),e(X6,ait),e(fe,nit),e(fe,z6),e(z6,exe),e(exe,sit),e(z6,lit),e(z6,zne),e(zne,iit),e(z6,dit),e(fe,cit),e(fe,Q6),e(Q6,oxe),e(oxe,fit),e(Q6,mit),e(Q6,Qne),e(Qne,git),e(Q6,hit),e(fe,uit),e(fe,W6),e(W6,rxe),e(rxe,pit),e(W6,_it),e(W6,Wne),e(Wne,vit),e(W6,bit),e(fe,Fit),e(fe,U6),e(U6,txe),e(txe,Tit),e(U6,Mit),e(U6,Une),e(Une,Eit),e(U6,Cit),e(fe,wit),e(fe,H6),e(H6,axe),e(axe,Ait),e(H6,Lit),e(H6,Hne),e(Hne,yit),e(H6,xit),e(fe,$it),e(fe,J6),e(J6,nxe),e(nxe,kit),e(J6,Sit),e(J6,Jne),e(Jne,Rit),e(J6,Pit),e(Yr,Bit),M(Y6,Yr,null),v(f,tto,_),v(f,Of,_),e(Of,Z6),e(Z6,sxe),M(XR,sxe,null),e(Of,Iit),e(Of,lxe),e(lxe,Nit),v(f,ato,_),v(f,Mr,_),M(zR,Mr,null),e(Mr,qit),e(Mr,Vf),e(Vf,jit),e(Vf,Yne),e(Yne,Dit),e(Vf,Git),e(Vf,Zne),e(Zne,Oit),e(Vf,Vit),e(Mr,Xit),e(Mr,QR),e(QR,zit),e(QR,ixe),e(ixe,Qit),e(QR,Wit),e(Mr,Uit),e(Mr,la),M(WR,la,null),e(la,Hit),e(la,dxe),e(dxe,Jit),e(la,Yit),e(la,Xf),e(Xf,Zit),e(Xf,cxe),e(cxe,Kit),e(Xf,edt),e(Xf,Kne),e(Kne,odt),e(Xf,rdt),e(la,tdt),M(K6,la,null),e(Mr,adt),e(Mr,Zr),M(UR,Zr,null),e(Zr,ndt),e(Zr,fxe),e(fxe,sdt),e(Zr,ldt),e(Zr,Xn),e(Xn,idt),e(Xn,mxe),e(mxe,ddt),e(Xn,cdt),e(Xn,gxe),e(gxe,fdt),e(Xn,mdt),e(Xn,hxe),e(hxe,gdt),e(Xn,hdt),e(Zr,udt),e(Zr,uxe),e(uxe,e7),e(e7,pxe),e(pxe,pdt),e(e7,_dt),e(e7,ese),e(ese,vdt),e(e7,bdt),e(Zr,Fdt),M(o7,Zr,null),v(f,nto,_),v(f,zf,_),e(zf,r7),e(r7,_xe),M(HR,_xe,null),e(zf,Tdt),e(zf,vxe),e(vxe,Mdt),v(f,sto,_),v(f,Er,_),M(JR,Er,null),e(Er,Edt),e(Er,Qf),e(Qf,Cdt),e(Qf,ose),e(ose,wdt),e(Qf,Adt),e(Qf,rse),e(rse,Ldt),e(Qf,ydt),e(Er,xdt),e(Er,YR),e(YR,$dt),e(YR,bxe),e(bxe,kdt),e(YR,Sdt),e(Er,Rdt),e(Er,ia),M(ZR,ia,null),e(ia,Pdt),e(ia,Fxe),e(Fxe,Bdt),e(ia,Idt),e(ia,Wf),e(Wf,Ndt),e(Wf,Txe),e(Txe,qdt),e(Wf,jdt),e(Wf,tse),e(tse,Ddt),e(Wf,Gdt),e(ia,Odt),M(t7,ia,null),e(Er,Vdt),e(Er,Kr),M(KR,Kr,null),e(Kr,Xdt),e(Kr,Mxe),e(Mxe,zdt),e(Kr,Qdt),e(Kr,zn),e(zn,Wdt),e(zn,Exe),e(Exe,Udt),e(zn,Hdt),e(zn,Cxe),e(Cxe,Jdt),e(zn,Ydt),e(zn,wxe),e(wxe,Zdt),e(zn,Kdt),e(Kr,ect),e(Kr,eP),e(eP,a7),e(a7,Axe),e(Axe,oct),e(a7,rct),e(a7,ase),e(ase,tct),e(a7,act),e(eP,nct),e(eP,n7),e(n7,Lxe),e(Lxe,sct),e(n7,lct),e(n7,nse),e(nse,ict),e(n7,dct),e(Kr,cct),M(s7,Kr,null),v(f,lto,_),v(f,Uf,_),e(Uf,l7),e(l7,yxe),M(oP,yxe,null),e(Uf,fct),e(Uf,xxe),e(xxe,mct),v(f,ito,_),v(f,Cr,_),M(rP,Cr,null),e(Cr,gct),e(Cr,Hf),e(Hf,hct),e(Hf,sse),e(sse,uct),e(Hf,pct),e(Hf,lse),e(lse,_ct),e(Hf,vct),e(Cr,bct),e(Cr,tP),e(tP,Fct),e(tP,$xe),e($xe,Tct),e(tP,Mct),e(Cr,Ect),e(Cr,da),M(aP,da,null),e(da,Cct),e(da,kxe),e(kxe,wct),e(da,Act),e(da,Jf),e(Jf,Lct),e(Jf,Sxe),e(Sxe,yct),e(Jf,xct),e(Jf,ise),e(ise,$ct),e(Jf,kct),e(da,Sct),M(i7,da,null),e(Cr,Rct),e(Cr,et),M(nP,et,null),e(et,Pct),e(et,Rxe),e(Rxe,Bct),e(et,Ict),e(et,Qn),e(Qn,Nct),e(Qn,Pxe),e(Pxe,qct),e(Qn,jct),e(Qn,Bxe),e(Bxe,Dct),e(Qn,Gct),e(Qn,Ixe),e(Ixe,Oct),e(Qn,Vct),e(et,Xct),e(et,te),e(te,d7),e(d7,Nxe),e(Nxe,zct),e(d7,Qct),e(d7,dse),e(dse,Wct),e(d7,Uct),e(te,Hct),e(te,c7),e(c7,qxe),e(qxe,Jct),e(c7,Yct),e(c7,cse),e(cse,Zct),e(c7,Kct),e(te,eft),e(te,f7),e(f7,jxe),e(jxe,oft),e(f7,rft),e(f7,fse),e(fse,tft),e(f7,aft),e(te,nft),e(te,m7),e(m7,Dxe),e(Dxe,sft),e(m7,lft),e(m7,mse),e(mse,ift),e(m7,dft),e(te,cft),e(te,g7),e(g7,Gxe),e(Gxe,fft),e(g7,mft),e(g7,gse),e(gse,gft),e(g7,hft),e(te,uft),e(te,h7),e(h7,Oxe),e(Oxe,pft),e(h7,_ft),e(h7,hse),e(hse,vft),e(h7,bft),e(te,Fft),e(te,u7),e(u7,Vxe),e(Vxe,Tft),e(u7,Mft),e(u7,use),e(use,Eft),e(u7,Cft),e(te,wft),e(te,p7),e(p7,Xxe),e(Xxe,Aft),e(p7,Lft),e(p7,pse),e(pse,yft),e(p7,xft),e(te,$ft),e(te,_7),e(_7,zxe),e(zxe,kft),e(_7,Sft),e(_7,_se),e(_se,Rft),e(_7,Pft),e(te,Bft),e(te,v7),e(v7,Qxe),e(Qxe,Ift),e(v7,Nft),e(v7,vse),e(vse,qft),e(v7,jft),e(te,Dft),e(te,b7),e(b7,Wxe),e(Wxe,Gft),e(b7,Oft),e(b7,bse),e(bse,Vft),e(b7,Xft),e(te,zft),e(te,F7),e(F7,Uxe),e(Uxe,Qft),e(F7,Wft),e(F7,Fse),e(Fse,Uft),e(F7,Hft),e(te,Jft),e(te,T7),e(T7,Hxe),e(Hxe,Yft),e(T7,Zft),e(T7,Tse),e(Tse,Kft),e(T7,emt),e(te,omt),e(te,M7),e(M7,Jxe),e(Jxe,rmt),e(M7,tmt),e(M7,Mse),e(Mse,amt),e(M7,nmt),e(te,smt),e(te,E7),e(E7,Yxe),e(Yxe,lmt),e(E7,imt),e(E7,Ese),e(Ese,dmt),e(E7,cmt),e(te,fmt),e(te,C7),e(C7,Zxe),e(Zxe,mmt),e(C7,gmt),e(C7,Cse),e(Cse,hmt),e(C7,umt),e(te,pmt),e(te,w7),e(w7,Kxe),e(Kxe,_mt),e(w7,vmt),e(w7,wse),e(wse,bmt),e(w7,Fmt),e(te,Tmt),e(te,A7),e(A7,e$e),e(e$e,Mmt),e(A7,Emt),e(A7,Ase),e(Ase,Cmt),e(A7,wmt),e(te,Amt),e(te,L7),e(L7,o$e),e(o$e,Lmt),e(L7,ymt),e(L7,Lse),e(Lse,xmt),e(L7,$mt),e(te,kmt),e(te,y7),e(y7,r$e),e(r$e,Smt),e(y7,Rmt),e(y7,yse),e(yse,Pmt),e(y7,Bmt),e(te,Imt),e(te,x7),e(x7,t$e),e(t$e,Nmt),e(x7,qmt),e(x7,xse),e(xse,jmt),e(x7,Dmt),e(te,Gmt),e(te,$7),e($7,a$e),e(a$e,Omt),e($7,Vmt),e($7,$se),e($se,Xmt),e($7,zmt),e(te,Qmt),e(te,k7),e(k7,n$e),e(n$e,Wmt),e(k7,Umt),e(k7,kse),e(kse,Hmt),e(k7,Jmt),e(te,Ymt),e(te,S7),e(S7,s$e),e(s$e,Zmt),e(S7,Kmt),e(S7,Sse),e(Sse,egt),e(S7,ogt),e(te,rgt),e(te,R7),e(R7,l$e),e(l$e,tgt),e(R7,agt),e(R7,Rse),e(Rse,ngt),e(R7,sgt),e(te,lgt),e(te,P7),e(P7,i$e),e(i$e,igt),e(P7,dgt),e(P7,Pse),e(Pse,cgt),e(P7,fgt),e(te,mgt),e(te,B7),e(B7,d$e),e(d$e,ggt),e(B7,hgt),e(B7,Bse),e(Bse,ugt),e(B7,pgt),e(et,_gt),M(I7,et,null),v(f,dto,_),v(f,Yf,_),e(Yf,N7),e(N7,c$e),M(sP,c$e,null),e(Yf,vgt),e(Yf,f$e),e(f$e,bgt),v(f,cto,_),v(f,wr,_),M(lP,wr,null),e(wr,Fgt),e(wr,Zf),e(Zf,Tgt),e(Zf,Ise),e(Ise,Mgt),e(Zf,Egt),e(Zf,Nse),e(Nse,Cgt),e(Zf,wgt),e(wr,Agt),e(wr,iP),e(iP,Lgt),e(iP,m$e),e(m$e,ygt),e(iP,xgt),e(wr,$gt),e(wr,ca),M(dP,ca,null),e(ca,kgt),e(ca,g$e),e(g$e,Sgt),e(ca,Rgt),e(ca,Kf),e(Kf,Pgt),e(Kf,h$e),e(h$e,Bgt),e(Kf,Igt),e(Kf,qse),e(qse,Ngt),e(Kf,qgt),e(ca,jgt),M(q7,ca,null),e(wr,Dgt),e(wr,ot),M(cP,ot,null),e(ot,Ggt),e(ot,u$e),e(u$e,Ogt),e(ot,Vgt),e(ot,Wn),e(Wn,Xgt),e(Wn,p$e),e(p$e,zgt),e(Wn,Qgt),e(Wn,_$e),e(_$e,Wgt),e(Wn,Ugt),e(Wn,v$e),e(v$e,Hgt),e(Wn,Jgt),e(ot,Ygt),e(ot,xe),e(xe,j7),e(j7,b$e),e(b$e,Zgt),e(j7,Kgt),e(j7,jse),e(jse,eht),e(j7,oht),e(xe,rht),e(xe,D7),e(D7,F$e),e(F$e,tht),e(D7,aht),e(D7,Dse),e(Dse,nht),e(D7,sht),e(xe,lht),e(xe,G7),e(G7,T$e),e(T$e,iht),e(G7,dht),e(G7,Gse),e(Gse,cht),e(G7,fht),e(xe,mht),e(xe,O7),e(O7,M$e),e(M$e,ght),e(O7,hht),e(O7,Ose),e(Ose,uht),e(O7,pht),e(xe,_ht),e(xe,V7),e(V7,E$e),e(E$e,vht),e(V7,bht),e(V7,Vse),e(Vse,Fht),e(V7,Tht),e(xe,Mht),e(xe,X7),e(X7,C$e),e(C$e,Eht),e(X7,Cht),e(X7,Xse),e(Xse,wht),e(X7,Aht),e(xe,Lht),e(xe,z7),e(z7,w$e),e(w$e,yht),e(z7,xht),e(z7,zse),e(zse,$ht),e(z7,kht),e(xe,Sht),e(xe,Q7),e(Q7,A$e),e(A$e,Rht),e(Q7,Pht),e(Q7,Qse),e(Qse,Bht),e(Q7,Iht),e(xe,Nht),e(xe,W7),e(W7,L$e),e(L$e,qht),e(W7,jht),e(W7,Wse),e(Wse,Dht),e(W7,Ght),e(xe,Oht),e(xe,U7),e(U7,y$e),e(y$e,Vht),e(U7,Xht),e(U7,Use),e(Use,zht),e(U7,Qht),e(ot,Wht),M(H7,ot,null),v(f,fto,_),v(f,em,_),e(em,J7),e(J7,x$e),M(fP,x$e,null),e(em,Uht),e(em,$$e),e($$e,Hht),v(f,mto,_),v(f,Ar,_),M(mP,Ar,null),e(Ar,Jht),e(Ar,om),e(om,Yht),e(om,Hse),e(Hse,Zht),e(om,Kht),e(om,Jse),e(Jse,eut),e(om,out),e(Ar,rut),e(Ar,gP),e(gP,tut),e(gP,k$e),e(k$e,aut),e(gP,nut),e(Ar,sut),e(Ar,fa),M(hP,fa,null),e(fa,lut),e(fa,S$e),e(S$e,iut),e(fa,dut),e(fa,rm),e(rm,cut),e(rm,R$e),e(R$e,fut),e(rm,mut),e(rm,Yse),e(Yse,gut),e(rm,hut),e(fa,uut),M(Y7,fa,null),e(Ar,put),e(Ar,rt),M(uP,rt,null),e(rt,_ut),e(rt,P$e),e(P$e,vut),e(rt,but),e(rt,Un),e(Un,Fut),e(Un,B$e),e(B$e,Tut),e(Un,Mut),e(Un,I$e),e(I$e,Eut),e(Un,Cut),e(Un,N$e),e(N$e,wut),e(Un,Aut),e(rt,Lut),e(rt,Ee),e(Ee,Z7),e(Z7,q$e),e(q$e,yut),e(Z7,xut),e(Z7,Zse),e(Zse,$ut),e(Z7,kut),e(Ee,Sut),e(Ee,K7),e(K7,j$e),e(j$e,Rut),e(K7,Put),e(K7,Kse),e(Kse,But),e(K7,Iut),e(Ee,Nut),e(Ee,eL),e(eL,D$e),e(D$e,qut),e(eL,jut),e(eL,ele),e(ele,Dut),e(eL,Gut),e(Ee,Out),e(Ee,oL),e(oL,G$e),e(G$e,Vut),e(oL,Xut),e(oL,ole),e(ole,zut),e(oL,Qut),e(Ee,Wut),e(Ee,rL),e(rL,O$e),e(O$e,Uut),e(rL,Hut),e(rL,rle),e(rle,Jut),e(rL,Yut),e(Ee,Zut),e(Ee,tL),e(tL,V$e),e(V$e,Kut),e(tL,ept),e(tL,tle),e(tle,opt),e(tL,rpt),e(Ee,tpt),e(Ee,aL),e(aL,X$e),e(X$e,apt),e(aL,npt),e(aL,ale),e(ale,spt),e(aL,lpt),e(Ee,ipt),e(Ee,nL),e(nL,z$e),e(z$e,dpt),e(nL,cpt),e(nL,nle),e(nle,fpt),e(nL,mpt),e(Ee,gpt),e(Ee,sL),e(sL,Q$e),e(Q$e,hpt),e(sL,upt),e(sL,sle),e(sle,ppt),e(sL,_pt),e(Ee,vpt),e(Ee,lL),e(lL,W$e),e(W$e,bpt),e(lL,Fpt),e(lL,lle),e(lle,Tpt),e(lL,Mpt),e(Ee,Ept),e(Ee,iL),e(iL,U$e),e(U$e,Cpt),e(iL,wpt),e(iL,ile),e(ile,Apt),e(iL,Lpt),e(Ee,ypt),e(Ee,dL),e(dL,H$e),e(H$e,xpt),e(dL,$pt),e(dL,dle),e(dle,kpt),e(dL,Spt),e(Ee,Rpt),e(Ee,cL),e(cL,J$e),e(J$e,Ppt),e(cL,Bpt),e(cL,cle),e(cle,Ipt),e(cL,Npt),e(rt,qpt),M(fL,rt,null),v(f,gto,_),v(f,tm,_),e(tm,mL),e(mL,Y$e),M(pP,Y$e,null),e(tm,jpt),e(tm,Z$e),e(Z$e,Dpt),v(f,hto,_),v(f,Lr,_),M(_P,Lr,null),e(Lr,Gpt),e(Lr,am),e(am,Opt),e(am,fle),e(fle,Vpt),e(am,Xpt),e(am,mle),e(mle,zpt),e(am,Qpt),e(Lr,Wpt),e(Lr,vP),e(vP,Upt),e(vP,K$e),e(K$e,Hpt),e(vP,Jpt),e(Lr,Ypt),e(Lr,ma),M(bP,ma,null),e(ma,Zpt),e(ma,eke),e(eke,Kpt),e(ma,e_t),e(ma,nm),e(nm,o_t),e(nm,oke),e(oke,r_t),e(nm,t_t),e(nm,gle),e(gle,a_t),e(nm,n_t),e(ma,s_t),M(gL,ma,null),e(Lr,l_t),e(Lr,tt),M(FP,tt,null),e(tt,i_t),e(tt,rke),e(rke,d_t),e(tt,c_t),e(tt,Hn),e(Hn,f_t),e(Hn,tke),e(tke,m_t),e(Hn,g_t),e(Hn,ake),e(ake,h_t),e(Hn,u_t),e(Hn,nke),e(nke,p_t),e(Hn,__t),e(tt,v_t),e(tt,$e),e($e,hL),e(hL,ske),e(ske,b_t),e(hL,F_t),e(hL,hle),e(hle,T_t),e(hL,M_t),e($e,E_t),e($e,uL),e(uL,lke),e(lke,C_t),e(uL,w_t),e(uL,ule),e(ule,A_t),e(uL,L_t),e($e,y_t),e($e,pL),e(pL,ike),e(ike,x_t),e(pL,$_t),e(pL,ple),e(ple,k_t),e(pL,S_t),e($e,R_t),e($e,_L),e(_L,dke),e(dke,P_t),e(_L,B_t),e(_L,_le),e(_le,I_t),e(_L,N_t),e($e,q_t),e($e,vL),e(vL,cke),e(cke,j_t),e(vL,D_t),e(vL,vle),e(vle,G_t),e(vL,O_t),e($e,V_t),e($e,bL),e(bL,fke),e(fke,X_t),e(bL,z_t),e(bL,ble),e(ble,Q_t),e(bL,W_t),e($e,U_t),e($e,FL),e(FL,mke),e(mke,H_t),e(FL,J_t),e(FL,Fle),e(Fle,Y_t),e(FL,Z_t),e($e,K_t),e($e,TL),e(TL,gke),e(gke,e2t),e(TL,o2t),e(TL,Tle),e(Tle,r2t),e(TL,t2t),e($e,a2t),e($e,ML),e(ML,hke),e(hke,n2t),e(ML,s2t),e(ML,Mle),e(Mle,l2t),e(ML,i2t),e($e,d2t),e($e,EL),e(EL,uke),e(uke,c2t),e(EL,f2t),e(EL,Ele),e(Ele,m2t),e(EL,g2t),e(tt,h2t),M(CL,tt,null),v(f,uto,_),v(f,sm,_),e(sm,wL),e(wL,pke),M(TP,pke,null),e(sm,u2t),e(sm,_ke),e(_ke,p2t),v(f,pto,_),v(f,yr,_),M(MP,yr,null),e(yr,_2t),e(yr,lm),e(lm,v2t),e(lm,Cle),e(Cle,b2t),e(lm,F2t),e(lm,wle),e(wle,T2t),e(lm,M2t),e(yr,E2t),e(yr,EP),e(EP,C2t),e(EP,vke),e(vke,w2t),e(EP,A2t),e(yr,L2t),e(yr,ga),M(CP,ga,null),e(ga,y2t),e(ga,bke),e(bke,x2t),e(ga,$2t),e(ga,im),e(im,k2t),e(im,Fke),e(Fke,S2t),e(im,R2t),e(im,Ale),e(Ale,P2t),e(im,B2t),e(ga,I2t),M(AL,ga,null),e(yr,N2t),e(yr,at),M(wP,at,null),e(at,q2t),e(at,Tke),e(Tke,j2t),e(at,D2t),e(at,Jn),e(Jn,G2t),e(Jn,Mke),e(Mke,O2t),e(Jn,V2t),e(Jn,Eke),e(Eke,X2t),e(Jn,z2t),e(Jn,Cke),e(Cke,Q2t),e(Jn,W2t),e(at,U2t),e(at,ke),e(ke,LL),e(LL,wke),e(wke,H2t),e(LL,J2t),e(LL,Lle),e(Lle,Y2t),e(LL,Z2t),e(ke,K2t),e(ke,yL),e(yL,Ake),e(Ake,evt),e(yL,ovt),e(yL,yle),e(yle,rvt),e(yL,tvt),e(ke,avt),e(ke,xL),e(xL,Lke),e(Lke,nvt),e(xL,svt),e(xL,xle),e(xle,lvt),e(xL,ivt),e(ke,dvt),e(ke,$L),e($L,yke),e(yke,cvt),e($L,fvt),e($L,$le),e($le,mvt),e($L,gvt),e(ke,hvt),e(ke,kL),e(kL,xke),e(xke,uvt),e(kL,pvt),e(kL,kle),e(kle,_vt),e(kL,vvt),e(ke,bvt),e(ke,SL),e(SL,$ke),e($ke,Fvt),e(SL,Tvt),e(SL,Sle),e(Sle,Mvt),e(SL,Evt),e(ke,Cvt),e(ke,RL),e(RL,kke),e(kke,wvt),e(RL,Avt),e(RL,Rle),e(Rle,Lvt),e(RL,yvt),e(ke,xvt),e(ke,PL),e(PL,Ske),e(Ske,$vt),e(PL,kvt),e(PL,Ple),e(Ple,Svt),e(PL,Rvt),e(ke,Pvt),e(ke,BL),e(BL,Rke),e(Rke,Bvt),e(BL,Ivt),e(BL,Ble),e(Ble,Nvt),e(BL,qvt),e(ke,jvt),e(ke,IL),e(IL,Pke),e(Pke,Dvt),e(IL,Gvt),e(IL,Ile),e(Ile,Ovt),e(IL,Vvt),e(at,Xvt),M(NL,at,null),v(f,_to,_),v(f,dm,_),e(dm,qL),e(qL,Bke),M(AP,Bke,null),e(dm,zvt),e(dm,Ike),e(Ike,Qvt),v(f,vto,_),v(f,xr,_),M(LP,xr,null),e(xr,Wvt),e(xr,cm),e(cm,Uvt),e(cm,Nle),e(Nle,Hvt),e(cm,Jvt),e(cm,qle),e(qle,Yvt),e(cm,Zvt),e(xr,Kvt),e(xr,yP),e(yP,e4t),e(yP,Nke),e(Nke,o4t),e(yP,r4t),e(xr,t4t),e(xr,ha),M(xP,ha,null),e(ha,a4t),e(ha,qke),e(qke,n4t),e(ha,s4t),e(ha,fm),e(fm,l4t),e(fm,jke),e(jke,i4t),e(fm,d4t),e(fm,jle),e(jle,c4t),e(fm,f4t),e(ha,m4t),M(jL,ha,null),e(xr,g4t),e(xr,nt),M($P,nt,null),e(nt,h4t),e(nt,Dke),e(Dke,u4t),e(nt,p4t),e(nt,Yn),e(Yn,_4t),e(Yn,Gke),e(Gke,v4t),e(Yn,b4t),e(Yn,Oke),e(Oke,F4t),e(Yn,T4t),e(Yn,Vke),e(Vke,M4t),e(Yn,E4t),e(nt,C4t),e(nt,Se),e(Se,DL),e(DL,Xke),e(Xke,w4t),e(DL,A4t),e(DL,Dle),e(Dle,L4t),e(DL,y4t),e(Se,x4t),e(Se,GL),e(GL,zke),e(zke,$4t),e(GL,k4t),e(GL,Gle),e(Gle,S4t),e(GL,R4t),e(Se,P4t),e(Se,OL),e(OL,Qke),e(Qke,B4t),e(OL,I4t),e(OL,Ole),e(Ole,N4t),e(OL,q4t),e(Se,j4t),e(Se,VL),e(VL,Wke),e(Wke,D4t),e(VL,G4t),e(VL,Vle),e(Vle,O4t),e(VL,V4t),e(Se,X4t),e(Se,XL),e(XL,Uke),e(Uke,z4t),e(XL,Q4t),e(XL,Xle),e(Xle,W4t),e(XL,U4t),e(Se,H4t),e(Se,zL),e(zL,Hke),e(Hke,J4t),e(zL,Y4t),e(zL,zle),e(zle,Z4t),e(zL,K4t),e(Se,e1t),e(Se,QL),e(QL,Jke),e(Jke,o1t),e(QL,r1t),e(QL,Qle),e(Qle,t1t),e(QL,a1t),e(Se,n1t),e(Se,WL),e(WL,Yke),e(Yke,s1t),e(WL,l1t),e(WL,Wle),e(Wle,i1t),e(WL,d1t),e(Se,c1t),e(Se,UL),e(UL,Zke),e(Zke,f1t),e(UL,m1t),e(UL,Ule),e(Ule,g1t),e(UL,h1t),e(Se,u1t),e(Se,HL),e(HL,Kke),e(Kke,p1t),e(HL,_1t),e(HL,Hle),e(Hle,v1t),e(HL,b1t),e(nt,F1t),M(JL,nt,null),v(f,bto,_),v(f,mm,_),e(mm,YL),e(YL,eSe),M(kP,eSe,null),e(mm,T1t),e(mm,oSe),e(oSe,M1t),v(f,Fto,_),v(f,$r,_),M(SP,$r,null),e($r,E1t),e($r,gm),e(gm,C1t),e(gm,Jle),e(Jle,w1t),e(gm,A1t),e(gm,Yle),e(Yle,L1t),e(gm,y1t),e($r,x1t),e($r,RP),e(RP,$1t),e(RP,rSe),e(rSe,k1t),e(RP,S1t),e($r,R1t),e($r,ua),M(PP,ua,null),e(ua,P1t),e(ua,tSe),e(tSe,B1t),e(ua,I1t),e(ua,hm),e(hm,N1t),e(hm,aSe),e(aSe,q1t),e(hm,j1t),e(hm,Zle),e(Zle,D1t),e(hm,G1t),e(ua,O1t),M(ZL,ua,null),e($r,V1t),e($r,st),M(BP,st,null),e(st,X1t),e(st,nSe),e(nSe,z1t),e(st,Q1t),e(st,Zn),e(Zn,W1t),e(Zn,sSe),e(sSe,U1t),e(Zn,H1t),e(Zn,lSe),e(lSe,J1t),e(Zn,Y1t),e(Zn,iSe),e(iSe,Z1t),e(Zn,K1t),e(st,ebt),e(st,Re),e(Re,KL),e(KL,dSe),e(dSe,obt),e(KL,rbt),e(KL,Kle),e(Kle,tbt),e(KL,abt),e(Re,nbt),e(Re,e8),e(e8,cSe),e(cSe,sbt),e(e8,lbt),e(e8,eie),e(eie,ibt),e(e8,dbt),e(Re,cbt),e(Re,o8),e(o8,fSe),e(fSe,fbt),e(o8,mbt),e(o8,oie),e(oie,gbt),e(o8,hbt),e(Re,ubt),e(Re,r8),e(r8,mSe),e(mSe,pbt),e(r8,_bt),e(r8,rie),e(rie,vbt),e(r8,bbt),e(Re,Fbt),e(Re,t8),e(t8,gSe),e(gSe,Tbt),e(t8,Mbt),e(t8,tie),e(tie,Ebt),e(t8,Cbt),e(Re,wbt),e(Re,a8),e(a8,hSe),e(hSe,Abt),e(a8,Lbt),e(a8,aie),e(aie,ybt),e(a8,xbt),e(Re,$bt),e(Re,n8),e(n8,uSe),e(uSe,kbt),e(n8,Sbt),e(n8,nie),e(nie,Rbt),e(n8,Pbt),e(Re,Bbt),e(Re,s8),e(s8,pSe),e(pSe,Ibt),e(s8,Nbt),e(s8,sie),e(sie,qbt),e(s8,jbt),e(Re,Dbt),e(Re,l8),e(l8,_Se),e(_Se,Gbt),e(l8,Obt),e(l8,lie),e(lie,Vbt),e(l8,Xbt),e(Re,zbt),e(Re,i8),e(i8,vSe),e(vSe,Qbt),e(i8,Wbt),e(i8,iie),e(iie,Ubt),e(i8,Hbt),e(st,Jbt),M(d8,st,null),v(f,Tto,_),v(f,um,_),e(um,c8),e(c8,bSe),M(IP,bSe,null),e(um,Ybt),e(um,FSe),e(FSe,Zbt),v(f,Mto,_),v(f,kr,_),M(NP,kr,null),e(kr,Kbt),e(kr,pm),e(pm,e3t),e(pm,die),e(die,o3t),e(pm,r3t),e(pm,cie),e(cie,t3t),e(pm,a3t),e(kr,n3t),e(kr,qP),e(qP,s3t),e(qP,TSe),e(TSe,l3t),e(qP,i3t),e(kr,d3t),e(kr,pa),M(jP,pa,null),e(pa,c3t),e(pa,MSe),e(MSe,f3t),e(pa,m3t),e(pa,_m),e(_m,g3t),e(_m,ESe),e(ESe,h3t),e(_m,u3t),e(_m,fie),e(fie,p3t),e(_m,_3t),e(pa,v3t),M(f8,pa,null),e(kr,b3t),e(kr,lt),M(DP,lt,null),e(lt,F3t),e(lt,CSe),e(CSe,T3t),e(lt,M3t),e(lt,Kn),e(Kn,E3t),e(Kn,wSe),e(wSe,C3t),e(Kn,w3t),e(Kn,ASe),e(ASe,A3t),e(Kn,L3t),e(Kn,LSe),e(LSe,y3t),e(Kn,x3t),e(lt,$3t),e(lt,Xe),e(Xe,m8),e(m8,ySe),e(ySe,k3t),e(m8,S3t),e(m8,mie),e(mie,R3t),e(m8,P3t),e(Xe,B3t),e(Xe,g8),e(g8,xSe),e(xSe,I3t),e(g8,N3t),e(g8,gie),e(gie,q3t),e(g8,j3t),e(Xe,D3t),e(Xe,h8),e(h8,$Se),e($Se,G3t),e(h8,O3t),e(h8,hie),e(hie,V3t),e(h8,X3t),e(Xe,z3t),e(Xe,u8),e(u8,kSe),e(kSe,Q3t),e(u8,W3t),e(u8,uie),e(uie,U3t),e(u8,H3t),e(Xe,J3t),e(Xe,p8),e(p8,SSe),e(SSe,Y3t),e(p8,Z3t),e(p8,pie),e(pie,K3t),e(p8,e0t),e(Xe,o0t),e(Xe,_8),e(_8,RSe),e(RSe,r0t),e(_8,t0t),e(_8,_ie),e(_ie,a0t),e(_8,n0t),e(Xe,s0t),e(Xe,v8),e(v8,PSe),e(PSe,l0t),e(v8,i0t),e(v8,vie),e(vie,d0t),e(v8,c0t),e(Xe,f0t),e(Xe,b8),e(b8,BSe),e(BSe,m0t),e(b8,g0t),e(b8,bie),e(bie,h0t),e(b8,u0t),e(lt,p0t),M(F8,lt,null),v(f,Eto,_),v(f,vm,_),e(vm,T8),e(T8,ISe),M(GP,ISe,null),e(vm,_0t),e(vm,NSe),e(NSe,v0t),v(f,Cto,_),v(f,Sr,_),M(OP,Sr,null),e(Sr,b0t),e(Sr,bm),e(bm,F0t),e(bm,Fie),e(Fie,T0t),e(bm,M0t),e(bm,Tie),e(Tie,E0t),e(bm,C0t),e(Sr,w0t),e(Sr,VP),e(VP,A0t),e(VP,qSe),e(qSe,L0t),e(VP,y0t),e(Sr,x0t),e(Sr,_a),M(XP,_a,null),e(_a,$0t),e(_a,jSe),e(jSe,k0t),e(_a,S0t),e(_a,Fm),e(Fm,R0t),e(Fm,DSe),e(DSe,P0t),e(Fm,B0t),e(Fm,Mie),e(Mie,I0t),e(Fm,N0t),e(_a,q0t),M(M8,_a,null),e(Sr,j0t),e(Sr,it),M(zP,it,null),e(it,D0t),e(it,GSe),e(GSe,G0t),e(it,O0t),e(it,es),e(es,V0t),e(es,OSe),e(OSe,X0t),e(es,z0t),e(es,VSe),e(VSe,Q0t),e(es,W0t),e(es,XSe),e(XSe,U0t),e(es,H0t),e(it,J0t),e(it,ze),e(ze,E8),e(E8,zSe),e(zSe,Y0t),e(E8,Z0t),e(E8,Eie),e(Eie,K0t),e(E8,eFt),e(ze,oFt),e(ze,C8),e(C8,QSe),e(QSe,rFt),e(C8,tFt),e(C8,Cie),e(Cie,aFt),e(C8,nFt),e(ze,sFt),e(ze,w8),e(w8,WSe),e(WSe,lFt),e(w8,iFt),e(w8,wie),e(wie,dFt),e(w8,cFt),e(ze,fFt),e(ze,A8),e(A8,USe),e(USe,mFt),e(A8,gFt),e(A8,Aie),e(Aie,hFt),e(A8,uFt),e(ze,pFt),e(ze,L8),e(L8,HSe),e(HSe,_Ft),e(L8,vFt),e(L8,Lie),e(Lie,bFt),e(L8,FFt),e(ze,TFt),e(ze,y8),e(y8,JSe),e(JSe,MFt),e(y8,EFt),e(y8,yie),e(yie,CFt),e(y8,wFt),e(ze,AFt),e(ze,x8),e(x8,YSe),e(YSe,LFt),e(x8,yFt),e(x8,xie),e(xie,xFt),e(x8,$Ft),e(ze,kFt),e(ze,$8),e($8,ZSe),e(ZSe,SFt),e($8,RFt),e($8,$ie),e($ie,PFt),e($8,BFt),e(it,IFt),M(k8,it,null),v(f,wto,_),v(f,Tm,_),e(Tm,S8),e(S8,KSe),M(QP,KSe,null),e(Tm,NFt),e(Tm,eRe),e(eRe,qFt),v(f,Ato,_),v(f,Rr,_),M(WP,Rr,null),e(Rr,jFt),e(Rr,Mm),e(Mm,DFt),e(Mm,kie),e(kie,GFt),e(Mm,OFt),e(Mm,Sie),e(Sie,VFt),e(Mm,XFt),e(Rr,zFt),e(Rr,UP),e(UP,QFt),e(UP,oRe),e(oRe,WFt),e(UP,UFt),e(Rr,HFt),e(Rr,va),M(HP,va,null),e(va,JFt),e(va,rRe),e(rRe,YFt),e(va,ZFt),e(va,Em),e(Em,KFt),e(Em,tRe),e(tRe,eTt),e(Em,oTt),e(Em,Rie),e(Rie,rTt),e(Em,tTt),e(va,aTt),M(R8,va,null),e(Rr,nTt),e(Rr,dt),M(JP,dt,null),e(dt,sTt),e(dt,aRe),e(aRe,lTt),e(dt,iTt),e(dt,os),e(os,dTt),e(os,nRe),e(nRe,cTt),e(os,fTt),e(os,sRe),e(sRe,mTt),e(os,gTt),e(os,lRe),e(lRe,hTt),e(os,uTt),e(dt,pTt),e(dt,iRe),e(iRe,P8),e(P8,dRe),e(dRe,_Tt),e(P8,vTt),e(P8,Pie),e(Pie,bTt),e(P8,FTt),e(dt,TTt),M(B8,dt,null),v(f,Lto,_),v(f,Cm,_),e(Cm,I8),e(I8,cRe),M(YP,cRe,null),e(Cm,MTt),e(Cm,fRe),e(fRe,ETt),v(f,yto,_),v(f,Pr,_),M(ZP,Pr,null),e(Pr,CTt),e(Pr,wm),e(wm,wTt),e(wm,Bie),e(Bie,ATt),e(wm,LTt),e(wm,Iie),e(Iie,yTt),e(wm,xTt),e(Pr,$Tt),e(Pr,KP),e(KP,kTt),e(KP,mRe),e(mRe,STt),e(KP,RTt),e(Pr,PTt),e(Pr,ba),M(eB,ba,null),e(ba,BTt),e(ba,gRe),e(gRe,ITt),e(ba,NTt),e(ba,Am),e(Am,qTt),e(Am,hRe),e(hRe,jTt),e(Am,DTt),e(Am,Nie),e(Nie,GTt),e(Am,OTt),e(ba,VTt),M(N8,ba,null),e(Pr,XTt),e(Pr,ct),M(oB,ct,null),e(ct,zTt),e(ct,uRe),e(uRe,QTt),e(ct,WTt),e(ct,rs),e(rs,UTt),e(rs,pRe),e(pRe,HTt),e(rs,JTt),e(rs,_Re),e(_Re,YTt),e(rs,ZTt),e(rs,vRe),e(vRe,KTt),e(rs,eMt),e(ct,oMt),e(ct,rB),e(rB,q8),e(q8,bRe),e(bRe,rMt),e(q8,tMt),e(q8,qie),e(qie,aMt),e(q8,nMt),e(rB,sMt),e(rB,j8),e(j8,FRe),e(FRe,lMt),e(j8,iMt),e(j8,jie),e(jie,dMt),e(j8,cMt),e(ct,fMt),M(D8,ct,null),v(f,xto,_),v(f,Lm,_),e(Lm,G8),e(G8,TRe),M(tB,TRe,null),e(Lm,mMt),e(Lm,MRe),e(MRe,gMt),v(f,$to,_),v(f,Br,_),M(aB,Br,null),e(Br,hMt),e(Br,ym),e(ym,uMt),e(ym,Die),e(Die,pMt),e(ym,_Mt),e(ym,Gie),e(Gie,vMt),e(ym,bMt),e(Br,FMt),e(Br,nB),e(nB,TMt),e(nB,ERe),e(ERe,MMt),e(nB,EMt),e(Br,CMt),e(Br,Fa),M(sB,Fa,null),e(Fa,wMt),e(Fa,CRe),e(CRe,AMt),e(Fa,LMt),e(Fa,xm),e(xm,yMt),e(xm,wRe),e(wRe,xMt),e(xm,$Mt),e(xm,Oie),e(Oie,kMt),e(xm,SMt),e(Fa,RMt),M(O8,Fa,null),e(Br,PMt),e(Br,ft),M(lB,ft,null),e(ft,BMt),e(ft,ARe),e(ARe,IMt),e(ft,NMt),e(ft,ts),e(ts,qMt),e(ts,LRe),e(LRe,jMt),e(ts,DMt),e(ts,yRe),e(yRe,GMt),e(ts,OMt),e(ts,xRe),e(xRe,VMt),e(ts,XMt),e(ft,zMt),e(ft,$Re),e($Re,V8),e(V8,kRe),e(kRe,QMt),e(V8,WMt),e(V8,Vie),e(Vie,UMt),e(V8,HMt),e(ft,JMt),M(X8,ft,null),kto=!0},p(f,[_]){const iB={};_&2&&(iB.$$scope={dirty:_,ctx:f}),qm.$set(iB);const SRe={};_&2&&(SRe.$$scope={dirty:_,ctx:f}),fu.$set(SRe);const RRe={};_&2&&(RRe.$$scope={dirty:_,ctx:f}),Hu.$set(RRe);const PRe={};_&2&&(PRe.$$scope={dirty:_,ctx:f}),Gp.$set(PRe);const dB={};_&2&&(dB.$$scope={dirty:_,ctx:f}),Op.$set(dB);const BRe={};_&2&&(BRe.$$scope={dirty:_,ctx:f}),h_.$set(BRe);const as={};_&2&&(as.$$scope={dirty:_,ctx:f}),u_.$set(as);const IRe={};_&2&&(IRe.$$scope={dirty:_,ctx:f}),v_.$set(IRe);const NRe={};_&2&&(NRe.$$scope={dirty:_,ctx:f}),qv.$set(NRe);const qRe={};_&2&&(qRe.$$scope={dirty:_,ctx:f}),Dv.$set(qRe);const cB={};_&2&&(cB.$$scope={dirty:_,ctx:f}),I4.$set(cB);const jRe={};_&2&&(jRe.$$scope={dirty:_,ctx:f}),q4.$set(jRe);const fB={};_&2&&(fB.$$scope={dirty:_,ctx:f}),y1.$set(fB);const DRe={};_&2&&(DRe.$$scope={dirty:_,ctx:f}),$1.$set(DRe);const mB={};_&2&&(mB.$$scope={dirty:_,ctx:f}),_b.$set(mB);const GRe={};_&2&&(GRe.$$scope={dirty:_,ctx:f}),bb.$set(GRe);const ORe={};_&2&&(ORe.$$scope={dirty:_,ctx:f}),Gb.$set(ORe);const VRe={};_&2&&(VRe.$$scope={dirty:_,ctx:f}),Vb.$set(VRe);const $m={};_&2&&($m.$$scope={dirty:_,ctx:f}),Q3.$set($m);const XRe={};_&2&&(XRe.$$scope={dirty:_,ctx:f}),U3.$set(XRe);const zRe={};_&2&&(zRe.$$scope={dirty:_,ctx:f}),y0.$set(zRe);const QRe={};_&2&&(QRe.$$scope={dirty:_,ctx:f}),$0.$set(QRe);const gB={};_&2&&(gB.$$scope={dirty:_,ctx:f}),j0.$set(gB);const WRe={};_&2&&(WRe.$$scope={dirty:_,ctx:f}),G0.$set(WRe);const URe={};_&2&&(URe.$$scope={dirty:_,ctx:f}),xF.$set(URe);const HRe={};_&2&&(HRe.$$scope={dirty:_,ctx:f}),kF.$set(HRe);const pt={};_&2&&(pt.$$scope={dirty:_,ctx:f}),AT.$set(pt);const hB={};_&2&&(hB.$$scope={dirty:_,ctx:f}),yT.$set(hB);const JRe={};_&2&&(JRe.$$scope={dirty:_,ctx:f}),kT.$set(JRe);const uB={};_&2&&(uB.$$scope={dirty:_,ctx:f}),RT.$set(uB);const YRe={};_&2&&(YRe.$$scope={dirty:_,ctx:f}),qT.$set(YRe);const _t={};_&2&&(_t.$$scope={dirty:_,ctx:f}),DT.$set(_t);const ZRe={};_&2&&(ZRe.$$scope={dirty:_,ctx:f}),tM.$set(ZRe);const km={};_&2&&(km.$$scope={dirty:_,ctx:f}),nM.$set(km);const KRe={};_&2&&(KRe.$$scope={dirty:_,ctx:f}),iM.$set(KRe);const ePe={};_&2&&(ePe.$$scope={dirty:_,ctx:f}),cM.$set(ePe);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),gM.$set(L);const z8={};_&2&&(z8.$$scope={dirty:_,ctx:f}),uM.$set(z8);const oPe={};_&2&&(oPe.$$scope={dirty:_,ctx:f}),vM.$set(oPe);const rPe={};_&2&&(rPe.$$scope={dirty:_,ctx:f}),FM.$set(rPe);const Q8={};_&2&&(Q8.$$scope={dirty:_,ctx:f}),kM.$set(Q8);const tPe={};_&2&&(tPe.$$scope={dirty:_,ctx:f}),RM.$set(tPe);const aPe={};_&2&&(aPe.$$scope={dirty:_,ctx:f}),DM.$set(aPe);const W8={};_&2&&(W8.$$scope={dirty:_,ctx:f}),OM.$set(W8);const nPe={};_&2&&(nPe.$$scope={dirty:_,ctx:f}),eE.$set(nPe);const sPe={};_&2&&(sPe.$$scope={dirty:_,ctx:f}),rE.$set(sPe);const U8={};_&2&&(U8.$$scope={dirty:_,ctx:f}),lE.$set(U8);const lPe={};_&2&&(lPe.$$scope={dirty:_,ctx:f}),dE.$set(lPe);const iPe={};_&2&&(iPe.$$scope={dirty:_,ctx:f}),pE.$set(iPe);const H8={};_&2&&(H8.$$scope={dirty:_,ctx:f}),vE.$set(H8);const dPe={};_&2&&(dPe.$$scope={dirty:_,ctx:f}),CE.$set(dPe);const cPe={};_&2&&(cPe.$$scope={dirty:_,ctx:f}),AE.$set(cPe);const J8={};_&2&&(J8.$$scope={dirty:_,ctx:f}),SE.$set(J8);const fPe={};_&2&&(fPe.$$scope={dirty:_,ctx:f}),PE.$set(fPe);const mPe={};_&2&&(mPe.$$scope={dirty:_,ctx:f}),NE.$set(mPe);const Y8={};_&2&&(Y8.$$scope={dirty:_,ctx:f}),jE.$set(Y8);const gPe={};_&2&&(gPe.$$scope={dirty:_,ctx:f}),QE.$set(gPe);const hPe={};_&2&&(hPe.$$scope={dirty:_,ctx:f}),UE.$set(hPe);const Z8={};_&2&&(Z8.$$scope={dirty:_,ctx:f}),YE.$set(Z8);const uPe={};_&2&&(uPe.$$scope={dirty:_,ctx:f}),KE.$set(uPe);const pPe={};_&2&&(pPe.$$scope={dirty:_,ctx:f}),rC.$set(pPe);const K8={};_&2&&(K8.$$scope={dirty:_,ctx:f}),aC.$set(K8);const _Pe={};_&2&&(_Pe.$$scope={dirty:_,ctx:f}),s5.$set(_Pe);const vPe={};_&2&&(vPe.$$scope={dirty:_,ctx:f}),i5.$set(vPe);const ey={};_&2&&(ey.$$scope={dirty:_,ctx:f}),S5.$set(ey);const bPe={};_&2&&(bPe.$$scope={dirty:_,ctx:f}),P5.$set(bPe);const FPe={};_&2&&(FPe.$$scope={dirty:_,ctx:f}),H5.$set(FPe);const oy={};_&2&&(oy.$$scope={dirty:_,ctx:f}),Y5.$set(oy);const TPe={};_&2&&(TPe.$$scope={dirty:_,ctx:f}),sw.$set(TPe);const MPe={};_&2&&(MPe.$$scope={dirty:_,ctx:f}),iw.$set(MPe);const ry={};_&2&&(ry.$$scope={dirty:_,ctx:f}),mw.$set(ry);const EPe={};_&2&&(EPe.$$scope={dirty:_,ctx:f}),hw.$set(EPe);const CPe={};_&2&&(CPe.$$scope={dirty:_,ctx:f}),Bw.$set(CPe);const ty={};_&2&&(ty.$$scope={dirty:_,ctx:f}),Nw.$set(ty);const wPe={};_&2&&(wPe.$$scope={dirty:_,ctx:f}),Uw.$set(wPe);const APe={};_&2&&(APe.$$scope={dirty:_,ctx:f}),Jw.$set(APe);const ay={};_&2&&(ay.$$scope={dirty:_,ctx:f}),CA.$set(ay);const LPe={};_&2&&(LPe.$$scope={dirty:_,ctx:f}),AA.$set(LPe);const yPe={};_&2&&(yPe.$$scope={dirty:_,ctx:f}),XA.$set(yPe);const ny={};_&2&&(ny.$$scope={dirty:_,ctx:f}),QA.$set(ny);const xPe={};_&2&&(xPe.$$scope={dirty:_,ctx:f}),HA.$set(xPe);const $Pe={};_&2&&($Pe.$$scope={dirty:_,ctx:f}),YA.$set($Pe);const sy={};_&2&&(sy.$$scope={dirty:_,ctx:f}),KA.$set(sy);const kPe={};_&2&&(kPe.$$scope={dirty:_,ctx:f}),o6.$set(kPe);const SPe={};_&2&&(SPe.$$scope={dirty:_,ctx:f}),t6.$set(SPe);const ly={};_&2&&(ly.$$scope={dirty:_,ctx:f}),n6.$set(ly);const RPe={};_&2&&(RPe.$$scope={dirty:_,ctx:f}),L6.$set(RPe);const PPe={};_&2&&(PPe.$$scope={dirty:_,ctx:f}),x6.$set(PPe);const iy={};_&2&&(iy.$$scope={dirty:_,ctx:f}),Y6.$set(iy);const BPe={};_&2&&(BPe.$$scope={dirty:_,ctx:f}),K6.$set(BPe);const IPe={};_&2&&(IPe.$$scope={dirty:_,ctx:f}),o7.$set(IPe);const dy={};_&2&&(dy.$$scope={dirty:_,ctx:f}),t7.$set(dy);const NPe={};_&2&&(NPe.$$scope={dirty:_,ctx:f}),s7.$set(NPe);const qPe={};_&2&&(qPe.$$scope={dirty:_,ctx:f}),i7.$set(qPe);const cy={};_&2&&(cy.$$scope={dirty:_,ctx:f}),I7.$set(cy);const jPe={};_&2&&(jPe.$$scope={dirty:_,ctx:f}),q7.$set(jPe);const DPe={};_&2&&(DPe.$$scope={dirty:_,ctx:f}),H7.$set(DPe);const fy={};_&2&&(fy.$$scope={dirty:_,ctx:f}),Y7.$set(fy);const GPe={};_&2&&(GPe.$$scope={dirty:_,ctx:f}),fL.$set(GPe);const OPe={};_&2&&(OPe.$$scope={dirty:_,ctx:f}),gL.$set(OPe);const my={};_&2&&(my.$$scope={dirty:_,ctx:f}),CL.$set(my);const VPe={};_&2&&(VPe.$$scope={dirty:_,ctx:f}),AL.$set(VPe);const XPe={};_&2&&(XPe.$$scope={dirty:_,ctx:f}),NL.$set(XPe);const gy={};_&2&&(gy.$$scope={dirty:_,ctx:f}),jL.$set(gy);const zPe={};_&2&&(zPe.$$scope={dirty:_,ctx:f}),JL.$set(zPe);const QPe={};_&2&&(QPe.$$scope={dirty:_,ctx:f}),ZL.$set(QPe);const hy={};_&2&&(hy.$$scope={dirty:_,ctx:f}),d8.$set(hy);const WPe={};_&2&&(WPe.$$scope={dirty:_,ctx:f}),f8.$set(WPe);const UPe={};_&2&&(UPe.$$scope={dirty:_,ctx:f}),F8.$set(UPe);const uy={};_&2&&(uy.$$scope={dirty:_,ctx:f}),M8.$set(uy);const HPe={};_&2&&(HPe.$$scope={dirty:_,ctx:f}),k8.$set(HPe);const JPe={};_&2&&(JPe.$$scope={dirty:_,ctx:f}),R8.$set(JPe);const py={};_&2&&(py.$$scope={dirty:_,ctx:f}),B8.$set(py);const YPe={};_&2&&(YPe.$$scope={dirty:_,ctx:f}),N8.$set(YPe);const ZPe={};_&2&&(ZPe.$$scope={dirty:_,ctx:f}),D8.$set(ZPe);const _y={};_&2&&(_y.$$scope={dirty:_,ctx:f}),O8.$set(_y);const KPe={};_&2&&(KPe.$$scope={dirty:_,ctx:f}),X8.$set(KPe)},i(f){kto||(E(d.$$.fragment,f),E(Ja.$$.fragment,f),E(yx.$$.fragment,f),E(xx.$$.fragment,f),E(qm.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Px.$$.fragment,f),E(fu.$$.fragment,f),E(Bx.$$.fragment,f),E(Ix.$$.fragment,f),E(Nx.$$.fragment,f),E(Dx.$$.fragment,f),E(Hu.$$.fragment,f),E(Gx.$$.fragment,f),E(Ox.$$.fragment,f),E(Vx.$$.fragment,f),E(Qx.$$.fragment,f),E(Gp.$$.fragment,f),E(Op.$$.fragment,f),E(Wx.$$.fragment,f),E(Ux.$$.fragment,f),E(Hx.$$.fragment,f),E(Zx.$$.fragment,f),E(h_.$$.fragment,f),E(u_.$$.fragment,f),E(Kx.$$.fragment,f),E(e$.$$.fragment,f),E(o$.$$.fragment,f),E(t$.$$.fragment,f),E(v_.$$.fragment,f),E(a$.$$.fragment,f),E(qv.$$.fragment,f),E(n$.$$.fragment,f),E(s$.$$.fragment,f),E(i$.$$.fragment,f),E(Dv.$$.fragment,f),E(d$.$$.fragment,f),E(I4.$$.fragment,f),E(c$.$$.fragment,f),E(f$.$$.fragment,f),E(g$.$$.fragment,f),E(q4.$$.fragment,f),E(h$.$$.fragment,f),E(y1.$$.fragment,f),E(u$.$$.fragment,f),E(p$.$$.fragment,f),E(v$.$$.fragment,f),E($1.$$.fragment,f),E(b$.$$.fragment,f),E(_b.$$.fragment,f),E(F$.$$.fragment,f),E(T$.$$.fragment,f),E(E$.$$.fragment,f),E(bb.$$.fragment,f),E(C$.$$.fragment,f),E(Gb.$$.fragment,f),E(w$.$$.fragment,f),E(A$.$$.fragment,f),E(y$.$$.fragment,f),E(Vb.$$.fragment,f),E(x$.$$.fragment,f),E(Q3.$$.fragment,f),E($$.$$.fragment,f),E(k$.$$.fragment,f),E(R$.$$.fragment,f),E(U3.$$.fragment,f),E(P$.$$.fragment,f),E(y0.$$.fragment,f),E(B$.$$.fragment,f),E(I$.$$.fragment,f),E(q$.$$.fragment,f),E($0.$$.fragment,f),E(j$.$$.fragment,f),E(j0.$$.fragment,f),E(D$.$$.fragment,f),E(G$.$$.fragment,f),E(V$.$$.fragment,f),E(G0.$$.fragment,f),E(X$.$$.fragment,f),E(xF.$$.fragment,f),E(z$.$$.fragment,f),E(Q$.$$.fragment,f),E(U$.$$.fragment,f),E(kF.$$.fragment,f),E(H$.$$.fragment,f),E(AT.$$.fragment,f),E(J$.$$.fragment,f),E(Y$.$$.fragment,f),E(K$.$$.fragment,f),E(yT.$$.fragment,f),E(ek.$$.fragment,f),E(kT.$$.fragment,f),E(ok.$$.fragment,f),E(rk.$$.fragment,f),E(ak.$$.fragment,f),E(RT.$$.fragment,f),E(nk.$$.fragment,f),E(qT.$$.fragment,f),E(sk.$$.fragment,f),E(lk.$$.fragment,f),E(dk.$$.fragment,f),E(DT.$$.fragment,f),E(ck.$$.fragment,f),E(tM.$$.fragment,f),E(fk.$$.fragment,f),E(mk.$$.fragment,f),E(hk.$$.fragment,f),E(nM.$$.fragment,f),E(uk.$$.fragment,f),E(iM.$$.fragment,f),E(pk.$$.fragment,f),E(_k.$$.fragment,f),E(bk.$$.fragment,f),E(cM.$$.fragment,f),E(Fk.$$.fragment,f),E(gM.$$.fragment,f),E(Tk.$$.fragment,f),E(Mk.$$.fragment,f),E(Ck.$$.fragment,f),E(uM.$$.fragment,f),E(wk.$$.fragment,f),E(vM.$$.fragment,f),E(Ak.$$.fragment,f),E(Lk.$$.fragment,f),E(xk.$$.fragment,f),E(FM.$$.fragment,f),E($k.$$.fragment,f),E(kM.$$.fragment,f),E(kk.$$.fragment,f),E(Sk.$$.fragment,f),E(Pk.$$.fragment,f),E(RM.$$.fragment,f),E(Bk.$$.fragment,f),E(DM.$$.fragment,f),E(Ik.$$.fragment,f),E(Nk.$$.fragment,f),E(jk.$$.fragment,f),E(OM.$$.fragment,f),E(Dk.$$.fragment,f),E(eE.$$.fragment,f),E(Gk.$$.fragment,f),E(Ok.$$.fragment,f),E(Xk.$$.fragment,f),E(rE.$$.fragment,f),E(zk.$$.fragment,f),E(lE.$$.fragment,f),E(Qk.$$.fragment,f),E(Wk.$$.fragment,f),E(Hk.$$.fragment,f),E(dE.$$.fragment,f),E(Jk.$$.fragment,f),E(pE.$$.fragment,f),E(Yk.$$.fragment,f),E(Zk.$$.fragment,f),E(eS.$$.fragment,f),E(vE.$$.fragment,f),E(oS.$$.fragment,f),E(CE.$$.fragment,f),E(rS.$$.fragment,f),E(tS.$$.fragment,f),E(nS.$$.fragment,f),E(AE.$$.fragment,f),E(sS.$$.fragment,f),E(SE.$$.fragment,f),E(lS.$$.fragment,f),E(iS.$$.fragment,f),E(cS.$$.fragment,f),E(PE.$$.fragment,f),E(fS.$$.fragment,f),E(NE.$$.fragment,f),E(mS.$$.fragment,f),E(gS.$$.fragment,f),E(uS.$$.fragment,f),E(jE.$$.fragment,f),E(pS.$$.fragment,f),E(QE.$$.fragment,f),E(_S.$$.fragment,f),E(vS.$$.fragment,f),E(FS.$$.fragment,f),E(UE.$$.fragment,f),E(TS.$$.fragment,f),E(YE.$$.fragment,f),E(MS.$$.fragment,f),E(ES.$$.fragment,f),E(wS.$$.fragment,f),E(KE.$$.fragment,f),E(AS.$$.fragment,f),E(rC.$$.fragment,f),E(LS.$$.fragment,f),E(yS.$$.fragment,f),E($S.$$.fragment,f),E(aC.$$.fragment,f),E(kS.$$.fragment,f),E(s5.$$.fragment,f),E(SS.$$.fragment,f),E(RS.$$.fragment,f),E(BS.$$.fragment,f),E(i5.$$.fragment,f),E(IS.$$.fragment,f),E(S5.$$.fragment,f),E(NS.$$.fragment,f),E(qS.$$.fragment,f),E(DS.$$.fragment,f),E(P5.$$.fragment,f),E(GS.$$.fragment,f),E(H5.$$.fragment,f),E(OS.$$.fragment,f),E(VS.$$.fragment,f),E(zS.$$.fragment,f),E(Y5.$$.fragment,f),E(QS.$$.fragment,f),E(sw.$$.fragment,f),E(WS.$$.fragment,f),E(US.$$.fragment,f),E(JS.$$.fragment,f),E(iw.$$.fragment,f),E(YS.$$.fragment,f),E(mw.$$.fragment,f),E(ZS.$$.fragment,f),E(KS.$$.fragment,f),E(oR.$$.fragment,f),E(hw.$$.fragment,f),E(rR.$$.fragment,f),E(Bw.$$.fragment,f),E(tR.$$.fragment,f),E(aR.$$.fragment,f),E(sR.$$.fragment,f),E(Nw.$$.fragment,f),E(lR.$$.fragment,f),E(Uw.$$.fragment,f),E(iR.$$.fragment,f),E(dR.$$.fragment,f),E(fR.$$.fragment,f),E(Jw.$$.fragment,f),E(mR.$$.fragment,f),E(CA.$$.fragment,f),E(gR.$$.fragment,f),E(hR.$$.fragment,f),E(pR.$$.fragment,f),E(AA.$$.fragment,f),E(_R.$$.fragment,f),E(XA.$$.fragment,f),E(vR.$$.fragment,f),E(bR.$$.fragment,f),E(TR.$$.fragment,f),E(QA.$$.fragment,f),E(MR.$$.fragment,f),E(HA.$$.fragment,f),E(CR.$$.fragment,f),E(wR.$$.fragment,f),E(LR.$$.fragment,f),E(YA.$$.fragment,f),E(yR.$$.fragment,f),E(KA.$$.fragment,f),E(xR.$$.fragment,f),E($R.$$.fragment,f),E(SR.$$.fragment,f),E(o6.$$.fragment,f),E(RR.$$.fragment,f),E(t6.$$.fragment,f),E(PR.$$.fragment,f),E(BR.$$.fragment,f),E(NR.$$.fragment,f),E(n6.$$.fragment,f),E(qR.$$.fragment,f),E(L6.$$.fragment,f),E(jR.$$.fragment,f),E(DR.$$.fragment,f),E(OR.$$.fragment,f),E(x6.$$.fragment,f),E(VR.$$.fragment,f),E(Y6.$$.fragment,f),E(XR.$$.fragment,f),E(zR.$$.fragment,f),E(WR.$$.fragment,f),E(K6.$$.fragment,f),E(UR.$$.fragment,f),E(o7.$$.fragment,f),E(HR.$$.fragment,f),E(JR.$$.fragment,f),E(ZR.$$.fragment,f),E(t7.$$.fragment,f),E(KR.$$.fragment,f),E(s7.$$.fragment,f),E(oP.$$.fragment,f),E(rP.$$.fragment,f),E(aP.$$.fragment,f),E(i7.$$.fragment,f),E(nP.$$.fragment,f),E(I7.$$.fragment,f),E(sP.$$.fragment,f),E(lP.$$.fragment,f),E(dP.$$.fragment,f),E(q7.$$.fragment,f),E(cP.$$.fragment,f),E(H7.$$.fragment,f),E(fP.$$.fragment,f),E(mP.$$.fragment,f),E(hP.$$.fragment,f),E(Y7.$$.fragment,f),E(uP.$$.fragment,f),E(fL.$$.fragment,f),E(pP.$$.fragment,f),E(_P.$$.fragment,f),E(bP.$$.fragment,f),E(gL.$$.fragment,f),E(FP.$$.fragment,f),E(CL.$$.fragment,f),E(TP.$$.fragment,f),E(MP.$$.fragment,f),E(CP.$$.fragment,f),E(AL.$$.fragment,f),E(wP.$$.fragment,f),E(NL.$$.fragment,f),E(AP.$$.fragment,f),E(LP.$$.fragment,f),E(xP.$$.fragment,f),E(jL.$$.fragment,f),E($P.$$.fragment,f),E(JL.$$.fragment,f),E(kP.$$.fragment,f),E(SP.$$.fragment,f),E(PP.$$.fragment,f),E(ZL.$$.fragment,f),E(BP.$$.fragment,f),E(d8.$$.fragment,f),E(IP.$$.fragment,f),E(NP.$$.fragment,f),E(jP.$$.fragment,f),E(f8.$$.fragment,f),E(DP.$$.fragment,f),E(F8.$$.fragment,f),E(GP.$$.fragment,f),E(OP.$$.fragment,f),E(XP.$$.fragment,f),E(M8.$$.fragment,f),E(zP.$$.fragment,f),E(k8.$$.fragment,f),E(QP.$$.fragment,f),E(WP.$$.fragment,f),E(HP.$$.fragment,f),E(R8.$$.fragment,f),E(JP.$$.fragment,f),E(B8.$$.fragment,f),E(YP.$$.fragment,f),E(ZP.$$.fragment,f),E(eB.$$.fragment,f),E(N8.$$.fragment,f),E(oB.$$.fragment,f),E(D8.$$.fragment,f),E(tB.$$.fragment,f),E(aB.$$.fragment,f),E(sB.$$.fragment,f),E(O8.$$.fragment,f),E(lB.$$.fragment,f),E(X8.$$.fragment,f),kto=!0)},o(f){C(d.$$.fragment,f),C(Ja.$$.fragment,f),C(yx.$$.fragment,f),C(xx.$$.fragment,f),C(qm.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Px.$$.fragment,f),C(fu.$$.fragment,f),C(Bx.$$.fragment,f),C(Ix.$$.fragment,f),C(Nx.$$.fragment,f),C(Dx.$$.fragment,f),C(Hu.$$.fragment,f),C(Gx.$$.fragment,f),C(Ox.$$.fragment,f),C(Vx.$$.fragment,f),C(Qx.$$.fragment,f),C(Gp.$$.fragment,f),C(Op.$$.fragment,f),C(Wx.$$.fragment,f),C(Ux.$$.fragment,f),C(Hx.$$.fragment,f),C(Zx.$$.fragment,f),C(h_.$$.fragment,f),C(u_.$$.fragment,f),C(Kx.$$.fragment,f),C(e$.$$.fragment,f),C(o$.$$.fragment,f),C(t$.$$.fragment,f),C(v_.$$.fragment,f),C(a$.$$.fragment,f),C(qv.$$.fragment,f),C(n$.$$.fragment,f),C(s$.$$.fragment,f),C(i$.$$.fragment,f),C(Dv.$$.fragment,f),C(d$.$$.fragment,f),C(I4.$$.fragment,f),C(c$.$$.fragment,f),C(f$.$$.fragment,f),C(g$.$$.fragment,f),C(q4.$$.fragment,f),C(h$.$$.fragment,f),C(y1.$$.fragment,f),C(u$.$$.fragment,f),C(p$.$$.fragment,f),C(v$.$$.fragment,f),C($1.$$.fragment,f),C(b$.$$.fragment,f),C(_b.$$.fragment,f),C(F$.$$.fragment,f),C(T$.$$.fragment,f),C(E$.$$.fragment,f),C(bb.$$.fragment,f),C(C$.$$.fragment,f),C(Gb.$$.fragment,f),C(w$.$$.fragment,f),C(A$.$$.fragment,f),C(y$.$$.fragment,f),C(Vb.$$.fragment,f),C(x$.$$.fragment,f),C(Q3.$$.fragment,f),C($$.$$.fragment,f),C(k$.$$.fragment,f),C(R$.$$.fragment,f),C(U3.$$.fragment,f),C(P$.$$.fragment,f),C(y0.$$.fragment,f),C(B$.$$.fragment,f),C(I$.$$.fragment,f),C(q$.$$.fragment,f),C($0.$$.fragment,f),C(j$.$$.fragment,f),C(j0.$$.fragment,f),C(D$.$$.fragment,f),C(G$.$$.fragment,f),C(V$.$$.fragment,f),C(G0.$$.fragment,f),C(X$.$$.fragment,f),C(xF.$$.fragment,f),C(z$.$$.fragment,f),C(Q$.$$.fragment,f),C(U$.$$.fragment,f),C(kF.$$.fragment,f),C(H$.$$.fragment,f),C(AT.$$.fragment,f),C(J$.$$.fragment,f),C(Y$.$$.fragment,f),C(K$.$$.fragment,f),C(yT.$$.fragment,f),C(ek.$$.fragment,f),C(kT.$$.fragment,f),C(ok.$$.fragment,f),C(rk.$$.fragment,f),C(ak.$$.fragment,f),C(RT.$$.fragment,f),C(nk.$$.fragment,f),C(qT.$$.fragment,f),C(sk.$$.fragment,f),C(lk.$$.fragment,f),C(dk.$$.fragment,f),C(DT.$$.fragment,f),C(ck.$$.fragment,f),C(tM.$$.fragment,f),C(fk.$$.fragment,f),C(mk.$$.fragment,f),C(hk.$$.fragment,f),C(nM.$$.fragment,f),C(uk.$$.fragment,f),C(iM.$$.fragment,f),C(pk.$$.fragment,f),C(_k.$$.fragment,f),C(bk.$$.fragment,f),C(cM.$$.fragment,f),C(Fk.$$.fragment,f),C(gM.$$.fragment,f),C(Tk.$$.fragment,f),C(Mk.$$.fragment,f),C(Ck.$$.fragment,f),C(uM.$$.fragment,f),C(wk.$$.fragment,f),C(vM.$$.fragment,f),C(Ak.$$.fragment,f),C(Lk.$$.fragment,f),C(xk.$$.fragment,f),C(FM.$$.fragment,f),C($k.$$.fragment,f),C(kM.$$.fragment,f),C(kk.$$.fragment,f),C(Sk.$$.fragment,f),C(Pk.$$.fragment,f),C(RM.$$.fragment,f),C(Bk.$$.fragment,f),C(DM.$$.fragment,f),C(Ik.$$.fragment,f),C(Nk.$$.fragment,f),C(jk.$$.fragment,f),C(OM.$$.fragment,f),C(Dk.$$.fragment,f),C(eE.$$.fragment,f),C(Gk.$$.fragment,f),C(Ok.$$.fragment,f),C(Xk.$$.fragment,f),C(rE.$$.fragment,f),C(zk.$$.fragment,f),C(lE.$$.fragment,f),C(Qk.$$.fragment,f),C(Wk.$$.fragment,f),C(Hk.$$.fragment,f),C(dE.$$.fragment,f),C(Jk.$$.fragment,f),C(pE.$$.fragment,f),C(Yk.$$.fragment,f),C(Zk.$$.fragment,f),C(eS.$$.fragment,f),C(vE.$$.fragment,f),C(oS.$$.fragment,f),C(CE.$$.fragment,f),C(rS.$$.fragment,f),C(tS.$$.fragment,f),C(nS.$$.fragment,f),C(AE.$$.fragment,f),C(sS.$$.fragment,f),C(SE.$$.fragment,f),C(lS.$$.fragment,f),C(iS.$$.fragment,f),C(cS.$$.fragment,f),C(PE.$$.fragment,f),C(fS.$$.fragment,f),C(NE.$$.fragment,f),C(mS.$$.fragment,f),C(gS.$$.fragment,f),C(uS.$$.fragment,f),C(jE.$$.fragment,f),C(pS.$$.fragment,f),C(QE.$$.fragment,f),C(_S.$$.fragment,f),C(vS.$$.fragment,f),C(FS.$$.fragment,f),C(UE.$$.fragment,f),C(TS.$$.fragment,f),C(YE.$$.fragment,f),C(MS.$$.fragment,f),C(ES.$$.fragment,f),C(wS.$$.fragment,f),C(KE.$$.fragment,f),C(AS.$$.fragment,f),C(rC.$$.fragment,f),C(LS.$$.fragment,f),C(yS.$$.fragment,f),C($S.$$.fragment,f),C(aC.$$.fragment,f),C(kS.$$.fragment,f),C(s5.$$.fragment,f),C(SS.$$.fragment,f),C(RS.$$.fragment,f),C(BS.$$.fragment,f),C(i5.$$.fragment,f),C(IS.$$.fragment,f),C(S5.$$.fragment,f),C(NS.$$.fragment,f),C(qS.$$.fragment,f),C(DS.$$.fragment,f),C(P5.$$.fragment,f),C(GS.$$.fragment,f),C(H5.$$.fragment,f),C(OS.$$.fragment,f),C(VS.$$.fragment,f),C(zS.$$.fragment,f),C(Y5.$$.fragment,f),C(QS.$$.fragment,f),C(sw.$$.fragment,f),C(WS.$$.fragment,f),C(US.$$.fragment,f),C(JS.$$.fragment,f),C(iw.$$.fragment,f),C(YS.$$.fragment,f),C(mw.$$.fragment,f),C(ZS.$$.fragment,f),C(KS.$$.fragment,f),C(oR.$$.fragment,f),C(hw.$$.fragment,f),C(rR.$$.fragment,f),C(Bw.$$.fragment,f),C(tR.$$.fragment,f),C(aR.$$.fragment,f),C(sR.$$.fragment,f),C(Nw.$$.fragment,f),C(lR.$$.fragment,f),C(Uw.$$.fragment,f),C(iR.$$.fragment,f),C(dR.$$.fragment,f),C(fR.$$.fragment,f),C(Jw.$$.fragment,f),C(mR.$$.fragment,f),C(CA.$$.fragment,f),C(gR.$$.fragment,f),C(hR.$$.fragment,f),C(pR.$$.fragment,f),C(AA.$$.fragment,f),C(_R.$$.fragment,f),C(XA.$$.fragment,f),C(vR.$$.fragment,f),C(bR.$$.fragment,f),C(TR.$$.fragment,f),C(QA.$$.fragment,f),C(MR.$$.fragment,f),C(HA.$$.fragment,f),C(CR.$$.fragment,f),C(wR.$$.fragment,f),C(LR.$$.fragment,f),C(YA.$$.fragment,f),C(yR.$$.fragment,f),C(KA.$$.fragment,f),C(xR.$$.fragment,f),C($R.$$.fragment,f),C(SR.$$.fragment,f),C(o6.$$.fragment,f),C(RR.$$.fragment,f),C(t6.$$.fragment,f),C(PR.$$.fragment,f),C(BR.$$.fragment,f),C(NR.$$.fragment,f),C(n6.$$.fragment,f),C(qR.$$.fragment,f),C(L6.$$.fragment,f),C(jR.$$.fragment,f),C(DR.$$.fragment,f),C(OR.$$.fragment,f),C(x6.$$.fragment,f),C(VR.$$.fragment,f),C(Y6.$$.fragment,f),C(XR.$$.fragment,f),C(zR.$$.fragment,f),C(WR.$$.fragment,f),C(K6.$$.fragment,f),C(UR.$$.fragment,f),C(o7.$$.fragment,f),C(HR.$$.fragment,f),C(JR.$$.fragment,f),C(ZR.$$.fragment,f),C(t7.$$.fragment,f),C(KR.$$.fragment,f),C(s7.$$.fragment,f),C(oP.$$.fragment,f),C(rP.$$.fragment,f),C(aP.$$.fragment,f),C(i7.$$.fragment,f),C(nP.$$.fragment,f),C(I7.$$.fragment,f),C(sP.$$.fragment,f),C(lP.$$.fragment,f),C(dP.$$.fragment,f),C(q7.$$.fragment,f),C(cP.$$.fragment,f),C(H7.$$.fragment,f),C(fP.$$.fragment,f),C(mP.$$.fragment,f),C(hP.$$.fragment,f),C(Y7.$$.fragment,f),C(uP.$$.fragment,f),C(fL.$$.fragment,f),C(pP.$$.fragment,f),C(_P.$$.fragment,f),C(bP.$$.fragment,f),C(gL.$$.fragment,f),C(FP.$$.fragment,f),C(CL.$$.fragment,f),C(TP.$$.fragment,f),C(MP.$$.fragment,f),C(CP.$$.fragment,f),C(AL.$$.fragment,f),C(wP.$$.fragment,f),C(NL.$$.fragment,f),C(AP.$$.fragment,f),C(LP.$$.fragment,f),C(xP.$$.fragment,f),C(jL.$$.fragment,f),C($P.$$.fragment,f),C(JL.$$.fragment,f),C(kP.$$.fragment,f),C(SP.$$.fragment,f),C(PP.$$.fragment,f),C(ZL.$$.fragment,f),C(BP.$$.fragment,f),C(d8.$$.fragment,f),C(IP.$$.fragment,f),C(NP.$$.fragment,f),C(jP.$$.fragment,f),C(f8.$$.fragment,f),C(DP.$$.fragment,f),C(F8.$$.fragment,f),C(GP.$$.fragment,f),C(OP.$$.fragment,f),C(XP.$$.fragment,f),C(M8.$$.fragment,f),C(zP.$$.fragment,f),C(k8.$$.fragment,f),C(QP.$$.fragment,f),C(WP.$$.fragment,f),C(HP.$$.fragment,f),C(R8.$$.fragment,f),C(JP.$$.fragment,f),C(B8.$$.fragment,f),C(YP.$$.fragment,f),C(ZP.$$.fragment,f),C(eB.$$.fragment,f),C(N8.$$.fragment,f),C(oB.$$.fragment,f),C(D8.$$.fragment,f),C(tB.$$.fragment,f),C(aB.$$.fragment,f),C(sB.$$.fragment,f),C(O8.$$.fragment,f),C(lB.$$.fragment,f),C(X8.$$.fragment,f),kto=!1},d(f){t(g),f&&t(b),f&&t(u),w(d),f&&t(Rm),f&&t(vt),f&&t(Ve),f&&t(He),f&&t(Bm),w(Ja,f),f&&t(Je),f&&t(Ae),f&&t($o),f&&t(Ya),f&&t(poo),f&&t(pd),w(yx),f&&t(_oo),f&&t(ds),f&&t(voo),w(xx,f),f&&t(boo),f&&t(qI),f&&t(Foo),w(qm,f),f&&t(Too),f&&t(_d),w($x),f&&t(Moo),f&&t(ko),w(kx),w(Px),w(fu),w(Bx),f&&t(Eoo),f&&t(bd),w(Ix),f&&t(Coo),f&&t(So),w(Nx),w(Dx),w(Hu),w(Gx),f&&t(woo),f&&t(Fd),w(Ox),f&&t(Aoo),f&&t(Ro),w(Vx),w(Qx),w(Gp),w(Op),w(Wx),f&&t(Loo),f&&t(Td),w(Ux),f&&t(yoo),f&&t(Po),w(Hx),w(Zx),w(h_),w(u_),w(Kx),f&&t(xoo),f&&t(Ed),w(e$),f&&t($oo),f&&t(Bo),w(o$),w(t$),w(v_),w(a$),w(qv),f&&t(koo),f&&t(Ad),w(n$),f&&t(Soo),f&&t(Io),w(s$),w(i$),w(Dv),w(d$),w(I4),f&&t(Roo),f&&t(xd),w(c$),f&&t(Poo),f&&t(No),w(f$),w(g$),w(q4),w(h$),w(y1),f&&t(Boo),f&&t(Sd),w(u$),f&&t(Ioo),f&&t(qo),w(p$),w(v$),w($1),w(b$),w(_b),f&&t(Noo),f&&t(Bd),w(F$),f&&t(qoo),f&&t(jo),w(T$),w(E$),w(bb),w(C$),w(Gb),f&&t(joo),f&&t(qd),w(w$),f&&t(Doo),f&&t(Do),w(A$),w(y$),w(Vb),w(x$),w(Q3),f&&t(Goo),f&&t(Gd),w($$),f&&t(Ooo),f&&t(Go),w(k$),w(R$),w(U3),w(P$),w(y0),f&&t(Voo),f&&t(Xd),w(B$),f&&t(Xoo),f&&t(Oo),w(I$),w(q$),w($0),w(j$),w(j0),f&&t(zoo),f&&t(Wd),w(D$),f&&t(Qoo),f&&t(Vo),w(G$),w(V$),w(G0),w(X$),w(xF),f&&t(Woo),f&&t(Jd),w(z$),f&&t(Uoo),f&&t(Xo),w(Q$),w(U$),w(kF),w(H$),w(AT),f&&t(Hoo),f&&t(Kd),w(J$),f&&t(Joo),f&&t(zo),w(Y$),w(K$),w(yT),w(ek),w(kT),f&&t(Yoo),f&&t(rc),w(ok),f&&t(Zoo),f&&t(Qo),w(rk),w(ak),w(RT),w(nk),w(qT),f&&t(Koo),f&&t(sc),w(sk),f&&t(ero),f&&t(Wo),w(lk),w(dk),w(DT),w(ck),w(tM),f&&t(oro),f&&t(dc),w(fk),f&&t(rro),f&&t(Uo),w(mk),w(hk),w(nM),w(uk),w(iM),f&&t(tro),f&&t(mc),w(pk),f&&t(aro),f&&t(Ho),w(_k),w(bk),w(cM),w(Fk),w(gM),f&&t(nro),f&&t(uc),w(Tk),f&&t(sro),f&&t(Jo),w(Mk),w(Ck),w(uM),w(wk),w(vM),f&&t(lro),f&&t(vc),w(Ak),f&&t(iro),f&&t(Yo),w(Lk),w(xk),w(FM),w($k),w(kM),f&&t(dro),f&&t(Tc),w(kk),f&&t(cro),f&&t(Zo),w(Sk),w(Pk),w(RM),w(Bk),w(DM),f&&t(fro),f&&t(Cc),w(Ik),f&&t(mro),f&&t(Ko),w(Nk),w(jk),w(OM),w(Dk),w(eE),f&&t(gro),f&&t(Lc),w(Gk),f&&t(hro),f&&t(er),w(Ok),w(Xk),w(rE),w(zk),w(lE),f&&t(uro),f&&t(kc),w(Qk),f&&t(pro),f&&t(or),w(Wk),w(Hk),w(dE),w(Jk),w(pE),f&&t(_ro),f&&t(Pc),w(Yk),f&&t(vro),f&&t(rr),w(Zk),w(eS),w(vE),w(oS),w(CE),f&&t(bro),f&&t(Nc),w(rS),f&&t(Fro),f&&t(tr),w(tS),w(nS),w(AE),w(sS),w(SE),f&&t(Tro),f&&t(Dc),w(lS),f&&t(Mro),f&&t(ar),w(iS),w(cS),w(PE),w(fS),w(NE),f&&t(Ero),f&&t(Vc),w(mS),f&&t(Cro),f&&t(nr),w(gS),w(uS),w(jE),w(pS),w(QE),f&&t(wro),f&&t(Qc),w(_S),f&&t(Aro),f&&t(sr),w(vS),w(FS),w(UE),w(TS),w(YE),f&&t(Lro),f&&t(Hc),w(MS),f&&t(yro),f&&t(lr),w(ES),w(wS),w(KE),w(AS),w(rC),f&&t(xro),f&&t(Zc),w(LS),f&&t($ro),f&&t(ir),w(yS),w($S),w(aC),w(kS),w(s5),f&&t(kro),f&&t(of),w(SS),f&&t(Sro),f&&t(dr),w(RS),w(BS),w(i5),w(IS),w(S5),f&&t(Rro),f&&t(af),w(NS),f&&t(Pro),f&&t(cr),w(qS),w(DS),w(P5),w(GS),w(H5),f&&t(Bro),f&&t(lf),w(OS),f&&t(Iro),f&&t(fr),w(VS),w(zS),w(Y5),w(QS),w(sw),f&&t(Nro),f&&t(ff),w(WS),f&&t(qro),f&&t(mr),w(US),w(JS),w(iw),w(YS),w(mw),f&&t(jro),f&&t(uf),w(ZS),f&&t(Dro),f&&t(gr),w(KS),w(oR),w(hw),w(rR),w(Bw),f&&t(Gro),f&&t(vf),w(tR),f&&t(Oro),f&&t(hr),w(aR),w(sR),w(Nw),w(lR),w(Uw),f&&t(Vro),f&&t(Tf),w(iR),f&&t(Xro),f&&t(ur),w(dR),w(fR),w(Jw),w(mR),w(CA),f&&t(zro),f&&t(Cf),w(gR),f&&t(Qro),f&&t(pr),w(hR),w(pR),w(AA),w(_R),w(XA),f&&t(Wro),f&&t(Lf),w(vR),f&&t(Uro),f&&t(_r),w(bR),w(TR),w(QA),w(MR),w(HA),f&&t(Hro),f&&t($f),w(CR),f&&t(Jro),f&&t(vr),w(wR),w(LR),w(YA),w(yR),w(KA),f&&t(Yro),f&&t(Rf),w(xR),f&&t(Zro),f&&t(br),w($R),w(SR),w(o6),w(RR),w(t6),f&&t(Kro),f&&t(If),w(PR),f&&t(eto),f&&t(Fr),w(BR),w(NR),w(n6),w(qR),w(L6),f&&t(oto),f&&t(jf),w(jR),f&&t(rto),f&&t(Tr),w(DR),w(OR),w(x6),w(VR),w(Y6),f&&t(tto),f&&t(Of),w(XR),f&&t(ato),f&&t(Mr),w(zR),w(WR),w(K6),w(UR),w(o7),f&&t(nto),f&&t(zf),w(HR),f&&t(sto),f&&t(Er),w(JR),w(ZR),w(t7),w(KR),w(s7),f&&t(lto),f&&t(Uf),w(oP),f&&t(ito),f&&t(Cr),w(rP),w(aP),w(i7),w(nP),w(I7),f&&t(dto),f&&t(Yf),w(sP),f&&t(cto),f&&t(wr),w(lP),w(dP),w(q7),w(cP),w(H7),f&&t(fto),f&&t(em),w(fP),f&&t(mto),f&&t(Ar),w(mP),w(hP),w(Y7),w(uP),w(fL),f&&t(gto),f&&t(tm),w(pP),f&&t(hto),f&&t(Lr),w(_P),w(bP),w(gL),w(FP),w(CL),f&&t(uto),f&&t(sm),w(TP),f&&t(pto),f&&t(yr),w(MP),w(CP),w(AL),w(wP),w(NL),f&&t(_to),f&&t(dm),w(AP),f&&t(vto),f&&t(xr),w(LP),w(xP),w(jL),w($P),w(JL),f&&t(bto),f&&t(mm),w(kP),f&&t(Fto),f&&t($r),w(SP),w(PP),w(ZL),w(BP),w(d8),f&&t(Tto),f&&t(um),w(IP),f&&t(Mto),f&&t(kr),w(NP),w(jP),w(f8),w(DP),w(F8),f&&t(Eto),f&&t(vm),w(GP),f&&t(Cto),f&&t(Sr),w(OP),w(XP),w(M8),w(zP),w(k8),f&&t(wto),f&&t(Tm),w(QP),f&&t(Ato),f&&t(Rr),w(WP),w(HP),w(R8),w(JP),w(B8),f&&t(Lto),f&&t(Cm),w(YP),f&&t(yto),f&&t(Pr),w(ZP),w(eB),w(N8),w(oB),w(D8),f&&t(xto),f&&t(Lm),w(tB),f&&t($to),f&&t(Br),w(aB),w(sB),w(O8),w(lB),w(X8)}}}const U0a={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForDocumentQuestionAnswering",title:"AutoModelForDocumentQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVideoClassification",title:"AutoModelForVideoClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.AutoModelForZeroShotObjectDetection",title:"AutoModelForZeroShotObjectDetection"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForSemanticSegmentation",title:"TFAutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForDocumentQuestionAnswering",title:"TFAutoModelForDocumentQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function H0a($){return Nba(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class rFa extends Rba{constructor(g){super();Pba(this,g,H0a,W0a,Bba,{})}}export{rFa as default,U0a as metadata};
