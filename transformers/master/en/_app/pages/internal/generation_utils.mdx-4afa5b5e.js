import{S as fk,i as hk,s as gk,e as o,k as c,w as f,t as a,M as uk,c as n,d as r,m as l,a as s,x as h,h as i,b as d,F as t,g as m,y as g,L as _k,q as u,o as _,B as v}from"../../chunks/vendor-4833417e.js";import{D as b}from"../../chunks/Docstring-7b52c3d4.js";import{C as rT}from"../../chunks/CodeBlock-6a3d1b46.js";import{I as qe}from"../../chunks/IconCopyLink-4b81c553.js";import"../../chunks/CopyButton-dacfbfaf.js";function vk(hm){let Be,zn,N,H,Ni,Qt,gm,Wi,um,Kl,y,_m,Sn,vm,bm,On,$m,Tm,qn,ym,km,Bn,wm,Lm,In,xm,Em,An,Pm,Fm,Cn,Dm,zm,Ul,Nn,Sm,Yl,Ge,mt,Vi,Zt,Om,Mi,qm,Xl,W,Bm,Wn,Im,Am,Vn,Cm,Nm,Mn,Wm,Vm,Jl,Gn,Mm,Ql,er,Zl,Ie,Gm,Gi,jm,Hm,jn,Rm,Km,ed,V,Hn,ji,Um,Ym,Xm,Rn,Hi,Jm,Qm,Zm,Kn,Ri,ef,tf,rf,Un,Ki,of,nf,td,k,sf,Ui,af,cf,Yi,lf,df,Xi,pf,mf,Ji,ff,hf,Qi,gf,uf,Zi,_f,vf,rd,F,bf,ec,$f,Tf,tc,yf,kf,rc,wf,Lf,oc,xf,Ef,od,D,Pf,nc,Ff,Df,sc,zf,Sf,ac,Of,qf,ic,Bf,If,nd,tr,sd,ft,Af,cc,Cf,Nf,ad,z,Wf,lc,Vf,Mf,dc,Gf,jf,pc,Hf,Rf,mc,Kf,Uf,id,Yn,Yf,cd,je,ht,fc,rr,Xf,hc,Jf,ld,He,or,Qf,gc,Zf,dd,Re,nr,eh,uc,th,pd,R,sr,rh,_c,oh,nh,gt,ar,sh,vc,ah,md,Ke,ut,bc,ir,ih,$c,ch,fd,Ue,cr,lh,Tc,dh,hd,Ye,lr,ph,yc,mh,gd,K,dr,fh,kc,hh,gh,_t,pr,uh,wc,_h,ud,Xe,vt,Lc,mr,vh,xc,bh,_d,Je,fr,$h,Ec,Th,vd,Qe,hr,yh,Pc,kh,bd,Ze,bt,Fc,gr,wh,Dc,Lh,$d,et,ur,xh,zc,Eh,Td,tt,_r,Ph,Sc,Fh,yd,rt,$t,Oc,vr,Dh,qc,zh,kd,Tt,Sh,Xn,Oh,qh,wd,U,br,Bh,Bc,Ih,Ah,yt,$r,Ch,Ic,Nh,Ld,Y,Tr,Wh,w,Vh,Jn,Mh,Gh,Qn,jh,Hh,Ac,Rh,Kh,Cc,Nc,Uh,Yh,Zn,Xh,Jh,es,Qh,Zh,eg,ts,yr,xd,X,kr,tg,Wc,rg,og,kt,wr,ng,Vc,sg,Ed,J,Lr,ag,rs,os,ig,cg,lg,ns,xr,Pd,Q,Er,dg,ss,as,pg,mg,fg,is,Pr,Fd,Z,Fr,hg,cs,ls,gg,ug,_g,ds,Dr,Dd,ee,zr,vg,ps,ms,bg,$g,Tg,fs,Sr,zd,te,Or,yg,hs,gs,kg,wg,Lg,us,qr,Sd,re,Br,xg,wt,_s,Eg,Pg,Ir,Fg,Dg,zg,vs,Ar,Od,oe,Cr,Sg,bs,$s,Og,qg,Bg,Ts,Nr,qd,ne,Wr,Ig,Lt,ys,Ag,Cg,Vr,Ng,Wg,Vg,ks,Mr,Bd,se,Gr,Mg,Ae,ws,Gg,jg,Ls,Hg,Rg,jr,Kg,Ug,Yg,xs,Hr,Id,ae,Rr,Xg,Es,Ps,Jg,Qg,Zg,Fs,Kr,Ad,ie,Ur,eu,xt,Ds,tu,ru,Mc,ou,nu,su,zs,Yr,Cd,ce,Xr,au,M,Ss,iu,cu,Gc,lu,du,jc,pu,mu,Hc,fu,hu,gu,Os,Jr,Nd,le,Qr,uu,Rc,_u,vu,Et,Zr,bu,Kc,$u,Wd,de,eo,Tu,B,yu,qs,ku,wu,Uc,Lu,xu,Yc,Xc,Eu,Pu,Bs,Fu,Du,zu,Is,to,Vd,pe,ro,Su,Jc,Ou,qu,Pt,oo,Bu,Qc,Iu,Md,me,no,Au,As,Cs,Cu,Nu,Wu,Ns,so,Gd,fe,ao,Vu,Ws,Vs,Mu,Gu,ju,Ms,io,jd,he,co,Hu,Gs,js,Ru,Ku,Uu,Hs,lo,Hd,ge,po,Yu,Rs,Ks,Xu,Ju,Qu,Us,mo,Rd,ue,fo,Zu,Ys,Xs,e_,t_,r_,Js,ho,Kd,_e,go,o_,Ft,Qs,n_,s_,uo,a_,i_,c_,Zs,_o,Ud,ve,vo,l_,ea,ta,d_,p_,m_,ra,bo,Yd,be,$o,f_,Zc,h_,g_,Dt,To,u_,el,__,Xd,$e,yo,v_,L,b_,oa,$_,T_,na,y_,k_,tl,w_,L_,rl,ol,x_,E_,sa,P_,F_,aa,D_,z_,S_,ia,ko,Jd,Te,wo,O_,nl,q_,B_,zt,Lo,I_,sl,A_,Qd,ye,xo,C_,ca,la,N_,W_,V_,da,Eo,Zd,ke,Po,M_,pa,ma,G_,j_,H_,fa,Fo,ep,we,Do,R_,ha,ga,K_,U_,Y_,ua,zo,tp,Le,So,X_,_a,va,J_,Q_,Z_,ba,Oo,rp,xe,qo,ev,St,$a,tv,rv,al,ov,nv,sv,Ta,Bo,op,Ee,Io,av,ya,ka,iv,cv,lv,wa,Ao,np,ot,Ot,il,Co,dv,cl,pv,sp,qt,mv,La,fv,hv,ap,Pe,No,gv,ll,uv,_v,xa,Wo,ip,nt,Vo,vv,Ea,Mo,cp,Fe,Go,bv,jo,$v,dl,Tv,yv,kv,Pa,Ho,lp,De,Ro,wv,Ko,Lv,pl,xv,Ev,Pv,Fa,Uo,dp,st,Bt,ml,Yo,Fv,fl,Dv,pp,It,zv,Da,Sv,Ov,mp,$,Xo,qv,hl,Bv,Iv,gl,Av,Cv,Jo,Nv,ul,Wv,Vv,At,Qo,Mv,_l,Gv,jv,Ct,Zo,Hv,vl,Rv,Kv,Nt,en,Uv,bl,Yv,Xv,Wt,tn,Jv,rn,Qv,$l,Zv,eb,tb,Vt,on,rb,Tl,ob,nb,Mt,nn,sb,yl,ab,ib,Ce,sn,cb,an,lb,kl,db,pb,mb,wl,fb,fp,at,cn,hb,za,Sa,gb,ub,hp,I,ln,_b,Ll,vb,bb,E,dn,$b,xl,Tb,yb,it,kb,El,wb,Lb,Pl,xb,Eb,Pb,Fl,Dl,Fb,Db,ze,zb,zl,Sb,Ob,Sl,qb,Bb,Ol,Ib,Ab,Cb,ql,Nb,Wb,Gt,pn,Vb,Bl,Mb,gp,ct,jt,Il,mn,Gb,Al,jb,up,A,fn,Hb,lt,Rb,Oa,Kb,Ub,qa,Yb,Xb,Jb,Ba,hn,Qb,Ia,gn,_p,x,un,Zb,Aa,Ca,e$,t$,r$,_n,o$,vn,n$,s$,a$,Na,i$,bn,c$,l$,Wa,$n,d$,Va,Tn,vp,C,yn,p$,Ma,Ga,m$,f$,h$,ja,kn,g$,Ha,wn,bp,dt,Ht,Cl,Ln,u$,Nl,_$,$p,Se,xn,v$,Wl,b$,$$,Ra,T$,En,y$,Tp,Oe,Pn,k$,Vl,w$,L$,Ka,x$,Fn,E$,yp;return Qt=new qe({}),Zt=new qe({}),er=new rT({props:{code:`from transformers import GPT2Tokenizer, GPT2LMHeadModel

tokenizer = GPT2Tokenizer.from_pretrained("gpt2")
model = GPT2LMHeadModel.from_pretrained("gpt2")

inputs = tokenizer("Hello, my dog is cute and ", return_tensors="pt")
generation_output = model.generate(**inputs, return_dict_in_generate=True, output_scores=True)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> GPT2Tokenizer, GPT2LMHeadModel

tokenizer = GPT2Tokenizer.from_pretrained(<span class="hljs-string">&quot;gpt2&quot;</span>)
model = GPT2LMHeadModel.from_pretrained(<span class="hljs-string">&quot;gpt2&quot;</span>)

inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute and &quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
generation_output = model.generate(**inputs, return_dict_in_generate=<span class="hljs-literal">True</span>, output_scores=<span class="hljs-literal">True</span>)`}}),tr=new rT({props:{code:"generation_output[:2]",highlighted:'generation_output[:<span class="hljs-number">2</span>]'}}),rr=new qe({}),or=new b({props:{name:"class transformers.generation_utils.GreedySearchDecoderOnlyOutput",anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_utils.py#L61",parametersDescription:[{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code> with each
tensor of shape <code>(batch_size, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, generated_length, hidden_size)</code>.`,name:"hidden_states"}]}}),nr=new b({props:{name:"class transformers.generation_utils.GreedySearchEncoderDecoderOutput",anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_utils.py#L89",parametersDescription:[{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape
<code>(batch_size, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}]}}),sr=new b({props:{name:"class transformers.generation_flax_utils.FlaxGreedySearchOutput",anchor:"transformers.generation_flax_utils.FlaxGreedySearchOutput",parameters:[{name:"sequences",val:": ndarray = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_flax_utils.py#L45",parametersDescription:[{anchor:"transformers.generation_flax_utils.FlaxGreedySearchOutput.sequences",description:`<strong>sequences</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, max_length)</code>) &#x2014;
The generated sequences.`,name:"sequences"}]}}),ar=new b({props:{name:"replace",anchor:"None",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/flax/struct.py#L120"}}),ir=new qe({}),cr=new b({props:{name:"class transformers.generation_utils.SampleDecoderOnlyOutput",anchor:"transformers.generation_utils.SampleDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_utils.py#L131",parametersDescription:[{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code> with each
tensor of shape <code>(batch_size*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(num_return_sequences*batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(num_return_sequences*batch_size, generated_length, hidden_size)</code>.`,name:"hidden_states"}]}}),lr=new b({props:{name:"class transformers.generation_utils.SampleEncoderDecoderOutput",anchor:"transformers.generation_utils.SampleEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_utils.py#L160",parametersDescription:[{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape
<code>(batch_size*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape
<code>(batch_size*num_return_sequences, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_return_sequences, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}]}}),dr=new b({props:{name:"class transformers.generation_flax_utils.FlaxSampleOutput",anchor:"transformers.generation_flax_utils.FlaxSampleOutput",parameters:[{name:"sequences",val:": ndarray = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_flax_utils.py#L59",parametersDescription:[{anchor:"transformers.generation_flax_utils.FlaxSampleOutput.sequences",description:`<strong>sequences</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, max_length)</code>) &#x2014;
The generated sequences.`,name:"sequences"}]}}),pr=new b({props:{name:"replace",anchor:"None",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/flax/struct.py#L120"}}),mr=new qe({}),fr=new b({props:{name:"class transformers.generation_utils.BeamSearchDecoderOnlyOutput",anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.LongTensor]]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_utils.py#L203",parametersDescription:[{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
<code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape
<code>(batch_size*num_beams*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>(batch_size*num_return_sequences)</code>-shaped
tuple of <code>(max_length-input_ids.shape[-1],)</code>-shaped tuples of scalar <code>torch.LongTensor</code> tensors.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, generated_length, hidden_size)</code>.`,name:"hidden_states"}]}}),hr=new b({props:{name:"class transformers.generation_utils.BeamSearchEncoderDecoderOutput",anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.LongTensor]]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_utils.py#L238",parametersDescription:[{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
<code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape <code>(batch_size*num_beams, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>(batch_size*num_return_sequences)</code>-shaped
tuple of <code>(max_length-1,)</code>-shaped tuples of scalar <code>torch.LongTensor</code> tensors.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.attentions",description:"<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;",name:"attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_beams*num_return_sequences, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}]}}),gr=new qe({}),ur=new b({props:{name:"class transformers.generation_utils.BeamSampleDecoderOnlyOutput",anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.LongTensor]]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_utils.py#L289",parametersDescription:[{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_return_sequence)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
<code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape
<code>(batch_size*num_beams*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>(batch_size*num_return_sequences)</code>-shaped
tuple of <code>(max_length-input_ids.shape[-1],)</code>-shaped tuples of scalar <code>torch.LongTensor</code> tensors.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, generated_length, hidden_size)</code>.`,name:"hidden_states"}]}}),_r=new b({props:{name:"class transformers.generation_utils.BeamSampleEncoderDecoderOutput",anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.LongTensor]]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_utils.py#L324",parametersDescription:[{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_beams, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_return_sequence)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
<code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape <code>(batch_size*num_beams, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>(batch_size*num_return_sequences)</code>-shaped
tuple of <code>(max_length-1,)</code>-shaped tuples of scalar <code>torch.LongTensor</code> tensors.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_beams, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}]}}),vr=new qe({}),br=new b({props:{name:"class transformers.LogitsProcessor",anchor:"transformers.LogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L51"}}),$r=new b({props:{name:"__call__",anchor:"transformers.LogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L54",parametersDescription:[{anchor:"transformers.LogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Tr=new b({props:{name:"class transformers.LogitsProcessorList",anchor:"transformers.LogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L73"}}),yr=new b({props:{name:"__call__",anchor:"transformers.LogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L80",parametersDescription:[{anchor:"transformers.LogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),kr=new b({props:{name:"class transformers.LogitsWarper",anchor:"transformers.LogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L62"}}),wr=new b({props:{name:"__call__",anchor:"transformers.LogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L65",parametersDescription:[{anchor:"transformers.LogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Lr=new b({props:{name:"class transformers.MinLengthLogitsProcessor",anchor:"transformers.MinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L96",parametersDescription:[{anchor:"transformers.MinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.MinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}]}}),xr=new b({props:{name:"__call__",anchor:"transformers.MinLengthLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L117"}}),Er=new b({props:{name:"class transformers.TemperatureLogitsWarper",anchor:"transformers.TemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L124",parametersDescription:[{anchor:"transformers.TemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}]}}),Pr=new b({props:{name:"__call__",anchor:"transformers.TemperatureLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L139"}}),Fr=new b({props:{name:"class transformers.RepetitionPenaltyLogitsProcessor",anchor:"transformers.RepetitionPenaltyLogitsProcessor",parameters:[{name:"penalty",val:": float"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L144",parametersDescription:[{anchor:"transformers.RepetitionPenaltyLogitsProcessor.repetition_penalty",description:`<strong>repetition_penalty</strong> (<code>float</code>) &#x2014;
The parameter for repetition penalty. 1.0 means no penalty. See <a href="https://arxiv.org/pdf/1909.05858.pdf" rel="nofollow">this
paper</a> for more details.`,name:"repetition_penalty"}]}}),Dr=new b({props:{name:"__call__",anchor:"transformers.RepetitionPenaltyLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L160"}}),zr=new b({props:{name:"class transformers.TopPLogitsWarper",anchor:"transformers.TopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L170",parametersDescription:[{anchor:"transformers.TopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the most probable tokens with probabilities that add up to <code>top_p</code> or higher are kept
for generation.`,name:"top_p"},{anchor:"transformers.TopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}]}}),Sr=new b({props:{name:"__call__",anchor:"transformers.TopPLogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L193"}}),Or=new b({props:{name:"class transformers.TopKLogitsWarper",anchor:"transformers.TopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L212",parametersDescription:[{anchor:"transformers.TopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.TopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}]}}),qr=new b({props:{name:"__call__",anchor:"transformers.TopKLogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L233"}}),Br=new b({props:{name:"class transformers.NoRepeatNGramLogitsProcessor",anchor:"transformers.NoRepeatNGramLogitsProcessor",parameters:[{name:"ngram_size",val:": int"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L309",parametersDescription:[{anchor:"transformers.NoRepeatNGramLogitsProcessor.ngram_size",description:`<strong>ngram_size</strong> (<code>int</code>) &#x2014;
All ngrams of size <code>ngram_size</code> can only occur once.`,name:"ngram_size"}]}}),Ar=new b({props:{name:"__call__",anchor:"transformers.NoRepeatNGramLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L324"}}),Cr=new b({props:{name:"class transformers.NoBadWordsLogitsProcessor",anchor:"transformers.NoBadWordsLogitsProcessor",parameters:[{name:"bad_words_ids",val:": typing.List[typing.List[int]]"},{name:"eos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L376",parametersDescription:[{anchor:"transformers.NoBadWordsLogitsProcessor.bad_words_ids",description:`<strong>bad_words_ids</strong> (<code>List[List[int]]</code>) &#x2014;
List of list of token ids that are not allowed to be generated. In order to get the token ids of the words
that should not appear in the generated text, use <code>tokenizer(bad_words, add_prefix_space=True, add_special_tokens=False).input_ids</code>.`,name:"bad_words_ids"},{anchor:"transformers.NoBadWordsLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}]}}),Nr=new b({props:{name:"__call__",anchor:"transformers.NoBadWordsLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L418"}}),Wr=new b({props:{name:"class transformers.PrefixConstrainedLogitsProcessor",anchor:"transformers.PrefixConstrainedLogitsProcessor",parameters:[{name:"prefix_allowed_tokens_fn",val:": typing.Callable[[int, torch.Tensor], typing.List[int]]"},{name:"num_beams",val:": int"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L504"}}),Mr=new b({props:{name:"__call__",anchor:"transformers.PrefixConstrainedLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L521"}}),Gr=new b({props:{name:"class transformers.HammingDiversityLogitsProcessor",anchor:"transformers.HammingDiversityLogitsProcessor",parameters:[{name:"diversity_penalty",val:": float"},{name:"num_beams",val:": int"},{name:"num_beam_groups",val:": int"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L530",parametersDescription:[{anchor:"transformers.HammingDiversityLogitsProcessor.diversity_penalty",description:`<strong>diversity_penalty</strong> (<code>float</code>) &#x2014;
This value is subtracted from a beam&#x2019;s score if it generates a token same as any beam from other group at a
particular time. Note that <code>diversity_penalty</code> is only effective if <code>group beam search</code> is enabled.`,name:"diversity_penalty"},{anchor:"transformers.HammingDiversityLogitsProcessor.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams used for group beam search. See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more
details.`,name:"num_beams"},{anchor:"transformers.HammingDiversityLogitsProcessor.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}]}}),Hr=new b({props:{name:"__call__",anchor:"transformers.HammingDiversityLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"current_tokens",val:": LongTensor"},{name:"beam_group_idx",val:": int"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L561"}}),Rr=new b({props:{name:"class transformers.ForcedBOSTokenLogitsProcessor",anchor:"transformers.ForcedBOSTokenLogitsProcessor",parameters:[{name:"bos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L590",parametersDescription:[{anchor:"transformers.ForcedBOSTokenLogitsProcessor.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the first generated token.`,name:"bos_token_id"}]}}),Kr=new b({props:{name:"__call__",anchor:"transformers.ForcedBOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L602"}}),Ur=new b({props:{name:"class transformers.ForcedEOSTokenLogitsProcessor",anchor:"transformers.ForcedEOSTokenLogitsProcessor",parameters:[{name:"max_length",val:": int"},{name:"eos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L611",parametersDescription:[{anchor:"transformers.ForcedEOSTokenLogitsProcessor.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.ForcedEOSTokenLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the last generated token when <code>max_length</code> is reached.`,name:"eos_token_id"}]}}),Yr=new b({props:{name:"__call__",anchor:"transformers.ForcedEOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L626"}}),Xr=new b({props:{name:"class transformers.InfNanRemoveLogitsProcessor",anchor:"transformers.InfNanRemoveLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L635"}}),Jr=new b({props:{name:"__call__",anchor:"transformers.InfNanRemoveLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L642"}}),Qr=new b({props:{name:"class transformers.TFLogitsProcessor",anchor:"transformers.TFLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_tf_logits_process.py#L50"}}),Zr=new b({props:{name:"__call__",anchor:"transformers.TFLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_tf_logits_process.py#L53",parametersDescription:[{anchor:"transformers.TFLogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/master/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),eo=new b({props:{name:"class transformers.TFLogitsProcessorList",anchor:"transformers.TFLogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_tf_logits_process.py#L72"}}),to=new b({props:{name:"__call__",anchor:"transformers.TFLogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_tf_logits_process.py#L79",parametersDescription:[{anchor:"transformers.TFLogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/master/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),ro=new b({props:{name:"class transformers.TFLogitsWarper",anchor:"transformers.TFLogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_tf_logits_process.py#L61"}}),oo=new b({props:{name:"__call__",anchor:"transformers.TFLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_tf_logits_process.py#L64",parametersDescription:[{anchor:"transformers.TFLogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/master/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),no=new b({props:{name:"class transformers.TFTemperatureLogitsWarper",anchor:"transformers.TFTemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_tf_logits_process.py#L95",parametersDescription:[{anchor:"transformers.TFTemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}]}}),so=new b({props:{name:"__call__",anchor:"transformers.TFTemperatureLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_tf_logits_process.py#L110"}}),ao=new b({props:{name:"class transformers.TFTopPLogitsWarper",anchor:"transformers.TFTopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_tf_logits_process.py#L144",parametersDescription:[{anchor:"transformers.TFTopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the most probable tokens with probabilities that add up to <code>top_p</code> or higher are kept
for generation.`,name:"top_p"},{anchor:"transformers.TFTopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TFTopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}]}}),io=new b({props:{name:"__call__",anchor:"transformers.TFTopPLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_tf_logits_process.py#L166"}}),co=new b({props:{name:"class transformers.TFTopKLogitsWarper",anchor:"transformers.TFTopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_tf_logits_process.py#L115",parametersDescription:[{anchor:"transformers.TFTopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.TFTopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TFTopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}]}}),lo=new b({props:{name:"__call__",anchor:"transformers.TFTopKLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_tf_logits_process.py#L136"}}),po=new b({props:{name:"class transformers.TFMinLengthLogitsProcessor",anchor:"transformers.TFMinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_tf_logits_process.py#L198",parametersDescription:[{anchor:"transformers.TFMinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.TFMinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}]}}),mo=new b({props:{name:"__call__",anchor:"transformers.TFMinLengthLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_tf_logits_process.py#L219"}}),fo=new b({props:{name:"class transformers.TFNoBadWordsLogitsProcessor",anchor:"transformers.TFNoBadWordsLogitsProcessor",parameters:[{name:"bad_words_ids",val:": typing.List[typing.List[int]]"},{name:"eos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_tf_logits_process.py#L271",parametersDescription:[{anchor:"transformers.TFNoBadWordsLogitsProcessor.bad_words_ids",description:`<strong>bad_words_ids</strong> (<code>List[List[int]]</code>) &#x2014;
List of list of token ids that are not allowed to be generated. In order to get the tokens of the words
that should not appear in the generated text, use <code>tokenizer(bad_word, add_prefix_space=True).input_ids</code>.`,name:"bad_words_ids"},{anchor:"transformers.TFNoBadWordsLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}]}}),ho=new b({props:{name:"__call__",anchor:"transformers.TFNoBadWordsLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_tf_logits_process.py#L334"}}),go=new b({props:{name:"class transformers.TFNoRepeatNGramLogitsProcessor",anchor:"transformers.TFNoRepeatNGramLogitsProcessor",parameters:[{name:"ngram_size",val:": int"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_tf_logits_process.py#L354",parametersDescription:[{anchor:"transformers.TFNoRepeatNGramLogitsProcessor.ngram_size",description:`<strong>ngram_size</strong> (<code>int</code>) &#x2014;
All ngrams of size <code>ngram_size</code> can only occur once.`,name:"ngram_size"}]}}),_o=new b({props:{name:"__call__",anchor:"transformers.TFNoRepeatNGramLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_tf_logits_process.py#L392"}}),vo=new b({props:{name:"class transformers.TFRepetitionPenaltyLogitsProcessor",anchor:"transformers.TFRepetitionPenaltyLogitsProcessor",parameters:[{name:"penalty",val:": float"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_tf_logits_process.py#L233",parametersDescription:[{anchor:"transformers.TFRepetitionPenaltyLogitsProcessor.repetition_penalty",description:`<strong>repetition_penalty</strong> (<code>float</code>) &#x2014;
The parameter for repetition penalty. 1.0 means no penalty. See <a href="https://arxiv.org/pdf/1909.05858.pdf" rel="nofollow">this
paper</a> for more details.`,name:"repetition_penalty"}]}}),bo=new b({props:{name:"__call__",anchor:"transformers.TFRepetitionPenaltyLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_tf_logits_process.py#L262"}}),$o=new b({props:{name:"class transformers.FlaxLogitsProcessor",anchor:"transformers.FlaxLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_flax_logits_process.py#L50"}}),To=new b({props:{name:"__call__",anchor:"transformers.FlaxLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_flax_logits_process.py#L53",parametersDescription:[{anchor:"transformers.FlaxLogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/master/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),yo=new b({props:{name:"class transformers.FlaxLogitsProcessorList",anchor:"transformers.FlaxLogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_flax_logits_process.py#L72"}}),ko=new b({props:{name:"__call__",anchor:"transformers.FlaxLogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_flax_logits_process.py#L79",parametersDescription:[{anchor:"transformers.FlaxLogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/master/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),wo=new b({props:{name:"class transformers.FlaxLogitsWarper",anchor:"transformers.FlaxLogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_flax_logits_process.py#L61"}}),Lo=new b({props:{name:"__call__",anchor:"transformers.FlaxLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_flax_logits_process.py#L64",parametersDescription:[{anchor:"transformers.FlaxLogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/master/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),xo=new b({props:{name:"class transformers.FlaxTemperatureLogitsWarper",anchor:"transformers.FlaxTemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_flax_logits_process.py#L95",parametersDescription:[{anchor:"transformers.FlaxTemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}]}}),Eo=new b({props:{name:"__call__",anchor:"transformers.FlaxTemperatureLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_flax_logits_process.py#L110"}}),Po=new b({props:{name:"class transformers.FlaxTopPLogitsWarper",anchor:"transformers.FlaxTopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_flax_logits_process.py#L115",parametersDescription:[{anchor:"transformers.FlaxTopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the most probable tokens with probabilities that add up to <code>top_p</code> or higher are kept
for generation.`,name:"top_p"},{anchor:"transformers.FlaxTopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.FlaxTopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}]}}),Fo=new b({props:{name:"__call__",anchor:"transformers.FlaxTopPLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_flax_logits_process.py#L137"}}),Do=new b({props:{name:"class transformers.FlaxTopKLogitsWarper",anchor:"transformers.FlaxTopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_flax_logits_process.py#L156",parametersDescription:[{anchor:"transformers.FlaxTopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.FlaxTopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.FlaxTopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}]}}),zo=new b({props:{name:"__call__",anchor:"transformers.FlaxTopKLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_flax_logits_process.py#L177"}}),So=new b({props:{name:"class transformers.FlaxForcedBOSTokenLogitsProcessor",anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor",parameters:[{name:"bos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_flax_logits_process.py#L192",parametersDescription:[{anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the first generated token.`,name:"bos_token_id"}]}}),Oo=new b({props:{name:"__call__",anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_flax_logits_process.py#L204"}}),qo=new b({props:{name:"class transformers.FlaxForcedEOSTokenLogitsProcessor",anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor",parameters:[{name:"max_length",val:": int"},{name:"eos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_flax_logits_process.py#L216",parametersDescription:[{anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the last generated token when <code>max_length</code> is reached.`,name:"eos_token_id"}]}}),Bo=new b({props:{name:"__call__",anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_flax_logits_process.py#L231"}}),Io=new b({props:{name:"class transformers.FlaxMinLengthLogitsProcessor",anchor:"transformers.FlaxMinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_flax_logits_process.py#L243",parametersDescription:[{anchor:"transformers.FlaxMinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.FlaxMinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}]}}),Ao=new b({props:{name:"__call__",anchor:"transformers.FlaxMinLengthLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_flax_logits_process.py#L264"}}),Co=new qe({}),No=new b({props:{name:"class transformers.StoppingCriteria",anchor:"transformers.StoppingCriteria",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_stopping_criteria.py#L33"}}),Wo=new b({props:{name:"__call__",anchor:"transformers.StoppingCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_stopping_criteria.py#L36",parametersDescription:[{anchor:"transformers.StoppingCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.StoppingCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),Vo=new b({props:{name:"class transformers.StoppingCriteriaList",anchor:"transformers.StoppingCriteriaList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_stopping_criteria.py#L110"}}),Mo=new b({props:{name:"__call__",anchor:"transformers.StoppingCriteriaList.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_stopping_criteria.py#L111",parametersDescription:[{anchor:"transformers.StoppingCriteriaList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.StoppingCriteriaList.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),Go=new b({props:{name:"class transformers.MaxLengthCriteria",anchor:"transformers.MaxLengthCriteria",parameters:[{name:"max_length",val:": int"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_stopping_criteria.py#L41",parametersDescription:[{anchor:"transformers.MaxLengthCriteria.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length that the output sequence can have in number of tokens.`,name:"max_length"}]}}),Ho=new b({props:{name:"__call__",anchor:"transformers.MaxLengthCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_stopping_criteria.py#L54",parametersDescription:[{anchor:"transformers.MaxLengthCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.MaxLengthCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),Ro=new b({props:{name:"class transformers.MaxTimeCriteria",anchor:"transformers.MaxTimeCriteria",parameters:[{name:"max_time",val:": float"},{name:"initial_timestamp",val:": typing.Optional[float] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_stopping_criteria.py#L88",parametersDescription:[{anchor:"transformers.MaxTimeCriteria.max_time",description:`<strong>max_time</strong> (<code>float</code>) &#x2014;
The maximum allowed time in seconds for the generation.`,name:"max_time"},{anchor:"transformers.MaxTimeCriteria.initial_time",description:`<strong>initial_time</strong> (<code>float</code>, <em>optional</em>, defaults to <code>time.time()</code>) &#x2014;
The start of the generation allowed time.`,name:"initial_time"}]}}),Uo=new b({props:{name:"__call__",anchor:"transformers.MaxTimeCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_stopping_criteria.py#L105",parametersDescription:[{anchor:"transformers.MaxTimeCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.MaxTimeCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),Yo=new qe({}),Xo=new b({props:{name:"class transformers.Constraint",anchor:"transformers.Constraint",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_beam_constraints.py#L7"}}),Jo=new rT({props:{code:`completed = False
while not completed:
    _, completed = constraint.update(constraint.advance())`,highlighted:`completed = <span class="hljs-literal">False</span>
<span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> completed:
    _, completed = constraint.update(constraint.advance())`}}),Qo=new b({props:{name:"advance",anchor:"transformers.Constraint.advance",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_beam_constraints.py#L50",returnDescription:`
<p>Must be a tensor of a list of indexable tokens, not some integer.</p>
`,returnType:`
<p>token_ids(<code>torch.tensor</code>)</p>
`}}),Zo=new b({props:{name:"copy",anchor:"transformers.Constraint.copy",parameters:[{name:"stateful",val:" = False"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_beam_constraints.py#L115",returnDescription:`
<p>The same constraint as the one being called from.</p>
`,returnType:`
<p>constraint(<code>Constraint</code>)</p>
`}}),en=new b({props:{name:"does_advance",anchor:"transformers.Constraint.does_advance",parameters:[{name:"token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_beam_constraints.py#L62"}}),tn=new b({props:{name:"remaining",anchor:"transformers.Constraint.remaining",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_beam_constraints.py#L106"}}),on=new b({props:{name:"reset",anchor:"transformers.Constraint.reset",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_beam_constraints.py#L96"}}),nn=new b({props:{name:"test",anchor:"transformers.Constraint.test",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_beam_constraints.py#L26"}}),sn=new b({props:{name:"update",anchor:"transformers.Constraint.update",parameters:[{name:"token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_beam_constraints.py#L71",returnDescription:`
<p>Whether this constraint has become one step closer to being fulfuilled.</p>
<p>Whether this constraint has been completely fulfilled by this token being generated.</p>
<p>Whether this constraint has reset its progress by this token being generated.</p>
`,returnType:`
<p>reset (<code>bool</code>)</p>
`}}),cn=new b({props:{name:"class transformers.PhrasalConstraint",anchor:"transformers.PhrasalConstraint",parameters:[{name:"token_ids",val:": typing.Union[typing.List[int], torch.LongTensor]"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_beam_constraints.py#L131",parametersDescription:[{anchor:"transformers.PhrasalConstraint.token_ids",description:`<strong>token_ids</strong> (<code>List[int]</code>) &#x2014;
The id of the token that must be generated by the output.`,name:"token_ids"}]}}),ln=new b({props:{name:"class transformers.ConstraintListState",anchor:"transformers.ConstraintListState",parameters:[{name:"constraints",val:": typing.List[transformers.generation_beam_constraints.Constraint]"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_beam_constraints.py#L205",parametersDescription:[{anchor:"transformers.ConstraintListState.constraints",description:`<strong>constraints</strong> (<code>List[Constraint]</code>) &#x2014;
A list of <a href="/docs/transformers/master/en/internal/generation_utils#transformers.Constraint">Constraint</a> objects that must be fulfilled by the beam scorer.`,name:"constraints"}]}}),dn=new b({props:{name:"advance",anchor:"transformers.ConstraintListState.advance",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_beam_constraints.py#L237"}}),pn=new b({props:{name:"reset",anchor:"transformers.ConstraintListState.reset",parameters:[{name:"token_ids",val:": typing.Optional[torch.LongTensor]"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_beam_constraints.py#L265"}}),mn=new qe({}),fn=new b({props:{name:"class transformers.BeamScorer",anchor:"transformers.BeamScorer",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_beam_search.py#L88"}}),hn=new b({props:{name:"process",anchor:"transformers.BeamScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_beam_search.py#L94",parametersDescription:[{anchor:"transformers.BeamScorer.process.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/master/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.BeamScorer.process.next_scores",description:`<strong>next_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Current scores of the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_scores"},{anchor:"transformers.BeamScorer.process.next_tokens",description:`<strong>next_tokens</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
<code>input_ids</code> of the tokens corresponding to the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_tokens"},{anchor:"transformers.BeamScorer.process.next_indices",description:`<strong>next_indices</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Beam indices indicating to which beam hypothesis the <code>next_tokens</code> correspond.`,name:"next_indices"},{anchor:"transformers.BeamScorer.process.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.BeamScorer.process.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],returnDescription:`
<p>A dictionary composed of the fields as defined above:</p>
<ul>
<li><strong>next_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Updated scores of all
non-finished beams.</li>
<li><strong>next_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Next tokens to be added
to the non-finished beam_hypotheses.</li>
<li><strong>next_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Beam indices
indicating to which beam the next tokens shall be added.</li>
</ul>
`,returnType:`
<p><code>UserDict</code></p>
`}}),gn=new b({props:{name:"finalize",anchor:"transformers.BeamScorer.finalize",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"max_length",val:": int"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_beam_search.py#L106",parametersDescription:[{anchor:"transformers.BeamScorer.finalize.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/master/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.BeamScorer.finalize.final_beam_scores",description:`<strong>final_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The final scores of all non-finished beams.`,name:"final_beam_scores"},{anchor:"transformers.BeamScorer.finalize.final_beam_tokens",description:`<strong>final_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The last tokens to be added to the non-finished beam_hypotheses.`,name:"final_beam_tokens"},{anchor:"transformers.BeamScorer.finalize.final_beam_indices",description:`<strong>final_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The beam indices indicating to which beam the <code>final_beam_tokens</code> shall be added.`,name:"final_beam_indices"},{anchor:"transformers.BeamScorer.finalize.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.BeamScorer.finalize.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],returnDescription:`
<p>The generated sequences.
The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter if all batches finished early
due to the <code>eos_token_id</code>.</p>
`}}),un=new b({props:{name:"class transformers.BeamSearchScorer",anchor:"transformers.BeamSearchScorer",parameters:[{name:"batch_size",val:": int"},{name:"num_beams",val:": int"},{name:"device",val:": device"},{name:"length_penalty",val:": typing.Optional[float] = 1.0"},{name:"do_early_stopping",val:": typing.Optional[bool] = False"},{name:"num_beam_hyps_to_keep",val:": typing.Optional[int] = 1"},{name:"num_beam_groups",val:": typing.Optional[int] = 1"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_beam_search.py#L120",parametersDescription:[{anchor:"transformers.BeamSearchScorer.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014;
Batch Size of <code>input_ids</code> for which standard beam search decoding is run in parallel.`,name:"batch_size"},{anchor:"transformers.BeamSearchScorer.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.BeamSearchScorer.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams for beam search.`,name:"num_beams"},{anchor:"transformers.BeamSearchScorer.device",description:`<strong>device</strong> (<code>torch.device</code>) &#x2014;
Defines the device type (<em>e.g.</em>, <code>&quot;cpu&quot;</code> or <code>&quot;cuda&quot;</code>) on which this instance of <code>BeamSearchScorer</code> will be
allocated.`,name:"device"},{anchor:"transformers.BeamSearchScorer.length_penalty",description:`<strong>length_penalty</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Exponential penalty to the length. 1.0 means no penalty. Set to values &lt; 1.0 in order to encourage the
model to generate shorter sequences, to a value &gt; 1.0 in order to encourage the model to produce longer
sequences.`,name:"length_penalty"},{anchor:"transformers.BeamSearchScorer.do_early_stopping",description:`<strong>do_early_stopping</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to stop the beam search when at least <code>num_beams</code> sentences are finished per batch or not.`,name:"do_early_stopping"},{anchor:"transformers.BeamSearchScorer.num_beam_hyps_to_keep",description:`<strong>num_beam_hyps_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of beam hypotheses that shall be returned upon calling
<code>finalize</code>.`,name:"num_beam_hyps_to_keep"},{anchor:"transformers.BeamSearchScorer.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}]}}),$n=new b({props:{name:"process",anchor:"transformers.BeamSearchScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_beam_search.py#L206"}}),Tn=new b({props:{name:"finalize",anchor:"transformers.BeamSearchScorer.finalize",parameters:[{name:"input_ids",val:": LongTensor"},{name:"final_beam_scores",val:": FloatTensor"},{name:"final_beam_tokens",val:": LongTensor"},{name:"final_beam_indices",val:": LongTensor"},{name:"max_length",val:": int"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_beam_search.py#L291"}}),yn=new b({props:{name:"class transformers.ConstrainedBeamSearchScorer",anchor:"transformers.ConstrainedBeamSearchScorer",parameters:[{name:"batch_size",val:": int"},{name:"num_beams",val:": int"},{name:"constraints",val:": typing.List[transformers.generation_beam_constraints.Constraint]"},{name:"device",val:": device"},{name:"length_penalty",val:": typing.Optional[float] = 1.0"},{name:"do_early_stopping",val:": typing.Optional[bool] = False"},{name:"num_beam_hyps_to_keep",val:": typing.Optional[int] = 1"},{name:"num_beam_groups",val:": typing.Optional[int] = 1"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_beam_search.py#L355",parametersDescription:[{anchor:"transformers.ConstrainedBeamSearchScorer.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014;
Batch Size of <code>input_ids</code> for which standard beam search decoding is run in parallel.`,name:"batch_size"},{anchor:"transformers.ConstrainedBeamSearchScorer.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams for beam search.`,name:"num_beams"},{anchor:"transformers.ConstrainedBeamSearchScorer.constraints",description:`<strong>constraints</strong> (<code>List[Constraint]</code>) &#x2014;
A list of positive constraints represented as <code>Constraint</code> objects that must be fulfilled in the generation
output. For more information, the documentation of <a href="/docs/transformers/master/en/internal/generation_utils#transformers.Constraint">Constraint</a> should be read.`,name:"constraints"},{anchor:"transformers.ConstrainedBeamSearchScorer.device",description:`<strong>device</strong> (<code>torch.device</code>) &#x2014;
Defines the device type (<em>e.g.</em>, <code>&quot;cpu&quot;</code> or <code>&quot;cuda&quot;</code>) on which this instance of <code>BeamSearchScorer</code> will be
allocated.`,name:"device"},{anchor:"transformers.ConstrainedBeamSearchScorer.length_penalty",description:`<strong>length_penalty</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Exponential penalty to the length. 1.0 means no penalty. Set to values &lt; 1.0 in order to encourage the
model to generate shorter sequences, to a value &gt; 1.0 in order to encourage the model to produce longer
sequences.`,name:"length_penalty"},{anchor:"transformers.ConstrainedBeamSearchScorer.do_early_stopping",description:`<strong>do_early_stopping</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to stop the beam search when at least <code>num_beams</code> sentences are finished per batch or not.`,name:"do_early_stopping"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beam_hyps_to_keep",description:`<strong>num_beam_hyps_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of beam hypotheses that shall be returned upon calling
<code>finalize</code>.`,name:"num_beam_hyps_to_keep"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}]}}),kn=new b({props:{name:"process",anchor:"transformers.ConstrainedBeamSearchScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"scores_for_all_vocab",val:": FloatTensor"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_beam_search.py#L449",parametersDescription:[{anchor:"transformers.ConstrainedBeamSearchScorer.process.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/master/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_scores",description:`<strong>next_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Current scores of the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_scores"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_tokens",description:`<strong>next_tokens</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
<code>input_ids</code> of the tokens corresponding to the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_tokens"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_indices",description:`<strong>next_indices</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Beam indices indicating to which beam hypothesis the <code>next_tokens</code> correspond.`,name:"next_indices"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.scores_for_all_vocab",description:`<strong>scores_for_all_vocab</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
The scores of all tokens in the vocabulary for each of the beam hypotheses.`,name:"scores_for_all_vocab"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],returnDescription:`
<p>A dictionary composed of the fields as defined above:</p>
<ul>
<li><strong>next_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Updated scores of
all
non-finished beams.</li>
<li><strong>next_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Next tokens to be
added
to the non-finished beam_hypotheses.</li>
<li><strong>next_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Beam indices
indicating to which beam the next tokens shall be added.</li>
</ul>
`,returnType:`
<p><code>UserDict</code></p>
`}}),wn=new b({props:{name:"finalize",anchor:"transformers.ConstrainedBeamSearchScorer.finalize",parameters:[{name:"input_ids",val:": LongTensor"},{name:"final_beam_scores",val:": FloatTensor"},{name:"final_beam_tokens",val:": LongTensor"},{name:"final_beam_indices",val:": LongTensor"},{name:"max_length",val:": int"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_beam_search.py#L722"}}),Ln=new qe({}),xn=new b({props:{name:"transformers.top_k_top_p_filtering",anchor:"transformers.top_k_top_p_filtering",parameters:[{name:"logits",val:": FloatTensor"},{name:"top_k",val:": int = 0"},{name:"top_p",val:": float = 1.0"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_utils.py#L3161",parametersDescription:[{anchor:"transformers.top_k_top_p_filtering.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
If &gt; 0, only keep the top k tokens with highest probability (top-k filtering)`,name:"top_k"},{anchor:"transformers.top_k_top_p_filtering.top_p",description:`<strong>top_p</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
If &lt; 1.0, only keep the top tokens with cumulative probability &gt;= top_p (nucleus filtering). Nucleus
filtering is described in Holtzman et al. (<a href="http://arxiv.org/abs/1904.09751" rel="nofollow">http://arxiv.org/abs/1904.09751</a>)`,name:"top_p"},{anchor:"transformers.top_k_top_p_filtering.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimumber of tokens we keep per batch example in the output.`,name:"min_tokens_to_keep"}]}}),Pn=new b({props:{name:"transformers.tf_top_k_top_p_filtering",anchor:"transformers.tf_top_k_top_p_filtering",parameters:[{name:"logits",val:""},{name:"top_k",val:" = 0"},{name:"top_p",val:" = 1.0"},{name:"filter_value",val:" = -inf"},{name:"min_tokens_to_keep",val:" = 1"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_tf_utils.py#L2314",parametersDescription:[{anchor:"transformers.tf_top_k_top_p_filtering.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
If &gt; 0, only keep the top k tokens with highest probability (top-k filtering)`,name:"top_k"},{anchor:"transformers.tf_top_k_top_p_filtering.top_p",description:`<strong>top_p</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
If &lt; 1.0, only keep the top tokens with cumulative probability &gt;= top_p (nucleus filtering). Nucleus
filtering is described in Holtzman et al. (<a href="http://arxiv.org/abs/1904.09751" rel="nofollow">http://arxiv.org/abs/1904.09751</a>)`,name:"top_p"},{anchor:"transformers.tf_top_k_top_p_filtering.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimumber of tokens we keep per batch example in the output.`,name:"min_tokens_to_keep"}]}}),{c(){Be=o("meta"),zn=c(),N=o("h1"),H=o("a"),Ni=o("span"),f(Qt.$$.fragment),gm=c(),Wi=o("span"),um=a("Utilities for Generation"),Kl=c(),y=o("p"),_m=a("This page lists all the utility functions used by "),Sn=o("a"),vm=a("generate()"),bm=a(`,
`),On=o("a"),$m=a("greedy_search()"),Tm=a(`,
`),qn=o("a"),ym=a("sample()"),km=a(`,
`),Bn=o("a"),wm=a("beam_search()"),Lm=a(`,
`),In=o("a"),xm=a("beam_sample()"),Em=a(`,
`),An=o("a"),Pm=a("group_beam_search()"),Fm=a(`, and
`),Cn=o("a"),Dm=a("constrained_beam_search()"),zm=a("."),Ul=c(),Nn=o("p"),Sm=a("Most of those are only useful if you are studying the code of the generate methods in the library."),Yl=c(),Ge=o("h2"),mt=o("a"),Vi=o("span"),f(Zt.$$.fragment),Om=c(),Mi=o("span"),qm=a("Generate Outputs"),Xl=c(),W=o("p"),Bm=a("The output of "),Wn=o("a"),Im=a("generate()"),Am=a(` is an instance of a subclass of
`),Vn=o("a"),Cm=a("ModelOutput"),Nm=a(`. This output is a data structure containing all the information returned
by `),Mn=o("a"),Wm=a("generate()"),Vm=a(", but that can also be used as tuple or dictionary."),Jl=c(),Gn=o("p"),Mm=a("Here\u2019s an example:"),Ql=c(),f(er.$$.fragment),Zl=c(),Ie=o("p"),Gm=a("The "),Gi=o("code"),jm=a("generation_output"),Hm=a(" object is a "),jn=o("a"),Rm=a("GreedySearchDecoderOnlyOutput"),Km=a(`, as we can
see in the documentation of that class below, it means it has the following attributes:`),ed=c(),V=o("ul"),Hn=o("li"),ji=o("code"),Um=a("sequences"),Ym=a(": the generated sequences of tokens"),Xm=c(),Rn=o("li"),Hi=o("code"),Jm=a("scores"),Qm=a(" (optional): the prediction scores of the language modelling head, for each generation step"),Zm=c(),Kn=o("li"),Ri=o("code"),ef=a("hidden_states"),tf=a(" (optional): the hidden states of the model, for each generation step"),rf=c(),Un=o("li"),Ki=o("code"),of=a("attentions"),nf=a(" (optional): the attention weights of the model, for each generation step"),td=c(),k=o("p"),sf=a("Here we have the "),Ui=o("code"),af=a("scores"),cf=a(" since we passed along "),Yi=o("code"),lf=a("output_scores=True"),df=a(", but we don\u2019t have "),Xi=o("code"),pf=a("hidden_states"),mf=a(` and
`),Ji=o("code"),ff=a("attentions"),hf=a(" because we didn\u2019t pass "),Qi=o("code"),gf=a("output_hidden_states=True"),uf=a(" or "),Zi=o("code"),_f=a("output_attentions=True"),vf=a("."),rd=c(),F=o("p"),bf=a(`You can access each attribute as you would usually do, and if that attribute has not been returned by the model, you
will get `),ec=o("code"),$f=a("None"),Tf=a(". Here for instance "),tc=o("code"),yf=a("generation_output.scores"),kf=a(` are all the generated prediction scores of the
language modeling head, and `),rc=o("code"),wf=a("generation_output.attentions"),Lf=a(" is "),oc=o("code"),xf=a("None"),Ef=a("."),od=c(),D=o("p"),Pf=a("When using our "),nc=o("code"),Ff=a("generation_output"),Df=a(" object as a tuple, it only keeps the attributes that don\u2019t have "),sc=o("code"),zf=a("None"),Sf=a(` values.
Here, for instance, it has two elements, `),ac=o("code"),Of=a("loss"),qf=a(" then "),ic=o("code"),Bf=a("logits"),If=a(", so"),nd=c(),f(tr.$$.fragment),sd=c(),ft=o("p"),Af=a("will return the tuple "),cc=o("code"),Cf=a("(generation_output.sequences, generation_output.scores)"),Nf=a(" for instance."),ad=c(),z=o("p"),Wf=a("When using our "),lc=o("code"),Vf=a("generation_output"),Mf=a(" object as a dictionary, it only keeps the attributes that don\u2019t have "),dc=o("code"),Gf=a("None"),jf=a(`
values. Here, for instance, it has two keys that are `),pc=o("code"),Hf=a("sequences"),Rf=a(" and "),mc=o("code"),Kf=a("scores"),Uf=a("."),id=c(),Yn=o("p"),Yf=a("We document here all output types."),cd=c(),je=o("h3"),ht=o("a"),fc=o("span"),f(rr.$$.fragment),Xf=c(),hc=o("span"),Jf=a("GreedySearchOutput"),ld=c(),He=o("div"),f(or.$$.fragment),Qf=c(),gc=o("p"),Zf=a("Base class for outputs of decoder-only generation models using greedy search."),dd=c(),Re=o("div"),f(nr.$$.fragment),eh=c(),uc=o("p"),th=a(`Base class for outputs of encoder-decoder generation models using greedy search. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),pd=c(),R=o("div"),f(sr.$$.fragment),rh=c(),_c=o("p"),oh=a("Flax Base class for outputs of decoder-only generation models using greedy search."),nh=c(),gt=o("div"),f(ar.$$.fragment),sh=c(),vc=o("p"),ah=a("\u201CReturns a new object replacing the specified fields with new values."),md=c(),Ke=o("h3"),ut=o("a"),bc=o("span"),f(ir.$$.fragment),ih=c(),$c=o("span"),ch=a("SampleOutput"),fd=c(),Ue=o("div"),f(cr.$$.fragment),lh=c(),Tc=o("p"),dh=a("Base class for outputs of decoder-only generation models using sampling."),hd=c(),Ye=o("div"),f(lr.$$.fragment),ph=c(),yc=o("p"),mh=a(`Base class for outputs of encoder-decoder generation models using sampling. Hidden states and attention weights of
the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),gd=c(),K=o("div"),f(dr.$$.fragment),fh=c(),kc=o("p"),hh=a("Flax Base class for outputs of decoder-only generation models using sampling."),gh=c(),_t=o("div"),f(pr.$$.fragment),uh=c(),wc=o("p"),_h=a("\u201CReturns a new object replacing the specified fields with new values."),ud=c(),Xe=o("h3"),vt=o("a"),Lc=o("span"),f(mr.$$.fragment),vh=c(),xc=o("span"),bh=a("BeamSearchOutput"),_d=c(),Je=o("div"),f(fr.$$.fragment),$h=c(),Ec=o("p"),Th=a("Base class for outputs of decoder-only generation models using beam search."),vd=c(),Qe=o("div"),f(hr.$$.fragment),yh=c(),Pc=o("p"),kh=a(`Base class for outputs of encoder-decoder generation models using beam search. Hidden states and attention weights
of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),bd=c(),Ze=o("h3"),bt=o("a"),Fc=o("span"),f(gr.$$.fragment),wh=c(),Dc=o("span"),Lh=a("BeamSampleOutput"),$d=c(),et=o("div"),f(ur.$$.fragment),xh=c(),zc=o("p"),Eh=a("Base class for outputs of decoder-only generation models using beam sample."),Td=c(),tt=o("div"),f(_r.$$.fragment),Ph=c(),Sc=o("p"),Fh=a(`Base class for outputs of encoder-decoder generation models using beam sampling. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),yd=c(),rt=o("h2"),$t=o("a"),Oc=o("span"),f(vr.$$.fragment),Dh=c(),qc=o("span"),zh=a("LogitsProcessor"),kd=c(),Tt=o("p"),Sh=a("A "),Xn=o("a"),Oh=a("LogitsProcessor"),qh=a(` can be used to modify the prediction scores of a language model head for
generation.`),wd=c(),U=o("div"),f(br.$$.fragment),Bh=c(),Bc=o("p"),Ih=a("Abstract base class for all logit processors that can be applied during generation."),Ah=c(),yt=o("div"),f($r.$$.fragment),Ch=c(),Ic=o("p"),Nh=a("Torch method for processing logits."),Ld=c(),Y=o("div"),f(Tr.$$.fragment),Wh=c(),w=o("p"),Vh=a("This class can be used to create a list of "),Jn=o("a"),Mh=a("LogitsProcessor"),Gh=a(" or "),Qn=o("a"),jh=a("LogitsWarper"),Hh=a(` to subsequently process a
`),Ac=o("code"),Rh=a("scores"),Kh=a(" input tensor. This class inherits from list and adds a specific "),Cc=o("em"),Nc=o("strong"),Uh=a("call"),Yh=a(` method to apply each
`),Zn=o("a"),Xh=a("LogitsProcessor"),Jh=a(" or "),es=o("a"),Qh=a("LogitsWarper"),Zh=a(" to the inputs."),eg=c(),ts=o("div"),f(yr.$$.fragment),xd=c(),X=o("div"),f(kr.$$.fragment),tg=c(),Wc=o("p"),rg=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),og=c(),kt=o("div"),f(wr.$$.fragment),ng=c(),Vc=o("p"),sg=a("Torch method for warping logits."),Ed=c(),J=o("div"),f(Lr.$$.fragment),ag=c(),rs=o("p"),os=o("a"),ig=a("LogitsProcessor"),cg=a(" enforcing a min-length by setting EOS probability to 0."),lg=c(),ns=o("div"),f(xr.$$.fragment),Pd=c(),Q=o("div"),f(Er.$$.fragment),dg=c(),ss=o("p"),as=o("a"),pg=a("LogitsWarper"),mg=a(" for temperature (exponential scaling output probability distribution)."),fg=c(),is=o("div"),f(Pr.$$.fragment),Fd=c(),Z=o("div"),f(Fr.$$.fragment),hg=c(),cs=o("p"),ls=o("a"),gg=a("LogitsProcessor"),ug=a(" enforcing an exponential penalty on repeated sequences."),_g=c(),ds=o("div"),f(Dr.$$.fragment),Dd=c(),ee=o("div"),f(zr.$$.fragment),vg=c(),ps=o("p"),ms=o("a"),bg=a("LogitsWarper"),$g=a(" that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),Tg=c(),fs=o("div"),f(Sr.$$.fragment),zd=c(),te=o("div"),f(Or.$$.fragment),yg=c(),hs=o("p"),gs=o("a"),kg=a("LogitsWarper"),wg=a(" that performs top-k, i.e. restricting to the k highest probability elements."),Lg=c(),us=o("div"),f(qr.$$.fragment),Sd=c(),re=o("div"),f(Br.$$.fragment),xg=c(),wt=o("p"),_s=o("a"),Eg=a("LogitsProcessor"),Pg=a(` that enforces no repetition of n-grams. See
`),Ir=o("a"),Fg=a("Fairseq"),Dg=a("."),zg=c(),vs=o("div"),f(Ar.$$.fragment),Od=c(),oe=o("div"),f(Cr.$$.fragment),Sg=c(),bs=o("p"),$s=o("a"),Og=a("LogitsProcessor"),qg=a(" that enforces that specified sequences will never be sampled."),Bg=c(),Ts=o("div"),f(Nr.$$.fragment),qd=c(),ne=o("div"),f(Wr.$$.fragment),Ig=c(),Lt=o("p"),ys=o("a"),Ag=a("LogitsProcessor"),Cg=a(` that enforces constrained generation and is useful for prefix-conditioned constrained
generation. See `),Vr=o("a"),Ng=a("Autoregressive Entity Retrieval"),Wg=a(" for more information."),Vg=c(),ks=o("div"),f(Mr.$$.fragment),Bd=c(),se=o("div"),f(Gr.$$.fragment),Mg=c(),Ae=o("p"),ws=o("a"),Gg=a("LogitsProcessor"),jg=a(` that enforces diverse beam search. Note that this logits processor is only effective for
`),Ls=o("a"),Hg=a("PreTrainedModel.group_beam_search()"),Rg=a(". See "),jr=o("a"),Kg=a(`Diverse Beam Search: Decoding Diverse Solutions from Neural Sequence
Models`),Ug=a(" for more details."),Yg=c(),xs=o("div"),f(Hr.$$.fragment),Id=c(),ae=o("div"),f(Rr.$$.fragment),Xg=c(),Es=o("p"),Ps=o("a"),Jg=a("LogitsProcessor"),Qg=a(" that enforces the specified token as the first generated token."),Zg=c(),Fs=o("div"),f(Kr.$$.fragment),Ad=c(),ie=o("div"),f(Ur.$$.fragment),eu=c(),xt=o("p"),Ds=o("a"),tu=a("LogitsProcessor"),ru=a(" that enforces the specified token as the last generated token when "),Mc=o("code"),ou=a("max_length"),nu=a(" is reached."),su=c(),zs=o("div"),f(Yr.$$.fragment),Cd=c(),ce=o("div"),f(Xr.$$.fragment),au=c(),M=o("p"),Ss=o("a"),iu=a("LogitsProcessor"),cu=a(" that removes all "),Gc=o("code"),lu=a("nan"),du=a(" and "),jc=o("code"),pu=a("inf"),mu=a(` values to avoid the generation method to fail. Note that using
the logits processor should only be used if necessary since it can slow down the generation method. `),Hc=o("code"),fu=a("max_length"),hu=a(` is
reached.`),gu=c(),Os=o("div"),f(Jr.$$.fragment),Nd=c(),le=o("div"),f(Qr.$$.fragment),uu=c(),Rc=o("p"),_u=a("Abstract base class for all logit processors that can be applied during generation."),vu=c(),Et=o("div"),f(Zr.$$.fragment),bu=c(),Kc=o("p"),$u=a("TF method for processing logits."),Wd=c(),de=o("div"),f(eo.$$.fragment),Tu=c(),B=o("p"),yu=a("This class can be used to create a list of "),qs=o("a"),ku=a("TFLogitsProcessor"),wu=a(" to subsequently process a "),Uc=o("code"),Lu=a("scores"),xu=a(` input tensor.
This class inherits from list and adds a specific `),Yc=o("em"),Xc=o("strong"),Eu=a("call"),Pu=a(" method to apply each "),Bs=o("a"),Fu=a("TFLogitsProcessor"),Du=a(` to the
inputs.`),zu=c(),Is=o("div"),f(to.$$.fragment),Vd=c(),pe=o("div"),f(ro.$$.fragment),Su=c(),Jc=o("p"),Ou=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),qu=c(),Pt=o("div"),f(oo.$$.fragment),Bu=c(),Qc=o("p"),Iu=a("TF method for warping logits."),Md=c(),me=o("div"),f(no.$$.fragment),Au=c(),As=o("p"),Cs=o("a"),Cu=a("TFLogitsWarper"),Nu=a(" for temperature (exponential scaling output probability distribution)."),Wu=c(),Ns=o("div"),f(so.$$.fragment),Gd=c(),fe=o("div"),f(ao.$$.fragment),Vu=c(),Ws=o("p"),Vs=o("a"),Mu=a("TFLogitsWarper"),Gu=a(" that performs top-p, i.e. restricting to top tokens summing to <= prob_cut_off."),ju=c(),Ms=o("div"),f(io.$$.fragment),jd=c(),he=o("div"),f(co.$$.fragment),Hu=c(),Gs=o("p"),js=o("a"),Ru=a("TFLogitsWarper"),Ku=a(" that performs top-k, i.e. restricting to the k highest probability elements."),Uu=c(),Hs=o("div"),f(lo.$$.fragment),Hd=c(),ge=o("div"),f(po.$$.fragment),Yu=c(),Rs=o("p"),Ks=o("a"),Xu=a("TFLogitsProcessor"),Ju=a(" enforcing a min-length by setting EOS probability to 0."),Qu=c(),Us=o("div"),f(mo.$$.fragment),Rd=c(),ue=o("div"),f(fo.$$.fragment),Zu=c(),Ys=o("p"),Xs=o("a"),e_=a("TFLogitsProcessor"),t_=a(" that enforces that specified sequences will never be sampled."),r_=c(),Js=o("div"),f(ho.$$.fragment),Kd=c(),_e=o("div"),f(go.$$.fragment),o_=c(),Ft=o("p"),Qs=o("a"),n_=a("TFLogitsProcessor"),s_=a(` that enforces no repetition of n-grams. See
`),uo=o("a"),a_=a("Fairseq"),i_=a("."),c_=c(),Zs=o("div"),f(_o.$$.fragment),Ud=c(),ve=o("div"),f(vo.$$.fragment),l_=c(),ea=o("p"),ta=o("a"),d_=a("TFLogitsProcessor"),p_=a(" enforcing an exponential penalty on repeated sequences."),m_=c(),ra=o("div"),f(bo.$$.fragment),Yd=c(),be=o("div"),f($o.$$.fragment),f_=c(),Zc=o("p"),h_=a("Abstract base class for all logit processors that can be applied during generation."),g_=c(),Dt=o("div"),f(To.$$.fragment),u_=c(),el=o("p"),__=a("Flax method for processing logits."),Xd=c(),$e=o("div"),f(yo.$$.fragment),v_=c(),L=o("p"),b_=a("This class can be used to create a list of "),oa=o("a"),$_=a("FlaxLogitsProcessor"),T_=a(" or "),na=o("a"),y_=a("FlaxLogitsWarper"),k_=a(` to subsequently process
a `),tl=o("code"),w_=a("scores"),L_=a(" input tensor. This class inherits from list and adds a specific "),rl=o("em"),ol=o("strong"),x_=a("call"),E_=a(` method to apply each
`),sa=o("a"),P_=a("FlaxLogitsProcessor"),F_=a(" or "),aa=o("a"),D_=a("FlaxLogitsWarper"),z_=a(" to the inputs."),S_=c(),ia=o("div"),f(ko.$$.fragment),Jd=c(),Te=o("div"),f(wo.$$.fragment),O_=c(),nl=o("p"),q_=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),B_=c(),zt=o("div"),f(Lo.$$.fragment),I_=c(),sl=o("p"),A_=a("Flax method for warping logits."),Qd=c(),ye=o("div"),f(xo.$$.fragment),C_=c(),ca=o("p"),la=o("a"),N_=a("FlaxLogitsWarper"),W_=a(" for temperature (exponential scaling output probability distribution)."),V_=c(),da=o("div"),f(Eo.$$.fragment),Zd=c(),ke=o("div"),f(Po.$$.fragment),M_=c(),pa=o("p"),ma=o("a"),G_=a("FlaxLogitsWarper"),j_=a(" that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),H_=c(),fa=o("div"),f(Fo.$$.fragment),ep=c(),we=o("div"),f(Do.$$.fragment),R_=c(),ha=o("p"),ga=o("a"),K_=a("FlaxLogitsWarper"),U_=a(" that performs top-k, i.e. restricting to the k highest probability elements."),Y_=c(),ua=o("div"),f(zo.$$.fragment),tp=c(),Le=o("div"),f(So.$$.fragment),X_=c(),_a=o("p"),va=o("a"),J_=a("FlaxLogitsProcessor"),Q_=a(" that enforces the specified token as the first generated token."),Z_=c(),ba=o("div"),f(Oo.$$.fragment),rp=c(),xe=o("div"),f(qo.$$.fragment),ev=c(),St=o("p"),$a=o("a"),tv=a("FlaxLogitsProcessor"),rv=a(" that enforces the specified token as the last generated token when "),al=o("code"),ov=a("max_length"),nv=a(" is reached."),sv=c(),Ta=o("div"),f(Bo.$$.fragment),op=c(),Ee=o("div"),f(Io.$$.fragment),av=c(),ya=o("p"),ka=o("a"),iv=a("FlaxLogitsProcessor"),cv=a(" enforcing a min-length by setting EOS probability to 0."),lv=c(),wa=o("div"),f(Ao.$$.fragment),np=c(),ot=o("h2"),Ot=o("a"),il=o("span"),f(Co.$$.fragment),dv=c(),cl=o("span"),pv=a("StoppingCriteria"),sp=c(),qt=o("p"),mv=a("A "),La=o("a"),fv=a("StoppingCriteria"),hv=a(" can be used to change when to stop generation (other than EOS token)."),ap=c(),Pe=o("div"),f(No.$$.fragment),gv=c(),ll=o("p"),uv=a("Abstract base class for all stopping criteria that can be applied during generation."),_v=c(),xa=o("div"),f(Wo.$$.fragment),ip=c(),nt=o("div"),f(Vo.$$.fragment),vv=c(),Ea=o("div"),f(Mo.$$.fragment),cp=c(),Fe=o("div"),f(Go.$$.fragment),bv=c(),jo=o("p"),$v=a("This class can be used to stop generation whenever the full generated number of tokens exceeds "),dl=o("code"),Tv=a("max_length"),yv=a(`. Keep
in mind for decoder-only type of transformers, this will include the initial prompted tokens.`),kv=c(),Pa=o("div"),f(Ho.$$.fragment),lp=c(),De=o("div"),f(Ro.$$.fragment),wv=c(),Ko=o("p"),Lv=a(`This class can be used to stop generation whenever the full generation exceeds some amount of time. By default, the
time will start being counted when you initialize this function. You can override this by passing an
`),pl=o("code"),xv=a("initial_time"),Ev=a("."),Pv=c(),Fa=o("div"),f(Uo.$$.fragment),dp=c(),st=o("h2"),Bt=o("a"),ml=o("span"),f(Yo.$$.fragment),Fv=c(),fl=o("span"),Dv=a("Constraints"),pp=c(),It=o("p"),zv=a("A "),Da=o("a"),Sv=a("Constraint"),Ov=a(" can be used to force the generation to include specific tokens or sequences in the output."),mp=c(),$=o("div"),f(Xo.$$.fragment),qv=c(),hl=o("p"),Bv=a(`Abstract base class for all constraints that can be applied during generation.
It must define how the constraint can be satisfied.`),Iv=c(),gl=o("p"),Av=a("All classes that inherit Constraint must follow the requirement that"),Cv=c(),f(Jo.$$.fragment),Nv=c(),ul=o("p"),Wv=a("will always terminate (halt)."),Vv=c(),At=o("div"),f(Qo.$$.fragment),Mv=c(),_l=o("p"),Gv=a("When called, returns the token that would take this constraint one step closer to being fulfilled."),jv=c(),Ct=o("div"),f(Zo.$$.fragment),Hv=c(),vl=o("p"),Rv=a("Creates a new instance of this constraint."),Kv=c(),Nt=o("div"),f(en.$$.fragment),Uv=c(),bl=o("p"),Yv=a("Reads in a token and returns whether it creates progress."),Xv=c(),Wt=o("div"),f(tn.$$.fragment),Jv=c(),rn=o("p"),Qv=a("Returns the number of remaining steps of "),$l=o("code"),Zv=a("advance()"),eb=a(" in order to complete this constraint."),tb=c(),Vt=o("div"),f(on.$$.fragment),rb=c(),Tl=o("p"),ob=a(`Resets the state of this constraint to its initialization. We would call this in cases where the fulfillment of
a constraint is abrupted by an unwanted token.`),nb=c(),Mt=o("div"),f(nn.$$.fragment),sb=c(),yl=o("p"),ab=a("Tests whether this constraint has been properly defined."),ib=c(),Ce=o("div"),f(sn.$$.fragment),cb=c(),an=o("p"),lb=a(`Reads in a token and returns booleans that indicate the progress made by it. This function will update the
state of this object unlikes `),kl=o("code"),db=a("does_advance(self, token_id: int)"),pb=a("."),mb=c(),wl=o("p"),fb=a(`This isn\u2019t to test whether a certain token will advance the progress; it\u2019s to update its state as if it has
been generated. This becomes important if token_id != desired token (refer to else statement in
PhrasalConstraint)`),fp=c(),at=o("div"),f(cn.$$.fragment),hb=c(),za=o("p"),Sa=o("a"),gb=a("Constraint"),ub=a(" enforcing that an ordered sequence of tokens is included in the output."),hp=c(),I=o("div"),f(ln.$$.fragment),_b=c(),Ll=o("p"),vb=a("A class for beam scorers to track its progress through a list of constraints."),bb=c(),E=o("div"),f(dn.$$.fragment),$b=c(),xl=o("p"),Tb=a(`The list of tokens to generate such that we can make progress.
By \u201Clist\u201D we don\u2019t mean the list of token that will fully fulfill a constraint.`),yb=c(),it=o("p"),kb=a("Given constraints "),El=o("code"),wb=a("c_i = {t_ij | j == # of tokens}"),Lb=a(`, If we\u2019re not in the middle of progressing through a
specific constraint `),Pl=o("code"),xb=a("c_i"),Eb=a(", we return:"),Pb=c(),Fl=o("p"),Dl=o("code"),Fb=a("[t_k1 for k in indices of unfulfilled constraints]"),Db=c(),ze=o("p"),zb=a(`If we are in the middle of a constraint, then we return:
`),zl=o("code"),Sb=a("[t_ij]"),Ob=a(", where "),Sl=o("code"),qb=a("i"),Bb=a(" is the index of the inprogress constraint, "),Ol=o("code"),Ib=a("j"),Ab=a(" is the next step for the constraint."),Cb=c(),ql=o("p"),Nb=a(`Though we don\u2019t care which constraint is fulfilled first, if we are in the progress of fulfilling a constraint,
that\u2019s the only one we\u2019ll return.`),Wb=c(),Gt=o("div"),f(pn.$$.fragment),Vb=c(),Bl=o("p"),Mb=a("token_ids: the tokens generated thus far to reset the state of the progress through constraints."),gp=c(),ct=o("h2"),jt=o("a"),Il=o("span"),f(mn.$$.fragment),Gb=c(),Al=o("span"),jb=a("BeamSearch"),up=c(),A=o("div"),f(fn.$$.fragment),Hb=c(),lt=o("p"),Rb=a("Abstract base class for all beam scorers that are used for "),Oa=o("a"),Kb=a("beam_search()"),Ub=a(` and
`),qa=o("a"),Yb=a("beam_sample()"),Xb=a("."),Jb=c(),Ba=o("div"),f(hn.$$.fragment),Qb=c(),Ia=o("div"),f(gn.$$.fragment),_p=c(),x=o("div"),f(un.$$.fragment),Zb=c(),Aa=o("p"),Ca=o("a"),e$=a("BeamScorer"),t$=a(" implementing standard beam search decoding."),r$=c(),_n=o("p"),o$=a("Adapted in part from "),vn=o("a"),n$=a(`Facebook\u2019s XLM beam search
code`),s$=a("."),a$=c(),Na=o("p"),i$=a("Reference for the diverse beam search algorithm and implementation "),bn=o("a"),c$=a(`Ashwin Kalyan\u2019s DBS
implementation`),l$=c(),Wa=o("div"),f($n.$$.fragment),d$=c(),Va=o("div"),f(Tn.$$.fragment),vp=c(),C=o("div"),f(yn.$$.fragment),p$=c(),Ma=o("p"),Ga=o("a"),m$=a("BeamScorer"),f$=a(" implementing constrained beam search decoding."),h$=c(),ja=o("div"),f(kn.$$.fragment),g$=c(),Ha=o("div"),f(wn.$$.fragment),bp=c(),dt=o("h2"),Ht=o("a"),Cl=o("span"),f(Ln.$$.fragment),u$=c(),Nl=o("span"),_$=a("Utilities"),$p=c(),Se=o("div"),f(xn.$$.fragment),v$=c(),Wl=o("p"),b$=a("Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),$$=c(),Ra=o("p"),T$=a("From: "),En=o("a"),y$=a("https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),Tp=c(),Oe=o("div"),f(Pn.$$.fragment),k$=c(),Vl=o("p"),w$=a("Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),L$=c(),Ka=o("p"),x$=a("From: "),Fn=o("a"),E$=a("https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),this.h()},l(e){const p=uk('[data-svelte="svelte-1phssyn"]',document.head);Be=n(p,"META",{name:!0,content:!0}),p.forEach(r),zn=l(e),N=n(e,"H1",{class:!0});var kp=s(N);H=n(kp,"A",{id:!0,class:!0,href:!0});var oT=s(H);Ni=n(oT,"SPAN",{});var nT=s(Ni);h(Qt.$$.fragment,nT),nT.forEach(r),oT.forEach(r),gm=l(kp),Wi=n(kp,"SPAN",{});var sT=s(Wi);um=i(sT,"Utilities for Generation"),sT.forEach(r),kp.forEach(r),Kl=l(e),y=n(e,"P",{});var P=s(y);_m=i(P,"This page lists all the utility functions used by "),Sn=n(P,"A",{href:!0});var aT=s(Sn);vm=i(aT,"generate()"),aT.forEach(r),bm=i(P,`,
`),On=n(P,"A",{href:!0});var iT=s(On);$m=i(iT,"greedy_search()"),iT.forEach(r),Tm=i(P,`,
`),qn=n(P,"A",{href:!0});var cT=s(qn);ym=i(cT,"sample()"),cT.forEach(r),km=i(P,`,
`),Bn=n(P,"A",{href:!0});var lT=s(Bn);wm=i(lT,"beam_search()"),lT.forEach(r),Lm=i(P,`,
`),In=n(P,"A",{href:!0});var dT=s(In);xm=i(dT,"beam_sample()"),dT.forEach(r),Em=i(P,`,
`),An=n(P,"A",{href:!0});var pT=s(An);Pm=i(pT,"group_beam_search()"),pT.forEach(r),Fm=i(P,`, and
`),Cn=n(P,"A",{href:!0});var mT=s(Cn);Dm=i(mT,"constrained_beam_search()"),mT.forEach(r),zm=i(P,"."),P.forEach(r),Ul=l(e),Nn=n(e,"P",{});var fT=s(Nn);Sm=i(fT,"Most of those are only useful if you are studying the code of the generate methods in the library."),fT.forEach(r),Yl=l(e),Ge=n(e,"H2",{class:!0});var wp=s(Ge);mt=n(wp,"A",{id:!0,class:!0,href:!0});var hT=s(mt);Vi=n(hT,"SPAN",{});var gT=s(Vi);h(Zt.$$.fragment,gT),gT.forEach(r),hT.forEach(r),Om=l(wp),Mi=n(wp,"SPAN",{});var uT=s(Mi);qm=i(uT,"Generate Outputs"),uT.forEach(r),wp.forEach(r),Xl=l(e),W=n(e,"P",{});var Rt=s(W);Bm=i(Rt,"The output of "),Wn=n(Rt,"A",{href:!0});var _T=s(Wn);Im=i(_T,"generate()"),_T.forEach(r),Am=i(Rt,` is an instance of a subclass of
`),Vn=n(Rt,"A",{href:!0});var vT=s(Vn);Cm=i(vT,"ModelOutput"),vT.forEach(r),Nm=i(Rt,`. This output is a data structure containing all the information returned
by `),Mn=n(Rt,"A",{href:!0});var bT=s(Mn);Wm=i(bT,"generate()"),bT.forEach(r),Vm=i(Rt,", but that can also be used as tuple or dictionary."),Rt.forEach(r),Jl=l(e),Gn=n(e,"P",{});var $T=s(Gn);Mm=i($T,"Here\u2019s an example:"),$T.forEach(r),Ql=l(e),h(er.$$.fragment,e),Zl=l(e),Ie=n(e,"P",{});var Ua=s(Ie);Gm=i(Ua,"The "),Gi=n(Ua,"CODE",{});var TT=s(Gi);jm=i(TT,"generation_output"),TT.forEach(r),Hm=i(Ua," object is a "),jn=n(Ua,"A",{href:!0});var yT=s(jn);Rm=i(yT,"GreedySearchDecoderOnlyOutput"),yT.forEach(r),Km=i(Ua,`, as we can
see in the documentation of that class below, it means it has the following attributes:`),Ua.forEach(r),ed=l(e),V=n(e,"UL",{});var Kt=s(V);Hn=n(Kt,"LI",{});var P$=s(Hn);ji=n(P$,"CODE",{});var kT=s(ji);Um=i(kT,"sequences"),kT.forEach(r),Ym=i(P$,": the generated sequences of tokens"),P$.forEach(r),Xm=l(Kt),Rn=n(Kt,"LI",{});var F$=s(Rn);Hi=n(F$,"CODE",{});var wT=s(Hi);Jm=i(wT,"scores"),wT.forEach(r),Qm=i(F$," (optional): the prediction scores of the language modelling head, for each generation step"),F$.forEach(r),Zm=l(Kt),Kn=n(Kt,"LI",{});var D$=s(Kn);Ri=n(D$,"CODE",{});var LT=s(Ri);ef=i(LT,"hidden_states"),LT.forEach(r),tf=i(D$," (optional): the hidden states of the model, for each generation step"),D$.forEach(r),rf=l(Kt),Un=n(Kt,"LI",{});var z$=s(Un);Ki=n(z$,"CODE",{});var xT=s(Ki);of=i(xT,"attentions"),xT.forEach(r),nf=i(z$," (optional): the attention weights of the model, for each generation step"),z$.forEach(r),Kt.forEach(r),td=l(e),k=n(e,"P",{});var S=s(k);sf=i(S,"Here we have the "),Ui=n(S,"CODE",{});var ET=s(Ui);af=i(ET,"scores"),ET.forEach(r),cf=i(S," since we passed along "),Yi=n(S,"CODE",{});var PT=s(Yi);lf=i(PT,"output_scores=True"),PT.forEach(r),df=i(S,", but we don\u2019t have "),Xi=n(S,"CODE",{});var FT=s(Xi);pf=i(FT,"hidden_states"),FT.forEach(r),mf=i(S,` and
`),Ji=n(S,"CODE",{});var DT=s(Ji);ff=i(DT,"attentions"),DT.forEach(r),hf=i(S," because we didn\u2019t pass "),Qi=n(S,"CODE",{});var zT=s(Qi);gf=i(zT,"output_hidden_states=True"),zT.forEach(r),uf=i(S," or "),Zi=n(S,"CODE",{});var ST=s(Zi);_f=i(ST,"output_attentions=True"),ST.forEach(r),vf=i(S,"."),S.forEach(r),rd=l(e),F=n(e,"P",{});var Ne=s(F);bf=i(Ne,`You can access each attribute as you would usually do, and if that attribute has not been returned by the model, you
will get `),ec=n(Ne,"CODE",{});var OT=s(ec);$f=i(OT,"None"),OT.forEach(r),Tf=i(Ne,". Here for instance "),tc=n(Ne,"CODE",{});var qT=s(tc);yf=i(qT,"generation_output.scores"),qT.forEach(r),kf=i(Ne,` are all the generated prediction scores of the
language modeling head, and `),rc=n(Ne,"CODE",{});var BT=s(rc);wf=i(BT,"generation_output.attentions"),BT.forEach(r),Lf=i(Ne," is "),oc=n(Ne,"CODE",{});var IT=s(oc);xf=i(IT,"None"),IT.forEach(r),Ef=i(Ne,"."),Ne.forEach(r),od=l(e),D=n(e,"P",{});var We=s(D);Pf=i(We,"When using our "),nc=n(We,"CODE",{});var AT=s(nc);Ff=i(AT,"generation_output"),AT.forEach(r),Df=i(We," object as a tuple, it only keeps the attributes that don\u2019t have "),sc=n(We,"CODE",{});var CT=s(sc);zf=i(CT,"None"),CT.forEach(r),Sf=i(We,` values.
Here, for instance, it has two elements, `),ac=n(We,"CODE",{});var NT=s(ac);Of=i(NT,"loss"),NT.forEach(r),qf=i(We," then "),ic=n(We,"CODE",{});var WT=s(ic);Bf=i(WT,"logits"),WT.forEach(r),If=i(We,", so"),We.forEach(r),nd=l(e),h(tr.$$.fragment,e),sd=l(e),ft=n(e,"P",{});var Lp=s(ft);Af=i(Lp,"will return the tuple "),cc=n(Lp,"CODE",{});var VT=s(cc);Cf=i(VT,"(generation_output.sequences, generation_output.scores)"),VT.forEach(r),Nf=i(Lp," for instance."),Lp.forEach(r),ad=l(e),z=n(e,"P",{});var Ve=s(z);Wf=i(Ve,"When using our "),lc=n(Ve,"CODE",{});var MT=s(lc);Vf=i(MT,"generation_output"),MT.forEach(r),Mf=i(Ve," object as a dictionary, it only keeps the attributes that don\u2019t have "),dc=n(Ve,"CODE",{});var GT=s(dc);Gf=i(GT,"None"),GT.forEach(r),jf=i(Ve,`
values. Here, for instance, it has two keys that are `),pc=n(Ve,"CODE",{});var jT=s(pc);Hf=i(jT,"sequences"),jT.forEach(r),Rf=i(Ve," and "),mc=n(Ve,"CODE",{});var HT=s(mc);Kf=i(HT,"scores"),HT.forEach(r),Uf=i(Ve,"."),Ve.forEach(r),id=l(e),Yn=n(e,"P",{});var RT=s(Yn);Yf=i(RT,"We document here all output types."),RT.forEach(r),cd=l(e),je=n(e,"H3",{class:!0});var xp=s(je);ht=n(xp,"A",{id:!0,class:!0,href:!0});var KT=s(ht);fc=n(KT,"SPAN",{});var UT=s(fc);h(rr.$$.fragment,UT),UT.forEach(r),KT.forEach(r),Xf=l(xp),hc=n(xp,"SPAN",{});var YT=s(hc);Jf=i(YT,"GreedySearchOutput"),YT.forEach(r),xp.forEach(r),ld=l(e),He=n(e,"DIV",{class:!0});var Ep=s(He);h(or.$$.fragment,Ep),Qf=l(Ep),gc=n(Ep,"P",{});var XT=s(gc);Zf=i(XT,"Base class for outputs of decoder-only generation models using greedy search."),XT.forEach(r),Ep.forEach(r),dd=l(e),Re=n(e,"DIV",{class:!0});var Pp=s(Re);h(nr.$$.fragment,Pp),eh=l(Pp),uc=n(Pp,"P",{});var JT=s(uc);th=i(JT,`Base class for outputs of encoder-decoder generation models using greedy search. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),JT.forEach(r),Pp.forEach(r),pd=l(e),R=n(e,"DIV",{class:!0});var Ya=s(R);h(sr.$$.fragment,Ya),rh=l(Ya),_c=n(Ya,"P",{});var QT=s(_c);oh=i(QT,"Flax Base class for outputs of decoder-only generation models using greedy search."),QT.forEach(r),nh=l(Ya),gt=n(Ya,"DIV",{class:!0});var Fp=s(gt);h(ar.$$.fragment,Fp),sh=l(Fp),vc=n(Fp,"P",{});var ZT=s(vc);ah=i(ZT,"\u201CReturns a new object replacing the specified fields with new values."),ZT.forEach(r),Fp.forEach(r),Ya.forEach(r),md=l(e),Ke=n(e,"H3",{class:!0});var Dp=s(Ke);ut=n(Dp,"A",{id:!0,class:!0,href:!0});var e1=s(ut);bc=n(e1,"SPAN",{});var t1=s(bc);h(ir.$$.fragment,t1),t1.forEach(r),e1.forEach(r),ih=l(Dp),$c=n(Dp,"SPAN",{});var r1=s($c);ch=i(r1,"SampleOutput"),r1.forEach(r),Dp.forEach(r),fd=l(e),Ue=n(e,"DIV",{class:!0});var zp=s(Ue);h(cr.$$.fragment,zp),lh=l(zp),Tc=n(zp,"P",{});var o1=s(Tc);dh=i(o1,"Base class for outputs of decoder-only generation models using sampling."),o1.forEach(r),zp.forEach(r),hd=l(e),Ye=n(e,"DIV",{class:!0});var Sp=s(Ye);h(lr.$$.fragment,Sp),ph=l(Sp),yc=n(Sp,"P",{});var n1=s(yc);mh=i(n1,`Base class for outputs of encoder-decoder generation models using sampling. Hidden states and attention weights of
the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),n1.forEach(r),Sp.forEach(r),gd=l(e),K=n(e,"DIV",{class:!0});var Xa=s(K);h(dr.$$.fragment,Xa),fh=l(Xa),kc=n(Xa,"P",{});var s1=s(kc);hh=i(s1,"Flax Base class for outputs of decoder-only generation models using sampling."),s1.forEach(r),gh=l(Xa),_t=n(Xa,"DIV",{class:!0});var Op=s(_t);h(pr.$$.fragment,Op),uh=l(Op),wc=n(Op,"P",{});var a1=s(wc);_h=i(a1,"\u201CReturns a new object replacing the specified fields with new values."),a1.forEach(r),Op.forEach(r),Xa.forEach(r),ud=l(e),Xe=n(e,"H3",{class:!0});var qp=s(Xe);vt=n(qp,"A",{id:!0,class:!0,href:!0});var i1=s(vt);Lc=n(i1,"SPAN",{});var c1=s(Lc);h(mr.$$.fragment,c1),c1.forEach(r),i1.forEach(r),vh=l(qp),xc=n(qp,"SPAN",{});var l1=s(xc);bh=i(l1,"BeamSearchOutput"),l1.forEach(r),qp.forEach(r),_d=l(e),Je=n(e,"DIV",{class:!0});var Bp=s(Je);h(fr.$$.fragment,Bp),$h=l(Bp),Ec=n(Bp,"P",{});var d1=s(Ec);Th=i(d1,"Base class for outputs of decoder-only generation models using beam search."),d1.forEach(r),Bp.forEach(r),vd=l(e),Qe=n(e,"DIV",{class:!0});var Ip=s(Qe);h(hr.$$.fragment,Ip),yh=l(Ip),Pc=n(Ip,"P",{});var p1=s(Pc);kh=i(p1,`Base class for outputs of encoder-decoder generation models using beam search. Hidden states and attention weights
of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),p1.forEach(r),Ip.forEach(r),bd=l(e),Ze=n(e,"H3",{class:!0});var Ap=s(Ze);bt=n(Ap,"A",{id:!0,class:!0,href:!0});var m1=s(bt);Fc=n(m1,"SPAN",{});var f1=s(Fc);h(gr.$$.fragment,f1),f1.forEach(r),m1.forEach(r),wh=l(Ap),Dc=n(Ap,"SPAN",{});var h1=s(Dc);Lh=i(h1,"BeamSampleOutput"),h1.forEach(r),Ap.forEach(r),$d=l(e),et=n(e,"DIV",{class:!0});var Cp=s(et);h(ur.$$.fragment,Cp),xh=l(Cp),zc=n(Cp,"P",{});var g1=s(zc);Eh=i(g1,"Base class for outputs of decoder-only generation models using beam sample."),g1.forEach(r),Cp.forEach(r),Td=l(e),tt=n(e,"DIV",{class:!0});var Np=s(tt);h(_r.$$.fragment,Np),Ph=l(Np),Sc=n(Np,"P",{});var u1=s(Sc);Fh=i(u1,`Base class for outputs of encoder-decoder generation models using beam sampling. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),u1.forEach(r),Np.forEach(r),yd=l(e),rt=n(e,"H2",{class:!0});var Wp=s(rt);$t=n(Wp,"A",{id:!0,class:!0,href:!0});var _1=s($t);Oc=n(_1,"SPAN",{});var v1=s(Oc);h(vr.$$.fragment,v1),v1.forEach(r),_1.forEach(r),Dh=l(Wp),qc=n(Wp,"SPAN",{});var b1=s(qc);zh=i(b1,"LogitsProcessor"),b1.forEach(r),Wp.forEach(r),kd=l(e),Tt=n(e,"P",{});var Vp=s(Tt);Sh=i(Vp,"A "),Xn=n(Vp,"A",{href:!0});var $1=s(Xn);Oh=i($1,"LogitsProcessor"),$1.forEach(r),qh=i(Vp,` can be used to modify the prediction scores of a language model head for
generation.`),Vp.forEach(r),wd=l(e),U=n(e,"DIV",{class:!0});var Ja=s(U);h(br.$$.fragment,Ja),Bh=l(Ja),Bc=n(Ja,"P",{});var T1=s(Bc);Ih=i(T1,"Abstract base class for all logit processors that can be applied during generation."),T1.forEach(r),Ah=l(Ja),yt=n(Ja,"DIV",{class:!0});var Mp=s(yt);h($r.$$.fragment,Mp),Ch=l(Mp),Ic=n(Mp,"P",{});var y1=s(Ic);Nh=i(y1,"Torch method for processing logits."),y1.forEach(r),Mp.forEach(r),Ja.forEach(r),Ld=l(e),Y=n(e,"DIV",{class:!0});var Qa=s(Y);h(Tr.$$.fragment,Qa),Wh=l(Qa),w=n(Qa,"P",{});var O=s(w);Vh=i(O,"This class can be used to create a list of "),Jn=n(O,"A",{href:!0});var k1=s(Jn);Mh=i(k1,"LogitsProcessor"),k1.forEach(r),Gh=i(O," or "),Qn=n(O,"A",{href:!0});var w1=s(Qn);jh=i(w1,"LogitsWarper"),w1.forEach(r),Hh=i(O,` to subsequently process a
`),Ac=n(O,"CODE",{});var L1=s(Ac);Rh=i(L1,"scores"),L1.forEach(r),Kh=i(O," input tensor. This class inherits from list and adds a specific "),Cc=n(O,"EM",{});var x1=s(Cc);Nc=n(x1,"STRONG",{});var E1=s(Nc);Uh=i(E1,"call"),E1.forEach(r),x1.forEach(r),Yh=i(O,` method to apply each
`),Zn=n(O,"A",{href:!0});var P1=s(Zn);Xh=i(P1,"LogitsProcessor"),P1.forEach(r),Jh=i(O," or "),es=n(O,"A",{href:!0});var F1=s(es);Qh=i(F1,"LogitsWarper"),F1.forEach(r),Zh=i(O," to the inputs."),O.forEach(r),eg=l(Qa),ts=n(Qa,"DIV",{class:!0});var D1=s(ts);h(yr.$$.fragment,D1),D1.forEach(r),Qa.forEach(r),xd=l(e),X=n(e,"DIV",{class:!0});var Za=s(X);h(kr.$$.fragment,Za),tg=l(Za),Wc=n(Za,"P",{});var z1=s(Wc);rg=i(z1,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),z1.forEach(r),og=l(Za),kt=n(Za,"DIV",{class:!0});var Gp=s(kt);h(wr.$$.fragment,Gp),ng=l(Gp),Vc=n(Gp,"P",{});var S1=s(Vc);sg=i(S1,"Torch method for warping logits."),S1.forEach(r),Gp.forEach(r),Za.forEach(r),Ed=l(e),J=n(e,"DIV",{class:!0});var ei=s(J);h(Lr.$$.fragment,ei),ag=l(ei),rs=n(ei,"P",{});var S$=s(rs);os=n(S$,"A",{href:!0});var O1=s(os);ig=i(O1,"LogitsProcessor"),O1.forEach(r),cg=i(S$," enforcing a min-length by setting EOS probability to 0."),S$.forEach(r),lg=l(ei),ns=n(ei,"DIV",{class:!0});var q1=s(ns);h(xr.$$.fragment,q1),q1.forEach(r),ei.forEach(r),Pd=l(e),Q=n(e,"DIV",{class:!0});var ti=s(Q);h(Er.$$.fragment,ti),dg=l(ti),ss=n(ti,"P",{});var O$=s(ss);as=n(O$,"A",{href:!0});var B1=s(as);pg=i(B1,"LogitsWarper"),B1.forEach(r),mg=i(O$," for temperature (exponential scaling output probability distribution)."),O$.forEach(r),fg=l(ti),is=n(ti,"DIV",{class:!0});var I1=s(is);h(Pr.$$.fragment,I1),I1.forEach(r),ti.forEach(r),Fd=l(e),Z=n(e,"DIV",{class:!0});var ri=s(Z);h(Fr.$$.fragment,ri),hg=l(ri),cs=n(ri,"P",{});var q$=s(cs);ls=n(q$,"A",{href:!0});var A1=s(ls);gg=i(A1,"LogitsProcessor"),A1.forEach(r),ug=i(q$," enforcing an exponential penalty on repeated sequences."),q$.forEach(r),_g=l(ri),ds=n(ri,"DIV",{class:!0});var C1=s(ds);h(Dr.$$.fragment,C1),C1.forEach(r),ri.forEach(r),Dd=l(e),ee=n(e,"DIV",{class:!0});var oi=s(ee);h(zr.$$.fragment,oi),vg=l(oi),ps=n(oi,"P",{});var B$=s(ps);ms=n(B$,"A",{href:!0});var N1=s(ms);bg=i(N1,"LogitsWarper"),N1.forEach(r),$g=i(B$," that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),B$.forEach(r),Tg=l(oi),fs=n(oi,"DIV",{class:!0});var W1=s(fs);h(Sr.$$.fragment,W1),W1.forEach(r),oi.forEach(r),zd=l(e),te=n(e,"DIV",{class:!0});var ni=s(te);h(Or.$$.fragment,ni),yg=l(ni),hs=n(ni,"P",{});var I$=s(hs);gs=n(I$,"A",{href:!0});var V1=s(gs);kg=i(V1,"LogitsWarper"),V1.forEach(r),wg=i(I$," that performs top-k, i.e. restricting to the k highest probability elements."),I$.forEach(r),Lg=l(ni),us=n(ni,"DIV",{class:!0});var M1=s(us);h(qr.$$.fragment,M1),M1.forEach(r),ni.forEach(r),Sd=l(e),re=n(e,"DIV",{class:!0});var si=s(re);h(Br.$$.fragment,si),xg=l(si),wt=n(si,"P",{});var Ml=s(wt);_s=n(Ml,"A",{href:!0});var G1=s(_s);Eg=i(G1,"LogitsProcessor"),G1.forEach(r),Pg=i(Ml,` that enforces no repetition of n-grams. See
`),Ir=n(Ml,"A",{href:!0,rel:!0});var j1=s(Ir);Fg=i(j1,"Fairseq"),j1.forEach(r),Dg=i(Ml,"."),Ml.forEach(r),zg=l(si),vs=n(si,"DIV",{class:!0});var H1=s(vs);h(Ar.$$.fragment,H1),H1.forEach(r),si.forEach(r),Od=l(e),oe=n(e,"DIV",{class:!0});var ai=s(oe);h(Cr.$$.fragment,ai),Sg=l(ai),bs=n(ai,"P",{});var A$=s(bs);$s=n(A$,"A",{href:!0});var R1=s($s);Og=i(R1,"LogitsProcessor"),R1.forEach(r),qg=i(A$," that enforces that specified sequences will never be sampled."),A$.forEach(r),Bg=l(ai),Ts=n(ai,"DIV",{class:!0});var K1=s(Ts);h(Nr.$$.fragment,K1),K1.forEach(r),ai.forEach(r),qd=l(e),ne=n(e,"DIV",{class:!0});var ii=s(ne);h(Wr.$$.fragment,ii),Ig=l(ii),Lt=n(ii,"P",{});var Gl=s(Lt);ys=n(Gl,"A",{href:!0});var U1=s(ys);Ag=i(U1,"LogitsProcessor"),U1.forEach(r),Cg=i(Gl,` that enforces constrained generation and is useful for prefix-conditioned constrained
generation. See `),Vr=n(Gl,"A",{href:!0,rel:!0});var Y1=s(Vr);Ng=i(Y1,"Autoregressive Entity Retrieval"),Y1.forEach(r),Wg=i(Gl," for more information."),Gl.forEach(r),Vg=l(ii),ks=n(ii,"DIV",{class:!0});var X1=s(ks);h(Mr.$$.fragment,X1),X1.forEach(r),ii.forEach(r),Bd=l(e),se=n(e,"DIV",{class:!0});var ci=s(se);h(Gr.$$.fragment,ci),Mg=l(ci),Ae=n(ci,"P",{});var Dn=s(Ae);ws=n(Dn,"A",{href:!0});var J1=s(ws);Gg=i(J1,"LogitsProcessor"),J1.forEach(r),jg=i(Dn,` that enforces diverse beam search. Note that this logits processor is only effective for
`),Ls=n(Dn,"A",{href:!0});var Q1=s(Ls);Hg=i(Q1,"PreTrainedModel.group_beam_search()"),Q1.forEach(r),Rg=i(Dn,". See "),jr=n(Dn,"A",{href:!0,rel:!0});var Z1=s(jr);Kg=i(Z1,`Diverse Beam Search: Decoding Diverse Solutions from Neural Sequence
Models`),Z1.forEach(r),Ug=i(Dn," for more details."),Dn.forEach(r),Yg=l(ci),xs=n(ci,"DIV",{class:!0});var ey=s(xs);h(Hr.$$.fragment,ey),ey.forEach(r),ci.forEach(r),Id=l(e),ae=n(e,"DIV",{class:!0});var li=s(ae);h(Rr.$$.fragment,li),Xg=l(li),Es=n(li,"P",{});var C$=s(Es);Ps=n(C$,"A",{href:!0});var ty=s(Ps);Jg=i(ty,"LogitsProcessor"),ty.forEach(r),Qg=i(C$," that enforces the specified token as the first generated token."),C$.forEach(r),Zg=l(li),Fs=n(li,"DIV",{class:!0});var ry=s(Fs);h(Kr.$$.fragment,ry),ry.forEach(r),li.forEach(r),Ad=l(e),ie=n(e,"DIV",{class:!0});var di=s(ie);h(Ur.$$.fragment,di),eu=l(di),xt=n(di,"P",{});var jl=s(xt);Ds=n(jl,"A",{href:!0});var oy=s(Ds);tu=i(oy,"LogitsProcessor"),oy.forEach(r),ru=i(jl," that enforces the specified token as the last generated token when "),Mc=n(jl,"CODE",{});var ny=s(Mc);ou=i(ny,"max_length"),ny.forEach(r),nu=i(jl," is reached."),jl.forEach(r),su=l(di),zs=n(di,"DIV",{class:!0});var sy=s(zs);h(Yr.$$.fragment,sy),sy.forEach(r),di.forEach(r),Cd=l(e),ce=n(e,"DIV",{class:!0});var pi=s(ce);h(Xr.$$.fragment,pi),au=l(pi),M=n(pi,"P",{});var pt=s(M);Ss=n(pt,"A",{href:!0});var ay=s(Ss);iu=i(ay,"LogitsProcessor"),ay.forEach(r),cu=i(pt," that removes all "),Gc=n(pt,"CODE",{});var iy=s(Gc);lu=i(iy,"nan"),iy.forEach(r),du=i(pt," and "),jc=n(pt,"CODE",{});var cy=s(jc);pu=i(cy,"inf"),cy.forEach(r),mu=i(pt,` values to avoid the generation method to fail. Note that using
the logits processor should only be used if necessary since it can slow down the generation method. `),Hc=n(pt,"CODE",{});var ly=s(Hc);fu=i(ly,"max_length"),ly.forEach(r),hu=i(pt,` is
reached.`),pt.forEach(r),gu=l(pi),Os=n(pi,"DIV",{class:!0});var dy=s(Os);h(Jr.$$.fragment,dy),dy.forEach(r),pi.forEach(r),Nd=l(e),le=n(e,"DIV",{class:!0});var mi=s(le);h(Qr.$$.fragment,mi),uu=l(mi),Rc=n(mi,"P",{});var py=s(Rc);_u=i(py,"Abstract base class for all logit processors that can be applied during generation."),py.forEach(r),vu=l(mi),Et=n(mi,"DIV",{class:!0});var jp=s(Et);h(Zr.$$.fragment,jp),bu=l(jp),Kc=n(jp,"P",{});var my=s(Kc);$u=i(my,"TF method for processing logits."),my.forEach(r),jp.forEach(r),mi.forEach(r),Wd=l(e),de=n(e,"DIV",{class:!0});var fi=s(de);h(eo.$$.fragment,fi),Tu=l(fi),B=n(fi,"P",{});var Me=s(B);yu=i(Me,"This class can be used to create a list of "),qs=n(Me,"A",{href:!0});var fy=s(qs);ku=i(fy,"TFLogitsProcessor"),fy.forEach(r),wu=i(Me," to subsequently process a "),Uc=n(Me,"CODE",{});var hy=s(Uc);Lu=i(hy,"scores"),hy.forEach(r),xu=i(Me,` input tensor.
This class inherits from list and adds a specific `),Yc=n(Me,"EM",{});var gy=s(Yc);Xc=n(gy,"STRONG",{});var uy=s(Xc);Eu=i(uy,"call"),uy.forEach(r),gy.forEach(r),Pu=i(Me," method to apply each "),Bs=n(Me,"A",{href:!0});var _y=s(Bs);Fu=i(_y,"TFLogitsProcessor"),_y.forEach(r),Du=i(Me,` to the
inputs.`),Me.forEach(r),zu=l(fi),Is=n(fi,"DIV",{class:!0});var vy=s(Is);h(to.$$.fragment,vy),vy.forEach(r),fi.forEach(r),Vd=l(e),pe=n(e,"DIV",{class:!0});var hi=s(pe);h(ro.$$.fragment,hi),Su=l(hi),Jc=n(hi,"P",{});var by=s(Jc);Ou=i(by,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),by.forEach(r),qu=l(hi),Pt=n(hi,"DIV",{class:!0});var Hp=s(Pt);h(oo.$$.fragment,Hp),Bu=l(Hp),Qc=n(Hp,"P",{});var $y=s(Qc);Iu=i($y,"TF method for warping logits."),$y.forEach(r),Hp.forEach(r),hi.forEach(r),Md=l(e),me=n(e,"DIV",{class:!0});var gi=s(me);h(no.$$.fragment,gi),Au=l(gi),As=n(gi,"P",{});var N$=s(As);Cs=n(N$,"A",{href:!0});var Ty=s(Cs);Cu=i(Ty,"TFLogitsWarper"),Ty.forEach(r),Nu=i(N$," for temperature (exponential scaling output probability distribution)."),N$.forEach(r),Wu=l(gi),Ns=n(gi,"DIV",{class:!0});var yy=s(Ns);h(so.$$.fragment,yy),yy.forEach(r),gi.forEach(r),Gd=l(e),fe=n(e,"DIV",{class:!0});var ui=s(fe);h(ao.$$.fragment,ui),Vu=l(ui),Ws=n(ui,"P",{});var W$=s(Ws);Vs=n(W$,"A",{href:!0});var ky=s(Vs);Mu=i(ky,"TFLogitsWarper"),ky.forEach(r),Gu=i(W$," that performs top-p, i.e. restricting to top tokens summing to <= prob_cut_off."),W$.forEach(r),ju=l(ui),Ms=n(ui,"DIV",{class:!0});var wy=s(Ms);h(io.$$.fragment,wy),wy.forEach(r),ui.forEach(r),jd=l(e),he=n(e,"DIV",{class:!0});var _i=s(he);h(co.$$.fragment,_i),Hu=l(_i),Gs=n(_i,"P",{});var V$=s(Gs);js=n(V$,"A",{href:!0});var Ly=s(js);Ru=i(Ly,"TFLogitsWarper"),Ly.forEach(r),Ku=i(V$," that performs top-k, i.e. restricting to the k highest probability elements."),V$.forEach(r),Uu=l(_i),Hs=n(_i,"DIV",{class:!0});var xy=s(Hs);h(lo.$$.fragment,xy),xy.forEach(r),_i.forEach(r),Hd=l(e),ge=n(e,"DIV",{class:!0});var vi=s(ge);h(po.$$.fragment,vi),Yu=l(vi),Rs=n(vi,"P",{});var M$=s(Rs);Ks=n(M$,"A",{href:!0});var Ey=s(Ks);Xu=i(Ey,"TFLogitsProcessor"),Ey.forEach(r),Ju=i(M$," enforcing a min-length by setting EOS probability to 0."),M$.forEach(r),Qu=l(vi),Us=n(vi,"DIV",{class:!0});var Py=s(Us);h(mo.$$.fragment,Py),Py.forEach(r),vi.forEach(r),Rd=l(e),ue=n(e,"DIV",{class:!0});var bi=s(ue);h(fo.$$.fragment,bi),Zu=l(bi),Ys=n(bi,"P",{});var G$=s(Ys);Xs=n(G$,"A",{href:!0});var Fy=s(Xs);e_=i(Fy,"TFLogitsProcessor"),Fy.forEach(r),t_=i(G$," that enforces that specified sequences will never be sampled."),G$.forEach(r),r_=l(bi),Js=n(bi,"DIV",{class:!0});var Dy=s(Js);h(ho.$$.fragment,Dy),Dy.forEach(r),bi.forEach(r),Kd=l(e),_e=n(e,"DIV",{class:!0});var $i=s(_e);h(go.$$.fragment,$i),o_=l($i),Ft=n($i,"P",{});var Hl=s(Ft);Qs=n(Hl,"A",{href:!0});var zy=s(Qs);n_=i(zy,"TFLogitsProcessor"),zy.forEach(r),s_=i(Hl,` that enforces no repetition of n-grams. See
`),uo=n(Hl,"A",{href:!0,rel:!0});var Sy=s(uo);a_=i(Sy,"Fairseq"),Sy.forEach(r),i_=i(Hl,"."),Hl.forEach(r),c_=l($i),Zs=n($i,"DIV",{class:!0});var Oy=s(Zs);h(_o.$$.fragment,Oy),Oy.forEach(r),$i.forEach(r),Ud=l(e),ve=n(e,"DIV",{class:!0});var Ti=s(ve);h(vo.$$.fragment,Ti),l_=l(Ti),ea=n(Ti,"P",{});var j$=s(ea);ta=n(j$,"A",{href:!0});var qy=s(ta);d_=i(qy,"TFLogitsProcessor"),qy.forEach(r),p_=i(j$," enforcing an exponential penalty on repeated sequences."),j$.forEach(r),m_=l(Ti),ra=n(Ti,"DIV",{class:!0});var By=s(ra);h(bo.$$.fragment,By),By.forEach(r),Ti.forEach(r),Yd=l(e),be=n(e,"DIV",{class:!0});var yi=s(be);h($o.$$.fragment,yi),f_=l(yi),Zc=n(yi,"P",{});var Iy=s(Zc);h_=i(Iy,"Abstract base class for all logit processors that can be applied during generation."),Iy.forEach(r),g_=l(yi),Dt=n(yi,"DIV",{class:!0});var Rp=s(Dt);h(To.$$.fragment,Rp),u_=l(Rp),el=n(Rp,"P",{});var Ay=s(el);__=i(Ay,"Flax method for processing logits."),Ay.forEach(r),Rp.forEach(r),yi.forEach(r),Xd=l(e),$e=n(e,"DIV",{class:!0});var ki=s($e);h(yo.$$.fragment,ki),v_=l(ki),L=n(ki,"P",{});var q=s(L);b_=i(q,"This class can be used to create a list of "),oa=n(q,"A",{href:!0});var Cy=s(oa);$_=i(Cy,"FlaxLogitsProcessor"),Cy.forEach(r),T_=i(q," or "),na=n(q,"A",{href:!0});var Ny=s(na);y_=i(Ny,"FlaxLogitsWarper"),Ny.forEach(r),k_=i(q,` to subsequently process
a `),tl=n(q,"CODE",{});var Wy=s(tl);w_=i(Wy,"scores"),Wy.forEach(r),L_=i(q," input tensor. This class inherits from list and adds a specific "),rl=n(q,"EM",{});var Vy=s(rl);ol=n(Vy,"STRONG",{});var My=s(ol);x_=i(My,"call"),My.forEach(r),Vy.forEach(r),E_=i(q,` method to apply each
`),sa=n(q,"A",{href:!0});var Gy=s(sa);P_=i(Gy,"FlaxLogitsProcessor"),Gy.forEach(r),F_=i(q," or "),aa=n(q,"A",{href:!0});var jy=s(aa);D_=i(jy,"FlaxLogitsWarper"),jy.forEach(r),z_=i(q," to the inputs."),q.forEach(r),S_=l(ki),ia=n(ki,"DIV",{class:!0});var Hy=s(ia);h(ko.$$.fragment,Hy),Hy.forEach(r),ki.forEach(r),Jd=l(e),Te=n(e,"DIV",{class:!0});var wi=s(Te);h(wo.$$.fragment,wi),O_=l(wi),nl=n(wi,"P",{});var Ry=s(nl);q_=i(Ry,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),Ry.forEach(r),B_=l(wi),zt=n(wi,"DIV",{class:!0});var Kp=s(zt);h(Lo.$$.fragment,Kp),I_=l(Kp),sl=n(Kp,"P",{});var Ky=s(sl);A_=i(Ky,"Flax method for warping logits."),Ky.forEach(r),Kp.forEach(r),wi.forEach(r),Qd=l(e),ye=n(e,"DIV",{class:!0});var Li=s(ye);h(xo.$$.fragment,Li),C_=l(Li),ca=n(Li,"P",{});var H$=s(ca);la=n(H$,"A",{href:!0});var Uy=s(la);N_=i(Uy,"FlaxLogitsWarper"),Uy.forEach(r),W_=i(H$," for temperature (exponential scaling output probability distribution)."),H$.forEach(r),V_=l(Li),da=n(Li,"DIV",{class:!0});var Yy=s(da);h(Eo.$$.fragment,Yy),Yy.forEach(r),Li.forEach(r),Zd=l(e),ke=n(e,"DIV",{class:!0});var xi=s(ke);h(Po.$$.fragment,xi),M_=l(xi),pa=n(xi,"P",{});var R$=s(pa);ma=n(R$,"A",{href:!0});var Xy=s(ma);G_=i(Xy,"FlaxLogitsWarper"),Xy.forEach(r),j_=i(R$," that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),R$.forEach(r),H_=l(xi),fa=n(xi,"DIV",{class:!0});var Jy=s(fa);h(Fo.$$.fragment,Jy),Jy.forEach(r),xi.forEach(r),ep=l(e),we=n(e,"DIV",{class:!0});var Ei=s(we);h(Do.$$.fragment,Ei),R_=l(Ei),ha=n(Ei,"P",{});var K$=s(ha);ga=n(K$,"A",{href:!0});var Qy=s(ga);K_=i(Qy,"FlaxLogitsWarper"),Qy.forEach(r),U_=i(K$," that performs top-k, i.e. restricting to the k highest probability elements."),K$.forEach(r),Y_=l(Ei),ua=n(Ei,"DIV",{class:!0});var Zy=s(ua);h(zo.$$.fragment,Zy),Zy.forEach(r),Ei.forEach(r),tp=l(e),Le=n(e,"DIV",{class:!0});var Pi=s(Le);h(So.$$.fragment,Pi),X_=l(Pi),_a=n(Pi,"P",{});var U$=s(_a);va=n(U$,"A",{href:!0});var e2=s(va);J_=i(e2,"FlaxLogitsProcessor"),e2.forEach(r),Q_=i(U$," that enforces the specified token as the first generated token."),U$.forEach(r),Z_=l(Pi),ba=n(Pi,"DIV",{class:!0});var t2=s(ba);h(Oo.$$.fragment,t2),t2.forEach(r),Pi.forEach(r),rp=l(e),xe=n(e,"DIV",{class:!0});var Fi=s(xe);h(qo.$$.fragment,Fi),ev=l(Fi),St=n(Fi,"P",{});var Rl=s(St);$a=n(Rl,"A",{href:!0});var r2=s($a);tv=i(r2,"FlaxLogitsProcessor"),r2.forEach(r),rv=i(Rl," that enforces the specified token as the last generated token when "),al=n(Rl,"CODE",{});var o2=s(al);ov=i(o2,"max_length"),o2.forEach(r),nv=i(Rl," is reached."),Rl.forEach(r),sv=l(Fi),Ta=n(Fi,"DIV",{class:!0});var n2=s(Ta);h(Bo.$$.fragment,n2),n2.forEach(r),Fi.forEach(r),op=l(e),Ee=n(e,"DIV",{class:!0});var Di=s(Ee);h(Io.$$.fragment,Di),av=l(Di),ya=n(Di,"P",{});var Y$=s(ya);ka=n(Y$,"A",{href:!0});var s2=s(ka);iv=i(s2,"FlaxLogitsProcessor"),s2.forEach(r),cv=i(Y$," enforcing a min-length by setting EOS probability to 0."),Y$.forEach(r),lv=l(Di),wa=n(Di,"DIV",{class:!0});var a2=s(wa);h(Ao.$$.fragment,a2),a2.forEach(r),Di.forEach(r),np=l(e),ot=n(e,"H2",{class:!0});var Up=s(ot);Ot=n(Up,"A",{id:!0,class:!0,href:!0});var i2=s(Ot);il=n(i2,"SPAN",{});var c2=s(il);h(Co.$$.fragment,c2),c2.forEach(r),i2.forEach(r),dv=l(Up),cl=n(Up,"SPAN",{});var l2=s(cl);pv=i(l2,"StoppingCriteria"),l2.forEach(r),Up.forEach(r),sp=l(e),qt=n(e,"P",{});var Yp=s(qt);mv=i(Yp,"A "),La=n(Yp,"A",{href:!0});var d2=s(La);fv=i(d2,"StoppingCriteria"),d2.forEach(r),hv=i(Yp," can be used to change when to stop generation (other than EOS token)."),Yp.forEach(r),ap=l(e),Pe=n(e,"DIV",{class:!0});var zi=s(Pe);h(No.$$.fragment,zi),gv=l(zi),ll=n(zi,"P",{});var p2=s(ll);uv=i(p2,"Abstract base class for all stopping criteria that can be applied during generation."),p2.forEach(r),_v=l(zi),xa=n(zi,"DIV",{class:!0});var m2=s(xa);h(Wo.$$.fragment,m2),m2.forEach(r),zi.forEach(r),ip=l(e),nt=n(e,"DIV",{class:!0});var Xp=s(nt);h(Vo.$$.fragment,Xp),vv=l(Xp),Ea=n(Xp,"DIV",{class:!0});var f2=s(Ea);h(Mo.$$.fragment,f2),f2.forEach(r),Xp.forEach(r),cp=l(e),Fe=n(e,"DIV",{class:!0});var Si=s(Fe);h(Go.$$.fragment,Si),bv=l(Si),jo=n(Si,"P",{});var Jp=s(jo);$v=i(Jp,"This class can be used to stop generation whenever the full generated number of tokens exceeds "),dl=n(Jp,"CODE",{});var h2=s(dl);Tv=i(h2,"max_length"),h2.forEach(r),yv=i(Jp,`. Keep
in mind for decoder-only type of transformers, this will include the initial prompted tokens.`),Jp.forEach(r),kv=l(Si),Pa=n(Si,"DIV",{class:!0});var g2=s(Pa);h(Ho.$$.fragment,g2),g2.forEach(r),Si.forEach(r),lp=l(e),De=n(e,"DIV",{class:!0});var Oi=s(De);h(Ro.$$.fragment,Oi),wv=l(Oi),Ko=n(Oi,"P",{});var Qp=s(Ko);Lv=i(Qp,`This class can be used to stop generation whenever the full generation exceeds some amount of time. By default, the
time will start being counted when you initialize this function. You can override this by passing an
`),pl=n(Qp,"CODE",{});var u2=s(pl);xv=i(u2,"initial_time"),u2.forEach(r),Ev=i(Qp,"."),Qp.forEach(r),Pv=l(Oi),Fa=n(Oi,"DIV",{class:!0});var _2=s(Fa);h(Uo.$$.fragment,_2),_2.forEach(r),Oi.forEach(r),dp=l(e),st=n(e,"H2",{class:!0});var Zp=s(st);Bt=n(Zp,"A",{id:!0,class:!0,href:!0});var v2=s(Bt);ml=n(v2,"SPAN",{});var b2=s(ml);h(Yo.$$.fragment,b2),b2.forEach(r),v2.forEach(r),Fv=l(Zp),fl=n(Zp,"SPAN",{});var $2=s(fl);Dv=i($2,"Constraints"),$2.forEach(r),Zp.forEach(r),pp=l(e),It=n(e,"P",{});var em=s(It);zv=i(em,"A "),Da=n(em,"A",{href:!0});var T2=s(Da);Sv=i(T2,"Constraint"),T2.forEach(r),Ov=i(em," can be used to force the generation to include specific tokens or sequences in the output."),em.forEach(r),mp=l(e),$=n(e,"DIV",{class:!0});var T=s($);h(Xo.$$.fragment,T),qv=l(T),hl=n(T,"P",{});var y2=s(hl);Bv=i(y2,`Abstract base class for all constraints that can be applied during generation.
It must define how the constraint can be satisfied.`),y2.forEach(r),Iv=l(T),gl=n(T,"P",{});var k2=s(gl);Av=i(k2,"All classes that inherit Constraint must follow the requirement that"),k2.forEach(r),Cv=l(T),h(Jo.$$.fragment,T),Nv=l(T),ul=n(T,"P",{});var w2=s(ul);Wv=i(w2,"will always terminate (halt)."),w2.forEach(r),Vv=l(T),At=n(T,"DIV",{class:!0});var tm=s(At);h(Qo.$$.fragment,tm),Mv=l(tm),_l=n(tm,"P",{});var L2=s(_l);Gv=i(L2,"When called, returns the token that would take this constraint one step closer to being fulfilled."),L2.forEach(r),tm.forEach(r),jv=l(T),Ct=n(T,"DIV",{class:!0});var rm=s(Ct);h(Zo.$$.fragment,rm),Hv=l(rm),vl=n(rm,"P",{});var x2=s(vl);Rv=i(x2,"Creates a new instance of this constraint."),x2.forEach(r),rm.forEach(r),Kv=l(T),Nt=n(T,"DIV",{class:!0});var om=s(Nt);h(en.$$.fragment,om),Uv=l(om),bl=n(om,"P",{});var E2=s(bl);Yv=i(E2,"Reads in a token and returns whether it creates progress."),E2.forEach(r),om.forEach(r),Xv=l(T),Wt=n(T,"DIV",{class:!0});var nm=s(Wt);h(tn.$$.fragment,nm),Jv=l(nm),rn=n(nm,"P",{});var sm=s(rn);Qv=i(sm,"Returns the number of remaining steps of "),$l=n(sm,"CODE",{});var P2=s($l);Zv=i(P2,"advance()"),P2.forEach(r),eb=i(sm," in order to complete this constraint."),sm.forEach(r),nm.forEach(r),tb=l(T),Vt=n(T,"DIV",{class:!0});var am=s(Vt);h(on.$$.fragment,am),rb=l(am),Tl=n(am,"P",{});var F2=s(Tl);ob=i(F2,`Resets the state of this constraint to its initialization. We would call this in cases where the fulfillment of
a constraint is abrupted by an unwanted token.`),F2.forEach(r),am.forEach(r),nb=l(T),Mt=n(T,"DIV",{class:!0});var im=s(Mt);h(nn.$$.fragment,im),sb=l(im),yl=n(im,"P",{});var D2=s(yl);ab=i(D2,"Tests whether this constraint has been properly defined."),D2.forEach(r),im.forEach(r),ib=l(T),Ce=n(T,"DIV",{class:!0});var qi=s(Ce);h(sn.$$.fragment,qi),cb=l(qi),an=n(qi,"P",{});var cm=s(an);lb=i(cm,`Reads in a token and returns booleans that indicate the progress made by it. This function will update the
state of this object unlikes `),kl=n(cm,"CODE",{});var z2=s(kl);db=i(z2,"does_advance(self, token_id: int)"),z2.forEach(r),pb=i(cm,"."),cm.forEach(r),mb=l(qi),wl=n(qi,"P",{});var S2=s(wl);fb=i(S2,`This isn\u2019t to test whether a certain token will advance the progress; it\u2019s to update its state as if it has
been generated. This becomes important if token_id != desired token (refer to else statement in
PhrasalConstraint)`),S2.forEach(r),qi.forEach(r),T.forEach(r),fp=l(e),at=n(e,"DIV",{class:!0});var lm=s(at);h(cn.$$.fragment,lm),hb=l(lm),za=n(lm,"P",{});var X$=s(za);Sa=n(X$,"A",{href:!0});var O2=s(Sa);gb=i(O2,"Constraint"),O2.forEach(r),ub=i(X$," enforcing that an ordered sequence of tokens is included in the output."),X$.forEach(r),lm.forEach(r),hp=l(e),I=n(e,"DIV",{class:!0});var Ut=s(I);h(ln.$$.fragment,Ut),_b=l(Ut),Ll=n(Ut,"P",{});var q2=s(Ll);vb=i(q2,"A class for beam scorers to track its progress through a list of constraints."),q2.forEach(r),bb=l(Ut),E=n(Ut,"DIV",{class:!0});var G=s(E);h(dn.$$.fragment,G),$b=l(G),xl=n(G,"P",{});var B2=s(xl);Tb=i(B2,`The list of tokens to generate such that we can make progress.
By \u201Clist\u201D we don\u2019t mean the list of token that will fully fulfill a constraint.`),B2.forEach(r),yb=l(G),it=n(G,"P",{});var Bi=s(it);kb=i(Bi,"Given constraints "),El=n(Bi,"CODE",{});var I2=s(El);wb=i(I2,"c_i = {t_ij | j == # of tokens}"),I2.forEach(r),Lb=i(Bi,`, If we\u2019re not in the middle of progressing through a
specific constraint `),Pl=n(Bi,"CODE",{});var A2=s(Pl);xb=i(A2,"c_i"),A2.forEach(r),Eb=i(Bi,", we return:"),Bi.forEach(r),Pb=l(G),Fl=n(G,"P",{});var C2=s(Fl);Dl=n(C2,"CODE",{});var N2=s(Dl);Fb=i(N2,"[t_k1 for k in indices of unfulfilled constraints]"),N2.forEach(r),C2.forEach(r),Db=l(G),ze=n(G,"P",{});var Yt=s(ze);zb=i(Yt,`If we are in the middle of a constraint, then we return:
`),zl=n(Yt,"CODE",{});var W2=s(zl);Sb=i(W2,"[t_ij]"),W2.forEach(r),Ob=i(Yt,", where "),Sl=n(Yt,"CODE",{});var V2=s(Sl);qb=i(V2,"i"),V2.forEach(r),Bb=i(Yt," is the index of the inprogress constraint, "),Ol=n(Yt,"CODE",{});var M2=s(Ol);Ib=i(M2,"j"),M2.forEach(r),Ab=i(Yt," is the next step for the constraint."),Yt.forEach(r),Cb=l(G),ql=n(G,"P",{});var G2=s(ql);Nb=i(G2,`Though we don\u2019t care which constraint is fulfilled first, if we are in the progress of fulfilling a constraint,
that\u2019s the only one we\u2019ll return.`),G2.forEach(r),G.forEach(r),Wb=l(Ut),Gt=n(Ut,"DIV",{class:!0});var dm=s(Gt);h(pn.$$.fragment,dm),Vb=l(dm),Bl=n(dm,"P",{});var j2=s(Bl);Mb=i(j2,"token_ids: the tokens generated thus far to reset the state of the progress through constraints."),j2.forEach(r),dm.forEach(r),Ut.forEach(r),gp=l(e),ct=n(e,"H2",{class:!0});var pm=s(ct);jt=n(pm,"A",{id:!0,class:!0,href:!0});var H2=s(jt);Il=n(H2,"SPAN",{});var R2=s(Il);h(mn.$$.fragment,R2),R2.forEach(r),H2.forEach(r),Gb=l(pm),Al=n(pm,"SPAN",{});var K2=s(Al);jb=i(K2,"BeamSearch"),K2.forEach(r),pm.forEach(r),up=l(e),A=n(e,"DIV",{class:!0});var Xt=s(A);h(fn.$$.fragment,Xt),Hb=l(Xt),lt=n(Xt,"P",{});var Ii=s(lt);Rb=i(Ii,"Abstract base class for all beam scorers that are used for "),Oa=n(Ii,"A",{href:!0});var U2=s(Oa);Kb=i(U2,"beam_search()"),U2.forEach(r),Ub=i(Ii,` and
`),qa=n(Ii,"A",{href:!0});var Y2=s(qa);Yb=i(Y2,"beam_sample()"),Y2.forEach(r),Xb=i(Ii,"."),Ii.forEach(r),Jb=l(Xt),Ba=n(Xt,"DIV",{class:!0});var X2=s(Ba);h(hn.$$.fragment,X2),X2.forEach(r),Qb=l(Xt),Ia=n(Xt,"DIV",{class:!0});var J2=s(Ia);h(gn.$$.fragment,J2),J2.forEach(r),Xt.forEach(r),_p=l(e),x=n(e,"DIV",{class:!0});var j=s(x);h(un.$$.fragment,j),Zb=l(j),Aa=n(j,"P",{});var J$=s(Aa);Ca=n(J$,"A",{href:!0});var Q2=s(Ca);e$=i(Q2,"BeamScorer"),Q2.forEach(r),t$=i(J$," implementing standard beam search decoding."),J$.forEach(r),r$=l(j),_n=n(j,"P",{});var mm=s(_n);o$=i(mm,"Adapted in part from "),vn=n(mm,"A",{href:!0,rel:!0});var Z2=s(vn);n$=i(Z2,`Facebook\u2019s XLM beam search
code`),Z2.forEach(r),s$=i(mm,"."),mm.forEach(r),a$=l(j),Na=n(j,"P",{});var Q$=s(Na);i$=i(Q$,"Reference for the diverse beam search algorithm and implementation "),bn=n(Q$,"A",{href:!0,rel:!0});var ek=s(bn);c$=i(ek,`Ashwin Kalyan\u2019s DBS
implementation`),ek.forEach(r),Q$.forEach(r),l$=l(j),Wa=n(j,"DIV",{class:!0});var tk=s(Wa);h($n.$$.fragment,tk),tk.forEach(r),d$=l(j),Va=n(j,"DIV",{class:!0});var rk=s(Va);h(Tn.$$.fragment,rk),rk.forEach(r),j.forEach(r),vp=l(e),C=n(e,"DIV",{class:!0});var Jt=s(C);h(yn.$$.fragment,Jt),p$=l(Jt),Ma=n(Jt,"P",{});var Z$=s(Ma);Ga=n(Z$,"A",{href:!0});var ok=s(Ga);m$=i(ok,"BeamScorer"),ok.forEach(r),f$=i(Z$," implementing constrained beam search decoding."),Z$.forEach(r),h$=l(Jt),ja=n(Jt,"DIV",{class:!0});var nk=s(ja);h(kn.$$.fragment,nk),nk.forEach(r),g$=l(Jt),Ha=n(Jt,"DIV",{class:!0});var sk=s(Ha);h(wn.$$.fragment,sk),sk.forEach(r),Jt.forEach(r),bp=l(e),dt=n(e,"H2",{class:!0});var fm=s(dt);Ht=n(fm,"A",{id:!0,class:!0,href:!0});var ak=s(Ht);Cl=n(ak,"SPAN",{});var ik=s(Cl);h(Ln.$$.fragment,ik),ik.forEach(r),ak.forEach(r),u$=l(fm),Nl=n(fm,"SPAN",{});var ck=s(Nl);_$=i(ck,"Utilities"),ck.forEach(r),fm.forEach(r),$p=l(e),Se=n(e,"DIV",{class:!0});var Ai=s(Se);h(xn.$$.fragment,Ai),v$=l(Ai),Wl=n(Ai,"P",{});var lk=s(Wl);b$=i(lk,"Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),lk.forEach(r),$$=l(Ai),Ra=n(Ai,"P",{});var eT=s(Ra);T$=i(eT,"From: "),En=n(eT,"A",{href:!0,rel:!0});var dk=s(En);y$=i(dk,"https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),dk.forEach(r),eT.forEach(r),Ai.forEach(r),Tp=l(e),Oe=n(e,"DIV",{class:!0});var Ci=s(Oe);h(Pn.$$.fragment,Ci),k$=l(Ci),Vl=n(Ci,"P",{});var pk=s(Vl);w$=i(pk,"Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),pk.forEach(r),L$=l(Ci),Ka=n(Ci,"P",{});var tT=s(Ka);x$=i(tT,"From: "),Fn=n(tT,"A",{href:!0,rel:!0});var mk=s(Fn);E$=i(mk,"https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),mk.forEach(r),tT.forEach(r),Ci.forEach(r),this.h()},h(){d(Be,"name","hf:doc:metadata"),d(Be,"content",JSON.stringify(bk)),d(H,"id","utilities-for-generation"),d(H,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(H,"href","#utilities-for-generation"),d(N,"class","relative group"),d(Sn,"href","/docs/transformers/master/en/main_classes/model#transformers.generation_utils.GenerationMixin.generate"),d(On,"href","/docs/transformers/master/en/main_classes/model#transformers.generation_utils.GenerationMixin.greedy_search"),d(qn,"href","/docs/transformers/master/en/main_classes/model#transformers.generation_utils.GenerationMixin.sample"),d(Bn,"href","/docs/transformers/master/en/main_classes/model#transformers.generation_utils.GenerationMixin.beam_search"),d(In,"href","/docs/transformers/master/en/main_classes/model#transformers.generation_utils.GenerationMixin.beam_sample"),d(An,"href","/docs/transformers/master/en/main_classes/model#transformers.generation_utils.GenerationMixin.group_beam_search"),d(Cn,"href","/docs/transformers/master/en/main_classes/model#transformers.generation_utils.GenerationMixin.constrained_beam_search"),d(mt,"id","generate-outputs"),d(mt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mt,"href","#generate-outputs"),d(Ge,"class","relative group"),d(Wn,"href","/docs/transformers/master/en/main_classes/model#transformers.generation_utils.GenerationMixin.generate"),d(Vn,"href","/docs/transformers/master/en/main_classes/output#transformers.file_utils.ModelOutput"),d(Mn,"href","/docs/transformers/master/en/main_classes/model#transformers.generation_utils.GenerationMixin.generate"),d(jn,"href","/docs/transformers/master/en/internal/generation_utils#transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(ht,"id","transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(ht,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ht,"href","#transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(je,"class","relative group"),d(He,"class","docstring"),d(Re,"class","docstring"),d(gt,"class","docstring"),d(R,"class","docstring"),d(ut,"id","transformers.generation_utils.SampleDecoderOnlyOutput"),d(ut,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ut,"href","#transformers.generation_utils.SampleDecoderOnlyOutput"),d(Ke,"class","relative group"),d(Ue,"class","docstring"),d(Ye,"class","docstring"),d(_t,"class","docstring"),d(K,"class","docstring"),d(vt,"id","transformers.generation_utils.BeamSearchDecoderOnlyOutput"),d(vt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vt,"href","#transformers.generation_utils.BeamSearchDecoderOnlyOutput"),d(Xe,"class","relative group"),d(Je,"class","docstring"),d(Qe,"class","docstring"),d(bt,"id","transformers.generation_utils.BeamSampleDecoderOnlyOutput"),d(bt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bt,"href","#transformers.generation_utils.BeamSampleDecoderOnlyOutput"),d(Ze,"class","relative group"),d(et,"class","docstring"),d(tt,"class","docstring"),d($t,"id","transformers.LogitsProcessor"),d($t,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($t,"href","#transformers.LogitsProcessor"),d(rt,"class","relative group"),d(Xn,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsProcessor"),d(yt,"class","docstring"),d(U,"class","docstring"),d(Jn,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsProcessor"),d(Qn,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsWarper"),d(Zn,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsProcessor"),d(es,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsWarper"),d(ts,"class","docstring"),d(Y,"class","docstring"),d(kt,"class","docstring"),d(X,"class","docstring"),d(os,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsProcessor"),d(ns,"class","docstring"),d(J,"class","docstring"),d(as,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsWarper"),d(is,"class","docstring"),d(Q,"class","docstring"),d(ls,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsProcessor"),d(ds,"class","docstring"),d(Z,"class","docstring"),d(ms,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsWarper"),d(fs,"class","docstring"),d(ee,"class","docstring"),d(gs,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsWarper"),d(us,"class","docstring"),d(te,"class","docstring"),d(_s,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsProcessor"),d(Ir,"href","https://github.com/pytorch/fairseq/blob/a07cb6f40480928c9e0548b737aadd36ee66ac76/fairseq/sequence_generator.py#L345"),d(Ir,"rel","nofollow"),d(vs,"class","docstring"),d(re,"class","docstring"),d($s,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsProcessor"),d(Ts,"class","docstring"),d(oe,"class","docstring"),d(ys,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsProcessor"),d(Vr,"href","https://arxiv.org/abs/2010.00904"),d(Vr,"rel","nofollow"),d(ks,"class","docstring"),d(ne,"class","docstring"),d(ws,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsProcessor"),d(Ls,"href","/docs/transformers/master/en/main_classes/model#transformers.generation_utils.GenerationMixin.group_beam_search"),d(jr,"href","https://arxiv.org/pdf/1610.02424.pdf"),d(jr,"rel","nofollow"),d(xs,"class","docstring"),d(se,"class","docstring"),d(Ps,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsProcessor"),d(Fs,"class","docstring"),d(ae,"class","docstring"),d(Ds,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsProcessor"),d(zs,"class","docstring"),d(ie,"class","docstring"),d(Ss,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsProcessor"),d(Os,"class","docstring"),d(ce,"class","docstring"),d(Et,"class","docstring"),d(le,"class","docstring"),d(qs,"href","/docs/transformers/master/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(Bs,"href","/docs/transformers/master/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(Is,"class","docstring"),d(de,"class","docstring"),d(Pt,"class","docstring"),d(pe,"class","docstring"),d(Cs,"href","/docs/transformers/master/en/internal/generation_utils#transformers.TFLogitsWarper"),d(Ns,"class","docstring"),d(me,"class","docstring"),d(Vs,"href","/docs/transformers/master/en/internal/generation_utils#transformers.TFLogitsWarper"),d(Ms,"class","docstring"),d(fe,"class","docstring"),d(js,"href","/docs/transformers/master/en/internal/generation_utils#transformers.TFLogitsWarper"),d(Hs,"class","docstring"),d(he,"class","docstring"),d(Ks,"href","/docs/transformers/master/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(Us,"class","docstring"),d(ge,"class","docstring"),d(Xs,"href","/docs/transformers/master/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(Js,"class","docstring"),d(ue,"class","docstring"),d(Qs,"href","/docs/transformers/master/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(uo,"href","https://github.com/pytorch/fairseq/blob/a07cb6f40480928c9e0548b737aadd36ee66ac76/fairseq/sequence_generator.py#L345"),d(uo,"rel","nofollow"),d(Zs,"class","docstring"),d(_e,"class","docstring"),d(ta,"href","/docs/transformers/master/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(ra,"class","docstring"),d(ve,"class","docstring"),d(Dt,"class","docstring"),d(be,"class","docstring"),d(oa,"href","/docs/transformers/master/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(na,"href","/docs/transformers/master/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(sa,"href","/docs/transformers/master/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(aa,"href","/docs/transformers/master/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(ia,"class","docstring"),d($e,"class","docstring"),d(zt,"class","docstring"),d(Te,"class","docstring"),d(la,"href","/docs/transformers/master/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(da,"class","docstring"),d(ye,"class","docstring"),d(ma,"href","/docs/transformers/master/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(fa,"class","docstring"),d(ke,"class","docstring"),d(ga,"href","/docs/transformers/master/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(ua,"class","docstring"),d(we,"class","docstring"),d(va,"href","/docs/transformers/master/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(ba,"class","docstring"),d(Le,"class","docstring"),d($a,"href","/docs/transformers/master/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(Ta,"class","docstring"),d(xe,"class","docstring"),d(ka,"href","/docs/transformers/master/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(wa,"class","docstring"),d(Ee,"class","docstring"),d(Ot,"id","transformers.StoppingCriteria"),d(Ot,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ot,"href","#transformers.StoppingCriteria"),d(ot,"class","relative group"),d(La,"href","/docs/transformers/master/en/internal/generation_utils#transformers.StoppingCriteria"),d(xa,"class","docstring"),d(Pe,"class","docstring"),d(Ea,"class","docstring"),d(nt,"class","docstring"),d(Pa,"class","docstring"),d(Fe,"class","docstring"),d(Fa,"class","docstring"),d(De,"class","docstring"),d(Bt,"id","transformers.Constraint"),d(Bt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Bt,"href","#transformers.Constraint"),d(st,"class","relative group"),d(Da,"href","/docs/transformers/master/en/internal/generation_utils#transformers.Constraint"),d(At,"class","docstring"),d(Ct,"class","docstring"),d(Nt,"class","docstring"),d(Wt,"class","docstring"),d(Vt,"class","docstring"),d(Mt,"class","docstring"),d(Ce,"class","docstring"),d($,"class","docstring"),d(Sa,"href","/docs/transformers/master/en/internal/generation_utils#transformers.Constraint"),d(at,"class","docstring"),d(E,"class","docstring"),d(Gt,"class","docstring"),d(I,"class","docstring"),d(jt,"id","transformers.BeamScorer"),d(jt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jt,"href","#transformers.BeamScorer"),d(ct,"class","relative group"),d(Oa,"href","/docs/transformers/master/en/main_classes/model#transformers.generation_utils.GenerationMixin.beam_search"),d(qa,"href","/docs/transformers/master/en/main_classes/model#transformers.generation_utils.GenerationMixin.beam_sample"),d(Ba,"class","docstring"),d(Ia,"class","docstring"),d(A,"class","docstring"),d(Ca,"href","/docs/transformers/master/en/internal/generation_utils#transformers.BeamScorer"),d(vn,"href","https://github.com/facebookresearch/XLM/blob/9e6f6814d17be4fe5b15f2e6c43eb2b2d76daeb4/src/model/transformer.py#L529"),d(vn,"rel","nofollow"),d(bn,"href","https://github.com/ashwinkalyan/dbs/blob/master/dbs/beam_utils.lua"),d(bn,"rel","nofollow"),d(Wa,"class","docstring"),d(Va,"class","docstring"),d(x,"class","docstring"),d(Ga,"href","/docs/transformers/master/en/internal/generation_utils#transformers.BeamScorer"),d(ja,"class","docstring"),d(Ha,"class","docstring"),d(C,"class","docstring"),d(Ht,"id","transformers.top_k_top_p_filtering"),d(Ht,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ht,"href","#transformers.top_k_top_p_filtering"),d(dt,"class","relative group"),d(En,"href","https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),d(En,"rel","nofollow"),d(Se,"class","docstring"),d(Fn,"href","https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),d(Fn,"rel","nofollow"),d(Oe,"class","docstring")},m(e,p){t(document.head,Be),m(e,zn,p),m(e,N,p),t(N,H),t(H,Ni),g(Qt,Ni,null),t(N,gm),t(N,Wi),t(Wi,um),m(e,Kl,p),m(e,y,p),t(y,_m),t(y,Sn),t(Sn,vm),t(y,bm),t(y,On),t(On,$m),t(y,Tm),t(y,qn),t(qn,ym),t(y,km),t(y,Bn),t(Bn,wm),t(y,Lm),t(y,In),t(In,xm),t(y,Em),t(y,An),t(An,Pm),t(y,Fm),t(y,Cn),t(Cn,Dm),t(y,zm),m(e,Ul,p),m(e,Nn,p),t(Nn,Sm),m(e,Yl,p),m(e,Ge,p),t(Ge,mt),t(mt,Vi),g(Zt,Vi,null),t(Ge,Om),t(Ge,Mi),t(Mi,qm),m(e,Xl,p),m(e,W,p),t(W,Bm),t(W,Wn),t(Wn,Im),t(W,Am),t(W,Vn),t(Vn,Cm),t(W,Nm),t(W,Mn),t(Mn,Wm),t(W,Vm),m(e,Jl,p),m(e,Gn,p),t(Gn,Mm),m(e,Ql,p),g(er,e,p),m(e,Zl,p),m(e,Ie,p),t(Ie,Gm),t(Ie,Gi),t(Gi,jm),t(Ie,Hm),t(Ie,jn),t(jn,Rm),t(Ie,Km),m(e,ed,p),m(e,V,p),t(V,Hn),t(Hn,ji),t(ji,Um),t(Hn,Ym),t(V,Xm),t(V,Rn),t(Rn,Hi),t(Hi,Jm),t(Rn,Qm),t(V,Zm),t(V,Kn),t(Kn,Ri),t(Ri,ef),t(Kn,tf),t(V,rf),t(V,Un),t(Un,Ki),t(Ki,of),t(Un,nf),m(e,td,p),m(e,k,p),t(k,sf),t(k,Ui),t(Ui,af),t(k,cf),t(k,Yi),t(Yi,lf),t(k,df),t(k,Xi),t(Xi,pf),t(k,mf),t(k,Ji),t(Ji,ff),t(k,hf),t(k,Qi),t(Qi,gf),t(k,uf),t(k,Zi),t(Zi,_f),t(k,vf),m(e,rd,p),m(e,F,p),t(F,bf),t(F,ec),t(ec,$f),t(F,Tf),t(F,tc),t(tc,yf),t(F,kf),t(F,rc),t(rc,wf),t(F,Lf),t(F,oc),t(oc,xf),t(F,Ef),m(e,od,p),m(e,D,p),t(D,Pf),t(D,nc),t(nc,Ff),t(D,Df),t(D,sc),t(sc,zf),t(D,Sf),t(D,ac),t(ac,Of),t(D,qf),t(D,ic),t(ic,Bf),t(D,If),m(e,nd,p),g(tr,e,p),m(e,sd,p),m(e,ft,p),t(ft,Af),t(ft,cc),t(cc,Cf),t(ft,Nf),m(e,ad,p),m(e,z,p),t(z,Wf),t(z,lc),t(lc,Vf),t(z,Mf),t(z,dc),t(dc,Gf),t(z,jf),t(z,pc),t(pc,Hf),t(z,Rf),t(z,mc),t(mc,Kf),t(z,Uf),m(e,id,p),m(e,Yn,p),t(Yn,Yf),m(e,cd,p),m(e,je,p),t(je,ht),t(ht,fc),g(rr,fc,null),t(je,Xf),t(je,hc),t(hc,Jf),m(e,ld,p),m(e,He,p),g(or,He,null),t(He,Qf),t(He,gc),t(gc,Zf),m(e,dd,p),m(e,Re,p),g(nr,Re,null),t(Re,eh),t(Re,uc),t(uc,th),m(e,pd,p),m(e,R,p),g(sr,R,null),t(R,rh),t(R,_c),t(_c,oh),t(R,nh),t(R,gt),g(ar,gt,null),t(gt,sh),t(gt,vc),t(vc,ah),m(e,md,p),m(e,Ke,p),t(Ke,ut),t(ut,bc),g(ir,bc,null),t(Ke,ih),t(Ke,$c),t($c,ch),m(e,fd,p),m(e,Ue,p),g(cr,Ue,null),t(Ue,lh),t(Ue,Tc),t(Tc,dh),m(e,hd,p),m(e,Ye,p),g(lr,Ye,null),t(Ye,ph),t(Ye,yc),t(yc,mh),m(e,gd,p),m(e,K,p),g(dr,K,null),t(K,fh),t(K,kc),t(kc,hh),t(K,gh),t(K,_t),g(pr,_t,null),t(_t,uh),t(_t,wc),t(wc,_h),m(e,ud,p),m(e,Xe,p),t(Xe,vt),t(vt,Lc),g(mr,Lc,null),t(Xe,vh),t(Xe,xc),t(xc,bh),m(e,_d,p),m(e,Je,p),g(fr,Je,null),t(Je,$h),t(Je,Ec),t(Ec,Th),m(e,vd,p),m(e,Qe,p),g(hr,Qe,null),t(Qe,yh),t(Qe,Pc),t(Pc,kh),m(e,bd,p),m(e,Ze,p),t(Ze,bt),t(bt,Fc),g(gr,Fc,null),t(Ze,wh),t(Ze,Dc),t(Dc,Lh),m(e,$d,p),m(e,et,p),g(ur,et,null),t(et,xh),t(et,zc),t(zc,Eh),m(e,Td,p),m(e,tt,p),g(_r,tt,null),t(tt,Ph),t(tt,Sc),t(Sc,Fh),m(e,yd,p),m(e,rt,p),t(rt,$t),t($t,Oc),g(vr,Oc,null),t(rt,Dh),t(rt,qc),t(qc,zh),m(e,kd,p),m(e,Tt,p),t(Tt,Sh),t(Tt,Xn),t(Xn,Oh),t(Tt,qh),m(e,wd,p),m(e,U,p),g(br,U,null),t(U,Bh),t(U,Bc),t(Bc,Ih),t(U,Ah),t(U,yt),g($r,yt,null),t(yt,Ch),t(yt,Ic),t(Ic,Nh),m(e,Ld,p),m(e,Y,p),g(Tr,Y,null),t(Y,Wh),t(Y,w),t(w,Vh),t(w,Jn),t(Jn,Mh),t(w,Gh),t(w,Qn),t(Qn,jh),t(w,Hh),t(w,Ac),t(Ac,Rh),t(w,Kh),t(w,Cc),t(Cc,Nc),t(Nc,Uh),t(w,Yh),t(w,Zn),t(Zn,Xh),t(w,Jh),t(w,es),t(es,Qh),t(w,Zh),t(Y,eg),t(Y,ts),g(yr,ts,null),m(e,xd,p),m(e,X,p),g(kr,X,null),t(X,tg),t(X,Wc),t(Wc,rg),t(X,og),t(X,kt),g(wr,kt,null),t(kt,ng),t(kt,Vc),t(Vc,sg),m(e,Ed,p),m(e,J,p),g(Lr,J,null),t(J,ag),t(J,rs),t(rs,os),t(os,ig),t(rs,cg),t(J,lg),t(J,ns),g(xr,ns,null),m(e,Pd,p),m(e,Q,p),g(Er,Q,null),t(Q,dg),t(Q,ss),t(ss,as),t(as,pg),t(ss,mg),t(Q,fg),t(Q,is),g(Pr,is,null),m(e,Fd,p),m(e,Z,p),g(Fr,Z,null),t(Z,hg),t(Z,cs),t(cs,ls),t(ls,gg),t(cs,ug),t(Z,_g),t(Z,ds),g(Dr,ds,null),m(e,Dd,p),m(e,ee,p),g(zr,ee,null),t(ee,vg),t(ee,ps),t(ps,ms),t(ms,bg),t(ps,$g),t(ee,Tg),t(ee,fs),g(Sr,fs,null),m(e,zd,p),m(e,te,p),g(Or,te,null),t(te,yg),t(te,hs),t(hs,gs),t(gs,kg),t(hs,wg),t(te,Lg),t(te,us),g(qr,us,null),m(e,Sd,p),m(e,re,p),g(Br,re,null),t(re,xg),t(re,wt),t(wt,_s),t(_s,Eg),t(wt,Pg),t(wt,Ir),t(Ir,Fg),t(wt,Dg),t(re,zg),t(re,vs),g(Ar,vs,null),m(e,Od,p),m(e,oe,p),g(Cr,oe,null),t(oe,Sg),t(oe,bs),t(bs,$s),t($s,Og),t(bs,qg),t(oe,Bg),t(oe,Ts),g(Nr,Ts,null),m(e,qd,p),m(e,ne,p),g(Wr,ne,null),t(ne,Ig),t(ne,Lt),t(Lt,ys),t(ys,Ag),t(Lt,Cg),t(Lt,Vr),t(Vr,Ng),t(Lt,Wg),t(ne,Vg),t(ne,ks),g(Mr,ks,null),m(e,Bd,p),m(e,se,p),g(Gr,se,null),t(se,Mg),t(se,Ae),t(Ae,ws),t(ws,Gg),t(Ae,jg),t(Ae,Ls),t(Ls,Hg),t(Ae,Rg),t(Ae,jr),t(jr,Kg),t(Ae,Ug),t(se,Yg),t(se,xs),g(Hr,xs,null),m(e,Id,p),m(e,ae,p),g(Rr,ae,null),t(ae,Xg),t(ae,Es),t(Es,Ps),t(Ps,Jg),t(Es,Qg),t(ae,Zg),t(ae,Fs),g(Kr,Fs,null),m(e,Ad,p),m(e,ie,p),g(Ur,ie,null),t(ie,eu),t(ie,xt),t(xt,Ds),t(Ds,tu),t(xt,ru),t(xt,Mc),t(Mc,ou),t(xt,nu),t(ie,su),t(ie,zs),g(Yr,zs,null),m(e,Cd,p),m(e,ce,p),g(Xr,ce,null),t(ce,au),t(ce,M),t(M,Ss),t(Ss,iu),t(M,cu),t(M,Gc),t(Gc,lu),t(M,du),t(M,jc),t(jc,pu),t(M,mu),t(M,Hc),t(Hc,fu),t(M,hu),t(ce,gu),t(ce,Os),g(Jr,Os,null),m(e,Nd,p),m(e,le,p),g(Qr,le,null),t(le,uu),t(le,Rc),t(Rc,_u),t(le,vu),t(le,Et),g(Zr,Et,null),t(Et,bu),t(Et,Kc),t(Kc,$u),m(e,Wd,p),m(e,de,p),g(eo,de,null),t(de,Tu),t(de,B),t(B,yu),t(B,qs),t(qs,ku),t(B,wu),t(B,Uc),t(Uc,Lu),t(B,xu),t(B,Yc),t(Yc,Xc),t(Xc,Eu),t(B,Pu),t(B,Bs),t(Bs,Fu),t(B,Du),t(de,zu),t(de,Is),g(to,Is,null),m(e,Vd,p),m(e,pe,p),g(ro,pe,null),t(pe,Su),t(pe,Jc),t(Jc,Ou),t(pe,qu),t(pe,Pt),g(oo,Pt,null),t(Pt,Bu),t(Pt,Qc),t(Qc,Iu),m(e,Md,p),m(e,me,p),g(no,me,null),t(me,Au),t(me,As),t(As,Cs),t(Cs,Cu),t(As,Nu),t(me,Wu),t(me,Ns),g(so,Ns,null),m(e,Gd,p),m(e,fe,p),g(ao,fe,null),t(fe,Vu),t(fe,Ws),t(Ws,Vs),t(Vs,Mu),t(Ws,Gu),t(fe,ju),t(fe,Ms),g(io,Ms,null),m(e,jd,p),m(e,he,p),g(co,he,null),t(he,Hu),t(he,Gs),t(Gs,js),t(js,Ru),t(Gs,Ku),t(he,Uu),t(he,Hs),g(lo,Hs,null),m(e,Hd,p),m(e,ge,p),g(po,ge,null),t(ge,Yu),t(ge,Rs),t(Rs,Ks),t(Ks,Xu),t(Rs,Ju),t(ge,Qu),t(ge,Us),g(mo,Us,null),m(e,Rd,p),m(e,ue,p),g(fo,ue,null),t(ue,Zu),t(ue,Ys),t(Ys,Xs),t(Xs,e_),t(Ys,t_),t(ue,r_),t(ue,Js),g(ho,Js,null),m(e,Kd,p),m(e,_e,p),g(go,_e,null),t(_e,o_),t(_e,Ft),t(Ft,Qs),t(Qs,n_),t(Ft,s_),t(Ft,uo),t(uo,a_),t(Ft,i_),t(_e,c_),t(_e,Zs),g(_o,Zs,null),m(e,Ud,p),m(e,ve,p),g(vo,ve,null),t(ve,l_),t(ve,ea),t(ea,ta),t(ta,d_),t(ea,p_),t(ve,m_),t(ve,ra),g(bo,ra,null),m(e,Yd,p),m(e,be,p),g($o,be,null),t(be,f_),t(be,Zc),t(Zc,h_),t(be,g_),t(be,Dt),g(To,Dt,null),t(Dt,u_),t(Dt,el),t(el,__),m(e,Xd,p),m(e,$e,p),g(yo,$e,null),t($e,v_),t($e,L),t(L,b_),t(L,oa),t(oa,$_),t(L,T_),t(L,na),t(na,y_),t(L,k_),t(L,tl),t(tl,w_),t(L,L_),t(L,rl),t(rl,ol),t(ol,x_),t(L,E_),t(L,sa),t(sa,P_),t(L,F_),t(L,aa),t(aa,D_),t(L,z_),t($e,S_),t($e,ia),g(ko,ia,null),m(e,Jd,p),m(e,Te,p),g(wo,Te,null),t(Te,O_),t(Te,nl),t(nl,q_),t(Te,B_),t(Te,zt),g(Lo,zt,null),t(zt,I_),t(zt,sl),t(sl,A_),m(e,Qd,p),m(e,ye,p),g(xo,ye,null),t(ye,C_),t(ye,ca),t(ca,la),t(la,N_),t(ca,W_),t(ye,V_),t(ye,da),g(Eo,da,null),m(e,Zd,p),m(e,ke,p),g(Po,ke,null),t(ke,M_),t(ke,pa),t(pa,ma),t(ma,G_),t(pa,j_),t(ke,H_),t(ke,fa),g(Fo,fa,null),m(e,ep,p),m(e,we,p),g(Do,we,null),t(we,R_),t(we,ha),t(ha,ga),t(ga,K_),t(ha,U_),t(we,Y_),t(we,ua),g(zo,ua,null),m(e,tp,p),m(e,Le,p),g(So,Le,null),t(Le,X_),t(Le,_a),t(_a,va),t(va,J_),t(_a,Q_),t(Le,Z_),t(Le,ba),g(Oo,ba,null),m(e,rp,p),m(e,xe,p),g(qo,xe,null),t(xe,ev),t(xe,St),t(St,$a),t($a,tv),t(St,rv),t(St,al),t(al,ov),t(St,nv),t(xe,sv),t(xe,Ta),g(Bo,Ta,null),m(e,op,p),m(e,Ee,p),g(Io,Ee,null),t(Ee,av),t(Ee,ya),t(ya,ka),t(ka,iv),t(ya,cv),t(Ee,lv),t(Ee,wa),g(Ao,wa,null),m(e,np,p),m(e,ot,p),t(ot,Ot),t(Ot,il),g(Co,il,null),t(ot,dv),t(ot,cl),t(cl,pv),m(e,sp,p),m(e,qt,p),t(qt,mv),t(qt,La),t(La,fv),t(qt,hv),m(e,ap,p),m(e,Pe,p),g(No,Pe,null),t(Pe,gv),t(Pe,ll),t(ll,uv),t(Pe,_v),t(Pe,xa),g(Wo,xa,null),m(e,ip,p),m(e,nt,p),g(Vo,nt,null),t(nt,vv),t(nt,Ea),g(Mo,Ea,null),m(e,cp,p),m(e,Fe,p),g(Go,Fe,null),t(Fe,bv),t(Fe,jo),t(jo,$v),t(jo,dl),t(dl,Tv),t(jo,yv),t(Fe,kv),t(Fe,Pa),g(Ho,Pa,null),m(e,lp,p),m(e,De,p),g(Ro,De,null),t(De,wv),t(De,Ko),t(Ko,Lv),t(Ko,pl),t(pl,xv),t(Ko,Ev),t(De,Pv),t(De,Fa),g(Uo,Fa,null),m(e,dp,p),m(e,st,p),t(st,Bt),t(Bt,ml),g(Yo,ml,null),t(st,Fv),t(st,fl),t(fl,Dv),m(e,pp,p),m(e,It,p),t(It,zv),t(It,Da),t(Da,Sv),t(It,Ov),m(e,mp,p),m(e,$,p),g(Xo,$,null),t($,qv),t($,hl),t(hl,Bv),t($,Iv),t($,gl),t(gl,Av),t($,Cv),g(Jo,$,null),t($,Nv),t($,ul),t(ul,Wv),t($,Vv),t($,At),g(Qo,At,null),t(At,Mv),t(At,_l),t(_l,Gv),t($,jv),t($,Ct),g(Zo,Ct,null),t(Ct,Hv),t(Ct,vl),t(vl,Rv),t($,Kv),t($,Nt),g(en,Nt,null),t(Nt,Uv),t(Nt,bl),t(bl,Yv),t($,Xv),t($,Wt),g(tn,Wt,null),t(Wt,Jv),t(Wt,rn),t(rn,Qv),t(rn,$l),t($l,Zv),t(rn,eb),t($,tb),t($,Vt),g(on,Vt,null),t(Vt,rb),t(Vt,Tl),t(Tl,ob),t($,nb),t($,Mt),g(nn,Mt,null),t(Mt,sb),t(Mt,yl),t(yl,ab),t($,ib),t($,Ce),g(sn,Ce,null),t(Ce,cb),t(Ce,an),t(an,lb),t(an,kl),t(kl,db),t(an,pb),t(Ce,mb),t(Ce,wl),t(wl,fb),m(e,fp,p),m(e,at,p),g(cn,at,null),t(at,hb),t(at,za),t(za,Sa),t(Sa,gb),t(za,ub),m(e,hp,p),m(e,I,p),g(ln,I,null),t(I,_b),t(I,Ll),t(Ll,vb),t(I,bb),t(I,E),g(dn,E,null),t(E,$b),t(E,xl),t(xl,Tb),t(E,yb),t(E,it),t(it,kb),t(it,El),t(El,wb),t(it,Lb),t(it,Pl),t(Pl,xb),t(it,Eb),t(E,Pb),t(E,Fl),t(Fl,Dl),t(Dl,Fb),t(E,Db),t(E,ze),t(ze,zb),t(ze,zl),t(zl,Sb),t(ze,Ob),t(ze,Sl),t(Sl,qb),t(ze,Bb),t(ze,Ol),t(Ol,Ib),t(ze,Ab),t(E,Cb),t(E,ql),t(ql,Nb),t(I,Wb),t(I,Gt),g(pn,Gt,null),t(Gt,Vb),t(Gt,Bl),t(Bl,Mb),m(e,gp,p),m(e,ct,p),t(ct,jt),t(jt,Il),g(mn,Il,null),t(ct,Gb),t(ct,Al),t(Al,jb),m(e,up,p),m(e,A,p),g(fn,A,null),t(A,Hb),t(A,lt),t(lt,Rb),t(lt,Oa),t(Oa,Kb),t(lt,Ub),t(lt,qa),t(qa,Yb),t(lt,Xb),t(A,Jb),t(A,Ba),g(hn,Ba,null),t(A,Qb),t(A,Ia),g(gn,Ia,null),m(e,_p,p),m(e,x,p),g(un,x,null),t(x,Zb),t(x,Aa),t(Aa,Ca),t(Ca,e$),t(Aa,t$),t(x,r$),t(x,_n),t(_n,o$),t(_n,vn),t(vn,n$),t(_n,s$),t(x,a$),t(x,Na),t(Na,i$),t(Na,bn),t(bn,c$),t(x,l$),t(x,Wa),g($n,Wa,null),t(x,d$),t(x,Va),g(Tn,Va,null),m(e,vp,p),m(e,C,p),g(yn,C,null),t(C,p$),t(C,Ma),t(Ma,Ga),t(Ga,m$),t(Ma,f$),t(C,h$),t(C,ja),g(kn,ja,null),t(C,g$),t(C,Ha),g(wn,Ha,null),m(e,bp,p),m(e,dt,p),t(dt,Ht),t(Ht,Cl),g(Ln,Cl,null),t(dt,u$),t(dt,Nl),t(Nl,_$),m(e,$p,p),m(e,Se,p),g(xn,Se,null),t(Se,v$),t(Se,Wl),t(Wl,b$),t(Se,$$),t(Se,Ra),t(Ra,T$),t(Ra,En),t(En,y$),m(e,Tp,p),m(e,Oe,p),g(Pn,Oe,null),t(Oe,k$),t(Oe,Vl),t(Vl,w$),t(Oe,L$),t(Oe,Ka),t(Ka,x$),t(Ka,Fn),t(Fn,E$),yp=!0},p:_k,i(e){yp||(u(Qt.$$.fragment,e),u(Zt.$$.fragment,e),u(er.$$.fragment,e),u(tr.$$.fragment,e),u(rr.$$.fragment,e),u(or.$$.fragment,e),u(nr.$$.fragment,e),u(sr.$$.fragment,e),u(ar.$$.fragment,e),u(ir.$$.fragment,e),u(cr.$$.fragment,e),u(lr.$$.fragment,e),u(dr.$$.fragment,e),u(pr.$$.fragment,e),u(mr.$$.fragment,e),u(fr.$$.fragment,e),u(hr.$$.fragment,e),u(gr.$$.fragment,e),u(ur.$$.fragment,e),u(_r.$$.fragment,e),u(vr.$$.fragment,e),u(br.$$.fragment,e),u($r.$$.fragment,e),u(Tr.$$.fragment,e),u(yr.$$.fragment,e),u(kr.$$.fragment,e),u(wr.$$.fragment,e),u(Lr.$$.fragment,e),u(xr.$$.fragment,e),u(Er.$$.fragment,e),u(Pr.$$.fragment,e),u(Fr.$$.fragment,e),u(Dr.$$.fragment,e),u(zr.$$.fragment,e),u(Sr.$$.fragment,e),u(Or.$$.fragment,e),u(qr.$$.fragment,e),u(Br.$$.fragment,e),u(Ar.$$.fragment,e),u(Cr.$$.fragment,e),u(Nr.$$.fragment,e),u(Wr.$$.fragment,e),u(Mr.$$.fragment,e),u(Gr.$$.fragment,e),u(Hr.$$.fragment,e),u(Rr.$$.fragment,e),u(Kr.$$.fragment,e),u(Ur.$$.fragment,e),u(Yr.$$.fragment,e),u(Xr.$$.fragment,e),u(Jr.$$.fragment,e),u(Qr.$$.fragment,e),u(Zr.$$.fragment,e),u(eo.$$.fragment,e),u(to.$$.fragment,e),u(ro.$$.fragment,e),u(oo.$$.fragment,e),u(no.$$.fragment,e),u(so.$$.fragment,e),u(ao.$$.fragment,e),u(io.$$.fragment,e),u(co.$$.fragment,e),u(lo.$$.fragment,e),u(po.$$.fragment,e),u(mo.$$.fragment,e),u(fo.$$.fragment,e),u(ho.$$.fragment,e),u(go.$$.fragment,e),u(_o.$$.fragment,e),u(vo.$$.fragment,e),u(bo.$$.fragment,e),u($o.$$.fragment,e),u(To.$$.fragment,e),u(yo.$$.fragment,e),u(ko.$$.fragment,e),u(wo.$$.fragment,e),u(Lo.$$.fragment,e),u(xo.$$.fragment,e),u(Eo.$$.fragment,e),u(Po.$$.fragment,e),u(Fo.$$.fragment,e),u(Do.$$.fragment,e),u(zo.$$.fragment,e),u(So.$$.fragment,e),u(Oo.$$.fragment,e),u(qo.$$.fragment,e),u(Bo.$$.fragment,e),u(Io.$$.fragment,e),u(Ao.$$.fragment,e),u(Co.$$.fragment,e),u(No.$$.fragment,e),u(Wo.$$.fragment,e),u(Vo.$$.fragment,e),u(Mo.$$.fragment,e),u(Go.$$.fragment,e),u(Ho.$$.fragment,e),u(Ro.$$.fragment,e),u(Uo.$$.fragment,e),u(Yo.$$.fragment,e),u(Xo.$$.fragment,e),u(Jo.$$.fragment,e),u(Qo.$$.fragment,e),u(Zo.$$.fragment,e),u(en.$$.fragment,e),u(tn.$$.fragment,e),u(on.$$.fragment,e),u(nn.$$.fragment,e),u(sn.$$.fragment,e),u(cn.$$.fragment,e),u(ln.$$.fragment,e),u(dn.$$.fragment,e),u(pn.$$.fragment,e),u(mn.$$.fragment,e),u(fn.$$.fragment,e),u(hn.$$.fragment,e),u(gn.$$.fragment,e),u(un.$$.fragment,e),u($n.$$.fragment,e),u(Tn.$$.fragment,e),u(yn.$$.fragment,e),u(kn.$$.fragment,e),u(wn.$$.fragment,e),u(Ln.$$.fragment,e),u(xn.$$.fragment,e),u(Pn.$$.fragment,e),yp=!0)},o(e){_(Qt.$$.fragment,e),_(Zt.$$.fragment,e),_(er.$$.fragment,e),_(tr.$$.fragment,e),_(rr.$$.fragment,e),_(or.$$.fragment,e),_(nr.$$.fragment,e),_(sr.$$.fragment,e),_(ar.$$.fragment,e),_(ir.$$.fragment,e),_(cr.$$.fragment,e),_(lr.$$.fragment,e),_(dr.$$.fragment,e),_(pr.$$.fragment,e),_(mr.$$.fragment,e),_(fr.$$.fragment,e),_(hr.$$.fragment,e),_(gr.$$.fragment,e),_(ur.$$.fragment,e),_(_r.$$.fragment,e),_(vr.$$.fragment,e),_(br.$$.fragment,e),_($r.$$.fragment,e),_(Tr.$$.fragment,e),_(yr.$$.fragment,e),_(kr.$$.fragment,e),_(wr.$$.fragment,e),_(Lr.$$.fragment,e),_(xr.$$.fragment,e),_(Er.$$.fragment,e),_(Pr.$$.fragment,e),_(Fr.$$.fragment,e),_(Dr.$$.fragment,e),_(zr.$$.fragment,e),_(Sr.$$.fragment,e),_(Or.$$.fragment,e),_(qr.$$.fragment,e),_(Br.$$.fragment,e),_(Ar.$$.fragment,e),_(Cr.$$.fragment,e),_(Nr.$$.fragment,e),_(Wr.$$.fragment,e),_(Mr.$$.fragment,e),_(Gr.$$.fragment,e),_(Hr.$$.fragment,e),_(Rr.$$.fragment,e),_(Kr.$$.fragment,e),_(Ur.$$.fragment,e),_(Yr.$$.fragment,e),_(Xr.$$.fragment,e),_(Jr.$$.fragment,e),_(Qr.$$.fragment,e),_(Zr.$$.fragment,e),_(eo.$$.fragment,e),_(to.$$.fragment,e),_(ro.$$.fragment,e),_(oo.$$.fragment,e),_(no.$$.fragment,e),_(so.$$.fragment,e),_(ao.$$.fragment,e),_(io.$$.fragment,e),_(co.$$.fragment,e),_(lo.$$.fragment,e),_(po.$$.fragment,e),_(mo.$$.fragment,e),_(fo.$$.fragment,e),_(ho.$$.fragment,e),_(go.$$.fragment,e),_(_o.$$.fragment,e),_(vo.$$.fragment,e),_(bo.$$.fragment,e),_($o.$$.fragment,e),_(To.$$.fragment,e),_(yo.$$.fragment,e),_(ko.$$.fragment,e),_(wo.$$.fragment,e),_(Lo.$$.fragment,e),_(xo.$$.fragment,e),_(Eo.$$.fragment,e),_(Po.$$.fragment,e),_(Fo.$$.fragment,e),_(Do.$$.fragment,e),_(zo.$$.fragment,e),_(So.$$.fragment,e),_(Oo.$$.fragment,e),_(qo.$$.fragment,e),_(Bo.$$.fragment,e),_(Io.$$.fragment,e),_(Ao.$$.fragment,e),_(Co.$$.fragment,e),_(No.$$.fragment,e),_(Wo.$$.fragment,e),_(Vo.$$.fragment,e),_(Mo.$$.fragment,e),_(Go.$$.fragment,e),_(Ho.$$.fragment,e),_(Ro.$$.fragment,e),_(Uo.$$.fragment,e),_(Yo.$$.fragment,e),_(Xo.$$.fragment,e),_(Jo.$$.fragment,e),_(Qo.$$.fragment,e),_(Zo.$$.fragment,e),_(en.$$.fragment,e),_(tn.$$.fragment,e),_(on.$$.fragment,e),_(nn.$$.fragment,e),_(sn.$$.fragment,e),_(cn.$$.fragment,e),_(ln.$$.fragment,e),_(dn.$$.fragment,e),_(pn.$$.fragment,e),_(mn.$$.fragment,e),_(fn.$$.fragment,e),_(hn.$$.fragment,e),_(gn.$$.fragment,e),_(un.$$.fragment,e),_($n.$$.fragment,e),_(Tn.$$.fragment,e),_(yn.$$.fragment,e),_(kn.$$.fragment,e),_(wn.$$.fragment,e),_(Ln.$$.fragment,e),_(xn.$$.fragment,e),_(Pn.$$.fragment,e),yp=!1},d(e){r(Be),e&&r(zn),e&&r(N),v(Qt),e&&r(Kl),e&&r(y),e&&r(Ul),e&&r(Nn),e&&r(Yl),e&&r(Ge),v(Zt),e&&r(Xl),e&&r(W),e&&r(Jl),e&&r(Gn),e&&r(Ql),v(er,e),e&&r(Zl),e&&r(Ie),e&&r(ed),e&&r(V),e&&r(td),e&&r(k),e&&r(rd),e&&r(F),e&&r(od),e&&r(D),e&&r(nd),v(tr,e),e&&r(sd),e&&r(ft),e&&r(ad),e&&r(z),e&&r(id),e&&r(Yn),e&&r(cd),e&&r(je),v(rr),e&&r(ld),e&&r(He),v(or),e&&r(dd),e&&r(Re),v(nr),e&&r(pd),e&&r(R),v(sr),v(ar),e&&r(md),e&&r(Ke),v(ir),e&&r(fd),e&&r(Ue),v(cr),e&&r(hd),e&&r(Ye),v(lr),e&&r(gd),e&&r(K),v(dr),v(pr),e&&r(ud),e&&r(Xe),v(mr),e&&r(_d),e&&r(Je),v(fr),e&&r(vd),e&&r(Qe),v(hr),e&&r(bd),e&&r(Ze),v(gr),e&&r($d),e&&r(et),v(ur),e&&r(Td),e&&r(tt),v(_r),e&&r(yd),e&&r(rt),v(vr),e&&r(kd),e&&r(Tt),e&&r(wd),e&&r(U),v(br),v($r),e&&r(Ld),e&&r(Y),v(Tr),v(yr),e&&r(xd),e&&r(X),v(kr),v(wr),e&&r(Ed),e&&r(J),v(Lr),v(xr),e&&r(Pd),e&&r(Q),v(Er),v(Pr),e&&r(Fd),e&&r(Z),v(Fr),v(Dr),e&&r(Dd),e&&r(ee),v(zr),v(Sr),e&&r(zd),e&&r(te),v(Or),v(qr),e&&r(Sd),e&&r(re),v(Br),v(Ar),e&&r(Od),e&&r(oe),v(Cr),v(Nr),e&&r(qd),e&&r(ne),v(Wr),v(Mr),e&&r(Bd),e&&r(se),v(Gr),v(Hr),e&&r(Id),e&&r(ae),v(Rr),v(Kr),e&&r(Ad),e&&r(ie),v(Ur),v(Yr),e&&r(Cd),e&&r(ce),v(Xr),v(Jr),e&&r(Nd),e&&r(le),v(Qr),v(Zr),e&&r(Wd),e&&r(de),v(eo),v(to),e&&r(Vd),e&&r(pe),v(ro),v(oo),e&&r(Md),e&&r(me),v(no),v(so),e&&r(Gd),e&&r(fe),v(ao),v(io),e&&r(jd),e&&r(he),v(co),v(lo),e&&r(Hd),e&&r(ge),v(po),v(mo),e&&r(Rd),e&&r(ue),v(fo),v(ho),e&&r(Kd),e&&r(_e),v(go),v(_o),e&&r(Ud),e&&r(ve),v(vo),v(bo),e&&r(Yd),e&&r(be),v($o),v(To),e&&r(Xd),e&&r($e),v(yo),v(ko),e&&r(Jd),e&&r(Te),v(wo),v(Lo),e&&r(Qd),e&&r(ye),v(xo),v(Eo),e&&r(Zd),e&&r(ke),v(Po),v(Fo),e&&r(ep),e&&r(we),v(Do),v(zo),e&&r(tp),e&&r(Le),v(So),v(Oo),e&&r(rp),e&&r(xe),v(qo),v(Bo),e&&r(op),e&&r(Ee),v(Io),v(Ao),e&&r(np),e&&r(ot),v(Co),e&&r(sp),e&&r(qt),e&&r(ap),e&&r(Pe),v(No),v(Wo),e&&r(ip),e&&r(nt),v(Vo),v(Mo),e&&r(cp),e&&r(Fe),v(Go),v(Ho),e&&r(lp),e&&r(De),v(Ro),v(Uo),e&&r(dp),e&&r(st),v(Yo),e&&r(pp),e&&r(It),e&&r(mp),e&&r($),v(Xo),v(Jo),v(Qo),v(Zo),v(en),v(tn),v(on),v(nn),v(sn),e&&r(fp),e&&r(at),v(cn),e&&r(hp),e&&r(I),v(ln),v(dn),v(pn),e&&r(gp),e&&r(ct),v(mn),e&&r(up),e&&r(A),v(fn),v(hn),v(gn),e&&r(_p),e&&r(x),v(un),v($n),v(Tn),e&&r(vp),e&&r(C),v(yn),v(kn),v(wn),e&&r(bp),e&&r(dt),v(Ln),e&&r($p),e&&r(Se),v(xn),e&&r(Tp),e&&r(Oe),v(Pn)}}}const bk={local:"utilities-for-generation",sections:[{local:"generate-outputs",sections:[{local:"transformers.generation_utils.GreedySearchDecoderOnlyOutput",title:"GreedySearchOutput"},{local:"transformers.generation_utils.SampleDecoderOnlyOutput",title:"SampleOutput"},{local:"transformers.generation_utils.BeamSearchDecoderOnlyOutput",title:"BeamSearchOutput"},{local:"transformers.generation_utils.BeamSampleDecoderOnlyOutput",title:"BeamSampleOutput"}],title:"Generate Outputs"},{local:"transformers.LogitsProcessor",title:"LogitsProcessor"},{local:"transformers.StoppingCriteria",title:"StoppingCriteria"},{local:"transformers.Constraint",title:"Constraints"},{local:"transformers.BeamScorer",title:"BeamSearch"},{local:"transformers.top_k_top_p_filtering",title:"Utilities"}],title:"Utilities for Generation"};function $k(hm,Be,zn){let{fw:N}=Be;return hm.$$set=H=>{"fw"in H&&zn(0,N=H.fw)},[N]}class xk extends fk{constructor(Be){super();hk(this,Be,$k,vk,gk,{fw:0})}}export{xk as default,bk as metadata};
