import{S as Gi,i as Ki,s as Ri,e as s,k as l,w as u,t as a,M as Ui,c as n,d as o,m as d,a as r,x as h,h as i,b as p,F as t,g as m,y as g,q as _,o as v,B as $}from"../../chunks/vendor-4833417e.js";import{T as is}from"../../chunks/Tip-fffd6df1.js";import{D as T}from"../../chunks/Docstring-7b52c3d4.js";import{C as Wi}from"../../chunks/CodeBlock-90ffda97.js";import{I as eo}from"../../chunks/IconCopyLink-4b81c553.js";import"../../chunks/CopyButton-04a16537.js";function Xi(F){let f,k,b,w,A,q,G,O,x,j,z,L,Q,S,P,B,D;return{c(){f=s("p"),k=a("One of "),b=s("code"),w=a("start_states"),A=a(" or "),q=s("code"),G=a("start_positions"),O=a(" should be not "),x=s("code"),j=a("None"),z=a(". If both are set, "),L=s("code"),Q=a("start_positions"),S=a(` overrides
`),P=s("code"),B=a("start_states"),D=a(".")},l(E){f=n(E,"P",{});var y=r(f);k=i(y,"One of "),b=n(y,"CODE",{});var I=r(b);w=i(I,"start_states"),I.forEach(o),A=i(y," or "),q=n(y,"CODE",{});var fe=r(q);G=i(fe,"start_positions"),fe.forEach(o),O=i(y," should be not "),x=n(y,"CODE",{});var K=r(x);j=i(K,"None"),K.forEach(o),z=i(y,". If both are set, "),L=n(y,"CODE",{});var pe=r(L);Q=i(pe,"start_positions"),pe.forEach(o),S=i(y,` overrides
`),P=n(y,"CODE",{});var ie=r(P);B=i(ie,"start_states"),ie.forEach(o),D=i(y,"."),y.forEach(o)},m(E,y){m(E,f,y),t(f,k),t(f,b),t(b,w),t(f,A),t(f,q),t(q,G),t(f,O),t(f,x),t(x,j),t(f,z),t(f,L),t(L,Q),t(f,S),t(f,P),t(P,B),t(f,D)},d(E){E&&o(f)}}}function Ji(F){let f,k,b,w,A,q,G,O,x,j,z,L,Q,S,P,B,D;return{c(){f=s("p"),k=a("One of "),b=s("code"),w=a("start_states"),A=a(" or "),q=s("code"),G=a("start_positions"),O=a(" should be not "),x=s("code"),j=a("None"),z=a(". If both are set, "),L=s("code"),Q=a("start_positions"),S=a(` overrides
`),P=s("code"),B=a("start_states"),D=a(".")},l(E){f=n(E,"P",{});var y=r(f);k=i(y,"One of "),b=n(y,"CODE",{});var I=r(b);w=i(I,"start_states"),I.forEach(o),A=i(y," or "),q=n(y,"CODE",{});var fe=r(q);G=i(fe,"start_positions"),fe.forEach(o),O=i(y," should be not "),x=n(y,"CODE",{});var K=r(x);j=i(K,"None"),K.forEach(o),z=i(y,". If both are set, "),L=n(y,"CODE",{});var pe=r(L);Q=i(pe,"start_positions"),pe.forEach(o),S=i(y,` overrides
`),P=n(y,"CODE",{});var ie=r(P);B=i(ie,"start_states"),ie.forEach(o),D=i(y,"."),y.forEach(o)},m(E,y){m(E,f,y),t(f,k),t(f,b),t(b,w),t(f,A),t(f,q),t(q,G),t(f,O),t(f,x),t(x,j),t(f,z),t(f,L),t(L,Q),t(f,S),t(f,P),t(P,B),t(f,D)},d(E){E&&o(f)}}}function Yi(F){let f,k;return{c(){f=s("p"),k=a("Any label of -100 will be ignored (along with the corresponding logits) in the loss computation.")},l(b){f=n(b,"P",{});var w=r(f);k=i(w,"Any label of -100 will be ignored (along with the corresponding logits) in the loss computation."),w.forEach(o)},m(b,w){m(b,f,w),t(f,k)},d(b){b&&o(f)}}}function Zi(F){let f,k;return{c(){f=s("p"),k=a("Any label of -100 will be ignored (along with the corresponding logits) in the loss computation.")},l(b){f=n(b,"P",{});var w=r(f);k=i(w,"Any label of -100 will be ignored (along with the corresponding logits) in the loss computation."),w.forEach(o)},m(b,w){m(b,f,w),t(f,k)},d(b){b&&o(f)}}}function el(F){let f,k;return{c(){f=s("p"),k=a("Any label of -100 will be ignored (along with the corresponding logits) in the loss computation.")},l(b){f=n(b,"P",{});var w=r(f);k=i(w,"Any label of -100 will be ignored (along with the corresponding logits) in the loss computation."),w.forEach(o)},m(b,w){m(b,f,w),t(f,k)},d(b){b&&o(f)}}}function tl(F){let f,k,b,w,A,q,G,O,x,j,z,L,Q,S,P,B,D,E,y,I,fe,K,pe,ie,R,Be,on,to,sn,nn,oo,rn,ls,U,Ge,an,so,ln,dn,zt,Ke,ds,W,Re,cn,no,mn,fn,Le,Ue,pn,Pe,cs,X,We,un,ro,hn,gn,Ce,Xe,_n,ze,ms,ue,Je,vn,Ye,$n,St,bn,yn,fs,J,Ze,wn,ao,Tn,kn,Ft,et,ps,Y,tt,En,io,qn,Dn,Se,ot,xn,lo,Ln,us,he,Fe,co,st,Pn,mo,Cn,hs,C,nt,zn,N,Sn,fo,Fn,An,po,On,In,uo,Nn,Hn,ho,Mn,Vn,jn,H,Qn,go,Bn,Gn,_o,Kn,Rn,vo,Un,Wn,$o,Xn,Jn,Yn,bo,Zn,er,rt,gs,ge,at,tr,it,or,yo,sr,nr,_s,Z,lt,rr,wo,ar,ir,To,lr,vs,ee,dt,dr,ko,cr,mr,Eo,fr,$s,te,ct,pr,qo,ur,hr,Do,gr,bs,_e,Ae,xo,mt,_r,Lo,vr,ys,oe,ft,$r,Po,br,yr,Co,wr,ws,M,pt,Tr,zo,kr,Er,So,qr,Dr,le,ut,xr,Fo,Lr,Pr,ht,Cr,gt,zr,Sr,Ts,se,_t,Fr,Ao,Ar,Or,Oe,vt,Ir,Oo,Nr,ks,ve,Ie,Io,$t,Hr,No,Mr,Es,ne,bt,Vr,Ho,jr,Qr,Ne,qs,re,yt,Br,Mo,Gr,Kr,He,Ds,$e,wt,Rr,Vo,Ur,xs,be,Tt,Wr,jo,Xr,Ls,ye,kt,Jr,Qo,Yr,Ps,ae,Et,Zr,Bo,ea,ta,Me,Cs,we,Ve,Go,qt,oa,Ko,sa,zs,Te,Dt,na,xt,ra,Ro,aa,ia,Ss,V,Lt,la,Uo,da,ca,Wo,ma,fa,ke,Ee,pa,Xo,ua,ha,Jo,ga,_a,va,qe,$a,Yo,ba,ya,Zo,wa,Ta,ka,De,Ea,es,qa,Da,ts,xa,La,Fs,xe,Pt,Pa,os,Ca,As;return q=new eo({}),I=new eo({}),Be=new T({props:{name:"class transformers.Conv1D",anchor:"transformers.Conv1D",parameters:[{name:"nf",val:""},{name:"nx",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L1846",parametersDescription:[{anchor:"transformers.Conv1D.nf",description:"<strong>nf</strong> (<code>int</code>) &#x2014; The number of output features.",name:"nf"},{anchor:"transformers.Conv1D.nx",description:"<strong>nx</strong> (<code>int</code>) &#x2014; The number of input features.",name:"nx"}]}}),Ge=new T({props:{name:"class transformers.modeling_utils.PoolerStartLogits",anchor:"transformers.modeling_utils.PoolerStartLogits",parameters:[{name:"config",val:": PretrainedConfig"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L1872",parametersDescription:[{anchor:"transformers.modeling_utils.PoolerStartLogits.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The config used by the model, will be used to grab the <code>hidden_size</code> of the model.`,name:"config"}]}}),Ke=new T({props:{name:"forward",anchor:"transformers.modeling_utils.PoolerStartLogits.forward",parameters:[{name:"hidden_states",val:": FloatTensor"},{name:"p_mask",val:": typing.Optional[torch.FloatTensor] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L1885",parametersDescription:[{anchor:"transformers.modeling_utils.PoolerStartLogits.forward.hidden_states",description:`<strong>hidden_states</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, seq_len, hidden_size)</code>) &#x2014;
The final hidden states of the model.`,name:"hidden_states"},{anchor:"transformers.modeling_utils.PoolerStartLogits.forward.p_mask",description:`<strong>p_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, seq_len)</code>, <em>optional</em>) &#x2014;
Mask for tokens at invalid position, such as query and special symbols (PAD, SEP, CLS). 1.0 means token
should be masked.`,name:"p_mask"}],returnDescription:`
<p>The start logits for SQuAD.</p>
`,returnType:`
<p><code>torch.FloatTensor</code></p>
`}}),Re=new T({props:{name:"class transformers.modeling_utils.PoolerEndLogits",anchor:"transformers.modeling_utils.PoolerEndLogits",parameters:[{name:"config",val:": PretrainedConfig"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L1910",parametersDescription:[{anchor:"transformers.modeling_utils.PoolerEndLogits.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The config used by the model, will be used to grab the <code>hidden_size</code> of the model and the <code>layer_norm_eps</code>
to use.`,name:"config"}]}}),Ue=new T({props:{name:"forward",anchor:"transformers.modeling_utils.PoolerEndLogits.forward",parameters:[{name:"hidden_states",val:": FloatTensor"},{name:"start_states",val:": typing.Optional[torch.FloatTensor] = None"},{name:"start_positions",val:": typing.Optional[torch.LongTensor] = None"},{name:"p_mask",val:": typing.Optional[torch.FloatTensor] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L1927",parametersDescription:[{anchor:"transformers.modeling_utils.PoolerEndLogits.forward.hidden_states",description:`<strong>hidden_states</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, seq_len, hidden_size)</code>) &#x2014;
The final hidden states of the model.`,name:"hidden_states"},{anchor:"transformers.modeling_utils.PoolerEndLogits.forward.start_states",description:`<strong>start_states</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, seq_len, hidden_size)</code>, <em>optional</em>) &#x2014;
The hidden states of the first tokens for the labeled span.`,name:"start_states"},{anchor:"transformers.modeling_utils.PoolerEndLogits.forward.start_positions",description:`<strong>start_positions</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
The position of the first token for the labeled span.`,name:"start_positions"},{anchor:"transformers.modeling_utils.PoolerEndLogits.forward.p_mask",description:`<strong>p_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, seq_len)</code>, <em>optional</em>) &#x2014;
Mask for tokens at invalid position, such as query and special symbols (PAD, SEP, CLS). 1.0 means token
should be masked.`,name:"p_mask"}],returnDescription:`
<p>The end logits for SQuAD.</p>
`,returnType:`
<p><code>torch.FloatTensor</code></p>
`}}),Pe=new is({props:{$$slots:{default:[Xi]},$$scope:{ctx:F}}}),We=new T({props:{name:"class transformers.modeling_utils.PoolerAnswerClass",anchor:"transformers.modeling_utils.PoolerAnswerClass",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L1979",parametersDescription:[{anchor:"transformers.modeling_utils.PoolerAnswerClass.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The config used by the model, will be used to grab the <code>hidden_size</code> of the model.`,name:"config"}]}}),Xe=new T({props:{name:"forward",anchor:"transformers.modeling_utils.PoolerAnswerClass.forward",parameters:[{name:"hidden_states",val:": FloatTensor"},{name:"start_states",val:": typing.Optional[torch.FloatTensor] = None"},{name:"start_positions",val:": typing.Optional[torch.LongTensor] = None"},{name:"cls_index",val:": typing.Optional[torch.LongTensor] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L1994",parametersDescription:[{anchor:"transformers.modeling_utils.PoolerAnswerClass.forward.hidden_states",description:`<strong>hidden_states</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, seq_len, hidden_size)</code>) &#x2014;
The final hidden states of the model.`,name:"hidden_states"},{anchor:"transformers.modeling_utils.PoolerAnswerClass.forward.start_states",description:`<strong>start_states</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, seq_len, hidden_size)</code>, <em>optional</em>) &#x2014;
The hidden states of the first tokens for the labeled span.`,name:"start_states"},{anchor:"transformers.modeling_utils.PoolerAnswerClass.forward.start_positions",description:`<strong>start_positions</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
The position of the first token for the labeled span.`,name:"start_positions"},{anchor:"transformers.modeling_utils.PoolerAnswerClass.forward.cls_index",description:`<strong>cls_index</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Position of the CLS token for each sentence in the batch. If <code>None</code>, takes the last token.`,name:"cls_index"}],returnDescription:`
<p>The SQuAD 2.0 answer class.</p>
`,returnType:`
<p><code>torch.FloatTensor</code></p>
`}}),ze=new is({props:{$$slots:{default:[Ji]},$$scope:{ctx:F}}}),Je=new T({props:{name:"class transformers.modeling_utils.SquadHeadOutput",anchor:"transformers.modeling_utils.SquadHeadOutput",parameters:[{name:"loss",val:": typing.Optional[torch.FloatTensor] = None"},{name:"start_top_log_probs",val:": typing.Optional[torch.FloatTensor] = None"},{name:"start_top_index",val:": typing.Optional[torch.LongTensor] = None"},{name:"end_top_log_probs",val:": typing.Optional[torch.FloatTensor] = None"},{name:"end_top_index",val:": typing.Optional[torch.LongTensor] = None"},{name:"cls_logits",val:": typing.Optional[torch.FloatTensor] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L2045",parametersDescription:[{anchor:"transformers.modeling_utils.SquadHeadOutput.loss",description:`<strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned if both <code>start_positions</code> and <code>end_positions</code> are provided) &#x2014;
Classification loss as the sum of start token, end token (and is_impossible if provided) classification
losses.`,name:"loss"},{anchor:"transformers.modeling_utils.SquadHeadOutput.start_top_log_probs",description:`<strong>start_top_log_probs</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.start_n_top)</code>, <em>optional</em>, returned if <code>start_positions</code> or <code>end_positions</code> is not provided) &#x2014;
Log probabilities for the top config.start_n_top start token possibilities (beam-search).`,name:"start_top_log_probs"},{anchor:"transformers.modeling_utils.SquadHeadOutput.start_top_index",description:`<strong>start_top_index</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, config.start_n_top)</code>, <em>optional</em>, returned if <code>start_positions</code> or <code>end_positions</code> is not provided) &#x2014;
Indices for the top config.start_n_top start token possibilities (beam-search).`,name:"start_top_index"},{anchor:"transformers.modeling_utils.SquadHeadOutput.end_top_log_probs",description:`<strong>end_top_log_probs</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.start_n_top * config.end_n_top)</code>, <em>optional</em>, returned if <code>start_positions</code> or <code>end_positions</code> is not provided) &#x2014;
Log probabilities for the top <code>config.start_n_top * config.end_n_top</code> end token possibilities
(beam-search).`,name:"end_top_log_probs"},{anchor:"transformers.modeling_utils.SquadHeadOutput.end_top_index",description:`<strong>end_top_index</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, config.start_n_top * config.end_n_top)</code>, <em>optional</em>, returned if <code>start_positions</code> or <code>end_positions</code> is not provided) &#x2014;
Indices for the top <code>config.start_n_top * config.end_n_top</code> end token possibilities (beam-search).`,name:"end_top_index"},{anchor:"transformers.modeling_utils.SquadHeadOutput.cls_logits",description:`<strong>cls_logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>, returned if <code>start_positions</code> or <code>end_positions</code> is not provided) &#x2014;
Log probabilities for the <code>is_impossible</code> label of the answers.`,name:"cls_logits"}]}}),Ze=new T({props:{name:"class transformers.modeling_utils.SQuADHead",anchor:"transformers.modeling_utils.SQuADHead",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L2075",parametersDescription:[{anchor:"transformers.modeling_utils.SQuADHead.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The config used by the model, will be used to grab the <code>hidden_size</code> of the model and the <code>layer_norm_eps</code>
to use.`,name:"config"}]}}),et=new T({props:{name:"forward",anchor:"transformers.modeling_utils.SQuADHead.forward",parameters:[{name:"hidden_states",val:": FloatTensor"},{name:"start_positions",val:": typing.Optional[torch.LongTensor] = None"},{name:"end_positions",val:": typing.Optional[torch.LongTensor] = None"},{name:"cls_index",val:": typing.Optional[torch.LongTensor] = None"},{name:"is_impossible",val:": typing.Optional[torch.LongTensor] = None"},{name:"p_mask",val:": typing.Optional[torch.FloatTensor] = None"},{name:"return_dict",val:": bool = False"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L2094",parametersDescription:[{anchor:"transformers.modeling_utils.SQuADHead.forward.hidden_states",description:`<strong>hidden_states</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, seq_len, hidden_size)</code>) &#x2014;
Final hidden states of the model on the sequence tokens.`,name:"hidden_states"},{anchor:"transformers.modeling_utils.SQuADHead.forward.start_positions",description:`<strong>start_positions</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Positions of the first token for the labeled span.`,name:"start_positions"},{anchor:"transformers.modeling_utils.SQuADHead.forward.end_positions",description:`<strong>end_positions</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Positions of the last token for the labeled span.`,name:"end_positions"},{anchor:"transformers.modeling_utils.SQuADHead.forward.cls_index",description:`<strong>cls_index</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Position of the CLS token for each sentence in the batch. If <code>None</code>, takes the last token.`,name:"cls_index"},{anchor:"transformers.modeling_utils.SQuADHead.forward.is_impossible",description:`<strong>is_impossible</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Whether the question has a possible answer in the paragraph or not.`,name:"is_impossible"},{anchor:"transformers.modeling_utils.SQuADHead.forward.p_mask",description:`<strong>p_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, seq_len)</code>, <em>optional</em>) &#x2014;
Mask for tokens at invalid position, such as query and special symbols (PAD, SEP, CLS). 1.0 means token
should be masked.`,name:"p_mask"},{anchor:"transformers.modeling_utils.SQuADHead.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to return a <a href="/docs/transformers/master/en/main_classes/output#transformers.file_utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],returnDescription:`
<p>A <a
  href="/docs/transformers/master/en/internal/modeling_utils#transformers.modeling_utils.SquadHeadOutput"
>transformers.modeling_utils.SquadHeadOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<code>&lt;class 'transformers.configuration_utils.PretrainedConfig'&gt;</code>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned if both <code>start_positions</code> and <code>end_positions</code> are provided) \u2014 Classification loss as the sum of start token, end token (and is_impossible if provided) classification
losses.</li>
<li><strong>start_top_log_probs</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.start_n_top)</code>, <em>optional</em>, returned if <code>start_positions</code> or <code>end_positions</code> is not provided) \u2014 Log probabilities for the top config.start_n_top start token possibilities (beam-search).</li>
<li><strong>start_top_index</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, config.start_n_top)</code>, <em>optional</em>, returned if <code>start_positions</code> or <code>end_positions</code> is not provided) \u2014 Indices for the top config.start_n_top start token possibilities (beam-search).</li>
<li><strong>end_top_log_probs</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.start_n_top * config.end_n_top)</code>, <em>optional</em>, returned if <code>start_positions</code> or <code>end_positions</code> is not provided) \u2014 Log probabilities for the top <code>config.start_n_top * config.end_n_top</code> end token possibilities
(beam-search).</li>
<li><strong>end_top_index</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, config.start_n_top * config.end_n_top)</code>, <em>optional</em>, returned if <code>start_positions</code> or <code>end_positions</code> is not provided) \u2014 Indices for the top <code>config.start_n_top * config.end_n_top</code> end token possibilities (beam-search).</li>
<li><strong>cls_logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>, returned if <code>start_positions</code> or <code>end_positions</code> is not provided) \u2014 Log probabilities for the <code>is_impossible</code> label of the answers.</li>
</ul>
`}}),tt=new T({props:{name:"class transformers.modeling_utils.SequenceSummary",anchor:"transformers.modeling_utils.SequenceSummary",parameters:[{name:"config",val:": PretrainedConfig"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L2192",parametersDescription:[{anchor:"transformers.modeling_utils.SequenceSummary.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The config used by the model. Relevant arguments in the config class of the model are (refer to the actual
config class of your model for the default values it uses):</p>
<ul>
<li>
<p><strong>summary_type</strong> (<code>str</code>) &#x2014; The method to use to make this summary. Accepted values are:</p>
<ul>
<li><code>&quot;last&quot;</code> &#x2014; Take the last token hidden state (like XLNet)</li>
<li><code>&quot;first&quot;</code> &#x2014; Take the first token hidden state (like Bert)</li>
<li><code>&quot;mean&quot;</code> &#x2014; Take the mean of all tokens hidden states</li>
<li><code>&quot;cls_index&quot;</code> &#x2014; Supply a Tensor of classification token position (GPT/GPT-2)</li>
<li><code>&quot;attn&quot;</code> &#x2014; Not implemented now, use multi-head attention</li>
</ul>
</li>
<li>
<p><strong>summary_use_proj</strong> (<code>bool</code>) &#x2014; Add a projection after the vector extraction.</p>
</li>
<li>
<p><strong>summary_proj_to_labels</strong> (<code>bool</code>) &#x2014; If <code>True</code>, the projection outputs to <code>config.num_labels</code> classes
(otherwise to <code>config.hidden_size</code>).</p>
</li>
<li>
<p><strong>summary_activation</strong> (<code>Optional[str]</code>) &#x2014; Set to <code>&quot;tanh&quot;</code> to add a tanh activation to the output,
another string or <code>None</code> will add no activation.</p>
</li>
<li>
<p><strong>summary_first_dropout</strong> (<code>float</code>) &#x2014; Optional dropout probability before the projection and activation.</p>
</li>
<li>
<p><strong>summary_last_dropout</strong> (<code>float</code>)&#x2014; Optional dropout probability after the projection and activation.</p>
</li>
</ul>`,name:"config"}]}}),ot=new T({props:{name:"forward",anchor:"transformers.modeling_utils.SequenceSummary.forward",parameters:[{name:"hidden_states",val:": FloatTensor"},{name:"cls_index",val:": typing.Optional[torch.LongTensor] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L2247",parametersDescription:[{anchor:"transformers.modeling_utils.SequenceSummary.forward.hidden_states",description:`<strong>hidden_states</strong> (<code>torch.FloatTensor</code> of shape <code>[batch_size, seq_len, hidden_size]</code>) &#x2014;
The hidden states of the last layer.`,name:"hidden_states"},{anchor:"transformers.modeling_utils.SequenceSummary.forward.cls_index",description:`<strong>cls_index</strong> (<code>torch.LongTensor</code> of shape <code>[batch_size]</code> or <code>[batch_size, ...]</code> where &#x2026; are optional leading dimensions of <code>hidden_states</code>, <em>optional</em>) &#x2014;
Used if <code>summary_type == &quot;cls_index&quot;</code> and takes the last token of the sequence as classification token.`,name:"cls_index"}],returnDescription:`
<p>The summary of the sequence hidden states.</p>
`,returnType:`
<p><code>torch.FloatTensor</code></p>
`}}),st=new eo({}),nt=new T({props:{name:"transformers.apply_chunking_to_forward",anchor:"transformers.apply_chunking_to_forward",parameters:[{name:"forward_fn",val:": typing.Callable[..., torch.Tensor]"},{name:"chunk_size",val:": int"},{name:"chunk_dim",val:": int"},{name:"*input_tensors",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L2396",parametersDescription:[{anchor:"transformers.apply_chunking_to_forward.forward_fn",description:`<strong>forward_fn</strong> (<code>Callable[..., torch.Tensor]</code>) &#x2014;
The forward function of the model.`,name:"forward_fn"},{anchor:"transformers.apply_chunking_to_forward.chunk_size",description:`<strong>chunk_size</strong> (<code>int</code>) &#x2014;
The chunk size of a chunked tensor: <code>num_chunks = len(input_tensors[0]) / chunk_size</code>.`,name:"chunk_size"},{anchor:"transformers.apply_chunking_to_forward.chunk_dim",description:`<strong>chunk_dim</strong> (<code>int</code>) &#x2014;
The dimension over which the <code>input_tensors</code> should be chunked.`,name:"chunk_dim"},{anchor:"transformers.apply_chunking_to_forward.input_tensors",description:`<strong>input_tensors</strong> (<code>Tuple[torch.Tensor]</code>) &#x2014;
The input tensors of <code>forward_fn</code> which will be chunked`,name:"input_tensors"}],returnDescription:`
<p>A tensor with the same shape as the <code>forward_fn</code> would have given if applied\`.</p>
`,returnType:`
<p><code>torch.Tensor</code></p>
`}}),rt=new Wi({props:{codee:`# rename the usual forward() fn to forward_chunk()
def forward_chunk(self, hidden_states):
    hidden_states = self.decoder(hidden_states)
    return hidden_states


# implement a chunked forward function
def forward(self, hidden_states):
    return apply_chunking_to_forward(self.forward_chunk, self.chunk_size_lm_head, self.seq_len_dim, hidden_states),`,highlighted:`<span class="hljs-comment"># rename the usual forward() fn to forward_chunk()</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">forward_chunk</span>(<span class="hljs-params">self, hidden_states</span>):
    hidden_states = self.decoder(hidden_states)
    <span class="hljs-keyword">return</span> hidden_states


<span class="hljs-comment"># implement a chunked forward function</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, hidden_states</span>):
    <span class="hljs-keyword">return</span> apply_chunking_to_forward(self.forward_chunk, self.chunk_size_lm_head, self.seq_len_dim, hidden_states)`}}),at=new T({props:{name:"transformers.modeling_utils.find_pruneable_heads_and_indices",anchor:"transformers.modeling_utils.find_pruneable_heads_and_indices",parameters:[{name:"heads",val:": typing.List[int]"},{name:"n_heads",val:": int"},{name:"head_size",val:": int"},{name:"already_pruned_heads",val:": typing.Set[int]"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L95",parametersDescription:[{anchor:"transformers.modeling_utils.find_pruneable_heads_and_indices.heads",description:"<strong>heads</strong> (<code>List[int]</code>) &#x2014; List of the indices of heads to prune.",name:"heads"},{anchor:"transformers.modeling_utils.find_pruneable_heads_and_indices.n_heads",description:"<strong>n_heads</strong> (<code>int</code>) &#x2014; The number of heads in the model.",name:"n_heads"},{anchor:"transformers.modeling_utils.find_pruneable_heads_and_indices.head_size",description:"<strong>head_size</strong> (<code>int</code>) &#x2014; The size of each head.",name:"head_size"},{anchor:"transformers.modeling_utils.find_pruneable_heads_and_indices.already_pruned_heads",description:"<strong>already_pruned_heads</strong> (<code>Set[int]</code>) &#x2014; A set of already pruned heads.",name:"already_pruned_heads"}],returnDescription:`
<p>A tuple with the remaining heads and their corresponding indices.</p>
`,returnType:`
<p><code>Tuple[Set[int], torch.LongTensor]</code></p>
`}}),lt=new T({props:{name:"transformers.prune_layer",anchor:"transformers.prune_layer",parameters:[{name:"layer",val:": typing.Union[torch.nn.modules.linear.Linear, transformers.modeling_utils.Conv1D]"},{name:"index",val:": LongTensor"},{name:"dim",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L2372",parametersDescription:[{anchor:"transformers.prune_layer.layer",description:"<strong>layer</strong> (<code>Union[torch.nn.Linear, Conv1D]</code>) &#x2014; The layer to prune.",name:"layer"},{anchor:"transformers.prune_layer.index",description:"<strong>index</strong> (<code>torch.LongTensor</code>) &#x2014; The indices to keep in the layer.",name:"index"},{anchor:"transformers.prune_layer.dim",description:"<strong>dim</strong> (<code>int</code>, <em>optional</em>) &#x2014; The dimension on which to keep the indices.",name:"dim"}],returnDescription:`
<p>The pruned layer as a new layer with <code>requires_grad=True</code>.</p>
`,returnType:`
<p><code>torch.nn.Linear</code> or <a
  href="/docs/transformers/master/en/internal/modeling_utils#transformers.Conv1D"
>Conv1D</a></p>
`}}),dt=new T({props:{name:"transformers.modeling_utils.prune_conv1d_layer",anchor:"transformers.modeling_utils.prune_conv1d_layer",parameters:[{name:"layer",val:": Conv1D"},{name:"index",val:": LongTensor"},{name:"dim",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L2339",parametersDescription:[{anchor:"transformers.modeling_utils.prune_conv1d_layer.layer",description:'<strong>layer</strong> (<a href="/docs/transformers/master/en/internal/modeling_utils#transformers.Conv1D">Conv1D</a>) &#x2014; The layer to prune.',name:"layer"},{anchor:"transformers.modeling_utils.prune_conv1d_layer.index",description:"<strong>index</strong> (<code>torch.LongTensor</code>) &#x2014; The indices to keep in the layer.",name:"index"},{anchor:"transformers.modeling_utils.prune_conv1d_layer.dim",description:"<strong>dim</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014; The dimension on which to keep the indices.",name:"dim"}],returnDescription:`
<p>The pruned layer as a new layer with <code>requires_grad=True</code>.</p>
`,returnType:`
<p><a
  href="/docs/transformers/master/en/internal/modeling_utils#transformers.Conv1D"
>Conv1D</a></p>
`}}),ct=new T({props:{name:"transformers.modeling_utils.prune_linear_layer",anchor:"transformers.modeling_utils.prune_linear_layer",parameters:[{name:"layer",val:": Linear"},{name:"index",val:": LongTensor"},{name:"dim",val:": int = 0"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L2305",parametersDescription:[{anchor:"transformers.modeling_utils.prune_linear_layer.layer",description:"<strong>layer</strong> (<code>torch.nn.Linear</code>) &#x2014; The layer to prune.",name:"layer"},{anchor:"transformers.modeling_utils.prune_linear_layer.index",description:"<strong>index</strong> (<code>torch.LongTensor</code>) &#x2014; The indices to keep in the layer.",name:"index"},{anchor:"transformers.modeling_utils.prune_linear_layer.dim",description:"<strong>dim</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014; The dimension on which to keep the indices.",name:"dim"}],returnDescription:`
<p>The pruned layer as a new layer with <code>requires_grad=True</code>.</p>
`,returnType:`
<p><code>torch.nn.Linear</code></p>
`}}),mt=new eo({}),ft=new T({props:{name:"class transformers.modeling_tf_utils.TFConv1D",anchor:"transformers.modeling_tf_utils.TFConv1D",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L1767",parametersDescription:[{anchor:"transformers.modeling_tf_utils.TFConv1D.nf",description:`<strong>nf</strong> (<code>int</code>) &#x2014;
The number of output features.`,name:"nf"},{anchor:"transformers.modeling_tf_utils.TFConv1D.nx",description:`<strong>nx</strong> (<code>int</code>) &#x2014;
The number of input features.`,name:"nx"},{anchor:"transformers.modeling_tf_utils.TFConv1D.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation to use to initialize the weights.
kwargs &#x2014;
Additional keyword arguments passed along to the <code>__init__</code> of <code>tf.keras.layers.Layer</code>.`,name:"initializer_range"}]}}),pt=new T({props:{name:"class transformers.TFSharedEmbeddings",anchor:"transformers.TFSharedEmbeddings",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L1807",parametersDescription:[{anchor:"transformers.TFSharedEmbeddings.vocab_size",description:`<strong>vocab_size</strong> (<code>int</code>) &#x2014;
The size of the vocabulary, e.g., the number of unique tokens.`,name:"vocab_size"},{anchor:"transformers.TFSharedEmbeddings.hidden_size",description:`<strong>hidden_size</strong> (<code>int</code>) &#x2014;
The size of the embedding vectors.`,name:"hidden_size"},{anchor:"transformers.TFSharedEmbeddings.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>) &#x2014;
The standard deviation to use when initializing the weights. If no value is provided, it will default to
{@html &quot;<span class="\\&quot;katex\\&quot;"><span class="\\&quot;katex-mathml\\&quot;"><math xmlns="\\&quot;http://www.w3.org/1998/Math/MathML\\&quot;"><semantics><mrow><mn>1</mn><mi mathvariant="\\&quot;normal\\&quot;">/</mi><msqrt><mrow><mi>h</mi><mi>i</mi><mi>d</mi><mi>d</mi><mi>e</mi><mi>n</mi><mi mathvariant="\\&quot;normal\\&quot;">_</mi><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi></mrow></msqrt></mrow><annotation encoding="\\&quot;application/x-tex\\&quot;">1/\\\\sqrt{hidden\\\\_size}</annotation></semantics></math></span><span class="\\&quot;katex-html\\&quot;" aria-hidden="\\&quot;true\\&quot;"><span class="\\&quot;base\\&quot;"><span class="\\&quot;strut\\&quot;" style="\\&quot;height:1.24em;vertical-align:-0.3628em;\\&quot;"></span><span class="\\&quot;mord\\&quot;">1/</span><span class="\\&quot;mord" sqrt\\"><span class="\\&quot;vlist-t" vlist-t2\\"><span class="\\&quot;vlist-r\\&quot;"><span class="\\&quot;vlist\\&quot;" style="\\&quot;height:0.8772em;\\&quot;"><span class="\\&quot;svg-align\\&quot;" style="\\&quot;top:-3.2em;\\&quot;"><span class="\\&quot;pstrut\\&quot;" style="\\&quot;height:3.2em;\\&quot;"></span><span class="\\&quot;mord\\&quot;" style="\\&quot;padding-left:1em;\\&quot;"><span class="\\&quot;mord" mathnormal\\">hi</span><span class="\\&quot;mord" mathnormal\\">dd</span><span class="\\&quot;mord" mathnormal\\">e</span><span class="\\&quot;mord" mathnormal\\">n</span><span class="\\&quot;mord\\&quot;" style="\\&quot;margin-right:0.02778em;\\&quot;">_</span><span class="\\&quot;mord" mathnormal\\">s</span><span class="\\&quot;mord" mathnormal\\">i</span><span class="\\&quot;mord" mathnormal\\">ze</span></span></span><span style="\\&quot;top:-2.8372em;\\&quot;"><span class="\\&quot;pstrut\\&quot;" style="\\&quot;height:3.2em;\\&quot;"></span><span class="\\&quot;hide-tail\\&quot;" style="\\&quot;min-width:1.02em;height:1.28em;\\&quot;"><svg xmlns="\\&quot;http://www.w3.org/2000/svg\\&quot;" width="400em" height="1.28em" viewBox="0 0 400000 1296" preserveAspectRatio="xMinYMin slice"><path d="M263,681c0.7,0,18,39.7,52,119\\nc34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120\\nc340,-704.7,510.7,-1060.3,512,-1067\\nl0 -0\\nc4.7,-7.3,11,-11,19,-11\\nH40000v40H1012.3\\ns-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232\\nc-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1\\ns-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26\\nc-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z\\nM1001 80h400000v40h-400000z"/></svg></span></span></span><span class="\\&quot;vlist-s\\&quot;">&#x200B;</span></span><span class="\\&quot;vlist-r\\&quot;"><span class="\\&quot;vlist\\&quot;" style="\\&quot;height:0.3628em;\\&quot;"><span></span></span></span></span></span></span></span></span>&quot;}.
kwargs &#x2014;
Additional keyword arguments passed along to the <code>__init__</code> of <code>tf.keras.layers.Layer</code>.`,name:"initializer_range"}]}}),ut=new T({props:{name:"call",anchor:"transformers.TFSharedEmbeddings.call",parameters:[{name:"inputs",val:": Tensor"},{name:"mode",val:": str = 'embedding'"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L1852",parametersDescription:[{anchor:"transformers.TFSharedEmbeddings.call.inputs",description:`<strong>inputs</strong> (<code>tf.Tensor</code>) &#x2014;
In embedding mode, should be an int64 tensor with shape <code>[batch_size, length]</code>.</p>
<p>In linear mode, should be a float tensor with shape <code>[batch_size, length, hidden_size]</code>.`,name:"inputs"},{anchor:"transformers.TFSharedEmbeddings.call.mode",description:`<strong>mode</strong> (<code>str</code>, defaults to <code>&quot;embedding&quot;</code>) &#x2014;
A valid value is either <code>&quot;embedding&quot;</code> or <code>&quot;linear&quot;</code>, the first one indicates that the layer should be
used as an embedding layer, the second one that the layer should be used as a linear decoder.`,name:"mode"}],returnDescription:`
<p>In embedding mode, the output is a float32 embedding tensor, with shape <code>[batch_size, length, embedding_size]</code>.</p>
<p>In linear mode, the output is a float32 with shape <code>[batch_size, length, vocab_size]</code>.</p>
`}}),_t=new T({props:{name:"class transformers.TFSequenceSummary",anchor:"transformers.TFSequenceSummary",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L1905",parametersDescription:[{anchor:"transformers.TFSequenceSummary.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The config used by the model. Relevant arguments in the config class of the model are (refer to the actual
config class of your model for the default values it uses):</p>
<ul>
<li>
<p><strong>summary_type</strong> (<code>str</code>) &#x2014; The method to use to make this summary. Accepted values are:</p>
<ul>
<li><code>&quot;last&quot;</code> &#x2014; Take the last token hidden state (like XLNet)</li>
<li><code>&quot;first&quot;</code> &#x2014; Take the first token hidden state (like Bert)</li>
<li><code>&quot;mean&quot;</code> &#x2014; Take the mean of all tokens hidden states</li>
<li><code>&quot;cls_index&quot;</code> &#x2014; Supply a Tensor of classification token position (GPT/GPT-2)</li>
<li><code>&quot;attn&quot;</code> &#x2014; Not implemented now, use multi-head attention</li>
</ul>
</li>
<li>
<p><strong>summary_use_proj</strong> (<code>bool</code>) &#x2014; Add a projection after the vector extraction.</p>
</li>
<li>
<p><strong>summary_proj_to_labels</strong> (<code>bool</code>) &#x2014; If <code>True</code>, the projection outputs to <code>config.num_labels</code> classes
(otherwise to <code>config.hidden_size</code>).</p>
</li>
<li>
<p><strong>summary_activation</strong> (<code>Optional[str]</code>) &#x2014; Set to <code>&quot;tanh&quot;</code> to add a tanh activation to the output,
another string or <code>None</code> will add no activation.</p>
</li>
<li>
<p><strong>summary_first_dropout</strong> (<code>float</code>) &#x2014; Optional dropout probability before the projection and activation.</p>
</li>
<li>
<p><strong>summary_last_dropout</strong> (<code>float</code>)&#x2014; Optional dropout probability after the projection and activation.</p>
</li>
</ul>`,name:"config"},{anchor:"transformers.TFSequenceSummary.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, defaults to 0.02) &#x2014; The standard deviation to use to initialize the weights.
kwargs &#x2014;
Additional keyword arguments passed along to the <code>__init__</code> of <code>tf.keras.layers.Layer</code>.`,name:"initializer_range"}]}}),vt=new T({props:{name:"register_for_auto_class",anchor:"transformers.TFSequenceSummary.register_for_auto_class",parameters:[{name:"auto_class",val:" = 'TFAutoModel'"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L2018",parametersDescription:[{anchor:"transformers.TFSequenceSummary.register_for_auto_class.auto_class",description:`<strong>auto_class</strong> (<code>str</code> or <code>type</code>, <em>optional</em>, defaults to <code>&quot;TFAutoModel&quot;</code>) &#x2014;
The auto class to register this new model with.`,name:"auto_class"}]}}),$t=new eo({}),bt=new T({props:{name:"class transformers.modeling_tf_utils.TFCausalLanguageModelingLoss",anchor:"transformers.modeling_tf_utils.TFCausalLanguageModelingLoss",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L168"}}),Ne=new is({props:{$$slots:{default:[Yi]},$$scope:{ctx:F}}}),yt=new T({props:{name:"class transformers.modeling_tf_utils.TFMaskedLanguageModelingLoss",anchor:"transformers.modeling_tf_utils.TFMaskedLanguageModelingLoss",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L259"}}),He=new is({props:{$$slots:{default:[Zi]},$$scope:{ctx:F}}}),wt=new T({props:{name:"class transformers.modeling_tf_utils.TFMultipleChoiceLoss",anchor:"transformers.modeling_tf_utils.TFMultipleChoiceLoss",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L249"}}),Tt=new T({props:{name:"class transformers.modeling_tf_utils.TFQuestionAnsweringLoss",anchor:"transformers.modeling_tf_utils.TFQuestionAnsweringLoss",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L190"}}),kt=new T({props:{name:"class transformers.modeling_tf_utils.TFSequenceClassificationLoss",anchor:"transformers.modeling_tf_utils.TFSequenceClassificationLoss",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L233"}}),Et=new T({props:{name:"class transformers.modeling_tf_utils.TFTokenClassificationLoss",anchor:"transformers.modeling_tf_utils.TFTokenClassificationLoss",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L205"}}),Me=new is({props:{$$slots:{default:[el]},$$scope:{ctx:F}}}),qt=new eo({}),Dt=new T({props:{name:"transformers.modeling_tf_utils.get_initializer",anchor:"transformers.modeling_tf_utils.get_initializer",parameters:[{name:"initializer_range",val:": float = 0.02"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L2062",parametersDescription:[{anchor:"transformers.modeling_tf_utils.get_initializer.initializer_range",description:"<strong>initializer_range</strong> (<em>float</em>, defaults to 0.02) &#x2014; Standard deviation of the initializer range.",name:"initializer_range"}],returnDescription:`
<p>The truncated normal initializer.</p>
`,returnType:`
<p><code>tf.initializers.TruncatedNormal</code></p>
`}}),Lt=new T({props:{name:"transformers.modeling_tf_utils.keras_serializable",anchor:"transformers.modeling_tf_utils.keras_serializable",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L103",parametersDescription:[{anchor:"transformers.modeling_tf_utils.keras_serializable.cls",description:`<strong>cls</strong> (a <code>tf.keras.layers.Layers subclass</code>) &#x2014;
Typically a <code>TF.MainLayer</code> class in this project, in general must accept a <code>config</code> argument to its
initializer.`,name:"cls"}],returnDescription:`
<p>The same class object, with modifications for Keras deserialization.</p>
`}}),Pt=new T({props:{name:"transformers.shape_list",anchor:"transformers.shape_list",parameters:[{name:"tensor",val:": typing.Union[tensorflow.python.framework.ops.Tensor, numpy.ndarray]"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L2039",parametersDescription:[{anchor:"transformers.shape_list.tensor",description:"<strong>tensor</strong> (<code>tf.Tensor</code> or <code>np.ndarray</code>) &#x2014; The tensor we want the shape of.",name:"tensor"}],returnDescription:`
<p>The shape of the tensor as a list.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),{c(){f=s("meta"),k=l(),b=s("h1"),w=s("a"),A=s("span"),u(q.$$.fragment),G=l(),O=s("span"),x=a("Custom Layers and Utilities"),j=l(),z=s("p"),L=a("This page lists all the custom layers used by the library, as well as the utility functions it provides for modeling."),Q=l(),S=s("p"),P=a("Most of those are only useful if you are studying the code of the models in the library."),B=l(),D=s("h2"),E=s("a"),y=s("span"),u(I.$$.fragment),fe=l(),K=s("span"),pe=a("Pytorch custom modules"),ie=l(),R=s("div"),u(Be.$$.fragment),on=l(),to=s("p"),sn=a("1D-convolutional layer as defined by Radford et al. for OpenAI GPT (and also used in GPT-2)."),nn=l(),oo=s("p"),rn=a("Basically works like a linear layer but the weights are transposed."),ls=l(),U=s("div"),u(Ge.$$.fragment),an=l(),so=s("p"),ln=a("Compute SQuAD start logits from sequence hidden states."),dn=l(),zt=s("div"),u(Ke.$$.fragment),ds=l(),W=s("div"),u(Re.$$.fragment),cn=l(),no=s("p"),mn=a("Compute SQuAD end logits from sequence hidden states."),fn=l(),Le=s("div"),u(Ue.$$.fragment),pn=l(),u(Pe.$$.fragment),cs=l(),X=s("div"),u(We.$$.fragment),un=l(),ro=s("p"),hn=a("Compute SQuAD 2.0 answer class from classification and start tokens hidden states."),gn=l(),Ce=s("div"),u(Xe.$$.fragment),_n=l(),u(ze.$$.fragment),ms=l(),ue=s("div"),u(Je.$$.fragment),vn=l(),Ye=s("p"),$n=a("Base class for outputs of question answering models using a "),St=s("a"),bn=a("SQuADHead"),yn=a("."),fs=l(),J=s("div"),u(Ze.$$.fragment),wn=l(),ao=s("p"),Tn=a("A SQuAD head inspired by XLNet."),kn=l(),Ft=s("div"),u(et.$$.fragment),ps=l(),Y=s("div"),u(tt.$$.fragment),En=l(),io=s("p"),qn=a("Compute a single vector summary of a sequence hidden states."),Dn=l(),Se=s("div"),u(ot.$$.fragment),xn=l(),lo=s("p"),Ln=a("Compute a single vector summary of a sequence hidden states."),us=l(),he=s("h2"),Fe=s("a"),co=s("span"),u(st.$$.fragment),Pn=l(),mo=s("span"),Cn=a("PyTorch Helper Functions"),hs=l(),C=s("div"),u(nt.$$.fragment),zn=l(),N=s("p"),Sn=a("This function chunks the "),fo=s("code"),Fn=a("input_tensors"),An=a(" into smaller input tensor parts of size "),po=s("code"),On=a("chunk_size"),In=a(` over the dimension
`),uo=s("code"),Nn=a("chunk_dim"),Hn=a(". It then applies a layer "),ho=s("code"),Mn=a("forward_fn"),Vn=a(" to each chunk independently to save memory."),jn=l(),H=s("p"),Qn=a("If the "),go=s("code"),Bn=a("forward_fn"),Gn=a(" is independent across the "),_o=s("code"),Kn=a("chunk_dim"),Rn=a(` this function will yield the same result as directly
applying `),vo=s("code"),Un=a("forward_fn"),Wn=a(" to "),$o=s("code"),Xn=a("input_tensors"),Jn=a("."),Yn=l(),bo=s("p"),Zn=a("Examples:"),er=l(),u(rt.$$.fragment),gs=l(),ge=s("div"),u(at.$$.fragment),tr=l(),it=s("p"),or=a("Finds the heads and their indices taking "),yo=s("code"),sr=a("already_pruned_heads"),nr=a(" into account."),_s=l(),Z=s("div"),u(lt.$$.fragment),rr=l(),wo=s("p"),ar=a("Prune a Conv1D or linear layer to keep only entries in index."),ir=l(),To=s("p"),lr=a("Used to remove heads."),vs=l(),ee=s("div"),u(dt.$$.fragment),dr=l(),ko=s("p"),cr=a(`Prune a Conv1D layer to keep only entries in index. A Conv1D work as a Linear layer (see e.g. BERT) but the weights
are transposed.`),mr=l(),Eo=s("p"),fr=a("Used to remove heads."),$s=l(),te=s("div"),u(ct.$$.fragment),pr=l(),qo=s("p"),ur=a("Prune a linear layer to keep only entries in index."),hr=l(),Do=s("p"),gr=a("Used to remove heads."),bs=l(),_e=s("h2"),Ae=s("a"),xo=s("span"),u(mt.$$.fragment),_r=l(),Lo=s("span"),vr=a("TensorFlow custom layers"),ys=l(),oe=s("div"),u(ft.$$.fragment),$r=l(),Po=s("p"),br=a("1D-convolutional layer as defined by Radford et al. for OpenAI GPT (and also used in GPT-2)."),yr=l(),Co=s("p"),wr=a("Basically works like a linear layer but the weights are transposed."),ws=l(),M=s("div"),u(pt.$$.fragment),Tr=l(),zo=s("p"),kr=a("Construct shared token embeddings."),Er=l(),So=s("p"),qr=a(`The weights of the embedding layer is usually shared with the weights of the linear decoder when doing language
modeling.`),Dr=l(),le=s("div"),u(ut.$$.fragment),xr=l(),Fo=s("p"),Lr=a("Get token embeddings of inputs or decode final hidden state."),Pr=l(),ht=s("p"),Cr=a(`Shared weights logic is adapted from
`),gt=s("a"),zr=a("here"),Sr=a("."),Ts=l(),se=s("div"),u(_t.$$.fragment),Fr=l(),Ao=s("p"),Ar=a("Compute a single vector summary of a sequence hidden states."),Or=l(),Oe=s("div"),u(vt.$$.fragment),Ir=l(),Oo=s("p"),Nr=a(`Register this class with a given auto class. This should only be used for custom models as the ones in the
library are already mapped with an auto class.`),ks=l(),ve=s("h2"),Ie=s("a"),Io=s("span"),u($t.$$.fragment),Hr=l(),No=s("span"),Mr=a("TensorFlow loss functions"),Es=l(),ne=s("div"),u(bt.$$.fragment),Vr=l(),Ho=s("p"),jr=a("Loss function suitable for causal language modeling (CLM), that is, the task of guessing the next token."),Qr=l(),u(Ne.$$.fragment),qs=l(),re=s("div"),u(yt.$$.fragment),Br=l(),Mo=s("p"),Gr=a("Loss function suitable for masked language modeling (MLM), that is, the task of guessing the masked tokens."),Kr=l(),u(He.$$.fragment),Ds=l(),$e=s("div"),u(wt.$$.fragment),Rr=l(),Vo=s("p"),Ur=a("Loss function suitable for multiple choice tasks."),xs=l(),be=s("div"),u(Tt.$$.fragment),Wr=l(),jo=s("p"),Xr=a("Loss function suitable for question answering."),Ls=l(),ye=s("div"),u(kt.$$.fragment),Jr=l(),Qo=s("p"),Yr=a("Loss function suitable for sequence classification."),Ps=l(),ae=s("div"),u(Et.$$.fragment),Zr=l(),Bo=s("p"),ea=a("Loss function suitable for token classification."),ta=l(),u(Me.$$.fragment),Cs=l(),we=s("h2"),Ve=s("a"),Go=s("span"),u(qt.$$.fragment),oa=l(),Ko=s("span"),sa=a("TensorFlow Helper Functions"),zs=l(),Te=s("div"),u(Dt.$$.fragment),na=l(),xt=s("p"),ra=a("Creates a "),Ro=s("code"),aa=a("tf.initializers.TruncatedNormal"),ia=a(" with the given range."),Ss=l(),V=s("div"),u(Lt.$$.fragment),la=l(),Uo=s("p"),da=a("Decorate a Keras Layer class to support Keras serialization."),ca=l(),Wo=s("p"),ma=a("This is done by:"),fa=l(),ke=s("ol"),Ee=s("li"),pa=a("Adding a "),Xo=s("code"),ua=a("transformers_config"),ha=a(" dict to the Keras config dictionary in "),Jo=s("code"),ga=a("get_config"),_a=a(` (called by Keras at
serialization time.`),va=l(),qe=s("li"),$a=a("Wrapping "),Yo=s("code"),ba=a("__init__"),ya=a(" to accept that "),Zo=s("code"),wa=a("transformers_config"),Ta=a(` dict (passed by Keras at deserialization time) and
convert it to a config object for the actual layer initializer.`),ka=l(),De=s("li"),Ea=a(`Registering the class as a custom object in Keras (if the Tensorflow version supports this), so that it does not
need to be supplied in `),es=s("code"),qa=a("custom_objects"),Da=a(" in the call to "),ts=s("code"),xa=a("tf.keras.models.load_model"),La=a("."),Fs=l(),xe=s("div"),u(Pt.$$.fragment),Pa=l(),os=s("p"),Ca=a("Deal with dynamic shape in tensorflow cleanly."),this.h()},l(e){const c=Ui('[data-svelte="svelte-1phssyn"]',document.head);f=n(c,"META",{name:!0,content:!0}),c.forEach(o),k=d(e),b=n(e,"H1",{class:!0});var Ct=r(b);w=n(Ct,"A",{id:!0,class:!0,href:!0});var ss=r(w);A=n(ss,"SPAN",{});var ns=r(A);h(q.$$.fragment,ns),ns.forEach(o),ss.forEach(o),G=d(Ct),O=n(Ct,"SPAN",{});var rs=r(O);x=i(rs,"Custom Layers and Utilities"),rs.forEach(o),Ct.forEach(o),j=d(e),z=n(e,"P",{});var as=r(z);L=i(as,"This page lists all the custom layers used by the library, as well as the utility functions it provides for modeling."),as.forEach(o),Q=d(e),S=n(e,"P",{});var za=r(S);P=i(za,"Most of those are only useful if you are studying the code of the models in the library."),za.forEach(o),B=d(e),D=n(e,"H2",{class:!0});var Os=r(D);E=n(Os,"A",{id:!0,class:!0,href:!0});var Sa=r(E);y=n(Sa,"SPAN",{});var Fa=r(y);h(I.$$.fragment,Fa),Fa.forEach(o),Sa.forEach(o),fe=d(Os),K=n(Os,"SPAN",{});var Aa=r(K);pe=i(Aa,"Pytorch custom modules"),Aa.forEach(o),Os.forEach(o),ie=d(e),R=n(e,"DIV",{class:!0});var At=r(R);h(Be.$$.fragment,At),on=d(At),to=n(At,"P",{});var Oa=r(to);sn=i(Oa,"1D-convolutional layer as defined by Radford et al. for OpenAI GPT (and also used in GPT-2)."),Oa.forEach(o),nn=d(At),oo=n(At,"P",{});var Ia=r(oo);rn=i(Ia,"Basically works like a linear layer but the weights are transposed."),Ia.forEach(o),At.forEach(o),ls=d(e),U=n(e,"DIV",{class:!0});var Ot=r(U);h(Ge.$$.fragment,Ot),an=d(Ot),so=n(Ot,"P",{});var Na=r(so);ln=i(Na,"Compute SQuAD start logits from sequence hidden states."),Na.forEach(o),dn=d(Ot),zt=n(Ot,"DIV",{class:!0});var Ha=r(zt);h(Ke.$$.fragment,Ha),Ha.forEach(o),Ot.forEach(o),ds=d(e),W=n(e,"DIV",{class:!0});var It=r(W);h(Re.$$.fragment,It),cn=d(It),no=n(It,"P",{});var Ma=r(no);mn=i(Ma,"Compute SQuAD end logits from sequence hidden states."),Ma.forEach(o),fn=d(It),Le=n(It,"DIV",{class:!0});var Is=r(Le);h(Ue.$$.fragment,Is),pn=d(Is),h(Pe.$$.fragment,Is),Is.forEach(o),It.forEach(o),cs=d(e),X=n(e,"DIV",{class:!0});var Nt=r(X);h(We.$$.fragment,Nt),un=d(Nt),ro=n(Nt,"P",{});var Va=r(ro);hn=i(Va,"Compute SQuAD 2.0 answer class from classification and start tokens hidden states."),Va.forEach(o),gn=d(Nt),Ce=n(Nt,"DIV",{class:!0});var Ns=r(Ce);h(Xe.$$.fragment,Ns),_n=d(Ns),h(ze.$$.fragment,Ns),Ns.forEach(o),Nt.forEach(o),ms=d(e),ue=n(e,"DIV",{class:!0});var Hs=r(ue);h(Je.$$.fragment,Hs),vn=d(Hs),Ye=n(Hs,"P",{});var Ms=r(Ye);$n=i(Ms,"Base class for outputs of question answering models using a "),St=n(Ms,"A",{href:!0});var ja=r(St);bn=i(ja,"SQuADHead"),ja.forEach(o),yn=i(Ms,"."),Ms.forEach(o),Hs.forEach(o),fs=d(e),J=n(e,"DIV",{class:!0});var Ht=r(J);h(Ze.$$.fragment,Ht),wn=d(Ht),ao=n(Ht,"P",{});var Qa=r(ao);Tn=i(Qa,"A SQuAD head inspired by XLNet."),Qa.forEach(o),kn=d(Ht),Ft=n(Ht,"DIV",{class:!0});var Ba=r(Ft);h(et.$$.fragment,Ba),Ba.forEach(o),Ht.forEach(o),ps=d(e),Y=n(e,"DIV",{class:!0});var Mt=r(Y);h(tt.$$.fragment,Mt),En=d(Mt),io=n(Mt,"P",{});var Ga=r(io);qn=i(Ga,"Compute a single vector summary of a sequence hidden states."),Ga.forEach(o),Dn=d(Mt),Se=n(Mt,"DIV",{class:!0});var Vs=r(Se);h(ot.$$.fragment,Vs),xn=d(Vs),lo=n(Vs,"P",{});var Ka=r(lo);Ln=i(Ka,"Compute a single vector summary of a sequence hidden states."),Ka.forEach(o),Vs.forEach(o),Mt.forEach(o),us=d(e),he=n(e,"H2",{class:!0});var js=r(he);Fe=n(js,"A",{id:!0,class:!0,href:!0});var Ra=r(Fe);co=n(Ra,"SPAN",{});var Ua=r(co);h(st.$$.fragment,Ua),Ua.forEach(o),Ra.forEach(o),Pn=d(js),mo=n(js,"SPAN",{});var Wa=r(mo);Cn=i(Wa,"PyTorch Helper Functions"),Wa.forEach(o),js.forEach(o),hs=d(e),C=n(e,"DIV",{class:!0});var de=r(C);h(nt.$$.fragment,de),zn=d(de),N=n(de,"P",{});var ce=r(N);Sn=i(ce,"This function chunks the "),fo=n(ce,"CODE",{});var Xa=r(fo);Fn=i(Xa,"input_tensors"),Xa.forEach(o),An=i(ce," into smaller input tensor parts of size "),po=n(ce,"CODE",{});var Ja=r(po);On=i(Ja,"chunk_size"),Ja.forEach(o),In=i(ce,` over the dimension
`),uo=n(ce,"CODE",{});var Ya=r(uo);Nn=i(Ya,"chunk_dim"),Ya.forEach(o),Hn=i(ce,". It then applies a layer "),ho=n(ce,"CODE",{});var Za=r(ho);Mn=i(Za,"forward_fn"),Za.forEach(o),Vn=i(ce," to each chunk independently to save memory."),ce.forEach(o),jn=d(de),H=n(de,"P",{});var me=r(H);Qn=i(me,"If the "),go=n(me,"CODE",{});var ei=r(go);Bn=i(ei,"forward_fn"),ei.forEach(o),Gn=i(me," is independent across the "),_o=n(me,"CODE",{});var ti=r(_o);Kn=i(ti,"chunk_dim"),ti.forEach(o),Rn=i(me,` this function will yield the same result as directly
applying `),vo=n(me,"CODE",{});var oi=r(vo);Un=i(oi,"forward_fn"),oi.forEach(o),Wn=i(me," to "),$o=n(me,"CODE",{});var si=r($o);Xn=i(si,"input_tensors"),si.forEach(o),Jn=i(me,"."),me.forEach(o),Yn=d(de),bo=n(de,"P",{});var ni=r(bo);Zn=i(ni,"Examples:"),ni.forEach(o),er=d(de),h(rt.$$.fragment,de),de.forEach(o),gs=d(e),ge=n(e,"DIV",{class:!0});var Qs=r(ge);h(at.$$.fragment,Qs),tr=d(Qs),it=n(Qs,"P",{});var Bs=r(it);or=i(Bs,"Finds the heads and their indices taking "),yo=n(Bs,"CODE",{});var ri=r(yo);sr=i(ri,"already_pruned_heads"),ri.forEach(o),nr=i(Bs," into account."),Bs.forEach(o),Qs.forEach(o),_s=d(e),Z=n(e,"DIV",{class:!0});var Vt=r(Z);h(lt.$$.fragment,Vt),rr=d(Vt),wo=n(Vt,"P",{});var ai=r(wo);ar=i(ai,"Prune a Conv1D or linear layer to keep only entries in index."),ai.forEach(o),ir=d(Vt),To=n(Vt,"P",{});var ii=r(To);lr=i(ii,"Used to remove heads."),ii.forEach(o),Vt.forEach(o),vs=d(e),ee=n(e,"DIV",{class:!0});var jt=r(ee);h(dt.$$.fragment,jt),dr=d(jt),ko=n(jt,"P",{});var li=r(ko);cr=i(li,`Prune a Conv1D layer to keep only entries in index. A Conv1D work as a Linear layer (see e.g. BERT) but the weights
are transposed.`),li.forEach(o),mr=d(jt),Eo=n(jt,"P",{});var di=r(Eo);fr=i(di,"Used to remove heads."),di.forEach(o),jt.forEach(o),$s=d(e),te=n(e,"DIV",{class:!0});var Qt=r(te);h(ct.$$.fragment,Qt),pr=d(Qt),qo=n(Qt,"P",{});var ci=r(qo);ur=i(ci,"Prune a linear layer to keep only entries in index."),ci.forEach(o),hr=d(Qt),Do=n(Qt,"P",{});var mi=r(Do);gr=i(mi,"Used to remove heads."),mi.forEach(o),Qt.forEach(o),bs=d(e),_e=n(e,"H2",{class:!0});var Gs=r(_e);Ae=n(Gs,"A",{id:!0,class:!0,href:!0});var fi=r(Ae);xo=n(fi,"SPAN",{});var pi=r(xo);h(mt.$$.fragment,pi),pi.forEach(o),fi.forEach(o),_r=d(Gs),Lo=n(Gs,"SPAN",{});var ui=r(Lo);vr=i(ui,"TensorFlow custom layers"),ui.forEach(o),Gs.forEach(o),ys=d(e),oe=n(e,"DIV",{class:!0});var Bt=r(oe);h(ft.$$.fragment,Bt),$r=d(Bt),Po=n(Bt,"P",{});var hi=r(Po);br=i(hi,"1D-convolutional layer as defined by Radford et al. for OpenAI GPT (and also used in GPT-2)."),hi.forEach(o),yr=d(Bt),Co=n(Bt,"P",{});var gi=r(Co);wr=i(gi,"Basically works like a linear layer but the weights are transposed."),gi.forEach(o),Bt.forEach(o),ws=d(e),M=n(e,"DIV",{class:!0});var je=r(M);h(pt.$$.fragment,je),Tr=d(je),zo=n(je,"P",{});var _i=r(zo);kr=i(_i,"Construct shared token embeddings."),_i.forEach(o),Er=d(je),So=n(je,"P",{});var vi=r(So);qr=i(vi,`The weights of the embedding layer is usually shared with the weights of the linear decoder when doing language
modeling.`),vi.forEach(o),Dr=d(je),le=n(je,"DIV",{class:!0});var Gt=r(le);h(ut.$$.fragment,Gt),xr=d(Gt),Fo=n(Gt,"P",{});var $i=r(Fo);Lr=i($i,"Get token embeddings of inputs or decode final hidden state."),$i.forEach(o),Pr=d(Gt),ht=n(Gt,"P",{});var Ks=r(ht);Cr=i(Ks,`Shared weights logic is adapted from
`),gt=n(Ks,"A",{href:!0,rel:!0});var bi=r(gt);zr=i(bi,"here"),bi.forEach(o),Sr=i(Ks,"."),Ks.forEach(o),Gt.forEach(o),je.forEach(o),Ts=d(e),se=n(e,"DIV",{class:!0});var Kt=r(se);h(_t.$$.fragment,Kt),Fr=d(Kt),Ao=n(Kt,"P",{});var yi=r(Ao);Ar=i(yi,"Compute a single vector summary of a sequence hidden states."),yi.forEach(o),Or=d(Kt),Oe=n(Kt,"DIV",{class:!0});var Rs=r(Oe);h(vt.$$.fragment,Rs),Ir=d(Rs),Oo=n(Rs,"P",{});var wi=r(Oo);Nr=i(wi,`Register this class with a given auto class. This should only be used for custom models as the ones in the
library are already mapped with an auto class.`),wi.forEach(o),Rs.forEach(o),Kt.forEach(o),ks=d(e),ve=n(e,"H2",{class:!0});var Us=r(ve);Ie=n(Us,"A",{id:!0,class:!0,href:!0});var Ti=r(Ie);Io=n(Ti,"SPAN",{});var ki=r(Io);h($t.$$.fragment,ki),ki.forEach(o),Ti.forEach(o),Hr=d(Us),No=n(Us,"SPAN",{});var Ei=r(No);Mr=i(Ei,"TensorFlow loss functions"),Ei.forEach(o),Us.forEach(o),Es=d(e),ne=n(e,"DIV",{class:!0});var Rt=r(ne);h(bt.$$.fragment,Rt),Vr=d(Rt),Ho=n(Rt,"P",{});var qi=r(Ho);jr=i(qi,"Loss function suitable for causal language modeling (CLM), that is, the task of guessing the next token."),qi.forEach(o),Qr=d(Rt),h(Ne.$$.fragment,Rt),Rt.forEach(o),qs=d(e),re=n(e,"DIV",{class:!0});var Ut=r(re);h(yt.$$.fragment,Ut),Br=d(Ut),Mo=n(Ut,"P",{});var Di=r(Mo);Gr=i(Di,"Loss function suitable for masked language modeling (MLM), that is, the task of guessing the masked tokens."),Di.forEach(o),Kr=d(Ut),h(He.$$.fragment,Ut),Ut.forEach(o),Ds=d(e),$e=n(e,"DIV",{class:!0});var Ws=r($e);h(wt.$$.fragment,Ws),Rr=d(Ws),Vo=n(Ws,"P",{});var xi=r(Vo);Ur=i(xi,"Loss function suitable for multiple choice tasks."),xi.forEach(o),Ws.forEach(o),xs=d(e),be=n(e,"DIV",{class:!0});var Xs=r(be);h(Tt.$$.fragment,Xs),Wr=d(Xs),jo=n(Xs,"P",{});var Li=r(jo);Xr=i(Li,"Loss function suitable for question answering."),Li.forEach(o),Xs.forEach(o),Ls=d(e),ye=n(e,"DIV",{class:!0});var Js=r(ye);h(kt.$$.fragment,Js),Jr=d(Js),Qo=n(Js,"P",{});var Pi=r(Qo);Yr=i(Pi,"Loss function suitable for sequence classification."),Pi.forEach(o),Js.forEach(o),Ps=d(e),ae=n(e,"DIV",{class:!0});var Wt=r(ae);h(Et.$$.fragment,Wt),Zr=d(Wt),Bo=n(Wt,"P",{});var Ci=r(Bo);ea=i(Ci,"Loss function suitable for token classification."),Ci.forEach(o),ta=d(Wt),h(Me.$$.fragment,Wt),Wt.forEach(o),Cs=d(e),we=n(e,"H2",{class:!0});var Ys=r(we);Ve=n(Ys,"A",{id:!0,class:!0,href:!0});var zi=r(Ve);Go=n(zi,"SPAN",{});var Si=r(Go);h(qt.$$.fragment,Si),Si.forEach(o),zi.forEach(o),oa=d(Ys),Ko=n(Ys,"SPAN",{});var Fi=r(Ko);sa=i(Fi,"TensorFlow Helper Functions"),Fi.forEach(o),Ys.forEach(o),zs=d(e),Te=n(e,"DIV",{class:!0});var Zs=r(Te);h(Dt.$$.fragment,Zs),na=d(Zs),xt=n(Zs,"P",{});var en=r(xt);ra=i(en,"Creates a "),Ro=n(en,"CODE",{});var Ai=r(Ro);aa=i(Ai,"tf.initializers.TruncatedNormal"),Ai.forEach(o),ia=i(en," with the given range."),en.forEach(o),Zs.forEach(o),Ss=d(e),V=n(e,"DIV",{class:!0});var Qe=r(V);h(Lt.$$.fragment,Qe),la=d(Qe),Uo=n(Qe,"P",{});var Oi=r(Uo);da=i(Oi,"Decorate a Keras Layer class to support Keras serialization."),Oi.forEach(o),ca=d(Qe),Wo=n(Qe,"P",{});var Ii=r(Wo);ma=i(Ii,"This is done by:"),Ii.forEach(o),fa=d(Qe),ke=n(Qe,"OL",{});var Xt=r(ke);Ee=n(Xt,"LI",{});var Jt=r(Ee);pa=i(Jt,"Adding a "),Xo=n(Jt,"CODE",{});var Ni=r(Xo);ua=i(Ni,"transformers_config"),Ni.forEach(o),ha=i(Jt," dict to the Keras config dictionary in "),Jo=n(Jt,"CODE",{});var Hi=r(Jo);ga=i(Hi,"get_config"),Hi.forEach(o),_a=i(Jt,` (called by Keras at
serialization time.`),Jt.forEach(o),va=d(Xt),qe=n(Xt,"LI",{});var Yt=r(qe);$a=i(Yt,"Wrapping "),Yo=n(Yt,"CODE",{});var Mi=r(Yo);ba=i(Mi,"__init__"),Mi.forEach(o),ya=i(Yt," to accept that "),Zo=n(Yt,"CODE",{});var Vi=r(Zo);wa=i(Vi,"transformers_config"),Vi.forEach(o),Ta=i(Yt,` dict (passed by Keras at deserialization time) and
convert it to a config object for the actual layer initializer.`),Yt.forEach(o),ka=d(Xt),De=n(Xt,"LI",{});var Zt=r(De);Ea=i(Zt,`Registering the class as a custom object in Keras (if the Tensorflow version supports this), so that it does not
need to be supplied in `),es=n(Zt,"CODE",{});var ji=r(es);qa=i(ji,"custom_objects"),ji.forEach(o),Da=i(Zt," in the call to "),ts=n(Zt,"CODE",{});var Qi=r(ts);xa=i(Qi,"tf.keras.models.load_model"),Qi.forEach(o),La=i(Zt,"."),Zt.forEach(o),Xt.forEach(o),Qe.forEach(o),Fs=d(e),xe=n(e,"DIV",{class:!0});var tn=r(xe);h(Pt.$$.fragment,tn),Pa=d(tn),os=n(tn,"P",{});var Bi=r(os);Ca=i(Bi,"Deal with dynamic shape in tensorflow cleanly."),Bi.forEach(o),tn.forEach(o),this.h()},h(){p(f,"name","hf:doc:metadata"),p(f,"content",JSON.stringify(ol)),p(w,"id","custom-layers-and-utilities"),p(w,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(w,"href","#custom-layers-and-utilities"),p(b,"class","relative group"),p(E,"id","transformers.Conv1D"),p(E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(E,"href","#transformers.Conv1D"),p(D,"class","relative group"),p(R,"class","docstring"),p(zt,"class","docstring"),p(U,"class","docstring"),p(Le,"class","docstring"),p(W,"class","docstring"),p(Ce,"class","docstring"),p(X,"class","docstring"),p(St,"href","/docs/transformers/master/en/internal/modeling_utils#transformers.modeling_utils.SQuADHead"),p(ue,"class","docstring"),p(Ft,"class","docstring"),p(J,"class","docstring"),p(Se,"class","docstring"),p(Y,"class","docstring"),p(Fe,"id","transformers.apply_chunking_to_forward"),p(Fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Fe,"href","#transformers.apply_chunking_to_forward"),p(he,"class","relative group"),p(C,"class","docstring"),p(ge,"class","docstring"),p(Z,"class","docstring"),p(ee,"class","docstring"),p(te,"class","docstring"),p(Ae,"id","transformers.modeling_tf_utils.TFConv1D"),p(Ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Ae,"href","#transformers.modeling_tf_utils.TFConv1D"),p(_e,"class","relative group"),p(oe,"class","docstring"),p(gt,"href","https://github.com/tensorflow/models/blob/a009f4fb9d2fc4949e32192a944688925ef78659/official/transformer/v2/embedding_layer.py#L24"),p(gt,"rel","nofollow"),p(le,"class","docstring"),p(M,"class","docstring"),p(Oe,"class","docstring"),p(se,"class","docstring"),p(Ie,"id","transformers.modeling_tf_utils.TFCausalLanguageModelingLoss"),p(Ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Ie,"href","#transformers.modeling_tf_utils.TFCausalLanguageModelingLoss"),p(ve,"class","relative group"),p(ne,"class","docstring"),p(re,"class","docstring"),p($e,"class","docstring"),p(be,"class","docstring"),p(ye,"class","docstring"),p(ae,"class","docstring"),p(Ve,"id","transformers.modeling_tf_utils.get_initializer"),p(Ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Ve,"href","#transformers.modeling_tf_utils.get_initializer"),p(we,"class","relative group"),p(Te,"class","docstring"),p(V,"class","docstring"),p(xe,"class","docstring")},m(e,c){t(document.head,f),m(e,k,c),m(e,b,c),t(b,w),t(w,A),g(q,A,null),t(b,G),t(b,O),t(O,x),m(e,j,c),m(e,z,c),t(z,L),m(e,Q,c),m(e,S,c),t(S,P),m(e,B,c),m(e,D,c),t(D,E),t(E,y),g(I,y,null),t(D,fe),t(D,K),t(K,pe),m(e,ie,c),m(e,R,c),g(Be,R,null),t(R,on),t(R,to),t(to,sn),t(R,nn),t(R,oo),t(oo,rn),m(e,ls,c),m(e,U,c),g(Ge,U,null),t(U,an),t(U,so),t(so,ln),t(U,dn),t(U,zt),g(Ke,zt,null),m(e,ds,c),m(e,W,c),g(Re,W,null),t(W,cn),t(W,no),t(no,mn),t(W,fn),t(W,Le),g(Ue,Le,null),t(Le,pn),g(Pe,Le,null),m(e,cs,c),m(e,X,c),g(We,X,null),t(X,un),t(X,ro),t(ro,hn),t(X,gn),t(X,Ce),g(Xe,Ce,null),t(Ce,_n),g(ze,Ce,null),m(e,ms,c),m(e,ue,c),g(Je,ue,null),t(ue,vn),t(ue,Ye),t(Ye,$n),t(Ye,St),t(St,bn),t(Ye,yn),m(e,fs,c),m(e,J,c),g(Ze,J,null),t(J,wn),t(J,ao),t(ao,Tn),t(J,kn),t(J,Ft),g(et,Ft,null),m(e,ps,c),m(e,Y,c),g(tt,Y,null),t(Y,En),t(Y,io),t(io,qn),t(Y,Dn),t(Y,Se),g(ot,Se,null),t(Se,xn),t(Se,lo),t(lo,Ln),m(e,us,c),m(e,he,c),t(he,Fe),t(Fe,co),g(st,co,null),t(he,Pn),t(he,mo),t(mo,Cn),m(e,hs,c),m(e,C,c),g(nt,C,null),t(C,zn),t(C,N),t(N,Sn),t(N,fo),t(fo,Fn),t(N,An),t(N,po),t(po,On),t(N,In),t(N,uo),t(uo,Nn),t(N,Hn),t(N,ho),t(ho,Mn),t(N,Vn),t(C,jn),t(C,H),t(H,Qn),t(H,go),t(go,Bn),t(H,Gn),t(H,_o),t(_o,Kn),t(H,Rn),t(H,vo),t(vo,Un),t(H,Wn),t(H,$o),t($o,Xn),t(H,Jn),t(C,Yn),t(C,bo),t(bo,Zn),t(C,er),g(rt,C,null),m(e,gs,c),m(e,ge,c),g(at,ge,null),t(ge,tr),t(ge,it),t(it,or),t(it,yo),t(yo,sr),t(it,nr),m(e,_s,c),m(e,Z,c),g(lt,Z,null),t(Z,rr),t(Z,wo),t(wo,ar),t(Z,ir),t(Z,To),t(To,lr),m(e,vs,c),m(e,ee,c),g(dt,ee,null),t(ee,dr),t(ee,ko),t(ko,cr),t(ee,mr),t(ee,Eo),t(Eo,fr),m(e,$s,c),m(e,te,c),g(ct,te,null),t(te,pr),t(te,qo),t(qo,ur),t(te,hr),t(te,Do),t(Do,gr),m(e,bs,c),m(e,_e,c),t(_e,Ae),t(Ae,xo),g(mt,xo,null),t(_e,_r),t(_e,Lo),t(Lo,vr),m(e,ys,c),m(e,oe,c),g(ft,oe,null),t(oe,$r),t(oe,Po),t(Po,br),t(oe,yr),t(oe,Co),t(Co,wr),m(e,ws,c),m(e,M,c),g(pt,M,null),t(M,Tr),t(M,zo),t(zo,kr),t(M,Er),t(M,So),t(So,qr),t(M,Dr),t(M,le),g(ut,le,null),t(le,xr),t(le,Fo),t(Fo,Lr),t(le,Pr),t(le,ht),t(ht,Cr),t(ht,gt),t(gt,zr),t(ht,Sr),m(e,Ts,c),m(e,se,c),g(_t,se,null),t(se,Fr),t(se,Ao),t(Ao,Ar),t(se,Or),t(se,Oe),g(vt,Oe,null),t(Oe,Ir),t(Oe,Oo),t(Oo,Nr),m(e,ks,c),m(e,ve,c),t(ve,Ie),t(Ie,Io),g($t,Io,null),t(ve,Hr),t(ve,No),t(No,Mr),m(e,Es,c),m(e,ne,c),g(bt,ne,null),t(ne,Vr),t(ne,Ho),t(Ho,jr),t(ne,Qr),g(Ne,ne,null),m(e,qs,c),m(e,re,c),g(yt,re,null),t(re,Br),t(re,Mo),t(Mo,Gr),t(re,Kr),g(He,re,null),m(e,Ds,c),m(e,$e,c),g(wt,$e,null),t($e,Rr),t($e,Vo),t(Vo,Ur),m(e,xs,c),m(e,be,c),g(Tt,be,null),t(be,Wr),t(be,jo),t(jo,Xr),m(e,Ls,c),m(e,ye,c),g(kt,ye,null),t(ye,Jr),t(ye,Qo),t(Qo,Yr),m(e,Ps,c),m(e,ae,c),g(Et,ae,null),t(ae,Zr),t(ae,Bo),t(Bo,ea),t(ae,ta),g(Me,ae,null),m(e,Cs,c),m(e,we,c),t(we,Ve),t(Ve,Go),g(qt,Go,null),t(we,oa),t(we,Ko),t(Ko,sa),m(e,zs,c),m(e,Te,c),g(Dt,Te,null),t(Te,na),t(Te,xt),t(xt,ra),t(xt,Ro),t(Ro,aa),t(xt,ia),m(e,Ss,c),m(e,V,c),g(Lt,V,null),t(V,la),t(V,Uo),t(Uo,da),t(V,ca),t(V,Wo),t(Wo,ma),t(V,fa),t(V,ke),t(ke,Ee),t(Ee,pa),t(Ee,Xo),t(Xo,ua),t(Ee,ha),t(Ee,Jo),t(Jo,ga),t(Ee,_a),t(ke,va),t(ke,qe),t(qe,$a),t(qe,Yo),t(Yo,ba),t(qe,ya),t(qe,Zo),t(Zo,wa),t(qe,Ta),t(ke,ka),t(ke,De),t(De,Ea),t(De,es),t(es,qa),t(De,Da),t(De,ts),t(ts,xa),t(De,La),m(e,Fs,c),m(e,xe,c),g(Pt,xe,null),t(xe,Pa),t(xe,os),t(os,Ca),As=!0},p(e,[c]){const Ct={};c&2&&(Ct.$$scope={dirty:c,ctx:e}),Pe.$set(Ct);const ss={};c&2&&(ss.$$scope={dirty:c,ctx:e}),ze.$set(ss);const ns={};c&2&&(ns.$$scope={dirty:c,ctx:e}),Ne.$set(ns);const rs={};c&2&&(rs.$$scope={dirty:c,ctx:e}),He.$set(rs);const as={};c&2&&(as.$$scope={dirty:c,ctx:e}),Me.$set(as)},i(e){As||(_(q.$$.fragment,e),_(I.$$.fragment,e),_(Be.$$.fragment,e),_(Ge.$$.fragment,e),_(Ke.$$.fragment,e),_(Re.$$.fragment,e),_(Ue.$$.fragment,e),_(Pe.$$.fragment,e),_(We.$$.fragment,e),_(Xe.$$.fragment,e),_(ze.$$.fragment,e),_(Je.$$.fragment,e),_(Ze.$$.fragment,e),_(et.$$.fragment,e),_(tt.$$.fragment,e),_(ot.$$.fragment,e),_(st.$$.fragment,e),_(nt.$$.fragment,e),_(rt.$$.fragment,e),_(at.$$.fragment,e),_(lt.$$.fragment,e),_(dt.$$.fragment,e),_(ct.$$.fragment,e),_(mt.$$.fragment,e),_(ft.$$.fragment,e),_(pt.$$.fragment,e),_(ut.$$.fragment,e),_(_t.$$.fragment,e),_(vt.$$.fragment,e),_($t.$$.fragment,e),_(bt.$$.fragment,e),_(Ne.$$.fragment,e),_(yt.$$.fragment,e),_(He.$$.fragment,e),_(wt.$$.fragment,e),_(Tt.$$.fragment,e),_(kt.$$.fragment,e),_(Et.$$.fragment,e),_(Me.$$.fragment,e),_(qt.$$.fragment,e),_(Dt.$$.fragment,e),_(Lt.$$.fragment,e),_(Pt.$$.fragment,e),As=!0)},o(e){v(q.$$.fragment,e),v(I.$$.fragment,e),v(Be.$$.fragment,e),v(Ge.$$.fragment,e),v(Ke.$$.fragment,e),v(Re.$$.fragment,e),v(Ue.$$.fragment,e),v(Pe.$$.fragment,e),v(We.$$.fragment,e),v(Xe.$$.fragment,e),v(ze.$$.fragment,e),v(Je.$$.fragment,e),v(Ze.$$.fragment,e),v(et.$$.fragment,e),v(tt.$$.fragment,e),v(ot.$$.fragment,e),v(st.$$.fragment,e),v(nt.$$.fragment,e),v(rt.$$.fragment,e),v(at.$$.fragment,e),v(lt.$$.fragment,e),v(dt.$$.fragment,e),v(ct.$$.fragment,e),v(mt.$$.fragment,e),v(ft.$$.fragment,e),v(pt.$$.fragment,e),v(ut.$$.fragment,e),v(_t.$$.fragment,e),v(vt.$$.fragment,e),v($t.$$.fragment,e),v(bt.$$.fragment,e),v(Ne.$$.fragment,e),v(yt.$$.fragment,e),v(He.$$.fragment,e),v(wt.$$.fragment,e),v(Tt.$$.fragment,e),v(kt.$$.fragment,e),v(Et.$$.fragment,e),v(Me.$$.fragment,e),v(qt.$$.fragment,e),v(Dt.$$.fragment,e),v(Lt.$$.fragment,e),v(Pt.$$.fragment,e),As=!1},d(e){o(f),e&&o(k),e&&o(b),$(q),e&&o(j),e&&o(z),e&&o(Q),e&&o(S),e&&o(B),e&&o(D),$(I),e&&o(ie),e&&o(R),$(Be),e&&o(ls),e&&o(U),$(Ge),$(Ke),e&&o(ds),e&&o(W),$(Re),$(Ue),$(Pe),e&&o(cs),e&&o(X),$(We),$(Xe),$(ze),e&&o(ms),e&&o(ue),$(Je),e&&o(fs),e&&o(J),$(Ze),$(et),e&&o(ps),e&&o(Y),$(tt),$(ot),e&&o(us),e&&o(he),$(st),e&&o(hs),e&&o(C),$(nt),$(rt),e&&o(gs),e&&o(ge),$(at),e&&o(_s),e&&o(Z),$(lt),e&&o(vs),e&&o(ee),$(dt),e&&o($s),e&&o(te),$(ct),e&&o(bs),e&&o(_e),$(mt),e&&o(ys),e&&o(oe),$(ft),e&&o(ws),e&&o(M),$(pt),$(ut),e&&o(Ts),e&&o(se),$(_t),$(vt),e&&o(ks),e&&o(ve),$($t),e&&o(Es),e&&o(ne),$(bt),$(Ne),e&&o(qs),e&&o(re),$(yt),$(He),e&&o(Ds),e&&o($e),$(wt),e&&o(xs),e&&o(be),$(Tt),e&&o(Ls),e&&o(ye),$(kt),e&&o(Ps),e&&o(ae),$(Et),$(Me),e&&o(Cs),e&&o(we),$(qt),e&&o(zs),e&&o(Te),$(Dt),e&&o(Ss),e&&o(V),$(Lt),e&&o(Fs),e&&o(xe),$(Pt)}}}const ol={local:"custom-layers-and-utilities",sections:[{local:"transformers.Conv1D",title:"Pytorch custom modules"},{local:"transformers.apply_chunking_to_forward",title:"PyTorch Helper Functions"},{local:"transformers.modeling_tf_utils.TFConv1D",title:"TensorFlow custom layers"},{local:"transformers.modeling_tf_utils.TFCausalLanguageModelingLoss",title:"TensorFlow loss functions"},{local:"transformers.modeling_tf_utils.get_initializer",title:"TensorFlow Helper Functions"}],title:"Custom Layers and Utilities"};function sl(F,f,k){let{fw:b}=f;return F.$$set=w=>{"fw"in w&&k(0,b=w.fw)},[b]}class cl extends Gi{constructor(f){super();Ki(this,f,sl,tl,Ri,{fw:0})}}export{cl as default,ol as metadata};
