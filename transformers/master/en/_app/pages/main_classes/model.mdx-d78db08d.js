import{S as t1,i as o1,s as a1,e as o,k as l,w as c,t as s,M as n1,c as a,d as t,m as d,a as n,x as p,h as i,b as m,F as e,g as y,y as h,q as f,o as u,B as g}from"../../chunks/vendor-4833417e.js";import{T as fl}from"../../chunks/Tip-fffd6df1.js";import{D as v}from"../../chunks/Docstring-4f315ed9.js";import{C as Q}from"../../chunks/CodeBlock-6a3d1b46.js";import{I as ro}from"../../chunks/IconCopyLink-4b81c553.js";import"../../chunks/CopyButton-dacfbfaf.js";function r1(S){let w,k;return{c(){w=o("p"),k=s("Passing `use_auth_token=True\u201C is required when you want to use a private model.")},l(x){w=a(x,"P",{});var E=n(w);k=i(E,"Passing `use_auth_token=True\u201C is required when you want to use a private model."),E.forEach(t)},m(x,E){y(x,w,E),e(w,k)},d(x){x&&t(w)}}}function s1(S){let w,k,x,E,W;return{c(){w=o("p"),k=s("Activate the special "),x=o("a"),E=s("\u201Coffline-mode\u201D"),W=s(` to
use this method in a firewalled environment.`),this.h()},l(A){w=a(A,"P",{});var L=n(w);k=i(L,"Activate the special "),x=a(L,"A",{href:!0,rel:!0});var de=n(x);E=i(de,"\u201Coffline-mode\u201D"),de.forEach(t),W=i(L,` to
use this method in a firewalled environment.`),L.forEach(t),this.h()},h(){m(x,"href","https://huggingface.co/transformers/installation.html#offline-mode"),m(x,"rel","nofollow")},m(A,L){y(A,w,L),e(w,k),e(w,x),e(x,E),e(w,W)},d(A){A&&t(w)}}}function i1(S){let w,k;return{c(){w=o("p"),k=s("This API is experimental and may have some slight breaking changes in the next releases.")},l(x){w=a(x,"P",{});var E=n(w);k=i(E,"This API is experimental and may have some slight breaking changes in the next releases."),E.forEach(t)},m(x,E){y(x,w,E),e(w,k)},d(x){x&&t(w)}}}function l1(S){let w,k,x,E,W;return{c(){w=o("p"),k=s("Passing "),x=o("code"),E=s("use_auth_token=True"),W=s(" is required when you want to use a private model.")},l(A){w=a(A,"P",{});var L=n(w);k=i(L,"Passing "),x=a(L,"CODE",{});var de=n(x);E=i(de,"use_auth_token=True"),de.forEach(t),W=i(L," is required when you want to use a private model."),L.forEach(t)},m(A,L){y(A,w,L),e(w,k),e(w,x),e(x,E),e(w,W)},d(A){A&&t(w)}}}function d1(S){let w,k;return{c(){w=o("p"),k=s("This API is experimental and may have some slight breaking changes in the next releases.")},l(x){w=a(x,"P",{});var E=n(w);k=i(E,"This API is experimental and may have some slight breaking changes in the next releases."),E.forEach(t)},m(x,E){y(x,w,E),e(w,k)},d(x){x&&t(w)}}}function m1(S){let w,k,x,E,W,A,L,de,Jd,ul,Z,Qd,rn,Zd,em,sn,tm,om,ln,am,nm,gl,Le,dn,rm,sm,mn,im,lm,_l,Ze,Qn,dm,mm,Zn,cm,bl,z,pm,cn,hm,fm,er,um,gm,pn,_m,bm,hn,vm,ym,fn,$m,wm,vl,ze,et,tr,so,Tm,or,xm,yl,T,io,Pm,ar,Em,Mm,un,gn,km,jm,Dm,lo,nr,Fm,qm,rr,Am,Cm,sr,Im,Lm,G,ir,ge,lr,zm,Om,_n,Um,Nm,bn,Hm,Xm,Bm,mo,_e,dr,Vm,Sm,mr,Wm,Gm,cr,Rm,Ym,Km,Oe,tt,pr,Jm,Qm,vn,Zm,ec,tc,ot,hr,oc,ac,fr,nc,rc,sc,at,ur,ic,lc,gr,dc,mc,cc,_r,nt,br,pc,hc,vr,fc,uc,gc,yr,rt,$r,_c,bc,wr,vc,yc,$c,Tr,U,xr,wc,Tc,Pr,xc,Pc,Er,Ec,Mc,Mr,kc,jc,kr,Dc,Fc,qc,ee,co,Ac,po,Cc,jr,Ic,Lc,zc,Dr,Oc,Uc,ho,Nc,F,fo,Hc,Fr,Xc,Bc,Ue,Vc,qr,Sc,Wc,Ar,Gc,Rc,Yc,uo,Kc,Cr,Jc,Qc,Zc,go,ep,Ir,tp,op,ap,st,np,it,rp,Lr,sp,ip,_o,lp,lt,bo,dp,zr,mp,cp,dt,vo,pp,Or,hp,fp,be,yo,up,Ur,gp,_p,Nr,bp,vp,ve,$o,yp,Hr,$p,wp,Xr,Tp,xp,mt,wo,Pp,Br,Ep,Mp,ct,To,kp,Vr,jp,Dp,pt,xo,Fp,Sr,qp,Ap,ye,Po,Cp,Wr,Ip,Lp,ht,zp,$e,Eo,Op,Mo,Up,Gr,Np,Hp,Xp,ko,Bp,Rr,Vp,Sp,Wp,ft,jo,Gp,Do,Rp,Yr,Yp,Kp,Jp,ut,Fo,Qp,Kr,Zp,eh,we,qo,th,Jr,oh,ah,Ao,nh,Qr,rh,sh,$l,yn,wl,Ne,gt,Zr,Co,ih,es,lh,Tl,te,dh,ts,mh,ch,os,ph,hh,as,fh,uh,xl,Io,Pl,Te,gh,ns,_h,bh,rs,vh,yh,El,Lo,Ml,_t,$h,ss,wh,Th,kl,zo,jl,$n,xh,Dl,He,bt,is,Oo,Ph,ls,Eh,Fl,j,Uo,Mh,No,kh,ds,jh,Dh,Fh,xe,Ho,qh,ms,Ah,Ch,Xe,Ih,cs,Lh,zh,ps,Oh,Uh,Nh,vt,Xo,Hh,hs,Xh,Bh,yt,Bo,Vh,Be,Sh,fs,Wh,Gh,Vo,Rh,Yh,Kh,$t,So,Jh,us,Qh,Zh,wt,Wo,ef,gs,tf,of,Tt,Go,af,_s,nf,rf,xt,Ro,sf,bs,lf,df,Pt,Yo,mf,Ve,cf,vs,pf,hf,wn,ff,uf,ql,Se,Et,ys,Ko,gf,$s,_f,Al,b,Jo,bf,ws,vf,yf,Tn,xn,$f,wf,Tf,Qo,Ts,xf,Pf,xs,Ef,Mf,Ps,kf,jf,We,Pe,Es,Df,Ff,Pn,qf,Af,En,Cf,If,Lf,Mt,Ms,zf,Of,ks,Uf,Nf,Hf,N,js,Xf,Bf,Ds,Vf,Sf,Fs,Wf,Gf,qs,Rf,Yf,As,Kf,Jf,Qf,oe,Zo,Zf,ea,eu,Cs,tu,ou,au,Is,nu,ru,ta,su,kt,oa,iu,Ls,lu,du,C,aa,mu,zs,cu,pu,na,hu,Os,fu,uu,gu,ra,_u,Us,bu,vu,yu,jt,$u,Ns,wu,Tu,sa,xu,Dt,ia,Pu,Hs,Eu,Mu,Ft,la,ku,Xs,ju,Du,qt,da,Fu,Bs,qu,Au,At,ma,Cu,Vs,Iu,Lu,Ct,ca,zu,Ss,Ou,Uu,It,pa,Nu,Ws,Hu,Xu,Lt,ha,Bu,Gs,Vu,Su,zt,fa,Wu,Rs,Gu,Ru,Ee,ua,Yu,ga,Ku,Ys,Ju,Qu,Zu,_a,eg,Ks,tg,og,ag,Ot,ba,ng,va,rg,Mn,sg,ig,lg,Ut,ya,dg,Js,mg,cg,Nt,$a,pg,Qs,hg,fg,Ht,wa,ug,Zs,gg,_g,Xt,Ta,bg,ei,vg,yg,Bt,xa,$g,ti,wg,Tg,Vt,Pa,xg,oi,Pg,Eg,ae,Ea,Mg,R,kg,ai,jg,Dg,ni,Fg,qg,ri,Ag,Cg,si,Ig,Lg,zg,Ge,Og,ii,Ug,Ng,li,Hg,Xg,Bg,Re,Vg,di,Sg,Wg,mi,Gg,Rg,Cl,Ye,St,ci,Ma,Yg,pi,Kg,Il,me,ka,Jg,ja,Qg,hi,Zg,e_,t_,Wt,Da,o_,fi,a_,Ll,Ke,Gt,ui,Fa,n_,gi,r_,zl,M,qa,s_,_i,i_,l_,kn,jn,d_,m_,c_,bi,p_,h_,Je,Me,vi,f_,u_,Dn,g_,__,Fn,b_,v_,y_,Rt,yi,$_,w_,$i,T_,x_,P_,H,wi,E_,M_,Ti,k_,j_,xi,D_,F_,Pi,q_,A_,Ei,C_,I_,L_,ne,Aa,z_,Ca,O_,Mi,U_,N_,H_,ki,X_,B_,Ia,V_,O,La,S_,ji,W_,G_,za,R_,Di,Y_,K_,J_,Oa,Q_,Fi,Z_,eb,tb,qi,ob,ab,Ua,nb,ke,Na,rb,Ai,sb,ib,Yt,lb,Kt,Ha,db,Xa,mb,Ci,cb,pb,hb,X,Ba,fb,Y,ub,Ii,gb,_b,Li,bb,vb,zi,yb,$b,Oi,wb,Tb,xb,Ui,Pb,Eb,Ni,Mb,kb,Va,jb,B,Sa,Db,K,Fb,Hi,qb,Ab,Xi,Cb,Ib,Bi,Lb,zb,Vi,Ob,Ub,Nb,Si,Hb,Xb,Wi,Bb,Vb,Wa,Sb,re,Ga,Wb,J,Gb,Gi,Rb,Yb,Ri,Kb,Jb,Yi,Qb,Zb,Ki,ev,tv,ov,Ji,av,nv,Ra,Ol,Qe,Jt,Qi,Ya,rv,Zi,sv,Ul,ce,Ka,iv,el,lv,dv,se,Ja,mv,Qa,cv,tl,pv,hv,fv,ol,uv,gv,Za,Nl;return A=new ro({}),so=new ro({}),io=new v({props:{name:"class transformers.PreTrainedModel",anchor:"transformers.PreTrainedModel",parameters:[{name:"config",val:": PretrainedConfig"},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L423"}}),co=new v({props:{name:"push_to_hub",anchor:"transformers.file_utils.PushToHubMixin.push_to_hub",parameters:[{name:"repo_path_or_name",val:": typing.Optional[str] = None"},{name:"repo_url",val:": typing.Optional[str] = None"},{name:"use_temp_dir",val:": bool = False"},{name:"commit_message",val:": typing.Optional[str] = None"},{name:"organization",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = None"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"},{name:"**model_card_kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/file_utils.py#L2851",parametersDescription:[{anchor:"transformers.file_utils.PushToHubMixin.push_to_hub.repo_path_or_name",description:`<strong>repo_path_or_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Can either be a repository name for your model in the Hub or a path to a local folder (in which case
the repository will have the name of that local folder). If not specified, will default to the name
given by <code>repo_url</code> and a local directory with that name will be created.`,name:"repo_path_or_name"},{anchor:"transformers.file_utils.PushToHubMixin.push_to_hub.repo_url",description:`<strong>repo_url</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Specify this in case you want to push to an existing repository in the hub. If unspecified, a new
repository will be created in your namespace (unless you specify an <code>organization</code>) with <code>repo_name</code>.`,name:"repo_url"},{anchor:"transformers.file_utils.PushToHubMixin.push_to_hub.use_temp_dir",description:`<strong>use_temp_dir</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to clone the distant repo in a temporary directory or in <code>repo_path_or_name</code> inside the
current working directory. This will slow things down if you are making changes in an existing repo
since you will need to clone the repo before every push.`,name:"use_temp_dir"},{anchor:"transformers.file_utils.PushToHubMixin.push_to_hub.commit_message",description:`<strong>commit_message</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Message to commit while pushing. Will default to <code>&quot;add model&quot;</code>.`,name:"commit_message"},{anchor:"transformers.file_utils.PushToHubMixin.push_to_hub.organization",description:`<strong>organization</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Organization in which you want to push your model (you must be a member of this organization).`,name:"organization"},{anchor:"transformers.file_utils.PushToHubMixin.push_to_hub.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not the repository created should be private (requires a paying subscription).`,name:"private"},{anchor:"transformers.file_utils.PushToHubMixin.push_to_hub.use_auth_token",description:`<strong>use_auth_token</strong> (<code>bool</code> or <code>str</code>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>). Will default to <code>True</code> if
<code>repo_url</code> is not specified.`,name:"use_auth_token"}],returnDescription:`
<p>The url of the commit of your model in the given repository.</p>
`,returnType:`
<p><code>str</code></p>
`}}),ho=new Q({props:{code:`from transformers import AutoModel

model = AutoModel.from_pretrained("bert-base-cased")

# Push the model to your namespace with the name "my-finetuned-bert" and have a local clone in the
# *my-finetuned-bert* folder.
model.push_to_hub("my-finetuned-bert")

# Push the model to your namespace with the name "my-finetuned-bert" with no local clone.
model.push_to_hub("my-finetuned-bert", use_temp_dir=True)

# Push the model to an organization with the name "my-finetuned-bert" and have a local clone in the
# *my-finetuned-bert* folder.
model.push_to_hub("my-finetuned-bert", organization="huggingface")

# Make a change to an existing repo that has been cloned locally in *my-finetuned-bert*.
model.push_to_hub("my-finetuned-bert", repo_url="https://huggingface.co/sgugger/my-finetuned-bert")`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModel

model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-comment"># Push the model to your namespace with the name &quot;my-finetuned-bert&quot; and have a local clone in the</span>
<span class="hljs-comment"># *my-finetuned-bert* folder.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>)

<span class="hljs-comment"># Push the model to your namespace with the name &quot;my-finetuned-bert&quot; with no local clone.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, use_temp_dir=<span class="hljs-literal">True</span>)

<span class="hljs-comment"># Push the model to an organization with the name &quot;my-finetuned-bert&quot; and have a local clone in the</span>
<span class="hljs-comment"># *my-finetuned-bert* folder.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, organization=<span class="hljs-string">&quot;huggingface&quot;</span>)

<span class="hljs-comment"># Make a change to an existing repo that has been cloned locally in *my-finetuned-bert*.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, repo_url=<span class="hljs-string">&quot;https://huggingface.co/sgugger/my-finetuned-bert&quot;</span>)`}}),fo=new v({props:{name:"from_pretrained",anchor:"transformers.PreTrainedModel.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:": typing.Union[str, os.PathLike, NoneType]"},{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L1091",parametersDescription:[{anchor:"transformers.PreTrainedModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
<li>A path or url to a model folder containing a <em>flax checkpoint file</em> in <em>.msgpack</em> format (e.g,
<code>./flax_model/</code> containing <code>flax_model.msgpack</code>). In this case, <code>from_flax</code> should be set to
<code>True</code>.</li>
<li><code>None</code> if you are both providing the configuration and state dictionary (resp. with keyword
arguments <code>config</code> and <code>state_dict</code>).</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.PreTrainedModel.from_pretrained.model_args",description:`<strong>model_args</strong> (sequence of positional arguments, <em>optional</em>) &#x2014;
All remaining positional arguments will be passed to the underlying model&#x2019;s <code>__init__</code> method.`,name:"model_args"},{anchor:"transformers.PreTrainedModel.from_pretrained.config",description:`<strong>config</strong> (<code>Union[PretrainedConfig, str, os.PathLike]</code>, <em>optional</em>) &#x2014;
Can be either:</p>
<ul>
<li>an instance of a class derived from <a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>,</li>
<li>a string or path valid as input to <a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>.</li>
</ul>`,name:"config"}]}}),st=new fl({props:{$$slots:{default:[r1]},$$scope:{ctx:S}}}),it=new fl({props:{$$slots:{default:[s1]},$$scope:{ctx:S}}}),_o=new Q({props:{code:`from transformers import BertConfig, BertModel

# Download model and configuration from huggingface.co and cache.
model = BertModel.from_pretrained("bert-base-uncased")
# Model was saved using *save_pretrained('./test/saved_model/')* (for example purposes, not runnable).
model = BertModel.from_pretrained("./test/saved_model/")
# Update configuration during loading.
model = BertModel.from_pretrained("bert-base-uncased", output_attentions=True)
assert model.config.output_attentions == True
# Loading from a TF checkpoint file instead of a PyTorch model (slower, for example purposes, not runnable).
config = BertConfig.from_json_file("./tf_model/my_tf_model_config.json")
model = BertModel.from_pretrained("./tf_model/my_tf_checkpoint.ckpt.index", from_tf=True, config=config)
# Loading from a Flax checkpoint file instead of a PyTorch model (slower)
model = BertModel.from_pretrained("bert-base-uncased", from_flax=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertConfig, BertModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = BertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Model was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)* (for example purposes, not runnable).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = BertModel.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = BertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> model.config.output_attentions == <span class="hljs-literal">True</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower, for example purposes, not runnable).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = BertConfig.from_json_file(<span class="hljs-string">&quot;./tf_model/my_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = BertModel.from_pretrained(<span class="hljs-string">&quot;./tf_model/my_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a Flax checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = BertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, from_flax=<span class="hljs-literal">True</span>)`}}),bo=new v({props:{name:"get_input_embeddings",anchor:"transformers.PreTrainedModel.get_input_embeddings",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L575",returnDescription:`
<p>A torch module mapping vocabulary to hidden states.</p>
`,returnType:`
<p><code>nn.Module</code></p>
`}}),vo=new v({props:{name:"get_output_embeddings",anchor:"transformers.PreTrainedModel.get_output_embeddings",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L601",returnDescription:`
<p>A torch module mapping hidden states to vocabulary.</p>
`,returnType:`
<p><code>nn.Module</code></p>
`}}),yo=new v({props:{name:"gradient_checkpointing_disable",anchor:"transformers.PreTrainedModel.gradient_checkpointing_disable",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L980"}}),$o=new v({props:{name:"gradient_checkpointing_enable",anchor:"transformers.PreTrainedModel.gradient_checkpointing_enable",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L969"}}),wo=new v({props:{name:"init_weights",anchor:"transformers.PreTrainedModel.init_weights",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L936"}}),To=new v({props:{name:"post_init",anchor:"transformers.PreTrainedModel.post_init",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L494"}}),xo=new v({props:{name:"prune_heads",anchor:"transformers.PreTrainedModel.prune_heads",parameters:[{name:"heads_to_prune",val:": typing.Dict[int, typing.List[int]]"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L952",parametersDescription:[{anchor:"transformers.PreTrainedModel.prune_heads.heads_to_prune",description:`<strong>heads_to_prune</strong> (<code>Dict[int, List[int]]</code>) &#x2014;
Dictionary with keys being selected layer indices (<code>int</code>) and associated values being the list of heads
to prune in said layer (list of <code>int</code>). For instance {1: [0, 2], 2: [2, 3]} will prune heads 0 and 2 on
layer 1 and heads 2 and 3 on layer 2.`,name:"heads_to_prune"}]}}),Po=new v({props:{name:"register_for_auto_class",anchor:"transformers.PreTrainedModel.register_for_auto_class",parameters:[{name:"auto_class",val:" = 'AutoModel'"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L1817",parametersDescription:[{anchor:"transformers.PreTrainedModel.register_for_auto_class.auto_class",description:`<strong>auto_class</strong> (<code>str</code> or <code>type</code>, <em>optional</em>, defaults to <code>&quot;AutoModel&quot;</code>) &#x2014;
The auto class to register this new model with.`,name:"auto_class"}]}}),ht=new fl({props:{warning:"&lcub;true}",$$slots:{default:[i1]},$$scope:{ctx:S}}}),Eo=new v({props:{name:"resize_token_embeddings",anchor:"transformers.PreTrainedModel.resize_token_embeddings",parameters:[{name:"new_num_tokens",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L729",parametersDescription:[{anchor:"transformers.PreTrainedModel.resize_token_embeddings.new_num_tokens",description:`<strong>new_num_tokens</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The number of new tokens in the embedding matrix. Increasing the size will add newly initialized
vectors at the end. Reducing the size will remove vectors from the end. If not provided or <code>None</code>, just
returns a pointer to the input tokens <code>torch.nn.Embedding</code> module of the model without doing anything.`,name:"new_num_tokens"}],returnDescription:`
<p>Pointer to the input tokens Embeddings Module of the model.</p>
`,returnType:`
<p><code>torch.nn.Embedding</code></p>
`}}),jo=new v({props:{name:"save_pretrained",anchor:"transformers.PreTrainedModel.save_pretrained",parameters:[{name:"save_directory",val:": typing.Union[str, os.PathLike]"},{name:"save_config",val:": bool = True"},{name:"state_dict",val:": typing.Optional[dict] = None"},{name:"save_function",val:": typing.Callable = <function save at 0x7f196c35c8b0>"},{name:"push_to_hub",val:": bool = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L1000",parametersDescription:[{anchor:"transformers.PreTrainedModel.save_pretrained.save_directory",description:`<strong>save_directory</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Directory to which to save. Will be created if it doesn&#x2019;t exist.`,name:"save_directory"},{anchor:"transformers.PreTrainedModel.save_pretrained.save_config",description:`<strong>save_config</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to save the config of the model. Useful when in distributed training like TPUs and need
to call this function on all processes. In this case, set <code>save_config=True</code> only on the main process
to avoid race conditions.`,name:"save_config"},{anchor:"transformers.PreTrainedModel.save_pretrained.state_dict",description:`<strong>state_dict</strong> (nested dictionary of <code>torch.Tensor</code>) &#x2014;
The state dictionary of the model to save. Will default to <code>self.state_dict()</code>, but can be used to only
save parts of the model or if special precautions need to be taken when recovering the state dictionary
of a model (like when using model parallelism).`,name:"state_dict"},{anchor:"transformers.PreTrainedModel.save_pretrained.save_function",description:`<strong>save_function</strong> (<code>Callable</code>) &#x2014;
The function to use to save the state dictionary. Useful on distributed training like TPUs when one
need to replace <code>torch.save</code> by another method.`,name:"save_function"},{anchor:"transformers.PreTrainedModel.save_pretrained.push_to_hub",description:`<strong>push_to_hub</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to push your model to the Hugging Face model hub after saving it.</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>Using <code>push_to_hub=True</code> will synchronize the repository you are pushing to with <code>save_directory</code>,
which requires <code>save_directory</code> to be a local clone of the repo you are pushing to if it&#x2019;s an existing
folder. Pass along <code>temp_dir=True</code> to use a temporary directory instead.</p>

					</div>
<p>kwargs &#x2014;
Additional key word arguments passed along to the <a href="/docs/transformers/master/en/main_classes/model#transformers.file_utils.PushToHubMixin.push_to_hub">push_to_hub()</a> method.`,name:"push_to_hub"}]}}),Fo=new v({props:{name:"set_input_embeddings",anchor:"transformers.PreTrainedModel.set_input_embeddings",parameters:[{name:"value",val:": Module"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L588",parametersDescription:[{anchor:"transformers.PreTrainedModel.set_input_embeddings.value",description:"<strong>value</strong> (<code>nn.Module</code>) &#x2014; A module mapping vocabulary to hidden states.",name:"value"}]}}),qo=new v({props:{name:"tie_weights",anchor:"transformers.PreTrainedModel.tie_weights",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L616"}}),Co=new ro({}),Io=new Q({props:{code:'model = T5ForConditionalGeneration.from_pretrained("t5", torch_dtype=torch.float16)',highlighted:'model = T5ForConditionalGeneration.from_pretrained(<span class="hljs-string">&quot;t5&quot;</span>, torch_dtype=torch.float16)'}}),Lo=new Q({props:{code:'model = T5ForConditionalGeneration.from_pretrained("t5", torch_dtype="auto")',highlighted:'model = T5ForConditionalGeneration.from_pretrained(<span class="hljs-string">&quot;t5&quot;</span>, torch_dtype=<span class="hljs-string">&quot;auto&quot;</span>)'}}),zo=new Q({props:{code:`config = T5Config.from_pretrained("t5")
model = AutoModel.from_config(config)`,highlighted:`config = T5Config.from_pretrained(<span class="hljs-string">&quot;t5&quot;</span>)
model = AutoModel.from_config(config)`}}),Oo=new ro({}),Uo=new v({props:{name:"class transformers.modeling_utils.ModuleUtilsMixin",anchor:"transformers.modeling_utils.ModuleUtilsMixin",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L151"}}),Ho=new v({props:{name:"add_memory_hooks",anchor:"transformers.modeling_utils.ModuleUtilsMixin.add_memory_hooks",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L182"}}),Xo=new v({props:{name:"estimate_tokens",anchor:"transformers.modeling_utils.ModuleUtilsMixin.estimate_tokens",parameters:[{name:"input_dict",val:": typing.Dict[str, typing.Union[torch.Tensor, typing.Any]]"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L378",parametersDescription:[{anchor:"transformers.modeling_utils.ModuleUtilsMixin.estimate_tokens.inputs",description:"<strong>inputs</strong> (<code>dict</code>) &#x2014; The model inputs.",name:"inputs"}],returnDescription:`
<p>The total number of tokens.</p>
`,returnType:`
<p><code>int</code></p>
`}}),Bo=new v({props:{name:"floating_point_ops",anchor:"transformers.modeling_utils.ModuleUtilsMixin.floating_point_ops",parameters:[{name:"input_dict",val:": typing.Dict[str, typing.Union[torch.Tensor, typing.Any]]"},{name:"exclude_embeddings",val:": bool = True"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L396",parametersDescription:[{anchor:"transformers.modeling_utils.ModuleUtilsMixin.floating_point_ops.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014;
The batch size for the forward pass.`,name:"batch_size"},{anchor:"transformers.modeling_utils.ModuleUtilsMixin.floating_point_ops.sequence_length",description:`<strong>sequence_length</strong> (<code>int</code>) &#x2014;
The number of tokens in each line of the batch.`,name:"sequence_length"},{anchor:"transformers.modeling_utils.ModuleUtilsMixin.floating_point_ops.exclude_embeddings",description:`<strong>exclude_embeddings</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to count embedding and softmax operations.`,name:"exclude_embeddings"}],returnDescription:`
<p>The number of floating-point operations.</p>
`,returnType:`
<p><code>int</code></p>
`}}),So=new v({props:{name:"get_extended_attention_mask",anchor:"transformers.modeling_utils.ModuleUtilsMixin.get_extended_attention_mask",parameters:[{name:"attention_mask",val:": Tensor"},{name:"input_shape",val:": typing.Tuple[int]"},{name:"device",val:": <property object at 0x7f19083034f0>"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L271",parametersDescription:[{anchor:"transformers.modeling_utils.ModuleUtilsMixin.get_extended_attention_mask.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code>) &#x2014;
Mask with ones indicating tokens to attend to, zeros for tokens to ignore.`,name:"attention_mask"},{anchor:"transformers.modeling_utils.ModuleUtilsMixin.get_extended_attention_mask.input_shape",description:`<strong>input_shape</strong> (<code>Tuple[int]</code>) &#x2014;
The shape of the input to the model.
device &#x2014; (<code>torch.device</code>):
The device of the input to the model.`,name:"input_shape"}],returnDescription:`
<p><code>torch.Tensor</code> The extended attention mask, with a the same dtype as <code>attention_mask.dtype</code>.</p>
`}}),Wo=new v({props:{name:"get_head_mask",anchor:"transformers.modeling_utils.ModuleUtilsMixin.get_head_mask",parameters:[{name:"head_mask",val:": typing.Optional[torch.Tensor]"},{name:"num_hidden_layers",val:": int"},{name:"is_attention_chunked",val:": bool = False"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L314",parametersDescription:[{anchor:"transformers.modeling_utils.ModuleUtilsMixin.get_head_mask.head_mask",description:`<strong>head_mask</strong> (<code>torch.Tensor</code> with shape <code>[num_heads]</code> or <code>[num_hidden_layers x num_heads]</code>, <em>optional</em>) &#x2014;
The mask indicating if we should keep the heads or not (1.0 for keep, 0.0 for discard).`,name:"head_mask"},{anchor:"transformers.modeling_utils.ModuleUtilsMixin.get_head_mask.num_hidden_layers",description:`<strong>num_hidden_layers</strong> (<code>int</code>) &#x2014;
The number of hidden layers in the model.
is_attention_chunked &#x2014; (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>):
Whether or not the attentions scores are computed by chunks or not.`,name:"num_hidden_layers"}],returnDescription:`
<p><code>torch.Tensor</code> with shape <code>[num_hidden_layers x batch x num_heads x seq_length x seq_length]</code> or list with
<code>[None]</code> for each layer.</p>
`}}),Go=new v({props:{name:"invert_attention_mask",anchor:"transformers.modeling_utils.ModuleUtilsMixin.invert_attention_mask",parameters:[{name:"encoder_attention_mask",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L218",parametersDescription:[{anchor:"transformers.modeling_utils.ModuleUtilsMixin.invert_attention_mask.encoder_attention_mask",description:"<strong>encoder_attention_mask</strong> (<code>torch.Tensor</code>) &#x2014; An attention mask.",name:"encoder_attention_mask"}],returnDescription:`
<p>The inverted attention mask.</p>
`,returnType:`
<p><code>torch.Tensor</code></p>
`}}),Ro=new v({props:{name:"num_parameters",anchor:"transformers.modeling_utils.ModuleUtilsMixin.num_parameters",parameters:[{name:"only_trainable",val:": bool = False"},{name:"exclude_embeddings",val:": bool = False"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L352",parametersDescription:[{anchor:"transformers.modeling_utils.ModuleUtilsMixin.num_parameters.only_trainable",description:`<strong>only_trainable</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to return only the number of trainable parameters`,name:"only_trainable"},{anchor:"transformers.modeling_utils.ModuleUtilsMixin.num_parameters.exclude_embeddings",description:`<strong>exclude_embeddings</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to return only the number of non-embeddings parameters`,name:"exclude_embeddings"}],returnDescription:`
<p>The number of parameters.</p>
`,returnType:`
<p><code>int</code></p>
`}}),Yo=new v({props:{name:"reset_memory_hooks_state",anchor:"transformers.modeling_utils.ModuleUtilsMixin.reset_memory_hooks_state",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_utils.py#L194"}}),Ko=new ro({}),Jo=new v({props:{name:"class transformers.TFPreTrainedModel",anchor:"transformers.TFPreTrainedModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L686"}}),Zo=new v({props:{name:"push_to_hub",anchor:"transformers.file_utils.PushToHubMixin.push_to_hub",parameters:[{name:"repo_path_or_name",val:": typing.Optional[str] = None"},{name:"repo_url",val:": typing.Optional[str] = None"},{name:"use_temp_dir",val:": bool = False"},{name:"commit_message",val:": typing.Optional[str] = None"},{name:"organization",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = None"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"},{name:"**model_card_kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/file_utils.py#L2851",parametersDescription:[{anchor:"transformers.file_utils.PushToHubMixin.push_to_hub.repo_path_or_name",description:`<strong>repo_path_or_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Can either be a repository name for your model in the Hub or a path to a local folder (in which case
the repository will have the name of that local folder). If not specified, will default to the name
given by <code>repo_url</code> and a local directory with that name will be created.`,name:"repo_path_or_name"},{anchor:"transformers.file_utils.PushToHubMixin.push_to_hub.repo_url",description:`<strong>repo_url</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Specify this in case you want to push to an existing repository in the hub. If unspecified, a new
repository will be created in your namespace (unless you specify an <code>organization</code>) with <code>repo_name</code>.`,name:"repo_url"},{anchor:"transformers.file_utils.PushToHubMixin.push_to_hub.use_temp_dir",description:`<strong>use_temp_dir</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to clone the distant repo in a temporary directory or in <code>repo_path_or_name</code> inside the
current working directory. This will slow things down if you are making changes in an existing repo
since you will need to clone the repo before every push.`,name:"use_temp_dir"},{anchor:"transformers.file_utils.PushToHubMixin.push_to_hub.commit_message",description:`<strong>commit_message</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Message to commit while pushing. Will default to <code>&quot;add model&quot;</code>.`,name:"commit_message"},{anchor:"transformers.file_utils.PushToHubMixin.push_to_hub.organization",description:`<strong>organization</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Organization in which you want to push your model (you must be a member of this organization).`,name:"organization"},{anchor:"transformers.file_utils.PushToHubMixin.push_to_hub.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not the repository created should be private (requires a paying subscription).`,name:"private"},{anchor:"transformers.file_utils.PushToHubMixin.push_to_hub.use_auth_token",description:`<strong>use_auth_token</strong> (<code>bool</code> or <code>str</code>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>). Will default to <code>True</code> if
<code>repo_url</code> is not specified.`,name:"use_auth_token"}],returnDescription:`
<p>The url of the commit of your model in the given repository.</p>
`,returnType:`
<p><code>str</code></p>
`}}),ta=new Q({props:{code:`from transformers import TFAutoModel

model = TFAutoModel.from_pretrained("bert-base-cased")

# Push the model to your namespace with the name "my-finetuned-bert" and have a local clone in the
# *my-finetuned-bert* folder.
model.push_to_hub("my-finetuned-bert")

# Push the model to your namespace with the name "my-finetuned-bert" with no local clone.
model.push_to_hub("my-finetuned-bert", use_temp_dir=True)

# Push the model to an organization with the name "my-finetuned-bert" and have a local clone in the
# *my-finetuned-bert* folder.
model.push_to_hub("my-finetuned-bert", organization="huggingface")

# Make a change to an existing repo that has been cloned locally in *my-finetuned-bert*.
model.push_to_hub("my-finetuned-bert", repo_url="https://huggingface.co/sgugger/my-finetuned-bert")`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFAutoModel

model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-comment"># Push the model to your namespace with the name &quot;my-finetuned-bert&quot; and have a local clone in the</span>
<span class="hljs-comment"># *my-finetuned-bert* folder.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>)

<span class="hljs-comment"># Push the model to your namespace with the name &quot;my-finetuned-bert&quot; with no local clone.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, use_temp_dir=<span class="hljs-literal">True</span>)

<span class="hljs-comment"># Push the model to an organization with the name &quot;my-finetuned-bert&quot; and have a local clone in the</span>
<span class="hljs-comment"># *my-finetuned-bert* folder.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, organization=<span class="hljs-string">&quot;huggingface&quot;</span>)

<span class="hljs-comment"># Make a change to an existing repo that has been cloned locally in *my-finetuned-bert*.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, repo_url=<span class="hljs-string">&quot;https://huggingface.co/sgugger/my-finetuned-bert&quot;</span>)`}}),oa=new v({props:{name:"compile",anchor:"transformers.TFPreTrainedModel.compile",parameters:[{name:"optimizer",val:" = 'rmsprop'"},{name:"loss",val:" = 'passthrough'"},{name:"metrics",val:" = None"},{name:"loss_weights",val:" = None"},{name:"weighted_metrics",val:" = None"},{name:"run_eagerly",val:" = None"},{name:"steps_per_execution",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L877"}}),aa=new v({props:{name:"from_pretrained",anchor:"transformers.TFPreTrainedModel.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L1439",parametersDescription:[{anchor:"transformers.TFPreTrainedModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.TFPreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
<li><code>None</code> if you are both providing the configuration and state dictionary (resp. with keyword
arguments <code>config</code> and <code>state_dict</code>).</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.model_args",description:`<strong>model_args</strong> (sequence of positional arguments, <em>optional</em>) &#x2014;
All remaining positional arguments will be passed to the underlying model&#x2019;s <code>__init__</code> method.`,name:"model_args"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.config",description:`<strong>config</strong> (<code>Union[PretrainedConfig, str]</code>, <em>optional</em>) &#x2014;
Can be either:</p>
<ul>
<li>an instance of a class derived from <a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>,</li>
<li>a string valid as input to <a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>.</li>
</ul>`,name:"config"}]}}),jt=new fl({props:{$$slots:{default:[l1]},$$scope:{ctx:S}}}),sa=new Q({props:{code:`from transformers import BertConfig, TFBertModel

# Download model and configuration from huggingface.co and cache.
model = TFBertModel.from_pretrained("bert-base-uncased")
# Model was saved using *save_pretrained('./test/saved_model/')* (for example purposes, not runnable).
model = TFBertModel.from_pretrained("./test/saved_model/")
# Update configuration during loading.
model = TFBertModel.from_pretrained("bert-base-uncased", output_attentions=True)
assert model.config.output_attentions == True
# Loading from a Pytorch model file instead of a TensorFlow checkpoint (slower, for example purposes, not runnable).
config = BertConfig.from_json_file("./pt_model/my_pt_model_config.json")
model = TFBertModel.from_pretrained("./pt_model/my_pytorch_model.bin", from_pt=True, config=config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertConfig, TFBertModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFBertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Model was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)* (for example purposes, not runnable).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFBertModel.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFBertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> model.config.output_attentions == <span class="hljs-literal">True</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a Pytorch model file instead of a TensorFlow checkpoint (slower, for example purposes, not runnable).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = BertConfig.from_json_file(<span class="hljs-string">&quot;./pt_model/my_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFBertModel.from_pretrained(<span class="hljs-string">&quot;./pt_model/my_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config)`}}),ia=new v({props:{name:"get_bias",anchor:"transformers.TFPreTrainedModel.get_bias",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L1123",returnDescription:`
<p>The weights representing the bias, None if not an LM model.</p>
`,returnType:`
<p><code>tf.Variable</code></p>
`}}),la=new v({props:{name:"get_input_embeddings",anchor:"transformers.TFPreTrainedModel.get_input_embeddings",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L796",returnDescription:`
<p>The embeddings layer mapping vocabulary to hidden states.</p>
`,returnType:`
<p><code>tf.Variable</code></p>
`}}),da=new v({props:{name:"get_lm_head",anchor:"transformers.TFPreTrainedModel.get_lm_head",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L1156",returnDescription:`
<p>The LM head layer if the model has one, None if not.</p>
`,returnType:`
<p><code>tf.keras.layers.Layer</code></p>
`}}),ma=new v({props:{name:"get_output_embeddings",anchor:"transformers.TFPreTrainedModel.get_output_embeddings",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L1063",returnDescription:`
<p>The new weights mapping vocabulary to hidden states.</p>
`,returnType:`
<p><code>tf.Variable</code></p>
`}}),ca=new v({props:{name:"get_output_layer_with_bias",anchor:"transformers.TFPreTrainedModel.get_output_layer_with_bias",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L1100",returnDescription:`
<p>The layer that handles the bias, None if not an LM model.</p>
`,returnType:`
<p><code>tf.keras.layers.Layer</code></p>
`}}),pa=new v({props:{name:"get_prefix_bias_name",anchor:"transformers.TFPreTrainedModel.get_prefix_bias_name",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L1113",returnDescription:`
<p>The _prefix name of the bias.</p>
`,returnType:`
<p><code>str</code></p>
`}}),ha=new v({props:{name:"load_repo_checkpoint",anchor:"transformers.TFPreTrainedModel.load_repo_checkpoint",parameters:[{name:"repo_path_or_name",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L823",parametersDescription:[{anchor:"transformers.TFPreTrainedModel.load_repo_checkpoint.repo_path_or_name",description:`<strong>repo_path_or_name</strong> (<code>str</code>) &#x2014;
Can either be a repository name for your {object} in the Hub or a path to a local folder (in which case
the repository will have the name of that local folder).`,name:"repo_path_or_name"}],returnDescription:`
<p>A dictionary of extra metadata from the checkpoint, most commonly an \u201Cepoch\u201D count.</p>
`,returnType:`
<p><code>dict</code></p>
`}}),fa=new v({props:{name:"prune_heads",anchor:"transformers.TFPreTrainedModel.prune_heads",parameters:[{name:"heads_to_prune",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L1365",parametersDescription:[{anchor:"transformers.TFPreTrainedModel.prune_heads.heads_to_prune",description:`<strong>heads_to_prune</strong> (<code>Dict[int, List[int]]</code>) &#x2014;
Dictionary with keys being selected layer indices (<code>int</code>) and associated values being the list of heads
to prune in said layer (list of <code>int</code>). For instance {1: [0, 2], 2: [2, 3]} will prune heads 0 and 2 on
layer 1 and heads 2 and 3 on layer 2.`,name:"heads_to_prune"}]}}),ua=new v({props:{name:"resize_token_embeddings",anchor:"transformers.TFPreTrainedModel.resize_token_embeddings",parameters:[{name:"new_num_tokens",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L1165",parametersDescription:[{anchor:"transformers.TFPreTrainedModel.resize_token_embeddings.new_num_tokens",description:`<strong>new_num_tokens</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The number of new tokens in the embedding matrix. Increasing the size will add newly initialized
vectors at the end. Reducing the size will remove vectors from the end. If not provided or <code>None</code>, just
returns a pointer to the input tokens <code>tf.Variable</code> module of the model without doing anything.`,name:"new_num_tokens"}],returnDescription:`
<p>Pointer to the input tokens Embeddings Module of the model.</p>
`,returnType:`
<p><code>tf.Variable</code></p>
`}}),ba=new v({props:{name:"save_pretrained",anchor:"transformers.TFPreTrainedModel.save_pretrained",parameters:[{name:"save_directory",val:""},{name:"saved_model",val:" = False"},{name:"version",val:" = 1"},{name:"push_to_hub",val:" = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L1377",parametersDescription:[{anchor:"transformers.TFPreTrainedModel.save_pretrained.save_directory",description:`<strong>save_directory</strong> (<code>str</code>) &#x2014;
Directory to which to save. Will be created if it doesn&#x2019;t exist.`,name:"save_directory"},{anchor:"transformers.TFPreTrainedModel.save_pretrained.saved_model",description:`<strong>saved_model</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If the model has to be saved in saved model format as well or not.`,name:"saved_model"},{anchor:"transformers.TFPreTrainedModel.save_pretrained.version",description:`<strong>version</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The version of the saved model. A saved model needs to be versioned in order to be properly loaded by
TensorFlow Serving as detailed in the official documentation
<a href="https://www.tensorflow.org/tfx/serving/serving_basic" rel="nofollow">https://www.tensorflow.org/tfx/serving/serving_basic</a>`,name:"version"},{anchor:"transformers.TFPreTrainedModel.save_pretrained.push_to_hub",description:`<strong>push_to_hub</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to push your model to the Hugging Face model hub after saving it.</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>Using <code>push_to_hub=True</code> will synchronize the repository you are pushing to with <code>save_directory</code>,
which requires <code>save_directory</code> to be a local clone of the repo you are pushing to if it&#x2019;s an existing
folder. Pass along <code>temp_dir=True</code> to use a temporary directory instead.</p>

					</div>
<p>kwargs &#x2014;
Additional key word arguments passed along to the <a href="/docs/transformers/master/en/main_classes/model#transformers.file_utils.PushToHubMixin.push_to_hub">push_to_hub()</a> method.`,name:"push_to_hub"}]}}),ya=new v({props:{name:"serving",anchor:"transformers.TFPreTrainedModel.serving",parameters:[{name:"inputs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L765",parametersDescription:[{anchor:"transformers.TFPreTrainedModel.serving.inputs",description:`<strong>inputs</strong> (<code>Dict[str, tf.Tensor]</code>) &#x2014;
The input of the saved model as a dictionary of tensors.`,name:"inputs"}]}}),$a=new v({props:{name:"serving_output",anchor:"transformers.TFPreTrainedModel.serving_output",parameters:[{name:"output",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L786",parametersDescription:[{anchor:"transformers.TFPreTrainedModel.serving_output.output",description:`<strong>output</strong> (<code>TFBaseModelOutput</code>) &#x2014;
The output returned by the model.`,name:"output"}]}}),wa=new v({props:{name:"set_bias",anchor:"transformers.TFPreTrainedModel.set_bias",parameters:[{name:"value",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L1140",parametersDescription:[{anchor:"transformers.TFPreTrainedModel.set_bias.value",description:`<strong>value</strong> (<code>Dict[tf.Variable]</code>) &#x2014;
All the new bias attached to an LM head.`,name:"value"}]}}),Ta=new v({props:{name:"set_input_embeddings",anchor:"transformers.TFPreTrainedModel.set_input_embeddings",parameters:[{name:"value",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L1043",parametersDescription:[{anchor:"transformers.TFPreTrainedModel.set_input_embeddings.value",description:`<strong>value</strong> (<code>tf.Variable</code>) &#x2014;
The new weights mapping hidden states to vocabulary.`,name:"value"}]}}),xa=new v({props:{name:"set_output_embeddings",anchor:"transformers.TFPreTrainedModel.set_output_embeddings",parameters:[{name:"value",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L1083",parametersDescription:[{anchor:"transformers.TFPreTrainedModel.set_output_embeddings.value",description:`<strong>value</strong> (<code>tf.Variable</code>) &#x2014;
The new weights mapping hidden states to vocabulary.`,name:"value"}]}}),Pa=new v({props:{name:"test_step",anchor:"transformers.TFPreTrainedModel.test_step",parameters:[{name:"data",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L977"}}),Ea=new v({props:{name:"train_step",anchor:"transformers.TFPreTrainedModel.train_step",parameters:[{name:"data",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L926"}}),Ma=new ro({}),ka=new v({props:{name:"class transformers.modeling_tf_utils.TFModelUtilsMixin",anchor:"transformers.modeling_tf_utils.TFModelUtilsMixin",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L83"}}),Da=new v({props:{name:"num_parameters",anchor:"transformers.modeling_tf_utils.TFModelUtilsMixin.num_parameters",parameters:[{name:"only_trainable",val:": bool = False"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_tf_utils.py#L88",parametersDescription:[{anchor:"transformers.modeling_tf_utils.TFModelUtilsMixin.num_parameters.only_trainable",description:`<strong>only_trainable</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to return only the number of trainable parameters`,name:"only_trainable"}],returnDescription:`
<p>The number of parameters.</p>
`,returnType:`
<p><code>int</code></p>
`}}),Fa=new ro({}),qa=new v({props:{name:"class transformers.FlaxPreTrainedModel",anchor:"transformers.FlaxPreTrainedModel",parameters:[{name:"config",val:": PretrainedConfig"},{name:"module",val:": Module"},{name:"input_shape",val:": typing.Tuple = (1, 1)"},{name:"seed",val:": int = 0"},{name:"dtype",val:": dtype = <class 'jax._src.numpy.lax_numpy.float32'>"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_flax_utils.py#L72"}}),Aa=new v({props:{name:"push_to_hub",anchor:"transformers.file_utils.PushToHubMixin.push_to_hub",parameters:[{name:"repo_path_or_name",val:": typing.Optional[str] = None"},{name:"repo_url",val:": typing.Optional[str] = None"},{name:"use_temp_dir",val:": bool = False"},{name:"commit_message",val:": typing.Optional[str] = None"},{name:"organization",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = None"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"},{name:"**model_card_kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/file_utils.py#L2851",parametersDescription:[{anchor:"transformers.file_utils.PushToHubMixin.push_to_hub.repo_path_or_name",description:`<strong>repo_path_or_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Can either be a repository name for your model in the Hub or a path to a local folder (in which case
the repository will have the name of that local folder). If not specified, will default to the name
given by <code>repo_url</code> and a local directory with that name will be created.`,name:"repo_path_or_name"},{anchor:"transformers.file_utils.PushToHubMixin.push_to_hub.repo_url",description:`<strong>repo_url</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Specify this in case you want to push to an existing repository in the hub. If unspecified, a new
repository will be created in your namespace (unless you specify an <code>organization</code>) with <code>repo_name</code>.`,name:"repo_url"},{anchor:"transformers.file_utils.PushToHubMixin.push_to_hub.use_temp_dir",description:`<strong>use_temp_dir</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to clone the distant repo in a temporary directory or in <code>repo_path_or_name</code> inside the
current working directory. This will slow things down if you are making changes in an existing repo
since you will need to clone the repo before every push.`,name:"use_temp_dir"},{anchor:"transformers.file_utils.PushToHubMixin.push_to_hub.commit_message",description:`<strong>commit_message</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Message to commit while pushing. Will default to <code>&quot;add model&quot;</code>.`,name:"commit_message"},{anchor:"transformers.file_utils.PushToHubMixin.push_to_hub.organization",description:`<strong>organization</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Organization in which you want to push your model (you must be a member of this organization).`,name:"organization"},{anchor:"transformers.file_utils.PushToHubMixin.push_to_hub.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not the repository created should be private (requires a paying subscription).`,name:"private"},{anchor:"transformers.file_utils.PushToHubMixin.push_to_hub.use_auth_token",description:`<strong>use_auth_token</strong> (<code>bool</code> or <code>str</code>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>). Will default to <code>True</code> if
<code>repo_url</code> is not specified.`,name:"use_auth_token"}],returnDescription:`
<p>The url of the commit of your model in the given repository.</p>
`,returnType:`
<p><code>str</code></p>
`}}),Ia=new Q({props:{code:`from transformers import FlaxAutoModel

model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Push the model to your namespace with the name "my-finetuned-bert" and have a local clone in the
# *my-finetuned-bert* folder.
model.push_to_hub("my-finetuned-bert")

# Push the model to your namespace with the name "my-finetuned-bert" with no local clone.
model.push_to_hub("my-finetuned-bert", use_temp_dir=True)

# Push the model to an organization with the name "my-finetuned-bert" and have a local clone in the
# *my-finetuned-bert* folder.
model.push_to_hub("my-finetuned-bert", organization="huggingface")

# Make a change to an existing repo that has been cloned locally in *my-finetuned-bert*.
model.push_to_hub("my-finetuned-bert", repo_url="https://huggingface.co/sgugger/my-finetuned-bert")`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> FlaxAutoModel

model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-comment"># Push the model to your namespace with the name &quot;my-finetuned-bert&quot; and have a local clone in the</span>
<span class="hljs-comment"># *my-finetuned-bert* folder.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>)

<span class="hljs-comment"># Push the model to your namespace with the name &quot;my-finetuned-bert&quot; with no local clone.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, use_temp_dir=<span class="hljs-literal">True</span>)

<span class="hljs-comment"># Push the model to an organization with the name &quot;my-finetuned-bert&quot; and have a local clone in the</span>
<span class="hljs-comment"># *my-finetuned-bert* folder.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, organization=<span class="hljs-string">&quot;huggingface&quot;</span>)

<span class="hljs-comment"># Make a change to an existing repo that has been cloned locally in *my-finetuned-bert*.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, repo_url=<span class="hljs-string">&quot;https://huggingface.co/sgugger/my-finetuned-bert&quot;</span>)`}}),La=new v({props:{name:"from_pretrained",anchor:"transformers.FlaxPreTrainedModel.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:": typing.Union[str, os.PathLike]"},{name:"dtype",val:": dtype = <class 'jax._src.numpy.lax_numpy.float32'>"},{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_flax_utils.py#L296",parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.FlaxPreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>pt index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In this case,
<code>from_pt</code> should be set to <code>True</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.dtype",description:`<strong>dtype</strong> (<code>jax.numpy.dtype</code>, <em>optional</em>, defaults to <code>jax.numpy.float32</code>) &#x2014;
The data type of the computation. Can be one of <code>jax.numpy.float32</code>, <code>jax.numpy.float16</code> (on GPUs) and
<code>jax.numpy.bfloat16</code> (on TPUs).</p>
<p>This can be used to enable mixed-precision training or half-precision inference on GPUs or TPUs. If
specified all the computation will be performed with the given <code>dtype</code>.</p>
<p><strong>Note that this only specifies the dtype of the computation and does not influence the dtype of model
parameters.</strong></p>
<p>If you wish to change the dtype of the model parameters, see <a href="/docs/transformers/master/en/main_classes/model#transformers.FlaxPreTrainedModel.to_fp16">to_fp16()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.FlaxPreTrainedModel.to_bf16">to_bf16()</a>.`,name:"dtype"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.model_args",description:`<strong>model_args</strong> (sequence of positional arguments, <em>optional</em>) &#x2014;
All remaining positional arguments will be passed to the underlying model&#x2019;s <code>__init__</code> method.`,name:"model_args"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.config",description:`<strong>config</strong> (<code>Union[PretrainedConfig, str, os.PathLike]</code>, <em>optional</em>) &#x2014;
Can be either:</p>
<ul>
<li>an instance of a class derived from <a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>,</li>
<li>a string or path valid as input to <a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>.</li>
</ul>`,name:"config"}]}}),Ua=new Q({props:{code:`from transformers import BertConfig, FlaxBertModel

# Download model and configuration from huggingface.co and cache.
model = FlaxBertModel.from_pretrained("bert-base-cased")
# Model was saved using *save_pretrained('./test/saved_model/')* (for example purposes, not runnable).
model = FlaxBertModel.from_pretrained("./test/saved_model/")
# Loading from a PyTorch checkpoint file instead of a PyTorch model (slower, for example purposes, not runnable).
config = BertConfig.from_json_file("./pt_model/config.json")
model = FlaxBertModel.from_pretrained("./pt_model/pytorch_model.bin", from_pt=True, config=config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertConfig, FlaxBertModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Model was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)* (for example purposes, not runnable).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a PyTorch model (slower, for example purposes, not runnable).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = BertConfig.from_json_file(<span class="hljs-string">&quot;./pt_model/config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;./pt_model/pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config)`}}),Na=new v({props:{name:"register_for_auto_class",anchor:"transformers.FlaxPreTrainedModel.register_for_auto_class",parameters:[{name:"auto_class",val:" = 'FlaxAutoModel'"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_flax_utils.py#L716",parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.register_for_auto_class.auto_class",description:`<strong>auto_class</strong> (<code>str</code> or <code>type</code>, <em>optional</em>, defaults to <code>&quot;FlaxAutoModel&quot;</code>) &#x2014;
The auto class to register this new model with.`,name:"auto_class"}]}}),Yt=new fl({props:{warning:"&lcub;true}",$$slots:{default:[d1]},$$scope:{ctx:S}}}),Ha=new v({props:{name:"save_pretrained",anchor:"transformers.FlaxPreTrainedModel.save_pretrained",parameters:[{name:"save_directory",val:": typing.Union[str, os.PathLike]"},{name:"params",val:" = None"},{name:"push_to_hub",val:" = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_flax_utils.py#L659",parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.save_pretrained.save_directory",description:`<strong>save_directory</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Directory to which to save. Will be created if it doesn&#x2019;t exist.`,name:"save_directory"},{anchor:"transformers.FlaxPreTrainedModel.save_pretrained.push_to_hub",description:`<strong>push_to_hub</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to push your model to the Hugging Face model hub after saving it.</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>Using <code>push_to_hub=True</code> will synchronize the repository you are pushing to with <code>save_directory</code>,
which requires <code>save_directory</code> to be a local clone of the repo you are pushing to if it&#x2019;s an existing
folder. Pass along <code>temp_dir=True</code> to use a temporary directory instead.</p>

					</div>
<p>kwargs &#x2014;
Additional key word arguments passed along to the <a href="/docs/transformers/master/en/main_classes/model#transformers.file_utils.PushToHubMixin.push_to_hub">push_to_hub()</a> method.`,name:"push_to_hub"}]}}),Ba=new v({props:{name:"to_bf16",anchor:"transformers.FlaxPreTrainedModel.to_bf16",parameters:[{name:"params",val:": typing.Union[typing.Dict, flax.core.frozen_dict.FrozenDict]"},{name:"mask",val:": typing.Any = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_flax_utils.py#L191",parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.to_bf16.params",description:`<strong>params</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> of model parameters.`,name:"params"},{anchor:"transformers.FlaxPreTrainedModel.to_bf16.mask",description:`<strong>mask</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> with same structure as the <code>params</code> tree. The leaves should be booleans, <code>True</code> for params
you want to cast, and should be <code>False</code> for those you want to skip.`,name:"mask"}]}}),Va=new Q({props:{code:`from transformers import FlaxBertModel

# load model
model = FlaxBertModel.from_pretrained("bert-base-cased")
# By default, the model parameters will be in fp32 precision, to cast these to bfloat16 precision
model.params = model.to_bf16(model.params)
# If you want don't want to cast certain parameters (for example layer norm bias and scale)
# then pass the mask as follows
from flax import traverse_util

model = FlaxBertModel.from_pretrained("bert-base-cased")
flat_params = traverse_util.flatten_dict(model.params)
mask = {
    path: (path[-2] != ("LayerNorm", "bias") and path[-2:] != ("LayerNorm", "scale"))
    for path in flat_params
}
mask = traverse_util.unflatten_dict(mask)
model.params = model.to_bf16(model.params, mask)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> FlaxBertModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># load model</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># By default, the model parameters will be in fp32 precision, to cast these to bfloat16 precision</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model.params = model.to_bf16(model.params)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If you want don&#x27;t want to cast certain parameters (for example layer norm bias and scale)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># then pass the mask as follows</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> flax <span class="hljs-keyword">import</span> traverse_util

<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>flat_params = traverse_util.flatten_dict(model.params)
<span class="hljs-meta">&gt;&gt;&gt; </span>mask = {
<span class="hljs-meta">... </span>    path: (path[-<span class="hljs-number">2</span>] != (<span class="hljs-string">&quot;LayerNorm&quot;</span>, <span class="hljs-string">&quot;bias&quot;</span>) <span class="hljs-keyword">and</span> path[-<span class="hljs-number">2</span>:] != (<span class="hljs-string">&quot;LayerNorm&quot;</span>, <span class="hljs-string">&quot;scale&quot;</span>))
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> path <span class="hljs-keyword">in</span> flat_params
<span class="hljs-meta">... </span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>mask = traverse_util.unflatten_dict(mask)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.params = model.to_bf16(model.params, mask)`}}),Sa=new v({props:{name:"to_fp16",anchor:"transformers.FlaxPreTrainedModel.to_fp16",parameters:[{name:"params",val:": typing.Union[typing.Dict, flax.core.frozen_dict.FrozenDict]"},{name:"mask",val:": typing.Any = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_flax_utils.py#L257",parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.to_fp16.params",description:`<strong>params</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> of model parameters.`,name:"params"},{anchor:"transformers.FlaxPreTrainedModel.to_fp16.mask",description:`<strong>mask</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> with same structure as the <code>params</code> tree. The leaves should be booleans, <code>True</code> for params
you want to cast, and should be <code>False</code> for those you want to skip`,name:"mask"}]}}),Wa=new Q({props:{code:`from transformers import FlaxBertModel

# load model
model = FlaxBertModel.from_pretrained("bert-base-cased")
# By default, the model params will be in fp32, to cast these to float16
model.params = model.to_fp16(model.params)
# If you want don't want to cast certain parameters (for example layer norm bias and scale)
# then pass the mask as follows
from flax import traverse_util

model = FlaxBertModel.from_pretrained("bert-base-cased")
flat_params = traverse_util.flatten_dict(model.params)
mask = {
    path: (path[-2] != ("LayerNorm", "bias") and path[-2:] != ("LayerNorm", "scale"))
    for path in flat_params
}
mask = traverse_util.unflatten_dict(mask)
model.params = model.to_fp16(model.params, mask)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> FlaxBertModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># load model</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># By default, the model params will be in fp32, to cast these to float16</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model.params = model.to_fp16(model.params)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If you want don&#x27;t want to cast certain parameters (for example layer norm bias and scale)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># then pass the mask as follows</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> flax <span class="hljs-keyword">import</span> traverse_util

<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>flat_params = traverse_util.flatten_dict(model.params)
<span class="hljs-meta">&gt;&gt;&gt; </span>mask = {
<span class="hljs-meta">... </span>    path: (path[-<span class="hljs-number">2</span>] != (<span class="hljs-string">&quot;LayerNorm&quot;</span>, <span class="hljs-string">&quot;bias&quot;</span>) <span class="hljs-keyword">and</span> path[-<span class="hljs-number">2</span>:] != (<span class="hljs-string">&quot;LayerNorm&quot;</span>, <span class="hljs-string">&quot;scale&quot;</span>))
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> path <span class="hljs-keyword">in</span> flat_params
<span class="hljs-meta">... </span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>mask = traverse_util.unflatten_dict(mask)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.params = model.to_fp16(model.params, mask)`}}),Ga=new v({props:{name:"to_fp32",anchor:"transformers.FlaxPreTrainedModel.to_fp32",parameters:[{name:"params",val:": typing.Union[typing.Dict, flax.core.frozen_dict.FrozenDict]"},{name:"mask",val:": typing.Any = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/modeling_flax_utils.py#L230",parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.to_fp32.params",description:`<strong>params</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> of model parameters.`,name:"params"},{anchor:"transformers.FlaxPreTrainedModel.to_fp32.mask",description:`<strong>mask</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> with same structure as the <code>params</code> tree. The leaves should be booleans, <code>True</code> for params
you want to cast, and should be <code>False</code> for those you want to skip`,name:"mask"}]}}),Ra=new Q({props:{code:`from transformers import FlaxBertModel

# Download model and configuration from huggingface.co
model = FlaxBertModel.from_pretrained("bert-base-cased")
# By default, the model params will be in fp32, to illustrate the use of this method,
# we'll first cast to fp16 and back to fp32
model.params = model.to_f16(model.params)
# now cast back to fp32
model.params = model.to_fp32(model.params)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> FlaxBertModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># By default, the model params will be in fp32, to illustrate the use of this method,</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># we&#x27;ll first cast to fp16 and back to fp32</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model.params = model.to_f16(model.params)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># now cast back to fp32</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model.params = model.to_fp32(model.params)`}}),Ya=new ro({}),Ka=new v({props:{name:"class transformers.file_utils.PushToHubMixin",anchor:"transformers.file_utils.PushToHubMixin",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/file_utils.py#L2846"}}),Ja=new v({props:{name:"push_to_hub",anchor:"transformers.file_utils.PushToHubMixin.push_to_hub",parameters:[{name:"repo_path_or_name",val:": typing.Optional[str] = None"},{name:"repo_url",val:": typing.Optional[str] = None"},{name:"use_temp_dir",val:": bool = False"},{name:"commit_message",val:": typing.Optional[str] = None"},{name:"organization",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = None"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"},{name:"**model_card_kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/file_utils.py#L2851",parametersDescription:[{anchor:"transformers.file_utils.PushToHubMixin.push_to_hub.repo_path_or_name",description:`<strong>repo_path_or_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Can either be a repository name for your {object} in the Hub or a path to a local folder (in which case
the repository will have the name of that local folder). If not specified, will default to the name
given by <code>repo_url</code> and a local directory with that name will be created.`,name:"repo_path_or_name"},{anchor:"transformers.file_utils.PushToHubMixin.push_to_hub.repo_url",description:`<strong>repo_url</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Specify this in case you want to push to an existing repository in the hub. If unspecified, a new
repository will be created in your namespace (unless you specify an <code>organization</code>) with <code>repo_name</code>.`,name:"repo_url"},{anchor:"transformers.file_utils.PushToHubMixin.push_to_hub.use_temp_dir",description:`<strong>use_temp_dir</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to clone the distant repo in a temporary directory or in <code>repo_path_or_name</code> inside the
current working directory. This will slow things down if you are making changes in an existing repo
since you will need to clone the repo before every push.`,name:"use_temp_dir"},{anchor:"transformers.file_utils.PushToHubMixin.push_to_hub.commit_message",description:`<strong>commit_message</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Message to commit while pushing. Will default to <code>&quot;add {object}&quot;</code>.`,name:"commit_message"},{anchor:"transformers.file_utils.PushToHubMixin.push_to_hub.organization",description:`<strong>organization</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Organization in which you want to push your {object} (you must be a member of this organization).`,name:"organization"},{anchor:"transformers.file_utils.PushToHubMixin.push_to_hub.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not the repository created should be private (requires a paying subscription).`,name:"private"},{anchor:"transformers.file_utils.PushToHubMixin.push_to_hub.use_auth_token",description:`<strong>use_auth_token</strong> (<code>bool</code> or <code>str</code>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>). Will default to <code>True</code> if
<code>repo_url</code> is not specified.`,name:"use_auth_token"}],returnDescription:`
<p>The url of the commit of your {object} in the given repository.</p>
`,returnType:`
<p><code>str</code></p>
`}}),Za=new Q({props:{code:`from transformers import {object_class}

{object} = {object_class}.from_pretrained("bert-base-cased")

# Push the {object} to your namespace with the name "my-finetuned-bert" and have a local clone in the
# *my-finetuned-bert* folder.
{object}.push_to_hub("my-finetuned-bert")

# Push the {object} to your namespace with the name "my-finetuned-bert" with no local clone.
{object}.push_to_hub("my-finetuned-bert", use_temp_dir=True)

# Push the {object} to an organization with the name "my-finetuned-bert" and have a local clone in the
# *my-finetuned-bert* folder.
{object}.push_to_hub("my-finetuned-bert", organization="huggingface")

# Make a change to an existing repo that has been cloned locally in *my-finetuned-bert*.
{object}.push_to_hub("my-finetuned-bert", repo_url="https://huggingface.co/sgugger/my-finetuned-bert")`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> {object_class}

{<span class="hljs-built_in">object</span>} = {object_class}.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-comment"># Push the {object} to your namespace with the name &quot;my-finetuned-bert&quot; and have a local clone in the</span>
<span class="hljs-comment"># *my-finetuned-bert* folder.</span>
{<span class="hljs-built_in">object</span>}.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>)

<span class="hljs-comment"># Push the {object} to your namespace with the name &quot;my-finetuned-bert&quot; with no local clone.</span>
{<span class="hljs-built_in">object</span>}.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, use_temp_dir=<span class="hljs-literal">True</span>)

<span class="hljs-comment"># Push the {object} to an organization with the name &quot;my-finetuned-bert&quot; and have a local clone in the</span>
<span class="hljs-comment"># *my-finetuned-bert* folder.</span>
{<span class="hljs-built_in">object</span>}.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, organization=<span class="hljs-string">&quot;huggingface&quot;</span>)

<span class="hljs-comment"># Make a change to an existing repo that has been cloned locally in *my-finetuned-bert*.</span>
{<span class="hljs-built_in">object</span>}.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>, repo_url=<span class="hljs-string">&quot;https://huggingface.co/sgugger/my-finetuned-bert&quot;</span>)`}}),{c(){w=o("meta"),k=l(),x=o("h1"),E=o("a"),W=o("span"),c(A.$$.fragment),L=l(),de=o("span"),Jd=s("Models"),ul=l(),Z=o("p"),Qd=s("The base classes "),rn=o("a"),Zd=s("PreTrainedModel"),em=s(", "),sn=o("a"),tm=s("TFPreTrainedModel"),om=s(`, and
`),ln=o("a"),am=s("FlaxPreTrainedModel"),nm=s(` implement the common methods for loading/saving a model either from a local
file or directory, or from a pretrained model configuration provided by the library (downloaded from HuggingFace\u2019s AWS
S3 repository).`),gl=l(),Le=o("p"),dn=o("a"),rm=s("PreTrainedModel"),sm=s(" and "),mn=o("a"),im=s("TFPreTrainedModel"),lm=s(` also implement a few methods which
are common among all the models to:`),_l=l(),Ze=o("ul"),Qn=o("li"),dm=s("resize the input token embeddings when new tokens are added to the vocabulary"),mm=l(),Zn=o("li"),cm=s("prune the attention heads of the model."),bl=l(),z=o("p"),pm=s("The other methods that are common to each model are defined in "),cn=o("a"),hm=s("ModuleUtilsMixin"),fm=s(`
(for the PyTorch models) and `),er=o("code"),um=s("TFModuleUtilsMixin"),gm=s(` (for the TensorFlow models) or
for text generation, `),pn=o("a"),_m=s("GenerationMixin"),bm=s(` (for the PyTorch models),
`),hn=o("a"),vm=s("TFGenerationMixin"),ym=s(` (for the TensorFlow models) and
`),fn=o("a"),$m=s("FlaxGenerationMixin"),wm=s(" (for the Flax/JAX models)."),vl=l(),ze=o("h2"),et=o("a"),tr=o("span"),c(so.$$.fragment),Tm=l(),or=o("span"),xm=s("PreTrainedModel"),yl=l(),T=o("div"),c(io.$$.fragment),Pm=l(),ar=o("p"),Em=s("Base class for all models."),Mm=l(),un=o("p"),gn=o("a"),km=s("PreTrainedModel"),jm=s(` takes care of storing the configuration of the models and handles methods for loading,
downloading and saving models as well as a few methods common to all models to:`),Dm=l(),lo=o("ul"),nr=o("li"),Fm=s("resize the input embeddings,"),qm=l(),rr=o("li"),Am=s("prune heads in the self-attention heads."),Cm=l(),sr=o("p"),Im=s("Class attributes (overridden by derived classes):"),Lm=l(),G=o("ul"),ir=o("li"),ge=o("p"),lr=o("strong"),zm=s("config_class"),Om=s(" ("),_n=o("a"),Um=s("PretrainedConfig"),Nm=s(") \u2014 A subclass of "),bn=o("a"),Hm=s("PretrainedConfig"),Xm=s(` to use as configuration class
for this model architecture.`),Bm=l(),mo=o("li"),_e=o("p"),dr=o("strong"),Vm=s("load_tf_weights"),Sm=s(" ("),mr=o("code"),Wm=s("Callable"),Gm=s(") \u2014 A python "),cr=o("em"),Rm=s("method"),Ym=s(` for loading a TensorFlow checkpoint in a PyTorch model,
taking as arguments:`),Km=l(),Oe=o("ul"),tt=o("li"),pr=o("strong"),Jm=s("model"),Qm=s(" ("),vn=o("a"),Zm=s("PreTrainedModel"),ec=s(") \u2014 An instance of the model on which to load the TensorFlow checkpoint."),tc=l(),ot=o("li"),hr=o("strong"),oc=s("config"),ac=s(" ("),fr=o("code"),nc=s("PreTrainedConfig"),rc=s(") \u2014 An instance of the configuration associated to the model."),sc=l(),at=o("li"),ur=o("strong"),ic=s("path"),lc=s(" ("),gr=o("code"),dc=s("str"),mc=s(") \u2014 A path to the TensorFlow checkpoint."),cc=l(),_r=o("li"),nt=o("p"),br=o("strong"),pc=s("base_model_prefix"),hc=s(" ("),vr=o("code"),fc=s("str"),uc=s(`) \u2014 A string indicating the attribute associated to the base model in derived
classes of the same architecture adding modules on top of the base model.`),gc=l(),yr=o("li"),rt=o("p"),$r=o("strong"),_c=s("is_parallelizable"),bc=s(" ("),wr=o("code"),vc=s("bool"),yc=s(") \u2014 A flag indicating whether this model supports model parallelization."),$c=l(),Tr=o("li"),U=o("p"),xr=o("strong"),wc=s("main_input_name"),Tc=s(" ("),Pr=o("code"),xc=s("str"),Pc=s(") \u2014 The name of the principal input to the model (often "),Er=o("code"),Ec=s("input_ids"),Mc=s(` for NLP
models, `),Mr=o("code"),kc=s("pixel_values"),jc=s(" for vision models and "),kr=o("code"),Dc=s("input_values"),Fc=s(" for speech models)."),qc=l(),ee=o("div"),c(co.$$.fragment),Ac=l(),po=o("p"),Cc=s(`Upload the model checkpoint to the \u{1F917} Model Hub while synchronizing a local clone of the repo in
`),jr=o("code"),Ic=s("repo_path_or_name"),Lc=s("."),zc=l(),Dr=o("p"),Oc=s("Examples:"),Uc=l(),c(ho.$$.fragment),Nc=l(),F=o("div"),c(fo.$$.fragment),Hc=l(),Fr=o("p"),Xc=s("Instantiate a pretrained pytorch model from a pre-trained model configuration."),Bc=l(),Ue=o("p"),Vc=s("The model is set in evaluation mode by default using "),qr=o("code"),Sc=s("model.eval()"),Wc=s(` (Dropout modules are deactivated). To train
the model, you should first set it back in training mode with `),Ar=o("code"),Gc=s("model.train()"),Rc=s("."),Yc=l(),uo=o("p"),Kc=s("The warning "),Cr=o("em"),Jc=s("Weights from XXX not initialized from pretrained model"),Qc=s(` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),Zc=l(),go=o("p"),ep=s("The warning "),Ir=o("em"),tp=s("Weights from XXX not used in YYY"),op=s(` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),ap=l(),c(st.$$.fragment),np=l(),c(it.$$.fragment),rp=l(),Lr=o("p"),sp=s("Examples:"),ip=l(),c(_o.$$.fragment),lp=l(),lt=o("div"),c(bo.$$.fragment),dp=l(),zr=o("p"),mp=s("Returns the model\u2019s input embeddings."),cp=l(),dt=o("div"),c(vo.$$.fragment),pp=l(),Or=o("p"),hp=s("Returns the model\u2019s output embeddings."),fp=l(),be=o("div"),c(yo.$$.fragment),up=l(),Ur=o("p"),gp=s("Deactivates gradient checkpointing for the current model."),_p=l(),Nr=o("p"),bp=s(`Note that in other frameworks this feature can be referred to as \u201Cactivation checkpointing\u201D or \u201Ccheckpoint
activations\u201D.`),vp=l(),ve=o("div"),c($o.$$.fragment),yp=l(),Hr=o("p"),$p=s("Activates gradient checkpointing for the current model."),wp=l(),Xr=o("p"),Tp=s(`Note that in other frameworks this feature can be referred to as \u201Cactivation checkpointing\u201D or \u201Ccheckpoint
activations\u201D.`),xp=l(),mt=o("div"),c(wo.$$.fragment),Pp=l(),Br=o("p"),Ep=s("If needed prunes and maybe initializes weights."),Mp=l(),ct=o("div"),c(To.$$.fragment),kp=l(),Vr=o("p"),jp=s(`A method executed at the end of each Transformer model initialization, to execute code that needs the model\u2019s
modules properly initialized (such as weight initialization).`),Dp=l(),pt=o("div"),c(xo.$$.fragment),Fp=l(),Sr=o("p"),qp=s("Prunes heads of the base model."),Ap=l(),ye=o("div"),c(Po.$$.fragment),Cp=l(),Wr=o("p"),Ip=s(`Register this class with a given auto class. This should only be used for custom models as the ones in the
library are already mapped with an auto class.`),Lp=l(),c(ht.$$.fragment),zp=l(),$e=o("div"),c(Eo.$$.fragment),Op=l(),Mo=o("p"),Up=s("Resizes input token embeddings matrix of the model if "),Gr=o("code"),Np=s("new_num_tokens != config.vocab_size"),Hp=s("."),Xp=l(),ko=o("p"),Bp=s("Takes care of tying weights embeddings afterwards if the model class has a "),Rr=o("code"),Vp=s("tie_weights()"),Sp=s(" method."),Wp=l(),ft=o("div"),c(jo.$$.fragment),Gp=l(),Do=o("p"),Rp=s(`Save a model and its configuration file to a directory, so that it can be re-loaded using the
`),Yr=o("code"),Yp=s("[from_pretrained()](/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)"),Kp=s(" class method."),Jp=l(),ut=o("div"),c(Fo.$$.fragment),Qp=l(),Kr=o("p"),Zp=s("Set model\u2019s input embeddings."),eh=l(),we=o("div"),c(qo.$$.fragment),th=l(),Jr=o("p"),oh=s("Tie the weights between the input embeddings and the output embeddings."),ah=l(),Ao=o("p"),nh=s("If the "),Qr=o("code"),rh=s("torchscript"),sh=s(` flag is set in the configuration, can\u2019t handle parameter sharing so we are cloning the
weights instead.`),$l=l(),yn=o("a"),wl=l(),Ne=o("h3"),gt=o("a"),Zr=o("span"),c(Co.$$.fragment),ih=l(),es=o("span"),lh=s("Model Instantiation dtype"),Tl=l(),te=o("p"),dh=s("Under Pytorch a model normally gets instantiated with "),ts=o("code"),mh=s("torch.float32"),ch=s(` format. This can be an issue if one tries to
load a model whose weights are in fp16, since it\u2019d require twice as much memory. To overcome this limitation, you can
either explicitly pass the desired `),os=o("code"),ph=s("dtype"),hh=s(" using "),as=o("code"),fh=s("torch_dtype"),uh=s(" argument:"),xl=l(),c(Io.$$.fragment),Pl=l(),Te=o("p"),gh=s("or, if you want the model to always load in the most optimal memory pattern, you can use the special value "),ns=o("code"),_h=s('"auto"'),bh=s(`,
and then `),rs=o("code"),vh=s("dtype"),yh=s(" will be automatically derived from the model\u2019s weights:"),El=l(),c(Lo.$$.fragment),Ml=l(),_t=o("p"),$h=s("Models instantiated from scratch can also be told which "),ss=o("code"),wh=s("dtype"),Th=s(" to use with:"),kl=l(),c(zo.$$.fragment),jl=l(),$n=o("p"),xh=s("Due to Pytorch design, this functionality is only available for floating dtypes."),Dl=l(),He=o("h2"),bt=o("a"),is=o("span"),c(Oo.$$.fragment),Ph=l(),ls=o("span"),Eh=s("ModuleUtilsMixin"),Fl=l(),j=o("div"),c(Uo.$$.fragment),Mh=l(),No=o("p"),kh=s("A few utilities for "),ds=o("code"),jh=s("torch.nn.Modules"),Dh=s(", to be used as a mixin."),Fh=l(),xe=o("div"),c(Ho.$$.fragment),qh=l(),ms=o("p"),Ah=s("Add a memory hook before and after each sub-module forward pass to record increase in memory consumption."),Ch=l(),Xe=o("p"),Ih=s("Increase in memory consumption is stored in a "),cs=o("code"),Lh=s("mem_rss_diff"),zh=s(` attribute for each module and can be reset to zero
with `),ps=o("code"),Oh=s("model.reset_memory_hooks_state()"),Uh=s("."),Nh=l(),vt=o("div"),c(Xo.$$.fragment),Hh=l(),hs=o("p"),Xh=s("Helper function to estimate the total number of tokens from the model inputs."),Bh=l(),yt=o("div"),c(Bo.$$.fragment),Vh=l(),Be=o("p"),Sh=s(`Get number of (optionally, non-embeddings) floating-point operations for the forward and backward passes of a
batch with this transformer model. Default approximation neglects the quadratic dependency on the number of
tokens (valid if `),fs=o("code"),Wh=s("12 * d_model << sequence_length"),Gh=s(") as laid out in "),Vo=o("a"),Rh=s(`this
paper`),Yh=s(` section 2.1. Should be overridden for transformers with parameter
re-use e.g. Albert or Universal Transformers, or if doing long-range modeling with very high sequence lengths.`),Kh=l(),$t=o("div"),c(So.$$.fragment),Jh=l(),us=o("p"),Qh=s("Makes broadcastable attention and causal masks so that future and masked tokens are ignored."),Zh=l(),wt=o("div"),c(Wo.$$.fragment),ef=l(),gs=o("p"),tf=s("Prepare the head mask if needed."),of=l(),Tt=o("div"),c(Go.$$.fragment),af=l(),_s=o("p"),nf=s("Invert an attention mask (e.g., switches 0. and 1.)."),rf=l(),xt=o("div"),c(Ro.$$.fragment),sf=l(),bs=o("p"),lf=s("Get number of (optionally, trainable or non-embeddings) parameters in the module."),df=l(),Pt=o("div"),c(Yo.$$.fragment),mf=l(),Ve=o("p"),cf=s("Reset the "),vs=o("code"),pf=s("mem_rss_diff"),hf=s(" attribute of each module (see "),wn=o("a"),ff=s("add_memory_hooks()"),uf=s(")."),ql=l(),Se=o("h2"),Et=o("a"),ys=o("span"),c(Ko.$$.fragment),gf=l(),$s=o("span"),_f=s("TFPreTrainedModel"),Al=l(),b=o("div"),c(Jo.$$.fragment),bf=l(),ws=o("p"),vf=s("Base class for all TF models."),yf=l(),Tn=o("p"),xn=o("a"),$f=s("TFPreTrainedModel"),wf=s(` takes care of storing the configuration of the models and handles methods for loading,
downloading and saving models as well as a few methods common to all models to:`),Tf=l(),Qo=o("ul"),Ts=o("li"),xf=s("resize the input embeddings,"),Pf=l(),xs=o("li"),Ef=s("prune heads in the self-attention heads."),Mf=l(),Ps=o("p"),kf=s("Class attributes (overridden by derived classes):"),jf=l(),We=o("ul"),Pe=o("li"),Es=o("strong"),Df=s("config_class"),Ff=s(" ("),Pn=o("a"),qf=s("PretrainedConfig"),Af=s(") \u2014 A subclass of "),En=o("a"),Cf=s("PretrainedConfig"),If=s(` to use as configuration class
for this model architecture.`),Lf=l(),Mt=o("li"),Ms=o("strong"),zf=s("base_model_prefix"),Of=s(" ("),ks=o("code"),Uf=s("str"),Nf=s(`) \u2014 A string indicating the attribute associated to the base model in derived
classes of the same architecture adding modules on top of the base model.`),Hf=l(),N=o("li"),js=o("strong"),Xf=s("main_input_name"),Bf=s(" ("),Ds=o("code"),Vf=s("str"),Sf=s(") \u2014 The name of the principal input to the model (often "),Fs=o("code"),Wf=s("input_ids"),Gf=s(` for NLP
models, `),qs=o("code"),Rf=s("pixel_values"),Yf=s(" for vision models and "),As=o("code"),Kf=s("input_values"),Jf=s(" for speech models)."),Qf=l(),oe=o("div"),c(Zo.$$.fragment),Zf=l(),ea=o("p"),eu=s(`Upload the model checkpoint to the \u{1F917} Model Hub while synchronizing a local clone of the repo in
`),Cs=o("code"),tu=s("repo_path_or_name"),ou=s("."),au=l(),Is=o("p"),nu=s("Examples:"),ru=l(),c(ta.$$.fragment),su=l(),kt=o("div"),c(oa.$$.fragment),iu=l(),Ls=o("p"),lu=s(`This is a thin wrapper that sets the model\u2019s loss output head as the loss if the user does not specify a loss
function themselves.`),du=l(),C=o("div"),c(aa.$$.fragment),mu=l(),zs=o("p"),cu=s("Instantiate a pretrained TF 2.0 model from a pre-trained model configuration."),pu=l(),na=o("p"),hu=s("The warning "),Os=o("em"),fu=s("Weights from XXX not initialized from pretrained model"),uu=s(` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),gu=l(),ra=o("p"),_u=s("The warning "),Us=o("em"),bu=s("Weights from XXX not used in YYY"),vu=s(` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),yu=l(),c(jt.$$.fragment),$u=l(),Ns=o("p"),wu=s("Examples:"),Tu=l(),c(sa.$$.fragment),xu=l(),Dt=o("div"),c(ia.$$.fragment),Pu=l(),Hs=o("p"),Eu=s("Dict of bias attached to an LM head. The key represents the name of the bias attribute."),Mu=l(),Ft=o("div"),c(la.$$.fragment),ku=l(),Xs=o("p"),ju=s("Returns the model\u2019s input embeddings layer."),Du=l(),qt=o("div"),c(da.$$.fragment),Fu=l(),Bs=o("p"),qu=s("The LM Head layer. This method must be overwritten by all the models that have a lm head."),Au=l(),At=o("div"),c(ma.$$.fragment),Cu=l(),Vs=o("p"),Iu=s("Returns the model\u2019s output embeddings"),Lu=l(),Ct=o("div"),c(ca.$$.fragment),zu=l(),Ss=o("p"),Ou=s(`Get the layer that handles a bias attribute in case the model has an LM head with weights tied to the
embeddings`),Uu=l(),It=o("div"),c(pa.$$.fragment),Nu=l(),Ws=o("p"),Hu=s("Get the concatenated _prefix name of the bias from the model name to the parent layer"),Xu=l(),Lt=o("div"),c(ha.$$.fragment),Bu=l(),Gs=o("p"),Vu=s(`Loads a saved checkpoint (model weights and optimizer state) from a repo. Returns the current epoch count when
the checkpoint was made.`),Su=l(),zt=o("div"),c(fa.$$.fragment),Wu=l(),Rs=o("p"),Gu=s("Prunes heads of the base model."),Ru=l(),Ee=o("div"),c(ua.$$.fragment),Yu=l(),ga=o("p"),Ku=s("Resizes input token embeddings matrix of the model if "),Ys=o("code"),Ju=s("new_num_tokens != config.vocab_size"),Qu=s("."),Zu=l(),_a=o("p"),eg=s("Takes care of tying weights embeddings afterwards if the model class has a "),Ks=o("code"),tg=s("tie_weights()"),og=s(" method."),ag=l(),Ot=o("div"),c(ba.$$.fragment),ng=l(),va=o("p"),rg=s(`Save a model and its configuration file to a directory, so that it can be re-loaded using the
`),Mn=o("a"),sg=s("from_pretrained()"),ig=s(" class method."),lg=l(),Ut=o("div"),c(ya.$$.fragment),dg=l(),Js=o("p"),mg=s("Method used for serving the model."),cg=l(),Nt=o("div"),c($a.$$.fragment),pg=l(),Qs=o("p"),hg=s("Prepare the output of the saved model. Each model must implement this function."),fg=l(),Ht=o("div"),c(wa.$$.fragment),ug=l(),Zs=o("p"),gg=s("Set all the bias in the LM head."),_g=l(),Xt=o("div"),c(Ta.$$.fragment),bg=l(),ei=o("p"),vg=s("Set model\u2019s input embeddings"),yg=l(),Bt=o("div"),c(xa.$$.fragment),$g=l(),ti=o("p"),wg=s("Set model\u2019s output embeddings"),Tg=l(),Vt=o("div"),c(Pa.$$.fragment),xg=l(),oi=o("p"),Pg=s("A modification of Keras\u2019s default test_step that cleans up the printed metrics when we use a dummy loss."),Eg=l(),ae=o("div"),c(Ea.$$.fragment),Mg=l(),R=o("p"),kg=s("A modification of Keras\u2019s default "),ai=o("code"),jg=s("train_step"),Dg=s(` that cleans up the printed metrics when we use a dummy loss. If
a user specifies a loss at model compile time, this function behaves as the original Keras `),ni=o("code"),Fg=s("train_step"),qg=s(`. In
this case, it expects the same `),ri=o("code"),Ag=s("data"),Cg=s(" as the original function (i.e. "),si=o("code"),Ig=s("(inputs, labels)"),Lg=s(")."),zg=l(),Ge=o("p"),Og=s(`However, when the model is compiled without specifying the loss AND the expected label columns are passed as
part of the input dictionary, the loss is computed internally (inside the model class) and is used in the
backwards pass. In this case, `),ii=o("code"),Ug=s("data"),Ng=s(" is a singleton tuple containing "),li=o("code"),Hg=s("(inputs,)"),Xg=s("."),Bg=l(),Re=o("p"),Vg=s(`This is possible under the aforementioned circumstances because our overriden compile function can set an
additional loss function that reduces a `),di=o("code"),Sg=s("loss"),Wg=s(" output, and the model will output a "),mi=o("code"),Gg=s("loss"),Rg=s(` component (notice the
name matching) containing the loss that was used to train the pre-trained model.`),Cl=l(),Ye=o("h2"),St=o("a"),ci=o("span"),c(Ma.$$.fragment),Yg=l(),pi=o("span"),Kg=s("TFModelUtilsMixin"),Il=l(),me=o("div"),c(ka.$$.fragment),Jg=l(),ja=o("p"),Qg=s("A few utilities for "),hi=o("code"),Zg=s("tf.keras.Model"),e_=s(", to be used as a mixin."),t_=l(),Wt=o("div"),c(Da.$$.fragment),o_=l(),fi=o("p"),a_=s("Get the number of (optionally, trainable) parameters in the model."),Ll=l(),Ke=o("h2"),Gt=o("a"),ui=o("span"),c(Fa.$$.fragment),n_=l(),gi=o("span"),r_=s("FlaxPreTrainedModel"),zl=l(),M=o("div"),c(qa.$$.fragment),s_=l(),_i=o("p"),i_=s("Base class for all models."),l_=l(),kn=o("p"),jn=o("a"),d_=s("FlaxPreTrainedModel"),m_=s(` takes care of storing the configuration of the models and handles methods for loading,
downloading and saving models.`),c_=l(),bi=o("p"),p_=s("Class attributes (overridden by derived classes):"),h_=l(),Je=o("ul"),Me=o("li"),vi=o("strong"),f_=s("config_class"),u_=s(" ("),Dn=o("a"),g_=s("PretrainedConfig"),__=s(") \u2014 A subclass of "),Fn=o("a"),b_=s("PretrainedConfig"),v_=s(` to use as configuration class
for this model architecture.`),y_=l(),Rt=o("li"),yi=o("strong"),$_=s("base_model_prefix"),w_=s(" ("),$i=o("code"),T_=s("str"),x_=s(`) \u2014 A string indicating the attribute associated to the base model in derived
classes of the same architecture adding modules on top of the base model.`),P_=l(),H=o("li"),wi=o("strong"),E_=s("main_input_name"),M_=s(" ("),Ti=o("code"),k_=s("str"),j_=s(") \u2014 The name of the principal input to the model (often "),xi=o("code"),D_=s("input_ids"),F_=s(` for NLP
models, `),Pi=o("code"),q_=s("pixel_values"),A_=s(" for vision models and "),Ei=o("code"),C_=s("input_values"),I_=s(" for speech models)."),L_=l(),ne=o("div"),c(Aa.$$.fragment),z_=l(),Ca=o("p"),O_=s(`Upload the model checkpoint to the \u{1F917} Model Hub while synchronizing a local clone of the repo in
`),Mi=o("code"),U_=s("repo_path_or_name"),N_=s("."),H_=l(),ki=o("p"),X_=s("Examples:"),B_=l(),c(Ia.$$.fragment),V_=l(),O=o("div"),c(La.$$.fragment),S_=l(),ji=o("p"),W_=s("Instantiate a pretrained flax model from a pre-trained model configuration."),G_=l(),za=o("p"),R_=s("The warning "),Di=o("em"),Y_=s("Weights from XXX not initialized from pretrained model"),K_=s(` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),J_=l(),Oa=o("p"),Q_=s("The warning "),Fi=o("em"),Z_=s("Weights from XXX not used in YYY"),eb=s(` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),tb=l(),qi=o("p"),ob=s("Examples:"),ab=l(),c(Ua.$$.fragment),nb=l(),ke=o("div"),c(Na.$$.fragment),rb=l(),Ai=o("p"),sb=s(`Register this class with a given auto class. This should only be used for custom models as the ones in the
library are already mapped with an auto class.`),ib=l(),c(Yt.$$.fragment),lb=l(),Kt=o("div"),c(Ha.$$.fragment),db=l(),Xa=o("p"),mb=s(`Save a model and its configuration file to a directory, so that it can be re-loaded using the
`),Ci=o("code"),cb=s("[from_pretrained()](/docs/transformers/master/en/main_classes/model#transformers.FlaxPreTrainedModel.from_pretrained)"),pb=s(" class method"),hb=l(),X=o("div"),c(Ba.$$.fragment),fb=l(),Y=o("p"),ub=s("Cast the floating-point "),Ii=o("code"),gb=s("params"),_b=s(" to "),Li=o("code"),bb=s("jax.numpy.bfloat16"),vb=s(". This returns a new "),zi=o("code"),yb=s("params"),$b=s(` tree and does not cast
the `),Oi=o("code"),wb=s("params"),Tb=s(" in place."),xb=l(),Ui=o("p"),Pb=s(`This method can be used on TPU to explicitly convert the model parameters to bfloat16 precision to do full
half-precision training or to save weights in bfloat16 for inference in order to save memory and improve speed.`),Eb=l(),Ni=o("p"),Mb=s("Examples:"),kb=l(),c(Va.$$.fragment),jb=l(),B=o("div"),c(Sa.$$.fragment),Db=l(),K=o("p"),Fb=s("Cast the floating-point "),Hi=o("code"),qb=s("parmas"),Ab=s(" to "),Xi=o("code"),Cb=s("jax.numpy.float16"),Ib=s(". This returns a new "),Bi=o("code"),Lb=s("params"),zb=s(` tree and does not cast the
`),Vi=o("code"),Ob=s("params"),Ub=s(" in place."),Nb=l(),Si=o("p"),Hb=s(`This method can be used on GPU to explicitly convert the model parameters to float16 precision to do full
half-precision training or to save weights in float16 for inference in order to save memory and improve speed.`),Xb=l(),Wi=o("p"),Bb=s("Examples:"),Vb=l(),c(Wa.$$.fragment),Sb=l(),re=o("div"),c(Ga.$$.fragment),Wb=l(),J=o("p"),Gb=s("Cast the floating-point "),Gi=o("code"),Rb=s("parmas"),Yb=s(" to "),Ri=o("code"),Kb=s("jax.numpy.float32"),Jb=s(`. This method can be used to explicitly convert the
model parameters to fp32 precision. This returns a new `),Yi=o("code"),Qb=s("params"),Zb=s(" tree and does not cast the "),Ki=o("code"),ev=s("params"),tv=s(" in place."),ov=l(),Ji=o("p"),av=s("Examples:"),nv=l(),c(Ra.$$.fragment),Ol=l(),Qe=o("h2"),Jt=o("a"),Qi=o("span"),c(Ya.$$.fragment),rv=l(),Zi=o("span"),sv=s("Pushing to the Hub"),Ul=l(),ce=o("div"),c(Ka.$$.fragment),iv=l(),el=o("p"),lv=s("A Mixin containing the functionality to push a model or tokenizer to the hub."),dv=l(),se=o("div"),c(Ja.$$.fragment),mv=l(),Qa=o("p"),cv=s(`Upload the {object_files} to the \u{1F917} Model Hub while synchronizing a local clone of the repo in
`),tl=o("code"),pv=s("repo_path_or_name"),hv=s("."),fv=l(),ol=o("p"),uv=s("Examples:"),gv=l(),c(Za.$$.fragment),this.h()},l(r){const _=n1('[data-svelte="svelte-1phssyn"]',document.head);w=a(_,"META",{name:!0,content:!0}),_.forEach(t),k=d(r),x=a(r,"H1",{class:!0});var en=n(x);E=a(en,"A",{id:!0,class:!0,href:!0});var al=n(E);W=a(al,"SPAN",{});var nl=n(W);p(A.$$.fragment,nl),nl.forEach(t),al.forEach(t),L=d(en),de=a(en,"SPAN",{});var rl=n(de);Jd=i(rl,"Models"),rl.forEach(t),en.forEach(t),ul=d(r),Z=a(r,"P",{});var pe=n(Z);Qd=i(pe,"The base classes "),rn=a(pe,"A",{href:!0});var yv=n(rn);Zd=i(yv,"PreTrainedModel"),yv.forEach(t),em=i(pe,", "),sn=a(pe,"A",{href:!0});var $v=n(sn);tm=i($v,"TFPreTrainedModel"),$v.forEach(t),om=i(pe,`, and
`),ln=a(pe,"A",{href:!0});var wv=n(ln);am=i(wv,"FlaxPreTrainedModel"),wv.forEach(t),nm=i(pe,` implement the common methods for loading/saving a model either from a local
file or directory, or from a pretrained model configuration provided by the library (downloaded from HuggingFace\u2019s AWS
S3 repository).`),pe.forEach(t),gl=d(r),Le=a(r,"P",{});var sl=n(Le);dn=a(sl,"A",{href:!0});var Tv=n(dn);rm=i(Tv,"PreTrainedModel"),Tv.forEach(t),sm=i(sl," and "),mn=a(sl,"A",{href:!0});var xv=n(mn);im=i(xv,"TFPreTrainedModel"),xv.forEach(t),lm=i(sl,` also implement a few methods which
are common among all the models to:`),sl.forEach(t),_l=d(r),Ze=a(r,"UL",{});var Hl=n(Ze);Qn=a(Hl,"LI",{});var Pv=n(Qn);dm=i(Pv,"resize the input token embeddings when new tokens are added to the vocabulary"),Pv.forEach(t),mm=d(Hl),Zn=a(Hl,"LI",{});var Ev=n(Zn);cm=i(Ev,"prune the attention heads of the model."),Ev.forEach(t),Hl.forEach(t),bl=d(r),z=a(r,"P",{});var ie=n(z);pm=i(ie,"The other methods that are common to each model are defined in "),cn=a(ie,"A",{href:!0});var Mv=n(cn);hm=i(Mv,"ModuleUtilsMixin"),Mv.forEach(t),fm=i(ie,`
(for the PyTorch models) and `),er=a(ie,"CODE",{});var kv=n(er);um=i(kv,"TFModuleUtilsMixin"),kv.forEach(t),gm=i(ie,` (for the TensorFlow models) or
for text generation, `),pn=a(ie,"A",{href:!0});var jv=n(pn);_m=i(jv,"GenerationMixin"),jv.forEach(t),bm=i(ie,` (for the PyTorch models),
`),hn=a(ie,"A",{href:!0});var Dv=n(hn);vm=i(Dv,"TFGenerationMixin"),Dv.forEach(t),ym=i(ie,` (for the TensorFlow models) and
`),fn=a(ie,"A",{href:!0});var Fv=n(fn);$m=i(Fv,"FlaxGenerationMixin"),Fv.forEach(t),wm=i(ie," (for the Flax/JAX models)."),ie.forEach(t),vl=d(r),ze=a(r,"H2",{class:!0});var Xl=n(ze);et=a(Xl,"A",{id:!0,class:!0,href:!0});var qv=n(et);tr=a(qv,"SPAN",{});var Av=n(tr);p(so.$$.fragment,Av),Av.forEach(t),qv.forEach(t),Tm=d(Xl),or=a(Xl,"SPAN",{});var Cv=n(or);xm=i(Cv,"PreTrainedModel"),Cv.forEach(t),Xl.forEach(t),yl=d(r),T=a(r,"DIV",{class:!0});var P=n(T);p(io.$$.fragment,P),Pm=d(P),ar=a(P,"P",{});var Iv=n(ar);Em=i(Iv,"Base class for all models."),Iv.forEach(t),Mm=d(P),un=a(P,"P",{});var _v=n(un);gn=a(_v,"A",{href:!0});var Lv=n(gn);km=i(Lv,"PreTrainedModel"),Lv.forEach(t),jm=i(_v,` takes care of storing the configuration of the models and handles methods for loading,
downloading and saving models as well as a few methods common to all models to:`),_v.forEach(t),Dm=d(P),lo=a(P,"UL",{});var Bl=n(lo);nr=a(Bl,"LI",{});var zv=n(nr);Fm=i(zv,"resize the input embeddings,"),zv.forEach(t),qm=d(Bl),rr=a(Bl,"LI",{});var Ov=n(rr);Am=i(Ov,"prune heads in the self-attention heads."),Ov.forEach(t),Bl.forEach(t),Cm=d(P),sr=a(P,"P",{});var Uv=n(sr);Im=i(Uv,"Class attributes (overridden by derived classes):"),Uv.forEach(t),Lm=d(P),G=a(P,"UL",{});var je=n(G);ir=a(je,"LI",{});var Nv=n(ir);ge=a(Nv,"P",{});var tn=n(ge);lr=a(tn,"STRONG",{});var Hv=n(lr);zm=i(Hv,"config_class"),Hv.forEach(t),Om=i(tn," ("),_n=a(tn,"A",{href:!0});var Xv=n(_n);Um=i(Xv,"PretrainedConfig"),Xv.forEach(t),Nm=i(tn,") \u2014 A subclass of "),bn=a(tn,"A",{href:!0});var Bv=n(bn);Hm=i(Bv,"PretrainedConfig"),Bv.forEach(t),Xm=i(tn,` to use as configuration class
for this model architecture.`),tn.forEach(t),Nv.forEach(t),Bm=d(je),mo=a(je,"LI",{});var Vl=n(mo);_e=a(Vl,"P",{});var on=n(_e);dr=a(on,"STRONG",{});var Vv=n(dr);Vm=i(Vv,"load_tf_weights"),Vv.forEach(t),Sm=i(on," ("),mr=a(on,"CODE",{});var Sv=n(mr);Wm=i(Sv,"Callable"),Sv.forEach(t),Gm=i(on,") \u2014 A python "),cr=a(on,"EM",{});var Wv=n(cr);Rm=i(Wv,"method"),Wv.forEach(t),Ym=i(on,` for loading a TensorFlow checkpoint in a PyTorch model,
taking as arguments:`),on.forEach(t),Km=d(Vl),Oe=a(Vl,"UL",{});var qn=n(Oe);tt=a(qn,"LI",{});var il=n(tt);pr=a(il,"STRONG",{});var Gv=n(pr);Jm=i(Gv,"model"),Gv.forEach(t),Qm=i(il," ("),vn=a(il,"A",{href:!0});var Rv=n(vn);Zm=i(Rv,"PreTrainedModel"),Rv.forEach(t),ec=i(il,") \u2014 An instance of the model on which to load the TensorFlow checkpoint."),il.forEach(t),tc=d(qn),ot=a(qn,"LI",{});var ll=n(ot);hr=a(ll,"STRONG",{});var Yv=n(hr);oc=i(Yv,"config"),Yv.forEach(t),ac=i(ll," ("),fr=a(ll,"CODE",{});var Kv=n(fr);nc=i(Kv,"PreTrainedConfig"),Kv.forEach(t),rc=i(ll,") \u2014 An instance of the configuration associated to the model."),ll.forEach(t),sc=d(qn),at=a(qn,"LI",{});var dl=n(at);ur=a(dl,"STRONG",{});var Jv=n(ur);ic=i(Jv,"path"),Jv.forEach(t),lc=i(dl," ("),gr=a(dl,"CODE",{});var Qv=n(gr);dc=i(Qv,"str"),Qv.forEach(t),mc=i(dl,") \u2014 A path to the TensorFlow checkpoint."),dl.forEach(t),qn.forEach(t),Vl.forEach(t),cc=d(je),_r=a(je,"LI",{});var Zv=n(_r);nt=a(Zv,"P",{});var ml=n(nt);br=a(ml,"STRONG",{});var ey=n(br);pc=i(ey,"base_model_prefix"),ey.forEach(t),hc=i(ml," ("),vr=a(ml,"CODE",{});var ty=n(vr);fc=i(ty,"str"),ty.forEach(t),uc=i(ml,`) \u2014 A string indicating the attribute associated to the base model in derived
classes of the same architecture adding modules on top of the base model.`),ml.forEach(t),Zv.forEach(t),gc=d(je),yr=a(je,"LI",{});var oy=n(yr);rt=a(oy,"P",{});var cl=n(rt);$r=a(cl,"STRONG",{});var ay=n($r);_c=i(ay,"is_parallelizable"),ay.forEach(t),bc=i(cl," ("),wr=a(cl,"CODE",{});var ny=n(wr);vc=i(ny,"bool"),ny.forEach(t),yc=i(cl,") \u2014 A flag indicating whether this model supports model parallelization."),cl.forEach(t),oy.forEach(t),$c=d(je),Tr=a(je,"LI",{});var ry=n(Tr);U=a(ry,"P",{});var he=n(U);xr=a(he,"STRONG",{});var sy=n(xr);wc=i(sy,"main_input_name"),sy.forEach(t),Tc=i(he," ("),Pr=a(he,"CODE",{});var iy=n(Pr);xc=i(iy,"str"),iy.forEach(t),Pc=i(he,") \u2014 The name of the principal input to the model (often "),Er=a(he,"CODE",{});var ly=n(Er);Ec=i(ly,"input_ids"),ly.forEach(t),Mc=i(he,` for NLP
models, `),Mr=a(he,"CODE",{});var dy=n(Mr);kc=i(dy,"pixel_values"),dy.forEach(t),jc=i(he," for vision models and "),kr=a(he,"CODE",{});var my=n(kr);Dc=i(my,"input_values"),my.forEach(t),Fc=i(he," for speech models)."),he.forEach(t),ry.forEach(t),je.forEach(t),qc=d(P),ee=a(P,"DIV",{class:!0});var Qt=n(ee);p(co.$$.fragment,Qt),Ac=d(Qt),po=a(Qt,"P",{});var Sl=n(po);Cc=i(Sl,`Upload the model checkpoint to the \u{1F917} Model Hub while synchronizing a local clone of the repo in
`),jr=a(Sl,"CODE",{});var cy=n(jr);Ic=i(cy,"repo_path_or_name"),cy.forEach(t),Lc=i(Sl,"."),Sl.forEach(t),zc=d(Qt),Dr=a(Qt,"P",{});var py=n(Dr);Oc=i(py,"Examples:"),py.forEach(t),Uc=d(Qt),p(ho.$$.fragment,Qt),Qt.forEach(t),Nc=d(P),F=a(P,"DIV",{class:!0});var I=n(F);p(fo.$$.fragment,I),Hc=d(I),Fr=a(I,"P",{});var hy=n(Fr);Xc=i(hy,"Instantiate a pretrained pytorch model from a pre-trained model configuration."),hy.forEach(t),Bc=d(I),Ue=a(I,"P",{});var An=n(Ue);Vc=i(An,"The model is set in evaluation mode by default using "),qr=a(An,"CODE",{});var fy=n(qr);Sc=i(fy,"model.eval()"),fy.forEach(t),Wc=i(An,` (Dropout modules are deactivated). To train
the model, you should first set it back in training mode with `),Ar=a(An,"CODE",{});var uy=n(Ar);Gc=i(uy,"model.train()"),uy.forEach(t),Rc=i(An,"."),An.forEach(t),Yc=d(I),uo=a(I,"P",{});var Wl=n(uo);Kc=i(Wl,"The warning "),Cr=a(Wl,"EM",{});var gy=n(Cr);Jc=i(gy,"Weights from XXX not initialized from pretrained model"),gy.forEach(t),Qc=i(Wl,` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),Wl.forEach(t),Zc=d(I),go=a(I,"P",{});var Gl=n(go);ep=i(Gl,"The warning "),Ir=a(Gl,"EM",{});var _y=n(Ir);tp=i(_y,"Weights from XXX not used in YYY"),_y.forEach(t),op=i(Gl,` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),Gl.forEach(t),ap=d(I),p(st.$$.fragment,I),np=d(I),p(it.$$.fragment,I),rp=d(I),Lr=a(I,"P",{});var by=n(Lr);sp=i(by,"Examples:"),by.forEach(t),ip=d(I),p(_o.$$.fragment,I),I.forEach(t),lp=d(P),lt=a(P,"DIV",{class:!0});var Rl=n(lt);p(bo.$$.fragment,Rl),dp=d(Rl),zr=a(Rl,"P",{});var vy=n(zr);mp=i(vy,"Returns the model\u2019s input embeddings."),vy.forEach(t),Rl.forEach(t),cp=d(P),dt=a(P,"DIV",{class:!0});var Yl=n(dt);p(vo.$$.fragment,Yl),pp=d(Yl),Or=a(Yl,"P",{});var yy=n(Or);hp=i(yy,"Returns the model\u2019s output embeddings."),yy.forEach(t),Yl.forEach(t),fp=d(P),be=a(P,"DIV",{class:!0});var Cn=n(be);p(yo.$$.fragment,Cn),up=d(Cn),Ur=a(Cn,"P",{});var $y=n(Ur);gp=i($y,"Deactivates gradient checkpointing for the current model."),$y.forEach(t),_p=d(Cn),Nr=a(Cn,"P",{});var wy=n(Nr);bp=i(wy,`Note that in other frameworks this feature can be referred to as \u201Cactivation checkpointing\u201D or \u201Ccheckpoint
activations\u201D.`),wy.forEach(t),Cn.forEach(t),vp=d(P),ve=a(P,"DIV",{class:!0});var In=n(ve);p($o.$$.fragment,In),yp=d(In),Hr=a(In,"P",{});var Ty=n(Hr);$p=i(Ty,"Activates gradient checkpointing for the current model."),Ty.forEach(t),wp=d(In),Xr=a(In,"P",{});var xy=n(Xr);Tp=i(xy,`Note that in other frameworks this feature can be referred to as \u201Cactivation checkpointing\u201D or \u201Ccheckpoint
activations\u201D.`),xy.forEach(t),In.forEach(t),xp=d(P),mt=a(P,"DIV",{class:!0});var Kl=n(mt);p(wo.$$.fragment,Kl),Pp=d(Kl),Br=a(Kl,"P",{});var Py=n(Br);Ep=i(Py,"If needed prunes and maybe initializes weights."),Py.forEach(t),Kl.forEach(t),Mp=d(P),ct=a(P,"DIV",{class:!0});var Jl=n(ct);p(To.$$.fragment,Jl),kp=d(Jl),Vr=a(Jl,"P",{});var Ey=n(Vr);jp=i(Ey,`A method executed at the end of each Transformer model initialization, to execute code that needs the model\u2019s
modules properly initialized (such as weight initialization).`),Ey.forEach(t),Jl.forEach(t),Dp=d(P),pt=a(P,"DIV",{class:!0});var Ql=n(pt);p(xo.$$.fragment,Ql),Fp=d(Ql),Sr=a(Ql,"P",{});var My=n(Sr);qp=i(My,"Prunes heads of the base model."),My.forEach(t),Ql.forEach(t),Ap=d(P),ye=a(P,"DIV",{class:!0});var Ln=n(ye);p(Po.$$.fragment,Ln),Cp=d(Ln),Wr=a(Ln,"P",{});var ky=n(Wr);Ip=i(ky,`Register this class with a given auto class. This should only be used for custom models as the ones in the
library are already mapped with an auto class.`),ky.forEach(t),Lp=d(Ln),p(ht.$$.fragment,Ln),Ln.forEach(t),zp=d(P),$e=a(P,"DIV",{class:!0});var zn=n($e);p(Eo.$$.fragment,zn),Op=d(zn),Mo=a(zn,"P",{});var Zl=n(Mo);Up=i(Zl,"Resizes input token embeddings matrix of the model if "),Gr=a(Zl,"CODE",{});var jy=n(Gr);Np=i(jy,"new_num_tokens != config.vocab_size"),jy.forEach(t),Hp=i(Zl,"."),Zl.forEach(t),Xp=d(zn),ko=a(zn,"P",{});var ed=n(ko);Bp=i(ed,"Takes care of tying weights embeddings afterwards if the model class has a "),Rr=a(ed,"CODE",{});var Dy=n(Rr);Vp=i(Dy,"tie_weights()"),Dy.forEach(t),Sp=i(ed," method."),ed.forEach(t),zn.forEach(t),Wp=d(P),ft=a(P,"DIV",{class:!0});var td=n(ft);p(jo.$$.fragment,td),Gp=d(td),Do=a(td,"P",{});var od=n(Do);Rp=i(od,`Save a model and its configuration file to a directory, so that it can be re-loaded using the
`),Yr=a(od,"CODE",{});var Fy=n(Yr);Yp=i(Fy,"[from_pretrained()](/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)"),Fy.forEach(t),Kp=i(od," class method."),od.forEach(t),td.forEach(t),Jp=d(P),ut=a(P,"DIV",{class:!0});var ad=n(ut);p(Fo.$$.fragment,ad),Qp=d(ad),Kr=a(ad,"P",{});var qy=n(Kr);Zp=i(qy,"Set model\u2019s input embeddings."),qy.forEach(t),ad.forEach(t),eh=d(P),we=a(P,"DIV",{class:!0});var On=n(we);p(qo.$$.fragment,On),th=d(On),Jr=a(On,"P",{});var Ay=n(Jr);oh=i(Ay,"Tie the weights between the input embeddings and the output embeddings."),Ay.forEach(t),ah=d(On),Ao=a(On,"P",{});var nd=n(Ao);nh=i(nd,"If the "),Qr=a(nd,"CODE",{});var Cy=n(Qr);rh=i(Cy,"torchscript"),Cy.forEach(t),sh=i(nd,` flag is set in the configuration, can\u2019t handle parameter sharing so we are cloning the
weights instead.`),nd.forEach(t),On.forEach(t),P.forEach(t),$l=d(r),yn=a(r,"A",{id:!0}),n(yn).forEach(t),wl=d(r),Ne=a(r,"H3",{class:!0});var rd=n(Ne);gt=a(rd,"A",{id:!0,class:!0,href:!0});var Iy=n(gt);Zr=a(Iy,"SPAN",{});var Ly=n(Zr);p(Co.$$.fragment,Ly),Ly.forEach(t),Iy.forEach(t),ih=d(rd),es=a(rd,"SPAN",{});var zy=n(es);lh=i(zy,"Model Instantiation dtype"),zy.forEach(t),rd.forEach(t),Tl=d(r),te=a(r,"P",{});var Zt=n(te);dh=i(Zt,"Under Pytorch a model normally gets instantiated with "),ts=a(Zt,"CODE",{});var Oy=n(ts);mh=i(Oy,"torch.float32"),Oy.forEach(t),ch=i(Zt,` format. This can be an issue if one tries to
load a model whose weights are in fp16, since it\u2019d require twice as much memory. To overcome this limitation, you can
either explicitly pass the desired `),os=a(Zt,"CODE",{});var Uy=n(os);ph=i(Uy,"dtype"),Uy.forEach(t),hh=i(Zt," using "),as=a(Zt,"CODE",{});var Ny=n(as);fh=i(Ny,"torch_dtype"),Ny.forEach(t),uh=i(Zt," argument:"),Zt.forEach(t),xl=d(r),p(Io.$$.fragment,r),Pl=d(r),Te=a(r,"P",{});var Un=n(Te);gh=i(Un,"or, if you want the model to always load in the most optimal memory pattern, you can use the special value "),ns=a(Un,"CODE",{});var Hy=n(ns);_h=i(Hy,'"auto"'),Hy.forEach(t),bh=i(Un,`,
and then `),rs=a(Un,"CODE",{});var Xy=n(rs);vh=i(Xy,"dtype"),Xy.forEach(t),yh=i(Un," will be automatically derived from the model\u2019s weights:"),Un.forEach(t),El=d(r),p(Lo.$$.fragment,r),Ml=d(r),_t=a(r,"P",{});var sd=n(_t);$h=i(sd,"Models instantiated from scratch can also be told which "),ss=a(sd,"CODE",{});var By=n(ss);wh=i(By,"dtype"),By.forEach(t),Th=i(sd," to use with:"),sd.forEach(t),kl=d(r),p(zo.$$.fragment,r),jl=d(r),$n=a(r,"P",{});var Vy=n($n);xh=i(Vy,"Due to Pytorch design, this functionality is only available for floating dtypes."),Vy.forEach(t),Dl=d(r),He=a(r,"H2",{class:!0});var id=n(He);bt=a(id,"A",{id:!0,class:!0,href:!0});var Sy=n(bt);is=a(Sy,"SPAN",{});var Wy=n(is);p(Oo.$$.fragment,Wy),Wy.forEach(t),Sy.forEach(t),Ph=d(id),ls=a(id,"SPAN",{});var Gy=n(ls);Eh=i(Gy,"ModuleUtilsMixin"),Gy.forEach(t),id.forEach(t),Fl=d(r),j=a(r,"DIV",{class:!0});var q=n(j);p(Uo.$$.fragment,q),Mh=d(q),No=a(q,"P",{});var ld=n(No);kh=i(ld,"A few utilities for "),ds=a(ld,"CODE",{});var Ry=n(ds);jh=i(Ry,"torch.nn.Modules"),Ry.forEach(t),Dh=i(ld,", to be used as a mixin."),ld.forEach(t),Fh=d(q),xe=a(q,"DIV",{class:!0});var Nn=n(xe);p(Ho.$$.fragment,Nn),qh=d(Nn),ms=a(Nn,"P",{});var Yy=n(ms);Ah=i(Yy,"Add a memory hook before and after each sub-module forward pass to record increase in memory consumption."),Yy.forEach(t),Ch=d(Nn),Xe=a(Nn,"P",{});var Hn=n(Xe);Ih=i(Hn,"Increase in memory consumption is stored in a "),cs=a(Hn,"CODE",{});var Ky=n(cs);Lh=i(Ky,"mem_rss_diff"),Ky.forEach(t),zh=i(Hn,` attribute for each module and can be reset to zero
with `),ps=a(Hn,"CODE",{});var Jy=n(ps);Oh=i(Jy,"model.reset_memory_hooks_state()"),Jy.forEach(t),Uh=i(Hn,"."),Hn.forEach(t),Nn.forEach(t),Nh=d(q),vt=a(q,"DIV",{class:!0});var dd=n(vt);p(Xo.$$.fragment,dd),Hh=d(dd),hs=a(dd,"P",{});var Qy=n(hs);Xh=i(Qy,"Helper function to estimate the total number of tokens from the model inputs."),Qy.forEach(t),dd.forEach(t),Bh=d(q),yt=a(q,"DIV",{class:!0});var md=n(yt);p(Bo.$$.fragment,md),Vh=d(md),Be=a(md,"P",{});var Xn=n(Be);Sh=i(Xn,`Get number of (optionally, non-embeddings) floating-point operations for the forward and backward passes of a
batch with this transformer model. Default approximation neglects the quadratic dependency on the number of
tokens (valid if `),fs=a(Xn,"CODE",{});var Zy=n(fs);Wh=i(Zy,"12 * d_model << sequence_length"),Zy.forEach(t),Gh=i(Xn,") as laid out in "),Vo=a(Xn,"A",{href:!0,rel:!0});var e$=n(Vo);Rh=i(e$,`this
paper`),e$.forEach(t),Yh=i(Xn,` section 2.1. Should be overridden for transformers with parameter
re-use e.g. Albert or Universal Transformers, or if doing long-range modeling with very high sequence lengths.`),Xn.forEach(t),md.forEach(t),Kh=d(q),$t=a(q,"DIV",{class:!0});var cd=n($t);p(So.$$.fragment,cd),Jh=d(cd),us=a(cd,"P",{});var t$=n(us);Qh=i(t$,"Makes broadcastable attention and causal masks so that future and masked tokens are ignored."),t$.forEach(t),cd.forEach(t),Zh=d(q),wt=a(q,"DIV",{class:!0});var pd=n(wt);p(Wo.$$.fragment,pd),ef=d(pd),gs=a(pd,"P",{});var o$=n(gs);tf=i(o$,"Prepare the head mask if needed."),o$.forEach(t),pd.forEach(t),of=d(q),Tt=a(q,"DIV",{class:!0});var hd=n(Tt);p(Go.$$.fragment,hd),af=d(hd),_s=a(hd,"P",{});var a$=n(_s);nf=i(a$,"Invert an attention mask (e.g., switches 0. and 1.)."),a$.forEach(t),hd.forEach(t),rf=d(q),xt=a(q,"DIV",{class:!0});var fd=n(xt);p(Ro.$$.fragment,fd),sf=d(fd),bs=a(fd,"P",{});var n$=n(bs);lf=i(n$,"Get number of (optionally, trainable or non-embeddings) parameters in the module."),n$.forEach(t),fd.forEach(t),df=d(q),Pt=a(q,"DIV",{class:!0});var ud=n(Pt);p(Yo.$$.fragment,ud),mf=d(ud),Ve=a(ud,"P",{});var Bn=n(Ve);cf=i(Bn,"Reset the "),vs=a(Bn,"CODE",{});var r$=n(vs);pf=i(r$,"mem_rss_diff"),r$.forEach(t),hf=i(Bn," attribute of each module (see "),wn=a(Bn,"A",{href:!0});var s$=n(wn);ff=i(s$,"add_memory_hooks()"),s$.forEach(t),uf=i(Bn,")."),Bn.forEach(t),ud.forEach(t),q.forEach(t),ql=d(r),Se=a(r,"H2",{class:!0});var gd=n(Se);Et=a(gd,"A",{id:!0,class:!0,href:!0});var i$=n(Et);ys=a(i$,"SPAN",{});var l$=n(ys);p(Ko.$$.fragment,l$),l$.forEach(t),i$.forEach(t),gf=d(gd),$s=a(gd,"SPAN",{});var d$=n($s);_f=i(d$,"TFPreTrainedModel"),d$.forEach(t),gd.forEach(t),Al=d(r),b=a(r,"DIV",{class:!0});var $=n(b);p(Jo.$$.fragment,$),bf=d($),ws=a($,"P",{});var m$=n(ws);vf=i(m$,"Base class for all TF models."),m$.forEach(t),yf=d($),Tn=a($,"P",{});var bv=n(Tn);xn=a(bv,"A",{href:!0});var c$=n(xn);$f=i(c$,"TFPreTrainedModel"),c$.forEach(t),wf=i(bv,` takes care of storing the configuration of the models and handles methods for loading,
downloading and saving models as well as a few methods common to all models to:`),bv.forEach(t),Tf=d($),Qo=a($,"UL",{});var _d=n(Qo);Ts=a(_d,"LI",{});var p$=n(Ts);xf=i(p$,"resize the input embeddings,"),p$.forEach(t),Pf=d(_d),xs=a(_d,"LI",{});var h$=n(xs);Ef=i(h$,"prune heads in the self-attention heads."),h$.forEach(t),_d.forEach(t),Mf=d($),Ps=a($,"P",{});var f$=n(Ps);kf=i(f$,"Class attributes (overridden by derived classes):"),f$.forEach(t),jf=d($),We=a($,"UL",{});var Vn=n(We);Pe=a(Vn,"LI",{});var an=n(Pe);Es=a(an,"STRONG",{});var u$=n(Es);Df=i(u$,"config_class"),u$.forEach(t),Ff=i(an," ("),Pn=a(an,"A",{href:!0});var g$=n(Pn);qf=i(g$,"PretrainedConfig"),g$.forEach(t),Af=i(an,") \u2014 A subclass of "),En=a(an,"A",{href:!0});var _$=n(En);Cf=i(_$,"PretrainedConfig"),_$.forEach(t),If=i(an,` to use as configuration class
for this model architecture.`),an.forEach(t),Lf=d(Vn),Mt=a(Vn,"LI",{});var pl=n(Mt);Ms=a(pl,"STRONG",{});var b$=n(Ms);zf=i(b$,"base_model_prefix"),b$.forEach(t),Of=i(pl," ("),ks=a(pl,"CODE",{});var v$=n(ks);Uf=i(v$,"str"),v$.forEach(t),Nf=i(pl,`) \u2014 A string indicating the attribute associated to the base model in derived
classes of the same architecture adding modules on top of the base model.`),pl.forEach(t),Hf=d(Vn),N=a(Vn,"LI",{});var fe=n(N);js=a(fe,"STRONG",{});var y$=n(js);Xf=i(y$,"main_input_name"),y$.forEach(t),Bf=i(fe," ("),Ds=a(fe,"CODE",{});var $$=n(Ds);Vf=i($$,"str"),$$.forEach(t),Sf=i(fe,") \u2014 The name of the principal input to the model (often "),Fs=a(fe,"CODE",{});var w$=n(Fs);Wf=i(w$,"input_ids"),w$.forEach(t),Gf=i(fe,` for NLP
models, `),qs=a(fe,"CODE",{});var T$=n(qs);Rf=i(T$,"pixel_values"),T$.forEach(t),Yf=i(fe," for vision models and "),As=a(fe,"CODE",{});var x$=n(As);Kf=i(x$,"input_values"),x$.forEach(t),Jf=i(fe," for speech models)."),fe.forEach(t),Vn.forEach(t),Qf=d($),oe=a($,"DIV",{class:!0});var eo=n(oe);p(Zo.$$.fragment,eo),Zf=d(eo),ea=a(eo,"P",{});var bd=n(ea);eu=i(bd,`Upload the model checkpoint to the \u{1F917} Model Hub while synchronizing a local clone of the repo in
`),Cs=a(bd,"CODE",{});var P$=n(Cs);tu=i(P$,"repo_path_or_name"),P$.forEach(t),ou=i(bd,"."),bd.forEach(t),au=d(eo),Is=a(eo,"P",{});var E$=n(Is);nu=i(E$,"Examples:"),E$.forEach(t),ru=d(eo),p(ta.$$.fragment,eo),eo.forEach(t),su=d($),kt=a($,"DIV",{class:!0});var vd=n(kt);p(oa.$$.fragment,vd),iu=d(vd),Ls=a(vd,"P",{});var M$=n(Ls);lu=i(M$,`This is a thin wrapper that sets the model\u2019s loss output head as the loss if the user does not specify a loss
function themselves.`),M$.forEach(t),vd.forEach(t),du=d($),C=a($,"DIV",{class:!0});var V=n(C);p(aa.$$.fragment,V),mu=d(V),zs=a(V,"P",{});var k$=n(zs);cu=i(k$,"Instantiate a pretrained TF 2.0 model from a pre-trained model configuration."),k$.forEach(t),pu=d(V),na=a(V,"P",{});var yd=n(na);hu=i(yd,"The warning "),Os=a(yd,"EM",{});var j$=n(Os);fu=i(j$,"Weights from XXX not initialized from pretrained model"),j$.forEach(t),uu=i(yd,` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),yd.forEach(t),gu=d(V),ra=a(V,"P",{});var $d=n(ra);_u=i($d,"The warning "),Us=a($d,"EM",{});var D$=n(Us);bu=i(D$,"Weights from XXX not used in YYY"),D$.forEach(t),vu=i($d,` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),$d.forEach(t),yu=d(V),p(jt.$$.fragment,V),$u=d(V),Ns=a(V,"P",{});var F$=n(Ns);wu=i(F$,"Examples:"),F$.forEach(t),Tu=d(V),p(sa.$$.fragment,V),V.forEach(t),xu=d($),Dt=a($,"DIV",{class:!0});var wd=n(Dt);p(ia.$$.fragment,wd),Pu=d(wd),Hs=a(wd,"P",{});var q$=n(Hs);Eu=i(q$,"Dict of bias attached to an LM head. The key represents the name of the bias attribute."),q$.forEach(t),wd.forEach(t),Mu=d($),Ft=a($,"DIV",{class:!0});var Td=n(Ft);p(la.$$.fragment,Td),ku=d(Td),Xs=a(Td,"P",{});var A$=n(Xs);ju=i(A$,"Returns the model\u2019s input embeddings layer."),A$.forEach(t),Td.forEach(t),Du=d($),qt=a($,"DIV",{class:!0});var xd=n(qt);p(da.$$.fragment,xd),Fu=d(xd),Bs=a(xd,"P",{});var C$=n(Bs);qu=i(C$,"The LM Head layer. This method must be overwritten by all the models that have a lm head."),C$.forEach(t),xd.forEach(t),Au=d($),At=a($,"DIV",{class:!0});var Pd=n(At);p(ma.$$.fragment,Pd),Cu=d(Pd),Vs=a(Pd,"P",{});var I$=n(Vs);Iu=i(I$,"Returns the model\u2019s output embeddings"),I$.forEach(t),Pd.forEach(t),Lu=d($),Ct=a($,"DIV",{class:!0});var Ed=n(Ct);p(ca.$$.fragment,Ed),zu=d(Ed),Ss=a(Ed,"P",{});var L$=n(Ss);Ou=i(L$,`Get the layer that handles a bias attribute in case the model has an LM head with weights tied to the
embeddings`),L$.forEach(t),Ed.forEach(t),Uu=d($),It=a($,"DIV",{class:!0});var Md=n(It);p(pa.$$.fragment,Md),Nu=d(Md),Ws=a(Md,"P",{});var z$=n(Ws);Hu=i(z$,"Get the concatenated _prefix name of the bias from the model name to the parent layer"),z$.forEach(t),Md.forEach(t),Xu=d($),Lt=a($,"DIV",{class:!0});var kd=n(Lt);p(ha.$$.fragment,kd),Bu=d(kd),Gs=a(kd,"P",{});var O$=n(Gs);Vu=i(O$,`Loads a saved checkpoint (model weights and optimizer state) from a repo. Returns the current epoch count when
the checkpoint was made.`),O$.forEach(t),kd.forEach(t),Su=d($),zt=a($,"DIV",{class:!0});var jd=n(zt);p(fa.$$.fragment,jd),Wu=d(jd),Rs=a(jd,"P",{});var U$=n(Rs);Gu=i(U$,"Prunes heads of the base model."),U$.forEach(t),jd.forEach(t),Ru=d($),Ee=a($,"DIV",{class:!0});var Sn=n(Ee);p(ua.$$.fragment,Sn),Yu=d(Sn),ga=a(Sn,"P",{});var Dd=n(ga);Ku=i(Dd,"Resizes input token embeddings matrix of the model if "),Ys=a(Dd,"CODE",{});var N$=n(Ys);Ju=i(N$,"new_num_tokens != config.vocab_size"),N$.forEach(t),Qu=i(Dd,"."),Dd.forEach(t),Zu=d(Sn),_a=a(Sn,"P",{});var Fd=n(_a);eg=i(Fd,"Takes care of tying weights embeddings afterwards if the model class has a "),Ks=a(Fd,"CODE",{});var H$=n(Ks);tg=i(H$,"tie_weights()"),H$.forEach(t),og=i(Fd," method."),Fd.forEach(t),Sn.forEach(t),ag=d($),Ot=a($,"DIV",{class:!0});var qd=n(Ot);p(ba.$$.fragment,qd),ng=d(qd),va=a(qd,"P",{});var Ad=n(va);rg=i(Ad,`Save a model and its configuration file to a directory, so that it can be re-loaded using the
`),Mn=a(Ad,"A",{href:!0});var X$=n(Mn);sg=i(X$,"from_pretrained()"),X$.forEach(t),ig=i(Ad," class method."),Ad.forEach(t),qd.forEach(t),lg=d($),Ut=a($,"DIV",{class:!0});var Cd=n(Ut);p(ya.$$.fragment,Cd),dg=d(Cd),Js=a(Cd,"P",{});var B$=n(Js);mg=i(B$,"Method used for serving the model."),B$.forEach(t),Cd.forEach(t),cg=d($),Nt=a($,"DIV",{class:!0});var Id=n(Nt);p($a.$$.fragment,Id),pg=d(Id),Qs=a(Id,"P",{});var V$=n(Qs);hg=i(V$,"Prepare the output of the saved model. Each model must implement this function."),V$.forEach(t),Id.forEach(t),fg=d($),Ht=a($,"DIV",{class:!0});var Ld=n(Ht);p(wa.$$.fragment,Ld),ug=d(Ld),Zs=a(Ld,"P",{});var S$=n(Zs);gg=i(S$,"Set all the bias in the LM head."),S$.forEach(t),Ld.forEach(t),_g=d($),Xt=a($,"DIV",{class:!0});var zd=n(Xt);p(Ta.$$.fragment,zd),bg=d(zd),ei=a(zd,"P",{});var W$=n(ei);vg=i(W$,"Set model\u2019s input embeddings"),W$.forEach(t),zd.forEach(t),yg=d($),Bt=a($,"DIV",{class:!0});var Od=n(Bt);p(xa.$$.fragment,Od),$g=d(Od),ti=a(Od,"P",{});var G$=n(ti);wg=i(G$,"Set model\u2019s output embeddings"),G$.forEach(t),Od.forEach(t),Tg=d($),Vt=a($,"DIV",{class:!0});var Ud=n(Vt);p(Pa.$$.fragment,Ud),xg=d(Ud),oi=a(Ud,"P",{});var R$=n(oi);Pg=i(R$,"A modification of Keras\u2019s default test_step that cleans up the printed metrics when we use a dummy loss."),R$.forEach(t),Ud.forEach(t),Eg=d($),ae=a($,"DIV",{class:!0});var to=n(ae);p(Ea.$$.fragment,to),Mg=d(to),R=a(to,"P",{});var De=n(R);kg=i(De,"A modification of Keras\u2019s default "),ai=a(De,"CODE",{});var Y$=n(ai);jg=i(Y$,"train_step"),Y$.forEach(t),Dg=i(De,` that cleans up the printed metrics when we use a dummy loss. If
a user specifies a loss at model compile time, this function behaves as the original Keras `),ni=a(De,"CODE",{});var K$=n(ni);Fg=i(K$,"train_step"),K$.forEach(t),qg=i(De,`. In
this case, it expects the same `),ri=a(De,"CODE",{});var J$=n(ri);Ag=i(J$,"data"),J$.forEach(t),Cg=i(De," as the original function (i.e. "),si=a(De,"CODE",{});var Q$=n(si);Ig=i(Q$,"(inputs, labels)"),Q$.forEach(t),Lg=i(De,")."),De.forEach(t),zg=d(to),Ge=a(to,"P",{});var Wn=n(Ge);Og=i(Wn,`However, when the model is compiled without specifying the loss AND the expected label columns are passed as
part of the input dictionary, the loss is computed internally (inside the model class) and is used in the
backwards pass. In this case, `),ii=a(Wn,"CODE",{});var Z$=n(ii);Ug=i(Z$,"data"),Z$.forEach(t),Ng=i(Wn," is a singleton tuple containing "),li=a(Wn,"CODE",{});var ew=n(li);Hg=i(ew,"(inputs,)"),ew.forEach(t),Xg=i(Wn,"."),Wn.forEach(t),Bg=d(to),Re=a(to,"P",{});var Gn=n(Re);Vg=i(Gn,`This is possible under the aforementioned circumstances because our overriden compile function can set an
additional loss function that reduces a `),di=a(Gn,"CODE",{});var tw=n(di);Sg=i(tw,"loss"),tw.forEach(t),Wg=i(Gn," output, and the model will output a "),mi=a(Gn,"CODE",{});var ow=n(mi);Gg=i(ow,"loss"),ow.forEach(t),Rg=i(Gn,` component (notice the
name matching) containing the loss that was used to train the pre-trained model.`),Gn.forEach(t),to.forEach(t),$.forEach(t),Cl=d(r),Ye=a(r,"H2",{class:!0});var Nd=n(Ye);St=a(Nd,"A",{id:!0,class:!0,href:!0});var aw=n(St);ci=a(aw,"SPAN",{});var nw=n(ci);p(Ma.$$.fragment,nw),nw.forEach(t),aw.forEach(t),Yg=d(Nd),pi=a(Nd,"SPAN",{});var rw=n(pi);Kg=i(rw,"TFModelUtilsMixin"),rw.forEach(t),Nd.forEach(t),Il=d(r),me=a(r,"DIV",{class:!0});var Rn=n(me);p(ka.$$.fragment,Rn),Jg=d(Rn),ja=a(Rn,"P",{});var Hd=n(ja);Qg=i(Hd,"A few utilities for "),hi=a(Hd,"CODE",{});var sw=n(hi);Zg=i(sw,"tf.keras.Model"),sw.forEach(t),e_=i(Hd,", to be used as a mixin."),Hd.forEach(t),t_=d(Rn),Wt=a(Rn,"DIV",{class:!0});var Xd=n(Wt);p(Da.$$.fragment,Xd),o_=d(Xd),fi=a(Xd,"P",{});var iw=n(fi);a_=i(iw,"Get the number of (optionally, trainable) parameters in the model."),iw.forEach(t),Xd.forEach(t),Rn.forEach(t),Ll=d(r),Ke=a(r,"H2",{class:!0});var Bd=n(Ke);Gt=a(Bd,"A",{id:!0,class:!0,href:!0});var lw=n(Gt);ui=a(lw,"SPAN",{});var dw=n(ui);p(Fa.$$.fragment,dw),dw.forEach(t),lw.forEach(t),n_=d(Bd),gi=a(Bd,"SPAN",{});var mw=n(gi);r_=i(mw,"FlaxPreTrainedModel"),mw.forEach(t),Bd.forEach(t),zl=d(r),M=a(r,"DIV",{class:!0});var D=n(M);p(qa.$$.fragment,D),s_=d(D),_i=a(D,"P",{});var cw=n(_i);i_=i(cw,"Base class for all models."),cw.forEach(t),l_=d(D),kn=a(D,"P",{});var vv=n(kn);jn=a(vv,"A",{href:!0});var pw=n(jn);d_=i(pw,"FlaxPreTrainedModel"),pw.forEach(t),m_=i(vv,` takes care of storing the configuration of the models and handles methods for loading,
downloading and saving models.`),vv.forEach(t),c_=d(D),bi=a(D,"P",{});var hw=n(bi);p_=i(hw,"Class attributes (overridden by derived classes):"),hw.forEach(t),h_=d(D),Je=a(D,"UL",{});var Yn=n(Je);Me=a(Yn,"LI",{});var nn=n(Me);vi=a(nn,"STRONG",{});var fw=n(vi);f_=i(fw,"config_class"),fw.forEach(t),u_=i(nn," ("),Dn=a(nn,"A",{href:!0});var uw=n(Dn);g_=i(uw,"PretrainedConfig"),uw.forEach(t),__=i(nn,") \u2014 A subclass of "),Fn=a(nn,"A",{href:!0});var gw=n(Fn);b_=i(gw,"PretrainedConfig"),gw.forEach(t),v_=i(nn,` to use as configuration class
for this model architecture.`),nn.forEach(t),y_=d(Yn),Rt=a(Yn,"LI",{});var hl=n(Rt);yi=a(hl,"STRONG",{});var _w=n(yi);$_=i(_w,"base_model_prefix"),_w.forEach(t),w_=i(hl," ("),$i=a(hl,"CODE",{});var bw=n($i);T_=i(bw,"str"),bw.forEach(t),x_=i(hl,`) \u2014 A string indicating the attribute associated to the base model in derived
classes of the same architecture adding modules on top of the base model.`),hl.forEach(t),P_=d(Yn),H=a(Yn,"LI",{});var ue=n(H);wi=a(ue,"STRONG",{});var vw=n(wi);E_=i(vw,"main_input_name"),vw.forEach(t),M_=i(ue," ("),Ti=a(ue,"CODE",{});var yw=n(Ti);k_=i(yw,"str"),yw.forEach(t),j_=i(ue,") \u2014 The name of the principal input to the model (often "),xi=a(ue,"CODE",{});var $w=n(xi);D_=i($w,"input_ids"),$w.forEach(t),F_=i(ue,` for NLP
models, `),Pi=a(ue,"CODE",{});var ww=n(Pi);q_=i(ww,"pixel_values"),ww.forEach(t),A_=i(ue," for vision models and "),Ei=a(ue,"CODE",{});var Tw=n(Ei);C_=i(Tw,"input_values"),Tw.forEach(t),I_=i(ue," for speech models)."),ue.forEach(t),Yn.forEach(t),L_=d(D),ne=a(D,"DIV",{class:!0});var oo=n(ne);p(Aa.$$.fragment,oo),z_=d(oo),Ca=a(oo,"P",{});var Vd=n(Ca);O_=i(Vd,`Upload the model checkpoint to the \u{1F917} Model Hub while synchronizing a local clone of the repo in
`),Mi=a(Vd,"CODE",{});var xw=n(Mi);U_=i(xw,"repo_path_or_name"),xw.forEach(t),N_=i(Vd,"."),Vd.forEach(t),H_=d(oo),ki=a(oo,"P",{});var Pw=n(ki);X_=i(Pw,"Examples:"),Pw.forEach(t),B_=d(oo),p(Ia.$$.fragment,oo),oo.forEach(t),V_=d(D),O=a(D,"DIV",{class:!0});var le=n(O);p(La.$$.fragment,le),S_=d(le),ji=a(le,"P",{});var Ew=n(ji);W_=i(Ew,"Instantiate a pretrained flax model from a pre-trained model configuration."),Ew.forEach(t),G_=d(le),za=a(le,"P",{});var Sd=n(za);R_=i(Sd,"The warning "),Di=a(Sd,"EM",{});var Mw=n(Di);Y_=i(Mw,"Weights from XXX not initialized from pretrained model"),Mw.forEach(t),K_=i(Sd,` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),Sd.forEach(t),J_=d(le),Oa=a(le,"P",{});var Wd=n(Oa);Q_=i(Wd,"The warning "),Fi=a(Wd,"EM",{});var kw=n(Fi);Z_=i(kw,"Weights from XXX not used in YYY"),kw.forEach(t),eb=i(Wd,` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),Wd.forEach(t),tb=d(le),qi=a(le,"P",{});var jw=n(qi);ob=i(jw,"Examples:"),jw.forEach(t),ab=d(le),p(Ua.$$.fragment,le),le.forEach(t),nb=d(D),ke=a(D,"DIV",{class:!0});var Kn=n(ke);p(Na.$$.fragment,Kn),rb=d(Kn),Ai=a(Kn,"P",{});var Dw=n(Ai);sb=i(Dw,`Register this class with a given auto class. This should only be used for custom models as the ones in the
library are already mapped with an auto class.`),Dw.forEach(t),ib=d(Kn),p(Yt.$$.fragment,Kn),Kn.forEach(t),lb=d(D),Kt=a(D,"DIV",{class:!0});var Gd=n(Kt);p(Ha.$$.fragment,Gd),db=d(Gd),Xa=a(Gd,"P",{});var Rd=n(Xa);mb=i(Rd,`Save a model and its configuration file to a directory, so that it can be re-loaded using the
`),Ci=a(Rd,"CODE",{});var Fw=n(Ci);cb=i(Fw,"[from_pretrained()](/docs/transformers/master/en/main_classes/model#transformers.FlaxPreTrainedModel.from_pretrained)"),Fw.forEach(t),pb=i(Rd," class method"),Rd.forEach(t),Gd.forEach(t),hb=d(D),X=a(D,"DIV",{class:!0});var Fe=n(X);p(Ba.$$.fragment,Fe),fb=d(Fe),Y=a(Fe,"P",{});var qe=n(Y);ub=i(qe,"Cast the floating-point "),Ii=a(qe,"CODE",{});var qw=n(Ii);gb=i(qw,"params"),qw.forEach(t),_b=i(qe," to "),Li=a(qe,"CODE",{});var Aw=n(Li);bb=i(Aw,"jax.numpy.bfloat16"),Aw.forEach(t),vb=i(qe,". This returns a new "),zi=a(qe,"CODE",{});var Cw=n(zi);yb=i(Cw,"params"),Cw.forEach(t),$b=i(qe,` tree and does not cast
the `),Oi=a(qe,"CODE",{});var Iw=n(Oi);wb=i(Iw,"params"),Iw.forEach(t),Tb=i(qe," in place."),qe.forEach(t),xb=d(Fe),Ui=a(Fe,"P",{});var Lw=n(Ui);Pb=i(Lw,`This method can be used on TPU to explicitly convert the model parameters to bfloat16 precision to do full
half-precision training or to save weights in bfloat16 for inference in order to save memory and improve speed.`),Lw.forEach(t),Eb=d(Fe),Ni=a(Fe,"P",{});var zw=n(Ni);Mb=i(zw,"Examples:"),zw.forEach(t),kb=d(Fe),p(Va.$$.fragment,Fe),Fe.forEach(t),jb=d(D),B=a(D,"DIV",{class:!0});var Ae=n(B);p(Sa.$$.fragment,Ae),Db=d(Ae),K=a(Ae,"P",{});var Ce=n(K);Fb=i(Ce,"Cast the floating-point "),Hi=a(Ce,"CODE",{});var Ow=n(Hi);qb=i(Ow,"parmas"),Ow.forEach(t),Ab=i(Ce," to "),Xi=a(Ce,"CODE",{});var Uw=n(Xi);Cb=i(Uw,"jax.numpy.float16"),Uw.forEach(t),Ib=i(Ce,". This returns a new "),Bi=a(Ce,"CODE",{});var Nw=n(Bi);Lb=i(Nw,"params"),Nw.forEach(t),zb=i(Ce,` tree and does not cast the
`),Vi=a(Ce,"CODE",{});var Hw=n(Vi);Ob=i(Hw,"params"),Hw.forEach(t),Ub=i(Ce," in place."),Ce.forEach(t),Nb=d(Ae),Si=a(Ae,"P",{});var Xw=n(Si);Hb=i(Xw,`This method can be used on GPU to explicitly convert the model parameters to float16 precision to do full
half-precision training or to save weights in float16 for inference in order to save memory and improve speed.`),Xw.forEach(t),Xb=d(Ae),Wi=a(Ae,"P",{});var Bw=n(Wi);Bb=i(Bw,"Examples:"),Bw.forEach(t),Vb=d(Ae),p(Wa.$$.fragment,Ae),Ae.forEach(t),Sb=d(D),re=a(D,"DIV",{class:!0});var ao=n(re);p(Ga.$$.fragment,ao),Wb=d(ao),J=a(ao,"P",{});var Ie=n(J);Gb=i(Ie,"Cast the floating-point "),Gi=a(Ie,"CODE",{});var Vw=n(Gi);Rb=i(Vw,"parmas"),Vw.forEach(t),Yb=i(Ie," to "),Ri=a(Ie,"CODE",{});var Sw=n(Ri);Kb=i(Sw,"jax.numpy.float32"),Sw.forEach(t),Jb=i(Ie,`. This method can be used to explicitly convert the
model parameters to fp32 precision. This returns a new `),Yi=a(Ie,"CODE",{});var Ww=n(Yi);Qb=i(Ww,"params"),Ww.forEach(t),Zb=i(Ie," tree and does not cast the "),Ki=a(Ie,"CODE",{});var Gw=n(Ki);ev=i(Gw,"params"),Gw.forEach(t),tv=i(Ie," in place."),Ie.forEach(t),ov=d(ao),Ji=a(ao,"P",{});var Rw=n(Ji);av=i(Rw,"Examples:"),Rw.forEach(t),nv=d(ao),p(Ra.$$.fragment,ao),ao.forEach(t),D.forEach(t),Ol=d(r),Qe=a(r,"H2",{class:!0});var Yd=n(Qe);Jt=a(Yd,"A",{id:!0,class:!0,href:!0});var Yw=n(Jt);Qi=a(Yw,"SPAN",{});var Kw=n(Qi);p(Ya.$$.fragment,Kw),Kw.forEach(t),Yw.forEach(t),rv=d(Yd),Zi=a(Yd,"SPAN",{});var Jw=n(Zi);sv=i(Jw,"Pushing to the Hub"),Jw.forEach(t),Yd.forEach(t),Ul=d(r),ce=a(r,"DIV",{class:!0});var Jn=n(ce);p(Ka.$$.fragment,Jn),iv=d(Jn),el=a(Jn,"P",{});var Qw=n(el);lv=i(Qw,"A Mixin containing the functionality to push a model or tokenizer to the hub."),Qw.forEach(t),dv=d(Jn),se=a(Jn,"DIV",{class:!0});var no=n(se);p(Ja.$$.fragment,no),mv=d(no),Qa=a(no,"P",{});var Kd=n(Qa);cv=i(Kd,`Upload the {object_files} to the \u{1F917} Model Hub while synchronizing a local clone of the repo in
`),tl=a(Kd,"CODE",{});var Zw=n(tl);pv=i(Zw,"repo_path_or_name"),Zw.forEach(t),hv=i(Kd,"."),Kd.forEach(t),fv=d(no),ol=a(no,"P",{});var e1=n(ol);uv=i(e1,"Examples:"),e1.forEach(t),gv=d(no),p(Za.$$.fragment,no),no.forEach(t),Jn.forEach(t),this.h()},h(){m(w,"name","hf:doc:metadata"),m(w,"content",JSON.stringify(c1)),m(E,"id","models"),m(E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(E,"href","#models"),m(x,"class","relative group"),m(rn,"href","/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel"),m(sn,"href","/docs/transformers/master/en/main_classes/model#transformers.TFPreTrainedModel"),m(ln,"href","/docs/transformers/master/en/main_classes/model#transformers.FlaxPreTrainedModel"),m(dn,"href","/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel"),m(mn,"href","/docs/transformers/master/en/main_classes/model#transformers.TFPreTrainedModel"),m(cn,"href","/docs/transformers/master/en/main_classes/model#transformers.modeling_utils.ModuleUtilsMixin"),m(pn,"href","/docs/transformers/master/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin"),m(hn,"href","/docs/transformers/master/en/main_classes/text_generation#transformers.generation_tf_utils.TFGenerationMixin"),m(fn,"href","/docs/transformers/master/en/main_classes/text_generation#transformers.generation_flax_utils.FlaxGenerationMixin"),m(et,"id","transformers.PreTrainedModel"),m(et,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(et,"href","#transformers.PreTrainedModel"),m(ze,"class","relative group"),m(gn,"href","/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel"),m(_n,"href","/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig"),m(bn,"href","/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig"),m(vn,"href","/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel"),m(ee,"class","docstring"),m(F,"class","docstring"),m(lt,"class","docstring"),m(dt,"class","docstring"),m(be,"class","docstring"),m(ve,"class","docstring"),m(mt,"class","docstring"),m(ct,"class","docstring"),m(pt,"class","docstring"),m(ye,"class","docstring"),m($e,"class","docstring"),m(ft,"class","docstring"),m(ut,"class","docstring"),m(we,"class","docstring"),m(T,"class","docstring"),m(yn,"id","from_pretrained-torch-dtype"),m(gt,"id","model-instantiation-dtype"),m(gt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(gt,"href","#model-instantiation-dtype"),m(Ne,"class","relative group"),m(bt,"id","transformers.modeling_utils.ModuleUtilsMixin"),m(bt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(bt,"href","#transformers.modeling_utils.ModuleUtilsMixin"),m(He,"class","relative group"),m(xe,"class","docstring"),m(vt,"class","docstring"),m(Vo,"href","https://arxiv.org/pdf/2001.08361.pdf"),m(Vo,"rel","nofollow"),m(yt,"class","docstring"),m($t,"class","docstring"),m(wt,"class","docstring"),m(Tt,"class","docstring"),m(xt,"class","docstring"),m(wn,"href","/docs/transformers/master/en/main_classes/model#transformers.modeling_utils.ModuleUtilsMixin.add_memory_hooks"),m(Pt,"class","docstring"),m(j,"class","docstring"),m(Et,"id","transformers.TFPreTrainedModel"),m(Et,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Et,"href","#transformers.TFPreTrainedModel"),m(Se,"class","relative group"),m(xn,"href","/docs/transformers/master/en/main_classes/model#transformers.TFPreTrainedModel"),m(Pn,"href","/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig"),m(En,"href","/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig"),m(oe,"class","docstring"),m(kt,"class","docstring"),m(C,"class","docstring"),m(Dt,"class","docstring"),m(Ft,"class","docstring"),m(qt,"class","docstring"),m(At,"class","docstring"),m(Ct,"class","docstring"),m(It,"class","docstring"),m(Lt,"class","docstring"),m(zt,"class","docstring"),m(Ee,"class","docstring"),m(Mn,"href","/docs/transformers/master/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained"),m(Ot,"class","docstring"),m(Ut,"class","docstring"),m(Nt,"class","docstring"),m(Ht,"class","docstring"),m(Xt,"class","docstring"),m(Bt,"class","docstring"),m(Vt,"class","docstring"),m(ae,"class","docstring"),m(b,"class","docstring"),m(St,"id","transformers.modeling_tf_utils.TFModelUtilsMixin"),m(St,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(St,"href","#transformers.modeling_tf_utils.TFModelUtilsMixin"),m(Ye,"class","relative group"),m(Wt,"class","docstring"),m(me,"class","docstring"),m(Gt,"id","transformers.FlaxPreTrainedModel"),m(Gt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Gt,"href","#transformers.FlaxPreTrainedModel"),m(Ke,"class","relative group"),m(jn,"href","/docs/transformers/master/en/main_classes/model#transformers.FlaxPreTrainedModel"),m(Dn,"href","/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig"),m(Fn,"href","/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig"),m(ne,"class","docstring"),m(O,"class","docstring"),m(ke,"class","docstring"),m(Kt,"class","docstring"),m(X,"class","docstring"),m(B,"class","docstring"),m(re,"class","docstring"),m(M,"class","docstring"),m(Jt,"id","transformers.file_utils.PushToHubMixin"),m(Jt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Jt,"href","#transformers.file_utils.PushToHubMixin"),m(Qe,"class","relative group"),m(se,"class","docstring"),m(ce,"class","docstring")},m(r,_){e(document.head,w),y(r,k,_),y(r,x,_),e(x,E),e(E,W),h(A,W,null),e(x,L),e(x,de),e(de,Jd),y(r,ul,_),y(r,Z,_),e(Z,Qd),e(Z,rn),e(rn,Zd),e(Z,em),e(Z,sn),e(sn,tm),e(Z,om),e(Z,ln),e(ln,am),e(Z,nm),y(r,gl,_),y(r,Le,_),e(Le,dn),e(dn,rm),e(Le,sm),e(Le,mn),e(mn,im),e(Le,lm),y(r,_l,_),y(r,Ze,_),e(Ze,Qn),e(Qn,dm),e(Ze,mm),e(Ze,Zn),e(Zn,cm),y(r,bl,_),y(r,z,_),e(z,pm),e(z,cn),e(cn,hm),e(z,fm),e(z,er),e(er,um),e(z,gm),e(z,pn),e(pn,_m),e(z,bm),e(z,hn),e(hn,vm),e(z,ym),e(z,fn),e(fn,$m),e(z,wm),y(r,vl,_),y(r,ze,_),e(ze,et),e(et,tr),h(so,tr,null),e(ze,Tm),e(ze,or),e(or,xm),y(r,yl,_),y(r,T,_),h(io,T,null),e(T,Pm),e(T,ar),e(ar,Em),e(T,Mm),e(T,un),e(un,gn),e(gn,km),e(un,jm),e(T,Dm),e(T,lo),e(lo,nr),e(nr,Fm),e(lo,qm),e(lo,rr),e(rr,Am),e(T,Cm),e(T,sr),e(sr,Im),e(T,Lm),e(T,G),e(G,ir),e(ir,ge),e(ge,lr),e(lr,zm),e(ge,Om),e(ge,_n),e(_n,Um),e(ge,Nm),e(ge,bn),e(bn,Hm),e(ge,Xm),e(G,Bm),e(G,mo),e(mo,_e),e(_e,dr),e(dr,Vm),e(_e,Sm),e(_e,mr),e(mr,Wm),e(_e,Gm),e(_e,cr),e(cr,Rm),e(_e,Ym),e(mo,Km),e(mo,Oe),e(Oe,tt),e(tt,pr),e(pr,Jm),e(tt,Qm),e(tt,vn),e(vn,Zm),e(tt,ec),e(Oe,tc),e(Oe,ot),e(ot,hr),e(hr,oc),e(ot,ac),e(ot,fr),e(fr,nc),e(ot,rc),e(Oe,sc),e(Oe,at),e(at,ur),e(ur,ic),e(at,lc),e(at,gr),e(gr,dc),e(at,mc),e(G,cc),e(G,_r),e(_r,nt),e(nt,br),e(br,pc),e(nt,hc),e(nt,vr),e(vr,fc),e(nt,uc),e(G,gc),e(G,yr),e(yr,rt),e(rt,$r),e($r,_c),e(rt,bc),e(rt,wr),e(wr,vc),e(rt,yc),e(G,$c),e(G,Tr),e(Tr,U),e(U,xr),e(xr,wc),e(U,Tc),e(U,Pr),e(Pr,xc),e(U,Pc),e(U,Er),e(Er,Ec),e(U,Mc),e(U,Mr),e(Mr,kc),e(U,jc),e(U,kr),e(kr,Dc),e(U,Fc),e(T,qc),e(T,ee),h(co,ee,null),e(ee,Ac),e(ee,po),e(po,Cc),e(po,jr),e(jr,Ic),e(po,Lc),e(ee,zc),e(ee,Dr),e(Dr,Oc),e(ee,Uc),h(ho,ee,null),e(T,Nc),e(T,F),h(fo,F,null),e(F,Hc),e(F,Fr),e(Fr,Xc),e(F,Bc),e(F,Ue),e(Ue,Vc),e(Ue,qr),e(qr,Sc),e(Ue,Wc),e(Ue,Ar),e(Ar,Gc),e(Ue,Rc),e(F,Yc),e(F,uo),e(uo,Kc),e(uo,Cr),e(Cr,Jc),e(uo,Qc),e(F,Zc),e(F,go),e(go,ep),e(go,Ir),e(Ir,tp),e(go,op),e(F,ap),h(st,F,null),e(F,np),h(it,F,null),e(F,rp),e(F,Lr),e(Lr,sp),e(F,ip),h(_o,F,null),e(T,lp),e(T,lt),h(bo,lt,null),e(lt,dp),e(lt,zr),e(zr,mp),e(T,cp),e(T,dt),h(vo,dt,null),e(dt,pp),e(dt,Or),e(Or,hp),e(T,fp),e(T,be),h(yo,be,null),e(be,up),e(be,Ur),e(Ur,gp),e(be,_p),e(be,Nr),e(Nr,bp),e(T,vp),e(T,ve),h($o,ve,null),e(ve,yp),e(ve,Hr),e(Hr,$p),e(ve,wp),e(ve,Xr),e(Xr,Tp),e(T,xp),e(T,mt),h(wo,mt,null),e(mt,Pp),e(mt,Br),e(Br,Ep),e(T,Mp),e(T,ct),h(To,ct,null),e(ct,kp),e(ct,Vr),e(Vr,jp),e(T,Dp),e(T,pt),h(xo,pt,null),e(pt,Fp),e(pt,Sr),e(Sr,qp),e(T,Ap),e(T,ye),h(Po,ye,null),e(ye,Cp),e(ye,Wr),e(Wr,Ip),e(ye,Lp),h(ht,ye,null),e(T,zp),e(T,$e),h(Eo,$e,null),e($e,Op),e($e,Mo),e(Mo,Up),e(Mo,Gr),e(Gr,Np),e(Mo,Hp),e($e,Xp),e($e,ko),e(ko,Bp),e(ko,Rr),e(Rr,Vp),e(ko,Sp),e(T,Wp),e(T,ft),h(jo,ft,null),e(ft,Gp),e(ft,Do),e(Do,Rp),e(Do,Yr),e(Yr,Yp),e(Do,Kp),e(T,Jp),e(T,ut),h(Fo,ut,null),e(ut,Qp),e(ut,Kr),e(Kr,Zp),e(T,eh),e(T,we),h(qo,we,null),e(we,th),e(we,Jr),e(Jr,oh),e(we,ah),e(we,Ao),e(Ao,nh),e(Ao,Qr),e(Qr,rh),e(Ao,sh),y(r,$l,_),y(r,yn,_),y(r,wl,_),y(r,Ne,_),e(Ne,gt),e(gt,Zr),h(Co,Zr,null),e(Ne,ih),e(Ne,es),e(es,lh),y(r,Tl,_),y(r,te,_),e(te,dh),e(te,ts),e(ts,mh),e(te,ch),e(te,os),e(os,ph),e(te,hh),e(te,as),e(as,fh),e(te,uh),y(r,xl,_),h(Io,r,_),y(r,Pl,_),y(r,Te,_),e(Te,gh),e(Te,ns),e(ns,_h),e(Te,bh),e(Te,rs),e(rs,vh),e(Te,yh),y(r,El,_),h(Lo,r,_),y(r,Ml,_),y(r,_t,_),e(_t,$h),e(_t,ss),e(ss,wh),e(_t,Th),y(r,kl,_),h(zo,r,_),y(r,jl,_),y(r,$n,_),e($n,xh),y(r,Dl,_),y(r,He,_),e(He,bt),e(bt,is),h(Oo,is,null),e(He,Ph),e(He,ls),e(ls,Eh),y(r,Fl,_),y(r,j,_),h(Uo,j,null),e(j,Mh),e(j,No),e(No,kh),e(No,ds),e(ds,jh),e(No,Dh),e(j,Fh),e(j,xe),h(Ho,xe,null),e(xe,qh),e(xe,ms),e(ms,Ah),e(xe,Ch),e(xe,Xe),e(Xe,Ih),e(Xe,cs),e(cs,Lh),e(Xe,zh),e(Xe,ps),e(ps,Oh),e(Xe,Uh),e(j,Nh),e(j,vt),h(Xo,vt,null),e(vt,Hh),e(vt,hs),e(hs,Xh),e(j,Bh),e(j,yt),h(Bo,yt,null),e(yt,Vh),e(yt,Be),e(Be,Sh),e(Be,fs),e(fs,Wh),e(Be,Gh),e(Be,Vo),e(Vo,Rh),e(Be,Yh),e(j,Kh),e(j,$t),h(So,$t,null),e($t,Jh),e($t,us),e(us,Qh),e(j,Zh),e(j,wt),h(Wo,wt,null),e(wt,ef),e(wt,gs),e(gs,tf),e(j,of),e(j,Tt),h(Go,Tt,null),e(Tt,af),e(Tt,_s),e(_s,nf),e(j,rf),e(j,xt),h(Ro,xt,null),e(xt,sf),e(xt,bs),e(bs,lf),e(j,df),e(j,Pt),h(Yo,Pt,null),e(Pt,mf),e(Pt,Ve),e(Ve,cf),e(Ve,vs),e(vs,pf),e(Ve,hf),e(Ve,wn),e(wn,ff),e(Ve,uf),y(r,ql,_),y(r,Se,_),e(Se,Et),e(Et,ys),h(Ko,ys,null),e(Se,gf),e(Se,$s),e($s,_f),y(r,Al,_),y(r,b,_),h(Jo,b,null),e(b,bf),e(b,ws),e(ws,vf),e(b,yf),e(b,Tn),e(Tn,xn),e(xn,$f),e(Tn,wf),e(b,Tf),e(b,Qo),e(Qo,Ts),e(Ts,xf),e(Qo,Pf),e(Qo,xs),e(xs,Ef),e(b,Mf),e(b,Ps),e(Ps,kf),e(b,jf),e(b,We),e(We,Pe),e(Pe,Es),e(Es,Df),e(Pe,Ff),e(Pe,Pn),e(Pn,qf),e(Pe,Af),e(Pe,En),e(En,Cf),e(Pe,If),e(We,Lf),e(We,Mt),e(Mt,Ms),e(Ms,zf),e(Mt,Of),e(Mt,ks),e(ks,Uf),e(Mt,Nf),e(We,Hf),e(We,N),e(N,js),e(js,Xf),e(N,Bf),e(N,Ds),e(Ds,Vf),e(N,Sf),e(N,Fs),e(Fs,Wf),e(N,Gf),e(N,qs),e(qs,Rf),e(N,Yf),e(N,As),e(As,Kf),e(N,Jf),e(b,Qf),e(b,oe),h(Zo,oe,null),e(oe,Zf),e(oe,ea),e(ea,eu),e(ea,Cs),e(Cs,tu),e(ea,ou),e(oe,au),e(oe,Is),e(Is,nu),e(oe,ru),h(ta,oe,null),e(b,su),e(b,kt),h(oa,kt,null),e(kt,iu),e(kt,Ls),e(Ls,lu),e(b,du),e(b,C),h(aa,C,null),e(C,mu),e(C,zs),e(zs,cu),e(C,pu),e(C,na),e(na,hu),e(na,Os),e(Os,fu),e(na,uu),e(C,gu),e(C,ra),e(ra,_u),e(ra,Us),e(Us,bu),e(ra,vu),e(C,yu),h(jt,C,null),e(C,$u),e(C,Ns),e(Ns,wu),e(C,Tu),h(sa,C,null),e(b,xu),e(b,Dt),h(ia,Dt,null),e(Dt,Pu),e(Dt,Hs),e(Hs,Eu),e(b,Mu),e(b,Ft),h(la,Ft,null),e(Ft,ku),e(Ft,Xs),e(Xs,ju),e(b,Du),e(b,qt),h(da,qt,null),e(qt,Fu),e(qt,Bs),e(Bs,qu),e(b,Au),e(b,At),h(ma,At,null),e(At,Cu),e(At,Vs),e(Vs,Iu),e(b,Lu),e(b,Ct),h(ca,Ct,null),e(Ct,zu),e(Ct,Ss),e(Ss,Ou),e(b,Uu),e(b,It),h(pa,It,null),e(It,Nu),e(It,Ws),e(Ws,Hu),e(b,Xu),e(b,Lt),h(ha,Lt,null),e(Lt,Bu),e(Lt,Gs),e(Gs,Vu),e(b,Su),e(b,zt),h(fa,zt,null),e(zt,Wu),e(zt,Rs),e(Rs,Gu),e(b,Ru),e(b,Ee),h(ua,Ee,null),e(Ee,Yu),e(Ee,ga),e(ga,Ku),e(ga,Ys),e(Ys,Ju),e(ga,Qu),e(Ee,Zu),e(Ee,_a),e(_a,eg),e(_a,Ks),e(Ks,tg),e(_a,og),e(b,ag),e(b,Ot),h(ba,Ot,null),e(Ot,ng),e(Ot,va),e(va,rg),e(va,Mn),e(Mn,sg),e(va,ig),e(b,lg),e(b,Ut),h(ya,Ut,null),e(Ut,dg),e(Ut,Js),e(Js,mg),e(b,cg),e(b,Nt),h($a,Nt,null),e(Nt,pg),e(Nt,Qs),e(Qs,hg),e(b,fg),e(b,Ht),h(wa,Ht,null),e(Ht,ug),e(Ht,Zs),e(Zs,gg),e(b,_g),e(b,Xt),h(Ta,Xt,null),e(Xt,bg),e(Xt,ei),e(ei,vg),e(b,yg),e(b,Bt),h(xa,Bt,null),e(Bt,$g),e(Bt,ti),e(ti,wg),e(b,Tg),e(b,Vt),h(Pa,Vt,null),e(Vt,xg),e(Vt,oi),e(oi,Pg),e(b,Eg),e(b,ae),h(Ea,ae,null),e(ae,Mg),e(ae,R),e(R,kg),e(R,ai),e(ai,jg),e(R,Dg),e(R,ni),e(ni,Fg),e(R,qg),e(R,ri),e(ri,Ag),e(R,Cg),e(R,si),e(si,Ig),e(R,Lg),e(ae,zg),e(ae,Ge),e(Ge,Og),e(Ge,ii),e(ii,Ug),e(Ge,Ng),e(Ge,li),e(li,Hg),e(Ge,Xg),e(ae,Bg),e(ae,Re),e(Re,Vg),e(Re,di),e(di,Sg),e(Re,Wg),e(Re,mi),e(mi,Gg),e(Re,Rg),y(r,Cl,_),y(r,Ye,_),e(Ye,St),e(St,ci),h(Ma,ci,null),e(Ye,Yg),e(Ye,pi),e(pi,Kg),y(r,Il,_),y(r,me,_),h(ka,me,null),e(me,Jg),e(me,ja),e(ja,Qg),e(ja,hi),e(hi,Zg),e(ja,e_),e(me,t_),e(me,Wt),h(Da,Wt,null),e(Wt,o_),e(Wt,fi),e(fi,a_),y(r,Ll,_),y(r,Ke,_),e(Ke,Gt),e(Gt,ui),h(Fa,ui,null),e(Ke,n_),e(Ke,gi),e(gi,r_),y(r,zl,_),y(r,M,_),h(qa,M,null),e(M,s_),e(M,_i),e(_i,i_),e(M,l_),e(M,kn),e(kn,jn),e(jn,d_),e(kn,m_),e(M,c_),e(M,bi),e(bi,p_),e(M,h_),e(M,Je),e(Je,Me),e(Me,vi),e(vi,f_),e(Me,u_),e(Me,Dn),e(Dn,g_),e(Me,__),e(Me,Fn),e(Fn,b_),e(Me,v_),e(Je,y_),e(Je,Rt),e(Rt,yi),e(yi,$_),e(Rt,w_),e(Rt,$i),e($i,T_),e(Rt,x_),e(Je,P_),e(Je,H),e(H,wi),e(wi,E_),e(H,M_),e(H,Ti),e(Ti,k_),e(H,j_),e(H,xi),e(xi,D_),e(H,F_),e(H,Pi),e(Pi,q_),e(H,A_),e(H,Ei),e(Ei,C_),e(H,I_),e(M,L_),e(M,ne),h(Aa,ne,null),e(ne,z_),e(ne,Ca),e(Ca,O_),e(Ca,Mi),e(Mi,U_),e(Ca,N_),e(ne,H_),e(ne,ki),e(ki,X_),e(ne,B_),h(Ia,ne,null),e(M,V_),e(M,O),h(La,O,null),e(O,S_),e(O,ji),e(ji,W_),e(O,G_),e(O,za),e(za,R_),e(za,Di),e(Di,Y_),e(za,K_),e(O,J_),e(O,Oa),e(Oa,Q_),e(Oa,Fi),e(Fi,Z_),e(Oa,eb),e(O,tb),e(O,qi),e(qi,ob),e(O,ab),h(Ua,O,null),e(M,nb),e(M,ke),h(Na,ke,null),e(ke,rb),e(ke,Ai),e(Ai,sb),e(ke,ib),h(Yt,ke,null),e(M,lb),e(M,Kt),h(Ha,Kt,null),e(Kt,db),e(Kt,Xa),e(Xa,mb),e(Xa,Ci),e(Ci,cb),e(Xa,pb),e(M,hb),e(M,X),h(Ba,X,null),e(X,fb),e(X,Y),e(Y,ub),e(Y,Ii),e(Ii,gb),e(Y,_b),e(Y,Li),e(Li,bb),e(Y,vb),e(Y,zi),e(zi,yb),e(Y,$b),e(Y,Oi),e(Oi,wb),e(Y,Tb),e(X,xb),e(X,Ui),e(Ui,Pb),e(X,Eb),e(X,Ni),e(Ni,Mb),e(X,kb),h(Va,X,null),e(M,jb),e(M,B),h(Sa,B,null),e(B,Db),e(B,K),e(K,Fb),e(K,Hi),e(Hi,qb),e(K,Ab),e(K,Xi),e(Xi,Cb),e(K,Ib),e(K,Bi),e(Bi,Lb),e(K,zb),e(K,Vi),e(Vi,Ob),e(K,Ub),e(B,Nb),e(B,Si),e(Si,Hb),e(B,Xb),e(B,Wi),e(Wi,Bb),e(B,Vb),h(Wa,B,null),e(M,Sb),e(M,re),h(Ga,re,null),e(re,Wb),e(re,J),e(J,Gb),e(J,Gi),e(Gi,Rb),e(J,Yb),e(J,Ri),e(Ri,Kb),e(J,Jb),e(J,Yi),e(Yi,Qb),e(J,Zb),e(J,Ki),e(Ki,ev),e(J,tv),e(re,ov),e(re,Ji),e(Ji,av),e(re,nv),h(Ra,re,null),y(r,Ol,_),y(r,Qe,_),e(Qe,Jt),e(Jt,Qi),h(Ya,Qi,null),e(Qe,rv),e(Qe,Zi),e(Zi,sv),y(r,Ul,_),y(r,ce,_),h(Ka,ce,null),e(ce,iv),e(ce,el),e(el,lv),e(ce,dv),e(ce,se),h(Ja,se,null),e(se,mv),e(se,Qa),e(Qa,cv),e(Qa,tl),e(tl,pv),e(Qa,hv),e(se,fv),e(se,ol),e(ol,uv),e(se,gv),h(Za,se,null),Nl=!0},p(r,[_]){const en={};_&2&&(en.$$scope={dirty:_,ctx:r}),st.$set(en);const al={};_&2&&(al.$$scope={dirty:_,ctx:r}),it.$set(al);const nl={};_&2&&(nl.$$scope={dirty:_,ctx:r}),ht.$set(nl);const rl={};_&2&&(rl.$$scope={dirty:_,ctx:r}),jt.$set(rl);const pe={};_&2&&(pe.$$scope={dirty:_,ctx:r}),Yt.$set(pe)},i(r){Nl||(f(A.$$.fragment,r),f(so.$$.fragment,r),f(io.$$.fragment,r),f(co.$$.fragment,r),f(ho.$$.fragment,r),f(fo.$$.fragment,r),f(st.$$.fragment,r),f(it.$$.fragment,r),f(_o.$$.fragment,r),f(bo.$$.fragment,r),f(vo.$$.fragment,r),f(yo.$$.fragment,r),f($o.$$.fragment,r),f(wo.$$.fragment,r),f(To.$$.fragment,r),f(xo.$$.fragment,r),f(Po.$$.fragment,r),f(ht.$$.fragment,r),f(Eo.$$.fragment,r),f(jo.$$.fragment,r),f(Fo.$$.fragment,r),f(qo.$$.fragment,r),f(Co.$$.fragment,r),f(Io.$$.fragment,r),f(Lo.$$.fragment,r),f(zo.$$.fragment,r),f(Oo.$$.fragment,r),f(Uo.$$.fragment,r),f(Ho.$$.fragment,r),f(Xo.$$.fragment,r),f(Bo.$$.fragment,r),f(So.$$.fragment,r),f(Wo.$$.fragment,r),f(Go.$$.fragment,r),f(Ro.$$.fragment,r),f(Yo.$$.fragment,r),f(Ko.$$.fragment,r),f(Jo.$$.fragment,r),f(Zo.$$.fragment,r),f(ta.$$.fragment,r),f(oa.$$.fragment,r),f(aa.$$.fragment,r),f(jt.$$.fragment,r),f(sa.$$.fragment,r),f(ia.$$.fragment,r),f(la.$$.fragment,r),f(da.$$.fragment,r),f(ma.$$.fragment,r),f(ca.$$.fragment,r),f(pa.$$.fragment,r),f(ha.$$.fragment,r),f(fa.$$.fragment,r),f(ua.$$.fragment,r),f(ba.$$.fragment,r),f(ya.$$.fragment,r),f($a.$$.fragment,r),f(wa.$$.fragment,r),f(Ta.$$.fragment,r),f(xa.$$.fragment,r),f(Pa.$$.fragment,r),f(Ea.$$.fragment,r),f(Ma.$$.fragment,r),f(ka.$$.fragment,r),f(Da.$$.fragment,r),f(Fa.$$.fragment,r),f(qa.$$.fragment,r),f(Aa.$$.fragment,r),f(Ia.$$.fragment,r),f(La.$$.fragment,r),f(Ua.$$.fragment,r),f(Na.$$.fragment,r),f(Yt.$$.fragment,r),f(Ha.$$.fragment,r),f(Ba.$$.fragment,r),f(Va.$$.fragment,r),f(Sa.$$.fragment,r),f(Wa.$$.fragment,r),f(Ga.$$.fragment,r),f(Ra.$$.fragment,r),f(Ya.$$.fragment,r),f(Ka.$$.fragment,r),f(Ja.$$.fragment,r),f(Za.$$.fragment,r),Nl=!0)},o(r){u(A.$$.fragment,r),u(so.$$.fragment,r),u(io.$$.fragment,r),u(co.$$.fragment,r),u(ho.$$.fragment,r),u(fo.$$.fragment,r),u(st.$$.fragment,r),u(it.$$.fragment,r),u(_o.$$.fragment,r),u(bo.$$.fragment,r),u(vo.$$.fragment,r),u(yo.$$.fragment,r),u($o.$$.fragment,r),u(wo.$$.fragment,r),u(To.$$.fragment,r),u(xo.$$.fragment,r),u(Po.$$.fragment,r),u(ht.$$.fragment,r),u(Eo.$$.fragment,r),u(jo.$$.fragment,r),u(Fo.$$.fragment,r),u(qo.$$.fragment,r),u(Co.$$.fragment,r),u(Io.$$.fragment,r),u(Lo.$$.fragment,r),u(zo.$$.fragment,r),u(Oo.$$.fragment,r),u(Uo.$$.fragment,r),u(Ho.$$.fragment,r),u(Xo.$$.fragment,r),u(Bo.$$.fragment,r),u(So.$$.fragment,r),u(Wo.$$.fragment,r),u(Go.$$.fragment,r),u(Ro.$$.fragment,r),u(Yo.$$.fragment,r),u(Ko.$$.fragment,r),u(Jo.$$.fragment,r),u(Zo.$$.fragment,r),u(ta.$$.fragment,r),u(oa.$$.fragment,r),u(aa.$$.fragment,r),u(jt.$$.fragment,r),u(sa.$$.fragment,r),u(ia.$$.fragment,r),u(la.$$.fragment,r),u(da.$$.fragment,r),u(ma.$$.fragment,r),u(ca.$$.fragment,r),u(pa.$$.fragment,r),u(ha.$$.fragment,r),u(fa.$$.fragment,r),u(ua.$$.fragment,r),u(ba.$$.fragment,r),u(ya.$$.fragment,r),u($a.$$.fragment,r),u(wa.$$.fragment,r),u(Ta.$$.fragment,r),u(xa.$$.fragment,r),u(Pa.$$.fragment,r),u(Ea.$$.fragment,r),u(Ma.$$.fragment,r),u(ka.$$.fragment,r),u(Da.$$.fragment,r),u(Fa.$$.fragment,r),u(qa.$$.fragment,r),u(Aa.$$.fragment,r),u(Ia.$$.fragment,r),u(La.$$.fragment,r),u(Ua.$$.fragment,r),u(Na.$$.fragment,r),u(Yt.$$.fragment,r),u(Ha.$$.fragment,r),u(Ba.$$.fragment,r),u(Va.$$.fragment,r),u(Sa.$$.fragment,r),u(Wa.$$.fragment,r),u(Ga.$$.fragment,r),u(Ra.$$.fragment,r),u(Ya.$$.fragment,r),u(Ka.$$.fragment,r),u(Ja.$$.fragment,r),u(Za.$$.fragment,r),Nl=!1},d(r){t(w),r&&t(k),r&&t(x),g(A),r&&t(ul),r&&t(Z),r&&t(gl),r&&t(Le),r&&t(_l),r&&t(Ze),r&&t(bl),r&&t(z),r&&t(vl),r&&t(ze),g(so),r&&t(yl),r&&t(T),g(io),g(co),g(ho),g(fo),g(st),g(it),g(_o),g(bo),g(vo),g(yo),g($o),g(wo),g(To),g(xo),g(Po),g(ht),g(Eo),g(jo),g(Fo),g(qo),r&&t($l),r&&t(yn),r&&t(wl),r&&t(Ne),g(Co),r&&t(Tl),r&&t(te),r&&t(xl),g(Io,r),r&&t(Pl),r&&t(Te),r&&t(El),g(Lo,r),r&&t(Ml),r&&t(_t),r&&t(kl),g(zo,r),r&&t(jl),r&&t($n),r&&t(Dl),r&&t(He),g(Oo),r&&t(Fl),r&&t(j),g(Uo),g(Ho),g(Xo),g(Bo),g(So),g(Wo),g(Go),g(Ro),g(Yo),r&&t(ql),r&&t(Se),g(Ko),r&&t(Al),r&&t(b),g(Jo),g(Zo),g(ta),g(oa),g(aa),g(jt),g(sa),g(ia),g(la),g(da),g(ma),g(ca),g(pa),g(ha),g(fa),g(ua),g(ba),g(ya),g($a),g(wa),g(Ta),g(xa),g(Pa),g(Ea),r&&t(Cl),r&&t(Ye),g(Ma),r&&t(Il),r&&t(me),g(ka),g(Da),r&&t(Ll),r&&t(Ke),g(Fa),r&&t(zl),r&&t(M),g(qa),g(Aa),g(Ia),g(La),g(Ua),g(Na),g(Yt),g(Ha),g(Ba),g(Va),g(Sa),g(Wa),g(Ga),g(Ra),r&&t(Ol),r&&t(Qe),g(Ya),r&&t(Ul),r&&t(ce),g(Ka),g(Ja),g(Za)}}}const c1={local:"models",sections:[{local:"transformers.PreTrainedModel",sections:[{local:"model-instantiation-dtype",title:"Model Instantiation dtype"}],title:"PreTrainedModel"},{local:"transformers.modeling_utils.ModuleUtilsMixin",title:"ModuleUtilsMixin"},{local:"transformers.TFPreTrainedModel",title:"TFPreTrainedModel"},{local:"transformers.modeling_tf_utils.TFModelUtilsMixin",title:"TFModelUtilsMixin"},{local:"transformers.FlaxPreTrainedModel",title:"FlaxPreTrainedModel"},{local:"transformers.file_utils.PushToHubMixin",title:"Pushing to the Hub"}],title:"Models"};function p1(S,w,k){let{fw:x}=w;return S.$$set=E=>{"fw"in E&&k(0,x=E.fw)},[x]}class v1 extends t1{constructor(w){super();o1(this,w,p1,m1,a1,{fw:0})}}export{v1 as default,c1 as metadata};
