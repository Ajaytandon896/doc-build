import{S as Hf,i as Jf,s as Wf,e as r,k as i,w as h,t as l,R as Bf,c as a,d as s,m as f,a as o,x as u,h as n,b as c,F as t,g as d,y as v,q as _,o as g,B as $}from"../../chunks/vendor-9daddcfa.js";import{T as Xf}from"../../chunks/Tip-c0a70391.js";import{D as q}from"../../chunks/Docstring-ea6f8b76.js";import{C as Xn}from"../../chunks/CodeBlock-37b92346.js";import{I as re}from"../../chunks/IconCopyLink-a413fd1b.js";import"../../chunks/CopyButton-6099fd9d.js";function Kf(Me){let m,D,E,P,T,y,Q,N;return{c(){m=r("p"),D=l(`This class method is simply calling the feature extractor
`),E=r("a"),P=l("from_pretrained()"),T=l(` and the tokenizer
`),y=r("code"),Q=l("from_pretrained"),N=l(` methods. Please refer to the docstrings of the
methods above for more information.`),this.h()},l(I){m=a(I,"P",{});var x=o(m);D=n(x,`This class method is simply calling the feature extractor
`),E=a(x,"A",{href:!0});var M=o(E);P=n(M,"from_pretrained()"),M.forEach(s),T=n(x,` and the tokenizer
`),y=a(x,"CODE",{});var X=o(y);Q=n(X,"from_pretrained"),X.forEach(s),N=n(x,` methods. Please refer to the docstrings of the
methods above for more information.`),x.forEach(s),this.h()},h(){c(E,"href","/docs/transformers/master/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.from_pretrained")},m(I,x){d(I,m,x),t(m,D),t(m,E),t(E,P),t(m,T),t(m,y),t(y,Q),t(m,N)},d(I){I&&s(m)}}}function Yf(Me){let m,D,E,P,T,y,Q,N;return{c(){m=r("p"),D=l("This class method is simply calling "),E=r("a"),P=l("save_pretrained()"),T=l(` and
`),y=r("code"),Q=l("save_pretrained"),N=l(`. Please refer to the docstrings of the methods
above for more information.`),this.h()},l(I){m=a(I,"P",{});var x=o(m);D=n(x,"This class method is simply calling "),E=a(x,"A",{href:!0});var M=o(E);P=n(M,"save_pretrained()"),M.forEach(s),T=n(x,` and
`),y=a(x,"CODE",{});var X=o(y);Q=n(X,"save_pretrained"),X.forEach(s),N=n(x,`. Please refer to the docstrings of the methods
above for more information.`),x.forEach(s),this.h()},h(){c(E,"href","/docs/transformers/master/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained")},m(I,x){d(I,m,x),t(m,D),t(m,E),t(E,P),t(m,T),t(m,y),t(y,Q),t(m,N)},d(I){I&&s(m)}}}function Zf(Me){let m,D,E,P,T,y,Q,N,I,x,M,X,ur,ae,H,Qa,kt,ja,Oa,Tt,Ua,Ga,za,ls,Fa,vr,J,oe,ns,Ce,Ra,is,Xa,_r,Nt,Ha,gr,Vt,Ja,$r,V,Qe,Wa,fs,Ba,Ka,G,je,Ya,ps,Za,eo,le,to,z,Oe,so,Ue,ro,Mt,ao,oo,lo,ne,Er,W,ie,cs,Ge,no,ds,io,xr,k,fo,Ct,po,co,Qt,mo,ho,jt,uo,vo,Ot,_o,go,wr,b,ze,$o,ms,Eo,xo,fe,Fe,wo,Re,bo,Ut,Po,yo,So,pe,Xe,qo,hs,Ao,Io,ce,He,Lo,us,Do,ko,de,Je,To,We,No,Gt,Vo,Mo,Co,me,Be,Qo,Ke,jo,zt,Oo,Uo,Go,he,Ye,zo,vs,Fo,br,j,Ze,Ro,_s,Xo,Ho,ue,et,Jo,gs,Wo,Pr,O,tt,Bo,$s,Ko,Yo,ve,st,Zo,Es,el,yr,B,_e,xs,rt,tl,ws,sl,Sr,ge,at,rl,al,ot,ol,qr,Ft,ll,Ar,Rt,nl,Ir,w,bs,Ps,il,fl,ys,Ss,pl,cl,qs,As,dl,ml,Is,Ls,hl,ul,Ds,ks,vl,_l,Ts,Ns,gl,$l,Vs,Ms,El,xl,Cs,Qs,wl,bl,js,Os,Pl,Lr,$e,yl,Xt,Sl,ql,Dr,Ht,Al,kr,K,Ee,Us,lt,Il,Gs,Ll,Tr,xe,Dl,nt,kl,Tl,Nr,Y,we,zs,it,Nl,Fs,Vl,Vr,Z,ft,Ml,Cl,pt,Rs,Ql,jl,Mr,ct,Ol,dt,Ul,Cr,Jt,Gl,Qr,Wt,Xs,Hs,zl,jr,Bt,Fl,Or,be,Rl,mt,Xl,Hl,Ur,ee,Pe,Js,ht,Jl,Ws,Wl,Gr,U,ut,Bl,Kl,vt,Yl,Zl,_t,en,tn,zr,Kt,sn,Fr,te,ye,Bs,gt,rn,Ks,an,Rr,Yt,on,Xr,Se,Ys,Zs,ln,nn,er,tr,fn,Hr,$t,pn,sr,cn,Jr,L,Et,dn,rr,mn,hn,qe,xt,un,ar,vn,_n,C,wt,gn,bt,$n,or,En,xn,wn,lr,bn,Pn,Pt,yn,Ae,yt,Sn,nr,qn,Wr,Ie,An,ir,In,Ln,Br,Zt,Dn,Kr,Le,kn,fr,Tn,Nn,Yr,se,De,pr,St,Vn,cr,Mn,Zr,es,Cn,ea,qt,ta,ke,Qn,dr,jn,On,sa,At,ra,Te,Un,It,Gn,zn,aa;return y=new re({}),Ce=new re({}),Qe=new q({props:{name:"class transformers.ProcessorMixin",anchor:"transformers.ProcessorMixin",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/processing_utils.py#L36"}}),je=new q({props:{name:"from_pretrained",anchor:"transformers.ProcessorMixin.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/processing_utils.py#L112",parametersDescription:[{anchor:"transformers.ProcessorMixin.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/master/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.
**kwargs &#x2014;
Additional keyword arguments passed along to both
<a href="/docs/transformers/master/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.from_pretrained">from_pretrained()</a> and
<code>from_pretrained</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"}]}}),le=new Xf({props:{$$slots:{default:[Kf]},$$scope:{ctx:Me}}}),Oe=new q({props:{name:"save_pretrained",anchor:"transformers.ProcessorMixin.save_pretrained",parameters:[{name:"save_directory",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/processing_utils.py#L86",parametersDescription:[{anchor:"transformers.ProcessorMixin.save_pretrained.save_directory",description:`<strong>save_directory</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Directory where the feature extractor JSON file and the tokenizer files will be saved (directory will
be created if it does not exist).`,name:"save_directory"}]}}),ne=new Xf({props:{$$slots:{default:[Yf]},$$scope:{ctx:Me}}}),Ge=new re({}),ze=new q({props:{name:"class transformers.DataProcessor",anchor:"transformers.DataProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/data/processors/utils.py#L81"}}),Fe=new q({props:{name:"get_dev_examples",anchor:"transformers.DataProcessor.get_dev_examples",parameters:[{name:"data_dir",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/data/processors/utils.py#L98"}}),Xe=new q({props:{name:"get_example_from_tensor_dict",anchor:"transformers.DataProcessor.get_example_from_tensor_dict",parameters:[{name:"tensor_dict",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/data/processors/utils.py#L84"}}),He=new q({props:{name:"get_labels",anchor:"transformers.DataProcessor.get_labels",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/data/processors/utils.py#L106"}}),Je=new q({props:{name:"get_test_examples",anchor:"transformers.DataProcessor.get_test_examples",parameters:[{name:"data_dir",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/data/processors/utils.py#L102"}}),Be=new q({props:{name:"get_train_examples",anchor:"transformers.DataProcessor.get_train_examples",parameters:[{name:"data_dir",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/data/processors/utils.py#L94"}}),Ye=new q({props:{name:"tfds_map",anchor:"transformers.DataProcessor.tfds_map",parameters:[{name:"example",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/data/processors/utils.py#L110"}}),Ze=new q({props:{name:"class transformers.InputExample",anchor:"transformers.InputExample",parameters:[{name:"guid",val:": str"},{name:"text_a",val:": str"},{name:"text_b",val:": typing.Optional[str] = None"},{name:"label",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/data/processors/utils.py#L31"}}),et=new q({props:{name:"to_json_string",anchor:"transformers.InputExample.to_json_string",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/data/processors/utils.py#L50"}}),tt=new q({props:{name:"class transformers.InputFeatures",anchor:"transformers.InputFeatures",parameters:[{name:"input_ids",val:": typing.List[int]"},{name:"attention_mask",val:": typing.Optional[typing.List[int]] = None"},{name:"token_type_ids",val:": typing.Optional[typing.List[int]] = None"},{name:"label",val:": typing.Union[int, float, NoneType] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/data/processors/utils.py#L56"}}),st=new q({props:{name:"to_json_string",anchor:"transformers.InputFeatures.to_json_string",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/data/processors/utils.py#L76"}}),rt=new re({}),lt=new re({}),it=new re({}),ht=new re({}),gt=new re({}),Et=new q({props:{name:"class transformers.data.processors.squad.SquadProcessor",anchor:"transformers.data.processors.squad.SquadProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/data/processors/squad.py#L543"}}),xt=new q({props:{name:"get_dev_examples",anchor:"transformers.data.processors.squad.SquadProcessor.get_dev_examples",parameters:[{name:"data_dir",val:""},{name:"filename",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/data/processors/squad.py#L631"}}),wt=new q({props:{name:"get_examples_from_dataset",anchor:"transformers.data.processors.squad.SquadProcessor.get_examples_from_dataset",parameters:[{name:"dataset",val:""},{name:"evaluate",val:" = False"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/data/processors/squad.py#L576",returnDescription:`
<p>List of SquadExample</p>
`}}),Pt=new Xn({props:{code:`import tensorflow_datasets as tfds

dataset = tfds.load("squad")

training_examples = get_examples_from_dataset(dataset, evaluate=False)
evaluation_examples = get_examples_from_dataset(dataset, evaluate=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow_datasets <span class="hljs-keyword">as</span> tfds

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = tfds.load(<span class="hljs-string">&quot;squad&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>training_examples = get_examples_from_dataset(dataset, evaluate=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>evaluation_examples = get_examples_from_dataset(dataset, evaluate=<span class="hljs-literal">True</span>)`}}),yt=new q({props:{name:"get_train_examples",anchor:"transformers.data.processors.squad.SquadProcessor.get_train_examples",parameters:[{name:"data_dir",val:""},{name:"filename",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/data/processors/squad.py#L609"}}),St=new re({}),qt=new Xn({props:{code:`# Loading a V2 processor
processor = SquadV2Processor()
examples = processor.get_dev_examples(squad_v2_data_dir)

# Loading a V1 processor
processor = SquadV1Processor()
examples = processor.get_dev_examples(squad_v1_data_dir)

features = squad_convert_examples_to_features(
    examples=examples,
    tokenizer=tokenizer,
    max_seq_length=max_seq_length,
    doc_stride=args.doc_stride,
    max_query_length=max_query_length,
    is_training=not evaluate,
)`,highlighted:`<span class="hljs-comment"># Loading a V2 processor</span>
processor = SquadV2Processor()
examples = processor.get_dev_examples(squad_v2_data_dir)

<span class="hljs-comment"># Loading a V1 processor</span>
processor = SquadV1Processor()
examples = processor.get_dev_examples(squad_v1_data_dir)

features = squad_convert_examples_to_features(
    examples=examples,
    tokenizer=tokenizer,
    max_seq_length=max_seq_length,
    doc_stride=args.doc_stride,
    max_query_length=max_query_length,
    is_training=<span class="hljs-keyword">not</span> evaluate,
)`}}),At=new Xn({props:{code:`# tensorflow_datasets only handle Squad V1.
tfds_examples = tfds.load("squad")
examples = SquadV1Processor().get_examples_from_dataset(tfds_examples, evaluate=evaluate)

features = squad_convert_examples_to_features(
    examples=examples,
    tokenizer=tokenizer,
    max_seq_length=max_seq_length,
    doc_stride=args.doc_stride,
    max_query_length=max_query_length,
    is_training=not evaluate,
)`,highlighted:`<span class="hljs-comment"># tensorflow_datasets only handle Squad V1.</span>
tfds_examples = tfds.load(<span class="hljs-string">&quot;squad&quot;</span>)
examples = SquadV1Processor().get_examples_from_dataset(tfds_examples, evaluate=evaluate)

features = squad_convert_examples_to_features(
    examples=examples,
    tokenizer=tokenizer,
    max_seq_length=max_seq_length,
    doc_stride=args.doc_stride,
    max_query_length=max_query_length,
    is_training=<span class="hljs-keyword">not</span> evaluate,
)`}}),{c(){m=r("meta"),D=i(),E=r("h1"),P=r("a"),T=r("span"),h(y.$$.fragment),Q=i(),N=r("span"),I=l("Processors"),x=i(),M=r("p"),X=l("Processors can mean two different things in the Transformers library:"),ur=i(),ae=r("ul"),H=r("li"),Qa=l("the objects that pre-process inputs for multi-modal models such as "),kt=r("a"),ja=l("Wav2Vec2"),Oa=l(` (speech and text)
or `),Tt=r("a"),Ua=l("CLIP"),Ga=l(" (text and vision)"),za=i(),ls=r("li"),Fa=l("deprecated objects that were used in older versions of the library to preprocess data for GLUE or SQUAD."),vr=i(),J=r("h2"),oe=r("a"),ns=r("span"),h(Ce.$$.fragment),Ra=i(),is=r("span"),Xa=l("Multi-modal processors"),_r=i(),Nt=r("p"),Ha=l(`Any multi-modal model will require an object to encode or decode the data that groups several modalities (among text,
vision and audio). This is handled by objects called processors, which group tokenizers (for the text modality) and
feature extractors (for vision and audio).`),gr=i(),Vt=r("p"),Ja=l("Those processors inherit from the following base class that implements the saving and loading functionality:"),$r=i(),V=r("div"),h(Qe.$$.fragment),Wa=i(),fs=r("p"),Ba=l("This is a mixin used to provide saving/loading functionality for all processor classes."),Ka=i(),G=r("div"),h(je.$$.fragment),Ya=i(),ps=r("p"),Za=l("Instantiate a processor associated with a pretrained model."),eo=i(),h(le.$$.fragment),to=i(),z=r("div"),h(Oe.$$.fragment),so=i(),Ue=r("p"),ro=l(`Saves the attributes of this processor (feature extractor, tokenizer\u2026) in the specified directory so that it
can be reloaded using the `),Mt=r("a"),ao=l("from_pretrained()"),oo=l(" method."),lo=i(),h(ne.$$.fragment),Er=i(),W=r("h2"),ie=r("a"),cs=r("span"),h(Ge.$$.fragment),no=i(),ds=r("span"),io=l("Deprecated processors"),xr=i(),k=r("p"),fo=l(`All processors follow the same architecture which is that of the
`),Ct=r("a"),po=l("DataProcessor"),co=l(`. The processor returns a list of
`),Qt=r("a"),mo=l("InputExample"),ho=l(`. These
`),jt=r("a"),uo=l("InputExample"),vo=l(` can be converted to
`),Ot=r("a"),_o=l("InputFeatures"),go=l(" in order to be fed to the model."),wr=i(),b=r("div"),h(ze.$$.fragment),$o=i(),ms=r("p"),Eo=l("Base class for data converters for sequence classification data sets."),xo=i(),fe=r("div"),h(Fe.$$.fragment),wo=i(),Re=r("p"),bo=l("Gets a collection of "),Ut=r("a"),Po=l("InputExample"),yo=l(" for the dev set."),So=i(),pe=r("div"),h(Xe.$$.fragment),qo=i(),hs=r("p"),Ao=l("Gets an example from a dict with tensorflow tensors."),Io=i(),ce=r("div"),h(He.$$.fragment),Lo=i(),us=r("p"),Do=l("Gets the list of labels for this data set."),ko=i(),de=r("div"),h(Je.$$.fragment),To=i(),We=r("p"),No=l("Gets a collection of "),Gt=r("a"),Vo=l("InputExample"),Mo=l(" for the test set."),Co=i(),me=r("div"),h(Be.$$.fragment),Qo=i(),Ke=r("p"),jo=l("Gets a collection of "),zt=r("a"),Oo=l("InputExample"),Uo=l(" for the train set."),Go=i(),he=r("div"),h(Ye.$$.fragment),zo=i(),vs=r("p"),Fo=l(`Some tensorflow_datasets datasets are not formatted the same way the GLUE datasets are. This method converts
examples to the correct format.`),br=i(),j=r("div"),h(Ze.$$.fragment),Ro=i(),_s=r("p"),Xo=l("A single training/test example for simple sequence classification."),Ho=i(),ue=r("div"),h(et.$$.fragment),Jo=i(),gs=r("p"),Wo=l("Serializes this instance to a JSON string."),Pr=i(),O=r("div"),h(tt.$$.fragment),Bo=i(),$s=r("p"),Ko=l("A single set of features of data. Property names are the same names as the corresponding inputs to a model."),Yo=i(),ve=r("div"),h(st.$$.fragment),Zo=i(),Es=r("p"),el=l("Serializes this instance to a JSON string."),yr=i(),B=r("h2"),_e=r("a"),xs=r("span"),h(rt.$$.fragment),tl=i(),ws=r("span"),sl=l("GLUE"),Sr=i(),ge=r("p"),at=r("a"),rl=l("General Language Understanding Evaluation (GLUE)"),al=l(` is a benchmark that evaluates the
performance of models across a diverse set of existing NLU tasks. It was released together with the paper `),ot=r("a"),ol=l(`GLUE: A
multi-task benchmark and analysis platform for natural language understanding`),qr=i(),Ft=r("p"),ll=l(`This library hosts a total of 10 processors for the following tasks: MRPC, MNLI, MNLI (mismatched), CoLA, SST2, STSB,
QQP, QNLI, RTE and WNLI.`),Ar=i(),Rt=r("p"),nl=l("Those processors are:"),Ir=i(),w=r("ul"),bs=r("li"),Ps=r("code"),il=l("MrpcProcessor"),fl=i(),ys=r("li"),Ss=r("code"),pl=l("MnliProcessor"),cl=i(),qs=r("li"),As=r("code"),dl=l("MnliMismatchedProcessor"),ml=i(),Is=r("li"),Ls=r("code"),hl=l("Sst2Processor"),ul=i(),Ds=r("li"),ks=r("code"),vl=l("StsbProcessor"),_l=i(),Ts=r("li"),Ns=r("code"),gl=l("QqpProcessor"),$l=i(),Vs=r("li"),Ms=r("code"),El=l("QnliProcessor"),xl=i(),Cs=r("li"),Qs=r("code"),wl=l("RteProcessor"),bl=i(),js=r("li"),Os=r("code"),Pl=l("WnliProcessor"),Lr=i(),$e=r("p"),yl=l(`Additionally, the following method can be used to load values from a data file and convert them to a list of
`),Xt=r("a"),Sl=l("InputExample"),ql=l("."),Dr=i(),Ht=r("p"),Al=l("automethod,transformers.data.processors.glue.glue_convert_examples_to_features"),kr=i(),K=r("h3"),Ee=r("a"),Us=r("span"),h(lt.$$.fragment),Il=i(),Gs=r("span"),Ll=l("Example usage"),Tr=i(),xe=r("p"),Dl=l("An example using these processors is given in the "),nt=r("a"),kl=l("run_glue.py"),Tl=l(" script."),Nr=i(),Y=r("h2"),we=r("a"),zs=r("span"),h(it.$$.fragment),Nl=i(),Fs=r("span"),Vl=l("XNLI"),Vr=i(),Z=r("p"),ft=r("a"),Ml=l("The Cross-Lingual NLI Corpus (XNLI)"),Cl=l(` is a benchmark that evaluates the
quality of cross-lingual text representations. XNLI is crowd-sourced dataset based on `),pt=r("a"),Rs=r("em"),Ql=l("MultiNLI"),jl=l(`: pairs of text are labeled with textual entailment annotations for 15
different languages (including both high-resource language such as English and low-resource languages such as Swahili).`),Mr=i(),ct=r("p"),Ol=l("It was released together with the paper "),dt=r("a"),Ul=l("XNLI: Evaluating Cross-lingual Sentence Representations"),Cr=i(),Jt=r("p"),Gl=l("This library hosts the processor to load the XNLI data:"),Qr=i(),Wt=r("ul"),Xs=r("li"),Hs=r("code"),zl=l("XnliProcessor"),jr=i(),Bt=r("p"),Fl=l("Please note that since the gold labels are available on the test set, evaluation is performed on the test set."),Or=i(),be=r("p"),Rl=l("An example using these processors is given in the "),mt=r("a"),Xl=l("run_xnli.py"),Hl=l(" script."),Ur=i(),ee=r("h2"),Pe=r("a"),Js=r("span"),h(ht.$$.fragment),Jl=i(),Ws=r("span"),Wl=l("SQuAD"),Gr=i(),U=r("p"),ut=r("a"),Bl=l("The Stanford Question Answering Dataset (SQuAD)"),Kl=l(` is a benchmark that
evaluates the performance of models on question answering. Two versions are available, v1.1 and v2.0. The first version
(v1.1) was released together with the paper `),vt=r("a"),Yl=l("SQuAD: 100,000+ Questions for Machine Comprehension of Text"),Zl=l(". The second version (v2.0) was released alongside the paper "),_t=r("a"),en=l(`Know What You Don\u2019t
Know: Unanswerable Questions for SQuAD`),tn=l("."),zr=i(),Kt=r("p"),sn=l("This library hosts a processor for each of the two versions:"),Fr=i(),te=r("h3"),ye=r("a"),Bs=r("span"),h(gt.$$.fragment),rn=i(),Ks=r("span"),an=l("Processors"),Rr=i(),Yt=r("p"),on=l("Those processors are:"),Xr=i(),Se=r("ul"),Ys=r("li"),Zs=r("code"),ln=l("SquadV1Processor"),nn=i(),er=r("li"),tr=r("code"),fn=l("SquadV2Processor"),Hr=i(),$t=r("p"),pn=l("They both inherit from the abstract class "),sr=r("code"),cn=l("SquadProcessor"),Jr=i(),L=r("div"),h(Et.$$.fragment),dn=i(),rr=r("p"),mn=l(`Processor for the SQuAD data set. overridden by SquadV1Processor and SquadV2Processor, used by the version 1.1 and
version 2.0 of SQuAD, respectively.`),hn=i(),qe=r("div"),h(xt.$$.fragment),un=i(),ar=r("p"),vn=l("Returns the evaluation example from the data directory."),_n=i(),C=r("div"),h(wt.$$.fragment),gn=i(),bt=r("p"),$n=l("Creates a list of "),or=r("code"),En=l("SquadExample"),xn=l("using a TFDS dataset."),wn=i(),lr=r("p"),bn=l("Examples:"),Pn=i(),h(Pt.$$.fragment),yn=i(),Ae=r("div"),h(yt.$$.fragment),Sn=i(),nr=r("p"),qn=l("Returns the training examples from the data directory."),Wr=i(),Ie=r("p"),An=l(`Additionally, the following method can be used to convert SQuAD examples into
`),ir=r("code"),In=l("SquadFeatures"),Ln=l(" that can be used as model inputs."),Br=i(),Zt=r("p"),Dn=l("automethod,transformers.data.processors.squad.squad_convert_examples_to_features"),Kr=i(),Le=r("p"),kn=l(`These processors as well as the aforementionned method can be used with files containing the data as well as with the
`),fr=r("em"),Tn=l("tensorflow_datasets"),Nn=l(" package. Examples are given below."),Yr=i(),se=r("h3"),De=r("a"),pr=r("span"),h(St.$$.fragment),Vn=i(),cr=r("span"),Mn=l("Example usage"),Zr=i(),es=r("p"),Cn=l("Here is an example using the processors as well as the conversion method using data files:"),ea=i(),h(qt.$$.fragment),ta=i(),ke=r("p"),Qn=l("Using "),dr=r("em"),jn=l("tensorflow_datasets"),On=l(" is as easy as using a data file:"),sa=i(),h(At.$$.fragment),ra=i(),Te=r("p"),Un=l("Another example using these processors is given in the "),It=r("a"),Gn=l("run_squad.py"),zn=l(" script."),this.h()},l(e){const p=Bf('[data-svelte="svelte-1phssyn"]',document.head);m=a(p,"META",{name:!0,content:!0}),p.forEach(s),D=f(e),E=a(e,"H1",{class:!0});var Lt=o(E);P=a(Lt,"A",{id:!0,class:!0,href:!0});var mr=o(P);T=a(mr,"SPAN",{});var Hn=o(T);u(y.$$.fragment,Hn),Hn.forEach(s),mr.forEach(s),Q=f(Lt),N=a(Lt,"SPAN",{});var Jn=o(N);I=n(Jn,"Processors"),Jn.forEach(s),Lt.forEach(s),x=f(e),M=a(e,"P",{});var Wn=o(M);X=n(Wn,"Processors can mean two different things in the Transformers library:"),Wn.forEach(s),ur=f(e),ae=a(e,"UL",{});var oa=o(ae);H=a(oa,"LI",{});var ts=o(H);Qa=n(ts,"the objects that pre-process inputs for multi-modal models such as "),kt=a(ts,"A",{href:!0});var Bn=o(kt);ja=n(Bn,"Wav2Vec2"),Bn.forEach(s),Oa=n(ts,` (speech and text)
or `),Tt=a(ts,"A",{href:!0});var Kn=o(Tt);Ua=n(Kn,"CLIP"),Kn.forEach(s),Ga=n(ts," (text and vision)"),ts.forEach(s),za=f(oa),ls=a(oa,"LI",{});var Yn=o(ls);Fa=n(Yn,"deprecated objects that were used in older versions of the library to preprocess data for GLUE or SQUAD."),Yn.forEach(s),oa.forEach(s),vr=f(e),J=a(e,"H2",{class:!0});var la=o(J);oe=a(la,"A",{id:!0,class:!0,href:!0});var Zn=o(oe);ns=a(Zn,"SPAN",{});var ei=o(ns);u(Ce.$$.fragment,ei),ei.forEach(s),Zn.forEach(s),Ra=f(la),is=a(la,"SPAN",{});var ti=o(is);Xa=n(ti,"Multi-modal processors"),ti.forEach(s),la.forEach(s),_r=f(e),Nt=a(e,"P",{});var si=o(Nt);Ha=n(si,`Any multi-modal model will require an object to encode or decode the data that groups several modalities (among text,
vision and audio). This is handled by objects called processors, which group tokenizers (for the text modality) and
feature extractors (for vision and audio).`),si.forEach(s),gr=f(e),Vt=a(e,"P",{});var ri=o(Vt);Ja=n(ri,"Those processors inherit from the following base class that implements the saving and loading functionality:"),ri.forEach(s),$r=f(e),V=a(e,"DIV",{class:!0});var Ne=o(V);u(Qe.$$.fragment,Ne),Wa=f(Ne),fs=a(Ne,"P",{});var ai=o(fs);Ba=n(ai,"This is a mixin used to provide saving/loading functionality for all processor classes."),ai.forEach(s),Ka=f(Ne),G=a(Ne,"DIV",{class:!0});var ss=o(G);u(je.$$.fragment,ss),Ya=f(ss),ps=a(ss,"P",{});var oi=o(ps);Za=n(oi,"Instantiate a processor associated with a pretrained model."),oi.forEach(s),eo=f(ss),u(le.$$.fragment,ss),ss.forEach(s),to=f(Ne),z=a(Ne,"DIV",{class:!0});var rs=o(z);u(Oe.$$.fragment,rs),so=f(rs),Ue=a(rs,"P",{});var na=o(Ue);ro=n(na,`Saves the attributes of this processor (feature extractor, tokenizer\u2026) in the specified directory so that it
can be reloaded using the `),Mt=a(na,"A",{href:!0});var li=o(Mt);ao=n(li,"from_pretrained()"),li.forEach(s),oo=n(na," method."),na.forEach(s),lo=f(rs),u(ne.$$.fragment,rs),rs.forEach(s),Ne.forEach(s),Er=f(e),W=a(e,"H2",{class:!0});var ia=o(W);ie=a(ia,"A",{id:!0,class:!0,href:!0});var ni=o(ie);cs=a(ni,"SPAN",{});var ii=o(cs);u(Ge.$$.fragment,ii),ii.forEach(s),ni.forEach(s),no=f(ia),ds=a(ia,"SPAN",{});var fi=o(ds);io=n(fi,"Deprecated processors"),fi.forEach(s),ia.forEach(s),xr=f(e),k=a(e,"P",{});var F=o(k);fo=n(F,`All processors follow the same architecture which is that of the
`),Ct=a(F,"A",{href:!0});var pi=o(Ct);po=n(pi,"DataProcessor"),pi.forEach(s),co=n(F,`. The processor returns a list of
`),Qt=a(F,"A",{href:!0});var ci=o(Qt);mo=n(ci,"InputExample"),ci.forEach(s),ho=n(F,`. These
`),jt=a(F,"A",{href:!0});var di=o(jt);uo=n(di,"InputExample"),di.forEach(s),vo=n(F,` can be converted to
`),Ot=a(F,"A",{href:!0});var mi=o(Ot);_o=n(mi,"InputFeatures"),mi.forEach(s),go=n(F," in order to be fed to the model."),F.forEach(s),wr=f(e),b=a(e,"DIV",{class:!0});var A=o(b);u(ze.$$.fragment,A),$o=f(A),ms=a(A,"P",{});var hi=o(ms);Eo=n(hi,"Base class for data converters for sequence classification data sets."),hi.forEach(s),xo=f(A),fe=a(A,"DIV",{class:!0});var fa=o(fe);u(Fe.$$.fragment,fa),wo=f(fa),Re=a(fa,"P",{});var pa=o(Re);bo=n(pa,"Gets a collection of "),Ut=a(pa,"A",{href:!0});var ui=o(Ut);Po=n(ui,"InputExample"),ui.forEach(s),yo=n(pa," for the dev set."),pa.forEach(s),fa.forEach(s),So=f(A),pe=a(A,"DIV",{class:!0});var ca=o(pe);u(Xe.$$.fragment,ca),qo=f(ca),hs=a(ca,"P",{});var vi=o(hs);Ao=n(vi,"Gets an example from a dict with tensorflow tensors."),vi.forEach(s),ca.forEach(s),Io=f(A),ce=a(A,"DIV",{class:!0});var da=o(ce);u(He.$$.fragment,da),Lo=f(da),us=a(da,"P",{});var _i=o(us);Do=n(_i,"Gets the list of labels for this data set."),_i.forEach(s),da.forEach(s),ko=f(A),de=a(A,"DIV",{class:!0});var ma=o(de);u(Je.$$.fragment,ma),To=f(ma),We=a(ma,"P",{});var ha=o(We);No=n(ha,"Gets a collection of "),Gt=a(ha,"A",{href:!0});var gi=o(Gt);Vo=n(gi,"InputExample"),gi.forEach(s),Mo=n(ha," for the test set."),ha.forEach(s),ma.forEach(s),Co=f(A),me=a(A,"DIV",{class:!0});var ua=o(me);u(Be.$$.fragment,ua),Qo=f(ua),Ke=a(ua,"P",{});var va=o(Ke);jo=n(va,"Gets a collection of "),zt=a(va,"A",{href:!0});var $i=o(zt);Oo=n($i,"InputExample"),$i.forEach(s),Uo=n(va," for the train set."),va.forEach(s),ua.forEach(s),Go=f(A),he=a(A,"DIV",{class:!0});var _a=o(he);u(Ye.$$.fragment,_a),zo=f(_a),vs=a(_a,"P",{});var Ei=o(vs);Fo=n(Ei,`Some tensorflow_datasets datasets are not formatted the same way the GLUE datasets are. This method converts
examples to the correct format.`),Ei.forEach(s),_a.forEach(s),A.forEach(s),br=f(e),j=a(e,"DIV",{class:!0});var as=o(j);u(Ze.$$.fragment,as),Ro=f(as),_s=a(as,"P",{});var xi=o(_s);Xo=n(xi,"A single training/test example for simple sequence classification."),xi.forEach(s),Ho=f(as),ue=a(as,"DIV",{class:!0});var ga=o(ue);u(et.$$.fragment,ga),Jo=f(ga),gs=a(ga,"P",{});var wi=o(gs);Wo=n(wi,"Serializes this instance to a JSON string."),wi.forEach(s),ga.forEach(s),as.forEach(s),Pr=f(e),O=a(e,"DIV",{class:!0});var os=o(O);u(tt.$$.fragment,os),Bo=f(os),$s=a(os,"P",{});var bi=o($s);Ko=n(bi,"A single set of features of data. Property names are the same names as the corresponding inputs to a model."),bi.forEach(s),Yo=f(os),ve=a(os,"DIV",{class:!0});var $a=o(ve);u(st.$$.fragment,$a),Zo=f($a),Es=a($a,"P",{});var Pi=o(Es);el=n(Pi,"Serializes this instance to a JSON string."),Pi.forEach(s),$a.forEach(s),os.forEach(s),yr=f(e),B=a(e,"H2",{class:!0});var Ea=o(B);_e=a(Ea,"A",{id:!0,class:!0,href:!0});var yi=o(_e);xs=a(yi,"SPAN",{});var Si=o(xs);u(rt.$$.fragment,Si),Si.forEach(s),yi.forEach(s),tl=f(Ea),ws=a(Ea,"SPAN",{});var qi=o(ws);sl=n(qi,"GLUE"),qi.forEach(s),Ea.forEach(s),Sr=f(e),ge=a(e,"P",{});var xa=o(ge);at=a(xa,"A",{href:!0,rel:!0});var Ai=o(at);rl=n(Ai,"General Language Understanding Evaluation (GLUE)"),Ai.forEach(s),al=n(xa,` is a benchmark that evaluates the
performance of models across a diverse set of existing NLU tasks. It was released together with the paper `),ot=a(xa,"A",{href:!0,rel:!0});var Ii=o(ot);ol=n(Ii,`GLUE: A
multi-task benchmark and analysis platform for natural language understanding`),Ii.forEach(s),xa.forEach(s),qr=f(e),Ft=a(e,"P",{});var Li=o(Ft);ll=n(Li,`This library hosts a total of 10 processors for the following tasks: MRPC, MNLI, MNLI (mismatched), CoLA, SST2, STSB,
QQP, QNLI, RTE and WNLI.`),Li.forEach(s),Ar=f(e),Rt=a(e,"P",{});var Di=o(Rt);nl=n(Di,"Those processors are:"),Di.forEach(s),Ir=f(e),w=a(e,"UL",{});var S=o(w);bs=a(S,"LI",{});var ki=o(bs);Ps=a(ki,"CODE",{});var Ti=o(Ps);il=n(Ti,"MrpcProcessor"),Ti.forEach(s),ki.forEach(s),fl=f(S),ys=a(S,"LI",{});var Ni=o(ys);Ss=a(Ni,"CODE",{});var Vi=o(Ss);pl=n(Vi,"MnliProcessor"),Vi.forEach(s),Ni.forEach(s),cl=f(S),qs=a(S,"LI",{});var Mi=o(qs);As=a(Mi,"CODE",{});var Ci=o(As);dl=n(Ci,"MnliMismatchedProcessor"),Ci.forEach(s),Mi.forEach(s),ml=f(S),Is=a(S,"LI",{});var Qi=o(Is);Ls=a(Qi,"CODE",{});var ji=o(Ls);hl=n(ji,"Sst2Processor"),ji.forEach(s),Qi.forEach(s),ul=f(S),Ds=a(S,"LI",{});var Oi=o(Ds);ks=a(Oi,"CODE",{});var Ui=o(ks);vl=n(Ui,"StsbProcessor"),Ui.forEach(s),Oi.forEach(s),_l=f(S),Ts=a(S,"LI",{});var Gi=o(Ts);Ns=a(Gi,"CODE",{});var zi=o(Ns);gl=n(zi,"QqpProcessor"),zi.forEach(s),Gi.forEach(s),$l=f(S),Vs=a(S,"LI",{});var Fi=o(Vs);Ms=a(Fi,"CODE",{});var Ri=o(Ms);El=n(Ri,"QnliProcessor"),Ri.forEach(s),Fi.forEach(s),xl=f(S),Cs=a(S,"LI",{});var Xi=o(Cs);Qs=a(Xi,"CODE",{});var Hi=o(Qs);wl=n(Hi,"RteProcessor"),Hi.forEach(s),Xi.forEach(s),bl=f(S),js=a(S,"LI",{});var Ji=o(js);Os=a(Ji,"CODE",{});var Wi=o(Os);Pl=n(Wi,"WnliProcessor"),Wi.forEach(s),Ji.forEach(s),S.forEach(s),Lr=f(e),$e=a(e,"P",{});var wa=o($e);yl=n(wa,`Additionally, the following method can be used to load values from a data file and convert them to a list of
`),Xt=a(wa,"A",{href:!0});var Bi=o(Xt);Sl=n(Bi,"InputExample"),Bi.forEach(s),ql=n(wa,"."),wa.forEach(s),Dr=f(e),Ht=a(e,"P",{});var Ki=o(Ht);Al=n(Ki,"automethod,transformers.data.processors.glue.glue_convert_examples_to_features"),Ki.forEach(s),kr=f(e),K=a(e,"H3",{class:!0});var ba=o(K);Ee=a(ba,"A",{id:!0,class:!0,href:!0});var Yi=o(Ee);Us=a(Yi,"SPAN",{});var Zi=o(Us);u(lt.$$.fragment,Zi),Zi.forEach(s),Yi.forEach(s),Il=f(ba),Gs=a(ba,"SPAN",{});var ef=o(Gs);Ll=n(ef,"Example usage"),ef.forEach(s),ba.forEach(s),Tr=f(e),xe=a(e,"P",{});var Pa=o(xe);Dl=n(Pa,"An example using these processors is given in the "),nt=a(Pa,"A",{href:!0,rel:!0});var tf=o(nt);kl=n(tf,"run_glue.py"),tf.forEach(s),Tl=n(Pa," script."),Pa.forEach(s),Nr=f(e),Y=a(e,"H2",{class:!0});var ya=o(Y);we=a(ya,"A",{id:!0,class:!0,href:!0});var sf=o(we);zs=a(sf,"SPAN",{});var rf=o(zs);u(it.$$.fragment,rf),rf.forEach(s),sf.forEach(s),Nl=f(ya),Fs=a(ya,"SPAN",{});var af=o(Fs);Vl=n(af,"XNLI"),af.forEach(s),ya.forEach(s),Vr=f(e),Z=a(e,"P",{});var hr=o(Z);ft=a(hr,"A",{href:!0,rel:!0});var of=o(ft);Ml=n(of,"The Cross-Lingual NLI Corpus (XNLI)"),of.forEach(s),Cl=n(hr,` is a benchmark that evaluates the
quality of cross-lingual text representations. XNLI is crowd-sourced dataset based on `),pt=a(hr,"A",{href:!0,rel:!0});var lf=o(pt);Rs=a(lf,"EM",{});var nf=o(Rs);Ql=n(nf,"MultiNLI"),nf.forEach(s),lf.forEach(s),jl=n(hr,`: pairs of text are labeled with textual entailment annotations for 15
different languages (including both high-resource language such as English and low-resource languages such as Swahili).`),hr.forEach(s),Mr=f(e),ct=a(e,"P",{});var Fn=o(ct);Ol=n(Fn,"It was released together with the paper "),dt=a(Fn,"A",{href:!0,rel:!0});var ff=o(dt);Ul=n(ff,"XNLI: Evaluating Cross-lingual Sentence Representations"),ff.forEach(s),Fn.forEach(s),Cr=f(e),Jt=a(e,"P",{});var pf=o(Jt);Gl=n(pf,"This library hosts the processor to load the XNLI data:"),pf.forEach(s),Qr=f(e),Wt=a(e,"UL",{});var cf=o(Wt);Xs=a(cf,"LI",{});var df=o(Xs);Hs=a(df,"CODE",{});var mf=o(Hs);zl=n(mf,"XnliProcessor"),mf.forEach(s),df.forEach(s),cf.forEach(s),jr=f(e),Bt=a(e,"P",{});var hf=o(Bt);Fl=n(hf,"Please note that since the gold labels are available on the test set, evaluation is performed on the test set."),hf.forEach(s),Or=f(e),be=a(e,"P",{});var Sa=o(be);Rl=n(Sa,"An example using these processors is given in the "),mt=a(Sa,"A",{href:!0,rel:!0});var uf=o(mt);Xl=n(uf,"run_xnli.py"),uf.forEach(s),Hl=n(Sa," script."),Sa.forEach(s),Ur=f(e),ee=a(e,"H2",{class:!0});var qa=o(ee);Pe=a(qa,"A",{id:!0,class:!0,href:!0});var vf=o(Pe);Js=a(vf,"SPAN",{});var _f=o(Js);u(ht.$$.fragment,_f),_f.forEach(s),vf.forEach(s),Jl=f(qa),Ws=a(qa,"SPAN",{});var gf=o(Ws);Wl=n(gf,"SQuAD"),gf.forEach(s),qa.forEach(s),Gr=f(e),U=a(e,"P",{});var Dt=o(U);ut=a(Dt,"A",{href:!0,rel:!0});var $f=o(ut);Bl=n($f,"The Stanford Question Answering Dataset (SQuAD)"),$f.forEach(s),Kl=n(Dt,` is a benchmark that
evaluates the performance of models on question answering. Two versions are available, v1.1 and v2.0. The first version
(v1.1) was released together with the paper `),vt=a(Dt,"A",{href:!0,rel:!0});var Ef=o(vt);Yl=n(Ef,"SQuAD: 100,000+ Questions for Machine Comprehension of Text"),Ef.forEach(s),Zl=n(Dt,". The second version (v2.0) was released alongside the paper "),_t=a(Dt,"A",{href:!0,rel:!0});var xf=o(_t);en=n(xf,`Know What You Don\u2019t
Know: Unanswerable Questions for SQuAD`),xf.forEach(s),tn=n(Dt,"."),Dt.forEach(s),zr=f(e),Kt=a(e,"P",{});var wf=o(Kt);sn=n(wf,"This library hosts a processor for each of the two versions:"),wf.forEach(s),Fr=f(e),te=a(e,"H3",{class:!0});var Aa=o(te);ye=a(Aa,"A",{id:!0,class:!0,href:!0});var bf=o(ye);Bs=a(bf,"SPAN",{});var Pf=o(Bs);u(gt.$$.fragment,Pf),Pf.forEach(s),bf.forEach(s),rn=f(Aa),Ks=a(Aa,"SPAN",{});var yf=o(Ks);an=n(yf,"Processors"),yf.forEach(s),Aa.forEach(s),Rr=f(e),Yt=a(e,"P",{});var Sf=o(Yt);on=n(Sf,"Those processors are:"),Sf.forEach(s),Xr=f(e),Se=a(e,"UL",{});var Ia=o(Se);Ys=a(Ia,"LI",{});var qf=o(Ys);Zs=a(qf,"CODE",{});var Af=o(Zs);ln=n(Af,"SquadV1Processor"),Af.forEach(s),qf.forEach(s),nn=f(Ia),er=a(Ia,"LI",{});var If=o(er);tr=a(If,"CODE",{});var Lf=o(tr);fn=n(Lf,"SquadV2Processor"),Lf.forEach(s),If.forEach(s),Ia.forEach(s),Hr=f(e),$t=a(e,"P",{});var Rn=o($t);pn=n(Rn,"They both inherit from the abstract class "),sr=a(Rn,"CODE",{});var Df=o(sr);cn=n(Df,"SquadProcessor"),Df.forEach(s),Rn.forEach(s),Jr=f(e),L=a(e,"DIV",{class:!0});var R=o(L);u(Et.$$.fragment,R),dn=f(R),rr=a(R,"P",{});var kf=o(rr);mn=n(kf,`Processor for the SQuAD data set. overridden by SquadV1Processor and SquadV2Processor, used by the version 1.1 and
version 2.0 of SQuAD, respectively.`),kf.forEach(s),hn=f(R),qe=a(R,"DIV",{class:!0});var La=o(qe);u(xt.$$.fragment,La),un=f(La),ar=a(La,"P",{});var Tf=o(ar);vn=n(Tf,"Returns the evaluation example from the data directory."),Tf.forEach(s),La.forEach(s),_n=f(R),C=a(R,"DIV",{class:!0});var Ve=o(C);u(wt.$$.fragment,Ve),gn=f(Ve),bt=a(Ve,"P",{});var Da=o(bt);$n=n(Da,"Creates a list of "),or=a(Da,"CODE",{});var Nf=o(or);En=n(Nf,"SquadExample"),Nf.forEach(s),xn=n(Da,"using a TFDS dataset."),Da.forEach(s),wn=f(Ve),lr=a(Ve,"P",{});var Vf=o(lr);bn=n(Vf,"Examples:"),Vf.forEach(s),Pn=f(Ve),u(Pt.$$.fragment,Ve),Ve.forEach(s),yn=f(R),Ae=a(R,"DIV",{class:!0});var ka=o(Ae);u(yt.$$.fragment,ka),Sn=f(ka),nr=a(ka,"P",{});var Mf=o(nr);qn=n(Mf,"Returns the training examples from the data directory."),Mf.forEach(s),ka.forEach(s),R.forEach(s),Wr=f(e),Ie=a(e,"P",{});var Ta=o(Ie);An=n(Ta,`Additionally, the following method can be used to convert SQuAD examples into
`),ir=a(Ta,"CODE",{});var Cf=o(ir);In=n(Cf,"SquadFeatures"),Cf.forEach(s),Ln=n(Ta," that can be used as model inputs."),Ta.forEach(s),Br=f(e),Zt=a(e,"P",{});var Qf=o(Zt);Dn=n(Qf,"automethod,transformers.data.processors.squad.squad_convert_examples_to_features"),Qf.forEach(s),Kr=f(e),Le=a(e,"P",{});var Na=o(Le);kn=n(Na,`These processors as well as the aforementionned method can be used with files containing the data as well as with the
`),fr=a(Na,"EM",{});var jf=o(fr);Tn=n(jf,"tensorflow_datasets"),jf.forEach(s),Nn=n(Na," package. Examples are given below."),Na.forEach(s),Yr=f(e),se=a(e,"H3",{class:!0});var Va=o(se);De=a(Va,"A",{id:!0,class:!0,href:!0});var Of=o(De);pr=a(Of,"SPAN",{});var Uf=o(pr);u(St.$$.fragment,Uf),Uf.forEach(s),Of.forEach(s),Vn=f(Va),cr=a(Va,"SPAN",{});var Gf=o(cr);Mn=n(Gf,"Example usage"),Gf.forEach(s),Va.forEach(s),Zr=f(e),es=a(e,"P",{});var zf=o(es);Cn=n(zf,"Here is an example using the processors as well as the conversion method using data files:"),zf.forEach(s),ea=f(e),u(qt.$$.fragment,e),ta=f(e),ke=a(e,"P",{});var Ma=o(ke);Qn=n(Ma,"Using "),dr=a(Ma,"EM",{});var Ff=o(dr);jn=n(Ff,"tensorflow_datasets"),Ff.forEach(s),On=n(Ma," is as easy as using a data file:"),Ma.forEach(s),sa=f(e),u(At.$$.fragment,e),ra=f(e),Te=a(e,"P",{});var Ca=o(Te);Un=n(Ca,"Another example using these processors is given in the "),It=a(Ca,"A",{href:!0,rel:!0});var Rf=o(It);Gn=n(Rf,"run_squad.py"),Rf.forEach(s),zn=n(Ca," script."),Ca.forEach(s),this.h()},h(){c(m,"name","hf:doc:metadata"),c(m,"content",JSON.stringify(ep)),c(P,"id","processors"),c(P,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P,"href","#processors"),c(E,"class","relative group"),c(kt,"href","../model_doc/wav2vec2"),c(Tt,"href","../model_doc/clip"),c(oe,"id","transformers.ProcessorMixin"),c(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oe,"href","#transformers.ProcessorMixin"),c(J,"class","relative group"),c(G,"class","docstring"),c(Mt,"href","/docs/transformers/master/en/main_classes/processors#transformers.ProcessorMixin.from_pretrained"),c(z,"class","docstring"),c(V,"class","docstring"),c(ie,"id","transformers.DataProcessor"),c(ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ie,"href","#transformers.DataProcessor"),c(W,"class","relative group"),c(Ct,"href","/docs/transformers/master/en/main_classes/processors#transformers.DataProcessor"),c(Qt,"href","/docs/transformers/master/en/main_classes/processors#transformers.InputExample"),c(jt,"href","/docs/transformers/master/en/main_classes/processors#transformers.InputExample"),c(Ot,"href","/docs/transformers/master/en/main_classes/processors#transformers.InputFeatures"),c(Ut,"href","/docs/transformers/master/en/main_classes/processors#transformers.InputExample"),c(fe,"class","docstring"),c(pe,"class","docstring"),c(ce,"class","docstring"),c(Gt,"href","/docs/transformers/master/en/main_classes/processors#transformers.InputExample"),c(de,"class","docstring"),c(zt,"href","/docs/transformers/master/en/main_classes/processors#transformers.InputExample"),c(me,"class","docstring"),c(he,"class","docstring"),c(b,"class","docstring"),c(ue,"class","docstring"),c(j,"class","docstring"),c(ve,"class","docstring"),c(O,"class","docstring"),c(_e,"id","glue"),c(_e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_e,"href","#glue"),c(B,"class","relative group"),c(at,"href","https://gluebenchmark.com/"),c(at,"rel","nofollow"),c(ot,"href","https://openreview.net/pdf?id=rJ4km2R5t7"),c(ot,"rel","nofollow"),c(Xt,"href","/docs/transformers/master/en/main_classes/processors#transformers.InputExample"),c(Ee,"id","example-usage"),c(Ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ee,"href","#example-usage"),c(K,"class","relative group"),c(nt,"href","https://github.com/huggingface/transformers/tree/master/examples/legacy/text-classification/run_glue.py"),c(nt,"rel","nofollow"),c(we,"id","xnli"),c(we,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(we,"href","#xnli"),c(Y,"class","relative group"),c(ft,"href","https://www.nyu.edu/projects/bowman/xnli/"),c(ft,"rel","nofollow"),c(pt,"href","http://www.nyu.edu/projects/bowman/multinli/"),c(pt,"rel","nofollow"),c(dt,"href","https://arxiv.org/abs/1809.05053"),c(dt,"rel","nofollow"),c(mt,"href","https://github.com/huggingface/transformers/tree/master/examples/legacy/text-classification/run_xnli.py"),c(mt,"rel","nofollow"),c(Pe,"id","squad"),c(Pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pe,"href","#squad"),c(ee,"class","relative group"),c(ut,"href","https://rajpurkar.github.io/SQuAD-explorer//"),c(ut,"rel","nofollow"),c(vt,"href","https://arxiv.org/abs/1606.05250"),c(vt,"rel","nofollow"),c(_t,"href","https://arxiv.org/abs/1806.03822"),c(_t,"rel","nofollow"),c(ye,"id","transformers.data.processors.squad.SquadProcessor"),c(ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ye,"href","#transformers.data.processors.squad.SquadProcessor"),c(te,"class","relative group"),c(qe,"class","docstring"),c(C,"class","docstring"),c(Ae,"class","docstring"),c(L,"class","docstring"),c(De,"id","example-usage"),c(De,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(De,"href","#example-usage"),c(se,"class","relative group"),c(It,"href","https://github.com/huggingface/transformers/tree/master/examples/legacy/question-answering/run_squad.py"),c(It,"rel","nofollow")},m(e,p){t(document.head,m),d(e,D,p),d(e,E,p),t(E,P),t(P,T),v(y,T,null),t(E,Q),t(E,N),t(N,I),d(e,x,p),d(e,M,p),t(M,X),d(e,ur,p),d(e,ae,p),t(ae,H),t(H,Qa),t(H,kt),t(kt,ja),t(H,Oa),t(H,Tt),t(Tt,Ua),t(H,Ga),t(ae,za),t(ae,ls),t(ls,Fa),d(e,vr,p),d(e,J,p),t(J,oe),t(oe,ns),v(Ce,ns,null),t(J,Ra),t(J,is),t(is,Xa),d(e,_r,p),d(e,Nt,p),t(Nt,Ha),d(e,gr,p),d(e,Vt,p),t(Vt,Ja),d(e,$r,p),d(e,V,p),v(Qe,V,null),t(V,Wa),t(V,fs),t(fs,Ba),t(V,Ka),t(V,G),v(je,G,null),t(G,Ya),t(G,ps),t(ps,Za),t(G,eo),v(le,G,null),t(V,to),t(V,z),v(Oe,z,null),t(z,so),t(z,Ue),t(Ue,ro),t(Ue,Mt),t(Mt,ao),t(Ue,oo),t(z,lo),v(ne,z,null),d(e,Er,p),d(e,W,p),t(W,ie),t(ie,cs),v(Ge,cs,null),t(W,no),t(W,ds),t(ds,io),d(e,xr,p),d(e,k,p),t(k,fo),t(k,Ct),t(Ct,po),t(k,co),t(k,Qt),t(Qt,mo),t(k,ho),t(k,jt),t(jt,uo),t(k,vo),t(k,Ot),t(Ot,_o),t(k,go),d(e,wr,p),d(e,b,p),v(ze,b,null),t(b,$o),t(b,ms),t(ms,Eo),t(b,xo),t(b,fe),v(Fe,fe,null),t(fe,wo),t(fe,Re),t(Re,bo),t(Re,Ut),t(Ut,Po),t(Re,yo),t(b,So),t(b,pe),v(Xe,pe,null),t(pe,qo),t(pe,hs),t(hs,Ao),t(b,Io),t(b,ce),v(He,ce,null),t(ce,Lo),t(ce,us),t(us,Do),t(b,ko),t(b,de),v(Je,de,null),t(de,To),t(de,We),t(We,No),t(We,Gt),t(Gt,Vo),t(We,Mo),t(b,Co),t(b,me),v(Be,me,null),t(me,Qo),t(me,Ke),t(Ke,jo),t(Ke,zt),t(zt,Oo),t(Ke,Uo),t(b,Go),t(b,he),v(Ye,he,null),t(he,zo),t(he,vs),t(vs,Fo),d(e,br,p),d(e,j,p),v(Ze,j,null),t(j,Ro),t(j,_s),t(_s,Xo),t(j,Ho),t(j,ue),v(et,ue,null),t(ue,Jo),t(ue,gs),t(gs,Wo),d(e,Pr,p),d(e,O,p),v(tt,O,null),t(O,Bo),t(O,$s),t($s,Ko),t(O,Yo),t(O,ve),v(st,ve,null),t(ve,Zo),t(ve,Es),t(Es,el),d(e,yr,p),d(e,B,p),t(B,_e),t(_e,xs),v(rt,xs,null),t(B,tl),t(B,ws),t(ws,sl),d(e,Sr,p),d(e,ge,p),t(ge,at),t(at,rl),t(ge,al),t(ge,ot),t(ot,ol),d(e,qr,p),d(e,Ft,p),t(Ft,ll),d(e,Ar,p),d(e,Rt,p),t(Rt,nl),d(e,Ir,p),d(e,w,p),t(w,bs),t(bs,Ps),t(Ps,il),t(w,fl),t(w,ys),t(ys,Ss),t(Ss,pl),t(w,cl),t(w,qs),t(qs,As),t(As,dl),t(w,ml),t(w,Is),t(Is,Ls),t(Ls,hl),t(w,ul),t(w,Ds),t(Ds,ks),t(ks,vl),t(w,_l),t(w,Ts),t(Ts,Ns),t(Ns,gl),t(w,$l),t(w,Vs),t(Vs,Ms),t(Ms,El),t(w,xl),t(w,Cs),t(Cs,Qs),t(Qs,wl),t(w,bl),t(w,js),t(js,Os),t(Os,Pl),d(e,Lr,p),d(e,$e,p),t($e,yl),t($e,Xt),t(Xt,Sl),t($e,ql),d(e,Dr,p),d(e,Ht,p),t(Ht,Al),d(e,kr,p),d(e,K,p),t(K,Ee),t(Ee,Us),v(lt,Us,null),t(K,Il),t(K,Gs),t(Gs,Ll),d(e,Tr,p),d(e,xe,p),t(xe,Dl),t(xe,nt),t(nt,kl),t(xe,Tl),d(e,Nr,p),d(e,Y,p),t(Y,we),t(we,zs),v(it,zs,null),t(Y,Nl),t(Y,Fs),t(Fs,Vl),d(e,Vr,p),d(e,Z,p),t(Z,ft),t(ft,Ml),t(Z,Cl),t(Z,pt),t(pt,Rs),t(Rs,Ql),t(Z,jl),d(e,Mr,p),d(e,ct,p),t(ct,Ol),t(ct,dt),t(dt,Ul),d(e,Cr,p),d(e,Jt,p),t(Jt,Gl),d(e,Qr,p),d(e,Wt,p),t(Wt,Xs),t(Xs,Hs),t(Hs,zl),d(e,jr,p),d(e,Bt,p),t(Bt,Fl),d(e,Or,p),d(e,be,p),t(be,Rl),t(be,mt),t(mt,Xl),t(be,Hl),d(e,Ur,p),d(e,ee,p),t(ee,Pe),t(Pe,Js),v(ht,Js,null),t(ee,Jl),t(ee,Ws),t(Ws,Wl),d(e,Gr,p),d(e,U,p),t(U,ut),t(ut,Bl),t(U,Kl),t(U,vt),t(vt,Yl),t(U,Zl),t(U,_t),t(_t,en),t(U,tn),d(e,zr,p),d(e,Kt,p),t(Kt,sn),d(e,Fr,p),d(e,te,p),t(te,ye),t(ye,Bs),v(gt,Bs,null),t(te,rn),t(te,Ks),t(Ks,an),d(e,Rr,p),d(e,Yt,p),t(Yt,on),d(e,Xr,p),d(e,Se,p),t(Se,Ys),t(Ys,Zs),t(Zs,ln),t(Se,nn),t(Se,er),t(er,tr),t(tr,fn),d(e,Hr,p),d(e,$t,p),t($t,pn),t($t,sr),t(sr,cn),d(e,Jr,p),d(e,L,p),v(Et,L,null),t(L,dn),t(L,rr),t(rr,mn),t(L,hn),t(L,qe),v(xt,qe,null),t(qe,un),t(qe,ar),t(ar,vn),t(L,_n),t(L,C),v(wt,C,null),t(C,gn),t(C,bt),t(bt,$n),t(bt,or),t(or,En),t(bt,xn),t(C,wn),t(C,lr),t(lr,bn),t(C,Pn),v(Pt,C,null),t(L,yn),t(L,Ae),v(yt,Ae,null),t(Ae,Sn),t(Ae,nr),t(nr,qn),d(e,Wr,p),d(e,Ie,p),t(Ie,An),t(Ie,ir),t(ir,In),t(Ie,Ln),d(e,Br,p),d(e,Zt,p),t(Zt,Dn),d(e,Kr,p),d(e,Le,p),t(Le,kn),t(Le,fr),t(fr,Tn),t(Le,Nn),d(e,Yr,p),d(e,se,p),t(se,De),t(De,pr),v(St,pr,null),t(se,Vn),t(se,cr),t(cr,Mn),d(e,Zr,p),d(e,es,p),t(es,Cn),d(e,ea,p),v(qt,e,p),d(e,ta,p),d(e,ke,p),t(ke,Qn),t(ke,dr),t(dr,jn),t(ke,On),d(e,sa,p),v(At,e,p),d(e,ra,p),d(e,Te,p),t(Te,Un),t(Te,It),t(It,Gn),t(Te,zn),aa=!0},p(e,[p]){const Lt={};p&2&&(Lt.$$scope={dirty:p,ctx:e}),le.$set(Lt);const mr={};p&2&&(mr.$$scope={dirty:p,ctx:e}),ne.$set(mr)},i(e){aa||(_(y.$$.fragment,e),_(Ce.$$.fragment,e),_(Qe.$$.fragment,e),_(je.$$.fragment,e),_(le.$$.fragment,e),_(Oe.$$.fragment,e),_(ne.$$.fragment,e),_(Ge.$$.fragment,e),_(ze.$$.fragment,e),_(Fe.$$.fragment,e),_(Xe.$$.fragment,e),_(He.$$.fragment,e),_(Je.$$.fragment,e),_(Be.$$.fragment,e),_(Ye.$$.fragment,e),_(Ze.$$.fragment,e),_(et.$$.fragment,e),_(tt.$$.fragment,e),_(st.$$.fragment,e),_(rt.$$.fragment,e),_(lt.$$.fragment,e),_(it.$$.fragment,e),_(ht.$$.fragment,e),_(gt.$$.fragment,e),_(Et.$$.fragment,e),_(xt.$$.fragment,e),_(wt.$$.fragment,e),_(Pt.$$.fragment,e),_(yt.$$.fragment,e),_(St.$$.fragment,e),_(qt.$$.fragment,e),_(At.$$.fragment,e),aa=!0)},o(e){g(y.$$.fragment,e),g(Ce.$$.fragment,e),g(Qe.$$.fragment,e),g(je.$$.fragment,e),g(le.$$.fragment,e),g(Oe.$$.fragment,e),g(ne.$$.fragment,e),g(Ge.$$.fragment,e),g(ze.$$.fragment,e),g(Fe.$$.fragment,e),g(Xe.$$.fragment,e),g(He.$$.fragment,e),g(Je.$$.fragment,e),g(Be.$$.fragment,e),g(Ye.$$.fragment,e),g(Ze.$$.fragment,e),g(et.$$.fragment,e),g(tt.$$.fragment,e),g(st.$$.fragment,e),g(rt.$$.fragment,e),g(lt.$$.fragment,e),g(it.$$.fragment,e),g(ht.$$.fragment,e),g(gt.$$.fragment,e),g(Et.$$.fragment,e),g(xt.$$.fragment,e),g(wt.$$.fragment,e),g(Pt.$$.fragment,e),g(yt.$$.fragment,e),g(St.$$.fragment,e),g(qt.$$.fragment,e),g(At.$$.fragment,e),aa=!1},d(e){s(m),e&&s(D),e&&s(E),$(y),e&&s(x),e&&s(M),e&&s(ur),e&&s(ae),e&&s(vr),e&&s(J),$(Ce),e&&s(_r),e&&s(Nt),e&&s(gr),e&&s(Vt),e&&s($r),e&&s(V),$(Qe),$(je),$(le),$(Oe),$(ne),e&&s(Er),e&&s(W),$(Ge),e&&s(xr),e&&s(k),e&&s(wr),e&&s(b),$(ze),$(Fe),$(Xe),$(He),$(Je),$(Be),$(Ye),e&&s(br),e&&s(j),$(Ze),$(et),e&&s(Pr),e&&s(O),$(tt),$(st),e&&s(yr),e&&s(B),$(rt),e&&s(Sr),e&&s(ge),e&&s(qr),e&&s(Ft),e&&s(Ar),e&&s(Rt),e&&s(Ir),e&&s(w),e&&s(Lr),e&&s($e),e&&s(Dr),e&&s(Ht),e&&s(kr),e&&s(K),$(lt),e&&s(Tr),e&&s(xe),e&&s(Nr),e&&s(Y),$(it),e&&s(Vr),e&&s(Z),e&&s(Mr),e&&s(ct),e&&s(Cr),e&&s(Jt),e&&s(Qr),e&&s(Wt),e&&s(jr),e&&s(Bt),e&&s(Or),e&&s(be),e&&s(Ur),e&&s(ee),$(ht),e&&s(Gr),e&&s(U),e&&s(zr),e&&s(Kt),e&&s(Fr),e&&s(te),$(gt),e&&s(Rr),e&&s(Yt),e&&s(Xr),e&&s(Se),e&&s(Hr),e&&s($t),e&&s(Jr),e&&s(L),$(Et),$(xt),$(wt),$(Pt),$(yt),e&&s(Wr),e&&s(Ie),e&&s(Br),e&&s(Zt),e&&s(Kr),e&&s(Le),e&&s(Yr),e&&s(se),$(St),e&&s(Zr),e&&s(es),e&&s(ea),$(qt,e),e&&s(ta),e&&s(ke),e&&s(sa),$(At,e),e&&s(ra),e&&s(Te)}}}const ep={local:"processors",sections:[{local:"transformers.ProcessorMixin",title:"Multi-modal processors"},{local:"transformers.DataProcessor",title:"Deprecated processors"},{local:"glue",sections:[{local:"example-usage",title:"Example usage"}],title:"GLUE"},{local:"xnli",title:"XNLI"},{local:"squad",sections:[{local:"transformers.data.processors.squad.SquadProcessor",title:"Processors"},{local:"example-usage",title:"Example usage"}],title:"SQuAD"}],title:"Processors"};function tp(Me,m,D){let{fw:E}=m;return Me.$$set=P=>{"fw"in P&&D(0,E=P.fw)},[E]}class ip extends Hf{constructor(m){super();Jf(this,m,tp,Zf,Wf,{fw:0})}}export{ip as default,ep as metadata};
