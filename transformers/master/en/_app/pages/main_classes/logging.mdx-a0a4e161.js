import{S as Zl,i as en,s as tn,e as l,k as g,w as p,t as o,M as rn,c as n,d as r,m as f,a,x as u,h as s,b as c,F as t,g as m,y as h,q as v,o as _,B as b}from"../../chunks/vendor-4833417e.js";import{T as on}from"../../chunks/Tip-fffd6df1.js";import{D as S}from"../../chunks/Docstring-7b52c3d4.js";import{C as It}from"../../chunks/CodeBlock-6a3d1b46.js";import{I as Ks}from"../../chunks/IconCopyLink-4b81c553.js";import"../../chunks/CopyButton-dacfbfaf.js";function sn(Nt){let y,Y,w,d,A,G,ee,te,Le,U,z,Fe,W,L,re,oe,Pe,F,Ee,P,ke,$e,T,ye,E,J,se,le,xe,ne,K,Ve,M,Ge;return{c(){y=l("p"),Y=o("\u{1F917} Transformers has following logging levels:"),w=g(),d=l("ul"),A=l("li"),G=o("50: "),ee=l("code"),te=o("transformers.logging.CRITICAL"),Le=o(" or "),U=l("code"),z=o("transformers.logging.FATAL"),Fe=g(),W=l("li"),L=o("40: "),re=l("code"),oe=o("transformers.logging.ERROR"),Pe=g(),F=l("li"),Ee=o("30: "),P=l("code"),ke=o("transformers.logging.WARNING"),$e=o(" or "),T=l("code"),ye=o("transformers.logging.WARN"),E=g(),J=l("li"),se=o("20: "),le=l("code"),xe=o("transformers.logging.INFO"),ne=g(),K=l("li"),Ve=o("10: "),M=l("code"),Ge=o("transformers.logging.DEBUG")},l(O){y=n(O,"P",{});var k=a(y);Y=s(k,"\u{1F917} Transformers has following logging levels:"),k.forEach(r),w=f(O),d=n(O,"UL",{});var I=a(d);A=n(I,"LI",{});var ae=a(A);G=s(ae,"50: "),ee=n(ae,"CODE",{});var we=a(ee);te=s(we,"transformers.logging.CRITICAL"),we.forEach(r),Le=s(ae," or "),U=n(ae,"CODE",{});var dt=a(U);z=s(dt,"transformers.logging.FATAL"),dt.forEach(r),ae.forEach(r),Fe=f(I),W=n(I,"LI",{});var We=a(W);L=s(We,"40: "),re=n(We,"CODE",{});var Re=a(re);oe=s(Re,"transformers.logging.ERROR"),Re.forEach(r),We.forEach(r),Pe=f(I),F=n(I,"LI",{});var ie=a(F);Ee=s(ie,"30: "),P=n(ie,"CODE",{});var pt=a(P);ke=s(pt,"transformers.logging.WARNING"),pt.forEach(r),$e=s(ie," or "),T=n(ie,"CODE",{});var Me=a(T);ye=s(Me,"transformers.logging.WARN"),Me.forEach(r),ie.forEach(r),E=f(I),J=n(I,"LI",{});var B=a(J);se=s(B,"20: "),le=n(B,"CODE",{});var Be=a(le);xe=s(Be,"transformers.logging.INFO"),Be.forEach(r),B.forEach(r),ne=f(I),K=n(I,"LI",{});var $=a(K);Ve=s($,"10: "),M=n($,"CODE",{});var ut=a(M);Ge=s(ut,"transformers.logging.DEBUG"),ut.forEach(r),$.forEach(r),I.forEach(r)},m(O,k){m(O,y,k),t(y,Y),m(O,w,k),m(O,d,k),t(d,A),t(A,G),t(A,ee),t(ee,te),t(A,Le),t(A,U),t(U,z),t(d,Fe),t(d,W),t(W,L),t(W,re),t(re,oe),t(d,Pe),t(d,F),t(F,Ee),t(F,P),t(P,ke),t(F,$e),t(F,T),t(T,ye),t(d,E),t(d,J),t(J,se),t(J,le),t(le,xe),t(d,ne),t(d,K),t(K,Ve),t(K,M),t(M,Ge)},d(O){O&&r(y),O&&r(w),O&&r(d)}}}function ln(Nt){let y,Y,w,d,A,G,ee,te,Le,U,z,Fe,W,L,re,oe,Pe,F,Ee,P,ke,$e,T,ye,E,J,se,le,xe,ne,K,Ve,M,Ge,O,k,I,ae,we,dt,We,Re,ie,pt,Me,B,Be,$,ut,Dt,ro,oo,Tt,so,lo,Ct,no,ao,St,io,go,ur,qe,hr,Oe,fo,Lt,mo,co,vr,je,_r,R,po,Ft,uo,ho,Pt,vo,_o,kt,bo,Eo,xt,$o,yo,Vt,wo,Ro,br,He,Er,Q,Oo,ht,Ao,Io,vt,No,Do,$r,N,Ae,Gt,To,Co,Wt,So,Lo,Fo,_t,Mt,Po,ko,xo,Ie,Bt,Vo,Go,qt,Wo,Mo,Bo,bt,jt,qo,jo,Ho,Et,Ht,Yo,Uo,yr,x,zo,Yt,Jo,Ko,$t,Qo,Xo,yt,Zo,es,wr,ge,Ne,Ut,Ye,ts,zt,rs,Rr,fe,Ue,os,ze,ss,Jt,ls,ns,Or,me,Je,as,Ke,is,Kt,gs,fs,Ar,ce,Qe,ms,Xe,cs,Qt,ds,ps,Ir,de,Ze,us,et,hs,Xt,vs,_s,Nr,pe,De,Zt,tt,bs,er,Es,Dr,q,rt,$s,tr,ys,ws,Te,Tr,ue,ot,Rs,rr,Os,Cr,j,st,As,or,Is,Ns,sr,Ds,Sr,he,lt,Ts,lr,Cs,Lr,ve,nt,Ss,nr,Ls,Fr,C,at,Fs,ar,Ps,ks,it,xs,ir,Vs,Pr,H,gt,Gs,gr,Ws,Ms,fr,Bs,kr,_e,ft,qs,mr,js,xr,be,mt,Hs,cr,Ys,Vr;return G=new Ks({}),T=new It({props:{code:`import transformers

transformers.logging.set_verbosity_info()`,highlighted:`<span class="hljs-keyword">import</span> transformers

transformers.logging.set_verbosity_info()`}}),B=new It({props:{code:"TRANSFORMERS_VERBOSITY=error ./myprogram.py",highlighted:"TRANSFORMERS_VERBOSITY=error ./myprogram.py"}}),qe=new It({props:{code:"TRANSFORMERS_NO_ADVISORY_WARNINGS=1 ./myprogram.py",highlighted:"TRANSFORMERS_NO_ADVISORY_WARNINGS=1 ./myprogram.py"}}),je=new It({props:{code:`from transformers.utils import logging

logging.set_verbosity_info()
logger = logging.get_logger(__name__)
logger.info("INFO")
logger.warning("WARN")`,highlighted:`<span class="hljs-keyword">from</span> transformers.utils <span class="hljs-keyword">import</span> logging

logging.set_verbosity_info()
logger = logging.get_logger(__name__)
logger.info(<span class="hljs-string">&quot;INFO&quot;</span>)
logger.warning(<span class="hljs-string">&quot;WARN&quot;</span>)`}}),He=new It({props:{code:`from transformers.utils import logging

if __name__ == "__main__":
    logging.set_verbosity_info()
    # leave it empy or use a string
    logger = logging.get_logger()
    logger.info("INFO")
    logger.warning("WARN")`,highlighted:`<span class="hljs-keyword">from</span> transformers.utils <span class="hljs-keyword">import</span> logging

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:
    logging.set_verbosity_info()
    <span class="hljs-comment"># leave it empy or use a string</span>
    logger = logging.get_logger()
    logger.info(<span class="hljs-string">&quot;INFO&quot;</span>)
    logger.warning(<span class="hljs-string">&quot;WARN&quot;</span>)`}}),Ye=new Ks({}),Ue=new S({props:{name:"transformers.utils.logging.set_verbosity_error",anchor:"transformers.utils.logging.set_verbosity_error",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/utils/logging.py#L184"}}),Je=new S({props:{name:"transformers.utils.logging.set_verbosity_warning",anchor:"transformers.utils.logging.set_verbosity_warning",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/utils/logging.py#L174"}}),Qe=new S({props:{name:"transformers.utils.logging.set_verbosity_info",anchor:"transformers.utils.logging.set_verbosity_info",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/utils/logging.py#L169"}}),Ze=new S({props:{name:"transformers.utils.logging.set_verbosity_debug",anchor:"transformers.utils.logging.set_verbosity_debug",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/utils/logging.py#L179"}}),tt=new Ks({}),rt=new S({props:{name:"transformers.utils.logging.get_verbosity",anchor:"transformers.utils.logging.get_verbosity",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/utils/logging.py#L127",returnDescription:`
<p>The logging level.</p>
`,returnType:`
<p><code>int</code></p>
`}}),Te=new on({props:{$$slots:{default:[sn]},$$scope:{ctx:Nt}}}),ot=new S({props:{name:"transformers.utils.logging.set_verbosity",anchor:"transformers.utils.logging.set_verbosity",parameters:[{name:"verbosity",val:": int"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/utils/logging.py#L150",parametersDescription:[{anchor:"transformers.utils.logging.set_verbosity.verbosity",description:`<strong>verbosity</strong> (<code>int</code>) &#x2014;
Logging level, e.g., one of:</p>
<ul>
<li><code>transformers.logging.CRITICAL</code> or <code>transformers.logging.FATAL</code></li>
<li><code>transformers.logging.ERROR</code></li>
<li><code>transformers.logging.WARNING</code> or <code>transformers.logging.WARN</code></li>
<li><code>transformers.logging.INFO</code></li>
<li><code>transformers.logging.DEBUG</code></li>
</ul>`,name:"verbosity"}]}}),st=new S({props:{name:"transformers.utils.logging.get_logger",anchor:"transformers.utils.logging.get_logger",parameters:[{name:"name",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/utils/logging.py#L113"}}),lt=new S({props:{name:"transformers.utils.logging.enable_default_handler",anchor:"transformers.utils.logging.enable_default_handler",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/utils/logging.py#L198"}}),nt=new S({props:{name:"transformers.utils.logging.disable_default_handler",anchor:"transformers.utils.logging.disable_default_handler",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/utils/logging.py#L189"}}),at=new S({props:{name:"transformers.utils.logging.enable_explicit_format",anchor:"transformers.utils.logging.enable_explicit_format",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/utils/logging.py#L244"}}),it=new It({props:{code:"    [LEVELNAME|FILENAME|LINE NUMBER] TIME >> MESSAGE",highlighted:'    [LEVELNAME|<span class="hljs-type">FILENAME</span>|<span class="hljs-type">LINE</span> NUMBER] TIME &gt;&gt; MESSAGE'}}),gt=new S({props:{name:"transformers.utils.logging.reset_format",anchor:"transformers.utils.logging.reset_format",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/utils/logging.py#L259"}}),ft=new S({props:{name:"transformers.utils.logging.enable_progress_bar",anchor:"transformers.utils.logging.enable_progress_bar",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/utils/logging.py#L335"}}),mt=new S({props:{name:"transformers.utils.logging.disable_progress_bar",anchor:"transformers.utils.logging.disable_progress_bar",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/utils/logging.py#L341"}}),{c(){y=l("meta"),Y=g(),w=l("h1"),d=l("a"),A=l("span"),p(G.$$.fragment),ee=g(),te=l("span"),Le=o("Logging"),U=g(),z=l("p"),Fe=o("\u{1F917} Transformers has a centralized logging system, so that you can setup the verbosity of the library easily."),W=g(),L=l("p"),re=o("Currently the default verbosity of the library is "),oe=l("code"),Pe=o("WARNING"),F=o("."),Ee=g(),P=l("p"),ke=o(`To change the level of verbosity, just use one of the direct setters. For instance, here is how to change the verbosity
to the INFO level.`),$e=g(),p(T.$$.fragment),ye=g(),E=l("p"),J=o("You can also use the environment variable "),se=l("code"),le=o("TRANSFORMERS_VERBOSITY"),xe=o(` to override the default verbosity. You can set it
to one of the following: `),ne=l("code"),K=o("debug"),Ve=o(", "),M=l("code"),Ge=o("info"),O=o(", "),k=l("code"),I=o("warning"),ae=o(", "),we=l("code"),dt=o("error"),We=o(", "),Re=l("code"),ie=o("critical"),pt=o(". For example:"),Me=g(),p(B.$$.fragment),Be=g(),$=l("p"),ut=o("Additionally, some "),Dt=l("code"),ro=o("warnings"),oo=o(` can be disabled by setting the environment variable
`),Tt=l("code"),so=o("TRANSFORMERS_NO_ADVISORY_WARNINGS"),lo=o(" to a true value, like "),Ct=l("em"),no=o("1"),ao=o(`. This will disable any warning that is logged using
`),St=l("code"),io=o("logger.warning_advice()"),go=o(" For example:"),ur=g(),p(qe.$$.fragment),hr=g(),Oe=l("p"),fo=o("Here is an example of how to use "),Lt=l("code"),mo=o("logging"),co=o(" in a module:"),vr=g(),p(je.$$.fragment),_r=g(),R=l("p"),po=o("Above, a "),Ft=l("code"),uo=o("logger"),ho=o(" instance is created from "),Pt=l("code"),vo=o("logging.get_logger(__name__)"),_o=o(". If you want to use "),kt=l("code"),bo=o("logging"),Eo=o(" in a script, you shouldn\u2019t pass "),xt=l("code"),$o=o("__name__"),yo=o(" to "),Vt=l("code"),wo=o("logging.get_logger"),Ro=o(". For example:"),br=g(),p(He.$$.fragment),Er=g(),Q=l("p"),Oo=o(`All the methods of this logging module are documented below, the main ones are
`),ht=l("a"),Ao=o("logging.get_verbosity()"),Io=o(` to get the current level of verbosity in the logger and
`),vt=l("a"),No=o("logging.set_verbosity()"),Do=o(` to set the verbosity to the level of your choice. In order (from the least
verbose to the most verbose), those levels (with their corresponding int values in parenthesis) are:`),$r=g(),N=l("ul"),Ae=l("li"),Gt=l("code"),To=o("transformers.logging.CRITICAL"),Co=o(" or "),Wt=l("code"),So=o("transformers.logging.FATAL"),Lo=o(` (int value, 50): only report the most
critical errors.`),Fo=g(),_t=l("li"),Mt=l("code"),Po=o("transformers.logging.ERROR"),ko=o(" (int value, 40): only report errors."),xo=g(),Ie=l("li"),Bt=l("code"),Vo=o("transformers.logging.WARNING"),Go=o(" or "),qt=l("code"),Wo=o("transformers.logging.WARN"),Mo=o(` (int value, 30): only reports error and
warnings. This the default level used by the library.`),Bo=g(),bt=l("li"),jt=l("code"),qo=o("transformers.logging.INFO"),jo=o(" (int value, 20): reports error, warnings and basic information."),Ho=g(),Et=l("li"),Ht=l("code"),Yo=o("transformers.logging.DEBUG"),Uo=o(" (int value, 10): report all information."),yr=g(),x=l("p"),zo=o("By default, "),Yt=l("code"),Jo=o("tqdm"),Ko=o(" progress bars will be displayed during model download. "),$t=l("a"),Qo=o("logging.disable_progress_bar()"),Xo=o(" and "),yt=l("a"),Zo=o("logging.enable_progress_bar()"),es=o(" can be used to suppress or unsuppress this behavior."),wr=g(),ge=l("h2"),Ne=l("a"),Ut=l("span"),p(Ye.$$.fragment),ts=g(),zt=l("span"),rs=o("Base setters"),Rr=g(),fe=l("div"),p(Ue.$$.fragment),os=g(),ze=l("p"),ss=o("Set the verbosity to the "),Jt=l("code"),ls=o("ERROR"),ns=o(" level."),Or=g(),me=l("div"),p(Je.$$.fragment),as=g(),Ke=l("p"),is=o("Set the verbosity to the "),Kt=l("code"),gs=o("WARNING"),fs=o(" level."),Ar=g(),ce=l("div"),p(Qe.$$.fragment),ms=g(),Xe=l("p"),cs=o("Set the verbosity to the "),Qt=l("code"),ds=o("INFO"),ps=o(" level."),Ir=g(),de=l("div"),p(Ze.$$.fragment),us=g(),et=l("p"),hs=o("Set the verbosity to the "),Xt=l("code"),vs=o("DEBUG"),_s=o(" level."),Nr=g(),pe=l("h2"),De=l("a"),Zt=l("span"),p(tt.$$.fragment),bs=g(),er=l("span"),Es=o("Other functions"),Dr=g(),q=l("div"),p(rt.$$.fragment),$s=g(),tr=l("p"),ys=o("Return the current level for the \u{1F917} Transformers\u2019s root logger as an int."),ws=g(),p(Te.$$.fragment),Tr=g(),ue=l("div"),p(ot.$$.fragment),Rs=g(),rr=l("p"),Os=o("Set the verbosity level for the \u{1F917} Transformers\u2019s root logger."),Cr=g(),j=l("div"),p(st.$$.fragment),As=g(),or=l("p"),Is=o("Return a logger with the specified name."),Ns=g(),sr=l("p"),Ds=o("This function is not supposed to be directly accessed unless you are writing a custom transformers module."),Sr=g(),he=l("div"),p(lt.$$.fragment),Ts=g(),lr=l("p"),Cs=o("Enable the default handler of the HuggingFace Transformers\u2019s root logger."),Lr=g(),ve=l("div"),p(nt.$$.fragment),Ss=g(),nr=l("p"),Ls=o("Disable the default handler of the HuggingFace Transformers\u2019s root logger."),Fr=g(),C=l("div"),p(at.$$.fragment),Fs=g(),ar=l("p"),Ps=o("Enable explicit formatting for every HuggingFace Transformers\u2019s logger. The explicit formatter is as follows:"),ks=g(),p(it.$$.fragment),xs=g(),ir=l("p"),Vs=o("All handlers currently bound to the root logger are affected by this method."),Pr=g(),H=l("div"),p(gt.$$.fragment),Gs=g(),gr=l("p"),Ws=o("Resets the formatting for HuggingFace Transformers\u2019s loggers."),Ms=g(),fr=l("p"),Bs=o("All handlers currently bound to the root logger are affected by this method."),kr=g(),_e=l("div"),p(ft.$$.fragment),qs=g(),mr=l("p"),js=o("Enable tqdm progress bar."),xr=g(),be=l("div"),p(mt.$$.fragment),Hs=g(),cr=l("p"),Ys=o("Enable tqdm progress bar."),this.h()},l(e){const i=rn('[data-svelte="svelte-1phssyn"]',document.head);y=n(i,"META",{name:!0,content:!0}),i.forEach(r),Y=f(e),w=n(e,"H1",{class:!0});var ct=a(w);d=n(ct,"A",{id:!0,class:!0,href:!0});var Qs=a(d);A=n(Qs,"SPAN",{});var Xs=a(A);u(G.$$.fragment,Xs),Xs.forEach(r),Qs.forEach(r),ee=f(ct),te=n(ct,"SPAN",{});var Zs=a(te);Le=s(Zs,"Logging"),Zs.forEach(r),ct.forEach(r),U=f(e),z=n(e,"P",{});var el=a(z);Fe=s(el,"\u{1F917} Transformers has a centralized logging system, so that you can setup the verbosity of the library easily."),el.forEach(r),W=f(e),L=n(e,"P",{});var Gr=a(L);re=s(Gr,"Currently the default verbosity of the library is "),oe=n(Gr,"CODE",{});var tl=a(oe);Pe=s(tl,"WARNING"),tl.forEach(r),F=s(Gr,"."),Gr.forEach(r),Ee=f(e),P=n(e,"P",{});var rl=a(P);ke=s(rl,`To change the level of verbosity, just use one of the direct setters. For instance, here is how to change the verbosity
to the INFO level.`),rl.forEach(r),$e=f(e),u(T.$$.fragment,e),ye=f(e),E=n(e,"P",{});var D=a(E);J=s(D,"You can also use the environment variable "),se=n(D,"CODE",{});var ol=a(se);le=s(ol,"TRANSFORMERS_VERBOSITY"),ol.forEach(r),xe=s(D,` to override the default verbosity. You can set it
to one of the following: `),ne=n(D,"CODE",{});var sl=a(ne);K=s(sl,"debug"),sl.forEach(r),Ve=s(D,", "),M=n(D,"CODE",{});var ll=a(M);Ge=s(ll,"info"),ll.forEach(r),O=s(D,", "),k=n(D,"CODE",{});var nl=a(k);I=s(nl,"warning"),nl.forEach(r),ae=s(D,", "),we=n(D,"CODE",{});var al=a(we);dt=s(al,"error"),al.forEach(r),We=s(D,", "),Re=n(D,"CODE",{});var il=a(Re);ie=s(il,"critical"),il.forEach(r),pt=s(D,". For example:"),D.forEach(r),Me=f(e),u(B.$$.fragment,e),Be=f(e),$=n(e,"P",{});var X=a($);ut=s(X,"Additionally, some "),Dt=n(X,"CODE",{});var gl=a(Dt);ro=s(gl,"warnings"),gl.forEach(r),oo=s(X,` can be disabled by setting the environment variable
`),Tt=n(X,"CODE",{});var fl=a(Tt);so=s(fl,"TRANSFORMERS_NO_ADVISORY_WARNINGS"),fl.forEach(r),lo=s(X," to a true value, like "),Ct=n(X,"EM",{});var ml=a(Ct);no=s(ml,"1"),ml.forEach(r),ao=s(X,`. This will disable any warning that is logged using
`),St=n(X,"CODE",{});var cl=a(St);io=s(cl,"logger.warning_advice()"),cl.forEach(r),go=s(X," For example:"),X.forEach(r),ur=f(e),u(qe.$$.fragment,e),hr=f(e),Oe=n(e,"P",{});var Wr=a(Oe);fo=s(Wr,"Here is an example of how to use "),Lt=n(Wr,"CODE",{});var dl=a(Lt);mo=s(dl,"logging"),dl.forEach(r),co=s(Wr," in a module:"),Wr.forEach(r),vr=f(e),u(je.$$.fragment,e),_r=f(e),R=n(e,"P",{});var V=a(R);po=s(V,"Above, a "),Ft=n(V,"CODE",{});var pl=a(Ft);uo=s(pl,"logger"),pl.forEach(r),ho=s(V," instance is created from "),Pt=n(V,"CODE",{});var ul=a(Pt);vo=s(ul,"logging.get_logger(__name__)"),ul.forEach(r),_o=s(V,". If you want to use "),kt=n(V,"CODE",{});var hl=a(kt);bo=s(hl,"logging"),hl.forEach(r),Eo=s(V," in a script, you shouldn\u2019t pass "),xt=n(V,"CODE",{});var vl=a(xt);$o=s(vl,"__name__"),vl.forEach(r),yo=s(V," to "),Vt=n(V,"CODE",{});var _l=a(Vt);wo=s(_l,"logging.get_logger"),_l.forEach(r),Ro=s(V,". For example:"),V.forEach(r),br=f(e),u(He.$$.fragment,e),Er=f(e),Q=n(e,"P",{});var wt=a(Q);Oo=s(wt,`All the methods of this logging module are documented below, the main ones are
`),ht=n(wt,"A",{href:!0});var bl=a(ht);Ao=s(bl,"logging.get_verbosity()"),bl.forEach(r),Io=s(wt,` to get the current level of verbosity in the logger and
`),vt=n(wt,"A",{href:!0});var El=a(vt);No=s(El,"logging.set_verbosity()"),El.forEach(r),Do=s(wt,` to set the verbosity to the level of your choice. In order (from the least
verbose to the most verbose), those levels (with their corresponding int values in parenthesis) are:`),wt.forEach(r),$r=f(e),N=n(e,"UL",{});var Z=a(N);Ae=n(Z,"LI",{});var dr=a(Ae);Gt=n(dr,"CODE",{});var $l=a(Gt);To=s($l,"transformers.logging.CRITICAL"),$l.forEach(r),Co=s(dr," or "),Wt=n(dr,"CODE",{});var yl=a(Wt);So=s(yl,"transformers.logging.FATAL"),yl.forEach(r),Lo=s(dr,` (int value, 50): only report the most
critical errors.`),dr.forEach(r),Fo=f(Z),_t=n(Z,"LI",{});var Us=a(_t);Mt=n(Us,"CODE",{});var wl=a(Mt);Po=s(wl,"transformers.logging.ERROR"),wl.forEach(r),ko=s(Us," (int value, 40): only report errors."),Us.forEach(r),xo=f(Z),Ie=n(Z,"LI",{});var pr=a(Ie);Bt=n(pr,"CODE",{});var Rl=a(Bt);Vo=s(Rl,"transformers.logging.WARNING"),Rl.forEach(r),Go=s(pr," or "),qt=n(pr,"CODE",{});var Ol=a(qt);Wo=s(Ol,"transformers.logging.WARN"),Ol.forEach(r),Mo=s(pr,` (int value, 30): only reports error and
warnings. This the default level used by the library.`),pr.forEach(r),Bo=f(Z),bt=n(Z,"LI",{});var zs=a(bt);jt=n(zs,"CODE",{});var Al=a(jt);qo=s(Al,"transformers.logging.INFO"),Al.forEach(r),jo=s(zs," (int value, 20): reports error, warnings and basic information."),zs.forEach(r),Ho=f(Z),Et=n(Z,"LI",{});var Js=a(Et);Ht=n(Js,"CODE",{});var Il=a(Ht);Yo=s(Il,"transformers.logging.DEBUG"),Il.forEach(r),Uo=s(Js," (int value, 10): report all information."),Js.forEach(r),Z.forEach(r),yr=f(e),x=n(e,"P",{});var Ce=a(x);zo=s(Ce,"By default, "),Yt=n(Ce,"CODE",{});var Nl=a(Yt);Jo=s(Nl,"tqdm"),Nl.forEach(r),Ko=s(Ce," progress bars will be displayed during model download. "),$t=n(Ce,"A",{href:!0});var Dl=a($t);Qo=s(Dl,"logging.disable_progress_bar()"),Dl.forEach(r),Xo=s(Ce," and "),yt=n(Ce,"A",{href:!0});var Tl=a(yt);Zo=s(Tl,"logging.enable_progress_bar()"),Tl.forEach(r),es=s(Ce," can be used to suppress or unsuppress this behavior."),Ce.forEach(r),wr=f(e),ge=n(e,"H2",{class:!0});var Mr=a(ge);Ne=n(Mr,"A",{id:!0,class:!0,href:!0});var Cl=a(Ne);Ut=n(Cl,"SPAN",{});var Sl=a(Ut);u(Ye.$$.fragment,Sl),Sl.forEach(r),Cl.forEach(r),ts=f(Mr),zt=n(Mr,"SPAN",{});var Ll=a(zt);rs=s(Ll,"Base setters"),Ll.forEach(r),Mr.forEach(r),Rr=f(e),fe=n(e,"DIV",{class:!0});var Br=a(fe);u(Ue.$$.fragment,Br),os=f(Br),ze=n(Br,"P",{});var qr=a(ze);ss=s(qr,"Set the verbosity to the "),Jt=n(qr,"CODE",{});var Fl=a(Jt);ls=s(Fl,"ERROR"),Fl.forEach(r),ns=s(qr," level."),qr.forEach(r),Br.forEach(r),Or=f(e),me=n(e,"DIV",{class:!0});var jr=a(me);u(Je.$$.fragment,jr),as=f(jr),Ke=n(jr,"P",{});var Hr=a(Ke);is=s(Hr,"Set the verbosity to the "),Kt=n(Hr,"CODE",{});var Pl=a(Kt);gs=s(Pl,"WARNING"),Pl.forEach(r),fs=s(Hr," level."),Hr.forEach(r),jr.forEach(r),Ar=f(e),ce=n(e,"DIV",{class:!0});var Yr=a(ce);u(Qe.$$.fragment,Yr),ms=f(Yr),Xe=n(Yr,"P",{});var Ur=a(Xe);cs=s(Ur,"Set the verbosity to the "),Qt=n(Ur,"CODE",{});var kl=a(Qt);ds=s(kl,"INFO"),kl.forEach(r),ps=s(Ur," level."),Ur.forEach(r),Yr.forEach(r),Ir=f(e),de=n(e,"DIV",{class:!0});var zr=a(de);u(Ze.$$.fragment,zr),us=f(zr),et=n(zr,"P",{});var Jr=a(et);hs=s(Jr,"Set the verbosity to the "),Xt=n(Jr,"CODE",{});var xl=a(Xt);vs=s(xl,"DEBUG"),xl.forEach(r),_s=s(Jr," level."),Jr.forEach(r),zr.forEach(r),Nr=f(e),pe=n(e,"H2",{class:!0});var Kr=a(pe);De=n(Kr,"A",{id:!0,class:!0,href:!0});var Vl=a(De);Zt=n(Vl,"SPAN",{});var Gl=a(Zt);u(tt.$$.fragment,Gl),Gl.forEach(r),Vl.forEach(r),bs=f(Kr),er=n(Kr,"SPAN",{});var Wl=a(er);Es=s(Wl,"Other functions"),Wl.forEach(r),Kr.forEach(r),Dr=f(e),q=n(e,"DIV",{class:!0});var Rt=a(q);u(rt.$$.fragment,Rt),$s=f(Rt),tr=n(Rt,"P",{});var Ml=a(tr);ys=s(Ml,"Return the current level for the \u{1F917} Transformers\u2019s root logger as an int."),Ml.forEach(r),ws=f(Rt),u(Te.$$.fragment,Rt),Rt.forEach(r),Tr=f(e),ue=n(e,"DIV",{class:!0});var Qr=a(ue);u(ot.$$.fragment,Qr),Rs=f(Qr),rr=n(Qr,"P",{});var Bl=a(rr);Os=s(Bl,"Set the verbosity level for the \u{1F917} Transformers\u2019s root logger."),Bl.forEach(r),Qr.forEach(r),Cr=f(e),j=n(e,"DIV",{class:!0});var Ot=a(j);u(st.$$.fragment,Ot),As=f(Ot),or=n(Ot,"P",{});var ql=a(or);Is=s(ql,"Return a logger with the specified name."),ql.forEach(r),Ns=f(Ot),sr=n(Ot,"P",{});var jl=a(sr);Ds=s(jl,"This function is not supposed to be directly accessed unless you are writing a custom transformers module."),jl.forEach(r),Ot.forEach(r),Sr=f(e),he=n(e,"DIV",{class:!0});var Xr=a(he);u(lt.$$.fragment,Xr),Ts=f(Xr),lr=n(Xr,"P",{});var Hl=a(lr);Cs=s(Hl,"Enable the default handler of the HuggingFace Transformers\u2019s root logger."),Hl.forEach(r),Xr.forEach(r),Lr=f(e),ve=n(e,"DIV",{class:!0});var Zr=a(ve);u(nt.$$.fragment,Zr),Ss=f(Zr),nr=n(Zr,"P",{});var Yl=a(nr);Ls=s(Yl,"Disable the default handler of the HuggingFace Transformers\u2019s root logger."),Yl.forEach(r),Zr.forEach(r),Fr=f(e),C=n(e,"DIV",{class:!0});var Se=a(C);u(at.$$.fragment,Se),Fs=f(Se),ar=n(Se,"P",{});var Ul=a(ar);Ps=s(Ul,"Enable explicit formatting for every HuggingFace Transformers\u2019s logger. The explicit formatter is as follows:"),Ul.forEach(r),ks=f(Se),u(it.$$.fragment,Se),xs=f(Se),ir=n(Se,"P",{});var zl=a(ir);Vs=s(zl,"All handlers currently bound to the root logger are affected by this method."),zl.forEach(r),Se.forEach(r),Pr=f(e),H=n(e,"DIV",{class:!0});var At=a(H);u(gt.$$.fragment,At),Gs=f(At),gr=n(At,"P",{});var Jl=a(gr);Ws=s(Jl,"Resets the formatting for HuggingFace Transformers\u2019s loggers."),Jl.forEach(r),Ms=f(At),fr=n(At,"P",{});var Kl=a(fr);Bs=s(Kl,"All handlers currently bound to the root logger are affected by this method."),Kl.forEach(r),At.forEach(r),kr=f(e),_e=n(e,"DIV",{class:!0});var eo=a(_e);u(ft.$$.fragment,eo),qs=f(eo),mr=n(eo,"P",{});var Ql=a(mr);js=s(Ql,"Enable tqdm progress bar."),Ql.forEach(r),eo.forEach(r),xr=f(e),be=n(e,"DIV",{class:!0});var to=a(be);u(mt.$$.fragment,to),Hs=f(to),cr=n(to,"P",{});var Xl=a(cr);Ys=s(Xl,"Enable tqdm progress bar."),Xl.forEach(r),to.forEach(r),this.h()},h(){c(y,"name","hf:doc:metadata"),c(y,"content",JSON.stringify(nn)),c(d,"id","logging"),c(d,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d,"href","#logging"),c(w,"class","relative group"),c(ht,"href","/docs/transformers/master/en/main_classes/logging#transformers.utils.logging.get_verbosity"),c(vt,"href","/docs/transformers/master/en/main_classes/logging#transformers.utils.logging.set_verbosity"),c($t,"href","/docs/transformers/master/en/main_classes/logging#transformers.utils.logging.disable_progress_bar"),c(yt,"href","/docs/transformers/master/en/main_classes/logging#transformers.utils.logging.enable_progress_bar"),c(Ne,"id","transformers.utils.logging.set_verbosity_error"),c(Ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ne,"href","#transformers.utils.logging.set_verbosity_error"),c(ge,"class","relative group"),c(fe,"class","docstring"),c(me,"class","docstring"),c(ce,"class","docstring"),c(de,"class","docstring"),c(De,"id","transformers.utils.logging.get_verbosity"),c(De,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(De,"href","#transformers.utils.logging.get_verbosity"),c(pe,"class","relative group"),c(q,"class","docstring"),c(ue,"class","docstring"),c(j,"class","docstring"),c(he,"class","docstring"),c(ve,"class","docstring"),c(C,"class","docstring"),c(H,"class","docstring"),c(_e,"class","docstring"),c(be,"class","docstring")},m(e,i){t(document.head,y),m(e,Y,i),m(e,w,i),t(w,d),t(d,A),h(G,A,null),t(w,ee),t(w,te),t(te,Le),m(e,U,i),m(e,z,i),t(z,Fe),m(e,W,i),m(e,L,i),t(L,re),t(L,oe),t(oe,Pe),t(L,F),m(e,Ee,i),m(e,P,i),t(P,ke),m(e,$e,i),h(T,e,i),m(e,ye,i),m(e,E,i),t(E,J),t(E,se),t(se,le),t(E,xe),t(E,ne),t(ne,K),t(E,Ve),t(E,M),t(M,Ge),t(E,O),t(E,k),t(k,I),t(E,ae),t(E,we),t(we,dt),t(E,We),t(E,Re),t(Re,ie),t(E,pt),m(e,Me,i),h(B,e,i),m(e,Be,i),m(e,$,i),t($,ut),t($,Dt),t(Dt,ro),t($,oo),t($,Tt),t(Tt,so),t($,lo),t($,Ct),t(Ct,no),t($,ao),t($,St),t(St,io),t($,go),m(e,ur,i),h(qe,e,i),m(e,hr,i),m(e,Oe,i),t(Oe,fo),t(Oe,Lt),t(Lt,mo),t(Oe,co),m(e,vr,i),h(je,e,i),m(e,_r,i),m(e,R,i),t(R,po),t(R,Ft),t(Ft,uo),t(R,ho),t(R,Pt),t(Pt,vo),t(R,_o),t(R,kt),t(kt,bo),t(R,Eo),t(R,xt),t(xt,$o),t(R,yo),t(R,Vt),t(Vt,wo),t(R,Ro),m(e,br,i),h(He,e,i),m(e,Er,i),m(e,Q,i),t(Q,Oo),t(Q,ht),t(ht,Ao),t(Q,Io),t(Q,vt),t(vt,No),t(Q,Do),m(e,$r,i),m(e,N,i),t(N,Ae),t(Ae,Gt),t(Gt,To),t(Ae,Co),t(Ae,Wt),t(Wt,So),t(Ae,Lo),t(N,Fo),t(N,_t),t(_t,Mt),t(Mt,Po),t(_t,ko),t(N,xo),t(N,Ie),t(Ie,Bt),t(Bt,Vo),t(Ie,Go),t(Ie,qt),t(qt,Wo),t(Ie,Mo),t(N,Bo),t(N,bt),t(bt,jt),t(jt,qo),t(bt,jo),t(N,Ho),t(N,Et),t(Et,Ht),t(Ht,Yo),t(Et,Uo),m(e,yr,i),m(e,x,i),t(x,zo),t(x,Yt),t(Yt,Jo),t(x,Ko),t(x,$t),t($t,Qo),t(x,Xo),t(x,yt),t(yt,Zo),t(x,es),m(e,wr,i),m(e,ge,i),t(ge,Ne),t(Ne,Ut),h(Ye,Ut,null),t(ge,ts),t(ge,zt),t(zt,rs),m(e,Rr,i),m(e,fe,i),h(Ue,fe,null),t(fe,os),t(fe,ze),t(ze,ss),t(ze,Jt),t(Jt,ls),t(ze,ns),m(e,Or,i),m(e,me,i),h(Je,me,null),t(me,as),t(me,Ke),t(Ke,is),t(Ke,Kt),t(Kt,gs),t(Ke,fs),m(e,Ar,i),m(e,ce,i),h(Qe,ce,null),t(ce,ms),t(ce,Xe),t(Xe,cs),t(Xe,Qt),t(Qt,ds),t(Xe,ps),m(e,Ir,i),m(e,de,i),h(Ze,de,null),t(de,us),t(de,et),t(et,hs),t(et,Xt),t(Xt,vs),t(et,_s),m(e,Nr,i),m(e,pe,i),t(pe,De),t(De,Zt),h(tt,Zt,null),t(pe,bs),t(pe,er),t(er,Es),m(e,Dr,i),m(e,q,i),h(rt,q,null),t(q,$s),t(q,tr),t(tr,ys),t(q,ws),h(Te,q,null),m(e,Tr,i),m(e,ue,i),h(ot,ue,null),t(ue,Rs),t(ue,rr),t(rr,Os),m(e,Cr,i),m(e,j,i),h(st,j,null),t(j,As),t(j,or),t(or,Is),t(j,Ns),t(j,sr),t(sr,Ds),m(e,Sr,i),m(e,he,i),h(lt,he,null),t(he,Ts),t(he,lr),t(lr,Cs),m(e,Lr,i),m(e,ve,i),h(nt,ve,null),t(ve,Ss),t(ve,nr),t(nr,Ls),m(e,Fr,i),m(e,C,i),h(at,C,null),t(C,Fs),t(C,ar),t(ar,Ps),t(C,ks),h(it,C,null),t(C,xs),t(C,ir),t(ir,Vs),m(e,Pr,i),m(e,H,i),h(gt,H,null),t(H,Gs),t(H,gr),t(gr,Ws),t(H,Ms),t(H,fr),t(fr,Bs),m(e,kr,i),m(e,_e,i),h(ft,_e,null),t(_e,qs),t(_e,mr),t(mr,js),m(e,xr,i),m(e,be,i),h(mt,be,null),t(be,Hs),t(be,cr),t(cr,Ys),Vr=!0},p(e,[i]){const ct={};i&2&&(ct.$$scope={dirty:i,ctx:e}),Te.$set(ct)},i(e){Vr||(v(G.$$.fragment,e),v(T.$$.fragment,e),v(B.$$.fragment,e),v(qe.$$.fragment,e),v(je.$$.fragment,e),v(He.$$.fragment,e),v(Ye.$$.fragment,e),v(Ue.$$.fragment,e),v(Je.$$.fragment,e),v(Qe.$$.fragment,e),v(Ze.$$.fragment,e),v(tt.$$.fragment,e),v(rt.$$.fragment,e),v(Te.$$.fragment,e),v(ot.$$.fragment,e),v(st.$$.fragment,e),v(lt.$$.fragment,e),v(nt.$$.fragment,e),v(at.$$.fragment,e),v(it.$$.fragment,e),v(gt.$$.fragment,e),v(ft.$$.fragment,e),v(mt.$$.fragment,e),Vr=!0)},o(e){_(G.$$.fragment,e),_(T.$$.fragment,e),_(B.$$.fragment,e),_(qe.$$.fragment,e),_(je.$$.fragment,e),_(He.$$.fragment,e),_(Ye.$$.fragment,e),_(Ue.$$.fragment,e),_(Je.$$.fragment,e),_(Qe.$$.fragment,e),_(Ze.$$.fragment,e),_(tt.$$.fragment,e),_(rt.$$.fragment,e),_(Te.$$.fragment,e),_(ot.$$.fragment,e),_(st.$$.fragment,e),_(lt.$$.fragment,e),_(nt.$$.fragment,e),_(at.$$.fragment,e),_(it.$$.fragment,e),_(gt.$$.fragment,e),_(ft.$$.fragment,e),_(mt.$$.fragment,e),Vr=!1},d(e){r(y),e&&r(Y),e&&r(w),b(G),e&&r(U),e&&r(z),e&&r(W),e&&r(L),e&&r(Ee),e&&r(P),e&&r($e),b(T,e),e&&r(ye),e&&r(E),e&&r(Me),b(B,e),e&&r(Be),e&&r($),e&&r(ur),b(qe,e),e&&r(hr),e&&r(Oe),e&&r(vr),b(je,e),e&&r(_r),e&&r(R),e&&r(br),b(He,e),e&&r(Er),e&&r(Q),e&&r($r),e&&r(N),e&&r(yr),e&&r(x),e&&r(wr),e&&r(ge),b(Ye),e&&r(Rr),e&&r(fe),b(Ue),e&&r(Or),e&&r(me),b(Je),e&&r(Ar),e&&r(ce),b(Qe),e&&r(Ir),e&&r(de),b(Ze),e&&r(Nr),e&&r(pe),b(tt),e&&r(Dr),e&&r(q),b(rt),b(Te),e&&r(Tr),e&&r(ue),b(ot),e&&r(Cr),e&&r(j),b(st),e&&r(Sr),e&&r(he),b(lt),e&&r(Lr),e&&r(ve),b(nt),e&&r(Fr),e&&r(C),b(at),b(it),e&&r(Pr),e&&r(H),b(gt),e&&r(kr),e&&r(_e),b(ft),e&&r(xr),e&&r(be),b(mt)}}}const nn={local:"logging",sections:[{local:"transformers.utils.logging.set_verbosity_error",title:"Base setters"},{local:"transformers.utils.logging.get_verbosity",title:"Other functions"}],title:"Logging"};function an(Nt,y,Y){let{fw:w}=y;return Nt.$$set=d=>{"fw"in d&&Y(0,w=d.fw)},[w]}class un extends Zl{constructor(y){super();en(this,y,an,ln,tn,{fw:0})}}export{un as default,nn as metadata};
